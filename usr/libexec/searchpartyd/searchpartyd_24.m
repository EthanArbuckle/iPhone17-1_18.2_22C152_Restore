uint64_t sub_1010B496C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001CD44(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 312))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B49CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 304))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B4A2C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 216))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B4A8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 192))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B4AEC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 48))(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1010B4B44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1010B4BA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

unsigned char *storeEnumTagSinglePayload for Configuration.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1010B4CA0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Configuration.CodingKeys()
{
  return &type metadata for Configuration.CodingKeys;
}

unint64_t sub_1010B4CDC()
{
  unint64_t result = qword_101669BC0;
  if (!qword_101669BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669BC0);
  }
  return result;
}

unint64_t sub_1010B4D34()
{
  unint64_t result = qword_101669BC8;
  if (!qword_101669BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669BC8);
  }
  return result;
}

unint64_t sub_1010B4D8C()
{
  unint64_t result = qword_101669BD0;
  if (!qword_101669BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669BD0);
  }
  return result;
}

uint64_t sub_1010B4DE0(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101669BE0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1010B5824();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1010B4FB8()
{
  uint64_t result = 1684628325;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x644970696863;
      break;
    case 2:
      uint64_t result = 0x754E6C6169726573;
      break;
    case 3:
      uint64_t result = 0x49746375646F7270;
      break;
    case 4:
      uint64_t result = 0x6449726F646E6576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1010B5064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1010B5A84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1010B508C(uint64_t a1)
{
  unint64_t v2 = sub_1010B5824();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010B50C8(uint64_t a1)
{
  unint64_t v2 = sub_1010B5824();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010B5104(void *a1)
{
  return sub_1010B4DE0(a1);
}

void sub_1010B5140(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v44 = v6;
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  uint64_t v8 = v44;
  swift_bridgeObjectRelease();
  id v9 = [self currentDevice];
  if (v9)
  {
    v10 = v9;
    id v11 = [v9 serverFriendlyDescription];

    if (v11)
    {
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      char v15 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v44 = v8;
      sub_10016C0FC(v12, v14, 0xD000000000000011, 0x80000001013F64E0, v15);
      uint64_t v16 = v44;
      swift_bridgeObjectRelease();
      Date.init()();
      uint64_t v17 = Date.epoch.getter();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      uint64_t v44 = v17;
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v20 = v19;
      char v21 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v44 = v16;
      sub_10016C0FC(v18, v20, 0xD000000000000015, 0x80000001013F6500, v21);
      uint64_t v22 = v44;
      swift_bridgeObjectRelease();
      uint64_t v44 = 1;
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v25 = v24;
      char v26 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v44 = v22;
      sub_10016C0FC(v23, v25, 0xD000000000000013, 0x80000001013F6520, v26);
      uint64_t v27 = v44;
      swift_bridgeObjectRelease();
      id v28 = sub_100903ACC();
      uint64_t v30 = v29;
      char v31 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v44 = v27;
      sub_10016C0FC((uint64_t)v28, v30, 0x6567412D72657355, 0xEA0000000000746ELL, v31);
      v43[4] = v44;
      swift_bridgeObjectRelease();
      uint64_t v32 = Data.hexString.getter();
      uint64_t v34 = v33;
      uint64_t v35 = Data.hexString.getter();
      uint64_t v37 = v36;
      uint64_t v38 = a1[4];
      uint64_t v39 = a1[5];
      uint64_t v40 = a1[6];
      uint64_t v41 = a1[7];
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      swift_bridgeObjectRetain();
      uint64_t v42 = JSONEncoder.init()();
      v43[1] = v32;
      uint64_t v44 = v32;
      uint64_t v45 = v34;
      v43[3] = v34;
      uint64_t v46 = v35;
      uint64_t v47 = v37;
      uint64_t v48 = v38;
      uint64_t v49 = v39;
      uint64_t v50 = v40;
      uint64_t v51 = v41;
      sub_1010B55FC();
      v43[2] = v42;
      dispatch thunk of JSONEncoder.encode<A>(_:)();
      swift_release();
      sub_1010B5650(a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t sub_1010B55FC()
{
  unint64_t result = qword_101669BD8;
  if (!qword_101669BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669BD8);
  }
  return result;
}

uint64_t *sub_1010B5650(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(v2, v3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithCopy for UnpairRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for UnpairRequestContent(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t assignWithTake for UnpairRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for UnpairRequestContent()
{
  return &type metadata for UnpairRequestContent;
}

ValueMetadata *type metadata accessor for UnpairRequest()
{
  return &type metadata for UnpairRequest;
}

unint64_t sub_1010B5824()
{
  unint64_t result = qword_101669BE8;
  if (!qword_101669BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669BE8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for UnpairRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010B5944);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnpairRequestContent.CodingKeys()
{
  return &type metadata for UnpairRequestContent.CodingKeys;
}

unint64_t sub_1010B5980()
{
  unint64_t result = qword_101669BF0;
  if (!qword_101669BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669BF0);
  }
  return result;
}

unint64_t sub_1010B59D8()
{
  unint64_t result = qword_101669BF8;
  if (!qword_101669BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669BF8);
  }
  return result;
}

unint64_t sub_1010B5A30()
{
  unint64_t result = qword_101669C00;
  if (!qword_101669C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669C00);
  }
  return result;
}

uint64_t sub_1010B5A84(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684628325 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x644970696863 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1010B5CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  sub_1000362FC();
  DataProtocol.intValue.getter();
  DataProtocol.intValue.getter();
  swift_bridgeObjectRetain();
  sub_1000361E0(a7, a8);
  sub_1000361E0(a9, a10);
  sub_10098ED58();
  uint64_t v14 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v16 = v15;
  sub_1000361E0(a11, a12);
  sub_1000361E0(v14, v16);
  sub_10098EDAC();
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(a7, a8);
  sub_10001CFB8(a9, a10);
  swift_release();
  sub_10001CFB8(v14, v16);
  sub_10001CFB8(a11, a12);
  sub_10001CFB8(v14, v16);
  return v17;
}

uint64_t sub_1010B6138()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170F1B0);
  sub_100010324(v0, (uint64_t)qword_10170F1B0);
  return Logger.init(subsystem:category:)();
}

uint64_t DeviceIdentitySignature.leafCertificate.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100037A38(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t DeviceIdentitySignature.intermediateCertificate.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_100037A38(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t DeviceIdentitySignature.encodedCerts.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DeviceIdentityUtility.signDataWithDeviceIdentity(dataToSign:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[18] = a3;
  v4[19] = v3;
  v4[16] = a1;
  v4[17] = a2;
  return _swift_task_switch(sub_1010B6278, v3, 0);
}

uint64_t sub_1010B6278()
{
  char v1 = *(unsigned char *)(*(void *)(v0 + 152) + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType);
  BOOL v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v2;
  *BOOL v2 = v0;
  v2[1] = sub_1010B6324;
  return sub_1004E0788(v0 + 80, v1);
}

uint64_t sub_1010B6324()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152);
  swift_task_dealloc();
  return _swift_task_switch(sub_1010B6434, v1, 0);
}

uint64_t sub_1010B6434()
{
  if (*(unsigned char *)(v0 + 122))
  {
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v5 = *(void *)(v0 + 112);
    char v6 = *(unsigned char *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v9 = *(void *)(v0 + 96);
    v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v10;
    void *v10 = v0;
    v10[1] = sub_1010B6580;
    return sub_1010B6CB4(v5, v6, v7, v8, v9, v4);
  }
  else
  {
    sub_1010B69B8(v0 + 80);
    sub_1010B69F0();
    swift_allocError();
    *uint64_t v1 = 4;
    swift_willThrow();
    BOOL v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_1010B6580(uint64_t a1, uint64_t a2)
{
  char v6 = (void *)*v3;
  uint64_t v7 = (void *)*v3;
  v6[22] = a1;
  v6[23] = a2;
  v6[24] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = v6[19];
    return _swift_task_switch(sub_1010B68F0, v8, 0);
  }
  else
  {
    sub_1010B69B8((uint64_t)(v6 + 10));
    uint64_t v9 = (void *)swift_task_alloc();
    v6[25] = v9;
    *uint64_t v9 = v7;
    v9[1] = sub_1010B6730;
    uint64_t v10 = v6[18];
    uint64_t v11 = v6[17];
    return sub_1010B8380((uint64_t)(v6 + 2), v11, v10, a1, a2);
  }
}

uint64_t sub_1010B6730()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 152);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v4 = sub_1010B6954;
  }
  else {
    uint64_t v4 = sub_1010B6878;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1010B6878()
{
  uint64_t v1 = *(_OWORD **)(v0 + 128);

  long long v2 = *(_OWORD *)(v0 + 16);
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 64);
  v1[2] = *(_OWORD *)(v0 + 48);
  v1[3] = v4;
  *uint64_t v1 = v2;
  v1[1] = v3;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1010B68F0()
{
  sub_1010B69B8(v0 + 80);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1010B6954()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1010B69B8(uint64_t a1)
{
  return a1;
}

unint64_t sub_1010B69F0()
{
  unint64_t result = qword_101669C18;
  if (!qword_101669C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669C18);
  }
  return result;
}

void *sub_1010B6A44()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = v0 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  swift_beginAccess();
  sub_10001E2BC(v11, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10001E324((uint64_t)v3);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v3, v4);
  static Date.trustedNow.getter((uint64_t)v8);
  char v12 = static Date.< infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  if ((v12 & 1) == 0)
  {
    v13(v10, v4);
    return 0;
  }
  uint64_t v14 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey);
  if (v14)
  {
    uint64_t v15 = *(void *)(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) + 16);
    id v16 = v14;
    v13(v10, v4);
    if (v15 != 2)
    {

      return 0;
    }
    swift_bridgeObjectRetain();
  }
  else
  {
    v13(v10, v4);
  }
  return v14;
}

uint64_t sub_1010B6CB4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 736) = v6;
  *(void *)(v7 + 728) = a6;
  *(void *)(v7 + 720) = a5;
  *(void *)(v7 + 712) = a4;
  *(void *)(v7 + 704) = a3;
  *(unsigned char *)(v7 + 817) = a2;
  *(void *)(v7 + 696) = a1;
  uint64_t v8 = type metadata accessor for Date();
  *(void *)(v7 + 744) = v8;
  *(void *)(v7 + 752) = *(void *)(v8 - 8);
  *(void *)(v7 + 760) = swift_task_alloc();
  *(void *)(v7 + 768) = swift_task_alloc();
  return _swift_task_switch(sub_1010B6D9C, v6, 0);
}

uint64_t sub_1010B6D9C()
{
  uint64_t v59 = v0;
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 576) = 0x7365547265646E75;
  *(void *)(v0 + 584) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 816))
  {
    sub_1010B69F0();
    swift_allocError();
    *uint64_t v2 = 2;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  uint64_t v5 = sub_1010B6A44();
  if (v5)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v6;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void *, uint64_t))(v0 + 8);
    return v9(v7, v8);
  }
  uint64_t v10 = *(void *)(v0 + 696);
  static Date.trustedNow.getter(*(void *)(v0 + 760));
  if ((unsigned __int128)(v10 * (__int128)60) >> 64 == (60 * v10) >> 63)
  {
    uint64_t v57 = v0 + 56;
    uint64_t v53 = v0 + 176;
    uint64_t v11 = *(void *)(v0 + 760);
    uint64_t v12 = *(void *)(v0 + 752);
    v52 = (_OWORD *)(v0 + 376);
    uint64_t v13 = *(void *)(v0 + 744);
    uint64_t v55 = v0 + 96;
    v56 = (_OWORD *)(v0 + 440);
    int v14 = *(unsigned __int8 *)(v0 + 817);
    v54 = (_OWORD *)(v0 + 504);
    uint64_t v15 = *(void *)(v0 + 696);
    Date.addingTimeInterval(_:)();
    id v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    *(void *)(v0 + 776) = v16;
    *(void *)(v0 + 784) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v16(v11, v13);
    *(void *)(v0 + 680) = &_swiftEmptyDictionarySingleton;
    *(void *)(v0 + 624) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v0 + 632) = v17;
    AnyHashable.init<A>(_:)();
    *(void *)(v0 + 240) = &type metadata for Int;
    *(void *)(v0 + 216) = v15;
    sub_100173E4C((_OWORD *)(v0 + 216), (_OWORD *)(v0 + 248));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v58[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
    sub_10016BFB0((_OWORD *)(v0 + 248), v0 + 136, isUniquelyReferenced_nonNull_native);
    uint64_t v19 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    sub_1004268DC(v0 + 136);
    if (v14 == 1)
    {
      *(void *)(v0 + 640) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v0 + 648) = v20;
      AnyHashable.init<A>(_:)();
      sub_10000588C(&qword_1016552B0);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_101347BA0;
      *(void *)(v21 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v21 + 40) = v22;
      *(void *)(v21 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v21 + 56) = v23;
      *(void *)(v0 + 304) = sub_10000588C(&qword_101654A30);
      *(void *)(v0 + 280) = v21;
      sub_100173E4C((_OWORD *)(v0 + 280), (_OWORD *)(v0 + 472));
      char v24 = swift_isUniquelyReferenced_nonNull_native();
      v58[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
      *(void *)(v0 + 680) = 0x8000000000000000;
      sub_10016BFB0((_OWORD *)(v0 + 472), v0 + 16, v24);
      uint64_t v19 = (void *)v58[0];
      swift_bridgeObjectRelease();
      sub_1004268DC(v0 + 16);
    }
    uint64_t v1 = v0 + 680;
    uint64_t v25 = *(void *)(v0 + 728);
    uint64_t v26 = *(void *)(v0 + 720);
    uint64_t v27 = *(void *)(v0 + 712);
    uint64_t v28 = *(void *)(v0 + 704);
    *(void *)(v0 + 656) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v0 + 664) = v29;
    AnyHashable.init<A>(_:)();
    *(void *)(v0 + 368) = &type metadata for String;
    *(void *)(v0 + 344) = v28;
    *(void *)(v0 + 352) = v27;
    sub_100173E4C((_OWORD *)(v0 + 344), v52);
    swift_bridgeObjectRetain();
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    sub_10016BFB0(v52, v53, v30);
    swift_bridgeObjectRelease();
    sub_1004268DC(v53);
    *(void *)(v0 + 592) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v0 + 600) = v31;
    AnyHashable.init<A>(_:)();
    *(void *)(v0 + 336) = &type metadata for String;
    *(void *)(v0 + 312) = v26;
    *(void *)(v0 + 320) = v25;
    sub_100173E4C((_OWORD *)(v0 + 312), v54);
    swift_bridgeObjectRetain();
    char v32 = swift_isUniquelyReferenced_nonNull_native();
    sub_10016BFB0(v54, v55, v32);
    swift_bridgeObjectRelease();
    sub_1004268DC(v55);
    *(void *)(v0 + 560) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v0 + 568) = v33;
    AnyHashable.init<A>(_:)();
    *(void *)(v0 + 432) = &type metadata for Int;
    *(void *)(v0 + 408) = 1;
    sub_100173E4C((_OWORD *)(v0 + 408), v56);
    char v34 = swift_isUniquelyReferenced_nonNull_native();
    v58[0] = (uint64_t)v19;
    sub_10016BFB0(v56, v57, v34);
    *(void *)(v0 + 680) = v19;
    swift_bridgeObjectRelease();
    sub_1004268DC(v57);
    if (qword_101637408 == -1) {
      goto LABEL_15;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_15:
  uint64_t v35 = type metadata accessor for Logger();
  sub_100010324(v35, (uint64_t)qword_10170F1B0);
  swift_retain_n();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  BOOL v38 = os_log_type_enabled(v36, v37);
  uint64_t v39 = *(void *)(v0 + 736);
  if (v38)
  {
    uint64_t v40 = swift_slowAlloc();
    v58[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136446466;
    unint64_t v41 = sub_1004E061C(*(unsigned char *)(v39 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType));
    *(void *)(v0 + 688) = sub_1008FA0F0(v41, v42, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2080;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v43 = Dictionary.description.getter();
    unint64_t v45 = v44;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 672) = sub_1008FA0F0(v43, v45, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Getting %{public}s attestation certs and key with options - %s.", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v46 = *(void *)(v0 + 768);
  uint64_t v47 = *(void *)(v0 + 736);
  uint64_t v48 = sub_1010BA83C(&qword_101669DB0, (void (*)(uint64_t))type metadata accessor for DeviceIdentityUtility);
  uint64_t v49 = (void *)swift_task_alloc();
  *(void *)(v0 + 792) = v49;
  v49[2] = v1;
  v49[3] = v47;
  v49[4] = v46;
  uint64_t v50 = (void *)swift_task_alloc();
  *(void *)(v0 + 800) = v50;
  uint64_t v51 = sub_10000588C(&qword_101669DB8);
  *uint64_t v50 = v0;
  v50[1] = sub_1010B76BC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 608, v47, v48, 0xD000000000000062, 0x8000000101420CA0, sub_1010BA884, v49, v51);
}

uint64_t sub_1010B76BC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 808) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 736);
  swift_task_dealloc();
  if (v0) {
    uint64_t v4 = sub_1010B78A8;
  }
  else {
    uint64_t v4 = sub_1010B7804;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1010B7804()
{
  (*(void (**)(void, void))(v0 + 776))(*(void *)(v0 + 768), *(void *)(v0 + 744));
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 608);
  uint64_t v2 = *(void *)(v0 + 616);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v3(v1, v2);
}

uint64_t sub_1010B78A8()
{
  (*(void (**)(void, void))(v0 + 776))(*(void *)(v0 + 768), *(void *)(v0 + 744));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1010B7934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a1;
  uint64_t v19 = a4;
  uint64_t v21 = a3;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v17 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_10000588C(&qword_101669DC0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v18, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v19, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v12 = (v9 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + v12 + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v11, v10, v7);
  *(void *)(v14 + v12) = v21;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v14 + v13, (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  aBlock[4] = sub_1010BA9F8;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1010B82CC;
  aBlock[3] = &unk_101606F00;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  Class v16 = isa;
  DeviceIdentityIssueClientCertificateWithCompletion();
  _Block_release(v15);
}

void sub_1010B7C24(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1010B7CB4(a3, a4, a1, a2, a5, a6);
}

void sub_1010B7CB4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  Class v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v60 - v17;
  if (a1)
  {
    swift_errorRetain();
    if (qword_101637408 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170F1B0);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      uint64_t v69 = v6;
      *(_DWORD *)uint64_t v22 = 138543362;
      swift_errorRetain();
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v67 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v23 = v24;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "DeviceIdentityUtility: Unable to get attestation certs and key. Error - %{public}@.", v22, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v67 = a1;
    goto LABEL_24;
  }
  if (!a3)
  {
    sub_1010B69F0();
    uint64_t v40 = swift_allocError();
    *unint64_t v41 = 0;
    uint64_t v67 = v40;
LABEL_24:
    sub_10000588C(&qword_101669DC0);
    CheckedContinuation.resume(throwing:)();
    return;
  }
  if (!a4 || *(void *)(a4 + 16) != 2 || (unint64_t v25 = (unint64_t)sub_1004C75F0(a4)) == 0)
  {
    sub_1010B69F0();
    uint64_t v38 = swift_allocError();
    *uint64_t v39 = 1;
    uint64_t v67 = v38;
    sub_10000588C(&qword_101669DC0);
    CheckedContinuation.resume(throwing:)();

    return;
  }
  unint64_t v26 = v25;
  uint64_t v63 = a5;
  v64 = a3;
  uint64_t v61 = a6;
  v62 = v16;
  uint64_t v60 = v18;
  if (v25 >> 62) {
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v27 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v69 = v6;
  uint64_t v65 = a2;
  unint64_t v66 = v26;
  if (!v27)
  {
    uint64_t v29 = _swiftEmptyArrayStorage;
LABEL_28:
    swift_bridgeObjectRelease();
    uint64_t v42 = type metadata accessor for Date();
    uint64_t v43 = *(void *)(v42 - 8);
    uint64_t v44 = (uint64_t)v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v60, v61, v42);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v44, 0, 1, v42);
    uint64_t v45 = (uint64_t)v62;
    sub_1000C69AC(v44, (uint64_t)v62);
    uint64_t v46 = v63;
    uint64_t v47 = v63 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_100C11FB8(v45, v47);
    swift_endAccess();
    *(void *)(v46 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v48 = *(void **)(v46 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey);
    uint64_t v49 = v64;
    *(void *)(v46 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = v64;
    id v50 = v49;
    swift_bridgeObjectRelease();

    uint64_t v67 = (uint64_t)v50;
    v68 = v29;
    sub_10000588C(&qword_101669DC0);
    CheckedContinuation.resume(returning:)();
    return;
  }
  if (v27 >= 1)
  {
    if ((v26 & 0xC000000000000001) != 0)
    {
      uint64_t v28 = 0;
      uint64_t v29 = _swiftEmptyArrayStorage;
      do
      {
        char v30 = (__SecCertificate *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        CFDataRef v31 = SecCertificateCopyData(v30);
        uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v34 = v33;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v29 = sub_100A6EA38(0, v29[2] + 1, 1, v29);
        }
        unint64_t v36 = v29[2];
        unint64_t v35 = v29[3];
        if (v36 >= v35 >> 1) {
          uint64_t v29 = sub_100A6EA38((void *)(v35 > 1), v36 + 1, 1, v29);
        }
        ++v28;
        v29[2] = v36 + 1;
        os_log_type_t v37 = &v29[2 * v36];
        v37[4] = v32;
        v37[5] = v34;
        swift_unknownObjectRelease();
      }
      while (v27 != v28);
    }
    else
    {
      uint64_t v51 = (id *)(v26 + 32);
      uint64_t v29 = _swiftEmptyArrayStorage;
      do
      {
        v52 = (__SecCertificate *)*v51;
        CFDataRef v53 = SecCertificateCopyData(v52);
        uint64_t v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v56 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v29 = sub_100A6EA38(0, v29[2] + 1, 1, v29);
        }
        unint64_t v58 = v29[2];
        unint64_t v57 = v29[3];
        if (v58 >= v57 >> 1) {
          uint64_t v29 = sub_100A6EA38((void *)(v57 > 1), v58 + 1, 1, v29);
        }
        v29[2] = v58 + 1;
        uint64_t v59 = &v29[2 * v58];
        v59[4] = v54;
        v59[5] = v56;

        ++v51;
        --v27;
      }
      while (v27);
    }
    goto LABEL_28;
  }
  __break(1u);
}

uint64_t sub_1010B82CC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  if (a3) {
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v7 = 0;
  }
  swift_retain();
  id v8 = a2;
  id v9 = a4;
  v6(a2, v7, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1010B8380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[25] = a5;
  v6[26] = v5;
  v6[23] = a3;
  v6[24] = a4;
  v6[21] = a1;
  v6[22] = a2;
  uint64_t v7 = type metadata accessor for HashAlgorithm();
  v6[27] = v7;
  v6[28] = *(void *)(v7 - 8);
  v6[29] = swift_task_alloc();
  return _swift_task_switch(sub_1010B8474, v5, 0);
}

uint64_t sub_1010B8474()
{
  uint64_t v33 = v0;
  if (*(void *)(*(void *)(v0 + 200) + 16) == 2)
  {
    uint64_t v1 = (uint64_t *)(v0 + 144);
    uint64_t v2 = *(__SecKey **)(v0 + 192);
    *(void *)(v0 + 144) = 0;
    CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
    CFDataRef Signature = SecKeyCreateSignature(v2, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, isa, (CFErrorRef *)(v0 + 144));
    *(void *)(v0 + 240) = Signature;

    if (Signature)
    {
      char v5 = *(unsigned char *)(*(void *)(v0 + 208) + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType);
      uint64_t v6 = (void *)swift_task_alloc();
      *(void *)(v0 + 248) = v6;
      *uint64_t v6 = v0;
      v6[1] = sub_1010B8A94;
      return sub_1004E0788(v0 + 72, v5);
    }
    uint64_t v11 = *v1;
    if (*v1)
    {
      type metadata accessor for CFError(0);
      sub_1010BA83C(&qword_1016585F8, type metadata accessor for CFError);
      swift_allocError();
      *unint64_t v12 = v11;
      if (qword_101637408 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100010324(v13, (uint64_t)qword_10170F1B0);
      swift_retain();
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      BOOL v16 = os_log_type_enabled(v14, v15);
      uint64_t v17 = *(void *)(v0 + 208);
      if (v16)
      {
        uint64_t v18 = swift_slowAlloc();
        CFDataRef v31 = (void *)swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136446466;
        unint64_t v19 = sub_1004E061C(*(unsigned char *)(v17 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType));
        *(void *)(v0 + 120) = sub_1008FA0F0(v19, v20, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v18 + 12) = 2114;
        swift_errorRetain();
        uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 128) = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *CFDataRef v31 = v21;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to sign the %{public}s data. Error - %{public}@.", (uint8_t *)v18, 0x16u);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
        swift_errorRelease();
        swift_errorRelease();
      }

      goto LABEL_8;
    }
    if (qword_101637408 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170F1B0);
    swift_retain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = *(void *)(v0 + 208);
    if (v25)
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136446210;
      uint64_t v32 = v28;
      unint64_t v29 = sub_1004E061C(*(unsigned char *)(v26 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType));
      *(void *)(v0 + 136) = sub_1008FA0F0(v29, v30, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to sign the %{public}s data.", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    sub_1010B69F0();
    swift_allocError();
    char v9 = 2;
  }
  else
  {
    sub_1010B69F0();
    swift_allocError();
    char v9 = 1;
  }
  *id v8 = v9;
LABEL_8:
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_1010B8A94()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 208);
  swift_task_dealloc();
  return _swift_task_switch(sub_1010B8BD0, v1, 0);
}

uint64_t sub_1010B8BD0()
{
  sub_1010B69B8(v0 + 72);
  if ((*(unsigned char *)(v0 + 113) & 1) == 0)
  {
    uint64_t v1 = *(void **)(v0 + 200);
    uint64_t v2 = v1[4];
    unint64_t v3 = v1[5];
    uint64_t v4 = v1[6];
    unint64_t v5 = v1[7];
    sub_1000361E0(v2, v3);
    sub_1000361E0(v4, v5);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
LABEL_3:
    uint64_t v6 = *(uint64_t **)(v0 + 168);
    id v7 = *(id *)(v0 + 240);
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    swift_task_dealloc();
    *uint64_t v6 = v8;
    v6[1] = v10;
    v6[2] = v2;
    v6[3] = v3;
    v6[4] = v4;
    v6[5] = v5;
    v6[6] = v40;
    v6[7] = v39;
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_5;
  }
  uint64_t v12 = *(void *)(v0 + 224);
  uint64_t v13 = *(void *)(v0 + 232);
  uint64_t v14 = *(void *)(v0 + 216);
  os_log_type_t v15 = *(void **)(v0 + 200);
  sub_10000588C(&qword_101657710);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101347BA0;
  uint64_t v17 = v15[4];
  unint64_t v18 = v15[5];
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v18;
  uint64_t v19 = v15[6];
  unint64_t v20 = v15[7];
  (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v13, enum case for HashAlgorithm.sha256(_:), v14);
  sub_1000361E0(v17, v18);
  sub_1000361E0(v19, v20);
  uint64_t v21 = Data.hash(algorithm:)();
  uint64_t v23 = v22;
  sub_10001CFB8(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  *(void *)(v16 + 48) = v21;
  *(void *)(v16 + 56) = v23;
  sub_10000588C(&qword_101669D98);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = 0x7374726563;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 48) = v16;
  swift_bridgeObjectRetain();
  unint64_t v25 = sub_10092D8EC(inited);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *(void *)(v0 + 152) = v25;
  sub_10000588C(&qword_101669DA0);
  sub_1010BA7C0();
  uint64_t v27 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v29 = v28;
  swift_bridgeObjectRelease();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 160) = 0;
  id v31 = [(objc_class *)isa compressedDataUsingAlgorithm:3 error:v0 + 160];

  uint64_t v32 = *(void **)(v0 + 160);
  if (v31)
  {
    id v33 = v32;
    id v34 = [v31 base64EncodedStringWithOptions:0];
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v36;
    uint64_t v40 = v35;

    sub_10001CFB8(v27, v29);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v4 = 0;
    uint64_t v2 = 0;
    unint64_t v5 = 0xF000000000000000;
    unint64_t v3 = 0xF000000000000000;
    goto LABEL_3;
  }
  os_log_type_t v37 = *(void **)(v0 + 240);
  id v38 = v32;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  sub_10001CFB8(v27, v29);
  swift_release();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
LABEL_5:
  return v11();
}

uint64_t DeviceIdentityUtility.deinit()
{
  sub_10001E324(v0 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate);

  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t DeviceIdentityUtility.__deallocating_deinit()
{
  sub_10001E324(v0 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate);

  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1010B9060(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v9 = sub_10000588C(&qword_101669DD8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010BAE34();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  char v18 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    uint64_t v16 = v14;
    uint64_t v17 = v15;
    char v18 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t destroy for DeviceIdentitySignature(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  unint64_t v2 = a1[3];
  if (v2 >> 60 != 15) {
    sub_10001CFB8(a1[2], v2);
  }
  unint64_t v3 = a1[5];
  if (v3 >> 60 != 15) {
    sub_10001CFB8(a1[4], v3);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DeviceIdentitySignature(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2 + 2;
  unint64_t v7 = a2[3];
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    sub_1000361E0(*v6, a2[3]);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v7;
  }
  uint64_t v9 = a2 + 4;
  unint64_t v10 = a2[5];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_1000361E0(*v9, a2[5]);
    *(void *)(a1 + 32) = v11;
    *(void *)(a1 + 40) = v10;
  }
  uint64_t v12 = a2[7];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = v12;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for DeviceIdentitySignature(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2 + 2;
  unint64_t v9 = a2[3];
  if ((unint64_t)a1[3] >> 60 == 15)
  {
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *v8;
      sub_1000361E0(*v8, a2[3]);
      a1[2] = v10;
      a1[3] = v9;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)(a1 + 2));
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  uint64_t v11 = *v8;
  sub_1000361E0(*v8, a2[3]);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v11;
  a1[3] = v9;
  sub_10001CFB8(v12, v13);
LABEL_8:
  uint64_t v14 = a2 + 4;
  unint64_t v15 = a2[5];
  if ((unint64_t)a1[5] >> 60 != 15)
  {
    if (v15 >> 60 != 15)
    {
      uint64_t v17 = *v14;
      sub_1000361E0(*v14, a2[5]);
      uint64_t v18 = a1[4];
      unint64_t v19 = a1[5];
      a1[4] = v17;
      a1[5] = v15;
      sub_10001CFB8(v18, v19);
      goto LABEL_15;
    }
    sub_1001356D0((uint64_t)(a1 + 4));
    goto LABEL_13;
  }
  if (v15 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 2) = *(_OWORD *)v14;
    goto LABEL_15;
  }
  uint64_t v16 = *v14;
  sub_1000361E0(*v14, a2[5]);
  a1[4] = v16;
  a1[5] = v15;
LABEL_15:
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *assignWithTake for DeviceIdentitySignature(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = (_OWORD *)(a2 + 16);
  unint64_t v7 = a1[3];
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 24);
  if (v8 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)(a1 + 2));
LABEL_4:
    *((_OWORD *)a1 + 1) = *v6;
    goto LABEL_6;
  }
  uint64_t v9 = a1[2];
  a1[2] = *(void *)v6;
  a1[3] = v8;
  sub_10001CFB8(v9, v7);
LABEL_6:
  uint64_t v10 = (uint64_t *)(a2 + 32);
  unint64_t v11 = a1[5];
  if (v11 >> 60 != 15)
  {
    unint64_t v12 = *(void *)(a2 + 40);
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = a1[4];
      a1[4] = *v10;
      a1[5] = v12;
      sub_10001CFB8(v13, v11);
      goto LABEL_11;
    }
    sub_1001356D0((uint64_t)(a1 + 4));
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)v10;
LABEL_11:
  uint64_t v14 = *(void *)(a2 + 56);
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceIdentitySignature(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceIdentitySignature(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceIdentitySignature()
{
  return &type metadata for DeviceIdentitySignature;
}

uint64_t sub_1010B9658()
{
  return type metadata accessor for DeviceIdentityUtility();
}

uint64_t type metadata accessor for DeviceIdentityUtility()
{
  uint64_t result = qword_101669C70;
  if (!qword_101669C70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1010B96AC()
{
  sub_1000C7D80();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

unsigned char *storeEnumTagSinglePayload for DeviceIdentityError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010B9834);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceIdentityError()
{
  return &type metadata for DeviceIdentityError;
}

unint64_t sub_1010B9870()
{
  unint64_t result = qword_101669D90;
  if (!qword_101669D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669D90);
  }
  return result;
}

uint64_t sub_1010B98C4(char *a1, char *a2)
{
  return sub_10071D8F8(*a1, *a2);
}

Swift::Int sub_1010B98D0()
{
  return Hasher._finalize()();
}

uint64_t sub_1010B9968()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1010B99EC()
{
  return Hasher._finalize()();
}

uint64_t sub_1010B9A80@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A3428, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1010B9AE0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6669747265434B52;
  if (*v1) {
    uint64_t v2 = 0x7265706F72504B52;
  }
  unint64_t v3 = 0xEF6E6F6974616369;
  if (*v1) {
    unint64_t v3 = 0xEC00000073656974;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1010B9B34()
{
  if (*v0) {
    return 0x7265706F72504B52;
  }
  else {
    return 0x6669747265434B52;
  }
}

uint64_t sub_1010B9B84@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A3428, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1010B9BE8(uint64_t a1)
{
  unint64_t v2 = sub_1010BAE34();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010B9C24(uint64_t a1)
{
  unint64_t v2 = sub_1010BAE34();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010B9C60(void *a1)
{
  return sub_1010B9060(a1, *v1, v1[1], v1[2], v1[3]);
}

unint64_t sub_1010B9C80(char a1)
{
  unint64_t result = 0x747265434143;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x444970696843;
      break;
    case 2:
      unint64_t result = 0x6843657571696E55;
      break;
    case 3:
      unint64_t result = 0x6E496F545344494FLL;
      break;
    case 4:
      unint64_t result = 0x754E6C6169726553;
      break;
    case 5:
      unint64_t result = 0x79746964696C6156;
      break;
    case 6:
      unint64_t result = 0x6275504B4953;
      break;
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 8:
      unint64_t result = 0x6574744174726373;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1010B9DB8(char a1)
{
  unint64_t result = 0x747265434143;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x444970696843;
      break;
    case 2:
      unint64_t result = 0x6843657571696E55;
      break;
    case 3:
      unint64_t result = 0x6E496F545344494FLL;
      break;
    case 4:
      unint64_t result = 0x754E6C6169726553;
      break;
    case 5:
      unint64_t result = 0x79746964696C6156;
      break;
    case 6:
      unint64_t result = 0x6275504B4953;
      break;
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 8:
      unint64_t result = 0x6574744174726373;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1010B9EF0(unsigned __int8 *a1, char *a2)
{
  return sub_10071ECC8(*a1, *a2);
}

Swift::Int sub_1010B9EFC()
{
  return Hasher._finalize()();
}

uint64_t sub_1010B9F44()
{
  return sub_100720790();
}

Swift::Int sub_1010B9F4C()
{
  return Hasher._finalize()();
}

unint64_t sub_1010B9F90@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1010BB2A0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1010B9FC0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1010B9C80(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1010B9FEC()
{
  return sub_1010B9DB8(*v0);
}

unint64_t sub_1010B9FF4@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1010BB2A0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1010BA01C(uint64_t a1)
{
  unint64_t v2 = sub_1010BADE0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010BA058(uint64_t a1)
{
  unint64_t v2 = sub_1010BADE0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010BA094()
{
  uint64_t v32 = 0;
  unint64_t v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(114);
  v1._countAndFlagsBits = 0x3A7472654361633CLL;
  v1._object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  uint64_t v32 = *v0;
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x3A64497069686320;
  v3._object = (void *)0xE900000000000020;
  String.append(_:)(v3);
  uint64_t v32 = v0[1];
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x203A6469636520;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  uint64_t v32 = v0[2];
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x497463656A626F20;
  v7._object = (void *)0xEC000000203A7364;
  String.append(_:)(v7);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x4E6C616972657320;
  v9._object = (void *)0xEF203A7265626D75;
  String.append(_:)(v9);
  uint64_t v10 = v0[4];
  unint64_t v11 = (void *)v0[5];
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x8000000101420C80;
  v13._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v13);
  uint64_t v32 = v0[7];
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x4B6D657473797320;
  v15._object = (void *)0xEF203A6275507965;
  String.append(_:)(v15);
  long long v28 = *((_OWORD *)v0 + 4);
  sub_1000620BC((uint64_t)&v28, (uint64_t)v29);
  sub_1000620BC((uint64_t)v29, (uint64_t)&v30);
  unsigned __int8 v16 = BYTE6(v31);
  uint64_t v17 = 0;
  switch(v31 >> 62)
  {
    case 1uLL:
      v31 &= 0x3FFFFFFFFFFFFFFFuLL;
      LODWORD(v17) = HIDWORD(v30) - v30;
      if (__OFSUB__(HIDWORD(v30), v30))
      {
        __break(1u);
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x1010BA4B8);
      }
      uint64_t v17 = (int)v17;
LABEL_6:
      uint64_t v32 = v17;
      v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 0x5079654B66657220;
      v22._object = (void *)0xEC000000203A6275;
      String.append(_:)(v22);
      long long v26 = *((_OWORD *)v0 + 5);
      sub_1000620BC((uint64_t)&v26, (uint64_t)v27);
      sub_1000620BC((uint64_t)v27, (uint64_t)&v32);
      switch(v33 >> 62)
      {
        case 1uLL:
          v33 &= 0x3FFFFFFFFFFFFFFFuLL;
          if (!__OFSUB__(HIDWORD(v32), v32)) {
            goto LABEL_11;
          }
          goto LABEL_14;
        case 2uLL:
          v33 &= 0x3FFFFFFFFFFFFFFFuLL;
          if (!__OFSUB__(*(void *)(v32 + 24), *(void *)(v32 + 16))) {
            goto LABEL_11;
          }
          goto LABEL_15;
        case 3uLL:
          goto LABEL_11;
        default:
          v33 &= 0x3FFFFFFFFFFFFFFFuLL;
LABEL_11:
          v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          v24._countAndFlagsBits = 62;
          v24._object = (void *)0xE100000000000000;
          String.append(_:)(v24);
          return 0;
      }
    case 2uLL:
      v31 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v18 = *(void *)(v30 + 16);
      uint64_t v19 = *(void *)(v30 + 24);
      BOOL v20 = __OFSUB__(v19, v18);
      uint64_t v17 = v19 - v18;
      if (!v20) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_6;
    default:
      v31 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v17 = v16;
      goto LABEL_6;
  }
}

uint64_t sub_1010BA4D8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101669DC8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010BADE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v10) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v10) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v10 = *(void *)(v3 + 24);
    char v11 = 3;
    sub_10000588C(&qword_101654A30);
    sub_100176E3C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v10 = *(_OWORD *)(v3 + 64);
    char v11 = 6;
    sub_100037BB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v10 = *(_OWORD *)(v3 + 80);
    char v11 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1010BA7A4(void *a1)
{
  return sub_1010BA4D8(a1);
}

unint64_t sub_1010BA7C0()
{
  unint64_t result = qword_101669DA8;
  if (!qword_101669DA8)
  {
    sub_10000592C(&qword_101669DA0);
    sub_10025F9B4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669DA8);
  }
  return result;
}

uint64_t sub_1010BA83C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1010BA884(uint64_t a1)
{
  sub_1010B7934(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1010BA890()
{
  uint64_t v1 = sub_10000588C(&qword_101669DC0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

void sub_1010BA9F8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(sub_10000588C(&qword_101669DC0) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v11 = *(void *)(v3 + v9);
  uint64_t v12 = v3 + ((v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));

  sub_1010B7C24(a1, a2, a3, v3 + v8, v11, v12);
}

uint64_t sub_1010BAAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1010BAB08()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for BAARequestPayload()
{
  return &type metadata for BAARequestPayload;
}

uint64_t destroy for BAARKProperties(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(a1[8], a1[9]);
  uint64_t v2 = a1[10];
  unint64_t v3 = a1[11];

  return sub_10001CFB8(v2, v3);
}

uint64_t initializeWithCopy for BAARKProperties(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  unint64_t v7 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  uint64_t v9 = *(void *)(a2 + 80);
  unint64_t v8 = *(void *)(a2 + 88);
  sub_1000361E0(v9, v8);
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v8;
  return a1;
}

void *assignWithCopy for BAARKProperties(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  uint64_t v4 = a2[8];
  unint64_t v5 = a2[9];
  sub_1000361E0(v4, v5);
  uint64_t v6 = a1[8];
  unint64_t v7 = a1[9];
  a1[8] = v4;
  a1[9] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v9 = a2[10];
  unint64_t v8 = a2[11];
  sub_1000361E0(v9, v8);
  uint64_t v10 = a1[10];
  unint64_t v11 = a1[11];
  a1[10] = v9;
  a1[11] = v8;
  sub_10001CFB8(v10, v11);
  return a1;
}

uint64_t assignWithTake for BAARKProperties(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a1 + 64);
  unint64_t v7 = *(void *)(a1 + 72);
  long long v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v8;
  sub_10001CFB8(v6, v7);
  uint64_t v9 = *(void *)(a1 + 80);
  unint64_t v10 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001CFB8(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for BAARKProperties(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BAARKProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BAARKProperties()
{
  return &type metadata for BAARKProperties;
}

unint64_t sub_1010BADE0()
{
  unint64_t result = qword_101669DD0;
  if (!qword_101669DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669DD0);
  }
  return result;
}

unint64_t sub_1010BAE34()
{
  unint64_t result = qword_101669DE0;
  if (!qword_101669DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669DE0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BAARequestPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010BAF54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BAARequestPayload.CodingKeys()
{
  return &type metadata for BAARequestPayload.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for BAARKProperties.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010BB058);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BAARKProperties.CodingKeys()
{
  return &type metadata for BAARKProperties.CodingKeys;
}

unint64_t sub_1010BB094()
{
  unint64_t result = qword_101669DE8;
  if (!qword_101669DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669DE8);
  }
  return result;
}

unint64_t sub_1010BB0EC()
{
  unint64_t result = qword_101669DF0;
  if (!qword_101669DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669DF0);
  }
  return result;
}

unint64_t sub_1010BB144()
{
  unint64_t result = qword_101669DF8;
  if (!qword_101669DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669DF8);
  }
  return result;
}

unint64_t sub_1010BB19C()
{
  unint64_t result = qword_101669E00;
  if (!qword_101669E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669E00);
  }
  return result;
}

unint64_t sub_1010BB1F4()
{
  unint64_t result = qword_101669E08;
  if (!qword_101669E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669E08);
  }
  return result;
}

unint64_t sub_1010BB24C()
{
  unint64_t result = qword_101669E10;
  if (!qword_101669E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669E10);
  }
  return result;
}

unint64_t sub_1010BB2A0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A2D80, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

void destroy for BeaconSharingLocalManagerRouter(uint64_t a1)
{
  swift_weakDestroy();
  Swift::String v2 = *(void **)(a1 + 8);
}

uint64_t initializeWithCopy for BeaconSharingLocalManagerRouter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_weakCopyInit();
  uint64_t v5 = *(void **)(a2 + 8);
  *(void *)(v4 + 8) = v5;
  id v6 = v5;
  return a1;
}

uint64_t assignWithCopy for BeaconSharingLocalManagerRouter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_weakCopyAssign();
  uint64_t v5 = *(void **)(a2 + 8);
  id v6 = *(void **)(v4 + 8);
  *(void *)(v4 + 8) = v5;
  id v7 = v5;

  return a1;
}

uint64_t initializeWithTake for BeaconSharingLocalManagerRouter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_weakTakeInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for BeaconSharingLocalManagerRouter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_weakTakeAssign();
  uint64_t v5 = *(void **)(v4 + 8);
  *(void *)(v4 + 8) = *(void *)(a2 + 8);

  return a1;
}

ValueMetadata *type metadata accessor for BeaconSharingLocalManagerRouter()
{
  return &type metadata for BeaconSharingLocalManagerRouter;
}

uint64_t sub_1010BB414(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v27 = a2;
  uint64_t v28 = a1;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v11 - 8);
  uint64_t v30 = v11;
  __chkstk_darwin(v11);
  Swift::String v13 = &v26[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for MessagingMessageContext();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14 - 8);
  if (a3 == 1)
  {
    sub_100CD5E78(a6, (uint64_t)&v26[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v28;
    sub_10042681C((uint64_t)&v26[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)], v18 + v17);
    aBlock[4] = sub_1010BC11C;
    aBlock[5] = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_101607210;
    uint64_t v19 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    aBlock[7] = _swiftEmptyArrayStorage;
    sub_1008BEEB0();
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_10002FE84();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v19);
    (*(void (**)(unsigned char *, uint64_t))(v31 + 8))(v10, v8);
    (*(void (**)(unsigned char *, uint64_t))(v29 + 8))(v13, v30);
    return swift_release();
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_101347BA0;
    LOBYTE(aBlock[0]) = v27;
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v24 = v23;
    *(void *)(v21 + 56) = &type metadata for String;
    unint64_t v25 = sub_10000B4CC();
    *(void *)(v21 + 32) = v22;
    *(void *)(v21 + 40) = v24;
    *(void *)(v21 + 96) = &type metadata for Int;
    *(void *)(v21 + 104) = &protocol witness table for Int;
    *(void *)(v21 + 64) = v25;
    *(void *)(v21 + 72) = a3;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1010BB820(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = a6;
  uint64_t v29 = a1;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v35 = v9;
  __chkstk_darwin(v9);
  uint64_t v32 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v30 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MessagingMessageContext();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8);
  if (a3 == 1)
  {
    uint64_t result = sub_10056BF28();
    if (!v6)
    {
      uint64_t v16 = result;
      sub_100CD5E78(v28, (uint64_t)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
      unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = v29;
      sub_10042681C((uint64_t)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17);
      *(void *)(v18 + ((v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8)) = v16;
      aBlock[4] = sub_1010BC380;
      aBlock[5] = v18;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1004B5480;
      aBlock[3] = &unk_101607260;
      uint64_t v19 = _Block_copy(aBlock);
      swift_retain();
      BOOL v20 = v30;
      static DispatchQoS.unspecified.getter();
      aBlock[7] = _swiftEmptyArrayStorage;
      sub_1008BEEB0();
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_10002FE84();
      uint64_t v21 = v32;
      uint64_t v22 = v35;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v19);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v22);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v33);
      return swift_release();
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_101347BA0;
    LOBYTE(aBlock[0]) = a2;
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v26 = v25;
    *(void *)(v23 + 56) = &type metadata for String;
    unint64_t v27 = sub_10000B4CC();
    *(void *)(v23 + 32) = v24;
    *(void *)(v23 + 40) = v26;
    *(void *)(v23 + 96) = &type metadata for Int;
    *(void *)(v23 + 104) = &protocol witness table for Int;
    *(void *)(v23 + 64) = v27;
    *(void *)(v23 + 72) = a3;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1010BBC78(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    if (a1)
    {
      if (a1 == 1) {
        sub_1010BB414(Strong, 1, a2, a3, a4, a5);
      }
      else {
        sub_1010BB820(Strong, 2, a2, a3, a4, a5);
      }
    }
    else
    {
      static os_log_type_t.error.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
    }
    return swift_release();
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    return os_log(_:dso:log:_:_:)();
  }
}

uint64_t sub_1010BBF48()
{
  uint64_t v1 = type metadata accessor for MessagingMessageContext();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v3, 1, v6);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  if (!v8) {
    v9(v0 + v3, v6);
  }
  v9(v5 + *(int *)(v1 + 20), v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + *(int *)(v1 + 44);
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1010BC11C()
{
  uint64_t v1 = *(void *)(type metadata accessor for MessagingMessageContext() - 8);
  return sub_10116556C(v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_1010BC180(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1010BC190()
{
  return swift_release();
}

uint64_t sub_1010BC198()
{
  uint64_t v1 = type metadata accessor for MessagingMessageContext();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v3, 1, v6);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  if (!v8) {
    v9(v0 + v3, v6);
  }
  v9(v5 + *(int *)(v1 + 20), v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + *(int *)(v1 + 44);
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1010BC380()
{
  return type metadata accessor for MessagingMessageContext();
}

uint64_t *sub_1010BC390()
{
  return &qword_10170F1C8;
}

ValueMetadata *type metadata accessor for AirPodsPairingCompleteCommandPayload()
{
  return &type metadata for AirPodsPairingCompleteCommandPayload;
}

unint64_t sub_1010BC3AC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100157248();
  unint64_t result = sub_100A38DD8();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1010BC3DC()
{
  return 0xD000000000000015;
}

uint64_t sub_1010BC3F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1010BCCBC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1010BC424(uint64_t a1)
{
  unint64_t v2 = sub_1010BCA8C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010BC460(uint64_t a1)
{
  unint64_t v2 = sub_1010BCA8C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010BC49C(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_101669E20);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010BCA8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_1010BC5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v35 = v8;
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  uint64_t v10 = v35;
  swift_bridgeObjectRelease();
  id v11 = [self currentDevice];
  if (v11)
  {
    uint64_t v12 = v11;
    id v13 = [v11 serverFriendlyDescription];

    if (v13)
    {
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      char v17 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v35 = v10;
      sub_10016C0FC(v14, v16, 0xD000000000000011, 0x80000001013F64E0, v17);
      uint64_t v18 = v35;
      swift_bridgeObjectRelease();
      Date.init()();
      uint64_t v19 = Date.epoch.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t v35 = v19;
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v22 = v21;
      char v23 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v35 = v18;
      sub_10016C0FC(v20, v22, 0xD000000000000015, 0x80000001013F6500, v23);
      uint64_t v24 = v35;
      swift_bridgeObjectRelease();
      uint64_t v35 = 1;
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v27 = v26;
      char v28 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v35 = v24;
      sub_10016C0FC(v25, v27, 0xD000000000000013, 0x80000001013F6520, v28);
      uint64_t v29 = v35;
      swift_bridgeObjectRelease();
      id v30 = sub_100903ACC();
      uint64_t v32 = v31;
      char v33 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v35 = v29;
      sub_10016C0FC((uint64_t)v30, v32, 0x6567412D72657355, 0xEA0000000000746ELL, v33);
      swift_bridgeObjectRelease();
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      uint64_t v35 = a1;
      uint64_t v36 = a2;
      sub_1010BCA18();
      dispatch thunk of JSONEncoder.encode<A>(_:)();
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t sub_1010BCA18()
{
  unint64_t result = qword_101669E18;
  if (!qword_101669E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669E18);
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingLockUpdateContent()
{
  return &type metadata for PairingLockUpdateContent;
}

ValueMetadata *type metadata accessor for PairingLockUpdateRequest()
{
  return &type metadata for PairingLockUpdateRequest;
}

unint64_t sub_1010BCA8C()
{
  unint64_t result = qword_101669E28;
  if (!qword_101669E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669E28);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PairingLockUpdateContent.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1010BCB7CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingLockUpdateContent.CodingKeys()
{
  return &type metadata for PairingLockUpdateContent.CodingKeys;
}

unint64_t sub_1010BCBB8()
{
  unint64_t result = qword_101669E30;
  if (!qword_101669E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669E30);
  }
  return result;
}

unint64_t sub_1010BCC10()
{
  unint64_t result = qword_101669E38;
  if (!qword_101669E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669E38);
  }
  return result;
}

unint64_t sub_1010BCC68()
{
  unint64_t result = qword_101669E40;
  if (!qword_101669E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101669E40);
  }
  return result;
}

uint64_t sub_1010BCCBC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015 && a2 == 0x8000000101408C40)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_1010BCD44()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AC174(v3);
  uint64_t v1 = v0;
  uint64_t result = swift_bridgeObjectRelease();
  qword_101669E48 = v1;
  return result;
}

uint64_t sub_1010BCDFC(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  v2[12] = *v1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = type metadata accessor for MemberSharingCircle();
  v2[17] = swift_task_alloc();
  return _swift_task_switch(sub_1010BCF14, 0, 0);
}

uint64_t sub_1010BCF14()
{
  uint64_t v31 = v0;
  uint64_t v1 = v0[10];
  if (*(unsigned char *)(v1 + *(int *)(v0[16] + 40)))
  {
    char v2 = (void *)v0[11];
    uint64_t v3 = v0[12];
    uint64_t v4 = v2[7];
    uint64_t v5 = v2[9];
    uint64_t v6 = sub_10001CD44(v2 + 4, v4);
    v0[5] = v4;
    v0[6] = v5;
    uint64_t v7 = sub_10001D958(v0 + 2);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(v7, v6, v4);
    uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101669FF8
                                                                              + dword_101669FF8);
    unint64_t v8 = (void *)swift_task_alloc();
    v0[21] = v8;
    *unint64_t v8 = v0;
    v8[1] = sub_1010BD52C;
    uint64_t v9 = v0[10];
    return v29(v9, (uint64_t)v7, v3, v4, v5);
  }
  else
  {
    if (qword_101636888 != -1)
    {
      swift_once();
      uint64_t v1 = v0[10];
    }
    uint64_t v11 = v0[17];
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170D788);
    sub_1010C2464(v1, v11, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = v0[17];
    if (v15)
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 141558275;
      v0[8] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2081;
      type metadata accessor for UUID();
      sub_1010C24CC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[9] = sub_1008FA0F0(v18, v19, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1010C2654(v16, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received tentative revoke for unaccepted sharingCircle %{private,mask.hash}s.", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1010C2654(v0[17], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    }

    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    v0[18] = Strong;
    if (Strong)
    {
      uint64_t v21 = v0[16];
      uint64_t v22 = v0[10];
      uint64_t v23 = *(void *)(v0[11] + 24);
      uint64_t ObjectType = swift_getObjectType();
      char v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 + 8) + **(int **)(v23 + 8));
      uint64_t v25 = v22 + *(int *)(v21 + 28);
      uint64_t v26 = (void *)swift_task_alloc();
      v0[19] = v26;
      *uint64_t v26 = v0;
      v26[1] = sub_1010BD3DC;
      return v28(v25, ObjectType, v23);
    }
    else
    {
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v27 = (uint64_t (*)(void))v0[1];
      return v27();
    }
  }
}

uint64_t sub_1010BD3DC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1010BDEDC, 0, 0);
  }
  else
  {
    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1010BD52C(char a1)
{
  uint64_t v2 = *(void *)v1 + 16;
  *(unsigned char *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2);
  return _swift_task_switch(sub_1010BD638, 0, 0);
}

uint64_t sub_1010BD638()
{
  if (*(unsigned char *)(v0 + 216) == 1)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    *(void *)(v0 + 176) = Strong;
    uint64_t v2 = *(void *)(v0 + 128);
    if (Strong)
    {
      uint64_t v3 = *(void *)(v0 + 80);
      uint64_t v4 = *(void *)(*(void *)(v0 + 88) + 24);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 8) + **(int **)(v4 + 8));
      uint64_t v6 = v3 + *(int *)(v2 + 28);
      uint64_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 184) = v7;
      *uint64_t v7 = v0;
      v7[1] = sub_1010BD8F0;
      return v18(v6, ObjectType, v4);
    }
    else
    {
      uint64_t v12 = *(void *)(v0 + 112);
      uint64_t v11 = *(void *)(v0 + 120);
      uint64_t v13 = *(void *)(v0 + 104);
      uint64_t v14 = *(void *)(v0 + 80) + *(int *)(v2 + 24);
      uint64_t v15 = *sub_10001CD44((void *)(*(void *)(v0 + 88) + 32), *(void *)(*(void *)(v0 + 88) + 56));
      static DispatchWorkItemFlags.barrier.getter();
      uint64_t v16 = (void *)swift_task_alloc();
      v16[2] = v15;
      v16[3] = v14;
      v16[4] = sub_1010BF644;
      v16[5] = 0;
      OS_dispatch_queue.sync<A>(flags:execute:)();
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
      return v17();
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1010BDB44;
    uint64_t v10 = *(void *)(v0 + 80);
    return sub_1010C0CD0(v10, 4);
  }
}

uint64_t sub_1010BD8F0()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1010BE0F4;
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v2 = sub_1010BDA0C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1010BDA0C()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[10] + *(int *)(v0[16] + 24);
  uint64_t v5 = *sub_10001CD44((void *)(v0[11] + 32), *(void *)(v0[11] + 56));
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v6 = (void *)swift_task_alloc();
  v6[2] = v5;
  v6[3] = v4;
  v6[4] = sub_1010BF644;
  v6[5] = 0;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1010BDB44()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1010BDCCC;
  }
  else {
    uint64_t v2 = sub_1010BDC58;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1010BDC58()
{
  sub_1010BE30C(*(void *)(v0 + 80));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1010BDCCC()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 56) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failure on share revoke handling %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1010BDEDC()
{
  swift_unknownObjectRelease();
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 56) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failure on share revoke handling %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1010BE0F4()
{
  swift_unknownObjectRelease();
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 56) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failure on share revoke handling %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1010BE30C(uint64_t a1)
{
  uint64_t v106 = 0;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v97 = *(void *)(v3 - 8);
  uint64_t v98 = v3;
  __chkstk_darwin(v3);
  v95 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for BeaconObservation();
  uint64_t v96 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v105 = (uint64_t)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  v100 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  v107 = (char *)&v85 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v90 = (char *)&v85 - v13;
  __chkstk_darwin(v12);
  uint64_t v89 = (uint64_t)&v85 - v14;
  uint64_t v15 = type metadata accessor for MemberSharingCircle();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v103 = (uint64_t)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v85 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  v91 = (uint64_t *)((char *)&v85 - v22);
  __chkstk_darwin(v21);
  uint64_t v24 = (uint64_t *)((char *)&v85 - v23);
  uint64_t v25 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  char v28 = (char *)&v85 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v26);
  uint64_t v31 = (char *)&v85 - v30;
  __chkstk_darwin(v29);
  char v33 = (char *)&v85 - v32;
  uint64_t v99 = v1;
  uint64_t v34 = *(void *)(v1 + 56);
  v94 = (void *)(v1 + 32);
  sub_10001CD44((void *)(v1 + 32), v34);
  uint64_t v92 = v15;
  uint64_t v104 = a1 + *(int *)(v15 + 24);
  sub_1001A2124(v104, (uint64_t)v33);
  uint64_t v101 = v7;
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v108 = v6;
  int v36 = v35(v33, 1, v6);
  v102 = v33;
  sub_10001D074((uint64_t)v33, (uint64_t)v31, (uint64_t *)&unk_10163AC90);
  sub_1010C2464(a1, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  if (v36 == 1)
  {
    sub_1010C2654((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001DAB4((uint64_t)v31, (uint64_t *)&unk_10163AC90);
    sub_1010C2464(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v37 = (uint64_t)v107;
    uint64_t v38 = v108;
    uint64_t v40 = v100;
    uint64_t v39 = v101;
    uint64_t v41 = a1;
  }
  else
  {
    v87 = v20;
    uint64_t v88 = a1;
    v86 = v31;
    sub_10001D074((uint64_t)v31, (uint64_t)v28, (uint64_t *)&unk_10163AC90);
    uint64_t v42 = v24;
    uint64_t v43 = (uint64_t)v24;
    uint64_t v44 = v91;
    sub_1010C2464(v43, (uint64_t)v91, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v45 = v108;
    if (v35(v28, 1, v108) == 1)
    {
      uint64_t v46 = v107;
      uint64_t v48 = v89;
      uint64_t v49 = v106;
      sub_100B23648(v44, v89);
      sub_1010C2654((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      sub_10001DAB4((uint64_t)v28, (uint64_t *)&unk_10163AC90);
      uint64_t v38 = v45;
      uint64_t v39 = v101;
    }
    else
    {
      uint64_t v46 = v107;
      sub_1010C2654((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v39 = v101;
      uint64_t v48 = v89;
      (*(void (**)(uint64_t, char *, uint64_t))(v101 + 32))(v89, v28, v45);
      uint64_t v38 = v45;
      uint64_t v49 = v106;
    }
    uint64_t v50 = (uint64_t)v90;
    uint64_t v52 = (uint64_t)v42;
    sub_100B23648(v42, v50);
    uint64_t v106 = v49;
    LOBYTE(v51) = static Date.< infix(_:_:)();
    CFDataRef v53 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v53(v50, v38);
    v53(v48, v38);
    sub_1010C2654(v52, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001DAB4((uint64_t)v86, (uint64_t *)&unk_10163AC90);
    uint64_t v41 = v88;
    uint64_t v20 = v87;
    sub_1010C2464(v88, (uint64_t)v87, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    if ((v51 & 1) == 0)
    {
      int v84 = v20[*(int *)(v92 + 40)];
      sub_1010C2654((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v37 = (uint64_t)v46;
      uint64_t v40 = v100;
      if (v84 != 1) {
        return sub_10001DAB4((uint64_t)v102, (uint64_t *)&unk_10163AC90);
      }
      goto LABEL_9;
    }
    uint64_t v37 = (uint64_t)v46;
    uint64_t v40 = v100;
  }
  sub_1010C2654((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
LABEL_9:
  static Date.trustedNow.getter(v37);
  uint64_t v54 = type metadata accessor for UUID();
  uint64_t v55 = v105;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(v105, v104, v54);
  uint64_t v56 = v93;
  unint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
  v57(v55 + *(int *)(v93 + 20), v37, v38);
  *(unsigned char *)(v55 + *(int *)(v56 + 24)) = 43;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v58 = type metadata accessor for Logger();
  sub_100010324(v58, (uint64_t)qword_10170D788);
  v57((uint64_t)v40, v37, v38);
  uint64_t v59 = v103;
  sub_1010C2464(v41, v103, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = swift_slowAlloc();
    v110[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v62 = 136315651;
    sub_1010C24CC((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v109 = sub_1008FA0F0(v63, v64, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v65 = *(void (**)(char *, uint64_t))(v39 + 8);
    uint64_t v101 = (v39 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v65(v40, v108);
    unint64_t v66 = v65;
    *(_WORD *)(v62 + 12) = 2160;
    uint64_t v109 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v62 + 22) = 2081;
    uint64_t v67 = v103;
    sub_1010C24CC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v109 = sub_1008FA0F0(v68, v69, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1010C2654(v67, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Store tentatively Revoked Date %s for %{private,mask.hash}s.", (uint8_t *)v62, 0x20u);
    swift_arrayDestroy();
    uint64_t v38 = v108;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v70 = *(void (**)(char *, uint64_t))(v39 + 8);
    uint64_t v101 = (v39 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v71 = v40;
    unint64_t v66 = v70;
    v70(v71, v38);
    sub_1010C2654(v59, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  }

  uint64_t v72 = v99;
  v73 = v94;
  uint64_t v74 = *sub_10001CD44(v94, *(void *)(v99 + 56));
  v75 = v95;
  uint64_t v76 = static DispatchWorkItemFlags.barrier.getter();
  __chkstk_darwin(v76);
  uint64_t v77 = v104;
  *(&v85 - 4) = v74;
  *(&v85 - 3) = v77;
  *(&v85 - 2) = (uint64_t)sub_1010BF644;
  *(&v85 - 1) = 0;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  (*(void (**)(char *, uint64_t))(v97 + 8))(v75, v98);
  uint64_t v78 = *sub_10001CD44(v73, *(void *)(v72 + 56));
  sub_10000588C(&qword_10163A778);
  unint64_t v79 = (*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
  uint64_t v80 = swift_allocObject();
  *(_OWORD *)(v80 + 16) = xmmword_101342130;
  uint64_t v81 = v105;
  sub_1010C2464(v105, v80 + v79, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  uint64_t v82 = type metadata accessor for Transaction();
  __chkstk_darwin(v82);
  *(&v85 - 4) = v78;
  *(&v85 - 3) = v80;
  *(&v85 - 2) = 0;
  *(&v85 - 1) = 0;
  static Transaction.named<A>(_:with:)();
  swift_bridgeObjectRelease();
  sub_1010C2654(v81, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  v66(v107, v38);
  return sub_10001DAB4((uint64_t)v102, (uint64_t *)&unk_10163AC90);
}

uint64_t sub_1010BEF20(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = type metadata accessor for MemberSharingCircle();
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_1010BF010, 0, 0);
}

uint64_t sub_1010BF010()
{
  uint64_t v16 = v0;
  uint64_t v1 = v0[4];
  if (*(unsigned char *)(v1 + *(int *)(v0[9] + 40)) == 4)
  {
    if (qword_101636888 != -1)
    {
      swift_once();
      uint64_t v1 = v0[4];
    }
    uint64_t v2 = v0[10];
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170D788);
    sub_1010C2464(v1, v2, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = v0[10];
    if (v6)
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 141558275;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 12) = 2081;
      type metadata accessor for UUID();
      sub_1010C24CC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = sub_1008FA0F0(v9, v10, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1010C2654(v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Cleaning up revoke state for circle %{private,mask.hash}s.", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1010C2654(v0[10], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    }

    uint64_t v13 = (void *)swift_task_alloc();
    v0[11] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_1010BF35C;
    uint64_t v14 = v0[4];
    return sub_1010C0CD0(v14, 1);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_1010BF35C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_1010BF4A4, 0, 0);
  }
}

uint64_t sub_1010BF4A4()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[4] + *(int *)(v0[9] + 24);
  uint64_t v5 = *sub_10001CD44((void *)(v0[5] + 32), *(void *)(v0[5] + 56));
  static DispatchWorkItemFlags.barrier.getter();
  BOOL v6 = (void *)swift_task_alloc();
  v6[2] = v5;
  v6[3] = v4;
  v6[4] = sub_1010BF644;
  v6[5] = 0;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1010BF5E0()
{
  sub_1004270C8(v0 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 32);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MemberCircleRevokeManager()
{
  return self;
}

uint64_t type metadata accessor for MemberCircleRevokeAssistant()
{
  return self;
}

uint64_t sub_1010BF66C(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_101669FE8 + dword_101669FE8);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001D2E4;
  return v5(a1);
}

uint64_t sub_1010BF714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[23] = a1;
  v5[24] = type metadata accessor for MemberSharingCircle();
  v5[25] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v5[26] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  v5[27] = v9;
  v5[28] = *(void *)(v9 - 8);
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v5[33] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[34] = v11;
  v5[35] = *(void *)(v11 + 64);
  v5[36] = swift_task_alloc();
  v5[37] = sub_10000588C((uint64_t *)&unk_101653D50);
  v5[38] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for SharedBeaconRecord(0);
  v5[39] = v12;
  v5[40] = *(void *)(v12 - 8);
  v5[41] = swift_task_alloc();
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v13 = sub_10001D958(v5 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v13, a2, a4);
  return _swift_task_switch(sub_1010BF9AC, 0, 0);
}

uint64_t sub_1010BF9AC()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(int *)(*(void *)(v0 + 192) + 40);
  *(_DWORD *)(v0 + 384) = v2;
  if (*(unsigned char *)(v1 + v2) == 4)
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 120))
    {
      sub_10001CEB0((long long *)(v0 + 96), v0 + 56);
      sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
      uint64_t v6 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 336) = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_1010BFBC4;
      return v6();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5(0);
  }
  return result;
}

uint64_t sub_1010BFBC4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 344) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1010BFCC4, 0, 0);
}

uint64_t sub_1010BFCC4()
{
  uint64_t v49 = v0;
  uint64_t v1 = v0 + 56;
  if (*(void *)(v0 + 344))
  {
    uint64_t v2 = *(void *)(v0 + 192);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(_DWORD *)(v0 + 388) = *(_DWORD *)(v2 + 24);
    uint64_t v3 = *(void *)(v0 + 344);
    return _swift_task_switch(sub_1010C031C, v3, 0);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v4 = *(void *)(v0 + 184);
  if (*(unsigned char *)(v4 + *(int *)(v0 + 384)) == 4)
  {
    uint64_t v5 = *(void *)(v0 + 216);
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 208);
    uint64_t v8 = *(void *)(v0 + 192);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    sub_1001A2124(v4 + *(int *)(v8 + 24), v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 208), (uint64_t *)&unk_10163AC90);
    }
    else
    {
      uint64_t v9 = *(void *)(v0 + 248);
      uint64_t v10 = *(void *)(v0 + 216);
      uint64_t v11 = *(void *)(v0 + 224);
      (*(void (**)(void, void, uint64_t))(v11 + 32))(*(void *)(v0 + 256), *(void *)(v0 + 208), v10);
      static Date.trustedNow.getter(v9);
      Date.timeIntervalSince(_:)();
      double v13 = v12;
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v14(v9, v10);
      if (qword_101637410 != -1) {
        swift_once();
      }
      if (*(double *)&qword_101669E48 <= v13)
      {
        uint64_t v16 = *(void *)(v0 + 240);
        uint64_t v17 = *(uint64_t **)(v0 + 184);
        sub_100B23648(v17, v16);
        uint64_t v19 = *(void *)(v0 + 240);
        uint64_t v20 = *(void *)(v0 + 216);
        uint64_t v21 = static Date.> infix(_:_:)();
        v14(v19, v20);
        if (v21)
        {
          if (qword_101636888 != -1) {
            swift_once();
          }
          uint64_t v46 = *(void *)(v0 + 256);
          uint64_t v23 = *(void *)(v0 + 224);
          uint64_t v22 = *(void *)(v0 + 232);
          uint64_t v24 = *(void *)(v0 + 216);
          uint64_t v25 = *(void *)(v0 + 200);
          uint64_t v26 = *(void *)(v0 + 184);
          uint64_t v27 = type metadata accessor for Logger();
          sub_100010324(v27, (uint64_t)qword_10170D788);
          sub_1010C2464(v26, v25, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v46, v24);
          char v28 = Logger.logObject.getter();
          os_log_type_t v29 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v28, v29))
          {
            uint64_t v47 = *(void *)(v0 + 256);
            uint64_t v43 = *(void *)(v0 + 232);
            uint64_t v44 = *(void *)(v0 + 216);
            uint64_t v30 = *(void *)(v0 + 200);
            uint64_t v31 = swift_slowAlloc();
            v48[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v31 = 141558531;
            *(void *)(v0 + 168) = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v31 + 12) = 2081;
            sub_1010C24CC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 160) = sub_1008FA0F0(v32, v33, v48);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1010C2654(v30, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
            *(_WORD *)(v31 + 22) = 2082;
            sub_1010C24CC((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
            uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 176) = sub_1008FA0F0(v34, v35, v48);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v14(v43, v44);
            _os_log_impl((void *)&_mh_execute_header, v28, v29, "    Delete share %{private,mask.hash}s,\n    tentativelyRevoked since %{public}s.", (uint8_t *)v31, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v36 = v47;
            uint64_t v37 = v44;
          }
          else
          {
            uint64_t v38 = *(void *)(v0 + 256);
            uint64_t v39 = *(void *)(v0 + 232);
            uint64_t v40 = *(void *)(v0 + 216);
            uint64_t v41 = *(void *)(v0 + 200);

            v14(v39, v40);
            sub_1010C2654(v41, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
            uint64_t v36 = v38;
            uint64_t v37 = v40;
          }
          v14(v36, v37);
          unsigned int v45 = 1;
          goto LABEL_13;
        }
      }
      v14(*(void *)(v0 + 256), *(void *)(v0 + 216));
    }
  }
  unsigned int v45 = 0;
LABEL_13:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15(v45);
}

uint64_t sub_1010C031C()
{
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 184) + *(int *)(v0 + 388);
  *(void *)(v0 + 352) = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 360) = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_1010C0418, 0, 0);
}

uint64_t sub_1010C0418()
{
  uint64_t v2 = v0[44];
  uint64_t v1 = v0[45];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[46] = v3;
  v3[2] = v2;
  v3[3] = sub_1010C25E0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[47] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1010C051C;
  uint64_t v6 = v0[37];
  uint64_t v5 = v0[38];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075048, v3, v6);
}

uint64_t sub_1010C051C()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1010C0650, 0, 0);
}

uint64_t sub_1010C0650()
{
  uint64_t v49 = v0;
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 304);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 304), (uint64_t *)&unk_101653D50);
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 328);
    uint64_t v5 = *(void *)(v0 + 312);
    sub_10055ABB0(*(void *)(v0 + 304), v4);
    LODWORD(v5) = *(unsigned __int8 *)(v4 + *(int *)(v5 + 64));
    sub_1010C2654(v4, type metadata accessor for SharedBeaconRecord);
    if (v5 == 4) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *(void *)(v0 + 184);
  if (*(unsigned char *)(v6 + *(int *)(v0 + 384)) == 4)
  {
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v8 = *(void *)(v0 + 224);
    uint64_t v9 = *(void *)(v0 + 208);
    uint64_t v10 = *(void *)(v0 + 192);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    sub_1001A2124(v6 + *(int *)(v10 + 24), v9);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 208), (uint64_t *)&unk_10163AC90);
      goto LABEL_12;
    }
    uint64_t v11 = *(void *)(v0 + 248);
    uint64_t v12 = *(void *)(v0 + 216);
    uint64_t v13 = *(void *)(v0 + 224);
    (*(void (**)(void, void, uint64_t))(v13 + 32))(*(void *)(v0 + 256), *(void *)(v0 + 208), v12);
    static Date.trustedNow.getter(v11);
    Date.timeIntervalSince(_:)();
    double v15 = v14;
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v16(v11, v12);
    if (qword_101637410 != -1) {
      swift_once();
    }
    if (*(double *)&qword_101669E48 > v15) {
      goto LABEL_11;
    }
    uint64_t v19 = *(void *)(v0 + 240);
    uint64_t v20 = *(uint64_t **)(v0 + 184);
    sub_100B23648(v20, v19);
    uint64_t v22 = *(void *)(v0 + 240);
    uint64_t v23 = *(void *)(v0 + 216);
    uint64_t v24 = static Date.> infix(_:_:)();
    v16(v22, v23);
    if ((v24 & 1) == 0)
    {
LABEL_11:
      v16(*(void *)(v0 + 256), *(void *)(v0 + 216));
      goto LABEL_12;
    }
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v46 = *(void *)(v0 + 256);
    uint64_t v26 = *(void *)(v0 + 224);
    uint64_t v25 = *(void *)(v0 + 232);
    uint64_t v27 = *(void *)(v0 + 216);
    uint64_t v28 = *(void *)(v0 + 200);
    uint64_t v29 = *(void *)(v0 + 184);
    uint64_t v30 = type metadata accessor for Logger();
    sub_100010324(v30, (uint64_t)qword_10170D788);
    sub_1010C2464(v29, v28, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v46, v27);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v47 = *(void *)(v0 + 256);
      uint64_t v43 = *(void *)(v0 + 232);
      uint64_t v44 = *(void *)(v0 + 216);
      uint64_t v33 = *(void *)(v0 + 200);
      uint64_t v34 = swift_slowAlloc();
      v48[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 141558531;
      *(void *)(v0 + 168) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 12) = 2081;
      sub_1010C24CC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 160) = sub_1008FA0F0(v35, v36, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1010C2654(v33, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v34 + 22) = 2082;
      sub_1010C24CC((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 176) = sub_1008FA0F0(v37, v38, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v16(v43, v44);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "    Delete share %{private,mask.hash}s,\n    tentativelyRevoked since %{public}s.", (uint8_t *)v34, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v16(v47, v44);
    }
    else
    {
      uint64_t v39 = *(void *)(v0 + 256);
      uint64_t v40 = *(void *)(v0 + 232);
      uint64_t v41 = *(void *)(v0 + 216);
      uint64_t v42 = *(void *)(v0 + 200);

      v16(v40, v41);
      sub_1010C2654(v42, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      v16(v39, v41);
    }
LABEL_4:
    unsigned int v45 = 1;
    goto LABEL_13;
  }
LABEL_12:
  unsigned int v45 = 0;
LABEL_13:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17(v45);
}

uint64_t sub_1010C0CD0(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 256) = a2;
  *(void *)(v2 + 168) = a1;
  *(void *)(v2 + 176) = type metadata accessor for MemberSharingCircle();
  *(void *)(v2 + 184) = swift_task_alloc();
  *(void *)(v2 + 192) = swift_task_alloc();
  sub_10000588C(&qword_101639E88);
  *(void *)(v2 + 200) = swift_task_alloc();
  return _swift_task_switch(sub_1010C0DA8, 0, 0);
}

uint64_t sub_1010C0DA8()
{
  uint64_t v18 = v0;
  uint64_t v1 = *(void *)(v0 + 168);
  if (*(unsigned __int8 *)(v1 + *(int *)(*(void *)(v0 + 176) + 40)) == *(unsigned __int8 *)(v0 + 256))
  {
    if (qword_101636888 != -1)
    {
      swift_once();
      uint64_t v1 = *(void *)(v0 + 168);
    }
    uint64_t v2 = *(void *)(v0 + 184);
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170D788);
    sub_1010C2464(v1, v2, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(unsigned __int8 *)(v0 + 256);
      uint64_t v7 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446723;
      unint64_t v8 = 0xEB00000000646574;
      uint64_t v9 = 0x70656363616E752ELL;
      switch(v6)
      {
        case 1:
          unint64_t v8 = 0xE900000000000064;
          uint64_t v9 = 0x657470656363612ELL;
          break;
        case 2:
          unint64_t v8 = 0xEA00000000006465;
          uint64_t v9 = 0x747365757165722ELL;
          break;
        case 3:
          unint64_t v8 = 0xE500000000000000;
          uint64_t v9 = 0x746E65732ELL;
          break;
        case 4:
          unint64_t v8 = 0x80000001013F2860;
          uint64_t v9 = 0xD000000000000013;
          break;
        case 5:
          unint64_t v8 = 0xE700000000000000;
          uint64_t v9 = 0x64656C6961662ELL;
          break;
        default:
          break;
      }
      uint64_t v12 = *(void *)(v0 + 184);
      *(void *)(v0 + 144) = sub_1008FA0F0(v9, v8, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2160;
      *(void *)(v0 + 152) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 22) = 2081;
      type metadata accessor for UUID();
      sub_1010C24CC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 160) = sub_1008FA0F0(v13, v14, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1010C2654(v12, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Skipping acceptanceState update for %{public}s\nsharingCircle %{private,mask.hash}s.", (uint8_t *)v7, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1010C2654(*(void *)(v0 + 184), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    double v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  else
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (!*(void *)(v0 + 80))
    {
      __break(1u);
      JUMPOUT(0x1010C1298);
    }
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v16 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v10;
    void *v10 = v0;
    v10[1] = sub_1010C12B0;
    return v16();
  }
}

uint64_t sub_1010C12B0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1010C13B0, 0, 0);
}

uint64_t sub_1010C13B0()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 216))
  {
    uint64_t v2 = *(void *)(v0 + 200);
    char v3 = *(unsigned char *)(v0 + 256);
    uint64_t v4 = *(void *)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v5 = swift_task_alloc();
    *(void *)(v5 + 16) = v4;
    *(unsigned char *)(v5 + 24) = v3;
    sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_1010C2440, v2);
    swift_task_dealloc();
    uint64_t v13 = *(void *)(v0 + 216);
    return _swift_task_switch(sub_1010C15E8, v13, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170D788);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No BeaconStoreActor available!", v9, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    void *v10 = 0xD000000000000010;
    v10[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_1010C15E8()
{
  *(void *)(v0 + 224) = *(void *)(*(void *)(v0 + 216) + 128);
  return _swift_task_switch(sub_1010C1610, 0, 0);
}

uint64_t sub_1010C1610()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[25];
  uint64_t v3 = swift_task_alloc();
  v0[29] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[30] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1010C1708;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_100074FFC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1010C1708()
{
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1010C1824;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1010C1928;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1010C1824()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1010C188C, 0, 0);
}

uint64_t sub_1010C188C()
{
  uint64_t v1 = *(void *)(v0 + 200);
  swift_release();
  sub_10001DAB4(v1, &qword_101639E88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1010C1928()
{
  uint64_t v20 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170D788);
  sub_1010C2464(v2, v1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(unsigned __int8 *)(v0 + 256);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446723;
    unint64_t v8 = 0xEB00000000646574;
    uint64_t v9 = 0x70656363616E752ELL;
    switch(v6)
    {
      case 1:
        unint64_t v8 = 0xE900000000000064;
        uint64_t v9 = 0x657470656363612ELL;
        break;
      case 2:
        unint64_t v8 = 0xEA00000000006465;
        uint64_t v9 = 0x747365757165722ELL;
        break;
      case 3:
        unint64_t v8 = 0xE500000000000000;
        uint64_t v9 = 0x746E65732ELL;
        break;
      case 4:
        unint64_t v8 = 0x80000001013F2860;
        uint64_t v9 = 0xD000000000000013;
        break;
      case 5:
        unint64_t v8 = 0xE700000000000000;
        uint64_t v9 = 0x64656C6961662ELL;
        break;
      default:
        break;
    }
    uint64_t v13 = *(void *)(v0 + 192);
    uint64_t v18 = *(void *)(v0 + 200);
    *(void *)(v0 + 120) = sub_1008FA0F0(v9, v8, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2160;
    *(void *)(v0 + 128) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 22) = 2081;
    type metadata accessor for UUID();
    sub_1010C24CC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 136) = sub_1008FA0F0(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1010C2654(v13, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Acceptance state changed to %{public}s\nfor member circle: %{private,mask.hash}s.", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    uint64_t v12 = v18;
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 192);
    uint64_t v10 = *(void *)(v0 + 200);

    swift_release();
    sub_1010C2654(v11, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v12 = v10;
  }
  sub_10001DAB4(v12, &qword_101639E88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_1010C1D34(uint64_t a1)
{
  *(void *)(v1 + 120) = a1;
  return _swift_task_switch(sub_1010C1D54, 0, 0);
}

uint64_t sub_1010C1D54()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1010C1E90;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1010C1E90(uint64_t a1)
{
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1010C1F90, 0, 0);
}

uint64_t sub_1010C1F90()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 136))
  {
    uint64_t v2 = *(void *)(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10000588C(&qword_10163BC50);
    uint64_t v3 = type metadata accessor for UUID();
    *(void *)(v0 + 144) = v3;
    uint64_t v4 = *(void *)(v3 - 8);
    int v5 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 176) = v5;
    unint64_t v6 = (v5 + 32) & ~(unint64_t)v5;
    uint64_t v7 = swift_allocObject();
    *(void *)(v0 + 152) = v7;
    *(_OWORD *)(v7 + 16) = xmmword_101342130;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 16))(v7 + v6, v2, v3);
    unint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v8;
    *unint64_t v8 = v0;
    v8[1] = sub_1010C223C;
    return sub_100105528(v7);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170D788);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No BeaconSharingService available!", v13, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v14 = 0xD000000000000014;
    v14[1] = 0x80000001013F1890;
    swift_willThrow();
    unint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_1010C223C()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1010C2394;
  }
  else
  {
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v2 = sub_10086AA64;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1010C2394()
{
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1010C2440(uint64_t a1)
{
  sub_100EE30C4(*(uint64_t **)(v1 + 16), a1, *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_1010C2464(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1010C24CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1010C2514()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1010C25E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100E5F4A8(v4, a1);
}

uint64_t sub_1010C2654(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1010C26B4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170F1D0);
  sub_100010324(v0, (uint64_t)qword_10170F1D0);
  return Logger.init(subsystem:category:)();
}

unint64_t sub_1010C273C(unint64_t a1)
{
  unint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      unint64_t result = 0x79646165726C612ELL;
      break;
    case 2uLL:
      unint64_t result = 0xD000000000000012;
      break;
    case 3uLL:
      unint64_t result = 0x676E697373696D2ELL;
      break;
    case 4uLL:
      unint64_t result = 0x6544654D746F6E2ELL;
      break;
    case 5uLL:
      unint64_t result = 0x6F707075736E752ELL;
      break;
    case 6uLL:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      swift_errorRetain();
      _StringGuts.grow(_:)(29);
      v4._countAndFlagsBits = 0xD00000000000001BLL;
      v4._object = (void *)0x8000000101421050;
      String.append(_:)(v4);
      sub_10000588C(&qword_101638D40);
      _print_unlocked<A, B>(_:_:)();
      sub_1010C64A8(a1);
      unint64_t result = 0;
      break;
  }
  return result;
}

unint64_t sub_1010C2908()
{
  return sub_1010C273C(*v0);
}

uint64_t sub_1010C2910()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  Swift::String v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 24);
  *Swift::String v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    id v8 = [self standardUserDefaults];
    NSString v9 = String._bridgeToObjectiveC()();
    id v10 = [v8 BOOLForKey:v9];

    return (uint64_t)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1010C2A78()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  Swift::String v4 = (uint64_t *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 24);
  *Swift::String v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    id v7 = [self standardUserDefaults];
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    NSString v9 = String._bridgeToObjectiveC()();
    [v7 setValue:isa forKey:v9];
  }
  else
  {
    __break(1u);
  }
}

id sub_1010C2BF8()
{
  uint64_t v1 = *(void **)(v0 + 48);
  if (v1)
  {
    id v2 = *(id *)(v0 + 48);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)ACAccountStore) init];
    Swift::String v4 = *(void **)(v0 + 48);
    *(void *)(v0 + 48) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

uint64_t sub_1010C2C64(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  NSString v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000584C();
  (*(void (**)(unsigned char *, void, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1010C6798((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  if (qword_101637418 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170F1D0);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "MaskedIdentifierService init", v13, 2u);
    swift_slowDealloc();
  }

  *(void *)(v2 + 16) = a1;
  uint64_t v14 = *(NSObject **)(v2 + 24);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1010C67E0;
  *(void *)(v15 + 24) = v2;
  aBlock[4] = sub_1003B7AE0;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_101607848;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v14, v16);
  _Block_release(v16);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v14)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = type metadata accessor for Transaction();
    __chkstk_darwin(v18);
    *(void *)&v19[-24] = 0;
    *(void *)&v19[-16] = 0;
    *(void *)&v19[-32] = v2;
    static Transaction.named<A>(_:with:)();
    swift_release();
    swift_release();
    return v2;
  }
  return result;
}

uint64_t sub_1010C30F0()
{
  uint64_t v1 = *(NSObject **)(v0 + 24);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_1010C66DC;
  *(void *)(v2 + 24) = v0;
  aBlock[4] = sub_100132424;
  aBlock[5] = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1016077D0;
  id v3 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = type metadata accessor for Transaction();
    __chkstk_darwin(v5);
    static Transaction.named<A>(_:with:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_1010C32A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a2 + 24);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a1;
  v14[3] = a3;
  v14[4] = a4;
  v14[5] = a2;
  aBlock[4] = sub_1010C6480;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101607578;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  sub_1000BD0E8(a3);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_1010C6798((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v18);
  return swift_release();
}

uint64_t sub_1010C3584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v119 = a3;
  uint64_t v118 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v122 = *(void *)(v5 - 8);
  uint64_t v123 = v5;
  __chkstk_darwin(v5);
  v120 = (char *)v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v124 = *(void *)(v7 - 8);
  uint64_t v125 = v7;
  __chkstk_darwin(v7);
  v121 = (char *)v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v116 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  v115 = (char *)v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for StableIdentifier();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v131 = (uint64_t)v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v132 = (uint64_t)v114 - v14;
  __chkstk_darwin(v13);
  uint64_t v128 = (uint64_t)v114 - v15;
  uint64_t v16 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v129 = *(void *)(v16 - 8);
  uint64_t v130 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v133 = (uint64_t)v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)v114 - v19;
  uint64_t v21 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)v114 - v26;
  Transaction.capture()();
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v22 + 104))(v25, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v21);
  sub_1010C6798((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v22 + 8);
  v29(v25, v21);
  v29(v27, v21);
  if (v28)
  {
    if (qword_101637418 != -1) {
      goto LABEL_51;
    }
    goto LABEL_3;
  }
  uint64_t v42 = sub_100ACF5FC();
  uint64_t v43 = _swiftEmptyArrayStorage;
  aBlock = _swiftEmptyArrayStorage;
  uint64_t v127 = *((void *)v42 + 2);
  if (v127)
  {
    v114[1] = a4;
    unint64_t v44 = 0;
    uint64_t v126 = v131 + 8;
    unsigned int v45 = _swiftEmptyArrayStorage;
    uint64_t v46 = v10;
    while (1)
    {
      if (v44 >= *((void *)v42 + 2))
      {
        __break(1u);
LABEL_51:
        swift_once();
LABEL_3:
        uint64_t v30 = type metadata accessor for Logger();
        sub_100010324(v30, (uint64_t)qword_10170F1D0);
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v31, v32))
        {
          uint64_t v33 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v33 = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, v32, "Not updating because device is in beforeFirstUnlock", v33, 2u);
          swift_slowDealloc();
        }

        sub_10000584C();
        uint64_t v34 = v116;
        uint64_t v35 = v115;
        uint64_t v36 = v117;
        (*(void (**)(char *, void, uint64_t))(v116 + 104))(v115, enum case for DispatchQoS.QoSClass.default(_:), v117);
        uint64_t v37 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
        uint64_t v38 = swift_allocObject();
        uint64_t v39 = v118;
        uint64_t v40 = v119;
        *(void *)(v38 + 16) = v118;
        *(void *)(v38 + 24) = v40;
        v140 = sub_1010C656C;
        v141 = (void *)v38;
        aBlock = _NSConcreteStackBlock;
        uint64_t v137 = 1107296256;
        uint64_t v41 = &unk_101607708;
LABEL_42:
        v138 = sub_1004B5480;
        v139 = v41;
        v91 = _Block_copy(&aBlock);
        sub_1000BD0E8(v39);
        uint64_t v92 = v121;
        static DispatchQoS.unspecified.getter();
        v135 = _swiftEmptyArrayStorage;
        sub_1010C6798((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v93 = v120;
        uint64_t v94 = v123;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v91);

        (*(void (**)(char *, uint64_t))(v122 + 8))(v93, v94);
        (*(void (**)(char *, uint64_t))(v124 + 8))(v92, v125);
        return swift_release();
      }
      uint64_t v47 = *(void *)(v129 + 72);
      uint64_t v48 = v42;
      unint64_t v134 = (*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80);
      sub_1010C65FC((uint64_t)&v42[v134 + v47 * v44], (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v49 = (uint64_t)v20;
      uint64_t v50 = (uint64_t)&v20[*(int *)(v130 + 24)];
      uint64_t v51 = v128;
      sub_1010C65FC(v50, v128, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v52 = v46;
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      sub_1010C6664(v51, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v54 = v50;
      uint64_t v55 = v132;
      sub_1010C65FC(v54, v132, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      if (EnumCaseMultiPayload == 1) {
        break;
      }
      sub_1010C65FC(v55, v131, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int v56 = swift_getEnumCaseMultiPayload();
      uint64_t v46 = v52;
      if (v56 == 2)
      {
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v42 = v48;
        uint64_t v20 = (char *)v49;
LABEL_17:
        swift_bridgeObjectRelease();
        uint64_t v57 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(v131, v57);
        sub_1010C6664(v132, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        unsigned int v45 = aBlock;
LABEL_18:
        unint64_t v58 = v134;
        sub_100098810((uint64_t)v20, v133);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B74D8(0, v45[2] + 1, 1);
        }
        unsigned int v45 = aBlock;
        unint64_t v60 = aBlock[2];
        unint64_t v59 = aBlock[3];
        if (v60 >= v59 >> 1)
        {
          sub_1000B74D8(v59 > 1, v60 + 1, 1);
          unsigned int v45 = aBlock;
        }
        v45[2] = v60 + 1;
        sub_100098810(v133, (uint64_t)v45 + v58 + v60 * v47);
        goto LABEL_9;
      }
      uint64_t v42 = v48;
      uint64_t v20 = (char *)v49;
      if (v56 == 3)
      {
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      sub_1010C6664(v131, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      sub_1010C6664(v132, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      sub_1010C6664(v49, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_9:
      if (v127 == ++v44)
      {
        uint64_t v43 = aBlock;
        goto LABEL_24;
      }
    }
    sub_1010C6664(v55, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v46 = v52;
    uint64_t v42 = v48;
    uint64_t v20 = (char *)v49;
    goto LABEL_18;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  uint64_t v61 = v43[2];
  swift_release();
  if (!v61)
  {
    if (qword_101637418 != -1) {
      swift_once();
    }
    uint64_t v71 = type metadata accessor for Logger();
    sub_100010324(v71, (uint64_t)qword_10170F1D0);
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "No paired accessories. Not updating masked identifier.", v74, 2u);
      swift_slowDealloc();
    }

    sub_10000584C();
    uint64_t v75 = v116;
    uint64_t v76 = v115;
    uint64_t v77 = v117;
    (*(void (**)(char *, void, uint64_t))(v116 + 104))(v115, enum case for DispatchQoS.QoSClass.default(_:), v117);
    uint64_t v37 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v77);
    uint64_t v78 = swift_allocObject();
    uint64_t v39 = v118;
    uint64_t v79 = v119;
    *(void *)(v78 + 16) = v118;
    *(void *)(v78 + 24) = v79;
    v140 = sub_1010C6560;
    v141 = (void *)v78;
    aBlock = _NSConcreteStackBlock;
    uint64_t v137 = 1107296256;
    uint64_t v41 = &unk_1016076B8;
    goto LABEL_42;
  }
  if (sub_1010C2910())
  {
    if (qword_101637418 != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    sub_100010324(v62, (uint64_t)qword_10170F1D0);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Already updated masked identifier", v65, 2u);
      swift_slowDealloc();
    }

    sub_10000584C();
    uint64_t v66 = v116;
    uint64_t v67 = v115;
    uint64_t v68 = v117;
    (*(void (**)(char *, void, uint64_t))(v116 + 104))(v115, enum case for DispatchQoS.QoSClass.default(_:), v117);
    uint64_t v37 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v68);
    uint64_t v69 = swift_allocObject();
    uint64_t v39 = v118;
    uint64_t v70 = v119;
    *(void *)(v69 + 16) = v118;
    *(void *)(v69 + 24) = v70;
    v140 = sub_1010C6554;
    v141 = (void *)v69;
    aBlock = _NSConcreteStackBlock;
    uint64_t v137 = 1107296256;
    uint64_t v41 = &unk_101607668;
    goto LABEL_42;
  }
  unint64_t v80 = sub_1010C48D4();
  if ((v81 & 1) == 0)
  {
    if (qword_101637418 != -1) {
      swift_once();
    }
    uint64_t v82 = type metadata accessor for Logger();
    sub_100010324(v82, (uint64_t)qword_10170F1D0);
    v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Successfully updated masked identifiers!", v85, 2u);
      swift_slowDealloc();
    }

    sub_1010C2A78();
    sub_10000584C();
    uint64_t v86 = v116;
    v87 = v115;
    uint64_t v88 = v117;
    (*(void (**)(char *, void, uint64_t))(v116 + 104))(v115, enum case for DispatchQoS.QoSClass.default(_:), v117);
    uint64_t v37 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
    uint64_t v89 = swift_allocObject();
    uint64_t v39 = v118;
    uint64_t v90 = v119;
    *(void *)(v89 + 16) = v118;
    *(void *)(v89 + 24) = v90;
    v140 = sub_1010C6548;
    v141 = (void *)v89;
    aBlock = _NSConcreteStackBlock;
    uint64_t v137 = 1107296256;
    uint64_t v41 = &unk_101607618;
    goto LABEL_42;
  }
  unint64_t v96 = v80;
  sub_1010C648C(v80);
  if (qword_101637418 != -1) {
    swift_once();
  }
  uint64_t v97 = type metadata accessor for Logger();
  sub_100010324(v97, (uint64_t)qword_10170F1D0);
  sub_1010C648C(v96);
  sub_1010C648C(v96);
  uint64_t v98 = Logger.logObject.getter();
  os_log_type_t v99 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v98, v99))
  {
    v100 = (uint8_t *)swift_slowAlloc();
    aBlock = (void *)swift_slowAlloc();
    *(_DWORD *)v100 = 136315138;
    sub_1010C648C(v96);
    unint64_t v101 = sub_10114157C(v96);
    v135 = (void *)sub_1008FA0F0(v101, v102, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1010C649C(v96, 1);
    sub_1010C649C(v96, 1);
    _os_log_impl((void *)&_mh_execute_header, v98, v99, "Failed to update masked identifiers. Error %s", v100, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1010C649C(v96, 1);
    sub_1010C649C(v96, 1);
  }

  sub_1010C5B1C();
  sub_10000584C();
  uint64_t v103 = v116;
  uint64_t v104 = v115;
  uint64_t v105 = v117;
  (*(void (**)(char *, void, uint64_t))(v116 + 104))(v115, enum case for DispatchQoS.QoSClass.default(_:), v117);
  uint64_t v106 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v104, v105);
  v107 = (void *)swift_allocObject();
  uint64_t v108 = v118;
  uint64_t v109 = v119;
  v107[2] = v118;
  v107[3] = v109;
  v107[4] = v96;
  v140 = sub_1010C6508;
  v141 = v107;
  aBlock = _NSConcreteStackBlock;
  uint64_t v137 = 1107296256;
  v138 = sub_1004B5480;
  v139 = &unk_1016075C8;
  v110 = _Block_copy(&aBlock);
  sub_1000BD0E8(v108);
  sub_1010C6538(v96, 1);
  v111 = v121;
  static DispatchQoS.unspecified.getter();
  v135 = _swiftEmptyArrayStorage;
  sub_1010C6798((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  v112 = v120;
  uint64_t v113 = v123;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v110);

  sub_1010C649C(v96, 1);
  sub_1010C649C(v96, 1);
  (*(void (**)(char *, uint64_t))(v122 + 8))(v112, v113);
  (*(void (**)(char *, uint64_t))(v124 + 8))(v111, v125);
  return swift_release();
}

uint64_t sub_1010C48D4()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v1 - 8);
  id v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for PairingLockUpdateEndPoint();
  uint64_t v5 = __chkstk_darwin(updated - 8);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v43 - v8;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)(v0 + 24);
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once();
    goto LABEL_7;
  }
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = 0;
  *(unsigned char *)(v16 + 24) = 1;
  id v17 = sub_1010C2BF8();
  uint64_t v18 = sub_1004C6DD4();

  if (v18)
  {
    uint64_t v19 = sub_1004C6EF0();
    uint64_t v21 = v20;

    if (v21)
    {
      sub_1010BC5D4(v19, v21);
      if (v22)
      {
        uint64_t v25 = v22;
        uint64_t v26 = v23;
        unint64_t v27 = v24;
        char v28 = dispatch_group_create();
        dispatch_group_enter(v28);
        sub_100D03A3C((uint64_t)v9);
        type metadata accessor for SearchPartyURLSessionFactory(0);
        swift_allocObject();
        uint64_t v29 = type metadata accessor for FMNMockingPreferences();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v3, 1, 1, v29);
        uint64_t v30 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
        type metadata accessor for ServerInteractionController(0);
        uint64_t v31 = swift_allocObject();
        sub_1010C65FC((uint64_t)v9, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PairingLockUpdateEndPoint);
        os_log_type_t v32 = (void *)sub_1004A8DA8((uint64_t)v7, v30, v31);
        sub_1010C6664((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PairingLockUpdateEndPoint);
        swift_bridgeObjectRetain();
        sub_1000361E0(v26, v27);
        sub_1004ADC5C(v25, v26, v27, 0, v32);
        swift_release();
        sub_1001D7860(v25, v26, v27);
        uint64_t v33 = swift_allocObject();
        *(void *)(v33 + 16) = v28;
        *(void *)(v33 + 24) = v16;
        uint64_t v34 = v28;
        swift_retain();
        Future.addFailure(block:)();
        swift_release();
        swift_release();
        uint64_t v35 = swift_allocObject();
        *(void *)(v35 + 16) = v34;
        *(void *)(v35 + 24) = v16;
        uint64_t v36 = v34;
        swift_retain();
        Future.addSuccess(block:)();
        swift_release();
        swift_release();
        OS_dispatch_group.wait()();
        sub_1001D7860(v25, v26, v27);
        swift_release();

        swift_beginAccess();
        unint64_t v37 = *(void *)(v16 + 16);
        sub_1010C6538(v37, *(unsigned char *)(v16 + 24));
        swift_release();
        return v37;
      }
    }
  }
  if (qword_101637418 != -1) {
    goto LABEL_12;
  }
LABEL_7:
  uint64_t v38 = type metadata accessor for Logger();
  sub_100010324(v38, (uint64_t)qword_10170F1D0);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Missing info to form update request!", v41, 2u);
    swift_slowDealloc();
  }
  swift_release();

  return 3;
}

void sub_1010C4E10(uint64_t a1, NSObject *a2, uint64_t a3)
{
  if (qword_101637418 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170F1D0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v14 = a2;
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    v15[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v10 = String.init<A>(describing:)();
    sub_1008FA0F0(v10, v11, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to update masked identifier due to %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v14;
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_beginAccess();
  unint64_t v12 = *(void *)(a3 + 16);
  char v13 = *(unsigned char *)(a3 + 24);
  *(void *)(a3 + 16) = a1;
  *(unsigned char *)(a3 + 24) = 1;
  sub_1010C649C(v12, v13);
  swift_errorRetain();
  dispatch_group_leave(a2);
}

void sub_1010C502C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (FMNServerInteractionController.FMNResponseFields.statusCode.getter() == 200)
  {
    if (qword_101637418 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170F1D0);
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      char v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Successfully updated masked identifier!", v13, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    unint64_t v14 = *(void *)(a3 + 16);
    char v15 = *(unsigned char *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  else
  {
    if (qword_101637418 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170F1D0);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      v23[2] = a3 + 16;
      v26[0] = v20;
      unint64_t v24 = a2;
      *(_DWORD *)uint64_t v19 = 136315138;
      v23[1] = v19 + 4;
      sub_1010C6798((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v25 = sub_1008FA0F0(v21, v22, v26);
      a2 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to update masked identifier due to %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    swift_beginAccess();
    unint64_t v14 = *(void *)(a3 + 16);
    char v15 = *(unsigned char *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 24) = 1;
  }
  sub_1010C649C(v14, v15);
  dispatch_group_leave(a2);
}

uint64_t sub_1010C53F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v1 + 24);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    if (qword_101637418 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170F1D0);
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "checkinRetry", v14, 2u);
    swift_slowDealloc();
  }

  static DispatchQoS.default.getter();
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  type metadata accessor for XPCActivity();
  swift_allocObject();
  uint64_t v17 = sub_1009D9B34(0xD000000000000040, (void *)0x8000000101420FA0, (uint64_t)v4, (uint64_t)sub_1010C6400, v15, (uint64_t)sub_1010C6408, v16);
  swift_release();
  swift_release();
  *(void *)(v1 + 32) = v17;
  return swift_release();
}

uint64_t sub_1010C56CC@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    __chkstk_darwin(result);
    id v4 = v3;
    sub_10000588C(&qword_1016549D0);
    OS_dispatch_queue.sync<A>(execute:)();

    uint64_t result = swift_release();
    long long v5 = v8;
    long long v6 = v9;
    uint64_t v7 = v10;
  }
  else
  {
    uint64_t v7 = 0;
    long long v5 = xmmword_101354090;
    long long v6 = 0uLL;
  }
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v7;
  return result;
}

uint64_t sub_1010C57CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(result + 40) == 1)
  {
    uint64_t result = sub_1006E2D14(a2, (uint64_t)v5);
    if (v5[0] == 2)
    {
      *(_OWORD *)a3 = xmmword_10138DE80;
      *(_OWORD *)(a3 + 16) = xmmword_10138DE90;
      *(void *)(a3 + 32) = 707;
    }
    else
    {
      return sub_1006E2D14(a2, a3);
    }
  }
  else
  {
    *(void *)a3 = 2;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
  }
  return result;
}

uint64_t sub_1010C5870(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1009D7368();
    }
    else if (a3 == 2)
    {
      if (qword_101637418 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_100010324(v5, (uint64_t)qword_10170F1D0);
      swift_retain_n();
      long long v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        long long v8 = (uint8_t *)swift_slowAlloc();
        uint64_t v12 = swift_slowAlloc();
        *(_DWORD *)long long v8 = 136315138;
        type metadata accessor for XPCActivity();
        swift_retain();
        uint64_t v9 = String.init<A>(describing:)();
        sub_1008FA0F0(v9, v10, &v12);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "scheduleRetryFetch timer fired: %s", v8, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      Transaction.capture()();
      uint64_t v11 = type metadata accessor for Transaction();
      __chkstk_darwin(v11);
      static Transaction.named<A>(_:with:)();
      sub_1009D7390();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1010C5B1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v6 = *(void **)(v1 + 24);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (qword_101637418 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170F1D0);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "scheduleRetryUpdate", v11, 2u);
    swift_slowDealloc();
  }

  *(unsigned char *)(v1 + 40) = 1;
  uint64_t v12 = *(void *)(v1 + 32);
  uint64_t v13 = type metadata accessor for Transaction();
  __chkstk_darwin(v13);
  *(void *)&v15[-16] = v12;
  swift_retain();
  static Transaction.named<A>(_:with:)();
  return swift_release();
}

uint64_t sub_1010C5D70(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  id v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
  uint64_t v12 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v19;
  *(void *)(v13 + 16) = v18;
  *(void *)(v13 + 24) = v14;
  aBlock[4] = sub_101023B3C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101607500;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_1010C6798((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v20);
  return swift_release();
}

uint64_t sub_1010C6100()
{
  swift_release();

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MaskedIdentifierService()
{
  return self;
}

uint64_t sub_1010C6174(uint64_t a1)
{
  return sub_1010C5D70(a1, *(void *)(v1 + 16));
}

uint64_t sub_1010C6190(uint64_t a1, uint64_t a2)
{
  if (qword_101637418 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170F1D0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "BeaconManagerService.updateObfuscatedIdentifier", v7, 2u);
    swift_slowDealloc();
  }

  sub_100A46C38();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  swift_retain();
  sub_1010C30F0();
  swift_release();

  return swift_release();
}

uint64_t sub_1010C62E4(unint64_t a1, void (*a2)(uint64_t))
{
  if (a1 == 7)
  {
    uint64_t v4 = 0;
  }
  else
  {
    sub_1010C6744();
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = a1;
  }
  sub_1010C6734(a1);
  a2(v4);

  return swift_errorRelease();
}

uint64_t sub_1010C6370()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1010C63B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1010C63C0()
{
  return swift_release();
}

uint64_t sub_1010C63C8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1010C6400@<X0>(uint64_t a1@<X8>)
{
  return sub_1010C56CC(a1);
}

uint64_t sub_1010C6408(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1010C5870(a1, a2, a3);
}

uint64_t sub_1010C6410(uint64_t a1)
{
  return sub_1010C32A8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1010C6430()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1010C6480()
{
  return sub_1010C3584(v0[2], v0[3], v0[4], v0[5]);
}

unint64_t sub_1010C648C(unint64_t result)
{
  if (result >= 7) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t sub_1010C649C(unint64_t result, char a2)
{
  if (a2) {
    return sub_1010C64A8(result);
  }
  return result;
}

unint64_t sub_1010C64A8(unint64_t result)
{
  if (result >= 7) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1010C64B8()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  if (*(void *)(v0 + 32) >= 7uLL) {
    swift_errorRelease();
  }

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1010C6508()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1(*(void *)(v0 + 32));
  }
  return result;
}

unint64_t sub_1010C6538(unint64_t result, char a2)
{
  if (a2) {
    return sub_1010C648C(result);
  }
  return result;
}

uint64_t sub_1010C6548()
{
  return sub_1010C6574();
}

uint64_t sub_1010C6554()
{
  return sub_1010C6574();
}

uint64_t sub_1010C6560()
{
  return sub_1010C6574();
}

uint64_t sub_1010C656C()
{
  return sub_1010C6574();
}

uint64_t sub_1010C6574()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_1010C65A4@<X0>(uint64_t a1@<X8>)
{
  return sub_1010C57CC(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1010C65C0()
{
  sub_1010C649C(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1010C65FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1010C6664(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1010C66C8(uint64_t a1)
{
  sub_1010C4E10(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24));
}

void sub_1010C66D4(uint64_t a1)
{
  sub_1010C502C(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24));
}

void sub_1010C66DC()
{
}

uint64_t sub_1010C66E4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1010C66F4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1010C672C(unint64_t a1)
{
  return sub_1010C62E4(a1, *(void (**)(uint64_t))(v1 + 16));
}

unint64_t sub_1010C6734(unint64_t result)
{
  if (result != 7) {
    return sub_1010C648C(result);
  }
  return result;
}

unint64_t sub_1010C6744()
{
  unint64_t result = qword_10166A150;
  if (!qword_10166A150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166A150);
  }
  return result;
}

uint64_t sub_1010C6798(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1010C67E4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t getEnumTagSinglePayload for MaskedIdentifierService.Error(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFF9 && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483641);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 6;
  if (v4 >= 8) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MaskedIdentifierService.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF9)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483641;
    if (a3 >= 0x7FFFFFF9) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF9) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 6;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MaskedIdentifierService.Error()
{
  return &type metadata for MaskedIdentifierService.Error;
}

uint64_t sub_1010C68F0(uint64_t a1)
{
  return sub_1010C6410(a1);
}

uint64_t sub_1010C6908(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10166A168);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1010C8BA8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v3;
  v10[15] = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1010C6AA8()
{
  uint64_t v1 = 0x49746375646F7270;
  if (*v0 != 1) {
    uint64_t v1 = 0x6449726F646E6576;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x754E6C6169726573;
  }
}

uint64_t sub_1010C6B10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1010C8E08(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1010C6B38(uint64_t a1)
{
  unint64_t v2 = sub_1010C8BA8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010C6B74(uint64_t a1)
{
  unint64_t v2 = sub_1010C8BA8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010C6BB0(void *a1)
{
  return sub_1010C6908(a1);
}

__n128 sub_1010C6BEC@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  sub_100E9C2AC((uint64_t)&a1[1], (uint64_t)v18);
  sub_100E9C2AC((uint64_t)v18, (uint64_t)&v19);
  if (v20 == 1)
  {
    sub_100061E54((uint64_t)a1);
    uint64_t v4 = 0;
    unint64_t v5 = 0;
  }
  else
  {
    uint64_t v21 = v19;
    sub_100061E54((uint64_t)a1);
    sub_10000D64C();
    uint64_t v6 = FixedWidthInteger.data.getter();
    unint64_t v8 = v7;
    uint64_t v4 = Data.hexString.getter();
    unint64_t v5 = v9;
    sub_10001CFB8(v6, v8);
  }
  sub_100E9C2AC((uint64_t)&a1[2], (uint64_t)v17);
  sub_100E9C2AC((uint64_t)v17, (uint64_t)&v21);
  if (v22 == 1)
  {
    sub_1000CE9DC((uint64_t)a1);
    uint64_t v10 = 0;
    unint64_t v11 = 0;
  }
  else
  {
    sub_10000D64C();
    uint64_t v12 = FixedWidthInteger.data.getter();
    unint64_t v14 = v13;
    uint64_t v10 = Data.hexString.getter();
    unint64_t v11 = v15;
    sub_1000CE9DC((uint64_t)a1);
    sub_10001CFB8(v12, v14);
  }
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v4;
  a2[1].n128_u64[1] = v5;
  a2[2].n128_u64[0] = v10;
  a2[2].n128_u64[1] = v11;
  return result;
}

uint64_t sub_1010C6D40(uint64_t a1, uint64_t a2)
{
  v2[33] = a1;
  v2[34] = a2;
  uint64_t v3 = type metadata accessor for HashAlgorithm();
  v2[35] = v3;
  v2[36] = *(void *)(v3 - 8);
  v2[37] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Locale();
  v2[38] = v4;
  v2[39] = *(void *)(v4 - 8);
  v2[40] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v2[41] = v5;
  v2[42] = *(void *)(v5 - 8);
  v2[43] = swift_task_alloc();
  return _swift_task_switch(sub_1010C6EB8, 0, 0);
}

void sub_1010C6EB8()
{
  unint64_t v1 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v3 = [self currentDevice];
  if (!v3)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = v3;
  id v5 = [v3 serverFriendlyDescription];

  if (!v5)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v6 = *(void *)(v0 + 336);
  uint64_t v7 = *(void *)(v0 + 344);
  uint64_t v8 = *(void *)(v0 + 328);
  uint64_t v46 = *(void *)(v0 + 320);
  uint64_t v47 = *(void *)(v0 + 312);
  uint64_t v48 = *(void *)(v0 + 304);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  char v12 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v9, v11, 0xD000000000000011, 0x80000001013F64E0, v12);
  unint64_t v13 = v1;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v14 = Date.epoch.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  *(void *)(v0 + 240) = v14;
  uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v17 = v16;
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v15, v17, 0xD000000000000015, 0x80000001013F6500, v18);
  unint64_t v19 = v13;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 232) = 1;
  uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v22 = v21;
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v20, v22, 0xD000000000000013, 0x80000001013F6520, v23);
  unint64_t v24 = v19;
  uint64_t v25 = swift_bridgeObjectRelease();
  uint64_t v26 = sub_100BCABFC(v25);
  uint64_t v28 = v27;
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v26, v28, 0x6567412D72657355, 0xEA0000000000746ELL, v29);
  swift_bridgeObjectRelease();
  static Locale.current.getter();
  uint64_t v30 = Locale.acceptLanguageCode.getter();
  uint64_t v32 = v31;
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
  char v33 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v30, v32, 0x4C2D747065636341, 0xEF65676175676E61, v33);
  unint64_t v34 = v24;
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v35 = (void *)qword_10170EE68;
  id v36 = [self sharedInstance];
  unsigned int v37 = [v36 isInternalBuild];

  if (v37)
  {
    NSString v38 = String._bridgeToObjectiveC()();
    unsigned int v39 = [v35 BOOLForKey:v38];

    if (v39)
    {
      char v40 = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x80000001013F6560, v40);
      swift_bridgeObjectRelease();
    }
  }
  *(void *)(v0 + 352) = v34;
  uint64_t v41 = *(__n128 **)(v0 + 264);
  sub_100061E54((uint64_t)v41);
  sub_1010C6BEC(v41, (__n128 *)(v0 + 16));
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  *(void *)(v0 + 360) = JSONEncoder.init()();
  long long v42 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 128) = v42;
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 48);
  sub_1010C8848();
  uint64_t v43 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *(void *)(v0 + 368) = v43;
  *(void *)(v0 + 376) = v44;
  sub_1000361E0(v43, v44);
  uint64_t v49 = (void (__cdecl *)())((char *)&dword_10165AB20 + dword_10165AB20);
  unsigned int v45 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v45;
  *unsigned int v45 = v0;
  v45[1] = sub_1010C7664;
  v49();
}

uint64_t sub_1010C7664(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 392) = a1;
  *(void *)(v3 + 400) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1010C7764, 0, 0);
}

uint64_t sub_1010C7764()
{
  uint64_t v2 = v0[49];
  unint64_t v1 = v0[50];
  uint64_t v4 = v0[46];
  unint64_t v3 = v0[47];
  uint64_t v6 = v0[36];
  uint64_t v5 = v0[37];
  uint64_t v7 = v0[35];
  v0[26] = v2;
  v0[27] = v1;
  sub_1000361E0(v4, v3);
  sub_1000361E0(v2, v1);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  uint64_t v8 = v0[27];
  v0[51] = v0[26];
  v0[52] = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v9 = Data.hash(algorithm:)();
  uint64_t v11 = v10;
  v0[53] = v9;
  v0[54] = v10;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165AB18 + dword_10165AB18);
  char v12 = (void *)swift_task_alloc();
  v0[55] = v12;
  *char v12 = v0;
  v12[1] = sub_1010C78EC;
  uint64_t v13 = v0[34];
  return v15(v9, v11, v13);
}

uint64_t sub_1010C78EC(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 448) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1010C8090;
  }
  else
  {
    uint64_t v6 = v4[53];
    unint64_t v7 = v4[54];
    v4[57] = a1;
    sub_10001CFB8(v6, v7);
    uint64_t v5 = sub_1010C7A18;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1010C7A18()
{
  uint64_t v55 = v0;
  uint64_t v2 = v0[56];
  uint64_t v1 = v0[57];
  uint64_t v3 = v0[44];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v54[0] = v3;
  sub_1001EE9C8(v1, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, v54);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  uint64_t v6 = v0[51];
  unint64_t v7 = v0[52];
  uint64_t v49 = v54[0];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v6, v7);
  if (qword_101637310 != -1) {
LABEL_39:
  }
    swift_once();
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170F068);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Pairing lock header:", v11, 2u);
    swift_slowDealloc();
  }
  uint64_t v47 = v0 + 2;
  uint64_t v48 = v0;
  uint64_t v46 = v0 + 8;

  uint64_t v12 = v49;
  uint64_t v50 = v49 + 64;
  uint64_t v13 = -1;
  uint64_t v14 = -1 << *(unsigned char *)(v49 + 32);
  if (-v14 < 64) {
    uint64_t v13 = ~(-1 << -(char)v14);
  }
  unint64_t v15 = v13 & *(void *)(v49 + 64);
  int64_t v51 = (unint64_t)(63 - v14) >> 6;
  swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v52)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v52 = i;
      unint64_t v18 = v17 | (i << 6);
      goto LABEL_29;
    }
    int64_t v19 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    uint64_t v0 = v48;
    if (v19 >= v51) {
      goto LABEL_31;
    }
    unint64_t v20 = *(void *)(v50 + 8 * v19);
    int64_t v21 = i + 1;
    if (!v20)
    {
      int64_t v21 = i + 2;
      if (i + 2 >= v51) {
        goto LABEL_31;
      }
      unint64_t v20 = *(void *)(v50 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = i + 3;
        if (i + 3 >= v51) {
          goto LABEL_31;
        }
        unint64_t v20 = *(void *)(v50 + 8 * v21);
        if (!v20) {
          break;
        }
      }
    }
LABEL_28:
    unint64_t v15 = (v20 - 1) & v20;
    int64_t v52 = v21;
    unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_29:
    uint64_t v23 = 16 * v18;
    unint64_t v24 = (uint64_t *)(*(void *)(v12 + 48) + v23);
    uint64_t v26 = *v24;
    unint64_t v25 = v24[1];
    uint64_t v27 = (uint64_t *)(*(void *)(v12 + 56) + v23);
    uint64_t v29 = *v27;
    unint64_t v28 = v27[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v0 = (void *)swift_slowAlloc();
      v54[0] = (uint64_t)v0;
      *(_DWORD *)uint64_t v32 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v32 + 4) = sub_1008FA0F0(v26, v25, v54);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v32 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v32 + 14) = sub_1008FA0F0(v29, v28, v54);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s): %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v12 = v49;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v22 = i + 4;
  if (i + 4 < v51)
  {
    unint64_t v20 = *(void *)(v50 + 8 * v22);
    if (!v20)
    {
      while (1)
      {
        int64_t v21 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          goto LABEL_38;
        }
        if (v21 >= v51) {
          goto LABEL_31;
        }
        unint64_t v20 = *(void *)(v50 + 8 * v21);
        ++v22;
        if (v20) {
          goto LABEL_28;
        }
      }
    }
    int64_t v21 = i + 4;
    goto LABEL_28;
  }
LABEL_31:
  swift_release();
  sub_1010C889C((uint64_t)v47);
  sub_1010C889C((uint64_t)v47);
  char v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v37 = v48[46];
  unint64_t v36 = v48[47];
  uint64_t v38 = v48[33];
  if (v35)
  {
    uint64_t v53 = v48[33];
    unsigned int v39 = (uint8_t *)swift_slowAlloc();
    v54[0] = swift_slowAlloc();
    *(_DWORD *)unsigned int v39 = 136315138;
    uint64_t v0 = v48;
    long long v40 = v47[1];
    *uint64_t v46 = *v47;
    v46[1] = v40;
    v46[2] = v47[2];
    sub_1010C889C((uint64_t)v47);
    uint64_t v41 = String.init<A>(describing:)();
    v48[31] = sub_1008FA0F0(v41, v42, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1010C88EC((uint64_t)v47);
    sub_1010C88EC((uint64_t)v47);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Pairing lock body %s", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();
    sub_1000CE9DC(v53);

    sub_10001CFB8(v37, v36);
    sub_1010C88EC((uint64_t)v47);
  }
  else
  {
    sub_1010C88EC((uint64_t)v47);
    sub_10001CFB8(v37, v36);
    sub_1010C88EC((uint64_t)v47);
    sub_1010C88EC((uint64_t)v47);
    swift_release();
    swift_release();
    sub_1000CE9DC(v38);
  }
  uint64_t v44 = v0[46];
  uint64_t v43 = v0[47];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned int v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v45(v49, v44, v43);
}

uint64_t sub_1010C8090()
{
  uint64_t v56 = v0;
  uint64_t v1 = v0[51];
  unint64_t v2 = v0[52];
  sub_10001CFB8(v0[53], v0[54]);
  sub_10001CFB8(v1, v2);
  unint64_t v3 = (unint64_t)&qword_101637000;
  if (qword_101637310 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170F068);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    uint64_t v50 = v0;
    if (os_log_type_enabled(v5, v6))
    {
      unint64_t v7 = v3;
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138543362;
      swift_errorRetain();
      uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
      v50[32] = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v10;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to sign pairing lock request. %{public}@", v8, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v3 = v7;
      uint64_t v0 = v50;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v11 = v0[44];
    if (*(void *)(v3 + 784) != -1) {
      swift_once();
    }
    sub_100010324(v4, (uint64_t)qword_10170F068);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Pairing lock header:", v14, 2u);
      swift_slowDealloc();
    }
    uint64_t v49 = v0 + 2;
    uint64_t v47 = v0 + 8;
    uint64_t v48 = v0 + 31;

    uint64_t v51 = v11 + 64;
    uint64_t v15 = -1;
    uint64_t v16 = -1 << *(unsigned char *)(v11 + 32);
    if (-v16 < 64) {
      uint64_t v15 = ~(-1 << -(char)v16);
    }
    unint64_t v3 = v15 & *(void *)(v11 + 64);
    int64_t v52 = (unint64_t)(63 - v16) >> 6;
    swift_bridgeObjectRetain();
    int64_t v17 = 0;
    while (v3)
    {
      while (1)
      {
        unint64_t v18 = __clz(__rbit64(v3));
        v3 &= v3 - 1;
        unint64_t v19 = v18 | (v17 << 6);
LABEL_29:
        uint64_t v23 = 16 * v19;
        unint64_t v24 = (uint64_t *)(*(void *)(v11 + 48) + v23);
        uint64_t v26 = *v24;
        unint64_t v25 = v24[1];
        uint64_t v27 = (uint64_t *)(*(void *)(v11 + 56) + v23);
        uint64_t v29 = *v27;
        unint64_t v28 = v27[1];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.debug.getter();
        uint64_t v0 = (void *)v31;
        if (os_log_type_enabled(v30, v31)) {
          break;
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        if (!v3) {
          goto LABEL_15;
        }
      }
      int64_t v53 = v17;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v32 + 4) = sub_1008FA0F0(v26, v25, &v55);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v32 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v32 + 14) = sub_1008FA0F0(v29, v28, &v55);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v0, "%s): %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      int64_t v17 = v53;
      swift_slowDealloc();
    }
LABEL_15:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    uint64_t v0 = v50;
    if (v20 >= v52) {
      break;
    }
    unint64_t v21 = *(void *)(v51 + 8 * v20);
    ++v17;
    if (v21) {
      goto LABEL_28;
    }
    int64_t v17 = v20 + 1;
    if (v20 + 1 >= v52) {
      break;
    }
    unint64_t v21 = *(void *)(v51 + 8 * v17);
    if (v21) {
      goto LABEL_28;
    }
    int64_t v17 = v20 + 2;
    if (v20 + 2 >= v52) {
      break;
    }
    unint64_t v21 = *(void *)(v51 + 8 * v17);
    if (v21) {
      goto LABEL_28;
    }
    int64_t v22 = v20 + 3;
    if (v22 >= v52) {
      break;
    }
    unint64_t v21 = *(void *)(v51 + 8 * v22);
    if (v21)
    {
      int64_t v17 = v22;
LABEL_28:
      unint64_t v3 = (v21 - 1) & v21;
      unint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
      goto LABEL_29;
    }
    while (1)
    {
      int64_t v17 = v22 + 1;
      if (__OFADD__(v22, 1)) {
        break;
      }
      if (v17 >= v52) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v51 + 8 * v17);
      ++v22;
      if (v21) {
        goto LABEL_28;
      }
    }
LABEL_39:
    __break(1u);
  }
LABEL_32:
  swift_release();
  sub_1010C889C((uint64_t)v49);
  sub_1010C889C((uint64_t)v49);
  char v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v37 = v50[46];
  unint64_t v36 = v50[47];
  uint64_t v38 = v50[33];
  if (v35)
  {
    uint64_t v54 = v50[33];
    unsigned int v39 = (uint8_t *)swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    *(_DWORD *)unsigned int v39 = 136315138;
    uint64_t v0 = v50;
    long long v40 = v49[1];
    *uint64_t v47 = *v49;
    v47[1] = v40;
    v47[2] = v49[2];
    sub_1010C889C((uint64_t)v49);
    uint64_t v41 = String.init<A>(describing:)();
    *uint64_t v48 = sub_1008FA0F0(v41, v42, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1010C88EC((uint64_t)v49);
    sub_1010C88EC((uint64_t)v49);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Pairing lock body %s", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();
    sub_1000CE9DC(v54);

    sub_10001CFB8(v37, v36);
    sub_1010C88EC((uint64_t)v49);
  }
  else
  {
    sub_1010C88EC((uint64_t)v49);
    sub_10001CFB8(v37, v36);
    sub_1010C88EC((uint64_t)v49);
    sub_1010C88EC((uint64_t)v49);
    swift_release();
    swift_release();
    sub_1000CE9DC(v38);
  }
  uint64_t v43 = v0[46];
  uint64_t v44 = v0[47];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned int v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v45(v11, v43, v44);
}

unint64_t sub_1010C8848()
{
  unint64_t result = qword_10166A160;
  if (!qword_10166A160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166A160);
  }
  return result;
}

uint64_t sub_1010C889C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1010C88EC(uint64_t a1)
{
  return a1;
}

uint64_t destroy for AccountCheckRequestContent(uint64_t a1)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for AccountCheckRequestContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for AccountCheckRequestContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *assignWithTake for AccountCheckRequestContent(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountCheckRequestContent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccountCheckRequestContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountCheckRequestContent()
{
  return &type metadata for AccountCheckRequestContent;
}

ValueMetadata *type metadata accessor for AccountCheckRequest()
{
  return &type metadata for AccountCheckRequest;
}

unint64_t sub_1010C8BA8()
{
  unint64_t result = qword_10166A170;
  if (!qword_10166A170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166A170);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccountCheckRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010C8CC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountCheckRequestContent.CodingKeys()
{
  return &type metadata for AccountCheckRequestContent.CodingKeys;
}

unint64_t sub_1010C8D04()
{
  unint64_t result = qword_10166A178;
  if (!qword_10166A178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166A178);
  }
  return result;
}

unint64_t sub_1010C8D5C()
{
  unint64_t result = qword_10166A180;
  if (!qword_10166A180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166A180);
  }
  return result;
}

unint64_t sub_1010C8DB4()
{
  unint64_t result = qword_10166A188;
  if (!qword_10166A188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166A188);
  }
  return result;
}

uint64_t sub_1010C8E08(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t destroy for BeaconSharingManagerRouter()
{
  swift_weakDestroy();

  return swift_weakDestroy();
}

uint64_t initializeWithCopy for BeaconSharingManagerRouter(uint64_t a1)
{
  return a1;
}

uint64_t assignWithCopy for BeaconSharingManagerRouter(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for BeaconSharingManagerRouter(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for BeaconSharingManagerRouter(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for BeaconSharingManagerRouter()
{
  return &type metadata for BeaconSharingManagerRouter;
}

unint64_t sub_1010C90B0()
{
  unint64_t result = qword_10166A190;
  if (!qword_10166A190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166A190);
  }
  return result;
}

uint64_t sub_1010C9104(unsigned __int8 a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v30 = a2;
    unint64_t v31 = a3;
    unint64_t v32 = a4;
    os_log_type_t v13 = (uint64_t *)Strong;
    uint64_t v14 = (unsigned __int8 *)a6 + *(int *)(type metadata accessor for MessagingMessageContext() + 24);
    int v15 = *v14;
    uint64_t v17 = *((void *)v14 + 1);
    uint64_t v16 = *((void *)v14 + 2);
    uint64_t v18 = sub_1011599B0((uint64_t)&off_1015A1A40);
    BOOL v19 = sub_100DC7F20(a1, v18);
    swift_bridgeObjectRelease();
    if (!v19 && (sub_100533CC8(v15, v17, v16) & 1) == 0)
    {
      static os_log_type_t.error.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_101347BA0;
      *(void *)(v20 + 56) = &type metadata for Int32;
      *(void *)(v20 + 64) = &protocol witness table for Int32;
      *(_DWORD *)(v20 + 32) = a1;
      *(void *)(v20 + 96) = &type metadata for String;
      *(void *)(v20 + 104) = sub_10000B4CC();
      *(void *)(v20 + 72) = v17;
      *(void *)(v20 + 80) = v16;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
    }
    switch(a1)
    {
      case 1u:
        sub_1010CC184((uint64_t)v13, 1, v30, v31, v32, (uint64_t)a6);
        break;
      case 2u:
        int64_t v22 = "com.apple.icloud.searchpartyd.handleAcceptShare";
        uint64_t v23 = (uint64_t)v13;
        char v24 = 2;
        uint64_t v25 = v30;
        uint64_t v26 = v31;
        uint64_t v27 = v32;
        uint64_t v28 = (uint64_t)a6;
        uint64_t v29 = 47;
        goto LABEL_17;
      case 3u:
        int64_t v22 = "com.apple.icloud.searchpartyd.handleDeclineShare";
        uint64_t v23 = (uint64_t)v13;
        char v24 = 3;
        uint64_t v25 = v30;
        uint64_t v26 = v31;
        uint64_t v27 = v32;
        uint64_t v28 = (uint64_t)a6;
        uint64_t v29 = 48;
LABEL_17:
        sub_1010CC404(v23, v24, v25, v26, v27, v28, (uint64_t)v22, v29);
        break;
      case 4u:
        sub_1010CC778((uint64_t)v13, 4, v30);
        break;
      case 5u:
        sub_1010CC9B0((uint64_t)v13, 5, v30, v31, v32, (uint64_t)a6);
        break;
      case 6u:
        sub_1010CDBB4((uint64_t)v13, 6, v30, v31, v32, (uint64_t)a6);
        break;
      case 7u:
        sub_1010CDF7C((uint64_t)v13, 7, v30, v31, v32, (uint64_t)a6);
        break;
      case 8u:
        sub_1010CE0E0((uint64_t)v13, 8, v30, v31, v32, (uint64_t)a6);
        break;
      case 9u:
        sub_1010CE220((uint64_t)v13, 9, v30, v31, v32, (uint64_t)a6);
        break;
      case 0xAu:
        sub_1010CB8E4((uint64_t)v13, 10, v30, v31, v32, (uint64_t)a6);
        break;
      case 0xBu:
        sub_1010CBC90(11, v30);
        break;
      case 0xCu:
        sub_1010CBF0C((uint64_t)v13, 12, v30);
        break;
      case 0xDu:
        sub_1010CE3FC((uint64_t)v13, 13, v30);
        break;
      case 0xEu:
        sub_1010CE7D8(14, v30, v31, v32, (uint64_t)a6);
        break;
      case 0xFu:
        sub_1010CE940(15, v30);
        break;
      case 0x10u:
        sub_1010CE538(16, v30);
        break;
      default:
        sub_1010C9774(v13, 0, v30, v31, v32, a5, a6);
        break;
    }
    return swift_release();
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    return os_log(_:dso:log:_:_:)();
  }
}

uint64_t sub_1010C9774(uint64_t *a1, int a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7)
{
  v242 = a7;
  uint64_t v251 = a6;
  v263 = (char *)a5;
  unint64_t v264 = a4;
  LODWORD(v265) = a2;
  v240 = a1;
  uint64_t MyAirPodsFamilyShareEnvelope = type metadata accessor for FindMyAirPodsFamilyShareEnvelope();
  __chkstk_darwin(MyAirPodsFamilyShareEnvelope);
  uint64_t v253 = (uint64_t)&v231 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v255 = *(void *)(v8 - 8);
  uint64_t v256 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  v244 = (char *)&v231 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v245 = (char *)&v231 - v11;
  uint64_t MyAccessoryFamilyShareEnvelope = type metadata accessor for FindMyAccessoryFamilyShareEnvelope(0);
  __chkstk_darwin(MyAccessoryFamilyShareEnvelope);
  uint64_t v254 = (uint64_t)&v231 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v261 = type metadata accessor for FamilyCryptoKeysV1();
  uint64_t v241 = *(void *)(v261 - 8);
  __chkstk_darwin(v261);
  uint64_t v262 = (uint64_t)&v231 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v237 = type metadata accessor for FamilyShareEnvelopeV1(0);
  __chkstk_darwin(v237);
  v252 = (char *)&v231 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v260 = (int *)type metadata accessor for CryptoKeys();
  uint64_t v234 = *((void *)v260 - 1);
  __chkstk_darwin(v260);
  v259 = (uint64_t *)((char *)&v231 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v250 = type metadata accessor for DateInterval();
  uint64_t v249 = *(void *)(v250 - 8);
  __chkstk_darwin(v250);
  v248 = (char *)&v231 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  unint64_t v21 = (char *)&v231 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19);
  char v24 = (char *)&v231 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v231 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v231 - v28;
  uint64_t v30 = type metadata accessor for Date();
  unint64_t v31 = *(void *)(v30 - 8);
  uint64_t v257 = v30;
  unint64_t v258 = v31;
  uint64_t v32 = __chkstk_darwin(v30);
  os_log_type_t v34 = (char *)&v231 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v37 = (uint64_t **)((char *)&v231 - v36);
  uint64_t v38 = __chkstk_darwin(v35);
  v232 = (char *)&v231 - v39;
  __chkstk_darwin(v38);
  v236 = (char *)&v231 - v40;
  uint64_t v41 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v42 = __chkstk_darwin(v41);
  uint64_t v247 = (uint64_t)&v231 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __chkstk_darwin(v42);
  v233 = (uint64_t *)((char *)&v231 - v45);
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v243 = (uint64_t)&v231 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  v231 = (uint64_t *)((char *)&v231 - v49);
  uint64_t v50 = __chkstk_darwin(v48);
  uint64_t v246 = (uint64_t)&v231 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  v235 = (uint64_t *)((char *)&v231 - v53);
  __chkstk_darwin(v52);
  uint64_t v239 = (uint64_t)&v231 - v54;
  uint64_t v55 = type metadata accessor for LegacyShareEnvelope(0);
  __chkstk_darwin(v55);
  unint64_t v58 = (char *)&v231 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(v56)
  {
    case 1uLL:
      uint64_t v59 = (uint64_t)v58;
      unint64_t v60 = (unint64_t)v263;
      uint64_t v61 = v269;
      uint64_t result = sub_100568E54((uint64_t)v58);
      if (v61) {
        return result;
      }
      uint64_t v269 = 0;
      uint64_t v63 = v239;
      sub_1010CED3C(v59, v239, type metadata accessor for SharedBeaconRecord);
      uint64_t v64 = *(int *)(v55 + 20);
      uint64_t v261 = v59;
      uint64_t v65 = *(void *)(v59 + v64);
      if (!*(void *)(v65 + 16))
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v258 + 56))(v29, 1, 1, v257);
        uint64_t v75 = v264;
        goto LABEL_39;
      }
      uint64_t v66 = v234;
      uint64_t v67 = v65 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
      uint64_t v68 = v249;
      uint64_t v69 = v248;
      uint64_t v70 = v250;
      (*(void (**)(char *, uint64_t, uint64_t))(v249 + 16))(v248, v67, v250);
      swift_bridgeObjectRetain();
      DateInterval.start.getter();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
      uint64_t v72 = v257;
      unint64_t v71 = v258;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v258 + 56))(v29, 0, 1, v257);
      int v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48))(v29, 1, v72);
      uint64_t v74 = v65;
      uint64_t v75 = v264;
      if (v73 == 1)
      {
        swift_bridgeObjectRelease();
LABEL_39:
        sub_10001E324((uint64_t)v29);
        static os_log_type_t.error.getter();
        uint64_t v130 = v265;
        if (qword_101637258 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v131 = swift_allocObject();
        *(_OWORD *)(v131 + 16) = xmmword_101342130;
        sub_1000361E0(v75, v60);
        uint64_t v132 = sub_10052A678(v130, 1, v75, v60);
        uint64_t v134 = v133;
        sub_10001CFB8(v75, v60);
        *(void *)(v131 + 56) = &type metadata for String;
        *(void *)(v131 + 64) = sub_10000B4CC();
        *(void *)(v131 + 32) = v132;
        *(void *)(v131 + 40) = v134;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_1010CECDC(v63, type metadata accessor for SharedBeaconRecord);
        return sub_1010CECDC(v261, type metadata accessor for LegacyShareEnvelope);
      }
      v158 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
      uint64_t v159 = (uint64_t)v236;
      v158(v236, v29, v72);
      uint64_t v160 = type metadata accessor for MessagingMessageContext();
      sub_10120DB08(*(uint64_t *)((char *)v242 + *(int *)(v160 + 48)), *(uint64_t *)((char *)v242 + *(int *)(v160 + 48) + 8), 1, v159, v235);
      int64_t v161 = *(void *)(v74 + 16);
      if (v161)
      {
        uint64_t v256 = v74;
        v268 = _swiftEmptyArrayStorage;
        sub_1000B7D58(0, v161, 0);
        uint64_t v162 = *(void *)(v66 + 72);
        v163 = v268;
        uint64_t v262 = v162;
        do
        {
          uint64_t v164 = (uint64_t)v259;
          sub_1010CED3C(v67, (uint64_t)v259, (uint64_t (*)(void))type metadata accessor for CryptoKeys);
          v165 = (uint64_t *)(v164 + v260[9]);
          uint64_t v166 = *v165;
          unint64_t v167 = v165[1];
          v168 = (uint64_t *)(v164 + v260[6]);
          uint64_t v170 = *v168;
          unint64_t v169 = v168[1];
          v171 = (uint64_t *)(v164 + v260[5]);
          uint64_t v172 = *v171;
          unint64_t v173 = v171[1];
          unint64_t v264 = v167;
          v265 = (uint64_t **)v166;
          sub_1000361E0(v166, v167);
          sub_1000361E0(v170, v169);
          v263 = (char *)v173;
          sub_100037A38(v172, v173);
          sub_1010CECDC(v164, (uint64_t (*)(void))type metadata accessor for CryptoKeys);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B7D58(0, v163[2] + 1, 1);
            uint64_t v162 = v262;
            v163 = v268;
          }
          unint64_t v175 = v163[2];
          unint64_t v174 = v163[3];
          if (v175 >= v174 >> 1)
          {
            sub_1000B7D58(v174 > 1, v175 + 1, 1);
            uint64_t v162 = v262;
            v163 = v268;
          }
          v163[2] = v175 + 1;
          v176 = &v163[6 * v175];
          unint64_t v177 = v264;
          v176[4] = v265;
          v176[5] = v177;
          v176[6] = v170;
          v176[7] = v169;
          unint64_t v178 = (unint64_t)v263;
          v176[8] = v172;
          v176[9] = v178;
          v67 += v162;
          --v161;
        }
        while (v161);
        swift_bridgeObjectRelease();
        uint64_t v63 = v239;
      }
      else
      {
        swift_bridgeObjectRelease();
        v163 = _swiftEmptyArrayStorage;
      }
      uint64_t v222 = type metadata accessor for Transaction();
      __chkstk_darwin(v222);
      v223 = v235;
      *(&v231 - 6) = v242;
      *(&v231 - 5) = v223;
      *(&v231 - 4) = v240;
      *(&v231 - 3) = 0;
      uint64_t v229 = 0;
      v230 = v163;
      static Transaction.named<A>(_:with:)();
      swift_bridgeObjectRelease();
      sub_1010CECDC((uint64_t)v223, type metadata accessor for SharedBeaconRecord);
      (*(void (**)(char *, uint64_t))(v258 + 8))(v236, v257);
      sub_1010CECDC(v63, type metadata accessor for SharedBeaconRecord);
      v156 = type metadata accessor for LegacyShareEnvelope;
      uint64_t v157 = v261;
      return sub_1010CECDC(v157, v156);
    case 2uLL:
      uint64_t v101 = v251;
      if (*(void *)(v251 + 16))
      {
        uint64_t v102 = sub_100723FF4(0x44495344746C41, 0xE700000000000000);
        uint64_t v103 = (uint64_t)v252;
        uint64_t v104 = v265;
        uint64_t v105 = v264;
        if (v106)
        {
          sub_10012F428(*(void *)(v101 + 56) + 32 * v102, (uint64_t)&v268);
          sub_10000588C(&qword_101651CF0);
          int v107 = swift_dynamicCast();
          if (v107) {
            uint64_t v108 = v266;
          }
          else {
            uint64_t v108 = 0;
          }
          if (v107) {
            uint64_t v109 = v267;
          }
          else {
            uint64_t v109 = 0;
          }
        }
        else
        {
          uint64_t v108 = 0;
          uint64_t v109 = 0;
        }
      }
      else
      {
        uint64_t v108 = 0;
        uint64_t v109 = 0;
        uint64_t v103 = (uint64_t)v252;
        uint64_t v104 = v265;
        uint64_t v105 = v264;
      }
      uint64_t v116 = v269;
      sub_1005691C8(v103);
      uint64_t v269 = v116;
      if (v116) {
        return swift_bridgeObjectRelease();
      }
      sub_1010CED3C(v103, v246, type metadata accessor for SharedBeaconRecord);
      uint64_t v117 = *(void *)(v103 + *(int *)(v237 + 20));
      if (!*(void *)(v117 + 16))
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v258 + 56))(v27, 1, 1, v257);
        goto LABEL_47;
      }
      uint64_t v118 = *(int *)(v261 + 20);
      v265 = (uint64_t **)(v117
                        + ((*(unsigned __int8 *)(v241 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80)));
      uint64_t v119 = v249;
      v120 = v248;
      uint64_t v121 = v250;
      (*(void (**)(char *, char *, uint64_t))(v249 + 16))(v248, (char *)v265 + v118, v250);
      swift_bridgeObjectRetain();
      DateInterval.start.getter();
      (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v121);
      uint64_t v122 = v117;
      uint64_t v124 = v257;
      unint64_t v123 = v258;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v258 + 56))(v27, 0, 1, v257);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v27, 1, v124) == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v103 = (uint64_t)v252;
LABEL_47:
        swift_bridgeObjectRelease();
        sub_10001E324((uint64_t)v27);
        static os_log_type_t.error.getter();
        if (qword_101637258 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v139 = swift_allocObject();
        *(_OWORD *)(v139 + 16) = xmmword_101342130;
        unint64_t v140 = (unint64_t)v263;
        sub_1000361E0(v105, (unint64_t)v263);
        uint64_t v141 = sub_10052A678(v104, 2, v105, v140);
        uint64_t v143 = v142;
        sub_10001CFB8(v105, v140);
        *(void *)(v139 + 56) = &type metadata for String;
        *(void *)(v139 + 64) = sub_10000B4CC();
        *(void *)(v139 + 32) = v141;
        *(void *)(v139 + 40) = v143;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_1010CECDC(v246, type metadata accessor for SharedBeaconRecord);
        return sub_1010CECDC(v103, type metadata accessor for FamilyShareEnvelopeV1);
      }
      v259 = (uint64_t *)v108;
      v260 = v109;
      v186 = *(void (**)(char *, char *, uint64_t))(v123 + 32);
      uint64_t v187 = (uint64_t)v232;
      v186(v232, v27, v124);
      uint64_t v188 = type metadata accessor for MessagingMessageContext();
      sub_10120DB08(*(uint64_t *)((char *)v242 + *(int *)(v188 + 48)), *(uint64_t *)((char *)v242 + *(int *)(v188 + 48) + 8), 1, v187, v231);
      int64_t v189 = *(void *)(v122 + 16);
      if (!v189)
      {
        swift_bridgeObjectRelease();
        uint64_t v27 = (char *)_swiftEmptyArrayStorage;
LABEL_119:
        v224 = v252;
        uint64_t v225 = type metadata accessor for Transaction();
        __chkstk_darwin(v225);
        v226 = v231;
        *(&v231 - 6) = v242;
        *(&v231 - 5) = v226;
        v227 = v259;
        v228 = v260;
        *(&v231 - 4) = v240;
        *(&v231 - 3) = v227;
        uint64_t v229 = (uint64_t)v228;
        v230 = v27;
        static Transaction.named<A>(_:with:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1010CECDC((uint64_t)v226, type metadata accessor for SharedBeaconRecord);
        (*(void (**)(char *, uint64_t))(v258 + 8))(v232, v257);
        sub_1010CECDC(v246, type metadata accessor for SharedBeaconRecord);
        v156 = type metadata accessor for FamilyShareEnvelopeV1;
        uint64_t v157 = (uint64_t)v224;
        return sub_1010CECDC(v157, v156);
      }
      uint64_t v256 = v122;
      v268 = _swiftEmptyArrayStorage;
      sub_1000B7D58(0, v189, 0);
      v263 = *(char **)(v241 + 72);
      uint64_t v190 = (uint64_t)v265;
      while (2)
      {
        uint64_t v191 = v262;
        sub_1010CED3C(v190, v262, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
        v192 = (uint64_t *)(v191 + *(int *)(v261 + 24));
        uint64_t v125 = *v192;
        unint64_t v110 = v192[1];
        v265 = (uint64_t **)v190;
        if ((v110 & 0x2000000000000000) == 0)
        {
          sub_1000361E0(v125, v110);
          unint64_t v264 = 0;
          unint64_t v193 = 0xF000000000000000;
          goto LABEL_101;
        }
        unint64_t v193 = v110 & 0xDFFFFFFFFFFFFFFFLL;
        unint64_t v194 = v110 >> 62;
        uint64_t v195 = 0;
        uint64_t v196 = 0;
        uint64_t v197 = 0;
        uint64_t v198 = 0;
        switch(v110 >> 62)
        {
          case 1uLL:
            sub_1001A1790(v125, v110);
            uint64_t v195 = (int)v125;
            uint64_t v196 = v125 >> 32;
            sub_1001A1790(v125, v110);
            sub_1001A1790(v125, v110);
            uint64_t v197 = v125 >> 32;
            uint64_t v198 = (int)v125;
            break;
          case 2uLL:
            sub_1001A1790(v125, v110);
            uint64_t v195 = *(void *)(v125 + 16);
            uint64_t v196 = *(void *)(v125 + 24);
            sub_1001A1790(v125, v110);
            sub_1001A1790(v125, v110);
            uint64_t v198 = *(void *)(v125 + 16);
            uint64_t v197 = *(void *)(v125 + 24);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v195 = 0;
            uint64_t v198 = 0;
            uint64_t v196 = BYTE6(v110);
            uint64_t v197 = BYTE6(v110);
            break;
        }
        if (v197 < v195 || v195 < v198) {
          goto LABEL_122;
        }
        uint64_t v199 = 0;
        uint64_t v200 = 0;
        switch((int)v194)
        {
          case 1:
            uint64_t v200 = (int)v125;
            uint64_t v199 = v125 >> 32;
            break;
          case 2:
            uint64_t v200 = *(void *)(v125 + 16);
            uint64_t v199 = *(void *)(v125 + 24);
            break;
          case 3:
            break;
          default:
            uint64_t v200 = 0;
            uint64_t v199 = BYTE6(v110);
            break;
        }
        if (v199 < v196 || v196 < v200) {
          goto LABEL_123;
        }
        if (__OFSUB__(v196, v195)) {
          goto LABEL_124;
        }
        if ((unint64_t)(v196 - v195) < 0x39)
        {
          switch((int)v194)
          {
            case 1:
              uint64_t v201 = v125 >> 32;
              goto LABEL_91;
            case 2:
              uint64_t v201 = *(void *)(v125 + 24);
              goto LABEL_92;
            default:
              goto LABEL_94;
          }
        }
        uint64_t v201 = v195 + 57;
        if (__OFADD__(v195, 57)) {
          goto LABEL_128;
        }
        uint64_t v202 = 0;
        uint64_t v203 = 0;
        switch((int)v194)
        {
          case 1:
            uint64_t v203 = (int)v125;
            uint64_t v202 = v125 >> 32;
            break;
          case 2:
            uint64_t v203 = *(void *)(v125 + 16);
            uint64_t v202 = *(void *)(v125 + 24);
            break;
          case 3:
            break;
          default:
            uint64_t v203 = 0;
            uint64_t v202 = BYTE6(v110);
            break;
        }
        if (v202 < v201 || v201 < v203) {
          goto LABEL_129;
        }
        uint64_t v204 = 0;
        switch((int)v194)
        {
          case 1:
LABEL_91:
            uint64_t v204 = (int)v125;
            break;
          case 2:
LABEL_92:
            uint64_t v204 = *(void *)(v125 + 16);
            break;
          default:
            break;
        }
        if (v201 < v204) {
          goto LABEL_125;
        }
LABEL_94:
        uint64_t v80 = Data._Representation.subscript.getter();
        unint64_t v87 = v205;
        sub_1001A1AD8(v125, v110);
        switch(v87 >> 62)
        {
          case 1uLL:
            LODWORD(v206) = HIDWORD(v80) - v80;
            if (__OFSUB__(HIDWORD(v80), v80))
            {
              __break(1u);
LABEL_132:
              __break(1u);
              goto LABEL_133;
            }
            uint64_t v206 = (int)v206;
LABEL_99:
            if (v206 != 57) {
              goto LABEL_137;
            }
            sub_1001A1AD8(v125, v110);
            unint64_t v264 = v125;
            uint64_t v125 = v80;
            unint64_t v110 = v87;
LABEL_101:
            type metadata accessor for __DataStorage();
            swift_allocObject();
            uint64_t v80 = __DataStorage.init(length:)();
            if (swift_isUniquelyReferenced_nonNull_native())
            {
LABEL_105:
              unint64_t v211 = v193;
              unint64_t v87 = v80;
              uint64_t v212 = __DataStorage._bytes.getter();
              if (!v212) {
                goto LABEL_136;
              }
              uint64_t v213 = v212;
              uint64_t v214 = __DataStorage._offset.getter();
              uint64_t v215 = -v214;
              if (__OFSUB__(0, v214))
              {
                __break(1u);
LABEL_122:
                __break(1u);
LABEL_123:
                __break(1u);
LABEL_124:
                __break(1u);
LABEL_125:
                __break(1u);
LABEL_126:
                swift_once();
LABEL_26:
                sub_10000588C((uint64_t *)&unk_10163AD00);
                uint64_t v111 = swift_allocObject();
                *(_OWORD *)(v111 + 16) = xmmword_101347BA0;
                LOBYTE(v268) = (_BYTE)v265;
                uint64_t v112 = String.init<A>(describing:)();
                uint64_t v114 = v113;
                *(void *)(v111 + 56) = &type metadata for String;
                unint64_t v115 = sub_10000B4CC();
                *(void *)(v111 + 32) = v112;
                *(void *)(v111 + 40) = v114;
                *(void *)(v111 + 96) = &type metadata for Int;
                *(void *)(v111 + 104) = &protocol witness table for Int;
                *(void *)(v111 + 64) = v115;
                *(void *)(v111 + 72) = v110;
                os_log(_:dso:log:_:_:)();
                return swift_bridgeObjectRelease();
              }
              uint64_t v216 = __DataStorage._length.getter();
              if (v216 >= 32) {
                size_t v217 = 32;
              }
              else {
                size_t v217 = v216;
              }
              bzero((void *)(v213 + v215), v217);
              sub_1010CECDC(v262, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
              uint64_t v27 = (char *)v268;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1000B7D58(0, *((void *)v27 + 2) + 1, 1);
                uint64_t v27 = (char *)v268;
              }
              unint64_t v219 = *((void *)v27 + 2);
              unint64_t v218 = *((void *)v27 + 3);
              if (v219 >= v218 >> 1)
              {
                sub_1000B7D58(v218 > 1, v219 + 1, 1);
                uint64_t v27 = (char *)v268;
              }
              *((void *)v27 + 2) = v219 + 1;
              v220 = &v27[48 * v219];
              *((void *)v220 + 4) = 0x2000000000;
              *((void *)v220 + 5) = v80 | 0x4000000000000000;
              *((void *)v220 + 6) = v125;
              *((void *)v220 + 7) = v110;
              v221 = v265;
              *((void *)v220 + 8) = v264;
              *((void *)v220 + 9) = v211;
              uint64_t v190 = (uint64_t)&v263[(void)v221];
              if (!--v189)
              {
                swift_bridgeObjectRelease();
                goto LABEL_119;
              }
              continue;
            }
            if (!__DataStorage._bytes.getter() || !__OFSUB__(0, __DataStorage._offset.getter()))
            {
              swift_allocObject();
              uint64_t v210 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
              swift_release();
              uint64_t v80 = v210;
              goto LABEL_105;
            }
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            swift_once();
            return os_log(_:dso:log:_:_:)();
          case 2uLL:
            uint64_t v208 = *(void *)(v80 + 16);
            uint64_t v207 = *(void *)(v80 + 24);
            BOOL v209 = __OFSUB__(v207, v208);
            uint64_t v206 = v207 - v208;
            if (!v209) {
              goto LABEL_99;
            }
            goto LABEL_132;
          case 3uLL:
            goto LABEL_137;
          default:
            uint64_t v206 = BYTE6(v87);
            goto LABEL_99;
        }
      }
    case 3uLL:
      uint64_t v77 = v254;
      uint64_t v27 = v263;
      uint64_t v78 = v269;
      uint64_t result = sub_10056953C(v254);
      if (v78) {
        return result;
      }
      uint64_t v269 = 0;
      uint64_t v79 = v243;
      sub_1010CED3C(v77, v243, type metadata accessor for SharedBeaconRecord);
      (*(void (**)(char *, uint64_t, uint64_t))(v255 + 16))(v245, v79 + *(int *)(v41 + 24), v256);
      uint64_t v80 = *(void *)(v77 + *(int *)(MyAccessoryFamilyShareEnvelope + 20));
      if (!*(void *)(v80 + 16))
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v258 + 56))(v24, 1, 1, v257);
LABEL_36:
        sub_10001E324((uint64_t)v24);
        static os_log_type_t.error.getter();
        uint64_t v125 = v265;
        unint64_t v110 = v264;
        if (qword_101637258 == -1)
        {
LABEL_37:
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v126 = swift_allocObject();
          *(_OWORD *)(v126 + 16) = xmmword_101342130;
          sub_1000361E0(v110, (unint64_t)v27);
          uint64_t v127 = sub_10052A678(v125, 3, v110, (unint64_t)v27);
          uint64_t v129 = v128;
          sub_10001CFB8(v110, (unint64_t)v27);
          *(void *)(v126 + 56) = &type metadata for String;
          *(void *)(v126 + 64) = sub_10000B4CC();
          *(void *)(v126 + 32) = v127;
          *(void *)(v126 + 40) = v129;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v255 + 8))(v245, v256);
          sub_1010CECDC(v243, type metadata accessor for SharedBeaconRecord);
          return sub_1010CECDC(v254, type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
        }
LABEL_133:
        swift_once();
        goto LABEL_37;
      }
      char v81 = *(void **)(v77 + *(int *)(MyAccessoryFamilyShareEnvelope + 24));
      uint64_t v82 = type metadata accessor for FamilyCryptoKeysV2();
      v83 = (uint64_t *)(v80
                      + ((*(unsigned __int8 *)(*(void *)(v82 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v82 - 8) + 80)));
      uint64_t v84 = v249;
      uint64_t v85 = v248;
      uint64_t v86 = v250;
      (*(void (**)(char *, char *, uint64_t))(v249 + 16))(v248, (char *)v83 + *(int *)(v82 + 20), v250);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DateInterval.start.getter();
      (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v86);
      uint64_t v88 = v257;
      unint64_t v87 = v258;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v258 + 56))(v24, 0, 1, v257);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v24, 1, v88) == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }
      (*(void (**)(uint64_t **, char *, uint64_t))(v87 + 32))(v37, v24, v88);
      if (*(void *)(v80 + 16))
      {
        unint64_t v144 = v87;
        uint64_t v145 = *v83;
        uint64_t v146 = type metadata accessor for MessagingMessageContext();
        v147 = v242;
        v148 = (uint64_t *)((char *)v242 + *(int *)(v146 + 48));
        uint64_t v149 = *v148;
        uint64_t v150 = v148[1];
        v151 = v233;
        uint64_t v152 = (uint64_t)v37;
        v265 = v37;
        uint64_t v153 = v243;
        sub_10120DB08(v149, v150, v145, v152, v233);
        uint64_t v154 = type metadata accessor for Transaction();
        __chkstk_darwin(v154);
        *(&v231 - 6) = v147;
        *(&v231 - 5) = v151;
        v155 = (uint64_t *)v245;
        *(&v231 - 4) = v240;
        *(&v231 - 3) = v155;
        uint64_t v229 = v80;
        v230 = v81;
        static Transaction.named<A>(_:with:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1010CECDC((uint64_t)v151, type metadata accessor for SharedBeaconRecord);
        (*(void (**)(uint64_t **, uint64_t))(v144 + 8))(v265, v88);
        (*(void (**)(uint64_t *, uint64_t))(v255 + 8))(v155, v256);
        sub_1010CECDC(v153, type metadata accessor for SharedBeaconRecord);
        v156 = type metadata accessor for FindMyAccessoryFamilyShareEnvelope;
        uint64_t v157 = v254;
        return sub_1010CECDC(v157, v156);
      }
      __break(1u);
      goto LABEL_135;
    case 4uLL:
      uint64_t v89 = v253;
      unint64_t v90 = (unint64_t)v263;
      uint64_t v91 = v269;
      uint64_t result = sub_1005698B0(v253);
      if (v91) {
        return result;
      }
      uint64_t v269 = 0;
      uint64_t v92 = v247;
      sub_1010CED3C(v89, v247, type metadata accessor for SharedBeaconRecord);
      (*(void (**)(char *, uint64_t, uint64_t))(v255 + 16))(v244, v92 + *(int *)(v41 + 24), v256);
      uint64_t v93 = *(void *)(v89 + *(int *)(MyAirPodsFamilyShareEnvelope + 20));
      if (*(void *)(v93 + 16))
      {
        uint64_t v80 = *(void *)(v89 + *(int *)(MyAirPodsFamilyShareEnvelope + 24));
        uint64_t v94 = (uint64_t *)(v93
                        + ((*(unsigned __int8 *)(v241 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80)));
        uint64_t v95 = v249;
        unint64_t v96 = v248;
        uint64_t v97 = v250;
        (*(void (**)(char *, char *, uint64_t))(v249 + 16))(v248, (char *)v94 + *(int *)(v261 + 20), v250);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        DateInterval.start.getter();
        (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v97);
        uint64_t v98 = v257;
        unint64_t v87 = v258;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v258 + 56))(v21, 0, 1, v257);
        int v99 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v87 + 48))(v21, 1, v98);
        uint64_t v100 = v264;
        if (v99 != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v34, v21, v98);
          if (*(void *)(v93 + 16))
          {
            unint64_t v179 = v87;
            uint64_t v180 = *v94;
            uint64_t v181 = type metadata accessor for MessagingMessageContext();
            v182 = v242;
            v183 = v233;
            sub_10120DB08(*(uint64_t *)((char *)v242 + *(int *)(v181 + 48)), *(uint64_t *)((char *)v242 + *(int *)(v181 + 48) + 8), v180, (uint64_t)v34, v233);
            uint64_t v184 = type metadata accessor for Transaction();
            v265 = &v231;
            __chkstk_darwin(v184);
            *(&v231 - 6) = v182;
            *(&v231 - 5) = v183;
            v185 = (uint64_t *)v244;
            *(&v231 - 4) = v240;
            *(&v231 - 3) = v185;
            uint64_t v229 = v93;
            v230 = (void *)v80;
            static Transaction.named<A>(_:with:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1010CECDC((uint64_t)v183, type metadata accessor for SharedBeaconRecord);
            (*(void (**)(char *, uint64_t))(v179 + 8))(v34, v98);
            (*(void (**)(uint64_t *, uint64_t))(v255 + 8))(v185, v256);
            sub_1010CECDC(v247, type metadata accessor for SharedBeaconRecord);
            return sub_1010CECDC(v253, (uint64_t (*)(void))type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
          }
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          sub_10001CFB8(v80, v87);
          LODWORD(v230) = 0;
          uint64_t v229 = 178;
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1010CB870);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v90 = (unint64_t)v263;
        uint64_t v89 = v253;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v258 + 56))(v21, 1, 1, v257);
        uint64_t v100 = v264;
      }
      sub_10001E324((uint64_t)v21);
      static os_log_type_t.error.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v135 = swift_allocObject();
      *(_OWORD *)(v135 + 16) = xmmword_101342130;
      sub_1000361E0(v100, v90);
      uint64_t v136 = sub_10052A678(v265, 4, v100, v90);
      uint64_t v138 = v137;
      sub_10001CFB8(v100, v90);
      *(void *)(v135 + 56) = &type metadata for String;
      *(void *)(v135 + 64) = sub_10000B4CC();
      *(void *)(v135 + 32) = v136;
      *(void *)(v135 + 40) = v138;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v255 + 8))(v244, v256);
      sub_1010CECDC(v247, type metadata accessor for SharedBeaconRecord);
      return sub_1010CECDC(v89, (uint64_t (*)(void))type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
    case 5uLL:
      uint64_t v76 = v269;
      uint64_t result = sub_100569C24();
      if (v76) {
        return result;
      }
      static os_log_type_t.debug.getter();
      if (qword_101637258 == -1) {
        return os_log(_:dso:log:_:_:)();
      }
      goto LABEL_130;
    default:
      unint64_t v110 = v56;
      static os_log_type_t.default.getter();
      if (qword_101637258 == -1) {
        goto LABEL_26;
      }
      goto LABEL_126;
  }
}

uint64_t sub_1010CB8E4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t updated = (int *)type metadata accessor for SecureLocationsKeyUpdateEnvelope(0);
  __chkstk_darwin(updated);
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v14 = (char *)&v42 - v13;
  if (a3 == 1)
  {
    uint64_t result = sub_1005683F8((uint64_t)&v42 - v13);
    if (!v6)
    {
      uint64_t v16 = &v14[updated[5]];
      uint64_t v18 = *(void *)v16;
      uint64_t v17 = *((void *)v16 + 1);
      uint64_t v19 = *(void *)&v14[updated[6]];
      uint64_t v44 = v18;
      uint64_t v45 = v19;
      uint64_t v20 = updated[8];
      unint64_t v21 = (uint64_t *)&v14[updated[7]];
      uint64_t v22 = *v21;
      unint64_t v23 = v21[1];
      uint64_t v24 = *(void *)&v14[v20];
      unint64_t v25 = *(void *)&v14[v20 + 8];
      uint64_t v49 = v17;
      swift_bridgeObjectRetain();
      uint64_t v47 = v22;
      unint64_t v48 = v23;
      sub_1000361E0(v22, v23);
      uint64_t v43 = v24;
      unint64_t v46 = v25;
      sub_1000361E0(v24, v25);
      static os_log_type_t.debug.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_101342130;
      uint64_t v27 = UUID.uuidString.getter();
      uint64_t v29 = v28;
      *(void *)(v26 + 56) = &type metadata for String;
      *(void *)(v26 + 64) = sub_10000B4CC();
      *(void *)(v26 + 32) = v27;
      *(void *)(v26 + 40) = v29;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v30 = type metadata accessor for Transaction();
      uint64_t v42 = (uint64_t)&v42;
      __chkstk_darwin(v30);
      uint64_t v32 = v43;
      uint64_t v31 = v44;
      *(&v42 - 10) = a1;
      *(&v42 - 9) = v31;
      unint64_t v33 = v48;
      uint64_t v34 = v45;
      unint64_t v35 = v46;
      *(&v42 - 8) = v49;
      *(&v42 - 7) = v34;
      uint64_t v36 = v47;
      *(&v42 - 6) = v47;
      *(&v42 - 5) = v33;
      *(&v42 - 4) = v32;
      *(&v42 - 3) = v35;
      *(&v42 - 2) = a6;
      static Transaction.named<A>(_:with:)();
      sub_10001CFB8(v32, v35);
      sub_10001CFB8(v36, v33);
      swift_bridgeObjectRelease();
      return sub_1010CECDC((uint64_t)v14, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_101347BA0;
    char v50 = a2;
    uint64_t v38 = String.init<A>(describing:)();
    uint64_t v40 = v39;
    *(void *)(v37 + 56) = &type metadata for String;
    unint64_t v41 = sub_10000B4CC();
    *(void *)(v37 + 32) = v38;
    *(void *)(v37 + 40) = v40;
    *(void *)(v37 + 96) = &type metadata for Int;
    *(void *)(v37 + 104) = &protocol witness table for Int;
    *(void *)(v37 + 64) = v41;
    *(void *)(v37 + 72) = a3;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1010CBC90(char a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for SecureLocationsKeyUpdateAckEnvelope(0);
  __chkstk_darwin(updated - 8);
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = (char *)&v19 - v7;
  if (a2 == 1)
  {
    uint64_t result = sub_10056876C((uint64_t)&v19 - v7);
    if (!v2)
    {
      static os_log_type_t.debug.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_101342130;
      uint64_t v11 = UUID.uuidString.getter();
      uint64_t v13 = v12;
      *(void *)(v10 + 56) = &type metadata for String;
      *(void *)(v10 + 64) = sub_10000B4CC();
      *(void *)(v10 + 32) = v11;
      *(void *)(v10 + 40) = v13;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      return sub_1010CECDC((uint64_t)v8, type metadata accessor for SecureLocationsKeyUpdateAckEnvelope);
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_101347BA0;
    char v20 = a1;
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v17 = v16;
    *(void *)(v14 + 56) = &type metadata for String;
    unint64_t v18 = sub_10000B4CC();
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v17;
    *(void *)(v14 + 96) = &type metadata for Int;
    *(void *)(v14 + 104) = &protocol witness table for Int;
    *(void *)(v14 + 64) = v18;
    *(void *)(v14 + 72) = a2;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1010CBF0C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = (char *)&v20 - v10;
  if (a3 == 1)
  {
    uint64_t result = sub_100568AE0((uint64_t)&v20 - v10);
    if (!v3)
    {
      uint64_t v13 = *(void *)(a1 + 152);
      uint64_t v14 = type metadata accessor for Transaction();
      __chkstk_darwin(v14);
      *(&v20 - 4) = a1;
      *(&v20 - 3) = v13;
      *(&v20 - 2) = (uint64_t)v11;
      static Transaction.named<A>(_:with:)();
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_101347BA0;
    char v21 = a2;
    uint64_t v16 = String.init<A>(describing:)();
    uint64_t v18 = v17;
    *(void *)(v15 + 56) = &type metadata for String;
    unint64_t v19 = sub_10000B4CC();
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v18;
    *(void *)(v15 + 96) = &type metadata for Int;
    *(void *)(v15 + 104) = &protocol witness table for Int;
    *(void *)(v15 + 64) = v19;
    *(void *)(v15 + 72) = a3;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1010CC184(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a6;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v14 = (char *)&v22 - v13;
  if (a3 == 1)
  {
    uint64_t result = sub_100568AE0((uint64_t)&v22 - v13);
    if (!v6)
    {
      uint64_t v16 = type metadata accessor for Transaction();
      __chkstk_darwin(v16);
      *(&v22 - 4) = v23;
      *(&v22 - 3) = (uint64_t)v14;
      *(&v22 - 2) = a1;
      static Transaction.named<A>(_:with:)();
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_101347BA0;
    char v24 = a2;
    uint64_t v18 = String.init<A>(describing:)();
    uint64_t v20 = v19;
    *(void *)(v17 + 56) = &type metadata for String;
    unint64_t v21 = sub_10000B4CC();
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v20;
    *(void *)(v17 + 96) = &type metadata for Int;
    *(void *)(v17 + 104) = &protocol witness table for Int;
    *(void *)(v17 + 64) = v21;
    *(void *)(v17 + 72) = a3;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1010CC404(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v28 = a1;
  uint64_t v29 = a6;
  uint64_t MyAccessoryFamilyShareResponseEnvelope = type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope(0);
  __chkstk_darwin(MyAccessoryFamilyShareResponseEnvelope - 8);
  unint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v18 = (char *)&v28 - v17;
  if (a3 == 2)
  {
    uint64_t result = sub_100569E90((uint64_t)v13);
    if (!v8)
    {
      uint64_t v21 = type metadata accessor for Transaction();
      __chkstk_darwin(v21);
      uint64_t v22 = v28;
      *(&v28 - 4) = (uint64_t)v13;
      *(&v28 - 3) = v22;
      *(&v28 - 2) = v29;
      static Transaction.named<A>(_:with:)();
      return sub_1010CECDC((uint64_t)v13, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
    }
  }
  else if (a3 == 1)
  {
    uint64_t result = sub_100568AE0((uint64_t)&v28 - v17);
    if (!v8)
    {
      uint64_t v20 = type metadata accessor for Transaction();
      __chkstk_darwin(v20);
      *(&v28 - 4) = v28;
      *(&v28 - 3) = (uint64_t)v18;
      *(&v28 - 2) = v29;
      static Transaction.named<A>(_:with:)();
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_101347BA0;
    char v32 = a2;
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v26 = v25;
    *(void *)(v23 + 56) = &type metadata for String;
    unint64_t v27 = sub_10000B4CC();
    *(void *)(v23 + 32) = v24;
    *(void *)(v23 + 40) = v26;
    *(void *)(v23 + 96) = &type metadata for Int;
    *(void *)(v23 + 104) = &protocol witness table for Int;
    *(void *)(v23 + 64) = v27;
    *(void *)(v23 + 72) = a3;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1010CC778(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v18 - v9;
  if (a3 == 1)
  {
    uint64_t result = sub_10056A204((uint64_t)&v18 - v9);
    if (!v3)
    {
      uint64_t v12 = type metadata accessor for Transaction();
      __chkstk_darwin(v12);
      *(&v18 - 2) = (uint64_t)v10;
      *(&v18 - 1) = a1;
      static Transaction.named<A>(_:with:)();
      return sub_1010CECDC((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101347BA0;
    char v19 = a2;
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v16 = v15;
    *(void *)(v13 + 56) = &type metadata for String;
    unint64_t v17 = sub_10000B4CC();
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v16;
    *(void *)(v13 + 96) = &type metadata for Int;
    *(void *)(v13 + 104) = &protocol witness table for Int;
    *(void *)(v13 + 64) = v17;
    *(void *)(v13 + 72) = a3;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1010CC9B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v136 = a6;
  uint64_t v144 = a4;
  *(void *)&long long v145 = a5;
  LODWORD(v146) = a2;
  uint64_t v140 = a1;
  uint64_t v157 = type metadata accessor for DateInterval();
  uint64_t v138 = *(void *)(v157 - 8);
  uint64_t v6 = __chkstk_darwin(v157);
  uint64_t v153 = (char *)&v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v152 = (char *)&v133 - v8;
  uint64_t v156 = type metadata accessor for FamilyCryptoKeysV2();
  uint64_t v137 = *(void *)(v156 - 8);
  uint64_t v9 = __chkstk_darwin(v156);
  unint64_t v150 = (unint64_t)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v133 - v11;
  uint64_t MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope();
  __chkstk_darwin(MyAccessoryFamilyKeyEnvelope);
  uint64_t v15 = (char *)&v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = type metadata accessor for FamilyCryptoKeysV1();
  uint64_t v135 = *(void *)(v148 - 8);
  __chkstk_darwin(v148);
  v151 = (uint64_t *)((char *)&v133 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = type metadata accessor for TimeBasedKey();
  uint64_t v154 = *(void *)(v17 - 8);
  uint64_t v155 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v133 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v133 - v22;
  __chkstk_darwin(v21);
  uint64_t v149 = (uint64_t)&v133 - v24;
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v142 = *(void *)(v25 - 8);
  uint64_t v143 = v25;
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v133 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v139 = (char *)&v133 - v29;
  uint64_t v30 = type metadata accessor for SelfBeaconingKeyEnvelope(0);
  __chkstk_darwin(v30);
  uint64_t v141 = (char *)&v133 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for LegacySelfBeaconingKeyEnvelope(0);
  __chkstk_darwin(v32);
  unint64_t v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v36 = (char *)&v133 - v35;
  if (v33 != 3)
  {
    if (v33 != 2)
    {
      if (v33 == 1)
      {
        uint64_t v37 = v147;
        uint64_t result = sub_10056A578((uint64_t)&v133 - v35);
        if (v37) {
          return result;
        }
        uint64_t v39 = *(void *)&v36[*(int *)(v32 + 20)];
        swift_bridgeObjectRetain();
        sub_101165DF4(v136, (uint64_t)v36, v39);
        swift_bridgeObjectRelease();
        uint64_t v40 = type metadata accessor for LegacySelfBeaconingKeyEnvelope;
        goto LABEL_71;
      }
      unint64_t v55 = v33;
      static os_log_type_t.default.getter();
      if (qword_101637258 == -1)
      {
LABEL_52:
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v95 = swift_allocObject();
        *(_OWORD *)(v95 + 16) = xmmword_101347BA0;
        LOBYTE(v158) = v146;
        uint64_t v96 = String.init<A>(describing:)();
        uint64_t v98 = v97;
        *(void *)(v95 + 56) = &type metadata for String;
        unint64_t v99 = sub_10000B4CC();
        *(void *)(v95 + 32) = v96;
        *(void *)(v95 + 40) = v98;
        *(void *)(v95 + 96) = &type metadata for Int;
        *(void *)(v95 + 104) = &protocol witness table for Int;
        *(void *)(v95 + 64) = v99;
        *(void *)(v95 + 72) = v55;
        os_log(_:dso:log:_:_:)();
        return swift_bridgeObjectRelease();
      }
LABEL_84:
      swift_once();
      goto LABEL_52;
    }
    uint64_t v41 = (uint64_t)v141;
    uint64_t v42 = v147;
    uint64_t result = sub_10056A8EC((uint64_t)v141);
    if (v42) {
      return result;
    }
    uint64_t v147 = 0;
    (*(void (**)(char *, uint64_t, uint64_t))(v142 + 16))(v139, v41, v143);
    uint64_t v43 = *(void *)(v41 + *(int *)(v30 + 20));
    int64_t v44 = *(void *)(v43 + 16);
    if (!v44)
    {
      uint64_t v68 = _swiftEmptyArrayStorage;
LABEL_73:
      uint64_t v129 = type metadata accessor for Transaction();
      __chkstk_darwin(v129);
      uint64_t v130 = v139;
      *(&v133 - 4) = v140;
      *(&v133 - 3) = (uint64_t)v130;
      uint64_t v131 = (uint64_t)v68;
      uint64_t v132 = _swiftEmptyArrayStorage;
      static Transaction.named<A>(_:with:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v142 + 8))(v130, v143);
      uint64_t v127 = type metadata accessor for SelfBeaconingKeyEnvelope;
      uint64_t v128 = v41;
      return sub_1010CECDC(v128, v127);
    }
    uint64_t v160 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000B7258(0, v44, 0);
    uint64_t v45 = *(unsigned __int8 *)(v135 + 80);
    *(void *)&long long v146 = v43;
    uint64_t v46 = v43 + ((v45 + 32) & ~v45);
    unint64_t v150 = *(void *)(v135 + 72);
    uint64_t v152 = (char *)(v138 + 16);
    uint64_t v47 = v149;
    while (1)
    {
      unint64_t v48 = v151;
      sub_1010CED3C(v46, (uint64_t)v151, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
      uint64_t v156 = *v48;
      uint64_t v49 = v148;
      (*(void (**)(uint64_t, char *, uint64_t))v152)(v47 + *(int *)(v155 + 20), (char *)v48 + *(int *)(v148 + 20), v157);
      char v50 = (uint64_t *)((char *)v48 + *(int *)(v49 + 24));
      uint64_t v51 = *v50;
      uint64_t v52 = v50[1];
      if ((v52 & 0x2000000000000000) != 0)
      {
        unint64_t v53 = v52 & 0xDFFFFFFFFFFFFFFFLL;
        sub_1000361E0(*v50, v52 & 0xDFFFFFFFFFFFFFFFLL);
        sub_1000361E0(v51, v52 & 0xDFFFFFFFFFFFFFFFLL);
        sub_1000361E0(v51, v52 & 0xDFFFFFFFFFFFFFFFLL);
        sub_100435A9C(57, v51, v52 & 0xDFFFFFFFFFFFFFFFLL, (uint64_t *)&v158);
        unint64_t v54 = (unint64_t)v158;
        unint64_t v55 = v159;
        switch(v159 >> 62)
        {
          case 1uLL:
            LODWORD(v56) = HIDWORD(v158) - v158;
            if (__OFSUB__(HIDWORD(v158), v158)) {
              goto LABEL_82;
            }
            uint64_t v56 = (int)v56;
LABEL_16:
            if (v56 != 57) {
              goto LABEL_88;
            }
            sub_1001A1AD8(v51, v52);
            uint64_t v153 = (char *)v51;
            uint64_t v51 = v54;
            uint64_t v52 = v55;
            break;
          case 2uLL:
            uint64_t v58 = v158[2];
            uint64_t v57 = v158[3];
            BOOL v59 = __OFSUB__(v57, v58);
            uint64_t v56 = v57 - v58;
            if (!v59) {
              goto LABEL_16;
            }
            goto LABEL_83;
          case 3uLL:
            goto LABEL_88;
          default:
            uint64_t v56 = BYTE6(v159);
            goto LABEL_16;
        }
      }
      else
      {
        sub_1000361E0(*v50, v50[1]);
        uint64_t v153 = 0;
        unint64_t v53 = 0xF000000000000000;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      unint64_t v54 = __DataStorage.init(length:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        if (__DataStorage._bytes.getter())
        {
          unint64_t v55 = v54;
          if (__OFSUB__(0, __DataStorage._offset.getter())) {
            goto LABEL_80;
          }
        }
        swift_allocObject();
        uint64_t v60 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
        swift_release();
        unint64_t v54 = v60;
      }
      unint64_t v55 = v54;
      uint64_t v61 = __DataStorage._bytes.getter();
      if (!v61) {
        goto LABEL_86;
      }
      uint64_t v62 = v61;
      unint64_t v55 = v54;
      uint64_t v63 = __DataStorage._offset.getter();
      uint64_t v64 = -v63;
      if (__OFSUB__(0, v63)) {
        goto LABEL_77;
      }
      uint64_t v65 = __DataStorage._length.getter();
      if (v65 >= 32) {
        size_t v66 = 32;
      }
      else {
        size_t v66 = v65;
      }
      bzero((void *)(v62 + v64), v66);
      uint64_t v47 = v149;
      *(void *)uint64_t v149 = v156;
      uint64_t v67 = (void *)(v47 + *(int *)(v155 + 24));
      *uint64_t v67 = 0x2000000000;
      v67[1] = v54 | 0x4000000000000000;
      v67[2] = v51;
      v67[3] = v52;
      v67[4] = v153;
      v67[5] = v53;
      sub_1010CECDC((uint64_t)v151, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
      uint64_t v68 = v160;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7258(0, v68[2] + 1, 1);
        uint64_t v68 = v160;
      }
      unint64_t v70 = v68[2];
      unint64_t v69 = v68[3];
      if (v70 >= v69 >> 1)
      {
        sub_1000B7258(v69 > 1, v70 + 1, 1);
        uint64_t v68 = v160;
      }
      v68[2] = v70 + 1;
      sub_1001D7AC0(v47, (uint64_t)v68+ ((*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80))+ *(void *)(v154 + 72) * v70);
      v46 += v150;
      if (!--v44)
      {
        swift_bridgeObjectRelease();
        uint64_t v41 = (uint64_t)v141;
        goto LABEL_73;
      }
    }
  }
  uint64_t v139 = (char *)MyAccessoryFamilyKeyEnvelope;
  v151 = (uint64_t *)v20;
  uint64_t v141 = v28;
  uint64_t v71 = v147;
  uint64_t result = sub_10056AC60((uint64_t)v15);
  if (v71) {
    return result;
  }
  uint64_t v36 = v15;
  uint64_t v147 = 0;
  uint64_t v72 = (uint64_t)v141;
  (*(void (**)(char *, char *, uint64_t))(v142 + 16))(v141, v15, v143);
  int v73 = v139;
  uint64_t v74 = *(void *)&v15[*((int *)v139 + 5)];
  int64_t v75 = *(void *)(v74 + 16);
  uint64_t v76 = _swiftEmptyArrayStorage;
  unint64_t v54 = (unint64_t)"Code";
  uint64_t v134 = v36;
  if (v75)
  {
    v158 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000B7258(0, v75, 0);
    unint64_t v77 = (*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80);
    uint64_t v144 = v74;
    uint64_t v78 = v74 + v77;
    uint64_t v148 = *(void *)(v137 + 72);
    uint64_t v149 = v138 + 16;
    *(void *)&long long v146 = v138 + 32;
    long long v145 = xmmword_101347BB0;
    uint64_t v79 = v156;
    while (1)
    {
      sub_1010CED3C(v78, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
      uint64_t v80 = *(void *)v12;
      (*(void (**)(char *, char *, uint64_t))v149)(v152, &v12[*(int *)(v79 + 20)], v157);
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v81 = __DataStorage.init(length:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        if (__DataStorage._bytes.getter())
        {
          unint64_t v55 = v81;
          if (__OFSUB__(0, __DataStorage._offset.getter())) {
            goto LABEL_79;
          }
        }
        swift_allocObject();
        unint64_t v54 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
        swift_release();
        uint64_t v81 = v54;
      }
      unint64_t v55 = v81;
      uint64_t v82 = __DataStorage._bytes.getter();
      if (!v82)
      {
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        sub_10001CFB8(v54, v55);
        LODWORD(v132) = 0;
        uint64_t v131 = 178;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1010CDBA4);
      }
      uint64_t v83 = v82;
      unint64_t v55 = v81;
      uint64_t v84 = __DataStorage._offset.getter();
      uint64_t v85 = -v84;
      if (__OFSUB__(0, v84)) {
        break;
      }
      uint64_t v86 = __DataStorage._length.getter();
      if (v86 >= 32) {
        size_t v87 = 32;
      }
      else {
        size_t v87 = v86;
      }
      bzero((void *)(v83 + v85), v87);
      uint64_t v88 = v157;
      uint64_t v89 = (uint64_t *)&v12[*(int *)(v156 + 24)];
      uint64_t v90 = *v89;
      unint64_t v91 = v89[1];
      *(void *)uint64_t v23 = v80;
      uint64_t v92 = v155;
      (*(void (**)(char *, char *, uint64_t))v146)(&v23[*(int *)(v155 + 20)], v152, v88);
      uint64_t v93 = &v23[*(int *)(v92 + 24)];
      *(void *)uint64_t v93 = 0x2000000000;
      *((void *)v93 + 1) = v81 | 0x4000000000000000;
      *((void *)v93 + 2) = v90;
      *((void *)v93 + 3) = v91;
      *((_OWORD *)v93 + 2) = v145;
      sub_1000361E0(v90, v91);
      sub_1010CECDC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
      uint64_t v76 = v158;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7258(0, v76[2] + 1, 1);
        uint64_t v76 = v158;
      }
      unint64_t v54 = v76[2];
      unint64_t v94 = v76[3];
      uint64_t v79 = v156;
      if (v54 >= v94 >> 1)
      {
        sub_1000B7258(v94 > 1, v54 + 1, 1);
        uint64_t v79 = v156;
        uint64_t v76 = v158;
      }
      v76[2] = v54 + 1;
      sub_1001D7AC0((uint64_t)v23, (uint64_t)v76+ ((*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80))+ *(void *)(v154 + 72) * v54);
      v78 += v148;
      if (!--v75)
      {
        swift_bridgeObjectRelease();
        uint64_t v36 = v134;
        uint64_t v72 = (uint64_t)v141;
        int v73 = v139;
        goto LABEL_53;
      }
    }
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
LABEL_53:
  uint64_t v100 = *(void *)&v36[*((int *)v73 + 6)];
  int64_t v101 = *(void *)(v100 + 16);
  uint64_t v102 = _swiftEmptyArrayStorage;
  uint64_t v103 = v137;
  if (v101)
  {
    v158 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000B7258(0, v101, 0);
    unint64_t v104 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
    *(void *)&long long v145 = v100;
    uint64_t v105 = v100 + v104;
    uint64_t v149 = *(void *)(v103 + 72);
    uint64_t v152 = (char *)(v138 + 16);
    uint64_t v148 = v138 + 32;
    long long v146 = xmmword_101347BB0;
    char v106 = v153;
    int v107 = (char *)v151;
    while (1)
    {
      unint64_t v54 = v150;
      sub_1010CED3C(v105, v150, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
      uint64_t v108 = *(void *)v54;
      (*(void (**)(char *, unint64_t, uint64_t))v152)(v106, v54 + *(int *)(v156 + 20), v157);
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v109 = __DataStorage.init(length:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        if (__DataStorage._bytes.getter())
        {
          unint64_t v55 = v109;
          if (__OFSUB__(0, __DataStorage._offset.getter())) {
            goto LABEL_81;
          }
        }
        swift_allocObject();
        unint64_t v54 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
        swift_release();
        uint64_t v109 = v54;
      }
      unint64_t v55 = v109;
      uint64_t v110 = __DataStorage._bytes.getter();
      if (!v110) {
        goto LABEL_87;
      }
      uint64_t v111 = v110;
      unint64_t v55 = v109;
      uint64_t v112 = __DataStorage._offset.getter();
      uint64_t v113 = -v112;
      if (__OFSUB__(0, v112)) {
        break;
      }
      uint64_t v114 = __DataStorage._length.getter();
      if (v114 >= 32) {
        size_t v115 = 32;
      }
      else {
        size_t v115 = v114;
      }
      bzero((void *)(v111 + v113), v115);
      uint64_t v116 = v109 | 0x4000000000000000;
      uint64_t v117 = v157;
      uint64_t v118 = v150;
      uint64_t v119 = (uint64_t *)(v150 + *(int *)(v156 + 24));
      uint64_t v120 = *v119;
      unint64_t v121 = v119[1];
      *(void *)int v107 = v108;
      uint64_t v122 = v155;
      (*(void (**)(char *, char *, uint64_t))v148)(&v107[*(int *)(v155 + 20)], v153, v117);
      unint64_t v123 = &v107[*(int *)(v122 + 24)];
      *(void *)unint64_t v123 = 0x2000000000;
      *((void *)v123 + 1) = v116;
      *((void *)v123 + 2) = v120;
      *((void *)v123 + 3) = v121;
      *((_OWORD *)v123 + 2) = v146;
      sub_1000361E0(v120, v121);
      sub_1010CECDC(v118, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
      uint64_t v102 = v158;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7258(0, v102[2] + 1, 1);
        uint64_t v102 = v158;
      }
      unint64_t v125 = v102[2];
      unint64_t v124 = v102[3];
      char v106 = v153;
      if (v125 >= v124 >> 1)
      {
        sub_1000B7258(v124 > 1, v125 + 1, 1);
        char v106 = v153;
        uint64_t v102 = v158;
      }
      v102[2] = v125 + 1;
      sub_1001D7AC0((uint64_t)v107, (uint64_t)v102+ ((*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80))+ *(void *)(v154 + 72) * v125);
      v105 += v149;
      if (!--v101)
      {
        swift_bridgeObjectRelease();
        uint64_t v36 = v134;
        uint64_t v72 = (uint64_t)v141;
        goto LABEL_70;
      }
    }
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
LABEL_70:
  uint64_t v126 = type metadata accessor for Transaction();
  __chkstk_darwin(v126);
  *(&v133 - 4) = v140;
  *(&v133 - 3) = v72;
  uint64_t v131 = (uint64_t)v76;
  uint64_t v132 = v102;
  static Transaction.named<A>(_:with:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v72, v143);
  uint64_t v40 = (uint64_t (*)(uint64_t))type metadata accessor for FindMyAccessoryFamilyKeyEnvelope;
LABEL_71:
  uint64_t v127 = v40;
  uint64_t v128 = (uint64_t)v36;
  return sub_1010CECDC(v128, v127);
}

uint64_t sub_1010CDBB4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = a1;
  uint64_t v31 = a6;
  uint64_t v9 = type metadata accessor for KeyRequestEnvelope();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  __chkstk_darwin(v12);
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v16 = (char *)&v30 - v15;
  if (a3 == 2)
  {
    uint64_t result = sub_10056AFD4((uint64_t)v11);
    if (!v6)
    {
      uint64_t v20 = &v11[*(int *)(v9 + 20)];
      uint64_t v21 = *v20;
      uint64_t v23 = *((void *)v20 + 1);
      uint64_t v22 = *((void *)v20 + 2);
      uint64_t v24 = type metadata accessor for Transaction();
      __chkstk_darwin(v24);
      *(&v30 - 6) = v30;
      *(&v30 - 5) = (uint64_t)v11;
      *(&v30 - 4) = v31;
      *(&v30 - 3) = v21;
      *(&v30 - 2) = v23;
      *(&v30 - 1) = v22;
      swift_bridgeObjectRetain();
      static Transaction.named<A>(_:with:)();
      swift_bridgeObjectRelease();
      return sub_1010CECDC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for KeyRequestEnvelope);
    }
  }
  else if (a3 == 1)
  {
    uint64_t v17 = v13;
    uint64_t result = sub_100568AE0((uint64_t)&v30 - v15);
    if (!v6)
    {
      uint64_t v19 = type metadata accessor for Transaction();
      __chkstk_darwin(v19);
      *(&v30 - 6) = v30;
      *(&v30 - 5) = (uint64_t)v16;
      *(&v30 - 4) = v31;
      *(&v30 - 3) = 0;
      *(&v30 - 2) = 0;
      *(&v30 - 1) = 0;
      static Transaction.named<A>(_:with:)();
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v16, v12);
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_101347BA0;
    char v32 = a2;
    uint64_t v26 = String.init<A>(describing:)();
    uint64_t v28 = v27;
    *(void *)(v25 + 56) = &type metadata for String;
    unint64_t v29 = sub_10000B4CC();
    *(void *)(v25 + 32) = v26;
    *(void *)(v25 + 40) = v28;
    *(void *)(v25 + 96) = &type metadata for Int;
    *(void *)(v25 + 104) = &protocol witness table for Int;
    *(void *)(v25 + 64) = v29;
    *(void *)(v25 + 72) = a3;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1010CDF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 == 1)
  {
    double v8 = sub_10056B348();
    if (!v6) {
      sub_101166178(a6, v8);
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_101347BA0;
    uint64_t v11 = String.init<A>(describing:)();
    uint64_t v13 = v12;
    *(void *)(v10 + 56) = &type metadata for String;
    unint64_t v14 = sub_10000B4CC();
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    *(void *)(v10 + 96) = &type metadata for Int;
    *(void *)(v10 + 104) = &protocol witness table for Int;
    *(void *)(v10 + 64) = v14;
    *(void *)(v10 + 72) = a3;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1010CE0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 == 1) {
    return sub_1011664D4(a6);
  }
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
  uint64_t v9 = String.init<A>(describing:)();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v12 = sub_10000B4CC();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  *(void *)(v8 + 96) = &type metadata for Int;
  *(void *)(v8 + 104) = &protocol witness table for Int;
  *(void *)(v8 + 64) = v12;
  *(void *)(v8 + 72) = a3;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1010CE220(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for BeaconLocationUpdate();
  __chkstk_darwin(v10 - 8);
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = &v20[-v12];
  if (a3 == 1)
  {
    uint64_t result = sub_10056B5C4((uint64_t)&v20[-v12]);
    if (!v6)
    {
      sub_101166824(a6, (uint64_t)v13);
      return sub_1010CECDC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconLocationUpdate);
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_101347BA0;
    v20[15] = a2;
    uint64_t v16 = String.init<A>(describing:)();
    uint64_t v18 = v17;
    *(void *)(v15 + 56) = &type metadata for String;
    unint64_t v19 = sub_10000B4CC();
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v18;
    *(void *)(v15 + 96) = &type metadata for Int;
    *(void *)(v15 + 104) = &protocol witness table for Int;
    *(void *)(v15 + 64) = v19;
    *(void *)(v15 + 72) = a3;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1010CE3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 1) {
    return PassthroughSubject.send(_:)();
  }
  static os_log_type_t.default.getter();
  if (qword_101637258 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101347BA0;
  uint64_t v6 = String.init<A>(describing:)();
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v9 = sub_10000B4CC();
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  *(void *)(v5 + 96) = &type metadata for Int;
  *(void *)(v5 + 104) = &protocol witness table for Int;
  *(void *)(v5 + 64) = v9;
  *(void *)(v5 + 72) = a3;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1010CE538(char a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for BeaconObservation();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v9 = (char *)&v18 - v8;
  if (a2 == 1)
  {
    uint64_t result = sub_10056B938((uint64_t)&v18 - v8);
    if (!v2)
    {
      if (swift_weakLoadStrong())
      {
        sub_10000588C(&qword_10163A778);
        unint64_t v11 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
        uint64_t v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_101342130;
        sub_1010CED3C((uint64_t)v9, v12 + v11, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        sub_100B7BE20(v12);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        swift_release();
      }
      return sub_1010CECDC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101347BA0;
    char v19 = a1;
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v16 = v15;
    *(void *)(v13 + 56) = &type metadata for String;
    unint64_t v17 = sub_10000B4CC();
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v16;
    *(void *)(v13 + 96) = &type metadata for Int;
    *(void *)(v13 + 104) = &protocol witness table for Int;
    *(void *)(v13 + 64) = v17;
    *(void *)(v13 + 72) = a2;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1010CE7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 == 1)
  {
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v7 = type metadata accessor for MessagingMessageContext();
      sub_100B7B614(*(unsigned __int8 *)(a5 + *(int *)(v7 + 24)), *(void *)(a5 + *(int *)(v7 + 24) + 8), *(void (**)(char *, uint64_t, uint64_t))(a5 + *(int *)(v7 + 24) + 16));
      return swift_release();
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_101347BA0;
    uint64_t v10 = String.init<A>(describing:)();
    uint64_t v12 = v11;
    *(void *)(v9 + 56) = &type metadata for String;
    unint64_t v13 = sub_10000B4CC();
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v12;
    *(void *)(v9 + 96) = &type metadata for Int;
    *(void *)(v9 + 104) = &protocol witness table for Int;
    *(void *)(v9 + 64) = v13;
    *(void *)(v9 + 72) = a2;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1010CE940(uint64_t a1, uint64_t a2)
{
  if (a2 == 1)
  {
    uint64_t result = sub_10056BCAC();
    if (v2) {
      return result;
    }
    uint64_t v4 = result;
    if (swift_weakLoadStrong())
    {
      sub_100B7BE20(v4);
      swift_release();
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_101347BA0;
    uint64_t v7 = String.init<A>(describing:)();
    uint64_t v9 = v8;
    *(void *)(v6 + 56) = &type metadata for String;
    unint64_t v10 = sub_10000B4CC();
    *(void *)(v6 + 32) = v7;
    *(void *)(v6 + 40) = v9;
    *(void *)(v6 + 96) = &type metadata for Int;
    *(void *)(v6 + 104) = &protocol witness table for Int;
    *(void *)(v6 + 64) = v10;
    *(void *)(v6 + 72) = a2;
    os_log(_:dso:log:_:_:)();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1010CEAAC(uint64_t a1)
{
  return sub_101174F54(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80));
}

uint64_t sub_1010CEAE4(uint64_t a1)
{
  return sub_101177290(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1010CEB04(uint64_t a1)
{
  return sub_1010CEB5C(a1, sub_1011698C4);
}

uint64_t sub_1010CEB30(uint64_t a1)
{
  return sub_1010CEB5C(a1, sub_101167FCC);
}

uint64_t sub_1010CEB5C(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_1010CEB88(uint64_t a1)
{
  return sub_1010CEBA0(a1);
}

uint64_t sub_1010CEBA0(uint64_t a1)
{
  return sub_101166B9C(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1010CEBC4(uint64_t a1)
{
  return sub_10116DAA0(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1010CEBE4(uint64_t a1)
{
  return sub_10116BBA8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1010CEC04(uint64_t a1)
{
  return sub_10116EB28(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1010CEC24(uint64_t a1)
{
  return sub_10116CB2C(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1010CEC44(uint64_t a1)
{
  return sub_10116FB44(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1010CEC64()
{
  return sub_1011708B8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1010CEC80(uint64_t a1)
{
  return sub_101171BE4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1010CECA0(void (*a1)(uint64_t (*)(uint64_t a1)))
{
  return sub_1010CECB8(a1);
}

uint64_t sub_1010CECB8(void (*a1)(uint64_t (*)(uint64_t a1)))
{
  return sub_101173914(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1010CECDC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1010CED3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1010CEDA4(uint64_t a1)
{
  return sub_1010CEC80(a1);
}

uint64_t *sub_1010CEDBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    {
      uint64_t v13 = sub_10000588C(&qword_101649E40);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v11, (uint64_t *)v12, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1010CEF54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  }
  return result;
}

char *sub_1010CF054(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
  {
    uint64_t v12 = sub_10000588C(&qword_101649E40);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  return a1;
}

char *sub_1010CF19C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(&a1[v9], 1, v6);
  int v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10000588C(&qword_101649E40);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

char *sub_1010CF34C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
  {
    uint64_t v12 = sub_10000588C(&qword_101649E40);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  return a1;
}

char *sub_1010CF494(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(&a1[v9], 1, v6);
  int v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_10000588C(&qword_101649E40);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

uint64_t sub_1010CF644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010CF658);
}

uint64_t sub_1010CF658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_10000588C(&qword_101649E40);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1010CF754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010CF768);
}

uint64_t sub_1010CF768(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_10000588C(&qword_101649E40);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for BeaconStoreFileRecord()
{
  uint64_t result = qword_10166A210;
  if (!qword_10166A210) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1010CF8BC()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_1006E7D4C();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_1010CF984()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for BeaconStoreFileRecord();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_1010CFA4C(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = *(_DWORD *)(v9 + 80);
  uint64_t v12 = v10 + v11;
  uint64_t v13 = (v10 + v11) & ~v11;
  if (*(_DWORD *)(v9 + 84)) {
    size_t v14 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  else {
    size_t v14 = v10 + 1;
  }
  if (v13 + v14 > v7) {
    size_t v7 = v13 + v14;
  }
  uint64_t v15 = (*(unsigned char *)(v6 + 80) | *(unsigned char *)(v9 + 80));
  if (v15 > 7 || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v7 + 1 > 0x18)
  {
    uint64_t v18 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v18 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  else
  {
    uint64_t v19 = v8;
    unsigned int v20 = a2[v7];
    unsigned int v21 = v20 - 2;
    if (v20 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v22 = v7;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *a2;
          goto LABEL_24;
        case 2:
          int v23 = *(unsigned __int16 *)a2;
          goto LABEL_24;
        case 3:
          int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_24;
        case 4:
          int v23 = *(_DWORD *)a2;
LABEL_24:
          int v24 = (v23 | (v21 << (8 * v7))) + 2;
          unsigned int v20 = v23 + 2;
          if (v7 < 4) {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    if (v20 == 1)
    {
      uint64_t v25 = ~v11;
      uint64_t v26 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v9 + 16);
      v26(a1, a2, v8);
      __dst = (void *)(((unint64_t)a1 + v12) & v25);
      uint64_t v27 = (void *)((unint64_t)&a2[v12] & v25);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v27, 1, v19))
      {
        memcpy(__dst, v27, v14);
      }
      else
      {
        v26(__dst, (unsigned __int8 *)v27, v19);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(__dst, 0, 1, v19);
      }
      *((unsigned char *)a1 + v7) = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((unsigned char *)a1 + v7) = 0;
    }
  }
  return a1;
}

uint64_t sub_1010CFD04(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v22 = *(void *)(v3 - 8);
  unint64_t v4 = *(void *)(v22 + 64);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  uint64_t v10 = (v7 + v8) & ~v8;
  if (!*(_DWORD *)(v6 + 84)) {
    ++v7;
  }
  unint64_t v11 = v7 + v10;
  if (v11 <= v4) {
    unint64_t v11 = v4;
  }
  unsigned int v12 = a1[v11];
  unsigned int v13 = v12 - 2;
  if (v12 >= 2)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a1;
        goto LABEL_14;
      case 2:
        int v15 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v15 = *(_DWORD *)a1;
LABEL_14:
        int v16 = (v15 | (v13 << (8 * v11))) + 2;
        unsigned int v12 = v15 + 2;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  if (v12 == 1)
  {
    uint64_t v17 = ~v8;
    unsigned int v21 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
    v21(a1, v5);
    unint64_t v18 = (unint64_t)&a1[v9] & v17;
    uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v18, 1, v5);
    if (!result)
    {
      return ((uint64_t (*)(unint64_t, uint64_t))v21)(v18, v5);
    }
  }
  else
  {
    unsigned int v20 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v22 + 8);
    return v20(a1, v3);
  }
  return result;
}

uint64_t sub_1010CFF54(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v10 + v11;
  uint64_t v13 = (v10 + v11) & ~v11;
  if (*(_DWORD *)(v9 + 84)) {
    size_t v14 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  else {
    size_t v14 = v10 + 1;
  }
  if (v13 + v14 > v7) {
    size_t v7 = v13 + v14;
  }
  unsigned int v15 = a2[v7];
  unsigned int v16 = v15 - 2;
  if (v15 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v17 = v7;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *a2;
        goto LABEL_15;
      case 2:
        int v18 = *(unsigned __int16 *)a2;
        goto LABEL_15;
      case 3:
        int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_15;
      case 4:
        int v18 = *(_DWORD *)a2;
LABEL_15:
        int v19 = (v18 | (v16 << (8 * v7))) + 2;
        unsigned int v15 = v18 + 2;
        if (v7 < 4) {
          unsigned int v15 = v19;
        }
        break;
      default:
        break;
    }
  }
  if (v15 == 1)
  {
    size_t __n = v14;
    uint64_t v20 = ~v11;
    unsigned int v21 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v9 + 16);
    v21(a1, a2, v8);
    uint64_t v22 = (void *)((unint64_t)&a2[v12] & v20);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v22, 1, v8))
    {
      memcpy((void *)((v12 + a1) & v20), v22, __n);
      char v23 = 1;
    }
    else
    {
      v21((v12 + a1) & v20, (unsigned __int8 *)v22, v8);
      char v23 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))((v12 + a1) & v20, 0, 1, v8);
    }
  }
  else
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
    char v23 = 0;
  }
  *(unsigned char *)(a1 + v7) = v23;
  return a1;
}

unsigned __int8 *sub_1010D01CC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v35 = *(void *)(a3 + 16);
    uint64_t v5 = *(void *)(v35 - 8);
    size_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    size_t v9 = *(void *)(v8 + 64);
    uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
    size_t v11 = v9 + v10;
    size_t v12 = (v9 + v10) & ~v10;
    if (!*(_DWORD *)(v8 + 84)) {
      ++v9;
    }
    size_t __n = v9;
    size_t v13 = v12 + v9;
    if (v13 <= v6) {
      size_t v14 = v6;
    }
    else {
      size_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 2;
    if (v15 >= 2)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          goto LABEL_16;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          goto LABEL_16;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_16;
        case 4:
          int v18 = *(_DWORD *)a1;
LABEL_16:
          int v19 = (v18 | (v16 << (8 * v14))) + 2;
          unsigned int v15 = v18 + 2;
          if (v14 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v20 = ~v10;
    size_t v34 = v11;
    if (v15 == 1)
    {
      unsigned int v21 = *(void (**)(unsigned __int8 *, uint64_t))(v8 + 8);
      v21(a1, v7);
      unint64_t v22 = (unint64_t)&a1[v11] & v20;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v22, 1, v7)) {
        v21((unsigned __int8 *)v22, v7);
      }
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, v35);
    }
    unsigned int v23 = a2[v14];
    unsigned int v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v14 <= 3) {
        uint64_t v25 = v14;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *a2;
          goto LABEL_31;
        case 2:
          int v26 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v26 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v26 = *(_DWORD *)a2;
LABEL_31:
          int v27 = (v26 | (v24 << (8 * v14))) + 2;
          unsigned int v23 = v26 + 2;
          if (v14 < 4) {
            unsigned int v23 = v27;
          }
          break;
        default:
          break;
      }
    }
    if (v23 == 1)
    {
      uint64_t v28 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 16);
      v28(a1, a2, v7);
      unint64_t v29 = (void *)((unint64_t)&a1[v34] & v20);
      uint64_t v30 = (void *)((unint64_t)&a2[v34] & v20);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v30, 1, v7))
      {
        memcpy(v29, v30, __n);
        char v31 = 1;
      }
      else
      {
        v28((unsigned __int8 *)v29, (unsigned __int8 *)v30, v7);
        char v31 = 1;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v7);
      }
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, v35);
      char v31 = 0;
    }
    a1[v14] = v31;
  }
  return a1;
}

uint64_t sub_1010D0564(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v10 + v11;
  uint64_t v13 = (v10 + v11) & ~v11;
  if (*(_DWORD *)(v9 + 84)) {
    size_t v14 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  else {
    size_t v14 = v10 + 1;
  }
  if (v13 + v14 > v7) {
    size_t v7 = v13 + v14;
  }
  unsigned int v15 = a2[v7];
  unsigned int v16 = v15 - 2;
  if (v15 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v17 = v7;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *a2;
        goto LABEL_15;
      case 2:
        int v18 = *(unsigned __int16 *)a2;
        goto LABEL_15;
      case 3:
        int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_15;
      case 4:
        int v18 = *(_DWORD *)a2;
LABEL_15:
        int v19 = (v18 | (v16 << (8 * v7))) + 2;
        unsigned int v15 = v18 + 2;
        if (v7 < 4) {
          unsigned int v15 = v19;
        }
        break;
      default:
        break;
    }
  }
  if (v15 == 1)
  {
    size_t __n = v14;
    uint64_t v20 = ~v11;
    unsigned int v21 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v9 + 32);
    v21(a1, a2, v8);
    unint64_t v22 = (void *)((unint64_t)&a2[v12] & v20);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v22, 1, v8))
    {
      memcpy((void *)((v12 + a1) & v20), v22, __n);
      char v23 = 1;
    }
    else
    {
      v21((v12 + a1) & v20, (unsigned __int8 *)v22, v8);
      char v23 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))((v12 + a1) & v20, 0, 1, v8);
    }
  }
  else
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
    char v23 = 0;
  }
  *(unsigned char *)(a1 + v7) = v23;
  return a1;
}

unsigned __int8 *sub_1010D07DC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v35 = *(void *)(a3 + 16);
    uint64_t v5 = *(void *)(v35 - 8);
    size_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    size_t v9 = *(void *)(v8 + 64);
    uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
    size_t v11 = v9 + v10;
    size_t v12 = (v9 + v10) & ~v10;
    if (!*(_DWORD *)(v8 + 84)) {
      ++v9;
    }
    size_t __n = v9;
    size_t v13 = v12 + v9;
    if (v13 <= v6) {
      size_t v14 = v6;
    }
    else {
      size_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 2;
    if (v15 >= 2)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          goto LABEL_16;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          goto LABEL_16;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_16;
        case 4:
          int v18 = *(_DWORD *)a1;
LABEL_16:
          int v19 = (v18 | (v16 << (8 * v14))) + 2;
          unsigned int v15 = v18 + 2;
          if (v14 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v20 = ~v10;
    size_t v34 = v11;
    if (v15 == 1)
    {
      unsigned int v21 = *(void (**)(unsigned __int8 *, uint64_t))(v8 + 8);
      v21(a1, v7);
      unint64_t v22 = (unint64_t)&a1[v11] & v20;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v22, 1, v7)) {
        v21((unsigned __int8 *)v22, v7);
      }
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, v35);
    }
    unsigned int v23 = a2[v14];
    unsigned int v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v14 <= 3) {
        uint64_t v25 = v14;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *a2;
          goto LABEL_31;
        case 2:
          int v26 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v26 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v26 = *(_DWORD *)a2;
LABEL_31:
          int v27 = (v26 | (v24 << (8 * v14))) + 2;
          unsigned int v23 = v26 + 2;
          if (v14 < 4) {
            unsigned int v23 = v27;
          }
          break;
        default:
          break;
      }
    }
    if (v23 == 1)
    {
      uint64_t v28 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 32);
      v28(a1, a2, v7);
      unint64_t v29 = (void *)((unint64_t)&a1[v34] & v20);
      uint64_t v30 = (void *)((unint64_t)&a2[v34] & v20);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v30, 1, v7))
      {
        memcpy(v29, v30, __n);
        char v31 = 1;
      }
      else
      {
        v28((unsigned __int8 *)v29, (unsigned __int8 *)v30, v7);
        char v31 = 1;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v7);
      }
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, v35);
      char v31 = 0;
    }
    a1[v14] = v31;
  }
  return a1;
}

uint64_t sub_1010D0B74(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v6 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  unint64_t v8 = (v7 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!*(_DWORD *)(v6 + 84)) {
    ++v7;
  }
  unint64_t v9 = v7 + v8;
  if (v9 <= v5) {
    unint64_t v10 = v5;
  }
  else {
    unint64_t v10 = v9;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_25;
  }
  unint64_t v11 = v10 + 1;
  char v12 = 8 * (v10 + 1);
  if ((v10 + 1) <= 3)
  {
    unsigned int v15 = ((a2 + ~(-1 << v12) - 254) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v15 < 2)
    {
LABEL_25:
      unsigned int v17 = *((unsigned __int8 *)a1 + v10);
      if (v17 >= 2) {
        return (v17 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_25;
  }
LABEL_17:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v11 | v16) + 255;
}

void sub_1010D0D30(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v7 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v8 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  unint64_t v10 = (v9 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  if (!*(_DWORD *)(v8 + 84)) {
    ++v9;
  }
  unint64_t v11 = v9 + v10;
  if (v11 <= v7) {
    unint64_t v11 = v7;
  }
  size_t v12 = v11 + 1;
  if (a3 < 0xFF)
  {
    int v13 = 0;
  }
  else if (v12 <= 3)
  {
    unsigned int v16 = ((a3 + ~(-1 << (8 * v12)) - 254) >> (8 * v12)) + 1;
    if (HIWORD(v16))
    {
      int v13 = 4;
    }
    else if (v16 >= 0x100)
    {
      int v13 = 2;
    }
    else
    {
      int v13 = v16 > 1;
    }
  }
  else
  {
    int v13 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v14 = a2 - 255;
    if (v12 < 4)
    {
      int v15 = (v14 >> (8 * v12)) + 1;
      if (v11 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v11 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v12] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v12] = v15;
        break;
      case 3:
LABEL_36:
        __break(1u);
        JUMPOUT(0x1010D0F60);
      case 4:
        *(_DWORD *)&a1[v12] = v15;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v13)
    {
      case 1:
        a1[v12] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      case 2:
        *(_WORD *)&a1[v12] = 0;
        goto LABEL_24;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v12] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      default:
LABEL_24:
        if (a2) {
LABEL_25:
        }
          a1[v11] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1010D0F88(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  unint64_t v6 = (v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  if (!*(_DWORD *)(v4 + 84)) {
    ++v5;
  }
  unint64_t v7 = v5 + v6;
  if (v7 <= v3) {
    unint64_t v7 = v3;
  }
  uint64_t result = a1[v7];
  if (result >= 2)
  {
    if (v7 <= 3) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_14;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_14:
        unsigned int v11 = (v10 | ((result - 2) << (8 * v7))) + 2;
        unsigned int v12 = v10 + 2;
        if (v7 >= 4) {
          uint64_t result = v12;
        }
        else {
          uint64_t result = v11;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1010D10B8(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  size_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v6 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  unint64_t v8 = (v7 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!*(_DWORD *)(v6 + 84)) {
    ++v7;
  }
  size_t v9 = v7 + v8;
  if (v9 <= v5) {
    size_t v10 = v5;
  }
  else {
    size_t v10 = v9;
  }
  if (a2 > 1)
  {
    if (v10 <= 3) {
      char v11 = ((a2 - 2) >> (8 * v10)) + 2;
    }
    else {
      char v11 = 2;
    }
    if (v10 <= 3) {
      int v12 = (a2 - 2) & ~(-1 << (8 * v10));
    }
    else {
      int v12 = a2 - 2;
    }
    a1[v10] = v11;
    if (v10 >= 4) {
      int v13 = 4;
    }
    else {
      int v13 = v10;
    }
    bzero(a1, v10);
    switch(v13)
    {
      case 2:
        *(_WORD *)a1 = v12;
        break;
      case 3:
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
        break;
      case 4:
        *(_DWORD *)a1 = v12;
        break;
      default:
        *a1 = v12;
        break;
    }
  }
  else
  {
    a1[v10] = a2;
  }
}

uint64_t type metadata accessor for FailableRecord()
{
  return sub_1000103A0();
}

uint64_t sub_1010D122C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170F1E8);
  sub_100010324(v0, (uint64_t)qword_10170F1E8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1010D12B0()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (uint64_t *)((char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_10001E384(v4, qword_10166A2C8);
  sub_100010324(v4, (uint64_t)qword_10166A2C8);
  *unint64_t v3 = 60;
  (*(void (**)(void *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchTimeInterval.seconds(_:), v0);
  return OS_dispatch_queue.SchedulerTimeType.Stride.init(_:)();
}

uint64_t sub_1010D13BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [self standardUserDefaults];
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 objectForKey:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_10001D608((uint64_t)v13, (uint64_t)v14, (uint64_t *)&unk_101644360);
  if (v15)
  {
    uint64_t v8 = type metadata accessor for Date();
    int v9 = swift_dynamicCast();
    uint64_t v10 = *(void *)(v8 - 8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v4, v9 ^ 1u, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v8) != 1) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v4, v8);
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_101644360);
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v4, 1, 1, v12);
  }
  sub_10001DAB4((uint64_t)v4, (uint64_t *)&unk_10163AC90);
  return static Date.distantPast.getter();
}

uint64_t sub_1010D1614()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v5 = *(void **)(v0 + 16);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    id v8 = [self standardUserDefaults];
    NSString v9 = String._bridgeToObjectiveC()();
    id v10 = [v8 BOOLForKey:v9];

    return (uint64_t)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1010D177C(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v7 = *(void **)(v1 + 16);
  *id v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    id v9 = [self standardUserDefaults];
    NSString v10 = String._bridgeToObjectiveC()();
    [v9 setBool:a1 & 1 forKey:v10];
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1010D18EC()
{
  if (*(void *)(v0 + 64))
  {
    uint64_t v1 = *(void *)(v0 + 64);
  }
  else
  {
    uint64_t v2 = v0;
    sub_10000588C((uint64_t *)&unk_10163EAB8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    if (qword_101636EA0 != -1) {
      swift_once();
    }
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
    uint64_t v7 = swift_allocObject();
    swift_weakInit();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = sub_1010D8C48;
    *(void *)(v8 + 24) = v7;
    *(void *)(inited + 32) = v4;
    *(void *)(inited + 40) = v6;
    *(void *)(inited + 48) = sub_1001DF664;
    *(void *)(inited + 56) = v8;
    sub_10092E16C(inited);
    type metadata accessor for DarwinNotificationHelper();
    swift_allocObject();
    uint64_t v1 = DarwinNotificationHelper.init(notificationHandlers:)();
    *(void *)(v2 + 64) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1010D1A54()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1010D1AAC();
    return swift_release();
  }
  return result;
}

void sub_1010D1AAC()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637420 != -1) {
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v5 = type metadata accessor for Logger();
    v31[2] = sub_100010324(v5, (uint64_t)qword_10170F1E8);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received config changed notification. Forcing product info fetch", v8, 2u);
      swift_slowDealloc();
    }

    uint64_t v9 = sub_100AD2AD4();
    uint64_t v10 = v9;
    uint64_t v11 = _swiftEmptyArrayStorage;
    uint64_t v40 = _swiftEmptyArrayStorage;
    uint64_t v12 = *(void *)(v9 + 16);
    if (!v12) {
      break;
    }
    v31[1] = v1;
    unint64_t v1 = 0;
    uint64_t v13 = v9 + 32;
    while (v1 < *(void *)(v10 + 16))
    {
      sub_10001D010(v13, (uint64_t)&v37);
      uint64_t v14 = v38;
      uint64_t v15 = v39;
      sub_10001CD44(&v37, v38);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v15 + 104))(v14, v15))
      {
        sub_10001CEB0(&v37, (uint64_t)v34);
        unsigned int v16 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v16[2] + 1, 1);
          unsigned int v16 = v40;
        }
        unint64_t v18 = v16[2];
        unint64_t v17 = v16[3];
        if (v18 >= v17 >> 1) {
          sub_1000B7570(v17 > 1, v18 + 1, 1);
        }
        uint64_t v19 = v35;
        uint64_t v20 = v36;
        uint64_t v21 = sub_1000BD078((uint64_t)v34, v35);
        __chkstk_darwin(v21);
        unsigned int v23 = (char *)v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v24 + 16))(v23);
        sub_1006985B0(v18, (uint64_t)v23, (uint64_t *)&v40, v19, v20);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v34);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v37);
      }
      ++v1;
      v13 += 40;
      if (v12 == v1)
      {
        uint64_t v11 = v40;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_22:
    swift_once();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  if (v11[2])
  {
    id v25 = [self standardUserDefaults];
    static Date.trustedNow.getter((uint64_t)v4);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v4, v33);
    NSString v27 = String._bridgeToObjectiveC()();
    [v25 setObject:isa forKey:v27];

    sub_1010D3908((uint64_t)v11, 1, 0, 0);
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "No eligible accessory to fetch!", v30, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1010D1F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = *(void *)(a2 + 16);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  aBlock[4] = sub_1010D9008;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101607DA8;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_1010D8F64((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v15);
  return swift_release();
}

uint64_t sub_1010D21F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v1 + 16);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    static DispatchQoS.background.getter();
    uint64_t v12 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for XPCActivity();
    swift_allocObject();
    uint64_t v13 = sub_1009D9B34(0xD000000000000030, (void *)0x80000001014215D0, (uint64_t)v4, (uint64_t)sub_1010D7604, 0, (uint64_t)sub_1010D8C3C, v12);
    swift_release();
    *(void *)(v1 + 56) = v13;
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1010D23F8(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1009D7368();
    }
    else if (a3 == 2)
    {
      if (qword_101637420 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_100010324(v6, (uint64_t)qword_10170F1E8);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Running ProductInfoManager scheduled activities.", v9, 2u);
        swift_slowDealloc();
      }

      swift_retain();
      sub_1010D2570((void (*)(void))sub_1010D8C44, a1);
      swift_release();
    }
    return swift_release();
  }
  return result;
}

void sub_1010D2570(void (*a1)(void), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v43 - v11;
  static Date.trustedNow.getter((uint64_t)&v43 - v11);
  sub_1010D13BC((uint64_t)v10);
  Date.timeIntervalSince(_:)();
  double v14 = v13;
  unint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v16 = v7 + 8;
  uint64_t v15 = v17;
  v17(v10, v6);
  v17(v12, v6);
  if (v14 > 604800.0)
  {
    int64_t v44 = v15;
    uint64_t v45 = a2;
    uint64_t v46 = a1;
    uint64_t v47 = v16;
    uint64_t v48 = v3;
    uint64_t v18 = sub_100AD2AD4();
    uint64_t v19 = v18;
    uint64_t v20 = _swiftEmptyArrayStorage;
    unint64_t v55 = _swiftEmptyArrayStorage;
    uint64_t v21 = *(void *)(v18 + 16);
    if (!v21)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      if (v20[2])
      {
        id v39 = [self standardUserDefaults];
        static Date.trustedNow.getter((uint64_t)v12);
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        v44(v12, v6);
        NSString v41 = String._bridgeToObjectiveC()();
        [v39 setObject:isa forKey:v41];

        sub_1010D3908((uint64_t)v20, 0, (uint64_t)v46, v45);
        swift_release();
      }
      else
      {
        uint64_t v42 = swift_release();
        if (v46) {
          ((void (*)(uint64_t))v46)(v42);
        }
      }
      return;
    }
    uint64_t v43 = v6;
    unint64_t v22 = 0;
    uint64_t v23 = v18 + 32;
    while (v22 < *(void *)(v19 + 16))
    {
      sub_10001D010(v23, (uint64_t)&v52);
      uint64_t v24 = v53;
      uint64_t v25 = v54;
      sub_10001CD44(&v52, v53);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v25 + 104))(v24, v25))
      {
        sub_10001CEB0(&v52, (uint64_t)v49);
        int v26 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v26[2] + 1, 1);
          int v26 = v55;
        }
        unint64_t v28 = v26[2];
        unint64_t v27 = v26[3];
        if (v28 >= v27 >> 1) {
          sub_1000B7570(v27 > 1, v28 + 1, 1);
        }
        uint64_t v29 = v50;
        uint64_t v30 = v51;
        uint64_t v31 = sub_1000BD078((uint64_t)v49, v50);
        a1 = (void (*)(void))&v43;
        __chkstk_darwin(v31);
        uint64_t v33 = (char *)&v43 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v34 + 16))(v33);
        sub_1006985B0(v28, (uint64_t)v33, (uint64_t *)&v55, v29, v30);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v49);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v52);
      }
      ++v22;
      v23 += 40;
      if (v21 == v22)
      {
        uint64_t v20 = v55;
        uint64_t v6 = v43;
        goto LABEL_19;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  if (qword_101637420 != -1) {
LABEL_25:
  }
    swift_once();
  uint64_t v35 = type metadata accessor for Logger();
  sub_100010324(v35, (uint64_t)qword_10170F1E8);
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 134349312;
    *(double *)&long long v52 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 12) = 2050;
    *(void *)&long long v52 = 0x4122750000000000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Time since last attempt %{public}f. Threshold %{public}f. Not refreshing.", (uint8_t *)v38, 0x16u);
    swift_slowDealloc();
  }

  if (a1) {
    a1();
  }
}

uint64_t sub_1010D2A88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  double v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(void *)(v3 + 16);
  double v14 = (void *)swift_allocObject();
  void v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = sub_1010D8BD0;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101607CE0;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_1010D8F64((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_1010D2D5C(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Locale.current.getter();
  uint64_t v10 = Locale.identifier.getter();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v68 = (char *)self;
  id v13 = [v68 standardUserDefaults];
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 stringForKey:v14];

  uint64_t v70 = v10;
  if (!v15)
  {
    sub_1010D1614();
    uint64_t v21 = v12;
    uint64_t v23 = a1;
    uint64_t v24 = a3;
    goto LABEL_10;
  }
  uint64_t v16 = a1;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  BOOL v20 = v10 == v17 && v12 == v19;
  uint64_t v21 = v12;
  if (v20)
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = v16;
    uint64_t v24 = a3;
    if (sub_1010D1614())
    {
LABEL_15:
      swift_bridgeObjectRelease();
      if (qword_101637420 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      sub_100010324(v37, (uint64_t)qword_10170F1E8);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Migration has already been completed.", v40, 2u);
        swift_slowDealloc();
      }

      return ((uint64_t (*)(uint64_t))a2)(v41);
    }
    goto LABEL_22;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v23 = v16;
  uint64_t v24 = a3;
  if ((sub_1010D1614() & 1) == 0)
  {
    if ((v22 & 1) == 0) {
      goto LABEL_10;
    }
LABEL_22:
    if (qword_101637420 != -1) {
      swift_once();
    }
    unint64_t v71 = v21;
    uint64_t v42 = type metadata accessor for Logger();
    sub_100010324(v42, (uint64_t)qword_10170F1E8);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Forcing product info fetch as a one time migration.", v45, 2u);
      swift_slowDealloc();
    }

    goto LABEL_29;
  }
  if (v22) {
    goto LABEL_15;
  }
LABEL_10:
  if (qword_101637420 != -1) {
    goto LABEL_46;
  }
  while (1)
  {
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_10170F1E8);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    int v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    unint64_t v71 = v21;
    if (v28)
    {
      unint64_t v69 = a2;
      uint64_t v29 = v24;
      uint64_t v30 = swift_slowAlloc();
      v72[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136446466;
      id v31 = [v68 standardUserDefaults];
      NSString v32 = String._bridgeToObjectiveC()();
      id v33 = [v31 stringForKey:v32];

      if (v33)
      {
        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v36 = v35;
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v36 = 0;
      }
      *(void *)&long long v75 = v34;
      *((void *)&v75 + 1) = v36;
      sub_10000588C(&qword_101644320);
      uint64_t v46 = String.init<A>(describing:)();
      *(void *)&long long v75 = sub_1008FA0F0(v46, v47, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2082;
      uint64_t v48 = v23;
      unint64_t v49 = v71;
      swift_bridgeObjectRetain();
      *(void *)&long long v75 = sub_1008FA0F0(v70, v49, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v23 = v48;
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Forcing product info fetch due to locale change. Previous: [%{public}s], new: [%{public}s].", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v24 = v29;
      a2 = v69;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
LABEL_29:
    uint64_t v50 = sub_100AD2AD4();
    uint64_t v51 = v50;
    long long v52 = _swiftEmptyArrayStorage;
    uint64_t v78 = _swiftEmptyArrayStorage;
    uint64_t v53 = *(void *)(v50 + 16);
    if (!v53) {
      break;
    }
    uint64_t v68 = v24;
    unint64_t v69 = a2;
    unint64_t v54 = 0;
    uint64_t v21 = v50 + 32;
    while (v54 < *(void *)(v51 + 16))
    {
      sub_10001D010(v21, (uint64_t)&v75);
      uint64_t v55 = v76;
      uint64_t v24 = v77;
      sub_10001CD44(&v75, v76);
      if ((*((uint64_t (**)(uint64_t, char *))v24 + 13))(v55, v24))
      {
        sub_10001CEB0(&v75, (uint64_t)v72);
        uint64_t v56 = v78;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v56[2] + 1, 1);
          uint64_t v56 = v78;
        }
        unint64_t v58 = v56[2];
        unint64_t v57 = v56[3];
        if (v58 >= v57 >> 1) {
          sub_1000B7570(v57 > 1, v58 + 1, 1);
        }
        uint64_t v59 = v73;
        uint64_t v60 = v74;
        uint64_t v61 = sub_1000BD078((uint64_t)v72, v73);
        a2 = &v67;
        __chkstk_darwin(v61);
        uint64_t v24 = (char *)&v67 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v63 + 16))(v24);
        sub_1006985B0(v58, (uint64_t)v24, (uint64_t *)&v78, v59, v60);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v72);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v75);
      }
      ++v54;
      v21 += 40;
      if (v53 == v54)
      {
        long long v52 = v78;
        uint64_t v24 = v68;
        a2 = v69;
        goto LABEL_41;
      }
    }
    __break(1u);
LABEL_46:
    swift_once();
  }
LABEL_41:
  swift_bridgeObjectRelease();
  if (v52[2])
  {
    uint64_t v64 = (void *)swift_allocObject();
    uint64_t v65 = v70;
    v64[2] = v23;
    v64[3] = v65;
    v64[4] = v71;
    v64[5] = a2;
    v64[6] = v24;
    swift_retain();
    swift_retain();
    sub_1010D3908((uint64_t)v52, 1, (uint64_t)sub_1010D8C24, (uint64_t)v64);
    swift_release();
    return swift_release();
  }
  swift_release();
  uint64_t v41 = swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t))a2)(v41);
}

uint64_t sub_1010D35BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  v20[1] = a5;
  uint64_t v21 = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v20[0] - 8);
  __chkstk_darwin(v20[0]);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = self;
  swift_bridgeObjectRetain();
  id v14 = [v13 standardUserDefaults];
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  [v14 setObject:v15 forKey:v16];

  aBlock[4] = sub_1010D8C34;
  aBlock[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101607D30;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  char v22 = _swiftEmptyArrayStorage;
  sub_1010D8F64((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, void))(v10 + 8))(v12, v20[0]);
  uint64_t v18 = swift_release();
  return v21(v18);
}

uint64_t sub_1010D3908(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v5;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  NSString v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v5[2];
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = v5;
  *(void *)(v17 + 32) = a3;
  *(void *)(v17 + 40) = a4;
  *(unsigned char *)(v17 + 48) = a2;
  *(void *)(v17 + 56) = v10;
  aBlock[4] = sub_1010D84D0;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101607C40;
  uint64_t v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000BD0E8(a3);
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_1010D8F64((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v21);
  return swift_release();
}

void sub_1010D3C24(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, int a5, uint64_t a6)
{
  int v149 = a5;
  uint64_t v127 = a4;
  uint64_t v129 = a3;
  uint64_t v134 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v133 = (char *)v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v132);
  uint64_t v12 = (char *)v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v125 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v128 = (uint64_t)v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_1016653B0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v136 = (char *)v122 - v18;
  uint64_t v135 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v150 = *(void *)(v135 - 8);
  uint64_t v19 = __chkstk_darwin(v135);
  uint64_t v157 = (uint64_t)v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v152 = (char *)v122 - v22;
  __chkstk_darwin(v21);
  uint64_t v148 = (uint64_t)v122 - v23;
  uint64_t v24 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v24 - 8);
  v151 = (char *)v122 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v144 - 8);
  uint64_t v27 = __chkstk_darwin(v144);
  uint64_t v147 = (char *)v122 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  long long v146 = (void (**)(char *, uint64_t))((char *)v122 - v30);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v156 = (char *)v122 - v32;
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)v122 - v33;
  swift_retain();
  uint64_t v35 = swift_bridgeObjectRetain();
  uint64_t v36 = sub_1010D84E4(v35, a2);
  uint64_t v126 = a1;
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  uint64_t v138 = a2;
  swift_release();
  int64_t isa = (int64_t)v37[2].isa;
  os_log_type_t v39 = &qword_101637000;
  if (isa)
  {
    uint64_t v123 = v9;
    uint64_t v145 = 0;
    uint64_t v131 = v17;
    uint64_t v130 = v12;
    uint64_t v124 = a6;
    uint64_t v159 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000B7034(0, isa, 0);
    uint64_t v155 = v37;
    uint64_t v40 = (uint64_t)&v37[4];
    v158 = (void *)(v26 + 32);
    uint64_t v41 = v159;
    uint64_t v42 = v144;
    do
    {
      sub_10001D010(v40, (uint64_t)&v160);
      uint64_t v44 = v161;
      uint64_t v43 = v162;
      sub_10001CD44(&v160, v161);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v43 + 8) + 8) + 32))(v44);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v160);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, *(void *)(v41 + 16) + 1, 1);
        uint64_t v41 = v159;
      }
      unint64_t v46 = *(void *)(v41 + 16);
      unint64_t v45 = *(void *)(v41 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_1000B7034(v45 > 1, v46 + 1, 1);
        uint64_t v41 = v159;
      }
      *(void *)(v41 + 16) = v46 + 1;
      unint64_t v47 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
      uint64_t v48 = *(void *)(v26 + 72);
      unint64_t v49 = v41 + v47 + v48 * v46;
      uint64_t v50 = *(void (**)(unint64_t, char *, uint64_t))(v26 + 32);
      v50(v49, v34, v42);
      uint64_t v159 = v41;
      v40 += 40;
      --isa;
    }
    while (isa);
    Class v51 = v155[2].isa;
    swift_bridgeObjectRelease();
    if (v51)
    {
      if (qword_101637420 != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      uint64_t v53 = sub_100010324(v52, (uint64_t)qword_10170F1E8);
      swift_bridgeObjectRetain_n();
      v122[1] = v53;
      unint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.default.getter();
      uint64_t v155 = v54;
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = swift_slowAlloc();
        uint64_t v154 = (void (**)(uint64_t, uint64_t, uint64_t, void))swift_slowAlloc();
        uint64_t v160 = v154;
        *(_DWORD *)uint64_t v56 = 141558531;
        uint64_t v159 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v56 + 12) = 2081;
        uint64_t v153 = (char *)(v56 + 14);
        swift_bridgeObjectRetain();
        uint64_t v57 = Array.description.getter();
        unint64_t v59 = v58;
        swift_bridgeObjectRelease();
        uint64_t v159 = sub_1008FA0F0(v57, v59, (uint64_t *)&v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v56 + 22) = 1024;
        LODWORD(v159) = v149 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v60 = v155;
        _os_log_impl((void *)&_mh_execute_header, v155, v55, "fetchProductInfo for beacons %{private,mask.hash}s. Force [%{BOOL}d]", (uint8_t *)v56, 0x1Cu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      unint64_t v69 = v151;
      uint64_t v70 = *(char **)(v41 + 16);
      if (v70)
      {
        uint64_t v141 = (void *)(v138 + 40);
        uint64_t v154 = *(void (***)(uint64_t, uint64_t, uint64_t, void))(v26 + 16);
        uint64_t v142 = (unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
        uint64_t v155 = (v26 + 16);
        uint64_t v140 = (void (**)(char *, uint64_t))(v26 + 8);
        swift_bridgeObjectRetain();
        unint64_t v71 = v41 + v47;
        uint64_t v143 = (void (**)(char *, uint64_t))(v26 + 56);
        v122[0] = (v26 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        uint64_t v72 = v144;
        while (1)
        {
          ((void (*)(char *, unint64_t, uint64_t))v154)(v69, v71, v72);
          uint64_t v73 = *v143;
          ((void (*)(char *, void, uint64_t, uint64_t))*v143)(v69, 0, 1, v72);
          if ((*v142)(v69, 1, v72) == 1) {
            break;
          }
          uint64_t v139 = v73;
          uint64_t v153 = v70;
          uint64_t v74 = v156;
          v50((unint64_t)v156, v69, v72);
          long long v75 = v147;
          ((void (*)(char *, char *, uint64_t))v154)(v147, v74, v72);
          swift_beginAccess();
          uint64_t v76 = v41;
          uint64_t v77 = v26;
          uint64_t v78 = v146;
          sub_100DC8CB8((uint64_t)v146, v75);
          uint64_t v79 = *v140;
          uint64_t v80 = v78;
          uint64_t v26 = v77;
          uint64_t v41 = v76;
          (*v140)((char *)v80, v72);
          swift_endAccess();
          uint64_t v81 = v74;
          uint64_t v82 = v153;
          v79(v81, v72);
          unint64_t v69 = v151;
          v71 += v48;
          uint64_t v70 = v82 - 1;
          if (!v70)
          {
            ((void (*)(char *, uint64_t, uint64_t, uint64_t))v139)(v151, 1, 1, v144);
            break;
          }
        }
      }
      else
      {
        uint64_t v83 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
        swift_bridgeObjectRetain();
        v83(v69, 1, 1, v144);
      }
      swift_bridgeObjectRelease();
      uint64_t v84 = *(void *)(v126 + 16);
      if (v84)
      {
        uint64_t v85 = v126 + 32;
        uint64_t v86 = (v150 + 48);
        uint64_t v147 = (char *)(v123 + 16);
        long long v146 = (void (**)(char *, uint64_t))(v123 + 8);
        uint64_t v143 = (void (**)(char *, uint64_t))(v26 + 8);
        uint64_t v142 = (unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48);
        uint64_t v154 = (void (**)(uint64_t, uint64_t, uint64_t, void))(v150 + 56);
        swift_bridgeObjectRetain();
        size_t v87 = _swiftEmptyArrayStorage;
        uint64_t v141 = (void *)0x8000000101402BA0;
        uint64_t v88 = v137;
        uint64_t v89 = (uint64_t)v131;
        uint64_t v90 = (uint64_t)v136;
        uint64_t v91 = v135;
        uint64_t v92 = (uint64_t)v152;
        uint64_t v155 = v86;
        do
        {
          v158 = v87;
          sub_10001D010(v85, (uint64_t)&v160);
          sub_10001D010((uint64_t)&v160, (uint64_t)&v159);
          sub_100D17160(&v159, v89);
          uint64_t v93 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v86->isa;
          if (((unint64_t (*)(uint64_t, uint64_t, uint64_t))v86->isa)(v89, 1, v91) == 1)
          {
            sub_10001DAB4(v89, &qword_1016653B0);
            (*v154)(v90, 1, 1, v91);
          }
          else
          {
            sub_1010D8A60(v89, v92, type metadata accessor for AccessoryMetadata);
            if (v149)
            {
              unint64_t v94 = (void *)(v92 + *(int *)(v91 + 60));
              swift_bridgeObjectRelease();
              void *v94 = 0;
              v94[1] = 0xE000000000000000;
            }
            else
            {
              uint64_t v96 = v161;
              uint64_t v95 = v162;
              sub_10001CD44(&v160, v161);
              uint64_t v97 = v156;
              (*(void (**)(uint64_t))(*(void *)(*(void *)(v95 + 8) + 8) + 32))(v96);
              if (qword_101636D10 != -1) {
                swift_once();
              }
              uint64_t v98 = v134;
              uint64_t v99 = sub_100010324(v134, (uint64_t)qword_10170E3E8);
              uint64_t v100 = v133;
              (*(void (**)(char *, uint64_t, uint64_t))v147)(v133, v99, v98);
              v101._countAndFlagsBits = 0xD000000000000014;
              v101._object = v141;
              prohibitAsyncContext(functionName:)(v101);
              uint64_t v159 = v88;
              sub_10000588C(&qword_101659208);
              uint64_t v102 = String.init<A>(describing:)();
              uint64_t v104 = v103;
              v151 = (char *)v122;
              __chkstk_darwin(v153);
              v122[-6] = v105;
              v122[-5] = v97;
              v122[-4] = v100;
              v122[-3] = v102;
              v122[-2] = v104;
              uint64_t v106 = (uint64_t)v130;
              uint64_t v107 = v145;
              OS_dispatch_queue.sync<A>(execute:)();
              uint64_t v145 = v107;
              uint64_t v88 = v137;
              swift_bridgeObjectRelease();
              (*v146)(v100, v98);
              (*v143)(v156, v144);
              if ((*v142)((char *)v106, 1, v88) == 1)
              {
                sub_10001DAB4(v106, &qword_10163BBB0);
                uint64_t v89 = (uint64_t)v131;
                uint64_t v90 = (uint64_t)v136;
                uint64_t v91 = v135;
                uint64_t v92 = (uint64_t)v152;
              }
              else
              {
                uint64_t v108 = v128;
                sub_1010D8A60(v106, v128, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
                uint64_t v109 = (uint64_t *)(v108 + *(int *)(v88 + 56));
                uint64_t v110 = *v109;
                uint64_t v111 = v109[1];
                swift_bridgeObjectRetain();
                sub_1010D8B30(v108, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
                uint64_t v91 = v135;
                uint64_t v112 = v152;
                uint64_t v113 = &v152[*(int *)(v135 + 60)];
                swift_bridgeObjectRelease();
                *(void *)uint64_t v113 = v110;
                *((void *)v113 + 1) = v111;
                uint64_t v92 = (uint64_t)v112;
                uint64_t v89 = (uint64_t)v131;
                uint64_t v90 = (uint64_t)v136;
              }
            }
            sub_1010D8AC8(v92, v90, type metadata accessor for AccessoryMetadata);
            (*v154)(v90, 0, 1, v91);
            sub_1010D8B30(v92, type metadata accessor for AccessoryMetadata);
            uint64_t v86 = v155;
          }
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v160);
          if (v93(v90, 1, v91) == 1)
          {
            sub_10001DAB4(v90, &qword_1016653B0);
            size_t v87 = v158;
          }
          else
          {
            uint64_t v114 = v148;
            sub_1010D8A60(v90, v148, type metadata accessor for AccessoryMetadata);
            sub_1010D8A60(v114, v157, type metadata accessor for AccessoryMetadata);
            size_t v87 = v158;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              size_t v87 = (void *)sub_100A726E8(0, v87[2] + 1, 1, (unint64_t)v87);
            }
            unint64_t v116 = v87[2];
            unint64_t v115 = v87[3];
            if (v116 >= v115 >> 1) {
              size_t v87 = (void *)sub_100A726E8(v115 > 1, v116 + 1, 1, (unint64_t)v87);
            }
            v87[2] = v116 + 1;
            sub_1010D8A60(v157, (uint64_t)v87+ ((*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80))+ *(void *)(v150 + 72) * v116, type metadata accessor for AccessoryMetadata);
            uint64_t v92 = (uint64_t)v152;
            uint64_t v86 = v155;
          }
          v85 += 40;
          --v84;
        }
        while (v84);
        swift_bridgeObjectRelease();
        if (v87[2]) {
          goto LABEL_52;
        }
      }
      else
      {
        size_t v87 = _swiftEmptyArrayStorage;
        if (_swiftEmptyArrayStorage[2])
        {
LABEL_52:
          uint64_t v117 = type metadata accessor for Transaction();
          __chkstk_darwin(v117);
          v122[-6] = v138;
          v122[-5] = v87;
          uint64_t v118 = v129;
          v122[-4] = v41;
          v122[-3] = v118;
          uint64_t v119 = v124;
          v122[-2] = v127;
          v122[-1] = v119;
          static Transaction.named<A>(_:with:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v120 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v62, v120)) {
        goto LABEL_20;
      }
      unint64_t v121 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v121 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v120, "Metadata is empty. Not fetching product info.", v121, 2u);
LABEL_19:
      swift_slowDealloc();
LABEL_20:

      goto LABEL_22;
    }
    os_log_type_t v39 = &qword_101637000;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (v39[132] != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for Logger();
  sub_100010324(v61, (uint64_t)qword_10170F1E8);
  swift_bridgeObjectRetain();
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v62, v63))
  {
    uint64_t v64 = swift_slowAlloc();
    uint64_t v160 = (void (**)(uint64_t, uint64_t, uint64_t, void))swift_slowAlloc();
    *(_DWORD *)uint64_t v64 = 141558275;
    uint64_t v159 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v64 + 12) = 2081;
    swift_bridgeObjectRetain();
    uint64_t v65 = Array.description.getter();
    unint64_t v67 = v66;
    swift_bridgeObjectRelease();
    uint64_t v159 = sub_1008FA0F0(v65, v67, (uint64_t *)&v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Already fetching product info for beacons %{private,mask.hash}s", (uint8_t *)v64, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_19;
  }

  uint64_t v68 = swift_bridgeObjectRelease_n();
LABEL_22:
  if (v129) {
    v129(v68);
  }
}

uint64_t sub_1010D4EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  uint64_t v54 = a1;
  uint64_t v55 = a4;
  uint64_t v8 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10166BFE0);
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v45 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_10166A498);
  uint64_t v46 = *(void *)(v14 - 8);
  uint64_t v47 = v14;
  __chkstk_darwin(v14);
  uint64_t v43 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_10166A4A0);
  uint64_t v49 = *(void *)(v16 - 8);
  uint64_t v50 = v16;
  __chkstk_darwin(v16);
  uint64_t v48 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C(&qword_10166A4A8);
  uint64_t v52 = *(void *)(v18 - 8);
  uint64_t v53 = v18;
  __chkstk_darwin(v18);
  Class v51 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v59 = (id)sub_1003047E8(a3);
  uint64_t v58 = a2;
  id v60 = *(id *)(a2 + 16);
  id v20 = v60;
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  uint64_t v40 = v22 + 56;
  v41(v10, 1, 1, v21);
  id v23 = v20;
  sub_10000588C((uint64_t *)&unk_10166C030);
  sub_10000584C();
  sub_100062734(&qword_10164D6E8, (uint64_t *)&unk_10166C030);
  sub_1010D8F64((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
  uint64_t v42 = v13;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v10, &qword_10163C6C8);

  swift_release();
  if (qword_101637428 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_100010324(v24, (uint64_t)qword_10166A2C8);
  id v59 = v23;
  v41(v10, 1, 1, v21);
  sub_100062734(&qword_10166C040, &qword_10166BFE0);
  id v25 = v23;
  uint64_t v26 = v43;
  uint64_t v27 = v45;
  uint64_t v28 = v42;
  Publisher.timeout<A>(_:scheduler:options:customError:)();
  sub_10001DAB4((uint64_t)v10, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v27);
  sub_10000588C(&qword_101641650);
  sub_100062734(&qword_10166A4B0, &qword_10166A498);
  uint64_t v29 = v47;
  uint64_t v30 = v48;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v26, v29);
  sub_10000588C(&qword_10164D700);
  sub_100062734(&qword_10166A4B8, &qword_10166A4A0);
  sub_100062734(&qword_10164D710, &qword_10164D700);
  uint64_t v31 = v50;
  uint64_t v32 = v51;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v30, v31);
  uint64_t v33 = swift_allocObject();
  swift_weakInit();
  uint64_t v34 = (void *)swift_allocObject();
  v34[2] = v33;
  uint64_t v35 = v55;
  v34[3] = v54;
  v34[4] = v35;
  uint64_t v36 = v56;
  uint64_t v37 = v57;
  v34[5] = v56;
  v34[6] = v37;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000BD0E8(v36);
  sub_100062734(&qword_10166A4C0, &qword_10166A4A8);
  uint64_t v38 = v53;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v32, v38);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1010D5644(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101641650);
  __chkstk_darwin(v2);
  sub_1010D8AC8(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
  swift_storeEnumTagMultiPayload();
  return Just.init(_:)();
}

uint64_t sub_1010D5704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v70 = a6;
  unint64_t v71 = (void (*)(void))a5;
  uint64_t v72 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v74 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101638CF0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v73 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  long long v75 = (char *)&v65 - v13;
  uint64_t v14 = type metadata accessor for BluetoothCommunicationCoordinator.Error();
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v65 - v18;
  uint64_t v20 = sub_10000588C(&qword_101641650);
  __chkstk_darwin(v20);
  uint64_t v22 = (uint64_t *)((char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v24 = result;
    Transaction.capture()();
    sub_10001D074(a1, (uint64_t)v22, &qword_101641650);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v25 = (uint64_t)v22;
      uint64_t v26 = (uint64_t)v19;
      sub_1010D8A60(v25, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      if (qword_101637420 != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      sub_100010324(v27, (uint64_t)qword_10170F1E8);
      sub_1010D8AC8((uint64_t)v19, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      swift_bridgeObjectRetain_n();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      int v30 = v29;
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v31 = swift_slowAlloc();
        LODWORD(v69) = v30;
        uint64_t v32 = v31;
        uint64_t v33 = swift_slowAlloc();
        unint64_t v66 = v33;
        *(_DWORD *)uint64_t v32 = 141558531;
        uint64_t v76 = 1752392040;
        v77[0] = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v32 + 12) = 2081;
        swift_bridgeObjectRetain();
        uint64_t v34 = Array.description.getter();
        os_log_t v65 = v28;
        uint64_t v35 = v34;
        unint64_t v37 = v36;
        swift_bridgeObjectRelease();
        uint64_t v76 = sub_1008FA0F0(v35, v37, v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v32 + 22) = 2082;
        unint64_t v38 = sub_1011CE8B8();
        uint64_t v76 = sub_1008FA0F0(v38, v39, v77);
        uint64_t v26 = (uint64_t)v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1010D8B30((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
        os_log_t v40 = v65;
        _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v69, "Failed fetch product info for %{private,mask.hash}s! %{public}s", (uint8_t *)v32, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        sub_1010D8B30((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      }
      uint64_t v52 = v75;
      if (v71) {
        v71();
      }
      sub_1010D8B30(v26, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      uint64_t v46 = v72;
    }
    else
    {
      uint64_t v41 = *v22;
      if (qword_101637420 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_100010324(v42, (uint64_t)qword_10170F1E8);
      swift_bridgeObjectRetain_n();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      BOOL v45 = os_log_type_enabled(v43, v44);
      uint64_t v46 = v72;
      if (v45)
      {
        uint64_t v47 = swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        unint64_t v66 = v48;
        *(_DWORD *)uint64_t v47 = 141558275;
        uint64_t v76 = 1752392040;
        v77[0] = v48;
        unint64_t v69 = (void (**)(char *, char *, uint64_t))v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v47 + 12) = 2081;
        os_log_t v65 = (os_log_t)(v47 + 14);
        swift_bridgeObjectRetain();
        uint64_t v49 = Array.description.getter();
        unint64_t v51 = v50;
        swift_bridgeObjectRelease();
        uint64_t v76 = sub_1008FA0F0(v49, v51, v77);
        uint64_t v41 = (uint64_t)v69;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Fetched product infos for %{private,mask.hash}s.", (uint8_t *)v47, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v52 = v75;
      sub_1010D5F60(v41, a4, (void (*)(uint64_t))v71, v70);
      swift_bridgeObjectRelease();
    }
    uint64_t v53 = *(void *)(a4 + 16);
    uint64_t v67 = v24;
    uint64_t v68 = a4;
    if (v53)
    {
      uint64_t v55 = *(void (**)(uint64_t))(v8 + 16);
      uint64_t v54 = v8 + 16;
      unint64_t v56 = a4 + ((*(unsigned __int8 *)(v54 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 64));
      uint64_t v70 = *(void *)(v54 + 56);
      unint64_t v71 = (void (*)(void))v55;
      uint64_t v57 = v54;
      uint64_t v58 = v54 + 40;
      id v59 = (unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 32);
      unint64_t v69 = (void (**)(char *, char *, uint64_t))(v57 + 16);
      uint64_t v72 = v57;
      id v60 = (void (**)(uint64_t, uint64_t))(v57 - 8);
      swift_bridgeObjectRetain();
      unint64_t v66 = v58 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      uint64_t v61 = (uint64_t)v73;
      while (1)
      {
        ((void (*)(char *, unint64_t, uint64_t))v71)(v52, v56, v46);
        uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v58;
        (*(void (**)(char *, void, uint64_t, uint64_t))v58)(v52, 0, 1, v46);
        if ((*v59)(v52, 1, v46) == 1) {
          break;
        }
        uint64_t v63 = (uint64_t)v74;
        (*v69)(v74, v75, v46);
        swift_beginAccess();
        sub_101126F68(v63, v61);
        sub_10001DAB4(v61, &qword_101638CF0);
        swift_endAccess();
        uint64_t v64 = v63;
        uint64_t v52 = v75;
        (*v60)(v64, v46);
        v56 += v70;
        if (!--v53) {
          goto LABEL_23;
        }
      }
    }
    else
    {
      uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
LABEL_23:
      v62(v52, 1, 1, v46);
    }
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1010D5F60(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v64 = a4;
  os_log_t v65 = a3;
  uint64_t v89 = a2;
  uint64_t v90 = a1;
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v84 = (uint64_t)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v88 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v82 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for DispatchQoS();
  uint64_t v68 = *(void (***)(char *, uint64_t))(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v80 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v87 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v87 + 64);
  uint64_t v11 = __chkstk_darwin(v9 - 8);
  uint64_t v79 = (uint64_t)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v64 - v12;
  uint64_t v14 = sub_10000588C(&qword_10166A488);
  uint64_t v76 = *(unsigned int (***)(uint64_t *, uint64_t, uint64_t))(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v67 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_10166A490);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (unint64_t *)((char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  uint64_t v85 = (uint64_t *)((char *)&v64 - v20);
  uint64_t v21 = type metadata accessor for DispatchPredicate();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (uint64_t *)((char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v86 = v4;
  uint64_t v25 = *(void **)(v4 + 16);
  *uint64_t v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  id v26 = v25;
  char v27 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v22 + 8))(v24, v21);
  if ((v27 & 1) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v28 = v90;
  if (!*(void *)(v90 + 16))
  {
    if (qword_101637420 == -1)
    {
LABEL_17:
      uint64_t v56 = type metadata accessor for Logger();
      sub_100010324(v56, (uint64_t)qword_10170F1E8);
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v57, v58)) {
        goto LABEL_24;
      }
      id v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v59 = 0;
      id v60 = "Empty products in response!";
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v57, v58, v60, v59, 2u);
      swift_slowDealloc();
LABEL_24:

      uint64_t v62 = v86;
      swift_beginAccess();
      *(void *)(v62 + 40) = &_swiftEmptySetSingleton;
      uint64_t v63 = swift_bridgeObjectRelease();
      if (v65) {
        v65(v63);
      }
      return;
    }
LABEL_29:
    swift_once();
    goto LABEL_17;
  }
  uint64_t v29 = v86;
  swift_retain();
  swift_bridgeObjectRetain();
  int v30 = sub_1010D7624(v89, v29, v28);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v31 = v30[2];
  if (!v31)
  {
    swift_bridgeObjectRelease();
    if (qword_101637420 != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    sub_100010324(v61, (uint64_t)qword_10170F1E8);
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v57, v58)) {
      goto LABEL_24;
    }
    id v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v59 = 0;
    id v60 = "Failed to match beacons with products from server response!";
    goto LABEL_23;
  }
  dispatch_group_t v66 = dispatch_group_create();
  dispatch_group_enter(v66);
  uint64_t v78 = (void *)(v86 + 40);
  uint64_t v77 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v76 + 7);
  v76 += 6;
  uint64_t v71 = v10 + 7;
  uint64_t v70 = v93;
  unint64_t v69 = (void (**)(char *, uint64_t))(v88 + 8);
  ++v68;
  swift_bridgeObjectRetain();
  unint64_t v32 = 0;
  uint64_t v33 = v85;
  uint64_t v75 = v14;
  uint64_t v74 = v19;
  uint64_t v73 = v30;
  uint64_t v72 = v31;
  while (1)
  {
    if (v32 == v31)
    {
      uint64_t v34 = 1;
      uint64_t v35 = v31;
    }
    else
    {
      if (v32 >= v30[2])
      {
        __break(1u);
        goto LABEL_28;
      }
      uint64_t v35 = v32 + 1;
      uint64_t v36 = (uint64_t)&v67[*(int *)(v14 + 48)];
      sub_1010D8AC8((uint64_t)v30+ ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80))+ *(void *)(v87 + 72) * v32, v36, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      uint64_t v37 = (uint64_t)v19 + *(int *)(v14 + 48);
      *uint64_t v19 = v32;
      sub_1010D8A60(v36, v37, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      uint64_t v34 = 0;
    }
    (*v77)(v19, v34, 1, v14);
    sub_10001D608((uint64_t)v19, (uint64_t)v33, &qword_10166A490);
    if ((*v76)(v33, 1, v14) == 1) {
      break;
    }
    uint64_t v89 = *v33;
    uint64_t v90 = v35;
    sub_1010D8A60((uint64_t)v33 + *(int *)(v14 + 48), (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    uint64_t v38 = v86;
    uint64_t v39 = *(void *)(v86 + 24);
    uint64_t v40 = v79;
    sub_1010D8AC8((uint64_t)v13, v79, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    uint64_t v41 = (uint64_t)v13;
    unint64_t v42 = (*(unsigned __int8 *)(v87 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
    unint64_t v43 = (v71 + v42) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v44 = swift_allocObject();
    sub_1010D8A60(v40, v44 + v42, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    *(void *)(v44 + v43) = v38;
    uint64_t v88 = *(void *)(v39 + 64);
    sub_1010D8AC8(v41, v40, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    uint64_t v45 = swift_allocObject();
    sub_1010D8A60(v40, v45 + v42, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    *(void *)(v45 + v43) = v39;
    uint64_t v46 = (void (**)(uint64_t))(v45 + ((v43 + 15) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v46 = sub_1010D7F38;
    v46[1] = (void (*)(uint64_t))v44;
    v93[2] = sub_1010D83CC;
    v93[3] = v45;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    v93[0] = sub_1004B5480;
    v93[1] = &unk_101607BF0;
    uint64_t v47 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v48 = v80;
    static DispatchQoS.unspecified.getter();
    uint64_t v91 = _swiftEmptyArrayStorage;
    sub_1010D8F64((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    unint64_t v50 = v82;
    uint64_t v49 = v83;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v47);
    unint64_t v51 = v50;
    uint64_t v13 = (char *)v41;
    (*v69)(v51, v49);
    (*v68)(v48, v81);
    int v30 = v73;
    swift_release();
    swift_release();
    swift_beginAccess();
    uint64_t v52 = v84;
    sub_101126F68(v41, v84);
    sub_10001DAB4(v52, &qword_101638CF0);
    swift_endAccess();
    if (v89 == v30[2] - 1) {
      dispatch_group_leave(v66);
    }
    sub_1010D8B30(v41, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    uint64_t v14 = v75;
    uint64_t v19 = v74;
    uint64_t v33 = v85;
    uint64_t v31 = v72;
    unint64_t v32 = v90;
  }
  swift_bridgeObjectRelease_n();
  dispatch_group_t v53 = v66;
  OS_dispatch_group.wait()();
  uint64_t v54 = v78;
  swift_beginAccess();
  void *v54 = &_swiftEmptySetSingleton;
  uint64_t v55 = swift_bridgeObjectRelease();
  if (v65) {
    v65(v55);
  }
}

uint64_t sub_1010D6AC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v50 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AccessoryProductInfo();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v49 = (uint64_t)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v42 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v47 = (uint64_t)v42 - v17;
  __chkstk_darwin(v16);
  uint64_t v48 = (uint64_t)v42 - v18;
  sub_100ACCD98(a1, (uint64_t)&v52);
  if (!v53)
  {
    sub_10001DAB4((uint64_t)&v52, (uint64_t *)&unk_10163BBE0);
    goto LABEL_15;
  }
  uint64_t v44 = v7;
  uint64_t v45 = v6;
  uint64_t v46 = a1;
  sub_10001CEB0(&v52, (uint64_t)v54);
  uint64_t v19 = v55;
  uint64_t v20 = v56;
  sub_10001CD44(v54, v55);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 168))(v19, v20);
  if (v22 >> 60 == 15)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v54);
LABEL_15:
    uint64_t v34 = type metadata accessor for BeaconProductInfoRecord();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(a3, 1, 1, v34);
  }
  uint64_t v23 = v21;
  uint64_t v43 = a3;
  uint64_t v24 = *(void *)(v51 + 16);
  if (!v24)
  {
LABEL_14:
    sub_100037A24(v23, v22);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v54);
    a3 = v43;
    goto LABEL_15;
  }
  unint64_t v57 = v22;
  v42[1] = v3;
  uint64_t v25 = v51 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v26 = *(void *)(v10 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1010D8AC8(v25, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    char v27 = &v15[*(int *)(v9 + 32)];
    uint64_t v28 = *(void *)v27;
    uint64_t v29 = *((void *)v27 + 1);
    uint64_t v30 = v23;
    *(void *)&long long v52 = v23;
    *((void *)&v52 + 1) = v57;
    sub_1001A95DC();
    if (v28 == RawRepresentable<>.hexString.getter() && v29 == v31) {
      break;
    }
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v33) {
      goto LABEL_17;
    }
    sub_1010D8B30((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    v25 += v26;
    if (!--v24)
    {
      swift_bridgeObjectRelease();
      unint64_t v22 = v57;
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
LABEL_17:
  swift_bridgeObjectRelease();
  uint64_t v36 = v47;
  sub_1010D8A60((uint64_t)v15, v47, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  uint64_t v37 = v48;
  sub_1010D8A60(v36, v48, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  uint64_t v38 = v49;
  sub_1010D8AC8(v37, v49, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  uint64_t v39 = (uint64_t)v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v50, v46, v45);
  uint64_t v40 = v43;
  sub_1008538C8(v38, v39, v43);
  sub_100037A24(v30, v57);
  sub_1010D8B30(v37, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  uint64_t v41 = type metadata accessor for BeaconProductInfoRecord();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 0, 1, v41);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v54);
}

void sub_1010D6F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v32 - v10;
  uint64_t v12 = sub_10000588C(&qword_1016592D0);
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v14, &qword_1016592D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = *v14;
    if (qword_101637420 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170F1E8);
    sub_1010D8AC8(a2, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 141558531;
      uint64_t v33 = 1752392040;
      uint64_t v34 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2081;
      type metadata accessor for UUID();
      sub_1010D8F64((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v33 = sub_1008FA0F0(v21, v22, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1010D8B30((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      *(_WORD *)(v19 + 22) = 2082;
      uint64_t v33 = v15;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v33 = sub_1008FA0F0(v23, v24, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "saveLocal failed! Beacon %{private,mask.hash}s: %{public}s", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_1010D8B30((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_101637420 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_10170F1E8);
    sub_1010D8AC8(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 141558275;
      uint64_t v33 = 1752392040;
      uint64_t v34 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2081;
      type metadata accessor for UUID();
      v32[1] = a3;
      sub_1010D8F64((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v33 = sub_1008FA0F0(v30, v31, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1010D8B30((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Successfully saved productInfoRecord for %{private,mask.hash}s.", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1010D8B30((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    }

    sub_100A9E7EC(22);
    sub_10001DAB4((uint64_t)v14, &qword_1016592D0);
  }
}

uint64_t sub_1010D755C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1010D75AC()
{
  sub_1010D755C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ProductInfoManager()
{
  return self;
}

double sub_1010D7604@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 257;
  *(_OWORD *)a1 = xmmword_10138E1F0;
  *(_OWORD *)(a1 + 16) = xmmword_10138E200;
  *(void *)(a1 + 32) = 128;
  return result;
}

void *sub_1010D7624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = a2;
  uint64_t v6 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v9 = *(void *)(v51 - 8);
  uint64_t v10 = __chkstk_darwin(v51);
  uint64_t v50 = (uint64_t)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v43 = (uint64_t)&v40 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v54 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v16 - 8);
  os_log_type_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19)
  {
    uint64_t v58 = v3;
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v20 = v14 + 16;
    uint64_t v22 = a1;
    uint64_t v23 = a1 + ((*(unsigned __int8 *)(v20 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 64));
    uint64_t v56 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 40);
    uint64_t v24 = *(void *)(v20 + 56);
    long long v52 = (unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 32);
    uint64_t v53 = v21;
    uint64_t v46 = v24;
    uint64_t v47 = (void (**)(char *, char *, uint64_t))(v20 + 16);
    uint64_t v48 = (void (**)(uint64_t, uint64_t))(v20 - 8);
    uint64_t v49 = v8;
    uint64_t v42 = v9;
    uint64_t v45 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    uint64_t v40 = v22;
    swift_bridgeObjectRetain();
    unint64_t v57 = _swiftEmptyArrayStorage;
    uint64_t v41 = a3;
    while (1)
    {
      v53(v18, v23, v13);
      uint64_t v25 = *v56;
      (*v56)(v18, 0, 1, v13);
      if ((*v52)(v18, 1, v13) == 1) {
        break;
      }
      uint64_t v44 = v25;
      uint64_t v26 = v20;
      uint64_t v27 = a3;
      uint64_t v28 = (uint64_t)v54;
      (*v47)(v54, v18, v13);
      uint64_t v29 = (uint64_t)v49;
      uint64_t v30 = v58;
      sub_1010D6AC4(v28, v27, (uint64_t)v49);
      if (v30)
      {
        (*v48)(v28, v13);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v57;
      }
      uint64_t v58 = 0;
      (*v48)(v28, v13);
      if ((*v45)(v29, 1, v51) == 1)
      {
        sub_10001DAB4(v29, &qword_10163BBB0);
        a3 = v27;
      }
      else
      {
        uint64_t v31 = v29;
        uint64_t v32 = v43;
        sub_1010D8A60(v31, v43, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
        sub_1010D8A60(v32, v50, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v57 = (void *)sub_100A7271C(0, v57[2] + 1, 1, (unint64_t)v57);
        }
        unint64_t v34 = v57[2];
        unint64_t v33 = v57[3];
        uint64_t v35 = v42;
        if (v34 >= v33 >> 1)
        {
          uint64_t v37 = (void *)sub_100A7271C(v33 > 1, v34 + 1, 1, (unint64_t)v57);
          uint64_t v35 = v42;
          unint64_t v57 = v37;
        }
        uint64_t v36 = v57;
        v57[2] = v34 + 1;
        sub_1010D8A60(v50, (uint64_t)v36+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v34, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
        a3 = v41;
      }
      v23 += v46;
      --v19;
      uint64_t v20 = v26;
      if (!v19)
      {
        v44(v18, 1, 1, v13);
        break;
      }
    }
  }
  else
  {
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    swift_bridgeObjectRetain();
    unint64_t v57 = _swiftEmptyArrayStorage;
    v38(v18, 1, 1, v13);
  }
  swift_bridgeObjectRelease();
  return v57;
}

uint64_t sub_1010D7B54()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconProductInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v18 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v19 = v0;
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[12];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = v4 + v1[13];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = v4 + v1[16];
  uint64_t v12 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v11 + *(int *)(v12 + 40);
    if (!v9(v13, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v13, v7);
    }
    uint64_t v14 = v11 + *(int *)(v12 + 44);
    if (!v9(v14, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v14, v7);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = (v2 + 16) & ~v2;
  }
  unint64_t v15 = (v18 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v16(v4 + v1[19], v7);
  v16(v4 + v1[20], v7);
  v16(v4 + v1[21], v7);
  v16(v4 + v1[22], v7);
  v16(v4 + v1[23], v7);
  v16(v4 + v1[24], v7);
  swift_release();

  return _swift_deallocObject(v19, v15 + 8, v2 | 7);
}

void sub_1010D7F38(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeaconProductInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1010D6F58(a1, v1 + v4, v5);
}

uint64_t sub_1010D7FD4()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconProductInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v18 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v19 = v0;
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[12];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v10 = v4 + v1[13];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = v4 + v1[16];
  uint64_t v12 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v11 + *(int *)(v12 + 40);
    if (!v9(v13, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v13, v7);
    }
    uint64_t v14 = v11 + *(int *)(v12 + 44);
    if (!v9(v14, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v14, v7);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = (v2 + 16) & ~v2;
  }
  uint64_t v15 = v2 | 7;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v16(v4 + v1[19], v7);
  v16(v4 + v1[20], v7);
  v16(v4 + v1[21], v7);
  v16(v4 + v1[22], v7);
  v16(v4 + v1[23], v7);
  v16(v4 + v1[24], v7);
  swift_release();
  swift_release();

  return _swift_deallocObject(v19, ((((v18 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v15);
}

uint64_t sub_1010D83CC()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconProductInfoRecord() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = v0 + v2;
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void (**)(char *))v6;
  uint64_t v8 = *(void *)(v6 + 8);

  return sub_100D3559C(v4, v5, v7, v8);
}

uint64_t sub_1010D8468(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1010D8478()
{
  return swift_release();
}

uint64_t sub_1010D8480()
{
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1010D84D0()
{
  sub_1010D3C24(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32), *(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(void *)(v0 + 56));
}

void *sub_1010D84E4(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v46 - 8);
  uint64_t v6 = __chkstk_darwin(v46);
  uint64_t v43 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v47 = (char *)&v36 - v8;
  uint64_t v9 = _swiftEmptyArrayStorage;
  uint64_t v54 = _swiftEmptyArrayStorage;
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v39 = (uint64_t *)(a2 + 40);
  swift_beginAccess();
  uint64_t v40 = v10;
  if (v10)
  {
    uint64_t v36 = v2;
    uint64_t v11 = 0;
    uint64_t v38 = a1 + 32;
    uint64_t v42 = v5 + 16;
    uint64_t v37 = v5;
    uint64_t v45 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v12 = v43;
    do
    {
      uint64_t v41 = v11;
      sub_10001D010(v38 + 40 * v11, (uint64_t)&v51);
      uint64_t v13 = *v39;
      uint64_t v15 = v52;
      uint64_t v14 = v53;
      sub_10001CD44(&v51, v52);
      uint64_t v16 = *(void *)(*(void *)(v14 + 8) + 8);
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v16 + 32);
      swift_bridgeObjectRetain();
      v17(v15, v16);
      if (*(void *)(v13 + 16)
        && (sub_1010D8F64(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID),
            uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v19 = -1 << *(unsigned char *)(v13 + 32),
            unint64_t v20 = v18 & ~v19,
            ((*(void *)(v13 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) != 0))
      {
        uint64_t v44 = ~v19;
        uint64_t v21 = *(void *)(v37 + 72);
        uint64_t v22 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
        while (1)
        {
          uint64_t v23 = v46;
          v22(v12, *(void *)(v13 + 48) + v21 * v20, v46);
          sub_1010D8F64((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v25 = *v45;
          (*v45)(v12, v23);
          if (v24) {
            break;
          }
          unint64_t v20 = (v20 + 1) & v44;
          if (((*(void *)(v13 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
            goto LABEL_10;
          }
        }
        swift_bridgeObjectRelease();
        v25(v47, v46);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v51);
      }
      else
      {
LABEL_10:
        swift_bridgeObjectRelease();
        (*v45)(v47, v46);
        sub_10001CEB0(&v51, (uint64_t)v48);
        uint64_t v26 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v26[2] + 1, 1);
          uint64_t v26 = v54;
        }
        unint64_t v28 = v26[2];
        unint64_t v27 = v26[3];
        if (v28 >= v27 >> 1) {
          sub_1000B7570(v27 > 1, v28 + 1, 1);
        }
        uint64_t v29 = v49;
        uint64_t v30 = v50;
        uint64_t v31 = sub_1000BD078((uint64_t)v48, v49);
        __chkstk_darwin(v31);
        unint64_t v33 = (char *)&v36 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v34 + 16))(v33);
        sub_1006985B0(v28, (uint64_t)v33, (uint64_t *)&v54, v29, v30);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v48);
      }
      uint64_t v11 = v41 + 1;
    }
    while (v41 + 1 != v40);
    return v54;
  }
  return v9;
}

uint64_t sub_1010D8978(uint64_t a1)
{
  return sub_1010D4EF4(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1010D899C@<X0>(uint64_t a1@<X8>)
{
  return sub_100E50638(*(void *)(v1 + 16), *(void *)(v1 + 32), *(void ***)(v1 + 40), *(uint8_t **)(v1 + 48), a1);
}

uint64_t sub_1010D89C0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1010D89F8()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1010D8A50(uint64_t a1)
{
  return sub_1010D5704(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void (**)(uint64_t))(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1010D8A60(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1010D8AC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1010D8B30(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1010D8B90()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1010D8BD0()
{
  return sub_1010D2D5C(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24), *(char **)(v0 + 32));
}

uint64_t sub_1010D8BDC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1010D8C24()
{
  return sub_1010D35BC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(uint64_t (**)(uint64_t))(v0 + 40), *(void *)(v0 + 48));
}

void sub_1010D8C34()
{
}

uint64_t sub_1010D8C3C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1010D23F8(a1, a2, a3);
}

uint64_t sub_1010D8C48()
{
  return sub_1010D1A54();
}

uint64_t sub_1010D8C50()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void *sub_1010D8C88(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  static DispatchQoS.unspecified.getter();
  uint64_t v14 = _swiftEmptyArrayStorage;
  sub_1010D8F64((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v10 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v2[7] = 0;
  v2[8] = 0;
  v2[5] = &_swiftEmptySetSingleton;
  v2[6] = &_swiftEmptySetSingleton;
  v2[2] = v10;
  v2[3] = a1;
  v2[4] = v13;
  swift_retain();
  swift_retain();
  sub_1010D18EC();
  swift_release();
  type metadata accessor for Transaction();
  static Transaction.named<A>(_:with:)();
  return v2;
}

uint64_t sub_1010D8F64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1010D8FAC(uint64_t a1)
{
  return sub_1010D1F24(a1, v1);
}

uint64_t sub_1010D8FC8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1010D9008()
{
  return sub_1010D21F8();
}

uint64_t sub_1010D9058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010D906C);
}

uint64_t sub_1010D9070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010D9084);
}

uint64_t type metadata accessor for KeyDropCreateShareEndpoint(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10166A520);
}

uint64_t sub_1010D90A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010D90BC);
}

uint64_t sub_1010D90C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010D90D4);
}

uint64_t type metadata accessor for KeyDropGetShareEndpoint(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10166A5B0);
}

uint64_t sub_1010D90F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010D910C);
}

uint64_t sub_1010D9110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010D9124);
}

uint64_t type metadata accessor for KeyDropUpdateShareEndpoint(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10166A640);
}

uint64_t sub_1010D9148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010D915C);
}

uint64_t sub_1010D9160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010D9174);
}

uint64_t type metadata accessor for KeyDropDeleteShareEndpoint(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10166A6D0);
}

uint64_t sub_1010D9198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010D91AC);
}

uint64_t sub_1010D91B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010D91C4);
}

uint64_t type metadata accessor for KeyDropFetchDelegatedMetadataEndpoint(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10166A760);
}

uint64_t sub_1010D91E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010D91FC);
}

uint64_t sub_1010D9200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010D9214);
}

uint64_t type metadata accessor for KeyDropRegisterAPNSTokenEndpoint(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10166A7F0);
}

uint64_t *sub_1010D9238(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_1000361E0(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
  }
  return a1;
}

uint64_t sub_1010D9318(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];

  return sub_10001CFB8(v6, v7);
}

uint64_t sub_1010D9390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000361E0(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  return a1;
}

uint64_t sub_1010D9420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000361E0(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  sub_10001CFB8(v12, v13);
  return a1;
}

uint64_t sub_1010D94B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_10001CFB8(v8, v9);
  return a1;
}

uint64_t sub_1010D9540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010D9554);
}

uint64_t sub_1010D9554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * v10) & 0xC) != 0) {
      return 16 - ((4 * v10) & 0xC | (v10 >> 2));
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1010D9628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010D963C);
}

uint64_t sub_1010D963C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    unint64_t v11 = (void *)(a1 + *(int *)(a4 + 20));
    *unint64_t v11 = 0;
    v11[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

uint64_t type metadata accessor for KeyDropJoinToken(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10166A880);
}

uint64_t sub_1010D9728()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1010D97BC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10166A8B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1010D9DC4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for UUID();
  sub_10001035C(&qword_10163B040);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v11 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20));
    v10[15] = 1;
    sub_100037BB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1010D9974@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000588C(&qword_10166A8C8);
  uint64_t v21 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for KeyDropJoinToken(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010D9DC4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  long long v11 = v10;
  uint64_t v12 = v20;
  LOBYTE(v24) = 0;
  sub_10001035C((unint64_t *)&qword_10163B010);
  uint64_t v13 = v22;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v18 = (uint64_t)v11;
  v14(v11, v5, v13);
  char v25 = 1;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v23);
  uint64_t v16 = v18;
  uint64_t v15 = v19;
  *(_OWORD *)(v18 + *(int *)(v8 + 20)) = v24;
  sub_100175520(v16, v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_1010D9E18(v16);
}

uint64_t sub_1010D9CB0()
{
  if (*v0) {
    return 0x4B65746176697270;
  }
  else {
    return 0x55557265626D656DLL;
  }
}

uint64_t sub_1010D9CF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1010DA080(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1010D9D1C(uint64_t a1)
{
  unint64_t v2 = sub_1010D9DC4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010D9D58(uint64_t a1)
{
  unint64_t v2 = sub_1010D9DC4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010D9D94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1010D9974(a1, a2);
}

uint64_t sub_1010D9DAC(void *a1)
{
  return sub_1010D97BC(a1);
}

unint64_t sub_1010D9DC4()
{
  unint64_t result = qword_10166A8C0;
  if (!qword_10166A8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166A8C0);
  }
  return result;
}

uint64_t sub_1010D9E18(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeyDropJoinToken(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for KeyDropJoinToken.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010D9F40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropJoinToken.CodingKeys()
{
  return &type metadata for KeyDropJoinToken.CodingKeys;
}

unint64_t sub_1010D9F7C()
{
  unint64_t result = qword_10166A8D0;
  if (!qword_10166A8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166A8D0);
  }
  return result;
}

unint64_t sub_1010D9FD4()
{
  unint64_t result = qword_10166A8D8;
  if (!qword_10166A8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166A8D8);
  }
  return result;
}

unint64_t sub_1010DA02C()
{
  unint64_t result = qword_10166A8E0;
  if (!qword_10166A8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166A8E0);
  }
  return result;
}

uint64_t sub_1010DA080(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x55557265626D656DLL && a2 == 0xEA00000000004449;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4B65746176697270 && a2 == 0xEA00000000007965)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1010DA18C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170F200);
  sub_100010324(v0, (uint64_t)qword_10170F200);
  return Logger.init(subsystem:category:)();
}

unint64_t sub_1010DA210()
{
  unint64_t result = sub_10093FA3C((uint64_t)_swiftEmptyArrayStorage);
  qword_10166A8E8 = result;
  return result;
}

uint64_t sub_1010DA238(_OWORD *a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 128) = 0xD000000000000025;
  *(void *)(v1 + 136) = 0x80000001014218F0;
  *(void *)(v1 + 144) = 0xD000000000000027;
  *(void *)(v1 + 152) = 0x8000000101421920;
  *(void *)(v1 + 160) = 0xD000000000000025;
  *(void *)(v1 + 168) = 0x8000000101421780;
  strcpy((char *)(v1 + 176), "DismissOnLock");
  *(_WORD *)(v1 + 190) = -4864;
  *(void *)(v1 + 192) = 0xD000000000000027;
  *(void *)(v1 + 200) = 0x8000000101421950;
  *(void *)(v1 + 208) = 0xD000000000000031;
  *(void *)(v1 + 216) = 0x8000000101421980;
  *(void *)(v1 + 224) = 0xD000000000000028;
  *(void *)(v1 + 232) = 0x80000001014219C0;
  *(void *)(v1 + 240) = 0xD000000000000020;
  *(void *)(v1 + 248) = 0x80000001014219F0;
  *(void *)(v1 + 256) = 0xD000000000000022;
  *(void *)(v1 + 264) = 0x80000001014218A0;
  long long v2 = a1[5];
  *(_OWORD *)(v1 + 96) = a1[4];
  *(_OWORD *)(v1 + 112) = v2;
  long long v3 = a1[3];
  *(_OWORD *)(v1 + 64) = a1[2];
  *(_OWORD *)(v1 + 80) = v3;
  long long v4 = a1[1];
  *(_OWORD *)(v1 + 32) = *a1;
  *(_OWORD *)(v1 + 48) = v4;
  return v1;
}

void sub_1010DA33C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  SInt32 error = 0;
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  CFUserNotificationRef v11 = CFUserNotificationCreate(0, 0.0, 0, &error, isa);

  uint64_t v12 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v11;

  uint64_t v13 = *(void **)(v1 + 16);
  if (v13 && !error)
  {
    uint64_t v28 = v3;
    uint64_t v18 = v13;
    CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource(0, v18, (CFUserNotificationCallBack)sub_1010DA8C8, 0);
    uint64_t v20 = *(void **)(v1 + 24);
    *(void *)(v1 + 24) = RunLoopSource;

    if (qword_101637438 != -1) {
      swift_once();
    }
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    CFOptionFlags responseFlags = qword_10166A8E8;
    qword_10166A8E8 = 0x8000000000000000;
    sub_10016CEC0((uint64_t)sub_1010DBA40, v1, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
    qword_10166A8E8 = responseFlags;
    swift_bridgeObjectRelease();
    swift_endAccess();
    CFOptionFlags responseFlags = 0;
    if (!CFUserNotificationReceiveResponse(v18, 0.0, &responseFlags))
    {
      CFOptionFlags v27 = responseFlags;
      swift_beginAccess();
      uint64_t v22 = v18;
      uint64_t v23 = (void (*)(void *))sub_100163FF0((uint64_t)v22);
      swift_endAccess();
      if (v23)
      {
        aBlock[0] = v27 & 3;
        v23(aBlock);
        sub_1000A1534((uint64_t)v23);
      }
    }
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    long long v24 = (void *)static OS_dispatch_queue.main.getter();
    aBlock[4] = sub_1010DBA48;
    aBlock[5] = v1;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_101607EF0;
    char v25 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_1008BEEB0();
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_10002FE84();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v25);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    if (qword_101637430 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170F200);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 67109120;
      swift_beginAccess();
      LODWORD(responseFlags) = error;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to create user notification, error code %d", v17, 8u);
      swift_slowDealloc();
    }
  }
}

void sub_1010DA8C8(void *a1, char a2)
{
  id v4 = a1;
  sub_1010DA91C(a1, a2);
}

void sub_1010DA91C(void *a1, char a2)
{
  if (a1)
  {
    uint64_t v3 = qword_101637438;
    id v4 = a1;
    if (v3 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v5 = (void (*)(void *))sub_100163FF0((uint64_t)v4);
    swift_endAccess();
    if (v5)
    {
      v6[0] = a2 & 3;
      v5(v6);
      sub_1000A1534((uint64_t)v5);
    }
  }
}

uint64_t sub_1010DA9E8(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  CFUserNotificationRef v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
  {
    if (*a1 == 1)
    {
      if (qword_101637430 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_100010324(v12, (uint64_t)qword_10170F200);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Alternate button pressed", v15, 2u);
        swift_slowDealloc();
      }

      os_log_type_t v16 = *(void (**)(void))(a2 + 112);
      if (v16) {
LABEL_14:
      }
        v16();
    }
  }
  else
  {
    if (qword_101637430 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_10170F200);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Default button pressed", v20, 2u);
      swift_slowDealloc();
    }

    os_log_type_t v16 = *(void (**)(void))(a2 + 96);
    if (v16) {
      goto LABEL_14;
    }
  }
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  uint64_t v21 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = sub_1010DBA68;
  aBlock[5] = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101607F18;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1008BEEB0();
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_10002FE84();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_1010DAE04(uint64_t a1)
{
  uint64_t v2 = *(__CFRunLoopSource **)(a1 + 24);
  if (v2)
  {
    CFRunLoopSourceInvalidate(v2);
    uint64_t v3 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v4 = *(__CFUserNotification **)(a1 + 16);
  if (v4)
  {
    CFUserNotificationCancel(v4);
    uint64_t v5 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
  }
}

void sub_1010DAE6C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = CFRunLoopGetCurrent();
    CFRunLoopAddSource(v3, v2, kCFRunLoopCommonModes);
  }
}

CFStringRef sub_1010DAEEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10138E610;
  uint64_t v10 = v0[17];
  *(void *)(inited + 32) = v0[16];
  *(void *)(inited + 40) = v10;
  uint64_t v60 = v10;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = 0xD00000000000001ALL;
  *(void *)(inited + 56) = 0x80000001014218D0;
  uint64_t v11 = v0[19];
  *(void *)(inited + 80) = v0[18];
  *(void *)(inited + 88) = v11;
  uint64_t v59 = v11;
  uint64_t v12 = v0[4];
  uint64_t v13 = v1[5];
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v12;
  *(void *)(inited + 104) = v13;
  if (!kCFUserNotificationAlertHeaderKey)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v58 = v5;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v14;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v12;
  *(void *)(inited + 152) = v13;
  if (!kCFUserNotificationAlertTopMostKey)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v55 = v8;
  uint64_t v56 = v3;
  uint64_t v57 = v2;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v15;
  *(void *)(inited + 216) = &type metadata for Bool;
  *(unsigned char *)(inited + 192) = 1;
  uint64_t v16 = v1[21];
  *(void *)(inited + 224) = v1[20];
  *(void *)(inited + 232) = v16;
  *(void *)(inited + 264) = &type metadata for Bool;
  *(unsigned char *)(inited + 240) = 1;
  uint64_t v17 = v1[23];
  *(void *)(inited + 272) = v1[22];
  *(void *)(inited + 280) = v17;
  *(void *)(inited + 312) = &type metadata for Bool;
  *(unsigned char *)(inited + 288) = 0;
  uint64_t v18 = v1[33];
  *(void *)(inited + 320) = v1[32];
  *(void *)(inited + 328) = v18;
  *(void *)(inited + 360) = &type metadata for Bool;
  *(unsigned char *)(inited + 336) = 1;
  if (!kCFUserNotificationDefaultButtonTitleKey)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(void *)(inited + 368) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 376) = v19;
  uint64_t v20 = v1[8];
  uint64_t v21 = v1[9];
  *(void *)(inited + 408) = &type metadata for String;
  *(void *)(inited + 384) = v20;
  *(void *)(inited + 392) = v21;
  if (!kCFUserNotificationLocalizationURLKey)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  *(void *)(inited + 416) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 424) = v22;
  sub_10001D4B0(0, &qword_10166AA30);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  long long v24 = self;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v25 = [v24 bundleForClass:ObjCClassFromMetadata];
  id v26 = [v25 resourceURL];

  if (!v26)
  {
LABEL_16:
    CFStringRef result = (CFStringRef)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v55, 1, 1, v57);
    goto LABEL_17;
  }
  CFOptionFlags v27 = v58;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v29 = v55;
  uint64_t v28 = v56;
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
  uint64_t v31 = v57;
  v30(v55, v27, v57);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v29, 0, 1, v31);
  CFStringRef result = (CFStringRef)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v29, 1, v31);
  if (result == 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *(void *)(inited + 456) = v31;
  unint64_t v33 = sub_10001D958((uint64_t *)(inited + 432));
  v30((char *)v33, v29, v31);
  uint64_t v34 = v1[25];
  *(void *)(inited + 464) = v1[24];
  *(void *)(inited + 472) = v34;
  *(void *)(inited + 504) = &type metadata for String;
  *(void *)(inited + 480) = 10;
  *(void *)(inited + 488) = 0xE100000000000000;
  uint64_t v35 = v1[27];
  *(void *)(inited + 512) = v1[26];
  *(void *)(inited + 520) = v35;
  *(void *)(inited + 552) = &type metadata for String;
  *(void *)(inited + 528) = 10;
  *(void *)(inited + 536) = 0xE100000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v36 = sub_10092CEEC(inited);
  sub_10000588C(&qword_1016552B0);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_101342130;
  uint64_t v39 = v1[6];
  uint64_t v38 = v1[7];
  *(void *)(v37 + 32) = v39;
  *(void *)(v37 + 40) = v38;
  uint64_t v40 = v1[28];
  uint64_t v41 = v1[29];
  uint64_t v64 = (void *)sub_10000588C(&qword_101654A30);
  *(void *)&long long v63 = v37;
  sub_100173E4C(&v63, v62);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v61 = v36;
  sub_10016C700(v62, v40, v41, isUniquelyReferenced_nonNull_native);
  unint64_t v43 = v61;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  CFStringRef result = kCFUserNotificationAlertMessageKey;
  if (!kCFUserNotificationAlertMessageKey)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v45;
  uint64_t v64 = &type metadata for String;
  *(void *)&long long v63 = v39;
  *((void *)&v63 + 1) = v38;
  sub_100173E4C(&v63, v62);
  swift_bridgeObjectRetain();
  char v47 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v61 = v43;
  sub_10016C700(v62, v44, v46, v47);
  unint64_t v48 = v61;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v49 = v1[11];
  if (!v49)
  {
LABEL_11:
    sub_1010DA33C();
    return (CFStringRef)swift_bridgeObjectRelease();
  }
  CFStringRef result = kCFUserNotificationAlternateButtonTitleKey;
  if (kCFUserNotificationAlternateButtonTitleKey)
  {
    uint64_t v50 = v1[10];
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v53 = v52;
    uint64_t v64 = &type metadata for String;
    *(void *)&long long v63 = v50;
    *((void *)&v63 + 1) = v49;
    sub_100173E4C(&v63, v62);
    swift_bridgeObjectRetain();
    char v54 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v61 = v48;
    sub_10016C700(v62, v51, v53, v54);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1010DB4B0()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000A1534(v1);
  sub_1000A1534(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1010DB58C()
{
  sub_1010DB4B0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SBAlertHelper()
{
  return self;
}

uint64_t destroy for SBAlertContext(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 80))
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for SBAlertContext(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  uint64_t v9 = a2 + 8;
  uint64_t v8 = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v10 = a2[9];
    a1[8] = v8;
    a1[9] = v10;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 4) = *v9;
  }
  uint64_t v11 = a2[10];
  if (v11)
  {
    uint64_t v12 = a2[11];
    a1[10] = v11;
    a1[11] = v12;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  }
  return a1;
}

void *assignWithCopy for SBAlertContext(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[8];
  if (a1[8])
  {
    if (v4)
    {
      uint64_t v5 = a2[9];
      a1[8] = v4;
      a1[9] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[9];
    a1[8] = v4;
    a1[9] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
LABEL_8:
  uint64_t v7 = a2[10];
  if (!a1[10])
  {
    if (v7)
    {
      uint64_t v9 = a2[11];
      a1[10] = v7;
      a1[11] = v9;
      swift_retain();
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = a2[11];
  a1[10] = v7;
  a1[11] = v8;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for SBAlertContext(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[8];
  if (a1[8])
  {
    if (v8)
    {
      uint64_t v9 = a2[9];
      a1[8] = v8;
      a1[9] = v9;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v8)
  {
    uint64_t v10 = a2[9];
    a1[8] = v8;
    a1[9] = v10;
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
LABEL_8:
  uint64_t v11 = a2[10];
  if (!a1[10])
  {
    if (v11)
    {
      uint64_t v13 = a2[11];
      a1[10] = v11;
      a1[11] = v13;
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
    return a1;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v12 = a2[11];
  a1[10] = v11;
  a1[11] = v12;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SBAlertContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SBAlertContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SBAlertContext()
{
  return &type metadata for SBAlertContext;
}

uint64_t sub_1010DBA40(void *a1)
{
  return sub_1010DA9E8(a1, v1);
}

void sub_1010DBA48()
{
  sub_1010DAE6C(v0);
}

uint64_t sub_1010DBA50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1010DBA60()
{
  return swift_release();
}

void sub_1010DBA68()
{
  sub_1010DAE04(v0);
}

void *sub_1010DBA78(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000B8654(0, v1, 0);
  uint64_t result = (void *)sub_100803228(a1);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 64;
  int64_t v21 = v1;
  int v22 = v4;
  uint64_t v23 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v11 = *(void *)(a1 + 56) + 24 * v5;
    uint64_t v12 = *(void *)v11;
    long long v24 = *(_OWORD *)(v11 + 8);
    unint64_t v14 = _swiftEmptyArrayStorage[2];
    unint64_t v13 = _swiftEmptyArrayStorage[3];
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v14 >= v13 >> 1) {
      uint64_t result = (void *)sub_1000B8654(v13 > 1, v14 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v14 + 1;
    uint64_t v15 = &_swiftEmptyArrayStorage[3 * v14];
    v15[4] = v12;
    *(_OWORD *)(v15 + 5) = v24;
    int64_t v8 = 1 << *(unsigned char *)(a1 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v16 = *(void *)(v23 + 8 * v10);
    if ((v16 & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v22;
    if (*(_DWORD *)(a1 + 36) != v22) {
      goto LABEL_27;
    }
    unint64_t v17 = v16 & (-2 << (v5 & 0x3F));
    if (v17)
    {
      int64_t v8 = __clz(__rbit64(v17)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v21;
    }
    else
    {
      unint64_t v18 = v10 + 1;
      unint64_t v19 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v21;
      if (v10 + 1 < v19)
      {
        unint64_t v20 = *(void *)(v23 + 8 * v18);
        if (v20)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v20)) + (v18 << 6);
        }
        else
        {
          while (v19 - 2 != v10)
          {
            unint64_t v20 = *(void *)(a1 + 80 + 8 * v10++);
            if (v20)
            {
              unint64_t v18 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v6;
    uint64_t v5 = v8;
    if (v6 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void (*sub_1010DBCA4(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  uint64_t v6 = malloc(*(void *)(v4 + 64));
  v2[6] = v6;
  (*(void (**)(void))(v5 + 16))();
  v2[7] = sub_1010E0CEC(v2, (uint64_t)v6);
  return sub_1010DBD94;
}

void sub_1010DBD94(void *a1)
{
  int64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 48);
  uint64_t v3 = *(void *)(*a1 + 32);
  uint64_t v4 = *(void *)(*a1 + 40);
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);

  free(v1);
}

void (*sub_1010DBE0C(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_1010E0EA4(v6, a2, a3);
  return sub_1010DBE8C;
}

void sub_1010DBE8C(void *a1)
{
  int64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();

  free(v1);
}

Class sub_1010DBEE0(uint64_t a1)
{
  int64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_10001D4B0(0, (unint64_t *)&qword_10165F5D0);
    v4.super.CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.CFDictionaryRef isa = 0;
  }

  return v4.super.isa;
}

uint64_t sub_1010DBF7C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_startTime;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10001E324(v0 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_endTime);
  sub_10001E324(v0 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_lastReceived);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1010DC04C()
{
  return type metadata accessor for SecureLocationsLiveSessionStats();
}

uint64_t type metadata accessor for SecureLocationsLiveSessionStats()
{
  uint64_t result = qword_10166AA60;
  if (!qword_10166AA60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1010DC0A0()
{
  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    sub_1000C7D80();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1010DC18C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  int64_t v8 = (char *)&v27 - v7;
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v13);
  unint64_t v18 = (char *)&v27 - v17;
  uint64_t v19 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_countLocations);
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    uint64_t v28 = v5;
    *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_countLocations) = v21;
    static Date.trustedNow.getter((uint64_t)&v27 - v17);
    uint64_t v22 = v1 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_lastReceived;
    swift_beginAccess();
    sub_10001E2BC(v22, (uint64_t)v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      sub_10001E324((uint64_t)v10);
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v8, v18, v11);
    }
    else
    {
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v23(v15, v10, v11);
      Date.timeIntervalSince(_:)();
      double v25 = v24;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      *(double *)(v1 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_sumDelta) = v25
                                                                                                 + *(double *)(v1 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_sumDelta);
      v23(v8, v18, v11);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    uint64_t v26 = (uint64_t)v28;
    sub_1000C69AC((uint64_t)v8, (uint64_t)v28);
    swift_beginAccess();
    sub_100C11FB8(v26, v22);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1010DC45C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10166AD90);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1010E2F10();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    char v12 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + 32);
    v10[15] = 2;
    sub_10000588C(&qword_101654A30);
    sub_1004CB3CC((unint64_t *)&qword_10163CCD8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[14] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1010DC660()
{
  unint64_t result = 0x6E6F697461727564;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 2:
      unint64_t result = 0x73726F727265;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1010DC6FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1010E20F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1010DC724(uint64_t a1)
{
  unint64_t v2 = sub_1010E2F10();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010DC760(uint64_t a1)
{
  unint64_t v2 = sub_1010E2F10();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1010DC79C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1010E22CC(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(unsigned char *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1010DC7EC(void *a1)
{
  return sub_1010DC45C(a1);
}

uint64_t sub_1010DC804(unsigned __int8 *a1, char *a2)
{
  return sub_100719FEC(*a1, *a2);
}

Swift::Int sub_1010DC810()
{
  return Hasher._finalize()();
}

uint64_t sub_1010DC8F0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1010DC9B8()
{
  return Hasher._finalize()();
}

unint64_t sub_1010DCA94@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1010E20AC(*a1);
  *a2 = result;
  return result;
}

void sub_1010DCAC4(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEA00000000006E6FLL;
  uint64_t v3 = 0x697461636F4C6F6ELL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x64696C6176;
      goto LABEL_3;
    case 2:
      *a1 = 0x64657269707865;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 0x755364656C696166;
      a1[1] = 0xE900000000000062;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1010DCB64()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1010DCBC4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1010DCC14(char *a1, char *a2)
{
  return sub_10071B150(*a1, *a2);
}

Swift::Int sub_1010DCC20()
{
  return Hasher._finalize()();
}

uint64_t sub_1010DCC80()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1010DCCC4()
{
  return Hasher._finalize()();
}

uint64_t sub_1010DCD20@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A4F98, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1010DCD80(uint64_t *a1@<X8>)
{
  uint64_t v2 = 27496;
  if (*v1) {
    uint64_t v2 = 29548;
  }
  *a1 = v2;
  a1[1] = 0xE200000000000000;
}

uint64_t sub_1010DCDA0()
{
  if (*v0) {
    return 29548;
  }
  else {
    return 27496;
  }
}

uint64_t sub_1010DCDBC@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A4F98, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1010DCE20(uint64_t a1)
{
  unint64_t v2 = sub_1010E2730();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010DCE5C(uint64_t a1)
{
  unint64_t v2 = sub_1010E2730();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010DCE98(void *a1, __int16 a2)
{
  char v3 = HIBYTE(a2);
  uint64_t v5 = sub_10000588C(&qword_10166AD40);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1010E2730();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    v10[14] = v3;
    v10[13] = 1;
    sub_1010E27D8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1010DD010@<X0>(void *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_1010E2574(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1010DD03C(void *a1)
{
  return sub_1010DCE98(a1, *v1);
}

void *sub_1010DD058()
{
  type metadata accessor for SecureLocationsAnalytics();
  swift_allocObject();
  uint64_t result = sub_1010DD094();
  qword_10170F218 = (uint64_t)result;
  return result;
}

void *sub_1010DD094()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  static DispatchQoS.unspecified.getter();
  v8[1] = _swiftEmptyArrayStorage;
  sub_1001BF0B8((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v0[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v0[3] = _swiftEmptyDictionarySingleton;
  v0[4] = 0;
  v0[5] = _swiftEmptyDictionarySingleton;
  v0[6] = 0x636972656E6567;
  v0[7] = 0xE700000000000000;
  return v0;
}

uint64_t (*sub_1010DD30C())()
{
  return j__swift_endAccess_0;
}

unint64_t sub_1010DD360(char a1)
{
  unint64_t result = 0x746553746F4E6B63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0x61466E654779656BLL;
      break;
    case 4:
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x4E646E655379656BLL;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 8:
      unint64_t result = 0x6F4E6E654779656BLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000018;
      break;
    case 10:
      unint64_t result = 0x466576615379656BLL;
      break;
    case 11:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1010DD508(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = _swiftEmptyDictionarySingleton;
  char v23 = a1;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = _swiftEmptyDictionarySingleton;
  *(void *)(v6 + 16) = 0x8000000000000000;
  sub_10016EF70((uint64_t)v7, 1701605234, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
  uint64_t v9 = aBlock[0];
  *(void *)(v6 + 16) = aBlock[0];
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v9;
  *(void *)(v6 + 16) = 0x8000000000000000;
  sub_10016EF70((uint64_t)v10, 0x726F727265, 0xE500000000000000, v11);
  *(void *)(v6 + 16) = aBlock[0];
  swift_bridgeObjectRelease();
  NSString v12 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_1010E29EC;
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1010DBEE0;
  aBlock[3] = &unk_1016081A0;
  char v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v13);

  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170EC30);
  swift_retain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_beginAccess();
    sub_10001D4B0(0, &qword_1016552A0);
    swift_bridgeObjectRetain();
    uint64_t v18 = Dictionary.description.getter();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    sub_1008FA0F0(v18, v20, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "analytics: logged live session failure %s to CA", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (v23) {
      goto LABEL_5;
    }
  }
  else
  {

    swift_release_n();
    if (v23)
    {
LABEL_5:
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0) {
        return swift_release();
      }
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
LABEL_9:
  sub_1010DDDB8(a2, a3);
  return swift_release();
}

uint64_t sub_1010DD998()
{
  return sub_1010DDA28((uint64_t)sub_1010E29AC, (uint64_t)&unk_101608150);
}

uint64_t sub_1010DD9B8(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    swift_retain();
    sub_1010DC18C();
    return swift_release();
  }
  return result;
}

uint64_t sub_1010DDA08()
{
  return sub_1010DDA28((uint64_t)sub_1010E29A4, (uint64_t)&unk_101608128);
}

uint64_t sub_1010DDA28(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  NSString v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(void *)(v2 + 16);
  aBlock[4] = a1;
  uint64_t v17 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = a2;
  char v13 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_1001BF0B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_1010DDCA8(uint64_t a1)
{
  type metadata accessor for SecureLocationsLiveSessionStats();
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = v2 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_endTime;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(v2 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_lastReceived, 1, 1, v4);
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_sumDelta) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_errors) = _swiftEmptyArrayStorage;
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_countLocations) = 0;
  static Date.trustedNow.getter(v2 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_startTime);
  *(void *)(a1 + 32) = v2;

  return swift_release();
}

uint64_t sub_1010DDDB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(void *)(v3 + 16);
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = sub_1010E2998;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101608100;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_1001BF0B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_1010DE078(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (v3)
  {
    uint64_t v6 = (void **)(v3 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_errors);
    swift_beginAccess();
    uint64_t v7 = *v6;
    swift_retain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v6 = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v7 = sub_100A6E25C(0, v7[2] + 1, 1, v7);
      *uint64_t v6 = v7;
    }
    unint64_t v10 = v7[2];
    unint64_t v9 = v7[3];
    if (v10 >= v9 >> 1)
    {
      uint64_t v7 = sub_100A6E25C((void *)(v9 > 1), v10 + 1, 1, v7);
      *uint64_t v6 = v7;
    }
    v7[2] = v10 + 1;
    uint64_t v11 = &v7[2 * v10];
    v11[4] = a2;
    v11[5] = a3;
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_1010DE17C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v59 = &v55[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  unint64_t v9 = &v55[-v8];
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  char v13 = &v55[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __chkstk_darwin(v11);
  os_log_type_t v16 = &v55[-v15];
  uint64_t result = __chkstk_darwin(v14);
  unint64_t v19 = &v55[-v18];
  uint64_t v61 = a1;
  uint64_t v20 = *(void *)(a1 + 32);
  if (v20)
  {
    uint64_t v57 = a2;
    swift_retain();
    static Date.trustedNow.getter((uint64_t)v19);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
    sub_1000C69AC((uint64_t)v19, (uint64_t)v16);
    uint64_t v21 = v20 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_endTime;
    swift_beginAccess();
    sub_100C11FB8((uint64_t)v16, v21);
    swift_endAccess();
    uint64_t v22 = swift_allocObject();
    uint64_t v60 = v22;
    *(void *)(v22 + 16) = _swiftEmptyDictionarySingleton;
    char v23 = (uint64_t *)(v22 + 16);
    sub_10001E2BC(v21, (uint64_t)v13);
    int v56 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4);
    if (v56 == 1)
    {
      sub_10001E324((uint64_t)v13);
      double v24 = 0.0;
      uint64_t v25 = v20;
      uint64_t v26 = _swiftEmptyDictionarySingleton;
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32))(v9, v13, v4);
      uint64_t v27 = v59;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v59, v20 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_startTime, v4);
      Date.timeIntervalSince(_:)();
      double v24 = v28;
      uint64_t v29 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
      v29(v27, v4);
      v29(v9, v4);
      uint64_t v25 = v20;
      id v30 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v24];
      uint64_t v31 = *v23;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v31;
      *char v23 = 0x8000000000000000;
      sub_10016BC98((uint64_t)v30, 0x6E6F697461727564, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
      uint64_t v26 = (void *)aBlock[0];
      *char v23 = aBlock[0];
      swift_bridgeObjectRelease();
    }
    uint64_t v33 = OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_countLocations;
    id v34 = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)(v25 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_countLocations)];
    char v35 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = (uint64_t)v26;
    *char v23 = 0x8000000000000000;
    sub_10016BC98((uint64_t)v34, 0x746E756F43636F6CLL, 0xE800000000000000, v35);
    uint64_t v36 = aBlock[0];
    *char v23 = aBlock[0];
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void *)(v25 + v33);
    uint64_t v58 = v25;
    if (v37 < 1)
    {
      double v38 = 0.0;
    }
    else
    {
      double v38 = *(double *)(v25 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_sumDelta) / (double)v37;
      id v39 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v38];
      char v40 = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v36;
      *char v23 = 0x8000000000000000;
      sub_10016BC98((uint64_t)v39, 0xD000000000000017, 0x8000000101421E40, v40);
      *char v23 = aBlock[0];
      swift_bridgeObjectRelease();
    }
    NSString v41 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_1010E2A08;
    void aBlock[5] = v60;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = (uint64_t)sub_1010DBEE0;
    aBlock[3] = (uint64_t)&unk_101608268;
    uint64_t v42 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v42);

    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_100010324(v43, (uint64_t)qword_10170EC30);
    swift_retain_n();
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = v37;
      char v47 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)char v47 = 136315138;
      uint64_t v59 = v47 + 4;
      swift_beginAccess();
      sub_10001D4B0(0, (unint64_t *)&qword_10165F5D0);
      swift_bridgeObjectRetain();
      uint64_t v48 = Dictionary.description.getter();
      unint64_t v50 = v49;
      swift_bridgeObjectRelease();
      aBlock[9] = sub_1008FA0F0(v48, v50, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v37 = v46;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "analytics: logged live session stats %s to CA", v47, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v51 = v57;
    BOOL v52 = v56 == 1;
    uint64_t v53 = (uint64_t *)(v58 + OBJC_IVAR____TtC12searchpartyd31SecureLocationsLiveSessionStats_errors);
    swift_beginAccess();
    uint64_t v54 = *v53;
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)(v61 + 32) = 0;
    swift_release();
    uint64_t result = swift_release();
    *(double *)uint64_t v51 = v24;
    *(void *)(v51 + 8) = v52;
    *(void *)(v51 + 16) = v37;
    *(void *)(v51 + 24) = 0;
    *(void *)(v51 + 32) = v54;
    *(double *)(v51 + 40) = v38;
    *(unsigned char *)(v51 + 48) = v37 < 1;
  }
  else
  {
    *(unsigned char *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

uint64_t sub_1010DE928()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_1006555A4(v0);
  uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1010DE984(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(void *)(v4 + 16);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v4;
  *(void *)(v16 + 24) = a1;
  *(void *)(v16 + 32) = a2;
  *(unsigned char *)(v16 + 40) = a3;
  aBlock[4] = sub_100768E30;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1016080B0;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v19[1] = _swiftEmptyArrayStorage;
  sub_1001BF0B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t sub_1010DEC4C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __int16 v8 = sub_1010DF0AC(a2, a3) & 0xFF00;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0x8000000000000000;
  sub_100172FD4(v8 & 0xFFFE | a4 & 1, a2, a3, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 24) = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_1010DED18(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(void *)(v4 + 16);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v4;
  *(void *)(v16 + 24) = a1;
  *(void *)(v16 + 32) = a2;
  *(unsigned char *)(v16 + 40) = a3;
  aBlock[4] = sub_1001FEFAC;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101608060;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v19[1] = _swiftEmptyArrayStorage;
  sub_1001BF0B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t sub_1010DEFE0(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  unsigned __int8 v8 = sub_1010DF0AC(a2, a3);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0x8000000000000000;
  sub_100172FD4(v8 | (unsigned __int16)(a4 << 8), a2, a3, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 24) = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_1010DF0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unsigned __int8 v8 = (uint64_t *)((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v2 + 16);
  *unsigned __int8 v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    uint64_t v12 = (uint64_t *)(v2 + 24);
    swift_beginAccess();
    uint64_t v13 = *(void *)(v2 + 24);
    if (*(void *)(v13 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_100723FF4(a1, a2);
      if (v15)
      {
        uint64_t v16 = (unsigned __int8 *)(*(void *)(v13 + 56) + 2 * v14);
        int v17 = *v16;
        int v18 = v16[1];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v17 | (v18 << 8);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v12;
    *uint64_t v12 = 0x8000000000000000;
    sub_100172FD4(1026, a1, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v12 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    int v18 = 4;
    int v17 = 2;
    return v17 | (v18 << 8);
  }
  __break(1u);
  return result;
}

uint64_t sub_1010DF2BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v5 = result;
    uint64_t v43 = a4;
    uint64_t v6 = (uint64_t *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_beginAccess();
    uint64_t v42 = v5;
    uint64_t v7 = (uint64_t *)(v5 + 40);
    uint64_t v46 = v4;
    while (1)
    {
      uint64_t v9 = *(v7 - 1);
      uint64_t v8 = *v7;
      uint64_t v10 = *v6;
      uint64_t v11 = *(void *)(*v6 + 16);
      swift_bridgeObjectRetain_n();
      if (v11)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = sub_100723FF4(v9, v8);
        if (v13)
        {
          uint64_t v14 = (char *)(*(void *)(v10 + 56) + 2 * v12);
          char v44 = *v14;
          char v45 = v14[1];
          swift_bridgeObjectRelease();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v17 = sub_100723FF4(v9, v8);
          uint64_t v18 = _swiftEmptyDictionarySingleton[2];
          BOOL v19 = (v16 & 1) == 0;
          uint64_t v20 = v18 + v19;
          if (__OFADD__(v18, v19))
          {
            __break(1u);
LABEL_36:
            __break(1u);
LABEL_37:
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          char v21 = v16;
          if (_swiftEmptyDictionarySingleton[3] < v20)
          {
            sub_100E7A314(v20, isUniquelyReferenced_nonNull_native);
            uint64_t v22 = sub_100723FF4(v9, v8);
            if ((v21 & 1) != (v23 & 1)) {
              goto LABEL_37;
            }
            unint64_t v17 = v22;
            if ((v21 & 1) == 0) {
              goto LABEL_21;
            }
LABEL_19:
            uint64_t v27 = (unsigned char *)(_swiftEmptyDictionarySingleton[7] + 2 * v17);
            *uint64_t v27 = v44;
            v27[1] = v45;
LABEL_23:
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            goto LABEL_4;
          }
          if (isUniquelyReferenced_nonNull_native)
          {
            if (v16) {
              goto LABEL_19;
            }
          }
          else
          {
            sub_100E88FF8();
            if (v21) {
              goto LABEL_19;
            }
          }
LABEL_21:
          _swiftEmptyDictionarySingleton[(v17 >> 6) + 8] |= 1 << v17;
          double v28 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v17);
          *double v28 = v9;
          v28[1] = v8;
          uint64_t v29 = (unsigned char *)(_swiftEmptyDictionarySingleton[7] + 2 * v17);
          *uint64_t v29 = v44;
          v29[1] = v45;
          uint64_t v30 = _swiftEmptyDictionarySingleton[2];
          BOOL v31 = __OFADD__(v30, 1);
          uint64_t v32 = v30 + 1;
          if (v31) {
            goto LABEL_36;
          }
          _swiftEmptyDictionarySingleton[2] = v32;
          swift_bridgeObjectRetain();
          goto LABEL_23;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      unint64_t v24 = sub_100723FF4(v9, v8);
      char v26 = v25;
      swift_bridgeObjectRelease();
      if (v26)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100E88FF8();
        }
        swift_bridgeObjectRelease();
        sub_10016AC44(v24, (uint64_t)_swiftEmptyDictionarySingleton);
        goto LABEL_23;
      }
      swift_bridgeObjectRelease_n();
LABEL_4:
      v7 += 2;
      if (!--v4)
      {
        uint64_t result = swift_bridgeObjectRelease();
        if (a3)
        {
          swift_bridgeObjectRetain();
          uint64_t v33 = (uint64_t *)(v42 + 40);
          do
          {
            uint64_t v34 = *(v33 - 1);
            uint64_t v35 = *v33;
            swift_beginAccess();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            unint64_t v36 = sub_100723FF4(v34, v35);
            char v38 = v37;
            swift_bridgeObjectRelease();
            if (v38)
            {
              int v39 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v40 = *v6;
              uint64_t v47 = *v6;
              *uint64_t v6 = 0x8000000000000000;
              if (!v39)
              {
                sub_100E88FF8();
                uint64_t v40 = v47;
              }
              swift_bridgeObjectRelease();
              sub_10016AC44(v36, v40);
              *uint64_t v6 = v40;
              swift_bridgeObjectRelease();
            }
            v33 += 2;
            swift_endAccess();
            swift_bridgeObjectRelease();
            --v46;
          }
          while (v46);
          uint64_t result = swift_bridgeObjectRelease();
        }
        a4 = v43;
        break;
      }
    }
  }
  *a4 = _swiftEmptyDictionarySingleton;
  return result;
}

void sub_1010DF678(void *a1, Swift::Int a2, unint64_t a3)
{
  uint64_t v7 = a1[6];
  uint64_t v6 = a1[7];
  uint64_t v8 = a1 + 5;
  swift_beginAccess();
  if (*(void *)(a1[5] + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100723FF4(v7, v6);
    if (v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18[0] = *v8;
  *uint64_t v8 = 0x8000000000000000;
  sub_100173108(v7, v6, (uint64_t)&_swiftEmptySetSingleton, v7, v6, isUniquelyReferenced_nonNull_native);
  *uint64_t v8 = v18[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_6:
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1010DD30C();
  uint64_t v12 = sub_1010DBE0C(v18, v7, v6);
  if (*(void *)(v13 + 8))
  {
    swift_bridgeObjectRetain();
    sub_100DC979C(&v20, a2, a3);
    ((void (*)(void *, void))v12)(v18, 0);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t *, void))v11)(v19, 0);
    swift_bridgeObjectRelease();
  }
  else
  {
    ((void (*)(void *, void))v12)(v18, 0);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t *, void))v11)(v19, 0);
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain_n();
  char v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    v19[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    v18[0] = sub_1008FA0F0(a2, a3, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "analytics - logGenericPublisherError %s ", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_1010DF9F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(NSObject **)(v5 + 16);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v5;
  v11[3] = a1;
  v11[4] = a2;
  v11[5] = a3;
  v11[6] = a4;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1010E2874;
  *(void *)(v12 + 24) = v11;
  v15[4] = sub_100132424;
  v15[5] = v12;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  void v15[2] = sub_1000A70B0;
  uint64_t v15[3] = &unk_101608010;
  uint64_t v13 = _Block_copy(v15);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v10, v13);
  _Block_release(v13);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v10) {
    __break(1u);
  }
  return result;
}

void sub_1010DFB74(uint64_t a1, uint64_t a2, unint64_t a3, Swift::Int a4, unint64_t a5)
{
  uint64_t v10 = (void *)(a1 + 40);
  swift_beginAccess();
  if (*(void *)(*(void *)(a1 + 40) + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100723FF4(a2, a3);
    if (v11)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v23[0] = *v10;
  void *v10 = 0x8000000000000000;
  sub_100173108(a2, a3, (uint64_t)&_swiftEmptySetSingleton, a2, a3, isUniquelyReferenced_nonNull_native);
  void *v10 = v23[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_6:
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1010DD30C();
  uint64_t v14 = sub_1010DBE0C(v23, a2, a3);
  if (*(void *)(v15 + 8))
  {
    swift_bridgeObjectRetain();
    sub_100DC979C(&v25, a4, a5);
    ((void (*)(void *, void))v14)(v23, 0);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t *, void))v13)(v24, 0);
    swift_bridgeObjectRelease();
  }
  else
  {
    ((void (*)(void *, void))v14)(v23, 0);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t *, void))v13)(v24, 0);
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315650;
    swift_bridgeObjectRetain();
    v23[0] = sub_1008FA0F0(a2, a3, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain();
    v23[0] = sub_1008FA0F0(a4, a5, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v20 = Dictionary.description.getter();
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    v23[0] = sub_1008FA0F0(v20, v22, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "analytics: logPublisherError %s %s %s", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_1010DFFE8@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = (void *)(a1 + 40);
  swift_beginAccess();
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_1010DBA78(v6);
  uint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    *uint64_t v5 = _swiftEmptyDictionarySingleton;
    uint64_t result = swift_bridgeObjectRelease();
  }
  *a3 = v7;
  return result;
}

uint64_t sub_1010E008C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SecureLocationsAnalytics()
{
  return self;
}

uint64_t getEnumTagSinglePayload for SecureLocationsShallowIdStats(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 65282 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65282 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65282;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  if (v6 >= 2) {
    int v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v7 = -2;
  }
  if (v7 < 0) {
    int v7 = -1;
  }
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsShallowIdStats(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 254;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010E0284);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsShallowIdStats()
{
  return &type metadata for SecureLocationsShallowIdStats;
}

uint64_t sub_1010E02BC(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a3;
  *(unsigned char *)(v3 + 56) = a1;
  return _swift_task_switch(sub_1010E02E0, 0, 0);
}

uint64_t sub_1010E02E0()
{
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v1 = (char *)swift_allocObject();
  *(void *)(v0 + 32) = v1;
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  int v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  unsigned int v4 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v4(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD000000000000032;
  *((void *)v1 + 16) = 0x8000000101421C00;
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1010E043C, v1, 0);
}

uint64_t sub_1010E043C()
{
  sub_1011B8664(*(void *)(v0 + 32), *(unsigned char *)(v0 + 56), *(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100660FB8, 0, 0);
}

void *sub_1010E04DC(char a1, uint64_t a2, uint64_t a3)
{
  v20[0] = 0;
  v20[1] = 0xE000000000000000;
  BOOL v4 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v5 = 1702195828;
  }
  else {
    uint64_t v5 = 0x65736C6166;
  }
  if (v4) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v20[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  sub_10016D430((uint64_t)v8, 0, 0x737574617473, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
  unint64_t v21 = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  if (a3)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    char v11 = swift_isUniquelyReferenced_nonNull_native();
    v20[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    sub_10016D430((uint64_t)v10, 0, 0x726F727265, 0xE500000000000000, v11);
    unint64_t v21 = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170EC30);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    v20[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v16 = Dictionary.description.getter();
    unint64_t v18 = v17;
    swift_bridgeObjectRelease();
    sub_1008FA0F0(v16, v18, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "analytics: logged liteLocationPublish stats %s to CA", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  return v21;
}

uint64_t sub_1010E07BC(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 48) = a2;
  *(void *)(v2 + 16) = a1;
  return _swift_task_switch(sub_1010E07E0, 0, 0);
}

uint64_t sub_1010E07E0()
{
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v1 = (char *)swift_allocObject();
  *(void *)(v0 + 24) = v1;
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  BOOL v4 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v4(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD000000000000037;
  *((void *)v1 + 16) = 0x8000000101421B40;
  return _swift_task_switch(sub_1010E092C, v1, 0);
}

uint64_t sub_1010E092C()
{
  sub_1011814C4(*(void *)(v0 + 24), *(void *)(v0 + 16), *(unsigned char *)(v0 + 48) & 1);
  return _swift_task_switch(sub_10066CE78, 0, 0);
}

void *sub_1010E09C4(uint64_t a1, char a2)
{
  sub_10001D4B0(0, &qword_1016552A0);
  if (a2)
  {
    uint64_t v9 = NSString.init(stringLiteral:)();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    uint64_t v7 = v9;
    uint64_t v8 = 0x6574617473;
  }
  else
  {
    uint64_t v3 = NSString.init(stringLiteral:)();
    char v4 = swift_isUniquelyReferenced_nonNull_native();
    sub_10016D430(v3, 0, 0x6574617473, 0xE500000000000000, v4);
    swift_bridgeObjectRelease();
    dispatch thunk of CustomStringConvertible.description.getter();
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    uint64_t v7 = (uint64_t)v5;
    uint64_t v8 = 0x746E756F63;
  }
  sub_10016D430(v7, 0, v8, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
  uint64_t v19 = (void *)v18[0];
  swift_bridgeObjectRelease();
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170EC30);
  char v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v14 = Dictionary.description.getter();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    sub_1008FA0F0(v14, v16, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "analytics: logged liteLocationdStateAvailability %s to CA", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  return v19;
}

void (*sub_1010E0CEC(void *a1, uint64_t a2))(uint64_t a1)
{
  char v4 = malloc(0x68uLL);
  *a1 = v4;
  uint64_t v5 = type metadata accessor for UUID();
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v4[9] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v4[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v5);
  v4[11] = sub_1010E12F4(v4);
  v4[12] = sub_1010E0FC4(v4 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_1010E0E0C;
}

void sub_1010E0E0C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 88);
  uint64_t v4 = *(void *)(*(void *)a1 + 72);
  uint64_t v3 = *(void **)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 96))();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);

  free(v1);
}

void (*sub_1010E0EA4(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_1010E1330(v6);
  v6[10] = sub_1010E1144(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1010E0F50;
}

void sub_1010E0F50(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  v2(v1, 0);

  free(v1);
}

void (*sub_1010E0FC4(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  void v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = sub_1007240CC(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *uint64_t v8 = v17;
        return sub_1010E10F4;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_100E80758();
      goto LABEL_7;
    }
    sub_100E69D58(v14, a3 & 1);
    unint64_t v18 = sub_1007240CC(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  type metadata accessor for UUID();
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1010E10F4(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_1010E1360(*a1, *((unsigned char *)*a1 + 32), (void *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease();

  free(v1);
}

void (*sub_1010E1144(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t v5 = v4;
  char v10 = (char *)malloc(0x40uLL);
  *a1 = v10;
  *((void *)v10 + 4) = a3;
  *((void *)v10 + 5) = v4;
  *((void *)v10 + 3) = a2;
  uint64_t v11 = *v4;
  uint64_t v13 = sub_100723FF4(a2, a3);
  v10[56] = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      *((void *)v10 + 6) = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*v5 + 56) + 24 * v13;
        uint64_t v20 = *(void *)v19;
        long long v21 = *(_OWORD *)(v19 + 8);
LABEL_12:
        *(void *)char v10 = v20;
        *(_OWORD *)(v10 + 8) = v21;
        return sub_1010E12A0;
      }
LABEL_11:
      uint64_t v20 = 0;
      long long v21 = 0uLL;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_100E891A8();
      goto LABEL_7;
    }
    sub_100E7A634(v16, a4 & 1);
    uint64_t v22 = sub_100723FF4(a2, a3);
    if ((v17 & 1) == (v23 & 1))
    {
      uint64_t v13 = v22;
      *((void *)v10 + 6) = v22;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1010E12A0(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_1010E1498(*a1, *((unsigned char *)*a1 + 56), (uint64_t *)(*a1)[5], (*a1)[6], (*a1)[3], (*a1)[4]);
  sub_1010E28AC(*v1, v1[1]);

  free(v1);
}

uint64_t (*sub_1010E12F4(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_1010E1324;
}

uint64_t sub_1010E1324(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t (*sub_1010E1330(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_1010E3170;
}

uint64_t sub_1010E1360(uint64_t *a1, char a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  if (v14)
  {
    uint64_t v15 = *a3;
    if (a2)
    {
      *(void *)(*(void *)(v15 + 56) + 8 * a4) = v14;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 16))(v13, a5);
      sub_100E7C79C(a4, v13, v14, v15);
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_10016778C(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1010E1498(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v10 = a1[2];
  if (v8)
  {
    uint64_t v11 = (void *)*a3;
    if (a2)
    {
      uint64_t v12 = (uint64_t *)(v11[7] + 24 * a4);
      *uint64_t v12 = v9;
      v12[1] = v8;
      v12[2] = v10;
    }
    else
    {
      sub_100E7DBBC(a4, a5, a6, v9, v8, v10, v11);
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_10016AE1C(a4, *a3);
  }

  return sub_1010E28F0(v9, v8);
}

void sub_1010E156C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v6 = (void *)(v5 + 16);
  sub_1010DD360(a1);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v5 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v8;
  *(void *)(v5 + 16) = 0x8000000000000000;
  sub_10016EF70((uint64_t)v7, 0x6575737369, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
  uint64_t v10 = aBlock[0];
  *(void *)(v5 + 16) = aBlock[0];
  swift_bridgeObjectRelease();
  if (a3)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    char v12 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v10;
    *uint64_t v6 = 0x8000000000000000;
    sub_10016EF70((uint64_t)v11, 0x726F727265, 0xE500000000000000, v12);
    *uint64_t v6 = aBlock[0];
    swift_bridgeObjectRelease();
  }
  NSString v13 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_1010E29EC;
  void aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1010DBEE0;
  aBlock[3] = &unk_1016081C8;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v14);

  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170EC30);
  swift_retain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_beginAccess();
    sub_10001D4B0(0, &qword_1016552A0);
    swift_bridgeObjectRetain();
    uint64_t v19 = Dictionary.description.getter();
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    sub_1008FA0F0(v19, v21, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "analytics: logged setup issue %s to CA", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_release_n();
  }
}

void sub_1010E191C()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = _swiftEmptyDictionarySingleton;
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = _swiftEmptyDictionarySingleton;
  *(void *)(v0 + 16) = 0x8000000000000000;
  sub_10016EF70((uint64_t)v1, 0x737574617473, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
  *(void *)(v0 + 16) = aBlock[0];
  swift_bridgeObjectRelease();
  NSString v3 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_1010E29EC;
  void aBlock[5] = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1010DBEE0;
  aBlock[3] = &unk_101608218;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v4);

  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170EC30);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_beginAccess();
    sub_10001D4B0(0, &qword_1016552A0);
    swift_bridgeObjectRetain();
    uint64_t v9 = Dictionary.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    sub_1008FA0F0(v9, v11, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "analytics: logged cache access %s to CA", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_release_n();
  }
}

void sub_1010E1D10()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = _swiftEmptyDictionarySingleton;
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = _swiftEmptyDictionarySingleton;
  *(void *)(v0 + 16) = 0x8000000000000000;
  sub_10016EF70((uint64_t)v1, 0x6E6F73616572, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
  *(void *)(v0 + 16) = aBlock[0];
  swift_bridgeObjectRelease();
  NSString v3 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_1010E29EC;
  void aBlock[5] = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1010DBEE0;
  aBlock[3] = &unk_1016081F0;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v4);

  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170EC30);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_beginAccess();
    sub_10001D4B0(0, &qword_1016552A0);
    swift_bridgeObjectRetain();
    uint64_t v9 = Dictionary.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    sub_1008FA0F0(v9, v11, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "analytics: logged key distribution %s to CA", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_release_n();
  }
}

unint64_t sub_1010E20AC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A5550, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_1010E20F8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEE0073746E756F43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73726F727265 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000101421E40)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1010E22CC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10166AD80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010E2F10();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v29 = 0;
    uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v11 = v10;
    char v28 = 1;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v25 = v13;
    uint64_t v23 = v12;
    sub_10000588C(&qword_101654A30);
    char v27 = 2;
    sub_1004CB3CC((unint64_t *)&qword_1016475B0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v22 = a2;
    uint64_t v14 = v24;
    char v26 = 3;
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v16 = v8;
    char v18 = v17;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    unint64_t v20 = v22;
    *uint64_t v22 = v9;
    *((unsigned char *)v20 + 8) = v11 & 1;
    void v20[2] = v23;
    *((unsigned char *)v20 + 24) = v25 & 1;
    v20[4] = v14;
    v20[5] = v15;
    *((unsigned char *)v20 + 48) = v18 & 1;
  }
  return result;
}

uint64_t sub_1010E2574(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10166AD28);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10001CD44(a1, v7);
  sub_1010E2730();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    v11[15] = 0;
    unsigned __int8 v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v11[13] = 1;
    sub_1010E2784();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    int v10 = v11[14];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    return v8 | (v10 << 8);
  }
  return v7;
}

unint64_t sub_1010E2730()
{
  unint64_t result = qword_10166AD30;
  if (!qword_10166AD30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166AD30);
  }
  return result;
}

unint64_t sub_1010E2784()
{
  unint64_t result = qword_10166AD38;
  if (!qword_10166AD38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166AD38);
  }
  return result;
}

unint64_t sub_1010E27D8()
{
  unint64_t result = qword_10166AD48;
  if (!qword_10166AD48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10166AD48);
  }
  return result;
}

uint64_t sub_1010E282C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1010E2874()
{
  sub_1010DFB74(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1010E2884()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1010E2894(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1010E28A4()
{
  return swift_release();
}

uint64_t sub_1010E28AC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1010E28F0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1010E2934()
{
  return sub_1010E294C(41);
}

uint64_t sub_1010E293C()
{
  return sub_1010E294C(41);
}

uint64_t sub_1010E2944()
{
  return sub_1010E294C(40);
}

uint64_t sub_1010E294C(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1010E2998()
{
  return sub_1010DE078(v0[2], v0[3], v0[4]);
}

uint64_t sub_1010E29A4()
{
  return sub_1010DDCA8(v0);
}

uint64_t sub_1010E29AC()
{
  return sub_1010DD9B8(v0);
}

uint64_t sub_1010E29B4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1010E29EC()
{
  return sub_1010DE928();
}

uint64_t sub_1010E2A08()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for SecureLocationsLiveStatsPayload()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SecureLocationsLiveStatsPayload(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SecureLocationsLiveStatsPayload(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 40) = v6;
  return a1;
}

__n128 initializeWithTake for SecureLocationsLiveStatsPayload(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SecureLocationsLiveStatsPayload(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsLiveStatsPayload(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsLiveStatsPayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsLiveStatsPayload()
{
  return &type metadata for SecureLocationsLiveStatsPayload;
}

unsigned char *storeEnumTagSinglePayload for SecureLocationsShallowIdStats.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010E2D10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsShallowIdStats.CodingKeys()
{
  return &type metadata for SecureLocationsShallowIdStats.CodingKeys;
}

ValueMetadata *type metadata accessor for SecureLocationsAnalyticsLocationState()
{
  return &type metadata for SecureLocationsAnalyticsLocationState;
}

unint64_t sub_1010E2D60()
{
  unint64_t result = qword_10166AD58;
  if (!qword_10166AD58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166AD58);
  }
  return result;
}

unint64_t sub_1010E2DB8()
{
  unint64_t result = qword_10166AD60;
  if (!qword_10166AD60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166AD60);
  }
  return result;
}

unint64_t sub_1010E2E10()
{
  unint64_t result = qword_10166AD68;
  if (!qword_10166AD68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166AD68);
  }
  return result;
}

unint64_t sub_1010E2E68()
{
  unint64_t result = qword_10166AD70;
  if (!qword_10166AD70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166AD70);
  }
  return result;
}

unint64_t sub_1010E2EBC()
{
  unint64_t result = qword_10166AD78;
  if (!qword_10166AD78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166AD78);
  }
  return result;
}

unint64_t sub_1010E2F10()
{
  unint64_t result = qword_10166AD88;
  if (!qword_10166AD88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166AD88);
  }
  return result;
}

unsigned char *_s12searchpartyd37SecureLocationsAnalyticsLocationStateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010E3030);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsLiveStatsPayload.CodingKeys()
{
  return &type metadata for SecureLocationsLiveStatsPayload.CodingKeys;
}

unint64_t sub_1010E306C()
{
  unint64_t result = qword_10166AD98;
  if (!qword_10166AD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166AD98);
  }
  return result;
}

unint64_t sub_1010E30C4()
{
  unint64_t result = qword_10166ADA0;
  if (!qword_10166ADA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166ADA0);
  }
  return result;
}

unint64_t sub_1010E311C()
{
  unint64_t result = qword_10166ADA8;
  if (!qword_10166ADA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166ADA8);
  }
  return result;
}

uint64_t sub_1010E31C8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v11, v12);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v8 = sub_1010E3290(v5, v6);
    uint64_t v10 = v9;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    *a2 = v8;
    a2[1] = v10;
  }
  return result;
}

uint64_t sub_1010E3290(uint64_t a1, unint64_t a2)
{
  uint64_t v13 = a1;
  unint64_t v14 = a2;
  uint64_t v4 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_10;
      }
      uint64_t v4 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_1000361E0(a1, a2);
LABEL_7:
      if (__OFSUB__(60, v4))
      {
        __break(1u);
LABEL_10:
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x1010E338CLL);
      }
      uint64_t v11 = sub_10085E9A4(60 - v4);
      unint64_t v12 = v7;
      sub_10072AD40(&v11, 0);
      uint64_t v8 = v11;
      unint64_t v9 = v12;
      Data.append(_:)();
      sub_10001CFB8(a1, a2);
      sub_10001CFB8(v8, v9);
      return v13;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_7;
  }
}

unint64_t sub_1010E339C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1010E33CC();
  unint64_t result = sub_100A38D84();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1010E33CC()
{
  unint64_t result = qword_10166ADB0;
  if (!qword_10166ADB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166ADB0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingEligibilityDataCommandPayload()
{
  return &type metadata for AirPodsPairingEligibilityDataCommandPayload;
}

uint64_t sub_1010E3430()
{
  String.utf8CString.getter();
  int v0 = _set_user_dir_suffix();
  uint64_t result = swift_release();
  if (!v0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1010E34C0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170F250);
  sub_100010324(v0, (uint64_t)qword_10170F250);
  return Logger.init(subsystem:category:)();
}

ValueMetadata *type metadata accessor for DaemonError()
{
  return &type metadata for DaemonError;
}

uint64_t sub_1010E3544@<X0>(uint64_t a1@<X8>)
{
  sub_100A38CB4((uint64_t)v3);
  return sub_100A38824((uint64_t)v3, a1);
}

uint64_t *sub_1010E3580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1010E3640(a1, (void (*)(_OWORD *))sub_100A38BE8, (void (*)(_OWORD *, uint64_t))sub_100A38824, a2);
}

uint64_t sub_1010E35AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1010E36E0(a1, a2, (void (*)(void *))sub_100A38924, (void (*)(void *, uint64_t))sub_100A38824, a3);
}

uint64_t sub_1010E35D8@<X0>(uint64_t a1@<X8>)
{
  sub_100A39EEC((uint64_t)v3);
  return sub_100A399B4((uint64_t)v3, a1);
}

uint64_t *sub_1010E3614@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1010E3640(a1, (void (*)(_OWORD *))sub_100A39E08, (void (*)(_OWORD *, uint64_t))sub_100A399B4, a2);
}

uint64_t *sub_1010E3640@<X0>(uint64_t a1@<X0>, void (*a2)(_OWORD *)@<X3>, void (*a3)(_OWORD *, uint64_t)@<X4>, uint64_t a4@<X8>)
{
  long long v7 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v7;
  long long v8 = *(_OWORD *)(a1 + 48);
  v10[2] = *(_OWORD *)(a1 + 32);
  v10[3] = v8;
  v10[4] = *(_OWORD *)(a1 + 64);
  a2(v10);
  a3(v10, a4);
  return sub_1010E383C((uint64_t *)a1);
}

uint64_t sub_1010E36B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1010E36E0(a1, a2, (void (*)(void *))sub_100A39AD8, (void (*)(void *, uint64_t))sub_100A399B4, a3);
}

uint64_t sub_1010E36E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(void *)@<X4>, void (*a4)(void *, uint64_t)@<X5>, uint64_t a5@<X8>)
{
  v10[0] = a1;
  v10[1] = a2;
  a3(v10);
  a4(v10, a5);
  return sub_1000361E0(a1, a2);
}

uint64_t sub_1010E3750(unsigned __int16 a1)
{
  int v1 = a1;
  int v2 = a1 - 256;
  uint64_t result = 1;
  switch(v2)
  {
    case 0:
      uint64_t result = 2;
      break;
    case 1:
      uint64_t result = 3;
      break;
    case 2:
      uint64_t result = 6;
      break;
    case 3:
      uint64_t result = 7;
      break;
    case 4:
      uint64_t result = 8;
      break;
    case 5:
    case 6:
      goto LABEL_5;
    case 7:
      uint64_t result = 9;
      break;
    case 8:
      uint64_t result = 10;
      break;
    case 9:
      uint64_t result = 4;
      break;
    case 10:
      uint64_t result = 5;
      break;
    case 11:
      uint64_t result = 0;
      break;
    case 12:
      return result;
    default:
      if (v1 == 516) {
        uint64_t result = 11;
      }
      else {
LABEL_5:
      }
        uint64_t result = 12;
      break;
  }
  return result;
}

uint64_t sub_1010E3820()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t *sub_1010E383C(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  unint64_t v9 = a1[9];
  sub_1000361E0(*a1, a1[1]);
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  sub_1000361E0(v6, v7);
  sub_100037A38(v8, v9);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AccessoryPairingCommandError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010E3998);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingCommandError()
{
  return &type metadata for AccessoryPairingCommandError;
}

unint64_t sub_1010E39D4()
{
  unint64_t result = qword_10166ADB8;
  if (!qword_10166ADB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166ADB8);
  }
  return result;
}

uint64_t sub_1010E3A28(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10166B010);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1010E75F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = *v3;
  v10[14] = 0;
  sub_1008F54EC();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for ShareAttemptTracker.AttemptKey(0);
    _OWORD v10[13] = 1;
    type metadata accessor for UUID();
    sub_1010E6DE4(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1010E3BF8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000588C(&qword_10166B020);
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1010E75F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v20 = v8;
    uint64_t v11 = v10;
    uint64_t v12 = v23;
    uint64_t v13 = v24;
    char v27 = 0;
    sub_1008F5498();
    uint64_t v14 = v25;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v19 = v11;
    *uint64_t v11 = v28;
    char v26 = 1;
    sub_1010E6DE4((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v14);
    uint64_t v15 = v21;
    uint64_t v16 = (uint64_t)v19;
    (*(void (**)(unsigned char *, char *, uint64_t))(v22 + 32))(&v19[*(int *)(v20 + 20)], v5, v13);
    sub_1010E764C(v16, v15);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_1010E3F04()
{
  if (*v0) {
    return 0x696669746E656469;
  }
  else {
    return 0x546567617373656DLL;
  }
}

uint64_t sub_1010E3F4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1010E78BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1010E3F74(uint64_t a1)
{
  unint64_t v2 = sub_1010E75F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1010E3FB0(uint64_t a1)
{
  unint64_t v2 = sub_1010E75F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1010E3FEC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1010E3BF8(a1, a2);
}

uint64_t sub_1010E4004(void *a1)
{
  return sub_1010E3A28(a1);
}

Swift::Int sub_1010E401C()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  type metadata accessor for UUID();
  sub_1010E6DE4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1010E40C8()
{
  Hasher._combine(_:)(*v0);
  type metadata accessor for UUID();
  sub_1010E6DE4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_1010E415C()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  type metadata accessor for UUID();
  sub_1010E6DE4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1010E4204(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2) {
    return static UUID.== infix(_:_:)();
  }
  else {
    return 0;
  }
}

uint64_t sub_1010E422C()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10166ADC0);
  sub_100010324(v0, (uint64_t)qword_10166ADC0);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void *sub_1010E4348()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (void *)((char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v0 + 24);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_once();
    goto LABEL_5;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC12searchpartyd19ShareAttemptTracker_attemptsURL, v1);
  id v11 = [self defaultManager];
  URL.path.getter();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v13 = [v11 fileExistsAtPath:v12];

  if (v13)
  {
    uint64_t v14 = Data.init(contentsOf:options:)();
    unint64_t v16 = v15;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_10000588C(&qword_10166AF50);
    sub_1010E6E2C();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    swift_release();
    sub_10001CFB8(v14, v16);
    return (void *)v22[2];
  }
  static os_log_type_t.info.getter();
  if (qword_101637258 != -1) {
    goto LABEL_7;
  }
LABEL_5:
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  uint64_t v18 = URL.path.getter();
  uint64_t v20 = v19;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_10000B4CC();
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v20;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return _swiftEmptyDictionarySingleton;
}

uint64_t sub_1010E4834(char *a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v41 - v8;
  __chkstk_darwin(v7);
  id v11 = (char *)&v41 - v10;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (uint64_t *)((char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v16 = *(void **)(v1 + 24);
  *unint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if (v16)
  {
    sub_10001D4B0(0, (unint64_t *)&qword_101642980);
    uint64_t v46 = *(void (**)(char *))(v4 + 16);
    uint64_t v47 = v1 + OBJC_IVAR____TtC12searchpartyd19ShareAttemptTracker_attemptsURL;
    v46(v9);
    URL.deletingLastPathComponent()();
    uint64_t v18 = v3;
    uint64_t v19 = v11;
    uint64_t v20 = *(void (**)(char *, uint64_t))(v4 + 8);
    v20(v9, v18);
    static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
    v20(v19, v18);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v21 = PropertyListEncoder.init()();
    unint64_t v49 = a1;
    sub_10000588C(&qword_10166AF50);
    sub_1010E6D08();
    uint64_t v22 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    char v44 = v19;
    uint64_t v45 = v21;
    unint64_t v25 = v24;
    uint64_t v26 = v22;
    uint64_t v28 = v47;
    char v27 = v48;
    char v29 = (void (*)(char *, uint64_t, uint64_t))v46;
    ((void (*)(char *, uint64_t, uint64_t))v46)(v48, v47, v18);
    Data.write(to:excludeFromBackup:options:)();
    uint64_t v42 = v26;
    unint64_t v43 = v25;
    uint64_t v34 = v28;
    v20(v27, v18);
    static os_log_type_t.info.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    uint64_t v48 = (char *)qword_10170EFB0;
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_101342130;
    unint64_t v36 = v44;
    v29(v44, v34, v18);
    sub_1010E6DE4((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v39 = v38;
    v20(v36, v18);
    *(void *)(v35 + 56) = &type metadata for String;
    *(void *)(v35 + 64) = sub_10000B4CC();
    *(void *)(v35 + 32) = v37;
    *(void *)(v35 + 40) = v39;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v42, v43);
    return swift_release();
  }
  else
  {
    __break(1u);
    swift_once();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_101342130;
    unint64_t v49 = v9;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v31 = String.init<A>(describing:)();
    uint64_t v33 = v32;
    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 64) = sub_10000B4CC();
    *(void *)(v30 + 32) = v31;
    *(void *)(v30 + 40) = v33;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
}

uint64_t sub_1010E4DD4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v44 = a1;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  __chkstk_darwin(v3);
  uint64_t v37 = v4;
  uint64_t v39 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v5 - 8);
  unint64_t v36 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163FE70);
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  __chkstk_darwin(v7);
  uint64_t v38 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v9 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  id v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v12);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v13 - 8);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = sub_1010ABE4C((uint64_t)v46);
  swift_bridgeObjectRelease();
  *(double *)(v1 + 16) = (double)v14 * 60.0;
  uint64_t v15 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  static DispatchQoS.unspecified.getter();
  uint64_t v46 = _swiftEmptyArrayStorage;
  sub_1010E6DE4((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v35);
  uint64_t v34 = v15;
  *(void *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v35 = OBJC_IVAR____TtC12searchpartyd19ShareAttemptTracker_systemClockChangedSubscription;
  *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd19ShareAttemptTracker_systemClockChangedSubscription) = 0;
  uint64_t v16 = OBJC_IVAR____TtC12searchpartyd19ShareAttemptTracker_automaticTimeEnabled;
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  *(unsigned char *)(v1 + v16) = (_BYTE)v46;
  uint64_t v17 = v42;
  uint64_t v18 = v43;
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  v19(v1 + OBJC_IVAR____TtC12searchpartyd19ShareAttemptTracker_attemptsURL, v44, v43);
  swift_retain();
  uint64_t v20 = (void *)AnyCurrentValuePublisher.publisher.getter();
  swift_release();
  uint64_t v46 = v20;
  id v45 = *(id *)(v1 + 24);
  id v21 = v45;
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v23 = (uint64_t)v36;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v36, 1, 1, v22);
  id v24 = v21;
  sub_10000588C(&qword_10163FE78);
  sub_100062734(&qword_10163FE80, &qword_10163FE78);
  sub_10027B124();
  unint64_t v25 = v38;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v23, &qword_10163C6C8);

  swift_release();
  uint64_t v26 = swift_allocObject();
  swift_weakInit();
  char v27 = v39;
  uint64_t v28 = v44;
  v19((uint64_t)v39, v44, v18);
  unint64_t v29 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v26;
  (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(v30 + v29, v27, v18);
  sub_100062734(&qword_10163FE88, &qword_10163FE70);
  uint64_t v31 = v41;
  uint64_t v32 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v28, v18);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v25, v31);
  *(void *)(v2 + v35) = v32;
  swift_release();
  return v2;
}

uint64_t sub_1010E54EC(unsigned __int8 *a1)
{
  int v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (v1 == *(unsigned __int8 *)(result + OBJC_IVAR____TtC12searchpartyd19ShareAttemptTracker_automaticTimeEnabled))
    {
      return swift_release();
    }
    else
    {
      *(unsigned char *)(result + OBJC_IVAR____TtC12searchpartyd19ShareAttemptTracker_automaticTimeEnabled) = v1;
      id v3 = [self defaultManager];
      URL._bridgeToObjectiveC()(v4);
      uint64_t v6 = v5;
      id v14 = 0;
      unsigned int v7 = [v3 removeItemAtURL:v5 error:&v14];

      if (v7)
      {
        id v8 = v14;
      }
      else
      {
        id v9 = v14;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
      }
      static os_log_type_t.default.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_101342130;
      type metadata accessor for URL();
      sub_1010E6DE4((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v13 = v12;
      *(void *)(v10 + 56) = &type metadata for String;
      *(void *)(v10 + 64) = sub_10000B4CC();
      *(void *)(v10 + 32) = v11;
      *(void *)(v10 + 40) = v13;
      os_log(_:dso:log:_:_:)();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1010E5738@<X0>(unsigned __int8 a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (unsigned __int8 *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = &v12[*(int *)(v10 + 28)];
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v13, a2, v14);
  *uint64_t v12 = a1;
  uint64_t v15 = sub_1010E4348();
  if (v15[2] && (unint64_t v16 = sub_10072548C(v12), (v17 & 1) != 0))
  {
    unint64_t v18 = v16;
    uint64_t v19 = v15[7];
    uint64_t v20 = type metadata accessor for Date();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v26 = a3;
    uint64_t v22 = v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v8, v19 + *(void *)(v21 + 72) * v18, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v8, 0, 1, v20);
    a3 = v26;
  }
  else
  {
    uint64_t v20 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v8, 1, 1, v20);
  }
  swift_bridgeObjectRelease();
  sub_1010E6914((uint64_t)v12);
  type metadata accessor for Date();
  uint64_t v23 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v8, 1, v20) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(a3, v8, v20);
  }
  static Date.distantPast.getter();
  return sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163AC90);
}

uint64_t sub_1010E5A24(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v20 = a2;
  int v21 = a3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  id v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  dispatch_queue_t v22 = *(dispatch_queue_t *)(v3 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  uint64_t v12 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v20, v5);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v14 = (v11 + *(unsigned __int8 *)(v6 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v19;
  *(unsigned char *)(v15 + 24) = v21;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v13, (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v15 + v14, v8, v12);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1010E6C24;
  *(void *)(v16 + 24) = v15;
  aBlock[4] = sub_1003B7AE0;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_101608768;
  char v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v22, v17);
  _Block_release(v17);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v17) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1010E5D2C(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a4;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  unint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (unsigned __int8 *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = &v19[*(int *)(v17 + 28)];
  uint64_t v21 = type metadata accessor for UUID();
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v20, a3, v21);
  *uint64_t v19 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v15, v27, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  unint64_t v29 = (char *)sub_1010E4348();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6) == 1)
  {
    sub_10001DAB4((uint64_t)v15, (uint64_t *)&unk_10163AC90);
    sub_100165CD4(v19, (uint64_t)v13);
    sub_1010E6914((uint64_t)v19);
    sub_10001DAB4((uint64_t)v13, (uint64_t *)&unk_10163AC90);
    dispatch_queue_t v22 = v29;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v15, v6);
    uint64_t v23 = v29;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = v23;
    sub_100173274((uint64_t)v9, v19, isUniquelyReferenced_nonNull_native);
    dispatch_queue_t v22 = v28;
    swift_bridgeObjectRelease();
    sub_1010E6914((uint64_t)v19);
  }
  return sub_1010E4834(v22);
}

uint64_t sub_1010E6004(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = *(NSObject **)(v2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v2;
  *(unsigned char *)(v10 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_1010E6A3C;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_100132424;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1016086F0;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v12);
  _Block_release(v12);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1010E6230(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (unsigned __int8 *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = &v8[*(int *)(v6 + 28)];
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v12, a3, v13);
  *uint64_t v8 = a2;
  uint64_t v16 = (char *)sub_1010E4348();
  sub_100165CD4(v8, (uint64_t)v11);
  sub_1010E6914((uint64_t)v8);
  sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_10163AC90);
  return sub_1010E4834(v16);
}

BOOL sub_1010E6390(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.trustedNow.getter((uint64_t)v8);
  Date.timeIntervalSince(_:)();
  double v10 = v9;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v11 = v25;
  switch(a2)
  {
    case 2:
    case 3:
    case 4:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      goto LABEL_13;
    case 5:
      uint64_t v21 = sub_1010AB7C4(v25);
      uint64_t v22 = sub_1010AB7D8(v11);
      swift_bridgeObjectRelease();
      uint64_t v23 = v21 - v22;
      if (__OFSUB__(v21, v22))
      {
        __break(1u);
        goto LABEL_12;
      }
      if ((unsigned __int128)(v23 * (__int128)60) >> 64 != (60 * v23) >> 63)
      {
LABEL_12:
        __break(1u);
LABEL_13:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1010E6710);
      }
      double v12 = (double)(60 * v23);
LABEL_5:
      static os_log_type_t.info.getter();
      if (qword_101637258 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_101347BA0;
      uint64_t v14 = Double.description.getter();
      uint64_t v16 = v15;
      *(void *)(v13 + 56) = &type metadata for String;
      unint64_t v17 = sub_10000B4CC();
      *(void *)(v13 + 64) = v17;
      *(void *)(v13 + 32) = v14;
      *(void *)(v13 + 40) = v16;
      uint64_t v18 = Double.description.getter();
      *(void *)(v13 + 96) = &type metadata for String;
      *(void *)(v13 + 104) = v17;
      *(void *)(v13 + 72) = v18;
      *(void *)(v13 + 80) = v19;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      return v12 < v10;
    default:
      swift_bridgeObjectRelease();
      double v12 = *(double *)(v3 + 16);
      goto LABEL_5;
  }
}

uint64_t sub_1010E6754()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd19ShareAttemptTracker_attemptsURL;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1010E680C()
{
  return type metadata accessor for ShareAttemptTracker(0);
}

uint64_t type metadata accessor for ShareAttemptTracker(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10166AE10);
}

uint64_t sub_1010E6834()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ShareAttemptTracker.AttemptKey(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10166AFD0);
}

uint64_t sub_1010E6914(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1010E6970()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 25) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1010E6A3C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  unsigned __int8 v4 = *(unsigned char *)(v0 + 24);

  return sub_1010E6230(v2, v4, v3);
}

uint64_t sub_1010E6AA4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1010E6AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1010E6AC4()
{
  return swift_release();
}

uint64_t sub_1010E6ACC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 25) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1010E6C24()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  unsigned __int8 v7 = *(unsigned char *)(v0 + 24);

  return sub_1010E5D2C(v5, v7, v0 + v2, v6);
}

uint64_t sub_1010E6CF8()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1010E6D08()
{
  unint64_t result = qword_10166AF58;
  if (!qword_10166AF58)
  {
    sub_10000592C(&qword_10166AF50);
    sub_1010E6DE4(&qword_10166AF60, (void (*)(uint64_t))type metadata accessor for ShareAttemptTracker.AttemptKey);
    sub_1010E6DE4((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166AF58);
  }
  return result;
}

uint64_t sub_1010E6DE4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1010E6E2C()
{
  unint64_t result = qword_10166AF68;
  if (!qword_10166AF68)
  {
    sub_10000592C(&qword_10166AF50);
    sub_1010E6DE4(&qword_10166AF70, (void (*)(uint64_t))type metadata accessor for ShareAttemptTracker.AttemptKey);
    sub_1010E6DE4(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166AF68);
  }
  return result;
}

uint64_t sub_1010E6F08()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1010E6F40()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1010E700C(unsigned __int8 *a1)
{
  type metadata accessor for URL();

  return sub_1010E54EC(a1);
}

uint64_t *sub_1010E7080(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    unsigned __int8 v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_1010E714C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UUID();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

unsigned char *sub_1010E71B4(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

unsigned char *sub_1010E7230(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

unsigned char *sub_1010E72AC(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

unsigned char *sub_1010E7328(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1010E73A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010E73B8);
}

uint64_t sub_1010E73B8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 239)
  {
    unsigned int v4 = *a1;
    if (v4 >= 0x11) {
      return v4 - 16;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = &a1[*(int *)(a3 + 20)];
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1010E7460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010E7474);
}

unsigned char *sub_1010E7474(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 239)
  {
    *unint64_t result = a2 + 16;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1010E7518()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1010E75B0()
{
  return sub_1010E6DE4(&qword_10166B008, (void (*)(uint64_t))type metadata accessor for ShareAttemptTracker.AttemptKey);
}

unint64_t sub_1010E75F8()
{
  unint64_t result = qword_10166B018;
  if (!qword_10166B018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166B018);
  }
  return result;
}

uint64_t sub_1010E764C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for ShareAttemptTracker.AttemptKey.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010E777CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareAttemptTracker.AttemptKey.CodingKeys()
{
  return &type metadata for ShareAttemptTracker.AttemptKey.CodingKeys;
}

unint64_t sub_1010E77B8()
{
  unint64_t result = qword_10166B028;
  if (!qword_10166B028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166B028);
  }
  return result;
}

unint64_t sub_1010E7810()
{
  unint64_t result = qword_10166B030;
  if (!qword_10166B030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166B030);
  }
  return result;
}

unint64_t sub_1010E7868()
{
  unint64_t result = qword_10166B038;
  if (!qword_10166B038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166B038);
  }
  return result;
}

uint64_t sub_1010E78BC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x546567617373656DLL && a2 == 0xEB00000000657079;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1010E79DC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170F270);
  sub_100010324(v0, (uint64_t)qword_10170F270);
  return Logger.init(subsystem:category:)();
}

void *sub_1010E7A64(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v5);
  static DispatchQoS.unspecified.getter();
  v11[1] = _swiftEmptyArrayStorage;
  sub_1010E8C74((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v1[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[3] = 0xD000000000000012;
  v1[4] = 0x80000001013F8810;
  v1[5] = 47;
  v1[6] = 0xE100000000000000;
  sub_1010E7D14(a1);
  uint64_t v9 = type metadata accessor for FMNAccountType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
  return v1;
}

uint64_t sub_1010E7D14(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v7 - 8);
  uint64_t v20 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for FMNAccountType();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  v18[1] = *(void *)(v2 + 16);
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_1010E8270;
  void aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1016088C0;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_1010E8C74((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v20);
  swift_release();
  return swift_release();
}

uint64_t sub_1010E80B8(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = sub_1010E82EC(a2);
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    v4[3] = v5;
    v4[4] = v10;
    swift_bridgeObjectRelease();
    v4[5] = v7;
    v4[6] = v9;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for AccountURLComponents()
{
  return self;
}

uint64_t sub_1010E816C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1010E81A4()
{
  uint64_t v1 = type metadata accessor for FMNAccountType();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1010E8270()
{
  uint64_t v1 = *(void *)(type metadata accessor for FMNAccountType() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1010E80B8(v2, v3);
}

uint64_t sub_1010E82D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1010E82E4()
{
  return swift_release();
}

uint64_t sub_1010E82EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FMNAccountType();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v62 = (char *)&v52 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v52 - v9;
  uint64_t v11 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  long long v63 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v52 - v18;
  type metadata accessor for FMNAuthenticationProvider();
  static FMNAuthenticationProvider.configurationURL(accountType:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100020198((uint64_t)v13);
LABEL_9:
    if (qword_101637458 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100010324(v30, (uint64_t)qword_10170F270);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136446210;
      sub_1010E8C74(&qword_10166B130, (void (*)(uint64_t))&type metadata accessor for FMNAccountType);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v64 = sub_1008FA0F0(v34, v35, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "AccountURL[%{public}s]: Fallback to hard-coded host name.", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v36 = 0xD000000000000012;
      swift_slowDealloc();
    }
    else
    {
      unint64_t v36 = 0xD000000000000012;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }

    return v36;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v13, v14);
  uint64_t v61 = URL.host.getter();
  if (!v20)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    goto LABEL_9;
  }
  unint64_t v21 = v20;
  if (qword_101637458 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = sub_100010324(v22, (uint64_t)qword_10170F270);
  uint64_t v58 = *(NSObject **)(v3 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v58)(v10, a1, v2);
  uint64_t v60 = v23;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  LODWORD(v57) = v25;
  if (os_log_type_enabled(v24, v25))
  {
    int v56 = v24;
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    uint64_t v65 = v54;
    uint64_t v55 = v3;
    uint64_t v53 = v26;
    *(_DWORD *)uint64_t v26 = 136446210;
    uint64_t v59 = (void (*)(char *, uint64_t))(v26 + 4);
    sub_1010E8C74(&qword_10166B130, (void (*)(uint64_t))&type metadata accessor for FMNAccountType);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v64 = sub_1008FA0F0(v27, v28, &v65);
    uint64_t v29 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v59 = *(void (**)(char *, uint64_t))(v29 + 8);
    v59(v10, v2);
    _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v57, "AccountURL[%{public}s]: Using host name and path from authenticated setup bag.", v53, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v59 = *(void (**)(char *, uint64_t))(v3 + 8);
    v59(v10, v2);
  }
  uint64_t v37 = v62;
  ((void (*)(char *, uint64_t, uint64_t))v58)(v62, a1, v2);
  uint64_t v38 = v63;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v63, v19, v14);
  swift_bridgeObjectRetain_n();
  uint64_t v39 = v37;
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  int v42 = v41;
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v43 = swift_slowAlloc();
    LODWORD(v62) = v42;
    uint64_t v44 = v43;
    uint64_t v60 = swift_slowAlloc();
    uint64_t v65 = v60;
    *(_DWORD *)uint64_t v44 = 136446722;
    uint64_t v57 = v44 + 4;
    sub_1010E8C74(&qword_10166B130, (void (*)(uint64_t))&type metadata accessor for FMNAccountType);
    uint64_t v58 = v40;
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v64 = sub_1008FA0F0(v45, v46, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v59(v39, v2);
    *(_WORD *)(v44 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v64 = sub_1008FA0F0(v61, v21, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v44 + 22) = 2080;
    uint64_t v47 = v63;
    uint64_t v48 = URL.path.getter();
    uint64_t v64 = sub_1008FA0F0(v48, v49, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v50 = *(void (**)(char *, uint64_t))(v15 + 8);
    v50(v47, v14);
    uint64_t v40 = v58;
    _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v62, "AccountURL[%{public}s]: hostName: [%s] path: [%s].", (uint8_t *)v44, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v59(v39, v2);
    swift_bridgeObjectRelease_n();
    unint64_t v50 = *(void (**)(char *, uint64_t))(v15 + 8);
    v50(v38, v14);
  }

  URL.path.getter();
  v50(v19, v14);
  return v61;
}

uint64_t sub_1010E8C74(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1010E8CBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR____TtC12searchpartyd14NetworkMonitor____lazy_storage___callbackQueue;
  uint64_t v9 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd14NetworkMonitor____lazy_storage___callbackQueue);
  if (v9)
  {
    id v10 = *(id *)(v0 + OBJC_IVAR____TtC12searchpartyd14NetworkMonitor____lazy_storage___callbackQueue);
  }
  else
  {
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v4);
    static DispatchQoS.unspecified.getter();
    v15[1] = _swiftEmptyArrayStorage;
    sub_10041ECCC((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_10000588C((uint64_t *)&unk_1016376F0);
    sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v11 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    uint64_t v12 = *(void **)(v0 + v8);
    *(void *)(v1 + v8) = v11;
    id v10 = v11;

    uint64_t v9 = 0;
  }
  id v13 = v9;
  return v10;
}

uint64_t NetworkMonitor.startMonitoring(block:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = (void *)(v3 + OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_monitorBlock);
  uint64_t v14 = *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_monitorBlock);
  *id v13 = a1;
  v13[1] = a2;
  swift_retain();
  sub_1000A1534(v14);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  uint64_t v15 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_1010E9420;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101608910;
  uint64_t v17 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10041ECCC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v20);
}

uint64_t sub_1010E9240()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1010E9278()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    id v2 = [self sharedDefaultEvaluator];
    uint64_t v3 = OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_evaluator;
    uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_evaluator];
    *(void *)&v1[OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_evaluator] = v2;

    uint64_t v5 = *(void **)&v1[v3];
    if (v5)
    {
      id v6 = v5;
      NSString v7 = String._bridgeToObjectiveC()();
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16) = v1;
      v11[4] = sub_1010E9D14;
      v11[5] = v8;
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 1107296256;
      void v11[2] = sub_1010E99DC;
      v11[3] = &unk_101608960;
      uint64_t v9 = _Block_copy(v11);
      uint64_t v1 = v1;
      swift_release();
      id v10 = [v6 addKVOBlockForKeyPath:v7 options:5 handler:v9];

      _Block_release(v9);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v12, 0, sizeof(v12));
    }
    sub_100498978((uint64_t)v12);
  }
}

void sub_1010E9420()
{
}

uint64_t sub_1010E9428(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1010E9438()
{
  return swift_release();
}

void sub_1010E9440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v8 = type metadata accessor for Notification();
  uint64_t v36 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 1752457584 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v17 = *(void **)&a5[OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_evaluator];
    uint64_t v33 = v8;
    if (v17)
    {
      id v18 = [v17 path];
      id v19 = [v18 status];

      BOOL v20 = v19 == (id)1;
    }
    else
    {
      BOOL v20 = 0;
    }
    static os_log_type_t.info.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_101342130;
    unint64_t v22 = sub_10000B4CC();
    uint64_t v23 = 1314344772;
    if (v20) {
      uint64_t v23 = 20565;
    }
    unint64_t v24 = 0xE400000000000000;
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = v22;
    if (v20) {
      unint64_t v24 = 0xE200000000000000;
    }
    *(void *)(v21 + 32) = v23;
    *(void *)(v21 + 40) = v24;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    os_log_type_t v25 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    id v26 = sub_1010E8CBC();
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = a5;
    *(unsigned char *)(v27 + 24) = v20;
    uint64_t v40 = sub_1010E9D54;
    uint64_t v41 = v27;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v39 = sub_1004B5480;
    *((void *)&v39 + 1) = &unk_1016089B0;
    unint64_t v28 = _Block_copy(&aBlock);
    uint64_t v29 = a5;
    static DispatchQoS.unspecified.getter();
    uint64_t v37 = _swiftEmptyArrayStorage;
    sub_10041ECCC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v28);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v11);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v34);
    swift_release();
    id v30 = [self defaultCenter];
    String._bridgeToObjectiveC()();
    long long aBlock = 0u;
    long long v39 = 0u;
    Notification.init(name:object:userInfo:)();
    Class isa = Notification._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v33);
    [v30 postNotification:isa];
  }
}

uint64_t sub_1010E995C(uint64_t result, char a2)
{
  uint64_t v2 = *(void (**)(void))(result + OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_monitorBlock);
  if (v2)
  {
    swift_retain();
    v2(a2 & 1);
    return sub_1000A1534((uint64_t)v2);
  }
  return result;
}

uint64_t sub_1010E99DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(a1 + 32);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v10[3] = swift_getObjectType();
  v10[0] = a3;
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  swift_unknownObjectRetain();
  v4(v5, v7, v10, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v10);
}

Swift::Void __swiftcall NetworkMonitor.stopMonitoring()()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_monitorBlock);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_monitorBlock);
  *uint64_t v1 = 0;
  v1[1] = 0;
  sub_1000A1534(v2);
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_evaluator);
  *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_evaluator) = 0;
}

Swift::Bool __swiftcall NetworkMonitor.isNetworkUp()()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_evaluator);
  if (v1)
  {
    id v2 = [v1 path];
    id v3 = [v2 status];

    LOBYTE(v1) = (((unint64_t)v3 - 1) & 0xFFFFFFFFFFFFFFFDLL) == 0;
  }
  return (char)v1;
}

id NetworkMonitor.init()()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_monitorBlock];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_evaluator] = 0;
  *(void *)&v0[OBJC_IVAR____TtC12searchpartyd14NetworkMonitor____lazy_storage___callbackQueue] = 0;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for NetworkMonitor();
  return [super init];
}

id NetworkMonitor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NetworkMonitor();
  return [super dealloc];
}

uint64_t type metadata accessor for NetworkMonitor()
{
  return self;
}

uint64_t sub_1010E9CDC()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1010E9D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1010E9440(a1, a2, a3, a4, *(char **)(v4 + 16));
}

uint64_t sub_1010E9D1C()
{
  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1010E9D54()
{
  return sub_1010E995C(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1010E9D70()
{
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170F288 = result;
  return result;
}

uint64_t sub_1010E9DE0@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_1010EC54C;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_1000BD0E8(v3);
}

uint64_t sub_1010E9E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = a3;
  sub_1000BD0E8(a2);
  return sub_1000A1534(v3);
}

void *sub_1010E9EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = 0;
  v4[6] = v13;
  uint64_t v42 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  uint64_t v43 = v4;
  v4[7] = 0;
  v4[8] = 0;
  unsigned int v40 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v41 = *(void (**)(char *))(v10 + 104);
  uint64_t v31 = v10 + 104;
  uint64_t v29 = v9;
  v41(v12);
  static DispatchQoS.unspecified.getter();
  uint64_t v44 = _swiftEmptyArrayStorage;
  uint64_t v38 = sub_1010EC608((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v39 = sub_10000588C((uint64_t *)&unk_1016376F0);
  uint64_t v30 = sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  uint64_t v37 = v5;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v14 = v8;
  uint64_t v36 = v12;
  uint64_t v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v16 = v43;
  v43[9] = v15;
  uint64_t v17 = v12;
  uint64_t v18 = v40;
  id v19 = (void (*)(char *, uint64_t, uint64_t))v41;
  ((void (*)(char *, void, uint64_t))v41)(v17, v40, v9);
  v28[1] = v14;
  static DispatchQoS.unspecified.getter();
  uint64_t v44 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  BOOL v20 = v36;
  v16[10] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v21 = v29;
  v19(v20, v18, v29);
  static DispatchQoS.unspecified.getter();
  uint64_t v44 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  unint64_t v22 = v36;
  uint64_t v23 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  unint64_t v24 = v43;
  v43[11] = v23;
  ((void (*)(char *, void, uint64_t))v41)(v22, v40, v21);
  static DispatchQoS.unspecified.getter();
  uint64_t v44 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v24[12] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  v24[13] = PropertyListEncoder.init()();
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  v24[14] = PropertyListDecoder.init()();
  *(_OWORD *)(v24 + 15) = xmmword_101347BB0;
  uint64_t v25 = v33;
  v24[2] = v32;
  v24[3] = v25;
  uint64_t v26 = v35;
  uint64_t v24[4] = v34;
  v24[5] = v26;
  return v24;
}

uint64_t sub_1010EA38C()
{
  static os_log_type_t.default.getter();
  if (qword_101637460 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  sub_10000588C(&qword_10166B300);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (v2)
  {
    uint64_t v1 = swift_retain();
    v2(v1);
    sub_1000A1534((uint64_t)v2);
    return sub_1000A1534((uint64_t)v2);
  }
  return result;
}

void sub_1010EA55C(void *a1)
{
  uint64_t v2 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&aBlock - v7;
  if (a1[16] >> 60 == 15)
  {
    if (qword_1016371D8 != -1) {
      swift_once();
    }
    uint64_t aBlock = 0x7365547265646E75;
    unint64_t v23 = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)();
    swift_bridgeObjectRelease();
    if (v28)
    {
      uint64_t v9 = a1[10];
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = sub_1010EC4B8;
      *(void *)(v10 + 24) = a1;
      uint64_t v26 = sub_1003B7AE0;
      uint64_t v27 = v10;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v23 = 1107296256;
      unint64_t v24 = sub_1000A70B0;
      uint64_t v25 = &unk_101608A50;
      uint64_t v11 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v9, v11);
      _Block_release(v11);
      LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((v9 & 1) == 0)
      {
        sub_1010EB518();
        return;
      }
      __break(1u);
      goto LABEL_17;
    }
    static SystemInfo.lockState.getter();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v2);
    sub_1010EC608((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v12 = aBlock;
    uint64_t v13 = v28;
    uint64_t v14 = *(void (**)(char *, uint64_t))(v3 + 8);
    v14(v6, v2);
    v14(v8, v2);
    if (v12 == v13)
    {
      static os_log_type_t.default.getter();
      if (qword_101637460 == -1)
      {
LABEL_9:
        os_log(_:dso:log:_:_:)();
        return;
      }
LABEL_17:
      swift_once();
      goto LABEL_9;
    }
    uint64_t v15 = static Keychain.data(account:service:)();
    if (v16 >> 60 == 15)
    {
      uint64_t v17 = a1[10];
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = sub_1010EC4B8;
      *(void *)(v18 + 24) = a1;
      uint64_t v26 = sub_100132424;
      uint64_t v27 = v18;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v23 = 1107296256;
      unint64_t v24 = sub_1000A70B0;
      uint64_t v25 = &unk_101608A00;
      id v19 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v17, v19);
      _Block_release(v19);
      LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (v17)
      {
        __break(1u);
      }
      else
      {
        sub_1010EB518();
        static os_log_type_t.default.getter();
        if (qword_101637460 == -1) {
          goto LABEL_9;
        }
      }
      goto LABEL_17;
    }
    uint64_t v20 = a1[15];
    unint64_t v21 = a1[16];
    a1[15] = v15;
    a1[16] = v16;
    sub_100037A24(v20, v21);
  }
}

uint64_t sub_1010EAC88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v16 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a3;
  aBlock[4] = sub_1010EC578;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101608AC8;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_1010EC608((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v15);
  return swift_release();
}

uint64_t sub_1010EAF4C()
{
  Transaction.capture()();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1010EB518();
    return swift_release();
  }
  return result;
}

uint64_t sub_1010EAFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v16 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_1010EC5F0;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101608BB8;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_1010EC608((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v15);
  return swift_release();
}

uint64_t sub_1010EB270()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    Transaction.capture()();
    if ((static SystemInfo.underTest.getter() & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      static Keychain.deleteData(account:service:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v2 = v1[15];
    unint64_t v3 = v1[16];
    *(_OWORD *)(v1 + 15) = xmmword_101347BB0;
    sub_100037A24(v2, v3);
    static os_log_type_t.default.getter();
    if (qword_101637460 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_101347BA0;
    uint64_t v6 = v1[2];
    uint64_t v5 = v1[3];
    *(void *)(v4 + 56) = &type metadata for String;
    unint64_t v7 = sub_10000B4CC();
    *(void *)(v4 + 64) = v7;
    *(void *)(v4 + 32) = v6;
    *(void *)(v4 + 40) = v5;
    uint64_t v8 = v1[4];
    uint64_t v9 = v1[5];
    *(void *)(v4 + 96) = &type metadata for String;
    *(void *)(v4 + 104) = v7;
    *(void *)(v4 + 72) = v8;
    *(void *)(v4 + 80) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v10 = v1[10];
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = sub_1010EC4B8;
    *(void *)(v11 + 24) = v1;
    v13[4] = sub_1003B7AE0;
    v13[5] = v11;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    _OWORD v13[2] = sub_1000A70B0;
    v13[3] = &unk_101608C08;
    uint64_t v12 = _Block_copy(v13);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v10, v12);
    _Block_release(v12);
    LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
    swift_release_n();
    uint64_t result = swift_release();
    if (v10) {
      __break(1u);
    }
  }
  return result;
}

void sub_1010EB518()
{
  uint64_t v1 = type metadata accessor for HashAlgorithm();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = (void *)v0[9];
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    if (static SystemInfo.underTest.getter())
    {
      uint64_t v11 = String.utf8Data.getter();
      unint64_t v13 = v12;
      (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v4, enum case for HashAlgorithm.sha256(_:), v1);
      uint64_t v14 = Data.hash(algorithm:)();
      uint64_t v16 = v15;
      sub_10001CFB8(v11, v13);
      (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
      uint64_t v17 = v0[15];
      unint64_t v18 = v0[16];
      v0[15] = v14;
      v0[16] = v16;
      sub_100037A24(v17, v18);
    }
    else if (v0[16] >> 60 == 15)
    {
      sub_1010EB764(v0);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1010EB764(void *a1)
{
  uint64_t v3 = type metadata accessor for Keychain.DataProtectionClass();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[2];
  v16[0] = a1[5];
  v16[1] = v7;
  uint64_t v8 = static Keychain.data(account:service:)();
  if (v1)
  {
    swift_errorRelease();
  }
  else
  {
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      uint64_t v11 = v8;
      goto LABEL_5;
    }
  }
  uint64_t v11 = static Data.random(bytes:)();
  unint64_t v10 = v12;
  v16[2] = v11;
  v16[3] = v12;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Keychain.DataProtectionClass.c(_:), v3);
  sub_1000362FC();
  static Keychain.set<A>(data:account:service:dataProtectionClass:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
LABEL_5:
  uint64_t v13 = a1[15];
  unint64_t v14 = a1[16];
  a1[15] = v11;
  a1[16] = v10;
  return sub_100037A24(v13, v14);
}

void **sub_1010EB9E4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for EncryptedData();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (void **)((char *)&aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a3 & 1) == 0)
  {
    sub_10000588C(&qword_10166B300);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (aBlock)
    {
      sub_1000A1534((uint64_t)aBlock);
      sub_1010EC464();
      swift_allocError();
      char v12 = 1;
LABEL_7:
      *uint64_t v11 = v12;
      return (void **)swift_willThrow();
    }
  }
  uint64_t v26 = v8;
  uint64_t v13 = *(NSObject **)(v5 + 72);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_100E7FB1C;
  *(void *)(v14 + 24) = v5;
  unint64_t v24 = sub_1003B7AE0;
  uint64_t v25 = v14;
  uint64_t aBlock = _NSConcreteStackBlock;
  unint64_t v21 = 1107296256;
  unint64_t v22 = sub_1000A70B0;
  unint64_t v23 = &unk_101608B68;
  uint64_t v15 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v13, v15);
  _Block_release(v15);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = (void **)swift_release();
  if (v15)
  {
    __break(1u);
  }
  else
  {
    sub_10000588C(&qword_101669360);
    OS_dispatch_queue.sync<A>(execute:)();
    unint64_t v17 = v21;
    if (v21 >> 60 == 15)
    {
      sub_1010EC464();
      swift_allocError();
      char v12 = 3;
      goto LABEL_7;
    }
    unint64_t v18 = aBlock;
    uint64_t v19 = Data.spEncrypt(key:ivLength:)();
    if (v4)
    {
      return (void **)sub_100037A24((uint64_t)v18, v17);
    }
    else
    {
      __chkstk_darwin(v19);
      *(&aBlock - 2) = (void **)v5;
      *(&aBlock - 1) = v10;
      OS_dispatch_queue.sync<A>(execute:)();
      sub_100037A24((uint64_t)v18, v17);
      (*(void (**)(void **, uint64_t))(v26 + 8))(v10, v7);
      return aBlock;
    }
  }
  return result;
}

uint64_t sub_1010EBDA8@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for EncryptedData();
  sub_1010EC608(&qword_10165C0C0, (void (*)(uint64_t))&type metadata accessor for EncryptedData);
  uint64_t result = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1010EBE40()
{
  uint64_t v2 = *(NSObject **)(v0 + 72);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_100E7FB1C;
  *(void *)(v3 + 24) = v0;
  aBlock[4] = sub_1003B7AE0;
  void aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_101608B18;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v2, v4);
  _Block_release(v4);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    __chkstk_darwin(result);
    uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
    if (!v1) {
      return aBlock[0];
    }
  }
  return result;
}

void sub_1010EBFF4(uint64_t *a1@<X8>)
{
  sub_1010EC064(a1);
}

uint64_t sub_1010EC064@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for EncryptedData();
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101669360);
  OS_dispatch_queue.sync<A>(execute:)();
  unint64_t v6 = v22;
  if (v22 >> 60 == 15)
  {
    sub_1010EC464();
    uint64_t v7 = swift_allocError();
    *uint64_t v8 = 3;
    swift_willThrow();
  }
  else
  {
    uint64_t v20 = a1;
    uint64_t v9 = v21;
    sub_1010EC608(&qword_10163F750, (void (*)(uint64_t))&type metadata accessor for EncryptedData);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    uint64_t v7 = v1;
    if (!v1)
    {
      uint64_t v14 = EncryptedData.decrypt(key:)();
      uint64_t v16 = v15;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v3);
      uint64_t result = sub_100037A24(v9, v6);
      unint64_t v18 = v20;
      *uint64_t v20 = v14;
      v18[1] = v16;
      return result;
    }
    sub_100037A24(v9, v6);
  }
  static os_log_type_t.error.getter();
  if (qword_101637460 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101342130;
  uint64_t v21 = v7;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v11 = String.init<A>(describing:)();
  uint64_t v13 = v12;
  *(void *)(v10 + 56) = &type metadata for String;
  *(void *)(v10 + 64) = sub_10000B4CC();
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = v13;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return swift_willThrow();
}

uint64_t sub_1010EC384()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000A1534(*(void *)(v0 + 56));

  swift_release();
  swift_release();
  sub_100037A24(*(void *)(v0 + 120), *(void *)(v0 + 128));
  return v0;
}

uint64_t sub_1010EC3F4()
{
  sub_1010EC384();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Cryptor()
{
  return self;
}

uint64_t sub_1010EC44C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1010EC5A0(a1);
}

unint64_t sub_1010EC464()
{
  unint64_t result = qword_10166B2F8;
  if (!qword_10166B2F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166B2F8);
  }
  return result;
}

uint64_t sub_1010EC4B8()
{
  return sub_1010EA38C();
}

uint64_t sub_1010EC4C0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1010EC4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1010EC4E0()
{
  return swift_release();
}

uint64_t sub_1010EC4E8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1010EC4F8@<X0>(uint64_t (**a1)()@<X8>)
{
  return sub_1010E9DE0(v1, a1);
}

uint64_t sub_1010EC514()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1010EC54C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1010EC578()
{
  return sub_1010EAF4C();
}

uint64_t sub_1010EC580()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1010EC590()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1010EC5A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 120);
  unint64_t v3 = *(void *)(v1 + 128);
  *a1 = v2;
  a1[1] = v3;
  return sub_100037A38(v2, v3);
}

uint64_t sub_1010EC5D0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1010EBDA8(a1);
}

uint64_t sub_1010EC5F0()
{
  return sub_1010EB270();
}

uint64_t sub_1010EC5F8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1010EC608(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Cryptor.CryptorError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010EC71CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Cryptor.CryptorError()
{
  return &type metadata for Cryptor.CryptorError;
}

unint64_t sub_1010EC758()
{
  unint64_t result = qword_10166B308;
  if (!qword_10166B308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166B308);
  }
  return result;
}

BOOL sub_1010EC7DC(unint64_t a1, unint64_t a2)
{
  return a2 < a1;
}

uint64_t sub_1010EC7E8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)v21 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v21 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v14((char *)v21 - v15, v2, a1);
  if (swift_dynamicCast())
  {
    uint64_t v16 = 0x7972616D6972702ELL;
    unint64_t v17 = 0xE900000000000028;
LABEL_7:
    unint64_t v22 = v16;
    unint64_t v23 = v17;
    goto LABEL_8;
  }
  v14(v13, v2, a1);
  if (swift_dynamicCast())
  {
    unint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    uint64_t v16 = 0x7972616D6972702ELL;
    unint64_t v17 = 0xED000028646C6957;
    goto LABEL_7;
  }
  v14(v10, v2, a1);
  if (swift_dynamicCast())
  {
    uint64_t v16 = 0x61646E6F6365732ELL;
    unint64_t v17 = 0xEB00000000287972;
    goto LABEL_7;
  }
  v14(v7, v2, a1);
  if (!swift_dynamicCast()) {
    return 7104878;
  }
  unint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  unint64_t v22 = 0xD000000000000016;
  unint64_t v23 = 0x80000001014225B0;
LABEL_8:
  dispatch thunk of RawRepresentable.rawValue.getter();
  v21[0] = v21[1];
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 41;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return v22;
}

uint64_t sub_1010ECB08(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  *(void *)(v4 + 232) = a2;
  *(void *)(v4 + 240) = a4;
  *(_WORD *)(v4 + 384) = a3;
  *(void *)(v4 + 224) = a1;
  *(void *)(v4 + 248) = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  *(void *)(v4 + 256) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  *(void *)(v4 + 264) = v5;
  *(void *)(v4 + 272) = *(void *)(v5 - 8);
  *(void *)(v4 + 280) = swift_task_alloc();
  *(void *)(v4 + 288) = type metadata accessor for KeySyncMetadata();
  *(void *)(v4 + 296) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  *(void *)(v4 + 304) = v6;
  *(void *)(v4 + 312) = *(void *)(v6 - 8);
  *(void *)(v4 + 320) = swift_task_alloc();
  *(void *)(v4 + 328) = swift_task_alloc();
  return _swift_task_switch(sub_1010ECC9C, 0, 0);
}

uint64_t sub_1010ECC9C()
{
  uint64_t v25 = v0;
  uint64_t v1 = *(void *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 312);
  static Date.trustedNow.getter(v1);
  sub_1010F2E38((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
  char v4 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v1, v2);
  if (v4)
  {
    if (qword_101637468 != -1) {
      swift_once();
    }
    uint64_t v7 = *(void *)(v0 + 312);
    uint64_t v6 = *(void *)(v0 + 320);
    uint64_t v8 = *(void *)(v0 + 304);
    uint64_t v9 = *(void *)(v0 + 232);
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170F290);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void *)(v0 + 320);
    uint64_t v15 = *(void *)(v0 + 304);
    if (v13)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446210;
      sub_1010F2E38((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 184) = sub_1008FA0F0(v17, v18, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v5(v14, v15);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Incoming date %{public}s is in the future. Ignoring it.", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v5(*(void *)(v0 + 320), *(void *)(v0 + 304));
    }

    sub_1010F2D1C();
    swift_allocError();
    *uint64_t v21 = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  else
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      unint64_t v23 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 336) = v20;
      *uint64_t v20 = v0;
      v20[1] = sub_1010ED0F0;
      return v23();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1010ED0F0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 344) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1010ED1F0, 0, 0);
}

uint64_t sub_1010ED1F0()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 344))
  {
    uint64_t v2 = *(void **)(v0 + 240);
    __int16 v3 = *(_WORD *)(v0 + 384);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = v2[3];
    uint64_t v5 = v2[4];
    sub_10001CD44(v2, v4);
    char v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v4, v5);
    uint64_t v7 = *(void *)(v0 + 248);
    if (v3 & 0x100) != 0 || (v6)
    {
      Swift::String v19 = (void *)(*(void *)(v0 + 224) + *(int *)(v7 + 20));
      uint64_t v20 = v19[3];
      uint64_t v21 = v19[4];
      sub_10001CD44(v19, v20);
      if (sub_100EB7B8C(v20, v21))
      {
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v23) {
          char v22 = 5;
        }
        else {
          char v22 = 6;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        char v22 = 5;
      }
      uint64_t v24 = *(void *)(v0 + 304);
      uint64_t v25 = *(void *)(v0 + 312);
      uint64_t v27 = *(int **)(v0 + 288);
      uint64_t v26 = *(void *)(v0 + 296);
      uint64_t v28 = *(void *)(v0 + 232);
      (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 272) + 16))(v26, *(void *)(v0 + 224), *(void *)(v0 + 264));
      sub_10001D010((uint64_t)v19, v26 + v27[6]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v26 + v27[7], v28, v24);
      *(unsigned char *)(v26 + v27[5]) = v22;
      uint64_t v29 = (void *)swift_task_alloc();
      *(void *)(v0 + 368) = v29;
      *uint64_t v29 = v0;
      v29[1] = sub_1010ED8A4;
      uint64_t v30 = *(void *)(v0 + 296);
      return sub_101104A5C(v30);
    }
    else
    {
      uint64_t v8 = *(void *)(v0 + 224) + *(int *)(v7 + 20);
      char v9 = *(unsigned char *)(v0 + 384);
      uint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v0 + 352) = v10;
      void *v10 = v0;
      v10[1] = sub_1010ED5C4;
      uint64_t v11 = *(void *)(v0 + 232);
      uint64_t v12 = *(void *)(v0 + 240);
      return sub_1010EE3D0(v8, v9, v11, v12);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637468 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170F290);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "No ObservationStoreService available!", v17, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
}

uint64_t sub_1010ED5C4()
{
  *(void *)(*(void *)v1 + 360) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1010EDA78;
  }
  else {
    uint64_t v2 = sub_1010ED6D8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1010ED6D8()
{
  uint64_t v1 = (void *)(v0[28] + *(int *)(v0[31] + 20));
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10001CD44(v1, v2);
  if (sub_100EB7B8C(v2, v3))
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      char v4 = 5;
    }
    else {
      char v4 = 6;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    char v4 = 5;
  }
  uint64_t v6 = v0[38];
  uint64_t v7 = v0[39];
  char v9 = (int *)v0[36];
  uint64_t v8 = v0[37];
  uint64_t v10 = v0[29];
  (*(void (**)(uint64_t, void, void))(v0[34] + 16))(v8, v0[28], v0[33]);
  sub_10001D010((uint64_t)v1, v8 + v9[6]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8 + v9[7], v10, v6);
  *(unsigned char *)(v8 + v9[5]) = v4;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[46] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1010ED8A4;
  uint64_t v12 = v0[37];
  return sub_101104A5C(v12);
}

uint64_t sub_1010ED8A4()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1010EDF30;
  }
  else {
    uint64_t v2 = sub_1010ED9B8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1010ED9B8()
{
  uint64_t v1 = *(void *)(v0 + 296);
  swift_release();
  sub_1010F2DD8(v1, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1010EDA78()
{
  uint64_t v30 = v0;
  *(void *)(v0 + 192) = *(void *)(v0 + 360);
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if ((swift_dynamicCast() & 1) != 0 && *(unsigned char *)(v0 + 386) == 1)
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    uint64_t v1 = (void *)(v0 + 96);
    swift_errorRelease();
    if (qword_101637468 != -1) {
      swift_once();
    }
    uint64_t v2 = *(void *)(v0 + 240);
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170F290);
    sub_10001D010(v2, v0 + 96);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(v0 + 272);
      uint64_t v7 = *(void *)(v0 + 280);
      uint64_t v8 = *(void *)(v0 + 264);
      char v28 = *(unsigned char *)(v0 + 384);
      uint64_t v9 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 141558531;
      *(void *)(v0 + 216) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      uint64_t v11 = *(void *)(v0 + 120);
      uint64_t v10 = *(void *)(v0 + 128);
      sub_10001CD44(v1, v11);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
      sub_1010F2E38((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v14 = v13;
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
      *(void *)(v0 + 200) = sub_1008FA0F0(v12, v14, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
      *(_WORD *)(v9 + 22) = 258;
      *(unsigned char *)(v0 + 387) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to update metadata for: %{private,mask.hash}s, hint: %{public}hhu.", (uint8_t *)v9, 0x19u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 96);
    }
    swift_errorRelease();
  }
  uint64_t v15 = (void *)(*(void *)(v0 + 224) + *(int *)(*(void *)(v0 + 248) + 20));
  uint64_t v16 = v15[3];
  uint64_t v17 = v15[4];
  sub_10001CD44(v15, v16);
  if (sub_100EB7B8C(v16, v17))
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v19) {
      char v18 = 5;
    }
    else {
      char v18 = 6;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    char v18 = 5;
  }
  uint64_t v20 = *(void *)(v0 + 304);
  uint64_t v21 = *(void *)(v0 + 312);
  char v23 = *(int **)(v0 + 288);
  uint64_t v22 = *(void *)(v0 + 296);
  uint64_t v24 = *(void *)(v0 + 232);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 272) + 16))(v22, *(void *)(v0 + 224), *(void *)(v0 + 264));
  sub_10001D010((uint64_t)v15, v22 + v23[6]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v22 + v23[7], v24, v20);
  *(unsigned char *)(v22 + v23[5]) = v18;
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 368) = v25;
  *uint64_t v25 = v0;
  v25[1] = sub_1010ED8A4;
  uint64_t v26 = *(void *)(v0 + 296);
  return sub_101104A5C(v26);
}

uint64_t sub_1010EDF30()
{
  uint64_t v19 = v0;
  *(void *)(v0 + 208) = *(void *)(v0 + 376);
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if ((swift_dynamicCast() & 1) != 0 && *(unsigned char *)(v0 + 388) == 1)
  {
    sub_1010F2DD8(*(void *)(v0 + 296), (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    if (qword_101637468 != -1) {
      swift_once();
    }
    uint64_t v1 = *(void *)(v0 + 256);
    uint64_t v2 = *(void *)(v0 + 224);
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170F290);
    sub_1010F2D70(v2, v1, type metadata accessor for BeaconKeyManager.IndexInformation);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void *)(v0 + 296);
    uint64_t v8 = *(void *)(v0 + 256);
    if (v6)
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 141558531;
      *(void *)(v0 + 168) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      uint64_t v17 = v7;
      sub_1010F2E38((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 176) = sub_1008FA0F0(v11, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1010F2DD8(v8, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_WORD *)(v9 + 22) = 2112;
      swift_errorRetain();
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 160) = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v10 = v13;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to update metadata for: %{private,mask.hash}s, error: %@.", (uint8_t *)v9, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      swift_errorRelease();
      uint64_t v14 = v17;
    }
    else
    {

      swift_release();
      swift_errorRelease();
      swift_errorRelease();
      sub_1010F2DD8(v8, type metadata accessor for BeaconKeyManager.IndexInformation);
      swift_errorRelease();
      uint64_t v14 = v7;
    }
    sub_1010F2DD8(v14, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

unint64_t sub_1010EE3A0(unint64_t result, unint64_t a2)
{
  unint64_t v2 = a2 - result;
  if (a2 >= result)
  {
    if ((uint64_t)(a2 - result) >= 0) {
      return v2 == 0;
    }
  }
  else
  {
    if ((uint64_t)(result - a2) >= 0)
    {
      unint64_t v2 = a2 - result;
      return v2 == 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1010EE3D0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 424) = a3;
  *(void *)(v4 + 432) = a4;
  *(unsigned char *)(v4 + 657) = a2;
  *(void *)(v4 + 416) = a1;
  *(void *)(v4 + 440) = type metadata accessor for KeySyncMetadata();
  *(void *)(v4 + 448) = swift_task_alloc();
  sub_10000588C(&qword_10166B368);
  *(void *)(v4 + 456) = swift_task_alloc();
  uint64_t updated = type metadata accessor for RecordUpdateMaker.KeySyncRecordUpdate(0);
  *(void *)(v4 + 464) = updated;
  *(void *)(v4 + 472) = *(void *)(updated - 8);
  *(void *)(v4 + 480) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v4 + 488) = v6;
  *(void *)(v4 + 496) = *(void *)(v6 - 8);
  *(void *)(v4 + 504) = swift_task_alloc();
  sub_10000588C(&qword_10163F7B0);
  *(void *)(v4 + 512) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  *(void *)(v4 + 520) = v7;
  *(void *)(v4 + 528) = *(void *)(v7 - 8);
  *(void *)(v4 + 536) = swift_task_alloc();
  *(void *)(v4 + 544) = swift_task_alloc();
  return _swift_task_switch(sub_1010EE5F0, 0, 0);
}

uint64_t sub_1010EE5F0()
{
  uint64_t v25 = v0;
  uint64_t v1 = *(void *)(v0 + 544);
  uint64_t v2 = *(void *)(v0 + 528);
  uint64_t v3 = *(void *)(v0 + 520);
  static Date.trustedNow.getter(v1);
  sub_1010F2E38((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
  char v4 = dispatch thunk of static Comparable.< infix(_:_:)();
  os_log_type_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 552) = v5;
  *(void *)(v0 + 560) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v3);
  if (v4)
  {
    if (qword_101637468 != -1) {
      swift_once();
    }
    uint64_t v6 = *(void *)(v0 + 536);
    uint64_t v7 = *(void *)(v0 + 528);
    uint64_t v8 = *(void *)(v0 + 520);
    uint64_t v9 = *(void *)(v0 + 424);
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170F290);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void *)(v0 + 536);
    uint64_t v15 = *(void *)(v0 + 520);
    if (v13)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446210;
      sub_1010F2E38((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 376) = sub_1008FA0F0(v17, v18, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v5(v14, v15);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Incoming date %{public}s is in the future. Ignoring it.", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v5(*(void *)(v0 + 536), *(void *)(v0 + 520));
    }

    sub_1010F2D1C();
    swift_allocError();
    *uint64_t v21 = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  else
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 120))
    {
      sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      char v23 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 568) = v20;
      *uint64_t v20 = v0;
      v20[1] = sub_1010EEA68;
      return v23();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1010EEA68(uint64_t a1)
{
  *(void *)(*(void *)v1 + 576) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1010EEB68, 0, 0);
}

uint64_t sub_1010EEB68()
{
  uint64_t v1 = *(void *)(v0 + 576);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 176, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 200))
    {
      sub_10001CEB0((long long *)(v0 + 176), v0 + 136);
      sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
      uint64_t v10 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 584) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_1010EEDF4;
      return v10();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101637468 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170F290);
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unable to get BeaconStoreActor!", v7, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v8 = 0xD000000000000010;
    v8[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  return result;
}

uint64_t sub_1010EEDF4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 592) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1010EEEF4, 0, 0);
}

uint64_t sub_1010EEEF4()
{
  uint64_t v1 = (uint64_t)(v0 + 17);
  if (v0[74])
  {
    uint64_t v2 = (void *)v0[54];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = v2[3];
    uint64_t v4 = v2[4];
    sub_10001CD44(v2, v3);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 8) + 8) + 32))(v3);
    uint64_t v5 = v2[3];
    uint64_t v6 = v2[4];
    sub_10001CD44(v2, v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 184))(v5, v6);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[75] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1010EF1BC;
    uint64_t v8 = v0[68];
    uint64_t v10 = v0[63];
    uint64_t v9 = v0[64];
    return sub_1011044F4(v9, v10, v8);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637468 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170F290);
    BOOL v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No ObservationStoreService available!", v15, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v16 = 0xD000000000000017;
    v16[1] = 0x80000001013FB7A0;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_1010EF1BC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v0 + 552);
  uint64_t v3 = *(void *)(*v0 + 544);
  uint64_t v4 = *(void *)(*v0 + 520);
  uint64_t v5 = *(void *)(*v0 + 504);
  uint64_t v6 = *(void *)(*v0 + 496);
  uint64_t v7 = *(void *)(*v0 + 488);
  swift_task_dealloc();
  v2(v3, v4);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v1 + 608) = v8;
  *(void *)(v1 + 616) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v5, v7);
  return _swift_task_switch(sub_1010EF390, 0, 0);
}

uint64_t sub_1010EF390()
{
  uint64_t v44 = v0;
  uint64_t v1 = *(void *)(v0 + 416);
  sub_10001D010(v1, v0 + 216);
  sub_10000588C(&qword_10163FAB0);
  int v2 = swift_dynamicCast();
  sub_10001D010(v1, v0 + 296);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 296);
LABEL_4:
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 624) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1010EFB24;
    uint64_t v4 = *(void *)(v0 + 432);
    uint64_t v5 = *(void *)(v0 + 416);
    char v6 = *(unsigned char *)(v0 + 657);
    return sub_100E5F6B8(v4, v5, v6);
  }
  sub_10001CEB0((long long *)(v0 + 296), v0 + 256);
  if (swift_dynamicCast()) {
    goto LABEL_4;
  }
  uint64_t v8 = *(void *)(v0 + 464);
  uint64_t v9 = *(void *)(v0 + 472);
  uint64_t v10 = *(void *)(v0 + 456);
  sub_1010F0A14(*(NSObject **)(v0 + 432), *(uint64_t **)(v0 + 512), *(void *)(v0 + 424), *(void *)(v0 + 416), (uint64_t)_swiftEmptyArrayStorage, v10);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 456), &qword_10166B368);
    sub_1010F2D1C();
    uint64_t v11 = swift_allocError();
    *uint64_t v12 = 5;
    swift_willThrow();
    sub_10001DAB4(*(void *)(v0 + 512), &qword_10163F7B0);
    *(void *)(v0 + 368) = v11;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    if (swift_dynamicCast() && *(unsigned char *)(v0 + 656) == 1)
    {
      swift_errorRelease();
      sub_1001A1B70();
      swift_allocError();
      *BOOL v13 = 1;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      if (qword_101637468 != -1) {
        swift_once();
      }
      uint64_t v27 = *(void *)(v0 + 432);
      uint64_t v28 = type metadata accessor for Logger();
      sub_100010324(v28, (uint64_t)qword_10170F290);
      sub_10001D010(v27, v0 + 56);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
        uint64_t v31 = *(void *)(v0 + 504);
        uint64_t v32 = *(void *)(v0 + 488);
        uint64_t v33 = swift_slowAlloc();
        uint64_t v42 = (void *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 141558531;
        *(void *)(v0 + 392) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v33 + 12) = 2081;
        uint64_t v35 = *(void *)(v0 + 80);
        uint64_t v34 = *(void *)(v0 + 88);
        sub_10001CD44((void *)(v0 + 56), v35);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v34 + 8) + 8) + 32))(v35);
        sub_1010F2E38((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v38 = v37;
        v41(v31, v32);
        *(void *)(v0 + 400) = sub_1008FA0F0(v36, v38, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
        *(_WORD *)(v33 + 22) = 2114;
        swift_errorRetain();
        uint64_t v39 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 408) = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v42 = v39;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to update key sync with hint for beacon %{private,mask.hash}s %{public}@.", (uint8_t *)v33, 0x20u);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_willThrow();
      swift_release();
      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unsigned int v40 = *(uint64_t (**)(void))(v0 + 8);
    return v40();
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 528);
    uint64_t v15 = *(void *)(v0 + 520);
    uint64_t v16 = *(void *)(v0 + 480);
    uint64_t v17 = *(void *)(v0 + 464);
    uint64_t v19 = *(int **)(v0 + 440);
    uint64_t v18 = *(void *)(v0 + 448);
    uint64_t v20 = *(void **)(v0 + 432);
    sub_1010F2EA0(*(void *)(v0 + 456), v16, type metadata accessor for RecordUpdateMaker.KeySyncRecordUpdate);
    uint64_t v22 = v20[3];
    uint64_t v21 = v20[4];
    sub_10001CD44(v20, v22);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v21 + 8) + 8) + 32))(v22);
    uint64_t v23 = *(void *)(v16 + *(int *)(v17 + 20));
    uint64_t v24 = (void *)(v18 + v19[6]);
    v24[3] = &type metadata for PrimaryIndex;
    uint64_t v24[4] = sub_1001A1640();
    *uint64_t v24 = v23;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v18 + v19[7], v16, v15);
    *(unsigned char *)(v18 + v19[5]) = 7;
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 640) = v25;
    *uint64_t v25 = v0;
    v25[1] = sub_1010F0294;
    uint64_t v26 = *(void *)(v0 + 448);
    return sub_101104A5C(v26);
  }
}

uint64_t sub_1010EFB24(uint64_t a1)
{
  *(void *)(*(void *)v1 + 632) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1010EFC24, 0, 0);
}

uint64_t sub_1010EFC24()
{
  uint64_t v39 = v0;
  if (!*(void *)(v0 + 632))
  {
    char v4 = 4;
LABEL_5:
    sub_1010F2D1C();
    uint64_t v5 = swift_allocError();
    *char v6 = v4;
    swift_willThrow();
    sub_10001DAB4(*(void *)(v0 + 512), &qword_10163F7B0);
    *(void *)(v0 + 368) = v5;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    if (swift_dynamicCast() && *(unsigned char *)(v0 + 656) == 1)
    {
      swift_errorRelease();
      sub_1001A1B70();
      swift_allocError();
      *uint64_t v7 = 1;
      swift_willThrow();
      swift_release();
      swift_release();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      if (qword_101637468 != -1) {
        swift_once();
      }
      uint64_t v8 = *(void *)(v0 + 432);
      uint64_t v9 = type metadata accessor for Logger();
      sub_100010324(v9, (uint64_t)qword_10170F290);
      sub_10001D010(v8, v0 + 56);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
        uint64_t v12 = *(void *)(v0 + 504);
        uint64_t v13 = *(void *)(v0 + 488);
        uint64_t v14 = swift_slowAlloc();
        unint64_t v37 = (void *)swift_slowAlloc();
        uint64_t v38 = swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 141558531;
        *(void *)(v0 + 392) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v14 + 12) = 2081;
        uint64_t v16 = *(void *)(v0 + 80);
        uint64_t v15 = *(void *)(v0 + 88);
        sub_10001CD44((void *)(v0 + 56), v16);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v15 + 8) + 8) + 32))(v16);
        sub_1010F2E38((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v19 = v18;
        v36(v12, v13);
        *(void *)(v0 + 400) = sub_1008FA0F0(v17, v19, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
        *(_WORD *)(v14 + 22) = 2114;
        swift_errorRetain();
        uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 408) = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v37 = v20;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to update key sync with hint for beacon %{private,mask.hash}s %{public}@.", (uint8_t *)v14, 0x20u);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_willThrow();
      swift_release();
      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
    return v35();
  }
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v2 = *(void *)(v0 + 472);
  uint64_t v3 = *(void *)(v0 + 456);
  sub_1010F0A14(*(NSObject **)(v0 + 432), *(uint64_t **)(v0 + 512), *(void *)(v0 + 424), *(void *)(v0 + 416), *(void *)(v0 + 632), v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 456), &qword_10166B368);
    char v4 = 5;
    goto LABEL_5;
  }
  uint64_t v21 = *(void *)(v0 + 528);
  uint64_t v22 = *(void *)(v0 + 520);
  uint64_t v23 = *(void *)(v0 + 480);
  uint64_t v24 = *(void *)(v0 + 464);
  uint64_t v26 = *(int **)(v0 + 440);
  uint64_t v25 = *(void *)(v0 + 448);
  uint64_t v27 = *(void **)(v0 + 432);
  sub_1010F2EA0(*(void *)(v0 + 456), v23, type metadata accessor for RecordUpdateMaker.KeySyncRecordUpdate);
  uint64_t v29 = v27[3];
  uint64_t v28 = v27[4];
  sub_10001CD44(v27, v29);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v28 + 8) + 8) + 32))(v29);
  uint64_t v30 = *(void *)(v23 + *(int *)(v24 + 20));
  uint64_t v31 = (void *)(v25 + v26[6]);
  void v31[3] = &type metadata for PrimaryIndex;
  v31[4] = sub_1001A1640();
  *uint64_t v31 = v30;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v25 + v26[7], v23, v22);
  *(unsigned char *)(v25 + v26[5]) = 7;
  uint64_t v32 = (void *)swift_task_alloc();
  *(void *)(v0 + 640) = v32;
  *uint64_t v32 = v0;
  v32[1] = sub_1010F0294;
  uint64_t v33 = *(void *)(v0 + 448);
  return sub_101104A5C(v33);
}

uint64_t sub_1010F0294()
{
  *(void *)(*(void *)v1 + 648) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1010F04C4;
  }
  else {
    uint64_t v2 = sub_1010F03A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1010F03A8()
{
  uint64_t v1 = v0[64];
  uint64_t v2 = v0[60];
  uint64_t v3 = v0[56];
  swift_release();
  swift_release();
  sub_1010F2DD8(v3, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  sub_1010F2DD8(v2, type metadata accessor for RecordUpdateMaker.KeySyncRecordUpdate);
  sub_10001DAB4(v1, &qword_10163F7B0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1010F04C4()
{
  uint64_t v22 = v0;
  uint64_t v1 = *(void *)(v0 + 480);
  sub_1010F2DD8(*(void *)(v0 + 448), (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  sub_1010F2DD8(v1, type metadata accessor for RecordUpdateMaker.KeySyncRecordUpdate);
  uint64_t v2 = *(void *)(v0 + 648);
  sub_10001DAB4(*(void *)(v0 + 512), &qword_10163F7B0);
  *(void *)(v0 + 368) = v2;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if (swift_dynamicCast() && *(unsigned char *)(v0 + 656) == 1)
  {
    swift_errorRelease();
    sub_1001A1B70();
    swift_allocError();
    *uint64_t v3 = 1;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    if (qword_101637468 != -1) {
      swift_once();
    }
    uint64_t v4 = *(void *)(v0 + 432);
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170F290);
    sub_10001D010(v4, v0 + 56);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
      uint64_t v8 = *(void *)(v0 + 504);
      uint64_t v9 = *(void *)(v0 + 488);
      uint64_t v10 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 141558531;
      *(void *)(v0 + 392) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2081;
      uint64_t v12 = *(void *)(v0 + 80);
      uint64_t v11 = *(void *)(v0 + 88);
      sub_10001CD44((void *)(v0 + 56), v12);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v11 + 8) + 8) + 32))(v12);
      sub_1010F2E38((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v15 = v14;
      v19(v8, v9);
      *(void *)(v0 + 400) = sub_1008FA0F0(v13, v15, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
      *(_WORD *)(v10 + 22) = 2114;
      swift_errorRetain();
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 408) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v16;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to update key sync with hint for beacon %{private,mask.hash}s %{public}@.", (uint8_t *)v10, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
    swift_release();
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_1010F0990()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170F290);
  sub_100010324(v0, (uint64_t)qword_10170F290);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1010F0A14@<X0>(NSObject *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v70 = a6;
  uint64_t v71 = a5;
  uint64_t v68 = a1;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v63[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_10000588C(&qword_10166B368);
  __chkstk_darwin(v13 - 8);
  unint64_t v15 = &v63[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t updated = type metadata accessor for RecordUpdateMaker.RecordUpdateContext(0);
  __chkstk_darwin(updated);
  unint64_t v18 = &v63[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v69 = a4;
  sub_10001D010(a4, (uint64_t)v76);
  sub_10000588C(&qword_10163FAB0);
  if (swift_dynamicCast())
  {
    uint64_t v65 = v12;
    uint64_t v66 = v10;
    uint64_t v67 = v9;
    uint64_t v19 = v74[0];
    uint64_t v20 = (char *)v18 + *(int *)(sub_10000588C(&qword_10166B378) + 48);
    *unint64_t v18 = v19;
    uint64_t v21 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v20, a3, v21);
    swift_storeEnumTagMultiPayload();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v76);
    goto LABEL_6;
  }
  if ((swift_dynamicCast() & 1) != 0 || swift_dynamicCast())
  {
    uint64_t v65 = v12;
    uint64_t v66 = v10;
    uint64_t v67 = v9;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v76);
    uint64_t v22 = *a2;
    uint64_t v23 = sub_10000588C(&qword_10163F7B0);
    uint64_t v24 = a3;
    unint64_t v25 = sub_1008B6464(v68, v22, (uint64_t)a2 + *(int *)(v23 + 36), a3);
    uint64_t v27 = v26;
    uint64_t v28 = (int *)sub_10000588C(&qword_10166B370);
    uint64_t v29 = (char *)v18 + v28[12];
    uint64_t v30 = (char *)v18 + v28[16];
    uint64_t v31 = v28[20];
    sub_10001D010(v69, (uint64_t)v18);
    uint64_t v32 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v29, v24, v32);
    *(void *)uint64_t v30 = v25;
    *((void *)v30 + 1) = v27;
    v30[16] = 0;
    *(void *)((char *)v18 + v31) = v71;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
LABEL_6:
    sub_1010F1A00((uint64_t)v18, (uint64_t)v15);
    uint64_t v33 = type metadata accessor for RecordUpdateMaker.KeySyncRecordUpdate(0);
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v34 + 48))(v15, 1, v33) == 1)
    {
      sub_10001DAB4((uint64_t)v15, &qword_10166B368);
      if (qword_101637468 != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      sub_100010324(v35, (uint64_t)qword_10170F290);
      sub_10001D010((uint64_t)v68, (uint64_t)v76);
      sub_10001D010(v69, (uint64_t)v74);
      swift_bridgeObjectRetain_n();
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.info.getter();
      int v38 = v37;
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v39 = swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        uint64_t v69 = v40;
        *(_DWORD *)uint64_t v39 = 141558787;
        uint64_t v72 = 1752392040;
        uint64_t v73 = v40;
        uint64_t v68 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v39 + 12) = 2081;
        int v64 = v38;
        uint64_t v42 = v77;
        uint64_t v41 = v78;
        sub_10001CD44(v76, v77);
        uint64_t v43 = v65;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v41 + 8) + 8) + 32))(v42);
        sub_1010F2E38((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v44 = v67;
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v47 = v46;
        (*(void (**)(unsigned char *, uint64_t))(v66 + 8))(v43, v44);
        uint64_t v72 = sub_1008FA0F0(v45, v47, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v76);
        *(_WORD *)(v39 + 22) = 2048;
        sub_10001CD44(v74, v75);
        dispatch thunk of RawRepresentable.rawValue.getter();
        uint64_t v48 = v72;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v74);
        uint64_t v72 = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v39 + 32) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v49 = Array.description.getter();
        unint64_t v51 = v50;
        swift_bridgeObjectRelease();
        uint64_t v72 = sub_1008FA0F0(v49, v51, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v52 = v68;
        _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v64, "Ignore updateKeySyncRecord for %{private,mask.hash}s.\nindexObserved %llu,\nhintBasedIndexes = %{public}s.", (uint8_t *)v39, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v74);
        swift_bridgeObjectRelease_n();

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v76);
      }
      sub_1010F2DD8((uint64_t)v18, type metadata accessor for RecordUpdateMaker.RecordUpdateContext);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v70, 1, 1, v33);
    }
    else
    {
      sub_1010F2DD8((uint64_t)v18, type metadata accessor for RecordUpdateMaker.RecordUpdateContext);
      uint64_t v53 = v70;
      sub_1010F2EA0((uint64_t)v15, v70, type metadata accessor for RecordUpdateMaker.KeySyncRecordUpdate);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v53, 0, 1, v33);
    }
  }
  if (qword_101637468 != -1) {
    swift_once();
  }
  uint64_t v55 = type metadata accessor for Logger();
  sub_100010324(v55, (uint64_t)qword_10170F290);
  sub_10001D010(v69, (uint64_t)v74);
  int v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    *(_DWORD *)uint64_t v58 = 136446210;
    uint64_t v59 = v75;
    sub_10001CD44(v74, v75);
    uint64_t v60 = sub_1010EC7E8(v59);
    uint64_t v72 = sub_1008FA0F0(v60, v61, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v74);
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Unsupported index type for KeySyncRecord change!\nReceived %{public}s", v58, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v74);
  }

  uint64_t v62 = type metadata accessor for RecordUpdateMaker.KeySyncRecordUpdate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v70, 1, 1, v62);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v76);
}

uint64_t sub_1010F1360(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeySyncMetadata();
  uint64_t v5 = (void *)(a2 + *(int *)(v4 + 24));
  sub_10001CD44(v5, v5[3]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v6 = (void *)(a1 + *(int *)(v4 + 24));
  sub_10001CD44(v6, v6[3]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v10 >= v11)
  {
    sub_10001CD44(v5, v5[3]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    sub_10001CD44(v6, v6[3]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v11 == v10)
    {
      Date.timeIntervalSince(_:)();
      char v7 = v8 >= 900.0;
    }
    else
    {
      char v7 = 0;
    }
  }
  else
  {
    type metadata accessor for Date();
    sub_1010F2E38((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
    char v7 = dispatch thunk of static Comparable.< infix(_:_:)() ^ 1;
  }
  return v7 & 1;
}

uint64_t sub_1010F1510()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  double v8 = (char *)&v38 - v7;
  uint64_t updated = type metadata accessor for RecordUpdateMaker.RecordUpdateContext(0);
  __chkstk_darwin(updated);
  unint64_t v11 = (long long *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1010F2D70(v1, (uint64_t)v11, type metadata accessor for RecordUpdateMaker.RecordUpdateContext);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_10000588C(&qword_10166B370);
    uint64_t v13 = (char *)v11 + *(int *)(v12 + 48);
    uint64_t v14 = (char *)v11 + *(int *)(v12 + 64);
    uint64_t v15 = *(void *)v14;
    uint64_t v16 = *((void *)v14 + 1);
    char v17 = v14[16];
    sub_10001CEB0(v11, (uint64_t)&v44);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v13, v2);
    v43._uint64_t countAndFlagsBits = 0;
    v43._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    v43._uint64_t countAndFlagsBits = 0x28646C6977;
    v43._object = (void *)0xE500000000000000;
    uint64_t v18 = v46;
    sub_10001CD44(&v44, v46);
    v19._uint64_t countAndFlagsBits = sub_1010EC7E8(v18);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 8236;
    v20._object = (void *)0xE200000000000000;
    String.append(_:)(v20);
    sub_1010F2E38((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 8236;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    if (v17)
    {
      unint64_t v23 = 0xE300000000000000;
      uint64_t v24 = 7104878;
    }
    else
    {
      uint64_t v41 = v16;
      uint64_t v42 = v15;
      uint64_t v39 = 0;
      unint64_t v40 = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)();
      v32._uint64_t countAndFlagsBits = 3026478;
      v32._object = (void *)0xE300000000000000;
      String.append(_:)(v32);
      _print_unlocked<A, B>(_:_:)();
      uint64_t v24 = v39;
      unint64_t v23 = v40;
    }
    unint64_t v33 = v23;
    String.append(_:)(*(Swift::String *)&v24);
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 8236;
    v34._object = (void *)0xE200000000000000;
    String.append(_:)(v34);
    v35._uint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 41;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    uint64_t countAndFlagsBits = v43._countAndFlagsBits;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v44);
  }
  else
  {
    uint64_t v25 = *(void *)v11;
    uint64_t v26 = sub_10000588C(&qword_10166B378);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, (char *)v11 + *(int *)(v26 + 48), v2);
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    uint64_t v44 = 0x656E774F7261656ELL;
    unint64_t v45 = 0xEA00000000002872;
    v43._uint64_t countAndFlagsBits = 0x7972616D6972702ELL;
    v43._object = (void *)0xE900000000000028;
    uint64_t v39 = v25;
    v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 41;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 8236;
    v29._object = (void *)0xE200000000000000;
    String.append(_:)(v29);
    sub_1010F2E38((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v44;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  return countAndFlagsBits;
}

uint64_t sub_1010F1A00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (unint64_t)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for RecordUpdateMaker.RecordUpdateContext(0);
  uint64_t v9 = __chkstk_darwin(updated);
  unint64_t v11 = ((char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  uint64_t v13 = (long long *)((char *)&v67 - v12);
  sub_1010F2D70(a1, (uint64_t)&v67 - v12, type metadata accessor for RecordUpdateMaker.RecordUpdateContext);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v29 = *(void *)v13;
    uint64_t v30 = sub_10000588C(&qword_10166B378);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, (char *)v13 + *(int *)(v30 + 48), v4);
    uint64_t v31 = type metadata accessor for RecordUpdateMaker.KeySyncRecordUpdate(0);
    *(void *)(a2 + *(int *)(v31 + 20)) = v29;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(a2, 0, 1, v31);
  }
  os_log_t v69 = v11;
  unint64_t v70 = updated;
  uint64_t v14 = (int *)sub_10000588C(&qword_10166B370);
  uint64_t v15 = (char *)v13 + v14[12];
  uint64_t v16 = (char *)v13 + v14[16];
  uint64_t v17 = v4;
  unint64_t v19 = *(void *)v16;
  unint64_t v18 = *((void *)v16 + 1);
  LOBYTE(v4) = v16[16];
  uint64_t v20 = *(void *)((char *)v13 + v14[20]);
  sub_10001CEB0(v13, (uint64_t)v79);
  uint64_t v72 = v17;
  uint64_t v73 = v5;
  Swift::String v21 = *(void (**)(unint64_t, char *, uint64_t))(v5 + 32);
  unint64_t v71 = v7;
  v21(v7, v15, v17);
  uint64_t v22 = *(void *)(v20 + 16);
  if (!v22)
  {
    swift_bridgeObjectRelease();
    if (qword_101637468 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100010324(v36, (uint64_t)qword_10170F290);
    sub_10001D010((uint64_t)v79, (uint64_t)v77);
    os_log_type_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v35 = v73;
    if (v39)
    {
      unint64_t v40 = (uint8_t *)swift_slowAlloc();
      v74[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v40 = 136446210;
      uint64_t v41 = v78;
      sub_10001CD44(v77, v78);
      uint64_t v42 = sub_1010EC7E8(v41);
      uint64_t v76 = sub_1008FA0F0(v42, v43, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v77);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Empty hintBasedIndexes array for %{public}s", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_40:
      (*(void (**)(unint64_t, uint64_t))(v35 + 8))(v71, v72);
      goto LABEL_41;
    }

LABEL_39:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v77);
    goto LABEL_40;
  }
  uint64_t v68 = a2;
  swift_bridgeObjectRetain();
  uint64_t v23 = 0;
  uint64_t v24 = _swiftEmptyArrayStorage;
  do
  {
    if ((v4 & 1) == 0)
    {
      unint64_t v26 = *(void *)(v20 + 8 * v23 + 32);
      if (v26 >= v19 && v18 >= v26)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v77[0] = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000B7868(0, v24[2] + 1, 1);
          uint64_t v24 = (void *)v77[0];
        }
        unint64_t v7 = v24[2];
        unint64_t v25 = v24[3];
        if (v7 >= v25 >> 1)
        {
          sub_1000B7868(v25 > 1, v7 + 1, 1);
          uint64_t v24 = (void *)v77[0];
        }
        v24[2] = v7 + 1;
        v24[v7 + 4] = v26;
      }
    }
    ++v23;
  }
  while (v22 != v23);
  swift_bridgeObjectRelease();
  int64_t v33 = *(void *)(v20 + 16);
  a2 = v68;
  if (v33 == 1)
  {
    Swift::String v34 = *(objc_class **)(v20 + 32);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v4 = v72;
    uint64_t v35 = v73;
LABEL_26:
    uint64_t v45 = sub_10000588C(&qword_10166B378);
    os_log_t v46 = v69;
    unint64_t v47 = (char *)v69 + *(int *)(v45 + 48);
    v69->Class isa = v34;
    unint64_t v48 = v71;
    (*(void (**)(char *, unint64_t, uint64_t))(v35 + 16))(v47, v71, v4);
    swift_storeEnumTagMultiPayload();
    sub_1010F1A00(v46);
    sub_1010F2DD8((uint64_t)v46, type metadata accessor for RecordUpdateMaker.RecordUpdateContext);
    (*(void (**)(unint64_t, uint64_t))(v35 + 8))(v48, v4);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v79);
  }
  uint64_t v35 = v73;
  if (v24[2] == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = v72;
    unint64_t v44 = v70;
    if (v24[2])
    {
      Swift::String v34 = (objc_class *)v24[4];
      swift_release();
      goto LABEL_26;
    }
    __break(1u);
    goto LABEL_43;
  }
  swift_release();
  if (v33)
  {
    v77[0] = _swiftEmptyArrayStorage;
    sub_1000B6F10(0, v33, 0);
    uint64_t v49 = 0;
    uint64_t v50 = v77[0];
    unint64_t v51 = *(void *)(v77[0] + 16);
    do
    {
      uint64_t v52 = *(void *)(v20 + 8 * v49 + 32);
      v77[0] = v50;
      unint64_t v53 = *(void *)(v50 + 24);
      if (v51 >= v53 >> 1)
      {
        sub_1000B6F10(v53 > 1, v51 + 1, 1);
        uint64_t v50 = v77[0];
      }
      ++v49;
      *(void *)(v50 + 16) = v51 + 1;
      *(void *)(v50 + 8 * v51++ + 32) = v52;
    }
    while (v33 != v49);
    swift_bridgeObjectRelease();
    a2 = v68;
    uint64_t v35 = v73;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  unint64_t v7 = Array.description.getter();
  unint64_t v44 = v54;
  swift_bridgeObjectRelease();
  if (qword_101637468 != -1) {
LABEL_43:
  }
    swift_once();
  uint64_t v55 = type metadata accessor for Logger();
  sub_100010324(v55, (uint64_t)qword_10170F290);
  sub_10001D010((uint64_t)v79, (uint64_t)v77);
  swift_bridgeObjectRetain();
  int v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.error.getter();
  int v58 = v57;
  if (!os_log_type_enabled(v56, v57))
  {
    swift_bridgeObjectRelease_n();

    goto LABEL_39;
  }
  uint64_t v59 = swift_slowAlloc();
  uint64_t v73 = swift_slowAlloc();
  uint64_t v76 = v73;
  *(_DWORD *)uint64_t v59 = 136446722;
  LODWORD(v70) = v58;
  uint64_t v68 = v7;
  os_log_t v69 = v56;
  uint64_t v60 = v78;
  sub_10001CD44(v77, v78);
  uint64_t v61 = sub_1010EC7E8(v60);
  v74[0] = sub_1008FA0F0(v61, v62, &v76);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v77);
  *(_WORD *)(v59 + 12) = 2082;
  v74[0] = v19;
  v74[1] = v18;
  char v75 = v4;
  sub_10000588C(&qword_10166B380);
  uint64_t v63 = String.init<A>(describing:)();
  v74[0] = sub_1008FA0F0(v63, v64, &v76);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v59 + 22) = 2082;
  swift_bridgeObjectRetain();
  v74[0] = sub_1008FA0F0(v68, v44, &v76);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  os_log_t v65 = v69;
  _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v70, "Ambiguous primary index for %{public}s\nmodelIndexRange = %{public}s,\nhintBasedIndexes = %{public}s.", (uint8_t *)v59, 0x20u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(unint64_t, uint64_t))(v35 + 8))(v71, v72);
LABEL_41:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v79);
  uint64_t v66 = type metadata accessor for RecordUpdateMaker.KeySyncRecordUpdate(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(a2, 1, 1, v66);
}

uint64_t sub_1010F2304(uint64_t a1, uint64_t a2)
{
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t result = type metadata accessor for RecordUpdateMaker.KeySyncRecordUpdate(0);
  uint64_t v5 = *(int *)(result + 20);
  unint64_t v6 = *(void *)(a1 + v5);
  unint64_t v7 = *(void *)(a2 + v5);
  unint64_t v8 = v7 - v6;
  if (v7 >= v6)
  {
    if ((uint64_t)(v7 - v6) >= 0) {
      return v8 == 0;
    }
  }
  else
  {
    if ((uint64_t)(v6 - v7) >= 0)
    {
      unint64_t v8 = v7 - v6;
      return v8 == 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1010F2378(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeySyncMetadata();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0) + 6;
  switch(*(unsigned char *)(a1 + *(int *)(v3 + 20)))
  {
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      sub_10001D010(a1 + *(int *)(v2 + 24), (uint64_t)v11);
      sub_10000588C(&qword_10163FAB0);
      goto LABEL_3;
    case 3:
      sub_10001D010(a1 + *(int *)(v2 + 24), (uint64_t)v11);
      sub_10000588C(&qword_10163FAB0);
      int v9 = swift_dynamicCast();
      sub_1010F2D70(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      if (v9) {
        return sub_1010F2DD8((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      }
      sub_10001D010((uint64_t)&v5[*(int *)(v2 + 24)], (uint64_t)v11);
      sub_1010F2DD8((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
LABEL_3:
      uint64_t result = swift_dynamicCast();
      if ((result & 1) == 0)
      {
        sub_1010F2D1C();
        swift_allocError();
        char v8 = 2;
LABEL_6:
        *unint64_t v7 = v8;
        return swift_willThrow();
      }
      return result;
    default:
      sub_1010F2D1C();
      swift_allocError();
      char v8 = 0;
      goto LABEL_6;
  }
}

uint64_t sub_1010F2604(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10166CF60);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for KeySyncMetadata();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v35 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v35 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  unint64_t v19 = (char *)&v35 - v18;
  if (!*(unsigned char *)(a1 + *(int *)(__chkstk_darwin(v17) + 20)))
  {
    sub_1010F2D1C();
    swift_allocError();
    *uint64_t v22 = 0;
    swift_willThrow();
    return v7 & 1;
  }
  uint64_t v36 = v21;
  uint64_t v41 = (uint64_t)&v35 - v20;
  sub_1010F2378(a1);
  if (v2) {
    return v7 & 1;
  }
  sub_10001D074(a2, v7, (uint64_t *)&unk_10166CF60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10001DAB4(v7, (uint64_t *)&unk_10166CF60);
    LOBYTE(v7) = 1;
    return v7 & 1;
  }
  uint64_t v23 = v41;
  sub_1010F2EA0(v7, v41, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  uint64_t v24 = *(int *)(v8 + 24);
  uint64_t v7 = a1 + v24;
  unint64_t v25 = (unint64_t)v40;
  sub_10001D010(v23 + v24, (uint64_t)v39);
  sub_10001D010(v7, (uint64_t)v40);
  LOBYTE(v7) = sub_10000588C(&qword_10166B310);
  sub_10000588C(&qword_10166B318);
  if (swift_dynamicCast()) {
    goto LABEL_13;
  }
  sub_10000588C(&qword_10166B320);
  if (swift_dynamicCast()
    || (sub_10000588C(&qword_10166B328), swift_dynamicCast())
    || (sub_10000588C(&qword_10166B330), swift_dynamicCast())
    || (sub_10000588C(&qword_10166B338), swift_dynamicCast()))
  {
    uint64_t v23 = v41;
LABEL_13:
    LOBYTE(v7) = sub_1010F1360(v23, a1);
    uint64_t v26 = v23;
LABEL_14:
    sub_1010F2DD8(v26, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
LABEL_15:
    sub_10001DAB4((uint64_t)v39, &qword_10166B310);
    return v7 & 1;
  }
  sub_10000588C(&qword_10166B340);
  uint64_t result = swift_dynamicCast();
  if (!result) {
    goto LABEL_25;
  }
  unint64_t v28 = v38;
  if (!v37)
  {
    unint64_t v25 = 0;
    goto LABEL_30;
  }
  if (!is_mul_ok(v37, 0x60uLL))
  {
    __break(1u);
    goto LABEL_48;
  }
  if (96 * v37 - 96 <= 1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = 96 * v37 - 96;
  }
  if (96 * v37 - 1 >= v25)
  {
LABEL_30:
    sub_1010F2D70(a1, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    sub_1010F2D70(v41, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    if (v28 >= v25)
    {
      type metadata accessor for Date();
      sub_1010F2E38((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
      LOBYTE(v7) = dispatch thunk of static Comparable.< infix(_:_:)() ^ 1;
    }
    else
    {
      LOBYTE(v7) = 0;
    }
    sub_1010F2DD8((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    sub_1010F2DD8((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    uint64_t v26 = v41;
    goto LABEL_14;
  }
  __break(1u);
LABEL_25:
  sub_10000588C(&qword_10166B348);
  if (!swift_dynamicCast())
  {
    sub_1010F2D1C();
    swift_allocError();
    *uint64_t v31 = 1;
    swift_willThrow();
    sub_1010F2DD8(v41, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v39);
    return v7 & 1;
  }
  unint64_t v29 = v38;
  if (v37) {
    unint64_t v30 = v37 / 0x60 + 1;
  }
  else {
    unint64_t v30 = 0;
  }
  sub_1010F2D70(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  uint64_t v32 = v36;
  sub_1010F2D70(v41, v36, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  if (v30 >= v29)
  {
    char v33 = 0;
  }
  else
  {
    uint64_t v35 = v32 + *(int *)(v8 + 28);
    type metadata accessor for Date();
    sub_1010F2E38((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
    char v33 = dispatch thunk of static Comparable.< infix(_:_:)() ^ 1;
  }
  sub_1010F2DD8(v32, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  sub_1010F2DD8((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  uint64_t v34 = v41;
  uint64_t result = static Date.> infix(_:_:)();
  if ((result & 1) == 0)
  {
    sub_1010F2DD8(v34, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    if ((v33 & 1) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_15;
    }
    goto LABEL_45;
  }
  uint64_t v7 = v30 - v29;
  if (v30 >= v29)
  {
LABEL_42:
    sub_1010F2DD8(v41, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    if ((v33 & 1) == 0)
    {
      LOBYTE(v7) = v7 == 0;
      goto LABEL_15;
    }
LABEL_45:
    LOBYTE(v7) = 1;
    goto LABEL_15;
  }
  if ((uint64_t)(v29 - v30) >= 0)
  {
    uint64_t v7 = v30 - v29;
    goto LABEL_42;
  }
LABEL_48:
  __break(1u);
  return result;
}

unint64_t sub_1010F2D1C()
{
  unint64_t result = qword_10166B350;
  if (!qword_10166B350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10166B350);
  }
  return result;
}

uint64_t sub_1010F2D70(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1010F2DD8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1010F2E38(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for RecordUpdateMaker.KeySyncRecordUpdate(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10166B488);
}

uint64_t sub_1010F2EA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for RecordUpdateMaker.RecordUpdateContext(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10166B3F8);
}

uint64_t sub_1010F2F28(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
      uint64_t v7 = (int *)sub_10000588C(&qword_10166B370);
      uint64_t v8 = v7[12];
      uint64_t v9 = a1 + v8;
      uint64_t v10 = (uint64_t)a2 + v8;
      uint64_t v11 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      uint64_t v12 = v7[16];
      uint64_t v13 = a1 + v12;
      uint64_t v14 = (uint64_t)a2 + v12;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
      *(void *)(a1 + v7[20]) = *(uint64_t *)((char *)a2 + v7[20]);
      swift_bridgeObjectRetain();
    }
    else
    {
      *(void *)a1 = *a2;
      uint64_t v16 = *(int *)(sub_10000588C(&qword_10166B378) + 48);
      uint64_t v17 = a1 + v16;
      uint64_t v18 = (uint64_t)a2 + v16;
      uint64_t v19 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1010F3104(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    uint64_t v2 = a1 + *(int *)(sub_10000588C(&qword_10166B370) + 48);
    uint64_t v3 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = a1 + *(int *)(sub_10000588C(&qword_10166B378) + 48);
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    return v7(v5, v6);
  }
}

uint64_t sub_1010F3210(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
    uint64_t v5 = (int *)sub_10000588C(&qword_10166B370);
    uint64_t v6 = v5[12];
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    uint64_t v9 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    uint64_t v10 = v5[16];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = a2 + v10;
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
    *(void *)(a1 + v5[20]) = *(void *)(a2 + v5[20]);
    swift_bridgeObjectRetain();
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v13 = *(int *)(sub_10000588C(&qword_10166B378) + 48);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = a2 + v13;
    uint64_t v16 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_1010F339C(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_1010F2DD8((uint64_t)a1, type metadata accessor for RecordUpdateMaker.RecordUpdateContext);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = a2[3];
      a1[3] = v4;
      a1[4] = a2[4];
      (**(void (***)(void *, void *))(v4 - 8))(a1, a2);
      uint64_t v5 = (int *)sub_10000588C(&qword_10166B370);
      uint64_t v6 = v5[12];
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      uint64_t v10 = v5[16];
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      char v13 = v12[16];
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      unsigned char v11[16] = v13;
      *(void *)((char *)a1 + v5[20]) = *(void *)((char *)a2 + v5[20]);
      swift_bridgeObjectRetain();
    }
    else
    {
      *a1 = *a2;
      uint64_t v14 = *(int *)(sub_10000588C(&qword_10166B378) + 48);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1010F3550(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    uint64_t v5 = (int *)sub_10000588C(&qword_10166B370);
    uint64_t v6 = v5[12];
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    uint64_t v9 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    uint64_t v10 = v5[16];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = a2 + v10;
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
    *(void *)(a1 + v5[20]) = *(void *)(a2 + v5[20]);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v13 = *(int *)(sub_10000588C(&qword_10166B378) + 48);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = a2 + v13;
    uint64_t v16 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1010F36AC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1010F2DD8(a1, type metadata accessor for RecordUpdateMaker.RecordUpdateContext);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v5 = (int *)sub_10000588C(&qword_10166B370);
      uint64_t v6 = v5[12];
      uint64_t v7 = a1 + v6;
      uint64_t v8 = a2 + v6;
      uint64_t v9 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      uint64_t v10 = v5[16];
      uint64_t v11 = a1 + v10;
      uint64_t v12 = a2 + v10;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
      *(void *)(a1 + v5[20]) = *(void *)(a2 + v5[20]);
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v13 = *(int *)(sub_10000588C(&qword_10166B378) + 48);
      uint64_t v14 = a1 + v13;
      uint64_t v15 = a2 + v13;
      uint64_t v16 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1010F382C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    long long v4 = &v3;
    swift_getTupleTypeLayout();
    uint64_t v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordUpdateMaker()
{
  return &type metadata for RecordUpdateMaker;
}

uint64_t *sub_1010F3928(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_1010F39F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1010F3A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1010F3AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1010F3B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1010F3BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1010F3C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010F3C5C);
}

uint64_t sub_1010F3C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1010F3CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010F3CDC);
}

uint64_t sub_1010F3CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1010F3D4C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RecordUpdateMaker.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010F3EB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordUpdateMaker.Error()
{
  return &type metadata for RecordUpdateMaker.Error;
}

unint64_t sub_1010F3EEC()
{
  unint64_t result = qword_10166B4C0;
  if (!qword_10166B4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166B4C0);
  }
  return result;
}

uint64_t initializeWithCopy for TagUserStatistics(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *a2;
    sub_1000361E0(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_WORD *)(a1 + 18) = *((_WORD *)a2 + 9);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(void *)(a1 + 40) = a2[5];
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
  return a1;
}

uint64_t assignWithCopy for TagUserStatistics(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *(void *)a2;
      sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
      uint64_t v7 = *(void *)a1;
      unint64_t v8 = *(void *)(a1 + 8);
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v4;
      sub_10001CFB8(v7, v8);
      goto LABEL_8;
    }
    sub_1001356D0(a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)a2;
  sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
LABEL_8:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for TagUserStatistics(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = *(void *)(a2 + 8);
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *(void *)a1;
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      sub_10001CFB8(v6, v4);
      goto LABEL_6;
    }
    sub_1001356D0(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for TagUserStatistics(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xC && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 12);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * v3) & 0xC) != 0) {
    int v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TagUserStatistics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)unint64_t result = a2 - 12;
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TagUserStatistics()
{
  return &type metadata for TagUserStatistics;
}

uint64_t sub_1010F4230@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  switch((char)result)
  {
    case 0:
      uint64_t v4 = *(unsigned __int8 *)(v2 + 16);
      goto LABEL_23;
    case 1:
      char v5 = *(unsigned char *)(v2 + 16);
      unsigned __int8 v6 = 1;
      goto LABEL_9;
    case 2:
      char v5 = *(unsigned char *)(v2 + 16);
      unsigned __int8 v6 = 2;
      goto LABEL_9;
    case 3:
      char v5 = *(unsigned char *)(v2 + 16);
      unsigned __int8 v6 = 3;
      goto LABEL_9;
    case 4:
      char v5 = *(unsigned char *)(v2 + 16);
      unsigned __int8 v6 = 4;
      goto LABEL_9;
    case 5:
      char v5 = *(unsigned char *)(v2 + 16);
      unsigned __int8 v6 = 5;
      goto LABEL_9;
    case 6:
      char v5 = *(unsigned char *)(v2 + 16);
      unsigned __int8 v6 = 6;
LABEL_9:
      unint64_t result = sub_1010F43B4(v6, v5);
      *(unsigned char *)a2 = result & 1;
      *(_WORD *)(a2 + 40) = 0;
      return result;
    case 7:
      uint64_t v4 = *(unsigned __int16 *)(v2 + 18);
      goto LABEL_23;
    case 8:
      uint64_t v4 = *(void *)(v2 + 24);
      if ((v4 & 0x8000000000000000) == 0) {
        goto LABEL_23;
      }
      __break(1u);
LABEL_13:
      uint64_t v4 = *(void *)(v2 + 32);
      if (v4 < 0)
      {
        __break(1u);
LABEL_15:
        uint64_t v4 = *(void *)(v2 + 40);
        if (v4 < 0)
        {
          __break(1u);
LABEL_17:
          uint64_t v4 = *(unsigned int *)(v2 + 48);
        }
      }
LABEL_23:
      *(void *)a2 = v4;
      *(unsigned char *)(a2 + 41) = 1;
      return result;
    case 9:
      goto LABEL_13;
    case 10:
      goto LABEL_15;
    case 11:
      goto LABEL_17;
    case 12:
      uint64_t v4 = *(unsigned int *)(v2 + 52);
      goto LABEL_23;
    case 13:
      uint64_t v4 = *(unsigned int *)(v2 + 56);
      goto LABEL_23;
    case 14:
      uint64_t v4 = *(unsigned int *)(v2 + 60);
      goto LABEL_23;
    case 16:
      uint64_t v4 = *(unsigned __int8 *)(v2 + 64);
      goto LABEL_23;
    default:
      sub_1010F4E94();
      swift_allocError();
      return swift_willThrow();
  }
}

uint64_t sub_1010F43B4(unsigned __int8 a1, char a2)
{
  uint64_t v4 = type metadata accessor for Bit();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v15[-v9];
  v15[15] = a2;
  sub_10006145C();
  uint64_t result = FixedWidthInteger.bits()();
  unint64_t v12 = 7 - a1;
  if (v12 >= *(void *)(result + 16))
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(unsigned char *, unint64_t, uint64_t))(v5 + 16))(v10, result+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v12, v4);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, void, uint64_t))(v5 + 104))(v8, enum case for Bit.one(_:), v4);
    sub_1000D0E58();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    BOOL v13 = v15[14] == v15[13];
    uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
    return v13;
  }
  return result;
}

uint64_t sub_1010F4594(char a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for Endianness();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v10) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x1010F4764);
      }
      uint64_t v10 = (int)v10;
LABEL_6:
      if (v10 > qword_10138F750[a1])
      {
        Data._Representation.subscript.getter();
        (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Endianness.little(_:), v6);
        sub_10006145C();
        FixedWidthInteger.init(data:ofEndianness:)();
        if ((v18 & 1) == 0) {
          return v17;
        }
      }
LABEL_8:
      sub_1010F4E40();
      swift_allocError();
      *uint64_t v14 = 0;
      return swift_willThrow();
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v11 = *(void *)(a2 + 24);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v10 = v11 - v12;
      if (!v13) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v10 = BYTE6(a3);
      goto LABEL_6;
  }
}

uint64_t sub_1010F4774(char a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for Endianness();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v10) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x1010F4944);
      }
      uint64_t v10 = (int)v10;
LABEL_6:
      if (v10 >= qword_10138F750[a1] + 2)
      {
        Data._Representation.subscript.getter();
        (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Endianness.little(_:), v6);
        sub_100179818();
        FixedWidthInteger.init(data:ofEndianness:)();
        if ((v18 & 1) == 0) {
          return v17;
        }
      }
LABEL_8:
      sub_1010F4E40();
      swift_allocError();
      *uint64_t v14 = 0;
      return swift_willThrow();
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v11 = *(void *)(a2 + 24);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v10 = v11 - v12;
      if (!v13) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v10 = BYTE6(a3);
      goto LABEL_6;
  }
}

uint64_t sub_1010F4954(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Endianness();
  __chkstk_darwin(v4 - 8);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x1010F4AA8);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 == 1)
      {
        sub_1000361E0(a1, a2);
        static Endianness.current.getter();
        sub_10006145C();
        FixedWidthInteger.init(data:ofEndianness:)();
        if (v11 != 1) {
          return v10;
        }
      }
LABEL_8:
      sub_1010F4AB8();
      swift_allocError();
      return swift_willThrow();
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_1010F4AB8()
{
  unint64_t result = qword_10166B4C8;
  if (!qword_10166B4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166B4C8);
  }
  return result;
}

uint64_t sub_1010F4B0C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v13) = HIDWORD(a1) - a1;
      if (!__OFSUB__(HIDWORD(a1), a1))
      {
        uint64_t v13 = (int)v13;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_15;
    case 2uLL:
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v14 = *(void *)(a1 + 24);
      BOOL v16 = __OFSUB__(v14, v15);
      uint64_t v13 = v14 - v15;
      if (!v16) {
        goto LABEL_6;
      }
LABEL_15:
      __break(1u);
      goto LABEL_16;
    case 3uLL:
      goto LABEL_10;
    default:
      uint64_t v13 = BYTE6(a2);
LABEL_6:
      if (v13 != 19)
      {
LABEL_10:
        sub_1010F4E40();
        swift_allocError();
        *uint64_t v21 = 0;
LABEL_11:
        swift_willThrow();
        return sub_10001CFB8(a1, a2);
      }
      char v17 = sub_1010F4594(0, a1, a2);
      if (v4) {
        return sub_10001CFB8(a1, a2);
      }
      if (v17 != 18)
      {
        sub_1010F4E40();
        swift_allocError();
        *uint64_t v23 = 1;
        goto LABEL_11;
      }
      sub_1010F4594(1, a1, a2);
      sub_10006145C();
      uint64_t v18 = FixedWidthInteger.data.getter();
      unint64_t v20 = v19;
      char v3 = sub_1010F4954(v18, v19);
      sub_10001CFB8(v18, v20);
      sub_1000361E0(a1, a2);
      unsigned __int8 v6 = sub_1010F4594(3, a1, a2);
      unsigned __int16 v7 = sub_1010F4774(4, a1, a2);
      unsigned __int16 v8 = sub_1010F4774(5, a1, a2);
      unsigned __int16 v9 = sub_1010F4774(6, a1, a2);
      unsigned __int16 v27 = sub_1010F4774(7, a1, a2);
      unsigned __int16 v26 = sub_1010F4774(8, a1, a2);
      unsigned __int16 v25 = sub_1010F4774(9, a1, a2);
      uint64_t v5 = 0;
LABEL_16:
      unsigned __int16 v24 = sub_1010F4774(10, a1, a2);
      uint64_t result = sub_10001CFB8(a1, a2);
      if (v5) {
        return sub_10001CFB8(a1, a2);
      }
      *(void *)a3 = a1;
      *(void *)(a3 + 8) = a2;
      *(unsigned char *)(a3 + 16) = v3;
      *(_WORD *)(a3 + 18) = v6;
      *(void *)(a3 + 24) = v7;
      *(void *)(a3 + 32) = v8;
      *(void *)(a3 + 40) = v9;
      *(_DWORD *)(a3 + 48) = v27;
      *(_DWORD *)(a3 + 52) = v26;
      *(_DWORD *)(a3 + 56) = v25;
      *(_DWORD *)(a3 + 60) = v24;
      *(unsigned char *)(a3 + 64) = 1;
      return result;
  }
}

unint64_t sub_1010F4E40()
{
  unint64_t result = qword_10166B4D0;
  if (!qword_10166B4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166B4D0);
  }
  return result;
}

unint64_t sub_1010F4E94()
{
  unint64_t result = qword_10166B4D8;
  if (!qword_10166B4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166B4D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for TagUserStatistics.TagUserStatisticsAnalyticsError()
{
  return &type metadata for TagUserStatistics.TagUserStatisticsAnalyticsError;
}

unsigned char *storeEnumTagSinglePayload for TagUserStatistics.TagUserStatisticsError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1010F4FC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TagUserStatistics.TagUserStatisticsError()
{
  return &type metadata for TagUserStatistics.TagUserStatisticsError;
}

unsigned char *_s12searchpartyd17TagUserStatisticsV31TagUserStatisticsAnalyticsErrorOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1010F509CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TagUserStatisticsOverflowFlags.TagUserStatisticsOverflowFlagsError()
{
  return &type metadata for TagUserStatisticsOverflowFlags.TagUserStatisticsOverflowFlagsError;
}

ValueMetadata *type metadata accessor for TagUserStatisticsOverflowFlags()
{
  return &type metadata for TagUserStatisticsOverflowFlags;
}

unint64_t sub_1010F50E8()
{
  unint64_t result = qword_10166B4E0;
  if (!qword_10166B4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166B4E0);
  }
  return result;
}

unint64_t sub_1010F5140()
{
  unint64_t result = qword_10166B4E8;
  if (!qword_10166B4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166B4E8);
  }
  return result;
}

unint64_t sub_1010F5198()
{
  unint64_t result = qword_10166B4F0;
  if (!qword_10166B4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166B4F0);
  }
  return result;
}

uint64_t sub_1010F51EC()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AccessoryCommand() + 24);
  unint64_t v2 = *(void *)v1;
  switch(*(unsigned char *)(v1 + 8))
  {
    case 1:
      if (v2 >= 6)
      {
        if (qword_101636BC8 != -1) {
          swift_once();
        }
        uint64_t v4 = type metadata accessor for Logger();
        sub_100010324(v4, (uint64_t)qword_10170E0D0);
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v5, v6))
        {
          unsigned __int16 v7 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)unsigned __int16 v7 = 134217984;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unexpected play sound context %ld", v7, 0xCu);
          swift_slowDealloc();
        }

        uint64_t result = 0;
      }
      else
      {
        uint64_t result = qword_10138F8D8[v2];
      }
      break;
    case 2:
      uint64_t result = *(void *)v1;
      break;
    case 3:
      uint64_t result = qword_10138F898[v2];
      break;
    default:
      if (v2) {
        uint64_t result = 1;
      }
      else {
        uint64_t result = 2;
      }
      break;
  }
  return result;
}

unint64_t CBUseCase.description.getter(int a1)
{
  switch(a1)
  {
    case 65536:
    case 65555:
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000018;
      goto LABEL_7;
    case 65556:
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD00000000000001CLL;
      goto LABEL_7;
    case 65557:
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD00000000000001BLL;
      goto LABEL_7;
    case 65558:
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD00000000000001FLL;
LABEL_7:
      v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v2);
      swift_bridgeObjectRelease();
      v3._uint64_t countAndFlagsBits = 41;
      v3._object = (void *)0xE100000000000000;
      String.append(_:)(v3);
      break;
    default:
      unint64_t v5 = 0x7361436573554243;
      v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v1);
      swift_bridgeObjectRelease();
      break;
  }
  return v5;
}

unint64_t sub_1010F5674()
{
  return CBUseCase.description.getter(*v0);
}

uint64_t sub_1010F567C()
{
  _StringGuts.grow(_:)(63);
  v1._uint64_t countAndFlagsBits = 0x646E616D6D6F633CLL;
  v1._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  sub_10028B80C();
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x203A6570797420;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  uint64_t v4 = (int *)type metadata accessor for AccessoryCommand();
  uint64_t v5 = v0 + v4[6];
  unint64_t v6 = *(void *)v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 8);
  v8._uint64_t countAndFlagsBits = sub_1010F5918(*(void *)v5, *(unsigned char *)(v5 + 8));
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x6573614365737520;
  v9._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v9);
  switch(v7)
  {
    case 1:
      goto LABEL_7;
    case 2:
      goto LABEL_11;
    case 3:
      if (v6 >= 2)
      {
LABEL_11:
        if (*(unsigned char *)(v0 + v4[7])) {
          int v11 = 65542;
        }
        else {
          int v11 = 65540;
        }
      }
      else
      {
LABEL_7:
        if (*(unsigned char *)(v0 + v4[7])) {
          int v12 = 18;
        }
        else {
          int v12 = 17;
        }
        int v11 = v12 | 0x10004;
      }
      break;
    default:
      if (*(unsigned char *)(v0 + v4[7])) {
        int v10 = 16;
      }
      else {
        int v10 = 15;
      }
      int v11 = v10 + 65540;
      break;
  }
  v13._uint64_t countAndFlagsBits = CBUseCase.description.getter(v11);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x8000000101422670;
  v14._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v14);
  if (*(unsigned char *)(v0 + v4[8])) {
    uint64_t v15 = 1702195828;
  }
  else {
    uint64_t v15 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + v4[8])) {
    unint64_t v16 = 0xE400000000000000;
  }
  else {
    unint64_t v16 = 0xE500000000000000;
  }
  unint64_t v17 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 62;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  return 0;
}

uint64_t type metadata accessor for AccessoryCommand()
{
  uint64_t result = qword_10166B550;
  if (!qword_10166B550) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1010F5918(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 1:
      unint64_t v8 = 0x756F5379616C702ELL;
      goto LABEL_13;
    case 2:
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      unint64_t v8 = 0xD000000000000010;
LABEL_13:
      uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
      goto LABEL_14;
    case 3:
      uint64_t result = 0x7463656E6E6F632ELL;
      switch(a1)
      {
        case 1:
          uint64_t result = 0x756F53706F74732ELL;
          break;
        case 2:
          uint64_t result = 0x465442706F74732ELL;
          break;
        case 3:
          uint64_t result = 0x585468637465662ELL;
          break;
        default:
          return result;
      }
      return result;
    default:
      unint64_t v8 = 0x28726961706E752ELL;
      if (a1) {
        uint64_t v3 = 1702195828;
      }
      else {
        uint64_t v3 = 0x65736C6166;
      }
      if (a1) {
        unint64_t v4 = 0xE400000000000000;
      }
      else {
        unint64_t v4 = 0xE500000000000000;
      }
      unint64_t v5 = v4;
LABEL_14:
      String.append(_:)(*(Swift::String *)&v3);
      swift_bridgeObjectRelease();
      v7._uint64_t countAndFlagsBits = 41;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      return v8;
  }
}

uint64_t sub_1010F5B20()
{
  return sub_1010F5918(*(void *)v0, *(unsigned char *)(v0 + 8));
}

void *sub_1010F5B2C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    unint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = a3[7];
    int v11 = (char *)a1 + v9;
    int v12 = (char *)a2 + v9;
    *(void *)int v11 = *(void *)v12;
    v11[8] = v12[8];
    *((unsigned char *)a1 + v10) = *((unsigned char *)a2 + v10);
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  }
  return a1;
}

uint64_t sub_1010F5C44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1010F5D0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v11 = *v10;
  *(unsigned char *)(v9 + 8) = *((unsigned char *)v10 + 8);
  *(void *)uint64_t v9 = v11;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1010F5DD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1010F5EA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)uint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1010F5F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010F5F7C);
}

uint64_t sub_1010F5F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1010F604C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010F6060);
}

uint64_t sub_1010F6060(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 28)) = a2 + 1;
  }
  return result;
}

uint64_t sub_1010F611C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessoryCommandType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryCommandType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1010F624C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_1010F6264(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryCommandType()
{
  return &type metadata for AccessoryCommandType;
}

uint64_t destroy for AirPodsSendPairingDataCommandPayloadv3(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  sub_10001CFB8(a1[4], a1[5]);
  sub_10001CFB8(a1[6], a1[7]);
  sub_10001CFB8(a1[8], a1[9]);
  sub_10001CFB8(a1[10], a1[11]);
  sub_10001CFB8(a1[12], a1[13]);
  sub_10001CFB8(a1[14], a1[15]);
  sub_10001CFB8(a1[16], a1[17]);
  sub_10001CFB8(a1[18], a1[19]);
  sub_10001CFB8(a1[20], a1[21]);
  uint64_t v2 = a1[23];
  unint64_t v3 = a1[24];

  return sub_10001CFB8(v2, v3);
}

uint64_t initializeWithCopy for AirPodsSendPairingDataCommandPayloadv3(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(a2 + 48);
  unint64_t v11 = *(void *)(a2 + 56);
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  uint64_t v12 = *(void *)(a2 + 64);
  unint64_t v13 = *(void *)(a2 + 72);
  sub_1000361E0(v12, v13);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  uint64_t v14 = *(void *)(a2 + 80);
  unint64_t v15 = *(void *)(a2 + 88);
  sub_1000361E0(v14, v15);
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  uint64_t v16 = *(void *)(a2 + 96);
  unint64_t v17 = *(void *)(a2 + 104);
  sub_1000361E0(v16, v17);
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  uint64_t v18 = *(void *)(a2 + 112);
  unint64_t v19 = *(void *)(a2 + 120);
  sub_1000361E0(v18, v19);
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  uint64_t v20 = *(void *)(a2 + 128);
  unint64_t v21 = *(void *)(a2 + 136);
  sub_1000361E0(v20, v21);
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  uint64_t v22 = *(void *)(a2 + 144);
  unint64_t v23 = *(void *)(a2 + 152);
  sub_1000361E0(v22, v23);
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  uint64_t v24 = *(void *)(a2 + 160);
  unint64_t v25 = *(void *)(a2 + 168);
  sub_1000361E0(v24, v25);
  *(void *)(a1 + 160) = v24;
  *(void *)(a1 + 168) = v25;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  uint64_t v27 = *(void *)(a2 + 184);
  unint64_t v26 = *(void *)(a2 + 192);
  sub_1000361E0(v27, v26);
  *(void *)(a1 + 184) = v27;
  *(void *)(a1 + 192) = v26;
  return a1;
}

uint64_t assignWithCopy for AirPodsSendPairingDataCommandPayloadv3(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_1000361E0(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  unint64_t v13 = *(void *)(a2 + 40);
  sub_1000361E0(v12, v13);
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = *(void *)(a2 + 48);
  unint64_t v17 = *(void *)(a2 + 56);
  sub_1000361E0(v16, v17);
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v20 = *(void *)(a2 + 64);
  unint64_t v21 = *(void *)(a2 + 72);
  sub_1000361E0(v20, v21);
  uint64_t v22 = *(void *)(a1 + 64);
  unint64_t v23 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v20;
  *(void *)(a1 + 72) = v21;
  sub_10001CFB8(v22, v23);
  uint64_t v24 = *(void *)(a2 + 80);
  unint64_t v25 = *(void *)(a2 + 88);
  sub_1000361E0(v24, v25);
  uint64_t v26 = *(void *)(a1 + 80);
  unint64_t v27 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = v24;
  *(void *)(a1 + 88) = v25;
  sub_10001CFB8(v26, v27);
  uint64_t v28 = *(void *)(a2 + 96);
  unint64_t v29 = *(void *)(a2 + 104);
  sub_1000361E0(v28, v29);
  uint64_t v30 = *(void *)(a1 + 96);
  unint64_t v31 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = v28;
  *(void *)(a1 + 104) = v29;
  sub_10001CFB8(v30, v31);
  uint64_t v32 = *(void *)(a2 + 112);
  unint64_t v33 = *(void *)(a2 + 120);
  sub_1000361E0(v32, v33);
  uint64_t v34 = *(void *)(a1 + 112);
  unint64_t v35 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = v32;
  *(void *)(a1 + 120) = v33;
  sub_10001CFB8(v34, v35);
  uint64_t v36 = *(void *)(a2 + 128);
  unint64_t v37 = *(void *)(a2 + 136);
  sub_1000361E0(v36, v37);
  uint64_t v38 = *(void *)(a1 + 128);
  unint64_t v39 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = v36;
  *(void *)(a1 + 136) = v37;
  sub_10001CFB8(v38, v39);
  uint64_t v40 = *(void *)(a2 + 144);
  unint64_t v41 = *(void *)(a2 + 152);
  sub_1000361E0(v40, v41);
  uint64_t v42 = *(void *)(a1 + 144);
  unint64_t v43 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = v40;
  *(void *)(a1 + 152) = v41;
  sub_10001CFB8(v42, v43);
  uint64_t v44 = *(void *)(a2 + 160);
  unint64_t v45 = *(void *)(a2 + 168);
  sub_1000361E0(v44, v45);
  uint64_t v46 = *(void *)(a1 + 160);
  unint64_t v47 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = v44;
  *(void *)(a1 + 168) = v45;
  sub_10001CFB8(v46, v47);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  uint64_t v49 = *(void *)(a2 + 184);
  unint64_t v48 = *(void *)(a2 + 192);
  sub_1000361E0(v49, v48);
  uint64_t v50 = *(void *)(a1 + 184);
  unint64_t v51 = *(void *)(a1 + 192);
  *(void *)(a1 + 184) = v49;
  *(void *)(a1 + 192) = v48;
  sub_10001CFB8(v50, v51);
  return a1;
}

uint64_t assignWithTake for AirPodsSendPairingDataCommandPayloadv3(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a1 + 64);
  unint64_t v13 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_10001CFB8(v12, v13);
  uint64_t v14 = *(void *)(a1 + 80);
  unint64_t v15 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001CFB8(v14, v15);
  uint64_t v16 = *(void *)(a1 + 96);
  unint64_t v17 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001CFB8(v16, v17);
  uint64_t v18 = *(void *)(a1 + 112);
  unint64_t v19 = *(void *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001CFB8(v18, v19);
  uint64_t v20 = *(void *)(a1 + 128);
  unint64_t v21 = *(void *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_10001CFB8(v20, v21);
  uint64_t v22 = *(void *)(a1 + 144);
  unint64_t v23 = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_10001CFB8(v22, v23);
  uint64_t v24 = *(void *)(a1 + 160);
  unint64_t v25 = *(void *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_10001CFB8(v24, v25);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  uint64_t v26 = *(void *)(a1 + 184);
  unint64_t v27 = *(void *)(a1 + 192);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  sub_10001CFB8(v26, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSendPairingDataCommandPayloadv3(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 200)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsSendPairingDataCommandPayloadv3(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 200) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 200) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSendPairingDataCommandPayloadv3()
{
  return &type metadata for AirPodsSendPairingDataCommandPayloadv3;
}

uint64_t sub_1010F67A4(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v3, v4);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v1)
  {
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v3);
}

__n128 sub_1010F6AB8@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1010F6D3C(a1, (uint64_t)v10);
  if (!v2)
  {
    long long v5 = v10[11];
    *(_OWORD *)(a2 + 160) = v10[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(void *)(a2 + 192) = v11;
    long long v6 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v6;
    long long v7 = v10[9];
    *(_OWORD *)(a2 + 128) = v10[8];
    *(_OWORD *)(a2 + 144) = v7;
    long long v8 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v8;
    long long v9 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v9;
    __n128 result = (__n128)v10[1];
    *(_OWORD *)a2 = v10[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1010F6B3C(void *a1)
{
  return sub_1010F67A4(a1);
}

unint64_t sub_1010F6B54(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1010F6B84();
  unint64_t result = sub_100A38F50();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1010F6B84()
{
  unint64_t result = qword_10166B598;
  if (!qword_10166B598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166B598);
  }
  return result;
}

uint64_t sub_1010F6BD8@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v26) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        JUMPOUT(0x1010F6D1CLL);
      }
      uint64_t v26 = (int)v26;
LABEL_6:
      if (v26 != 32) {
        goto LABEL_18;
      }
      switch(a11 >> 62)
      {
        case 1uLL:
          LODWORD(v30) = HIDWORD(a10) - a10;
          if (__OFSUB__(HIDWORD(a10), a10)) {
            goto LABEL_16;
          }
          uint64_t v30 = (int)v30;
LABEL_12:
          if (v30 != 1) {
            goto LABEL_19;
          }
          *(void *)a9 = result;
          *(void *)(a9 + 8) = a2;
          *(void *)(a9 + 16) = a10;
          *(void *)(a9 + 24) = a11;
          *(void *)(a9 + 32) = a3;
          *(void *)(a9 + 40) = a4;
          *(void *)(a9 + 48) = a12;
          *(void *)(a9 + 56) = a13;
          *(void *)(a9 + 64) = a14;
          *(void *)(a9 + 72) = a15;
          *(void *)(a9 + 80) = a5;
          *(void *)(a9 + 88) = a6;
          *(void *)(a9 + 96) = a7;
          *(void *)(a9 + 104) = a8;
          *(void *)(a9 + 112) = a16;
          *(void *)(a9 + 120) = a17;
          *(void *)(a9 + 128) = a18;
          *(void *)(a9 + 136) = a19;
          *(void *)(a9 + 144) = a20;
          *(void *)(a9 + 152) = a21;
          *(void *)(a9 + 160) = a22;
          *(void *)(a9 + 168) = a23;
          *(unsigned char *)(a9 + 176) = a24;
          *(void *)(a9 + 184) = a25;
          *(void *)(a9 + 192) = a26;
          return result;
        case 2uLL:
          uint64_t v32 = *(void *)(a10 + 16);
          uint64_t v31 = *(void *)(a10 + 24);
          BOOL v29 = __OFSUB__(v31, v32);
          uint64_t v30 = v31 - v32;
          if (!v29) {
            goto LABEL_12;
          }
          goto LABEL_17;
        case 3uLL:
          goto LABEL_19;
        default:
          uint64_t v30 = BYTE6(a11);
          goto LABEL_12;
      }
    case 2uLL:
      uint64_t v28 = *(void *)(result + 16);
      uint64_t v27 = *(void *)(result + 24);
      BOOL v29 = __OFSUB__(v27, v28);
      uint64_t v26 = v27 - v28;
      if (!v29) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_18;
    default:
      uint64_t v26 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1010F6D3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v77, v78);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
LABEL_20:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v77);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v7 = v5;
  unint64_t v8 = v6;
  sub_1000BD078((uint64_t)v77, v78);
  uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v82 = v10;
  sub_1000BD078((uint64_t)v77, v78);
  uint64_t v75 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v76 = v11;
  sub_1000BD078((uint64_t)v77, v78);
  uint64_t v73 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v74 = v12;
  uint64_t v13 = v79;
  sub_1000BD078((uint64_t)v77, v78);
  uint64_t v14 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v16 = v15;
  uint64_t v17 = static MACAddress.length.getter();
  if ((unsigned __int128)(v17 * (__int128)3) >> 64 != (3 * v17) >> 63)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v71 = v14;
  unint64_t v72 = v16;
  if (__OFADD__(3 * v17, 60))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    if (qword_101637310 == -1)
    {
LABEL_17:
      uint64_t v45 = type metadata accessor for Logger();
      sub_100010324(v45, (uint64_t)qword_10170F068);
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        unint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v48 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Invalid beaconPartId %ld!", v48, 0xCu);
        swift_slowDealloc();
      }

      uint64_t v49 = type metadata accessor for BinaryDecodingError();
      sub_100499A70();
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v49 - 8) + 104))(v50, enum case for BinaryDecodingError.decodingError(_:), v49);
      swift_willThrow();
      sub_10001CFB8(v13, v51);
      sub_10001CFB8(v52, v53);
      sub_10001CFB8(v54, v55);
      sub_10001CFB8(v56, v57);
      sub_10001CFB8(v58, v59);
      sub_10001CFB8(v60, v61);
      sub_10001CFB8(v62, v63);
      sub_10001CFB8(v64, v65);
      sub_10001CFB8(v67, v68);
      sub_10001CFB8(v69, v70);
      sub_10001CFB8(v71, v72);
      sub_10001CFB8(v73, v74);
      sub_10001CFB8(v75, v76);
      sub_10001CFB8(v9, v82);
      sub_10001CFB8(v7, v8);
      goto LABEL_20;
    }
LABEL_28:
    swift_once();
    goto LABEL_17;
  }
  sub_1000BD078((uint64_t)v77, v78);
  uint64_t v13 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v19 = v18;
  sub_1000362FC();
  uint64_t v20 = DataProtocol.intValue.getter();
  uint64_t v21 = v20 - 1;
  if (__OFSUB__(v20, 1))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v22 = static MACAddress.length.getter();
  uint64_t v23 = v22 + 20;
  if (__OFADD__(v22, 20))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((unsigned __int128)(v21 * (__int128)v23) >> 64 != (v21 * v23) >> 63)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v21 * v23 < 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v67 = Data.subdata(in:)();
  unint64_t v68 = v24;
  uint64_t v69 = v13;
  unint64_t v70 = v19;
  sub_1000BD078((uint64_t)v77, v78);
  uint64_t v13 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v26 = v25;
  uint64_t v27 = DataProtocol.intValue.getter();
  uint64_t v28 = v27 - 1;
  if (__OFSUB__(v27, 1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if ((unsigned __int128)(v28 * (__int128)21) >> 64 != (21 * v28) >> 63)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (21 * v28 < 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v62 = Data.subdata(in:)();
  unint64_t v63 = v29;
  uint64_t v64 = v13;
  unint64_t v65 = v26;
  sub_1000BD078((uint64_t)v77, v78);
  uint64_t v60 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v61 = v30;
  sub_1000BD078((uint64_t)v77, v78);
  uint64_t v58 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v59 = v31;
  sub_1000BD078((uint64_t)v77, v78);
  uint64_t v56 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v57 = v32;
  sub_1000BD078((uint64_t)v77, v78);
  uint64_t v54 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v55 = v33;
  sub_1000BD078((uint64_t)v77, v78);
  uint64_t v52 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v53 = v34;
  uint64_t v66 = DataProtocol.intValue.getter();
  sub_1000BD078((uint64_t)v77, v78);
  uint64_t v35 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v51 = v36;
  uint64_t v13 = v35;
  if (v66 > 3) {
    goto LABEL_16;
  }
  sub_10001CFB8(v52, v53);
  sub_10001CFB8(v64, v26);
  sub_10001CFB8(v69, v70);
  if (v66 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_1010F6BD8(v7, v8, v9, v82, v75, v76, v73, v74, (uint64_t)v80, v71, v72, v67, v68, v62, v63, v60, v61, v58, v59,
      v56,
      v57,
      v54,
      v55,
      v66,
      v13,
      v51);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v77);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    long long v38 = v80[9];
    long long v39 = v80[11];
    *(_OWORD *)(a2 + 160) = v80[10];
    *(_OWORD *)(a2 + 176) = v39;
    long long v40 = v80[5];
    long long v41 = v80[7];
    long long v42 = v80[8];
    *(_OWORD *)(a2 + 96) = v80[6];
    *(_OWORD *)(a2 + 112) = v41;
    *(void *)(a2 + 192) = v81;
    *(_OWORD *)(a2 + 128) = v42;
    *(_OWORD *)(a2 + 144) = v38;
    long long v43 = v80[3];
    *(_OWORD *)(a2 + 32) = v80[2];
    *(_OWORD *)(a2 + 48) = v43;
    *(_OWORD *)(a2 + 64) = v80[4];
    *(_OWORD *)(a2 + 80) = v40;
    long long v44 = v80[1];
    *(_OWORD *)a2 = v80[0];
    *(_OWORD *)(a2 + 16) = v44;
  }
  return result;
}

uint64_t sub_1010F74C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1010F74DC);
}

uint64_t sub_1010F74DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1010F7548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1010F755C);
}

uint64_t sub_1010F755C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AccessoryInfoEndPoint()
{
  uint64_t result = qword_10166B5F8;
  if (!qword_10166B5F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1010F7618()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FMNAccountType();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v20 - v7;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v21((char *)&v20 - v7, v1, v2);
  type metadata accessor for AccountURLComponents();
  swift_allocObject();
  uint64_t v9 = sub_1010E7A64((uint64_t)v8);
  sub_10000588C(&qword_101639580);
  uint64_t v20 = v9;
  OS_dispatch_queue.sync<A>(execute:)();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  v21(v6, v22, v2);
  if ((*(unsigned int (**)(char *, uint64_t))(v3 + 88))(v6, v2) == enum case for FMNAccountType.thirdPartyAccessory(_:))
  {
    unint64_t v10 = (void (*)(uint64_t *, void))URLComponents.path.modify();
    v11._object = (void *)0x80000001014226B0;
    v11._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v11);
    v10(&v23, 0);
  }
  else
  {
    URLComponents.path.setter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  if (qword_101637188 != -1) {
    swift_once();
  }
  unint64_t v12 = (void *)qword_10170EE68;
  id v13 = [self sharedInstance];
  unsigned int v14 = [v13 isInternalBuild];

  if (v14)
  {
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v12 stringForKey:v15];

    if (v16)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URLComponents.host.setter();
    }
  }
  id v17 = [self defaultStore];
  if (v17)
  {
    unint64_t v18 = v17;
    id v19 = [v17 aa_primaryAppleAccount];

    if (v19)
    {
      swift_release();
    }
    else
    {
      URLComponents.host.setter();
      swift_release();
    }
  }
  else
  {
    __break(1u);
  }
}

void *sub_1010F7A04(uint64_t a1)
{
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v15 = v1;
    id v17 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v6, 0);
    uint64_t v7 = v17;
    unint64_t v8 = (void *)(a1 + 32);
    do
    {
      uint64_t v10 = v8[3];
      uint64_t v9 = v8[4];
      sub_10001CD44(v8, v10);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8) + 32))(v10);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id v17 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000B7034(0, v7[2] + 1, 1);
        uint64_t v7 = v17;
      }
      unint64_t v13 = v7[2];
      unint64_t v12 = v7[3];
      if (v13 >= v12 >> 1)
      {
        sub_1000B7034(v12 > 1, v13 + 1, 1);
        uint64_t v7 = v17;
      }
      v7[2] = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v13, v5, v16);
      id v17 = v7;
      v8 += 5;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_1010F7BE8(double a1, double a2, double a3)
{
  uint64_t updated = type metadata accessor for UpdateDeviceState();
  uint64_t v60 = *(void *)(updated - 8);
  __chkstk_darwin(updated - 8);
  uint64_t v67 = (uint64_t)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v68 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v59 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_10163FFB0);
  OS_dispatch_queue.sync<A>(execute:)();
  size_t v11 = sub_100B752E8((uint64_t)v69);
  swift_bridgeObjectRelease();
  unint64_t v12 = (void *)sub_1010FE860(v11, 9, a1);
  uint64_t v13 = sub_1010F95A0(v11, a2);
  sub_1010FF338(v11, a2, a3);
  swift_release();
  swift_retain();
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = sub_1010FFD64(v14);
  uint64_t v66 = 0;
  swift_release();
  if (*(void *)(v13 + 16) <= v12[2] >> 3)
  {
    uint64_t v69 = v12;
    sub_10089EA08(v13);
    uint64_t v16 = v69;
  }
  else
  {
    uint64_t v16 = sub_1008A160C(v13, (uint64_t)v12);
  }
  unint64_t v17 = *(void *)(v15 + 16);
  unint64_t v18 = v16[2];
  uint64_t v64 = v3;
  if (v17 <= v18 >> 3)
  {
    uint64_t v69 = v16;
    sub_10089EA08(v15);
    unint64_t v61 = v69;
  }
  else
  {
    unint64_t v61 = sub_1008A160C(v15, (uint64_t)v16);
  }
  uint64_t v63 = v13;
  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  uint64_t v62 = qword_10170F050;
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v20 = swift_allocObject();
  long long v65 = xmmword_101342130;
  *(_OWORD *)(v20 + 16) = xmmword_101342130;
  sub_1011007B0(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v21 = Set.description.getter();
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  *(void *)(v20 + 56) = &type metadata for String;
  unint64_t v24 = sub_10000B4CC();
  *(void *)(v20 + 64) = v24;
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v23;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = v65;
  uint64_t v26 = Set.description.getter();
  uint64_t v28 = v27;
  swift_release();
  *(void *)(v25 + 56) = &type metadata for String;
  *(void *)(v25 + 64) = v24;
  *(void *)(v25 + 32) = v26;
  *(void *)(v25 + 40) = v28;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = v65;
  uint64_t v30 = Set.description.getter();
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  *(void *)(v29 + 56) = &type metadata for String;
  *(void *)(v29 + 64) = v24;
  *(void *)(v29 + 32) = v30;
  *(void *)(v29 + 40) = v32;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  uint64_t v63 = v19;
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = v65;
  uint64_t v34 = (uint64_t)v61;
  swift_bridgeObjectRetain();
  uint64_t v35 = Set.description.getter();
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  *(void *)(v33 + 56) = &type metadata for String;
  *(void *)(v33 + 64) = v24;
  uint64_t v62 = v24;
  *(void *)(v33 + 32) = v35;
  *(void *)(v33 + 40) = v37;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v38 = v64;
  swift_retain();
  uint64_t v39 = v66;
  long long v40 = sub_1010FDB70(v34, v38);
  swift_bridgeObjectRelease();
  uint64_t v69 = v40;
  swift_bridgeObjectRetain();
  sub_1010F94F8(&v69);
  if (v39)
  {
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    long long v41 = v69;
    int64_t v42 = v69[2];
    if (v42)
    {
      uint64_t v69 = _swiftEmptyArrayStorage;
      sub_1000B7034(0, v42, 0);
      long long v43 = v59;
      uint64_t v44 = *(unsigned __int8 *)(v60 + 80);
      unint64_t v61 = v41;
      uint64_t v45 = (uint64_t)v41 + ((v44 + 32) & ~v44);
      uint64_t v66 = *(void *)(v60 + 72);
      uint64_t v46 = (void (**)(char *, uint64_t, uint64_t))(v68 + 16);
      uint64_t v47 = v9;
      do
      {
        uint64_t v48 = v67;
        sub_1011007F8(v45, v67, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
        (*v46)(v43, v48, v9);
        sub_101100860(v48, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
        uint64_t v49 = v69;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7034(0, v49[2] + 1, 1);
          uint64_t v49 = v69;
        }
        unint64_t v51 = v49[2];
        unint64_t v50 = v49[3];
        if (v51 >= v50 >> 1)
        {
          sub_1000B7034(v50 > 1, v51 + 1, 1);
          uint64_t v49 = v69;
        }
        v49[2] = v51 + 1;
        unint64_t v52 = (unint64_t)v49
            + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))
            + *(void *)(v68 + 72) * v51;
        uint64_t v9 = v47;
        (*(void (**)(unint64_t, char *, uint64_t))(v68 + 32))(v52, v43, v47);
        uint64_t v69 = v49;
        v45 += v66;
        --v42;
      }
      while (v42);
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v49 = _swiftEmptyArrayStorage;
    }
    static os_log_type_t.default.getter();
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = v65;
    swift_bridgeObjectRetain();
    uint64_t v54 = Array.description.getter();
    uint64_t v56 = v55;
    swift_bridgeObjectRelease();
    uint64_t v57 = v62;
    *(void *)(v53 + 56) = &type metadata for String;
    *(void *)(v53 + 64) = v57;
    *(void *)(v53 + 32) = v54;
    *(void *)(v53 + 40) = v56;
    os_log(_:dso:log:_:_:)();
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v49;
  }
  return result;
}

uint64_t sub_1010F83B8(double a1)
{
  uint64_t v98 = type metadata accessor for BeaconObservation();
  unint64_t v94 = *(void *)(v98 - 8);
  uint64_t v2 = __chkstk_darwin(v98);
  uint64_t v4 = (char *)v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)v84 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v87 = (char *)v84 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v89 = (char *)v84 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v88 = (char *)v84 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v84 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v99 = (uint64_t)v84 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)v84 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  unint64_t v24 = (char *)v84 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)v84 - v25;
  sub_10000588C(&qword_10163FFB0);
  OS_dispatch_queue.sync<A>(execute:)();
  size_t v27 = sub_100B752E8((uint64_t)v100);
  swift_bridgeObjectRelease();
  uint64_t v100 = _swiftEmptyArrayStorage;
  uint64_t v28 = *(void *)(v27 + 16);
  uint64_t result = swift_retain();
  uint64_t v96 = v28;
  if (!v28)
  {
    swift_release();
LABEL_42:
    swift_release();
    swift_release();
    return 0;
  }
  uint64_t v93 = v4;
  v84[0] = v16;
  unint64_t v30 = 0;
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v92 = v7;
  size_t v97 = v27;
  uint64_t v32 = v98;
  do
  {
    if (v30 >= *(void *)(v27 + 16))
    {
      __break(1u);
      goto LABEL_46;
    }
    unint64_t v33 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
    uint64_t v34 = *(void *)(v94 + 72);
    size_t v95 = v27 + v33;
    sub_1011007F8(v27 + v33 + v34 * v30, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    int v35 = v26[*(int *)(v32 + 24)];
    sub_1011007F8((uint64_t)v26, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    if (v35 == 7)
    {
      sub_101100860((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      sub_1011007F8((uint64_t)v26, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_9:
      sub_101100860((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      goto LABEL_10;
    }
    int v36 = v24[*(int *)(v32 + 24)];
    sub_101100860((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    sub_1011007F8((uint64_t)v26, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    if (v36 == 8) {
      goto LABEL_9;
    }
    int v39 = v21[*(int *)(v98 + 24)];
    sub_101100860((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    if (v39 != 11)
    {
      uint64_t result = sub_101100860((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      goto LABEL_4;
    }
LABEL_10:
    sub_1011008C0((uint64_t)v26, v99, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1000B77F0(0, v31[2] + 1, 1);
    }
    uint64_t v31 = v100;
    unint64_t v38 = v100[2];
    unint64_t v37 = v100[3];
    if (v38 >= v37 >> 1)
    {
      sub_1000B77F0(v37 > 1, v38 + 1, 1);
      uint64_t v31 = v100;
    }
    v31[2] = v38 + 1;
    uint64_t result = sub_1011008C0(v99, (uint64_t)v31 + v33 + v38 * v34, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_4:
    size_t v27 = v97;
    ++v30;
  }
  while (v96 != v30);
  long long v40 = v100;
  uint64_t result = swift_release();
  double v41 = -a1;
  uint64_t v91 = v40;
  uint64_t v86 = (char *)v40 + v33;
  unint64_t v42 = 0;
  long long v90 = xmmword_101347500;
  uint64_t v43 = v84[0];
  uint64_t v44 = v98;
  uint64_t v45 = (uint64_t)v87;
  uint64_t v46 = (uint64_t)v88;
  uint64_t v47 = (uint64_t)v89;
  while (v42 < *(void *)(v27 + 16))
  {
    unint64_t v94 = v42;
    sub_1011007F8(v95 + v34 * v42, v43, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v99 = *(int *)(v44 + 24);
    int v48 = *(unsigned __int8 *)(v43 + v99);
    sub_1011007F8(v43, v46, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    if (v48 == 6)
    {
      Date.timeIntervalSinceNow.getter();
      double v50 = v49;
      sub_101100860(v46, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      BOOL v51 = v50 >= v41;
    }
    else
    {
      sub_101100860(v46, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      BOOL v51 = 0;
    }
    int v52 = *(unsigned __int8 *)(v43 + v99);
    sub_1011007F8(v43, v47, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    if (v52 == 9)
    {
      Date.timeIntervalSinceNow.getter();
      double v54 = v53;
      sub_101100860(v47, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      char v55 = v54 >= v41 || v51;
      if (v55)
      {
LABEL_30:
        LODWORD(v87) = static os_log_type_t.default.getter();
        if (qword_1016372F8 != -1) {
          swift_once();
        }
        v84[4] = sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v56 = swift_allocObject();
        *(_OWORD *)(v56 + 16) = v90;
        uint64_t v57 = UUID.uuidString.getter();
        uint64_t v59 = v58;
        *(void *)(v56 + 56) = &type metadata for String;
        unint64_t v60 = sub_10000B4CC();
        *(void *)(v56 + 64) = v60;
        *(void *)(v56 + 32) = v57;
        *(void *)(v56 + 40) = v59;
        unint64_t v61 = sub_10096A84C(*(unsigned char *)(v43 + v99));
        *(void *)(v56 + 96) = &type metadata for String;
        *(void *)(v56 + 104) = v60;
        *(void *)(v56 + 72) = v61;
        *(void *)(v56 + 80) = v62;
        uint64_t v63 = v43 + *(int *)(v98 + 20);
        uint64_t v64 = type metadata accessor for Date();
        uint64_t v65 = sub_1011007B0((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
        v84[3] = v63;
        v84[2] = v64;
        v84[1] = v65;
        uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v56 + 136) = &type metadata for String;
        *(void *)(v56 + 144) = v60;
        unint64_t v85 = v60;
        *(void *)(v56 + 112) = v66;
        *(void *)(v56 + 120) = v67;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v68 = v91[2];
        if (v68)
        {
          swift_retain();
          uint64_t v69 = (uint64_t)v86;
          uint64_t v44 = v98;
          do
          {
            sub_1011007F8(v69, v45, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
            char v70 = static UUID.== infix(_:_:)();
            uint64_t v71 = v45;
            uint64_t v72 = v45;
            uint64_t v73 = (uint64_t)v92;
            sub_1011007F8(v71, (uint64_t)v92, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
            uint64_t v74 = (uint64_t)v93;
            sub_1011007F8(v43, (uint64_t)v93, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
            if (v70)
            {
              char v75 = static Date.> infix(_:_:)();
              sub_101100860(v73, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
              sub_101100860(v74, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
              sub_101100860(v72, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
              uint64_t v45 = v72;
              if (v75)
              {
                swift_release();
                uint64_t v46 = (uint64_t)v88;
                uint64_t v47 = (uint64_t)v89;
                goto LABEL_18;
              }
            }
            else
            {
              sub_101100860(v73, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
              sub_101100860(v74, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
              sub_101100860(v72, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
              uint64_t v45 = v72;
            }
            v69 += v34;
            --v68;
          }
          while (v68);
          swift_release();
          swift_release_n();
        }
        else
        {
          swift_release();
          swift_release();
        }
        static os_log_type_t.default.getter();
        uint64_t v76 = swift_allocObject();
        *(_OWORD *)(v76 + 16) = v90;
        uint64_t v77 = UUID.uuidString.getter();
        unint64_t v78 = v85;
        *(void *)(v76 + 56) = &type metadata for String;
        *(void *)(v76 + 64) = v78;
        *(void *)(v76 + 32) = v77;
        *(void *)(v76 + 40) = v79;
        unint64_t v80 = sub_10096A84C(*(unsigned char *)(v43 + v99));
        *(void *)(v76 + 96) = &type metadata for String;
        *(void *)(v76 + 104) = v78;
        *(void *)(v76 + 72) = v80;
        *(void *)(v76 + 80) = v81;
        uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v76 + 136) = &type metadata for String;
        *(void *)(v76 + 144) = v78;
        *(void *)(v76 + 112) = v82;
        *(void *)(v76 + 120) = v83;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_101100860(v43, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        return 1;
      }
    }
    else
    {
      sub_101100860(v47, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (v51) {
        goto LABEL_30;
      }
    }
LABEL_18:
    unint64_t v42 = v94 + 1;
    uint64_t result = sub_101100860(v43, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    size_t v27 = v97;
    if (v42 == v96) {
      goto LABEL_42;
    }
  }
LABEL_46:
  __break(1u);
  return result;
}

void *sub_1010F8DC8(uint64_t a1, char *a2)
{
  uint64_t v68 = a2;
  uint64_t v57 = a1;
  LODWORD(v72) = a1;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v70 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for BeaconObservation();
  uint64_t v71 = *(void *)(v54 - 8);
  uint64_t v5 = __chkstk_darwin(v54);
  uint64_t v69 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v56 = (uint64_t)&v52 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v52 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v52 - v12;
  uint64_t v14 = type metadata accessor for DateInterval();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v52 - v19;
  sub_10000588C(&qword_10163FFB0);
  OS_dispatch_queue.sync<A>(execute:)();
  size_t v21 = sub_100B752E8((uint64_t)v73);
  swift_bridgeObjectRelease();
  if (v72 == 44)
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  char v23 = v57;
  uint64_t v67 = v13;
  uint64_t v63 = v18;
  uint64_t v64 = v11;
  uint64_t v24 = v54;
  unint64_t v61 = *(uint64_t (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v62 = v15 + 16;
  uint64_t result = (void *)v61(v20, v68, v14);
  uint64_t v73 = _swiftEmptyArrayStorage;
  uint64_t v26 = *(void *)(v21 + 16);
  uint64_t v68 = v4;
  uint64_t v55 = v14;
  uint64_t v65 = v20;
  uint64_t v66 = v15;
  uint64_t v60 = v26;
  if (!v26)
  {
    long long v40 = _swiftEmptyArrayStorage;
    uint64_t v28 = v71;
LABEL_18:
    swift_release();
    int64_t v41 = v40[2];
    if (v41)
    {
      uint64_t v73 = _swiftEmptyArrayStorage;
      sub_1000B7034(0, v41, 0);
      uint64_t v42 = (uint64_t)v40 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
      uint64_t v43 = *(void *)(v28 + 72);
      uint64_t v44 = (void (**)(char *, uint64_t, uint64_t))(v70 + 16);
      do
      {
        uint64_t v45 = v69;
        sub_1011007F8(v42, v69, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        (*v44)(v4, v45, v2);
        sub_101100860(v45, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v46 = v73;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7034(0, v46[2] + 1, 1);
          uint64_t v46 = v73;
        }
        uint64_t v47 = v70;
        unint64_t v49 = v46[2];
        unint64_t v48 = v46[3];
        if (v49 >= v48 >> 1)
        {
          sub_1000B7034(v48 > 1, v49 + 1, 1);
          uint64_t v47 = v70;
          uint64_t v46 = v73;
        }
        v46[2] = v49 + 1;
        unint64_t v50 = (unint64_t)v46
            + ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))
            + *(void *)(v47 + 72) * v49;
        uint64_t v4 = v68;
        (*(void (**)(unint64_t, char *, uint64_t))(v47 + 32))(v50, v68, v2);
        uint64_t v73 = v46;
        v42 += v43;
        --v41;
      }
      while (v41);
      swift_release();
      uint64_t v14 = v55;
      uint64_t v20 = v65;
      uint64_t v15 = v66;
    }
    else
    {
      swift_release();
      uint64_t v46 = _swiftEmptyArrayStorage;
    }
    uint64_t v51 = sub_101158244((uint64_t)v46);
    swift_bridgeObjectRelease();
    uint64_t v22 = sub_1007100E0(v51);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    return v22;
  }
  uint64_t v53 = v2;
  unint64_t v27 = 0;
  uint64_t v57 = v23;
  uint64_t v58 = (void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v28 = v71;
  uint64_t v29 = (uint64_t)v67;
  size_t v59 = v21;
  while (v27 < *(void *)(v21 + 16))
  {
    unint64_t v30 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    uint64_t v72 = *(void *)(v28 + 72);
    sub_1011007F8(v21 + v30 + v72 * v27, v29, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v31 = qword_10138FA28[*(char *)(v29 + *(int *)(v24 + 24))];
    uint64_t v32 = qword_10138FA28[v57];
    uint64_t v33 = v29;
    uint64_t v34 = v63;
    v61(v63, v20, v14);
    uint64_t v35 = (uint64_t)v64;
    sub_1011007F8(v33, (uint64_t)v64, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    if (v31 == v32)
    {
      char v36 = DateInterval.contains(_:)();
      (*v58)(v34, v14);
      sub_101100860(v35, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (v36)
      {
        uint64_t v29 = (uint64_t)v67;
        sub_1011008C0((uint64_t)v67, v56, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        unint64_t v37 = v73;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B77F0(0, v37[2] + 1, 1);
          unint64_t v37 = v73;
        }
        unint64_t v39 = v37[2];
        unint64_t v38 = v37[3];
        if (v39 >= v38 >> 1)
        {
          sub_1000B77F0(v38 > 1, v39 + 1, 1);
          unint64_t v37 = v73;
        }
        v37[2] = v39 + 1;
        uint64_t result = (void *)sub_1011008C0(v56, (uint64_t)v37 + v30 + v39 * v72, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v14 = v55;
        goto LABEL_7;
      }
    }
    else
    {
      (*v58)(v34, v14);
      sub_101100860(v35, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    }
    uint64_t v29 = (uint64_t)v67;
    uint64_t result = (void *)sub_101100860((uint64_t)v67, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_7:
    uint64_t v28 = v71;
    ++v27;
    size_t v21 = v59;
    uint64_t v20 = v65;
    uint64_t v15 = v66;
    if (v60 == v27)
    {
      long long v40 = v73;
      uint64_t v2 = v53;
      uint64_t v4 = v68;
      goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

Swift::Int sub_1010F94F8(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for UpdateDeviceState() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_100B73674(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1010FC938(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1010F95A0(uint64_t a1, double a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101655530);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  v182 = (char *)&v156 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v175 = (uint64_t)&v156 - v7;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v181 = (char *)&v156 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v173 = (char *)&v156 - v11;
  uint64_t v191 = type metadata accessor for Date();
  uint64_t v187 = *(void *)(v191 - 8);
  uint64_t v12 = __chkstk_darwin(v191);
  v158 = (char *)&v156 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v165 = (char *)&v156 - v14;
  uint64_t v15 = sub_10000588C(&qword_101638CF0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v157 = (uint64_t)&v156 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v196 = (char *)&v156 - v18;
  uint64_t v195 = type metadata accessor for UUID();
  uint64_t v197 = *(void *)(v195 - 8);
  uint64_t v19 = __chkstk_darwin(v195);
  size_t v21 = (char *)&v156 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  int64_t v189 = (void **)((char *)&v156 - v22);
  uint64_t v171 = 0;
  uint64_t v203 = type metadata accessor for BeaconObservation();
  uint64_t v23 = *(void *)(v203 - 8);
  uint64_t v24 = __chkstk_darwin(v203);
  uint64_t v185 = (uint64_t)&v156 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v200 = (uint64_t)&v156 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  unint64_t v30 = (char *)&v156 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v33 = (char *)&v156 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v202 = (uint64_t)&v156 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v199 = (char *)&v156 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v193 = (uint64_t)&v156 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v188 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)&v156 - v41);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v156 - v43;
  __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v156 - v45;
  uint64_t v47 = (void (**)(char *, uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
  unint64_t v205 = _swiftEmptyArrayStorage;
  uint64_t v48 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v198 = v21;
  uint64_t v201 = v33;
  uint64_t v184 = v23;
  if (v48)
  {
    unint64_t v49 = (void *)((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    uint64_t v194 = *(void *)(v23 + 72);
    uint64_t v186 = a1;
    v192 = v49;
    uint64_t v50 = (uint64_t)v49 + a1;
    double v51 = -a2;
    uint64_t v52 = _swiftEmptyArrayStorage;
    uint64_t v53 = (uint64_t)v188;
    while (1)
    {
      sub_1011007F8(v50, (uint64_t)v46, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      int v54 = v46[*(int *)(v203 + 24)];
      sub_1011007F8((uint64_t)v46, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (v54 == 6)
      {
        Date.timeIntervalSinceNow.getter();
        double v56 = v55;
        sub_101100860((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if (v56 >= v51)
        {
          sub_1011008C0((uint64_t)v46, v53, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1000B77F0(0, v52[2] + 1, 1);
          }
          uint64_t v52 = v205;
          unint64_t v58 = v205[2];
          unint64_t v57 = v205[3];
          if (v58 >= v57 >> 1)
          {
            sub_1000B77F0(v57 > 1, v58 + 1, 1);
            uint64_t v52 = v205;
          }
          v52[2] = v58 + 1;
          sub_1011008C0(v53, (uint64_t)v192 + (void)v52 + v58 * v194, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          goto LABEL_5;
        }
      }
      else
      {
        sub_101100860((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      }
      sub_101100860((uint64_t)v46, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_5:
      uint64_t v33 = v201;
      v50 += v194;
      if (!--v48)
      {
        uint64_t v47 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v205;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  int64_t v59 = (int64_t)v47[2];
  uint64_t v60 = v195;
  unint64_t v61 = v196;
  if (v59)
  {
    unint64_t v205 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v59, 0);
    uint64_t v62 = *(unsigned __int8 *)(v184 + 80);
    uint64_t v188 = v47;
    uint64_t v63 = (uint64_t)v47 + ((v62 + 32) & ~v62);
    uint64_t v194 = *(void *)(v184 + 72);
    uint64_t v64 = (uint64_t)v198;
    uint64_t v65 = (void (**)(void **, uint64_t, uint64_t))(v197 + 16);
    v192 = (void *)(v197 + 32);
    uint64_t v66 = v189;
    do
    {
      uint64_t v67 = v193;
      sub_1011007F8(v63, v193, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      (*v65)(v66, v67, v60);
      sub_101100860(v67, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v68 = v205;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v68[2] + 1, 1);
        uint64_t v68 = v205;
      }
      unint64_t v70 = v68[2];
      unint64_t v69 = v68[3];
      if (v70 >= v69 >> 1)
      {
        sub_1000B7034(v69 > 1, v70 + 1, 1);
        uint64_t v68 = v205;
      }
      v68[2] = v70 + 1;
      unint64_t v71 = (unint64_t)v68
          + ((*(unsigned __int8 *)(v197 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v197 + 80))
          + *(void *)(v197 + 72) * v70;
      uint64_t v60 = v195;
      (*(void (**)(unint64_t, void **, uint64_t))(v197 + 32))(v71, v66, v195);
      unint64_t v205 = v68;
      v63 += v194;
      --v59;
      unint64_t v61 = v196;
      uint64_t v33 = v201;
    }
    while (v59);
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v68 = _swiftEmptyArrayStorage;
    uint64_t v64 = (uint64_t)v198;
  }
  uint64_t v72 = sub_101158244((uint64_t)v68);
  swift_bridgeObjectRelease();
  uint64_t v73 = *(void *)(v72 + 56);
  uint64_t v168 = v72 + 56;
  uint64_t v74 = 1 << *(unsigned char *)(v72 + 32);
  unint64_t v205 = (void *)v72;
  uint64_t v75 = -1;
  if (v74 < 64) {
    uint64_t v75 = ~(-1 << v74);
  }
  uint64_t v194 = v75 & v73;
  uint64_t v177 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue;
  int64_t v169 = (unint64_t)(v74 + 63) >> 6;
  uint64_t v179 = v197 + 16;
  uint64_t v180 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v197 + 56);
  uint64_t v178 = v197 + 48;
  v176 = (void (**)(uint64_t, char *, uint64_t))(v197 + 32);
  unint64_t v174 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v184 + 56);
  int64_t v189 = (void **)(v184 + 48);
  uint64_t v166 = (void (**)(char *, uint64_t, uint64_t))(v187 + 16);
  uint64_t v188 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v187 + 56);
  uint64_t v170 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v187 + 48);
  uint64_t v161 = (void (**)(char *, uint64_t, uint64_t))(v187 + 32);
  uint64_t v159 = (void (**)(char *, uint64_t))(v187 + 8);
  uint64_t v172 = (void (**)(uint64_t, uint64_t))(v197 + 8);
  uint64_t v183 = v72;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v77 = 0;
  long long v156 = xmmword_101342130;
  uint64_t v78 = v171;
  uint64_t v79 = v203;
  unint64_t v80 = v194;
  if (!v194) {
    goto LABEL_29;
  }
LABEL_26:
  uint64_t v193 = v77;
  uint64_t v194 = (v80 - 1) & v80;
  for (unint64_t i = __clz(__rbit64(v80)) | (v77 << 6); ; unint64_t i = __clz(__rbit64(v86)) + (v85 << 6))
  {
    uint64_t v88 = v197;
    (*(void (**)(char *, unint64_t, uint64_t))(v197 + 16))(v61, *(void *)(v183 + 48) + *(void *)(v197 + 72) * i, v60);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v61, 0, 1, v60);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v61, 1, v60) == 1) {
      goto LABEL_110;
    }
    (*v176)(v64, v61, v60);
    uint64_t v89 = *(void *)(v190 + v177);
    uint64_t v186 = sub_10000588C(&qword_101655540);
    OS_dispatch_queue.sync<A>(execute:)();
    long long v90 = v204;
    uint64_t v91 = v204[2];
    uint64_t v187 = v89;
    if (v91)
    {
      unint64_t v92 = sub_1007240CC(v64);
      uint64_t v93 = (uint64_t)v199;
      uint64_t v94 = v184;
      if (v95)
      {
        uint64_t v171 = v78;
        uint64_t v96 = *(void *)(v90[7] + 8 * v92);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        size_t v97 = sub_1007100C0(v96);
        swift_bridgeObjectRelease();
        size_t v98 = sub_100B752E8((uint64_t)v97);
        uint64_t result = swift_release();
        uint64_t v99 = _swiftEmptyArrayStorage;
        uint64_t v204 = _swiftEmptyArrayStorage;
        uint64_t v100 = *(void *)(v98 + 16);
        if (v100)
        {
          for (unint64_t j = 0; j != v100; ++j)
          {
            if (j >= *(void *)(v98 + 16)) {
              goto LABEL_112;
            }
            unint64_t v102 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
            uint64_t v103 = *(void *)(v94 + 72);
            sub_1011007F8(v98 + v102 + v103 * j, v93, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
            if (*(unsigned char *)(v93 + *(int *)(v79 + 24)) == 6)
            {
              sub_1011008C0(v93, v202, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                sub_1000B77F0(0, v99[2] + 1, 1);
              }
              uint64_t v99 = v204;
              unint64_t v105 = v204[2];
              unint64_t v104 = v204[3];
              if (v105 >= v104 >> 1)
              {
                sub_1000B77F0(v104 > 1, v105 + 1, 1);
                uint64_t v99 = v204;
              }
              v99[2] = v105 + 1;
              uint64_t result = sub_1011008C0(v202, (uint64_t)v99 + v102 + v105 * v103, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
              uint64_t v79 = v203;
              uint64_t v93 = (uint64_t)v199;
            }
            else
            {
              uint64_t result = sub_101100860(v93, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
            }
          }
          uint64_t v99 = v204;
          uint64_t v64 = (uint64_t)v198;
          uint64_t v33 = v201;
        }
        swift_release();
        uint64_t v78 = v171;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v99 = _swiftEmptyArrayStorage;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v99 = _swiftEmptyArrayStorage;
      uint64_t v94 = v184;
    }
    uint64_t v106 = v99[2];
    if (v106)
    {
      uint64_t v107 = v78;
      uint64_t v108 = (uint64_t)v99
           + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80));
      sub_1011007F8(v108, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t result = swift_bridgeObjectRetain();
      if (v106 != 1)
      {
        unint64_t v120 = 1;
        while (v120 < v99[2])
        {
          sub_1011007F8(v108 + *(void *)(v94 + 72) * v120, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          if (static Date.< infix(_:_:)())
          {
            sub_101100860((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
            uint64_t result = sub_1011008C0((uint64_t)v30, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          }
          else
          {
            uint64_t result = sub_101100860((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          }
          if (v106 == ++v120) {
            goto LABEL_60;
          }
        }
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
        goto LABEL_116;
      }
LABEL_60:
      swift_bridgeObjectRelease();
      uint64_t v109 = v175;
      sub_1011008C0((uint64_t)v33, v175, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v110 = 0;
      uint64_t v78 = v107;
    }
    else
    {
      uint64_t v110 = 1;
      uint64_t v109 = v175;
    }
    uint64_t v111 = v203;
    (*v174)(v109, v110, 1, v203);
    swift_bridgeObjectRelease();
    uint64_t v112 = *v189;
    int v113 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))*v189)(v109, 1, v111);
    uint64_t v114 = (uint64_t)v182;
    unint64_t v115 = v181;
    if (v113 == 1)
    {
      sub_10001DAB4(v109, (uint64_t *)&unk_101655530);
      uint64_t v116 = (uint64_t)v173;
      (*v188)(v173, 1, 1, v191);
LABEL_65:
      uint64_t v60 = v195;
      (*v172)(v64, v195);
      uint64_t result = sub_10001DAB4(v116, (uint64_t *)&unk_10163AC90);
      goto LABEL_66;
    }
    v192 = v112;
    uint64_t v117 = v109 + *(int *)(v111 + 20);
    uint64_t v116 = (uint64_t)v173;
    uint64_t v118 = v191;
    uint64_t v164 = *v166;
    v164(v173, v117, v191);
    sub_101100860(v109, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    unint64_t v167 = *v188;
    v167((char *)v116, 0, 1, v118);
    uint64_t v119 = *v170;
    if ((*v170)(v116, 1, v118) == 1) {
      goto LABEL_65;
    }
    v163 = (unsigned int (*)(char *, uint64_t, uint64_t))v119;
    uint64_t v160 = *v161;
    v160(v165, v116, v191);
    OS_dispatch_queue.sync<A>(execute:)();
    unint64_t v121 = v204;
    uint64_t v79 = v203;
    if (!v204[2]) {
      goto LABEL_93;
    }
    unint64_t v122 = sub_1007240CC(v64);
    if (v123)
    {
      uint64_t v171 = v78;
      uint64_t v124 = *(void *)(v121[7] + 8 * v122);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v125 = sub_1007100C0(v124);
      swift_bridgeObjectRelease();
      size_t v126 = sub_100B752E8((uint64_t)v125);
      uint64_t result = swift_release();
      uint64_t v127 = _swiftEmptyArrayStorage;
      uint64_t v204 = _swiftEmptyArrayStorage;
      uint64_t v128 = *(void *)(v126 + 16);
      if (v128)
      {
        unint64_t v129 = 0;
        uint64_t v130 = &unk_1015A0000;
        while (1)
        {
          if (v129 >= *(void *)(v126 + 16)) {
            goto LABEL_114;
          }
          unint64_t v132 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
          uint64_t v133 = *(void *)(v94 + 72);
          uint64_t result = sub_1011007F8(v126 + v132 + v133 * v129, v200, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          uint64_t v134 = v130[223];
          if (v134)
          {
            uint64_t v135 = qword_10138FA28[*(char *)(v200 + *(int *)(v79 + 24))];
            if (v135 == 3)
            {
LABEL_82:
              sub_1011008C0(v200, v185, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                sub_1000B77F0(0, v127[2] + 1, 1);
              }
              uint64_t v127 = v204;
              unint64_t v137 = v204[2];
              unint64_t v136 = v204[3];
              if (v137 >= v136 >> 1)
              {
                sub_1000B77F0(v136 > 1, v137 + 1, 1);
                uint64_t v127 = v204;
              }
              v127[2] = v137 + 1;
              uint64_t result = sub_1011008C0(v185, (uint64_t)v127 + v132 + v137 * v133, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
              uint64_t v131 = (uint64_t)v198;
              uint64_t v79 = v203;
              uint64_t v130 = (void *)&unk_1015A0000;
              goto LABEL_78;
            }
            if (v134 != 1)
            {
              uint64_t v138 = &stru_100000020.cmd + 1;
              do
              {
                uint64_t v139 = v138 - 31;
                if (__OFADD__(v138 - 32, 1)) {
                  goto LABEL_113;
                }
                if (qword_10138FA28[*((char *)&off_1015A06E8 + v138)] == v135) {
                  goto LABEL_82;
                }
                ++v138;
              }
              while (v139 != v134);
            }
          }
          uint64_t result = sub_101100860(v200, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          uint64_t v131 = (uint64_t)v198;
LABEL_78:
          ++v129;
          uint64_t v33 = v201;
          if (v129 == v128)
          {
            uint64_t v127 = v204;
            uint64_t v64 = v131;
            break;
          }
        }
      }
      swift_release();
      uint64_t v78 = v171;
      uint64_t v114 = (uint64_t)v182;
      unint64_t v115 = v181;
    }
    else
    {
LABEL_93:
      swift_bridgeObjectRelease();
      uint64_t v127 = _swiftEmptyArrayStorage;
    }
    uint64_t v140 = v167;
    sub_100E4D5E0((uint64_t)v127, v114);
    swift_bridgeObjectRelease();
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v192)(v114, 1, v79) == 1)
    {
      sub_10001DAB4(v114, (uint64_t *)&unk_101655530);
      uint64_t v141 = v115;
      uint64_t v142 = 1;
      uint64_t v143 = v191;
    }
    else
    {
      uint64_t v143 = v191;
      v164(v115, v114 + *(int *)(v79 + 20), v191);
      sub_101100860(v114, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v141 = v115;
      uint64_t v142 = 0;
    }
    v140(v141, v142, 1, v143);
    if (v163(v115, 1, v143) == 1)
    {
      (*v159)(v165, v143);
      uint64_t v82 = v195;
      (*v172)(v64, v195);
      uint64_t v83 = (uint64_t)v115;
      uint64_t v60 = v82;
      uint64_t result = sub_10001DAB4(v83, (uint64_t *)&unk_10163AC90);
      unint64_t v61 = v196;
      goto LABEL_28;
    }
    uint64_t v144 = v158;
    v160(v158, (uint64_t)v115, v143);
    uint64_t v145 = v165;
    if (static Date.< infix(_:_:)())
    {
      static os_log_type_t.debug.getter();
      if (qword_1016372F8 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v146 = swift_allocObject();
      *(_OWORD *)(v146 + 16) = v156;
      uint64_t v147 = UUID.uuidString.getter();
      uint64_t v148 = v64;
      uint64_t v150 = v149;
      *(void *)(v146 + 56) = &type metadata for String;
      *(void *)(v146 + 64) = sub_10000B4CC();
      *(void *)(v146 + 32) = v147;
      *(void *)(v146 + 40) = v150;
      uint64_t v64 = v148;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v151 = v157;
      sub_101126F68(v64, v157);
      sub_10001DAB4(v151, &qword_101638CF0);
      uint64_t v152 = *v159;
      uint64_t v153 = v191;
      (*v159)(v158, v191);
      v152(v165, v153);
      uint64_t v154 = v195;
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*v172)(v64, v195);
      uint64_t v60 = v154;
    }
    else
    {
      uint64_t v155 = *v159;
      (*v159)(v144, v143);
      v155(v145, v143);
      uint64_t v60 = v195;
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*v172)(v64, v195);
    }
LABEL_66:
    unint64_t v61 = v196;
    uint64_t v79 = v203;
LABEL_28:
    uint64_t v77 = v193;
    unint64_t v80 = v194;
    if (v194) {
      goto LABEL_26;
    }
LABEL_29:
    BOOL v84 = __OFADD__(v77, 1);
    uint64_t v85 = v77 + 1;
    if (v84) {
      goto LABEL_115;
    }
    if (v85 >= v169) {
      goto LABEL_109;
    }
    unint64_t v86 = *(void *)(v168 + 8 * v85);
    if (!v86) {
      break;
    }
LABEL_39:
    uint64_t v193 = v85;
    uint64_t v194 = (v86 - 1) & v86;
  }
  uint64_t v87 = v85 + 1;
  if (v85 + 1 >= v169) {
    goto LABEL_109;
  }
  unint64_t v86 = *(void *)(v168 + 8 * v87);
  if (v86) {
    goto LABEL_38;
  }
  uint64_t v87 = v85 + 2;
  if (v85 + 2 >= v169) {
    goto LABEL_109;
  }
  unint64_t v86 = *(void *)(v168 + 8 * v87);
  if (v86) {
    goto LABEL_38;
  }
  uint64_t v87 = v85 + 3;
  if (v85 + 3 >= v169)
  {
LABEL_109:
    (*v180)(v61, 1, 1, v60);
LABEL_110:
    swift_release();
    return (uint64_t)v205;
  }
  else
  {
    unint64_t v86 = *(void *)(v168 + 8 * v87);
    if (v86)
    {
LABEL_38:
      uint64_t v85 = v87;
      goto LABEL_39;
    }
    while (1)
    {
      uint64_t v85 = v87 + 1;
      if (__OFADD__(v87, 1)) {
        break;
      }
      if (v85 >= v169) {
        goto LABEL_109;
      }
      unint64_t v86 = *(void *)(v168 + 8 * v85);
      ++v87;
      if (v86) {
        goto LABEL_39;
      }
    }
LABEL_116:
    __break(1u);
  }
  return result;
}

uint64_t sub_1010FACB0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v52 - v8;
  uint64_t v10 = type metadata accessor for BeaconObservation();
  uint64_t v65 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v64 = (uint64_t)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v52 - v13;
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v15 - 8);
  uint64_t v60 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v57 = (uint64_t)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  unint64_t v61 = (char *)&v52 - v21;
  __chkstk_darwin(v20);
  uint64_t v63 = (char *)&v52 - v22;
  sub_10000588C(&qword_101655540);
  uint64_t v58 = v1;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v23 = v66;
  uint64_t v24 = v66[2];
  uint64_t v62 = v9;
  if (!v24)
  {
    swift_bridgeObjectRelease();
    uint64_t v31 = _swiftEmptyArrayStorage;
    uint64_t v39 = a1;
LABEL_18:
    uint64_t v40 = (uint64_t)v63;
    uint64_t v41 = (uint64_t)v60;
    sub_100E4D5E0((uint64_t)v31, v41);
    swift_bridgeObjectRelease();
    uint64_t v42 = v7;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v41, 1, v10) == 1)
    {
      sub_10001DAB4(v41, (uint64_t *)&unk_101655530);
      uint64_t v43 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v40, v41 + *(int *)(v10 + 20), v3);
      sub_101100860(v41, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v43 = 0;
    }
    uint64_t v44 = (uint64_t)v61;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v40, v43, 1, v3);
    sub_10001E2BC(v40, v44);
    uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    if (v45(v44, 1, v3) == 1)
    {
      sub_10001DAB4(v40, (uint64_t *)&unk_10163AC90);
      char v46 = 0;
    }
    else
    {
      uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
      v47(v62, v44, v3);
      uint64_t v48 = v39;
      uint64_t v49 = v57;
      sub_1010FC430(v48, (uint64_t)&off_1015A0710, v57);
      if (v45(v49, 1, v3) == 1)
      {
        static Date.distantPast.getter();
        sub_10001DAB4(v49, (uint64_t *)&unk_10163AC90);
      }
      else
      {
        v47(v42, v49, v3);
      }
      uint64_t v50 = v62;
      uint64_t v44 = (uint64_t)v63;
      char v46 = static Date.> infix(_:_:)();
      double v51 = *(void (**)(char *, uint64_t))(v4 + 8);
      v51(v42, v3);
      v51(v50, v3);
    }
    sub_10001DAB4(v44, (uint64_t *)&unk_10163AC90);
    return v46 & 1;
  }
  uint64_t v56 = a1;
  unint64_t v25 = sub_1007240CC(a1);
  if ((v26 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v31 = _swiftEmptyArrayStorage;
    uint64_t v39 = v56;
    goto LABEL_18;
  }
  double v55 = v7;
  uint64_t v27 = *(void *)(v23[7] + 8 * v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = sub_1007100C0(v27);
  swift_bridgeObjectRelease();
  size_t v29 = sub_100B752E8((uint64_t)v28);
  uint64_t result = swift_release();
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v66 = _swiftEmptyArrayStorage;
  uint64_t v32 = *(void *)(v29 + 16);
  if (!v32)
  {
LABEL_17:
    uint64_t v7 = v55;
    uint64_t v39 = v56;
    swift_release();
    goto LABEL_18;
  }
  uint64_t v53 = v4;
  uint64_t v54 = v3;
  unint64_t v33 = 0;
  while (v33 < *(void *)(v29 + 16))
  {
    unint64_t v34 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
    uint64_t v35 = *(void *)(v65 + 72);
    sub_1011007F8(v29 + v34 + v35 * v33, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    if (v14[*(int *)(v10 + 24)] == 10)
    {
      uint64_t v36 = v10;
      sub_1011008C0((uint64_t)v14, v64, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B77F0(0, v31[2] + 1, 1);
      }
      uint64_t v31 = v66;
      unint64_t v38 = v66[2];
      unint64_t v37 = v66[3];
      if (v38 >= v37 >> 1)
      {
        sub_1000B77F0(v37 > 1, v38 + 1, 1);
        uint64_t v31 = v66;
      }
      v31[2] = v38 + 1;
      uint64_t result = sub_1011008C0(v64, (uint64_t)v31 + v34 + v38 * v35, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v10 = v36;
    }
    else
    {
      uint64_t result = sub_101100860((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    }
    if (v32 == ++v33)
    {
      uint64_t v31 = v66;
      uint64_t v4 = v53;
      uint64_t v3 = v54;
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1010FB348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BeaconObservation();
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v36 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101655540);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v13 = v38;
  if (!v38[2] || (unint64_t v14 = sub_1007240CC(a1), (v15 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = _swiftEmptyArrayStorage;
    goto LABEL_17;
  }
  uint64_t v16 = *(void *)(v13[7] + 8 * v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = sub_1007100C0(v16);
  swift_bridgeObjectRelease();
  size_t v18 = sub_100B752E8((uint64_t)v17);
  uint64_t result = swift_release();
  uint64_t v20 = _swiftEmptyArrayStorage;
  unint64_t v38 = _swiftEmptyArrayStorage;
  uint64_t v21 = *(void *)(v18 + 16);
  if (!v21)
  {
LABEL_16:
    swift_release();
LABEL_17:
    sub_100E4D5E0((uint64_t)v20, (uint64_t)v11);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v11, 1, v4) == 1)
    {
      sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_101655530);
      uint64_t v28 = type metadata accessor for Date();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a2, 1, 1, v28);
    }
    else
    {
      size_t v29 = &v11[*(int *)(v4 + 20)];
      uint64_t v30 = type metadata accessor for Date();
      uint64_t v31 = *(void *)(v30 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(a2, v29, v30);
      sub_101100860((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(a2, 0, 1, v30);
    }
  }
  unint64_t v33 = v12;
  unint64_t v34 = v11;
  uint64_t v35 = a2;
  unint64_t v22 = 0;
  while (v22 < *(void *)(v18 + 16))
  {
    unint64_t v23 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    uint64_t v24 = *(void *)(v37 + 72);
    sub_1011007F8(v18 + v23 + v24 * v22, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    if (v8[*(int *)(v4 + 24)] == 6)
    {
      uint64_t v25 = v4;
      sub_1011008C0((uint64_t)v8, v36, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B77F0(0, v20[2] + 1, 1);
      }
      uint64_t v20 = v38;
      unint64_t v27 = v38[2];
      unint64_t v26 = v38[3];
      if (v27 >= v26 >> 1)
      {
        sub_1000B77F0(v26 > 1, v27 + 1, 1);
        uint64_t v20 = v38;
      }
      void v20[2] = v27 + 1;
      uint64_t result = sub_1011008C0(v36, (uint64_t)v20 + v23 + v27 * v24, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v4 = v25;
    }
    else
    {
      uint64_t result = sub_101100860((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    }
    if (v21 == ++v22)
    {
      uint64_t v20 = v38;
      uint64_t v11 = v34;
      a2 = v35;
      uint64_t v12 = v33;
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1010FB7DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BeaconObservation();
  uint64_t v67 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v64 = (uint64_t)&v59 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v65 = (char *)&v59 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v59 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v59 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v59 - v19;
  __chkstk_darwin(v18);
  unint64_t v22 = (char *)&v59 - v21;
  uint64_t v23 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v23 - 8);
  unint64_t v61 = (char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101655540);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v25 = v71;
  if (v71[2] && (unint64_t v26 = sub_1007240CC(a1), (v27 & 1) != 0))
  {
    uint64_t v28 = *(void *)(v25[7] + 8 * v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    size_t v29 = sub_1007100C0(v28);
    swift_bridgeObjectRelease();
    size_t v30 = sub_100B752E8((uint64_t)v29);
    uint64_t result = swift_release();
    uint64_t v32 = _swiftEmptyArrayStorage;
    unint64_t v71 = _swiftEmptyArrayStorage;
    uint64_t v63 = *(void *)(v30 + 16);
    if (v63)
    {
      uint64_t v68 = v4;
      uint64_t v59 = a2;
      unint64_t v33 = 0;
      uint64_t v66 = v14;
      uint64_t v62 = v7;
      while (1)
      {
        if (v33 >= *(void *)(v30 + 16))
        {
          __break(1u);
          return result;
        }
        unint64_t v34 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
        uint64_t v69 = *(void *)(v67 + 72);
        unint64_t v70 = v34;
        sub_1011007F8(v30 + v34 + v69 * v33, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v35 = v68;
        int v36 = v22[*(int *)(v68 + 24)];
        sub_1011007F8((uint64_t)v22, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if (v36 == 1) {
          break;
        }
        int v38 = v20[*(int *)(v35 + 24)];
        sub_101100860((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        sub_1011007F8((uint64_t)v22, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v37 = (uint64_t)v65;
        if (v38 == 33) {
          goto LABEL_9;
        }
        int v45 = v17[*(int *)(v68 + 24)];
        sub_101100860((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        size_t v46 = v30;
        uint64_t v47 = v20;
        uint64_t v48 = v17;
        uint64_t v49 = (uint64_t)v66;
        sub_1011007F8((uint64_t)v22, (uint64_t)v66, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        BOOL v50 = v45 == 34;
        uint64_t v39 = v49;
        uint64_t v17 = v48;
        uint64_t v20 = v47;
        size_t v30 = v46;
        if (v50) {
          goto LABEL_10;
        }
        int v51 = v66[*(int *)(v68 + 24)];
        sub_101100860((uint64_t)v66, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        sub_1011007F8((uint64_t)v22, v37, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v40 = v37;
        uint64_t v41 = (uint64_t)v62;
        if (v51 == 15) {
          goto LABEL_11;
        }
        int v52 = *(unsigned __int8 *)(v40 + *(int *)(v68 + 24));
        sub_101100860(v40, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v42 = v64;
        sub_1011007F8((uint64_t)v22, v64, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if (v52 == 16) {
          goto LABEL_12;
        }
        int v53 = *(unsigned __int8 *)(v42 + *(int *)(v68 + 24));
        sub_101100860(v42, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if (v53 == 10) {
          goto LABEL_13;
        }
        uint64_t result = sub_101100860((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_18:
        if (v63 == ++v33)
        {
          uint64_t v32 = v71;
          a2 = v59;
          uint64_t v4 = v68;
          goto LABEL_26;
        }
      }
      sub_101100860((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      sub_1011007F8((uint64_t)v22, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v37 = (uint64_t)v65;
LABEL_9:
      sub_101100860((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v39 = (uint64_t)v66;
      sub_1011007F8((uint64_t)v22, (uint64_t)v66, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_10:
      sub_101100860(v39, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      sub_1011007F8((uint64_t)v22, v37, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v40 = v37;
      uint64_t v41 = (uint64_t)v62;
LABEL_11:
      sub_101100860(v40, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v42 = v64;
      sub_1011007F8((uint64_t)v22, v64, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_12:
      sub_101100860(v42, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_13:
      sub_1011008C0((uint64_t)v22, v41, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B77F0(0, v32[2] + 1, 1);
      }
      uint64_t v32 = v71;
      unint64_t v44 = v71[2];
      unint64_t v43 = v71[3];
      if (v44 >= v43 >> 1)
      {
        sub_1000B77F0(v43 > 1, v44 + 1, 1);
        uint64_t v32 = v71;
      }
      void v32[2] = v44 + 1;
      uint64_t result = sub_1011008C0(v41, (uint64_t)v32 + v70 + v44 * v69, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      goto LABEL_18;
    }
LABEL_26:
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = _swiftEmptyArrayStorage;
  }
  uint64_t v54 = (uint64_t)v61;
  sub_100E4D5E0((uint64_t)v32, v54);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v54, 1, v4) == 1)
  {
    sub_10001DAB4(v54, (uint64_t *)&unk_101655530);
    uint64_t v55 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(a2, 1, 1, v55);
  }
  else
  {
    uint64_t v56 = v54 + *(int *)(v4 + 20);
    uint64_t v57 = type metadata accessor for Date();
    uint64_t v58 = *(void *)(v57 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(a2, v56, v57);
    sub_101100860(v54, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(a2, 0, 1, v57);
  }
}

uint64_t sub_1010FBF9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BeaconObservation();
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v36 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_101655540);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v13 = v38;
  if (!v38[2] || (unint64_t v14 = sub_1007240CC(a1), (v15 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = _swiftEmptyArrayStorage;
    goto LABEL_17;
  }
  uint64_t v16 = *(void *)(v13[7] + 8 * v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = sub_1007100C0(v16);
  swift_bridgeObjectRelease();
  size_t v18 = sub_100B752E8((uint64_t)v17);
  uint64_t result = swift_release();
  uint64_t v20 = _swiftEmptyArrayStorage;
  int v38 = _swiftEmptyArrayStorage;
  uint64_t v21 = *(void *)(v18 + 16);
  if (!v21)
  {
LABEL_16:
    swift_release();
LABEL_17:
    sub_100E4D5E0((uint64_t)v20, (uint64_t)v11);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v11, 1, v4) == 1)
    {
      sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_101655530);
      uint64_t v28 = type metadata accessor for Date();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a2, 1, 1, v28);
    }
    else
    {
      size_t v29 = &v11[*(int *)(v4 + 20)];
      uint64_t v30 = type metadata accessor for Date();
      uint64_t v31 = *(void *)(v30 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(a2, v29, v30);
      sub_101100860((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(a2, 0, 1, v30);
    }
  }
  unint64_t v33 = v12;
  unint64_t v34 = v11;
  uint64_t v35 = a2;
  unint64_t v22 = 0;
  while (v22 < *(void *)(v18 + 16))
  {
    unint64_t v23 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    uint64_t v24 = *(void *)(v37 + 72);
    sub_1011007F8(v18 + v23 + v24 * v22, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    if (v8[*(int *)(v4 + 24)] == 9)
    {
      uint64_t v25 = v4;
      sub_1011008C0((uint64_t)v8, v36, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B77F0(0, v20[2] + 1, 1);
      }
      uint64_t v20 = v38;
      unint64_t v27 = v38[2];
      unint64_t v26 = v38[3];
      if (v27 >= v26 >> 1)
      {
        sub_1000B77F0(v26 > 1, v27 + 1, 1);
        uint64_t v20 = v38;
      }
      void v20[2] = v27 + 1;
      uint64_t result = sub_1011008C0(v36, (uint64_t)v20 + v23 + v27 * v24, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v4 = v25;
    }
    else
    {
      uint64_t result = sub_101100860((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    }
    if (v21 == ++v22)
    {
      uint64_t v20 = v38;
      uint64_t v11 = v34;
      a2 = v35;
      uint64_t v12 = v33;
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1010FC430@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for BeaconObservation();
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v42 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_10000588C(&qword_101655540);
  OS_dispatch_queue.sync<A>(execute:)();
  unint64_t v14 = v44;
  if (v44[2] && (unint64_t v15 = sub_1007240CC(a1), (v16 & 1) != 0))
  {
    uint64_t v17 = *(void *)(v14[7] + 8 * v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    size_t v18 = sub_1007100C0(v17);
    swift_bridgeObjectRelease();
    size_t v19 = sub_100B752E8((uint64_t)v18);
    uint64_t result = swift_release();
    uint64_t v21 = _swiftEmptyArrayStorage;
    unint64_t v44 = _swiftEmptyArrayStorage;
    uint64_t v43 = *(void *)(v19 + 16);
    if (v43)
    {
      uint64_t v37 = v13;
      uint64_t v38 = a3;
      unint64_t v22 = 0;
      uint64_t v23 = v41;
      uint64_t v40 = v6;
      while (1)
      {
        if (v22 >= *(void *)(v19 + 16))
        {
LABEL_29:
          __break(1u);
          return result;
        }
        unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
        uint64_t v25 = *(void *)(v23 + 72);
        uint64_t result = sub_1011007F8(v19 + v24 + v25 * v22, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v26 = *(void *)(a2 + 16);
        if (v26)
        {
          uint64_t v27 = qword_10138FA28[v10[*(int *)(v6 + 24)]];
          if (qword_10138FA28[*(char *)(a2 + 32)] == v27)
          {
LABEL_10:
            sub_1011008C0((uint64_t)v10, v42, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_1000B77F0(0, v21[2] + 1, 1);
            }
            uint64_t v21 = v44;
            unint64_t v29 = v44[2];
            unint64_t v28 = v44[3];
            if (v29 >= v28 >> 1)
            {
              sub_1000B77F0(v28 > 1, v29 + 1, 1);
              uint64_t v21 = v44;
            }
            void v21[2] = v29 + 1;
            uint64_t result = sub_1011008C0(v42, (uint64_t)v21 + v24 + v29 * v25, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
            uint64_t v6 = v40;
            uint64_t v23 = v41;
            goto LABEL_6;
          }
          if (v26 != 1)
          {
            uint64_t v30 = 33;
            while (1)
            {
              uint64_t v31 = v30 - 31;
              if (__OFADD__(v30 - 32, 1)) {
                break;
              }
              if (qword_10138FA28[*(char *)(a2 + v30)] == v27) {
                goto LABEL_10;
              }
              ++v30;
              if (v31 == v26) {
                goto LABEL_5;
              }
            }
            __break(1u);
            goto LABEL_29;
          }
        }
LABEL_5:
        uint64_t result = sub_101100860((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_6:
        if (++v22 == v43)
        {
          uint64_t v21 = v44;
          uint64_t v13 = v37;
          a3 = v38;
          goto LABEL_24;
        }
      }
    }
    uint64_t v23 = v41;
LABEL_24:
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = _swiftEmptyArrayStorage;
    uint64_t v23 = v41;
  }
  swift_bridgeObjectRelease();
  sub_100E4D5E0((uint64_t)v21, (uint64_t)v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v13, 1, v6) == 1)
  {
    sub_10001DAB4((uint64_t)v13, (uint64_t *)&unk_101655530);
    uint64_t v32 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(a3, 1, 1, v32);
  }
  else
  {
    unint64_t v33 = &v13[*(int *)(v6 + 20)];
    uint64_t v34 = type metadata accessor for Date();
    uint64_t v35 = *(void *)(v34 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(a3, v33, v34);
    sub_101100860((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(a3, 0, 1, v34);
  }
}

Swift::Int sub_1010FC938(void *a1)
{
  uint64_t v2 = v1;
  uint64_t updated = type metadata accessor for UpdateDeviceState();
  uint64_t v128 = *(void *)(updated - 8);
  uint64_t v4 = __chkstk_darwin(updated);
  uint64_t v125 = (uint64_t)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v136 = (uint64_t)&v119 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v132 = (uint64_t)&v119 - v9;
  __chkstk_darwin(v8);
  uint64_t v131 = (uint64_t)&v119 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_142;
    }
    if (v11) {
      return sub_1010FD3CC(0, v11, 1, a1);
    }
    return result;
  }
  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_150;
  }
  Swift::Int v121 = result;
  if (v11 < 2)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    unint64_t v127 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80));
    if (v11 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      size_t v19 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      unint64_t v120 = v17;
      if (v20 >= 2)
      {
        uint64_t v111 = *a1;
        do
        {
          unint64_t v112 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_137;
          }
          if (!v111) {
            goto LABEL_149;
          }
          int v113 = v19;
          uint64_t v114 = v19 + 32;
          uint64_t v115 = *(void *)&v19[16 * v112 + 32];
          uint64_t v116 = *(void *)&v19[16 * v20 + 24];
          sub_1010FD67C(v111 + *(void *)(v128 + 72) * v115, v111 + *(void *)(v128 + 72) * *(void *)&v114[16 * v20 - 16], v111 + *(void *)(v128 + 72) * v116, v127);
          if (v2) {
            break;
          }
          if (v116 < v115) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int v113 = sub_100B73584((uint64_t)v113);
          }
          if (v112 >= *((void *)v113 + 2)) {
            goto LABEL_139;
          }
          uint64_t v117 = &v113[16 * v112 + 32];
          *(void *)uint64_t v117 = v115;
          *((void *)v117 + 1) = v116;
          unint64_t v118 = *((void *)v113 + 2);
          if (v20 > v118) {
            goto LABEL_140;
          }
          size_t v19 = v113;
          memmove(&v113[16 * v20 + 16], &v113[16 * v20 + 32], 16 * (v118 - v20));
          *((void *)v113 + 2) = v118 - 1;
          unint64_t v20 = v118 - 1;
        }
        while (v118 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      v120[2] = 0;
      return swift_bridgeObjectRelease();
    }
    unint64_t v120 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v128 + 80);
    unint64_t v120 = (void *)v15;
    unint64_t v127 = v15 + ((v16 + 32) & ~v16);
  }
  Swift::Int v18 = 0;
  size_t v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v134 = a1;
  while (1)
  {
    Swift::Int v21 = v18;
    Swift::Int v22 = v18 + 1;
    Swift::Int v126 = v18;
    if (v18 + 1 >= v11)
    {
      Swift::Int v35 = v18 + 1;
      goto LABEL_59;
    }
    uint64_t v123 = v2;
    Swift::Int v23 = *a1;
    Swift::Int v24 = *(void *)(v128 + 72);
    uint64_t v25 = v131;
    sub_1011007F8(*a1 + v24 * v22, v131, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
    uint64_t v26 = v132;
    sub_1011007F8(v23 + v24 * v21, v132, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
    LODWORD(v133) = static Date.> infix(_:_:)();
    sub_101100860(v26, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
    sub_101100860(v25, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
    Swift::Int v130 = v23;
    Swift::Int v137 = v24;
    if (v21 + 2 >= v11)
    {
      Swift::Int v29 = v21 + 2;
    }
    else
    {
      unint64_t v122 = v19;
      uint64_t v27 = v24 * v22;
      Swift::Int v28 = v23;
      Swift::Int v29 = v21 + 2;
      uint64_t v30 = v24 * (v21 + 2);
      while (1)
      {
        Swift::Int v31 = v11;
        uint64_t v32 = v131;
        sub_1011007F8(v28 + v30, v131, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
        uint64_t v33 = v132;
        sub_1011007F8(v28 + v27, v132, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
        int v34 = static Date.> infix(_:_:)();
        sub_101100860(v33, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
        sub_101100860(v32, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
        if ((v133 ^ v34)) {
          break;
        }
        v28 += v137;
        ++v29;
        Swift::Int v11 = v31;
        if (v31 == v29)
        {
          Swift::Int v29 = v31;
          size_t v19 = v122;
          Swift::Int v21 = v126;
          goto LABEL_25;
        }
      }
      size_t v19 = v122;
      Swift::Int v21 = v126;
      Swift::Int v11 = v31;
    }
LABEL_25:
    a1 = v134;
    if ((v133 & 1) == 0)
    {
      Swift::Int v35 = v29;
      goto LABEL_39;
    }
    if (v29 < v21) {
      goto LABEL_143;
    }
    Swift::Int v35 = v29;
    if (v21 < v29) {
      break;
    }
LABEL_39:
    uint64_t v2 = v123;
    if (v35 < v11) {
      goto LABEL_42;
    }
LABEL_59:
    if (v35 < v21) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v133 = v35;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      size_t v19 = sub_100B729CC(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v60 = *((void *)v19 + 2);
    unint64_t v59 = *((void *)v19 + 3);
    unint64_t v20 = v60 + 1;
    if (v60 >= v59 >> 1) {
      size_t v19 = sub_100B729CC((char *)(v59 > 1), v60 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v20;
    unint64_t v61 = v19 + 32;
    uint64_t v62 = &v19[16 * v60 + 32];
    Swift::Int v63 = v133;
    *(void *)uint64_t v62 = v21;
    *((void *)v62 + 1) = v63;
    if (v60)
    {
      while (1)
      {
        unint64_t v64 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v69 = &v61[16 * v20];
          uint64_t v70 = *((void *)v69 - 8);
          uint64_t v71 = *((void *)v69 - 7);
          BOOL v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_125;
          }
          uint64_t v74 = *((void *)v69 - 6);
          uint64_t v73 = *((void *)v69 - 5);
          BOOL v75 = __OFSUB__(v73, v74);
          uint64_t v67 = v73 - v74;
          char v68 = v75;
          if (v75) {
            goto LABEL_126;
          }
          unint64_t v76 = v20 - 2;
          uint64_t v77 = &v61[16 * v20 - 32];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          BOOL v75 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          if (v75) {
            goto LABEL_128;
          }
          BOOL v75 = __OFADD__(v67, v80);
          uint64_t v81 = v67 + v80;
          if (v75) {
            goto LABEL_131;
          }
          if (v81 >= v72)
          {
            uint64_t v99 = &v61[16 * v64];
            uint64_t v101 = *(void *)v99;
            uint64_t v100 = *((void *)v99 + 1);
            BOOL v75 = __OFSUB__(v100, v101);
            uint64_t v102 = v100 - v101;
            if (v75) {
              goto LABEL_135;
            }
            BOOL v92 = v67 < v102;
            goto LABEL_96;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v93 = *((void *)v19 + 4);
            uint64_t v94 = *((void *)v19 + 5);
            BOOL v75 = __OFSUB__(v94, v93);
            uint64_t v86 = v94 - v93;
            char v87 = v75;
            goto LABEL_90;
          }
          uint64_t v66 = *((void *)v19 + 4);
          uint64_t v65 = *((void *)v19 + 5);
          BOOL v75 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          char v68 = v75;
        }
        if (v68) {
          goto LABEL_127;
        }
        unint64_t v76 = v20 - 2;
        uint64_t v82 = &v61[16 * v20 - 32];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v85 = __OFSUB__(v83, v84);
        uint64_t v86 = v83 - v84;
        char v87 = v85;
        if (v85) {
          goto LABEL_130;
        }
        uint64_t v88 = &v61[16 * v64];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v75 = __OFSUB__(v89, v90);
        uint64_t v91 = v89 - v90;
        if (v75) {
          goto LABEL_133;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_134;
        }
        if (v86 + v91 >= v67)
        {
          BOOL v92 = v67 < v91;
LABEL_96:
          if (v92) {
            unint64_t v64 = v76;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v87) {
          goto LABEL_129;
        }
        char v95 = &v61[16 * v64];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v75 = __OFSUB__(v96, v97);
        uint64_t v98 = v96 - v97;
        if (v75) {
          goto LABEL_132;
        }
        if (v98 < v86) {
          goto LABEL_15;
        }
LABEL_98:
        unint64_t v103 = v64 - 1;
        if (v64 - 1 >= v20)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        uint64_t v104 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        unint64_t v105 = v19;
        uint64_t v106 = &v61[16 * v103];
        uint64_t v107 = *(void *)v106;
        uint64_t v108 = &v61[16 * v64];
        uint64_t v109 = *((void *)v108 + 1);
        sub_1010FD67C(v104 + *(void *)(v128 + 72) * *(void *)v106, v104 + *(void *)(v128 + 72) * *(void *)v108, v104 + *(void *)(v128 + 72) * v109, v127);
        if (v2) {
          goto LABEL_118;
        }
        if (v109 < v107) {
          goto LABEL_122;
        }
        if (v64 > *((void *)v105 + 2)) {
          goto LABEL_123;
        }
        *(void *)uint64_t v106 = v107;
        *(void *)&v61[16 * v103 + 8] = v109;
        unint64_t v110 = *((void *)v105 + 2);
        if (v64 >= v110) {
          goto LABEL_124;
        }
        size_t v19 = v105;
        unint64_t v20 = v110 - 1;
        memmove(&v61[16 * v64], v108 + 16, 16 * (v110 - 1 - v64));
        *((void *)v105 + 2) = v110 - 1;
        a1 = v134;
        if (v110 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_15:
    Swift::Int v11 = a1[1];
    Swift::Int v18 = v133;
    if (v133 >= v11)
    {
      uint64_t v17 = v120;
      goto LABEL_107;
    }
  }
  Swift::Int v133 = v11;
  unint64_t v122 = v19;
  uint64_t v36 = 0;
  Swift::Int v37 = v137;
  uint64_t v38 = v137 * (v29 - 1);
  Swift::Int v39 = v29 * v137;
  Swift::Int v40 = v21;
  uint64_t v41 = v21 * v137;
  do
  {
    if (v40 != v35 + v36 - 1)
    {
      Swift::Int v42 = v130;
      if (!v130) {
        goto LABEL_148;
      }
      unint64_t v43 = v130 + v41;
      sub_1011008C0(v130 + v41, v125, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
      if (v41 < v38 || v43 >= v42 + v39)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v41 != v38)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      sub_1011008C0(v125, v42 + v38, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
      a1 = v134;
      Swift::Int v35 = v29;
      Swift::Int v37 = v137;
    }
    ++v40;
    --v36;
    v38 -= v37;
    v39 -= v37;
    v41 += v37;
  }
  while (v40 < v35 + v36);
  size_t v19 = v122;
  uint64_t v2 = v123;
  Swift::Int v21 = v126;
  Swift::Int v11 = v133;
  if (v35 >= v133) {
    goto LABEL_59;
  }
LABEL_42:
  if (__OFSUB__(v35, v21)) {
    goto LABEL_141;
  }
  if (v35 - v21 >= v121) {
    goto LABEL_59;
  }
  if (__OFADD__(v21, v121)) {
    goto LABEL_144;
  }
  if (v21 + v121 >= v11) {
    Swift::Int v44 = v11;
  }
  else {
    Swift::Int v44 = v21 + v121;
  }
  if (v44 >= v21)
  {
    if (v35 != v44)
    {
      unint64_t v122 = v19;
      uint64_t v123 = v2;
      uint64_t v45 = *(void *)(v128 + 72);
      uint64_t v46 = v45 * (v35 - 1);
      uint64_t v129 = v45;
      Swift::Int v47 = v35 * v45;
      Swift::Int v124 = v44;
      do
      {
        uint64_t v49 = 0;
        Swift::Int v133 = v35;
        Swift::Int v130 = v47;
        while (1)
        {
          Swift::Int v137 = v21;
          uint64_t v50 = *a1;
          uint64_t v51 = v131;
          sub_1011007F8(v47 + v49 + *a1, v131, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
          uint64_t v52 = v46;
          uint64_t v53 = v46 + v49 + v50;
          uint64_t v54 = a1;
          uint64_t v55 = v132;
          sub_1011007F8(v53, v132, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
          LOBYTE(v50) = static Date.> infix(_:_:)();
          sub_101100860(v55, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
          sub_101100860(v51, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
          if ((v50 & 1) == 0) {
            break;
          }
          uint64_t v56 = *v54;
          if (!*v54) {
            goto LABEL_146;
          }
          Swift::Int v47 = v130;
          uint64_t v46 = v52;
          uint64_t v57 = v56 + v52 + v49;
          sub_1011008C0(v56 + v130 + v49, v136, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
          swift_arrayInitWithTakeFrontToBack();
          sub_1011008C0(v136, v57, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
          v49 -= v129;
          Swift::Int v21 = v137 + 1;
          Swift::Int v48 = v133;
          a1 = v134;
          if (v133 == v137 + 1) {
            goto LABEL_52;
          }
        }
        Swift::Int v48 = v133;
        a1 = v54;
        uint64_t v46 = v52;
        Swift::Int v47 = v130;
LABEL_52:
        Swift::Int v35 = v48 + 1;
        v46 += v129;
        v47 += v129;
        Swift::Int v21 = v126;
      }
      while (v35 != v124);
      Swift::Int v35 = v124;
      size_t v19 = v122;
      uint64_t v2 = v123;
    }
    goto LABEL_59;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1010FD3CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v25 = a1;
  uint64_t updated = type metadata accessor for UpdateDeviceState();
  uint64_t v7 = __chkstk_darwin(updated);
  uint64_t v29 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  Swift::Int v11 = (char *)&v23 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v27 = a3;
  uint64_t v24 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v31 = v16 * (v27 - 1);
    uint64_t v26 = v16;
    uint64_t v30 = v16 * v27;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v25;
    while (1)
    {
      uint64_t v19 = *a4;
      unint64_t v20 = a4;
      sub_1011007F8(v30 + v17 + *a4, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
      sub_1011007F8(v31 + v17 + v19, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
      LOBYTE(v19) = static Date.> infix(_:_:)();
      sub_101100860((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
      uint64_t result = sub_101100860((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
      if ((v19 & 1) == 0)
      {
LABEL_4:
        v31 += v26;
        v30 += v26;
        if (++v27 == v24) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v21 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v22 = v21 + v31 + v17;
      sub_1011008C0(v21 + v30 + v17, v29, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1011008C0(v29, v22, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
      v17 -= v26;
      ++v18;
      a4 = v20;
      if (v27 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1010FD67C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t updated = type metadata accessor for UpdateDeviceState();
  uint64_t v8 = __chkstk_darwin(updated);
  uint64_t v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  Swift::Int v11 = (char *)&v41 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_61;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_62;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v48 = a1;
  unint64_t v47 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v26 = a4 + v18;
      unint64_t v46 = a4 + v18;
      unint64_t v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v28 = -v13;
        unint64_t v42 = a4;
        unint64_t v43 = a1;
        do
        {
          unint64_t v29 = a3 + v28;
          sub_1011007F8(v26 + v28, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
          unint64_t v30 = a2 + v28;
          unint64_t v31 = a3;
          uint64_t v32 = (uint64_t)v11;
          uint64_t v33 = v44;
          sub_1011007F8(a2 + v28, v44, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
          char v34 = static Date.> infix(_:_:)();
          uint64_t v35 = v33;
          Swift::Int v11 = (char *)v32;
          sub_101100860(v35, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
          sub_101100860(v32, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
          if (v34)
          {
            if (v31 < a2 || v29 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v37 = v42;
              unint64_t v38 = v43;
            }
            else
            {
              BOOL v36 = v31 == a2;
              unint64_t v37 = v42;
              unint64_t v38 = v43;
              if (!v36) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v48 += v28;
          }
          else
          {
            unint64_t v39 = v46;
            v46 += v28;
            if (v31 < v39 || v29 >= v39)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v30 = a2;
              unint64_t v37 = v42;
              unint64_t v38 = v43;
            }
            else
            {
              unint64_t v38 = v43;
              if (v31 != v39) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v30 = a2;
              unint64_t v37 = v42;
            }
          }
          unint64_t v26 = v46;
          if (v46 <= v37) {
            break;
          }
          a2 = v30;
          a3 = v29;
        }
        while (v30 > v38);
      }
      goto LABEL_59;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v19 = a4 + v17;
    unint64_t v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_1011007F8(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
        uint64_t v21 = v44;
        sub_1011007F8(a4, v44, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
        char v22 = static Date.> infix(_:_:)();
        sub_101100860(v21, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
        sub_101100860((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
        unint64_t v23 = v48;
        if (v22)
        {
          unint64_t v24 = a2 + v13;
          if (v48 < a2 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v48 == a2)
          {
            unint64_t v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v25 = v47 + v13;
          if (v48 < v47 || v48 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v47 = v25;
          unint64_t v24 = a2;
        }
        unint64_t v48 = v23 + v13;
        a4 = v47;
        if (v47 >= v19) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_59:
    sub_100B72D04(&v48, &v47, (uint64_t *)&v46);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1010FDB70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  unint64_t v61 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10166B630);
  __chkstk_darwin(v9 - 8);
  Swift::Int v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for UpdateDeviceState();
  uint64_t v12 = *(void *)(updated - 8);
  uint64_t v13 = __chkstk_darwin(updated - 8);
  uint64_t v55 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v53 = (uint64_t)&v52 - v15;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v20 - 8);
  unint64_t v76 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(a1 + 56);
  uint64_t v63 = a1 + 56;
  uint64_t v23 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & v22;
  int64_t v64 = (unint64_t)(v23 + 63) >> 6;
  uint64_t v78 = v17 + 16;
  BOOL v75 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  uint64_t v73 = v17 + 48;
  uint64_t v70 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v71 = (void (**)(char *, char *, uint64_t))(v17 + 32);
  uint64_t v58 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v74 = v17;
  uint64_t v67 = (void (**)(char *, uint64_t))(v17 + 8);
  char v68 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  uint64_t v26 = (uint64_t)v11;
  uint64_t v54 = v12;
  uint64_t v66 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  uint64_t v77 = a1;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v28 = 0;
  uint64_t v56 = _swiftEmptyArrayStorage;
  long long v57 = xmmword_101342130;
  uint64_t v59 = v16;
  unint64_t v60 = v11;
  uint64_t v69 = v6;
LABEL_4:
  uint64_t v29 = v62;
  unint64_t v30 = v76;
  if (v25)
  {
LABEL_5:
    uint64_t v79 = (v25 - 1) & v25;
    int64_t v80 = v28;
    unint64_t v31 = __clz(__rbit64(v25)) | (v28 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v32 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v32 >= v64) {
      goto LABEL_36;
    }
    unint64_t v33 = *(void *)(v63 + 8 * v32);
    int64_t v34 = v28 + 1;
    if (!v33)
    {
      int64_t v34 = v28 + 2;
      if (v28 + 2 >= v64) {
        goto LABEL_36;
      }
      unint64_t v33 = *(void *)(v63 + 8 * v34);
      if (!v33)
      {
        int64_t v34 = v28 + 3;
        if (v28 + 3 >= v64) {
          goto LABEL_36;
        }
        unint64_t v33 = *(void *)(v63 + 8 * v34);
        if (!v33)
        {
          int64_t v34 = v28 + 4;
          if (v28 + 4 >= v64) {
            goto LABEL_36;
          }
          unint64_t v33 = *(void *)(v63 + 8 * v34);
          if (!v33) {
            break;
          }
        }
      }
    }
LABEL_21:
    uint64_t v79 = (v33 - 1) & v33;
    int64_t v80 = v34;
    unint64_t v31 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_22:
    uint64_t v36 = v74;
    unint64_t v37 = *(void (**)(char *, unint64_t, uint64_t))(v74 + 16);
    v37(v30, *(void *)(v77 + 48) + *(void *)(v74 + 72) * v31, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v30, 0, 1, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v30, 1, v16) == 1) {
      goto LABEL_37;
    }
    (*v71)(v19, v30, v16);
    sub_1010FB7DC((uint64_t)v19, (uint64_t)v6);
    if ((*v70)(v6, 1, v29) == 1)
    {
      uint64_t v38 = a2;
      sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_10163AC90);
      static os_log_type_t.default.getter();
      if (qword_1016372F8 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = v57;
      uint64_t v40 = UUID.uuidString.getter();
      uint64_t v42 = v41;
      *(void *)(v39 + 56) = &type metadata for String;
      *(void *)(v39 + 64) = sub_10000B4CC();
      *(void *)(v39 + 32) = v40;
      *(void *)(v39 + 40) = v42;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v43 = 1;
      a2 = v38;
      uint64_t v29 = v62;
      uint64_t v16 = v59;
      uint64_t v26 = (uint64_t)v60;
      uint64_t v44 = updated;
    }
    else
    {
      uint64_t v65 = *v58;
      uint64_t v45 = v29;
      unint64_t v46 = v61;
      v65(v61, v69, v45);
      uint64_t v44 = updated;
      sub_1010FBF9C((uint64_t)v19, v26 + *(int *)(updated + 24));
      sub_1010FB348((uint64_t)v19, v26 + *(int *)(v44 + 28));
      v37((char *)v26, (unint64_t)v19, v16);
      unint64_t v47 = v46;
      uint64_t v29 = v45;
      uint64_t v6 = v69;
      v65((char *)(v26 + *(int *)(v44 + 20)), v47, v29);
      uint64_t v43 = 0;
    }
    (*v68)(v26, v43, 1, v44);
    (*v67)(v19, v16);
    if ((*v66)(v26, 1, v44) != 1)
    {
      uint64_t v48 = v53;
      sub_1011008C0(v26, v53, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
      sub_1011008C0(v48, v55, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v56 = (void *)sub_100A6FBF4(0, v56[2] + 1, 1, (unint64_t)v56);
      }
      unint64_t v50 = v56[2];
      unint64_t v49 = v56[3];
      if (v50 >= v49 >> 1) {
        uint64_t v56 = (void *)sub_100A6FBF4(v49 > 1, v50 + 1, 1, (unint64_t)v56);
      }
      uint64_t v51 = v56;
      v56[2] = v50 + 1;
      uint64_t result = (void *)sub_1011008C0(v55, (uint64_t)v51+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(void *)(v54 + 72) * v50, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
      int64_t v28 = v80;
      unint64_t v25 = v79;
      goto LABEL_4;
    }
    uint64_t result = (void *)sub_10001DAB4(v26, &qword_10166B630);
    unint64_t v30 = v76;
    int64_t v28 = v80;
    unint64_t v25 = v79;
    if (v79) {
      goto LABEL_5;
    }
  }
  uint64_t v35 = v28 + 5;
  if (v28 + 5 >= v64)
  {
LABEL_36:
    (*v75)(v30, 1, 1, v16);
LABEL_37:
    swift_release();
    return v56;
  }
  unint64_t v33 = *(void *)(v63 + 8 * v35);
  if (v33)
  {
    int64_t v34 = v28 + 5;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v34 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v34 >= v64) {
      goto LABEL_36;
    }
    unint64_t v33 = *(void *)(v63 + 8 * v34);
    ++v35;
    if (v33) {
      goto LABEL_21;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void *sub_1010FE440(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v8 - 8);
  uint64_t v37 = (uint64_t)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v44 = _swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = a1 + 32;
    uint64_t v35 = v4;
    uint64_t v36 = (void (**)(char *, uint64_t))(v5 + 8);
    int64_t v34 = v7;
    do
    {
      sub_10001D010(v12, (uint64_t)&v41);
      uint64_t v14 = v42;
      uint64_t v13 = v43;
      sub_10001CD44(&v41, v42);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v13 + 8) + 8) + 32))(v14);
      if (qword_101636CB8 != -1) {
        swift_once();
      }
      sub_10000588C(&qword_101655540);
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v16 = v38[0];
      if (*(void *)(v38[0] + 16) && (unint64_t v17 = sub_1007240CC((uint64_t)v7), (v18 & 1) != 0))
      {
        uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v20 = sub_1007100C0(v19);
        swift_bridgeObjectRelease();
        uint64_t v21 = (void *)sub_100B752E8((uint64_t)v20);
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v21 = _swiftEmptyArrayStorage;
      }
      uint64_t v22 = v37;
      char v23 = sub_100AF7A38(v37, (uint64_t)v7, v21, 1);
      swift_bridgeObjectRelease();
      (*v36)(v7, v4);
      sub_10001DAB4(v22, (uint64_t *)&unk_10163AC90);
      if (v23)
      {
        sub_10001CEB0(&v41, (uint64_t)v38);
        uint64_t v24 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v24[2] + 1, 1);
          uint64_t v24 = v44;
        }
        uint64_t v25 = a2;
        unint64_t v27 = v24[2];
        unint64_t v26 = v24[3];
        if (v27 >= v26 >> 1) {
          sub_1000B7570(v26 > 1, v27 + 1, 1);
        }
        uint64_t v28 = v39;
        uint64_t v29 = v40;
        uint64_t v30 = sub_1000BD078((uint64_t)v38, v39);
        __chkstk_darwin(v30);
        int64_t v32 = (char *)&v34 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v33 + 16))(v32);
        sub_1006985B0(v27, (uint64_t)v32, (uint64_t *)&v44, v28, v29);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
        a2 = v25;
        uint64_t v7 = v34;
        uint64_t v4 = v35;
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v41);
      }
      v12 += 40;
      --v11;
    }
    while (v11);
    return v44;
  }
  return result;
}

uint64_t sub_1010FE860(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v97 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v83 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v81 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10164D848);
  __chkstk_darwin(v7 - 8);
  uint64_t v94 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TimeZone();
  BOOL v85 = *(void (***)(char *, uint64_t))(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v91 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for Date();
  uint64_t v88 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v93 - 8);
  __chkstk_darwin(v93);
  BOOL v92 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BeaconObservation();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v82 = (uint64_t)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v90 = (uint64_t)&v75 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v75 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v96 = (uint64_t)&v75 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v75 - v24;
  __chkstk_darwin(v23);
  unint64_t v27 = (char *)&v75 - v26;
  uint64_t v28 = _swiftEmptyArrayStorage;
  v98[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v29 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v84 = v12;
  uint64_t v80 = v5;
  uint64_t v95 = v9;
  if (v29)
  {
    char v87 = v20;
    unint64_t v30 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v31 = (void (**)(char *, char *, uint64_t))a1;
    *(void *)&long long v79 = v13;
    uint64_t v32 = *(void *)(v13 + 72);
    uint64_t v86 = v31;
    uint64_t v89 = (void (**)(char *, uint64_t))v30;
    uint64_t v33 = (uint64_t)v31 + v30;
    uint64_t v97 = (char)v97;
    int64_t v34 = _swiftEmptyArrayStorage;
    while (1)
    {
      sub_1011007F8(v33, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v35 = qword_10138FA28[v27[*(int *)(v12 + 24)]];
      uint64_t v36 = v12;
      uint64_t v37 = qword_10138FA28[v97];
      sub_1011007F8((uint64_t)v27, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (v35 == v37)
      {
        Date.timeIntervalSinceNow.getter();
        double v39 = v38;
        sub_101100860((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v12 = v36;
        if (v39 >= -a3)
        {
          sub_1011008C0((uint64_t)v27, v96, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1000B77F0(0, v34[2] + 1, 1);
          }
          int64_t v34 = (void *)v98[0];
          unint64_t v41 = *(void *)(v98[0] + 16);
          unint64_t v40 = *(void *)(v98[0] + 24);
          if (v41 >= v40 >> 1)
          {
            sub_1000B77F0(v40 > 1, v41 + 1, 1);
            int64_t v34 = (void *)v98[0];
          }
          v34[2] = v41 + 1;
          sub_1011008C0(v96, (uint64_t)v89 + (void)v34 + v41 * v32, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          uint64_t v12 = v84;
          goto LABEL_5;
        }
      }
      else
      {
        sub_101100860((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v12 = v36;
      }
      sub_101100860((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_5:
      v33 += v32;
      if (!--v29)
      {
        uint64_t v28 = (void *)v98[0];
        uint64_t v9 = v95;
        uint64_t v20 = v87;
        uint64_t v13 = v79;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v42 = v28[2];
  uint64_t v43 = v81;
  if (v42)
  {
    uint64_t v44 = (char *)self;
    uint64_t v45 = (uint64_t)v28 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v89 = (void (**)(char *, uint64_t))(v88 + 1);
    unint64_t v46 = v85;
    char v87 = v44;
    uint64_t v88 = (uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 6);
    ++v85;
    uint64_t v86 = (void (**)(char *, char *, uint64_t))(v46 + 4);
    uint64_t v97 = *(void *)(v13 + 72);
    uint64_t v77 = v28;
    swift_retain();
    *(void *)&long long v47 = 141558531;
    long long v79 = v47;
    uint64_t v78 = (char *)&type metadata for Any + 8;
    uint64_t v76 = v45;
    do
    {
      sub_1011007F8(v45, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v48 = v92;
      Date.addingTimeInterval(_:)();
      v49.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*v89)(v48, v93);
      unint64_t v50 = v94;
      TimeZone.init(secondsFromGMT:)();
      uint64_t result = (*v88)(v50, 1, v9);
      if (result == 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v52 = v91;
      (*v86)(v91, v50, v9);
      Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
      (*v85)(v52, v9);
      id v54 = [v87 stringFromDate:v49.super.isa timeZone:isa formatOptions:1907];

      uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v56 = v55;

      os_log_type_t v57 = static os_log_type_t.default.getter();
      if (qword_1016372F8 != -1) {
        swift_once();
      }
      uint64_t v58 = qword_10170F050;
      uint64_t v59 = (uint64_t)v20;
      uint64_t v60 = (uint64_t)v20;
      uint64_t v61 = v90;
      sub_1011007F8(v59, v90, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (os_log_type_enabled(v58, v57))
      {
        swift_bridgeObjectRetain();
        uint64_t v62 = swift_slowAlloc();
        v98[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v62 = v79;
        *(void *)(v62 + 4) = 1752392040;
        *(_WORD *)(v62 + 12) = 2081;
        sub_1011007B0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v62 + 14) = sub_1008FA0F0(v63, v64, v98);
        swift_bridgeObjectRelease();
        sub_101100860(v61, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        *(_WORD *)(v62 + 22) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v62 + 24) = sub_1008FA0F0(v96, v56, v98);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v58, v57, "Beacon %{private,mask.hash}s next eligible: %{public}s", (uint8_t *)v62, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v43 = v81;
        swift_slowDealloc();
      }
      else
      {
        sub_101100860(v61, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        swift_bridgeObjectRelease();
      }
      sub_101100860(v60, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v20 = (char *)v60;
      v45 += v97;
      --v42;
      uint64_t v9 = v95;
    }
    while (v42);
    uint64_t v65 = v77;
    swift_release();
    int64_t v66 = v65[2];
    if (!v66) {
      goto LABEL_31;
    }
    v98[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000B7034(0, v66, 0);
    uint64_t v67 = (void (**)(char *, uint64_t, uint64_t))(v83 + 16);
    uint64_t v68 = v80;
    uint64_t v69 = v76;
    do
    {
      uint64_t v70 = v82;
      sub_1011007F8(v69, v82, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      (*v67)(v43, v70, v68);
      sub_101100860(v70, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v71 = (void *)v98[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v71[2] + 1, 1);
        uint64_t v71 = (void *)v98[0];
      }
      unint64_t v73 = v71[2];
      unint64_t v72 = v71[3];
      if (v73 >= v72 >> 1)
      {
        sub_1000B7034(v72 > 1, v73 + 1, 1);
        uint64_t v71 = (void *)v98[0];
      }
      v71[2] = v73 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v83 + 32))((unint64_t)v71+ ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80))+ *(void *)(v83 + 72) * v73, v43, v68);
      v98[0] = (uint64_t)v71;
      v69 += v97;
      --v66;
    }
    while (v66);
    swift_release();
  }
  else
  {
LABEL_31:
    swift_release();
    uint64_t v71 = _swiftEmptyArrayStorage;
  }
  uint64_t v74 = sub_101158244((uint64_t)v71);
  swift_bridgeObjectRelease();
  return v74;
}

uint64_t sub_1010FF338(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v77 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v78 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BeaconObservation();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v76 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v73 = (uint64_t)&v68 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v68 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v68 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v80 = (uint64_t)&v68 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v75 = (uint64_t)&v68 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v68 - v25;
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v68 - v27;
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v81 = _swiftEmptyArrayStorage;
  uint64_t v30 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v70 = v9;
  if (v30)
  {
    uint64_t v68 = a1;
    uint64_t v69 = v6;
    uint64_t v31 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v32 = *(void *)(v9 + 72);
    uint64_t v71 = (v31 + 32) & ~v31;
    uint64_t v72 = v8;
    uint64_t v33 = a1 + v71;
    double v34 = -a2;
    double v35 = -a3;
    long long v79 = v26;
    uint64_t v74 = v32;
    while (1)
    {
      sub_1011007F8(v33, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      int v37 = v28[*(int *)(v8 + 24)];
      sub_1011007F8((uint64_t)v28, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (v37 == 8) {
        break;
      }
      int v41 = v26[*(int *)(v8 + 24)];
      sub_101100860((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v42 = v75;
      sub_1011007F8((uint64_t)v28, v75, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v39 = v42;
      BOOL v43 = v41 == 11;
      uint64_t v26 = v79;
      uint64_t v40 = v80;
      if (v43) {
        goto LABEL_10;
      }
      int v46 = *(unsigned __int8 *)(v39 + *(int *)(v8 + 24));
      sub_101100860(v39, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      sub_1011007F8((uint64_t)v28, v80, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      BOOL v43 = v46 == 7;
      uint64_t v40 = v80;
      if (!v43)
      {
        sub_101100860(v80, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        sub_1011007F8((uint64_t)v28, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        goto LABEL_15;
      }
LABEL_11:
      Date.timeIntervalSinceNow.getter();
      double v45 = v44;
      sub_101100860(v40, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      sub_1011007F8((uint64_t)v28, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (v45 >= v34)
      {
        sub_101100860((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_17:
        unint64_t v50 = v19;
        uint64_t v51 = v16;
        uint64_t v52 = v73;
        sub_1011008C0((uint64_t)v28, v73, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B77F0(0, v29[2] + 1, 1);
        }
        uint64_t v29 = v81;
        unint64_t v54 = v81[2];
        unint64_t v53 = v81[3];
        if (v54 >= v53 >> 1)
        {
          sub_1000B77F0(v53 > 1, v54 + 1, 1);
          uint64_t v29 = v81;
        }
        v29[2] = v54 + 1;
        uint64_t v55 = (uint64_t)v29 + v71 + v54 * v74;
        uint64_t v36 = v74;
        sub_1011008C0(v52, v55, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v16 = v51;
        uint64_t v19 = v50;
        uint64_t v8 = v72;
        uint64_t v26 = v79;
        goto LABEL_5;
      }
LABEL_15:
      int v47 = v19[*(int *)(v8 + 24)];
      sub_1011007F8((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (v47 == 12)
      {
        Date.timeIntervalSinceNow.getter();
        double v49 = v48;
        sub_101100860((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        sub_101100860((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if (v49 >= v35) {
          goto LABEL_17;
        }
      }
      else
      {
        sub_101100860((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        sub_101100860((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      }
      sub_101100860((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v36 = v74;
LABEL_5:
      v33 += v36;
      if (!--v30)
      {
        unint64_t v56 = v81;
        uint64_t v6 = v69;
        goto LABEL_24;
      }
    }
    sub_101100860((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v38 = v75;
    sub_1011007F8((uint64_t)v28, v75, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v39 = v38;
    uint64_t v40 = v80;
LABEL_10:
    sub_101100860(v39, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    sub_1011007F8((uint64_t)v28, v40, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    goto LABEL_11;
  }
  unint64_t v56 = _swiftEmptyArrayStorage;
LABEL_24:
  swift_bridgeObjectRelease();
  int64_t v57 = v56[2];
  uint64_t v58 = v78;
  if (v57)
  {
    uint64_t v81 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v57, 0);
    uint64_t v59 = (uint64_t)v56 + ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80));
    uint64_t v60 = *(void *)(v70 + 72);
    uint64_t v61 = (void (**)(char *, uint64_t, uint64_t))(v77 + 16);
    do
    {
      uint64_t v62 = v76;
      sub_1011007F8(v59, v76, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      (*v61)(v58, v62, v6);
      sub_101100860(v62, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v63 = v81;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v63[2] + 1, 1);
        uint64_t v63 = v81;
      }
      unint64_t v65 = v63[2];
      unint64_t v64 = v63[3];
      if (v65 >= v64 >> 1)
      {
        sub_1000B7034(v64 > 1, v65 + 1, 1);
        uint64_t v63 = v81;
      }
      v63[2] = v65 + 1;
      uint64_t v58 = v78;
      (*(void (**)(unint64_t, char *, uint64_t))(v77 + 32))((unint64_t)v63+ ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))+ *(void *)(v77 + 72) * v65, v78, v6);
      uint64_t v81 = v63;
      v59 += v60;
      --v57;
    }
    while (v57);
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v63 = _swiftEmptyArrayStorage;
  }
  uint64_t v66 = sub_101158244((uint64_t)v63);
  swift_bridgeObjectRelease();
  return v66;
}

uint64_t sub_1010FFACC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a2;
  uint64_t v24 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = 0;
  uint64_t v29 = a3;
  uint64_t v10 = *(void *)(a3 + 56);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v27 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v28 = v5 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v27) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v26 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v27) {
        goto LABEL_24;
      }
      unint64_t v18 = *(void *)(v26 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v27) {
          goto LABEL_24;
        }
        unint64_t v18 = *(void *)(v26 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v8, *(void *)(v29 + 48) + *(void *)(v5 + 72) * v15, v4);
    char v16 = sub_1010FACB0((uint64_t)v8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if ((v16 & 1) == 0)
    {
      *(unint64_t *)((char *)v24 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
LABEL_24:
        uint64_t v21 = v29;
        swift_retain();
        return sub_100B2838C(v24, v23, v25, v21);
      }
    }
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v27) {
    goto LABEL_24;
  }
  unint64_t v18 = *(void *)(v26 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v27) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v26 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1010FFD64(uint64_t a1)
{
  uint64_t v2 = v1;
  char v4 = *(unsigned char *)(a1 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v7 = 8 * v6;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v5 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    swift_retain();
    uint64_t v9 = sub_1010FFACC((unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, a1);
    swift_release();
    swift_release();
    if (v2) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    uint64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v7);
    swift_retain();
    uint64_t v9 = sub_1010FFACC((unint64_t *)v10, v6, a1);
    swift_release();
    swift_release();
    swift_slowDealloc();
    swift_release_n();
  }
  return v9;
}

uint64_t sub_1010FFF30(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v60 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v62 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for BeaconObservation();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v58 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v64 = (uint64_t)&v52 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v52 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v57 = (uint64_t)&v52 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  int64_t v17 = (char *)&v52 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v59 = (char *)&v52 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v52 - v20;
  unint64_t v65 = _swiftEmptyArrayStorage;
  uint64_t v22 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v61 = v2;
  if (v22)
  {
    uint64_t v63 = v4;
    uint64_t v23 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v53 = v5;
    uint64_t v54 = a1;
    uint64_t v24 = *(void *)(v5 + 72);
    uint64_t v55 = (v23 + 32) & ~v23;
    unint64_t v56 = v17;
    uint64_t v25 = a1 + v55;
    uint64_t v26 = _swiftEmptyArrayStorage;
    uint64_t v27 = (uint64_t)v59;
    while (1)
    {
      uint64_t v28 = v12;
      sub_1011007F8(v25, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v29 = v63;
      int v30 = v21[*(int *)(v63 + 24)];
      sub_1011007F8((uint64_t)v21, v27, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (v30 == 1) {
        break;
      }
      int v32 = *(unsigned __int8 *)(v27 + *(int *)(v29 + 24));
      sub_101100860(v27, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v31 = (uint64_t)v56;
      sub_1011007F8((uint64_t)v21, (uint64_t)v56, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v12 = v28;
      if (v32 == 33) {
        goto LABEL_6;
      }
      int v36 = *(unsigned __int8 *)(v31 + *(int *)(v63 + 24));
      sub_101100860(v31, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v33 = v57;
      sub_1011007F8((uint64_t)v21, v57, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (v36 == 15) {
        goto LABEL_7;
      }
      int v37 = *(unsigned __int8 *)(v33 + *(int *)(v63 + 24));
      sub_101100860(v33, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      sub_1011007F8((uint64_t)v21, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (v37 == 16) {
        goto LABEL_8;
      }
      int v38 = v12[*(int *)(v63 + 24)];
      sub_101100860((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v27 = (uint64_t)v59;
      if (v38 == 10) {
        goto LABEL_9;
      }
      sub_101100860((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_14:
      v25 += v24;
      if (!--v22)
      {
        uint64_t v39 = v65;
        uint64_t v2 = v61;
        uint64_t v40 = v62;
        uint64_t v5 = v53;
        goto LABEL_21;
      }
    }
    sub_101100860(v27, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v31 = (uint64_t)v56;
    sub_1011007F8((uint64_t)v21, (uint64_t)v56, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v12 = v28;
LABEL_6:
    sub_101100860(v31, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v33 = v57;
    sub_1011007F8((uint64_t)v21, v57, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_7:
    sub_101100860(v33, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    sub_1011007F8((uint64_t)v21, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_8:
    sub_101100860((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v27 = (uint64_t)v59;
LABEL_9:
    sub_1011008C0((uint64_t)v21, v64, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1000B77F0(0, v26[2] + 1, 1);
    }
    uint64_t v26 = v65;
    unint64_t v35 = v65[2];
    unint64_t v34 = v65[3];
    if (v35 >= v34 >> 1)
    {
      sub_1000B77F0(v34 > 1, v35 + 1, 1);
      uint64_t v26 = v65;
    }
    v26[2] = v35 + 1;
    sub_1011008C0(v64, (uint64_t)v26 + v55 + v35 * v24, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    goto LABEL_14;
  }
  uint64_t v39 = _swiftEmptyArrayStorage;
  uint64_t v40 = v62;
LABEL_21:
  swift_bridgeObjectRelease();
  int64_t v41 = v39[2];
  if (v41)
  {
    unint64_t v65 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v41, 0);
    uint64_t v42 = (uint64_t)v39 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v43 = *(void *)(v5 + 72);
    double v44 = (void (**)(char *, uint64_t, uint64_t))(v60 + 16);
    uint64_t v45 = (uint64_t)v58;
    do
    {
      sub_1011007F8(v42, v45, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      (*v44)(v40, v45, v2);
      sub_101100860(v45, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      int v46 = v65;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v46[2] + 1, 1);
        int v46 = v65;
      }
      unint64_t v48 = v46[2];
      unint64_t v47 = v46[3];
      if (v48 >= v47 >> 1)
      {
        sub_1000B7034(v47 > 1, v48 + 1, 1);
        int v46 = v65;
      }
      v46[2] = v48 + 1;
      uint64_t v2 = v61;
      unint64_t v49 = (unint64_t)v46
          + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))
          + *(void *)(v60 + 72) * v48;
      uint64_t v40 = v62;
      (*(void (**)(unint64_t, char *, uint64_t))(v60 + 32))(v49, v62, v61);
      unint64_t v65 = v46;
      v42 += v43;
      --v41;
    }
    while (v41);
    swift_release();
  }
  else
  {
    swift_release();
    int v46 = _swiftEmptyArrayStorage;
  }
  uint64_t v50 = sub_101158244((uint64_t)v46);
  swift_bridgeObjectRelease();
  return v50;
}

void *sub_10110060C(uint64_t a1, double a2, double a3)
{
  sub_10000588C(&qword_10163FFB0);
  OS_dispatch_queue.sync<A>(execute:)();
  size_t v6 = sub_100B752E8(v18);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_100AD2AD4();
  swift_retain();
  uint64_t v8 = sub_1010FE440(v7, a1);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v9 = sub_1010F7A04((uint64_t)v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_101158244((uint64_t)v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_1010FE860(v6, 9, a2);
  uint64_t v12 = sub_1010FF338(v6, a2, a3);
  uint64_t v13 = sub_1009DD3E4(v11, v12);
  uint64_t v14 = sub_1010FFF30(v6);
  swift_release();
  uint64_t v15 = sub_1009DD3E4(v10, v14);
  if (*(void *)(v13 + 16) <= *(void *)(v15 + 16) >> 3)
  {
    uint64_t v19 = v15;
    sub_10089EA08(v13);
    swift_bridgeObjectRelease();
    return (void *)v19;
  }
  else
  {
    uint64_t v16 = sub_1008A160C(v13, v15);
    swift_bridgeObjectRelease();
  }
  return v16;
}

uint64_t sub_1011007B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1011007F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_101100860(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1011008C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_101100928(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = *v6;
  uint64_t v13 = type metadata accessor for MessagingMessageContext();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Transaction();
  sub_100CD5E78(a6, (uint64_t)v16);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(unsigned char *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  *(void *)(v19 + 32) = a3;
  *(void *)(v19 + 40) = a4;
  *(void *)(v19 + 48) = v6;
  *(void *)(v19 + 56) = a5;
  sub_10042681C((uint64_t)v16, v19 + v17);
  *(void *)(v19 + v18) = v22;
  sub_1000361E0(a3, a4);
  swift_retain();
  swift_bridgeObjectRetain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_101100ADC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170F2A8);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170F2A8);
  if (qword_101636AB8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170DE20);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t type metadata accessor for PeerTrustMessageRouter()
{
  return self;
}

uint64_t sub_101100BC8(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  *(unsigned char *)(v5 + 92) = a1;
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v5 + 48) = v6;
  *(void *)(v5 + 56) = *(void *)(v6 - 8);
  *(void *)(v5 + 64) = swift_task_alloc();
  type metadata accessor for PeerTrustAckEnvelopeV1(0);
  *(void *)(v5 + 72) = swift_task_alloc();
  return _swift_task_switch(sub_101100CBC, 0, 0);
}

uint64_t sub_101100CBC()
{
  if (*(unsigned char *)(v0 + 92))
  {
    if (qword_101637470 != -1) {
      swift_once();
    }
    uint64_t v2 = *(void *)(v0 + 24);
    unint64_t v1 = *(void *)(v0 + 32);
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170F2A8);
    sub_1000361E0(v2, v1);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v8 = *(void *)(v0 + 24);
    unint64_t v7 = *(void *)(v0 + 32);
    if (v6)
    {
      int v9 = *(unsigned __int8 *)(v0 + 92);
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 67109120;
      *(_DWORD *)(v0 + 88) = v9 + 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10001CFB8(v8, v7);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Ignoring non peertrust message: %d", v10, 8u);
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(*(void *)(v0 + 24), *(void *)(v0 + 32));
    }

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 40);
    return _swift_task_switch(sub_101100EB0, v11, 0);
  }
}

uint64_t sub_101100EB0()
{
  uint64_t v1 = v0[2];
  if (v1 == 1)
  {
    sub_10056DB54(v0[9]);
    uint64_t v4 = v0[8];
    uint64_t v5 = v0[9];
    uint64_t v6 = v0[6];
    uint64_t v7 = v0[7];
    v0[10] = *(void *)(v0[5] + 112);
    swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v5, v6);
    uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_101101008, v9, v8);
  }
  else
  {
    sub_101101440(0, v1, v0[3], v0[4]);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
}

uint64_t sub_101101008()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  sub_100EAA370(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1011010A4, v4, 0);
}

uint64_t sub_1011010A4()
{
  sub_1011016C0(*(void *)(v0 + 72));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_101101114()
{
  uint64_t v1 = type metadata accessor for MessagingMessageContext();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 64) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v3, 1, v6);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  if (!v8) {
    v9(v0 + v3, v6);
  }
  v9(v5 + *(int *)(v1 + 20), v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + *(int *)(v1 + 44);
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_101101304()
{
  type metadata accessor for MessagingMessageContext();
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  char v6 = *(unsigned char *)(v0 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10001D2E4;
  return sub_101100BC8(v6, v2, v3, v4, v5);
}

void sub_101101440(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (qword_101637470 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170F2A8);
  sub_1000361E0(a3, a4);
  sub_1000361E0(a3, a4);
  sub_1000361E0(a3, a4);
  sub_1000361E0(a3, a4);
  oslog = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446466;
    uint64_t v9 = String.init<A>(describing:)();
    sub_1008FA0F0(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a3, a4);
    *(_WORD *)(v8 + 12) = 2048;
    sub_10001CFB8(a3, a4);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10001CFB8(a3, a4);
    _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Unsupported version of %{public}s: %ld", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a3, a4);
  }
}

uint64_t sub_1011016C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PeerTrustAckEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10110171C(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(a2 + 96))()) {
    return 1;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 104))(a1, a2)) {
    return 3;
  }
  return 2;
}

uint64_t sub_101101790(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_100B736EC(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_10110201C(v6);
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_10110180C()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
  {
    uint64_t v6 = 0;
LABEL_13:
    swift_bridgeObjectRelease_n();
    return v6;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = 0;
  if (v5) {
    return v6;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
  {
    uint64_t v6 = 1;
    goto LABEL_13;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12) {
    return 1;
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
  {
    uint64_t v6 = 2;
    goto LABEL_13;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v18) {
    return 2;
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;
  if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22)
  {
    uint64_t v6 = 3;
    goto LABEL_13;
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v23) {
    return 3;
  }
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;
  if (v24 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v26 == v27)
  {
    uint64_t v6 = 4;
    goto LABEL_13;
  }
  char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28) {
    return 4;
  }
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;
  if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v31 == v32)
  {
    uint64_t v6 = 5;
    goto LABEL_13;
  }
  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v33) {
    return 5;
  }
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;
  if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v36 == v37)
  {
    uint64_t v6 = 10;
    goto LABEL_13;
  }
  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v38) {
    return 10;
  }
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v41 = v40;
  if (v39 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v41 == v42)
  {
    uint64_t v6 = 11;
    goto LABEL_13;
  }
  char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v43) {
    return 11;
  }
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v45;
  if (v44 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v46 == v47)
  {
    uint64_t v6 = 6;
    goto LABEL_13;
  }
  char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v48) {
    return 6;
  }
  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v51 = v50;
  if (v49 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v51 == v52)
  {
    uint64_t v6 = 7;
    goto LABEL_13;
  }
  char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v53) {
    return 7;
  }
  uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v56 = v55;
  if (v54 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v56 == v57)
  {
    uint64_t v6 = 8;
    goto LABEL_13;
  }
  char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v58) {
    return 8;
  }
  uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v61 = v60;
  if (v59 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v61 == v62)
  {
    uint64_t v6 = 9;
    goto LABEL_13;
  }
  char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v63) {
    return 9;
  }
  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v66 = v65;
  if (v64 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v66 == v67)
  {
    uint64_t v6 = 15;
    goto LABEL_13;
  }
  char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v68) {
    return 15;
  }
  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v71 = v70;
  if (v69 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v71 == v72)
  {
    uint64_t v6 = 16;
    goto LABEL_13;
  }
  char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v73) {
    return 16;
  }
  uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v76 = v75;
  if (v74 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v76 == v77)
  {
    uint64_t v6 = 17;
    goto LABEL_13;
  }
  char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v78) {
    return 17;
  }
  uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v81 = v80;
  if (v79 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v81 == v82)
  {
    uint64_t v6 = 18;
    goto LABEL_13;
  }
  char v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v83) {
    return 18;
  }
  _StringGuts.grow(_:)(60);
  v84._object = (void *)0x8000000101422970;
  v84._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
  String.append(_:)(v84);
  type metadata accessor for SPBeaconLocationSource(0);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10110201C(uint64_t *a1)
{
  uint64_t v136 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v136 - 8);
  uint64_t v3 = __chkstk_darwin(v136);
  uint64_t v135 = (char *)&v121 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v134 = (char *)&v121 - v5;
  Swift::Int v6 = a1[1];
  Swift::Int v7 = _minimumMergeRunLength(_:)(v6);
  if (v7 >= v6)
  {
    if (v6 < 0) {
      goto LABEL_134;
    }
    if (v6) {
      sub_1011029A4(0, v6, 1, a1);
    }
    return;
  }
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  if (v6 < -1) {
    goto LABEL_142;
  }
  Swift::Int v126 = v7;
  if (v6 < 2)
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
    uint64_t v139 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v131 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v6 != 1)
    {
      unint64_t v14 = _swiftEmptyArrayStorage[2];
LABEL_100:
      uint64_t v112 = v132;
      if (v14 >= 2)
      {
        uint64_t v113 = *a1;
        do
        {
          unint64_t v114 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_129;
          }
          if (!v113) {
            goto LABEL_141;
          }
          uint64_t v115 = v11;
          uint64_t v116 = v11 + 32;
          uint64_t v117 = *(void *)&v11[16 * v114 + 32];
          uint64_t v118 = *(void *)&v11[16 * v14 + 24];
          sub_101102BDC(v113 + 8 * v117, (id *)(v113 + 8 * *(void *)&v116[16 * v14 - 16]), (id *)(v113 + 8 * v118), v131);
          if (v112) {
            break;
          }
          if (v118 < v117) {
            goto LABEL_130;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v115 = sub_100B73584((uint64_t)v115);
          }
          if (v114 >= *((void *)v115 + 2)) {
            goto LABEL_131;
          }
          uint64_t v119 = &v115[16 * v114 + 32];
          *(void *)uint64_t v119 = v117;
          *((void *)v119 + 1) = v118;
          unint64_t v120 = *((void *)v115 + 2);
          if (v14 > v120) {
            goto LABEL_132;
          }
          uint64_t v11 = v115;
          memmove(&v115[16 * v14 + 16], &v115[16 * v14 + 32], 16 * (v120 - v14));
          *((void *)v115 + 2) = v120 - 1;
          unint64_t v14 = v120 - 1;
        }
        while (v120 > 2);
      }
LABEL_111:
      swift_bridgeObjectRelease();
      *(void *)((v139 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v9 = v8 >> 1;
    sub_101103720();
    uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
    uint64_t v131 = (void **)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v139 = v10;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *a1;
  Swift::Int v133 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v124 = v13 + 16;
  unint64_t v122 = a1;
  uint64_t v123 = v13 - 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v129 = v6;
  uint64_t v137 = v13;
  while (1)
  {
    uint64_t v15 = v12;
    Swift::Int v16 = v12 + 1;
    uint64_t v128 = v12;
    if (v12 + 1 < v6)
    {
      uint64_t v17 = *(void **)(v13 + 8 * v12);
      id v18 = *(id *)(v13 + 8 * v16);
      id v19 = v17;
      id v20 = [v18 timestamp];
      uint64_t v21 = v134;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v22 = [v19 timestamp];
      char v23 = v135;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      LODWORD(v138) = static Date.< infix(_:_:)();
      uint64_t v24 = *v133;
      uint64_t v25 = v23;
      uint64_t v26 = v136;
      (*v133)(v25, v136);
      v24(v21, v26);

      Swift::Int v6 = v129;
      Swift::Int v16 = v15 + 2;
      if (v15 + 2 < v6)
      {
        uint64_t v125 = v11;
        uint64_t v27 = (id *)(v124 + 8 * v15);
        while (1)
        {
          char v28 = *(v27 - 1);
          id v29 = *v27;
          id v30 = v28;
          id v31 = [v29 timestamp];
          uint64_t v32 = v134;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          id v33 = [v30 timestamp];
          uint64_t v34 = v135;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          LODWORD(v33) = static Date.< infix(_:_:)();
          uint64_t v35 = v34;
          uint64_t v36 = v136;
          v24(v35, v136);
          v24(v32, v36);

          if ((v138 ^ v33)) {
            break;
          }
          ++v27;
          Swift::Int v6 = v129;
          if (v129 == ++v16)
          {
            Swift::Int v16 = v129;
            uint64_t v11 = v125;
            goto LABEL_22;
          }
        }
        uint64_t v11 = v125;
        Swift::Int v6 = v129;
LABEL_22:
        uint64_t v15 = v128;
      }
      uint64_t v13 = v137;
      if (v138)
      {
        if (v16 < v15) {
          goto LABEL_135;
        }
        if (v15 < v16)
        {
          uint64_t v37 = (uint64_t *)(v123 + 8 * v16);
          Swift::Int v38 = v16;
          uint64_t v39 = v15;
          uint64_t v40 = (uint64_t *)(v137 + 8 * v15);
          do
          {
            if (v39 != --v38)
            {
              if (!v13) {
                goto LABEL_140;
              }
              uint64_t v41 = *v40;
              *uint64_t v40 = *v37;
              *uint64_t v37 = v41;
            }
            ++v39;
            --v37;
            ++v40;
          }
          while (v39 < v38);
        }
      }
    }
    if (v16 >= v6) {
      goto LABEL_50;
    }
    if (__OFSUB__(v16, v15)) {
      goto LABEL_133;
    }
    if (v16 - v15 >= v126) {
      goto LABEL_50;
    }
    if (__OFADD__(v15, v126)) {
      goto LABEL_136;
    }
    Swift::Int v42 = v15 + v126 >= v6 ? v6 : v15 + v126;
    if (v42 < v15) {
      break;
    }
    if (v16 != v42)
    {
      uint64_t v125 = v11;
      uint64_t v43 = v123 + 8 * v16;
      Swift::Int v127 = v42;
      do
      {
        uint64_t v44 = *(void **)(v13 + 8 * v16);
        uint64_t v45 = v15;
        uint64_t v130 = v43;
        while (1)
        {
          Swift::Int v46 = v16;
          uint64_t v47 = *(void **)v43;
          id v48 = v44;
          id v138 = v48;
          id v49 = v47;
          id v50 = [v48 timestamp];
          uint64_t v51 = v134;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          id v52 = [v49 timestamp];
          char v53 = v135;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          LOBYTE(v52) = static Date.< infix(_:_:)();
          uint64_t v54 = *v133;
          uint64_t v55 = v53;
          uint64_t v56 = v136;
          (*v133)(v55, v136);
          v54(v51, v56);

          if ((v52 & 1) == 0) {
            break;
          }
          uint64_t v13 = v137;
          if (!v137) {
            goto LABEL_138;
          }
          Swift::Int v16 = v46;
          uint64_t v57 = *(void **)v43;
          uint64_t v44 = *(void **)(v43 + 8);
          *(void *)uint64_t v43 = v44;
          *(void *)(v43 + 8) = v57;
          v43 -= 8;
          if (v46 == ++v45) {
            goto LABEL_43;
          }
        }
        uint64_t v13 = v137;
        Swift::Int v16 = v46;
LABEL_43:
        ++v16;
        uint64_t v43 = v130 + 8;
        uint64_t v15 = v128;
      }
      while (v16 != v127);
      Swift::Int v16 = v127;
      uint64_t v11 = v125;
    }
LABEL_50:
    if (v16 < v15) {
      goto LABEL_128;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v138 = (id)v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v11 = sub_100B729CC(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v60 = *((void *)v11 + 2);
    unint64_t v59 = *((void *)v11 + 3);
    unint64_t v14 = v60 + 1;
    uint64_t v13 = v137;
    if (v60 >= v59 >> 1)
    {
      uint64_t v111 = sub_100B729CC((char *)(v59 > 1), v60 + 1, 1, v11);
      uint64_t v13 = v137;
      uint64_t v11 = v111;
    }
    *((void *)v11 + 2) = v14;
    uint64_t v61 = v11 + 32;
    uint64_t v62 = &v11[16 * v60 + 32];
    id v63 = v138;
    *(void *)uint64_t v62 = v15;
    *((void *)v62 + 1) = v63;
    if (v60)
    {
      while (1)
      {
        unint64_t v64 = v14 - 1;
        if (v14 >= 4)
        {
          uint64_t v69 = &v61[16 * v14];
          uint64_t v70 = *((void *)v69 - 8);
          uint64_t v71 = *((void *)v69 - 7);
          BOOL v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_117;
          }
          uint64_t v74 = *((void *)v69 - 6);
          uint64_t v73 = *((void *)v69 - 5);
          BOOL v75 = __OFSUB__(v73, v74);
          uint64_t v67 = v73 - v74;
          char v68 = v75;
          if (v75) {
            goto LABEL_118;
          }
          unint64_t v76 = v14 - 2;
          uint64_t v77 = &v61[16 * v14 - 32];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          BOOL v75 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          if (v75) {
            goto LABEL_120;
          }
          BOOL v75 = __OFADD__(v67, v80);
          uint64_t v81 = v67 + v80;
          if (v75) {
            goto LABEL_123;
          }
          if (v81 >= v72)
          {
            uint64_t v99 = &v61[16 * v64];
            uint64_t v101 = *(void *)v99;
            uint64_t v100 = *((void *)v99 + 1);
            BOOL v75 = __OFSUB__(v100, v101);
            uint64_t v102 = v100 - v101;
            if (v75) {
              goto LABEL_127;
            }
            BOOL v92 = v67 < v102;
            goto LABEL_87;
          }
        }
        else
        {
          if (v14 != 3)
          {
            uint64_t v93 = *((void *)v11 + 4);
            uint64_t v94 = *((void *)v11 + 5);
            BOOL v75 = __OFSUB__(v94, v93);
            uint64_t v86 = v94 - v93;
            char v87 = v75;
            goto LABEL_81;
          }
          uint64_t v66 = *((void *)v11 + 4);
          uint64_t v65 = *((void *)v11 + 5);
          BOOL v75 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          char v68 = v75;
        }
        if (v68) {
          goto LABEL_119;
        }
        unint64_t v76 = v14 - 2;
        uint64_t v82 = &v61[16 * v14 - 32];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v85 = __OFSUB__(v83, v84);
        uint64_t v86 = v83 - v84;
        char v87 = v85;
        if (v85) {
          goto LABEL_122;
        }
        uint64_t v88 = &v61[16 * v64];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v75 = __OFSUB__(v89, v90);
        uint64_t v91 = v89 - v90;
        if (v75) {
          goto LABEL_125;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_126;
        }
        if (v86 + v91 >= v67)
        {
          BOOL v92 = v67 < v91;
LABEL_87:
          if (v92) {
            unint64_t v64 = v76;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v87) {
          goto LABEL_121;
        }
        uint64_t v95 = &v61[16 * v64];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v75 = __OFSUB__(v96, v97);
        uint64_t v98 = v96 - v97;
        if (v75) {
          goto LABEL_124;
        }
        if (v98 < v86) {
          goto LABEL_14;
        }
LABEL_89:
        unint64_t v103 = v64 - 1;
        if (v64 - 1 >= v14)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v13) {
          goto LABEL_139;
        }
        uint64_t v104 = v11;
        unint64_t v105 = &v61[16 * v103];
        uint64_t v106 = *(void *)v105;
        uint64_t v107 = &v61[16 * v64];
        uint64_t v108 = *((void *)v107 + 1);
        uint64_t v109 = v132;
        sub_101102BDC(v13 + 8 * *(void *)v105, (id *)(v13 + 8 * *(void *)v107), (id *)(v13 + 8 * v108), v131);
        uint64_t v132 = v109;
        if (v109) {
          goto LABEL_111;
        }
        if (v108 < v106) {
          goto LABEL_114;
        }
        if (v64 > *((void *)v104 + 2)) {
          goto LABEL_115;
        }
        *(void *)unint64_t v105 = v106;
        *(void *)&v61[16 * v103 + 8] = v108;
        unint64_t v110 = *((void *)v104 + 2);
        if (v64 >= v110) {
          goto LABEL_116;
        }
        uint64_t v11 = v104;
        unint64_t v14 = v110 - 1;
        memmove(&v61[16 * v64], v107 + 16, 16 * (v110 - 1 - v64));
        *((void *)v104 + 2) = v110 - 1;
        uint64_t v13 = v137;
        if (v110 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v14 = 1;
LABEL_14:
    Swift::Int v6 = v129;
    uint64_t v12 = (uint64_t)v138;
    if ((uint64_t)v138 >= v129)
    {
      a1 = v122;
      goto LABEL_100;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1011029A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v30 = a1;
  uint64_t v35 = type metadata accessor for Date();
  uint64_t v7 = __chkstk_darwin(v35);
  uint64_t v34 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v33 = (char *)&v28 - v10;
  uint64_t v29 = a2;
  if (a3 != a2)
  {
    uint64_t v11 = *a4;
    uint64_t v32 = v9 + 8;
    uint64_t v36 = v11;
    uint64_t v12 = v11 + 8 * a3 - 8;
    uint64_t v13 = (void (**)(char *, uint64_t))(v9 + 8);
LABEL_5:
    unint64_t v14 = *(void **)(v36 + 8 * a3);
    uint64_t v15 = v30;
    uint64_t v31 = v12;
    while (1)
    {
      Swift::Int v16 = *(void **)v12;
      id v17 = v14;
      id v37 = v17;
      id v18 = v16;
      id v19 = [v17 timestamp];
      id v20 = v33;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v21 = [v18 timestamp];
      id v22 = v34;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v21) = static Date.< infix(_:_:)();
      uint64_t v23 = a3;
      uint64_t v24 = *v13;
      uint64_t v25 = v22;
      uint64_t v26 = v35;
      (*v13)(v25, v35);
      v24(v20, v26);
      a3 = v23;

      if ((v21 & 1) == 0)
      {
LABEL_4:
        a3 = v23 + 1;
        uint64_t v12 = v31 + 8;
        if (v23 + 1 == v29) {
          return;
        }
        goto LABEL_5;
      }
      if (!v36) {
        break;
      }
      uint64_t v27 = *(void **)v12;
      unint64_t v14 = *(void **)(v12 + 8);
      *(void *)uint64_t v12 = v14;
      *(void *)(v12 + 8) = v27;
      v12 -= 8;
      if (v23 == ++v15) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_101102BDC(uint64_t a1, id *a2, id *a3, void **a4)
{
  uint64_t v57 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v57 - 8);
  uint64_t v9 = __chkstk_darwin(v57);
  uint64_t v56 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v54 = a3;
  uint64_t v55 = (char *)&v48 - v12;
  uint64_t v13 = (uint64_t)a2 - a1;
  uint64_t v14 = v13 / 8;
  uint64_t v15 = a2;
  uint64_t v16 = (char *)a3 - (char *)a2;
  uint64_t v17 = v16 / 8;
  uint64_t v61 = v11;
  unint64_t v60 = a4;
  char v58 = v11;
  if (v13 / 8 >= v16 / 8)
  {
    if (v16 < -7) {
      goto LABEL_41;
    }
    if (a4 != v15 || &v15[v17] <= a4)
    {
      memmove(a4, v15, 8 * v17);
      uint64_t v11 = v58;
    }
    uint64_t v31 = &a4[v17];
    unint64_t v59 = v31;
    uint64_t v61 = v15;
    if (v16 < 8 || v11 >= v15) {
      goto LABEL_40;
    }
    id v49 = (void (**)(char *, uint64_t))(v8 + 8);
    id v50 = a4;
    uint64_t v32 = v54 - 1;
    id v33 = v15;
    while (1)
    {
      uint64_t v54 = v15;
      id v52 = v31;
      char v53 = v32 + 1;
      uint64_t v35 = v31 - 1;
      uint64_t v36 = *--v33;
      id v37 = *(v31 - 1);
      id v51 = v37;
      id v38 = v36;
      id v39 = [v37 timestamp];
      uint64_t v40 = v55;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v41 = [v38 timestamp];
      Swift::Int v42 = v56;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v41) = static Date.< infix(_:_:)();
      uint64_t v43 = *v49;
      uint64_t v44 = v42;
      uint64_t v45 = v57;
      (*v49)(v44, v57);
      v43(v40, v45);

      if (v41) {
        break;
      }
      unint64_t v59 = v35;
      if (v53 < v52 || v32 >= v52)
      {
        *uint64_t v32 = *v35;
        id v33 = v54;
        uint64_t v31 = v35;
        goto LABEL_28;
      }
      unint64_t v46 = (unint64_t)v50;
      uint64_t v34 = v58;
      id v33 = v54;
      if (v53 != v52) {
        *uint64_t v32 = *v35;
      }
      uint64_t v31 = v35;
      if ((unint64_t)v35 <= v46) {
        goto LABEL_40;
      }
LABEL_29:
      --v32;
      uint64_t v15 = v33;
      if (v33 <= v34) {
        goto LABEL_40;
      }
    }
    uint64_t v31 = v52;
    if (v53 != v54 || v32 >= v54) {
      *uint64_t v32 = *v33;
    }
    uint64_t v61 = v33;
LABEL_28:
    uint64_t v34 = v58;
    if (v31 <= v50) {
      goto LABEL_40;
    }
    goto LABEL_29;
  }
  if (v13 >= -7)
  {
    if (a4 != v11 || &v11[v14] <= a4)
    {
      memmove(a4, v58, 8 * v14);
      uint64_t v11 = v58;
    }
    char v53 = &a4[v14];
    unint64_t v59 = v53;
    if (v13 >= 8 && v15 < v54)
    {
      id v52 = (void **)(v8 + 8);
      id v18 = v55;
      do
      {
        char v58 = v11;
        id v19 = *a4;
        id v20 = *v15;
        id v21 = v19;
        id v22 = a4;
        id v23 = [v20 timestamp];
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        id v24 = [v21 timestamp];
        uint64_t v25 = v56;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        LOBYTE(v24) = static Date.< infix(_:_:)();
        uint64_t v26 = (void (*)(char *, uint64_t))*v52;
        uint64_t v27 = v25;
        uint64_t v28 = v57;
        ((void (*)(char *, uint64_t))*v52)(v27, v57);
        v26(v18, v28);

        if (v24)
        {
          a4 = v22;
          unint64_t v29 = (unint64_t)(v15 + 1);
          uint64_t v30 = v58;
          if (v58 < v15 || (unint64_t)v58 >= v29 || v58 != v15) {
            *char v58 = *v15;
          }
        }
        else
        {
          uint64_t v30 = v58;
          if (v58 != v22) {
            *char v58 = *v22;
          }
          a4 = v22 + 1;
          unint64_t v60 = v22 + 1;
          unint64_t v29 = (unint64_t)v15;
        }
        uint64_t v11 = v30 + 1;
        uint64_t v61 = v11;
        if (a4 >= v53) {
          break;
        }
        uint64_t v15 = (id *)v29;
      }
      while (v29 < (unint64_t)v54);
    }
LABEL_40:
    sub_100B72D80((void **)&v61, (const void **)&v60, &v59);
    return 1;
  }
LABEL_41:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_1011030EC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [objc_allocWithZone((Class)CLReductiveFilterOptions) initWithBeaconType:a2 transmitPower:a3];
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = (unint64_t)_swiftEmptyArrayStorage;
  if (v13)
  {
    id v36 = v11;
    id v37 = v10;
    Swift::Int v42 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v15 = a1 + 32;
    uint64_t v16 = (void (**)(char *, uint64_t))(v7 + 8);
    do
    {
      sub_10001D010(v15, (uint64_t)v41);
      sub_10001D010((uint64_t)v41, (uint64_t)v38);
      uint64_t v17 = v39;
      uint64_t v18 = v40;
      sub_10001CD44(v38, v39);
      double v19 = (*(double (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
      uint64_t v20 = v39;
      uint64_t v21 = v40;
      sub_10001CD44(v38, v39);
      double v22 = (*(double (**)(uint64_t, uint64_t))(v21 + 24))(v20, v21);
      id v23 = objc_allocWithZone((Class)CLLocation);
      uint64_t v24 = v39;
      uint64_t v25 = v40;
      sub_10001CD44(v38, v39);
      double v26 = (*(double (**)(uint64_t, uint64_t))(v25 + 32))(v24, v25);
      uint64_t v27 = v39;
      uint64_t v28 = v40;
      sub_10001CD44(v38, v39);
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v28);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*v16)(v9, v6);
      [v23 initWithCoordinate:isa verticalAccuracy:v19 horizontalAccuracy:v22 timestamp:v26];

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v41);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v15 += 40;
      --v13;
    }
    while (v13);
    unint64_t v14 = (unint64_t)v42;
    uint64_t v12 = v36;
    uint64_t v10 = v37;
  }
  if ((v14 & 0x8000000000000000) != 0 || (v14 & 0x4000000000000000) != 0)
  {
    unint64_t v35 = swift_bridgeObjectRetain();
    uint64_t v30 = (uint64_t)sub_100710534(v35);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  v41[0] = v30;
  sub_101101790(v41);
  swift_bridgeObjectRelease();
  uint64_t v31 = self;
  sub_101103720();
  Class v32 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  id v33 = [v31 applyFilterToLocationTrace:v32 options:v12];

  return v33;
}

uint64_t sub_101103478(char a1)
{
  return *(void *)*(&off_1016091B8 + a1);
}

id sub_101103490(uint64_t a1, uint64_t a2, double a3)
{
  id v7 = [objc_allocWithZone((Class)CLReductiveFilterOptions) initWithBeaconType:a2 transmitPower:a3];
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = (unint64_t)_swiftEmptyArrayStorage;
  if (v8)
  {
    unint64_t v29 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t v10 = sub_101103720();
    uint64_t v11 = a1 + 32;
    do
    {
      sub_10001D010(v11, (uint64_t)v28);
      sub_10001D010((uint64_t)v28, (uint64_t)v25);
      uint64_t v12 = v26;
      uint64_t v13 = v27;
      uint64_t v14 = sub_1000BD078((uint64_t)v25, v26);
      __chkstk_darwin(v14);
      uint64_t v16 = &v25[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      (*(void (**)(unsigned char *))(v17 + 16))(v16);
      sub_100FCC8F8((uint64_t)v16, v10, v12, v13);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v11 += 40;
      --v8;
    }
    while (v8);
    unint64_t v9 = (unint64_t)v29;
  }
  if ((v9 & 0x8000000000000000) != 0 || (v9 & 0x4000000000000000) != 0)
  {
    unint64_t v23 = swift_bridgeObjectRetain();
    uint64_t v18 = (uint64_t)sub_100710534(v23);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  v28[0] = v18;
  sub_101101790(v28);
  swift_bridgeObjectRelease();
  double v19 = self;
  sub_101103720();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  id v21 = [v19 applyFilterToLocationObservations:isa options:v7];

  return v21;
}

unint64_t sub_101103720()
{
  unint64_t result = qword_101646830;
  if (!qword_101646830)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_101646830);
  }
  return result;
}

uint64_t sub_101103760()
{
  *(void *)(v1 + 32) = v0;
  return _swift_task_switch(sub_101103780, v0, 0);
}

uint64_t sub_101103780()
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  v0[2] = 0x7365547265646E75;
  v0[3] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 128))
  {
    uint64_t v2 = swift_retain();
    uint64_t v3 = sub_1001912C4(v2);
    swift_release();
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10166B720);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No observation store on this platform!", v7, 2u);
      swift_slowDealloc();
    }

    uint64_t v3 = 0;
  }
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(v3);
}

uint64_t sub_1011039A0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_1011039C4, v2, 0);
}

uint64_t sub_1011039C4()
{
  uint64_t v1 = *(void *)(v0[4] + 128);
  if (v1)
  {
    uint64_t v3 = v0[2];
    uint64_t v2 = v0[3];
    swift_retain();
    sub_10019BD48(v3, v2, v1);
    uint64_t v10 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
    swift_release();
    swift_release();
    uint64_t v11 = (uint64_t (*)(uint64_t))v0[1];
    return v11(v10);
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10166B720);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No observation store on this platform!", v7, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_101103BA8()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_101103BC8, v0, 0);
}

uint64_t sub_101103BC8()
{
  if (*(void *)(*(void *)(v0 + 16) + 128))
  {
    uint64_t v1 = swift_retain();
    sub_10018C150(v1);
    swift_release();
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10166B720);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "No observation store on this platform!", v5, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
  }
  os_log_type_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_101103D30()
{
  *(void *)(v1 + 32) = v0;
  return _swift_task_switch(sub_101103D50, v0, 0);
}

uint64_t sub_101103D50()
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  v0[2] = 0x7365547265646E75;
  v0[3] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 128))
  {
    uint64_t v2 = swift_retain();
    sub_100183DDC(v2);
    swift_release();
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10166B720);
    os_log_type_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No observation store on this platform!", v6, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
  }
  id v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_101103F50(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)(v5 + 24) = a3;
  *(void *)(v5 + 32) = v4;
  *(unsigned char *)(v5 + 72) = a4;
  *(void *)(v5 + 16) = a1;
  sub_10000588C((uint64_t *)&unk_101653D40);
  *(void *)(v5 + 40) = swift_task_alloc();
  sub_10000588C(&qword_10166B968);
  *(void *)(v5 + 48) = swift_task_alloc();
  uint64_t v7 = swift_task_alloc();
  *(void *)(v5 + 56) = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v5 + 64) = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_101104074;
  return sub_10110AA6C(v7, a2);
}

uint64_t sub_101104074()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  return _swift_task_switch(sub_101104184, v1, 0);
}

uint64_t sub_101104184()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_10001D074(*(void *)(v0 + 56), v1, &qword_10166B968);
  uint64_t v2 = type metadata accessor for KeySyncSnapshot();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  if (v3 == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 48), &qword_10166B968);
    uint64_t v6 = sub_10000588C(&qword_10163F7B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  }
  else
  {
    sub_10115BFD0(*(unsigned char *)(v0 + 72), *(void *)(v0 + 40));
    sub_10110D4A8(v4, (uint64_t (*)(void))type metadata accessor for KeySyncSnapshot);
  }
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v8 = *(void *)(v0 + 40);
  sub_10110B188(*(void *)(v0 + 24), v8, *(uint64_t **)(v0 + 16));
  sub_10001DAB4(v8, (uint64_t *)&unk_101653D40);
  sub_10001DAB4(v7, &qword_10166B968);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_101104310(double a1)
{
  *(void *)(v2 + 24) = v1;
  *(double *)(v2 + 16) = a1;
  return _swift_task_switch(sub_101104334, v1, 0);
}

uint64_t sub_101104334()
{
  if (*(void *)(*(void *)(v0 + 24) + 128))
  {
    uint64_t v1 = swift_retain();
    uint64_t v2 = sub_10018D1D0(v1);
    swift_release();
    int v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v3(v2);
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10166B720);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No observation store on this platform!", v8, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_1011044F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[3] = a3;
  v4[4] = v3;
  v4[2] = a1;
  sub_10000588C((uint64_t *)&unk_101653D40);
  v4[5] = swift_task_alloc();
  sub_10000588C(&qword_10166B968);
  v4[6] = swift_task_alloc();
  uint64_t v6 = swift_task_alloc();
  v4[7] = v6;
  os_log_type_t v7 = (void *)swift_task_alloc();
  v4[8] = v7;
  *os_log_type_t v7 = v4;
  v7[1] = sub_101104614;
  return sub_10110AA6C(v6, a2);
}

uint64_t sub_101104614()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  return _swift_task_switch(sub_101104724, v1, 0);
}

uint64_t sub_101104724()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_10001D074(*(void *)(v0 + 56), v1, &qword_10166B968);
  uint64_t v2 = type metadata accessor for KeySyncSnapshot();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  if (v3 == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 48), &qword_10166B968);
    uint64_t v6 = sub_10000588C(&qword_10163F7B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  }
  else
  {
    sub_10115BA54(*(void *)(v0 + 40));
    sub_10110D4A8(v4, (uint64_t (*)(void))type metadata accessor for KeySyncSnapshot);
  }
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v8 = *(void *)(v0 + 40);
  sub_10110B188(*(void *)(v0 + 24), v8, *(uint64_t **)(v0 + 16));
  sub_10001DAB4(v8, (uint64_t *)&unk_101653D40);
  sub_10001DAB4(v7, &qword_10166B968);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1011048AC(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_1011048D0, v2, 0);
}

uint64_t sub_1011048D0()
{
  uint64_t v1 = *(void *)(v0[4] + 128);
  if (v1)
  {
    uint64_t v3 = v0[2];
    uint64_t v2 = v0[3];
    swift_retain();
    sub_100190910(v2, v1, v3);
    swift_release();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10166B720);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No observation store on this platform!", v8, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
  }
  return v4();
}

uint64_t sub_101104A5C(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_101104A7C, v1, 0);
}

uint64_t sub_101104A7C()
{
  uint64_t v1 = *(void *)(v0[3] + 128);
  if (v1)
  {
    uint64_t v2 = v0[2];
    swift_retain();
    sub_100192F74(v2, v1);
    swift_release();
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10166B720);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No observation store on this platform!", v6, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
  }
  os_log_type_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_101104BF0(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_101104C10, v1, 0);
}

uint64_t sub_101104C10()
{
  uint64_t v1 = *(void *)(v0[3] + 128);
  if (v1)
  {
    uint64_t v2 = v0[2];
    swift_retain();
    sub_10018B7A0(v2, v1);
    swift_release();
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10166B720);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No observation store on this platform!", v6, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
  }
  os_log_type_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_101104D84(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_101104DA4, v1, 0);
}

uint64_t sub_101104DA4()
{
  uint64_t v1 = *(void *)(v0[3] + 128);
  if (v1)
  {
    uint64_t v2 = v0[2];
    swift_retain();
    sub_10018BCBC(v2, v1);
    swift_release();
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10166B720);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No observation store on this platform!", v6, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
  }
  os_log_type_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_101104F18(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = *(void *)(type metadata accessor for ObservedAdvertisement(0) - 8);
  v2[7] = v3;
  v2[8] = *(void *)(v3 + 64);
  v2[9] = swift_task_alloc();
  sub_10000588C(&qword_10164DBB0);
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_10110500C, v1, 0);
}

uint64_t sub_10110500C()
{
  uint64_t v1 = *(void *)(v0[6] + 128);
  if (v1)
  {
    uint64_t v2 = v0[5];
    swift_retain();
    sub_10017B484(v2, v1);
    swift_release();
    uint64_t v4 = v0[9];
    uint64_t v3 = v0[10];
    uint64_t v5 = v0[7];
    uint64_t v6 = v0[5];
    uint64_t v7 = v0[6];
    swift_beginAccess();
    uint64_t v8 = *(void *)(v7 + 136);
    uint64_t v9 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v3, 1, 1, v9);
    sub_10110D440(v6, v4, type metadata accessor for ObservedAdvertisement);
    unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v11 = (void *)swift_allocObject();
    void v11[2] = 0;
    v11[3] = 0;
    v11[4] = v8;
    sub_10110D508(v4, (uint64_t)v11 + v10, type metadata accessor for ObservedAdvertisement);
    swift_bridgeObjectRetain();
    sub_1008F5E44(v3, (uint64_t)&unk_10166BA50, (uint64_t)v11);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10166B720);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "No observation store on this platform!", v16, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
  }
  return v12();
}

uint64_t sub_1011052BC(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_1011052DC, v1, 0);
}

uint64_t sub_1011052DC()
{
  uint64_t v1 = *(void *)(v0[3] + 128);
  if (v1)
  {
    uint64_t v2 = v0[2];
    swift_retain();
    sub_10019B9D4(v2, v1);
    uint64_t v9 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
    swift_release();
    swift_release();
    unint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
    return v10(v9);
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10166B720);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No observation store on this platform!", v6, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_1011054BC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = v4;
  *(unsigned char *)(v5 + 48) = a3;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return _swift_task_switch(sub_1011054E4, v4, 0);
}

uint64_t sub_1011054E4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 128);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v2 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 16);
    int v5 = *(unsigned __int8 *)(v0 + 48);
    swift_retain();
    sub_100194A8C(v3, v5, v2, v1, v4);
    swift_release();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10166B720);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No observation store on this platform!", v10, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v6();
}

uint64_t sub_101105688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  return _swift_task_switch(sub_1011056AC, v3, 0);
}

uint64_t sub_1011056AC()
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[7];
  v0[2] = 0x7365547265646E75;
  v0[3] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 128);
  if (v2)
  {
    uint64_t v4 = v0[5];
    uint64_t v3 = v0[6];
    int v5 = (void *)v0[4];
    swift_retain();
    sub_10019725C(v4, v3, v2, v5);
    swift_release();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10166B720);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No observation store on this platform!", v10, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
  }
  return v6();
}

uint64_t sub_1011058D8(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  return _swift_task_switch(sub_1011058F8, v1, 0);
}

uint64_t sub_1011058F8()
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  v0[2] = 0x7365547265646E75;
  v0[3] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 128);
  if (v2)
  {
    uint64_t v3 = v0[4];
    swift_retain();
    sub_10018F1DC(v3, v2);
    uint64_t v10 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
    swift_release();
    swift_release();
    uint64_t v11 = (uint64_t (*)(uint64_t))v0[1];
    return v11(v10);
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10166B720);
    int v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No observation store on this platform!", v7, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_101105B68(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 296) = a2;
  *(void *)(v3 + 128) = a1;
  *(void *)(v3 + 136) = v2;
  uint64_t v4 = type metadata accessor for BeaconIdentifier();
  *(void *)(v3 + 144) = v4;
  *(void *)(v3 + 152) = *(void *)(v4 - 8);
  *(void *)(v3 + 160) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SharedBeaconRecord(0);
  *(void *)(v3 + 168) = v5;
  *(void *)(v3 + 176) = *(void *)(v5 - 8);
  *(void *)(v3 + 184) = swift_task_alloc();
  *(void *)(v3 + 192) = swift_task_alloc();
  *(void *)(v3 + 200) = swift_task_alloc();
  *(void *)(v3 + 208) = swift_task_alloc();
  return _swift_task_switch(sub_101105CB0, v2, 0);
}

uint64_t sub_101105CB0()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_101105DEC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_101105DEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_101105F04, v2, 0);
}

uint64_t sub_101105F04()
{
  uint64_t v1 = *(void *)(v0 + 224);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 224);
    return _swift_task_switch(sub_101106030, v2, 0);
  }
  else
  {
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v3 = 0xD000000000000010;
    v3[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_101106030()
{
  *(void *)(v0 + 232) = *(void *)(*(void *)(v0 + 224) + 136);
  swift_retain();
  return _swift_task_switch(sub_1011060A4, 0, 0);
}

uint64_t sub_1011060A4()
{
  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[30] = v3;
  v3[2] = v1;
  v3[3] = sub_10008FD44;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[31] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163A040);
  *uint64_t v4 = v0;
  v4[1] = sub_1011061BC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 15, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10008FD4C, v3, v5);
}

uint64_t sub_1011061BC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 136);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 256) = *(void *)(v1 + 120);
  return _swift_task_switch(sub_10110632C, v2, 0);
}

uint64_t sub_10110632C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t (**)())(v3 + 256);
  uint64_t v37 = *((void *)v4 + 2);
  if (v37)
  {
    unint64_t v5 = 0;
    uint64_t v6 = *(void *)(v3 + 168);
    uint64_t v35 = *(void *)(v3 + 176);
    uint64_t v34 = *(uint64_t (**)())(v3 + 256);
    while (1)
    {
      if (v5 >= *((void *)v4 + 2))
      {
        __break(1u);
        return _swift_task_switch(v4, a2, a3);
      }
      uint64_t v8 = *(void *)(v3 + 200);
      uint64_t v7 = *(void *)(v3 + 208);
      unint64_t v9 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
      uint64_t v10 = *(void *)(v35 + 72);
      sub_10110D440(*(void *)(v3 + 256) + v9 + v10 * v5, v7, type metadata accessor for SharedBeaconRecord);
      int v11 = *(unsigned __int8 *)(v7 + *(int *)(v6 + 64));
      sub_10110D440(v7, v8, type metadata accessor for SharedBeaconRecord);
      uint64_t v12 = *(void *)(v3 + 200);
      if (v11 == 4) {
        break;
      }
      int v13 = *(unsigned __int8 *)(v12 + *(int *)(v6 + 64));
      sub_10110D4A8(v12, type metadata accessor for SharedBeaconRecord);
      if (v13 == 1) {
        goto LABEL_9;
      }
      sub_10110D4A8(*(void *)(v3 + 208), type metadata accessor for SharedBeaconRecord);
LABEL_4:
      ++v5;
      uint64_t v4 = v34;
      if (v37 == v5) {
        goto LABEL_14;
      }
    }
    sub_10110D4A8(v12, type metadata accessor for SharedBeaconRecord);
LABEL_9:
    sub_10110D508(*(void *)(v3 + 208), *(void *)(v3 + 192), type metadata accessor for SharedBeaconRecord);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1000B7404(0, _swiftEmptyArrayStorage[2] + 1, 1);
    }
    unint64_t v15 = _swiftEmptyArrayStorage[2];
    unint64_t v14 = _swiftEmptyArrayStorage[3];
    if (v15 >= v14 >> 1) {
      sub_1000B7404(v14 > 1, v15 + 1, 1);
    }
    uint64_t v16 = *(void *)(v3 + 192);
    _swiftEmptyArrayStorage[2] = v15 + 1;
    sub_10110D508(v16, (uint64_t)_swiftEmptyArrayStorage + v9 + v15 * v10, type metadata accessor for SharedBeaconRecord);
    goto LABEL_4;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  int64_t v17 = _swiftEmptyArrayStorage[2];
  if (v17)
  {
    uint64_t v18 = *(void *)(v3 + 176);
    uint64_t v19 = *(void *)(v3 + 152);
    uint64_t v36 = *(void *)(v3 + 144);
    uint64_t v38 = *(void *)(v3 + 168);
    sub_1000B78F4(0, v17, 0);
    uint64_t v20 = (char *)_swiftEmptyArrayStorage
        + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    uint64_t v21 = *(void *)(v18 + 72);
    do
    {
      uint64_t v22 = *(void *)(v3 + 184);
      uint64_t v23 = *(void *)(v3 + 160);
      sub_10110D440((uint64_t)v20, v22, type metadata accessor for SharedBeaconRecord);
      uid_t v24 = getuid();
      sub_100DC5FC0(v24);
      uint64_t v25 = v22 + *(int *)(v38 + 20);
      uint64_t v26 = v23 + *(int *)(v36 + 20);
      uint64_t v27 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v26, v25, v27);
      sub_10110D4A8(v22, type metadata accessor for SharedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B78F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v29 = _swiftEmptyArrayStorage[2];
      unint64_t v28 = _swiftEmptyArrayStorage[3];
      if (v29 >= v28 >> 1) {
        sub_1000B78F4(v28 > 1, v29 + 1, 1);
      }
      uint64_t v30 = *(void *)(v3 + 160);
      _swiftEmptyArrayStorage[2] = v29 + 1;
      sub_10110D508(v30, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(void *)(v19 + 72) * v29, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      v20 += v21;
      --v17;
    }
    while (v17);
  }
  swift_release();
  *(void *)(v3 + 264) = _swiftEmptyArrayStorage;
  uint64_t v31 = swift_task_alloc();
  *(void *)(v3 + 272) = v31;
  *(void *)uint64_t v31 = v3;
  *(void *)(v31 + 8) = sub_101106770;
  char v32 = *(unsigned char *)(v3 + 296);
  a2 = *(void *)(v3 + 136);
  *(void *)(v31 + 24) = *(void *)(v3 + 128);
  *(void *)(v31 + 32) = a2;
  *(unsigned char *)(v31 + 40) = v32;
  *(void *)(v31 + 16) = _swiftEmptyArrayStorage;
  uint64_t v4 = sub_101109370;
  a3 = 0;
  return _swift_task_switch(v4, a2, a3);
}

uint64_t sub_101106770(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[35] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[17];
  if (v1)
  {
    uint64_t v6 = sub_101106964;
  }
  else
  {
    v4[36] = a1;
    uint64_t v6 = sub_1011068AC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1011068AC()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 288);
  return v1(v2);
}

uint64_t sub_101106964()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_101106A14(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_101106A34, v1, 0);
}

uint64_t sub_101106A34()
{
  if (*(void *)(v0[3] + 128))
  {
    uint64_t v1 = v0[2];
    swift_retain();
    sub_10019C2B4(v1);
    swift_release();
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10166B720);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "No observation store on this platform!", v5, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
  }
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_101106BA8(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = *(void *)(type metadata accessor for DeviceEvent(0) - 8);
  v2[7] = v3;
  v2[8] = *(void *)(v3 + 64);
  v2[9] = swift_task_alloc();
  sub_10000588C(&qword_10164DBB0);
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_101106C9C, v1, 0);
}

uint64_t sub_101106C9C()
{
  uint64_t v1 = *(void *)(v0[6] + 128);
  if (v1)
  {
    uint64_t v2 = v0[5];
    swift_retain();
    sub_100198D44(v2, v1);
    swift_release();
    uint64_t v4 = v0[9];
    uint64_t v3 = v0[10];
    uint64_t v5 = v0[7];
    uint64_t v6 = v0[5];
    uint64_t v7 = v0[6];
    swift_beginAccess();
    uint64_t v8 = *(void *)(v7 + 144);
    uint64_t v9 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v3, 1, 1, v9);
    sub_10110D440(v6, v4, type metadata accessor for DeviceEvent);
    unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    int v11 = (void *)swift_allocObject();
    void v11[2] = 0;
    v11[3] = 0;
    v11[4] = v8;
    sub_10110D508(v4, (uint64_t)v11 + v10, type metadata accessor for DeviceEvent);
    swift_bridgeObjectRetain();
    sub_1008F5E44(v3, (uint64_t)&unk_10165AA38, (uint64_t)v11);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10166B720);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "No observation store on this platform!", v16, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
  }
  return v12();
}

NSString sub_101106F4C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10170F2C0 = (uint64_t)result;
  return result;
}

uint64_t sub_101106F84()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10166B720);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10166B720);
  if (qword_101637488 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170F2C8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10110704C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v5 = type metadata accessor for StateCaptureDateType();
  v3[6] = v5;
  v3[7] = *(void *)(v5 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DeviceEvent(0);
  v3[9] = v6;
  v3[10] = *(void *)(v6 - 8);
  v3[11] = swift_task_alloc();
  sub_10000588C(&qword_10163D030);
  v3[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for StateCaptureHintAPI();
  v3[13] = v7;
  v3[14] = *(void *)(v7 - 8);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  return _swift_task_switch(sub_101107240, a3, 0);
}

uint64_t sub_101107240()
{
  uint64_t v31 = v0;
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  StateCaptureHint.api.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for StateCaptureHintAPI.request(_:), v3);
  sub_10110CEDC((unint64_t *)&unk_1016566F0, 255, (void (*)(uint64_t))&type metadata accessor for StateCaptureHintAPI);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v5 = *(_DWORD *)(v0 + 136);
  int v6 = *(_DWORD *)(v0 + 140);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  if (v5 != v6)
  {
    uint64_t v9 = 1;
LABEL_5:
    uint64_t v10 = *(void *)(v0 + 24);
    uint64_t v11 = type metadata accessor for StateCaptureStateData();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, v9, 1, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_8;
  }
  if (*(void *)(*(void *)(v0 + 40) + 128))
  {
    uint64_t v8 = swift_retain();
    sub_1001968A0(v8);
    uint64_t v14 = *(void *)(v0 + 96);
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void *)(v0 + 80);
    swift_release();
    uint64_t v30 = _swiftEmptyDictionarySingleton;
    swift_retain();
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    int64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    int v18 = v17(v14, 1, v15);
    if (v18 != 1)
    {
      do
      {
        uint64_t v19 = *(void *)(v0 + 88);
        sub_10110D508(*(void *)(v0 + 96), v19, type metadata accessor for DeviceEvent);
        sub_101107780((uint64_t *)&v30, v19);
        uint64_t v20 = *(void *)(v0 + 96);
        uint64_t v21 = *(void *)(v0 + 72);
        sub_10110D4A8(*(void *)(v0 + 88), type metadata accessor for DeviceEvent);
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }
      while (v17(v20, 1, v21) != 1);
    }
    swift_release();
    uint64_t v22 = self;
    sub_10000588C(&qword_10166B9C0);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = 0;
    id v24 = [v22 dataWithPropertyList:isa format:200 options:0 error:v0 + 16];

    id v25 = *(id *)(v0 + 16);
    if (v24)
    {
      uint64_t v27 = *(void *)(v0 + 56);
      uint64_t v26 = *(void *)(v0 + 64);
      uint64_t v28 = *(void *)(v0 + 48);
      static Data._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t))(v27 + 104))(v26, enum case for StateCaptureDateType.serialized(_:), v28);
      StateCaptureStateData.init(type:title:data:)();
      swift_release();
      uint64_t v9 = 0;
      goto LABEL_5;
    }
    unint64_t v29 = v25;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_release();
  }
  else
  {
    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
LABEL_8:
  return v12();
}

uint64_t sub_101107780(uint64_t *a1, uint64_t a2)
{
  type metadata accessor for DeviceEvent(0);
  type metadata accessor for BeaconIdentifier();
  uint64_t v24 = UUID.uuidString.getter();
  uint64_t v26 = v4;
  v5._uint64_t countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  unint64_t v6 = 0xE800000000000000;
  uint64_t v7 = 0x6E776F6E6B6E752ELL;
  switch(*(unsigned char *)(a2 + 9))
  {
    case 1:
      uint64_t v7 = 0x7463656E6E6F632ELL;
      break;
    case 2:
      unint64_t v6 = 0xEB00000000746365;
      uint64_t v7 = 0x6E6E6F637369642ELL;
      break;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      unsigned int v8 = 1953784110;
      goto LABEL_6;
    case 4:
      unint64_t v6 = 0xE700000000000000;
      unsigned int v8 = 1952801838;
LABEL_6:
      uint64_t v7 = v8 | 0x68636100000000;
      break;
    case 5:
      unint64_t v6 = 0xEF79627261654E64;
      uint64_t v7 = 0x657463657465642ELL;
      break;
    case 6:
      unint64_t v6 = 0xEC00000064657261;
      uint64_t v7 = 0x657070617369642ELL;
      break;
    case 7:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v7 = 0x726961702ELL;
      break;
    default:
      break;
  }
  unint64_t v9 = v6;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  uint64_t v10 = v24;
  uint64_t v11 = *a1;
  if (!*(void *)(*a1 + 16)) {
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_100723FF4(v24, v26);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_19:
    sub_10000588C((uint64_t *)&unk_101657728);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_101342130;
    *(void *)(v14 + 32) = sub_100F203B0();
    goto LABEL_20;
  }
  uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (*(void *)(v14 + 16) >= 3uLL)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  unint64_t v15 = sub_100F203B0();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v14 = (uint64_t)sub_100A72750(0, *(void *)(v14 + 16) + 1, 1, (void *)v14);
  }
  unint64_t v16 = *(void *)(v14 + 16);
  unint64_t v17 = *(void *)(v14 + 24);
  unint64_t v18 = v16 + 1;
  if (v16 >= v17 >> 1)
  {
    uint64_t v21 = (void *)v14;
    unint64_t v22 = *(void *)(v14 + 16);
    uint64_t v23 = sub_100A72750((void *)(v17 > 1), v16 + 1, 1, v21);
    unint64_t v16 = v22;
    uint64_t v14 = (uint64_t)v23;
  }
  *(void *)(v14 + 16) = v18;
  *(void *)(v14 + 8 * v16 + 32) = v15;
  swift_bridgeObjectRelease();
LABEL_20:
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = *a1;
  *a1 = 0x8000000000000000;
  sub_100173450(v14, v10, v26, isUniquelyReferenced_nonNull_native);
  *a1 = v25;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_101107A90()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_101107AB0, v0, 0);
}

uint64_t sub_101107AB0()
{
  uint64_t v1 = self;
  id v2 = [v1 standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 integerForKey:v3];

  if (v4 != (id)1)
  {
    sub_101107D84(0);
    id v5 = [v1 standardUserDefaults];
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 setInteger:1 forKey:v6];
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_101107D84(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 128);
  if (v2)
  {
    swift_retain();
    uint64_t v4 = sub_10017DA20(a1, v2);
    swift_release();
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10166B720);
    NSString v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    uint64_t v4 = v7;
    if (os_log_type_enabled(v6, v7))
    {
      unsigned int v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned int v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, (os_log_type_t)v4, "No observation store on this platform!", v8, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
  }
  return v4;
}

uint64_t sub_101107ECC()
{
  v1[16] = v0;
  v1[17] = *(void *)(type metadata accessor for LocalFindableAccessoryRecord() - 8);
  v1[18] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for UUID();
  v1[19] = v2;
  v1[20] = *(void *)(v2 - 8);
  v1[21] = swift_task_alloc();
  return _swift_task_switch(sub_101107FE4, v0, 0);
}

uint64_t sub_101107FE4()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    NSString v3 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_101108120;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_101108120(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  *(void *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_101108238, v2, 0);
}

uint64_t sub_101108238()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[23])
  {
    uint64_t v2 = v0[16];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(void *)(v2 + 128);
    v0[24] = v3;
    if (v3)
    {
      uint64_t v4 = v0[23];
      swift_retain();
      return _swift_task_switch(sub_101108504, v4, 0);
    }
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10166B720);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      char v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No observation store on this platform!", v13, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
    swift_release();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1016368D8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170D7E8);
    NSString v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unsigned int v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned int v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing CloudStorageService to purge device events!", v8, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v9 = 0xD000000000000013;
    v9[1] = 0x80000001014033F0;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_101108504()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_101108598;
  return sub_100C134B0();
}

uint64_t sub_101108598(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 208) = a1;
  *(void *)(v4 + 216) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 128);
  if (v1) {
    NSString v6 = sub_101108900;
  }
  else {
    NSString v6 = sub_1011086CC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1011086CC()
{
  uint64_t v1 = v0[26];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[20];
    uint64_t v4 = v0[17];
    unint64_t v18 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v2, 0);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v17 = *(void *)(v4 + 72);
    NSString v6 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v7 = v0[21];
      uint64_t v9 = v0[18];
      uint64_t v8 = v0[19];
      sub_10110D440(v5, v9, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v9, v8);
      sub_10110D4A8(v9, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v6[2] + 1, 1);
        NSString v6 = v18;
      }
      unint64_t v11 = v6[2];
      unint64_t v10 = v6[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7034(v10 > 1, v11 + 1, 1);
        NSString v6 = v18;
      }
      uint64_t v12 = v0[21];
      uint64_t v13 = v0[19];
      uint64_t v6[2] = v11 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v6+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v11, v12, v13);
      unint64_t v18 = v6;
      v5 += v17;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    NSString v6 = _swiftEmptyArrayStorage;
  }
  v0[28] = v6;
  uint64_t v14 = v0[24];
  unint64_t v15 = (void *)swift_task_alloc();
  v0[29] = v15;
  *unint64_t v15 = v0;
  v15[1] = sub_101108980;
  return sub_100181384((uint64_t)v6, v14);
}

uint64_t sub_101108900()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_101108980(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[30] = a1;
  v3[31] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[16];
    uint64_t v5 = sub_101108C20;
  }
  else
  {
    uint64_t v6 = v3[16];
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_101108AA8;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_101108AA8()
{
  if (qword_101637480 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10166B720);
  int64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[30];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    v0[15] = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Deleted %ld device events.", v5, 0xCu);
    swift_slowDealloc();
  }

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_101108C20()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_101108CAC()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ObservationStoreService()
{
  return self;
}

uint64_t sub_101108D28()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_101108D48, v0, 0);
}

uint64_t sub_101108D48()
{
  uint64_t v1 = *(void *)(v0 + 16);
  type metadata accessor for StateCapture();
  swift_allocObject();
  swift_retain();
  *(void *)(v1 + 160) = StateCapture.init(_:)();
  swift_release();
  int64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_101108DF0()
{
  int64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *int64_t v2 = v1;
  v2[1] = sub_100033F68;
  v2[3] = v0;
  return _swift_task_switch(sub_101107AB0, v0, 0);
}

uint64_t sub_101108E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for ObservedAdvertisement(0);
  v5[4] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10166BA58);
  v5[5] = v6;
  v5[6] = *(void *)(v6 - 8);
  v5[7] = swift_task_alloc();
  return _swift_task_switch(sub_101108F88, 0, 0);
}

uint64_t sub_101108F88()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[6];
    uint64_t v4 = *(void *)(sub_10000588C((uint64_t *)&unk_101657B90) - 8);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    uint64_t v7 = (void (**)(uint64_t, uint64_t))(v3 + 8);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v8 = v0[7];
      uint64_t v9 = v0[5];
      sub_10110D440(v0[3], v0[4], type metadata accessor for ObservedAdvertisement);
      AsyncStream.Continuation.yield(_:)();
      (*v7)(v8, v9);
      v5 += v6;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1011090F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for DeviceEvent(0);
  v5[4] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10166B990);
  v5[5] = v6;
  v5[6] = *(void *)(v6 - 8);
  v5[7] = swift_task_alloc();
  return _swift_task_switch(sub_1011091E0, 0, 0);
}

uint64_t sub_1011091E0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[6];
    uint64_t v4 = *(void *)(sub_10000588C(&qword_1016579D8) - 8);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    uint64_t v7 = (void (**)(uint64_t, uint64_t))(v3 + 8);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v8 = v0[7];
      uint64_t v9 = v0[5];
      sub_10110D440(v0[3], v0[4], type metadata accessor for DeviceEvent);
      AsyncStream.Continuation.yield(_:)();
      (*v7)(v8, v9);
      v5 += v6;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_101109348(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 40) = a3;
  *(void *)(v4 + 16) = a1;
  return _swift_task_switch(sub_101109370, v3, 0);
}

uint64_t sub_101109370()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 128);
  if (v1)
  {
    int v2 = *(unsigned __int8 *)(v0 + 40);
    uint64_t v4 = *(void *)(v0 + 16);
    uint64_t v3 = *(void *)(v0 + 24);
    swift_retain();
    sub_10018AC50(v4, v3, v2, v1);
    uint64_t v11 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
    swift_release();
    swift_release();
    uint64_t v12 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v12(v11);
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10166B720);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No observation store on this platform!", v8, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_10110955C(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_10110957C, v1, 0);
}

uint64_t sub_10110957C()
{
  uint64_t v1 = *(void *)(v0[3] + 128);
  if (v1)
  {
    uint64_t v2 = v0[2];
    swift_retain();
    sub_10018C724(v2, v1);
    uint64_t v9 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
    swift_release();
    swift_release();
    unint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
    return v10(v9);
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10166B720);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No observation store on this platform!", v6, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
    os_log_type_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_10110975C(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_10110977C, v1, 0);
}

uint64_t sub_10110977C()
{
  uint64_t v1 = *(void *)(v0[3] + 128);
  if (v1)
  {
    uint64_t v2 = v0[2];
    swift_retain();
    sub_10018DE20(v2, v1);
    uint64_t v9 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
    swift_release();
    swift_release();
    unint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
    return v10(v9);
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10166B720);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No observation store on this platform!", v6, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
    os_log_type_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_10110995C(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_10110997C, v1, 0);
}

uint64_t sub_10110997C()
{
  uint64_t v1 = *(void *)(v0[3] + 128);
  if (v1)
  {
    uint64_t v2 = v0[2];
    swift_retain();
    __int16 v3 = sub_10018FF20(v2, v1);
    swift_release();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4(v3 & 0x1FF);
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10166B720);
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No observation store on this platform!", v9, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
    unint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_101109B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  sub_10000588C(&qword_10163CF20);
  v4[8] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v4[16] = v5;
  v4[17] = *(void *)(v5 - 8);
  v4[18] = swift_task_alloc();
  sub_10000588C(&qword_10163D030);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DeviceEvent(0);
  v4[26] = v6;
  v4[27] = *(void *)(v6 - 8);
  v4[28] = swift_task_alloc();
  return _swift_task_switch(sub_101109D88, v3, 0);
}

uint64_t sub_101109D88()
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[7];
  v0[2] = 0x7365547265646E75;
  v0[3] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 128);
  if (v2)
  {
    uint64_t v3 = v0[25];
    uint64_t v5 = v0[5];
    uint64_t v4 = v0[6];
    swift_retain();
    sub_100194A8C(v5, 8, v4, v2, v3);
    uint64_t v11 = v0[26];
    uint64_t v12 = v0[25];
    if ((*(unsigned int (**)(void, uint64_t, void))(v0[27] + 48))(v0[25], 1, v0[26]) == 1)
    {
      swift_release();
      uint64_t v13 = &qword_10163D030;
      uint64_t v14 = v12;
    }
    else
    {
      uint64_t v15 = v0[28];
      uint64_t v16 = v0[8];
      sub_10110D508(v12, v15, type metadata accessor for DeviceEvent);
      sub_10001D074(v15 + *(int *)(v11 + 32), v16, &qword_10163CF20);
      uint64_t v17 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      int v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17);
      uint64_t v20 = v0[16];
      uint64_t v19 = v0[17];
      uint64_t v21 = v0[15];
      uint64_t v22 = v0[8];
      if (v18 == 1)
      {
        sub_10001DAB4(v0[8], &qword_10163CF20);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, 1, 1, v20);
      }
      else
      {
        uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
        v69(v0[15], v0[8], v0[16]);
        sub_10110D4A8(v22, type metadata accessor for DeviceEvent.AttachmentInfo);
        uint64_t v23 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56);
        v23(v21, 0, 1, v20);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v21, 1, v20) != 1)
        {
          uint64_t v29 = v0[24];
          uint64_t v30 = v0[18];
          uint64_t v67 = v23;
          uint64_t v31 = v0[16];
          uint64_t v32 = v0[14];
          uint64_t v33 = v0[5];
          (*(void (**)(uint64_t, void, uint64_t))(v0[17] + 32))(v30, v0[15], v31);
          v69(v32, v30, v31);
          v67(v32, 0, 1, v31);
          sub_100194A8C(v33, 3, v32, v2, v29);
          uint64_t v34 = v0[16];
          uint64_t v71 = v0[23];
          uint64_t v35 = v0[18];
          uint64_t v36 = v0[13];
          uint64_t v65 = v0[5];
          sub_10001DAB4(v0[14], &qword_101638CF0);
          v69(v36, v35, v34);
          v67(v36, 0, 1, v34);
          sub_100194A8C(v65, 4, v36, v2, v71);
          uint64_t v37 = v0[18];
          uint64_t v38 = v0[22];
          uint64_t v39 = v0[16];
          uint64_t v40 = v0[12];
          uint64_t v41 = v0[5];
          sub_10001DAB4(v0[13], &qword_101638CF0);
          v69(v40, v37, v39);
          v67(v40, 0, 1, v39);
          sub_100194A8C(v41, 1, v40, v2, v38);
          uint64_t v42 = v0[21];
          uint64_t v43 = v0[18];
          uint64_t v44 = v0[16];
          uint64_t v45 = v0[11];
          uint64_t v46 = v0[5];
          sub_10001DAB4(v0[12], &qword_101638CF0);
          v69(v45, v43, v44);
          v67(v45, 0, 1, v44);
          sub_100194A8C(v46, 2, v45, v2, v42);
          uint64_t v47 = v0[20];
          uint64_t v48 = v0[18];
          uint64_t v49 = v0[16];
          uint64_t v50 = v0[10];
          uint64_t v51 = v0[5];
          sub_10001DAB4(v0[11], &qword_101638CF0);
          v69(v50, v48, v49);
          v67(v50, 0, 1, v49);
          sub_100194A8C(v51, 5, v50, v2, v47);
          uint64_t v53 = v0[18];
          uint64_t v52 = v0[19];
          uint64_t v54 = v0[16];
          uint64_t v55 = v0[9];
          uint64_t v56 = v0[5];
          sub_10001DAB4(v0[10], &qword_101638CF0);
          v69(v55, v53, v54);
          v67(v55, 0, 1, v54);
          sub_100194A8C(v56, 6, v55, v2, v52);
          uint64_t v57 = v0[23];
          uint64_t v58 = v0[24];
          uint64_t v59 = v0[22];
          uint64_t v68 = v0[21];
          uint64_t v70 = v0[28];
          uint64_t v72 = v0[20];
          uint64_t v60 = v0[18];
          uint64_t v66 = v0[19];
          uint64_t v61 = v0[16];
          uint64_t v62 = v0[17];
          uint64_t v63 = v0[9];
          uint64_t v64 = v0[4];
          swift_release();
          sub_10001DAB4(v63, &qword_101638CF0);
          (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v60, v61);
          sub_10110D4A8(v70, type metadata accessor for DeviceEvent);
          sub_10001D608(v58, v64, &qword_10163D030);
          uint64_t v26 = (int *)type metadata accessor for AttachedAccessoryEventsTransport();
          sub_10001D608(v57, v64 + v26[5], &qword_10163D030);
          sub_10001D608(v59, v64 + v26[6], &qword_10163D030);
          sub_10001D608(v68, v64 + v26[7], &qword_10163D030);
          sub_10001D608(v72, v64 + v26[8], &qword_10163D030);
          sub_10001D608(v66, v64 + v26[9], &qword_10163D030);
          uint64_t v27 = 0;
          goto LABEL_17;
        }
      }
      uint64_t v24 = v0[28];
      uint64_t v25 = v0[15];
      swift_release();
      sub_10110D4A8(v24, type metadata accessor for DeviceEvent);
      uint64_t v13 = &qword_101638CF0;
      uint64_t v14 = v25;
    }
    sub_10001DAB4(v14, v13);
    uint64_t v26 = (int *)type metadata accessor for AttachedAccessoryEventsTransport();
    uint64_t v27 = 1;
LABEL_17:
    (*(void (**)(void, uint64_t, uint64_t, int *))(*((void *)v26 - 1) + 56))(v0[4], v27, 1, v26);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v10 = (uint64_t (*)(void))v0[1];
    goto LABEL_18;
  }
  if (qword_101637480 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10166B720);
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "No observation store on this platform!", v9, 2u);
    swift_slowDealloc();
  }

  sub_1005D4B14();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v10 = (uint64_t (*)(void))v0[1];
LABEL_18:
  return v10();
}

uint64_t sub_10110AA6C(uint64_t a1, uint64_t a2)
{
  v3[3] = a1;
  v3[4] = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v3[5] = v5;
  *uint64_t v5 = v3;
  v5[3] = &off_10159F8D8;
  v5[4] = v2;
  v5[1] = sub_10110AB24;
  v5[2] = a2;
  return _swift_task_switch(sub_1011039C4, v2, 0);
}

uint64_t sub_10110AB24(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 48) = a1;
  *(void *)(v4 + 56) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 32);
  if (v1) {
    uint64_t v6 = sub_10110AF48;
  }
  else {
    uint64_t v6 = sub_10110AC58;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10110AC58()
{
  if (*(void *)(v0[6] + 16))
  {
    uint64_t v1 = v0 + 3;
    uint64_t v2 = v0[7];
    sub_10115CA10(v0[6], v0[3]);
    if (v2)
    {
      if (qword_1016374B8 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_100010324(v3, (uint64_t)qword_10170F340);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v6 = 138543362;
        swift_errorRetain();
        uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
        v0[2] = v7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v16 = v7;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Couldn't create KeySyncSnapshot, %{public}@", v6, 0xCu);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v12 = *v1;
      uint64_t v13 = type metadata accessor for KeySyncSnapshot();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    }
    else
    {
      uint64_t v10 = *v1;
      uint64_t v11 = type metadata accessor for KeySyncSnapshot();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 0, 1, v11);
    }
  }
  else
  {
    uint64_t v8 = v0[3];
    uint64_t v9 = type metadata accessor for KeySyncSnapshot();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_10110AF48()
{
  if (qword_1016374B8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F340);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Couldn't create KeySyncSnapshot, %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[3];
  uint64_t v8 = type metadata accessor for KeySyncSnapshot();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10110B188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653D40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163F7B0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a2, (uint64_t)v7, (uint64_t *)&unk_101653D40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_101653D40);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v20, v12);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    uint64_t v17 = 1;
  }
  else
  {
    sub_10001D608((uint64_t)v7, (uint64_t)v11, &qword_10163F7B0);
    if ((unint64_t)*v11 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = *v11;
    }
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v16(v15, (char *)v11 + *(int *)(v8 + 36), v12);
  }
  *a3 = v17;
  return ((uint64_t (*)(char *, char *, uint64_t))v16)((char *)a3 + *(int *)(v8 + 36), v15, v12);
}

uint64_t sub_10110B3F0()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_10110B410, v0, 0);
}

uint64_t sub_10110B410()
{
  if (*(void *)(*(void *)(v0 + 16) + 128))
  {
    uint64_t v1 = swift_retain();
    sub_1001945D8(v1);
    swift_release();
  }
  else
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10166B720);
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "No observation store on this platform!", v5, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    swift_allocError();
    swift_willThrow();
  }
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10110B578(uint64_t a1, uint64_t a2)
{
  return sub_10110B7E4(a1, a2, (uint64_t *)&unk_101657B90, (uint64_t)&unk_1016093F8, (uint64_t)&unk_10166BA88);
}

uint64_t sub_10110B5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_101657B90);
  v5[7] = v7;
  v5[8] = *(void *)(v7 - 8);
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_10110B668, a4, 0);
}

uint64_t sub_10110B668()
{
  uint64_t v1 = v0[5];
  (*(void (**)(void, void, void))(v0[8] + 16))(v0[9], v0[6], v0[7]);
  uint64_t v2 = (unint64_t *)(v1 + 136);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 136) = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v3 = sub_100A72764(0, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v2 = v3;
  }
  unint64_t v6 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    unint64_t v3 = sub_100A72764(v5 > 1, v6 + 1, 1, v3);
    *uint64_t v2 = v3;
  }
  uint64_t v7 = v0[8];
  uint64_t v8 = v0[9];
  uint64_t v9 = v0[7];
  *(void *)(v3 + 16) = v6 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v3+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v6, v8, v9);
  swift_endAccess();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10110B7BC(uint64_t a1, uint64_t a2)
{
  return sub_10110B7E4(a1, a2, &qword_1016579D8, (uint64_t)&unk_1016093D0, (uint64_t)&unk_10166BA78);
}

uint64_t sub_10110B7E4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_10000588C(a3);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = 0;
  *((void *)v16 + 3) = 0;
  *((void *)v16 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  swift_retain();
  sub_1008F5E44((uint64_t)v13, a5, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_10110B9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v7 = sub_10000588C(&qword_1016579D8);
  v5[7] = v7;
  v5[8] = *(void *)(v7 - 8);
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_10110BA7C, a4, 0);
}

uint64_t sub_10110BA7C()
{
  uint64_t v1 = v0[5];
  (*(void (**)(void, void, void))(v0[8] + 16))(v0[9], v0[6], v0[7]);
  uint64_t v2 = (unint64_t *)(v1 + 144);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 144);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 144) = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v3 = sub_100A72778(0, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v2 = v3;
  }
  unint64_t v6 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    unint64_t v3 = sub_100A72778(v5 > 1, v6 + 1, 1, v3);
    *uint64_t v2 = v3;
  }
  uint64_t v7 = v0[8];
  uint64_t v8 = v0[9];
  uint64_t v9 = v0[7];
  *(void *)(v3 + 16) = v6 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v3+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v6, v8, v9);
  swift_endAccess();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10110BBD0(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_100033F68;
  return sub_101104F18(a1);
}

uint64_t sub_10110BC68(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100033F68;
  return _swift_task_switch(sub_101104C10, v4, 0);
}

uint64_t sub_10110BD18(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_10001D2E4;
  return _swift_task_switch(sub_101104DA4, v4, 0);
}

uint64_t sub_10110BDC8()
{
  uint64_t v2 = *v0;
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_100033F68;
  v3[2] = v2;
  return _swift_task_switch(sub_101103BC8, v2, 0);
}

uint64_t sub_10110BE70(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *(void *)uint64_t v9 = v4;
  *(unsigned char *)(v9 + 40) = a3;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = v8;
  *(void *)(v9 + 8) = sub_100780780;
  *(void *)(v9 + 16) = a1;
  return _swift_task_switch(sub_101109370, v8, 0);
}

uint64_t sub_10110BF34(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100780780;
  return _swift_task_switch(sub_10110957C, v4, 0);
}

uint64_t sub_10110BFE4(double a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100780780;
  *(void *)(v5 + 24) = v4;
  *(double *)(v5 + 16) = a1;
  return _swift_task_switch(sub_101104334, v4, 0);
}

uint64_t sub_10110C098(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100780780;
  return _swift_task_switch(sub_10110977C, v4, 0);
}

uint64_t sub_10110C148(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100770320;
  return _swift_task_switch(sub_10110997C, v4, 0);
}

uint64_t sub_10110C1F8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[3] = a2;
  v7[4] = v6;
  v7[1] = sub_100033F68;
  v7[2] = a1;
  return _swift_task_switch(sub_1011048D0, v6, 0);
}

uint64_t sub_10110C2B4(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100780780;
  v5[4] = a1;
  v5[5] = v4;
  return _swift_task_switch(sub_1011058F8, v4, 0);
}

uint64_t sub_10110C364()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  v3[4] = v2;
  return _swift_task_switch(sub_101103D50, v2, 0);
}

uint64_t sub_10110C410()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001C878;
  v3[4] = v2;
  return _swift_task_switch(sub_101103780, v2, 0);
}

uint64_t sub_10110C4BC(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100033F68;
  return _swift_task_switch(sub_101104A7C, v4, 0);
}

uint64_t sub_10110C56C(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100780780;
  return _swift_task_switch(sub_1011052DC, v4, 0);
}

uint64_t sub_10110C61C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[3] = a2;
  v7[4] = v6;
  v7[1] = sub_100780780;
  v7[2] = a1;
  return _swift_task_switch(sub_1011039C4, v6, 0);
}

uint64_t sub_10110C6D8(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100033F68;
  return _swift_task_switch(sub_101106A34, v4, 0);
}

uint64_t sub_10110C788()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  v3[2] = v2;
  return _swift_task_switch(sub_10110B410, v2, 0);
}

uint64_t sub_10110C830(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v10 = *v4;
  uint64_t v11 = swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *(void *)uint64_t v11 = v5;
  *(void *)(v11 + 32) = a4;
  *(void *)(v11 + 40) = v10;
  *(unsigned char *)(v11 + 48) = a3;
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  *(void *)(v11 + 8) = sub_100033F68;
  return _swift_task_switch(sub_1011054E4, v10, 0);
}

uint64_t sub_10110C904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100033F68;
  return sub_101109B40(a1, a2, a3);
}

uint64_t sub_10110C9B8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  return sub_101106BA8(a1);
}

uint64_t sub_10110CA50(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10110CEDC(&qword_10166B958, a2, (void (*)(uint64_t))type metadata accessor for ObservationStoreService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10110CAA8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170F2C8);
  sub_100010324(v0, (uint64_t)qword_10170F2C8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10110CB2C()
{
  uint64_t v1 = (int *)type metadata accessor for DeviceEvent(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v22 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = v0 + v3 + v1[6];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = v0 + v3 + v1[7];
  uint64_t v9 = type metadata accessor for DeviceEvent.Location(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9)) {
    v7(v8 + *(int *)(v9 + 28), v6);
  }
  uint64_t v23 = v7;
  uint64_t v10 = v4 + v1[8];
  uint64_t v11 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v21(v10, v12);
    uint64_t v14 = v10 + *(int *)(v11 + 20);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12)) {
      v21(v14, v12);
    }
  }
  uint64_t v15 = v2 | 7;
  uint64_t v16 = v4 + v1[9];
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  v18(v16, v17);
  uint64_t v19 = type metadata accessor for BeaconIdentifier();
  v18(v16 + *(int *)(v19 + 20), v17);
  v23(v4 + v1[10], v6);

  return _swift_deallocObject(v0, v3 + v22, v15);
}

uint64_t sub_10110CE30(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10001D2E4;
  return sub_10110704C(a1, a2, v2);
}

uint64_t sub_10110CEDC(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10110CF24()
{
  uint64_t v1 = (int *)type metadata accessor for ObservedAdvertisement(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001A1AD8(*(void *)(v0 + v3 + 16), *(void *)(v0 + v3 + 24));
  uint64_t v4 = v0 + v3 + v1[11];
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = v0 + v3 + v1[12];
  uint64_t v8 = type metadata accessor for ObservedAdvertisement.Location(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8)) {
    v6(v7 + *(int *)(v8 + 28), v5);
  }
  uint64_t v9 = v0 + v3 + v1[13];
  uint64_t v10 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v9, v11);
  }

  return _swift_deallocObject(v0, v3 + v13, v2 | 7);
}

uint64_t sub_10110D12C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ObservedAdvertisement(0) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100033F68;
  return sub_101108E98(a1, v5, v6, v7, v8);
}

uint64_t sub_10110D228()
{
  return sub_1009C74AC(&qword_1016579D8);
}

uint64_t sub_10110D234(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000588C(&qword_1016579D8) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100033F68;
  return sub_10110B9B4(a1, v5, v6, v7, v8);
}

uint64_t sub_10110D334()
{
  return sub_1009C74AC((uint64_t *)&unk_101657B90);
}

uint64_t sub_10110D340(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000588C((uint64_t *)&unk_101657B90) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100033F68;
  return sub_10110B5A0(a1, v5, v6, v7, v8);
}

uint64_t sub_10110D440(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10110D4A8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10110D508(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for ObservationStoreService.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10110D63CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservationStoreService.Error()
{
  return &type metadata for ObservationStoreService.Error;
}

unsigned char *storeEnumTagSinglePayload for ObservationStoreService.ObservationStoreServiceError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10110D710);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservationStoreService.ObservationStoreServiceError()
{
  return &type metadata for ObservationStoreService.ObservationStoreServiceError;
}

unint64_t sub_10110D74C()
{
  unint64_t result = qword_10166BA98;
  if (!qword_10166BA98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BA98);
  }
  return result;
}

unint64_t sub_10110D7A4()
{
  unint64_t result = qword_10166BAA0[0];
  if (!qword_10166BAA0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10166BAA0);
  }
  return result;
}

uint64_t sub_10110D7F8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10110D850()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10110D880()
{
  type metadata accessor for AbstractXPCClientConnectionPool();
  swift_getWitnessTable();
  v0._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 8250;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 62;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 60;
}

uint64_t sub_10110D974()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170F2E0);
  sub_100010324(v0, (uint64_t)qword_10170F2E0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10110D9F8()
{
  sub_10110D850();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AbstractXPCClientConnectionPool()
{
  return sub_1000103A0();
}

uint64_t sub_10110DA44()
{
  return sub_10110D880();
}

unint64_t sub_10110DA68(__int16 a1)
{
  if (a1)
  {
    if ((a1 & 2) != 0)
    {
      unint64_t v1 = 3;
      if ((a1 & 4) == 0) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v1 = 1;
      if ((a1 & 4) == 0)
      {
        if ((a1 & 8) == 0) {
          goto LABEL_9;
        }
        goto LABEL_33;
      }
    }
    goto LABEL_22;
  }
  if ((a1 & 2) != 0)
  {
    unint64_t v1 = 2;
    if ((a1 & 4) == 0)
    {
LABEL_23:
      if ((a1 & 8) == 0)
      {
        if ((a1 & 0x10) != 0) {
          goto LABEL_34;
        }
        goto LABEL_25;
      }
LABEL_33:
      v1 |= 8uLL;
      if ((a1 & 0x10) != 0)
      {
LABEL_34:
        v1 |= 0x10uLL;
        if ((a1 & 0x20) != 0)
        {
LABEL_35:
          v1 |= 0x20uLL;
          if ((a1 & 0x40) != 0)
          {
LABEL_36:
            v1 |= 0x40uLL;
            if ((a1 & 0x80) != 0)
            {
LABEL_37:
              v1 |= 0x80uLL;
              if ((a1 & 0x100) != 0)
              {
LABEL_38:
                v1 |= 0x100uLL;
                if ((a1 & 0x400) != 0) {
                  goto LABEL_39;
                }
LABEL_30:
                if ((a1 & 0x800) != 0) {
                  goto LABEL_40;
                }
                goto LABEL_31;
              }
LABEL_29:
              if ((a1 & 0x400) != 0) {
                goto LABEL_39;
              }
              goto LABEL_30;
            }
LABEL_28:
            if ((a1 & 0x100) != 0) {
              goto LABEL_38;
            }
            goto LABEL_29;
          }
LABEL_27:
          if ((a1 & 0x80) != 0) {
            goto LABEL_37;
          }
          goto LABEL_28;
        }
LABEL_26:
        if ((a1 & 0x40) != 0) {
          goto LABEL_36;
        }
        goto LABEL_27;
      }
LABEL_25:
      if ((a1 & 0x20) != 0) {
        goto LABEL_35;
      }
      goto LABEL_26;
    }
LABEL_22:
    v1 |= 4uLL;
    goto LABEL_23;
  }
  unint64_t v1 = 0;
  if ((a1 & 4) != 0) {
    goto LABEL_22;
  }
  if ((a1 & 8) != 0) {
    goto LABEL_33;
  }
LABEL_9:
  if ((a1 & 0x10) != 0) {
    goto LABEL_34;
  }
  if ((a1 & 0x20) != 0) {
    goto LABEL_35;
  }
  if ((a1 & 0x40) != 0) {
    goto LABEL_36;
  }
  if ((a1 & 0x80) != 0) {
    goto LABEL_37;
  }
  if ((a1 & 0x100) != 0) {
    goto LABEL_38;
  }
  if ((a1 & 0x400) == 0)
  {
    if ((a1 & 0x800) == 0)
    {
      if ((a1 & 0x200) == 0)
      {
        if ((a1 & 0x1000) == 0) {
          goto LABEL_53;
        }
LABEL_52:
        v1 |= 0x1000uLL;
        goto LABEL_53;
      }
LABEL_42:
      v1 |= 0x200uLL;
      goto LABEL_43;
    }
    goto LABEL_40;
  }
LABEL_39:
  v1 |= 0x400uLL;
  if ((a1 & 0x800) != 0)
  {
LABEL_40:
    v1 |= 0x800uLL;
    if ((a1 & 0x200) == 0) {
      goto LABEL_43;
    }
LABEL_41:
    if ((v1 & 0x200) != 0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
LABEL_31:
  if ((a1 & 0x200) != 0) {
    goto LABEL_41;
  }
LABEL_43:
  uint64_t v2 = (v1 >> 10) & 1;
  if ((a1 & 0x400) == 0) {
    LODWORD(v2) = 1;
  }
  if (!v2) {
    v1 |= 0x400uLL;
  }
  unint64_t v3 = v1 >> 11;
  if ((a1 & 0x800) == 0) {
    LODWORD(v3) = 1;
  }
  if (!v3) {
    v1 |= 0x800uLL;
  }
  if ((a1 & 0x1000) != 0) {
    goto LABEL_52;
  }
LABEL_53:
  if ((a1 & 0x2000) != 0) {
    v1 |= 0x2000uLL;
  }
  return v1;
}

void *sub_10110DB88(__int16 a1)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
    if ((a1 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_9;
  }
  id v3 = SPBeaconTaskNamePlaySound;
  uint64_t v2 = sub_100A708EC(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v5 = v2[2];
  unint64_t v4 = v2[3];
  unint64_t v6 = v5 + 1;
  if (v5 >= v4 >> 1) {
    uint64_t v2 = sub_100A708EC((void *)(v4 > 1), v5 + 1, 1, v2);
  }
  v2[2] = v6;
  v2[v5 + 4] = v3;
  unint64_t v7 = v2[3];
  int64_t v8 = v5 + 2;
  id v9 = SPBeaconTaskNameStopSound;
  if (v8 > (uint64_t)(v7 >> 1)) {
    uint64_t v2 = sub_100A708EC((void *)(v7 > 1), v8, 1, v2);
  }
  v2[2] = v8;
  v2[v6 + 4] = v9;
  if ((a1 & 0x20) != 0)
  {
LABEL_9:
    id v10 = SPBeaconTaskNameEnableLostMode;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A708EC(0, v2[2] + 1, 1, v2);
    }
    unint64_t v12 = v2[2];
    unint64_t v11 = v2[3];
    unint64_t v13 = v12 + 1;
    if (v12 >= v11 >> 1) {
      uint64_t v2 = sub_100A708EC((void *)(v11 > 1), v12 + 1, 1, v2);
    }
    v2[2] = v13;
    v2[v12 + 4] = v10;
    unint64_t v14 = v2[3];
    int64_t v15 = v12 + 2;
    id v16 = SPBeaconTaskNameDisableLostMode;
    if (v15 > (uint64_t)(v14 >> 1)) {
      uint64_t v2 = sub_100A708EC((void *)(v14 > 1), v15, 1, v2);
    }
    v2[2] = v15;
    v2[v13 + 4] = v16;
  }
LABEL_16:
  if ((a1 & 0x40) != 0)
  {
    id v17 = SPBeaconTaskNameEnableNotifyWhenFound;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A708EC(0, v2[2] + 1, 1, v2);
    }
    unint64_t v19 = v2[2];
    unint64_t v18 = v2[3];
    unint64_t v20 = v19 + 1;
    if (v19 >= v18 >> 1) {
      uint64_t v2 = sub_100A708EC((void *)(v18 > 1), v19 + 1, 1, v2);
    }
    v2[2] = v20;
    v2[v19 + 4] = v17;
    unint64_t v21 = v2[3];
    int64_t v22 = v19 + 2;
    id v23 = SPBeaconTaskNameDisableNotifyWhenFound;
    if (v22 > (uint64_t)(v21 >> 1)) {
      uint64_t v2 = sub_100A708EC((void *)(v21 > 1), v22, 1, v2);
    }
    v2[2] = v22;
    v2[v20 + 4] = v23;
    if ((a1 & 0x100) == 0)
    {
LABEL_18:
      if ((a1 & 0x400) == 0) {
        goto LABEL_19;
      }
      goto LABEL_37;
    }
  }
  else if ((a1 & 0x100) == 0)
  {
    goto LABEL_18;
  }
  id v24 = SPBeaconTaskNameBeginRanging;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A708EC(0, v2[2] + 1, 1, v2);
  }
  unint64_t v26 = v2[2];
  unint64_t v25 = v2[3];
  unint64_t v27 = v26 + 1;
  if (v26 >= v25 >> 1) {
    uint64_t v2 = sub_100A708EC((void *)(v25 > 1), v26 + 1, 1, v2);
  }
  v2[2] = v27;
  v2[v26 + 4] = v24;
  unint64_t v28 = v2[3];
  int64_t v29 = v26 + 2;
  id v30 = SPBeaconTaskNameEndRanging;
  if (v29 > (uint64_t)(v28 >> 1)) {
    uint64_t v2 = sub_100A708EC((void *)(v28 > 1), v29, 1, v2);
  }
  v2[2] = v29;
  v2[v27 + 4] = v30;
  if ((a1 & 0x400) == 0)
  {
LABEL_19:
    if ((a1 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_37:
  id v31 = SPBeaconTaskNameBeginBTFinding;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A708EC(0, v2[2] + 1, 1, v2);
  }
  unint64_t v33 = v2[2];
  unint64_t v32 = v2[3];
  unint64_t v34 = v33 + 1;
  if (v33 >= v32 >> 1) {
    uint64_t v2 = sub_100A708EC((void *)(v32 > 1), v33 + 1, 1, v2);
  }
  v2[2] = v34;
  v2[v33 + 4] = v31;
  unint64_t v35 = v2[3];
  int64_t v36 = v33 + 2;
  id v37 = SPBeaconTaskNameEndBTFinding;
  if (v36 > (uint64_t)(v35 >> 1)) {
    uint64_t v2 = sub_100A708EC((void *)(v35 > 1), v36, 1, v2);
  }
  v2[2] = v36;
  v2[v34 + 4] = v37;
  if ((a1 & 0x80) == 0)
  {
LABEL_20:
    if ((a1 & 0x800) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }
LABEL_44:
  id v38 = SPBeaconTaskNameRename;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A708EC(0, v2[2] + 1, 1, v2);
  }
  unint64_t v40 = v2[2];
  unint64_t v39 = v2[3];
  if (v40 >= v39 >> 1) {
    uint64_t v2 = sub_100A708EC((void *)(v39 > 1), v40 + 1, 1, v2);
  }
  v2[2] = v40 + 1;
  v2[v40 + 4] = v38;
  if ((a1 & 0x800) == 0)
  {
LABEL_21:
    if ((a1 & 0x200) == 0) {
      return v2;
    }
    goto LABEL_56;
  }
LABEL_49:
  id v41 = SPBeaconTaskNameBeginLeashing;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A708EC(0, v2[2] + 1, 1, v2);
  }
  unint64_t v43 = v2[2];
  unint64_t v42 = v2[3];
  unint64_t v44 = v43 + 1;
  if (v43 >= v42 >> 1) {
    uint64_t v2 = sub_100A708EC((void *)(v42 > 1), v43 + 1, 1, v2);
  }
  v2[2] = v44;
  v2[v43 + 4] = v41;
  unint64_t v45 = v2[3];
  int64_t v46 = v43 + 2;
  id v47 = SPBeaconTaskNameEndLeashing;
  if (v46 > (uint64_t)(v45 >> 1)) {
    uint64_t v2 = sub_100A708EC((void *)(v45 > 1), v46, 1, v2);
  }
  v2[2] = v46;
  v2[v44 + 4] = v47;
  if ((a1 & 0x200) != 0)
  {
LABEL_56:
    id v48 = SPBeaconTaskNameAccessoryFirmwareUpdate;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A708EC(0, v2[2] + 1, 1, v2);
    }
    unint64_t v50 = v2[2];
    unint64_t v49 = v2[3];
    if (v50 >= v49 >> 1) {
      uint64_t v2 = sub_100A708EC((void *)(v49 > 1), v50 + 1, 1, v2);
    }
    v2[2] = v50 + 1;
    v2[v50 + 4] = v48;
  }
  return v2;
}

uint64_t sub_10110E1B4(__int16 a1)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  uint64_t v2 = sub_100A6E25C(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v4 + 1;
  unint64_t v5 = &v2[2 * v4];
  v5[4] = 0x756F5379616C702ELL;
  v5[5] = 0xEA0000000000646ELL;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_100A6E25C((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2] = v7 + 1;
    int64_t v8 = &v2[2 * v7];
    v8[4] = 0x6C6563634174752ELL;
    v8[5] = 0xE800000000000000;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
    }
    unint64_t v10 = v2[2];
    unint64_t v9 = v2[3];
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_100A6E25C((void *)(v9 > 1), v10 + 1, 1, v2);
    }
    v2[2] = v10 + 1;
    unint64_t v11 = &v2[2 * v10];
    v11[4] = 0x6B6F6F4C63666E2ELL;
    v11[5] = 0xEA00000000007075;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0) {
        goto LABEL_31;
      }
      goto LABEL_26;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v13 = v2[2];
  unint64_t v12 = v2[3];
  if (v13 >= v12 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v12 > 1), v13 + 1, 1, v2);
  }
  v2[2] = v13 + 1;
  unint64_t v14 = &v2[2 * v13];
  v14[4] = 0x6B6F6F4C656C622ELL;
  v14[5] = 0xEA00000000007075;
  if ((a1 & 0x10) != 0)
  {
LABEL_26:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
    }
    unint64_t v16 = v2[2];
    unint64_t v15 = v2[3];
    if (v16 >= v15 >> 1) {
      uint64_t v2 = sub_100A6E25C((void *)(v15 > 1), v16 + 1, 1, v2);
    }
    v2[2] = v16 + 1;
    id v17 = &v2[2 * v16];
    v17[4] = 0x707261752ELL;
    v17[5] = 0xE500000000000000;
  }
LABEL_31:
  if ((a1 & 0x20) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
    }
    unint64_t v19 = v2[2];
    unint64_t v18 = v2[3];
    if (v19 >= v18 >> 1) {
      uint64_t v2 = sub_100A6E25C((void *)(v18 > 1), v19 + 1, 1, v2);
    }
    v2[2] = v19 + 1;
    unint64_t v20 = &v2[2 * v19];
    v20[4] = 0x646F4D74736F6C2ELL;
    v20[5] = 0xE900000000000065;
  }
  if ((a1 & 0x40) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
    }
    unint64_t v22 = v2[2];
    unint64_t v21 = v2[3];
    if (v22 >= v21 >> 1) {
      uint64_t v2 = sub_100A6E25C((void *)(v21 > 1), v22 + 1, 1, v2);
    }
    v2[2] = v22 + 1;
    id v23 = &v2[2 * v22];
    void v23[4] = 0xD000000000000010;
    v23[5] = 0x80000001013FEFC0;
    if ((a1 & 0x80) == 0)
    {
LABEL_39:
      if ((a1 & 0x100) == 0) {
        goto LABEL_40;
      }
      goto LABEL_56;
    }
  }
  else if ((a1 & 0x80) == 0)
  {
    goto LABEL_39;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v25 = v2[2];
  unint64_t v24 = v2[3];
  if (v25 >= v24 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v24 > 1), v25 + 1, 1, v2);
  }
  v2[2] = v25 + 1;
  unint64_t v26 = &v2[2 * v25];
  unsigned char v26[4] = 0x656D616E65722ELL;
  v26[5] = 0xE700000000000000;
  if ((a1 & 0x100) == 0)
  {
LABEL_40:
    if ((a1 & 0x200) == 0) {
      goto LABEL_41;
    }
    goto LABEL_61;
  }
LABEL_56:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v28 = v2[2];
  unint64_t v27 = v2[3];
  if (v28 >= v27 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v27 > 1), v28 + 1, 1, v2);
  }
  v2[2] = v28 + 1;
  int64_t v29 = &v2[2 * v28];
  v29[4] = 0x65676E61722ELL;
  v29[5] = 0xE600000000000000;
  if ((a1 & 0x200) == 0)
  {
LABEL_41:
    if ((a1 & 0x400) == 0) {
      goto LABEL_42;
    }
    goto LABEL_66;
  }
LABEL_61:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v31 = v2[2];
  unint64_t v30 = v2[3];
  if (v31 >= v30 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v30 > 1), v31 + 1, 1, v2);
  }
  v2[2] = v31 + 1;
  unint64_t v32 = &v2[2 * v31];
  v32[4] = 0x746164705577662ELL;
  v32[5] = 0xE900000000000065;
  if ((a1 & 0x400) == 0)
  {
LABEL_42:
    if ((a1 & 0x800) == 0) {
      goto LABEL_43;
    }
    goto LABEL_71;
  }
LABEL_66:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v34 = v2[2];
  unint64_t v33 = v2[3];
  if (v34 >= v33 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v33 > 1), v34 + 1, 1, v2);
  }
  v2[2] = v34 + 1;
  unint64_t v35 = &v2[2 * v34];
  v35[4] = 0x69646E694674622ELL;
  v35[5] = 0xEA0000000000676ELL;
  if ((a1 & 0x800) == 0)
  {
LABEL_43:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_76;
  }
LABEL_71:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v37 = v2[2];
  unint64_t v36 = v2[3];
  if (v37 >= v36 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v36 > 1), v37 + 1, 1, v2);
  }
  v2[2] = v37 + 1;
  id v38 = &v2[2 * v37];
  v38[4] = 0xD000000000000015;
  v38[5] = 0x8000000101422B10;
  if ((a1 & 0x1000) == 0)
  {
LABEL_44:
    if ((a1 & 0x2000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_81;
  }
LABEL_76:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
  }
  unint64_t v40 = v2[2];
  unint64_t v39 = v2[3];
  if (v40 >= v39 >> 1) {
    uint64_t v2 = sub_100A6E25C((void *)(v39 > 1), v40 + 1, 1, v2);
  }
  v2[2] = v40 + 1;
  id v41 = &v2[2 * v40];
  v41[4] = 0xD000000000000019;
  uint64_t v41[5] = 0x8000000101422AF0;
  if ((a1 & 0x2000) != 0)
  {
LABEL_81:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100A6E25C(0, v2[2] + 1, 1, v2);
    }
    unint64_t v43 = v2[2];
    unint64_t v42 = v2[3];
    if (v43 >= v42 >> 1) {
      uint64_t v2 = sub_100A6E25C((void *)(v42 > 1), v43 + 1, 1, v2);
    }
    v2[2] = v43 + 1;
    unint64_t v44 = (char *)&v2[2 * v43];
    strcpy(v44 + 32, ".shareRequest");
    *((_WORD *)v44 + 23) = -4864;
  }
LABEL_86:
  sub_10000588C(&qword_101654A30);
  sub_100090B54();
  uint64_t v45 = BidirectionalCollection<>.joined(separator:)();
  id v47 = v46;
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = v45;
  v48._object = v47;
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  v49._uint64_t countAndFlagsBits = 93;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  return 91;
}

uint64_t sub_10110E9A0(__int16 a1)
{
  if (a1)
  {
    if ((a1 & 2) != 0)
    {
      uint64_t v1 = 3;
      if ((a1 & 4) != 0) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v1 = 1;
      if ((a1 & 4) != 0) {
        goto LABEL_4;
      }
    }
  }
  else
  {
    if ((a1 & 2) == 0)
    {
      uint64_t v1 = 0;
      if ((a1 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    uint64_t v1 = 2;
    if ((a1 & 4) != 0) {
LABEL_4:
    }
      uint64_t v1 = v1 | 4;
  }
LABEL_5:
  if ((a1 & 8) != 0)
  {
    uint64_t v1 = v1 | 8;
    if ((a1 & 0x200) == 0)
    {
LABEL_7:
      if ((a1 & 0x400) == 0) {
        goto LABEL_8;
      }
LABEL_16:
      uint64_t v1 = v1 | 0x20;
      if ((a1 & 0x1000) == 0) {
        return v1;
      }
      return v1 | 0x40;
    }
  }
  else if ((a1 & 0x200) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v1 = v1 | 0x10;
  if ((a1 & 0x400) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((a1 & 0x1000) != 0) {
    return v1 | 0x40;
  }
  return v1;
}

uint64_t sub_10110EA14(__int16 a1)
{
  if (a1)
  {
    if ((a1 & 2) != 0)
    {
      uint64_t v1 = 3;
      if ((a1 & 4) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v1 = 1;
      if ((a1 & 4) == 0)
      {
        if ((a1 & 8) == 0) {
          goto LABEL_9;
        }
        goto LABEL_32;
      }
    }
    goto LABEL_21;
  }
  if ((a1 & 2) != 0)
  {
    uint64_t v1 = 2;
    if ((a1 & 4) == 0)
    {
LABEL_22:
      if ((a1 & 8) == 0)
      {
        if ((a1 & 0x10) != 0) {
          goto LABEL_33;
        }
        goto LABEL_24;
      }
LABEL_32:
      uint64_t v1 = v1 | 8;
      if ((a1 & 0x10) != 0)
      {
LABEL_33:
        uint64_t v1 = v1 | 0x10;
        if ((a1 & 0x20) != 0)
        {
LABEL_34:
          uint64_t v1 = v1 | 0x20;
          if ((a1 & 0x40) != 0)
          {
LABEL_35:
            uint64_t v1 = v1 | 0x40;
            if ((a1 & 0x80) != 0)
            {
LABEL_36:
              uint64_t v1 = v1 | 0x80;
              if ((a1 & 0x100) != 0)
              {
LABEL_37:
                uint64_t v1 = v1 | 0x100;
                if ((a1 & 0x400) != 0) {
                  goto LABEL_38;
                }
LABEL_29:
                if ((a1 & 0x800) != 0) {
                  goto LABEL_39;
                }
                goto LABEL_30;
              }
LABEL_28:
              if ((a1 & 0x400) != 0) {
                goto LABEL_38;
              }
              goto LABEL_29;
            }
LABEL_27:
            if ((a1 & 0x100) != 0) {
              goto LABEL_37;
            }
            goto LABEL_28;
          }
LABEL_26:
          if ((a1 & 0x80) != 0) {
            goto LABEL_36;
          }
          goto LABEL_27;
        }
LABEL_25:
        if ((a1 & 0x40) != 0) {
          goto LABEL_35;
        }
        goto LABEL_26;
      }
LABEL_24:
      if ((a1 & 0x20) != 0) {
        goto LABEL_34;
      }
      goto LABEL_25;
    }
LABEL_21:
    uint64_t v1 = v1 | 4;
    goto LABEL_22;
  }
  uint64_t v1 = 0;
  if ((a1 & 4) != 0) {
    goto LABEL_21;
  }
  if ((a1 & 8) != 0) {
    goto LABEL_32;
  }
LABEL_9:
  if ((a1 & 0x10) != 0) {
    goto LABEL_33;
  }
  if ((a1 & 0x20) != 0) {
    goto LABEL_34;
  }
  if ((a1 & 0x40) != 0) {
    goto LABEL_35;
  }
  if ((a1 & 0x80) != 0) {
    goto LABEL_36;
  }
  if ((a1 & 0x100) != 0) {
    goto LABEL_37;
  }
  if ((a1 & 0x400) == 0)
  {
    if ((a1 & 0x800) == 0)
    {
      if ((a1 & 0x200) == 0) {
        goto LABEL_42;
      }
LABEL_41:
      uint64_t v1 = v1 | 0x200;
      goto LABEL_42;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t v1 = v1 | 0x400;
  if ((a1 & 0x800) != 0)
  {
LABEL_39:
    uint64_t v1 = v1 | 0x800;
    if ((a1 & 0x200) == 0) {
      goto LABEL_42;
    }
LABEL_40:
    if ((v1 & 0x200) != 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
LABEL_30:
  if ((a1 & 0x200) != 0) {
    goto LABEL_40;
  }
LABEL_42:
  if ((a1 & 0x1000) != 0) {
    return v1 | 0x1000;
  }
  return v1;
}

void sub_10110EAF8()
{
  dword_10170F2F8 = 0x3FFF;
}

_DWORD *sub_10110EBC4@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10110EBD0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10110EC30()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int sub_10110EC80()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10110ECC8()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10110ECF4()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10110ED38()
{
  return sub_10110E1B4(*v0);
}

_DWORD *sub_10110ED40@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_10110ED54@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_10110ED68@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10110ED7C(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_10110EDAC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_10110EDD8@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_10110EDFC(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_10110EE10(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_10110EE24(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_10110EE38@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10110EE4C(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_10110EE60(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_10110EE74(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_10110EE88()
{
  return *v0 == 0;
}

_DWORD *sub_10110EE98(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

BOOL sub_10110EEAC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10110EEC0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_10000B410(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_10110EF00(int a1)
{
  uint64_t v2 = type metadata accessor for Bit();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  int64_t v8 = (char *)&v31 - v7;
  int v50 = a1;
  sub_100060568();
  uint64_t v9 = FixedWidthInteger.data.getter();
  unint64_t v11 = v10;
  __int16 v12 = sub_10115B26C(v9, v10);
  sub_10001CFB8(v9, v11);
  if ((v12 & 0x100) != 0) {
    return 0;
  }
  LOBYTE(v50) = v12;
  sub_10006145C();
  uint64_t result = FixedWidthInteger.bits()();
  uint64_t v43 = result;
  if (!*(void *)(result + 16))
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v14 = v43;
  unint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
  unint64_t v45 = v43 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  Swift::String v48 = v15;
  ((void (*)(char *))v15)(v8);
  unint64_t v16 = *(void (**)(void))(v3 + 104);
  unsigned int v47 = enum case for Bit.one(_:);
  uint64_t v42 = v3 + 104;
  int64_t v46 = (void (*)(char *, void, uint64_t))v16;
  v16(v6);
  sub_1000D0E58();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v17 = v50;
  int v41 = v49;
  unint64_t v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v8, v2);
  if (*(void *)(v14 + 16) < 2uLL)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  int v40 = v17;
  uint64_t v44 = *(void *)(v3 + 72);
  v48(v8, v45 + v44, v2);
  v46(v6, v47, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v19 = v50;
  int v39 = v49;
  v18(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v8, v2);
  uint64_t v20 = v43;
  if (*(void *)(v43 + 16) < 3uLL)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int v38 = v19;
  v48(v8, v45 + 2 * v44, v2);
  v46(v6, v47, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v21 = v50;
  int v37 = v49;
  v18(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v8, v2);
  if (*(void *)(v20 + 16) < 4uLL)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int v36 = v21;
  v48(v8, v45 + 3 * v44, v2);
  v46(v6, v47, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v22 = v50;
  int v35 = v49;
  v18(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v8, v2);
  if (*(void *)(v20 + 16) < 5uLL)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int v34 = v22;
  v48(v8, v45 + 4 * v44, v2);
  v46(v6, v47, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v23 = v50;
  int v33 = v49;
  v18(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v8, v2);
  if (*(void *)(v20 + 16) < 6uLL)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  int v32 = v23;
  v48(v8, v45 + 5 * v44, v2);
  v46(v6, v47, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v24 = v50;
  uint64_t v25 = v20;
  int v26 = v49;
  v18(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v8, v2);
  if (*(void *)(v25 + 16) < 7uLL)
  {
LABEL_31:
    __break(1u);
    return result;
  }
  unsigned int v27 = v40 == v41;
  if (v38 == v39) {
    v27 |= 2u;
  }
  if (v36 == v37) {
    v27 |= 4u;
  }
  if (v34 == v35) {
    v27 |= 8u;
  }
  if (v32 == v33) {
    v27 |= 0x200u;
  }
  if (v24 == v26) {
    unsigned int v28 = v27 | 0x400;
  }
  else {
    unsigned int v28 = v27;
  }
  v48(v8, v45 + 6 * v44, v2);
  swift_bridgeObjectRelease();
  v46(v6, v47, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v29 = v50;
  int v30 = v49;
  v18(v6, v2);
  v18(v8, v2);
  if (v29 == v30) {
    return v28 | 0x1000;
  }
  else {
    return v28;
  }
}

uint64_t sub_10110F5B4(int a1)
{
  uint64_t v2 = type metadata accessor for Bit();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  int64_t v8 = (char *)&v31 - v7;
  int v50 = a1;
  sub_100060568();
  uint64_t v9 = FixedWidthInteger.data.getter();
  unint64_t v11 = v10;
  __int16 v12 = sub_10115B26C(v9, v10);
  sub_10001CFB8(v9, v11);
  uint64_t result = 0;
  if ((v12 & 0x100) != 0) {
    return result;
  }
  LOBYTE(v50) = v12;
  sub_10006145C();
  uint64_t result = FixedWidthInteger.bits()();
  uint64_t v43 = result;
  if (!*(void *)(result + 16))
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v14 = v43;
  unint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
  unint64_t v45 = v43 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  Swift::String v48 = v15;
  ((void (*)(char *))v15)(v8);
  unint64_t v16 = *(void (**)(void))(v3 + 104);
  unsigned int v47 = enum case for Bit.one(_:);
  uint64_t v42 = v3 + 104;
  int64_t v46 = (void (*)(char *, void, uint64_t))v16;
  v16(v6);
  sub_1000D0E58();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v17 = v50;
  int v41 = v49;
  unint64_t v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v8, v2);
  if (*(void *)(v14 + 16) < 2uLL)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int v40 = v17;
  uint64_t v44 = *(void *)(v3 + 72);
  v48(v8, v45 + v44, v2);
  v46(v6, v47, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v19 = v50;
  int v39 = v49;
  v18(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v8, v2);
  uint64_t v20 = v43;
  if (*(void *)(v43 + 16) < 3uLL)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  int v38 = v19;
  v48(v8, v45 + 2 * v44, v2);
  v46(v6, v47, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v21 = v50;
  int v37 = v49;
  v18(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v8, v2);
  if (*(void *)(v20 + 16) < 4uLL)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int v36 = v21;
  v48(v8, v45 + 3 * v44, v2);
  v46(v6, v47, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v22 = v50;
  int v35 = v49;
  v18(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v8, v2);
  if (*(void *)(v20 + 16) < 5uLL)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int v34 = v22;
  v48(v8, v45 + 4 * v44, v2);
  v46(v6, v47, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v23 = v50;
  int v33 = v49;
  v18(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v8, v2);
  if (*(void *)(v20 + 16) < 6uLL)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int v32 = v23;
  v48(v8, v45 + 5 * v44, v2);
  v46(v6, v47, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v24 = v50;
  uint64_t v25 = v20;
  int v26 = v49;
  v18(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v8, v2);
  if (*(void *)(v25 + 16) < 7uLL)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  uint64_t v27 = v40 == v41;
  if (v38 == v39) {
    v27 |= 2uLL;
  }
  if (v36 == v37) {
    v27 |= 4uLL;
  }
  if (v34 == v35) {
    v27 |= 8uLL;
  }
  if (v32 == v33) {
    v27 |= 0x200uLL;
  }
  if (v24 == v26) {
    uint64_t v28 = v27 | 0x400;
  }
  else {
    uint64_t v28 = v27;
  }
  v48(v8, v45 + 6 * v44, v2);
  swift_bridgeObjectRelease();
  v46(v6, v47, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v29 = v50;
  int v30 = v49;
  v18(v6, v2);
  v18(v8, v2);
  if (v29 == v30) {
    return v28 | 0x1000;
  }
  else {
    return v28;
  }
}

ValueMetadata *type metadata accessor for AccessoryCapabilities()
{
  return &type metadata for AccessoryCapabilities;
}

unint64_t sub_10110FC78()
{
  unint64_t result = qword_10166BB28;
  if (!qword_10166BB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BB28);
  }
  return result;
}

unint64_t sub_10110FCD0()
{
  unint64_t result = qword_10166BB30;
  if (!qword_10166BB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BB30);
  }
  return result;
}

unint64_t sub_10110FD28()
{
  unint64_t result = qword_10166BB38;
  if (!qword_10166BB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BB38);
  }
  return result;
}

unint64_t sub_10110FD80()
{
  unint64_t result = qword_10166BB40;
  if (!qword_10166BB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BB40);
  }
  return result;
}

ValueMetadata *type metadata accessor for StableIdentifier.SerialNumber()
{
  return &type metadata for StableIdentifier.SerialNumber;
}

ValueMetadata *type metadata accessor for StableIdentifier.ECID()
{
  return &type metadata for StableIdentifier.ECID;
}

ValueMetadata *type metadata accessor for StableIdentifier.ChipId()
{
  return &type metadata for StableIdentifier.ChipId;
}

void *sub_10110FE14(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (void *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        uint64_t v8 = a2[3];
        a1[2] = a2[2];
        a1[3] = v8;
        uint64_t v9 = a2[4];
        uint64_t v10 = a2[5];
        a1[4] = v9;
        a1[5] = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v11 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        __int16 v12 = (int *)sub_10000588C(&qword_1016555E0);
        uint64_t v13 = v12[12];
        uint64_t v14 = (void *)((char *)a1 + v13);
        unint64_t v15 = (void *)((char *)a2 + v13);
        uint64_t v17 = *v15;
        uint64_t v16 = v15[1];
        *uint64_t v14 = v17;
        v14[1] = v16;
        uint64_t v18 = v12[16];
        int v19 = (void *)((char *)a1 + v18);
        uint64_t v20 = (void *)((char *)a2 + v18);
        uint64_t v21 = v20[1];
        *int v19 = *v20;
        v19[1] = v21;
        uint64_t v22 = v12[20];
        int v23 = (void *)((char *)a1 + v22);
        int v24 = (void *)((char *)a2 + v22);
        uint64_t v25 = v24[1];
        *int v23 = *v24;
        v23[1] = v25;
        *(_WORD *)((char *)a1 + v12[24]) = *(_WORD *)((char *)a2 + v12[24]);
        uint64_t v26 = v12[28];
        uint64_t v27 = (void *)((char *)a1 + v26);
        uint64_t v28 = (void *)((char *)a2 + v26);
        uint64_t v29 = v28[1];
        *uint64_t v27 = *v28;
        v27[1] = v29;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v30 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v30 - 8) + 16))(a1, a2, v30);
        uint64_t v31 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        uint64_t v32 = v31[12];
        int v33 = (void *)((char *)a1 + v32);
        int v34 = (void *)((char *)a2 + v32);
        uint64_t v36 = *v34;
        uint64_t v35 = v34[1];
        *int v33 = v36;
        v33[1] = v35;
        uint64_t v37 = v31[16];
        int v38 = (void *)((char *)a1 + v37);
        int v39 = (void *)((char *)a2 + v37);
        uint64_t v40 = v39[1];
        *int v38 = *v39;
        v38[1] = v40;
        uint64_t v41 = v31[20];
        uint64_t v42 = (void *)((char *)a1 + v41);
        uint64_t v43 = (void *)((char *)a2 + v41);
        uint64_t v44 = v43[1];
        *uint64_t v42 = *v43;
        v42[1] = v44;
        *((unsigned char *)a1 + v31[24]) = *((unsigned char *)a2 + v31[24]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v45 = a2[1];
        *a1 = *a2;
        a1[1] = v45;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1011100E4(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 4:
      goto LABEL_5;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2:
      uint64_t v3 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3:
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *sub_10111027C(void *a1, void *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      uint64_t v5 = a2[3];
      a1[2] = a2[2];
      a1[3] = v5;
      uint64_t v6 = a2[4];
      uint64_t v7 = a2[5];
      a1[4] = v6;
      a1[5] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 2u:
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = (int *)sub_10000588C(&qword_1016555E0);
      uint64_t v10 = v9[12];
      uint64_t v11 = (void *)((char *)a1 + v10);
      __int16 v12 = (void *)((char *)a2 + v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      *uint64_t v11 = v14;
      v11[1] = v13;
      uint64_t v15 = v9[16];
      uint64_t v16 = (void *)((char *)a1 + v15);
      uint64_t v17 = (void *)((char *)a2 + v15);
      uint64_t v18 = v17[1];
      *uint64_t v16 = *v17;
      v16[1] = v18;
      uint64_t v19 = v9[20];
      uint64_t v20 = (void *)((char *)a1 + v19);
      uint64_t v21 = (void *)((char *)a2 + v19);
      uint64_t v22 = v21[1];
      *uint64_t v20 = *v21;
      v20[1] = v22;
      *(_WORD *)((char *)a1 + v9[24]) = *(_WORD *)((char *)a2 + v9[24]);
      uint64_t v23 = v9[28];
      int v24 = (void *)((char *)a1 + v23);
      uint64_t v25 = (void *)((char *)a2 + v23);
      uint64_t v26 = v25[1];
      *int v24 = *v25;
      v24[1] = v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 3u:
      uint64_t v27 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v27 - 8) + 16))(a1, a2, v27);
      uint64_t v28 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
      uint64_t v29 = v28[12];
      uint64_t v30 = (void *)((char *)a1 + v29);
      uint64_t v31 = (void *)((char *)a2 + v29);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      *uint64_t v30 = v33;
      v30[1] = v32;
      uint64_t v34 = v28[16];
      uint64_t v35 = (void *)((char *)a1 + v34);
      uint64_t v36 = (void *)((char *)a2 + v34);
      uint64_t v37 = v36[1];
      *uint64_t v35 = *v36;
      v35[1] = v37;
      uint64_t v38 = v28[20];
      int v39 = (void *)((char *)a1 + v38);
      uint64_t v40 = (void *)((char *)a2 + v38);
      uint64_t v41 = v40[1];
      *int v39 = *v40;
      v39[1] = v41;
      *((unsigned char *)a1 + v28[24]) = *((unsigned char *)a2 + v28[24]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v42 = a2[1];
      *a1 = *a2;
      a1[1] = v42;
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_1011104FC(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_1002C0934((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v4 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        uint64_t v5 = (int *)sub_10000588C(&qword_1016555E0);
        uint64_t v6 = v5[12];
        uint64_t v7 = (void *)((char *)a1 + v6);
        uint64_t v8 = (void *)((char *)a2 + v6);
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        uint64_t v9 = v5[16];
        uint64_t v10 = (void *)((char *)a1 + v9);
        uint64_t v11 = (void *)((char *)a2 + v9);
        void *v10 = *v11;
        v10[1] = v11[1];
        uint64_t v12 = v5[20];
        uint64_t v13 = (void *)((char *)a1 + v12);
        uint64_t v14 = (void *)((char *)a2 + v12);
        *uint64_t v13 = *v14;
        v13[1] = v14[1];
        *(_WORD *)((char *)a1 + v5[24]) = *(_WORD *)((char *)a2 + v5[24]);
        uint64_t v15 = v5[28];
        uint64_t v16 = (void *)((char *)a1 + v15);
        uint64_t v17 = (void *)((char *)a2 + v15);
        *uint64_t v16 = *v17;
        v16[1] = v17[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v18 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        uint64_t v19 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        uint64_t v20 = v19[12];
        uint64_t v21 = (void *)((char *)a1 + v20);
        uint64_t v22 = (void *)((char *)a2 + v20);
        *uint64_t v21 = *v22;
        v21[1] = v22[1];
        uint64_t v23 = v19[16];
        int v24 = (void *)((char *)a1 + v23);
        uint64_t v25 = (void *)((char *)a2 + v23);
        *int v24 = *v25;
        v24[1] = v25[1];
        uint64_t v26 = v19[20];
        uint64_t v27 = (void *)((char *)a1 + v26);
        uint64_t v28 = (void *)((char *)a2 + v26);
        *uint64_t v27 = *v28;
        v27[1] = v28[1];
        *((unsigned char *)a1 + v19[24]) = *((unsigned char *)a2 + v19[24]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for StableIdentifier()
{
  uint64_t result = qword_10166BBB8;
  if (!qword_10166BBB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unsigned char *sub_101110838(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    uint64_t v10 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
    *(_OWORD *)&a1[v10[12]] = *(_OWORD *)&a2[v10[12]];
    *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
    *(_OWORD *)&a1[v10[20]] = *(_OWORD *)&a2[v10[20]];
    a1[v10[24]] = a2[v10[24]];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 2)
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    uint64_t v8 = (int *)sub_10000588C(&qword_1016555E0);
    *(_OWORD *)&a1[v8[12]] = *(_OWORD *)&a2[v8[12]];
    *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
    *(_OWORD *)&a1[v8[20]] = *(_OWORD *)&a2[v8[20]];
    *(_WORD *)&a1[v8[24]] = *(_WORD *)&a2[v8[24]];
    *(_OWORD *)&a1[v8[28]] = *(_OWORD *)&a2[v8[28]];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

unsigned char *sub_1011109CC(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1002C0934((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      uint64_t v10 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
      *(_OWORD *)&a1[v10[12]] = *(_OWORD *)&a2[v10[12]];
      *(_OWORD *)&a1[v10[16]] = *(_OWORD *)&a2[v10[16]];
      *(_OWORD *)&a1[v10[20]] = *(_OWORD *)&a2[v10[20]];
      a1[v10[24]] = a2[v10[24]];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = (int *)sub_10000588C(&qword_1016555E0);
      *(_OWORD *)&a1[v8[12]] = *(_OWORD *)&a2[v8[12]];
      *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
      *(_OWORD *)&a1[v8[20]] = *(_OWORD *)&a2[v8[20]];
      *(_WORD *)&a1[v8[24]] = *(_WORD *)&a2[v8[24]];
      *(_OWORD *)&a1[v8[28]] = *(_OWORD *)&a2[v8[28]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_101110B70()
{
  uint64_t v11 = &unk_101390198;
  uint64_t v12 = &unk_1013901B0;
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = *(void *)(result - 8) + 64;
    uint64_t v9 = &unk_1013901C8;
    swift_getTupleTypeLayout();
    uint64_t v13 = &v10;
    uint64_t v4 = v2;
    uint64_t v5 = &unk_101390198;
    uint64_t v6 = &unk_101390198;
    uint64_t v7 = &unk_101390198;
    uint64_t v8 = (char *)&value witness table for Builtin.Int8 + 64;
    swift_getTupleTypeLayout();
    uint64_t v14 = &v3;
    uint64_t v15 = &unk_101390198;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_101110C7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v97 - v7;
  uint64_t v9 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100091AD4(v1, (uint64_t)v11);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      long long v18 = *(_OWORD *)v11;
      long long v102 = *((_OWORD *)v11 + 1);
      long long v103 = v18;
      uint64_t v20 = *((void *)v11 + 4);
      uint64_t v19 = *((void *)v11 + 5);
      sub_10000588C(&qword_1016552B0);
      uint64_t v21 = swift_allocObject();
      long long v22 = v103;
      *(_OWORD *)(v21 + 16) = xmmword_101347500;
      *(_OWORD *)(v21 + 32) = v22;
      *(_OWORD *)(v21 + 48) = v102;
      *(void *)(v21 + 64) = v20;
      *(void *)(v21 + 72) = v19;
      uint64_t v105 = v21;
      sub_10000588C(&qword_101654A30);
      sub_100090B54();
      uint64_t v23 = BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      return v23;
    case 2u:
      int v24 = (int *)sub_10000588C(&qword_1016555E0);
      uint64_t v25 = &v11[v24[12]];
      uint64_t v26 = v3;
      uint64_t v27 = *(void *)v25;
      unint64_t v28 = *((void *)v25 + 1);
      uint64_t v29 = &v11[v24[16]];
      uint64_t v30 = *(void *)v29;
      unint64_t v31 = *((void *)v29 + 1);
      uint64_t v32 = &v11[v24[20]];
      uint64_t v34 = *(void *)v32;
      uint64_t v33 = *((void *)v32 + 1);
      uint64_t v100 = v34;
      *(void *)&long long v101 = v33;
      uint64_t v35 = &v11[v24[24]];
      char v36 = *v35;
      char v37 = v35[1];
      uint64_t v38 = &v11[v24[28]];
      uint64_t v39 = v2;
      uint64_t v41 = *(void *)v38;
      unint64_t v40 = *((void *)v38 + 1);
      *(void *)&long long v102 = v26;
      uint64_t v42 = *(void (**)(char *, char *))(v26 + 32);
      *(void *)&long long v103 = v39;
      v42(v8, v11);
      if (v28) {
        uint64_t v43 = v27;
      }
      else {
        uint64_t v43 = 0;
      }
      if (v28) {
        unint64_t v44 = v28;
      }
      else {
        unint64_t v44 = 0xE000000000000000;
      }
      unint64_t v98 = v44;
      *(void *)&long long v99 = v43;
      if (v31) {
        uint64_t v45 = v30;
      }
      else {
        uint64_t v45 = 0;
      }
      uint64_t v97 = v45;
      if (v31) {
        unint64_t v46 = v31;
      }
      else {
        unint64_t v46 = 0xE000000000000000;
      }
      if (v40)
      {
        unint64_t v47 = v40;
      }
      else
      {
        uint64_t v41 = 0;
        unint64_t v47 = 0xE000000000000000;
      }
      if (v37)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v48 = 0;
        unint64_t v49 = 0xE000000000000000;
        if (v28)
        {
LABEL_21:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v51 = v100;
          uint64_t v50 = v101;
          goto LABEL_31;
        }
      }
      else
      {
        LOBYTE(v105) = v36;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v49 = v72;
        if (v28) {
          goto LABEL_21;
        }
      }
      swift_bridgeObjectRelease();
      if (v31) {
        char v73 = 0;
      }
      else {
        char v73 = v37;
      }
      uint64_t v51 = v100;
      uint64_t v50 = v101;
      if (v73)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000588C(&qword_1016552B0);
        uint64_t v74 = swift_allocObject();
        long long v99 = xmmword_101347BA0;
        *(_OWORD *)(v74 + 16) = xmmword_101347BA0;
        *(void *)(v74 + 32) = UUID.uuidString.getter();
        *(void *)(v74 + 40) = v75;
        *(void *)(v74 + 48) = v51;
        *(void *)(v74 + 56) = v50;
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v76 = swift_allocObject();
        *(_OWORD *)(v76 + 16) = v99;
        *(void *)(v76 + 56) = &type metadata for String;
        unint64_t v77 = sub_10000B4CC();
        *(void *)(v76 + 64) = v77;
        *(void *)(v76 + 32) = 3095137;
        *(void *)(v76 + 40) = 0xE300000000000000;
        uint64_t v105 = v74;
        sub_10000588C(&qword_101654A30);
        sub_100090B54();
        uint64_t v78 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v80 = v79;
        swift_bridgeObjectRelease();
        *(void *)(v76 + 96) = &type metadata for String;
        *(void *)(v76 + 104) = v77;
        *(void *)(v76 + 72) = v78;
        *(void *)(v76 + 80) = v80;
        goto LABEL_32;
      }
LABEL_31:
      sub_10000588C(&qword_1016552B0);
      uint64_t v81 = swift_allocObject();
      *(_OWORD *)(v81 + 16) = xmmword_10134CDE0;
      unint64_t v82 = v98;
      *(void *)(v81 + 32) = v99;
      *(void *)(v81 + 40) = v82;
      *(void *)(v81 + 48) = v97;
      *(void *)(v81 + 56) = v46;
      *(void *)(v81 + 64) = v51;
      *(void *)(v81 + 72) = v50;
      *(void *)(v81 + 80) = v48;
      *(void *)(v81 + 88) = v49;
      *(void *)(v81 + 96) = v41;
      *(void *)(v81 + 104) = v47;
      uint64_t v105 = 46786;
      unint64_t v106 = 0xA200000000000000;
      uint64_t v104 = v81;
      sub_10000588C(&qword_101654A30);
      sub_100090B54();
      uint64_t v83 = BidirectionalCollection<>.joined(separator:)();
      BOOL v85 = v84;
      swift_bridgeObjectRelease();
      v86._uint64_t countAndFlagsBits = v83;
      v86._object = v85;
      String.append(_:)(v86);
      swift_bridgeObjectRelease();
      uint64_t v87 = v105;
      unint64_t v88 = v106;
      uint64_t v89 = swift_allocObject();
      long long v101 = xmmword_101347BA0;
      *(_OWORD *)(v89 + 16) = xmmword_101347BA0;
      *(void *)(v89 + 32) = UUID.uuidString.getter();
      *(void *)(v89 + 40) = v90;
      *(void *)(v89 + 48) = v87;
      *(void *)(v89 + 56) = v88;
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v91 = swift_allocObject();
      *(_OWORD *)(v91 + 16) = v101;
      *(void *)(v91 + 56) = &type metadata for String;
      unint64_t v92 = sub_10000B4CC();
      *(void *)(v91 + 64) = v92;
      *(void *)(v91 + 32) = 3095137;
      *(void *)(v91 + 40) = 0xE300000000000000;
      uint64_t v105 = v89;
      uint64_t v93 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v95 = v94;
      swift_bridgeObjectRelease();
      *(void *)(v91 + 96) = &type metadata for String;
      *(void *)(v91 + 104) = v92;
      *(void *)(v91 + 72) = v93;
      *(void *)(v91 + 80) = v95;
LABEL_32:
      uint64_t v23 = String.init(format:_:)();
      (*(void (**)(char *, void))(v102 + 8))(v8, v103);
      return v23;
    case 3u:
      uint64_t v52 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
      uint64_t v53 = &v11[v52[12]];
      uint64_t v54 = v2;
      *(void *)&long long v103 = v2;
      uint64_t v55 = *((void *)v53 + 1);
      *(void *)&long long v102 = *(void *)v53;
      uint64_t v56 = &v11[v52[16]];
      uint64_t v57 = v3;
      uint64_t v58 = *(void *)v56;
      uint64_t v59 = *((void *)v56 + 1);
      uint64_t v60 = &v11[v52[20]];
      uint64_t v61 = *(void *)v60;
      uint64_t v62 = *((void *)v60 + 1);
      char v63 = v11[v52[24]];
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v6, v11, v54);
      sub_10000588C(&qword_1016552B0);
      uint64_t v64 = swift_allocObject();
      *(_OWORD *)(v64 + 16) = xmmword_10134CDE0;
      *(void *)(v64 + 32) = UUID.uuidString.getter();
      *(void *)(v64 + 40) = v65;
      *(void *)(v64 + 48) = v102;
      *(void *)(v64 + 56) = v55;
      *(void *)(v64 + 64) = v58;
      *(void *)(v64 + 72) = v59;
      *(void *)(v64 + 80) = v61;
      *(void *)(v64 + 88) = v62;
      LOBYTE(v105) = v63;
      *(void *)(v64 + 96) = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v64 + 104) = v66;
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v67 = swift_allocObject();
      *(_OWORD *)(v67 + 16) = xmmword_101347BA0;
      *(void *)(v67 + 56) = &type metadata for String;
      unint64_t v68 = sub_10000B4CC();
      *(void *)(v67 + 64) = v68;
      *(void *)(v67 + 32) = 0x2F3A656C6568;
      *(void *)(v67 + 40) = 0xE600000000000000;
      uint64_t v105 = v64;
      sub_10000588C(&qword_101654A30);
      sub_100090B54();
      uint64_t v69 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v71 = v70;
      swift_bridgeObjectRelease();
      *(void *)(v67 + 96) = &type metadata for String;
      *(void *)(v67 + 104) = v68;
      *(void *)(v67 + 72) = v69;
      *(void *)(v67 + 80) = v71;
      uint64_t v23 = String.init(format:_:)();
      (*(void (**)(char *, void))(v57 + 8))(v6, v103);
      return v23;
    case 4u:
      uint64_t v13 = *(void *)v11;
      uint64_t v12 = *((void *)v11 + 1);
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_101347BA0;
      *(void *)(v14 + 56) = &type metadata for String;
      unint64_t v15 = sub_10000B4CC();
      uint64_t v16 = 792356205;
      unint64_t v17 = 0xE400000000000000;
      goto LABEL_24;
    default:
      uint64_t v13 = *(void *)v11;
      uint64_t v12 = *((void *)v11 + 1);
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_101347BA0;
      *(void *)(v14 + 56) = &type metadata for String;
      unint64_t v15 = sub_10000B4CC();
      uint64_t v16 = 3095148;
      unint64_t v17 = 0xE300000000000000;
LABEL_24:
      *(void *)(v14 + 32) = v16;
      *(void *)(v14 + 40) = v17;
      *(void *)(v14 + 96) = &type metadata for String;
      *(void *)(v14 + 104) = v15;
      *(void *)(v14 + 64) = v15;
      *(void *)(v14 + 72) = v13;
      *(void *)(v14 + 80) = v12;
      return String.init(format:_:)();
  }
}

uint64_t sub_1011114C8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v17 = 0;
    int v8 = 1;
    return v17 | (v8 << 8);
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      unsigned int v7 = sub_10048C9CC(v6, v4, 10);
      int v8 = (v7 >> 8) & 1;
      goto LABEL_38;
    }
    v21[0] = a1;
    v21[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    char v9 = a1;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          LOBYTE(v7) = BYTE1(a1) - 48;
          if ((BYTE1(a1) - 48) <= 9u)
          {
            uint64_t v13 = v3 - 2;
            if (v13)
            {
              uint64_t v14 = (unsigned __int8 *)v21 + 2;
              while (1)
              {
                unsigned int v15 = *v14 - 48;
                if (v15 > 9) {
                  goto LABEL_35;
                }
                if (((10 * v7) & 0xF00) != 0) {
                  goto LABEL_35;
                }
                unsigned int v7 = (10 * v7) + v15;
                if ((v7 >> 8)) {
                  goto LABEL_35;
                }
                int v8 = 0;
                ++v14;
                if (!--v13) {
                  goto LABEL_38;
                }
              }
            }
            goto LABEL_37;
          }
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          LOBYTE(v7) = a1 - 48;
          if ((a1 - 48) <= 9u)
          {
            uint64_t v16 = v3 - 1;
            if (v16)
            {
              uint64_t v19 = (unsigned __int8 *)v21 + 1;
              while (1)
              {
                unsigned int v20 = *v19 - 48;
                if (v20 > 9) {
                  goto LABEL_35;
                }
                if (((10 * v7) & 0xF00) != 0) {
                  goto LABEL_35;
                }
                unsigned int v7 = (10 * v7) + v20;
                if ((v7 >> 8)) {
                  goto LABEL_35;
                }
                int v8 = 0;
                ++v19;
                if (!--v16) {
                  goto LABEL_38;
                }
              }
            }
            goto LABEL_37;
          }
        }
        goto LABEL_35;
      }
      if (v3)
      {
        if (v3 != 1 && (BYTE1(a1) - 48) <= 9u)
        {
          char v9 = 0;
          unsigned int v7 = -(BYTE1(a1) - 48);
          if ((v7 & 0xFFFFFF00) == 0)
          {
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              uint64_t v11 = (unsigned __int8 *)v21 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_35;
                }
                if (((10 * v7) & 0xF00) != 0) {
                  goto LABEL_35;
                }
                unsigned int v7 = (10 * v7) - v12;
                if ((v7 & 0xFFFFFF00) != 0) {
                  goto LABEL_35;
                }
                int v8 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_38;
                }
              }
            }
LABEL_37:
            int v8 = 0;
            goto LABEL_38;
          }
LABEL_54:
          int v8 = 1;
          LOBYTE(v7) = v9;
          goto LABEL_38;
        }
LABEL_35:
        LOBYTE(v7) = 0;
        int v8 = 1;
LABEL_38:
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_54;
  }
  unsigned int v7 = sub_10048CA2C(a1, a2, 10);
  swift_bridgeObjectRelease();
  int v8 = (v7 >> 8) & 1;
LABEL_39:
  if (v8) {
    unsigned __int8 v17 = 0;
  }
  else {
    unsigned __int8 v17 = v7;
  }
  return v17 | (v8 << 8);
}

uint64_t sub_10111173C(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)sub_10048C9FC(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        unsigned int v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v17 + v16;
          if (__OFADD__(v17, v16)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              uint64_t v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  goto LABEL_34;
                }
                uint64_t v7 = v13 - v12;
                if (__OFSUB__(v13, v12)) {
                  goto LABEL_34;
                }
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          uint64_t v7 = 0;
          char v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (result - 48);
      uint64_t v18 = v3 - 1;
      if (v18)
      {
        uint64_t v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          unsigned int v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          uint64_t v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v21 + v20;
          if (__OFADD__(v21, v20)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }
LABEL_36:
    char v9 = 0;
    goto LABEL_37;
  }
  uint64_t v7 = sub_10048CBF0(result, a2, 10);
  char v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t sub_10111198C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for StableIdentifier();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  char v8 = (char *)&v16 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  sub_100091AD4(v1, (uint64_t)&v16 - v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  sub_1002C0934((uint64_t)v10);
  sub_100091AD4(v1, (uint64_t)v8);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v12 = 1;
  }
  else
  {
    sub_100091AD4((uint64_t)v8, (uint64_t)v5);
    int v13 = swift_getEnumCaseMultiPayload();
    if (v13 == 3)
    {
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v13 != 2)
      {
        sub_1002C0934((uint64_t)v5);
        uint64_t v12 = 0;
        goto LABEL_9;
      }
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v5, v14);
    uint64_t v12 = 1;
  }
LABEL_9:
  sub_1002C0934((uint64_t)v8);
  return v12;
}

uint64_t sub_101111B94@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v147 = a3;
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  char v8 = &v133[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = &v133[-v10];
  __chkstk_darwin(v9);
  int v13 = &v133[-v12];
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v142 = *(void *)(v14 - 8);
  uint64_t v143 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v140 = &v133[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = &v133[-v18];
  __chkstk_darwin(v17);
  uint64_t v141 = (uint64_t)&v133[-v20];
  v146._uint64_t countAndFlagsBits = a1;
  v146._object = a2;
  uint64_t v144 = 9086;
  unint64_t v145 = 0xE200000000000000;
  sub_1000336D4();
  uint64_t v21 = (void *)StringProtocol.components<A>(separatedBy:)();
  v22._uint64_t countAndFlagsBits = 3095148;
  v22._object = (void *)0xE300000000000000;
  if (String.hasPrefix(_:)(v22))
  {
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = 3095148;
    v23._object = (void *)0xE300000000000000;
    Swift::String v26 = String.deletingPrefix(_:)(v23);
    object = v26._object;
    uint64_t countAndFlagsBits = v26._countAndFlagsBits;
    unint64_t v27 = ((unint64_t)v26._object >> 56) & 0xF;
    if (((uint64_t)v26._object & 0x2000000000000000) == 0) {
      unint64_t v27 = v26._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v27)
    {
LABEL_14:
      uint64_t v34 = v147;
      uint64_t *v147 = countAndFlagsBits;
      v34[1] = (uint64_t)object;
      uint64_t v35 = type metadata accessor for StableIdentifier();
LABEL_15:
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 0, 1, v35);
    }
    goto LABEL_71;
  }
  v28._uint64_t countAndFlagsBits = 3095137;
  v28._object = (void *)0xE300000000000000;
  if (!String.hasPrefix(_:)(v28) || v21[2] < 2uLL)
  {
    v29._uint64_t countAndFlagsBits = 0x2F3A656C6568;
    v29._object = (void *)0xE600000000000000;
    if (!String.hasPrefix(_:)(v29) || v21[2] < 5uLL)
    {
      v30._uint64_t countAndFlagsBits = 792356205;
      v30._object = (void *)0xE400000000000000;
      if (String.hasPrefix(_:)(v30))
      {
        swift_bridgeObjectRelease();
        v31._uint64_t countAndFlagsBits = 792356205;
        v31._object = (void *)0xE400000000000000;
        Swift::String v32 = String.deletingPrefix(_:)(v31);
        object = v32._object;
        uint64_t countAndFlagsBits = v32._countAndFlagsBits;
        unint64_t v33 = ((unint64_t)v32._object >> 56) & 0xF;
        if (((uint64_t)v32._object & 0x2000000000000000) == 0) {
          unint64_t v33 = v32._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        if (v33) {
          goto LABEL_14;
        }
      }
      else if (v21[2] == 3)
      {
        uint64_t v38 = v21[4];
        unint64_t v37 = v21[5];
        uint64_t v39 = HIBYTE(v37) & 0xF;
        if ((v37 & 0x2000000000000000) == 0) {
          uint64_t v39 = v38 & 0xFFFFFFFFFFFFLL;
        }
        if (v39)
        {
          uint64_t v41 = v21[6];
          unint64_t v40 = v21[7];
          uint64_t v42 = HIBYTE(v40) & 0xF;
          if ((v40 & 0x2000000000000000) == 0) {
            uint64_t v42 = v41 & 0xFFFFFFFFFFFFLL;
          }
          if (v42)
          {
            uint64_t v44 = v21[8];
            unint64_t v43 = v21[9];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v45 = HIBYTE(v43) & 0xF;
            if ((v43 & 0x2000000000000000) == 0) {
              uint64_t v45 = v44 & 0xFFFFFFFFFFFFLL;
            }
            if (v45)
            {
              uint64_t v34 = v147;
              uint64_t *v147 = v38;
              v34[1] = v37;
              v34[2] = v41;
              v34[3] = v40;
              v34[4] = v44;
              v34[5] = v43;
              uint64_t v35 = type metadata accessor for StableIdentifier();
              goto LABEL_15;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
        }
      }
      goto LABEL_71;
    }
    swift_bridgeObjectRetain();
    v52._uint64_t countAndFlagsBits = 0x2F3A656C6568;
    v52._object = (void *)0xE600000000000000;
    String.deletingPrefix(_:)(v52);
    swift_bridgeObjectRelease();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v54 = v142;
    uint64_t v53 = v143;
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v142 + 48))(v8, 1, v143) == 1)
    {
      swift_bridgeObjectRelease();
      sub_10001DAB4((uint64_t)v8, &qword_101638CF0);
      goto LABEL_72;
    }
    uint64_t v58 = *(uint64_t (**)(uint64_t *, unsigned char *, uint64_t))(v54 + 32);
    uint64_t v59 = v140;
    uint64_t result = v58((uint64_t *)v140, v8, v53);
    unint64_t v60 = v21[2];
    if (v60 >= 2)
    {
      uint64_t v62 = v21[6];
      unint64_t v61 = v21[7];
      uint64_t v63 = HIBYTE(v61) & 0xF;
      if ((v61 & 0x2000000000000000) == 0) {
        uint64_t v63 = v62 & 0xFFFFFFFFFFFFLL;
      }
      if (v63)
      {
        if (v60 >= 3)
        {
          uint64_t v65 = v21[8];
          unint64_t v64 = v21[9];
          uint64_t v66 = HIBYTE(v64) & 0xF;
          if ((v64 & 0x2000000000000000) == 0) {
            uint64_t v66 = v65 & 0xFFFFFFFFFFFFLL;
          }
          if (!v66)
          {
            long long v102 = *(void (**)(unsigned char *, uint64_t))(v54 + 8);
            swift_bridgeObjectRetain();
            v102(v59, v143);
LABEL_70:
            swift_bridgeObjectRelease();
            goto LABEL_71;
          }
          if (v60 >= 4)
          {
            unint64_t v67 = v21[11];
            uint64_t v68 = HIBYTE(v67) & 0xF;
            if ((v67 & 0x2000000000000000) == 0) {
              uint64_t v68 = v21[10] & 0xFFFFFFFFFFFFLL;
            }
            if (v68)
            {
              unint64_t v139 = v21[10];
              if (v60 >= 5)
              {
                unint64_t v69 = v21[13];
                uint64_t v141 = v21[12];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                __int16 v70 = sub_1011114C8(v141, v69);
                if ((v70 & 0x100) == 0)
                {
                  char v71 = v70;
                  unint64_t v72 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
                  char v73 = v147;
                  id v138 = (uint64_t *)((char *)v147 + v72[12]);
                  uint64_t v137 = (uint64_t *)((char *)v147 + v72[16]);
                  uint64_t v141 = (uint64_t)v147 + v72[20];
                  uint64_t v142 = v72[24];
                  v58(v147, v140, v143);
                  uint64_t v74 = v138;
                  *id v138 = v62;
                  v74[1] = v61;
                  uint64_t v75 = v137;
                  *uint64_t v137 = v65;
                  v75[1] = v64;
                  uint64_t v76 = v141;
                  *(void *)uint64_t v141 = v139;
                  *(void *)(v76 + 8) = v67;
                  *((unsigned char *)v73 + v142) = v71;
                  uint64_t v77 = type metadata accessor for StableIdentifier();
                  swift_storeEnumTagMultiPayload();
                  return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v73, 0, 1, v77);
                }
                (*(void (**)(unsigned char *, uint64_t))(v142 + 8))(v140, v143);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_71;
              }
              goto LABEL_95;
            }
            long long v103 = *(void (**)(unsigned char *, uint64_t))(v142 + 8);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v103(v59, v143);
            swift_bridgeObjectRelease();
            goto LABEL_70;
          }
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
          goto LABEL_96;
        }
LABEL_93:
        __break(1u);
        goto LABEL_94;
      }
      (*(void (**)(unsigned char *, uint64_t))(v54 + 8))(v59, v53);
LABEL_71:
      swift_bridgeObjectRelease();
      goto LABEL_72;
    }
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  swift_bridgeObjectRetain();
  v46._uint64_t countAndFlagsBits = 46786;
  v46._object = (void *)0xA200000000000000;
  Swift::Bool v47 = String.hasPrefix(_:)(v46);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v48 = v21[2];
  if (!v47)
  {
    if (v48)
    {
      swift_bridgeObjectRetain();
      v55._uint64_t countAndFlagsBits = 3095137;
      v55._object = (void *)0xE300000000000000;
      String.deletingPrefix(_:)(v55);
      swift_bridgeObjectRelease();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v57 = v142;
      uint64_t v56 = v143;
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v142 + 48))(v11, 1, v143) == 1)
      {
        swift_bridgeObjectRelease();
        sub_10001DAB4((uint64_t)v11, &qword_101638CF0);
        goto LABEL_72;
      }
      uint64_t v89 = *(void (**)(uint64_t *, unsigned char *, uint64_t))(v57 + 32);
      v89((uint64_t *)v19, v11, v56);
      uint64_t v91 = v21[6];
      unint64_t v90 = v21[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v92 = HIBYTE(v90) & 0xF;
      if ((v90 & 0x2000000000000000) == 0) {
        uint64_t v92 = v91 & 0xFFFFFFFFFFFFLL;
      }
      if (!v92)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t *, uint64_t))(v57 + 8))((uint64_t *)v19, v56);
        goto LABEL_72;
      }
      uint64_t v93 = (int *)sub_10000588C(&qword_1016555E0);
      uint64_t v94 = v56;
      uint64_t v95 = v147;
      uint64_t v96 = (uint64_t *)((char *)v147 + v93[12]);
      uint64_t v97 = (uint64_t *)((char *)v147 + v93[16]);
      uint64_t v98 = v93[20];
      uint64_t v142 = v91;
      long long v99 = (uint64_t *)((char *)v147 + v98);
      uint64_t v141 = v93[24];
      uint64_t v100 = (uint64_t *)((char *)v147 + v93[28]);
      v89(v147, (uint64_t *)v19, v94);
      *uint64_t v96 = 0;
      v96[1] = 0;
      *uint64_t v97 = 0;
      v97[1] = 0;
      *long long v99 = v142;
      v99[1] = v90;
      *(_WORD *)((char *)v95 + v141) = 256;
      uint64_t v101 = type metadata accessor for StableIdentifier();
      void *v100 = 0;
      v100[1] = 0;
      goto LABEL_89;
    }
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  if (!v48)
  {
    __break(1u);
    goto LABEL_91;
  }
  swift_bridgeObjectRetain();
  v49._uint64_t countAndFlagsBits = 3095137;
  v49._object = (void *)0xE300000000000000;
  String.deletingPrefix(_:)(v49);
  swift_bridgeObjectRelease();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v51 = v142;
  uint64_t v50 = v143;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v142 + 48))(v13, 1, v143) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v13, &qword_101638CF0);
LABEL_72:
    uint64_t v104 = type metadata accessor for StableIdentifier();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v147, 1, 1, v104);
  }
  uint64_t v78 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v51 + 32);
  v78((uint64_t *)v141, (uint64_t)v13, v50);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v79._uint64_t countAndFlagsBits = 46786;
  v79._object = (void *)0xA200000000000000;
  Swift::String v80 = String.deletingPrefix(_:)(v79);
  swift_bridgeObjectRelease();
  Swift::String v146 = v80;
  uint64_t v144 = 42946;
  unint64_t v145 = 0xA200000000000000;
  uint64_t v81 = (void *)StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  unint64_t v82 = v81[2];
  if (v82 < 4) {
    goto LABEL_64;
  }
  unint64_t v83 = v81[8];
  unint64_t v84 = v81[9];
  uint64_t v85 = HIBYTE(v84) & 0xF;
  if ((v84 & 0x2000000000000000) == 0) {
    uint64_t v85 = v83 & 0xFFFFFFFFFFFFLL;
  }
  if (!v85)
  {
LABEL_64:
    (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v141, v143);
    goto LABEL_71;
  }
  uint64_t v86 = v81[4];
  unint64_t v87 = v81[5];
  uint64_t v88 = HIBYTE(v87) & 0xF;
  if ((v87 & 0x2000000000000000) == 0) {
    uint64_t v88 = v86 & 0xFFFFFFFFFFFFLL;
  }
  if (v88)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v86 = 0;
    unint64_t v87 = 0;
  }
  unint64_t v106 = v81[6];
  unint64_t v105 = v81[7];
  uint64_t v107 = HIBYTE(v105) & 0xF;
  if ((v105 & 0x2000000000000000) == 0) {
    uint64_t v107 = v106 & 0xFFFFFFFFFFFFLL;
  }
  if (v107)
  {
    uint64_t v137 = (void *)v81[7];
    id v138 = (void *)v106;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v137 = 0;
    id v138 = 0;
  }
  uint64_t v108 = v81[10];
  unint64_t v109 = v81[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_1011114C8(v108, v109);
  int v110 = result;
  unint64_t v139 = v87;
  uint64_t v140 = (unsigned char *)v83;
  uint64_t v142 = v86;
  if (v82 < 5)
  {
    swift_bridgeObjectRelease();
    uint64_t v111 = (int *)sub_10000588C(&qword_1016555E0);
    uint64_t v95 = v147;
    uint64_t v112 = (uint64_t *)((char *)v147 + v111[12]);
    uint64_t v113 = (uint64_t *)((char *)v147 + v111[16]);
    uint64_t v114 = v111[20];
    unint64_t v136 = v84;
    __int16 v115 = v110;
    uint64_t v116 = (uint64_t *)((char *)v147 + v114);
    uint64_t v117 = (char *)v147 + v111[24];
    uint64_t v118 = (uint64_t *)((char *)v147 + v111[28]);
    v78(v147, v141, v143);
    unint64_t v119 = v139;
    void *v112 = v142;
    v112[1] = v119;
    unint64_t v120 = v137;
    *uint64_t v113 = v138;
    v113[1] = v120;
    unint64_t v121 = v136;
    *uint64_t v116 = v140;
    v116[1] = v121;
    *uint64_t v117 = v115;
    v117[1] = HIBYTE(v115) & 1;
    uint64_t v101 = type metadata accessor for StableIdentifier();
    *uint64_t v118 = 0;
    v118[1] = 0;
LABEL_89:
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v95, 0, 1, v101);
  }
  if (v81[2] >= 5uLL)
  {
    unint64_t v122 = v81[12];
    unint64_t v123 = v81[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v124 = HIBYTE(v123) & 0xF;
    if ((v123 & 0x2000000000000000) == 0) {
      uint64_t v124 = v122 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v135 = v78;
    int v134 = v110;
    if (v124)
    {
      unint64_t v136 = v122;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v136 = 0;
      unint64_t v123 = 0;
    }
    uint64_t v125 = (int *)sub_10000588C(&qword_1016555E0);
    uint64_t v95 = v147;
    Swift::Int v126 = (uint64_t *)((char *)v147 + v125[12]);
    Swift::Int v127 = (uint64_t *)((char *)v147 + v125[16]);
    uint64_t v128 = (uint64_t *)((char *)v147 + v125[20]);
    uint64_t v129 = (char *)v147 + v125[24];
    uint64_t v130 = (unint64_t *)((char *)v147 + v125[28]);
    v135(v147, v141, v143);
    unint64_t v131 = v139;
    *Swift::Int v126 = v142;
    v126[1] = v131;
    uint64_t v132 = v137;
    *Swift::Int v127 = v138;
    v127[1] = v132;
    *uint64_t v128 = v140;
    v128[1] = v84;
    BYTE1(v132) = BYTE1(v134);
    *uint64_t v129 = v134;
    v129[1] = BYTE1(v132) & 1;
    *uint64_t v130 = v136;
    v130[1] = v123;
    uint64_t v101 = type metadata accessor for StableIdentifier();
    goto LABEL_89;
  }
LABEL_96:
  __break(1u);
  return result;
}

void sub_101112860(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_1016429D0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (uint64_t *)&v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v2)
  {
    sub_1000BD078((uint64_t)v15, v16);
    uint64_t v8 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v10 = v9;
    sub_101111B94(v8, v10, v7);
    uint64_t v12 = type metadata accessor for StableIdentifier();
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v7, 1, v12) == 1)
    {
      sub_10001DAB4((uint64_t)v7, &qword_1016429D0);
      sub_101113B38();
      swift_allocError();
      *int v13 = v8;
      v13[1] = (uint64_t)v10;
      swift_willThrow();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_100091B68((uint64_t)v7, a2);
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_101112A38()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v26[-v7];
  uint64_t v9 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v9);
  uint64_t v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100091AD4(v1, (uint64_t)v11);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      return swift_bridgeObjectRelease();
    case 2u:
      int v13 = (int *)sub_10000588C(&qword_1016555E0);
      uint64_t v14 = *(void *)&v11[v13[12] + 8];
      uint64_t v15 = (uint64_t *)&v11[v13[16]];
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      uint64_t v30 = *(void *)&v11[v13[20]];
      uint64_t v18 = &v11[v13[24]];
      int v27 = *v18;
      int v31 = v18[1];
      uint64_t v19 = (uint64_t *)&v11[v13[28]];
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      uint64_t v28 = v16;
      uint64_t v29 = v20;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 32))(v8, v11, v2);
      Hasher._combine(_:)(2uLL);
      sub_101113B8C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      if (v14)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease_n();
        if (v17)
        {
LABEL_6:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease_n();
          goto LABEL_12;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        if (v17) {
          goto LABEL_6;
        }
      }
      Hasher._combine(_:)(0);
LABEL_12:
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v31)
      {
        Swift::UInt8 v25 = 0;
      }
      else
      {
        Hasher._combine(_:)(1u);
        Swift::UInt8 v25 = v27;
      }
      Hasher._combine(_:)(v25);
      if (v21)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v8, v2);
      return swift_bridgeObjectRelease();
    case 3u:
      uint64_t v22 = sub_10000588C((uint64_t *)&unk_1016565E0);
      uint64_t v30 = *(void *)&v11[*(int *)(v22 + 80)];
      Swift::String v23 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 32);
      int v31 = v11[*(int *)(v22 + 96)];
      v23(v6, v11, v2);
      Hasher._combine(_:)(3uLL);
      sub_101113B8C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v31);
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v6, v2);
    case 4u:
      Swift::UInt v12 = 4;
      goto LABEL_9;
    default:
      Swift::UInt v12 = 0;
LABEL_9:
      Hasher._combine(_:)(v12);
      String.hash(into:)();
      return swift_bridgeObjectRelease();
  }
}

void sub_101112F68(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_101112F80(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_101110C7C();
  sub_1000BD078((uint64_t)v2, v3);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v2);
}

Swift::Int sub_101113034()
{
  return Hasher._finalize()();
}

Swift::Int sub_101113078()
{
  return Hasher._finalize()();
}

uint64_t sub_1011130B8()
{
  return sub_101113B8C(&qword_10166BBF0, (void (*)(uint64_t))type metadata accessor for StableIdentifier);
}

uint64_t sub_101113100()
{
  return 0x65756C6176;
}

uint64_t sub_101113118(uint64_t a1)
{
  unint64_t v2 = sub_101114CF8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_101113154(uint64_t a1)
{
  unint64_t v2 = sub_101114CF8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_101113190@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_101113730(a1, &qword_10166BCD8, (void (*)(void))sub_101114CF8, a2);
}

uint64_t sub_1011131CC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1011138F4(a1, a2, a3, &qword_10166BCE8, (void (*)(void))sub_101114CF8);
}

uint64_t sub_101113214(uint64_t a1)
{
  unint64_t v2 = sub_101113AE4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_101113250(uint64_t a1)
{
  unint64_t v2 = sub_101113AE4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10111328C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_101113730(a1, &qword_10166BC40, (void (*)(void))sub_101113AE4, a2);
}

uint64_t sub_1011132C8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1011138F4(a1, a2, a3, &qword_10166BC50, (void (*)(void))sub_101113AE4);
}

unint64_t sub_101113308()
{
  unint64_t result = qword_10166BBF8;
  if (!qword_10166BBF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BBF8);
  }
  return result;
}

uint64_t sub_10111335C(uint64_t a1)
{
  unint64_t v2 = sub_101113A90();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_101113398(uint64_t a1)
{
  unint64_t v2 = sub_101113A90();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1011133D4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_101113730(a1, &qword_10166BC28, (void (*)(void))sub_101113A90, a2);
}

uint64_t sub_101113410(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1011138F4(a1, a2, a3, &qword_10166BC38, (void (*)(void))sub_101113A90);
}

unint64_t sub_101113450()
{
  unint64_t result = qword_10166BC00;
  if (!qword_10166BC00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BC00);
  }
  return result;
}

uint64_t sub_1011134A4(uint64_t a1)
{
  unint64_t v2 = sub_101113A3C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1011134E0(uint64_t a1)
{
  unint64_t v2 = sub_101113A3C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10111351C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_101113730(a1, &qword_10166BC10, (void (*)(void))sub_101113A3C, a2);
}

uint64_t sub_101113558(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1011138F4(a1, a2, a3, &qword_10166BC20, (void (*)(void))sub_101113A3C);
}

unint64_t sub_101113598()
{
  unint64_t result = qword_10166BC08;
  if (!qword_10166BC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BC08);
  }
  return result;
}

uint64_t sub_1011135EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10111367C(uint64_t a1)
{
  unint64_t v2 = sub_101114CA4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1011136B8(uint64_t a1)
{
  unint64_t v2 = sub_101114CA4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1011136F4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_101113730(a1, &qword_10166BCC0, (void (*)(void))sub_101114CA4, a2);
}

uint64_t sub_101113730@<X0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v7 = sub_10000588C(a2);
  uint64_t v17 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v4) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v10 = v17;
  uint64_t v11 = v18;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v7);
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  *uint64_t v11 = v12;
  v11[1] = v14;
  return result;
}

uint64_t sub_1011138B8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1011138F4(a1, a2, a3, &qword_10166BCD0, (void (*)(void))sub_101114CA4);
}

uint64_t sub_1011138F4(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v13 = a5;
  uint64_t v7 = sub_10000588C(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v5;
  sub_10001CD44(a1, a1[3]);
  v13();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_101113A3C()
{
  unint64_t result = qword_10166BC18;
  if (!qword_10166BC18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BC18);
  }
  return result;
}

unint64_t sub_101113A90()
{
  unint64_t result = qword_10166BC30;
  if (!qword_10166BC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BC30);
  }
  return result;
}

unint64_t sub_101113AE4()
{
  unint64_t result = qword_10166BC48;
  if (!qword_10166BC48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BC48);
  }
  return result;
}

unint64_t sub_101113B38()
{
  unint64_t result = qword_10166BC58;
  if (!qword_10166BC58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BC58);
  }
  return result;
}

uint64_t sub_101113B8C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_101113BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  char v5 = *(void (***)(char *, uint64_t))(v4 - 8);
  uint64_t v142 = v4;
  uint64_t v143 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v140 = (char *)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v139 = (char *)&v122 - v8;
  uint64_t v9 = type metadata accessor for StableIdentifier();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v122 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v122 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (uint64_t *)((char *)&v122 - v20);
  __chkstk_darwin(v19);
  Swift::String v23 = (uint64_t *)((char *)&v122 - v22);
  uint64_t v24 = sub_10000588C(&qword_10166BC60);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  int v27 = (char *)&v122 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = &v27[*(int *)(v25 + 56)];
  sub_100091AD4(a1, (uint64_t)v27);
  sub_100091AD4(a2, (uint64_t)v28);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v141 = v27;
      sub_100091AD4((uint64_t)v27, (uint64_t)v21);
      uint64_t v34 = *v21;
      uint64_t v33 = v21[1];
      uint64_t v36 = v21[2];
      uint64_t v35 = v21[3];
      uint64_t v38 = (void (**)(char *, uint64_t))v21[4];
      uint64_t v37 = v21[5];
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_42;
      }
      uint64_t v143 = v38;
      uint64_t v39 = *(void *)v28;
      uint64_t v40 = *((void *)v28 + 1);
      uint64_t v42 = *((void *)v28 + 2);
      uint64_t v41 = *((void *)v28 + 3);
      uint64_t v43 = *((void *)v28 + 5);
      uint64_t v142 = *((void *)v28 + 4);
      if (v34 == v39 && v33 == v40)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v45 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_52:
          swift_bridgeObjectRelease();
          goto LABEL_55;
        }
      }
      if (v36 == v42 && v35 == v41)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v104 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v104 & 1) == 0) {
          goto LABEL_52;
        }
      }
      BOOL v106 = v143 == (void (**)(char *, uint64_t))v142 && v37 == v43;
      uint64_t v107 = (uint64_t)v141;
      if (v106)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v108 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v108 & 1) == 0)
        {
          uint64_t v105 = v107;
          goto LABEL_99;
        }
      }
      uint64_t v102 = v107;
      goto LABEL_65;
    case 2u:
      uint64_t v141 = v27;
      sub_100091AD4((uint64_t)v27, (uint64_t)v18);
      Swift::String v46 = (int *)sub_10000588C(&qword_1016555E0);
      uint64_t v47 = v46[12];
      uint64_t v48 = *(void *)&v18[v47 + 8];
      uint64_t v137 = *(void *)&v18[v47];
      uint64_t v138 = v48;
      uint64_t v49 = v46[16];
      uint64_t v50 = *(void *)&v18[v49];
      uint64_t v140 = *(char **)&v18[v49 + 8];
      uint64_t v51 = v46[20];
      uint64_t v52 = *(void *)&v18[v51];
      uint64_t v53 = *(void *)&v18[v51 + 8];
      uint64_t v135 = v50;
      uint64_t v136 = v52;
      uint64_t v54 = v46[24];
      LODWORD(v133) = v18[v54];
      LODWORD(v134) = v18[v54 + 1];
      uint64_t v55 = v46[28];
      uint64_t v56 = *(void *)&v18[v55 + 8];
      uint64_t v132 = *(void *)&v18[v55];
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v143[1](v18, v142);
        goto LABEL_42;
      }
      uint64_t v57 = v140;
      uint64_t v129 = v53;
      uint64_t v130 = v56;
      uint64_t v58 = *(void *)&v28[v47];
      uint64_t v131 = *(void *)&v28[v47 + 8];
      uint64_t v59 = *(void *)&v28[v49];
      unint64_t v60 = *(char **)&v28[v49 + 8];
      uint64_t v126 = v59;
      uint64_t v61 = *(void *)&v28[v51 + 8];
      uint64_t v127 = *(void *)&v28[v51];
      uint64_t v128 = v58;
      int v62 = v28[v54 + 1];
      int v124 = v28[v54];
      int v125 = v62;
      uint64_t v63 = *(void *)&v28[v55 + 8];
      uint64_t v123 = *(void *)&v28[v55];
      unint64_t v64 = v143;
      uint64_t v65 = v139;
      uint64_t v66 = v28;
      uint64_t v67 = v142;
      ((void (*)(char *, char *, uint64_t))v143[4])(v139, v66, v142);
      char v68 = static UUID.== infix(_:_:)();
      unint64_t v69 = (void (**)(char *, uint64_t))v64[1];
      ((void (*)(char *, uint64_t))v69)(v18, v67);
      if ((v68 & 1) == 0)
      {
        ((void (*)(char *, uint64_t))v69)(v65, v67);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_55;
      }
      uint64_t v143 = v69;
      __int16 v70 = v60;
      uint64_t v122 = v63;
      uint64_t v71 = v61;
      uint64_t v72 = (uint64_t)v141;
      char v73 = v57;
      if (!v138)
      {
        uint64_t v74 = v65;
        if (!v131) {
          goto LABEL_82;
        }
        goto LABEL_79;
      }
      if (!v131)
      {
        uint64_t v74 = v65;
LABEL_79:
        swift_bridgeObjectRelease();
        goto LABEL_80;
      }
      uint64_t v74 = v65;
      if (v137 == v128 && v138 == v131)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_82;
      }
      char v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v112 & 1) == 0)
      {
LABEL_80:
        ((void (*)(char *, uint64_t))v143)(v74, v67);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_96:
        swift_bridgeObjectRelease();
        goto LABEL_97;
      }
LABEL_82:
      if (!v57)
      {
        uint64_t v114 = v129;
        uint64_t v113 = v130;
        __int16 v115 = v143;
        if (!v70) {
          goto LABEL_103;
        }
        goto LABEL_94;
      }
      uint64_t v113 = v130;
      if (!v70)
      {
        __int16 v115 = v143;
LABEL_94:
        swift_bridgeObjectRelease();
LABEL_95:
        ((void (*)(char *, uint64_t))v115)(v74, v67);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_96;
      }
      uint64_t v114 = v129;
      if (v135 != v126 || v73 != v70)
      {
        char v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __int16 v115 = v143;
        if (v117) {
          goto LABEL_103;
        }
        goto LABEL_95;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __int16 v115 = v143;
LABEL_103:
      if (v136 == v127 && v114 == v71)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_107;
      }
      char v118 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v118 & 1) == 0)
      {
        ((void (*)(char *, uint64_t))v115)(v74, v67);
        goto LABEL_96;
      }
LABEL_107:
      uint64_t v119 = v122;
      if (v134)
      {
        if (!v125)
        {
LABEL_109:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v115)(v74, v67);
          goto LABEL_98;
        }
      }
      else
      {
        if (v133 == v124) {
          char v120 = v125;
        }
        else {
          char v120 = 1;
        }
        if (v120) {
          goto LABEL_109;
        }
      }
      if (v113)
      {
        if (v122)
        {
          if (v132 == v123 && v113 == v122)
          {
            swift_bridgeObjectRelease();
LABEL_123:
            ((void (*)(char *, uint64_t))v115)(v74, v67);
            swift_bridgeObjectRelease();
            goto LABEL_124;
          }
          char v121 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v121) {
            goto LABEL_123;
          }
        }
        ((void (*)(char *, uint64_t))v115)(v74, v67);
LABEL_97:
        swift_bridgeObjectRelease();
LABEL_98:
        uint64_t v105 = v72;
        goto LABEL_99;
      }
      ((void (*)(char *, uint64_t))v115)(v74, v67);
      if (v119) {
        goto LABEL_97;
      }
LABEL_124:
      uint64_t v102 = v72;
LABEL_65:
      sub_1002C0934(v102);
      return 1;
    case 3u:
      uint64_t v141 = v27;
      sub_100091AD4((uint64_t)v27, (uint64_t)v15);
      uint64_t v75 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
      uint64_t v76 = v75[12];
      uint64_t v77 = *(char **)&v15[v76];
      uint64_t v78 = *(void *)&v15[v76 + 8];
      uint64_t v79 = v75[16];
      uint64_t v80 = *(void *)&v15[v79 + 8];
      uint64_t v138 = *(void *)&v15[v79];
      unint64_t v139 = v77;
      uint64_t v81 = v75[20];
      uint64_t v82 = *(void *)&v15[v81 + 8];
      uint64_t v137 = *(void *)&v15[v81];
      uint64_t v83 = v75[24];
      LODWORD(v136) = v15[v83];
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v143[1](v15, v142);
LABEL_42:
        int v27 = v141;
LABEL_43:
        sub_10001DAB4((uint64_t)v27, &qword_10166BC60);
        return 0;
      }
      uint64_t v134 = v80;
      uint64_t v135 = v82;
      unint64_t v84 = *(char **)&v28[v76];
      uint64_t v85 = *(void *)&v28[v76 + 8];
      uint64_t v86 = *(void *)&v28[v79];
      uint64_t v87 = *(void *)&v28[v79 + 8];
      uint64_t v132 = v86;
      Swift::Int v133 = v84;
      uint64_t v88 = *(void *)&v28[v81 + 8];
      uint64_t v131 = *(void *)&v28[v81];
      LODWORD(v130) = v28[v83];
      uint64_t v90 = v142;
      uint64_t v89 = v143;
      uint64_t v91 = v140;
      ((void (*)(char *, char *, uint64_t))v143[4])(v140, v28, v142);
      char v92 = static UUID.== infix(_:_:)();
      uint64_t v93 = v89[1];
      v93(v15, v90);
      if ((v92 & 1) == 0)
      {
        v93(v91, v90);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_55:
        swift_bridgeObjectRelease();
        uint64_t v105 = (uint64_t)v141;
        goto LABEL_99;
      }
      uint64_t v94 = v88;
      BOOL v95 = v139 == v133 && v78 == v85;
      int v27 = v141;
      if (v95)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v97 = v134;
      }
      else
      {
        char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v97 = v134;
        if ((v96 & 1) == 0)
        {
          v93(v140, v90);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_88:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_92:
          uint64_t v105 = (uint64_t)v27;
LABEL_99:
          sub_1002C0934(v105);
          return 0;
        }
      }
      if (v138 == v132 && v97 == v87)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v110 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v110 & 1) == 0)
        {
          v93(v140, v90);
          goto LABEL_88;
        }
      }
      if (v137 == v131 && v135 == v94)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v111 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v111 & 1) == 0)
        {
          v93(v140, v90);
          goto LABEL_92;
        }
      }
      v93(v140, v90);
      BOOL v109 = v136 == v130;
      sub_1002C0934((uint64_t)v27);
      return v109;
    case 4u:
      sub_100091AD4((uint64_t)v27, (uint64_t)v12);
      uint64_t v99 = *v12;
      uint64_t v98 = v12[1];
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_38;
      }
      if (v99 == *(void *)v28 && v98 == *((void *)v28 + 1)) {
        goto LABEL_44;
      }
      char v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v101 & 1) == 0) {
        goto LABEL_92;
      }
      goto LABEL_45;
    default:
      sub_100091AD4((uint64_t)v27, (uint64_t)v23);
      uint64_t v30 = *v23;
      uint64_t v29 = v23[1];
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_38:
        swift_bridgeObjectRelease();
        goto LABEL_43;
      }
      if (v30 == *(void *)v28 && v29 == *((void *)v28 + 1))
      {
LABEL_44:
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v32 & 1) == 0) {
          goto LABEL_92;
        }
      }
LABEL_45:
      uint64_t v102 = (uint64_t)v27;
      goto LABEL_65;
  }
}

ValueMetadata *type metadata accessor for StableIdentifier.StableIdentifierError()
{
  return &type metadata for StableIdentifier.StableIdentifierError;
}

ValueMetadata *type metadata accessor for StableIdentifier.ChipId.CodingKeys()
{
  return &type metadata for StableIdentifier.ChipId.CodingKeys;
}

ValueMetadata *type metadata accessor for StableIdentifier.ECID.CodingKeys()
{
  return &type metadata for StableIdentifier.ECID.CodingKeys;
}

ValueMetadata *type metadata accessor for StableIdentifier.SerialNumber.CodingKeys()
{
  return &type metadata for StableIdentifier.SerialNumber.CodingKeys;
}

ValueMetadata *type metadata accessor for StableIdentifier.AccountAltDsid()
{
  return &type metadata for StableIdentifier.AccountAltDsid;
}

ValueMetadata *type metadata accessor for StableIdentifier.UDID()
{
  return &type metadata for StableIdentifier.UDID;
}

unint64_t sub_1011148E0()
{
  unint64_t result = qword_10166BC68;
  if (!qword_10166BC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BC68);
  }
  return result;
}

unint64_t sub_101114938()
{
  unint64_t result = qword_10166BC70;
  if (!qword_10166BC70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BC70);
  }
  return result;
}

unint64_t sub_101114990()
{
  unint64_t result = qword_10166BC78;
  if (!qword_10166BC78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BC78);
  }
  return result;
}

unint64_t sub_1011149E8()
{
  unint64_t result = qword_10166BC80;
  if (!qword_10166BC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BC80);
  }
  return result;
}

unint64_t sub_101114A40()
{
  unint64_t result = qword_10166BC88;
  if (!qword_10166BC88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BC88);
  }
  return result;
}

unint64_t sub_101114A98()
{
  unint64_t result = qword_10166BC90;
  if (!qword_10166BC90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BC90);
  }
  return result;
}

unint64_t sub_101114AF0()
{
  unint64_t result = qword_10166BC98;
  if (!qword_10166BC98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BC98);
  }
  return result;
}

unint64_t sub_101114B48()
{
  unint64_t result = qword_10166BCA0;
  if (!qword_10166BCA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BCA0);
  }
  return result;
}

unint64_t sub_101114BA0()
{
  unint64_t result = qword_10166BCA8;
  if (!qword_10166BCA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BCA8);
  }
  return result;
}

unint64_t sub_101114BF8()
{
  unint64_t result = qword_10166BCB0;
  if (!qword_10166BCB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BCB0);
  }
  return result;
}

unint64_t sub_101114C50()
{
  unint64_t result = qword_10166BCB8;
  if (!qword_10166BCB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BCB8);
  }
  return result;
}

unint64_t sub_101114CA4()
{
  unint64_t result = qword_10166BCC8;
  if (!qword_10166BCC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BCC8);
  }
  return result;
}

unint64_t sub_101114CF8()
{
  unint64_t result = qword_10166BCE0;
  if (!qword_10166BCE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BCE0);
  }
  return result;
}

ValueMetadata *type metadata accessor for StableIdentifier.UDID.CodingKeys()
{
  return &type metadata for StableIdentifier.UDID.CodingKeys;
}

unsigned char *_s12searchpartyd16StableIdentifierO6ChipIdV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x101114DF8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for StableIdentifier.AccountAltDsid.CodingKeys()
{
  return &type metadata for StableIdentifier.AccountAltDsid.CodingKeys;
}

unint64_t sub_101114E34()
{
  unint64_t result = qword_10166BCF0;
  if (!qword_10166BCF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BCF0);
  }
  return result;
}

unint64_t sub_101114E8C()
{
  unint64_t result = qword_10166BCF8;
  if (!qword_10166BCF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BCF8);
  }
  return result;
}

unint64_t sub_101114EE4()
{
  unint64_t result = qword_10166BD00;
  if (!qword_10166BD00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BD00);
  }
  return result;
}

unint64_t sub_101114F3C()
{
  unint64_t result = qword_10166BD08;
  if (!qword_10166BD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BD08);
  }
  return result;
}

unint64_t sub_101114F94()
{
  unint64_t result = qword_10166BD10;
  if (!qword_10166BD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BD10);
  }
  return result;
}

unint64_t sub_101114FEC()
{
  unint64_t result = qword_10166BD18;
  if (!qword_10166BD18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BD18);
  }
  return result;
}

uint64_t sub_101115048(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)CNContactStore) init];
  int v3 = self;
  NSString v4 = String._bridgeToObjectiveC()();
  unsigned int v5 = [v3 isStringEmailAddress:v4];

  uint64_t v6 = self;
  if (v5)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    uint64_t v8 = &selRef_predicateForContactsMatchingEmailAddress_;
  }
  else
  {
    id v9 = objc_allocWithZone((Class)CNPhoneNumber);
    swift_bridgeObjectRetain();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v7 = [v9 initWithStringValue:v10];

    uint64_t v8 = &selRef_predicateForContactsMatchingPhoneNumber_;
  }
  id v11 = [v6 *v8 v7];

  uint64_t v12 = self;
  id v13 = [v12 descriptorForRequiredKeysForStyle:0];
  sub_10000588C(&qword_10166BD20);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101347EF0;
  *(void *)(v14 + 32) = v13;
  specialized Array._endMutation()();
  swift_unknownObjectRetain();
  sub_10000588C((uint64_t *)&unk_10166BD28);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v37 = 0;
  id v16 = [v2 unifiedContactsMatchingPredicate:v11 keysToFetch:isa error:&v37];

  id v17 = v37;
  uint64_t v36 = v11;
  if (v16)
  {
    sub_101115500();
    unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v19 = v17;

    uint64_t v35 = a1;
    if (v18 >> 62) {
      goto LABEL_21;
    }
    uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v20)
    {
      uint64_t v21 = 4;
      while (1)
      {
        id v22 = (v18 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : *(id *)(v18 + 8 * v21);
        Swift::String v23 = v22;
        uint64_t v24 = v21 - 3;
        if (__OFADD__(v21 - 4, 1)) {
          break;
        }
        id v25 = [v12 stringFromContact:v22 style:0];
        if (v25)
        {
          uint64_t v33 = v25;
          a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease();
          return a1;
        }

        ++v21;
        if (v24 == v20) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_21:
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_14:

    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRetain();
    return v35;
  }
  else
  {
    uint64_t v26 = v2;
    id v27 = v37;
    uint64_t v28 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    static os_log_type_t.error.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_101342130;
    id v37 = v28;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v30 = String.init<A>(describing:)();
    uint64_t v32 = v31;
    *(void *)(v29 + 56) = &type metadata for String;
    *(void *)(v29 + 64) = sub_10000B4CC();
    *(void *)(v29 + 32) = v30;
    *(void *)(v29 + 40) = v32;
    os_log(_:dso:log:_:_:)();

    swift_unknownObjectRelease();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t sub_101115500()
{
  unint64_t result = qword_10166BD38;
  if (!qword_10166BD38)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10166BD38);
  }
  return result;
}

BOOL sub_101115540(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 < a1;
}

uint64_t sub_101115550()
{
  return static Date.> infix(_:_:)() & 1;
}

BOOL sub_10111557C(double a1, double a2)
{
  return a1 < a2;
}

void sub_101115588()
{
  qword_10170F300 = (uint64_t)&off_1015A07A0;
}

uint64_t sub_1011155A0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_retain();
  }
  return result;
}

uint64_t destroy for AdvertisementCacheSearchCriteria.SortOrder(uint64_t a1)
{
  return sub_1011155C8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1011155C8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_release();
  }
  return result;
}

uint64_t _s12searchpartyd32AdvertisementCacheSearchCriteriaV9SortOrderOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1011155A0(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AdvertisementCacheSearchCriteria.SortOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1011155A0(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1011155C8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AdvertisementCacheSearchCriteria.SortOrder(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1011155C8(v4, v5, v6);
  return a1;
}

uint64_t sub_1011156CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1011156D4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementCacheSearchCriteria.SortOrder()
{
  return &type metadata for AdvertisementCacheSearchCriteria.SortOrder;
}

ValueMetadata *type metadata accessor for AdvertisementCacheSearchCriteria()
{
  return &type metadata for AdvertisementCacheSearchCriteria;
}

ValueMetadata *type metadata accessor for AdvertisementCacheSearchCriteria.FilterOption()
{
  return &type metadata for AdvertisementCacheSearchCriteria.FilterOption;
}

unint64_t sub_101115710()
{
  unint64_t result = qword_10166BD40;
  if (!qword_10166BD40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BD40);
  }
  return result;
}

unint64_t sub_101115768()
{
  unint64_t result = qword_10166BD48;
  if (!qword_10166BD48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BD48);
  }
  return result;
}

unint64_t sub_1011157C0()
{
  unint64_t result = qword_10166BD50;
  if (!qword_10166BD50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BD50);
  }
  return result;
}

unint64_t sub_101115818()
{
  unint64_t result = qword_10166BD58;
  if (!qword_10166BD58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BD58);
  }
  return result;
}

uint64_t sub_10111586C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10000588C((uint64_t *)&unk_10166BF50);
    sub_100062734((unint64_t *)&unk_10165EF30, (uint64_t *)&unk_10166BF50);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v3 = v20;
    uint64_t v4 = v21;
    unint64_t v5 = v22;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      return sub_100132C20();
    }
    swift_unknownObjectRetain();
    sub_10000588C((uint64_t *)&unk_10166BF50);
    swift_dynamicCast();
    swift_unknownObjectRelease();
    uint64_t v12 = v4;
    uint64_t v10 = v5;
    if (!v23) {
      return sub_100132C20();
    }
LABEL_33:
    XPCSession.proxy.getter();
    if (v23)
    {
      [v23 unknownAccessoryDiscoveryFinished];
      swift_release();
      uint64_t result = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t result = swift_release();
    }
    uint64_t v4 = v12;
    unint64_t v5 = v10;
  }
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v12 = v4;
LABEL_32:
    uint64_t v16 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
    swift_retain();
    if (!v16) {
      return sub_100132C20();
    }
    goto LABEL_33;
  }
  int64_t v13 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v13 >= v9) {
      return sub_100132C20();
    }
    unint64_t v14 = *(void *)(v17 + 8 * v13);
    uint64_t v12 = v4 + 1;
    if (!v14)
    {
      uint64_t v12 = v4 + 2;
      if (v4 + 2 >= v9) {
        return sub_100132C20();
      }
      unint64_t v14 = *(void *)(v17 + 8 * v12);
      if (!v14)
      {
        uint64_t v12 = v4 + 3;
        if (v4 + 3 >= v9) {
          return sub_100132C20();
        }
        unint64_t v14 = *(void *)(v17 + 8 * v12);
        if (!v14)
        {
          uint64_t v12 = v4 + 4;
          if (v4 + 4 >= v9) {
            return sub_100132C20();
          }
          unint64_t v14 = *(void *)(v17 + 8 * v12);
          if (!v14)
          {
            uint64_t v12 = v4 + 5;
            if (v4 + 5 >= v9) {
              return sub_100132C20();
            }
            unint64_t v14 = *(void *)(v17 + 8 * v12);
            if (!v14)
            {
              uint64_t v15 = v4 + 6;
              while (v9 != v15)
              {
                unint64_t v14 = *(void *)(v17 + 8 * v15++);
                if (v14)
                {
                  uint64_t v12 = v15 - 1;
                  goto LABEL_31;
                }
              }
              return sub_100132C20();
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v10 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_101115B4C(void *a1, uint64_t (*a2)(uint64_t a1), uint64_t a3)
{
  uint64_t v76 = a3;
  uint64_t v5 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v5 - 8);
  char v73 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v7 - 8);
  int64_t v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v70 = v13;
  uint64_t v71 = (uint64_t)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v75 = (uint64_t)&v63 - v14;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v77 = *(void *)(v15 - 8);
  uint64_t v78 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v68 = v17;
  unint64_t v69 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v79 = (char *)&v63 - v18;
  if (qword_101636AD0 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = sub_100010324(v19, (uint64_t)qword_10170DE50);
  id v21 = a1;
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v74 = a2;
    id v25 = (uint8_t *)v24;
    uint64_t v65 = swift_slowAlloc();
    v81[0] = v65;
    uint64_t v67 = v11;
    *(_DWORD *)id v25 = 136315138;
    unint64_t v64 = v25;
    id v26 = [v21 identifier:v25 + 4];
    uint64_t v27 = v10;
    uint64_t v28 = v79;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10112DAEC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v29 = v9;
    uint64_t v30 = v78;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v66 = v20;
    unint64_t v33 = v32;
    uint64_t v34 = v28;
    uint64_t v10 = v27;
    uint64_t v35 = v30;
    int64_t v9 = v29;
    (*(void (**)(char *, uint64_t))(v77 + 8))(v34, v35);
    uint64_t v80 = sub_1008FA0F0(v31, v33, v81);
    uint64_t v11 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "UnknownDiscoverySession: fetchEncryptedPayload for %s", v64, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v74;
    swift_slowDealloc();
  }
  else
  {
  }
  sub_101121164((uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_1016511E0);
    id v36 = v21;
    id v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v41 = v77;
      uint64_t v75 = v40;
      v81[0] = v40;
      uint64_t v74 = a2;
      *(_DWORD *)uint64_t v39 = 136315138;
      uint64_t v72 = v39 + 4;
      id v42 = [v36 identifier];
      uint64_t v43 = v79;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10112DAEC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v44 = v78;
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v47 = v46;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v44);
      uint64_t v80 = sub_1008FA0F0(v45, v47, v81);
      a2 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unable to generate wild record from unknown beacon %s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v61 = type metadata accessor for URL();
    uint64_t v62 = (uint64_t)v73;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v73, 1, 1, v61);
    a2(v62);
    return sub_10001DAB4(v62, &qword_101649E40);
  }
  else
  {
    uint64_t v74 = type metadata accessor for WildModeAssociationRecord;
    uint64_t v48 = v75;
    sub_10112E634((uint64_t)v9, v75, type metadata accessor for WildModeAssociationRecord);
    id v49 = [v21 identifier];
    uint64_t v50 = v79;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v51 = v72;
    swift_unownedRetainStrong();
    uint64_t v53 = v77;
    uint64_t v52 = v78;
    uint64_t v54 = v69;
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v69, v50, v78);
    uint64_t v55 = v71;
    sub_10112E69C(v48, v71, type metadata accessor for WildModeAssociationRecord);
    unint64_t v56 = (*(unsigned __int8 *)(v53 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
    unint64_t v57 = (v68 + *(unsigned __int8 *)(v11 + 80) + v56) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v58 = (char *)swift_allocObject();
    *((void *)v58 + 2) = v51;
    *((void *)v58 + 3) = a2;
    *((void *)v58 + 4) = v76;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(&v58[v56], v54, v52);
    sub_10112E634(v55, (uint64_t)&v58[v57], v74);
    swift_retain();
    swift_retain();
    uint64_t v59 = v75;
    sub_100D34000(v75, (uint64_t)sub_10112F730, (uint64_t)v58);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v79, v52);
    return sub_10112E704(v59, type metadata accessor for WildModeAssociationRecord);
  }
}

Swift::Int sub_1011163B0(unint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for WildModeTrackingLocation(0) - 8);
  unint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = sub_100BBD36C(v3);
  }
  uint64_t v4 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1011249E8(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_10111645C(uint64_t a1, void (*a2)(char *), uint64_t a3, void (*a4)(char *))
{
  uint64_t v8 = sub_10000588C(&qword_101660A90);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for WildModeAssociationRecord(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10112E69C(a1, (uint64_t)v13, type metadata accessor for WildModeAssociationRecord);
  a2(v13);
  v15[4] = *(void *)(v4 + 160);
  v15[5] = v13;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100AA5514();
  sub_10112E69C((uint64_t)v13, (uint64_t)v10, type metadata accessor for WildModeAssociationRecord);
  swift_storeEnumTagMultiPayload();
  a4(v10);
  sub_10001DAB4((uint64_t)v10, &qword_101660A90);
  return sub_10112E704((uint64_t)v13, type metadata accessor for WildModeAssociationRecord);
}

uint64_t sub_101116744()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_10001E384(v0, qword_10166BD60);
  sub_100010324(v0, (uint64_t)qword_10166BD60);
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
}

uint64_t sub_101116798@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 40);
  if ((v5 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = __CocoaSet.count.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)(v5 + 16);
  }
  *a2 = v6 == 0;
  return result;
}

void *sub_101116830(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v29 = a2;
  uint64_t v30 = a4;
  uint64_t v27 = a3;
  uint64_t v28 = a1;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  uint64_t v26 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  unsigned int v25 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v24 = *(void (**)(char *))(v8 + 104);
  v24(v10);
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = _swiftEmptyArrayStorage;
  v23[0] = sub_10112DAEC((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v4[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  ((void (*)(char *, void, uint64_t))v24)(v10, v25, v26);
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v4[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v4[5] = &_swiftEmptySetSingleton;
  v4[6] = _swiftEmptyDictionarySingleton;
  v4[7] = 0;
  v4[8] = &_swiftEmptySetSingleton;
  id v11 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  v4[12] = CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, *(uint64_t *)&kCLLocationAccuracyHundredMeters, 0);
  if (qword_101636AD0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170DE50);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "UnknownDiscoverySession.init()", v15, 2u);
    swift_slowDealloc();
  }

  uint64_t v16 = v27;
  v5[4] = v28;
  uint64_t v18 = v29;
  uint64_t v17 = v30;
  v5[10] = v16;
  v5[11] = v17;
  v5[9] = v18;
  uint64_t v19 = (void *)v5[12];
  swift_unownedRetain();
  id v20 = v16;
  swift_retain();
  swift_retain();
  id v21 = v19;
  CurrentLocationMonitor.requestLocation()();

  swift_release();
  swift_release();

  swift_release();
  return v5;
}

id *sub_101116CA8()
{
  uint64_t v1 = v0;
  if (qword_101636AD0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170DE50);
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "UnknownDiscoverySession.deinit", v5, 2u);
    swift_slowDealloc();
  }

  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return v1;
}

uint64_t sub_101116DE0()
{
  sub_101116CA8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UnknownDiscoverySession()
{
  return self;
}

uint64_t sub_101116E38()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v2 - 8);
  os_log_type_t v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_10000588C(&qword_10166C178);
  uint64_t v73 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10166C180);
  uint64_t v75 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  unint64_t v64 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v71 = (char *)&v63 - v11;
  __chkstk_darwin(v10);
  uint64_t v72 = (char *)&v63 - v12;
  uint64_t v13 = sub_10000588C(&qword_10166C188);
  uint64_t v77 = *(void *)(v13 - 8);
  uint64_t v78 = v13;
  __chkstk_darwin(v13);
  uint64_t v76 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_10000588C(&qword_10166C190);
  uint64_t v80 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_10166C198);
  uint64_t v83 = *(void *)(v17 - 8);
  uint64_t v84 = v17;
  __chkstk_darwin(v17);
  uint64_t v81 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_10166C1A0);
  uint64_t v86 = *(void *)(v19 - 8);
  uint64_t v87 = v19;
  __chkstk_darwin(v19);
  uint64_t v85 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_10166C1A8);
  uint64_t v89 = *(void *)(v21 - 8);
  uint64_t v90 = v21;
  __chkstk_darwin(v21);
  uint64_t v88 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000588C(&qword_10166C1B0);
  uint64_t v92 = *(void *)(v23 - 8);
  uint64_t v93 = v23;
  __chkstk_darwin(v23);
  uint64_t v91 = (char *)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v79 = v16;
  unsigned int v25 = (void *)qword_10170EE68;
  id v26 = [self sharedInstance];
  unsigned int v27 = [v26 isInternalBuild];

  if (v27
    && (NSString v28 = String._bridgeToObjectiveC()(),
        unsigned __int8 v29 = [v25 BOOLForKey:v28],
        v28,
        (v29 & 1) != 0))
  {
    uint64_t v30 = &off_1015A1450;
  }
  else
  {
    uint64_t v30 = &off_1015A1478;
  }
  uint64_t v31 = (void *)sub_1011D0584(1);
  id v94 = *(id *)(v1 + 24);
  id v32 = v94;
  id v95 = v31;
  uint64_t v33 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
  uint64_t v70 = v33;
  unint64_t v69 = v35;
  uint64_t v67 = v34 + 56;
  ((void (*)(char *, uint64_t, uint64_t))v35)(v4, 1, 1);
  id v68 = v32;
  uint64_t v63 = sub_10000588C(&qword_10166C1B8);
  uint64_t v36 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  sub_100062734(&qword_10166C1C0, &qword_10166C1B8);
  unint64_t v37 = sub_10027B124();
  uint64_t v66 = v36;
  unint64_t v65 = v37;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v4, &qword_10163C6C8);

  swift_release();
  os_log_type_t v38 = v6;
  uint64_t v39 = (uint64_t)v4;
  *(void *)(swift_allocObject() + 16) = v30;
  sub_100062734(&qword_10166C1C8, &qword_10166C178);
  uint64_t v40 = v64;
  uint64_t v41 = v74;
  Publisher.filter(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v38, v41);
  id v42 = v71;
  Publishers.Filter.filter(_:)();
  uint64_t v43 = *(void (**)(char *, uint64_t))(v75 + 8);
  v43(v40, v7);
  uint64_t v44 = v72;
  Publishers.Filter.filter(_:)();
  v43(v42, v7);
  type metadata accessor for MACAddress();
  sub_100062734((unint64_t *)&unk_10166C1D0, &qword_10166C180);
  sub_10112DAEC((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
  uint64_t v45 = (void *)Publisher.unique<A>(by:)();
  v43(v44, v7);
  id v95 = v45;
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_10000588C(&qword_10166C1E0);
  sub_100062734(&qword_10166C1E8, &qword_10166C1E0);
  unint64_t v46 = v76;
  Publisher.flatMap<A>(maxPublishers:_:)();
  swift_release();
  swift_release();
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_10000588C(&qword_10166BFC0);
  sub_100062734(&qword_10166C1F0, &qword_10166C188);
  sub_100062734(&qword_10166C1F8, &qword_10166BFC0);
  uint64_t v47 = v78;
  uint64_t v48 = v79;
  Publisher.flatMap<A>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v46, v47);
  if (qword_1016374A8 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_100010324(v49, (uint64_t)qword_10166BD60);
  uint64_t v50 = v68;
  id v95 = v68;
  v69(v39, 1, 1, v70);
  sub_100062734(&qword_10166C200, &qword_10166C190);
  id v51 = v50;
  uint64_t v53 = v81;
  uint64_t v52 = v82;
  Publisher.timeout<A>(_:scheduler:options:customError:)();
  sub_10001DAB4(v39, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v80 + 8))(v48, v52);
  sub_10000588C(&qword_10166C208);
  sub_100062734(&qword_10166C210, &qword_10166C198);
  uint64_t v54 = v84;
  uint64_t v55 = v85;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v53, v54);
  sub_10000588C(&qword_10166C218);
  sub_100062734(&qword_10166C220, &qword_10166C1A0);
  sub_100062734(&qword_10166C228, &qword_10166C218);
  uint64_t v56 = v87;
  unint64_t v57 = v88;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v55, v56);
  sub_100062734(&qword_10166C230, &qword_10166C1A8);
  swift_retain();
  uint64_t v58 = v90;
  uint64_t v59 = v91;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v57, v58);
  swift_allocObject();
  swift_weakInit();
  sub_100062734(&qword_10166C238, &qword_10166C1B0);
  uint64_t v60 = v93;
  uint64_t v61 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v59, v60);
  *(void *)(v1 + 56) = v61;
  return swift_release();
}

uint64_t sub_101117C24(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for DiscoveredObject(0);
  uint64_t v5 = *(void *)(a2 + 16);
  if (!v5) {
    return 0;
  }
  int v6 = (*(unsigned __int8 *)(a1 + *(int *)(result + 44)) >> 4) & 3;
  if (*(unsigned __int8 *)(a2 + 32) == v6) {
    return 1;
  }
  if (v5 == 1) {
    return 0;
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v8 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    int v9 = *(unsigned __int8 *)(a2 + i);
    uint64_t result = v9 == v6;
    if (v9 == v6 || v8 == v5) {
      return result;
    }
  }
  __break(1u);
  return result;
}

BOOL sub_101117CB4(uint64_t a1)
{
  return (*(unsigned char *)(a1 + *(int *)(type metadata accessor for DiscoveredObject(0) + 36) + 15) & 0x20) == 0;
}

BOOL sub_101117CF0(uint64_t a1)
{
  return *(_DWORD *)(a1 + *(int *)(type metadata accessor for DiscoveredObject(0) + 60)) > -76;
}

uint64_t sub_101117D28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for DiscoveredObject(0) + 32);
  uint64_t v4 = type metadata accessor for MACAddress();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, v3, v4);
}

id sub_101117DA4@<X0>(id *a1@<X0>, id *a2@<X8>)
{
  id v3 = *a1;
  *a2 = *a1;
  sub_10000588C(&qword_10166C208);
  swift_storeEnumTagMultiPayload();

  return v3;
}

uint64_t sub_101117E08(uint64_t a1)
{
  return sub_101119BA4(a1, &qword_10166C208);
}

uint64_t sub_101117E14()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_101117EB8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BluetoothCommunicationCoordinator.Error();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (void (**)(char *, uint64_t))((char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)v48 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v48 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v49 = *(void (***)(char *, uint64_t))(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_10166C208);
  __chkstk_darwin(v14);
  uint64_t v16 = (void **)((char *)v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v18 = result;
    sub_10001D074(a1, (uint64_t)v16, &qword_10166C208);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v50 = v18;
    if (EnumCaseMultiPayload == 1)
    {
      sub_10112E634((uint64_t)v16, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      if (qword_101636AD0 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_100010324(v20, (uint64_t)qword_10170DE50);
      sub_10112E69C((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v52 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315138;
        uint64_t v49 = v5;
        unint64_t v24 = sub_1011CE8B8();
        uint64_t v51 = sub_1008FA0F0(v24, v25, (uint64_t *)&v52);
        uint64_t v5 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10112E704((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Object Discovery failed! Error: %s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10112E704((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      }

      sub_10112E69C((uint64_t)v10, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      uint64_t v37 = (uint64_t)v10;
      if (swift_getEnumCaseMultiPayload() == 13)
      {
        type metadata accessor for SPUnknownDiscoverySessionError(0);
        uint64_t v51 = 1;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_10112DAEC(&qword_10166C240, type metadata accessor for SPUnknownDiscoverySessionError);
        _BridgedStoredNSError.init(_:userInfo:)();
        os_log_type_t v38 = v52;
        sub_10000588C(&qword_10166C248);
        uint64_t v39 = OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v40 = v51;
        __chkstk_darwin(v39);
        v48[-2] = v40;
        v48[-1] = v38;
        os_activity(name:block:)();

        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v47 = v37;
      }
      else
      {
        type metadata accessor for SPUnknownDiscoverySessionError(0);
        uint64_t v51 = 0;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_10112DAEC(&qword_10166C240, type metadata accessor for SPUnknownDiscoverySessionError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v44 = v52;
        sub_10000588C(&qword_10166C248);
        uint64_t v45 = OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v46 = v51;
        __chkstk_darwin(v45);
        v48[-2] = v46;
        v48[-1] = v44;
        os_activity(name:block:)();

        swift_release();
        swift_bridgeObjectRelease();
        sub_10112E704(v37, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
        uint64_t v47 = (uint64_t)v5;
      }
      return sub_10112E704(v47, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
    }
    else
    {
      id v26 = *v16;
      if (qword_101636AD0 != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      sub_100010324(v27, (uint64_t)qword_10170DE50);
      id v28 = v26;
      unsigned __int8 v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v52 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 136315138;
        v48[1] = v31 + 4;
        id v32 = [v28 identifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_10112DAEC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v35 = v34;
        v49[1](v13, v11);
        uint64_t v51 = sub_1008FA0F0(v33, v35, (uint64_t *)&v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Created unknown beacon: %s", v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v41 = v50;
      __chkstk_darwin(v36);
      v48[-2] = v41;
      v48[-1] = v28;
      sub_10000588C(&qword_10166C248);
      uint64_t v42 = OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v43 = (uint64_t)v52;
      __chkstk_darwin(v42);
      v48[-2] = v43;
      v48[-1] = v28;
      os_activity(name:block:)();

      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1011187F0(uint64_t a1)
{
  uint64_t v60 = sub_10000588C((uint64_t *)&unk_10166C100);
  __chkstk_darwin(v60);
  uint64_t v3 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10166C168);
  uint64_t v61 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DiscoveredObject(0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v56 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v56 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v56 - v20;
  switch(sub_100264528())
  {
    case 1u:
      if (qword_101636AD0 != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      sub_100010324(v29, (uint64_t)qword_10170DE50);
      sub_10112E69C(a1, (uint64_t)v16, type metadata accessor for DiscoveredObject);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v30))
      {
        uint64_t v31 = swift_slowAlloc();
        uint64_t v58 = v7;
        id v32 = (uint8_t *)v31;
        uint64_t v33 = swift_slowAlloc();
        uint64_t v59 = a1;
        uint64_t v63 = v33;
        *(_DWORD *)id v32 = 136315138;
        unint64_t v57 = v32 + 4;
        uint64_t v34 = sub_100264550();
        uint64_t v62 = sub_1008FA0F0(v34, v35, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10112E704((uint64_t)v16, type metadata accessor for DiscoveredObject);
        _os_log_impl((void *)&_mh_execute_header, v23, v30, "No metadata reading for durian accessory %s", v32, 0xCu);
        swift_arrayDestroy();
        a1 = v59;
        swift_slowDealloc();
        uint64_t v7 = v58;
        goto LABEL_10;
      }
      uint64_t v50 = (uint64_t)v16;
      goto LABEL_21;
    case 2u:
      if (qword_101636AD0 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_100010324(v36, (uint64_t)qword_10170DE50);
      uint64_t v37 = a1;
      sub_10112E69C(a1, (uint64_t)v21, type metadata accessor for DiscoveredObject);
      os_log_type_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 136315138;
        uint64_t v41 = sub_100264550();
        uint64_t v62 = sub_1008FA0F0(v41, v42, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10112E704((uint64_t)v21, type metadata accessor for DiscoveredObject);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Reading metadata for accessory %s", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10112E704((uint64_t)v21, type metadata accessor for DiscoveredObject);
      }

      uint64_t v54 = sub_1011191B8(v37);
      goto LABEL_27;
    case 3u:
      if (qword_101636AD0 != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      sub_100010324(v43, (uint64_t)qword_10170DE50);
      sub_10112E69C(a1, (uint64_t)v19, type metadata accessor for DiscoveredObject);
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = a1;
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v47 = 136315138;
        uint64_t v48 = sub_100264550();
        uint64_t v62 = sub_1008FA0F0(v48, v49, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10112E704((uint64_t)v19, type metadata accessor for DiscoveredObject);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Reading metadata for hele accessory %s", v47, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        a1 = v46;
        swift_slowDealloc();
      }
      else
      {
        sub_10112E704((uint64_t)v19, type metadata accessor for DiscoveredObject);
      }

      uint64_t v54 = sub_101119C60(a1);
LABEL_27:
      uint64_t v53 = v54;
      break;
    default:
      if (qword_101636AD0 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_100010324(v22, (uint64_t)qword_10170DE50);
      sub_10112E69C(a1, (uint64_t)v13, type metadata accessor for DiscoveredObject);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        unint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        uint64_t v59 = a1;
        uint64_t v63 = v26;
        uint64_t v58 = v7;
        *(_DWORD *)unint64_t v25 = 136315138;
        unint64_t v57 = v25 + 4;
        uint64_t v27 = sub_100264550();
        uint64_t v62 = sub_1008FA0F0(v27, v28, &v63);
        uint64_t v7 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10112E704((uint64_t)v13, type metadata accessor for DiscoveredObject);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unsupported type %s", v25, 0xCu);
        swift_arrayDestroy();
        a1 = v59;
        swift_slowDealloc();
LABEL_10:
        swift_slowDealloc();
      }
      else
      {
        uint64_t v50 = (uint64_t)v13;
LABEL_21:
        sub_10112E704(v50, type metadata accessor for DiscoveredObject);
      }

      uint64_t v51 = type metadata accessor for AccessoryMetadata(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v6, 1, 1, v51);
      uint64_t v52 = (uint64_t)&v3[*(int *)(v60 + 48)];
      sub_10112E69C(a1, (uint64_t)v3, type metadata accessor for DiscoveredObject);
      sub_10112DD3C((uint64_t)v6, v52);
      Just.init(_:)();
      sub_100062734(&qword_10166C170, &qword_10166C168);
      uint64_t v53 = Publisher.eraseToAnyPublisher()();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v9, v7);
      break;
  }
  return v53;
}

uint64_t sub_1011191B8(uint64_t a1)
{
  return sub_101119C80(a1, (uint64_t)&unk_101609F48, (uint64_t)sub_10112E8E4);
}

uint64_t sub_1011191D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v68 = a4;
  uint64_t v6 = type metadata accessor for DiscoveredObject(0);
  uint64_t v65 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v66 = v7;
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MACAddress();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v56 = sub_10000588C(&qword_10164D688);
  uint64_t v54 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v67 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_10166C110);
  uint64_t v57 = *(void *)(v16 - 8);
  uint64_t v58 = v16;
  __chkstk_darwin(v16);
  uint64_t v55 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C(&qword_10166C118);
  uint64_t v60 = *(void *)(v18 - 8);
  uint64_t v61 = v18;
  __chkstk_darwin(v18);
  uint64_t v59 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000588C((uint64_t *)&unk_10166C120);
  uint64_t v63 = *(void *)(v20 - 8);
  uint64_t v64 = v20;
  __chkstk_darwin(v20);
  uint64_t v62 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v23 = result;
    uint64_t v51 = v8;
    uint64_t v52 = a1;
    uint64_t v53 = a2;
    uint64_t v24 = v68 + *(int *)(v6 + 32);
    uint64_t v25 = swift_allocObject();
    swift_weakInit();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v24, v12);
    unint64_t v26 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v27 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v27 + v26, (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
    unint64_t v28 = v27 + ((v14 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
    *(void *)unint64_t v28 = v25;
    *(unsigned char *)(v28 + 8) = 0;
    sub_10000588C(&qword_1016417D8);
    swift_allocObject();
    swift_retain();
    id v69 = (id)Future.init(_:)();
    sub_100062734((unint64_t *)&unk_10166C130, &qword_1016417D8);
    uint64_t v29 = (void *)Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    id v69 = v29;
    id v70 = *(id *)(v23 + 24);
    id v30 = v70;
    uint64_t v31 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    id v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56);
    v32(v11, 1, 1, v31);
    id v33 = v30;
    sub_10000588C(&qword_10164D6D0);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734((unint64_t *)&unk_10166C140, &qword_10164D6D0);
    sub_10027B124();
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4((uint64_t)v11, &qword_10163C6C8);

    swift_release();
    if (qword_1016374A8 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
    sub_100010324(v34, (uint64_t)qword_10166BD60);
    id v69 = *(id *)(v23 + 24);
    id v35 = v69;
    v32(v11, 1, 1, v31);
    sub_100062734(&qword_10164D6E0, &qword_10164D688);
    id v36 = v35;
    os_log_type_t v38 = v55;
    uint64_t v37 = v56;
    os_log_type_t v39 = v67;
    Publisher.timeout<A>(_:scheduler:options:customError:)();
    sub_10001DAB4((uint64_t)v11, &qword_10163C6C8);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v39, v37);
    sub_10000588C(&qword_101641828);
    sub_100062734(&qword_10166C150, &qword_10166C110);
    uint64_t v40 = v58;
    uint64_t v41 = v59;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v38, v40);
    sub_10000588C(&qword_10166C0D8);
    sub_100062734(&qword_10166C158, &qword_10166C118);
    sub_100062734(&qword_10166C0E8, &qword_10166C0D8);
    uint64_t v42 = v61;
    uint64_t v43 = v62;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v41, v42);
    uint64_t v44 = (uint64_t)v51;
    sub_10112E69C(v68, (uint64_t)v51, type metadata accessor for DiscoveredObject);
    unint64_t v45 = (*(unsigned __int8 *)(v65 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
    unint64_t v46 = (v66 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v47 = swift_allocObject();
    sub_10112E634(v44, v47 + v45, type metadata accessor for DiscoveredObject);
    uint64_t v48 = (void *)(v47 + v46);
    uint64_t v49 = v53;
    *uint64_t v48 = v52;
    v48[1] = v49;
    sub_100062734(&qword_10166C160, (uint64_t *)&unk_10166C120);
    swift_retain();
    uint64_t v50 = v64;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v43, v50);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_101119B98(uint64_t a1)
{
  return sub_101119BA4(a1, &qword_101641828);
}

uint64_t sub_101119BA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000588C(a2);
  __chkstk_darwin(v3);
  sub_10112E69C(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
  swift_storeEnumTagMultiPayload();
  return Just.init(_:)();
}

uint64_t sub_101119C60(uint64_t a1)
{
  return sub_101119C80(a1, (uint64_t)&unk_101609EF8, (uint64_t)sub_10112E614);
}

uint64_t sub_101119C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *v3;
  uint64_t v21 = a3;
  uint64_t v5 = type metadata accessor for DiscoveredObject(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = (void *)v3[3];
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    uint64_t v15 = swift_allocObject();
    swift_weakInit();
    sub_10112E69C(a1, (uint64_t)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DiscoveredObject);
    unint64_t v16 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v15;
    sub_10112E634((uint64_t)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for DiscoveredObject);
    *(void *)(v17 + ((v7 + v16 + 7) & 0xFFFFFFFFFFFFFFF8)) = v20;
    sub_10000588C(&qword_10166C068);
    swift_allocObject();
    uint64_t v22 = Future.init(_:)();
    sub_100062734(&qword_10166C070, &qword_10166C068);
    uint64_t v18 = Publisher.eraseToAnyPublisher()();
    swift_release();
    return v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_101119F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v66 = a4;
  uint64_t v6 = type metadata accessor for DiscoveredObject(0);
  uint64_t v64 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = v7;
  uint64_t v8 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10166C078);
  uint64_t v52 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10000588C(&qword_10166C080);
  uint64_t v53 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  unint64_t v16 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_10166C088);
  uint64_t v56 = *(void *)(v17 - 8);
  uint64_t v57 = v17;
  __chkstk_darwin(v17);
  uint64_t v54 = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_10166C090);
  uint64_t v59 = *(void *)(v19 - 8);
  uint64_t v60 = v19;
  __chkstk_darwin(v19);
  uint64_t v58 = (char *)v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_10166C098);
  uint64_t v62 = *(void *)(v21 - 8);
  uint64_t v63 = v21;
  __chkstk_darwin(v21);
  uint64_t v61 = (char *)v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v24 = result;
    uint64_t v49 = v8;
    uint64_t v50 = a1;
    uint64_t v51 = a2;
    swift_retain();
    uint64_t v25 = (void *)sub_1002F8440();
    swift_release();
    id v67 = v25;
    id v68 = *(id *)(v24 + 24);
    id v26 = v68;
    uint64_t v27 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
    v46[1] = v28 + 56;
    v48(v11, 1, 1, v27);
    id v29 = v26;
    sub_10000588C((uint64_t *)&unk_10166C0A0);
    uint64_t v47 = v24;
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734(&qword_10164D788, (uint64_t *)&unk_10166C0A0);
    sub_10027B124();
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4((uint64_t)v11, &qword_10163C6C8);

    swift_release();
    type metadata accessor for BluetoothCommunicationCoordinator.Error();
    sub_100062734((unint64_t *)&unk_10166C0B0, &qword_10166C078);
    sub_10112DAEC((unint64_t *)&unk_1016565D0, (void (*)(uint64_t))type metadata accessor for BluetoothCommunicationCoordinator.Error);
    Publisher<>.setFailureType<A>(to:)();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v14, v12);
    if (qword_1016374A8 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
    sub_100010324(v30, (uint64_t)qword_10166BD60);
    id v67 = *(id *)(v47 + 24);
    id v31 = v67;
    v48(v11, 1, 1, v27);
    sub_100062734((unint64_t *)&unk_10166C0C0, &qword_10166C080);
    id v32 = v31;
    uint64_t v34 = v54;
    uint64_t v33 = v55;
    Publisher.timeout<A>(_:scheduler:options:customError:)();
    sub_10001DAB4((uint64_t)v11, &qword_10163C6C8);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v16, v33);
    sub_10000588C(&qword_101641828);
    sub_100062734(&qword_10166C0D0, &qword_10166C088);
    uint64_t v35 = v57;
    id v36 = v58;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v34, v35);
    sub_10000588C(&qword_10166C0D8);
    sub_100062734(&qword_10166C0E0, &qword_10166C090);
    sub_100062734(&qword_10166C0E8, &qword_10166C0D8);
    uint64_t v37 = v60;
    os_log_type_t v38 = v61;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v36, v37);
    uint64_t v39 = (uint64_t)v49;
    sub_10112E69C(v66, (uint64_t)v49, type metadata accessor for DiscoveredObject);
    unint64_t v40 = (*(unsigned __int8 *)(v64 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
    unint64_t v41 = (v65 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = swift_allocObject();
    sub_10112E634(v39, v42 + v40, type metadata accessor for DiscoveredObject);
    uint64_t v43 = (void *)(v42 + v41);
    uint64_t v44 = v51;
    *uint64_t v43 = v50;
    v43[1] = v44;
    sub_100062734(&qword_10166C0F0, &qword_10166C098);
    swift_retain();
    uint64_t v45 = v63;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v38, v45);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10111A8D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10112E69C(a1, a2, type metadata accessor for AccessoryMetadata);
  sub_10000588C(&qword_101641828);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10111A93C(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  uint64_t v46 = a4;
  uint64_t v47 = a3;
  uint64_t v48 = a2;
  uint64_t v5 = type metadata accessor for BluetoothCommunicationCoordinator.Error();
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v43 - v9;
  uint64_t v45 = sub_10000588C(&qword_10166C0F8);
  __chkstk_darwin(v45);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DiscoveredObject(0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  unint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v43 - v17;
  uint64_t v19 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v43 = *(void *)(v19 - 8);
  uint64_t v44 = v19;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C(&qword_101641828);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v24, &qword_101641828);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10112E634((uint64_t)v24, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_10170DE50);
    sub_10112E69C(v48, (uint64_t)v16, type metadata accessor for DiscoveredObject);
    sub_10112E69C((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      uint64_t v29 = sub_100264550();
      uint64_t v49 = sub_1008FA0F0(v29, v30, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10112E704((uint64_t)v16, type metadata accessor for DiscoveredObject);
      *(_WORD *)(v28 + 12) = 2080;
      unint64_t v31 = sub_1011CE8B8();
      uint64_t v49 = sub_1008FA0F0(v31, v32, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10112E704((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to fetch metadata for %s. Error %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10112E704((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      sub_10112E704((uint64_t)v16, type metadata accessor for DiscoveredObject);
    }
    uint64_t v33 = (uint64_t)v10;
    uint64_t v34 = (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error;
  }
  else
  {
    sub_10112E634((uint64_t)v24, (uint64_t)v21, type metadata accessor for AccessoryMetadata);
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170DE50);
    sub_10112E69C(v48, (uint64_t)v18, type metadata accessor for DiscoveredObject);
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v38 = 136315138;
      uint64_t v39 = sub_100264550();
      uint64_t v49 = sub_1008FA0F0(v39, v40, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10112E704((uint64_t)v18, type metadata accessor for DiscoveredObject);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Successfully fetched metadata for %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10112E704((uint64_t)v18, type metadata accessor for DiscoveredObject);
    }

    uint64_t v41 = (uint64_t)&v12[*(int *)(sub_10000588C((uint64_t *)&unk_10166C100) + 48)];
    sub_10112E69C(v48, (uint64_t)v12, type metadata accessor for DiscoveredObject);
    sub_10112E69C((uint64_t)v21, v41, type metadata accessor for AccessoryMetadata);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v41, 0, 1, v44);
    swift_storeEnumTagMultiPayload();
    v47(v12);
    sub_10001DAB4((uint64_t)v12, &qword_10166C0F8);
    uint64_t v34 = type metadata accessor for AccessoryMetadata;
    uint64_t v33 = (uint64_t)v21;
  }
  return sub_10112E704(v33, v34);
}

uint64_t sub_10111B074(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016653B0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DiscoveredObject(0);
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v31 = v10;
  uint64_t v32 = (uint64_t)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - v11;
  if (qword_101636AD0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170DE50);
  sub_10112E69C(a1, (uint64_t)v12, type metadata accessor for DiscoveredObject);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    unint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v29 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v34 = v17;
    uint64_t v27 = a1;
    uint64_t v28 = v6;
    *(_DWORD *)unint64_t v16 = 136315138;
    uint64_t v18 = sub_100264550();
    uint64_t v33 = sub_1008FA0F0(v18, v19, &v34);
    a1 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10112E704((uint64_t)v12, type metadata accessor for DiscoveredObject);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Validate %s", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v29;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10112E704((uint64_t)v12, type metadata accessor for DiscoveredObject);
  }

  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  uint64_t v21 = v32;
  sub_10112E69C(a1, v32, type metadata accessor for DiscoveredObject);
  sub_10001D074(a2, (uint64_t)v7, &qword_1016653B0);
  unint64_t v22 = (*(unsigned __int8 *)(v30 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  unint64_t v23 = (v31 + *(unsigned __int8 *)(v5 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v20;
  sub_10112E634(v21, v24 + v22, type metadata accessor for DiscoveredObject);
  sub_10112DD3C((uint64_t)v7, v24 + v23);
  sub_10000588C(&qword_10166BFC0);
  swift_allocObject();
  return Future.init(_:)();
}

uint64_t sub_10111B488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v104 = a5;
  uint64_t v110 = a4;
  uint64_t Strong = a3;
  uint64_t v7 = sub_10000588C(&qword_10166BFC8);
  uint64_t v106 = *(void *)(v7 - 8);
  uint64_t v107 = v7;
  __chkstk_darwin(v7);
  uint64_t v105 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000588C((uint64_t *)&unk_10166BFD0);
  uint64_t v86 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v85 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v10 - 8);
  uint64_t v102 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v89 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v84 = (uint64_t)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_1016653B0);
  uint64_t v90 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v90 + 64);
  uint64_t v16 = __chkstk_darwin(v14 - 8);
  uint64_t v91 = (uint64_t)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v83 - v17;
  uint64_t v96 = sub_10000588C(&qword_10166BFE0);
  uint64_t v95 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v92 = (char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000588C(&qword_10166BFE8);
  uint64_t v97 = *(void *)(v20 - 8);
  uint64_t v98 = v20;
  __chkstk_darwin(v20);
  uint64_t v93 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C(&qword_10166BFF0);
  uint64_t v99 = *(void *)(v22 - 8);
  uint64_t v100 = v22;
  __chkstk_darwin(v22);
  id v94 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DiscoveredObject(0);
  uint64_t v109 = *(void *)(v24 - 8);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v27 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = v26;
  __chkstk_darwin(v25);
  uint64_t v103 = (uint64_t)&v83 - v28;
  uint64_t v29 = sub_10000588C(&qword_10166BFF8);
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v83 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = a1;
  *(void *)(v33 + 24) = a2;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v87 = v33;
    int v34 = sub_100264528();
    if ((v34 - 2) >= 2)
    {
      if (v34)
      {
        uint64_t v69 = v103;
        sub_10112E69C(v110, v103, type metadata accessor for DiscoveredObject);
        unint64_t v70 = (*(unsigned __int8 *)(v109 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
        uint64_t v71 = swift_allocObject();
        uint64_t v51 = Strong;
        *(void *)(v71 + 16) = Strong;
        sub_10112E634(v69, v71 + v70, type metadata accessor for DiscoveredObject);
        sub_100062734(&qword_10166C008, (uint64_t *)&unk_10166BFD0);
        uint64_t v64 = v69;
        swift_retain();
        swift_retain();
        Deferred.init(createPublisher:)();
        sub_100062734(&qword_10166C060, &qword_10166BFF8);
        uint64_t v68 = Publisher.eraseToAnyPublisher()();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
        uint64_t v49 = (uint64_t)v102;
      }
      else
      {
        uint64_t v37 = qword_101636AD0;
        swift_retain();
        BOOL v38 = v37 == -1;
        uint64_t v39 = v110;
        if (!v38) {
          swift_once();
        }
        uint64_t v40 = type metadata accessor for Logger();
        sub_100010324(v40, (uint64_t)qword_10170DE50);
        sub_10112E69C(v39, (uint64_t)v27, type metadata accessor for DiscoveredObject);
        uint64_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = (uint8_t *)swift_slowAlloc();
          v111[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v43 = 136315138;
          uint64_t v44 = sub_100264550();
          id v112 = (id)sub_1008FA0F0(v44, v45, v111);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10112E704((uint64_t)v27, type metadata accessor for DiscoveredObject);
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "Unsupported type %s", v43, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10112E704((uint64_t)v27, type metadata accessor for DiscoveredObject);
        }

        uint64_t v49 = (uint64_t)v102;
        uint64_t v64 = v103;
        uint64_t v51 = Strong;
        v111[0] = 0;
        sub_10000588C(&qword_10166C000);
        uint64_t v72 = v85;
        Just.init(_:)();
        sub_100062734(&qword_10166C008, (uint64_t *)&unk_10166BFD0);
        uint64_t v73 = v88;
        uint64_t v68 = Publisher.eraseToAnyPublisher()();
        (*(void (**)(char *, uint64_t))(v86 + 8))(v72, v73);
      }
    }
    else
    {
      sub_10001D074(v104, (uint64_t)v18, &qword_1016653B0);
      uint64_t v35 = v89;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v18, 1, v12) == 1)
      {
        id v36 = _swiftEmptyArrayStorage;
      }
      else
      {
        uint64_t v46 = v84;
        sub_10112E634((uint64_t)v18, v84, type metadata accessor for AccessoryMetadata);
        sub_10000588C(&qword_101649E60);
        unint64_t v47 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
        id v36 = (void *)swift_allocObject();
        *((_OWORD *)v36 + 1) = xmmword_101342130;
        sub_10112E634(v46, (uint64_t)v36 + v47, type metadata accessor for AccessoryMetadata);
      }
      uint64_t v48 = v101;
      uint64_t v49 = (uint64_t)v102;
      swift_retain();
      uint64_t v50 = sub_1003047E8((uint64_t)v36);
      swift_bridgeObjectRelease();
      v111[0] = v50;
      uint64_t v51 = Strong;
      id v112 = *(id *)(Strong + 24);
      id v52 = v112;
      uint64_t v53 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v49, 1, 1, v53);
      id v54 = v52;
      sub_10000588C((uint64_t *)&unk_10166C030);
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      sub_100062734(&qword_10164D6E8, (uint64_t *)&unk_10166C030);
      sub_10027B124();
      uint64_t v55 = v92;
      Publisher.receive<A>(on:options:)();
      sub_10001DAB4(v49, &qword_10163C6C8);

      swift_release();
      uint64_t v56 = v103;
      sub_10112E69C(v110, v103, type metadata accessor for DiscoveredObject);
      uint64_t v57 = v91;
      sub_10001D074(v104, v91, &qword_1016653B0);
      unint64_t v58 = (*(unsigned __int8 *)(v109 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
      unint64_t v59 = (v48 + *(unsigned __int8 *)(v90 + 80) + v58) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
      uint64_t v60 = swift_allocObject();
      *(void *)(v60 + 16) = v51;
      sub_10112E634(v56, v60 + v58, type metadata accessor for DiscoveredObject);
      sub_10112DD3C(v57, v60 + v59);
      swift_retain();
      sub_10000588C(&qword_10166C000);
      sub_100062734(&qword_10166C040, &qword_10166BFE0);
      uint64_t v61 = v93;
      uint64_t v62 = v96;
      Publisher.map<A>(_:)();
      swift_release();
      uint64_t v63 = v55;
      uint64_t v64 = v56;
      (*(void (**)(char *, uint64_t))(v95 + 8))(v63, v62);
      v111[0] = 0;
      sub_100062734(&qword_10166C048, &qword_10166BFE8);
      uint64_t v65 = v94;
      uint64_t v66 = v98;
      Publisher.replaceError(with:)();
      (*(void (**)(char *, uint64_t))(v97 + 8))(v61, v66);
      sub_100062734((unint64_t *)&unk_10166C050, &qword_10166BFF0);
      uint64_t v67 = v100;
      uint64_t v68 = Publisher.eraseToAnyPublisher()();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v65, v67);
    }
    v111[0] = v68;
    id v112 = *(id *)(v51 + 24);
    id v74 = v112;
    uint64_t v75 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v49, 1, 1, v75);
    swift_retain();
    id v76 = v74;
    sub_10000588C(&qword_10166C010);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734(&qword_10166C018, &qword_10166C010);
    sub_10027B124();
    uint64_t v77 = v105;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v49, &qword_10163C6C8);

    swift_release();
    sub_10112E69C(v110, v64, type metadata accessor for DiscoveredObject);
    unint64_t v78 = (*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
    uint64_t v79 = swift_allocObject();
    uint64_t v80 = v87;
    *(void *)(v79 + 16) = sub_1003B4058;
    *(void *)(v79 + 24) = v80;
    sub_10112E634(v64, v79 + v78, type metadata accessor for DiscoveredObject);
    sub_100062734(&qword_10166C028, &qword_10166BFC8);
    uint64_t v81 = v107;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v106 + 8))(v77, v81);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain();
  }
  return swift_release();
}

uint64_t sub_10111C43C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AccessoryProductInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = type metadata accessor for AccessoryMetadata(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 1, 1, v10);
  uint64_t v11 = sub_10111CB60(a2, (uint64_t)v8, (uint64_t)v5);
  sub_10001DAB4((uint64_t)v5, &qword_1016653B0);
  sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10166BFA0);
  v13[1] = v11;
  sub_10000588C(&qword_10166C000);
  return Just.init(_:)();
}

uint64_t sub_10111C5E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a1;
  uint64_t v12 = *(void *)(*a1 + 16);
  uint64_t v13 = type metadata accessor for AccessoryProductInfo();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v14;
  if (v12)
  {
    sub_10112E69C(v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v13);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v10, 1, 1, v13);
  }
  uint64_t v16 = sub_10111CB60(a2, (uint64_t)v10, a3);
  uint64_t result = sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10166BFA0);
  *a4 = v16;
  return result;
}

void sub_10111C750(void **a1, void (*a2)(void, void), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DiscoveredObject(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  if (v10)
  {
    uint64_t v11 = qword_101636AD0;
    id v12 = v10;
    if (v11 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170DE50);
    id v14 = v12;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v34 = v32;
      *(_DWORD *)uint64_t v17 = 136315138;
      v30[1] = v17 + 4;
      uint64_t v31 = v17;
      id v18 = [v14 debugDescription];
      uint64_t v19 = a2;
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v22 = v21;

      uint64_t v23 = v20;
      a2 = v19;
      uint64_t v33 = sub_1008FA0F0(v23, v22, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Successfully constructed unknown beacon %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v25 = v14;
    a2(v10, 0);
  }
  else
  {
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100010324(v24, (uint64_t)qword_10170DE50);
    sub_10112E69C(a4, (uint64_t)v9, type metadata accessor for DiscoveredObject);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v28 = sub_100264550();
      uint64_t v33 = sub_1008FA0F0(v28, v29, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10112E704((uint64_t)v9, type metadata accessor for DiscoveredObject);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to construct unknown beacon: %s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10112E704((uint64_t)v9, type metadata accessor for DiscoveredObject);
    }
  }
}

uint64_t sub_10111CB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v272 = a3;
  uint64_t v274 = a2;
  v283 = (void *)a1;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v4 - 8);
  v240 = (char *)&v225 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v242 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v236 = *(void *)(v242 - 8);
  uint64_t v6 = __chkstk_darwin(v242);
  uint64_t v233 = (uint64_t)&v225 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v234 = (uint64_t)&v225 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v235 = (uint64_t)&v225 - v11;
  __chkstk_darwin(v10);
  uint64_t v237 = (uint64_t)&v225 - v12;
  uint64_t v13 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v13 - 8);
  uint64_t v239 = (char *)&v225 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_101657910);
  __chkstk_darwin(v15 - 8);
  uint64_t v248 = (uint64_t)&v225 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v249 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v247 = *(void *)(v249 - 8);
  uint64_t v17 = __chkstk_darwin(v249);
  uint64_t v241 = (uint64_t)&v225 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  v260 = (char *)&v225 - v20;
  __chkstk_darwin(v19);
  uint64_t v243 = (uint64_t)&v225 - v21;
  uint64_t v256 = type metadata accessor for DispatchTime();
  uint64_t v255 = *(void *)(v256 - 8);
  uint64_t v22 = __chkstk_darwin(v256);
  uint64_t v253 = (char *)&v225 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v254 = (char *)&v225 - v24;
  uint64_t v244 = sub_10000588C(&qword_101660A90);
  __chkstk_darwin(v244);
  uint64_t v245 = (uint64_t)&v225 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v26 - 8);
  uint64_t v259 = (uint64_t)&v225 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v280 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v258 = *(void *)(v280 - 8);
  uint64_t v28 = __chkstk_darwin(v280);
  uint64_t v251 = (uint64_t)&v225 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v250 = (uint64_t)&v225 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v246 = (uint64_t)&v225 - v33;
  __chkstk_darwin(v32);
  uint64_t v271 = (uint64_t)&v225 - v34;
  uint64_t v35 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v35 - 8);
  uint64_t v268 = (uint64_t)&v225 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v37 - 8);
  uint64_t v266 = (uint64_t)&v225 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v40 = __chkstk_darwin(v39 - 8);
  unint64_t v264 = (char *)&v225 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __chkstk_darwin(v40);
  v263 = (char *)&v225 - v43;
  __chkstk_darwin(v42);
  v265 = (char *)&v225 - v44;
  uint64_t v262 = type metadata accessor for Date();
  uint64_t v261 = *(void *)(v262 - 8);
  __chkstk_darwin(v262);
  uint64_t v277 = (uint64_t)&v225 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v47 = __chkstk_darwin(v46 - 8);
  v267 = (char *)&v225 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  uint64_t v50 = (char *)&v225 - v49;
  uint64_t v279 = type metadata accessor for MACAddress();
  uint64_t v275 = *(void *)(v279 - 8);
  uint64_t v51 = __chkstk_darwin(v279);
  uint64_t v257 = (char *)&v225 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  v276 = (char *)&v225 - v53;
  uint64_t v54 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v54 - 8);
  os_log_t v278 = (os_log_t)((char *)&v225 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v273 = type metadata accessor for UUID();
  uint64_t v270 = *(void *)(v273 - 8);
  uint64_t v56 = __chkstk_darwin(v273);
  v238 = (char *)&v225 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v56);
  unint64_t v59 = (char *)&v225 - v58;
  int64_t v60 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v61 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v63 = (uint64_t *)((char *)&v225 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v64 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v65 = *(v64 - 1);
  __chkstk_darwin(v64);
  uint64_t v67 = (Class *)((char *)&v225 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v282 = (uint64_t)v3;
  Class isa = v3[3].isa;
  *uint64_t v67 = isa;
  (*(void (**)(Class *, void, void *))(v65 + 104))(v67, enum case for DispatchPredicate.onQueue(_:), v64);
  uint64_t v69 = isa;
  unint64_t v70 = _dispatchPreconditionTest(_:)();
  (*(void (**)(Class *, void *))(v65 + 8))(v67, v64);
  if ((v70 & 1) == 0)
  {
    __break(1u);
    goto LABEL_61;
  }
  id v72 = 0;
  uint64_t v73 = (char *)v283 + *(int *)(type metadata accessor for DiscoveredObject(0) + 36);
  unint64_t v281 = *((void *)v73 + 1);
  if ((v281 & 0x2000000000000000) != 0) {
    return (uint64_t)v72;
  }
  uint64_t v67 = *(Class **)v73;
  id v74 = (void **)(*(void *)(v282 + 96) + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
  swift_beginAccess();
  uint64_t v75 = *v74;
  if (v75)
  {
    sub_1001A1790((uint64_t)v67, v281);
    uint64_t v64 = v75;
    [v64 coordinate];
    *uint64_t v63 = v76;
    [v64 coordinate];
    v63[1] = v77;
    [v64 horizontalAccuracy];
    v63[2] = v78;
    id v79 = [v64 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v80 = (void *)sub_100A716D4(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    unint64_t v70 = v80[2];
    unint64_t v71 = v80[3];
    v284 = v80;
    int64_t v60 = v70 + 1;
    os_log_t v3 = v278;
    if (v70 < v71 >> 1)
    {
LABEL_5:
      uint64_t v81 = v284;
      v284[2] = v60;
      sub_10112E634((uint64_t)v63, (uint64_t)v81+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(void *)(v61 + 72) * v70, type metadata accessor for WildModeTrackingLocation);

      unint64_t v82 = v281;
      goto LABEL_7;
    }
LABEL_61:
    v284 = (void *)sub_100A716D4(v71 > 1, v60, 1, (unint64_t)v284);
    goto LABEL_5;
  }
  unint64_t v82 = v281;
  sub_1000361E0((uint64_t)v67, v281);
  v284 = _swiftEmptyArrayStorage;
  os_log_t v3 = v278;
LABEL_7:
  v230 = v59;
  UUID.init()();
  uint64_t v83 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v270 + 56);
  uint64_t v227 = v270 + 56;
  v226 = v83;
  v83((uint64_t)v3, 1, 1, v273);
  sub_1000361E0((uint64_t)v67, v82);
  uint64_t v84 = static MACAddress.length.getter();
  sub_100435A9C(v84, (uint64_t)v67, v82, (uint64_t *)&v286);
  MACAddress.init(data:type:)();
  uint64_t v85 = v275;
  uint64_t v86 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v275 + 48);
  uint64_t v87 = v279;
  uint64_t v232 = v275 + 48;
  v231 = v86;
  uint64_t result = v86(v50, 1, v279);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v269 = swift_allocBox();
    uint64_t v252 = v89;
    uint64_t v90 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
    uint64_t v229 = v85 + 32;
    v228 = v90;
    v90(v276, v50, v87);
    swift_bridgeObjectRetain();
    static Date.trustedNow.getter(v277);
    uint64_t v91 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v261 + 56);
    uint64_t v92 = (uint64_t)v265;
    uint64_t v93 = v262;
    v91(v265, 1, 1, v262);
    LODWORD(v283) = sub_100264528();
    uint64_t v94 = v266;
    sub_10001D074(v272, v266, &qword_1016653B0);
    uint64_t v95 = v268;
    sub_10001D074(v274, v268, (uint64_t *)&unk_10166BFA0);
    uint64_t v96 = (uint64_t)v263;
    v91(v263, 1, 1, v93);
    uint64_t v97 = (uint64_t)v264;
    v91(v264, 1, 1, v93);
    sub_1000361E0((uint64_t)v67, v82);
    uint64_t v224 = v95;
    uint64_t v98 = v279;
    sub_10028F8FC((uint64_t)v230, (uint64_t)v278, 0, (uint64_t)v276, (uint64_t)v284, 3, v277, v92, v252, 0, 0, v283, v94, v224, 7u, v96, v97, (uint64_t)v67, v82,
      2u,
      0x100u);
    swift_unownedRetainStrong();
    sub_1000361E0((uint64_t)v67, v82);
    uint64_t v99 = static MACAddress.length.getter();
    v283 = v67;
    sub_100435A9C(v99, (uint64_t)v67, v82, (uint64_t *)&v286);
    uint64_t v100 = v267;
    MACAddress.init(data:type:)();
    uint64_t result = v231(v100, 1, v98);
    if (result != 1)
    {
      uint64_t v101 = (uint64_t)v257;
      v228(v257, v100, v98);
      uint64_t v102 = v259;
      sub_10126F314(v101, v259);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v275 + 8))(v101, v98);
      int v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v258 + 48))(v102, 1, v280);
      uint64_t v104 = (uint64_t)v260;
      if (v103 != 1)
      {
        uint64_t v110 = v271;
        sub_10112E634(v102, v271, type metadata accessor for WildModeAssociationRecord);
        uint64_t v111 = (uint64_t)v283;
        if (qword_101636AD0 != -1) {
          swift_once();
        }
        uint64_t v112 = type metadata accessor for Logger();
        uint64_t v113 = sub_100010324(v112, (uint64_t)qword_10170DE50);
        uint64_t v114 = v246;
        sub_10112E69C(v110, v246, type metadata accessor for WildModeAssociationRecord);
        sub_1001A1790(v111, v82);
        sub_1000361E0(v111, v82);
        __int16 v115 = Logger.logObject.getter();
        os_log_type_t v116 = static os_log_type_t.default.getter();
        BOOL v117 = os_log_type_enabled(v115, v116);
        uint64_t v118 = v274;
        uint64_t v282 = v113;
        if (v117)
        {
          uint64_t v119 = swift_slowAlloc();
          os_log_t v285 = (os_log_t)swift_slowAlloc();
          *(_DWORD *)uint64_t v119 = 136315394;
          sub_10112DAEC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v120 = dispatch thunk of CustomStringConvertible.description.getter();
          v286 = (void *)sub_1008FA0F0(v120, v121, (uint64_t *)&v285);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10112E704(v114, type metadata accessor for WildModeAssociationRecord);
          *(_WORD *)(v119 + 12) = 2080;
          v286 = (void *)v111;
          unint64_t v287 = v82;
          sub_10025C42C();
          uint64_t v122 = RawRepresentable<>.hexString.getter();
          v286 = (void *)sub_1008FA0F0(v122, v123, (uint64_t *)&v285);
          uint64_t v118 = v274;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1001A1AD8(v111, v82);
          sub_1001A1AD8(v111, v82);
          _os_log_impl((void *)&_mh_execute_header, v115, v116, "Found existing record %s for advt %s", (uint8_t *)v119, 0x16u);
          swift_arrayDestroy();
          uint64_t v110 = v271;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10112E704(v114, type metadata accessor for WildModeAssociationRecord);
          sub_1001A1AD8(v111, v82);
          sub_1001A1AD8(v111, v82);
        }

        uint64_t v139 = v269;
        os_log_t v285 = 0;
        uint64_t v140 = dispatch_group_create();
        dispatch_group_enter(v140);
        swift_unownedRetainStrong();
        uint64_t v141 = v250;
        sub_10112E69C(v110, v250, type metadata accessor for WildModeAssociationRecord);
        uint64_t v142 = v140;
        swift_retain();
        uint64_t v143 = sub_10111F264(v141, (uint64_t)v284, v272, v118);
        __chkstk_darwin(v143);
        OS_dispatch_queue.sync<A>(execute:)();
        sub_100AA5514();
        uint64_t v144 = v245;
        sub_10112E69C(v141, v245, type metadata accessor for WildModeAssociationRecord);
        swift_storeEnumTagMultiPayload();
        sub_10111F9F4(v144, v142, v139, (uint64_t *)&v285);
        sub_10001DAB4(v144, &qword_101660A90);
        sub_10112E704(v141, type metadata accessor for WildModeAssociationRecord);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();

        unint64_t v145 = v253;
        static DispatchTime.now()();
        Swift::String v146 = v254;
        + infix(_:_:)();
        uint64_t v147 = *(void (**)(char *, uint64_t))(v255 + 8);
        uint64_t v148 = v256;
        v147(v145, v256);
        OS_dispatch_group.wait(timeout:)();
        v147(v146, v148);
        if (static DispatchTimeoutResult.== infix(_:_:)())
        {
          uint64_t v149 = Logger.logObject.getter();
          os_log_type_t v150 = static os_log_type_t.error.getter();
          BOOL v151 = os_log_type_enabled(v149, v150);
          uint64_t v152 = (uint64_t)v283;
          uint64_t v153 = v271;
          if (v151)
          {
            uint64_t v154 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v154 = 0;
            _os_log_impl((void *)&_mh_execute_header, v149, v150, "Timed out modifying UT record", v154, 2u);
            swift_slowDealloc();
          }

          sub_1001A1AD8(v152, v82);
          sub_10112E704(v153, type metadata accessor for WildModeAssociationRecord);
        }
        else
        {
          sub_10112E704(v271, type metadata accessor for WildModeAssociationRecord);

          swift_beginAccess();
          uint64_t v155 = (uint64_t)v283;
          if (!v285) {
            goto LABEL_59;
          }
          sub_1001A1AD8((uint64_t)v283, v82);
        }
        swift_errorRelease();
LABEL_54:
        swift_release();
        return 0;
      }
      sub_10001DAB4(v102, &qword_1016511E0);
      swift_unownedRetainStrong();
      type metadata accessor for BeaconKeyManager(0);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      swift_release();
      uint64_t v105 = v248;
      uint64_t v106 = (uint64_t)v283;
      sub_1012E41F8(v248);
      swift_release();
      uint64_t v107 = v249;
      int v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v247 + 48))(v105, 1, v249);
      uint64_t v109 = v269;
      if (v108 == 1)
      {
        swift_bridgeObjectRelease();
        sub_10001DAB4(v105, &qword_101657910);
      }
      else
      {
        uint64_t v124 = v243;
        sub_10112E634(v105, v243, type metadata accessor for BeaconKeyManager.IndexInformation);
        if (qword_101636AD0 != -1) {
          swift_once();
        }
        uint64_t v125 = type metadata accessor for Logger();
        uint64_t v126 = sub_100010324(v125, (uint64_t)qword_10170DE50);
        sub_10112E69C(v124, v104, type metadata accessor for BeaconKeyManager.IndexInformation);
        uint64_t v127 = v241;
        sub_10112E69C(v124, v241, type metadata accessor for BeaconKeyManager.IndexInformation);
        sub_1001A1790(v106, v82);
        sub_1000361E0(v106, v82);
        uint64_t v279 = v126;
        uint64_t v128 = Logger.logObject.getter();
        os_log_type_t v129 = static os_log_type_t.default.getter();
        int v130 = v129;
        if (os_log_type_enabled(v128, v129))
        {
          uint64_t v131 = v104;
          uint64_t v132 = swift_slowAlloc();
          os_log_t v278 = (os_log_t)swift_slowAlloc();
          os_log_t v285 = v278;
          *(_DWORD *)uint64_t v132 = 136315650;
          sub_10112DAEC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          LODWORD(v277) = v130;
          uint64_t v133 = dispatch thunk of CustomStringConvertible.description.getter();
          v286 = (void *)sub_1008FA0F0(v133, v134, (uint64_t *)&v285);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10112E704(v131, type metadata accessor for BeaconKeyManager.IndexInformation);
          *(_WORD *)(v132 + 12) = 2082;
          sub_10001CD44((void *)(v127 + *(int *)(v107 + 20)), *(void *)(v127 + *(int *)(v107 + 20) + 24));
          uint64_t v135 = dispatch thunk of CustomStringConvertible.description.getter();
          v286 = (void *)sub_1008FA0F0(v135, v136, (uint64_t *)&v285);
          uint64_t v109 = v269;
          unint64_t v82 = v281;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10112E704(v127, type metadata accessor for BeaconKeyManager.IndexInformation);
          *(_WORD *)(v132 + 22) = 2080;
          v286 = (void *)v106;
          unint64_t v287 = v82;
          sub_10025C42C();
          uint64_t v137 = RawRepresentable<>.hexString.getter();
          v286 = (void *)sub_1008FA0F0(v137, v138, (uint64_t *)&v285);
          uint64_t v124 = v243;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1001A1AD8(v106, v82);
          sub_1001A1AD8(v106, v82);
          _os_log_impl((void *)&_mh_execute_header, v128, (os_log_type_t)v277, "Found beacon %s\nand index %{public}s\nfor advt %s.", (uint8_t *)v132, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_1001A1AD8(v106, v82);
          sub_1001A1AD8(v106, v82);
          sub_10112E704(v127, type metadata accessor for BeaconKeyManager.IndexInformation);
          sub_10112E704(v104, type metadata accessor for BeaconKeyManager.IndexInformation);
          swift_bridgeObjectRelease();
        }
        uint64_t v156 = (uint64_t)v240;
        uint64_t v157 = (uint64_t)v239;
        swift_unownedRetainStrong();
        sub_100ACD178(v157);
        swift_release();
        uint64_t v158 = type metadata accessor for OwnedBeaconRecord();
        int v159 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 48))(v157, 1, v158);
        sub_10001DAB4(v157, &qword_10163B9F0);
        uint64_t v160 = v242;
        if (v159 != 1)
        {
          uint64_t v161 = Logger.logObject.getter();
          os_log_type_t v162 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v161, v162))
          {
            v163 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v163 = 0;
            _os_log_impl((void *)&_mh_execute_header, v161, v162, "Beacon belongs to owner. Not including in scan results", v163, 2u);
            swift_slowDealloc();
          }

          sub_1001A1AD8(v106, v82);
          sub_10112E704(v124, type metadata accessor for BeaconKeyManager.IndexInformation);
          goto LABEL_54;
        }
        swift_unownedRetainStrong();
        sub_100ACEADC(v124, v156);
        swift_release();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v236 + 48))(v156, 1, v160) != 1)
        {
          uint64_t v164 = v156;
          uint64_t v165 = v237;
          sub_10112E634(v164, v237, type metadata accessor for SharedBeaconRecord);
          int v166 = *(unsigned __int8 *)(v165 + *(int *)(v160 + 64));
          uint64_t v167 = v165;
          uint64_t v168 = v235;
          sub_10112E69C(v167, v235, type metadata accessor for SharedBeaconRecord);
          if (v166 == 1)
          {
            sub_10112E704(v168, type metadata accessor for SharedBeaconRecord);
          }
          else
          {
            int v169 = *(unsigned __int8 *)(v168 + *(int *)(v160 + 64));
            sub_10112E704(v168, type metadata accessor for SharedBeaconRecord);
            if (v169 != 4)
            {
              sub_10112E704(v237, type metadata accessor for SharedBeaconRecord);
              sub_10112E704(v124, type metadata accessor for BeaconKeyManager.IndexInformation);
              goto LABEL_43;
            }
          }
          uint64_t v170 = v234;
          sub_10112E69C(v237, v234, type metadata accessor for SharedBeaconRecord);
          uint64_t v171 = Logger.logObject.getter();
          os_log_type_t v172 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v171, v172))
          {
            unint64_t v173 = (uint8_t *)swift_slowAlloc();
            v284 = (void *)swift_slowAlloc();
            v286 = v284;
            *(_DWORD *)unint64_t v173 = 136315138;
            sub_10112E69C(v170, v233, type metadata accessor for SharedBeaconRecord);
            uint64_t v174 = v242;
            uint64_t v175 = String.init<A>(describing:)();
            os_log_t v285 = (os_log_t)sub_1008FA0F0(v175, v176, (uint64_t *)&v286);
            uint64_t v109 = v269;
            uint64_t v106 = (uint64_t)v283;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10112E704(v170, type metadata accessor for SharedBeaconRecord);
            _os_log_impl((void *)&_mh_execute_header, v171, v172, "Found shared beacon %s", v173, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_10112E704(v243, type metadata accessor for BeaconKeyManager.IndexInformation);
            uint64_t v177 = v252;
          }
          else
          {

            sub_10112E704(v170, type metadata accessor for SharedBeaconRecord);
            sub_10112E704(v124, type metadata accessor for BeaconKeyManager.IndexInformation);
            uint64_t v177 = v252;
            uint64_t v174 = v242;
          }
          uint64_t v178 = v280;
          uint64_t v179 = v177 + *(int *)(v280 + 20);
          sub_10001DAB4(v179, &qword_101638CF0);
          uint64_t v180 = v237;
          uint64_t v181 = v273;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v270 + 16))(v179, v237 + *(int *)(v174 + 20), v273);
          v226(v179, 0, 1, v181);
          v182 = (unsigned __int8 *)(v180 + *(int *)(v174 + 28));
          uint64_t v183 = v177;
          uint64_t v184 = *v182;
          uint64_t v186 = *((void *)v182 + 1);
          uint64_t v185 = *((void *)v182 + 2);
          swift_bridgeObjectRetain();
          sub_10112E704(v180, type metadata accessor for SharedBeaconRecord);
          uint64_t v187 = (void *)(v183 + *(int *)(v178 + 48));
          *uint64_t v187 = v184;
          v187[1] = v186;
          v187[2] = v185;
          swift_bridgeObjectRelease();
          goto LABEL_43;
        }
        sub_10112E704(v124, type metadata accessor for BeaconKeyManager.IndexInformation);
        sub_10001DAB4(v156, (uint64_t *)&unk_101653D50);
      }
LABEL_43:
      if (qword_101636AD0 != -1) {
        swift_once();
      }
      uint64_t v188 = type metadata accessor for Logger();
      int64_t v189 = (void *)sub_100010324(v188, (uint64_t)qword_10170DE50);
      sub_1001A1790(v106, v82);
      swift_retain();
      sub_1001A1790(v106, v82);
      swift_retain();
      v284 = v189;
      uint64_t v190 = Logger.logObject.getter();
      os_log_type_t v191 = static os_log_type_t.default.getter();
      int v192 = v191;
      if (os_log_type_enabled(v190, v191))
      {
        uint64_t v193 = swift_slowAlloc();
        uint64_t v280 = swift_slowAlloc();
        os_log_t v285 = (os_log_t)v280;
        *(_DWORD *)uint64_t v193 = 136315394;
        uint64_t v277 = v193 + 4;
        uint64_t v194 = v252;
        swift_beginAccess();
        LODWORD(v279) = v192;
        uint64_t v195 = v82;
        uint64_t v196 = v270;
        uint64_t v197 = *(void (**)(char *, uint64_t, uint64_t))(v270 + 16);
        os_log_t v278 = v190;
        uint64_t v198 = v238;
        uint64_t v199 = v273;
        v197(v238, v194, v273);
        sub_10112DAEC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v200 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v202 = v201;
        (*(void (**)(char *, uint64_t))(v196 + 8))(v198, v199);
        v286 = (void *)sub_1008FA0F0(v200, v202, (uint64_t *)&v285);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v193 + 12) = 2080;
        v286 = (void *)v106;
        unint64_t v287 = v195;
        sub_10025C42C();
        uint64_t v203 = RawRepresentable<>.hexString.getter();
        v286 = (void *)sub_1008FA0F0(v203, v204, (uint64_t *)&v285);
        uint64_t v109 = v269;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001A1AD8(v106, v195);
        sub_1001A1AD8(v106, v195);
        os_log_t v205 = v278;
        _os_log_impl((void *)&_mh_execute_header, v278, (os_log_type_t)v279, "Saving new record %s for advt %s", (uint8_t *)v193, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
        sub_1001A1AD8(v106, v82);
        sub_1001A1AD8(v106, v82);

        uint64_t v194 = v252;
      }
      uint64_t v206 = swift_allocObject();
      *(void *)(v206 + 16) = 0;
      uint64_t v207 = dispatch_group_create();
      dispatch_group_enter(v207);
      swift_unownedRetainStrong();
      swift_beginAccess();
      uint64_t v208 = v251;
      sub_10112E69C(v194, v251, type metadata accessor for WildModeAssociationRecord);
      BOOL v209 = (void *)swift_allocObject();
      v209[2] = v207;
      v209[3] = v109;
      v209[4] = v282;
      v209[5] = v206;
      swift_retain();
      uint64_t v210 = v207;
      swift_retain();
      swift_retain();
      sub_100D34000(v208, (uint64_t)sub_10112DC2C, (uint64_t)v209);
      swift_release();
      swift_release();
      sub_10112E704(v208, type metadata accessor for WildModeAssociationRecord);
      unint64_t v211 = v253;
      static DispatchTime.now()();
      uint64_t v212 = v254;
      + infix(_:_:)();
      uint64_t v213 = *(void (**)(char *, uint64_t))(v255 + 8);
      uint64_t v214 = v256;
      v213(v211, v256);
      OS_dispatch_group.wait(timeout:)();
      v213(v212, v214);
      if (static DispatchTimeoutResult.== infix(_:_:)())
      {
        uint64_t v215 = Logger.logObject.getter();
        os_log_type_t v216 = static os_log_type_t.error.getter();
        BOOL v217 = os_log_type_enabled(v215, v216);
        unint64_t v218 = v281;
        if (!v217)
        {
          sub_1001A1AD8((uint64_t)v283, v281);
          swift_release();
          swift_release();

          return 0;
        }
        unint64_t v219 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v219 = 0;
        _os_log_impl((void *)&_mh_execute_header, v215, v216, "Timed out saving new UT record", v219, 2u);
        swift_slowDealloc();

        uint64_t v220 = (uint64_t)v283;
        uint64_t v221 = v218;
        goto LABEL_53;
      }

      swift_beginAccess();
      unint64_t v82 = v281;
      if (*(void *)(v206 + 16))
      {
        uint64_t v220 = (uint64_t)v283;
        uint64_t v221 = v281;
LABEL_53:
        sub_1001A1AD8(v220, v221);
        swift_release();
        goto LABEL_54;
      }
      swift_release();
      uint64_t v155 = (uint64_t)v283;
LABEL_59:
      swift_unownedRetainStrong();
      uint64_t v222 = v252;
      swift_beginAccess();
      uint64_t v223 = v251;
      sub_10112E69C(v222, v251, type metadata accessor for WildModeAssociationRecord);
      id v72 = sub_10126DFC0(v223);
      swift_release();
      sub_1001A1AD8(v155, v82);
      sub_10112E704(v223, type metadata accessor for WildModeAssociationRecord);
      swift_release();
      return (uint64_t)v72;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10111F264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v61 = a4;
  uint64_t v69 = a3;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v5 - 8);
  uint64_t v62 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AccessoryProductInfo();
  uint64_t v63 = *(void *)(v7 - 8);
  uint64_t v64 = v7;
  __chkstk_darwin(v7);
  uint64_t v59 = (uint64_t)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v9 - 8);
  uint64_t v66 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v67 = *(void *)(v11 - 8);
  uint64_t v68 = v11;
  __chkstk_darwin(v11);
  uint64_t v58 = (uint64_t)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13 - 8);
  uint64_t v72 = (uint64_t)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (double *)((char *)&v56 - v17);
  int64_t v60 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v19 = v60[8];
  uint64_t v65 = a1;
  uint64_t v20 = (unint64_t *)(a1 + v19);
  uint64_t v73 = *(void **)(a1 + v19);
  swift_bridgeObjectRetain();
  uint64_t v21 = swift_bridgeObjectRetain();
  sub_1004457C8(v21);
  uint64_t v22 = sub_101159448((uint64_t)v73);
  swift_bridgeObjectRelease();
  uint64_t v23 = sub_1007108AC(v22);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v73 = _swiftEmptyArrayStorage;
  uint64_t v71 = v23[2];
  if (v71)
  {
    uint64_t v57 = v20;
    unint64_t v26 = 0;
    unint64_t v70 = 0x8000000101407030;
    while (1)
    {
      if (v26 >= v23[2])
      {
        __break(1u);
        return result;
      }
      unint64_t v28 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      uint64_t v29 = *(void *)(v14 + 72);
      sub_10112E69C((uint64_t)v23 + v28 + v29 * v26, (uint64_t)v18, type metadata accessor for WildModeTrackingLocation);
      id v30 = [self sharedInstance];
      unsigned int v31 = [v30 isInternalBuild];

      if (v31
        && (id v32 = [self standardUserDefaults],
            NSString v33 = String._bridgeToObjectiveC()(),
            unsigned int v34 = [v32 BOOLForKey:v33],
            v32,
            v33,
            v34))
      {
        static os_log_type_t.default.getter();
        sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
        uint64_t v27 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
      }
      else
      {
        double v35 = *v18;
        double v36 = v18[1];
        if (qword_101636A88 != -1) {
          swift_once();
        }
        if (!objc_msgSend((id)qword_101642640, "containsCoordinate:", v35, v36)) {
          goto LABEL_16;
        }
        uint64_t v37 = (void *)qword_101642648;
        if (qword_101642648)
        {
          id v38 = (id)qword_101642648;
        }
        else
        {
          uint64_t v39 = (void *)sub_10036D0D4();
          uint64_t v40 = (void *)qword_101642648;
          qword_101642648 = (uint64_t)v39;
          id v38 = v39;

          uint64_t v37 = 0;
        }
        id v41 = v37;
        unsigned __int8 v42 = [v38 containsCoordinate:v35, v36];

        if ((v42 & 1) == 0)
        {
LABEL_16:
          sub_10112E634((uint64_t)v18, v72, type metadata accessor for WildModeTrackingLocation);
          uint64_t v43 = v73;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B7CEC(0, v43[2] + 1, 1);
            uint64_t v43 = v73;
          }
          unint64_t v45 = v43[2];
          unint64_t v44 = v43[3];
          if (v45 >= v44 >> 1)
          {
            sub_1000B7CEC(v44 > 1, v45 + 1, 1);
            uint64_t v43 = v73;
          }
          v43[2] = v45 + 1;
          uint64_t result = sub_10112E634(v72, (uint64_t)v43 + v28 + v45 * v29, type metadata accessor for WildModeTrackingLocation);
          goto LABEL_5;
        }
      }
      uint64_t result = sub_10112E704((uint64_t)v18, type metadata accessor for WildModeTrackingLocation);
LABEL_5:
      if (v71 == ++v26)
      {
        uint64_t v25 = v73;
        uint64_t v20 = v57;
        break;
      }
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v20 = (unint64_t)v25;
  sub_1011163B0(v20);
  uint64_t v46 = v66;
  sub_10001D074(v69, v66, &qword_1016653B0);
  uint64_t v48 = v67;
  uint64_t v47 = v68;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v46, 1, v68) == 1)
  {
    sub_10001DAB4(v46, &qword_1016653B0);
  }
  else
  {
    uint64_t v49 = v58;
    sub_10112E634(v46, v58, type metadata accessor for AccessoryMetadata);
    uint64_t v50 = v65 + v60[14];
    sub_10001DAB4(v50, &qword_1016653B0);
    sub_10112E634(v49, v50, type metadata accessor for AccessoryMetadata);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v50, 0, 1, v47);
  }
  uint64_t v52 = v63;
  uint64_t v51 = v64;
  uint64_t v53 = v62;
  sub_10001D074(v61, v62, (uint64_t *)&unk_10166BFA0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v53, 1, v51) == 1) {
    return sub_10001DAB4(v53, (uint64_t *)&unk_10166BFA0);
  }
  uint64_t v54 = v59;
  sub_10112E634(v53, v59, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  uint64_t v55 = v65 + v60[15];
  sub_10001DAB4(v55, (uint64_t *)&unk_10166BFA0);
  sub_10112E634(v54, v55, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v55, 0, 1, v51);
}

void sub_10111F9F4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t *a4)
{
  dispatch_group_t v34 = a2;
  uint64_t v6 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v33 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v15 = sub_10000588C(&qword_101660A90);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = swift_projectBox();
  sub_10001D074(a1, (uint64_t)v17, &qword_101660A90);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v17;
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170DE50);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v35 = v19;
      v36[0] = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v35 = sub_1008FA0F0(v25, v26, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to update existing UT record. %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_beginAccess();
    *a4 = v19;
    swift_errorRelease();
  }
  else
  {
    sub_10112E634((uint64_t)v17, (uint64_t)v14, type metadata accessor for WildModeAssociationRecord);
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100010324(v27, (uint64_t)qword_10170DE50);
    sub_10112E69C((uint64_t)v14, (uint64_t)v12, type metadata accessor for WildModeAssociationRecord);
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v33 = v18;
      id v30 = (uint8_t *)swift_slowAlloc();
      v36[0] = swift_slowAlloc();
      *(_DWORD *)id v30 = 136315138;
      sub_10112E69C((uint64_t)v12, (uint64_t)v9, type metadata accessor for WildModeAssociationRecord);
      uint64_t v31 = String.init<A>(describing:)();
      uint64_t v35 = sub_1008FA0F0(v31, v32, v36);
      uint64_t v18 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10112E704((uint64_t)v12, type metadata accessor for WildModeAssociationRecord);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully modified existing record %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10112E704((uint64_t)v12, type metadata accessor for WildModeAssociationRecord);
    }

    swift_beginAccess();
    sub_10112DC38((uint64_t)v14, v18);
  }
  dispatch_group_leave(v34);
}

void sub_10111FF14(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = a4;
  dispatch_group_t v40 = a2;
  uint64_t v7 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v37 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v37 - v14;
  uint64_t v16 = sub_10000588C(&qword_101660A90);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t *)((char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = swift_projectBox();
  sub_10001D074(a1, (uint64_t)v18, &qword_101660A90);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v18;
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v21 = (uint64_t *)(a5 + 16);
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170DE50);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v41 = v20;
      v42[0] = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v27 = String.init<A>(describing:)();
      uint64_t v41 = sub_1008FA0F0(v27, v28, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to save new UT record. %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_beginAccess();
    *uint64_t v21 = v20;
    swift_errorRelease();
  }
  else
  {
    sub_10112E634((uint64_t)v18, (uint64_t)v15, type metadata accessor for WildModeAssociationRecord);
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100010324(v29, (uint64_t)qword_10170DE50);
    sub_10112E69C((uint64_t)v15, (uint64_t)v13, type metadata accessor for WildModeAssociationRecord);
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v38 = v19;
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      v42[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v32 = 136315138;
      sub_10112E69C((uint64_t)v13, (uint64_t)v10, type metadata accessor for WildModeAssociationRecord);
      uint64_t v33 = String.init<A>(describing:)();
      uint64_t v41 = sub_1008FA0F0(v33, v34, v42);
      uint64_t v19 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10112E704((uint64_t)v13, type metadata accessor for WildModeAssociationRecord);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Successfully saved new record %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10112E704((uint64_t)v13, type metadata accessor for WildModeAssociationRecord);
    }

    swift_beginAccess();
    sub_10112DC9C((uint64_t)v15, v19);
    unsigned int v35 = v15[*(int *)(v7 + 64)];
    if (v35 != 8)
    {
      if ((v35 & 0xFA) != 0)
      {
        swift_unownedRetainStrong();
        sub_100AA5514();
        swift_release();
      }
      if (v35 > 6 || v35 == 2)
      {
        swift_unownedRetainStrong();
        sub_100AA86FC();
        swift_release();
      }
    }
    sub_10112E704((uint64_t)v15, type metadata accessor for WildModeAssociationRecord);
  }
  dispatch_group_leave(v40);
}

uint64_t sub_1011204B8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [a2 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  id v11 = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0x8000000000000000;
  sub_100173604((uint64_t)v11, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 48) = v14;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_endAccess();
  swift_beginAccess();
  *a3 = *(void *)(a1 + 40);
  return swift_bridgeObjectRetain();
}

void sub_101120640(void *a1)
{
  uint64_t v2 = v1;
  sub_10000588C((uint64_t *)&unk_10166BF50);
  swift_allocObject();
  uint64_t v4 = a1;
  uint64_t v5 = XPCSession.init(connection:)();
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(NSObject **)(v2 + 16);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v2;
    *(void *)(v8 + 24) = v6;
    uint64_t v4 = (void *)swift_allocObject();
    v4[2] = sub_10112DB74;
    v4[3] = v8;
    aBlock[4] = sub_100132424;
    void aBlock[5] = v4;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1000A70B0;
    aBlock[3] = &unk_101609D80;
    uint64_t v9 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v7, v9);
    swift_release();
    _Block_release(v9);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return;
    }
    __break(1u);
  }
  if (qword_101636AD0 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170DE50);
  uint64_t v17 = v4;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 138412290;
    aBlock[0] = v17;
    uint64_t v16 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v17;

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to make XPCSession from %@", v14, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_101120970(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 40);
  swift_beginAccess();
  if ((*(void *)(a1 + 40) & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  swift_retain();
  sub_100DD4F8C(&v11, a2);
  swift_endAccess();
  swift_release();
  if (qword_101636AD0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170DE50);
  swift_retain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2048;
    if ((*v4 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Session count: %ld -> %ld", (uint8_t *)v8, 0x16u);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  swift_beginAccess();
  swift_retain();
  uint64_t v9 = swift_bridgeObjectRetain();
  sub_10112D628(v9);
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_101120BE0(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (uint64_t *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = a1 + 5;
  swift_beginAccess();
  id v9 = a2;
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_10112D7D0(v10);
  swift_bridgeObjectRelease();

  if (v11)
  {
    if ((*v8 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v12 = *(void *)(*v8 + 16);
    }
    uint64_t v35 = v5;
    swift_beginAccess();
    sub_101129BF4();
    swift_endAccess();
    swift_release();
    if ((*v8 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v20 = *(void *)(*v8 + 16);
    }
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170DE50);
    swift_retain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v34 = v4;
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 134218240;
      uint64_t v36 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 12) = 2048;
      uint64_t v25 = *v8;
      if ((v25 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v26 = __CocoaSet.count.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v26 = *(void *)(v25 + 16);
      }
      uint64_t v36 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Session count: %ld -> %ld", (uint8_t *)v24, 0x16u);
      swift_slowDealloc();

      uint64_t v4 = v34;
      if (v20) {
        goto LABEL_26;
      }
    }
    else
    {

      swift_release();
      if (v20) {
        goto LABEL_26;
      }
    }
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Final session removed", v29, 2u);
      swift_slowDealloc();
    }

    sub_10132825C();
    id v30 = (void *)a1[2];
    *os_log_type_t v7 = v30;
    uint64_t v31 = v35;
    (*(void (**)(void *, void, uint64_t))(v35 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
    id v32 = v30;
    LOBYTE(v30) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v31 + 8))(v7, v4);
    if (v30)
    {
      a1[7] = 0;
      swift_release();
LABEL_26:
      swift_release();
      return;
    }
    __break(1u);
  }
  else
  {
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170DE50);
    id v14 = v9;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      uint64_t v36 = (uint64_t)v14;
      id v19 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v14;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Could not find existing session for %@", v17, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_101121164@<X0>(uint64_t a1@<X8>)
{
  uint64_t v63 = a1;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v2 - 8);
  uint64_t v62 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v61 = (uint64_t)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  int64_t v60 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v59 = (char *)&v54 - v10;
  __chkstk_darwin(v9);
  uint64_t v70 = (uint64_t)&v54 - v11;
  uint64_t v68 = type metadata accessor for Date();
  uint64_t v58 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v69 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v13 - 8);
  uint64_t v67 = (uint64_t)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v56 = *(void *)(v15 - 8);
  uint64_t v57 = v15;
  __chkstk_darwin(v15);
  uint64_t v66 = (uint64_t)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v54 - v19;
  uint64_t v21 = type metadata accessor for MACAddress();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v65 = (uint64_t)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v64 = (char *)&v54 - v25;
  id v26 = [v1 advertisement];
  uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v29 = v28;

  sub_100434E0C(v27, v29, &v71);
  uint64_t v30 = v71;
  unint64_t v31 = v72;
  sub_1000361E0(v71, v72);
  uint64_t v32 = static MACAddress.length.getter();
  unint64_t v54 = v31;
  uint64_t v55 = v30;
  sub_100435A9C(v32, v30, v31, &v71);
  MACAddress.init(data:type:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    __break(1u);
    unint64_t v54 = 0xF000000000000000;
    uint64_t v55 = 0;
    uint64_t v20 = (char *)v30;
  }
  uint64_t v33 = (uint64_t)v62;
  uint64_t v35 = v57;
  uint64_t v34 = v58;
  uint64_t v36 = v56;
  uint64_t v37 = v64;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v64, v20, v21);
  id v38 = [v1 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v67, 1, 1, v35);
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 16))(v65, v37, v21);
  static Date.trustedNow.getter(v69);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
  v39(v70, 1, 1, v68);
  unsigned __int8 v40 = sub_101122E6C();
  id v41 = [v1 metadata];
  if (v41)
  {
    unsigned __int8 v42 = v41;
    uint64_t v43 = v61;
    sub_101123168(v61);

    uint64_t v44 = v43;
  }
  else
  {
    uint64_t v45 = type metadata accessor for AccessoryMetadata(0);
    uint64_t v44 = v61;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v61, 1, 1, v45);
  }
  uint64_t v46 = type metadata accessor for AccessoryProductInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v33, 1, 1, v46);
  uint64_t v47 = (uint64_t)v59;
  uint64_t v48 = v68;
  v39((uint64_t)v59, 1, 1, v68);
  uint64_t v49 = (uint64_t)v60;
  v39((uint64_t)v60, 1, 1, v48);
  unsigned __int8 v53 = v40;
  uint64_t v50 = v63;
  sub_10028F8FC(v66, v67, 0, v65, (uint64_t)_swiftEmptyArrayStorage, 3, v69, v70, v63, 0, 0, v53, v44, v33, 8u, v47, v49, v55, v54,
    2u,
    0x100u);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v64, v21);
  uint64_t v51 = type metadata accessor for WildModeAssociationRecord(0);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v50, 0, 1, v51);
}

uint64_t sub_10112190C(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v58 = a5;
  uint64_t v59 = a6;
  uint64_t v62 = a3;
  uint64_t v63 = a4;
  uint64_t v8 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v60 = *(void *)(v11 - 8);
  uint64_t v61 = v11;
  __chkstk_darwin(v11);
  uint64_t v55 = v12;
  uint64_t v56 = (char *)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v13 - 8);
  uint64_t v57 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v53 = *(void *)(v15 - 8);
  uint64_t v16 = *(void *)(v53 + 64);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v54 = (uint64_t)v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)v52 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)v52 - v21;
  uint64_t v23 = sub_10000588C(&qword_101660A90);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v25, &qword_101660A90);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170DE50);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v29 = 138543362;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v65 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v30 = v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Error saving UT alert record. Error - %{public}@", v29, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v39 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v10, 1, 1, v39);
    v62(v10);
    swift_errorRelease();
    return sub_10001DAB4((uint64_t)v10, &qword_101649E40);
  }
  else
  {
    sub_10112E634((uint64_t)v25, (uint64_t)v22, type metadata accessor for WildModeAssociationRecord);
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100010324(v32, (uint64_t)qword_10170DE50);
    sub_10112E69C((uint64_t)v22, (uint64_t)v20, type metadata accessor for WildModeAssociationRecord);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      v52[2] = a2;
      uint64_t v36 = (uint8_t *)v35;
      uint64_t v65 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446210;
      v52[1] = v36 + 4;
      sub_10112DAEC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v64 = sub_1008FA0F0(v37, v38, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10112E704((uint64_t)v20, type metadata accessor for WildModeAssociationRecord);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "UT record saved successfully. Fetching encrypted payload for %{public}s", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10112E704((uint64_t)v20, type metadata accessor for WildModeAssociationRecord);
    }

    unsigned int v41 = v22[*(int *)(v15 + 64)];
    if (v41 != 8)
    {
      if ((v41 & 0xFA) != 0)
      {
        swift_unownedRetainStrong();
        sub_100AA5514();
        swift_release();
      }
      if (v41 > 6 || v41 == 2)
      {
        swift_unownedRetainStrong();
        sub_100AA86FC();
        swift_release();
      }
    }
    uint64_t v42 = type metadata accessor for TaskPriority();
    uint64_t v43 = (uint64_t)v57;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v57, 1, 1, v42);
    uint64_t v45 = v60;
    uint64_t v44 = v61;
    uint64_t v46 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v56, v58, v61);
    uint64_t v47 = v54;
    sub_10112E69C(v59, v54, type metadata accessor for WildModeAssociationRecord);
    unint64_t v48 = (*(unsigned __int8 *)(v45 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
    unint64_t v49 = (v55 + *(unsigned __int8 *)(v53 + 80) + v48) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
    uint64_t v50 = (char *)swift_allocObject();
    *((void *)v50 + 2) = 0;
    *((void *)v50 + 3) = 0;
    uint64_t v51 = v63;
    *((void *)v50 + 4) = v62;
    *((void *)v50 + 5) = v51;
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(&v50[v48], v46, v44);
    sub_10112E634(v47, (uint64_t)&v50[v49], type metadata accessor for WildModeAssociationRecord);
    swift_retain();
    sub_1008F5E44(v43, (uint64_t)&unk_10166C290, (uint64_t)v50);
    swift_release();
    return sub_10112E704((uint64_t)v22, type metadata accessor for WildModeAssociationRecord);
  }
}

uint64_t sub_10112213C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  sub_10000588C(&qword_101649E40);
  v7[22] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URL();
  v7[23] = v8;
  v7[24] = *(void *)(v8 - 8);
  v7[25] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v7[26] = v9;
  v7[27] = *(void *)(v9 - 8);
  v7[28] = swift_task_alloc();
  v7[29] = swift_task_alloc();
  return _swift_task_switch(sub_10112229C, 0, 0);
}

uint64_t sub_10112229C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639258 + dword_101639258);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1011223D8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1011223D8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 248) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1011224D8, 0, 0);
}

uint64_t sub_1011224D8()
{
  uint64_t v32 = v0;
  uint64_t v1 = v0[31];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v2 = v0[29];
    uint64_t v4 = v0[26];
    uint64_t v3 = v0[27];
    uint64_t v5 = v0[20];
    uint64_t v6 = type metadata accessor for Logger();
    v0[32] = sub_100010324(v6, (uint64_t)qword_10170DE50);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v0[33] = v7;
    v0[34] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v7(v2, v5, v4);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[29];
    uint64_t v12 = v0[26];
    uint64_t v13 = v0[27];
    if (v10)
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446210;
      sub_10112DAEC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[17] = sub_1008FA0F0(v15, v16, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v17(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Fetching encrypted serial number for %{public}s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v17(v0[29], v0[26]);
    }

    v0[35] = v17;
    os_log_type_t v28 = (void *)swift_task_alloc();
    v0[36] = v28;
    *os_log_type_t v28 = v0;
    v28[1] = sub_1011228F4;
    uint64_t v29 = v0[25];
    uint64_t v30 = v0[21];
    return sub_10123333C(v29, v30);
  }
  else
  {
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100010324(v18, (uint64_t)qword_10170DE50);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Missing OwnerCommandService to fetchUnauthorizedEncryptedPayload!", v21, 2u);
      swift_slowDealloc();
    }
    uint64_t v22 = v0[23];
    uint64_t v23 = v0[24];
    uint64_t v24 = v0[22];
    uint64_t v25 = (void (*)(uint64_t))v0[18];

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v24, 1, 1, v22);
    v25(v24);
    sub_10001DAB4(v24, &qword_101649E40);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
}

uint64_t sub_1011228F4()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_101122B30;
  }
  else {
    uint64_t v2 = sub_101122A08;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_101122A08()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v5 = (void (*)(uint64_t))v0[18];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v1, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v4, 0, 1, v3);
  v5(v4);
  swift_release();
  sub_10001DAB4(v4, &qword_101649E40);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_101122B30()
{
  uint64_t v16 = v0;
  (*(void (**)(void, void, void))(v0 + 264))(*(void *)(v0 + 224), *(void *)(v0 + 160), *(void *)(v0 + 208));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 224);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
    uint64_t v4 = *(void *)(v0 + 208);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    sub_10112DAEC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 120) = sub_1008FA0F0(v6, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v13(v3, v4);
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 128) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error fetching encrypted serial number for %{public}s. Error %{public}@", (uint8_t *)v5, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 280))(*(void *)(v0 + 224), *(void *)(v0 + 208));
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v9 = *(void *)(v0 + 176);
  BOOL v10 = *(void (**)(uint64_t))(v0 + 144);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 192) + 56))(v9, 1, 1, *(void *)(v0 + 184));
  v10(v9);
  swift_release();
  swift_errorRelease();
  sub_10001DAB4(v9, &qword_101649E40);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_101122E6C()
{
  uint64_t v1 = v0;
  id v2 = [v0 type];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_15:

    return 0;
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {
LABEL_18:

    return 1;
  }
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;
  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
LABEL_20:

    return 2;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_20;
  }
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;
  if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v23 == v24)
  {

    swift_bridgeObjectRelease_n();
    return 3;
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v25) {
    return 3;
  }
  _StringGuts.grow(_:)(63);
  v26._object = (void *)0x8000000101422CA0;
  v26._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
  String.append(_:)(v26);
  id v27 = [v1 type];
  v28._uint64_t countAndFlagsBits = SPBeaconType.description.getter((uint64_t)v27);
  String.append(_:)(v28);

  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 33;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_101123168@<X0>(uint64_t a1@<X8>)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [v2 productData];
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  uint64_t v12 = sub_1002AB228(v9, v11);
  if (v13 >> 60 != 15)
  {
    uint64_t v14 = v12;
    unint64_t v15 = v13;
    id v16 = [v2 protocolVersion];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    unint64_t v20 = sub_1009CDB04(v17, v19);
    if ((v20 & 0x100000000) == 0)
    {
      unint64_t v73 = v20;
      id v21 = [v2 firmwareVersion];
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v5;
      uint64_t v25 = v24;

      unint64_t v26 = sub_1009CDB04(v22, v25);
      int v27 = WORD1(v26);
      if ((v26 & (unint64_t)&_mh_execute_header) != 0) {
        int v28 = 0;
      }
      else {
        int v28 = v26;
      }
      if ((v26 & (unint64_t)&_mh_execute_header) != 0) {
        int v27 = 0;
      }
      int v71 = v27;
      int v72 = v28;
      if ((v26 & (unint64_t)&_mh_execute_header) != 0) {
        int v29 = 0;
      }
      else {
        int v29 = BYTE3(v26);
      }
      int v70 = v29;
      id v30 = [v2 firmwareVersion];
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;

      uint64_t v34 = sub_100BBAF68(v31, v33);
      uint64_t v68 = v35;
      uint64_t v69 = v34;
      int v67 = v36;
      UUID.init()();
      id v37 = [v2 manufacturerName];
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v65 = v39;
      uint64_t v66 = v38;

      id v40 = [v2 modelName];
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;

      id v64 = [v2 accessoryCategory];
      HIDWORD(v63) = [v2 accessoryCapabilities];
      unsigned int v44 = [v2 batteryType];
      if (v44 >= 3) {
        char v45 = 3;
      }
      else {
        char v45 = v44;
      }
      unsigned int v46 = [v2 batteryState];
      if (v46 >= 4) {
        char v47 = 4;
      }
      else {
        char v47 = v46;
      }
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v7, v4);
      unint64_t v48 = (int *)type metadata accessor for AccessoryMetadata(0);
      unint64_t v49 = (uint64_t *)(a1 + v48[5]);
      *unint64_t v49 = v14;
      v49[1] = v15;
      uint64_t v50 = (uint64_t *)(a1 + v48[6]);
      uint64_t v51 = v65;
      *uint64_t v50 = v66;
      v50[1] = v51;
      uint64_t v52 = (uint64_t *)(a1 + v48[7]);
      uint64_t *v52 = v41;
      v52[1] = v43;
      uint64_t v53 = a1 + v48[8];
      *(_WORD *)uint64_t v53 = v72;
      *(unsigned char *)(v53 + 2) = v71;
      *(unsigned char *)(v53 + 3) = v70;
      uint64_t v54 = a1 + v48[9];
      *(_DWORD *)uint64_t v54 = v73;
      *(unsigned char *)(v54 + 4) = 0;
      uint64_t v55 = a1 + v48[10];
      uint64_t v56 = v68;
      *(void *)uint64_t v55 = v69;
      *(void *)(v55 + 8) = v56;
      *(unsigned char *)(v55 + 16) = v67 & 1;
      uint64_t v57 = a1 + v48[11];
      *(void *)uint64_t v57 = v64;
      *(unsigned char *)(v57 + 8) = 0;
      uint64_t v58 = a1 + v48[12];
      *(_DWORD *)uint64_t v58 = HIDWORD(v63);
      *(unsigned char *)(v58 + 4) = 0;
      *(unsigned char *)(a1 + v48[13]) = v45;
      *(unsigned char *)(a1 + v48[14]) = v47;
      uint64_t v59 = (void *)(a1 + v48[15]);
      *uint64_t v59 = 0;
      v59[1] = 0xE000000000000000;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v48 - 1) + 56))(a1, 0, 1, v48);
    }
    sub_100037A24(v14, v15);
  }
  uint64_t v61 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56);

  return v62(a1, 1, 1, v61);
}

unint64_t sub_1011235AC()
{
  return 0xD000000000000017;
}

uint64_t sub_1011235C8(uint64_t a1, uint64_t a2)
{
  return sub_101123658(a1, a2, (uint64_t *)&unk_10166C2B0, (uint64_t *)&unk_10165F1F0, (void (*)(unint64_t))sub_100DD633C, (unint64_t *)&unk_101666860);
}

Swift::Int sub_1011235F8(uint64_t a1, uint64_t a2)
{
  return sub_1011238B0(a1, a2, &qword_10165EF88, &qword_10163B870, (uint64_t)SPBeaconShare_ptr, (void (*)(unint64_t))sub_100DD77C0);
}

uint64_t sub_101123628(uint64_t a1, uint64_t a2)
{
  return sub_101123658(a1, a2, (uint64_t *)&unk_10166C2D0, (uint64_t *)&unk_10163B860, (void (*)(unint64_t))sub_100DD77CC, &qword_10165F6F0);
}

uint64_t sub_101123658(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void (*a5)(unint64_t), unint64_t *a6)
{
  if (a2)
  {
    sub_10000588C(a3);
    uint64_t v8 = static _SetStorage.convert(_:capacity:)();
    uint64_t v22 = v8;
    __CocoaSet.makeIterator()();
    for (; __CocoaSet.Iterator.next()(); ++*(void *)(v8 + 16))
    {
      sub_10000588C(a4);
      swift_dynamicCast();
      unint64_t v15 = *(void *)(v8 + 16);
      if (*(void *)(v8 + 24) <= v15)
      {
        a5(v15 + 1);
        uint64_t v8 = v22;
      }
      sub_100062734(a6, a4);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v10 = v8 + 56;
      uint64_t v11 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v12 = result & ~v11;
      unint64_t v13 = v12 >> 6;
      if (((-1 << v12) & ~*(void *)(v8 + 56 + 8 * (v12 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v12) & ~*(void *)(v8 + 56 + 8 * (v12 >> 6)))) | v12 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v16 = 0;
        unint64_t v17 = (unint64_t)(63 - v11) >> 6;
        do
        {
          if (++v13 == v17 && (v16 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          BOOL v18 = v13 == v17;
          if (v13 == v17) {
            unint64_t v13 = 0;
          }
          v16 |= v18;
          uint64_t v19 = *(void *)(v10 + 8 * v13);
        }
        while (v19 == -1);
        unint64_t v14 = __clz(__rbit64(~v19)) + (v13 << 6);
      }
      *(void *)(v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v8 + 48) + 8 * v14) = v21;
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  return v8;
}

Swift::Int sub_101123880(uint64_t a1, uint64_t a2)
{
  return sub_1011238B0(a1, a2, &qword_10165EFB0, (unint64_t *)&qword_10166BF90, (uint64_t)FAFamilyMember_ptr, (void (*)(unint64_t))sub_100DD7DEC);
}

Swift::Int sub_1011238B0(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, void (*a6)(unint64_t))
{
  if (a2)
  {
    sub_10000588C(a3);
    uint64_t v8 = static _SetStorage.convert(_:capacity:)();
    uint64_t v21 = v8;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_10001D4B0(0, a4);
      do
      {
        swift_dynamicCast();
        uint64_t v8 = v21;
        unint64_t v15 = *(void *)(v21 + 16);
        if (*(void *)(v21 + 24) <= v15)
        {
          a6(v15 + 1);
          uint64_t v8 = v21;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
        uint64_t v10 = v8 + 56;
        uint64_t v11 = -1 << *(unsigned char *)(v8 + 32);
        unint64_t v12 = result & ~v11;
        unint64_t v13 = v12 >> 6;
        if (((-1 << v12) & ~*(void *)(v8 + 56 + 8 * (v12 >> 6))) != 0)
        {
          unint64_t v14 = __clz(__rbit64((-1 << v12) & ~*(void *)(v8 + 56 + 8 * (v12 >> 6)))) | v12 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v16 = 0;
          unint64_t v17 = (unint64_t)(63 - v11) >> 6;
          do
          {
            if (++v13 == v17 && (v16 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v18 = v13 == v17;
            if (v13 == v17) {
              unint64_t v13 = 0;
            }
            v16 |= v18;
            uint64_t v19 = *(void *)(v10 + 8 * v13);
          }
          while (v19 == -1);
          unint64_t v14 = __clz(__rbit64(~v19)) + (v13 << 6);
        }
        *(void *)(v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        *(void *)(*(void *)(v8 + 48) + 8 * v14) = v20;
        ++*(void *)(v8 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v8;
}

Swift::Int sub_101123AB4(uint64_t a1, uint64_t a2)
{
  return sub_1011238B0(a1, a2, (uint64_t *)&unk_10165EF40, (unint64_t *)&unk_10166BF70, (uint64_t)SPLocationProvider_ptr, (void (*)(unint64_t))sub_100DD8440);
}

Swift::Int sub_101123AE4(uint64_t a1, uint64_t a2)
{
  return sub_1011238B0(a1, a2, (uint64_t *)&unk_10166C260, (unint64_t *)&unk_101653D70, (uint64_t)SPSafeLocation_ptr, (void (*)(unint64_t))sub_100DD8A10);
}

Swift::Int sub_101123B14(uint64_t a1, uint64_t a2)
{
  return sub_1011238B0(a1, a2, (uint64_t *)&unk_10165F070, (unint64_t *)&qword_10163B900, (uint64_t)SPHandle_ptr, (void (*)(unint64_t))sub_100DD90E4);
}

uint64_t sub_101123B44(uint64_t a1, uint64_t a2)
{
  return sub_101123658(a1, a2, &qword_10165F1A8, (uint64_t *)&unk_10165F190, (void (*)(unint64_t))sub_100DDA690, (unint64_t *)&unk_101666830);
}

Swift::Int sub_101123B74(uint64_t a1, uint64_t a2)
{
  return sub_1011238B0(a1, a2, (uint64_t *)&unk_10165F0B0, (unint64_t *)&unk_10164DC30, (uint64_t)SPBeacon_ptr, (void (*)(unint64_t))sub_100DDB04C);
}

uint64_t sub_101123BA4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10000588C((uint64_t *)&unk_10165F260);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for AnyCancellable();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_100DDB970();
          uint64_t v2 = v14;
        }
        sub_10112DAEC((unint64_t *)&unk_10165F250, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  return v2;
}

Swift::Int sub_101123DE0(uint64_t a1, uint64_t a2)
{
  return sub_1011238B0(a1, a2, (uint64_t *)&unk_10165F230, &qword_10164DCA0, (uint64_t)SPStandaloneBeacon_ptr, (void (*)(unint64_t))sub_100DDBC98);
}

Swift::Int sub_101123E10(uint64_t a1, uint64_t a2)
{
  return sub_1011238B0(a1, a2, (uint64_t *)&unk_10165F220, &qword_10164DC58, (uint64_t)SPBeaconGroup_ptr, (void (*)(unint64_t))sub_100DDBCA4);
}

Swift::Int sub_101123E40(uint64_t a1, uint64_t a2)
{
  return sub_1011238B0(a1, a2, &qword_10165F240, &qword_10164D830, (uint64_t)SPTrackingAvoidanceResult_ptr, (void (*)(unint64_t))sub_100DDBF30);
}

uint64_t sub_101123E70(uint64_t a1, uint64_t a2)
{
  return sub_101123658(a1, a2, (uint64_t *)&unk_10165F100, (uint64_t *)&unk_10165F610, (void (*)(unint64_t))sub_100DDC354, &qword_10165F0F0);
}

Swift::Int sub_101123EA0(uint64_t a1, uint64_t a2)
{
  return sub_1011238B0(a1, a2, &qword_10165EF70, (unint64_t *)&unk_10166BF80, (uint64_t)SPCBPeripheralManagerSessionKey_ptr, (void (*)(unint64_t))sub_100DDC370);
}

uint64_t sub_101123ED0(uint64_t a1, uint64_t a2)
{
  return sub_101123658(a1, a2, (uint64_t *)&unk_10165F1C0, (uint64_t *)&unk_10163F360, (void (*)(unint64_t))sub_100DDC604, (unint64_t *)&unk_10165F1D0);
}

Swift::Int sub_101123F00(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10000588C(&qword_10166C280);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v15 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for Service();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v15;
        if (*(void *)(v15 + 24) <= *(void *)(v15 + 16))
        {
          sub_100DDC620();
          uint64_t v2 = v15;
        }
        Hasher.init(_seed:)();
        id v3 = *(id *)(v14 + 32);
        NSObject.hash(into:)();

        Swift::Int result = Hasher._finalize()();
        uint64_t v5 = v2 + 56;
        uint64_t v6 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v7 = result & ~v6;
        unint64_t v8 = v7 >> 6;
        if (((-1 << v7) & ~*(void *)(v2 + 56 + 8 * (v7 >> 6))) != 0)
        {
          unint64_t v9 = __clz(__rbit64((-1 << v7) & ~*(void *)(v2 + 56 + 8 * (v7 >> 6)))) | v7 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v10 = 0;
          unint64_t v11 = (unint64_t)(63 - v6) >> 6;
          do
          {
            if (++v8 == v11 && (v10 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v12 = v8 == v11;
            if (v8 == v11) {
              unint64_t v8 = 0;
            }
            v10 |= v12;
            uint64_t v13 = *(void *)(v5 + 8 * v8);
          }
          while (v13 == -1);
          unint64_t v9 = __clz(__rbit64(~v13)) + (v8 << 6);
        }
        *(void *)(v5 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        *(void *)(*(void *)(v2 + 48) + 8 * v9) = v14;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

Swift::Int sub_101124114(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10000588C((uint64_t *)&unk_10165F1B0);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v15 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for Characteristic();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v15;
        if (*(void *)(v15 + 24) <= *(void *)(v15 + 16))
        {
          sub_100DDC8E8();
          uint64_t v2 = v15;
        }
        Hasher.init(_seed:)();
        id v3 = *(id *)(v14 + 40);
        NSObject.hash(into:)();

        Swift::Int result = Hasher._finalize()();
        uint64_t v5 = v2 + 56;
        uint64_t v6 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v7 = result & ~v6;
        unint64_t v8 = v7 >> 6;
        if (((-1 << v7) & ~*(void *)(v2 + 56 + 8 * (v7 >> 6))) != 0)
        {
          unint64_t v9 = __clz(__rbit64((-1 << v7) & ~*(void *)(v2 + 56 + 8 * (v7 >> 6)))) | v7 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v10 = 0;
          unint64_t v11 = (unint64_t)(63 - v6) >> 6;
          do
          {
            if (++v8 == v11 && (v10 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v12 = v8 == v11;
            if (v8 == v11) {
              unint64_t v8 = 0;
            }
            v10 |= v12;
            uint64_t v13 = *(void *)(v5 + 8 * v8);
          }
          while (v13 == -1);
          unint64_t v9 = __clz(__rbit64(~v13)) + (v8 << 6);
        }
        *(void *)(v5 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        *(void *)(*(void *)(v2 + 48) + 8 * v9) = v14;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_101124328(uint64_t a1, uint64_t a2)
{
  return sub_101123658(a1, a2, &qword_10165EFC0, &qword_10163D250, (void (*)(unint64_t))sub_100DDD554, (unint64_t *)&qword_101649B80);
}

uint64_t sub_101124358(uint64_t a1, uint64_t a2)
{
  return sub_101123658(a1, a2, &qword_10165F120, &qword_101656E30, (void (*)(unint64_t))sub_100DDD570, (unint64_t *)&qword_10165F110);
}

uint64_t sub_101124388(uint64_t a1, uint64_t a2)
{
  return sub_101123658(a1, a2, (uint64_t *)&unk_10165F060, (uint64_t *)&unk_10165F5F0, (void (*)(unint64_t))sub_100DDD58C, (unint64_t *)&unk_10165F050);
}

Swift::Int sub_1011243B8(uint64_t a1, uint64_t a2)
{
  return sub_1011238B0(a1, a2, &qword_10165F038, (unint64_t *)&unk_10165F040, (uint64_t)CKRecordZoneID_ptr, (void (*)(unint64_t))sub_100DDD5A8);
}

uint64_t sub_1011243E8(uint64_t a1, uint64_t a2)
{
  return sub_101123658(a1, a2, (uint64_t *)&unk_10165EF20, (uint64_t *)&unk_10166BF50, (void (*)(unint64_t))sub_100DDD850, (unint64_t *)&unk_10165EF30);
}

unint64_t sub_101124418(uint64_t a1, uint64_t a2)
{
  return sub_101124444(a1, a2, (uint64_t *)&unk_10165F1F0, (unint64_t *)&unk_101666860);
}

unint64_t sub_101124430(uint64_t a1, uint64_t a2)
{
  return sub_101124444(a1, a2, (uint64_t *)&unk_10163B860, &qword_10165F6F0);
}

unint64_t sub_101124444(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10000588C(a3);
  sub_100062734(a4, a3);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_101124520(uint64_t a1, uint64_t a2)
{
  return sub_101124444(a1, a2, (uint64_t *)&unk_10165F190, (unint64_t *)&unk_101666830);
}

uint64_t sub_101124534(Swift::UInt64 *a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  if ((*a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *a1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((a1[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = a1[1];
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((a1[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = a1[2];
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  uint64_t v7 = type metadata accessor for WildModeTrackingLocation(0);
  type metadata accessor for Date();
  sub_10112DAEC((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._finalize()();
  unint64_t v8 = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
  uint64_t result = sub_10112E634((uint64_t)a1, *(void *)(a2 + 48) + *(void *)(*(void *)(v7 - 8) + 72) * v8, type metadata accessor for WildModeTrackingLocation);
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_1011246A4(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyCancellable();
  sub_10112DAEC((unint64_t *)&unk_10165F250, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_10112478C(uint64_t a1, uint64_t a2)
{
  return sub_101124444(a1, a2, (uint64_t *)&unk_10165F610, &qword_10165F0F0);
}

unint64_t sub_1011247A0(uint64_t a1, uint64_t a2)
{
  return sub_101124444(a1, a2, (uint64_t *)&unk_10163F360, (unint64_t *)&unk_10165F1D0);
}

unint64_t sub_1011247B4(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  id v4 = *(id *)(a1 + 32);
  NSObject.hash(into:)();

  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_101124864(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  id v4 = *(id *)(a1 + 40);
  NSObject.hash(into:)();

  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_101124914(uint64_t a1, uint64_t a2)
{
  return sub_101124444(a1, a2, &qword_10163D250, (unint64_t *)&qword_101649B80);
}

unint64_t sub_101124928(uint64_t a1, uint64_t a2)
{
  return sub_101124444(a1, a2, &qword_101656E30, (unint64_t *)&qword_10165F110);
}

unint64_t sub_10112493C(uint64_t a1, uint64_t a2)
{
  return sub_101124444(a1, a2, (uint64_t *)&unk_10165F5F0, (unint64_t *)&unk_10165F050);
}

unint64_t sub_101124950(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

unint64_t sub_1011249D4(uint64_t a1, uint64_t a2)
{
  return sub_101124444(a1, a2, (uint64_t *)&unk_10166BF50, (unint64_t *)&unk_10165EF30);
}

Swift::Int sub_1011249E8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v141 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v134 = *(void *)(v141 - 8);
  uint64_t v4 = __chkstk_darwin(v141);
  uint64_t v131 = (uint64_t)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v142 = (uint64_t)&v125 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v138 = (uint64_t)&v125 - v9;
  __chkstk_darwin(v8);
  uint64_t v137 = (uint64_t)&v125 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_142;
    }
    if (v11) {
      return sub_1011254C4(0, v11, 1, a1);
    }
    return result;
  }
  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_150;
  }
  Swift::Int v127 = result;
  if (v11 < 2)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    unint64_t v133 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
    if (v11 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      uint64_t v19 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      uint64_t v126 = v17;
      if (v20 >= 2)
      {
        Swift::Int v117 = *a1;
        do
        {
          unint64_t v118 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_137;
          }
          if (!v117) {
            goto LABEL_149;
          }
          uint64_t v119 = v19;
          uint64_t v120 = v19 + 32;
          uint64_t v121 = *(void *)&v19[16 * v118 + 32];
          uint64_t v122 = *(void *)&v19[16 * v20 + 24];
          sub_101125788(v117 + *(void *)(v134 + 72) * v121, v117 + *(void *)(v134 + 72) * *(void *)&v120[16 * v20 - 16], v117 + *(void *)(v134 + 72) * v122, v133);
          if (v2) {
            break;
          }
          if (v122 < v121) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v119 = sub_100B73584((uint64_t)v119);
          }
          if (v118 >= *((void *)v119 + 2)) {
            goto LABEL_139;
          }
          unint64_t v123 = &v119[16 * v118 + 32];
          *(void *)unint64_t v123 = v121;
          *((void *)v123 + 1) = v122;
          unint64_t v124 = *((void *)v119 + 2);
          if (v20 > v124) {
            goto LABEL_140;
          }
          uint64_t v19 = v119;
          memmove(&v119[16 * v20 + 16], &v119[16 * v20 + 32], 16 * (v124 - v20));
          *((void *)v119 + 2) = v124 - 1;
          unint64_t v20 = v124 - 1;
        }
        while (v124 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      v126[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v126 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v134 + 80);
    uint64_t v126 = (void *)v15;
    unint64_t v133 = v15 + ((v16 + 32) & ~v16);
  }
  Swift::Int v18 = 0;
  uint64_t v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v140 = a1;
  while (1)
  {
    Swift::Int v21 = v18;
    Swift::Int v22 = v18 + 1;
    Swift::Int v132 = v18;
    if (v18 + 1 >= v11)
    {
      Swift::Int v39 = v18 + 1;
      goto LABEL_59;
    }
    uint64_t v129 = v2;
    Swift::Int v23 = *(void *)(v134 + 72);
    uint64_t v24 = *a1 + v23 * v22;
    Swift::Int v136 = *a1;
    Swift::Int v25 = v136;
    uint64_t v26 = v137;
    sub_10112E69C(v24, v137, type metadata accessor for WildModeTrackingLocation);
    uint64_t v27 = v25 + v23 * v21;
    uint64_t v28 = v138;
    sub_10112E69C(v27, v138, type metadata accessor for WildModeTrackingLocation);
    LODWORD(v139) = static Date.< infix(_:_:)();
    sub_10112E704(v28, type metadata accessor for WildModeTrackingLocation);
    uint64_t v29 = v26;
    Swift::Int v30 = v136;
    sub_10112E704(v29, type metadata accessor for WildModeTrackingLocation);
    Swift::Int v143 = v23;
    if (v21 + 2 >= v11)
    {
      Swift::Int v33 = v21 + 2;
    }
    else
    {
      Swift::Int v31 = v23;
      uint64_t v128 = v19;
      uint64_t v32 = v23 * v22;
      Swift::Int v33 = v21 + 2;
      uint64_t v34 = v31 * (v21 + 2);
      while (1)
      {
        Swift::Int v35 = v11;
        uint64_t v36 = v137;
        sub_10112E69C(v30 + v34, v137, type metadata accessor for WildModeTrackingLocation);
        uint64_t v37 = v138;
        sub_10112E69C(v30 + v32, v138, type metadata accessor for WildModeTrackingLocation);
        int v38 = static Date.< infix(_:_:)();
        sub_10112E704(v37, type metadata accessor for WildModeTrackingLocation);
        sub_10112E704(v36, type metadata accessor for WildModeTrackingLocation);
        if ((v139 ^ v38)) {
          break;
        }
        v30 += v143;
        ++v33;
        Swift::Int v11 = v35;
        if (v35 == v33)
        {
          Swift::Int v33 = v35;
          uint64_t v19 = v128;
          Swift::Int v21 = v132;
          goto LABEL_25;
        }
      }
      uint64_t v19 = v128;
      Swift::Int v21 = v132;
      Swift::Int v11 = v35;
    }
LABEL_25:
    a1 = v140;
    if ((v139 & 1) == 0)
    {
      Swift::Int v39 = v33;
      goto LABEL_39;
    }
    if (v33 < v21) {
      goto LABEL_143;
    }
    Swift::Int v39 = v33;
    if (v21 < v33) {
      break;
    }
LABEL_39:
    uint64_t v2 = v129;
    if (v39 < v11) {
      goto LABEL_42;
    }
LABEL_59:
    if (v39 < v21) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v139 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v19 = sub_100B729CC(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v66 = *((void *)v19 + 2);
    unint64_t v65 = *((void *)v19 + 3);
    unint64_t v20 = v66 + 1;
    if (v66 >= v65 >> 1) {
      uint64_t v19 = sub_100B729CC((char *)(v65 > 1), v66 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v20;
    int v67 = v19 + 32;
    uint64_t v68 = &v19[16 * v66 + 32];
    Swift::Int v69 = v139;
    *(void *)uint64_t v68 = v21;
    *((void *)v68 + 1) = v69;
    if (v66)
    {
      while (1)
      {
        unint64_t v70 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v75 = &v67[16 * v20];
          uint64_t v76 = *((void *)v75 - 8);
          uint64_t v77 = *((void *)v75 - 7);
          BOOL v81 = __OFSUB__(v77, v76);
          uint64_t v78 = v77 - v76;
          if (v81) {
            goto LABEL_125;
          }
          uint64_t v80 = *((void *)v75 - 6);
          uint64_t v79 = *((void *)v75 - 5);
          BOOL v81 = __OFSUB__(v79, v80);
          uint64_t v73 = v79 - v80;
          char v74 = v81;
          if (v81) {
            goto LABEL_126;
          }
          unint64_t v82 = v20 - 2;
          uint64_t v83 = &v67[16 * v20 - 32];
          uint64_t v85 = *(void *)v83;
          uint64_t v84 = *((void *)v83 + 1);
          BOOL v81 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v81) {
            goto LABEL_128;
          }
          BOOL v81 = __OFADD__(v73, v86);
          uint64_t v87 = v73 + v86;
          if (v81) {
            goto LABEL_131;
          }
          if (v87 >= v78)
          {
            uint64_t v105 = &v67[16 * v70];
            uint64_t v107 = *(void *)v105;
            uint64_t v106 = *((void *)v105 + 1);
            BOOL v81 = __OFSUB__(v106, v107);
            uint64_t v108 = v106 - v107;
            if (v81) {
              goto LABEL_135;
            }
            BOOL v98 = v73 < v108;
            goto LABEL_96;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v99 = *((void *)v19 + 4);
            uint64_t v100 = *((void *)v19 + 5);
            BOOL v81 = __OFSUB__(v100, v99);
            uint64_t v92 = v100 - v99;
            char v93 = v81;
            goto LABEL_90;
          }
          uint64_t v72 = *((void *)v19 + 4);
          uint64_t v71 = *((void *)v19 + 5);
          BOOL v81 = __OFSUB__(v71, v72);
          uint64_t v73 = v71 - v72;
          char v74 = v81;
        }
        if (v74) {
          goto LABEL_127;
        }
        unint64_t v82 = v20 - 2;
        uint64_t v88 = &v67[16 * v20 - 32];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v91 = __OFSUB__(v89, v90);
        uint64_t v92 = v89 - v90;
        char v93 = v91;
        if (v91) {
          goto LABEL_130;
        }
        uint64_t v94 = &v67[16 * v70];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v81 = __OFSUB__(v95, v96);
        uint64_t v97 = v95 - v96;
        if (v81) {
          goto LABEL_133;
        }
        if (__OFADD__(v92, v97)) {
          goto LABEL_134;
        }
        if (v92 + v97 >= v73)
        {
          BOOL v98 = v73 < v97;
LABEL_96:
          if (v98) {
            unint64_t v70 = v82;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v93) {
          goto LABEL_129;
        }
        uint64_t v101 = &v67[16 * v70];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v81 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v81) {
          goto LABEL_132;
        }
        if (v104 < v92) {
          goto LABEL_15;
        }
LABEL_98:
        unint64_t v109 = v70 - 1;
        if (v70 - 1 >= v20)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        Swift::Int v110 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        uint64_t v111 = v19;
        uint64_t v112 = &v67[16 * v109];
        uint64_t v113 = *(void *)v112;
        uint64_t v114 = &v67[16 * v70];
        uint64_t v115 = *((void *)v114 + 1);
        sub_101125788(v110 + *(void *)(v134 + 72) * *(void *)v112, v110 + *(void *)(v134 + 72) * *(void *)v114, v110 + *(void *)(v134 + 72) * v115, v133);
        if (v2) {
          goto LABEL_118;
        }
        if (v115 < v113) {
          goto LABEL_122;
        }
        if (v70 > *((void *)v111 + 2)) {
          goto LABEL_123;
        }
        *(void *)uint64_t v112 = v113;
        *(void *)&v67[16 * v109 + 8] = v115;
        unint64_t v116 = *((void *)v111 + 2);
        if (v70 >= v116) {
          goto LABEL_124;
        }
        uint64_t v19 = v111;
        unint64_t v20 = v116 - 1;
        memmove(&v67[16 * v70], v114 + 16, 16 * (v116 - 1 - v70));
        *((void *)v111 + 2) = v116 - 1;
        a1 = v140;
        if (v116 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_15:
    Swift::Int v11 = a1[1];
    Swift::Int v18 = v139;
    if (v139 >= v11)
    {
      unint64_t v17 = v126;
      goto LABEL_107;
    }
  }
  Swift::Int v139 = v11;
  uint64_t v128 = v19;
  uint64_t v40 = 0;
  Swift::Int v41 = v143;
  uint64_t v42 = v143 * (v33 - 1);
  Swift::Int v43 = v33 * v143;
  Swift::Int v44 = v21;
  uint64_t v45 = v21 * v143;
  do
  {
    if (v44 != v39 + v40 - 1)
    {
      Swift::Int v46 = v136;
      if (!v136) {
        goto LABEL_148;
      }
      unint64_t v47 = v136 + v45;
      uint64_t v48 = v136 + v42;
      sub_10112E634(v136 + v45, v131, type metadata accessor for WildModeTrackingLocation);
      if (v45 < v42 || v47 >= v46 + v43)
      {
        swift_arrayInitWithTakeFrontToBack();
        Swift::Int v41 = v143;
      }
      else
      {
        Swift::Int v41 = v143;
        if (v45 != v42) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      sub_10112E634(v131, v48, type metadata accessor for WildModeTrackingLocation);
      a1 = v140;
      Swift::Int v39 = v33;
    }
    ++v44;
    --v40;
    v42 -= v41;
    v43 -= v41;
    v45 += v41;
  }
  while (v44 < v39 + v40);
  uint64_t v19 = v128;
  uint64_t v2 = v129;
  Swift::Int v21 = v132;
  Swift::Int v11 = v139;
  if (v39 >= v139) {
    goto LABEL_59;
  }
LABEL_42:
  if (__OFSUB__(v39, v21)) {
    goto LABEL_141;
  }
  if (v39 - v21 >= v127) {
    goto LABEL_59;
  }
  if (__OFADD__(v21, v127)) {
    goto LABEL_144;
  }
  if (v21 + v127 >= v11) {
    Swift::Int v49 = v11;
  }
  else {
    Swift::Int v49 = v21 + v127;
  }
  if (v49 >= v21)
  {
    if (v39 != v49)
    {
      uint64_t v128 = v19;
      uint64_t v129 = v2;
      uint64_t v50 = *(void *)(v134 + 72);
      uint64_t v51 = v50 * (v39 - 1);
      uint64_t v135 = v50;
      Swift::Int v52 = v39 * v50;
      Swift::Int v130 = v49;
      do
      {
        uint64_t v54 = 0;
        Swift::Int v139 = v39;
        Swift::Int v136 = v52;
        while (1)
        {
          Swift::Int v143 = v21;
          Swift::Int v55 = *a1;
          uint64_t v56 = v137;
          sub_10112E69C(v52 + v54 + *a1, v137, type metadata accessor for WildModeTrackingLocation);
          uint64_t v57 = v51;
          uint64_t v58 = v51 + v54 + v55;
          uint64_t v59 = a1;
          uint64_t v60 = v138;
          sub_10112E69C(v58, v138, type metadata accessor for WildModeTrackingLocation);
          char v61 = static Date.< infix(_:_:)();
          sub_10112E704(v60, type metadata accessor for WildModeTrackingLocation);
          sub_10112E704(v56, type metadata accessor for WildModeTrackingLocation);
          if ((v61 & 1) == 0) {
            break;
          }
          uint64_t v62 = *v59;
          if (!*v59) {
            goto LABEL_146;
          }
          Swift::Int v52 = v136;
          uint64_t v51 = v57;
          uint64_t v63 = v62 + v57 + v54;
          sub_10112E634(v62 + v136 + v54, v142, type metadata accessor for WildModeTrackingLocation);
          swift_arrayInitWithTakeFrontToBack();
          sub_10112E634(v142, v63, type metadata accessor for WildModeTrackingLocation);
          v54 -= v135;
          Swift::Int v21 = v143 + 1;
          Swift::Int v53 = v139;
          a1 = v140;
          if (v139 == v143 + 1) {
            goto LABEL_52;
          }
        }
        Swift::Int v53 = v139;
        a1 = v59;
        uint64_t v51 = v57;
        Swift::Int v52 = v136;
LABEL_52:
        Swift::Int v39 = v53 + 1;
        v51 += v135;
        v52 += v135;
        Swift::Int v21 = v132;
      }
      while (v39 != v130);
      Swift::Int v39 = v130;
      uint64_t v19 = v128;
      uint64_t v2 = v129;
    }
    goto LABEL_59;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1011254C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t v29 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v7 = __chkstk_darwin(v29);
  uint64_t v30 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  Swift::Int v11 = (char *)&v24 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v32 = v16 * (v28 - 1);
    uint64_t v27 = v16;
    uint64_t v31 = v16 * v28;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v26;
    while (1)
    {
      uint64_t v19 = a4;
      uint64_t v20 = *a4;
      sub_10112E69C(v31 + v17 + v20, (uint64_t)v15, type metadata accessor for WildModeTrackingLocation);
      sub_10112E69C(v32 + v17 + v20, (uint64_t)v11, type metadata accessor for WildModeTrackingLocation);
      char v21 = static Date.< infix(_:_:)();
      sub_10112E704((uint64_t)v11, type metadata accessor for WildModeTrackingLocation);
      a4 = v19;
      uint64_t result = sub_10112E704((uint64_t)v15, type metadata accessor for WildModeTrackingLocation);
      if ((v21 & 1) == 0)
      {
LABEL_4:
        v32 += v27;
        v31 += v27;
        if (++v28 == v25) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v22 = *v19;
      if (!*v19) {
        break;
      }
      uint64_t v23 = v22 + v32 + v17;
      sub_10112E634(v22 + v31 + v17, v30, type metadata accessor for WildModeTrackingLocation);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_10112E634(v30, v23, type metadata accessor for WildModeTrackingLocation);
      v17 -= v27;
      ++v18;
      a4 = v19;
      if (v28 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_101125788(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v44 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v8 = __chkstk_darwin(v44);
  uint64_t v43 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  Swift::Int v11 = (char *)&v40 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_61;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_62;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v47 = a1;
  unint64_t v46 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v26 = a4 + v18;
      unint64_t v45 = a4 + v18;
      unint64_t v47 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        unint64_t v41 = a4;
        unint64_t v42 = a1;
        do
        {
          unint64_t v28 = a3 - v13;
          sub_10112E69C(v26 - v13, (uint64_t)v11, type metadata accessor for WildModeTrackingLocation);
          unint64_t v29 = a2 - v13;
          unint64_t v30 = a3;
          uint64_t v31 = (uint64_t)v11;
          uint64_t v32 = v43;
          sub_10112E69C(a2 - v13, v43, type metadata accessor for WildModeTrackingLocation);
          char v33 = static Date.< infix(_:_:)();
          uint64_t v34 = v32;
          Swift::Int v11 = (char *)v31;
          sub_10112E704(v34, type metadata accessor for WildModeTrackingLocation);
          sub_10112E704(v31, type metadata accessor for WildModeTrackingLocation);
          if (v33)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              BOOL v35 = v30 == a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v47 -= v13;
          }
          else
          {
            unint64_t v38 = v45;
            v45 -= v13;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v29 = a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              unint64_t v37 = v42;
              if (v30 != v38) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v29 = a2;
              unint64_t v36 = v41;
            }
          }
          unint64_t v26 = v45;
          if (v45 <= v36) {
            break;
          }
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v37);
      }
      goto LABEL_59;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v19 = a4 + v17;
    unint64_t v45 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_10112E69C(a2, (uint64_t)v11, type metadata accessor for WildModeTrackingLocation);
        uint64_t v21 = v43;
        sub_10112E69C(a4, v43, type metadata accessor for WildModeTrackingLocation);
        char v22 = static Date.< infix(_:_:)();
        sub_10112E704(v21, type metadata accessor for WildModeTrackingLocation);
        sub_10112E704((uint64_t)v11, type metadata accessor for WildModeTrackingLocation);
        unint64_t v23 = v47;
        if (v22)
        {
          unint64_t v24 = a2 + v13;
          if (v47 < a2 || v47 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 == a2)
          {
            unint64_t v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v25 = v46 + v13;
          if (v47 < v46 || v47 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 != v46)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v46 = v25;
          unint64_t v24 = a2;
        }
        unint64_t v47 = v23 + v13;
        a4 = v46;
        if (v46 >= v19) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_59:
    sub_100B72E58(&v47, &v46, (uint64_t *)&v45);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_101125CA4()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v2 = __CocoaSet.contains(_:)();
    swift_release();
    if (v2)
    {
      uint64_t v3 = sub_101129E0C();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_10165F1F0);
  sub_100062734((unint64_t *)&unk_101666860, (uint64_t *)&unk_10165F1F0);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = ~v5;
  sub_100062734((unint64_t *)&unk_10165F200, (uint64_t *)&unk_10165F1F0);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v6 = (v6 + 1) & v7;
    if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v0;
  uint64_t v11 = *v0;
  uint64_t *v0 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100DE76DC();
    uint64_t v10 = v11;
  }
  uint64_t v3 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  sub_10112B850(v6, (unint64_t *)&unk_101666860, (uint64_t *)&unk_10165F1F0);
  uint64_t *v0 = v11;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_101125EBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v23 = v2;
  uint64_t v9 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  sub_10120EF7C();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v21 = v5;
    uint64_t v22 = a2;
    uint64_t v13 = ~v11;
    uint64_t v14 = *(void *)(v6 + 72);
    while (1)
    {
      sub_10112E69C(*(void *)(v9 + 48) + v14 * v12, (uint64_t)v8, type metadata accessor for SharedBeaconRecord);
      BOOL v15 = sub_101212AE0((uint64_t)v8, a1);
      sub_10112E704((uint64_t)v8, type metadata accessor for SharedBeaconRecord);
      if (v15) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v16 = 1;
        uint64_t v5 = v21;
        a2 = v22;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v16, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v17 = v23;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v17;
    uint64_t v24 = *v17;
    *uint64_t v17 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100DE7A50();
      uint64_t v19 = v24;
    }
    a2 = v22;
    sub_10112E634(*(void *)(v19 + 48) + v14 * v12, v22, type metadata accessor for SharedBeaconRecord);
    sub_10112B3B0(v12);
    *uint64_t v17 = v24;
    swift_bridgeObjectRelease();
    uint64_t v16 = 0;
    uint64_t v5 = v21;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v16, 1, v5);
}

uint64_t sub_10112611C(uint64_t a1)
{
  return sub_1011281C0(a1, (void (*)(void))sub_100DE7A84);
}

uint64_t sub_101126134(uint64_t a1, uint64_t a2, char a3)
{
  Swift::UInt v6 = a3 & 1;
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._combine(_:)(v6);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v11 = ~v9;
  uint64_t v12 = *(void *)(v7 + 48);
  while (1)
  {
    uint64_t v13 = v12 + 24 * v10;
    int v14 = *(unsigned __int8 *)(v13 + 16);
    if (*(void *)v13 != a1 || *(void *)(v13 + 8) != a2) {
      break;
    }
    if ((v6 == 0) != v14) {
      goto LABEL_11;
    }
LABEL_4:
    unint64_t v10 = (v10 + 1) & v11;
    if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      goto LABEL_14;
    }
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || (((v6 == 0) ^ v14) & 1) == 0) {
    goto LABEL_4;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *v3;
  uint64_t v20 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100DE7CF0();
    uint64_t v17 = v20;
  }
  uint64_t v18 = *(void *)(*(void *)(v17 + 48) + 24 * v10);
  sub_10112B650(v10);
  *uint64_t v3 = v20;
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t sub_1011262FC()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v2 = __CocoaSet.contains(_:)();
    swift_release();
    if (v2)
    {
      uint64_t v3 = sub_10112A018();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_10163B860);
  sub_100062734(&qword_10165F6F0, (uint64_t *)&unk_10163B860);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = ~v5;
  sub_100062734(&qword_10165F280, (uint64_t *)&unk_10163B860);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v6 = (v6 + 1) & v7;
    if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v0;
  uint64_t v11 = *v0;
  uint64_t *v0 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100DE7EB0();
    uint64_t v10 = v11;
  }
  uint64_t v3 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  sub_10112B850(v6, &qword_10165F6F0, (uint64_t *)&unk_10163B860);
  uint64_t *v0 = v11;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_101126514@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  unint64_t v86 = a2;
  Data.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_116:
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = xmmword_101347BB0;
    return result;
  }
  uint64_t v11 = ~v8;
  unint64_t v12 = a2 >> 62;
  BOOL v13 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v84 = v13;
  uint64_t v83 = v6 + 56;
  uint64_t v80 = (a1 >> 32) - (int)a1;
  uint64_t v81 = a1 >> 32;
  uint64_t v79 = v6;
  uint64_t v85 = ~v8;
  while (2)
  {
    int v14 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v9);
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v16 >> 62);
    uint64_t v18 = 0;
    switch(v16 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v15), v15))
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          sub_100DE7EBC();
          uint64_t v76 = *(void *)__s1;
          goto LABEL_119;
        }
        uint64_t v18 = HIDWORD(v15) - (int)v15;
LABEL_14:
        sub_1000361E0(v15, v16);
        break;
      case 2uLL:
        uint64_t v20 = *(void *)(v15 + 16);
        uint64_t v19 = *(void *)(v15 + 24);
        uint64_t v18 = v19 - v20;
        if (!__OFSUB__(v19, v20)) {
          goto LABEL_14;
        }
        goto LABEL_121;
      case 3uLL:
        break;
      default:
        uint64_t v18 = BYTE6(v16);
        break;
    }
    uint64_t v21 = BYTE6(v86);
    switch((int)v12)
    {
      case 1:
        uint64_t v21 = HIDWORD(a1) - (int)a1;
        if (v84) {
          goto LABEL_122;
        }
        goto LABEL_19;
      case 2:
        uint64_t v23 = *(void *)(a1 + 16);
        uint64_t v22 = *(void *)(a1 + 24);
        BOOL v24 = __OFSUB__(v22, v23);
        uint64_t v21 = v22 - v23;
        if (!v24) {
          goto LABEL_19;
        }
        goto LABEL_123;
      case 3:
        if (v18) {
          goto LABEL_7;
        }
        goto LABEL_117;
      default:
LABEL_19:
        if (v18 != v21)
        {
LABEL_7:
          sub_10001CFB8(v15, v16);
          goto LABEL_8;
        }
        if (v18 >= 1)
        {
          switch((int)v17)
          {
            case 1:
              if ((int)v15 > v15 >> 32) {
                goto LABEL_124;
              }
              uint64_t v17 = (void *)__DataStorage._bytes.getter();
              if (!v17) {
                goto LABEL_33;
              }
              uint64_t v29 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v15, v29)) {
                goto LABEL_126;
              }
              uint64_t v17 = (void *)((char *)v17 + (int)v15 - v29);
LABEL_33:
              __DataStorage._length.getter();
              uint64_t v11 = v85;
              if (!v12)
              {
                *(void *)__s1 = a1;
                *(_DWORD *)&__s1[8] = v86;
                *(_WORD *)&__s1[12] = WORD2(v86);
                if (!v17) {
                  goto LABEL_155;
                }
                Swift::Int v49 = (uint64_t *)__s1;
                uint64_t v48 = v17;
                goto LABEL_101;
              }
              if (v12 == 1)
              {
                if (v81 < (int)a1) {
                  goto LABEL_136;
                }
                swift_retain();
                unint64_t v30 = (char *)__DataStorage._bytes.getter();
                if (v30)
                {
                  uint64_t v31 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)a1, v31)) {
                    goto LABEL_143;
                  }
                  v30 += (int)a1 - v31;
                }
                uint64_t v32 = __DataStorage._length.getter();
                size_t v33 = (a1 >> 32) - (int)a1;
                if (v32 < v80) {
                  size_t v33 = v32;
                }
                if (!v17) {
                  goto LABEL_145;
                }
                if (!v30) {
                  goto LABEL_146;
                }
                int v34 = memcmp(v17, v30, v33);
                sub_10001CFB8(a1, v86);
              }
              else
              {
                uint64_t v68 = *(void *)(a1 + 16);
                uint64_t v67 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                Swift::Int v69 = (char *)__DataStorage._bytes.getter();
                if (v69)
                {
                  uint64_t v70 = __DataStorage._offset.getter();
                  if (__OFSUB__(v68, v70)) {
                    goto LABEL_142;
                  }
                  v69 += v68 - v70;
                }
                BOOL v24 = __OFSUB__(v67, v68);
                int64_t v71 = v67 - v68;
                if (v24) {
                  goto LABEL_137;
                }
                uint64_t v72 = __DataStorage._length.getter();
                if (v72 >= v71) {
                  size_t v73 = v71;
                }
                else {
                  size_t v73 = v72;
                }
                if (!v17) {
                  goto LABEL_156;
                }
                uint64_t v6 = v79;
                uint64_t v10 = v83;
                if (!v69) {
                  goto LABEL_157;
                }
                int v34 = memcmp(v17, v69, v73);
                swift_release();
                swift_release();
              }
              sub_10001CFB8(v15, v16);
              goto LABEL_114;
            case 2:
              uint64_t v17 = (void *)(v16 & 0x3FFFFFFFFFFFFFFFLL);
              uint64_t v35 = *(void *)(v15 + 16);
              swift_retain();
              swift_retain();
              unint64_t v36 = (char *)__DataStorage._bytes.getter();
              if (!v36) {
                goto LABEL_47;
              }
              uint64_t v37 = __DataStorage._offset.getter();
              if (__OFSUB__(v35, v37)) {
                goto LABEL_125;
              }
              v36 += v35 - v37;
LABEL_47:
              __DataStorage._length.getter();
              uint64_t v10 = v83;
              if (v12)
              {
                if (v12 == 1)
                {
                  if (v81 < (int)a1) {
                    goto LABEL_130;
                  }
                  swift_retain();
                  unint64_t v38 = (char *)__DataStorage._bytes.getter();
                  if (v38)
                  {
                    uint64_t v39 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)a1, v39)) {
                      goto LABEL_141;
                    }
                    v38 += (int)a1 - v39;
                  }
                  uint64_t v40 = __DataStorage._length.getter();
                  size_t v41 = (a1 >> 32) - (int)a1;
                  if (v40 < v80) {
                    size_t v41 = v40;
                  }
                  if (!v36) {
                    goto LABEL_147;
                  }
                  if (!v38) {
                    goto LABEL_148;
                  }
                  int v42 = memcmp(v36, v38, v41);
                  sub_10001CFB8(a1, v86);
                  swift_release();
                }
                else
                {
                  uint64_t v60 = *(void *)(a1 + 16);
                  uint64_t v77 = *(void *)(a1 + 24);
                  swift_retain();
                  swift_retain();
                  char v61 = (char *)__DataStorage._bytes.getter();
                  if (v61)
                  {
                    uint64_t v62 = __DataStorage._offset.getter();
                    if (__OFSUB__(v60, v62)) {
                      goto LABEL_140;
                    }
                    v61 += v60 - v62;
                  }
                  BOOL v24 = __OFSUB__(v77, v60);
                  int64_t v63 = v77 - v60;
                  if (v24) {
                    goto LABEL_135;
                  }
                  uint64_t v64 = __DataStorage._length.getter();
                  if (v64 >= v63) {
                    size_t v65 = v63;
                  }
                  else {
                    size_t v65 = v64;
                  }
                  if (!v36) {
                    goto LABEL_153;
                  }
                  uint64_t v6 = v79;
                  if (!v61) {
                    goto LABEL_154;
                  }
                  int v42 = memcmp(v36, v61, v65);
                  swift_release();
                  swift_release();
                  swift_release();
                }
                swift_release();
                sub_10001CFB8(v15, v16);
                uint64_t v10 = v83;
              }
              else
              {
                *(void *)__s1 = a1;
                *(_DWORD *)&__s1[8] = v86;
                *(_WORD *)&__s1[12] = WORD2(v86);
                if (!v36) {
                  goto LABEL_152;
                }
                int v42 = memcmp(v36, __s1, BYTE6(v86));
                swift_release();
                swift_release();
                sub_10001CFB8(v15, v16);
              }
              uint64_t v11 = v85;
              if (!v42) {
                goto LABEL_118;
              }
              break;
            case 3:
              *(void *)&__s1[6] = 0;
              *(void *)__s1 = 0;
              if (!v12) {
                goto LABEL_68;
              }
              if (v12 == 1)
              {
                if (v81 < (int)a1) {
                  goto LABEL_129;
                }
                sub_1000361E0(a1, v86);
                uint64_t v43 = __DataStorage._bytes.getter();
                if (!v43) {
                  goto LABEL_149;
                }
                uint64_t v26 = v43;
                uint64_t v44 = __DataStorage._offset.getter();
                uint64_t v28 = (int)a1 - v44;
                if (__OFSUB__((int)a1, v44)) {
                  goto LABEL_134;
                }
                goto LABEL_63;
              }
              uint64_t v56 = *(void *)(a1 + 16);
              uint64_t v57 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              Swift::Int v52 = (char *)__DataStorage._bytes.getter();
              if (v52)
              {
                uint64_t v58 = __DataStorage._offset.getter();
                if (__OFSUB__(v56, v58)) {
                  goto LABEL_139;
                }
                v52 += v56 - v58;
              }
              BOOL v24 = __OFSUB__(v57, v56);
              int64_t v54 = v57 - v56;
              if (v24) {
                goto LABEL_132;
              }
              uint64_t v55 = __DataStorage._length.getter();
              if (!v52) {
                goto LABEL_151;
              }
              goto LABEL_80;
            default:
              *(void *)__s1 = v15;
              *(_WORD *)&__s1[8] = v16;
              __s1[10] = BYTE2(v16);
              __s1[11] = BYTE3(v16);
              __s1[12] = BYTE4(v16);
              __s1[13] = BYTE5(v16);
              if (v12)
              {
                if (v12 == 1)
                {
                  if (v81 < (int)a1)
                  {
                    __break(1u);
LABEL_129:
                    __break(1u);
LABEL_130:
                    __break(1u);
LABEL_131:
                    __break(1u);
LABEL_132:
                    __break(1u);
LABEL_133:
                    __break(1u);
LABEL_134:
                    __break(1u);
LABEL_135:
                    __break(1u);
LABEL_136:
                    __break(1u);
LABEL_137:
                    __break(1u);
LABEL_138:
                    __break(1u);
LABEL_139:
                    __break(1u);
LABEL_140:
                    __break(1u);
LABEL_141:
                    __break(1u);
LABEL_142:
                    __break(1u);
LABEL_143:
                    __break(1u);
                  }
                  sub_1000361E0(a1, v86);
                  uint64_t v25 = __DataStorage._bytes.getter();
                  if (!v25)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_145:
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
                    JUMPOUT(0x101126F38);
                  }
                  uint64_t v26 = v25;
                  uint64_t v27 = __DataStorage._offset.getter();
                  uint64_t v28 = (int)a1 - v27;
                  if (__OFSUB__((int)a1, v27)) {
                    goto LABEL_133;
                  }
LABEL_63:
                  uint64_t v45 = __DataStorage._length.getter();
                  if (v45 >= v80) {
                    size_t v46 = (a1 >> 32) - (int)a1;
                  }
                  else {
                    size_t v46 = v45;
                  }
                  int v47 = memcmp(__s1, (const void *)(v26 + v28), v46);
                  sub_10001CFB8(a1, v86);
                  sub_10001CFB8(v15, v16);
                  uint64_t v6 = v79;
                  if (!v47) {
                    goto LABEL_118;
                  }
                }
                else
                {
                  uint64_t v50 = *(void *)(a1 + 16);
                  uint64_t v51 = *(void *)(a1 + 24);
                  swift_retain();
                  swift_retain();
                  Swift::Int v52 = (char *)__DataStorage._bytes.getter();
                  if (v52)
                  {
                    uint64_t v53 = __DataStorage._offset.getter();
                    if (__OFSUB__(v50, v53)) {
                      goto LABEL_138;
                    }
                    v52 += v50 - v53;
                  }
                  BOOL v24 = __OFSUB__(v51, v50);
                  int64_t v54 = v51 - v50;
                  if (v24) {
                    goto LABEL_131;
                  }
                  uint64_t v55 = __DataStorage._length.getter();
                  if (!v52) {
                    goto LABEL_150;
                  }
LABEL_80:
                  if (v55 >= v54) {
                    size_t v59 = v54;
                  }
                  else {
                    size_t v59 = v55;
                  }
                  int v34 = memcmp(__s1, v52, v59);
                  swift_release();
                  swift_release();
                  sub_10001CFB8(v15, v16);
                  uint64_t v10 = v83;
LABEL_114:
                  uint64_t v11 = v85;
                  if (!v34) {
                    goto LABEL_118;
                  }
                }
              }
              else
              {
LABEL_68:
                uint64_t v87 = a1;
                int v88 = v86;
                __int16 v89 = WORD2(v86);
                uint64_t v48 = __s1;
                Swift::Int v49 = &v87;
LABEL_101:
                int v66 = memcmp(v48, v49, BYTE6(v86));
                sub_10001CFB8(v15, v16);
                if (!v66) {
                  goto LABEL_118;
                }
              }
              break;
          }
LABEL_8:
          unint64_t v9 = (v9 + 1) & v11;
          if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
            goto LABEL_116;
          }
          continue;
        }
LABEL_117:
        sub_10001CFB8(v15, v16);
LABEL_118:
        swift_bridgeObjectRelease();
        uint64_t v17 = v78;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v76 = *v78;
        *(void *)__s1 = *v78;
        *uint64_t v78 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          goto LABEL_127;
        }
LABEL_119:
        *a3 = *(_OWORD *)(*(void *)(v76 + 48) + 16 * v9);
        sub_10112BA34(v9);
        *uint64_t v17 = *(void *)__s1;
        return swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_101126F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10112DAEC(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    unint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    int v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      sub_10112DAEC((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100DE76BC();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    sub_10112C4AC(v12, (uint64_t (*)(void))&type metadata accessor for UUID, &qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    *uint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t sub_10112728C(unsigned __int8 a1)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  Hasher.init(_seed:)();
  sub_1012D5910(a1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_74:
    swift_bridgeObjectRelease();
    return 22;
  }
  uint64_t v8 = ~v6;
  uint64_t v9 = a1;
  while (2)
  {
    unint64_t v10 = 0xE700000000000000;
    uint64_t v11 = 0x6E776F6E6B6E75;
    switch(*(unsigned char *)(*(void *)(v4 + 48) + v7))
    {
      case 1:
        unint64_t v10 = 0x80000001013EF140;
        uint64_t v11 = 0xD000000000000015;
        break;
      case 2:
        uint64_t v11 = 0xD000000000000016;
        unint64_t v10 = 0x80000001013EF160;
        break;
      case 3:
        unint64_t v10 = 0xE600000000000000;
        uint64_t v11 = 0x657461636F6CLL;
        break;
      case 4:
        unint64_t v10 = 0xEC000000676E6972;
        uint64_t v11 = 0x6168537472617473;
        break;
      case 5:
        uint64_t v11 = 0x72616853706F7473;
        goto LABEL_14;
      case 6:
        unsigned int v12 = 2036427888;
        goto LABEL_11;
      case 7:
        unsigned int v12 = 1886352499;
LABEL_11:
        uint64_t v11 = v12 | 0x6E756F5300000000;
        unint64_t v10 = 0xE900000000000064;
        break;
      case 8:
        uint64_t v11 = 0x61654C6E69676562;
        unint64_t v10 = 0xED0000676E696873;
        break;
      case 9:
        uint64_t v11 = 0x687361654C646E65;
LABEL_14:
        unint64_t v10 = 0xEB00000000676E69;
        break;
      case 0xA:
        uint64_t v11 = 0x4654426E69676562;
        uint64_t v13 = 0x676E69646E69;
        goto LABEL_27;
      case 0xB:
        uint64_t v11 = 0x6E69465442646E65;
        unint64_t v10 = 0xEC000000676E6964;
        break;
      case 0xC:
        unint64_t v10 = 0xEC000000676E6967;
        uint64_t v11 = 0x6E61526E69676562;
        break;
      case 0xD:
        uint64_t v11 = 0x69676E6152646E65;
        unint64_t v10 = 0xEA0000000000676ELL;
        break;
      case 0xE:
        uint64_t v11 = 0x6F4C656C62616E65;
        uint64_t v13 = 0x65646F4D7473;
        goto LABEL_27;
      case 0xF:
        uint64_t v11 = 0x4C656C6261736964;
        unint64_t v10 = 0xEF65646F4D74736FLL;
        break;
      case 0x10:
        unint64_t v10 = 0xE600000000000000;
        uint64_t v11 = 0x656D616E6572;
        break;
      case 0x11:
        uint64_t v11 = 0x7463656E6E6F63;
        break;
      case 0x12:
        unint64_t v10 = 0xEA00000000007463;
        uint64_t v11 = 0x656E6E6F63736964;
        break;
      case 0x13:
        uint64_t v11 = 0xD000000000000017;
        unint64_t v10 = 0x80000001013EF240;
        break;
      case 0x14:
        unint64_t v10 = 0xE600000000000000;
        uint64_t v11 = 0x726961706E75;
        break;
      case 0x15:
        uint64_t v11 = 0x65746167656C6564;
        uint64_t v13 = 0x657261685364;
LABEL_27:
        unint64_t v10 = v13 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
        break;
      default:
        break;
    }
    unint64_t v14 = 0xE700000000000000;
    uint64_t v15 = 0x6E776F6E6B6E75;
    switch(v9)
    {
      case 1:
        unint64_t v14 = 0x80000001013EF140;
        if (v11 == 0xD000000000000015) {
          goto LABEL_67;
        }
        goto LABEL_68;
      case 2:
        unint64_t v14 = 0x80000001013EF160;
        if (v11 != 0xD000000000000016) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 3:
        unint64_t v14 = 0xE600000000000000;
        if (v11 != 0x657461636F6CLL) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 4:
        unint64_t v14 = 0xEC000000676E6972;
        if (v11 != 0x6168537472617473) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 5:
        uint64_t v16 = 0x72616853706F7473;
        goto LABEL_45;
      case 6:
        unsigned int v17 = 2036427888;
        goto LABEL_40;
      case 7:
        unsigned int v17 = 1886352499;
LABEL_40:
        unint64_t v14 = 0xE900000000000064;
        if (v11 != (v17 | 0x6E756F5300000000)) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 8:
        unint64_t v14 = 0xED0000676E696873;
        if (v11 != 0x61654C6E69676562) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 9:
        uint64_t v16 = 0x687361654C646E65;
LABEL_45:
        unint64_t v14 = 0xEB00000000676E69;
        if (v11 != v16) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 10:
        uint64_t v18 = 0x4654426E69676562;
        uint64_t v19 = 0x676E69646E69;
        goto LABEL_72;
      case 11:
        unint64_t v14 = 0xEC000000676E6964;
        if (v11 != 0x6E69465442646E65) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 12:
        unint64_t v14 = 0xEC000000676E6967;
        if (v11 != 0x6E61526E69676562) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 13:
        unint64_t v14 = 0xEA0000000000676ELL;
        if (v11 != 0x69676E6152646E65) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 14:
        uint64_t v18 = 0x6F4C656C62616E65;
        uint64_t v19 = 0x65646F4D7473;
        goto LABEL_72;
      case 15:
        unint64_t v14 = 0xEF65646F4D74736FLL;
        if (v11 != 0x4C656C6261736964) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 16:
        unint64_t v14 = 0xE600000000000000;
        if (v11 != 0x656D616E6572) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 17:
        if (v11 != 0x7463656E6E6F63) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 18:
        unint64_t v14 = 0xEA00000000007463;
        if (v11 != 0x656E6E6F63736964) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 19:
        unint64_t v14 = 0x80000001013EF240;
        if (v11 != 0xD000000000000017) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 20:
        unint64_t v14 = 0xE600000000000000;
        uint64_t v15 = 0x726961706E75;
        goto LABEL_66;
      case 21:
        uint64_t v18 = 0x65746167656C6564;
        uint64_t v19 = 0x657261685364;
LABEL_72:
        unint64_t v14 = v19 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
        if (v11 != v18) {
          goto LABEL_68;
        }
        goto LABEL_67;
      default:
LABEL_66:
        if (v11 != v15) {
          goto LABEL_68;
        }
LABEL_67:
        if (v10 == v14)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_77;
        }
LABEL_68:
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0)
        {
          unint64_t v7 = (v7 + 1) & v8;
          if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_74;
          }
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_77:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v23 = *v2;
        uint64_t v25 = *v2;
        *char v2 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100DE8230();
          uint64_t v23 = v25;
        }
        uint64_t v21 = *(unsigned __int8 *)(*(void *)(v23 + 48) + v7);
        sub_10112BC0C(v7);
        *char v2 = v25;
        swift_bridgeObjectRelease();
        return v21;
    }
  }
}

uint64_t sub_101127A68(void *a1)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v1;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v6 = a1;
    char v7 = __CocoaSet.contains(_:)();

    if (v7)
    {
      uint64_t v8 = sub_10112AFFC(v5, (uint64_t)v6, (uint64_t *)&unk_10165F070, (unint64_t *)&qword_10163B900, (uint64_t)SPHandle_ptr, (void (*)(unint64_t))sub_100DD90E4);
      swift_bridgeObjectRelease();
      return v8;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::Int v9 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v10 = NSObject._rawHashValue(seed:)(v9);
  uint64_t v11 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
  id v13 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
  char v14 = static NSObject.== infix(_:_:)();

  if ((v14 & 1) == 0)
  {
    uint64_t v15 = ~v11;
    do
    {
      unint64_t v12 = (v12 + 1) & v15;
      if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      id v16 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
      char v17 = static NSObject.== infix(_:_:)();
    }
    while ((v17 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v19 = *v2;
  uint64_t v21 = *v2;
  *char v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100DE823C();
    uint64_t v19 = v21;
  }
  uint64_t v8 = *(void *)(*(void *)(v19 + 48) + 8 * v12);
  sub_10112CE9C(v12);
  *char v2 = v21;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_101127C6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for MACAddress();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10112DAEC((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    id v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    char v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      sub_10112DAEC((unint64_t *)&unk_10166C270, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100DE8438();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    sub_10112C4AC(v12, (uint64_t (*)(void))&type metadata accessor for MACAddress, (unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    *uint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t sub_101127F90()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v2 = __CocoaSet.contains(_:)();
    swift_release();
    if (v2)
    {
      uint64_t v3 = sub_10112A218();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_10165F190);
  sub_100062734((unint64_t *)&unk_101666830, (uint64_t *)&unk_10165F190);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = ~v5;
  sub_100062734(&qword_10165F1A0, (uint64_t *)&unk_10165F190);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v6 = (v6 + 1) & v7;
    if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v0;
  uint64_t v11 = *v0;
  uint64_t *v0 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100DE87DC();
    uint64_t v10 = v11;
  }
  uint64_t v3 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  sub_10112B850(v6, (unint64_t *)&unk_101666830, (uint64_t *)&unk_10165F190);
  uint64_t *v0 = v11;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1011281A8(uint64_t a1)
{
  return sub_1011281C0(a1, (void (*)(void))sub_100DE8994);
}

uint64_t sub_1011281C0(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = v2;
  uint64_t v5 = *v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v7;
      do
      {
        unint64_t v8 = (v8 + 1) & v15;
        if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;
        if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19) {
          goto LABEL_16;
        }
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v21 & 1) == 0);
    }
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v24 = *v4;
  uint64_t v26 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    uint64_t v24 = v26;
  }
  uint64_t v22 = *(void *)(*(void *)(v24 + 48) + 8 * v8);
  sub_10112C0BC(v8);
  *uint64_t v4 = v26;
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_1011283DC(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v7 + 48);
    while (1)
    {
      uint64_t v13 = (unsigned __int8 *)(v12 + 24 * v10);
      if (*v13 == a1)
      {
        BOOL v14 = *((void *)v13 + 1) == a2 && *((void *)v13 + 2) == a3;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v3;
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100DE8070();
      uint64_t v16 = v19;
    }
    uint64_t v17 = *(unsigned __int8 *)(*(void *)(v16 + 48) + 24 * v10);
    sub_10112C2A0(v10);
    *uint64_t v3 = v19;
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v17;
}

uint64_t sub_101128590@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for CorrelationIdentifier();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::Int v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10112DAEC((unint64_t *)&unk_10166C250, (void (*)(uint64_t))&type metadata accessor for CorrelationIdentifier);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    BOOL v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      sub_10112DAEC(&qword_101650700, (void (*)(uint64_t))&type metadata accessor for CorrelationIdentifier);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    char v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *char v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100DE8B44();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    sub_10112C4AC(v12, (uint64_t (*)(void))&type metadata accessor for CorrelationIdentifier, (unint64_t *)&unk_10166C250, (void (*)(uint64_t))&type metadata accessor for CorrelationIdentifier, (uint64_t)&protocol conformance descriptor for CorrelationIdentifier);
    *char v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t sub_1011288B4()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v2 = __CocoaSet.contains(_:)();
    swift_release();
    if (v2)
    {
      uint64_t v3 = sub_10112A418();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  type metadata accessor for AnyCancellable();
  sub_10112DAEC((unint64_t *)&unk_10165F250, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  swift_bridgeObjectRetain();
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = ~v5;
  sub_10112DAEC((unint64_t *)&unk_10166C2C0, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v6 = (v6 + 1) & v7;
    if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v0;
  uint64_t v11 = *v0;
  uint64_t *v0 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100DE8E14();
    uint64_t v10 = v11;
  }
  uint64_t v3 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  sub_10112C798(v6);
  uint64_t *v0 = v11;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_101128AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *char v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100DE76E8();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_10112C988(v8);
  *char v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_101128C64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for BeaconIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::Int v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v1;
  uint64_t v7 = *v1;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10112DAEC(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = v4;
    uint64_t v12 = ~v9;
    uint64_t v21 = v11;
    uint64_t v22 = a1;
    uint64_t v13 = *(void *)(v11 + 72);
    while (1)
    {
      sub_10112E69C(*(void *)(v7 + 48) + v13 * v10, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      if (static UUID.== infix(_:_:)() & 1) != 0 && (static UUID.== infix(_:_:)()) {
        break;
      }
      sub_10112E704((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      unint64_t v10 = (v10 + 1) & v12;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = v21;
        a1 = v22;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
      }
    }
    sub_10112E704((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_bridgeObjectRelease();
    uint64_t v14 = v20;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v14;
    uint64_t v23 = *v14;
    *uint64_t v14 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100DE8FB0();
      uint64_t v16 = v23;
    }
    uint64_t v17 = *(void *)(v16 + 48) + v13 * v10;
    uint64_t v18 = v22;
    sub_10112E634(v17, v22, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_10112CB50(v10);
    *uint64_t v14 = v23;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v3);
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
  }
}

uint64_t sub_101128F78()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v2 = __CocoaSet.contains(_:)();
    swift_release();
    if (v2)
    {
      uint64_t v3 = sub_10112A5FC();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_10165F610);
  sub_100062734(&qword_10165F0F0, (uint64_t *)&unk_10165F610);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = ~v5;
  sub_100062734(&qword_10165F0F8, (uint64_t *)&unk_10165F610);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v6 = (v6 + 1) & v7;
    if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v0;
  uint64_t v11 = *v0;
  uint64_t *v0 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100DE8FE4();
    uint64_t v10 = v11;
  }
  uint64_t v3 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  sub_10112B850(v6, &qword_10165F0F0, (uint64_t *)&unk_10165F610);
  uint64_t *v0 = v11;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_101129190()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v2 = __CocoaSet.contains(_:)();
    swift_release();
    if (v2)
    {
      uint64_t v3 = sub_10112A7FC();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_10163F360);
  sub_100062734((unint64_t *)&unk_10165F1D0, (uint64_t *)&unk_10163F360);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = ~v5;
  sub_100062734((unint64_t *)&unk_10166C2A0, (uint64_t *)&unk_10163F360);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v6 = (v6 + 1) & v7;
    if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v0;
  uint64_t v11 = *v0;
  uint64_t *v0 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100DE9188();
    uint64_t v10 = v11;
  }
  uint64_t v3 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  sub_10112B850(v6, (unint64_t *)&unk_10165F1D0, (uint64_t *)&unk_10163F360);
  uint64_t *v0 = v11;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1011293A8()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v2 = __CocoaSet.contains(_:)();
    swift_release();
    if (v2)
    {
      uint64_t v3 = sub_10112A9FC();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  sub_10000588C(&qword_10163D250);
  sub_100062734((unint64_t *)&qword_101649B80, &qword_10163D250);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = ~v5;
  sub_100062734(&qword_10165F248, &qword_10163D250);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v6 = (v6 + 1) & v7;
    if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v0;
  uint64_t v11 = *v0;
  uint64_t *v0 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100DE95A0();
    uint64_t v10 = v11;
  }
  uint64_t v3 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  sub_10112B850(v6, (unint64_t *)&qword_101649B80, &qword_10163D250);
  uint64_t *v0 = v11;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1011295C0()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v2 = __CocoaSet.contains(_:)();
    swift_release();
    if (v2)
    {
      uint64_t v3 = sub_10112ABFC();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  sub_10000588C(&qword_101656E30);
  sub_100062734((unint64_t *)&qword_10165F110, &qword_101656E30);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = ~v5;
  sub_100062734(&qword_10165F118, &qword_101656E30);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v6 = (v6 + 1) & v7;
    if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v0;
  uint64_t v11 = *v0;
  uint64_t *v0 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100DE95AC();
    uint64_t v10 = v11;
  }
  uint64_t v3 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  sub_10112B850(v6, (unint64_t *)&qword_10165F110, &qword_101656E30);
  uint64_t *v0 = v11;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1011297D8()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v2 = __CocoaSet.contains(_:)();
    swift_release();
    if (v2)
    {
      uint64_t v3 = sub_10112ADFC();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_10165F5F0);
  sub_100062734((unint64_t *)&unk_10165F050, (uint64_t *)&unk_10165F5F0);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = ~v5;
  sub_100062734((unint64_t *)&unk_10166CFC0, (uint64_t *)&unk_10165F5F0);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v6 = (v6 + 1) & v7;
    if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v0;
  uint64_t v11 = *v0;
  uint64_t *v0 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100DE95B8();
    uint64_t v10 = v11;
  }
  uint64_t v3 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  sub_10112B850(v6, (unint64_t *)&unk_10165F050, (uint64_t *)&unk_10165F5F0);
  uint64_t *v0 = v11;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1011299F0(void *a1)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v1;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v6 = a1;
    char v7 = __CocoaSet.contains(_:)();

    if (v7)
    {
      uint64_t v8 = sub_10112AFFC(v5, (uint64_t)v6, &qword_10165F038, (unint64_t *)&unk_10165F040, (uint64_t)CKRecordZoneID_ptr, (void (*)(unint64_t))sub_100DDD5A8);
      swift_bridgeObjectRelease();
      return v8;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::Int v9 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v10 = NSObject._rawHashValue(seed:)(v9);
  uint64_t v11 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  sub_10001D4B0(0, (unint64_t *)&unk_10165F040);
  id v13 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
  char v14 = static NSObject.== infix(_:_:)();

  if ((v14 & 1) == 0)
  {
    uint64_t v15 = ~v11;
    do
    {
      unint64_t v12 = (v12 + 1) & v15;
      if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      id v16 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
      char v17 = static NSObject.== infix(_:_:)();
    }
    while ((v17 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v19 = *v2;
  uint64_t v21 = *v2;
  *char v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100DE95C4();
    uint64_t v19 = v21;
  }
  uint64_t v8 = *(void *)(*(void *)(v19 + 48) + 8 * v12);
  sub_10112CE9C(v12);
  *char v2 = v21;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_101129BF4()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v2 = __CocoaSet.contains(_:)();
    swift_release();
    if (v2)
    {
      uint64_t v3 = sub_10112B1B0();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_10166BF50);
  sub_100062734((unint64_t *)&unk_10165EF30, (uint64_t *)&unk_10166BF50);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = ~v5;
  sub_100062734((unint64_t *)&unk_10166BF60, (uint64_t *)&unk_10166BF50);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v6 = (v6 + 1) & v7;
    if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v0;
  uint64_t v11 = *v0;
  uint64_t *v0 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100DE95D0();
    uint64_t v10 = v11;
  }
  uint64_t v3 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  sub_10112B850(v6, (unint64_t *)&unk_10165EF30, (uint64_t *)&unk_10166BF50);
  uint64_t *v0 = v11;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_101129E0C()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = sub_101123658(v2, v1, (uint64_t *)&unk_10166C2B0, (uint64_t *)&unk_10165F1F0, (void (*)(unint64_t))sub_100DD633C, (unint64_t *)&unk_101666860);
  uint64_t v10 = v3;
  swift_retain();
  sub_10000588C((uint64_t *)&unk_10165F1F0);
  sub_100062734((unint64_t *)&unk_101666860, (uint64_t *)&unk_10165F1F0);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    sub_100062734((unint64_t *)&unk_10165F200, (uint64_t *)&unk_10165F1F0);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
    sub_10112B850(v6, (unint64_t *)&unk_101666860, (uint64_t *)&unk_10165F1F0);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t *v0 = v10;
      return v8;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10112A018()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = sub_101123658(v2, v1, (uint64_t *)&unk_10166C2D0, (uint64_t *)&unk_10163B860, (void (*)(unint64_t))sub_100DD77CC, &qword_10165F6F0);
  uint64_t v10 = v3;
  swift_retain();
  sub_10000588C((uint64_t *)&unk_10163B860);
  sub_100062734(&qword_10165F6F0, (uint64_t *)&unk_10163B860);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    sub_100062734(&qword_10165F280, (uint64_t *)&unk_10163B860);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
    sub_10112B850(v6, &qword_10165F6F0, (uint64_t *)&unk_10163B860);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t *v0 = v10;
      return v8;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10112A218()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = sub_101123658(v2, v1, &qword_10165F1A8, (uint64_t *)&unk_10165F190, (void (*)(unint64_t))sub_100DDA690, (unint64_t *)&unk_101666830);
  uint64_t v10 = v3;
  swift_retain();
  sub_10000588C((uint64_t *)&unk_10165F190);
  sub_100062734((unint64_t *)&unk_101666830, (uint64_t *)&unk_10165F190);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    sub_100062734(&qword_10165F1A0, (uint64_t *)&unk_10165F190);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
    sub_10112B850(v6, (unint64_t *)&unk_101666830, (uint64_t *)&unk_10165F190);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t *v0 = v10;
      return v8;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10112A418()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = sub_101123BA4(v2, v1);
  uint64_t v10 = v3;
  type metadata accessor for AnyCancellable();
  sub_10112DAEC((unint64_t *)&unk_10165F250, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  swift_retain();
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    sub_10112DAEC((unint64_t *)&unk_10166C2C0, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
    sub_10112C798(v6);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t *v0 = v10;
      return v8;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10112A5FC()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = sub_101123658(v2, v1, (uint64_t *)&unk_10165F100, (uint64_t *)&unk_10165F610, (void (*)(unint64_t))sub_100DDC354, &qword_10165F0F0);
  uint64_t v10 = v3;
  swift_retain();
  sub_10000588C((uint64_t *)&unk_10165F610);
  sub_100062734(&qword_10165F0F0, (uint64_t *)&unk_10165F610);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    sub_100062734(&qword_10165F0F8, (uint64_t *)&unk_10165F610);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
    sub_10112B850(v6, &qword_10165F0F0, (uint64_t *)&unk_10165F610);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t *v0 = v10;
      return v8;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10112A7FC()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = sub_101123658(v2, v1, (uint64_t *)&unk_10165F1C0, (uint64_t *)&unk_10163F360, (void (*)(unint64_t))sub_100DDC604, (unint64_t *)&unk_10165F1D0);
  uint64_t v10 = v3;
  swift_retain();
  sub_10000588C((uint64_t *)&unk_10163F360);
  sub_100062734((unint64_t *)&unk_10165F1D0, (uint64_t *)&unk_10163F360);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    sub_100062734((unint64_t *)&unk_10166C2A0, (uint64_t *)&unk_10163F360);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
    sub_10112B850(v6, (unint64_t *)&unk_10165F1D0, (uint64_t *)&unk_10163F360);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t *v0 = v10;
      return v8;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10112A9FC()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = sub_101123658(v2, v1, &qword_10165EFC0, &qword_10163D250, (void (*)(unint64_t))sub_100DDD554, (unint64_t *)&qword_101649B80);
  uint64_t v10 = v3;
  swift_retain();
  sub_10000588C(&qword_10163D250);
  sub_100062734((unint64_t *)&qword_101649B80, &qword_10163D250);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    sub_100062734(&qword_10165F248, &qword_10163D250);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
    sub_10112B850(v6, (unint64_t *)&qword_101649B80, &qword_10163D250);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t *v0 = v10;
      return v8;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10112ABFC()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = sub_101123658(v2, v1, &qword_10165F120, &qword_101656E30, (void (*)(unint64_t))sub_100DDD570, (unint64_t *)&qword_10165F110);
  uint64_t v10 = v3;
  swift_retain();
  sub_10000588C(&qword_101656E30);
  sub_100062734((unint64_t *)&qword_10165F110, &qword_101656E30);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    sub_100062734(&qword_10165F118, &qword_101656E30);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
    sub_10112B850(v6, (unint64_t *)&qword_10165F110, &qword_101656E30);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t *v0 = v10;
      return v8;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10112ADFC()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = sub_101123658(v2, v1, (uint64_t *)&unk_10165F060, (uint64_t *)&unk_10165F5F0, (void (*)(unint64_t))sub_100DDD58C, (unint64_t *)&unk_10165F050);
  uint64_t v10 = v3;
  swift_retain();
  sub_10000588C((uint64_t *)&unk_10165F5F0);
  sub_100062734((unint64_t *)&unk_10165F050, (uint64_t *)&unk_10165F5F0);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    sub_100062734((unint64_t *)&unk_10166CFC0, (uint64_t *)&unk_10165F5F0);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
    sub_10112B850(v6, (unint64_t *)&unk_10165F050, (uint64_t *)&unk_10165F5F0);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t *v0 = v10;
      return v8;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10112AFFC(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, void (*a6)(unint64_t))
{
  uint64_t v11 = v6;
  swift_bridgeObjectRelease();
  uint64_t v12 = __CocoaSet.count.getter();
  uint64_t v13 = swift_unknownObjectRetain();
  Swift::Int v14 = sub_1011238B0(v13, v12, a3, a4, a5, a6);
  Swift::Int v26 = v14;
  Swift::Int v15 = *(void *)(v14 + 40);
  swift_retain();
  Swift::Int v16 = NSObject._rawHashValue(seed:)(v15);
  uint64_t v17 = -1 << *(unsigned char *)(v14 + 32);
  unint64_t v18 = v16 & ~v17;
  if ((*(void *)(v14 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18))
  {
    sub_10001D4B0(0, a4);
    id v19 = *(id *)(*(void *)(v14 + 48) + 8 * v18);
    char v20 = static NSObject.== infix(_:_:)();

    if (v20)
    {
LABEL_6:
      swift_release();
      uint64_t v24 = *(void *)(*(void *)(v14 + 48) + 8 * v18);
      sub_10112CE9C(v18);
      if (static NSObject.== infix(_:_:)())
      {
        *uint64_t v11 = v26;
        return v24;
      }
      __break(1u);
    }
    else
    {
      uint64_t v21 = ~v17;
      while (1)
      {
        unint64_t v18 = (v18 + 1) & v21;
        if (((*(void *)(v14 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
          break;
        }
        id v22 = *(id *)(*(void *)(v14 + 48) + 8 * v18);
        char v23 = static NSObject.== infix(_:_:)();

        if (v23) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10112B1B0()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = sub_101123658(v2, v1, (uint64_t *)&unk_10165EF20, (uint64_t *)&unk_10166BF50, (void (*)(unint64_t))sub_100DDD850, (unint64_t *)&unk_10165EF30);
  uint64_t v10 = v3;
  swift_retain();
  sub_10000588C((uint64_t *)&unk_10166BF50);
  sub_100062734((unint64_t *)&unk_10165EF30, (uint64_t *)&unk_10166BF50);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    sub_100062734((unint64_t *)&unk_10166BF60, (uint64_t *)&unk_10166BF50);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
    sub_10112B850(v6, (unint64_t *)&unk_10165EF30, (uint64_t *)&unk_10166BF50);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t *v0 = v10;
      return v8;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10112B3B0(unint64_t a1)
{
  uint64_t v26 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v3 = *(void *)(v26 - 8);
  uint64_t result = __chkstk_darwin(v26);
  unint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v25 = v1;
    uint64_t v11 = ~v9;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      uint64_t v13 = v3;
      unint64_t v14 = (v12 + 1) & v11;
      uint64_t v15 = *(void *)(v13 + 72);
      while (1)
      {
        int64_t v16 = v15 * v10;
        sub_10112E69C(*(void *)(v7 + 48) + v15 * v10, (uint64_t)v6, type metadata accessor for SharedBeaconRecord);
        Hasher.init(_seed:)();
        sub_10120EF7C();
        Swift::Int v17 = Hasher._finalize()();
        sub_10112E704((uint64_t)v6, type metadata accessor for SharedBeaconRecord);
        unint64_t v18 = v17 & v11;
        if ((uint64_t)a1 >= (uint64_t)v14) {
          break;
        }
        if (v18 < v14) {
          goto LABEL_11;
        }
LABEL_12:
        unint64_t v19 = v15 * a1;
        if ((uint64_t)(v15 * a1) < v16 || *(void *)(v7 + 48) + v15 * a1 >= *(void *)(v7 + 48) + v16 + v15)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v19 == v16) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
        if (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          goto LABEL_16;
        }
      }
      if (v18 < v14) {
        goto LABEL_6;
      }
LABEL_11:
      if ((uint64_t)a1 < (uint64_t)v18) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_16:
    *(void *)(v8 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v25;
  }
  else
  {
    *(void *)(v8 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v20 = *v1;
  uint64_t v21 = *(void *)(*v1 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v20 + 16) = v23;
    ++*(_DWORD *)(v20 + 36);
  }
  return result;
}

unint64_t sub_10112B650(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v11 = 24 * v6;
        Swift::UInt v12 = *(unsigned __int8 *)(*(void *)(v3 + 48) + 24 * v6 + 16);
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Hasher._combine(_:)(v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          unint64_t v16 = v15 + 24 * v2;
          Swift::Int v17 = (long long *)(v15 + v11);
          if (24 * v2 < v11 || v16 >= (unint64_t)v17 + 24 || (v18 = v2 == v6, int64_t v2 = v6, !v18))
          {
            long long v10 = *v17;
            *(void *)(v16 + 16) = *((void *)v17 + 2);
            *(_OWORD *)unint64_t v16 = v10;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_10112B850(unint64_t result, unint64_t *a2, uint64_t *a3)
{
  int64_t v4 = result;
  uint64_t v5 = *v3;
  uint64_t v6 = *v3 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(*v3 + 32);
  unint64_t v8 = (result + 1) & ~v7;
  if (((1 << v8) & *(void *)(v6 + 8 * (v8 >> 6))) != 0)
  {
    uint64_t v11 = ~v7;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v6 + 8 * (v8 >> 6)) & (1 << v8)) != 0)
    {
      unint64_t v13 = (v12 + 1) & v11;
      sub_100062734(a2, a3);
      do
      {
        sub_10000588C(a3);
        uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)() & v11;
        if (v4 >= (uint64_t)v13)
        {
          if (v14 >= v13 && v4 >= v14)
          {
LABEL_16:
            uint64_t v17 = *(void *)(v5 + 48);
            BOOL v18 = (void *)(v17 + 8 * v4);
            uint64_t v19 = (void *)(v17 + 8 * v8);
            if (v4 != v8 || (int64_t v4 = v8, v18 >= v19 + 1))
            {
              *BOOL v18 = *v19;
              int64_t v4 = v8;
            }
          }
        }
        else if (v14 >= v13 || v4 >= v14)
        {
          goto LABEL_16;
        }
        unint64_t v8 = (v8 + 1) & v11;
      }
      while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
    }
    *(void *)(v6 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v4) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v20 = *(void *)(v5 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v5 + 16) = v22;
    ++*(_DWORD *)(v5 + 36);
  }
  return result;
}

unint64_t sub_10112BA34(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        long long v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        unint64_t v12 = v10[1];
        Hasher.init(_seed:)();
        sub_1000361E0(v11, v12);
        Data.hash(into:)();
        Swift::Int v13 = Hasher._finalize()();
        sub_10001CFB8(v11, v12);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          unint64_t v16 = (_OWORD *)(v15 + 16 * v2);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            *unint64_t v16 = *v17;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_10112BC0C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unint64_t v10 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 < v9) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(v3 + 48);
          unint64_t v12 = (unsigned char *)(v11 + v2);
          Swift::Int v13 = (unsigned char *)(v11 + v6);
          if (v2 != v6 || (int64_t v2 = v6, v12 >= v13 + 1))
          {
            *unint64_t v12 = *v13;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v14 = *(void *)(v3 + 16);
  BOOL v15 = __OFSUB__(v14, 1);
  uint64_t v16 = v14 - 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x10112C064);
  }
  *(void *)(v3 + 16) = v16;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

unint64_t sub_10112C0BC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        unint64_t v10 = *(void **)(*(void *)(v3 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        id v11 = v10;
        String.hash(into:)();
        Swift::Int v12 = Hasher._finalize()();

        swift_bridgeObjectRelease();
        unint64_t v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 < v9) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(v3 + 48);
          BOOL v15 = (void *)(v14 + 8 * v2);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v15 >= v16 + 1))
          {
            *BOOL v15 = *v16;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v17 = *(void *)(v3 + 16);
  BOOL v18 = __OFSUB__(v17, 1);
  uint64_t v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_10112C2A0(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v11 = v4;
        Swift::UInt v12 = *(unsigned __int8 *)(*(void *)(v3 + 48) + 24 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        Swift::Int v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
          {
            uint64_t v4 = v11;
          }
          else
          {
            uint64_t v4 = v11;
            if (v2 >= v14) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v4 = v11;
          if (v14 >= v9 || v2 >= v14)
          {
LABEL_12:
            uint64_t v15 = *(void *)(v3 + 48);
            unint64_t v16 = v15 + 24 * v2;
            uint64_t v17 = (long long *)(v15 + 24 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v16 >= (unint64_t)v17 + 24))
            {
              long long v10 = *v17;
              *(void *)(v16 + 16) = *((void *)v17 + 2);
              *(_OWORD *)unint64_t v16 = v10;
              int64_t v2 = v6;
            }
          }
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10112C4AC(int64_t a1, uint64_t (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  int v42 = a3;
  uint64_t v7 = a2(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v12 = *v5;
  uint64_t v13 = *v5 + 56;
  uint64_t v14 = -1 << *(unsigned char *)(*v5 + 32);
  unint64_t v15 = (a1 + 1) & ~v14;
  if (((1 << v15) & *(void *)(v13 + 8 * (v15 >> 6))) != 0)
  {
    unint64_t v38 = v5;
    uint64_t v16 = ~v14;
    swift_retain();
    uint64_t v17 = _HashTable.previousHole(before:)();
    uint64_t v18 = v12;
    if ((*(void *)(v13 + 8 * (v15 >> 6)) & (1 << v15)) != 0)
    {
      unint64_t v40 = (v17 + 1) & v16;
      uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      uint64_t v19 = v8 + 16;
      uint64_t v39 = v20;
      uint64_t v45 = *(void *)(v19 + 56);
      uint64_t v41 = v19;
      BOOL v21 = (void (**)(char *, uint64_t))(v19 - 8);
      do
      {
        uint64_t v22 = v13;
        int64_t v23 = v45 * v15;
        v39(v11, *(void *)(v18 + 48) + v45 * v15, v7);
        uint64_t v24 = v18;
        sub_10112DAEC(v42, v43);
        uint64_t v25 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v21)(v11, v7);
        unint64_t v26 = v25 & v16;
        if (a1 >= (uint64_t)v40)
        {
          if (v26 >= v40 && a1 >= (uint64_t)v26)
          {
LABEL_16:
            uint64_t v18 = v24;
            uint64_t v29 = *(void *)(v24 + 48);
            int64_t v30 = v45 * a1;
            unint64_t v31 = v29 + v45 * a1;
            unint64_t v32 = v29 + v23 + v45;
            if (v45 * a1 < v23 || v31 >= v32)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v15;
            }
            else
            {
              a1 = v15;
              if (v30 != v23)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v15;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v26 >= v40 || a1 >= (uint64_t)v26)
        {
          goto LABEL_16;
        }
        uint64_t v18 = v24;
LABEL_5:
        unint64_t v15 = (v15 + 1) & v16;
        uint64_t v13 = v22;
      }
      while (((*(void *)(v22 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
    }
    *(void *)(v13 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v5 = v38;
  }
  else
  {
    *(void *)(v13 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v34 = *v5;
  uint64_t v35 = *(void *)(*v5 + 16);
  BOOL v36 = __OFSUB__(v35, 1);
  uint64_t v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v34 + 16) = v37;
    ++*(_DWORD *)(v34 + 36);
  }
  return result;
}

unint64_t sub_10112C798(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      type metadata accessor for AnyCancellable();
      sub_10112DAEC((unint64_t *)&unk_10165F250, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
      do
      {
        uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 >= v9 && v2 >= v10)
          {
LABEL_16:
            uint64_t v13 = *(void *)(v3 + 48);
            uint64_t v14 = (void *)(v13 + 8 * v2);
            unint64_t v15 = (void *)(v13 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v14 >= v15 + 1))
            {
              *uint64_t v14 = *v15;
              int64_t v2 = v6;
            }
          }
        }
        else if (v10 >= v9 || v2 >= v10)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_10112C988(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10112CB50(unint64_t a1)
{
  uint64_t v30 = type metadata accessor for BeaconIdentifier();
  uint64_t v3 = *(void *)(v30 - 8);
  uint64_t result = __chkstk_darwin(v30);
  uint64_t v29 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v1;
  uint64_t v7 = *v1 + 56;
  uint64_t v8 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    unint64_t v26 = v1;
    uint64_t v10 = ~v8;
    swift_retain();
    int64_t v11 = a1;
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v7 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v13 = (v12 + 1) & v10;
      uint64_t v14 = *(void *)(v3 + 72);
      uint64_t v27 = v14;
      uint64_t v28 = v7;
      uint64_t v15 = (uint64_t)v29;
      do
      {
        int64_t v16 = v14 * v9;
        sub_10112E69C(*(void *)(v6 + 48) + v14 * v9, v15, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        uint64_t v17 = v6;
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_10112DAEC(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        unint64_t v18 = v13;
        dispatch thunk of Hashable.hash(into:)();
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int v19 = Hasher._finalize()();
        sub_10112E704(v15, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        Swift::Int v20 = v19 & v10;
        unint64_t v13 = v18;
        if (v11 >= (uint64_t)v18)
        {
          if (v20 < v18)
          {
            uint64_t v14 = v27;
            uint64_t v7 = v28;
            uint64_t v6 = v17;
            goto LABEL_6;
          }
          uint64_t v14 = v27;
          uint64_t v7 = v28;
          uint64_t v6 = v17;
          if (v11 < v20) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v14 = v27;
          uint64_t v7 = v28;
          uint64_t v6 = v17;
          if (v20 < v13 && v11 < v20) {
            goto LABEL_6;
          }
        }
        int64_t v21 = v14 * v11;
        if (v14 * v11 < v16 || *(void *)(v6 + 48) + v14 * v11 >= (unint64_t)(*(void *)(v6 + 48) + v16 + v14))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v11 = v9;
          if (v21 == v16) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        int64_t v11 = v9;
LABEL_6:
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    *(void *)(v7 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v11) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v26;
  }
  else
  {
    *(void *)(v7 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v22 = *v1;
  uint64_t v23 = *(void *)(*v1 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v22 + 16) = v25;
    ++*(_DWORD *)(v22 + 36);
  }
  return result;
}

unint64_t sub_10112CE9C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v2);
            unint64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *uint64_t v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10112D040(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10000588C((uint64_t *)&unk_10166BF50);
    sub_100062734((unint64_t *)&unk_10165EF30, (uint64_t *)&unk_10166BF50);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v20;
    uint64_t v19 = v21;
    uint64_t v5 = v22;
    uint64_t v6 = v23;
    unint64_t v7 = v24;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v6 = 0;
  }
  int64_t v11 = (unint64_t)(v5 + 64) >> 6;
  while (v3 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      return sub_100132C20();
    }
    swift_unknownObjectRetain();
    sub_10000588C((uint64_t *)&unk_10166BF50);
    swift_dynamicCast();
    swift_unknownObjectRelease();
    uint64_t v14 = v6;
    uint64_t v12 = v7;
    if (!v25) {
      return sub_100132C20();
    }
LABEL_33:
    XPCSession.proxy.getter();
    if (v25)
    {
      [v25 discoveredUnknownAccessory:a2];
      swift_release();
      uint64_t result = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t result = swift_release();
    }
    uint64_t v6 = v14;
    unint64_t v7 = v12;
  }
  if (v7)
  {
    uint64_t v12 = (v7 - 1) & v7;
    unint64_t v13 = __clz(__rbit64(v7)) | (v6 << 6);
    uint64_t v14 = v6;
LABEL_32:
    uint64_t v18 = *(void *)(*(void *)(v3 + 48) + 8 * v13);
    swift_retain();
    if (!v18) {
      return sub_100132C20();
    }
    goto LABEL_33;
  }
  int64_t v15 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v15 >= v11) {
      return sub_100132C20();
    }
    unint64_t v16 = *(void *)(v19 + 8 * v15);
    uint64_t v14 = v6 + 1;
    if (!v16)
    {
      uint64_t v14 = v6 + 2;
      if (v6 + 2 >= v11) {
        return sub_100132C20();
      }
      unint64_t v16 = *(void *)(v19 + 8 * v14);
      if (!v16)
      {
        uint64_t v14 = v6 + 3;
        if (v6 + 3 >= v11) {
          return sub_100132C20();
        }
        unint64_t v16 = *(void *)(v19 + 8 * v14);
        if (!v16)
        {
          uint64_t v14 = v6 + 4;
          if (v6 + 4 >= v11) {
            return sub_100132C20();
          }
          unint64_t v16 = *(void *)(v19 + 8 * v14);
          if (!v16)
          {
            uint64_t v14 = v6 + 5;
            if (v6 + 5 >= v11) {
              return sub_100132C20();
            }
            unint64_t v16 = *(void *)(v19 + 8 * v14);
            if (!v16)
            {
              uint64_t v17 = v6 + 6;
              while (v11 != v17)
              {
                unint64_t v16 = *(void *)(v19 + 8 * v17++);
                if (v16)
                {
                  uint64_t v14 = v17 - 1;
                  goto LABEL_31;
                }
              }
              return sub_100132C20();
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v12 = (v16 - 1) & v16;
    unint64_t v13 = __clz(__rbit64(v16)) + (v14 << 6);
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_10112D32C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10000588C((uint64_t *)&unk_10166BF50);
    sub_100062734((unint64_t *)&unk_10165EF30, (uint64_t *)&unk_10166BF50);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v3 = v21;
    uint64_t v4 = v22;
    unint64_t v5 = v23;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      return sub_100132C20();
    }
    swift_unknownObjectRetain();
    sub_10000588C((uint64_t *)&unk_10166BF50);
    swift_dynamicCast();
    swift_unknownObjectRelease();
    uint64_t v12 = v4;
    uint64_t v10 = v5;
    if (!v24) {
      return sub_100132C20();
    }
LABEL_33:
    XPCSession.proxy.getter();
    if (v24)
    {
      uint64_t v17 = (void *)_convertErrorToNSError(_:)();
      [v24 unknownAccessoryDiscoveryError:v17];
      swift_release();

      uint64_t result = swift_unknownObjectRelease();
    }
    else
    {
      uint64_t result = swift_release();
    }
    uint64_t v4 = v12;
    unint64_t v5 = v10;
  }
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v12 = v4;
LABEL_32:
    uint64_t v16 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
    swift_retain();
    if (!v16) {
      return sub_100132C20();
    }
    goto LABEL_33;
  }
  int64_t v13 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v13 >= v9) {
      return sub_100132C20();
    }
    unint64_t v14 = *(void *)(v18 + 8 * v13);
    uint64_t v12 = v4 + 1;
    if (!v14)
    {
      uint64_t v12 = v4 + 2;
      if (v4 + 2 >= v9) {
        return sub_100132C20();
      }
      unint64_t v14 = *(void *)(v18 + 8 * v12);
      if (!v14)
      {
        uint64_t v12 = v4 + 3;
        if (v4 + 3 >= v9) {
          return sub_100132C20();
        }
        unint64_t v14 = *(void *)(v18 + 8 * v12);
        if (!v14)
        {
          uint64_t v12 = v4 + 4;
          if (v4 + 4 >= v9) {
            return sub_100132C20();
          }
          unint64_t v14 = *(void *)(v18 + 8 * v12);
          if (!v14)
          {
            uint64_t v12 = v4 + 5;
            if (v4 + 5 >= v9) {
              return sub_100132C20();
            }
            unint64_t v14 = *(void *)(v18 + 8 * v12);
            if (!v14)
            {
              uint64_t v15 = v4 + 6;
              while (v9 != v15)
              {
                unint64_t v14 = *(void *)(v18 + 8 * v15++);
                if (v14)
                {
                  uint64_t v12 = v15 - 1;
                  goto LABEL_31;
                }
              }
              return sub_100132C20();
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v10 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

void sub_10112D628(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (v5) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v10 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v10 < v6)
    {
      unint64_t v11 = *(void *)(v2 + 8 * v10);
      ++v7;
      if (v11) {
        goto LABEL_22;
      }
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v6) {
        goto LABEL_26;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v7);
      if (v11) {
        goto LABEL_22;
      }
      int64_t v7 = v10 + 2;
      if (v10 + 2 >= v6) {
        goto LABEL_26;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v7);
      if (v11) {
        goto LABEL_22;
      }
      int64_t v7 = v10 + 3;
      if (v10 + 3 >= v6) {
        goto LABEL_26;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v7);
      if (v11)
      {
LABEL_22:
        unint64_t v5 = (v11 - 1) & v11;
        for (unint64_t i = __clz(__rbit64(v11)) + (v7 << 6); ; unint64_t i = v8 | (v7 << 6))
        {
          id v13 = *(id *)(*(void *)(a1 + 56) + 8 * i);
          XPCSession.proxy.getter();
          if (v14)
          {
            [v14 discoveredUnknownAccessory:v13];

            swift_unknownObjectRelease();
            if (!v5) {
              goto LABEL_7;
            }
          }
          else
          {

            if (!v5) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v8 = __clz(__rbit64(v5));
          v5 &= v5 - 1;
        }
      }
      int64_t v12 = v10 + 4;
      if (v12 < v6)
      {
        unint64_t v11 = *(void *)(v2 + 8 * v12);
        if (v11)
        {
          int64_t v7 = v12;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v7 = v12 + 1;
          if (__OFADD__(v12, 1)) {
            goto LABEL_28;
          }
          if (v7 >= v6) {
            break;
          }
          unint64_t v11 = *(void *)(v2 + 8 * v7);
          ++v12;
          if (v11) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_26:
    swift_release();
    return;
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t sub_10112D7D0(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10000588C((uint64_t *)&unk_10166BF50);
    sub_100062734((unint64_t *)&unk_10165EF30, (uint64_t *)&unk_10166BF50);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v21;
    uint64_t v20 = v22;
    uint64_t v3 = v23;
    uint64_t v4 = v24;
    unint64_t v5 = v25;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v20 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    uint64_t v4 = 0;
  }
  int64_t v19 = (unint64_t)(v3 + 64) >> 6;
  if ((v1 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    swift_unknownObjectRetain();
    sub_10000588C((uint64_t *)&unk_10166BF50);
    swift_dynamicCast();
    uint64_t v10 = v26;
    swift_unknownObjectRelease();
    uint64_t v11 = v4;
    uint64_t v12 = v5;
    if (v26)
    {
      do
      {
        sub_10001D4B0(0, (unint64_t *)&qword_10165F5D0);
        uint64_t v17 = (void *)XPCSession.connection.getter();
        char v18 = static NSObject.== infix(_:_:)();

        if (v18) {
          break;
        }
        uint64_t result = swift_release();
        uint64_t v4 = v11;
        unint64_t v5 = v12;
        if (v1 < 0) {
          goto LABEL_8;
        }
LABEL_11:
        if (v5)
        {
          uint64_t v12 = (v5 - 1) & v5;
          unint64_t v13 = __clz(__rbit64(v5)) | (v4 << 6);
          uint64_t v11 = v4;
        }
        else
        {
          int64_t v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            return result;
          }
          if (v14 >= v19) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v20 + 8 * v14);
          uint64_t v11 = v4 + 1;
          if (!v15)
          {
            uint64_t v11 = v4 + 2;
            if (v4 + 2 >= v19) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v20 + 8 * v11);
            if (!v15)
            {
              uint64_t v11 = v4 + 3;
              if (v4 + 3 >= v19) {
                goto LABEL_33;
              }
              unint64_t v15 = *(void *)(v20 + 8 * v11);
              if (!v15)
              {
                uint64_t v11 = v4 + 4;
                if (v4 + 4 >= v19) {
                  goto LABEL_33;
                }
                unint64_t v15 = *(void *)(v20 + 8 * v11);
                if (!v15)
                {
                  uint64_t v11 = v4 + 5;
                  if (v4 + 5 >= v19) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = *(void *)(v20 + 8 * v11);
                  if (!v15)
                  {
                    uint64_t v16 = v4 + 6;
                    while (v19 != v16)
                    {
                      unint64_t v15 = *(void *)(v20 + 8 * v16++);
                      if (v15)
                      {
                        uint64_t v11 = v16 - 1;
                        goto LABEL_28;
                      }
                    }
                    goto LABEL_33;
                  }
                }
              }
            }
          }
LABEL_28:
          uint64_t v12 = (v15 - 1) & v15;
          unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
        }
        uint64_t v10 = *(void *)(*(void *)(v1 + 48) + 8 * v13);
        swift_retain();
      }
      while (v10);
    }
  }
  else
  {
LABEL_33:
    uint64_t v10 = 0;
  }
  sub_100132C20();
  return v10;
}

uint64_t sub_10112DAEC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10112DB34()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10112DB74()
{
  return sub_101120970(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10112DB7C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10112DB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10112DB9C()
{
  return swift_release();
}

uint64_t sub_10112DBA4()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10112DBDC()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10112DC2C(uint64_t a1)
{
  sub_10111FF14(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10112DC38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WildModeAssociationRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10112DC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WildModeAssociationRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10112DD00()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10112DD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016653B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10112DDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for DiscoveredObject(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000588C(&qword_1016653B0) - 8);
  uint64_t v9 = *(void *)(v2 + 16);
  uint64_t v10 = v2 + ((v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  return sub_10111B488(a1, a2, v9, v2 + v6, v10);
}

uint64_t sub_10112DE90()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10112DEC8()
{
  uint64_t v1 = (int *)type metadata accessor for DiscoveredObject(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  unint64_t v6 = *(void *)(v0 + v3 + 16);
  if (v6 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v5 + 8), v6);
  }
  uint64_t v7 = v3 + v4;
  uint64_t v8 = v5 + v1[7];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v5 + v1[8];
  uint64_t v11 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  sub_1001A1AD8(*(void *)(v5 + v1[9]), *(void *)(v5 + v1[9] + 8));
  sub_10001CFB8(*(void *)(v5 + v1[14]), *(void *)(v5 + v1[14] + 8));

  return _swift_deallocObject(v0, v7, v2 | 7);
}

void sub_10112E038(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for DiscoveredObject(0) - 8);
  uint64_t v4 = *(void (**)(void, void))(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_10111C750(a1, v4, v5, v6);
}

uint64_t sub_10112E0B0()
{
  uint64_t v1 = (int *)type metadata accessor for DiscoveredObject(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = *(void *)(sub_10000588C(&qword_1016653B0) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v4 + v6) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  swift_release();
  uint64_t v9 = v0 + v3;
  unint64_t v10 = *(void *)(v0 + v3 + 16);
  if (v10 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v9 + 8), v10);
  }
  uint64_t v11 = v9 + v1[7];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v9 + v1[8];
  uint64_t v14 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  sub_1001A1AD8(*(void *)(v9 + v1[9]), *(void *)(v9 + v1[9] + 8));
  sub_10001CFB8(*(void *)(v9 + v1[14]), *(void *)(v9 + v1[14] + 8));
  uint64_t v15 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v0 + v7, 1, v15))
  {
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v0 + v7, v16);
    sub_10001CFB8(*(void *)(v0 + v7 + *(int *)(v15 + 20)), *(void *)(v0 + v7 + *(int *)(v15 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, v7 + v8, v2 | v6 | 7);
}

uint64_t sub_10112E340@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for DiscoveredObject(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000588C(&qword_1016653B0) - 8);
  uint64_t v9 = v2 + ((v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  return sub_10111C5E8(a1, v2 + v6, v9, a2);
}

uint64_t sub_10112E42C()
{
  uint64_t v1 = (int *)type metadata accessor for DiscoveredObject(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  unint64_t v6 = *(void *)(v0 + v3 + 16);
  if (v6 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v5 + 8), v6);
  }
  uint64_t v7 = v3 + v4;
  uint64_t v8 = v5 + v1[7];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v5 + v1[8];
  uint64_t v11 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  sub_1001A1AD8(*(void *)(v5 + v1[9]), *(void *)(v5 + v1[9] + 8));
  sub_10001CFB8(*(void *)(v5 + v1[14]), *(void *)(v5 + v1[14] + 8));

  return _swift_deallocObject(v0, v7, v2 | 7);
}

uint64_t sub_10112E59C()
{
  uint64_t v1 = *(void *)(type metadata accessor for DiscoveredObject(0) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10111C43C(v2, v3);
}

uint64_t sub_10112E614(uint64_t a1, uint64_t a2)
{
  return sub_10112E8FC(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_101119F58);
}

uint64_t sub_10112E634(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10112E69C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10112E704(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10112E768()
{
  uint64_t v1 = (int *)type metadata accessor for DiscoveredObject(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  unint64_t v6 = *(void *)(v0 + v3 + 16);
  if (v6 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v5 + 8), v6);
  }
  unint64_t v7 = ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v8 = v5 + v1[7];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v5 + v1[8];
  uint64_t v11 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  sub_1001A1AD8(*(void *)(v5 + v1[9]), *(void *)(v5 + v1[9] + 8));
  sub_10001CFB8(*(void *)(v5 + v1[14]), *(void *)(v5 + v1[14] + 8));

  return _swift_deallocObject(v0, v7, v2 | 7);
}

uint64_t sub_10112E8E4(uint64_t a1, uint64_t a2)
{
  return sub_10112E8FC(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_1011191D8);
}

uint64_t sub_10112E8FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(type metadata accessor for DiscoveredObject(0) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));

  return a3(a1, a2, v8, v3 + v7, v9);
}

uint64_t sub_10112E9C0()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10112EA68()
{
  uint64_t v1 = (int *)type metadata accessor for DiscoveredObject(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  unint64_t v6 = *(void *)(v0 + v3 + 16);
  if (v6 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v5 + 8), v6);
  }
  unint64_t v7 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v5 + v1[7];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v5 + v1[8];
  uint64_t v11 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  sub_1001A1AD8(*(void *)(v5 + v1[9]), *(void *)(v5 + v1[9] + 8));
  sub_10001CFB8(*(void *)(v5 + v1[14]), *(void *)(v5 + v1[14] + 8));
  swift_release();

  return _swift_deallocObject(v0, v7 + 16, v2 | 7);
}

uint64_t sub_10112EBF0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for DiscoveredObject(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10111A93C(a1, v1 + v4, *(void (**)(char *))(v1 + v5), *(void *)(v1 + v5 + 8));
}

uint64_t sub_10112EC84()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10112ECBC(uint64_t a1)
{
  return sub_101117C24(a1, *(void *)(v1 + 16));
}

uint64_t sub_10112ECC4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1011187F0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10112ECEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10166C100);
  uint64_t result = sub_10111B074(a1, a1 + *(int *)(v4 + 48));
  *a2 = result;
  return result;
}

uint64_t sub_10112ED38()
{
  return sub_101117E14();
}

uint64_t sub_10112ED40(uint64_t a1)
{
  return sub_101117EB8(a1);
}

uint64_t sub_10112ED48@<X0>(void *a1@<X8>)
{
  return sub_10112EE1C(a1);
}

void sub_10112ED60()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = *(id *)(v0 + 24);
  sub_10112D32C(v1);
}

uint64_t sub_10112EDB0@<X0>(void *a1@<X8>)
{
  return sub_1011204B8(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

void sub_10112EDCC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = *(id *)(v0 + 24);
  sub_10112D040(v1, (uint64_t)v2);
}

uint64_t sub_10112EE1C@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  *a1 = *(void *)(v1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_10112EE6C()
{
  return sub_10111586C(*(void *)(v0 + 16));
}

uint64_t sub_10112EE88()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v47 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v4 = (v47 + 40) & ~v47;
  uint64_t v5 = *(void *)(v3 + 64);
  unint64_t v6 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v46 = *(unsigned __int8 *)(*((void *)v6 - 1) + 80);
  uint64_t v44 = *(void *)(*((void *)v6 - 1) + 64);
  swift_release();
  swift_release();
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(v1 + v4, v2);
  uint64_t v45 = (v4 + v5 + v46) & ~v46;
  uint64_t v8 = v1 + v45;
  v7(v1 + v45, v2);
  uint64_t v9 = v1 + v45 + v6[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2)) {
    v7(v9, v2);
  }
  uint64_t v10 = v8 + v6[7];
  uint64_t v11 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = v8 + v6[10];
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v48(v12, v13);
  uint64_t v15 = v8 + v6[11];
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (!v43(v15, 1, v13)) {
    v48(v15, v13);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v8 + v6[14];
  uint64_t v17 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v7(v16, v2);
    sub_10001CFB8(*(void *)(v16 + *(int *)(v17 + 20)), *(void *)(v16 + *(int *)(v17 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = v8 + v6[15];
  int64_t v19 = (int *)type metadata accessor for AccessoryProductInfo();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v19 - 1) + 48))(v18, 1, v19))
  {
    uint64_t v42 = v1;
    uint64_t v20 = v18 + v19[5];
    uint64_t v21 = type metadata accessor for ServerStatusCode();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v18 + v19[16];
    uint64_t v23 = type metadata accessor for URL();
    uint64_t v24 = *(void *)(v23 - 8);
    unint64_t v25 = *(unsigned int (**)(void))(v24 + 48);
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v25)(v22, 1, v23)) {
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    }
    uint64_t v26 = v18 + v19[17];
    uint64_t v41 = v25;
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v25)(v26, 1, v23)) {
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v23);
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = v18 + v19[20];
    uint64_t v28 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v27, 1, v28))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v39 = v27 + *(int *)(v28 + 40);
      if (!v41()) {
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v39, v23);
      }
      uint64_t v40 = v27 + *(int *)(v28 + 44);
      if (!v41()) {
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v40, v23);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v29 = (uint64_t *)(v18 + v19[23]);
    unint64_t v30 = v29[1];
    uint64_t v1 = v42;
    if (v30 >> 60 != 15) {
      sub_10001CFB8(*v29, v30);
    }
    unint64_t v31 = (uint64_t *)(v18 + v19[24]);
    unint64_t v32 = v31[1];
    if (v32 >> 60 != 15) {
      sub_10001CFB8(*v31, v32);
    }
    size_t v33 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v33(v18 + v19[25], v23);
    v33(v18 + v19[26], v23);
    v33(v18 + v19[27], v23);
    v33(v18 + v19[28], v23);
    v33(v18 + v19[29], v23);
    v33(v18 + v19[30], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33(v18 + v19[37], v23);
    v33(v18 + v19[38], v23);
    v33(v18 + v19[39], v23);
    v33(v18 + v19[40], v23);
    v33(v18 + v19[41], v23);
    v33(v18 + v19[42], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v34 = v8 + v6[18];
  if (!v43(v34, 1, v13)) {
    v48(v34, v13);
  }
  uint64_t v35 = v8 + v6[19];
  if (!v43(v35, 1, v13)) {
    v48(v35, v13);
  }
  BOOL v36 = (uint64_t *)(v8 + v6[20]);
  unint64_t v37 = v36[1];
  if (((v37 >> 60) | 4) != 0xF) {
    sub_10001CFB8(*v36, v37);
  }

  return _swift_deallocObject(v1, v45 + v44, v47 | v46 | 7);
}

uint64_t sub_10112F730(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for WildModeAssociationRecord(0) - 8);
  uint64_t v7 = v1[2];
  uint64_t v8 = (void (*)(char *))v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_10112190C(a1, v7, v8, v9, (uint64_t)v1 + v4, v10);
}

uint64_t sub_10112F80C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v47 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v4 = (v47 + 48) & ~v47;
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v46 = *(unsigned __int8 *)(*((void *)v6 - 1) + 80);
  uint64_t v44 = *(void *)(*((void *)v6 - 1) + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(v1 + v4, v2);
  uint64_t v45 = (v4 + v5 + v46) & ~v46;
  uint64_t v8 = v1 + v45;
  v7(v1 + v45, v2);
  uint64_t v9 = v1 + v45 + v6[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2)) {
    v7(v9, v2);
  }
  uint64_t v10 = v8 + v6[7];
  uint64_t v11 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = v8 + v6[10];
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v48(v12, v13);
  uint64_t v15 = v8 + v6[11];
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (!v43(v15, 1, v13)) {
    v48(v15, v13);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v8 + v6[14];
  uint64_t v17 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v7(v16, v2);
    sub_10001CFB8(*(void *)(v16 + *(int *)(v17 + 20)), *(void *)(v16 + *(int *)(v17 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = v8 + v6[15];
  int64_t v19 = (int *)type metadata accessor for AccessoryProductInfo();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v19 - 1) + 48))(v18, 1, v19))
  {
    uint64_t v42 = v1;
    uint64_t v20 = v18 + v19[5];
    uint64_t v21 = type metadata accessor for ServerStatusCode();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v18 + v19[16];
    uint64_t v23 = type metadata accessor for URL();
    uint64_t v24 = *(void *)(v23 - 8);
    unint64_t v25 = *(unsigned int (**)(void))(v24 + 48);
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v25)(v22, 1, v23)) {
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    }
    uint64_t v26 = v18 + v19[17];
    uint64_t v41 = v25;
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v25)(v26, 1, v23)) {
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v23);
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = v18 + v19[20];
    uint64_t v28 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v27, 1, v28))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v39 = v27 + *(int *)(v28 + 40);
      if (!v41()) {
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v39, v23);
      }
      uint64_t v40 = v27 + *(int *)(v28 + 44);
      if (!v41()) {
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v40, v23);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v29 = (uint64_t *)(v18 + v19[23]);
    unint64_t v30 = v29[1];
    uint64_t v1 = v42;
    if (v30 >> 60 != 15) {
      sub_10001CFB8(*v29, v30);
    }
    unint64_t v31 = (uint64_t *)(v18 + v19[24]);
    unint64_t v32 = v31[1];
    if (v32 >> 60 != 15) {
      sub_10001CFB8(*v31, v32);
    }
    size_t v33 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v33(v18 + v19[25], v23);
    v33(v18 + v19[26], v23);
    v33(v18 + v19[27], v23);
    v33(v18 + v19[28], v23);
    v33(v18 + v19[29], v23);
    v33(v18 + v19[30], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33(v18 + v19[37], v23);
    v33(v18 + v19[38], v23);
    v33(v18 + v19[39], v23);
    v33(v18 + v19[40], v23);
    v33(v18 + v19[41], v23);
    v33(v18 + v19[42], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v34 = v8 + v6[18];
  if (!v43(v34, 1, v13)) {
    v48(v34, v13);
  }
  uint64_t v35 = v8 + v6[19];
  if (!v43(v35, 1, v13)) {
    v48(v35, v13);
  }
  BOOL v36 = (uint64_t *)(v8 + v6[20]);
  unint64_t v37 = v36[1];
  if (((v37 >> 60) | 4) != 0xF) {
    sub_10001CFB8(*v36, v37);
  }

  return _swift_deallocObject(v1, v45 + v44, v47 | v46 | 7);
}

uint64_t sub_1011300B4(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for WildModeAssociationRecord(0) - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = v1[5];
  uint64_t v14 = (uint64_t)v1 + v6;
  uint64_t v15 = (uint64_t)v1 + (v9 & ~v8);
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v16;
  *uint64_t v16 = v3;
  v16[1] = sub_10001D2E4;
  return sub_10112213C(a1, v10, v11, v12, v13, v14, v15);
}

void sub_101130220()
{
}

uint64_t initializeWithCopy for KeyDropFetchResponse(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KeyDropFetchResponse(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for KeyDropFetchResponse(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyDropFetchResponse(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyDropFetchResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropFetchResponse()
{
  return &type metadata for KeyDropFetchResponse;
}

uint64_t *sub_101130414(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *int v4 = *a2;
    int v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    unint64_t v7 = a2[1];
    if (v7 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      uint64_t v9 = *a2;
      sub_1000361E0(*a2, a2[1]);
      *int v4 = v9;
      v4[1] = v7;
    }
    uint64_t v10 = a2[2];
    unint64_t v11 = a2[3];
    sub_1000361E0(v10, v11);
    v4[2] = v10;
    v4[3] = v11;
    v4[4] = a2[4];
    uint64_t v12 = *(int *)(a3 + 28);
    uint64_t v13 = (char *)v4 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for UUID();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain();
    if (v17(v14, 1, v15))
    {
      uint64_t v18 = sub_10000588C(&qword_101638CF0);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t sub_1011305D4(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    sub_10001CFB8(*a1, v4);
  }
  sub_10001CFB8(a1[2], a1[3]);
  swift_bridgeObjectRelease();
  int v5 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
    return v8(v5, v6);
  }
  return result;
}

uint64_t sub_1011306C4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v7 = *a2;
    sub_1000361E0(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v6;
  }
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = a2[4];
  uint64_t v10 = *(int *)(a3 + 28);
  unint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  swift_bridgeObjectRetain();
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_10000588C(&qword_101638CF0);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

uint64_t *sub_101130834(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a2[1];
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *a2;
      sub_1000361E0(*a2, a2[1]);
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_100BB9078((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v8 = *a2;
  sub_1000361E0(*a2, a2[1]);
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_10001CFB8(v9, v10);
LABEL_8:
  uint64_t v11 = a2[2];
  unint64_t v12 = a2[3];
  sub_1000361E0(v11, v12);
  uint64_t v13 = a1[2];
  unint64_t v14 = a1[3];
  a1[2] = v11;
  a1[3] = v12;
  sub_10001CFB8(v13, v14);
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v12) = v20(v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (!v12)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_13;
  }
  if (v21)
  {
LABEL_13:
    uint64_t v22 = sub_10000588C(&qword_101638CF0);
    memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t sub_101130A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 28);
  unint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = sub_10000588C(&qword_101638CF0);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_101130B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_100BB9078(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  sub_10001CFB8(v8, v6);
LABEL_6:
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v9, v10);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(a3 + 28);
  unint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_11;
  }
  if (v18)
  {
LABEL_11:
    uint64_t v19 = sub_10000588C(&qword_101638CF0);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_101130D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_101130D60);
}

uint64_t sub_101130D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_101130D78);
}

uint64_t type metadata accessor for KeyDropFetchResponse.LocationPayload(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10166C338);
}

void sub_101130D9C()
{
  sub_1003426B0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_101130E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_101130E60);
}

uint64_t sub_101130E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_101130F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_101130F30);
}

void *sub_101130F30(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10166C3D0);
}

uint64_t sub_101131000()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_101131098(void *a1, char a2, uint64_t a3)
{
  char v6 = a2 & 1;
  uint64_t v7 = sub_10000588C(&qword_10166C590);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_101134944();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = v6;
  char v14 = 0;
  sub_101134B38();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v3)
  {
    v12[1] = a3;
    char v13 = 1;
    sub_10000588C(&qword_10166C550);
    sub_101133704(&qword_10166C5A0, &qword_10166C550, (void (*)(void))sub_101134B8C);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_101131270@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1015A3B98;
  return sub_1007CA060(v2, a1, a2);
}

uint64_t sub_10113127C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1011312DC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10113132C()
{
  if (*v0) {
    return 0x6E6F697461636F6CLL;
  }
  else {
    return 0x6F43737574617473;
  }
}

uint64_t sub_101131378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_101132D14(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1011313A0(uint64_t a1)
{
  unint64_t v2 = sub_101134944();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1011313DC(uint64_t a1)
{
  unint64_t v2 = sub_101134944();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_101131418@<X0>(uint64_t a1@<X8>)
{
  return sub_101132484((uint64_t (*)(void))sub_10113289C, a1);
}

uint64_t sub_101131444(void *a1)
{
  return sub_101131098(a1, *(unsigned char *)v1, *(void *)(v1 + 8));
}

uint64_t sub_101131464(char *a1, char *a2)
{
  return sub_10071CEEC(*a1, *a2);
}

Swift::Int sub_101131470()
{
  return Hasher._finalize()();
}

uint64_t sub_1011314F0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10113155C()
{
  return Hasher._finalize()();
}

uint64_t sub_1011315D8@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1015A3B48;
  return sub_1007CA060(v2, a1, a2);
}

void sub_1011315E4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 25705;
  if (*v1) {
    uint64_t v2 = 0x6E6F697461636F6CLL;
  }
  unint64_t v3 = 0xE200000000000000;
  if (*v1) {
    unint64_t v3 = 0xEC0000006F666E49;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_101131620@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A3B48, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_101131684(uint64_t a1)
{
  unint64_t v2 = sub_101134EDC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1011316C0(uint64_t a1)
{
  unint64_t v2 = sub_101134EDC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1011316FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a4;
  uint64_t v8 = sub_10000588C(&qword_10166C618);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_101134EDC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  char v17 = 0;
  sub_10043CBC4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = v14;
    char v17 = 1;
    sub_10000588C(&qword_10166C600);
    sub_101134F30(&qword_10166C620, &qword_10166C628);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1011318DC(void *a1)
{
  Swift::String v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10166C448);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_101133770();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v3;
  v10[15] = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo(0);
    LOBYTE(v11) = 1;
    type metadata accessor for Date();
    sub_1011337C4((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_101131AAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_10166C438);
  uint64_t v22 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_101133770();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v19 = v8;
  uint64_t v12 = v22;
  uint64_t v11 = v23;
  uint64_t v13 = v10;
  char v26 = 0;
  sub_100037AA0();
  uint64_t v14 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v18 = v13;
  *(_OWORD *)uint64_t v13 = v25;
  LOBYTE(v25) = 1;
  sub_1011337C4(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v14);
  uint64_t v15 = (uint64_t)v18;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v18[*(int *)(v19 + 20)], v5, v11);
  sub_10113380C(v15, v21, type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_101133874(v15, type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
}

uint64_t sub_101131DF4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10166C428);
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t v23 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for KeyDropFetchResponse.RawLocationPayload(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1011336B0();
  uint64_t v12 = (uint64_t)v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v20 = v5;
  uint64_t v24 = a1;
  uint64_t v13 = v22;
  uint64_t v14 = (uint64_t)v11;
  char v26 = 0;
  sub_100037AA0();
  uint64_t v15 = v23;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(_OWORD *)uint64_t v14 = v25;
  char v26 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = v13;
  *(_OWORD *)(v14 + 16) = v25;
  sub_10000588C((uint64_t *)&unk_10164DBD0);
  char v26 = 2;
  sub_1005FB904();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v14 + 32) = v25;
  type metadata accessor for UUID();
  LOBYTE(v25) = 3;
  sub_1011337C4((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v17 = (uint64_t)v20;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_1002729C8(v17, v14 + *(int *)(v9 + 28));
  sub_10000588C(&qword_10165AD70);
  char v26 = 4;
  sub_101133704(&qword_10165AD78, &qword_10165AD70, (void (*)(void))sub_1005FB904);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v15);
  *(void *)(v14 + *(int *)(v9 + 32)) = v25;
  sub_10113380C(v14, v21, type metadata accessor for KeyDropFetchResponse.RawLocationPayload);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
  return sub_101133874(v14, type metadata accessor for KeyDropFetchResponse.RawLocationPayload);
}

void *sub_1011322E8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_101132AB4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_101132318(void *a1)
{
  return sub_1011316FC(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_101132338(uint64_t a1)
{
  unint64_t v2 = sub_101133770();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_101132374(uint64_t a1)
{
  unint64_t v2 = sub_101133770();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1011323B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_101131AAC(a1, a2);
}

uint64_t sub_1011323C8(void *a1)
{
  return sub_1011318DC(a1);
}

uint64_t sub_1011323E0(uint64_t a1)
{
  unint64_t v2 = sub_101134A40();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10113241C(uint64_t a1)
{
  unint64_t v2 = sub_101134A40();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_101132458@<X0>(uint64_t a1@<X8>)
{
  return sub_101132484((uint64_t (*)(void))sub_101132E38, a1);
}

uint64_t sub_101132484@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *(unsigned char *)a2 = result & 1;
    *(void *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_1011324BC()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7972636544636F6CLL;
      break;
    case 2:
      uint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 3:
      uint64_t result = 0x64496572616873;
      break;
    case 4:
      uint64_t result = 0x656B636150766C74;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_101132574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_101133018(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10113259C(uint64_t a1)
{
  unint64_t v2 = sub_1011336B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1011325D8(uint64_t a1)
{
  unint64_t v2 = sub_1011336B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_101132614@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_101131DF4(a1, a2);
}

uint64_t sub_10113262C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for KeyDropFetchResponse.RawLocationPayload(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (void *)((char *)&v21[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D010(a1, (uint64_t)v21);
  sub_101131DF4(v21, (uint64_t)v7);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v9 = v7[2];
  unint64_t v10 = v7[3];
  a2[2] = v9;
  a2[3] = v10;
  uint64_t v11 = (uint64_t)v7 + *(int *)(v5 + 28);
  uint64_t v12 = type metadata accessor for KeyDropFetchResponse.LocationPayload(0);
  sub_1003C5E38(v11, (uint64_t)a2 + *(int *)(v12 + 28));
  uint64_t v13 = v7[4];
  uint64_t v14 = *(uint64_t *)((char *)v7 + *(int *)(v5 + 32));
  swift_bridgeObjectRetain();
  sub_1000361E0(v9, v10);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_100C05274(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  a2[4] = (uint64_t)v15;
  uint64_t v16 = *v7;
  unint64_t v17 = v7[1];
  sub_100037A38(*v7, v17);
  uint64_t result = sub_101133874((uint64_t)v7, type metadata accessor for KeyDropFetchResponse.RawLocationPayload);
  if (v17 >> 60 == 15) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v16;
  }
  unint64_t v19 = 0xF000000000000000;
  if (v17 >> 60 != 15) {
    unint64_t v19 = v17;
  }
  *a2 = v18;
  a2[1] = v19;
  return result;
}

uint64_t sub_1011327B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10113262C(a1, a2);
}

uint64_t sub_1011327CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_101133268(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1011327F4(uint64_t a1)
{
  unint64_t v2 = sub_101133594();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_101132830(uint64_t a1)
{
  unint64_t v2 = sub_101133594();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10113286C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10113337C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10113289C(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_10166C538);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_101134944();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v8[30] = 0;
  sub_101134998();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v6 = v8[31];
  sub_10000588C(&qword_10166C550);
  v8[15] = 1;
  sub_101133704(&qword_10166C558, &qword_10166C550, (void (*)(void))sub_1011349EC);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v6;
}

void *sub_101132AB4(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10166C5F0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001CD44(a1, a1[3]);
  sub_101134EDC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C(&qword_10166C600);
    char v13 = 1;
    sub_101134F30(&qword_10166C608, &qword_10166C610);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v13 = 0;
    sub_100037AA0();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = v11;
    unint64_t v9 = v12;
    sub_1000361E0((uint64_t)v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    sub_10001CFB8((uint64_t)v7, v9);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_101132D14(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEF64616F6C796150)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_101132E38(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_10166C568);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_101134A40();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v8[30] = 0;
  sub_101134998();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v6 = v8[31];
  sub_10000588C(&qword_10166C578);
  v8[15] = 1;
  sub_101134A94();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v6;
}

uint64_t sub_101133018(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7972636544636F6CLL && a2 == 0xED000079654B7470 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC0000006F666E49 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64496572616873 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656B636150766C74 && a2 == 0xEA00000000007374)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_101133268(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x80000001013F0F70
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61636F4C6E736361 && a2 == 0xED0000736E6F6974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10113337C(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10166C408);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_10001CD44(a1, a1[3]);
  sub_101133594();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    char v10 = 0;
    sub_1011335E8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v7 = v11;
    char v10 = 1;
    sub_10113363C();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_101133594()
{
  unint64_t result = qword_10166C410;
  if (!qword_10166C410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C410);
  }
  return result;
}

unint64_t sub_1011335E8()
{
  unint64_t result = qword_10166C418;
  if (!qword_10166C418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C418);
  }
  return result;
}

unint64_t sub_10113363C()
{
  unint64_t result = qword_10166C420;
  if (!qword_10166C420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C420);
  }
  return result;
}

uint64_t type metadata accessor for KeyDropFetchResponse.RawLocationPayload(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10166C4A8);
}

unint64_t sub_1011336B0()
{
  unint64_t result = qword_10166C430;
  if (!qword_10166C430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C430);
  }
  return result;
}

uint64_t sub_101133704(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_101133770()
{
  unint64_t result = qword_10166C440;
  if (!qword_10166C440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C440);
  }
  return result;
}

uint64_t sub_1011337C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10113380C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_101133874(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo.CodingKeys()
{
  return &type metadata for KeyDropFetchResponse.OwnedLocationInfo.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for KeyDropFetchResponse.RawLocationPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1011339B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropFetchResponse.RawLocationPayload.CodingKeys()
{
  return &type metadata for KeyDropFetchResponse.RawLocationPayload.CodingKeys;
}

uint64_t *sub_1011339EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    unint64_t v7 = a2[1];
    if (v7 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      uint64_t v9 = *a2;
      sub_1000361E0(*a2, a2[1]);
      *unsigned int v4 = v9;
      v4[1] = v7;
    }
    uint64_t v10 = a2[2];
    unint64_t v11 = a2[3];
    sub_1000361E0(v10, v11);
    v4[2] = v10;
    v4[3] = v11;
    v4[4] = a2[4];
    uint64_t v12 = *(int *)(a3 + 28);
    char v13 = (char *)v4 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for UUID();
    uint64_t v16 = *(void *)(v15 - 8);
    unint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain();
    if (v17(v14, 1, v15))
    {
      uint64_t v18 = sub_10000588C(&qword_101638CF0);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 32));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_101133BC4(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    sub_10001CFB8(*a1, v4);
  }
  sub_10001CFB8(a1[2], a1[3]);
  swift_bridgeObjectRelease();
  int v5 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_101133CB4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v7 = *a2;
    sub_1000361E0(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v6;
  }
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = a2[4];
  uint64_t v10 = *(int *)(a3 + 28);
  unint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  swift_bridgeObjectRetain();
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_10000588C(&qword_101638CF0);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(void *)(a1 + *(int *)(a3 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 32));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_101133E3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a2[1];
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *a2;
      sub_1000361E0(*a2, a2[1]);
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v8 = *a2;
  sub_1000361E0(*a2, a2[1]);
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_10001CFB8(v9, v10);
LABEL_8:
  uint64_t v11 = a2[2];
  unint64_t v12 = a2[3];
  sub_1000361E0(v11, v12);
  uint64_t v13 = a1[2];
  unint64_t v14 = a1[3];
  a1[2] = v11;
  a1[3] = v12;
  sub_10001CFB8(v13, v14);
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (char *)a1 + v15;
  unint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_13;
  }
  if (v22)
  {
LABEL_13:
    uint64_t v23 = sub_10000588C(&qword_101638CF0);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_14:
  *(uint64_t *)((char *)a1 + *(int *)(a3 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 32));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_101134080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_10000588C(&qword_101638CF0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(void *)(a1 + *(int *)(a3 + 32)) = *(void *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_1011341B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_1001356D0(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  sub_10001CFB8(v8, v6);
LABEL_6:
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v9, v10);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_11;
  }
  if (v18)
  {
LABEL_11:
    uint64_t v19 = sub_10000588C(&qword_101638CF0);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_12:
  *(void *)(a1 + *(int *)(a3 + 32)) = *(void *)(a2 + *(int *)(a3 + 32));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1011343B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1011343C4);
}

uint64_t sub_1011343C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000588C(&qword_101638CF0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10113447C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_101134490);
}

uint64_t sub_101134494(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000588C(&qword_101638CF0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_101134540()
{
  sub_1003426B0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for KeyDropFetchResponse.CodingKeys()
{
  return &type metadata for KeyDropFetchResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for KeyDropFetchResponse.SharedLocationResult()
{
  return &type metadata for KeyDropFetchResponse.SharedLocationResult;
}

ValueMetadata *type metadata accessor for KeyDropFetchResponse.OwnedLocationResult()
{
  return &type metadata for KeyDropFetchResponse.OwnedLocationResult;
}

unint64_t sub_101134630()
{
  unint64_t result = qword_10166C4F0;
  if (!qword_10166C4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C4F0);
  }
  return result;
}

unint64_t sub_101134688()
{
  unint64_t result = qword_10166C4F8;
  if (!qword_10166C4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C4F8);
  }
  return result;
}

unint64_t sub_1011346E0()
{
  unint64_t result = qword_10166C500;
  if (!qword_10166C500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C500);
  }
  return result;
}

unint64_t sub_101134738()
{
  unint64_t result = qword_10166C508;
  if (!qword_10166C508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C508);
  }
  return result;
}

unint64_t sub_101134790()
{
  unint64_t result = qword_10166C510;
  if (!qword_10166C510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C510);
  }
  return result;
}

unint64_t sub_1011347E8()
{
  unint64_t result = qword_10166C518;
  if (!qword_10166C518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C518);
  }
  return result;
}

unint64_t sub_101134840()
{
  unint64_t result = qword_10166C520;
  if (!qword_10166C520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C520);
  }
  return result;
}

unint64_t sub_101134898()
{
  unint64_t result = qword_10166C528;
  if (!qword_10166C528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C528);
  }
  return result;
}

unint64_t sub_1011348F0()
{
  unint64_t result = qword_10166C530;
  if (!qword_10166C530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C530);
  }
  return result;
}

unint64_t sub_101134944()
{
  unint64_t result = qword_10166C540;
  if (!qword_10166C540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C540);
  }
  return result;
}

unint64_t sub_101134998()
{
  unint64_t result = qword_10166C548;
  if (!qword_10166C548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C548);
  }
  return result;
}

unint64_t sub_1011349EC()
{
  unint64_t result = qword_10166C560;
  if (!qword_10166C560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C560);
  }
  return result;
}

unint64_t sub_101134A40()
{
  unint64_t result = qword_10166C570;
  if (!qword_10166C570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C570);
  }
  return result;
}

unint64_t sub_101134A94()
{
  unint64_t result = qword_10166C580;
  if (!qword_10166C580)
  {
    sub_10000592C(&qword_10166C578);
    sub_1011337C4(&qword_10166C588, (void (*)(uint64_t))type metadata accessor for KeyDropFetchResponse.LocationPayload);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C580);
  }
  return result;
}

unint64_t sub_101134B38()
{
  unint64_t result = qword_10166C598;
  if (!qword_10166C598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C598);
  }
  return result;
}

unint64_t sub_101134B8C()
{
  unint64_t result = qword_10166C5A8;
  if (!qword_10166C5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C5A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropFetchResponse.SharedLocationResult.CodingKeys()
{
  return &type metadata for KeyDropFetchResponse.SharedLocationResult.CodingKeys;
}

ValueMetadata *type metadata accessor for KeyDropFetchResponse.OwnedLocationResult.CodingKeys()
{
  return &type metadata for KeyDropFetchResponse.OwnedLocationResult.CodingKeys;
}

ValueMetadata *type metadata accessor for KeyDropFetchResponse.OwnedLocationPayload()
{
  return &type metadata for KeyDropFetchResponse.OwnedLocationPayload;
}

ValueMetadata *type metadata accessor for KeyDropFetchResponse.Status()
{
  return &type metadata for KeyDropFetchResponse.Status;
}

unint64_t sub_101134C24()
{
  unint64_t result = qword_10166C5B0;
  if (!qword_10166C5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C5B0);
  }
  return result;
}

unint64_t sub_101134C7C()
{
  unint64_t result = qword_10166C5B8;
  if (!qword_10166C5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C5B8);
  }
  return result;
}

unint64_t sub_101134CD4()
{
  unint64_t result = qword_10166C5C0;
  if (!qword_10166C5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C5C0);
  }
  return result;
}

unint64_t sub_101134D2C()
{
  unint64_t result = qword_10166C5C8;
  if (!qword_10166C5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C5C8);
  }
  return result;
}

unint64_t sub_101134D84()
{
  unint64_t result = qword_10166C5D0;
  if (!qword_10166C5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C5D0);
  }
  return result;
}

unint64_t sub_101134DDC()
{
  unint64_t result = qword_10166C5D8;
  if (!qword_10166C5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C5D8);
  }
  return result;
}

unint64_t sub_101134E34()
{
  unint64_t result = qword_10166C5E0;
  if (!qword_10166C5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C5E0);
  }
  return result;
}

unint64_t sub_101134E88()
{
  unint64_t result = qword_10166C5E8;
  if (!qword_10166C5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C5E8);
  }
  return result;
}

unint64_t sub_101134EDC()
{
  unint64_t result = qword_10166C5F8;
  if (!qword_10166C5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C5F8);
  }
  return result;
}

uint64_t sub_101134F30(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_10166C600);
    sub_1011337C4(a2, (void (*)(uint64_t))type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s12searchpartyd20KeyDropFetchResponseV6StatusOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x101135090);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropFetchResponse.OwnedLocationPayload.CodingKeys()
{
  return &type metadata for KeyDropFetchResponse.OwnedLocationPayload.CodingKeys;
}

unint64_t sub_1011350CC()
{
  unint64_t result = qword_10166C630;
  if (!qword_10166C630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C630);
  }
  return result;
}

unint64_t sub_101135124()
{
  unint64_t result = qword_10166C638;
  if (!qword_10166C638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C638);
  }
  return result;
}

unint64_t sub_10113517C()
{
  unint64_t result = qword_10166C640;
  if (!qword_10166C640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C640);
  }
  return result;
}

uint64_t sub_1011351DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return _swift_task_switch(sub_101135200, 0, 0);
}

uint64_t sub_101135200()
{
  uint64_t v1 = v0[4];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v0[2] = v1;
  sub_10000588C(&qword_10166C680);
  sub_101136574();
  uint64_t v2 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v0[6] = v2;
  v0[7] = v3;
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[3];
  swift_release();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[8] = v8;
  void v8[2] = v6;
  v8[3] = v7;
  v8[4] = v4;
  v8[5] = v5;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[9] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1011353B4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v9, 0, 0, 0xD00000000000001CLL, 0x8000000101422D00, sub_101136660, v8, (char *)&type metadata for () + 8);
}

uint64_t sub_1011353B4()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10076AD18;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1011354D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1011354D0()
{
  sub_10001CFB8(v0[6], v0[7]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_101135534(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v8 = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_101136678;
  void aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769474;
  aBlock[3] = &unk_10160A728;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [a2 setWithUserIdentifier:isa beaconsData:v8 completion:v11];
  _Block_release(v11);
}

void sub_101135718(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000588C(&qword_10166C688);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_101136424;
  void aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769CD8;
  aBlock[3] = &unk_10160A6D8;
  unint64_t v9 = _Block_copy(aBlock);
  swift_release();
  [a2 beaconInfoWithCompletion:v9];
  _Block_release(v9);
}

uint64_t sub_1011358C0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_errorRetain();
  }
  else
  {
    if (a2 >> 60 != 15)
    {
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      sub_1000361E0(a1, a2);
      PropertyListDecoder.init()();
      sub_10000588C(&qword_10166C680);
      sub_1011364E0(&qword_10166C690, &qword_10166C680);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      swift_release();
      sub_10000588C(&qword_10166C688);
      CheckedContinuation.resume(returning:)();
      return sub_100037A24(a1, a2);
    }
    sub_1008B1138();
    swift_allocError();
    *uint64_t v4 = 1;
  }
  sub_10000588C(&qword_10166C688);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t sub_101135A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_101135A8C, 0, 0);
}

uint64_t sub_101135A8C()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for BeaconIdentifier();
  sub_101136618(&qword_10164D2A0, (void (*)(uint64_t))type metadata accessor for BeaconIdentifier);
  uint64_t v1 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v3 = v2;
  v0[5] = v1;
  v0[6] = v2;
  swift_release();
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  v5[2] = v4;
  v5[3] = v1;
  v5[4] = v3;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  uint64_t v7 = sub_10000588C(&qword_101659D60);
  *uint64_t v6 = v0;
  v6[1] = sub_100769F8C;
  uint64_t v8 = v0[2];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, 0, 0, 0xD00000000000001DLL, 0x8000000101422CE0, sub_1011362F8, v5, v7);
}

void sub_101135C68(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000588C(&qword_10166C668);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_101136310;
  void aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769CD8;
  aBlock[3] = &unk_10160A688;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 beaconInfoWithBeaconIdentifierData:isa completion:v10];
  _Block_release(v10);
}

uint64_t sub_101135E30(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101659D60);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v15 - v10;
  if (a3)
  {
    uint64_t v16 = a3;
    swift_errorRetain();
  }
  else
  {
    if (a2 >> 60 != 15)
    {
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      sub_1000361E0(a1, a2);
      PropertyListDecoder.init()();
      sub_1011364E0(&qword_10166C670, &qword_101659D60);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      swift_release();
      sub_101136348((uint64_t)v11, (uint64_t)v9);
      sub_10000588C(&qword_10166C668);
      CheckedContinuation.resume(returning:)();
      sub_100037A24(a1, a2);
      return sub_1011363B0((uint64_t)v11);
    }
    sub_1008B1138();
    uint64_t v12 = swift_allocError();
    *uint64_t v13 = 1;
    uint64_t v16 = v12;
  }
  sub_10000588C(&qword_10166C668);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t sub_101136050(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100033F68;
  v7[4] = a2;
  v7[5] = v6;
  v7[3] = a1;
  return _swift_task_switch(sub_101135200, 0, 0);
}

uint64_t sub_101136110()
{
  *(void *)(v1 + 24) = *v0;
  return _swift_task_switch(sub_101136134, 0, 0);
}

uint64_t sub_101136134()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = swift_task_alloc();
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  uint64_t v4 = sub_10000588C(&qword_10166C680);
  *uint64_t v3 = v0;
  v3[1] = sub_100770B0C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0x6E496E6F63616562, 0xEC00000029286F66, sub_101136410, v2, v4);
}

uint64_t sub_10113623C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[3] = a2;
  v7[4] = v6;
  v7[1] = sub_10001D2E4;
  v7[2] = a1;
  return _swift_task_switch(sub_101135A8C, 0, 0);
}

void sub_1011362F8(uint64_t a1)
{
  sub_101135C68(a1, *(void **)(v1 + 16));
}

uint64_t sub_101136304()
{
  return sub_1004AF4AC(&qword_10166C668);
}

uint64_t sub_101136310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_101136444(a1, a2, a3, &qword_10166C668, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_101135E30);
}

uint64_t sub_101136330(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_101136340()
{
  return swift_release();
}

uint64_t sub_101136348(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101659D60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1011363B0(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101659D60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_101136410(uint64_t a1)
{
  sub_101135718(a1, *(void **)(v1 + 16));
}

uint64_t sub_101136418()
{
  return sub_1004AF4AC(&qword_10166C688);
}

uint64_t sub_101136424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_101136444(a1, a2, a3, &qword_10166C688, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1011358C0);
}

uint64_t sub_101136444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(sub_10000588C(a4) - 8);
  uint64_t v10 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return a5(a1, a2, a3, v10);
}

uint64_t sub_1011364E0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    sub_101136618(&qword_10166C678, (void (*)(uint64_t))type metadata accessor for KeyGenerationBeaconInfo);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_101136574()
{
  unint64_t result = qword_10166C6A0;
  if (!qword_10166C6A0)
  {
    sub_10000592C(&qword_10166C680);
    sub_101136618(&qword_10166C6A8, (void (*)(uint64_t))type metadata accessor for KeyGenerationBeaconInfo);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C6A0);
  }
  return result;
}

uint64_t sub_101136618(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_101136660(uint64_t a1)
{
  sub_101135534(a1, *(void **)(v1 + 16));
}

uint64_t sub_10113666C()
{
  return sub_1004AF4AC((uint64_t *)&unk_1016565A0);
}

uint64_t sub_101136678(uint64_t a1)
{
  sub_10000588C((uint64_t *)&unk_1016565A0);

  return sub_10076E484(a1);
}

ValueMetadata *type metadata accessor for BeaconKeyServiceClientTrampoline()
{
  return &type metadata for BeaconKeyServiceClientTrampoline;
}

uint64_t sub_10113670C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CharacteristicUUID(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [*(id *)(*(void *)a1 + 40) UUID];
  sub_100BBC528((unint64_t)v4);

  LOBYTE(v5) = static UUID.== infix(_:_:)();
  sub_100A423B0((uint64_t)v4, type metadata accessor for CharacteristicUUID);
  return v5 & 1;
}

uint64_t sub_1011367E4(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for CharacteristicUUID(0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v14 - v8;
  id v10 = [*(id *)(*(void *)a1 + 40) UUID];
  sub_100BBC528((unint64_t)v9);

  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  sub_10001CD44(a2, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  LOBYTE(v10) = static UUID.== infix(_:_:)();
  sub_100A423B0((uint64_t)v7, type metadata accessor for CharacteristicUUID);
  sub_100A423B0((uint64_t)v9, type metadata accessor for CharacteristicUUID);
  return v10 & 1;
}

void sub_101136930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CharacteristicUUID(0);
  __chkstk_darwin(v8 - 8);
  id v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v23 = a3;
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  id v12 = *(id *)&Strong[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];

  uint64_t v13 = *(void *)(a4 + 16);
  if (v13)
  {
    uint64_t v29 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v14 = self;
    uint64_t v15 = a4 + 32;
    do
    {
      sub_10001D010(v15, (uint64_t)v26);
      uint64_t v16 = v27;
      uint64_t v17 = v28;
      sub_10001CD44(v26, v27);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v19 = [v14 UUIDWithNSUUID:isa];

      uint64_t v20 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, uint64_t))(*(void *)(v20 - 8) + 8))(v10, v20);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v15 += 40;
      --v13;
    }
    while (v13);
  }
  sub_10113705C();
  Class v21 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v12 discoverCharacteristics:v21 forService:*(void *)(a3 + 32)];
}

uint64_t sub_101136B88(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  if (*(void *)(a1 + 48))
  {
    v5[0] = a1;
    __int16 v6 = 260;
    swift_retain();
    a2(v5);
    return sub_10113709C((uint64_t)v5);
  }
  else
  {
    *(void *)(a1 + 48) = a2;
    *(void *)(a1 + 56) = a3;
    swift_retain();
    return sub_1000A1534(0);
  }
}

uint64_t sub_101136C10@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_101136C6C()
{
  swift_unknownObjectUnownedDestroy();
  swift_release();

  swift_bridgeObjectRelease();
  sub_1000A1534(*(void *)(v0 + 48));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Service()
{
  return self;
}

{
  return type metadata accessor for Service();
}

Swift::Int sub_101136CE8()
{
  return Hasher._finalize()();
}

void sub_101136D30()
{
  id v1 = *(id *)(*(void *)v0 + 32);
  NSObject.hash(into:)();
}

Swift::Int sub_101136D8C()
{
  Hasher.init(_seed:)();
  id v1 = *(id *)(*(void *)v0 + 32);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

BOOL sub_101136DDC(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a1 + 32) == *(void *)(*(void *)a2 + 32);
}

uint64_t sub_101136DF8()
{
  uint64_t v1 = type metadata accessor for ServiceUUID(0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  v4._uint64_t countAndFlagsBits = 60;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  uint64_t v13 = v0;
  type metadata accessor for Service();
  sub_101136FFC(&qword_10166C7E8);
  v5._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  id v9 = [*(id *)(v0 + 32) UUID];
  sub_100BBC528((unint64_t)v3);

  _print_unlocked<A, B>(_:_:)();
  sub_100A423B0((uint64_t)v3, type metadata accessor for ServiceUUID);
  v10._uint64_t countAndFlagsBits = 15913;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  return v14;
}

uint64_t sub_101136FA4()
{
  return sub_101136DF8();
}

uint64_t sub_101136FC8()
{
  return sub_101136FFC(&qword_10166C7E0);
}

uint64_t sub_101136FFC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Service();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10113703C()
{
  return sub_101136B88(*(void *)(v0 + 16), *(void (**)(void *))(v0 + 24), *(void *)(v0 + 32));
}

unint64_t sub_10113705C()
{
  unint64_t result = qword_101655B70;
  if (!qword_101655B70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_101655B70);
  }
  return result;
}

uint64_t sub_10113709C(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101655B50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1011370FC(void *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v86 = a2;
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  Swift::String v6 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::String v8 = (char *)&v70 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v85 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v70 - v13;
  if (CKRecord.recordType.getter() == 0xD000000000000014 && v15 == 0x8000000101391A10)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      sub_101138B08();
      swift_allocError();
      *uint64_t v47 = 0;
      goto LABEL_16;
    }
  }
  uint64_t v87 = v14;
  id v17 = [a1 recordID];
  id v18 = [v17 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  id v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v19(v8, 1, v9) == 1)
  {
    sub_100270E18((uint64_t)v8);
    sub_101138B08();
    swift_allocError();
    *uint64_t v20 = 1;
LABEL_16:
    swift_willThrow();

    return;
  }
  uint64_t v82 = v9;
  uint64_t v83 = v10;
  uint64_t v80 = *(void (**)(char *, char *))(v10 + 32);
  v80(v87, v8);
  id v21 = [a1 encryptedValues];
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v21 objectForKeyedSubscript:v22];

  if (!v23 || (id v81 = v21, v90 = v23, sub_10000588C((uint64_t *)&unk_10163AE50), (swift_dynamicCast() & 1) == 0))
  {
    sub_101138B08();
    swift_allocError();
    *uint64_t v48 = 4;
    swift_willThrow();
LABEL_19:
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v83 + 8))(v87, v82);
    return;
  }
  uint64_t v78 = v88;
  unint64_t v24 = v89;
  NSString v25 = String._bridgeToObjectiveC()();
  id v26 = [v81 objectForKeyedSubscript:v25];

  if (!v26 || (unint64_t v79 = v24, v90 = v26, (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    sub_101138B08();
    swift_allocError();
    *Swift::Int v49 = 3;
    swift_willThrow();
    goto LABEL_19;
  }
  uint64_t v76 = v88;
  unint64_t v77 = v89;
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v81 objectForKeyedSubscript:v27];

  if (!v28 || (id v90 = v28, (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v50 = v82;
    uint64_t v51 = v83;
    uint64_t v52 = v76;
    sub_101138B08();
    swift_allocError();
    *uint64_t v53 = 2;
    swift_willThrow();
    swift_unknownObjectRelease();

    sub_10001CFB8(v52, v77);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v87, v50);
    return;
  }
  uint64_t v73 = v88;
  unint64_t v74 = v89;
  id v30 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v30];
  [v30 finishEncoding];
  id v31 = [v30 encodedData];
  uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v75 = v33;

  uint64_t v34 = v86;
  uint64_t v35 = v75;
  uint64_t *v86 = v32;
  v34[1] = (uint64_t)v35;
  uint64_t v75 = (int *)type metadata accessor for OwnedDeviceKeyRecord();
  BOOL v36 = (char *)v34 + v75[5];
  uint64_t v38 = v82;
  uint64_t v37 = v83;
  int64_t v71 = *(void (**)(void))(v83 + 16);
  uint64_t v72 = v36;
  v71();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  unsigned int v39 = v19(v6, 1, v38);
  unsigned int v40 = v39;
  if (v39 == 1)
  {
    sub_100270E18((uint64_t)v6);
    sub_101138B08();
    swift_allocError();
    *uint64_t v41 = 5;
    swift_willThrow();
    sub_10001CFB8(v73, v74);
    swift_unknownObjectRelease();

    sub_10001CFB8(v76, v77);
    uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
    v42(v87, v38);
    uint64_t v43 = v38;
    uint64_t v44 = v86;
    uint64_t v45 = v75;
    uint64_t v46 = v72;
  }
  else
  {
    LODWORD(v79) = v39;
    int64_t v54 = v85;
    ((void (*)(char *, char *, uint64_t))v80)(v85, v6, v38);
    uint64_t v44 = v86;
    ((void (*)(char *, char *, uint64_t))v71)((char *)v86 + v75[6], v54, v38);
    uint64_t v56 = v76;
    unint64_t v55 = v77;
    sub_1000361E0(v76, v77);
    uint64_t v57 = v84;
    uint64_t v58 = sub_10043A38C(v56, v55);
    uint64_t v43 = v38;
    if (!v57)
    {
      uint64_t v60 = v58;
      char v61 = v75;
      uint64_t v62 = (uint64_t *)((char *)v44 + v75[7]);
      uint64_t *v62 = v58;
      v62[1] = v59;
      unint64_t v63 = v59;
      sub_1000361E0(v58, v59);
      uint64_t v64 = sub_10043A040(v73, v74);
      uint64_t v65 = v83;
      uint64_t v84 = v66;
      swift_unknownObjectRelease();

      sub_10001CFB8(v60, v63);
      sub_10001CFB8(v76, v77);
      uint64_t v67 = *(void (**)(char *, uint64_t))(v65 + 8);
      v67(v85, v43);
      v67(v87, v43);
      uint64_t v68 = (uint64_t *)((char *)v44 + v61[8]);
      uint64_t v69 = v84;
      uint64_t *v68 = v64;
      v68[1] = v69;
      return;
    }
    sub_10001CFB8(v73, v74);
    swift_unknownObjectRelease();

    sub_10001CFB8(v56, v55);
    uint64_t v42 = *(void (**)(char *, uint64_t))(v83 + 8);
    v42(v54, v38);
    v42(v87, v38);
    uint64_t v45 = v75;
    uint64_t v46 = v72;
    unsigned int v40 = v79;
  }
  sub_10001CFB8(*v44, v44[1]);
  v42(v46, v43);
  if (v40 != 1) {
    v42((char *)v44 + v45[6], v43);
  }
}

unint64_t sub_101137A34(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0x654B63696C627570;
      break;
    case 4:
      unint64_t result = 0x4B65746176697270;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_101137AF4()
{
  return sub_101137A34(*v0);
}

uint64_t sub_101137AFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1011398BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_101137B24(uint64_t a1)
{
  unint64_t v2 = sub_101138CA8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_101137B60(uint64_t a1)
{
  unint64_t v2 = sub_101138CA8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_101137BA0()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170F308);
  sub_100010324(v0, (uint64_t)qword_10170F308);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_101137CBC(id *a1)
{
  id v1 = *a1;
  [*a1 encryptedValues];
  swift_getObjectType();
  static os_log_type_t.debug.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101342130;
  id v3 = v1;
  id v4 = [v3 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = sub_10000B4CC();
  *(void *)(v2 + 32) = v5;
  *(void *)(v2 + 40) = v7;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v8 = type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v9 = UUID.uuidString.getter();
  if (!v24)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    uint64_t v23 = UUID.uuidString.getter();
    unint64_t v24 = v12;
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_10;
  }
  if (v23 == v9 && v24 == v10)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_10:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v13 = (uint64_t *)(v22 + *(int *)(v8 + 32));
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_1000361E0(*v13, v15);
  if (v24 >> 60 == 15)
  {
    sub_100037A24(v23, v24);
    sub_100037A24(v14, v15);
  }
  else
  {
    sub_100037A38(v23, v24);
    char v16 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v23, v24, v14, v15);
    sub_10001CFB8(v14, v15);
    sub_100037A24(v23, v24);
    sub_100037A24(v23, v24);
    if (v16) {
      goto LABEL_14;
    }
  }
  uint64_t v23 = v14;
  unint64_t v24 = v15;
  sub_1000361E0(v14, v15);
  CKRecordKeyValueSetting.subscript.setter();
LABEL_14:
  CKRecordKeyValueSetting.subscript.getter();
  id v17 = (uint64_t *)(v22 + *(int *)(v8 + 28));
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_1000361E0(*v17, v19);
  if (v24 >> 60 == 15)
  {
    sub_100037A24(v23, v24);
    sub_100037A24(v18, v19);
LABEL_17:
    sub_1000361E0(v18, v19);
    CKRecordKeyValueSetting.subscript.setter();
    return swift_unknownObjectRelease();
  }
  sub_100037A38(v23, v24);
  char v20 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v23, v24, v18, v19);
  sub_10001CFB8(v18, v19);
  sub_100037A24(v23, v24);
  sub_100037A24(v23, v24);
  if ((v20 & 1) == 0) {
    goto LABEL_17;
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_101138128(void *a1)
{
  id v3 = v1;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10166C840);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_101138CA8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v3;
  char v12 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for OwnedDeviceKeyRecord();
    LOBYTE(v11) = 1;
    type metadata accessor for UUID();
    sub_101138DBC(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = *(long long *)((char *)v3 + *(int *)(v9 + 28));
    char v12 = 3;
    sub_10043C654();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = *(long long *)((char *)v3 + *(int *)(v9 + 32));
    char v12 = 4;
    sub_10043C164();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1011383C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v28 = v3;
  uint64_t v29 = v4;
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v32 = sub_10000588C(&qword_10166C820);
  uint64_t v30 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  long long v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OwnedDeviceKeyRecord();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_101138CA8();
  id v31 = v11;
  uint64_t v15 = (uint64_t)v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  NSString v25 = v7;
  id v26 = (int *)v12;
  size_t v33 = a1;
  char v35 = 0;
  sub_100037AA0();
  char v16 = v31;
  uint64_t v17 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)uint64_t v14 = v34;
  LOBYTE(v34) = 1;
  sub_101138DBC((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v18 = v28;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = v18;
  char v20 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  v20(&v14[v26[5]], v9, v19);
  LOBYTE(v34) = 2;
  id v21 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v20(&v14[v26[6]], v21, v19);
  char v35 = 3;
  sub_10043C600();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = v26;
  *(_OWORD *)&v14[v26[7]] = v34;
  char v35 = 4;
  sub_10043C110();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v17);
  *(_OWORD *)&v14[v22[8]] = v34;
  sub_101138CFC((uint64_t)v14, v27);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v33);
  return sub_101138D60((uint64_t)v14);
}

uint64_t sub_10113890C()
{
  if (qword_1016374B0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for URL();
  sub_100010324(v0, (uint64_t)qword_10170F308);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:isDirectory:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1011389B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1011383C4(a1, a2);
}

uint64_t sub_1011389C8(void *a1)
{
  return sub_101138128(a1);
}

uint64_t sub_1011389E0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_101138DBC((unint64_t *)&unk_10166C7F0, (void (*)(uint64_t))type metadata accessor for OwnedDeviceKeyRecord);
  uint64_t result = sub_101138DBC(&qword_10165E7E8, (void (*)(uint64_t))type metadata accessor for OwnedDeviceKeyRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for OwnedDeviceKeyRecord()
{
  uint64_t result = qword_10166C8B0;
  if (!qword_10166C8B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_101138AB0(uint64_t a1)
{
  uint64_t result = sub_101138DBC((unint64_t *)&unk_10166C800, (void (*)(uint64_t))type metadata accessor for OwnedDeviceKeyRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_101138B08()
{
  unint64_t result = qword_10166C810;
  if (!qword_10166C810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C810);
  }
  return result;
}

uint64_t sub_101138B5C(uint64_t a1, uint64_t a2)
{
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)return 0; {
  uint64_t v4 = type metadata accessor for OwnedDeviceKeyRecord();
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(int *)(v4 + 28);
  uint64_t v6 = *(void *)(a1 + v5);
  unint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (uint64_t *)(a2 + v5);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_1000361E0(v6, v7);
  sub_1000361E0(v9, v10);
  char v11 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7, v9, v10);
  sub_10001CFB8(v9, v10);
  sub_10001CFB8(v6, v7);
  if ((v11 & 1) == 0) {
    return 0;
  }
  uint64_t v12 = *(int *)(v4 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(a1 + v12);
  unint64_t v15 = *(void *)(v13 + 8);
  char v16 = (uint64_t *)(a2 + v12);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  sub_1000361E0(v14, v15);
  sub_1000361E0(v17, v18);
  char v19 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v14, v15, v17, v18);
  sub_10001CFB8(v17, v18);
  sub_10001CFB8(v14, v15);
  return v19 & 1;
}

unint64_t sub_101138CA8()
{
  unint64_t result = qword_10166C828;
  if (!qword_10166C828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C828);
  }
  return result;
}

uint64_t sub_101138CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedDeviceKeyRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_101138D60(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedDeviceKeyRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_101138DBC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OwnedDeviceKeyRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x101138ED0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceKeyRecord.CodingKeys()
{
  return &type metadata for OwnedDeviceKeyRecord.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for OwnedDeviceKeyRecord.ConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x101138FD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceKeyRecord.ConversionError()
{
  return &type metadata for OwnedDeviceKeyRecord.ConversionError;
}

uint64_t *sub_10113900C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    unint64_t v10 = (char *)a1 + v9;
    char v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    uint64_t v14 = a3[7];
    unint64_t v15 = (uint64_t *)((char *)a1 + v14);
    char v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    sub_1000361E0(*v16, v18);
    *unint64_t v15 = v17;
    v15[1] = v18;
    uint64_t v19 = a3[8];
    char v20 = (uint64_t *)((char *)a1 + v19);
    id v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    sub_1000361E0(*v21, v23);
    *char v20 = v22;
    v20[1] = v23;
  }
  return a1;
}

uint64_t sub_10113915C(uint64_t a1, int *a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID();
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  sub_10001CFB8(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  uint64_t v7 = (uint64_t *)(a1 + a2[8]);
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];

  return sub_10001CFB8(v8, v9);
}

uint64_t *sub_101139224(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  unint64_t v9 = (char *)a1 + v8;
  unint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  unint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  sub_1000361E0(*v15, v17);
  *uint64_t v14 = v16;
  v14[1] = v17;
  uint64_t v18 = a3[8];
  uint64_t v19 = (uint64_t *)((char *)a1 + v18);
  char v20 = (uint64_t *)((char *)a2 + v18);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_1000361E0(*v20, v22);
  *uint64_t v19 = v21;
  v19[1] = v22;
  return a1;
}

uint64_t *sub_101139324(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  uint64_t v15 = a3[7];
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  unint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_1000361E0(*v17, v19);
  uint64_t v20 = *v16;
  unint64_t v21 = v16[1];
  *uint64_t v16 = v18;
  v16[1] = v19;
  sub_10001CFB8(v20, v21);
  uint64_t v22 = a3[8];
  unint64_t v23 = (uint64_t *)((char *)a1 + v22);
  uint64_t v24 = (uint64_t *)((char *)a2 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_1000361E0(*v24, v26);
  uint64_t v27 = *v23;
  unint64_t v28 = v23[1];
  *unint64_t v23 = v25;
  v23[1] = v26;
  sub_10001CFB8(v27, v28);
  return a1;
}

uint64_t *sub_10113943C(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = *(uint64_t *)((char *)a1 + v13);
  unint64_t v15 = *(uint64_t *)((char *)a1 + v13 + 8);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)&a2[v13];
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = *(uint64_t *)((char *)a1 + v16);
  unint64_t v18 = *(uint64_t *)((char *)a1 + v16 + 8);
  *(_OWORD *)((char *)a1 + v16) = *(_OWORD *)&a2[v16];
  sub_10001CFB8(v17, v18);
  return a1;
}

uint64_t sub_10113952C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_101139540);
}

uint64_t sub_101139540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1011395FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_101139610);
}

void *sub_101139610(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1011396C0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_101139760()
{
  unint64_t result = qword_10166C8F8;
  if (!qword_10166C8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C8F8);
  }
  return result;
}

unint64_t sub_1011397B8()
{
  unint64_t result = qword_10166C900;
  if (!qword_10166C900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C900);
  }
  return result;
}

unint64_t sub_101139810()
{
  unint64_t result = qword_10166C908;
  if (!qword_10166C908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C908);
  }
  return result;
}

unint64_t sub_101139868()
{
  unint64_t result = qword_10166C910;
  if (!qword_10166C910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C910);
  }
  return result;
}

uint64_t sub_1011398BC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EEA50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000101422D90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x654B63696C627570 && a2 == 0xE900000000000079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4B65746176697270 && a2 == 0xEA00000000007965)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

ValueMetadata *type metadata accessor for AccessoryStartAggressiveAdvertisingPayload()
{
  return &type metadata for AccessoryStartAggressiveAdvertisingPayload;
}

uint64_t sub_101139AF4@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_101139BA4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_101139B20(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_101139B50();
  unint64_t result = sub_1002A5814();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_101139B50()
{
  unint64_t result = qword_10166C920;
  if (!qword_10166C920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C920);
  }
  return result;
}

uint64_t sub_101139BA4(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness();
  __chkstk_darwin(v3 - 8);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v4 = sub_1000BD078((uint64_t)v13, v14);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (!v1)
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000361E0(v5, v6);
    static Endianness.current.getter();
    sub_100060568();
    FixedWidthInteger.init(data:ofEndianness:)();
    if (v12 != 1)
    {
      uint64_t v4 = v11;
      sub_10001CFB8(v7, v8);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return v4;
    }
    uint64_t v4 = type metadata accessor for BinaryDecodingError();
    sub_100499A70();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v9, enum case for BinaryDecodingError.decodingError(_:), v4);
    swift_willThrow();
    sub_10001CFB8(v7, v8);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v4;
}

ValueMetadata *type metadata accessor for AirTagCommandAckPayload()
{
  return &type metadata for AirTagCommandAckPayload;
}

uint64_t sub_101139D84@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_101139E34(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_101139DB0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_101139DE0();
  unint64_t result = sub_1003CFD64();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_101139DE0()
{
  unint64_t result = qword_10166C928;
  if (!qword_10166C928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C928);
  }
  return result;
}

uint64_t sub_101139E34(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness();
  __chkstk_darwin(v3 - 8);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v4 = sub_1000BD078((uint64_t)v13, v14);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (!v1)
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000361E0(v5, v6);
    static Endianness.current.getter();
    sub_10006145C();
    FixedWidthInteger.init(data:ofEndianness:)();
    if (v12 != 1)
    {
      uint64_t v4 = v11;
      sub_10001CFB8(v7, v8);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return v4;
    }
    uint64_t v4 = type metadata accessor for BinaryDecodingError();
    sub_100499A70();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v9, enum case for BinaryDecodingError.decodingError(_:), v4);
    swift_willThrow();
    sub_10001CFB8(v7, v8);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v4;
}

uint64_t destroy for LocationFetchContext()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LocationFetchContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LocationFetchContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  return a1;
}

__n128 initializeWithTake for LocationFetchContext(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for LocationFetchContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationFetchContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 89)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationFetchContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationFetchContext()
{
  return &type metadata for LocationFetchContext;
}

uint64_t sub_10113A364@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v21 - v9;
  switch(a1)
  {
    case 1:
      static Date.distantPast.getter();
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      sub_1010AB8E8(v22);
      uint64_t v12 = v16;
      char v14 = 0;
      char v13 = 1;
      double v15 = 25.0;
      break;
    case 2:
      static Date.trustedNow.getter((uint64_t)v8);
      Date.addingTimeInterval(_:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      sub_1010AB8E8(v22);
      uint64_t v12 = v17;
      char v13 = 1;
      double v15 = 60.0;
      goto LABEL_14;
    case 3:
      static Date.trustedNow.getter((uint64_t)v8);
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      sub_1010ABFA0(v22);
      swift_bridgeObjectRelease();
      Date.addingTimeInterval(_:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      OS_dispatch_queue.sync<A>(execute:)();
      sub_1010AB8F4(v22);
      uint64_t v12 = v18;
      char v13 = 1;
      double v15 = 25.0;
LABEL_14:
      char v14 = 1;
      break;
    default:
      static Date.distantFuture.getter();
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      sub_1010AB8E8(v22);
      uint64_t v12 = v11;
      char v13 = 0;
      char v14 = 1;
      double v15 = -1.0;
      break;
  }
  swift_bridgeObjectRelease();
  *(unsigned char *)a2 = v14;
  *(unsigned char *)(a2 + 1) = v13;
  *(double *)(a2 + 8) = v15;
  uint64_t Configuration = type metadata accessor for LocationFetchConfiguration();
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2 + *(int *)(Configuration + 28), v10, v4);
  *(void *)(a2 + *(int *)(Configuration + 32)) = v12;
  return result;
}

uint64_t sub_10113A798(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  BOOL v36 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v31 - v11;
  BOOL v13 = sub_100272E58(a3, v3[4]);
  uint64_t v14 = v3[3];
  swift_bridgeObjectRetain();
  sub_100272E5C(a2, v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v3[1] + 16);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v17 = v16(v12, a1, v7);
  if (v15)
  {
    uint64_t v18 = v3[1];
    __chkstk_darwin(v17);
    v31[-2] = v12;
    swift_bridgeObjectRetain();
    BOOL v19 = sub_100A9F998((uint64_t (*)(char *))sub_1005E4C34, (uint64_t)&v31[-4], v18);
    swift_bridgeObjectRelease();
    char v35 = *(void (**)(char *, uint64_t))(v8 + 8);
    v35(v12, v7);
    char v20 = v19 && v13;
    int v34 = v19;
  }
  else
  {
    char v35 = *(void (**)(char *, uint64_t))(v8 + 8);
    v35(v12, v7);
    int v34 = 1;
    char v20 = v13;
  }
  uint64_t v21 = v36;
  if (qword_101636CF0 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100010324(v22, (uint64_t)qword_10170E3B0);
  v16(v21, a1, v7);
  unint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    BOOL v32 = v13;
    unint64_t v26 = v21;
    uint64_t v27 = v25;
    uint64_t v33 = swift_slowAlloc();
    uint64_t v38 = v33;
    *(_DWORD *)uint64_t v27 = 67110147;
    LODWORD(v37) = v20 & 1;
    v31[1] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 8) = 2160;
    uint64_t v37 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 18) = 2081;
    sub_10001035C((unint64_t *)&qword_101638B10);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v37 = sub_1008FA0F0(v28, v29, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v35(v26, v7);
    *(_WORD *)(v27 + 28) = 1024;
    LODWORD(v37) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 34) = 1024;
    LODWORD(v37) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Session includes(%{BOOL}d) beacon %{private,mask.hash}s.\nbeaconIncluded %{BOOL}d, locationSourceIncluded %{BOOL}d.", (uint8_t *)v27, 0x28u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v35(v21, v7);
  }

  return v20 & 1;
}

uint64_t sub_10113AC0C(uint64_t a1, BOOL a2, uint64_t a3)
{
  char v6 = sub_100272E58(a2, v3[4]);
  uint64_t v7 = v3[3];
  swift_bridgeObjectRetain();
  sub_100272E5C(a3, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v3[1] + 16);
  sub_10001D010(a1, (uint64_t)v15);
  if (v8)
  {
    uint64_t v9 = swift_bridgeObjectRetain();
    uint64_t v10 = sub_101158244(v9);
    swift_bridgeObjectRelease();
    uint64_t v11 = v16;
    uint64_t v12 = v17;
    sub_10001CD44(v15, v16);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
    LOBYTE(v11) = sub_10113B094(v10, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
    v6 &= v11;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
  }
  return v6 & 1;
}

void sub_10113AD1C(void *a1@<X8>)
{
  *a1 = &off_1015A5CA0;
}

uint64_t sub_10113AD2C()
{
  _StringGuts.grow(_:)(196);
  v1._uint64_t countAndFlagsBits = 0xD000000000000022;
  v1._object = (void *)0x8000000101422DE0;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x8000000101422E10;
  v2._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0xD000000000000012;
  v4._object = (void *)0x8000000101422E30;
  String.append(_:)(v4);
  type metadata accessor for SPBeaconType(0);
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x686372616573202CLL;
  v6._object = (void *)0xEF203A7365707954;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0x726373627573202CLL;
  v8._object = (void *)0xED0000203A656269;
  String.append(_:)(v8);
  if (*(unsigned char *)(v0 + 56)) {
    uint64_t v9 = 1702195828;
  }
  else {
    uint64_t v9 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 56)) {
    unint64_t v10 = 0xE400000000000000;
  }
  else {
    unint64_t v10 = 0xE500000000000000;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0xD000000000000016;
  v12._object = (void *)0x8000000101422E50;
  String.append(_:)(v12);
  if (*(unsigned char *)(v0 + 57)) {
    uint64_t v13 = 1702195828;
  }
  else {
    uint64_t v13 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 57)) {
    unint64_t v14 = 0xE400000000000000;
  }
  else {
    unint64_t v14 = 0xE500000000000000;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0xD000000000000019;
  v16._object = (void *)0x8000000101422E70;
  String.append(_:)(v16);
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18._object = (void *)0x8000000101422E90;
  v18._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v18);
  type metadata accessor for UUID();
  sub_10001D4B0(0, &qword_10166C938);
  sub_10001035C(&qword_10163BC60);
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 93;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  return 0;
}

uint64_t sub_10113B094(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  Swift::String v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v11 = (char *)&v37 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v37 - v12;
  if (*(void *)(a1 + 16) < *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v15 = *(void *)(a2 + 56);
  uint64_t v49 = a2 + 56;
  uint64_t v16 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v40 = ~v16;
  if (-v16 < 64) {
    uint64_t v17 = ~(-1 << -(char)v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  int64_t v41 = (unint64_t)(63 - v16) >> 6;
  uint64_t v46 = v5 + 32;
  uint64_t v50 = a1 + 56;
  uint64_t v51 = v5 + 16;
  uint64_t v52 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v44 = a2;
  uint64_t v38 = v13;
  uint64_t v39 = v5;
  int64_t v47 = 0;
  unint64_t v48 = v18;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v42 = (v18 - 1) & v18;
  int64_t v43 = v20;
  for (unint64_t i = __clz(__rbit64(v18)) | (v20 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v24 << 6))
  {
    uint64_t v26 = *(void *)(v5 + 72);
    uint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v27(v13, *(void *)(a2 + 48) + v26 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v13, v4);
    uint64_t v28 = *(void *)(a1 + 16);
    uint64_t v45 = (unint64_t)v52 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    unint64_t v29 = v11;
    if (!v28
      || (sub_10001035C(&qword_10163BC60),
          uint64_t v30 = dispatch thunk of Hashable._rawHashValue(seed:)(),
          uint64_t v31 = -1 << *(unsigned char *)(a1 + 32),
          unint64_t v32 = v30 & ~v31,
          ((*(void *)(v50 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0))
    {
      (*v52)(v11, v4);
LABEL_30:
      uint64_t v14 = 0;
      goto LABEL_31;
    }
    uint64_t v33 = a1;
    uint64_t v34 = ~v31;
    while (1)
    {
      v27(v8, *(void *)(v33 + 48) + v32 * v26, v4);
      sub_10001035C((unint64_t *)&qword_10163B8F0);
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      BOOL v36 = *v52;
      (*v52)(v8, v4);
      if (v35) {
        break;
      }
      unint64_t v32 = (v32 + 1) & v34;
      if (((*(void *)(v50 + ((v32 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
      {
        v36(v29, v4);
        goto LABEL_30;
      }
    }
    unint64_t v11 = v29;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v36)(v29, v4);
    unint64_t v18 = v42;
    int64_t v20 = v43;
    a2 = v44;
    a1 = v33;
    uint64_t v13 = v38;
    uint64_t v5 = v39;
    int64_t v47 = v43;
    unint64_t v48 = v42;
    if (v42) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v22 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v22 >= v41) {
      goto LABEL_34;
    }
    unint64_t v23 = *(void *)(v49 + 8 * v22);
    int64_t v24 = v20 + 1;
    if (!v23)
    {
      int64_t v24 = v20 + 2;
      if (v20 + 2 >= v41) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v49 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v20 + 3;
        if (v20 + 3 >= v41) {
          goto LABEL_34;
        }
        unint64_t v23 = *(void *)(v49 + 8 * v24);
        if (!v23) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v42 = (v23 - 1) & v23;
    int64_t v43 = v24;
  }
  uint64_t v25 = v20 + 4;
  if (v20 + 4 >= v41)
  {
LABEL_34:
    uint64_t v14 = 1;
LABEL_31:
    sub_100132C20();
    return v14;
  }
  unint64_t v23 = *(void *)(v49 + 8 * v25);
  if (v23)
  {
    int64_t v24 = v20 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v41) {
      goto LABEL_34;
    }
    unint64_t v23 = *(void *)(v49 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_21;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10113B4F8(void *a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7)
  {
LABEL_15:

    return 0;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
LABEL_17:

    return 1;
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
  {
    swift_bridgeObjectRelease_n();
LABEL_19:

    return 2;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19) {
    goto LABEL_19;
  }
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
  {
    swift_bridgeObjectRelease_n();
LABEL_24:

    return 3;
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v24) {
    goto LABEL_24;
  }
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;
  if (v25 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v27 != v28) {
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  id v29 = a1;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

void sub_10113B780(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v33 = sub_10113B4F8([a1 cachePolicy]);
  id v4 = [a1 searchIdentifiers];
  type metadata accessor for UUID();
  uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v5 = [a1 searchPriority];
  type metadata accessor for SPBeaconType(0);
  uint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v6 = [a1 searchTypes];
  uint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v7 = [a1 searchLocationSources];
  type metadata accessor for SPBeaconLocationSource(0);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    sub_1000B8104(0, v9, 0);
    for (uint64_t i = 0; i != v9; ++i)
    {
      id v11 = *(id *)(v8 + 8 * i + 32);
      char v12 = sub_10110180C();

      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_1000B8104(v13 > 1, v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      *((unsigned char *)&_swiftEmptyArrayStorage[4] + v14) = v12;
    }
  }
  swift_bridgeObjectRelease();
  id v15 = [a1 bundleIdentifier];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v18 = 0;
  }
  unsigned __int8 v19 = [a1 subscribe];
  unsigned __int8 v20 = [a1 reportDeviceEvents];
  id v21 = [a1 lastOnlineLocationInfo];
  sub_10001D4B0(0, &qword_10166C938);
  sub_10001035C(&qword_10163BC60);
  uint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v23 = (unint64_t)[a1 primaryIndexRange];
  if ((v23 & 0x8000000000000000) != 0) {
    goto LABEL_16;
  }
  unint64_t v24 = v23;
  uint64_t v25 = (char *)[a1 primaryIndexRange];
  uint64_t v27 = v26;

  unint64_t v28 = (unint64_t)&v25[v27];
  if (__OFADD__(v25, v27))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((v28 & 0x8000000000000000) == 0)
  {
    if (v28 >= v24)
    {
      *(unsigned char *)a2 = v33;
      *(void *)(a2 + 8) = v32;
      *(void *)(a2 + 16) = v31;
      *(void *)(a2 + 24) = v30;
      *(void *)(a2 + 32) = _swiftEmptyArrayStorage;
      *(void *)(a2 + 40) = v29;
      *(void *)(a2 + 48) = v18;
      *(unsigned char *)(a2 + 56) = v19;
      *(unsigned char *)(a2 + 57) = v20;
      *(void *)(a2 + 64) = v22;
      *(void *)(a2 + 72) = v24;
      *(void *)(a2 + 80) = v28;
      *(unsigned char *)(a2 + 88) = 0;
      return;
    }
    goto LABEL_15;
  }
LABEL_16:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

BOOL sub_10113BB28()
{
  uint64_t v0 = self;
  swift_bridgeObjectRetain();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [self predicateMatchingBundleIdentifier:v1];

  id v15 = 0;
  id v3 = [v0 statesForPredicate:v2 withDescriptor:0 error:&v15];

  id v4 = v15;
  if (!v3)
  {
    id v11 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v10;
  }
  sub_10001D4B0(0, &qword_10166C930);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = v4;

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_4;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_12;
  }
LABEL_4:
  if ((v5 & 0xC000000000000001) != 0)
  {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v7 = *(id *)(v5 + 32);
  }
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  id v9 = v8;
  if ([v9 taskState] == 2)
  {

    return 1;
  }
  else
  {
    unsigned int v12 = [v9 taskState];

    return v12 == 4;
  }
}

uint64_t type metadata accessor for LocationFetchConfiguration()
{
  uint64_t result = qword_10166C998;
  if (!qword_10166C998) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_10113BDA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  id v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *id v4 = *a2;
    id v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    a1[1] = a2[1];
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (char *)a1 + v7;
    id v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 32));
  }
  return v4;
}

uint64_t sub_10113BE90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 32)) = *(void *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_10113BF30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 32)) = *(void *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_10113BFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 32)) = *(void *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_10113C078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 32)) = *(void *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_10113C120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10113C134);
}

uint64_t sub_10113C134(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = &a1[*(int *)(a3 + 28)];
    return v11(v13, a2, v12);
  }
}

uint64_t sub_10113C1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10113C1F8);
}

unsigned char *sub_10113C1F8(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 28)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10113C29C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LocationCachePolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10113C410);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationCachePolicy()
{
  return &type metadata for LocationCachePolicy;
}

unint64_t sub_10113C44C()
{
  unint64_t result = qword_10166C9E0;
  if (!qword_10166C9E0)
  {
    sub_10000592C(&qword_10166C9E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C9E0);
  }
  return result;
}

unint64_t sub_10113C4AC()
{
  unint64_t result = qword_10166C9F0;
  if (!qword_10166C9F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C9F0);
  }
  return result;
}

void sub_10113C500()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unsigned int v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10113FE3C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v8 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo();
  dispatch thunk of Hashable.hash(into:)();
  sub_1003C5E38(v0 + v8[6], (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  type metadata accessor for Date();
  sub_10113FE3C((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_DWORD *)(v0 + v8[9]));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v0 + v8[11]));
  Hasher._combine(_:)(*(unsigned char *)(v0 + v8[12]));
}

unint64_t sub_10113C7F0(char a1)
{
  unint64_t result = 0x6E65644972657375;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x65644970756F7267;
      break;
    case 3:
      unint64_t result = 0x6574614465736162;
      break;
    case 4:
      unint64_t result = 1701667182;
      break;
    case 5:
      unint64_t result = 0x6449726F646E6576;
      break;
    case 6:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 7:
      unint64_t result = 0x42646567616E616DLL;
      break;
    case 8:
      unint64_t result = 0x644974726170;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10113C934(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10166CAE0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_10113FD28();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[31] = 0;
  type metadata accessor for UUID();
  sub_10113FE3C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ManagedCBPeripheralBeaconInfo();
    v8[30] = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[29] = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[28] = 3;
    type metadata accessor for Date();
    sub_10113FE3C((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[27] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[26] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[25] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[24] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[15] = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10113CC90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  __chkstk_darwin(v3);
  uint64_t v39 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v48 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = sub_10000588C(&qword_10166CAD0);
  uint64_t v40 = *(void *)(v14 - 8);
  uint64_t v41 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v47 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo();
  __chkstk_darwin(v47);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a1[3];
  uint64_t v45 = a1;
  sub_10001CD44(a1, v19);
  sub_10113FD28();
  uint64_t v44 = v16;
  unsigned __int8 v20 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    uint64_t v46 = v20;
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v45);
  }
  else
  {
    uint64_t v46 = v7;
    char v57 = 0;
    sub_10113FE3C((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
    v37(v18, v13, v8);
    char v56 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    unint64_t v23 = v18;
    unint64_t v24 = v47;
    uint64_t v25 = (uint64_t)v23;
    v37(&v23[v47[5]], v11, v8);
    char v55 = 2;
    uint64_t v26 = (uint64_t)v46;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v27 = v25;
    sub_1002729C8(v26, v25 + v24[6]);
    char v54 = 3;
    sub_10113FE3C(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t v28 = v39;
    uint64_t v29 = v43;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v27 + v24[7], v28, v29);
    char v53 = 4;
    uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v31 = (uint64_t *)(v27 + v24[8]);
    *uint64_t v31 = v30;
    v31[1] = v32;
    char v52 = 5;
    *(_DWORD *)(v27 + v24[9]) = KeyedDecodingContainer.decode(_:forKey:)();
    char v51 = 6;
    uint64_t v33 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v34 = (uint64_t *)(v27 + v24[10]);
    *uint64_t v34 = v33;
    v34[1] = v35;
    char v50 = 7;
    *(unsigned char *)(v27 + v47[11]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    char v49 = 8;
    LOBYTE(v29) = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v21);
    *(unsigned char *)(v27 + v47[12]) = v29;
    sub_10113FD7C(v27, v38);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v45);
    return sub_10113FDE0(v27);
  }
}

unint64_t sub_10113D4C8()
{
  return sub_10113C7F0(*v0);
}

uint64_t sub_10113D4D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10113F434(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10113D4F8(uint64_t a1)
{
  unint64_t v2 = sub_10113FD28();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10113D534(uint64_t a1)
{
  unint64_t v2 = sub_10113FD28();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10113D570@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10113CC90(a1, a2);
}

uint64_t sub_10113D588(void *a1)
{
  return sub_10113C934(a1);
}

Swift::Int sub_10113D5A0()
{
  return Hasher._finalize()();
}

Swift::Int sub_10113D5E4()
{
  return Hasher._finalize()();
}

uint64_t sub_10113D624()
{
  *(void *)&long long v13 = 0;
  *((void *)&v13 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  *(void *)&long long v13 = *(void *)(v0 + 8);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x203A74766461202CLL;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  long long v13 = *(_OWORD *)(v0 + 16);
  sub_100264FE8();
  v3._uint64_t countAndFlagsBits = RawRepresentable<>.hexString.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x203A6B746C202CLL;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  long long v13 = *(_OWORD *)(v0 + 32);
  sub_100061E54((uint64_t)&v13);
  uint64_t v5 = Data.subdata(in:)();
  unint64_t v7 = v6;
  sub_1000CE9DC((uint64_t)&v13);
  uint64_t v8 = Data.hexString.getter();
  uint64_t v10 = v9;
  sub_10001CFB8(v5, v7);
  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return 0x203A7865646E693CLL;
}

uint64_t sub_10113D79C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10166CAC8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10113FCD4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v10) = *(unsigned char *)v3;
  char v11 = 0;
  sub_10020564C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v10) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v10 = *(_OWORD *)(v3 + 16);
    char v11 = 2;
    sub_10026C650();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v10 = *(_OWORD *)(v3 + 32);
    char v11 = 3;
    sub_10043D998();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10113D994()
{
  unint64_t result = 0x65636E6575716573;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x7865646E69;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0x697463656E6E6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10113DA30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10113F848(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10113DA58(uint64_t a1)
{
  unint64_t v2 = sub_10113FCD4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10113DA94(uint64_t a1)
{
  unint64_t v2 = sub_10113FCD4();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10113DAD0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10113FA18(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_10113DB14(void *a1)
{
  return sub_10113D79C(a1);
}

BOOL sub_10113DB30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v8);
  long long v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v39 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v39 - v18;
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v42 = v5;
  uint64_t v20 = type metadata accessor for ManagedCBPeripheralBeaconInfo();
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  sub_1003C5E38(a1 + *(int *)(v20 + 24), (uint64_t)v19);
  uint64_t v40 = (int *)v20;
  uint64_t v41 = a2;
  sub_1003C5E38(a2 + *(int *)(v20 + 24), (uint64_t)v17);
  uint64_t v21 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1003C5E38((uint64_t)v19, (uint64_t)v10);
  sub_1003C5E38((uint64_t)v17, v21);
  uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  if (v22((uint64_t)v10, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
    if (v22(v21, 1, v4) == 1)
    {
      sub_10001DAB4((uint64_t)v10, &qword_101638CF0);
      goto LABEL_10;
    }
LABEL_8:
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10166EAF0);
    return 0;
  }
  sub_1003C5E38((uint64_t)v10, (uint64_t)v14);
  if (v22(v21, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v4);
    goto LABEL_8;
  }
  uint64_t v24 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v7, v21, v4);
  sub_10113FE3C((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v24 + 8);
  v26(v7, v4);
  sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
  sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
  v26(v14, v4);
  sub_10001DAB4((uint64_t)v10, &qword_101638CF0);
  if ((v25 & 1) == 0) {
    return 0;
  }
LABEL_10:
  unint64_t v28 = v40;
  uint64_t v27 = v41;
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v29 = v28[8];
  uint64_t v30 = *(void *)(a1 + v29);
  uint64_t v31 = *(void *)(a1 + v29 + 8);
  uint64_t v32 = (void *)(v27 + v29);
  if (v30 != *v32 || v31 != v32[1])
  {
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL result = 0;
    if ((v33 & 1) == 0) {
      return result;
    }
  }
  if (*(_DWORD *)(a1 + v28[9]) != *(_DWORD *)(v27 + v28[9])) {
    return 0;
  }
  uint64_t v34 = v28[10];
  uint64_t v35 = *(void *)(a1 + v34);
  uint64_t v36 = *(void *)(a1 + v34 + 8);
  uint64_t v37 = (void *)(v27 + v34);
  if (v35 == *v37 && v36 == v37[1]
    || (v38 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v38 & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + v28[11]) == *(unsigned __int8 *)(v27 + v28[11])) {
      return *(unsigned __int8 *)(a1 + v28[12]) == *(unsigned __int8 *)(v27 + v28[12]);
    }
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ManagedCBPeripheralBeaconInfo()
{
  uint64_t result = qword_10166CA50;
  if (!qword_10166CA50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedCBPeripheralError()
{
  return &type metadata for ManagedCBPeripheralError;
}

uint64_t destroy for ManagedCBPeripheralKeys(void *a1)
{
  sub_10001CFB8(a1[2], a1[3]);
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];

  return sub_10001CFB8(v2, v3);
}

uint64_t initializeWithCopy for ManagedCBPeripheralKeys(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 24);
  sub_1000361E0(v4, v5);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v6 = *(void *)(a2 + 40);
  sub_1000361E0(v7, v6);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for ManagedCBPeripheralKeys(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  sub_1000361E0(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  sub_1000361E0(v9, v8);
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v8;
  sub_10001CFB8(v10, v11);
  return a1;
}

uint64_t assignWithTake for ManagedCBPeripheralKeys(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v6;
  sub_10001CFB8(v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedCBPeripheralKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[48]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedCBPeripheralKeys(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedCBPeripheralKeys()
{
  return &type metadata for ManagedCBPeripheralKeys;
}

char *sub_10113E258(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v9(&a1[a3[5]], &a2[a3[5]], v7);
    uint64_t v10 = a3[6];
    unint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&a2[v10], 1, v7))
    {
      uint64_t v13 = sub_10000588C(&qword_101638CF0);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    uint64_t v15 = a3[7];
    uint64_t v16 = &a1[v15];
    uint64_t v17 = &a2[v15];
    uint64_t v18 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    uint64_t v19 = a3[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = &a1[v19];
    uint64_t v22 = &a2[v19];
    uint64_t v23 = *((void *)v22 + 1);
    *(void *)uint64_t v21 = *(void *)v22;
    *((void *)v21 + 1) = v23;
    *(_DWORD *)&a1[v20] = *(_DWORD *)&a2[v20];
    uint64_t v24 = a3[10];
    uint64_t v25 = a3[11];
    uint64_t v26 = &a1[v24];
    uint64_t v27 = &a2[v24];
    uint64_t v28 = *((void *)v27 + 1);
    *(void *)uint64_t v26 = *(void *)v27;
    *((void *)v26 + 1) = v28;
    a1[v25] = a2[v25];
    a1[a3[12]] = a2[a3[12]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10113E4AC(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v6(a1 + a2[5], v4);
  uint64_t v7 = a1 + a2[6];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4)) {
    v6(v7, v4);
  }
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *sub_10113E610(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  unint64_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v9], 1, v6))
  {
    uint64_t v12 = sub_10000588C(&qword_101638CF0);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = &a1[v17];
  uint64_t v20 = &a2[v17];
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = v21;
  *(_DWORD *)&a1[v18] = *(_DWORD *)&a2[v18];
  uint64_t v22 = a3[10];
  uint64_t v23 = a3[11];
  uint64_t v24 = &a1[v22];
  uint64_t v25 = &a2[v22];
  uint64_t v26 = *((void *)v25 + 1);
  *(void *)uint64_t v24 = *(void *)v25;
  *((void *)v24 + 1) = v26;
  a1[v23] = a2[v23];
  a1[a3[12]] = a2[a3[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10113E814(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = (const void *)(a2 + v9);
  unint64_t v11 = *(uint64_t (**)(void))(v7 + 48);
  uint64_t v27 = (void *)(a1 + v9);
  int v12 = v11();
  int v13 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v11)(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v27, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v27, 0, 1, v6);
      goto LABEL_9;
    }
    size_t v14 = *(void *)(*(void *)(sub_10000588C(&qword_101638CF0) - 8) + 64);
    uint64_t v15 = v27;
  }
  else
  {
    if (!v13)
    {
      v8((uint64_t)v27, (uint64_t)v10, v6);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v27, v6);
    size_t v14 = *(void *)(*(void *)(sub_10000588C(&qword_101638CF0) - 8) + 64);
    uint64_t v15 = v27;
  }
  memcpy(v15, v10, v14);
LABEL_9:
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  uint64_t v23 = a3[10];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

char *sub_10113EAE0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  unint64_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v9], 1, v6))
  {
    uint64_t v12 = sub_10000588C(&qword_101638CF0);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  uint64_t v13 = a3[7];
  size_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  uint64_t v17 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_DWORD *)&a1[v17] = *(_DWORD *)&a2[v17];
  uint64_t v18 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  a1[v18] = a2[v18];
  a1[a3[12]] = a2[a3[12]];
  return a1;
}

uint64_t sub_10113ECC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = (const void *)(a2 + v9);
  unint64_t v11 = *(uint64_t (**)(void))(v7 + 48);
  uint64_t v32 = (void *)(a1 + v9);
  int v12 = v11();
  int v13 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v11)(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v32, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v32, 0, 1, v6);
      goto LABEL_9;
    }
    size_t v14 = *(void *)(*(void *)(sub_10000588C(&qword_101638CF0) - 8) + 64);
    uint64_t v15 = v32;
  }
  else
  {
    if (!v13)
    {
      v8((uint64_t)v32, (uint64_t)v10, v6);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v32, v6);
    size_t v14 = *(void *)(*(void *)(sub_10000588C(&qword_101638CF0) - 8) + 64);
    uint64_t v15 = v32;
  }
  memcpy(v15, v10, v14);
LABEL_9:
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[10];
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  return a1;
}

uint64_t sub_10113EF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10113EF80);
}

uint64_t sub_10113EF80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[6];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[8] + 8);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  return (v16 + 1);
}

uint64_t sub_10113F0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10113F0FC);
}

uint64_t sub_10113F0FC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = sub_10000588C(&qword_101638CF0);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[6];
    }
    else
    {
      uint64_t result = type metadata accessor for Date();
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[8] + 8) = (a2 - 1);
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[7];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10113F260()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_1003426B0();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_10113F394()
{
  return sub_10113FE3C(&qword_10166CAA8, (void (*)(uint64_t))type metadata accessor for ManagedCBPeripheralBeaconInfo);
}

unint64_t sub_10113F3E0()
{
  unint64_t result = qword_10166CAB0;
  if (!qword_10166CAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CAB0);
  }
  return result;
}

uint64_t sub_10113F434(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E65644972657375 && a2 == 0xEE00726569666974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013EE1B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65644970756F7267 && a2 == 0xEF7265696669746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6574614465736162 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x42646567616E616DLL && a2 == 0xEF794D646E694679 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x644974726170 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t sub_10113F848(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65636E6575716573 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7865646E69 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001013F7DD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x697463656E6E6F63 && a2 == 0xED000079654B6E6FLL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10113FA18@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10166CAB8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10113FCD4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v20 = 0;
  sub_100205590();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v9 = v18;
  LOBYTE(v18) = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  char v20 = 2;
  sub_10026D3A0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v20 = 3;
  unint64_t v16 = v19;
  uint64_t v17 = v18;
  sub_1000361E0(v18, v19);
  sub_10043D944();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v11 = v18;
  unint64_t v12 = v19;
  unint64_t v14 = v16;
  uint64_t v13 = v17;
  sub_1000361E0(v17, v16);
  sub_1000361E0(v11, v12);
  sub_10001CFB8(v13, v14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  sub_10001CFB8(v13, v14);
  uint64_t result = sub_10001CFB8(v11, v12);
  *(unsigned char *)a2 = v9;
  *(void *)(a2 + 8) = v10;
  *(void *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v11;
  *(void *)(a2 + 40) = v12;
  return result;
}

unint64_t sub_10113FCD4()
{
  unint64_t result = qword_10166CAC0;
  if (!qword_10166CAC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CAC0);
  }
  return result;
}

unint64_t sub_10113FD28()
{
  unint64_t result = qword_10166CAD8;
  if (!qword_10166CAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CAD8);
  }
  return result;
}

uint64_t sub_10113FD7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ManagedCBPeripheralBeaconInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10113FDE0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ManagedCBPeripheralBeaconInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10113FE3C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ManagedCBPeripheralBeaconInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10113FF50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedCBPeripheralBeaconInfo.CodingKeys()
{
  return &type metadata for ManagedCBPeripheralBeaconInfo.CodingKeys;
}

unsigned char *_s12searchpartyd24ManagedCBPeripheralErrorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x101140054);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedCBPeripheralKeys.CodingKeys()
{
  return &type metadata for ManagedCBPeripheralKeys.CodingKeys;
}

unint64_t sub_101140090()
{
  unint64_t result = qword_10166CAE8;
  if (!qword_10166CAE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CAE8);
  }
  return result;
}

unint64_t sub_1011400E8()
{
  unint64_t result = qword_10166CAF0;
  if (!qword_10166CAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CAF0);
  }
  return result;
}

unint64_t sub_101140140()
{
  unint64_t result = qword_10166CAF8;
  if (!qword_10166CAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CAF8);
  }
  return result;
}

unint64_t sub_101140198()
{
  unint64_t result = qword_10166CB00;
  if (!qword_10166CB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CB00);
  }
  return result;
}

unint64_t sub_1011401F0()
{
  unint64_t result = qword_10166CB08;
  if (!qword_10166CB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CB08);
  }
  return result;
}

unint64_t sub_101140248()
{
  unint64_t result = qword_10166CB10;
  if (!qword_10166CB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CB10);
  }
  return result;
}

uint64_t sub_10114029C()
{
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(89);
  v1._object = (void *)0xEB00000000203A73;
  v1._uint64_t countAndFlagsBits = 0x54646E6553706174;
  String.append(_:)(v1);
  v19[0] = *v0;
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x492065726168530ALL;
  v3._object = (void *)0xEB00000000203A44;
  String.append(_:)(v3);
  uint64_t v4 = v0[1];
  uint64_t v5 = (void *)v0[2];
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  sub_100E8F31C((uint64_t)v0);
  v7._uint64_t countAndFlagsBits = 0x726F74697369760ALL;
  v7._object = (void *)0xEF203A746E756F43;
  String.append(_:)(v7);
  sub_10001D608((uint64_t)(v0 + 3), (uint64_t)v19, &qword_10163ABA0);
  sub_10001D608((uint64_t)v19, (uint64_t)v15, &qword_10163ABA0);
  sub_10000588C(&qword_10163ABA0);
  v8._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x8000000101422EB0;
  v9._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v9);
  sub_10001D608((uint64_t)v0 + 33, (uint64_t)v15, &qword_101649EA0);
  sub_10001D608((uint64_t)v15, (uint64_t)&v18, &qword_101649EA0);
  sub_10000588C(&qword_101649EA0);
  v10._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0xD000000000000018;
  v11._object = (void *)0x8000000101422ED0;
  String.append(_:)(v11);
  sub_10001D608((uint64_t)v0 + 34, (uint64_t)&v18, &qword_101649EA0);
  sub_10001D608((uint64_t)&v18, (uint64_t)&v14, &qword_101649EA0);
  v12._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return v16;
}

unint64_t sub_1011404E8(char a1)
{
  unint64_t result = 0x54646E6553706174;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64496572616873;
      break;
    case 2:
      unint64_t result = 0x43726F7469736976;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1011405B0(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10166CB28);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_101140F64();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_10114078C()
{
  return sub_1011404E8(*v0);
}

uint64_t sub_101140794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_101140A9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1011407BC(uint64_t a1)
{
  unint64_t v2 = sub_101140F64();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1011407F8(uint64_t a1)
{
  unint64_t v2 = sub_101140F64();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_101140834@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_101140CD4(a1, (uint64_t)&v6);
  if (!v2)
  {
    double result = *(double *)&v6;
    long long v5 = *(_OWORD *)v7;
    *(_OWORD *)a2 = v6;
    *(_OWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 31) = *(_DWORD *)&v7[15];
  }
  return result;
}

uint64_t sub_10114087C(void *a1)
{
  return sub_1011405B0(a1);
}

uint64_t sub_101140894()
{
  return sub_10114029C();
}

uint64_t initializeWithCopy for DelegationAPSMessage(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DelegationAPSMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  return a1;
}

__n128 initializeWithTake for DelegationAPSMessage(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DelegationAPSMessage(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for DelegationAPSMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 35)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DelegationAPSMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 34) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 35) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 35) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DelegationAPSMessage()
{
  return &type metadata for DelegationAPSMessage;
}

uint64_t sub_101140A9C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x54646E6553706174 && a2 == 0xE900000000000073;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64496572616873 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x43726F7469736976 && a2 == 0xEC000000746E756FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000101422EF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013F4A70)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_101140CD4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10166CB18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_101140F64();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v28 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v27 = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v23 = v10;
  char v26 = 2;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v21 = v14;
  uint64_t v22 = v13;
  char v25 = 3;
  int v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v24 = 4;
  char v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v17 = v23;
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v17;
  uint64_t v18 = v22;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v18;
  *(unsigned char *)(a2 + 32) = v21 & 1;
  *(unsigned char *)(a2 + 33) = v20;
  *(unsigned char *)(a2 + 34) = v15;
  return result;
}

unint64_t sub_101140F64()
{
  unint64_t result = qword_10166CB20;
  if (!qword_10166CB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CB20);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DelegationAPSMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x101141084);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DelegationAPSMessage.CodingKeys()
{
  return &type metadata for DelegationAPSMessage.CodingKeys;
}

unint64_t sub_1011410C0()
{
  unint64_t result = qword_10166CB30;
  if (!qword_10166CB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CB30);
  }
  return result;
}

unint64_t sub_101141118()
{
  unint64_t result = qword_10166CB38;
  if (!qword_10166CB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CB38);
  }
  return result;
}

unint64_t sub_101141170()
{
  unint64_t result = qword_10166CB40;
  if (!qword_10166CB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CB40);
  }
  return result;
}

unint64_t sub_1011411C4(char a1)
{
  unint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
    case 7:
    case 16:
    case 17:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0xD000000000000019;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    case 9:
      unint64_t result = 0x627550666C65732ELL;
      break;
    case 10:
      unint64_t result = 0xD000000000000015;
      break;
    case 11:
      unint64_t result = 0x52746E65746E692ELL;
      break;
    case 12:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 13:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 14:
      unint64_t result = 0xD000000000000019;
      break;
    case 15:
      unint64_t result = 0xD000000000000014;
      break;
    case 18:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1011413F8()
{
  return 0x2D746C7561666564;
}

unint64_t sub_10114157C(unint64_t a1)
{
  unint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      unint64_t result = 0x79646165726C612ELL;
      break;
    case 2uLL:
      unint64_t result = 0xD000000000000012;
      break;
    case 3uLL:
      unint64_t result = 0x676E697373696D2ELL;
      break;
    case 4uLL:
      unint64_t result = 0x6544654D746F6E2ELL;
      break;
    case 5uLL:
      unint64_t result = 0x6F707075736E752ELL;
      break;
    case 6uLL:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      _StringGuts.grow(_:)(29);
      v4._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      v4._object = (void *)0x8000000101421050;
      String.append(_:)(v4);
      sub_10000588C(&qword_101638D40);
      _print_unlocked<A, B>(_:_:)();
      sub_1010C64A8(a1);
      unint64_t result = 0;
      break;
  }
  return result;
}

unint64_t sub_101141740(char a1)
{
  unint64_t result = 0x74616974696E692ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000019;
      break;
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
    case 4:
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0xD000000000000016;
      break;
    case 7:
      unint64_t result = 0x43676E6972696170;
      break;
    case 8:
      unint64_t result = 0x656966697265762ELL;
      break;
    case 9:
      unint64_t result = 0x7A696C616E69662ELL;
      break;
    case 10:
      unint64_t result = 0xD000000000000017;
      break;
    case 11:
      unint64_t result = 0x64696C61766E692ELL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1011418C0(char a1)
{
  unint64_t result = 0x74616974696E692ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000019;
      break;
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
    case 4:
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0xD000000000000016;
      break;
    case 7:
      unint64_t result = 0x43676E6972696170;
      break;
    case 8:
      unint64_t result = 0x656966697265762ELL;
      break;
    case 9:
      unint64_t result = 0x7A696C616E69662ELL;
      break;
    case 10:
      unint64_t result = 0xD000000000000017;
      break;
    case 11:
      unint64_t result = 0x64696C61766E692ELL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_101141A40@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_101145CA4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_101141A6C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_101141ACC()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_101141B1C()
{
  return sub_1011418C0(*v0);
}

uint64_t sub_101141B24(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_locationMonitor;
  id v9 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  *(void *)(v3 + v8) = CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, *(uint64_t *)&kCLLocationAccuracyHundredMeters, 0);
  *(unsigned char *)(v3 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 0;
  uint64_t v10 = v3 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext;
  *(void *)(v10 + 32) = 0;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_contributorContext) = 0;
  uint64_t v11 = static Data.random(bytes:)();
  unint64_t v13 = v12;
  type metadata accessor for AccessoryPairingInfo(0);
  swift_allocObject();
  sub_1000361E0(v11, v13);
  int v14 = sub_1001C8174(v11, v13);
  if (v14)
  {
    *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo) = v14;
    *(void *)(v3 + 24) = a3;
    uint64_t v15 = v3 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_accessoryIdentifier;
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v17 = *(void *)(v16 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, a1, v16);
    *(void *)(v4 + 16) = a2;
    uint64_t v18 = qword_1016371D8;
    swift_retain();
    id v19 = a3;
    swift_retain();
    if (v18 != -1) {
      swift_once();
    }
    SynchronousCache.cachedValue<A>(key:computeBlock:)();
    swift_bridgeObjectRelease();
    if (v22)
    {
      sub_10001CFB8(v11, v13);
      swift_release();

      swift_release();
    }
    else
    {
      CurrentLocationMonitor.requestLocation()();
      swift_release();
      swift_release();

      sub_10001CFB8(v11, v13);
    }
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, v16);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    swift_release();

    sub_10001CFB8(v11, v13);
    uint64_t v20 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);

    sub_10001DAB4(v3 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext, &qword_101639A40);
    swift_release();
    type metadata accessor for AccessoryPairingCoordinator();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v4;
}

uint64_t sub_101141EE8()
{
  static os_log_type_t.debug.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  swift_release();

  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_accessoryIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext, &qword_101639A40);
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_10114200C()
{
  sub_101141EE8();

  return swift_deallocClassInstance();
}

uint64_t sub_101142064()
{
  return type metadata accessor for AccessoryPairingCoordinator();
}

uint64_t type metadata accessor for AccessoryPairingCoordinator()
{
  uint64_t result = qword_10166CB80;
  if (!qword_10166CB80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1011420B8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10114218C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unsigned int v6 = *(void **)(v1 + 24);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  static os_log_type_t.default.getter();
  if (qword_101637308 != -1) {
LABEL_5:
  }
    swift_once();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101342130;
  uint64_t v9 = UUID.uuidString.getter();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_10000B4CC();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_101657AE8);
  swift_allocObject();
  swift_retain();
  return Future.init(_:)();
}

id sub_1011423A0(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v66 = a1;
  uint64_t v5 = (int *)type metadata accessor for AccessoryUnpairData();
  __chkstk_darwin(v5);
  id v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v62 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v51 - v11;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v65 = (char *)&v51 - v18;
  id v19 = sub_100F2C724();
  unint64_t v21 = v20;
  uint64_t v63 = a3;
  char v22 = *(void **)(a3 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  uint64_t v23 = v22[16];
  if (!v23)
  {
    swift_retain();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v64 = a2;
  uint64_t v60 = v22[15];
  unint64_t v61 = (unint64_t)v19;
  uint64_t v24 = (uint64_t)v22 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
  swift_beginAccess();
  sub_10001D074(v24, (uint64_t)v12, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    swift_retain();
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v12, &qword_101638CF0);
LABEL_13:
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v67 = 5;
    long long v68 = 0u;
    long long v69 = 0u;
    __int16 v70 = 267;
    v66(&v67);
    swift_release();
    return (id)sub_10001DAB4((uint64_t)&v67, &qword_10163C5F8);
  }
  char v25 = v65;
  uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v59 = v14 + 32;
  v58(v65, v12, v13);
  uint64_t v26 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0) {
    uint64_t v26 = v61 & 0xFFFFFFFFFFFFLL;
  }
  if (!v26)
  {
    char v38 = *(void (**)(char *, uint64_t))(v14 + 8);
    swift_retain();
    swift_bridgeObjectRetain();
    v38(v25, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  id result = (id)MobileGestalt_get_current_device();
  if (!result)
  {
    __break(1u);
    goto LABEL_19;
  }
  char v28 = result;
  uint64_t uniqueChipID = MobileGestalt_get_uniqueChipID();

  id result = (id)MobileGestalt_get_current_device();
  if (!result)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  uint64_t v30 = result;
  uint64_t chipID = MobileGestalt_get_chipID();

  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v65, v13);
  uint64_t v67 = uniqueChipID;
  uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v57 = v31;
  uint64_t v67 = chipID;
  uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v55 = v33;
  uint64_t chipID = v32;
  uint64_t v34 = v22[12];
  uint64_t v54 = v22[11];
  unint64_t v35 = v22[14];
  if (v35 >> 60 == 15)
  {
    uint64_t v36 = v34;
    swift_bridgeObjectRetain();
    unint64_t v52 = 0;
    unint64_t v37 = 0;
  }
  else
  {
    uint64_t v67 = v22[13];
    *(void *)&long long v68 = v35;
    unint64_t v52 = sub_1001A95DC();
    uint64_t v36 = v34;
    swift_bridgeObjectRetain();
    unint64_t v52 = RawRepresentable<>.hexString.getter();
    unint64_t v37 = v39;
  }
  v58(v7, v17, v13);
  uint64_t v40 = &v7[v5[5]];
  *(void *)uint64_t v40 = v60;
  *((void *)v40 + 1) = v23;
  uint64_t v41 = &v7[v5[6]];
  *(void *)uint64_t v41 = v61;
  *((void *)v41 + 1) = v21;
  uint64_t v42 = (uint64_t *)&v7[v5[7]];
  uint64_t v43 = v57;
  *uint64_t v42 = v53;
  v42[1] = v43;
  uint64_t v44 = (uint64_t *)&v7[v5[8]];
  uint64_t v45 = v55;
  *uint64_t v44 = chipID;
  v44[1] = v45;
  uint64_t v46 = &v7[v5[9]];
  *(void *)uint64_t v46 = v54;
  *((void *)v46 + 1) = v36;
  int64_t v47 = (unint64_t *)&v7[v5[10]];
  *int64_t v47 = v52;
  v47[1] = v37;
  uint64_t v49 = (uint64_t)v62;
  uint64_t v48 = v63;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v62, 1, 1, v13);
  char v50 = (void *)swift_allocObject();
  v50[2] = v66;
  v50[3] = v64;
  v50[4] = v48;
  swift_retain();
  swift_retain();
  sub_1003C1ED0(v49, (uint64_t)v7, (uint64_t)sub_101146008, (uint64_t)v50);
  swift_release();
  swift_release();
  sub_10001DAB4(v49, &qword_101638CF0);
  sub_1011460E4((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for AccessoryUnpairData);
  return (id)(*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v65, v13);
}

uint64_t sub_1011429D8(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v7 = String.init<A>(describing:)();
    uint64_t v9 = v8;
    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 64) = sub_10000B4CC();
    *(void *)(v6 + 32) = v7;
    *(void *)(v6 + 40) = v9;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    v11[0] = a1;
    __int16 v12 = 256;
    swift_errorRetain();
    a2(v11);
    swift_errorRelease();
  }
  else
  {
    *(unsigned char *)(a4 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 11;
    HIBYTE(v12) = 0;
    a2(v11);
  }
  return sub_10001DAB4((uint64_t)v11, &qword_10163C5F8);
}

uint64_t sub_101142B60(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  unint64_t v37 = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v42 = *(void *)(v4 - 8);
  uint64_t v43 = v4;
  __chkstk_darwin(v4);
  uint64_t v40 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for DispatchQoS();
  uint64_t v39 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  char v38 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v44 = v3;
  uint64_t v15 = *(void **)(v3 + 24);
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  char v17 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v17)
  {
    static os_log_type_t.default.getter();
    if (qword_101637308 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_101342130;
  uint64_t v19 = v44;
  uint64_t v20 = UUID.uuidString.getter();
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_10000B4CC();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v19 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 9;
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
  uint64_t v23 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v24 = (void *)swift_allocObject();
  uint64_t v25 = v36;
  v24[2] = v35;
  v24[3] = v25;
  uint64_t v26 = v37;
  uint64_t v24[4] = v37;
  *(void *)&long long v49 = sub_101145E1C;
  *((void *)&v49 + 1) = v24;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v48 = sub_1004B5480;
  *((void *)&v48 + 1) = &unk_10160B020;
  char v27 = _Block_copy(&aBlock);
  swift_retain();
  id v28 = v26;
  uint64_t v29 = v38;
  static DispatchQoS.unspecified.getter();
  *(void *)&v46[0] = _swiftEmptyArrayStorage;
  sub_1008BEEB0();
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_10002FE84();
  uint64_t v30 = v40;
  uint64_t v31 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v41);
  swift_release();
  swift_retain();
  sub_1001C93F4(v45);
  swift_release();
  uint64_t result = sub_10001D608((uint64_t)v45, (uint64_t)v46, &qword_10166CCD8);
  if (*((void *)&v46[0] + 1))
  {
    long long v51 = v46[4];
    long long v52 = v46[5];
    long long v53 = v46[6];
    long long aBlock = v46[0];
    long long v48 = v46[1];
    long long v49 = v46[2];
    long long v50 = v46[3];
    uint64_t v33 = type metadata accessor for Transaction();
    __chkstk_darwin(v33);
    *(&v34 - 2) = v19;
    *(&v34 - 1) = (uint64_t)&aBlock;
    static Transaction.named<A>(_:with:)();
    return sub_101145EB4((uint64_t)v45);
  }
  return result;
}

uint64_t sub_10114315C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessoryPairingLockAckResponse();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v22 - v6;
  uint64_t v8 = sub_10000588C(&qword_101642DA0);
  __chkstk_darwin(v8);
  uint64_t v10 = (void **)((char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v10, &qword_101642DA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = *v10;
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_101342130;
    v22[1] = v11;
    type metadata accessor for SPPairingSessionError(0);
    id v13 = v11;
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v16 = v15;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = sub_10000B4CC();
    *(void *)(v12 + 32) = v14;
    *(void *)(v12 + 40) = v16;
    os_log(_:dso:log:_:_:)();

    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10114607C((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockAckResponse);
    static os_log_type_t.default.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_101342130;
    sub_101146014((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockAckResponse);
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v21 = v20;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = sub_10000B4CC();
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v21;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return sub_1011460E4((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockAckResponse);
  }
}

uint64_t sub_101143490(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v15 - v10;
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v16 = 0x7365547265646E75;
  unint64_t v17 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    sub_1010ABD60(v16);
    swift_bridgeObjectRelease();
  }
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v9, v5);
  uint64_t v13 = type metadata accessor for Transaction();
  __chkstk_darwin(v13);
  *(&v15 - 4) = v2;
  *(&v15 - 3) = (uint64_t)v11;
  *(&v15 - 2) = a1;
  *(&v15 - 1) = a2;
  static Transaction.named<A>(_:with:)();
  return ((uint64_t (*)(char *, uint64_t))v12)(v11, v5);
}

unsigned char *storeEnumTagSinglePayload for AccessoryPairingCoordinator.PairingState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x101143810);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingCoordinator.PairingState()
{
  return &type metadata for AccessoryPairingCoordinator.PairingState;
}

unint64_t sub_10114384C()
{
  unint64_t result = qword_10166CCC8;
  if (!qword_10166CCC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CCC8);
  }
  return result;
}

uint64_t sub_1011438A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(void *)(a2 + 24);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a4;
  void v16[4] = a5;
  v16[5] = a1;
  aBlock[4] = sub_101145DB0;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_10160AF30;
  unint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  sub_1000BD0E8(a4);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_1008BEEB0();
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_10002FE84();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v21);
  swift_release();
  return swift_release();
}

uint64_t sub_101143B6C(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v53 = a3;
  uint64_t v52 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  long long v51 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v50 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v14 = result;
    uint64_t v46 = a2;
    uint64_t v49 = v4;
    Transaction.capture()();
    uint64_t v15 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState;
    unsigned int v16 = *(unsigned __int8 *)(v14 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState);
    int v17 = static os_log_type_t.default.getter();
    uint64_t v47 = v7;
    uint64_t v48 = v6;
    if (v16 >= 9)
    {
      int v45 = v17;
      if (qword_101637308 != -1) {
        swift_once();
      }
      v44[1] = qword_10170F060;
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_101347BA0;
      uint64_t v31 = UUID.uuidString.getter();
      uint64_t v33 = v32;
      *(void *)(v30 + 56) = &type metadata for String;
      unint64_t v34 = sub_10000B4CC();
      *(void *)(v30 + 64) = v34;
      *(void *)(v30 + 32) = v31;
      *(void *)(v30 + 40) = v33;
      unint64_t v35 = sub_101141740(*(unsigned char *)(v14 + v15));
      *(void *)(v30 + 96) = &type metadata for String;
      *(void *)(v30 + 104) = v34;
      *(void *)(v30 + 72) = v35;
      *(void *)(v30 + 80) = v36;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000584C();
      (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
      unint64_t v37 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      uint64_t v38 = swift_allocObject();
      uint64_t v39 = (uint64_t)v46;
      uint64_t v40 = v53;
      *(void *)(v38 + 16) = v46;
      *(void *)(v38 + 24) = v40;
      uint64_t v59 = sub_101004904;
      uint64_t v60 = v38;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v56 = 1107296256;
      uint64_t v57 = sub_1004B5480;
      uint64_t v58 = &unk_10160AF80;
      uint64_t v41 = _Block_copy(&aBlock);
      sub_1000BD0E8(v39);
      char v27 = v50;
      static DispatchQoS.unspecified.getter();
      uint64_t v54 = _swiftEmptyArrayStorage;
      sub_1008BEEB0();
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_10002FE84();
      uint64_t v43 = v51;
      uint64_t v42 = v52;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v41);
      swift_release();

      (*(void (**)(char *, uint64_t))(v49 + 8))(v43, v42);
    }
    else
    {
      if (qword_101637308 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_101342130;
      uint64_t v19 = UUID.uuidString.getter();
      uint64_t v21 = v20;
      *(void *)(v18 + 56) = &type metadata for String;
      *(void *)(v18 + 64) = sub_10000B4CC();
      *(void *)(v18 + 32) = v19;
      *(void *)(v18 + 40) = v21;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10114218C();
      swift_release();
      sub_10000584C();
      (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
      uint64_t v22 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      uint64_t v23 = swift_allocObject();
      uint64_t v24 = (uint64_t)v46;
      uint64_t v25 = v53;
      *(void *)(v23 + 16) = v46;
      *(void *)(v23 + 24) = v25;
      uint64_t v59 = sub_101004910;
      uint64_t v60 = v23;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v56 = 1107296256;
      uint64_t v57 = sub_1004B5480;
      uint64_t v58 = &unk_10160AFD0;
      uint64_t v26 = _Block_copy(&aBlock);
      sub_1000BD0E8(v24);
      char v27 = v50;
      static DispatchQoS.unspecified.getter();
      uint64_t v54 = _swiftEmptyArrayStorage;
      sub_1008BEEB0();
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_10002FE84();
      uint64_t v29 = v51;
      uint64_t v28 = v52;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v26);
      swift_release();

      (*(void (**)(char *, uint64_t))(v49 + 8))(v29, v28);
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v27, v48);
    return swift_release();
  }
  else if (a2)
  {
    return a2(0);
  }
  return result;
}

uint64_t sub_101144264@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_100BBD2A0(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = &v5[2 * a1];
    long long v10 = *((_OWORD *)v8 + 2);
    uint64_t v9 = v8 + 4;
    *a2 = v10;
    uint64_t v11 = v6 - 1 - a1;
    if (v11 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v9, v9 + 2, 16 * v11);
      v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_101144344(uint64_t a1, unint64_t a2)
{
  unint64_t v107 = a2;
  uint64_t v3 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v97 = *(void *)(v3 - 8);
  uint64_t v98 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v105 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v87 - v7;
  __chkstk_darwin(v6);
  unint64_t v102 = (unint64_t)&v87 - v9;
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_10165F410);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  unint64_t v13 = (unint64_t)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v106 = (uint64_t *)((char *)&v87 - v14);
  uint64_t v15 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v15 - 8);
  int v17 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v22 = __DataStorage.init(length:)();
  sub_10001D074(a1, (uint64_t)v17, &qword_10163BB20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_10001DAB4((uint64_t)v17, &qword_10163BB20);
    swift_allocObject();
    __DataStorage.init(length:)();
    swift_release();
    return 0x6000000000;
  }
  sub_10114607C((uint64_t)v17, (uint64_t)v21, type metadata accessor for OwnedBeaconGroup);
  uint64_t v23 = (uint64_t)v21;
  if (v107 > 3u)
  {
    char v80 = v107;
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v81 = type metadata accessor for Logger();
    sub_100010324(v81, (uint64_t)qword_10170F068);
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v84 = 134218240;
      *(void *)&long long v108 = 4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v84 + 12) = 256;
      LOBYTE(v108) = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "pairingPart > %ld! (%hhu", (uint8_t *)v84, 0xFu);
      swift_slowDealloc();
    }

    swift_allocObject();
    __DataStorage.init(length:)();
    swift_release();
    sub_1011460E4(v23, type metadata accessor for OwnedBeaconGroup);
    return 0x6000000000;
  }
  uint64_t v92 = v21;
  uint64_t v93 = v22;
  uint64_t v24 = v22 | 0x4000000000000000;
  swift_retain();
  uint64_t v25 = sub_100A6EA38(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v26 = v25[2];
  unint64_t v27 = v25[3];
  int64_t v28 = v27 >> 1;
  int64_t v29 = v26 + 1;
  if (v27 >> 1 > v26) {
    goto LABEL_5;
  }
  while (1)
  {
    uint64_t v25 = sub_100A6EA38((void *)(v27 > 1), v29, 1, v25);
    unint64_t v27 = v25[3];
    int64_t v28 = v27 >> 1;
LABEL_5:
    v25[2] = v29;
    uint64_t v30 = &v25[2 * v26];
    v30[4] = 0x2000000000;
    v30[5] = v24;
    unint64_t v31 = v26 + 2;
    swift_retain();
    if (v28 < (uint64_t)(v26 + 2)) {
      uint64_t v25 = sub_100A6EA38((void *)(v27 > 1), v26 + 2, 1, v25);
    }
    v25[2] = v31;
    uint64_t v32 = &v25[2 * v29];
    v32[4] = 0x2000000000;
    v32[5] = v24;
    unint64_t v33 = v25[3];
    unint64_t v34 = v26 + 3;
    swift_retain();
    if ((uint64_t)(v26 + 3) > (uint64_t)(v33 >> 1)) {
      uint64_t v25 = sub_100A6EA38((void *)(v33 > 1), v26 + 3, 1, v25);
    }
    unint64_t v91 = v107;
    v25[2] = v34;
    unint64_t v35 = &v25[2 * v31];
    v35[4] = 0x2000000000;
    v35[5] = v24;
    unint64_t v36 = v25[3];
    unint64_t v37 = v26 + 4;
    swift_retain();
    if ((uint64_t)(v26 + 4) > (uint64_t)(v36 >> 1)) {
      uint64_t v25 = sub_100A6EA38((void *)(v36 > 1), v26 + 4, 1, v25);
    }
    uint64_t v38 = v97;
    unint64_t v26 = v102;
    v25[2] = v37;
    uint64_t v39 = &v25[2 * v34];
    v39[4] = 0x2000000000;
    v39[5] = v24;
    uint64_t v40 = *(void *)&v92[*(int *)(v18 + 40)];
    uint64_t v41 = *(void *)(v40 + 64);
    uint64_t v96 = v40 + 64;
    unint64_t v109 = v25;
    uint64_t v42 = 1 << *(unsigned char *)(v40 + 32);
    uint64_t v43 = -1;
    if (v42 < 64) {
      uint64_t v43 = ~(-1 << v42);
    }
    unint64_t v27 = v43 & v41;
    unint64_t v44 = (unint64_t)(v42 + 63) >> 6;
    unint64_t v88 = v44 - 1;
    uint64_t v45 = swift_bridgeObjectRetain();
    unint64_t v46 = 0;
    int64_t v100 = v44;
    unint64_t v90 = v44 - 5;
    int64_t v29 = (int64_t)&unk_1016477D0;
    uint64_t v104 = v45;
    uint64_t v89 = v45 + 104;
    *(void *)&long long v47 = 136446210;
    long long v95 = v47;
    uint64_t v94 = (char *)&type metadata for Any + 8;
    uint64_t v24 = v98;
    uint64_t v18 = (uint64_t)v105;
    uint64_t v25 = v106;
    uint64_t v99 = v8;
    unint64_t v101 = v13;
    if (v27) {
      break;
    }
LABEL_18:
    int64_t v58 = v46 + 1;
    if (!__OFADD__(v46, 1))
    {
      if (v58 >= v100)
      {
        unint64_t v60 = v46;
      }
      else
      {
        unint64_t v59 = *(void *)(v96 + 8 * v58);
        if (v59)
        {
LABEL_21:
          unint64_t v27 = (v59 - 1) & v59;
          unint64_t v49 = __clz(__rbit64(v59)) + (v58 << 6);
          unint64_t v107 = v58;
          goto LABEL_17;
        }
        unint64_t v60 = v46 + 1;
        if ((uint64_t)(v46 + 2) < v100)
        {
          unint64_t v59 = *(void *)(v96 + 8 * (v46 + 2));
          if (v59)
          {
            int64_t v58 = v46 + 2;
            goto LABEL_21;
          }
          unint64_t v60 = v46 + 2;
          if ((uint64_t)(v46 + 3) < v100)
          {
            unint64_t v59 = *(void *)(v96 + 8 * (v46 + 3));
            if (v59)
            {
              int64_t v58 = v46 + 3;
              goto LABEL_21;
            }
            int64_t v58 = v46 + 4;
            unint64_t v60 = v46 + 3;
            if ((uint64_t)(v46 + 4) < v100)
            {
              unint64_t v59 = *(void *)(v96 + 8 * v58);
              if (v59) {
                goto LABEL_21;
              }
              while (v90 != v46)
              {
                unint64_t v59 = *(void *)(v89 + 8 * v46++);
                if (v59)
                {
                  int64_t v58 = v46 + 4;
                  goto LABEL_21;
                }
              }
              unint64_t v60 = v88;
            }
          }
        }
      }
      uint64_t v61 = sub_10000588C((uint64_t *)&unk_1016477D0);
      (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v13, 1, 1, v61);
      unint64_t v27 = 0;
      unint64_t v107 = v60;
      goto LABEL_24;
    }
    __break(1u);
LABEL_61:
    __break(1u);
  }
  while (1)
  {
    unint64_t v48 = __clz(__rbit64(v27));
    v27 &= v27 - 1;
    unint64_t v107 = v46;
    unint64_t v49 = v48 | (v46 << 6);
LABEL_17:
    uint64_t v50 = *(void *)(v104 + 56);
    long long v51 = (uint64_t *)(*(void *)(v104 + 48) + 16 * v49);
    uint64_t v52 = *v51;
    unint64_t v53 = v51[1];
    *(void *)unint64_t v13 = *v51;
    *(void *)(v13 + 8) = v53;
    uint64_t v54 = v50 + *(void *)(v38 + 72) * v49;
    uint64_t v55 = sub_10000588C((uint64_t *)&unk_1016477D0);
    sub_101146014(v54, v13 + *(int *)(v55 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v56 = *(void (**)(unint64_t, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56);
    uint64_t v57 = v55;
    int64_t v29 = (int64_t)&unk_1016477D0;
    v56(v13, 0, 1, v57);
    sub_1000361E0(v52, v53);
    uint64_t v18 = (uint64_t)v105;
    uint64_t v25 = v106;
LABEL_24:
    sub_10001D608(v13, (uint64_t)v25, (uint64_t *)&unk_10165F410);
    uint64_t v62 = sub_10000588C((uint64_t *)&unk_1016477D0);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 48))(v25, 1, v62) == 1) {
      break;
    }
    sub_10001CFB8(*v25, v25[1]);
    sub_10114607C((uint64_t)v25 + *(int *)(v62 + 48), v26, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_101146014(v26, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v63 = (int *)sub_10000588C(&qword_101643D80);
      unint64_t v26 = (unint64_t)&v8[v63[12]];
      uint64_t v64 = (int64_t *)&v8[v63[16]];
      int64_t v29 = *v64;
      unint64_t v13 = v64[1];
      if (v13 >> 60 == 15 || (uint64_t v65 = &v8[v63[24]], v65[1] == 1))
      {
        uint64_t v103 = &v8[v63[12]];
        if (qword_101637310 != -1) {
          swift_once();
        }
        uint64_t v66 = type metadata accessor for Logger();
        sub_100010324(v66, (uint64_t)qword_10170F068);
        unint64_t v26 = v102;
        sub_101146014(v102, v18, type metadata accessor for OwnedBeaconGroup.PairingState);
        uint64_t v67 = v18;
        long long v68 = Logger.logObject.getter();
        os_log_type_t v69 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v68, v69))
        {
          uint64_t v70 = swift_slowAlloc();
          *(void *)&long long v108 = swift_slowAlloc();
          *(_DWORD *)uint64_t v70 = v95;
          uint64_t v71 = sub_1004D3DF0();
          *(void *)(v70 + 4) = sub_1008FA0F0(v71, v72, (uint64_t *)&v108);
          swift_bridgeObjectRelease();
          sub_1011460E4(v67, type metadata accessor for OwnedBeaconGroup.PairingState);
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "Missing nonce/partId on %{public}s)", (uint8_t *)v70, 0xCu);
          swift_arrayDestroy();
          uint64_t v38 = v97;
          swift_slowDealloc();
          uint64_t v24 = v98;
          swift_slowDealloc();
        }
        else
        {

          sub_1011460E4(v67, type metadata accessor for OwnedBeaconGroup.PairingState);
        }
        sub_100037A24(v29, v13);
        sub_1011460E4(v26, type metadata accessor for OwnedBeaconGroup.PairingState);
        uint64_t v18 = v67;
        uint64_t v25 = v106;
        sub_10001DAB4((uint64_t)v103, (uint64_t *)&unk_1016477E0);
        uint64_t v73 = type metadata accessor for UUID();
        uint64_t v8 = v99;
        (*(void (**)(char *, uint64_t))(*(void *)(v73 - 8) + 8))(v99, v73);
        unint64_t v13 = v101;
      }
      else
      {
        unint64_t v74 = *v65;
        uint64_t v25 = v109;
        sub_1000361E0(v29, v13);
        sub_1000361E0(v29, v13);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v25 = sub_100BBD2A0(v25);
        }
        if (v25[2] <= v74) {
          goto LABEL_61;
        }
        uint64_t v75 = &v25[2 * v74];
        uint64_t v76 = v75[4];
        unint64_t v77 = v75[5];
        v75[4] = v29;
        v75[5] = v13;
        sub_10001CFB8(v76, v77);
        sub_100037A24(v29, v13);
        sub_100037A24(v29, v13);
        unint64_t v109 = v25;
        uint64_t v78 = v26;
        unint64_t v26 = v102;
        sub_1011460E4(v102, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_10001DAB4(v78, (uint64_t *)&unk_1016477E0);
        uint64_t v79 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t))(*(void *)(v79 - 8) + 8))(v8, v79);
        unint64_t v13 = v101;
        uint64_t v25 = v106;
      }
      int64_t v29 = (int64_t)&unk_1016477D0;
      unint64_t v46 = v107;
      if (!v27) {
        goto LABEL_18;
      }
    }
    else
    {
      sub_1011460E4(v26, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_1011460E4((uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
      unint64_t v46 = v107;
      if (!v27) {
        goto LABEL_18;
      }
    }
  }
  swift_release();
  sub_101144264(v91, &v108);
  sub_10001CFB8(v108, *((unint64_t *)&v108 + 1));
  uint64_t v85 = sub_100884D38((uint64_t)v109);
  swift_release();
  sub_1011460E4((uint64_t)v92, type metadata accessor for OwnedBeaconGroup);
  return v85;
}

uint64_t sub_10114503C(uint64_t a1, char a2)
{
  LOBYTE(v2) = a2;
  uint64_t v88 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v93 = *(void *)(v88 - 8);
  uint64_t v4 = __chkstk_darwin(v88);
  long long v95 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v80 - v7;
  __chkstk_darwin(v6);
  uint64_t v94 = (uint64_t)&v80 - v9;
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_10165F410);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  unint64_t v13 = (uint64_t *)((char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v80 - v14;
  uint64_t v16 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v18, &qword_10163BB20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_10001DAB4((uint64_t)v18, &qword_10163BB20);
    type metadata accessor for __DataStorage();
    swift_allocObject();
    __DataStorage.init(length:)();
    return 0x1800000000;
  }
  sub_10114607C((uint64_t)v18, (uint64_t)v22, type metadata accessor for OwnedBeaconGroup);
  unint64_t v23 = (unint64_t)v22;
  if (v2 > 3u)
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v71 = type metadata accessor for Logger();
    sub_100010324(v71, (uint64_t)qword_10170F068);
    unint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = swift_slowAlloc();
      *(_DWORD *)uint64_t v74 = 134218240;
      *(void *)&long long v97 = 4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v74 + 12) = 256;
      LOBYTE(v97) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "pairingPart > %ld! (%hhu", (uint8_t *)v74, 0xFu);
      swift_slowDealloc();
    }

    type metadata accessor for __DataStorage();
    swift_allocObject();
    __DataStorage.init(length:)();
    sub_1011460E4((uint64_t)v22, type metadata accessor for OwnedBeaconGroup);
    return 0x1800000000;
  }
  uint64_t v24 = sub_100A6EA38(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v26 = v24[2];
  unint64_t v25 = v24[3];
  int64_t v27 = v25 >> 1;
  int64_t v28 = v26 + 1;
  if (v25 >> 1 > v26) {
    goto LABEL_5;
  }
  while (1)
  {
    uint64_t v24 = sub_100A6EA38((void *)(v25 > 1), v28, 1, v24);
    unint64_t v25 = v24[3];
    int64_t v27 = v25 >> 1;
LABEL_5:
    v24[2] = v28;
    long long v29 = xmmword_101392540;
    *(_OWORD *)&v24[2 * v26 + 4] = xmmword_101392540;
    unint64_t v30 = v26 + 2;
    if (v27 < (uint64_t)(v26 + 2))
    {
      long long v96 = xmmword_101392540;
      unint64_t v77 = sub_100A6EA38((void *)(v25 > 1), v26 + 2, 1, v24);
      long long v29 = v96;
      uint64_t v24 = v77;
    }
    v24[2] = v30;
    *(_OWORD *)&v24[2 * v28 + 4] = v29;
    unint64_t v31 = v24[3];
    int64_t v28 = v26 + 3;
    if ((uint64_t)(v26 + 3) > (uint64_t)(v31 >> 1))
    {
      long long v96 = v29;
      uint64_t v78 = sub_100A6EA38((void *)(v31 > 1), v26 + 3, 1, v24);
      long long v29 = v96;
      uint64_t v24 = v78;
    }
    unint64_t v83 = v2;
    v24[2] = v28;
    *(_OWORD *)&v24[2 * v30 + 4] = v29;
    unint64_t v32 = v24[3];
    unint64_t v33 = v26 + 4;
    if ((uint64_t)(v26 + 4) > (uint64_t)(v32 >> 1))
    {
      long long v96 = v29;
      uint64_t v79 = sub_100A6EA38((void *)(v32 > 1), v26 + 4, 1, v24);
      long long v29 = v96;
      uint64_t v24 = v79;
    }
    uint64_t v34 = v94;
    unint64_t v26 = (unint64_t)v95;
    v24[2] = v33;
    *(_OWORD *)&v24[2 * v28 + 4] = v29;
    uint64_t v35 = *(int *)(v19 + 40);
    unint64_t v84 = v23;
    uint64_t v36 = *(void *)(v23 + v35);
    uint64_t v37 = *(void *)(v36 + 64);
    uint64_t v87 = v36 + 64;
    uint64_t v98 = v24;
    uint64_t v38 = 1 << *(unsigned char *)(v36 + 32);
    uint64_t v39 = -1;
    if (v38 < 64) {
      uint64_t v39 = ~(-1 << v38);
    }
    unint64_t v23 = v39 & v37;
    unint64_t v40 = (unint64_t)(v38 + 63) >> 6;
    unint64_t v80 = v40 - 1;
    uint64_t v41 = swift_bridgeObjectRetain();
    unint64_t v42 = 0;
    int64_t v90 = v40;
    unint64_t v82 = v40 - 5;
    unint64_t v2 = (unint64_t)&unk_1016477D0;
    uint64_t v92 = v41;
    uint64_t v81 = v41 + 104;
    *(void *)&long long v43 = 136446210;
    long long v86 = v43;
    uint64_t v85 = (char *)&type metadata for Any + 8;
    uint64_t v89 = v13;
    if (v23) {
      break;
    }
LABEL_18:
    unint64_t v25 = v42 + 1;
    if (!__OFADD__(v42, 1))
    {
      if ((uint64_t)v25 >= v90)
      {
        unint64_t v52 = v42;
      }
      else
      {
        unint64_t v51 = *(void *)(v87 + 8 * v25);
        if (v51)
        {
LABEL_21:
          unint64_t v23 = (v51 - 1) & v51;
          unint64_t v45 = __clz(__rbit64(v51)) + (v25 << 6);
          *(void *)&long long v96 = v25;
          goto LABEL_17;
        }
        unint64_t v52 = v42 + 1;
        if ((uint64_t)(v42 + 2) < v90)
        {
          unint64_t v51 = *(void *)(v87 + 8 * (v42 + 2));
          if (v51)
          {
            unint64_t v25 = v42 + 2;
            goto LABEL_21;
          }
          unint64_t v52 = v42 + 2;
          if ((uint64_t)(v42 + 3) < v90)
          {
            unint64_t v51 = *(void *)(v87 + 8 * (v42 + 3));
            if (v51)
            {
              unint64_t v25 = v42 + 3;
              goto LABEL_21;
            }
            unint64_t v25 = v42 + 4;
            unint64_t v52 = v42 + 3;
            if ((uint64_t)(v42 + 4) < v90)
            {
              unint64_t v51 = *(void *)(v87 + 8 * v25);
              if (v51) {
                goto LABEL_21;
              }
              while (v82 != v42)
              {
                unint64_t v51 = *(void *)(v81 + 8 * v42++);
                if (v51)
                {
                  unint64_t v25 = v42 + 4;
                  goto LABEL_21;
                }
              }
              unint64_t v52 = v80;
            }
          }
        }
      }
      uint64_t v53 = sub_10000588C((uint64_t *)&unk_1016477D0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v13, 1, 1, v53);
      unint64_t v23 = 0;
      *(void *)&long long v96 = v52;
      goto LABEL_24;
    }
    __break(1u);
LABEL_61:
    __break(1u);
  }
  while (1)
  {
    unint64_t v44 = __clz(__rbit64(v23));
    v23 &= v23 - 1;
    *(void *)&long long v96 = v42;
    unint64_t v45 = v44 | (v42 << 6);
LABEL_17:
    uint64_t v46 = *(void *)(v92 + 56);
    long long v47 = (uint64_t *)(*(void *)(v92 + 48) + 16 * v45);
    uint64_t v48 = *v47;
    unint64_t v49 = v47[1];
    *unint64_t v13 = *v47;
    v13[1] = v49;
    int64_t v28 = v46 + *(void *)(v93 + 72) * v45;
    uint64_t v50 = sub_10000588C((uint64_t *)&unk_1016477D0);
    sub_101146014(v28, (uint64_t)v13 + *(int *)(v50 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v13, 0, 1, v50);
    sub_1000361E0(v48, v49);
    uint64_t v34 = v94;
    unint64_t v26 = (unint64_t)v95;
LABEL_24:
    sub_10001D608((uint64_t)v13, (uint64_t)v15, (uint64_t *)&unk_10165F410);
    uint64_t v19 = sub_10000588C((uint64_t *)&unk_1016477D0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v15, 1, v19) == 1) {
      break;
    }
    sub_10001CFB8(*(void *)v15, *((void *)v15 + 1));
    sub_10114607C((uint64_t)&v15[*(int *)(v19 + 48)], v34, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_101146014(v34, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v54 = (int *)sub_10000588C(&qword_101643D80);
      int64_t v28 = (int64_t)&v8[v54[12]];
      sub_100037A24(*(void *)&v8[v54[16]], *(void *)&v8[v54[16] + 8]);
      uint64_t v55 = &v8[v54[20]];
      if ((v55[8] & 1) != 0 || (uint64_t v56 = &v8[v54[24]], v56[1] == 1))
      {
        uint64_t v91 = v28;
        if (qword_101637310 != -1) {
          swift_once();
        }
        uint64_t v57 = type metadata accessor for Logger();
        uint64_t v19 = sub_100010324(v57, (uint64_t)qword_10170F068);
        sub_101146014(v34, v26, type metadata accessor for OwnedBeaconGroup.PairingState);
        uint64_t v58 = v34;
        unint64_t v59 = Logger.logObject.getter();
        int64_t v28 = v26;
        os_log_type_t v60 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v59, v60))
        {
          uint64_t v61 = swift_slowAlloc();
          *(void *)&long long v97 = swift_slowAlloc();
          *(_DWORD *)uint64_t v61 = v86;
          uint64_t v62 = sub_1004D3DF0();
          *(void *)(v61 + 4) = sub_1008FA0F0(v62, v63, (uint64_t *)&v97);
          swift_bridgeObjectRelease();
          uint64_t v19 = (uint64_t)type metadata accessor for OwnedBeaconGroup.PairingState;
          sub_1011460E4(v28, type metadata accessor for OwnedBeaconGroup.PairingState);
          _os_log_impl((void *)&_mh_execute_header, v59, v60, "Missing epoch/partId on %{public}s", (uint8_t *)v61, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_1011460E4(v28, type metadata accessor for OwnedBeaconGroup.PairingState);
        }
        sub_1011460E4(v58, type metadata accessor for OwnedBeaconGroup.PairingState);
        unint64_t v26 = v28;
        uint64_t v34 = v58;
        sub_10001DAB4(v91, (uint64_t *)&unk_1016477E0);
        uint64_t v64 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t))(*(void *)(v64 - 8) + 8))(v8, v64);
        unint64_t v13 = v89;
      }
      else
      {
        unint64_t v2 = *v56;
        *(void *)&long long v97 = *(void *)v55;
        sub_100061D24();
        unint64_t v26 = FixedWidthInteger.data.getter();
        uint64_t v66 = v65;
        uint64_t v19 = (uint64_t)v98;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v19 = (uint64_t)sub_100BBD2A0((void *)v19);
        }
        unint64_t v25 = *(void *)(v19 + 16);
        if (v25 <= v2) {
          goto LABEL_61;
        }
        uint64_t v67 = v19 + 16 * v2;
        uint64_t v68 = *(void *)(v67 + 32);
        unint64_t v69 = *(void *)(v67 + 40);
        *(void *)(v67 + 32) = v26;
        *(void *)(v67 + 40) = v66;
        sub_10001CFB8(v68, v69);
        uint64_t v98 = (void *)v19;
        uint64_t v34 = v94;
        sub_1011460E4(v94, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_10001DAB4(v28, (uint64_t *)&unk_1016477E0);
        uint64_t v70 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t))(*(void *)(v70 - 8) + 8))(v8, v70);
        unint64_t v26 = (unint64_t)v95;
      }
      unint64_t v2 = (unint64_t)&unk_1016477D0;
      unint64_t v42 = v96;
      if (!v23) {
        goto LABEL_18;
      }
    }
    else
    {
      sub_1011460E4(v34, type metadata accessor for OwnedBeaconGroup.PairingState);
      unint64_t v2 = (unint64_t)&unk_1016477D0;
      sub_1011460E4((uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
      unint64_t v42 = v96;
      if (!v23) {
        goto LABEL_18;
      }
    }
  }
  swift_release();
  sub_101144264(v83, &v97);
  sub_10001CFB8(v97, *((unint64_t *)&v97 + 1));
  uint64_t v75 = sub_100884D38((uint64_t)v98);
  sub_1011460E4(v84, type metadata accessor for OwnedBeaconGroup);
  return v75;
}

unint64_t sub_101145CA4(unint64_t result)
{
  if (result >= 0xC) {
    return 12;
  }
  return result;
}

unint64_t sub_101145CB4()
{
  unint64_t result = qword_10166CCD0;
  if (!qword_10166CCD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CCD0);
  }
  return result;
}

uint64_t sub_101145D08(uint64_t a1)
{
  return sub_1011438A0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_101145D28()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_101145D60()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_101145DB0()
{
  return sub_101143B6C(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_101145DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_101145DCC()
{
  return swift_release();
}

uint64_t sub_101145DDC()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_101145E1C()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(void *)(v0 + 32), 0);
}

uint64_t sub_101145E50(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  swift_retain();
  sub_1003C3760(v3, (uint64_t)sub_101145FB8, a1);
  return swift_release();
}

uint64_t sub_101145EB4(uint64_t a1)
{
  return a1;
}

void sub_101145F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a7, a8);
    sub_10001CFB8(a9, a10);
    swift_bridgeObjectRelease();
    sub_100037A24(a13, a14);
  }
}

uint64_t sub_101145FB8(uint64_t a1)
{
  return sub_10114315C(a1);
}

id sub_101145FC0(void (*a1)(uint64_t *), uint64_t a2)
{
  return sub_1011423A0(a1, a2, v2);
}

uint64_t sub_101145FC8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_101146008(uint64_t a1)
{
  return sub_1011429D8(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_101146014(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10114607C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1011460E4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10114615C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  LODWORD(v67) = a2;
  uint64_t v70 = a1;
  uint64_t v73 = a3;
  uint64_t v3 = sub_10000588C(&qword_101649E50);
  __chkstk_darwin(v3 - 8);
  uint64_t v76 = (uint64_t)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for ServerStatusCode();
  uint64_t v5 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v77 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101649E40);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v75 = (uint64_t)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v74 = (uint64_t)&v57 - v11;
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v57 - v12;
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v72 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v71 = (char *)&v57 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  unint64_t v69 = (char *)&v57 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v68 = (char *)&v57 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v66 = (char *)&v57 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v65 = (char *)&v57 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  unint64_t v30 = (char *)&v57 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  unint64_t v33 = (char *)&v57 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (char *)&v57 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v39 = (char *)&v57 - v38;
  uint64_t v40 = __chkstk_darwin(v37);
  unint64_t v42 = (char *)&v57 - v41;
  __chkstk_darwin(v40);
  unint64_t v44 = (char *)&v57 - v43;
  URL.init(string:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v44, v13, v14);
    if (qword_101637498 != -1) {
      swift_once();
    }
    unsigned int v46 = dword_10170F2F8;
    if (!(v67 & 1 | ((dword_10170F2F8 & 0x400) == 0))) {
      unsigned int v46 = dword_10170F2F8 & 0xFFFFFBFF;
    }
    unsigned int v63 = v46;
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v77, enum case for ServerStatusCode.success(_:), v64);
    uint64_t v70 = UUID.uuidString.getter();
    uint64_t v67 = v47;
    uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v48(v74, 1, 1, v14);
    v48(v75, 1, 1, v14);
    uint64_t v49 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v76, 1, 1, v49);
    uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    uint64_t v62 = v42;
    v50(v42, v44, v14);
    uint64_t v61 = v39;
    v50(v39, v44, v14);
    os_log_type_t v60 = v36;
    v50(v36, v44, v14);
    unint64_t v59 = v33;
    v50(v33, v44, v14);
    uint64_t v58 = v30;
    v50(v30, v44, v14);
    uint64_t v51 = (uint64_t)v65;
    v50(v65, v44, v14);
    uint64_t v52 = (uint64_t)v66;
    v50(v66, v44, v14);
    uint64_t v53 = (uint64_t)v68;
    v50(v68, v44, v14);
    uint64_t v54 = (uint64_t)v69;
    v50(v69, v44, v14);
    uint64_t v55 = (uint64_t)v71;
    v50(v71, v44, v14);
    uint64_t v56 = (uint64_t)v72;
    v50(v72, v44, v14);
    return sub_1011E1714(0, 1, v77, 1, 0, v70, v67, 2, v73, 0.0, 1, 2, 0x726F737365636361, 0xE900000000000079, 0x656C707041, 0xE500000000000000, 0, 1, 0,
             0,
             v74,
             v75,
             0x302E302E31,
             0xE500000000000000,
             v76,
             v63,
             0,
             0,
             0xF000000000000000,
             0,
             0xF000000000000000,
             (uint64_t)v62,
             (uint64_t)v61,
             (uint64_t)v60,
             (uint64_t)v59,
             (uint64_t)v58,
             v51,
             0,
             0,
             (uint64_t)_swiftEmptyArrayStorage,
             0,
             0,
             (uint64_t)_swiftEmptyArrayStorage,
             0,
             0,
             1,
             0,
             0,
             1,
             v52,
             v53,
             v54,
             v55,
             v56,
             (uint64_t)v44,
             2,
             2,
             2,
             0,
             0,
             0,
             0);
  }
  return result;
}

uint64_t sub_1011468FC(uint64_t a1, uint64_t a2)
{
  uint64_t v86 = a1;
  uint64_t v87 = a2;
  uint64_t v85 = type metadata accessor for PairingConfig();
  __chkstk_darwin(v85);
  uint64_t v88 = (char *)&v75 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v90 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v89 = (uint64_t)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AccessoryProductInfo();
  uint64_t v91 = *(unsigned __int8 **)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v75 - v18;
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v94 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v93 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = static Data.random(bytes:)();
  unint64_t v23 = v22;
  sub_10114AC54(v96);
  sub_10001D608((uint64_t)v96, (uint64_t)v97, &qword_101639B80);
  if (*((void *)&v97[0] + 1) >> 60 == 15) {
    goto LABEL_10;
  }
  uint64_t v83 = v20;
  unint64_t v84 = v13;
  uint64_t v98[2] = v97[2];
  v98[3] = v97[3];
  v98[4] = v97[4];
  v98[0] = v97[0];
  v98[1] = v97[1];
  type metadata accessor for AccessoryPairingInfo(0);
  swift_allocObject();
  uint64_t v24 = v95;
  sub_1000361E0(v95, v23);
  unint64_t v82 = v23;
  uint64_t v25 = sub_1001C8174(v24, v23);
  if (!v25)
  {
    sub_1000600F0((uint64_t)v96);
    unint64_t v23 = v82;
LABEL_10:
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    sub_100010324(v56, (uint64_t)qword_10170F068);
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      unint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Missing critical information to simulate pairing.", v59, 2u);
      swift_slowDealloc();

      sub_10001CFB8(v95, v23);
    }
    else
    {
      sub_10001CFB8(v95, v23);
    }
    return 0;
  }
  uint64_t v26 = v25;
  uint64_t v27 = Data.init(stringLiteral:)();
  uint64_t v77 = v9;
  uint64_t v78 = v8;
  uint64_t v28 = v27;
  unint64_t v30 = v29;
  id v31 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  id v81 = CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, *(uint64_t *)&kCLLocationAccuracyHundredMeters, 0);
  uint64_t v32 = (uint64_t)v93;
  UUID.init()();
  *(Swift::String *)(v26 + 15) = String.randomString(length:)(12);
  swift_bridgeObjectRelease();
  uint64_t v33 = v94;
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 16);
  uint64_t v76 = v11;
  uint64_t v35 = v83;
  v34(v19, v32, v83);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v19, 0, 1, v35);
  sub_10001D608((uint64_t)v19, (uint64_t)v17, &qword_101638CF0);
  uint64_t v36 = (uint64_t)v26 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
  swift_beginAccess();
  sub_10114B578((uint64_t)v17, v36);
  swift_endAccess();
  *(_OWORD *)(v26 + 11) = xmmword_101366BE0;
  swift_bridgeObjectRelease();
  sub_1000361E0(v28, v30);
  uint64_t v79 = v28;
  unint64_t v80 = v30;
  uint64_t v37 = v28;
  uint64_t v38 = v78;
  uint64_t v39 = sub_1002AB228(v37, v30);
  uint64_t v40 = v26[13];
  unint64_t v41 = v26[14];
  v26[13] = v39;
  v26[14] = v42;
  sub_100037A24(v40, v41);
  CurrentLocationMonitor.requestLocation()();
  uint64_t v43 = v76;
  uint64_t v44 = (uint64_t)v84;
  sub_10114615C(v32, 0, (uint64_t)v84);
  sub_10114B6F4(v44, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  unint64_t v45 = (void (*)(char *, void, uint64_t, uint64_t))*((void *)v91 + 7);
  v45(v5, 0, 1, v43);
  uint64_t v46 = v92;
  sub_10009108C(v98, v26, (uint64_t)v5, v38);
  sub_10001DAB4((uint64_t)v5, (uint64_t *)&unk_10166BFA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v38, 1, v77) != 1)
  {
    sub_10114B64C((uint64_t)v38, v89, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v62 = dispatch_group_create();
    uint64_t v63 = swift_allocObject();
    *(unsigned char *)(v63 + 16) = 1;
    uint64_t v90 = v63;
    uint64_t v91 = (unsigned __int8 *)(v63 + 16);
    uint64_t v64 = (uint64_t)v88;
    uint64_t v65 = v46;
    uint64_t v66 = (uint64_t)&v88[*(int *)(v85 + 28)];
    sub_10114B6F4(v44, v66, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    v45((char *)v66, 0, 1, v43);
    uint64_t v67 = v87;
    *(void *)uint64_t v64 = v86;
    *(void *)(v64 + 8) = v67;
    *(_OWORD *)(v64 + 16) = xmmword_101379BE0;
    *(void *)(v64 + 32) = 0xA400000000000000;
    swift_bridgeObjectRetain();
    dispatch_group_enter(v62);
    uint64_t v68 = (void *)swift_allocObject();
    uint64_t v69 = v90;
    v68[2] = v62;
    v68[3] = v69;
    uint64_t v70 = v81;
    v68[4] = v81;
    v68[5] = v65;
    uint64_t v71 = v62;
    swift_retain();
    id v72 = v70;
    swift_retain();
    uint64_t v73 = v89;
    sub_100AA0654(v89, (void *)v64, (uint64_t)sub_10114B640, (uint64_t)v68);
    swift_release();
    OS_dispatch_group.wait()();
    sub_1000600F0((uint64_t)v96);

    swift_release();
    sub_10001CFB8(v79, v80);
    sub_10001CFB8(v95, v82);
    sub_10114B75C(v64, (uint64_t (*)(void))type metadata accessor for PairingConfig);
    sub_10114B75C(v73, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10114B75C((uint64_t)v84, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v83);
    uint64_t v74 = v91;
    swift_beginAccess();
    uint64_t v60 = *v74;
    swift_release();
    return v60;
  }
  uint64_t v47 = v81;
  uint64_t v48 = v79;
  sub_10001DAB4((uint64_t)v38, &qword_10163B9F0);
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_100010324(v49, (uint64_t)qword_10170F068);
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.error.getter();
  BOOL v52 = os_log_type_enabled(v50, v51);
  uint64_t v54 = v93;
  uint64_t v53 = v94;
  if (v52)
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "failed to generateOwnedBeaconRecord.", v55, 2u);
    swift_slowDealloc();
  }
  sub_1000600F0((uint64_t)v96);

  swift_release();
  sub_10001CFB8(v48, v80);
  sub_10001CFB8(v95, v82);
  sub_10114B75C((uint64_t)v84, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v83);
  return 0;
}

uint64_t sub_101147300(void *a1, void *a2, int a3)
{
  int v172 = a3;
  uint64_t v171 = a2;
  int v169 = a1;
  uint64_t v170 = *(void **)v3;
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v174 = (uint64_t)&v161 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v173 = (char *)&v161 - v7;
  uint64_t v8 = type metadata accessor for UUID();
  unint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v175 = (char *)&v161 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101639628);
  __chkstk_darwin(v11 - 8);
  uint64_t v165 = (uint64_t)&v161 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  uint64_t v183 = *(void *)(v13 - 8);
  uint64_t v184 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v162 = (uint64_t)&v161 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  v163 = (char *)&v161 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v164 = (_WORD *)((char *)&v161 - v19);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v185 = (uint64_t)&v161 - v21;
  __chkstk_darwin(v20);
  unint64_t v23 = (char *)&v161 - v22;
  uint64_t v24 = type metadata accessor for String.Encoding();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v161 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = static Data.random(bytes:)();
  unint64_t v30 = v29;
  uint64_t v179 = 0;
  type metadata accessor for AccessoryPairingInfo(0);
  swift_allocObject();
  sub_1000361E0(v28, v30);
  uint64_t v177 = v28;
  unint64_t v178 = v30;
  uint64_t v180 = sub_1001C8174(v28, v30);
  if (!v180)
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_100010324(v41, (uint64_t)qword_10170F068);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    unint64_t v45 = v180;
    if (v44)
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Missing critical information to simulate pairing.", v46, 2u);
      swift_slowDealloc();

      sub_10001CFB8(v177, v178);
    }
    else
    {
      sub_10001CFB8(v177, v178);
    }
    return v45 != 0;
  }
  uint64_t v168 = v3;
  unint64_t v166 = v9;
  uint64_t v167 = v8;
  id v31 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  id v176 = CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, *(uint64_t *)&kCLLocationAccuracyHundredMeters, 0);
  sub_10000588C(&qword_1016552B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347BA0;
  *(Swift::String *)(inited + 32) = String.randomString(length:)(12);
  Swift::String v33 = String.randomString(length:)(12);
  uint64_t countAndFlagsBits = (void (*)(char *, uint64_t, uint64_t, uint64_t))v33._countAndFlagsBits;
  *(Swift::String *)(inited + 48) = v33;
  swift_bridgeObjectRetain();
  static String.Encoding.utf8.getter();
  uint64_t v34 = String.data(using:allowLossyConversion:)();
  unint64_t v36 = v35;
  uint64_t v39 = *(void (**)(void, void))(v25 + 8);
  uint64_t v38 = (void *)(v25 + 8);
  uint64_t v37 = v39;
  v39(v27, v24);
  if (v36 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    uint64_t v40 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v181 = v37;
    uint64_t v186 = v34;
    uint64_t v187 = v36;
    sub_1000362FC();
    if (DataProtocol.isNull.getter())
    {
      sub_100037A24(v34, v36);
      swift_bridgeObjectRelease();
      uint64_t v40 = _swiftEmptyArrayStorage;
    }
    else
    {
      uint64_t v47 = Data.trimmed.getter();
      uint64_t v161 = v48;
      sub_100037A24(v34, v36);
      swift_bridgeObjectRelease();
      uint64_t v49 = sub_100A6EB48(0, 1, 1, _swiftEmptyArrayStorage);
      unint64_t v51 = v49[2];
      unint64_t v50 = v49[3];
      if (v51 >= v50 >> 1) {
        uint64_t v49 = sub_100A6EB48((void *)(v50 > 1), v51 + 1, 1, v49);
      }
      v49[2] = v51 + 1;
      uint64_t v40 = v49;
      BOOL v52 = &v49[2 * v51];
      uint64_t v53 = v161;
      v52[4] = v47;
      v52[5] = v53;
    }
    uint64_t v37 = v181;
  }
  swift_bridgeObjectRetain();
  static String.Encoding.utf8.getter();
  uint64_t v54 = String.data(using:allowLossyConversion:)();
  unint64_t v56 = v55;
  v37(v27, v24);
  if (v56 >> 60 == 15) {
    goto LABEL_18;
  }
  uint64_t v186 = v54;
  uint64_t v187 = v56;
  sub_1000362FC();
  if (DataProtocol.isNull.getter())
  {
    sub_100037A24(v54, v56);
LABEL_18:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v57 = v184;
    unint64_t v58 = (unint64_t)v176;
    goto LABEL_24;
  }
  uint64_t v59 = Data.trimmed.getter();
  uint64_t v61 = v60;
  sub_100037A24(v54, v56);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v40 = sub_100A6EB48(0, v40[2] + 1, 1, v40);
  }
  unint64_t v58 = (unint64_t)v176;
  unint64_t v63 = v40[2];
  unint64_t v62 = v40[3];
  if (v63 >= v62 >> 1) {
    uint64_t v40 = sub_100A6EB48((void *)(v62 > 1), v63 + 1, 1, v40);
  }
  v40[2] = v63 + 1;
  uint64_t v64 = &v40[2 * v63];
  v64[4] = v59;
  v64[5] = v61;
  swift_release();
  uint64_t v57 = v184;
LABEL_24:
  uint64_t v188 = _swiftEmptyDictionarySingleton;
  uint64_t v65 = (void *)v40[2];
  if (v65)
  {
    uint64_t v66 = type metadata accessor for MACAddress();
    uint64_t v67 = *(void *)(v66 - 8);
    uint64_t v68 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56);
    uint64_t v181 = (void (*)(void, void))(v67 + 56);
    uint64_t countAndFlagsBits = v68;
    swift_bridgeObjectRetain();
    uint64_t v161 = v40;
    uint64_t v69 = v40 + 5;
    while (1)
    {
      uint64_t v70 = *(v69 - 1);
      unint64_t v71 = *v69;
      countAndFlagsBits(&v23[*(int *)(v57 + 24)], 1, 1, v66);
      *(_WORD *)unint64_t v23 = 255;
      v23[*(int *)(v57 + 28)] = 0;
      sub_10114B64C((uint64_t)v23, v185, type metadata accessor for MultipartAccessoryPairingInfo);
      sub_1000361E0(v70, v71);
      id v72 = v188;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v186 = (uint64_t)v72;
      unint64_t v58 = sub_1007241A0(v70, v71);
      uint64_t v75 = v72[2];
      BOOL v76 = (v74 & 1) == 0;
      uint64_t v77 = v75 + v76;
      if (__OFADD__(v75, v76))
      {
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        swift_bridgeObjectRelease();
LABEL_106:
        uint64_t v133 = 0;
        unint64_t v134 = 0xF000000000000000;
        goto LABEL_107;
      }
      uint64_t v38 = (void *)v74;
      if (v72[3] >= v77)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          unint64_t v80 = (void *)v186;
          if (v74) {
            goto LABEL_26;
          }
        }
        else
        {
          sub_100E7E760();
          unint64_t v80 = (void *)v186;
          if (v38) {
            goto LABEL_26;
          }
        }
      }
      else
      {
        sub_100E65958(v77, isUniquelyReferenced_nonNull_native);
        uint64_t v78 = sub_1007241A0(v70, v71);
        if ((v38 & 1) != (v79 & 1)) {
          goto LABEL_116;
        }
        unint64_t v58 = v78;
        unint64_t v80 = (void *)v186;
        if (v38)
        {
LABEL_26:
          sub_10084EED4(v185, v80[7] + *(void *)(v183 + 72) * v58);
          goto LABEL_27;
        }
      }
      v80[(v58 >> 6) + 8] |= 1 << v58;
      id v81 = (uint64_t *)(v80[6] + 16 * v58);
      *id v81 = v70;
      v81[1] = v71;
      sub_10114B64C(v185, v80[7] + *(void *)(v183 + 72) * v58, type metadata accessor for MultipartAccessoryPairingInfo);
      uint64_t v82 = v80[2];
      BOOL v83 = __OFADD__(v82, 1);
      uint64_t v84 = v82 + 1;
      if (v83) {
        goto LABEL_104;
      }
      v80[2] = v84;
      sub_1000361E0(v70, v71);
LABEL_27:
      v69 += 2;
      uint64_t v188 = v80;
      swift_bridgeObjectRelease();
      sub_10001CFB8(v70, v71);
      uint64_t v65 = (void *)((char *)v65 - 1);
      uint64_t v57 = v184;
      if (!v65)
      {
        swift_bridgeObjectRelease();
        unint64_t v58 = (unint64_t)v176;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v85 = static Data.random(bytes:)();
  uint64_t isUniquelyReferenced_nonNull_native = v167;
  unint64_t v71 = v166;
  unint64_t v23 = v168;
  uint64_t v38 = v175;
  uint64_t v65 = v180;
  uint64_t v185 = v85;
  uint64_t countAndFlagsBits = (void (*)(char *, uint64_t, uint64_t, uint64_t))v86;
  if (v172)
  {
    uint64_t v87 = v85;
    unint64_t v88 = v86;
    uint64_t v89 = v167;
    uint64_t v186 = v85;
    uint64_t v187 = v86;
    sub_1000361E0(v85, v86);
    sub_1000362FC();
    if (DataProtocol.isNull.getter())
    {
      sub_10001CFB8(v87, v88);
    }
    else
    {
      uint64_t v90 = Data.trimmed.getter();
      uint64_t v91 = v87;
      unint64_t v93 = v92;
      sub_10001CFB8(v91, v88);
      uint64_t v94 = v188;
      if (v188[2])
      {
        sub_1000361E0(v90, v93);
        uint64_t v95 = sub_1007241A0(v90, v93);
        if (v96)
        {
          uint64_t v97 = v94[7];
          uint64_t v98 = v183;
          uint64_t v99 = v165;
          sub_10114B6F4(v97 + *(void *)(v183 + 72) * v95, v165, type metadata accessor for MultipartAccessoryPairingInfo);
          uint64_t v100 = 0;
        }
        else
        {
          uint64_t v100 = 1;
          uint64_t v99 = v165;
          uint64_t v98 = v183;
        }
        unint64_t v101 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56);
        uint64_t v102 = v98;
        uint64_t v103 = v184;
        v101(v99, v100, 1, v184);
        sub_10001CFB8(v90, v93);
        int v104 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v99, 1, v103);
        uint64_t isUniquelyReferenced_nonNull_native = v89;
        if (v104 != 1)
        {
          uint64_t v105 = v164;
          sub_10114B64C(v99, (uint64_t)v164, type metadata accessor for MultipartAccessoryPairingInfo);
          LOWORD(v105) = *v105;
          uint64_t v106 = v163;
          uint64_t v107 = v103;
          long long v108 = &v163[*(int *)(v103 + 24)];
          MACAddress.init(stringLiteral:)();
          uint64_t v109 = type metadata accessor for MACAddress();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v109 - 8) + 56))(v108, 0, 1, v109);
          *uint64_t v106 = (_WORD)v105;
          uint64_t v65 = v180;
          *((unsigned char *)v106 + *(int *)(v107 + 28)) = 0;
          uint64_t v110 = v162;
          sub_10114B6F4((uint64_t)v106, v162, type metadata accessor for MultipartAccessoryPairingInfo);
          sub_1000361E0(v90, v93);
          uint64_t v111 = v188;
          char v112 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v186 = (uint64_t)v111;
          unint64_t v23 = v168;
          sub_10016BCD8(v110, v90, v93, v112);
          uint64_t v188 = (void *)v186;
          swift_bridgeObjectRelease();
          sub_10001CFB8(v90, v93);
          sub_10001CFB8(v90, v93);
          sub_10114B75C((uint64_t)v106, type metadata accessor for MultipartAccessoryPairingInfo);
          sub_10114B75C((uint64_t)v164, type metadata accessor for MultipartAccessoryPairingInfo);
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v99 = v165;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v183 + 56))(v165, 1, 1, v184);
      }
      sub_10001CFB8(v90, v93);
      sub_10001DAB4(v99, &qword_101639628);
    }
LABEL_51:
    unint64_t v58 = (unint64_t)v176;
  }
  UUID.init()();
  *(_OWORD *)(v65 + 11) = xmmword_101366BE0;
  swift_bridgeObjectRelease();
  uint64_t v113 = sub_1002AAF08(76, 8206);
  uint64_t v114 = v65[13];
  unint64_t v115 = v65[14];
  v65[13] = v113;
  v65[14] = v116;
  sub_100037A24(v114, v115);
  uint64_t v117 = (uint64_t)v173;
  (*(void (**)(char *, void *, uint64_t))(v71 + 16))(v173, v38, isUniquelyReferenced_nonNull_native);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v117, 0, 1, isUniquelyReferenced_nonNull_native);
  uint64_t v118 = v174;
  sub_10001D608(v117, v174, &qword_101638CF0);
  uint64_t v119 = (uint64_t)v65 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
  swift_beginAccess();
  sub_10114B578(v118, v119);
  swift_endAccess();
  Swift::String v120 = String.randomString(length:)(8);
  unint64_t v121 = ((unint64_t)v120._object >> 56) & 0xF;
  uint64_t v122 = v120._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v120._object & 0x2000000000000000) != 0) {
    unint64_t v123 = ((unint64_t)v120._object >> 56) & 0xF;
  }
  else {
    unint64_t v123 = v120._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v123) {
    goto LABEL_105;
  }
  if (((uint64_t)v120._object & 0x1000000000000000) != 0)
  {
    uint64_t v126 = sub_10048CBF0(v120._countAndFlagsBits, (uint64_t)v120._object, 10);
    char v128 = v160;
    goto LABEL_85;
  }
  if (((uint64_t)v120._object & 0x2000000000000000) == 0)
  {
    if ((v120._countAndFlagsBits & 0x1000000000000000) != 0) {
      unint64_t v124 = (unsigned __int8 *)(((uint64_t)v120._object & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unint64_t v124 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v125 = v179;
    uint64_t v126 = (uint64_t)sub_10048C9FC(v124, v122, 10);
    uint64_t v179 = v125;
    char v128 = v127 & 1;
LABEL_85:
    swift_bridgeObjectRelease();
    if (v128) {
      goto LABEL_106;
    }
    uint64_t v186 = v126;
    sub_10000D64C();
    uint64_t v133 = FixedWidthInteger.data.getter();
LABEL_107:
    Swift::Int v143 = (void *)((char *)v65 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId);
    uint64_t v144 = *(void *)((char *)v65 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId);
    unint64_t v145 = *(void *)((char *)v65 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId + 8);
    *Swift::Int v143 = v133;
    v143[1] = v134;
    sub_100037A24(v144, v145);
    Swift::String v146 = String.randomString(length:)(16);
    uint64_t v147 = sub_10111173C(v146._countAndFlagsBits, (unint64_t)v146._object);
    if (v148)
    {
      uint64_t v149 = 0;
      unint64_t v150 = 0xF000000000000000;
    }
    else
    {
      uint64_t v186 = v147;
      sub_10000D64C();
      uint64_t v149 = FixedWidthInteger.data.getter();
    }
    BOOL v151 = (void *)((char *)v65 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid);
    uint64_t v152 = *(void *)((char *)v65 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid);
    unint64_t v153 = *(void *)((char *)v65 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid + 8);
    uint64_t *v151 = v149;
    v151[1] = v150;
    sub_100037A24(v152, v153);
    CurrentLocationMonitor.requestLocation()();
    uint64_t v154 = swift_allocObject();
    *(unsigned char *)(v154 + 16) = 0;
    LOBYTE(v186) = 0;
    uint64_t v155 = (uint64_t)v188;
    uint64_t v156 = __chkstk_darwin(v154);
    *(&v161 - 10) = v180;
    *(&v161 - 9) = &v186;
    uint64_t v157 = v169;
    *(&v161 - 8) = v23;
    *(&v161 - 7) = v157;
    *(&v161 - 6) = v171;
    *(&v161 - 5) = &v188;
    *(&v161 - 4) = v38;
    *(&v161 - 3) = (void *)v58;
    uint64_t v158 = v170;
    *(&v161 - 2) = (void *)v156;
    *(&v161 - 1) = v158;
    swift_bridgeObjectRetain();
    sub_100E081B8((void (*)(uint64_t))sub_10114B6B4, (uint64_t)(&v161 - 12), v155);
    sub_10001CFB8(v185, (unint64_t)countAndFlagsBits);
    sub_10001CFB8(v177, v178);

    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v45 = v180;
    (*(void (**)(void *, uint64_t))(v71 + 8))(v38, isUniquelyReferenced_nonNull_native);
    swift_release();
    swift_bridgeObjectRelease();
    return v45 != 0;
  }
  uint64_t v186 = v120._countAndFlagsBits;
  uint64_t v187 = (uint64_t)v120._object & 0xFFFFFFFFFFFFFFLL;
  if (LOBYTE(v120._countAndFlagsBits) == 43)
  {
    if (!v121) {
      goto LABEL_115;
    }
    if (v121 != 1 && (BYTE1(v120._countAndFlagsBits) - 48) <= 9u)
    {
      uint64_t v126 = (BYTE1(v120._countAndFlagsBits) - 48);
      if (v121 == 2) {
        goto LABEL_84;
      }
      if ((BYTE2(v120._countAndFlagsBits) - 48) <= 9u)
      {
        uint64_t v126 = 10 * (BYTE1(v120._countAndFlagsBits) - 48)
             + (BYTE2(v120._countAndFlagsBits) - 48);
        unint64_t v129 = v121 - 3;
        if (v129)
        {
          Swift::Int v130 = (unsigned __int8 *)&v186 + 3;
          while (1)
          {
            unsigned int v131 = *v130 - 48;
            if (v131 > 9) {
              goto LABEL_82;
            }
            uint64_t v132 = 10 * v126;
            if ((unsigned __int128)(v126 * (__int128)10) >> 64 != (10 * v126) >> 63) {
              goto LABEL_82;
            }
            uint64_t v126 = v132 + v131;
            if (__OFADD__(v132, v131)) {
              goto LABEL_82;
            }
            char v128 = 0;
            ++v130;
            if (!--v129) {
              goto LABEL_85;
            }
          }
        }
        goto LABEL_84;
      }
    }
LABEL_82:
    uint64_t v126 = 0;
    char v128 = 1;
    goto LABEL_85;
  }
  if (LOBYTE(v120._countAndFlagsBits) != 45)
  {
    if (v121 && (LOBYTE(v120._countAndFlagsBits) - 48) <= 9u)
    {
      uint64_t v126 = (LOBYTE(v120._countAndFlagsBits) - 48);
      if (v121 == 1) {
        goto LABEL_84;
      }
      if ((BYTE1(v120._countAndFlagsBits) - 48) <= 9u)
      {
        uint64_t v126 = 10 * (LOBYTE(v120._countAndFlagsBits) - 48)
             + (BYTE1(v120._countAndFlagsBits) - 48);
        unint64_t v135 = v121 - 2;
        if (v135)
        {
          Swift::Int v136 = (unsigned __int8 *)&v186 + 2;
          while (1)
          {
            unsigned int v137 = *v136 - 48;
            if (v137 > 9) {
              goto LABEL_82;
            }
            uint64_t v138 = 10 * v126;
            if ((unsigned __int128)(v126 * (__int128)10) >> 64 != (10 * v126) >> 63) {
              goto LABEL_82;
            }
            uint64_t v126 = v138 + v137;
            if (__OFADD__(v138, v137)) {
              goto LABEL_82;
            }
            char v128 = 0;
            ++v136;
            if (!--v135) {
              goto LABEL_85;
            }
          }
        }
        goto LABEL_84;
      }
    }
    goto LABEL_82;
  }
  if (v121)
  {
    if (v121 == 1 || (BYTE1(v120._countAndFlagsBits) - 48) > 9u) {
      goto LABEL_82;
    }
    if (v121 == 2)
    {
      char v128 = 0;
      uint64_t v126 = -(uint64_t)(BYTE1(v120._countAndFlagsBits) - 48);
      goto LABEL_85;
    }
    if ((BYTE2(v120._countAndFlagsBits) - 48) > 9u) {
      goto LABEL_82;
    }
    uint64_t v126 = -10 * (BYTE1(v120._countAndFlagsBits) - 48)
         - (BYTE2(v120._countAndFlagsBits) - 48);
    unint64_t v139 = v121 - 3;
    if (v139)
    {
      uint64_t v140 = (unsigned __int8 *)&v186 + 3;
      while (1)
      {
        unsigned int v141 = *v140 - 48;
        if (v141 > 9) {
          goto LABEL_82;
        }
        uint64_t v142 = 10 * v126;
        if ((unsigned __int128)(v126 * (__int128)10) >> 64 != (10 * v126) >> 63) {
          goto LABEL_82;
        }
        uint64_t v126 = v142 - v141;
        if (__OFSUB__(v142, v141)) {
          goto LABEL_82;
        }
        char v128 = 0;
        ++v140;
        if (!--v139) {
          goto LABEL_85;
        }
      }
    }
LABEL_84:
    char v128 = 0;
    goto LABEL_85;
  }
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1011485F4(uint64_t *a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v71 = a8;
  uint64_t v76 = a5;
  uint64_t v77 = (void *)a6;
  uint64_t v78 = a4;
  char v79 = a3;
  uint64_t v81 = a2;
  uint64_t v70 = type metadata accessor for PairingConfig();
  __chkstk_darwin(v70);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AccessoryProductInfo();
  uint64_t v68 = *(void *)(v15 - 8);
  uint64_t v69 = v15;
  __chkstk_darwin(v15);
  uint64_t v72 = (uint64_t)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for MACAddress();
  uint64_t v74 = *(void *)(v17 - 8);
  uint64_t v75 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v23 - 8);
  uint64_t v80 = (uint64_t)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000588C(&qword_101639618);
  __chkstk_darwin(v25);
  uint64_t v27 = (uint64_t *)((char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10114AC54(v83);
  sub_10001D608((uint64_t)v83, (uint64_t)v84, &qword_101639B80);
  if (*((void *)&v84[0] + 1) >> 60 != 15)
  {
    uint64_t v66 = v14;
    uint64_t v67 = a7;
    uint64_t v73 = v10;
    v85[2] = v84[2];
    v85[3] = v84[3];
    v85[4] = v84[4];
    v85[0] = v84[0];
    v85[1] = v84[1];
    uint64_t v28 = *(int *)(v25 + 48);
    uint64_t v29 = (uint64_t)v27 + v28;
    uint64_t v30 = (uint64_t)a1 + v28;
    uint64_t v32 = *a1;
    unint64_t v31 = a1[1];
    *uint64_t v27 = v32;
    v27[1] = v31;
    sub_10114B6F4(v30, (uint64_t)v27 + v28, type metadata accessor for MultipartAccessoryPairingInfo);
    uint64_t v33 = v81;
    uint64_t v34 = (uint64_t *)(v81 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    uint64_t v36 = *(void *)(v81 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    unint64_t v35 = *(void *)(v81 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8);
    *uint64_t v34 = v32;
    v34[1] = v31;
    sub_1000361E0(v32, v31);
    sub_100037A24(v36, v35);
    sub_10114B75C(v29, type metadata accessor for MultipartAccessoryPairingInfo);
    uint64_t v37 = v79;
    uint64_t v38 = (unsigned char *)(v33 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId);
    *uint64_t v38 = *v79;
    v38[1] = 0;
    unsigned int v39 = *v37 + 1;
    if ((v39 >> 8))
    {
      __break(1u);
    }
    else
    {
      int v40 = (*v37 + 1);
      *uint64_t v37 = v39;
      unint64_t v41 = 0xE500000000000000;
      unint64_t v42 = 0xE700000000000000;
      uint64_t v43 = 0x6E776F6E6B6E55;
      if (v40 == 2)
      {
        uint64_t v43 = 1702060355;
        unint64_t v42 = 0xE400000000000000;
      }
      if (v40 == 1) {
        uint64_t v44 = 0x7468676952;
      }
      else {
        uint64_t v44 = v43;
      }
      if (v40 != 1) {
        unint64_t v41 = v42;
      }
      char v79 = (unsigned char *)v41;
      MACAddress.init(stringLiteral:)();
      uint64_t v45 = *v67;
      swift_bridgeObjectRetain();
      uint64_t v46 = v78;
      uint64_t v47 = v73;
      sub_100BF17A8(v80, (uint64_t)v22, v85, v81, v76, (uint64_t)v77, (unint64_t)v19, v45);
      uint64_t v29 = v47;
      uint64_t v48 = (void (**)(char *, uint64_t))(v74 + 8);
      if (!v47)
      {
        uint64_t v73 = 0;
        uint64_t v77 = (void *)a9;
        uint64_t v81 = a10 + 16;
        swift_bridgeObjectRelease();
        (*v48)(v19, v75);
        sub_10114B75C((uint64_t)v22, type metadata accessor for OwnedBeaconGroup);
        unint64_t v55 = dispatch_group_create();
        uint64_t v56 = v72;
        sub_10114615C(v71, 0, v72);
        uint64_t v57 = (uint64_t)v66;
        uint64_t v58 = (uint64_t)&v66[*(int *)(v70 + 28)];
        sub_10114B6F4(v56, v58, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v68 + 56))(v58, 0, 1, v69);
        uint64_t v59 = v79;
        *(void *)uint64_t v57 = v44;
        *(void *)(v57 + 8) = v59;
        *(_OWORD *)(v57 + 16) = xmmword_101379BE0;
        *(void *)(v57 + 32) = 0xA400000000000000;
        dispatch_group_enter(v55);
        uint64_t v60 = (void *)swift_allocObject();
        uint64_t v61 = v77;
        v60[2] = v55;
        v60[3] = v61;
        v60[4] = v46;
        v60[5] = a10;
        unint64_t v62 = v55;
        id v63 = v61;
        swift_retain();
        swift_retain();
        uint64_t v64 = v80;
        sub_100AA0654(v80, (void *)v57, (uint64_t)sub_10114B80C, (uint64_t)v60);
        swift_release();
        OS_dispatch_group.wait()();
        sub_1000600F0((uint64_t)v83);

        sub_10114B75C(v57, (uint64_t (*)(void))type metadata accessor for PairingConfig);
        sub_10114B75C(v56, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
        sub_10114B75C(v64, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        swift_beginAccess();
        *(unsigned char *)(a10 + 16) = 1;
        return;
      }
      (*v48)(v19, v75);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_101637310 == -1) {
        goto LABEL_12;
      }
    }
    swift_once();
LABEL_12:
    uint64_t v49 = type metadata accessor for Logger();
    sub_100010324(v49, (uint64_t)qword_10170F068);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      BOOL v52 = (uint8_t *)swift_slowAlloc();
      v82[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v52 = 136315138;
      uint64_t v86 = v29;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v53 = String.init<A>(describing:)();
      uint64_t v86 = sub_1008FA0F0(v53, v54, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Failed to generateOwnedBeaconRecord. %s", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_1000600F0((uint64_t)v83);

      swift_errorRelease();
    }
    else
    {
      sub_1000600F0((uint64_t)v83);
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_101148DEC(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v44 = a4;
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v40 - v14;
  uint64_t v16 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t *)((char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v18, (uint64_t *)&unk_101656900);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170F068);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v45 = v19;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v45 = sub_1008FA0F0(v24, v25, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unable to save beacon record %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    sub_10114B64C((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v43 = v10;
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170F068);
    sub_10114B6F4((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v42 = a5;
    if (v29)
    {
      uint64_t v30 = swift_slowAlloc();
      unint64_t v41 = a3;
      uint64_t v31 = v30;
      uint64_t v40 = swift_slowAlloc();
      v46[0] = v40;
      *(_DWORD *)uint64_t v31 = 141558275;
      uint64_t v45 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v31 + 12) = 2081;
      type metadata accessor for UUID();
      sub_10028B80C();
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v45 = sub_1008FA0F0(v32, v33, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10114B75C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "New beacon record has been created. %{private,mask.hash}s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v41;
      swift_slowDealloc();
    }
    else
    {
      sub_10114B75C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    uint64_t v34 = (void **)(v44 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
    swift_beginAccess();
    unint64_t v35 = *v34;
    if (*v34)
    {
      uint64_t v36 = &v15[*(int *)(v43 + 20)];
      swift_beginAccess();
      char v37 = *(unsigned char *)(a6 + 16);
      uint64_t v38 = type metadata accessor for Transaction();
      __chkstk_darwin(v38);
      *((unsigned char *)&v40 - 32) = v37;
      *(&v40 - 3) = (uint64_t)v35;
      *(&v40 - 2) = (uint64_t)v36;
      *(&v40 - 1) = v42;
      id v39 = v35;
      static Transaction.named<A>(_:with:)();
    }
    sub_10114B75C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  dispatch_group_leave(a3);
}

void sub_1011493F0(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v43 = a5;
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v40 - v14;
  uint64_t v16 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t *)((char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v18, (uint64_t *)&unk_101656900);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v20 = (unsigned char *)(a4 + 16);
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170F068);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v44 = a3;
      uint64_t v45 = v19;
      v46[0] = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v26 = String.init<A>(describing:)();
      uint64_t v45 = sub_1008FA0F0(v26, v27, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unable to save beacon record %s", v24, 0xCu);
      swift_arrayDestroy();
      a3 = v44;
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_beginAccess();
    *uint64_t v20 = 0;
  }
  else
  {
    sub_10114B64C((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100010324(v28, (uint64_t)qword_10170F068);
    sub_10114B6F4((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    BOOL v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v44 = a3;
    uint64_t v41 = v10;
    uint64_t v42 = a6;
    if (v31)
    {
      uint64_t v32 = swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 141558275;
      uint64_t v45 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 12) = 2081;
      type metadata accessor for UUID();
      sub_10028B80C();
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v45 = sub_1008FA0F0(v33, v34, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10114B75C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "New beacon record has been created. %{private,mask.hash}s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10114B75C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    unint64_t v35 = (void **)(v43 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
    swift_beginAccess();
    uint64_t v36 = *v35;
    if (*v35)
    {
      char v37 = &v15[*(int *)(v41 + 20)];
      uint64_t v38 = type metadata accessor for Transaction();
      __chkstk_darwin(v38);
      *((unsigned char *)&v40 - 32) = 0;
      *(&v40 - 3) = (uint64_t)v36;
      *(&v40 - 2) = (uint64_t)v37;
      *(&v40 - 1) = v42;
      id v39 = v36;
      static Transaction.named<A>(_:with:)();
    }
    sub_10114B75C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    a3 = v44;
  }
  dispatch_group_leave(a3);
}

uint64_t sub_1011499E4(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v32 = a5;
  uint64_t v31 = a1;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v29[1] = v10;
  os_log_type_t v30 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (int *)type metadata accessor for BeaconEstimatedLocation();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  [a3 coordinate];
  double v15 = v14;
  if (a2)
  {
    double v15 = v14 + 0.1;
    [a3 coordinate];
    double v17 = v16 + 0.1;
  }
  else
  {
    [a3 coordinate];
    double v17 = v18;
  }
  UUID.init()();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v19(&v13[v11[6]], a4, v8);
  [a3 horizontalAccuracy];
  uint64_t v21 = v20;
  id v22 = [a3 timestamp];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  os_log_type_t v23 = &v13[v11[12]];
  uint64_t v24 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  *(_OWORD *)uint64_t v13 = xmmword_101348180;
  *(double *)&v13[v11[7]] = v15;
  *(double *)&v13[v11[8]] = v17;
  *(void *)&v13[v11[9]] = v21;
  v13[v11[11]] = 1;
  *(void *)&v13[v11[13]] = 0;
  uint64_t v25 = v30;
  v19(v30, a4, v8);
  unint64_t v26 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v31;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v27 + v26, v25, v8);
  swift_retain();
  sub_100AB6E00((uint64_t)v13, (uint64_t)sub_10114A280, v27);
  swift_release();
  return sub_10114B75C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
}

void sub_101149D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_1016428D8);
  __chkstk_darwin(v9);
  uint64_t v11 = (void *)((char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v11, &qword_1016428D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = *v11;
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170F068);
    swift_errorRetain();
    swift_errorRetain();
    double v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      double v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v28 = v12;
      uint64_t v29 = v17;
      *(_DWORD *)double v16 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v18 = String.init<A>(describing:)();
      uint64_t v28 = sub_1008FA0F0(v18, v19, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving BeaconEstimatedLocation from CL error: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170F068);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a3, v5);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v27[1] = v24;
      *(_DWORD *)uint64_t v23 = 141558275;
      uint64_t v28 = 1752392040;
      uint64_t v29 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2081;
      uint64_t v25 = UUID.uuidString.getter();
      uint64_t v28 = sub_1008FA0F0(v25, v26, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Saved BeaconEstimatedLocation from CL for beacon %{private,mask.hash}s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }

    sub_10001DAB4((uint64_t)v11, &qword_1016428D8);
  }
}

uint64_t sub_10114A1B4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_10114A280(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_101149D08(a1, v4, v5);
}

uint64_t sub_10114A2F4(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v10 = *a1;
      uint64_t v11 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      sub_10114A68C((int *)&v10);
      uint64_t result = swift_release();
      uint64_t v4 = v10;
      unint64_t v5 = v11 | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      uint64_t v10 = *a1;
      uint64_t v11 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v6 = v11;
      uint64_t v8 = v10;
      uint64_t v7 = *(void *)(v10 + 16);
      if (!__DataStorage._bytes.getter())
      {
        swift_release();
        __break(1u);
        JUMPOUT(0x10114A67CLL);
      }
      if (__OFSUB__(v7, __DataStorage._offset.getter())) {
        __break(1u);
      }
      __DataStorage._length.getter();
      type metadata accessor for __DataStorage();
      swift_allocObject();
      *(void *)&long long v9 = 0x2000000000;
      *((void *)&v9 + 1) = __DataStorage.init(length:)();
      swift_retain();
      sub_10114A798((int *)&v9);
      swift_release_n();
      uint64_t result = swift_release();
      *a1 = v8;
      a1[1] = v6 | 0x8000000000000000;
      break;
    case 3uLL:
      type metadata accessor for __DataStorage();
      *(void *)&long long v9 = 0;
      *(void *)((char *)&v9 + 7) = 0;
      swift_allocObject();
      swift_retain();
      uint64_t v10 = 0x2000000000;
      uint64_t v11 = __DataStorage.init(length:)();
      swift_retain();
      sub_10114A798((int *)&v10);
      swift_release_n();
      uint64_t result = swift_release();
      break;
    default:
      *(void *)&long long v9 = *a1;
      WORD4(v9) = v1;
      BYTE10(v9) = BYTE2(v1);
      BYTE11(v9) = BYTE3(v1);
      BYTE12(v9) = BYTE4(v1);
      BYTE13(v9) = BYTE5(v1);
      BYTE14(v9) = BYTE6(v1);
      type metadata accessor for __DataStorage();
      swift_allocObject();
      swift_retain();
      uint64_t v10 = 0x2000000000;
      uint64_t v11 = __DataStorage.init(length:)();
      swift_retain();
      sub_10114A798((int *)&v10);
      swift_release_n();
      uint64_t result = swift_release();
      uint64_t v4 = v9;
      unint64_t v5 = DWORD2(v9) | ((unint64_t)BYTE12(v9) << 32) | ((unint64_t)BYTE13(v9) << 40) | ((unint64_t)BYTE14(v9) << 48);
LABEL_4:
      *a1 = v4;
      a1[1] = v5;
      break;
  }
  return result;
}

void sub_10114A68C(int *a1)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v2 = *a1;
  if (a1[1] < (int)v2)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (__DataStorage._bytes.getter())
  {
    if (!__OFSUB__(v2, __DataStorage._offset.getter()))
    {
      __DataStorage._length.getter();
      type metadata accessor for __DataStorage();
      swift_allocObject();
      v3[0] = 0x2000000000;
      v3[1] = __DataStorage.init(length:)();
      swift_retain();
      sub_10114A798((int *)v3);
      swift_release();
      swift_release();
      return;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
}

void sub_10114A798(int *a1)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v2 = *a1;
  if (a1[1] < (int)v2)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = __DataStorage._bytes.getter();
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = __DataStorage._offset.getter();
    uint64_t v6 = v2 - v5;
    if (!__OFSUB__(v2, v5))
    {
      __DataStorage._length.getter();
      sub_100A922EC(v4 + v6);
      swift_release();
      return;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_10114A880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v7 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v7 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_100A9219C(v7, a3);
    return swift_release();
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10114A934(uint64_t a1, uint64_t a2, unint64_t a3)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2) {
        __break(1u);
      }
      swift_retain_n();
      sub_1000361E0(a2, a3);
      sub_10114A880((int)a2, a2 >> 32, v11);
      goto LABEL_5;
    case 2uLL:
      uint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = *(void *)(a2 + 24);
      swift_retain_n();
      sub_1000361E0(a2, a3);
      swift_retain();
      swift_retain();
      sub_10114A880(v5, v6, v11);
      swift_release();
      swift_release();
LABEL_5:
      sub_10001CFB8(a2, a3);
      swift_release_n();
      break;
    default:
      swift_retain_n();
      CCCKGGetShareSize();
      int v7 = CCCKGGetOpeningSize();
      *(void *)&long long v10 = sub_10085E9A4(v7);
      *((void *)&v10 + 1) = v8;
      swift_retain();
      sub_10114A2F4((uint64_t *)&v10);
      sub_10001CFB8(a2, a3);
      swift_release_n();
      *(_OWORD *)uint64_t v11 = v10;
      break;
  }
  sub_1004352BC(v11[0], v11[1], v11);
  return v11[0];
}

void sub_10114AC54(long long *a1@<X8>)
{
  uint64_t v2 = sub_100A91B84();
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_1000361E0(v2, v3);
  sub_100434DF4(v2, v4, (uint64_t *)&v43);
  long long v7 = v43;
  *((void *)&v49 + 1) = type metadata accessor for CollaborativeKeyGen.v1.ContributorContext();
  unint64_t v50 = &off_1015E6CD0;
  sub_10001CFB8(v2, v4);
  *(void *)&long long v48 = v6;
  long long v43 = v7;
  sub_10001D608((uint64_t)&v48, (uint64_t)v44, &qword_101639A48);
  sub_10000588C(&qword_10166CCE0);
  sub_10000588C(&qword_10166CCE8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170F068);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      double v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to fake C1 from accessory.", v14, 2u);
      swift_slowDealloc();
    }
    goto LABEL_7;
  }
  uint64_t v9 = v45;
  unint64_t v8 = v46;
  uint64_t v10 = v47;
  sub_1000361E0(v45, v46);
  uint64_t v15 = sub_100A8AEE4(v9, v8);
  unint64_t v17 = v16;
  uint64_t v19 = v18;
  sub_10001CFB8(v9, v8);
  sub_1000361E0(v15, v17);
  sub_100435190(v15, v17, (uint64_t *)&v43);
  long long v42 = v43;
  uint64_t v25 = sub_10114A934(v10, v43, *((unint64_t *)&v43 + 1));
  if (v26 >> 60 == 15)
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100010324(v27, (uint64_t)qword_10170F068);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v28, "Unable to fake C3 from accessory.", v29, 2u);
      swift_slowDealloc();
      swift_release();
      sub_10001CFB8(v42, *((unint64_t *)&v42 + 1));
      swift_release();
      sub_10001CFB8(v9, v8);

      sub_10001CFB8(v15, v17);
      goto LABEL_8;
    }
    sub_10001CFB8(v15, v17);
    swift_release();
    sub_10001CFB8(v42, *((unint64_t *)&v42 + 1));
    swift_release();
    sub_10001CFB8(v9, v8);
LABEL_7:

LABEL_8:
    long long v20 = xmmword_101347BB0;
    long long v21 = 0uLL;
    long long v22 = 0uLL;
    long long v23 = 0uLL;
    long long v24 = 0uLL;
    goto LABEL_9;
  }
  unint64_t v30 = v26;
  unint64_t v31 = v26 >> 62;
  uint64_t v41 = v25;
  sub_1000361E0(v25, v26);
  uint64_t v32 = CCCKGGetOpeningSize();
  switch(v31)
  {
    case 1uLL:
      unsigned int v39 = v32;
      uint64_t v33 = v41;
      if (v41 >> 32 < (int)v41) {
        __break(1u);
      }
      swift_retain_n();
      sub_100037A38(v41, v30);
      swift_retain();
      sub_100394158((int)v41, v41 >> 32, v19, v39, (uint64_t)&v43);
      sub_100037A24(v41, v30);
      goto LABEL_22;
    case 2uLL:
      uint64_t v37 = *(void *)(v41 + 16);
      uint64_t v36 = *(void *)(v41 + 24);
      unsigned int v40 = v32;
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_100394158(v37, v36, v19, v40, (uint64_t)&v43);
      swift_release();
      swift_release();
      uint64_t v33 = v41;
      swift_release();
      uint64_t v35 = v41;
      goto LABEL_24;
    case 3uLL:
      *(void *)((char *)&v48 + 6) = 0;
      *(void *)&long long v48 = 0;
      uint64_t v34 = v32;
      swift_retain_n();
      sub_100A915E8((uint64_t)&v48, v19, v34, (uint64_t)&v43);
      swift_release();
      uint64_t v33 = v41;
      goto LABEL_23;
    default:
      uint64_t v33 = v41;
      *(void *)&long long v48 = v41;
      WORD4(v48) = v30;
      BYTE10(v48) = BYTE2(v30);
      BYTE11(v48) = BYTE3(v30);
      BYTE12(v48) = BYTE4(v30);
      BYTE13(v48) = BYTE5(v30);
      unsigned int v38 = v32;
      swift_retain_n();
      sub_100A915E8((uint64_t)&v48, v19, v38, (uint64_t)&v43);
LABEL_22:
      swift_release();
LABEL_23:
      uint64_t v35 = v33;
LABEL_24:
      sub_100037A24(v35, v30);
      sub_10001CFB8(v42, *((unint64_t *)&v42 + 1));
      swift_release_n();
      swift_release();
      sub_10001CFB8(v9, v8);
      sub_10001CFB8(v15, v17);
      sub_100037A24(v33, v30);
      long long v20 = v43;
      long long v21 = v44[0];
      long long v22 = v44[1];
      long long v23 = v44[2];
      long long v24 = v44[3];
      break;
  }
LABEL_9:
  *a1 = v20;
  a1[1] = v21;
  a1[2] = v22;
  a1[3] = v23;
  a1[4] = v24;
}

uint64_t sub_10114B578(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10114B5E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10114B5F0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10114B640(uint64_t a1, uint64_t a2)
{
  sub_1011493F0(a1, a2, *(NSObject **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_10114B64C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_10114B6B4(uint64_t *a1)
{
  sub_1011485F4(a1, *(void *)(v1 + 16), *(unsigned char **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(uint64_t **)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80));
}

uint64_t sub_10114B6F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10114B75C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10114B7BC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10114B80C(uint64_t a1, uint64_t a2)
{
  sub_101148DEC(a1, a2, *(NSObject **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_10114B818(uint64_t a1)
{
  return sub_1000625E0(a1);
}

unint64_t sub_10114B830(char a1)
{
  unint64_t result = 1684628325;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x644970696863;
      break;
    case 2:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 3:
      unint64_t result = 0x64616F6C796170;
      break;
    case 4:
      unint64_t result = 0x734D6E654779656BLL;
      break;
    case 5:
      unint64_t result = 0x7372655663657073;
      break;
    case 6:
      unint64_t result = 0x657261776D726966;
      break;
    case 7:
      unint64_t result = 0x44746375646F7270;
      break;
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10114B978(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10166CD08);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10114DC1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + 48);
    char v11 = 3;
    sub_100037BB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + 64);
    char v11 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10114BC20()
{
  return sub_10114B830(*v0);
}

uint64_t sub_10114BC28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10114DE7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10114BC50(uint64_t a1)
{
  unint64_t v2 = sub_10114DC1C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10114BC8C(uint64_t a1)
{
  unint64_t v2 = sub_10114DC1C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10114BCC8(void *a1)
{
  return sub_10114B978(a1);
}

uint64_t sub_10114BD1C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[7];
  uint64_t v21 = a1[6];
  uint64_t v22 = a1[4];
  uint64_t v8 = a1[9];
  uint64_t v20 = a1[8];
  uint64_t v9 = a1[2];
  unint64_t v10 = a1[3];
  uint64_t v11 = *a1;
  unint64_t v26 = a1[1];
  uint64_t v12 = a1[15];
  uint64_t v23 = a1[14];
  sub_10114D7AC((uint64_t)(a1 + 16), (uint64_t)v27);
  sub_10114D7AC((uint64_t)v27, (uint64_t)&v28);
  uint64_t v19 = v6;
  if (*((void *)&v28 + 1) >> 60 == 15)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v9, v10);
    uint64_t v13 = v11;
    sub_1000361E0(v11, v26);
    uint64_t v14 = v12;
    swift_bridgeObjectRetain();
    uint64_t result = (uint64_t)sub_10114D61C(a1);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v9, v10);
    uint64_t v13 = v11;
    sub_1000361E0(v11, v26);
    uint64_t v14 = v12;
    swift_bridgeObjectRetain();
    sub_100091B38((uint64_t)v27);
    sub_1001A95DC();
    uint64_t v16 = RawRepresentable<>.hexString.getter();
    uint64_t v17 = v18;
    sub_10114D61C(a1);
    uint64_t result = sub_1003DD160((uint64_t)v27);
  }
  *a4 = v22;
  a4[1] = v19;
  a4[2] = v21;
  a4[3] = v7;
  a4[4] = v20;
  a4[5] = v8;
  a4[6] = v9;
  a4[7] = v10;
  a4[8] = v13;
  a4[9] = v26;
  a4[10] = 0x302E302E31;
  a4[11] = 0xE500000000000000;
  a4[12] = v23;
  a4[13] = v14;
  a4[14] = v16;
  a4[15] = v17;
  a4[16] = a2;
  a4[17] = a3;
  return result;
}

uint64_t sub_10114BEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[82] = a4;
  v4[81] = a3;
  v4[80] = a2;
  v4[79] = a1;
  uint64_t v5 = type metadata accessor for HashAlgorithm();
  v4[83] = v5;
  v4[84] = *(void *)(v5 - 8);
  v4[85] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Locale();
  v4[86] = v6;
  v4[87] = *(void *)(v6 - 8);
  v4[88] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v4[89] = v7;
  v4[90] = *(void *)(v7 - 8);
  v4[91] = swift_task_alloc();
  return _swift_task_switch(sub_10114C068, 0, 0);
}

void sub_10114C068()
{
  unint64_t v1 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v3 = [self currentDevice];
  if (!v3)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = v3;
  id v5 = [v3 serverFriendlyDescription];

  if (!v5)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v6 = *(void *)(v0 + 728);
  uint64_t v7 = *(void *)(v0 + 720);
  uint64_t v8 = *(void *)(v0 + 712);
  uint64_t v9 = *(void *)(v0 + 704);
  uint64_t v51 = *(void *)(v0 + 696);
  uint64_t v52 = *(void *)(v0 + 688);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  char v13 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v10, v12, 0xD000000000000011, 0x80000001013F64E0, v13);
  unint64_t v14 = v1;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v15 = Date.epoch.getter();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  *(void *)(v0 + 624) = v15;
  uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v18 = v17;
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v16, v18, 0xD000000000000015, 0x80000001013F6500, v19);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 608) = 1;
  uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v22 = v21;
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v20, v22, 0xD000000000000013, 0x80000001013F6520, v23);
  unint64_t v24 = v14;
  uint64_t v25 = swift_bridgeObjectRelease();
  uint64_t v26 = sub_100BCABFC(v25);
  uint64_t v28 = v27;
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v26, v28, 0x6567412D72657355, 0xEA0000000000746ELL, v29);
  swift_bridgeObjectRelease();
  static Locale.current.getter();
  uint64_t v30 = Locale.acceptLanguageCode.getter();
  uint64_t v32 = v31;
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v9, v52);
  char v33 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v30, v32, 0x4C2D747065636341, 0xEF65676175676E61, v33);
  unint64_t v34 = v24;
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v35 = (void *)qword_10170EE68;
  id v36 = [self sharedInstance];
  unsigned int v37 = [v36 isInternalBuild];

  if (v37)
  {
    NSString v38 = String._bridgeToObjectiveC()();
    unsigned int v39 = [v35 BOOLForKey:v38];

    if (v39)
    {
      char v40 = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x80000001013F6560, v40);
      swift_bridgeObjectRelease();
    }
  }
  *(void *)(v0 + 736) = v34;
  uint64_t v41 = *(void *)(v0 + 648);
  uint64_t v42 = *(void *)(v0 + 640);
  long long v43 = *(uint64_t **)(v0 + 632);
  sub_1003C643C(v43);
  sub_10114BD1C(v43, v42, v41, (uint64_t *)(v0 + 16));
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  *(void *)(v0 + 744) = JSONEncoder.init()();
  long long v44 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 560) = v44;
  *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 144);
  long long v45 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 496) = v45;
  long long v46 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 528) = v46;
  long long v47 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 464) = v47;
  sub_10114D508();
  uint64_t v48 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *(void *)(v0 + 752) = v48;
  *(void *)(v0 + 760) = v49;
  sub_1000361E0(v48, v49);
  uint64_t v53 = (void (__cdecl *)())((char *)&dword_10165AC20 + dword_10165AC20);
  unint64_t v50 = (void *)swift_task_alloc();
  *(void *)(v0 + 768) = v50;
  *unint64_t v50 = v0;
  v50[1] = sub_10114C758;
  v53();
}

uint64_t sub_10114C758(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 776) = a1;
  *(void *)(v3 + 784) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_10114C85C, 0, 0);
}

uint64_t sub_10114C85C()
{
  unint64_t v1 = v0[98];
  uint64_t v2 = v0[97];
  unint64_t v3 = v0[95];
  uint64_t v4 = v0[94];
  uint64_t v5 = v0[85];
  uint64_t v6 = v0[84];
  uint64_t v7 = v0[83];
  v0[74] = v2;
  v0[75] = v1;
  sub_1000361E0(v4, v3);
  sub_1000361E0(v2, v1);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  v0[99] = v0[74];
  v0[100] = v0[75];
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v8 = Data.hash(algorithm:)();
  uint64_t v10 = v9;
  v0[101] = v8;
  v0[102] = v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  unint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165AC18 + dword_10165AC18);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[103] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10114C9F8;
  uint64_t v12 = v0[82];
  return v14(v8, v10, v12);
}

uint64_t sub_10114C9F8(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 832) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10114CFE4;
  }
  else
  {
    unint64_t v6 = v4[102];
    uint64_t v7 = v4[101];
    v4[105] = a1;
    sub_10001CFB8(v7, v6);
    uint64_t v5 = sub_10114CB28;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10114CB28()
{
  long long v46 = v0;
  uint64_t v1 = v0[105];
  uint64_t v2 = v0[104];
  unint64_t v3 = (unsigned char *)v0[92];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  long long v45 = v3;
  sub_1001EE9C8(v1, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, &v45);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  unint64_t v6 = v0[100];
  NSString v38 = v0;
  uint64_t v7 = v0[99];
  uint64_t v8 = v45;
  swift_bridgeObjectRelease();
  sub_10001CFB8(v7, v6);
  static os_log_type_t.debug.getter();
  if (qword_101637308 != -1) {
LABEL_31:
  }
    swift_once();
  os_log(_:dso:log:_:_:)();
  unsigned int v39 = v8 + 64;
  uint64_t v9 = -1;
  uint64_t v10 = -1 << v8[32];
  if (-v10 < 64) {
    uint64_t v9 = ~(-1 << -(char)v10);
  }
  unint64_t v11 = v9 & *((void *)v8 + 8);
  int64_t v41 = (unint64_t)(63 - v10) >> 6;
  long long v44 = v8;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v8 = &type metadata for String;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_10;
    }
    int64_t v24 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (v24 >= v41) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)&v39[8 * v24];
    ++v12;
    if (!v25)
    {
      int64_t v12 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)&v39[8 * v12];
      if (!v25)
      {
        int64_t v12 = v24 + 2;
        if (v24 + 2 >= v41) {
          goto LABEL_26;
        }
        unint64_t v25 = *(void *)&v39[8 * v12];
        if (!v25) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v14 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_10:
    uint64_t v15 = 16 * v14;
    uint64_t v16 = (uint64_t *)(*((void *)v44 + 6) + v15);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    char v19 = (uint64_t *)(*((void *)v44 + 7) + v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static os_log_type_t.debug.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_101347BA0;
    *(void *)(v22 + 56) = &type metadata for String;
    unint64_t v23 = sub_10000B4CC();
    *(void *)(v22 + 32) = v17;
    *(void *)(v22 + 40) = v18;
    *(void *)(v22 + 96) = &type metadata for String;
    *(void *)(v22 + 104) = v23;
    *(void *)(v22 + 64) = v23;
    *(void *)(v22 + 72) = v20;
    *(void *)(v22 + 80) = v21;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  int64_t v26 = v24 + 3;
  if (v26 < v41)
  {
    unint64_t v25 = *(void *)&v39[8 * v26];
    if (!v25)
    {
      while (1)
      {
        int64_t v12 = v26 + 1;
        if (__OFADD__(v26, 1)) {
          goto LABEL_30;
        }
        if (v12 >= v41) {
          goto LABEL_26;
        }
        unint64_t v25 = *(void *)&v39[8 * v12];
        ++v26;
        if (v25) {
          goto LABEL_25;
        }
      }
    }
    int64_t v12 = v26;
    goto LABEL_25;
  }
LABEL_26:
  uint64_t v42 = v38[94];
  unint64_t v43 = v38[95];
  char v40 = (uint64_t *)v38[79];
  swift_release();
  static os_log_type_t.debug.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_101342130;
  long long v28 = *((_OWORD *)v38 + 8);
  *((_OWORD *)v38 + 16) = *((_OWORD *)v38 + 7);
  *((_OWORD *)v38 + 17) = v28;
  *((_OWORD *)v38 + 18) = *((_OWORD *)v38 + 9);
  long long v29 = *((_OWORD *)v38 + 4);
  *((_OWORD *)v38 + 12) = *((_OWORD *)v38 + 3);
  *((_OWORD *)v38 + 13) = v29;
  long long v30 = *((_OWORD *)v38 + 6);
  *((_OWORD *)v38 + 14) = *((_OWORD *)v38 + 5);
  *((_OWORD *)v38 + 15) = v30;
  long long v31 = *((_OWORD *)v38 + 2);
  *((_OWORD *)v38 + 10) = *((_OWORD *)v38 + 1);
  *((_OWORD *)v38 + 11) = v31;
  sub_10114D55C(v38 + 2);
  uint64_t v32 = String.init<A>(describing:)();
  uint64_t v34 = v33;
  *(void *)(v27 + 56) = &type metadata for String;
  *(void *)(v27 + 64) = sub_10000B4CC();
  *(void *)(v27 + 32) = v32;
  *(void *)(v27 + 40) = v34;
  os_log(_:dso:log:_:_:)();
  swift_release();
  sub_10114D61C(v40);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v42, v43);
  swift_release();
  sub_10114D6EC(v38 + 2);
  uint64_t v35 = v38[95];
  uint64_t v36 = v38[94];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned int v37 = (uint64_t (*)(unsigned char *, uint64_t, uint64_t))v38[1];
  return v37(v44, v36, v35);
}

uint64_t sub_10114CFE4()
{
  unint64_t v1 = *(void *)(v0 + 800);
  uint64_t v2 = *(void *)(v0 + 792);
  sub_10001CFB8(*(void *)(v0 + 808), *(void *)(v0 + 816));
  sub_10001CFB8(v2, v1);
  static os_log_type_t.error.getter();
  unint64_t v3 = &qword_101637000;
  if (qword_101637308 != -1) {
LABEL_29:
  }
    swift_once();
  uint64_t v4 = *(void *)(v0 + 832);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  *(void *)(v0 + 616) = v4;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v6 = String.init<A>(describing:)();
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v9 = sub_10000B4CC();
  *(void *)(v5 + 64) = v9;
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  uint64_t v40 = v0;
  uint64_t v10 = *(void *)(v0 + 736);
  static os_log_type_t.debug.getter();
  if (v3[97] != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v41 = v10 + 64;
  uint64_t v11 = -1;
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  if (-v12 < 64) {
    uint64_t v11 = ~(-1 << -(char)v12);
  }
  unint64_t v13 = v11 & *(void *)(v10 + 64);
  int64_t v43 = (unint64_t)(63 - v12) >> 6;
  uint64_t v45 = v10;
  swift_bridgeObjectRetain();
  uint64_t v0 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v0 << 6);
      uint64_t v16 = v45;
      goto LABEL_8;
    }
    int64_t v25 = v0 + 1;
    if (__OFADD__(v0, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v25 >= v43) {
      goto LABEL_24;
    }
    unint64_t v26 = *(void *)(v41 + 8 * v25);
    ++v0;
    if (!v26)
    {
      uint64_t v0 = v25 + 1;
      if (v25 + 1 >= v43) {
        goto LABEL_24;
      }
      unint64_t v26 = *(void *)(v41 + 8 * v0);
      if (!v26)
      {
        uint64_t v0 = v25 + 2;
        if (v25 + 2 >= v43) {
          goto LABEL_24;
        }
        unint64_t v26 = *(void *)(v41 + 8 * v0);
        if (!v26) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v0 << 6);
    uint64_t v16 = v45;
LABEL_8:
    uint64_t v17 = 16 * v15;
    uint64_t v18 = (uint64_t *)(*(void *)(v16 + 48) + v17);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = (uint64_t *)(*(void *)(v16 + 56) + v17);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v3 = (uint64_t *)static os_log_type_t.debug.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_101347BA0;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = v9;
    *(void *)(v24 + 32) = v19;
    *(void *)(v24 + 40) = v20;
    *(void *)(v24 + 96) = &type metadata for String;
    *(void *)(v24 + 104) = v9;
    *(void *)(v24 + 72) = v22;
    *(void *)(v24 + 80) = v23;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  int64_t v27 = v25 + 3;
  if (v27 < v43)
  {
    unint64_t v26 = *(void *)(v41 + 8 * v27);
    if (!v26)
    {
      while (1)
      {
        uint64_t v0 = v27 + 1;
        if (__OFADD__(v27, 1)) {
          goto LABEL_28;
        }
        if (v0 >= v43) {
          goto LABEL_24;
        }
        unint64_t v26 = *(void *)(v41 + 8 * v0);
        ++v27;
        if (v26) {
          goto LABEL_23;
        }
      }
    }
    uint64_t v0 = v27;
    goto LABEL_23;
  }
LABEL_24:
  uint64_t v42 = *(void *)(v40 + 752);
  unint64_t v44 = *(void *)(v40 + 760);
  unsigned int v39 = *(uint64_t **)(v40 + 632);
  swift_release();
  static os_log_type_t.debug.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_101342130;
  long long v29 = *(_OWORD *)(v40 + 128);
  *(_OWORD *)(v40 + 256) = *(_OWORD *)(v40 + 112);
  *(_OWORD *)(v40 + 272) = v29;
  *(_OWORD *)(v40 + 288) = *(_OWORD *)(v40 + 144);
  long long v30 = *(_OWORD *)(v40 + 64);
  *(_OWORD *)(v40 + 192) = *(_OWORD *)(v40 + 48);
  *(_OWORD *)(v40 + 208) = v30;
  long long v31 = *(_OWORD *)(v40 + 96);
  *(_OWORD *)(v40 + 224) = *(_OWORD *)(v40 + 80);
  *(_OWORD *)(v40 + 240) = v31;
  long long v32 = *(_OWORD *)(v40 + 32);
  *(_OWORD *)(v40 + 160) = *(_OWORD *)(v40 + 16);
  *(_OWORD *)(v40 + 176) = v32;
  sub_10114D55C((void *)(v40 + 16));
  uint64_t v33 = String.init<A>(describing:)();
  *(void *)(v28 + 56) = &type metadata for String;
  *(void *)(v28 + 64) = v9;
  *(void *)(v28 + 32) = v33;
  *(void *)(v28 + 40) = v34;
  os_log(_:dso:log:_:_:)();
  swift_release();
  sub_10114D61C(v39);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v42, v44);
  swift_release();
  sub_10114D6EC((void *)(v40 + 16));
  uint64_t v35 = *(void *)(v40 + 760);
  uint64_t v36 = *(void *)(v40 + 752);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned int v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 8);
  return v37(v45, v36, v35);
}

unint64_t sub_10114D508()
{
  unint64_t result = qword_10166CCF8;
  if (!qword_10166CCF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CCF8);
  }
  return result;
}

void *sub_10114D55C(void *a1)
{
  uint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  unint64_t v5 = a1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_10114D61C(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[10];
  unint64_t v5 = a1[11];
  uint64_t v6 = a1[12];
  unint64_t v7 = a1[13];
  uint64_t v10 = a1[16];
  unint64_t v9 = a1[17];
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v4, v5);
  sub_10001CFB8(v6, v7);
  swift_bridgeObjectRelease();
  sub_100037A24(v10, v9);
  return a1;
}

void *sub_10114D6EC(void *a1)
{
  uint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  unint64_t v5 = a1[9];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v3);
  sub_10001CFB8(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10114D7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10166CD00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for AccessoryPairingLockCheckRequestContent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(a1 + 48), *(void *)(a1 + 56));
  sub_10001CFB8(*(void *)(a1 + 64), *(void *)(a1 + 72));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AccessoryPairingLockCheckRequestContent(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v7 = a2[6];
  unint64_t v8 = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v7, v8);
  a1[6] = v7;
  a1[7] = v8;
  uint64_t v9 = a2[8];
  unint64_t v10 = a2[9];
  sub_1000361E0(v9, v10);
  a1[8] = v9;
  a1[9] = v10;
  uint64_t v11 = a2[11];
  a1[10] = a2[10];
  a1[11] = v11;
  uint64_t v12 = a2[13];
  a1[12] = a2[12];
  a1[13] = v12;
  uint64_t v13 = a2[15];
  a1[14] = a2[14];
  a1[15] = v13;
  uint64_t v14 = a2[16];
  uint64_t v15 = a2[17];
  a1[16] = v14;
  a1[17] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AccessoryPairingLockCheckRequestContent(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[6];
  unint64_t v5 = a2[7];
  sub_1000361E0(v4, v5);
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  a1[6] = v4;
  a1[7] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[8];
  unint64_t v9 = a2[9];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[8];
  unint64_t v11 = a1[9];
  a1[8] = v8;
  a1[9] = v9;
  sub_10001CFB8(v10, v11);
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for AccessoryPairingLockCheckRequestContent(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a1[6];
  unint64_t v8 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10001CFB8(v7, v8);
  uint64_t v9 = a1[8];
  unint64_t v10 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_10001CFB8(v9, v10);
  uint64_t v11 = *(void *)(a2 + 88);
  a1[10] = *(void *)(a2 + 80);
  a1[11] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 104);
  a1[12] = *(void *)(a2 + 96);
  a1[13] = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 120);
  a1[14] = *(void *)(a2 + 112);
  a1[15] = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 136);
  a1[16] = *(void *)(a2 + 128);
  a1[17] = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryPairingLockCheckRequestContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingLockCheckRequestContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingLockCheckRequestContent()
{
  return &type metadata for AccessoryPairingLockCheckRequestContent;
}

ValueMetadata *type metadata accessor for AccessoryPairingLockCheckRequest()
{
  return &type metadata for AccessoryPairingLockCheckRequest;
}

unint64_t sub_10114DC1C()
{
  unint64_t result = qword_10166CD10;
  if (!qword_10166CD10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CD10);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessoryPairingLockCheckRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10114DD3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingLockCheckRequestContent.CodingKeys()
{
  return &type metadata for AccessoryPairingLockCheckRequestContent.CodingKeys;
}

unint64_t sub_10114DD78()
{
  unint64_t result = qword_10166CD18;
  if (!qword_10166CD18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CD18);
  }
  return result;
}

unint64_t sub_10114DDD0()
{
  unint64_t result = qword_10166CD20;
  if (!qword_10166CD20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CD20);
  }
  return result;
}

unint64_t sub_10114DE28()
{
  unint64_t result = qword_10166CD28;
  if (!qword_10166CD28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CD28);
  }
  return result;
}

uint64_t sub_10114DE7C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684628325 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x644970696863 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64616F6C796170 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x734D6E654779656BLL && a2 == 0xED00006873614867 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x44746375646F7270 && a2 == 0xEB00000000617461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000101408C40)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

id sub_10114E2D0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BeaconKeyBackendServiceTrampoline();
  return [super dealloc];
}

uint64_t type metadata accessor for BeaconKeyBackendServiceTrampoline()
{
  return self;
}

uint64_t sub_10114E338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a3;
  v6[6] = a4;
  void v6[3] = a1;
  v6[4] = a2;
  return _swift_task_switch(sub_10114E360, 0, 0);
}

uint64_t sub_10114E360()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_10000588C(&qword_10166C680);
  sub_10114FB10();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v1 = v0[5];
  swift_release();
  uint64_t v2 = v0[2];
  v0[9] = v2;
  int v3 = (void *)(v1 + OBJC_IVAR____TtC12searchpartyd33BeaconKeyBackendServiceTrampoline_implementation);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd33BeaconKeyBackendServiceTrampoline_implementation + 24);
  uint64_t v5 = v3[4];
  sub_10001CD44(v3, v4);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 8) + **(int **)(v5 + 8));
  char v6 = (void *)swift_task_alloc();
  v0[10] = v6;
  *char v6 = v0;
  v6[1] = sub_10114E55C;
  uint64_t v7 = v0[6];
  return v9(v7, v2, v4, v5);
}

uint64_t sub_10114E55C()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10114E6E0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10114E678;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10114E678()
{
  (*(void (**)(void))(v0 + 56))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10114E6E0()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0[11];
  uint64_t v2 = (void (*)(uint64_t))v0[7];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10114E9DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return _swift_task_switch(sub_10114EA00, 0, 0);
}

uint64_t sub_10114EA00()
{
  uint64_t v1 = (void *)(*(void *)(v0 + 24) + OBJC_IVAR____TtC12searchpartyd33BeaconKeyBackendServiceTrampoline_implementation);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10001CD44(v1, v2);
  char v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 16) + **(int **)(v3 + 16));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10114EB0C;
  return v6(v2, v3);
}

uint64_t sub_10114EB0C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100FC7E3C;
  }
  else {
    uint64_t v4 = sub_10114EC20;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10114EC20()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v0[2] = v2;
  sub_10000588C(&qword_10166C680);
  sub_10114F850((unint64_t *)&qword_10166C6A0, &qword_10166C680);
  uint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v5 = (void (*)(void, unint64_t, uint64_t))v0[4];
    swift_errorRetain();
    v5(0, 0xF000000000000000, v1);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    uint64_t v6 = v3;
    unint64_t v7 = v4;
    unint64_t v8 = (void (*)(uint64_t, unint64_t, void))v0[4];
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000361E0(v6, v7);
    v8(v6, v7, 0);
    sub_10001CFB8(v6, v7);
    sub_10001CFB8(v6, v7);
  }
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10114EE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = sub_10000588C(&qword_101659D60);
  v5[8] = swift_task_alloc();
  v5[9] = type metadata accessor for BeaconIdentifier();
  v5[10] = swift_task_alloc();
  return _swift_task_switch(sub_10114EF64, 0, 0);
}

uint64_t sub_10114EF64()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_101136618(&qword_101655378, (void (*)(uint64_t))type metadata accessor for BeaconIdentifier);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  uint64_t v1 = (void *)(v0[4] + OBJC_IVAR____TtC12searchpartyd33BeaconKeyBackendServiceTrampoline_implementation);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10001CD44(v1, v2);
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 24) + **(int **)(v3 + 24));
  unint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  *unint64_t v4 = v0;
  v4[1] = sub_10114F188;
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[8];
  return v8(v6, v5, v2, v3);
}

uint64_t sub_10114F188()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10114F42C;
  }
  else {
    uint64_t v2 = sub_10114F29C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10114F29C()
{
  uint64_t v1 = v0[12];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_10114F850(&qword_10166CD70, &qword_101659D60);
  uint64_t v2 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v4 = v3;
  swift_release();
  if (v1)
  {
    sub_1011363B0(v0[8]);
    sub_1003DCF30(v0[10]);
    uint64_t v5 = (void (*)(void, unint64_t, uint64_t))v0[5];
    swift_errorRetain();
    v5(0, 0xF000000000000000, v1);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    uint64_t v6 = v0[10];
    uint64_t v7 = v0[8];
    unint64_t v8 = (void (*)(uint64_t, unint64_t, void))v0[5];
    sub_1000361E0(v2, v4);
    v8(v2, v4, 0);
    sub_10001CFB8(v2, v4);
    sub_10001CFB8(v2, v4);
    sub_1011363B0(v7);
    sub_1003DCF30(v6);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10114F42C()
{
  uint64_t v1 = v0[12];
  sub_1003DCF30(v0[10]);
  uint64_t v2 = (void (*)(void, unint64_t, uint64_t))v0[5];
  swift_errorRetain();
  v2(0, 0xF000000000000000, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10114F620()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10114F658()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10114F6A0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10001D2E4;
  return sub_10114EE94(v2, v3, v4, v5, v6);
}

uint64_t sub_10114F75C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10114F79C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100033F68;
  *(void *)(v3 + 40) = v2;
  *(_OWORD *)(v3 + 24) = v4;
  return _swift_task_switch(sub_10114EA00, 0, 0);
}

uint64_t sub_10114F850(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    sub_101136618(&qword_10166C6A8, (void (*)(uint64_t))type metadata accessor for KeyGenerationBeaconInfo);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10114F8E4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10114F9D8()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v0 + v4);
  *(void *)(v1 + 16) = v7;
  *(void *)uint64_t v7 = v1;
  *(void *)(v7 + 8) = sub_100033F68;
  *(_OWORD *)(v7 + 56) = v8;
  *(void *)(v7 + 40) = v5;
  *(void *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 24) = v10;
  return _swift_task_switch(sub_10114E360, 0, 0);
}

unint64_t sub_10114FB10()
{
  unint64_t result = qword_10166C690;
  if (!qword_10166C690)
  {
    sub_10000592C(&qword_10166C680);
    sub_101136618(&qword_10166C678, (void (*)(uint64_t))type metadata accessor for KeyGenerationBeaconInfo);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10166C690);
  }
  return result;
}

unint64_t sub_10114FBBC(unint64_t a1)
{
  if (a1) {
    return a1 / 0x60 + 1;
  }
  else {
    return 0;
  }
}

ValueMetadata *type metadata accessor for PrimaryIndex()
{
  return &type metadata for PrimaryIndex;
}

unint64_t sub_10114FBEC()
{
  unint64_t result = qword_10166CD98;
  if (!qword_10166CD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CD98);
  }
  return result;
}

unint64_t sub_10114FC44()
{
  unint64_t result = qword_10166CDA0;
  if (!qword_10166CDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CDA0);
  }
  return result;
}

unint64_t sub_10114FC98(void *a1)
{
  a1[1] = sub_10114FCF8();
  a1[2] = sub_10114FD4C();
  a1[3] = sub_100F3E17C();
  a1[4] = sub_100F3E1D0();
  a1[5] = sub_10114FDA0();
  a1[6] = sub_10114FDF4();
  a1[7] = sub_10114FE48();
  unint64_t result = sub_10114FE9C();
  a1[8] = result;
  return result;
}

unint64_t sub_10114FCF8()
{
  unint64_t result = qword_10166CDA8;
  if (!qword_10166CDA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CDA8);
  }
  return result;
}

unint64_t sub_10114FD4C()
{
  unint64_t result = qword_10166CDB0;
  if (!qword_10166CDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CDB0);
  }
  return result;
}

unint64_t sub_10114FDA0()
{
  unint64_t result = qword_10166CDB8;
  if (!qword_10166CDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CDB8);
  }
  return result;
}

unint64_t sub_10114FDF4()
{
  unint64_t result = qword_10166CDC0;
  if (!qword_10166CDC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CDC0);
  }
  return result;
}

unint64_t sub_10114FE48()
{
  unint64_t result = qword_10166CDC8;
  if (!qword_10166CDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CDC8);
  }
  return result;
}

unint64_t sub_10114FE9C()
{
  unint64_t result = qword_10166CDD0;
  if (!qword_10166CDD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CDD0);
  }
  return result;
}

uint64_t sub_10114FEF0()
{
  uint64_t v1 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (void *)(v0 + *(int *)(type metadata accessor for LowBatteryUserNotification() + 28));
  uint64_t v6 = v5[3];
  uint64_t v7 = v5[4];
  sub_10001CD44(v5, v6);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 96))(v6, v7) & 1) == 0)
  {
    uint64_t v8 = v5[3];
    uint64_t v9 = v5[4];
    sub_10001CD44(v5, v8);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 104))(v8, v9) & 1) == 0) {
      return 0;
    }
  }
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1);
  uint64_t v10 = static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v10;
}

uint64_t sub_1011500DC()
{
  uint64_t v1 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LowBatteryUserNotification();
  uint64_t v6 = (void *)(v0 + *(int *)(v5 + 28));
  uint64_t v7 = v6[3];
  uint64_t v8 = v6[4];
  sub_10001CD44(v6, v7);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 96))(v7, v8) & 1) == 0)
  {
    uint64_t v9 = v6[3];
    uint64_t v10 = v6[4];
    sub_10001CD44(v6, v9);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 104))(v9, v10) & 1) == 0) {
      return 0;
    }
  }
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1);
  static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  uint64_t v12 = (uint64_t *)(v0 + *(int *)(v5 + 32));
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = v14;
  *(void *)(v11 + 40) = v13;
  swift_bridgeObjectRetain();
  uint64_t v15 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v15;
}

unint64_t sub_101150354(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = 1684632949;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v8 = (void *)(v1 + *(int *)(a1 + 28));
  uint64_t v10 = v8[3];
  uint64_t v9 = v8[4];
  sub_10001CD44(v8, v10);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8) + 32))(v10);
  uint64_t v11 = UUID.uuidString.getter();
  uint64_t v13 = v12;
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v11;
  *(void *)(inited + 56) = v13;
  return sub_10092CEEC(inited);
}

void sub_1011504B4(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    sub_100A324C8(a1);
    if (qword_101636880 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170D770);
    sub_10001D010(a3, (uint64_t)v28);
    sub_100A324BC(a1, 1);
    sub_100A324C8(a1);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    int v13 = v12;
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v25 = v15;
      *(_DWORD *)uint64_t v14 = 141558531;
      uint64_t v26 = 1752392040;
      uint64_t v27 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2081;
      HIDWORD(v23) = v13;
      uint64_t v17 = v29;
      uint64_t v16 = v30;
      sub_10001CD44(v28, v29);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v16 + 8) + 8) + 32))(v17);
      sub_10028B80C();
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v20 = v19;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      uint64_t v26 = sub_1008FA0F0(v18, v20, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
      *(_WORD *)(v14 + 22) = 2114;
      sub_101151358();
      swift_allocError();
      *uint64_t v21 = a1;
      sub_100A324C8(a1);
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v26 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v22;
      sub_100A324D8(a1, 1);
      sub_100A324D8(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v11, BYTE4(v23), "                    Error showing notification for %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v14, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100A324D8(a1, 1);
    }
    else
    {
      sub_100A324D8(a1, 1);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
      sub_100A324D8(a1, 1);
      sub_100A324D8(a1, 1);
    }
  }
}

BOOL sub_101150878(void *a1, char a2, char a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_10001CD44(a1, v10);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 120))(v10, v11) & 1) == 0) {
    return a3 != 5 && a2 == 5;
  }
  if (qword_101636880 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170D770);
  sub_10001D010((uint64_t)a1, (uint64_t)v25);
  int v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    v23[0] = v15 + 4;
    uint64_t v17 = v26;
    uint64_t v16 = v27;
    sub_10001CD44(v25, v26);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v16 + 8) + 8) + 32))(v17);
    sub_10028B80C();
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v23[1] = sub_1008FA0F0(v18, v20, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Not posting low battery notification for %s because battery cannot be replaced.", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  }

  return 0;
}

uint64_t sub_101150B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = a3;
  uint64_t v44 = a2;
  uint64_t v6 = type metadata accessor for LowBatteryUserNotification();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (_WORD *)((char *)&v38 - v10);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  os_log_type_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636880 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170D770);
  sub_10001D010(a1, (uint64_t)aBlock);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v42 = v9;
    uint64_t v19 = v18;
    uint64_t v39 = swift_slowAlloc();
    *(void *)&v52[0] = v39;
    *(_DWORD *)uint64_t v19 = 141558531;
    v51[0] = 1752392040;
    uint64_t v41 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 12) = 2081;
    uint64_t v38 = v19 + 14;
    uint64_t v40 = a4;
    uint64_t v21 = v47;
    unint64_t v20 = v48;
    sub_10001CD44(aBlock, (uint64_t)v47);
    (*(void (**)(void *))(*(void *)(*((void *)v20 + 1) + 8) + 32))(v21);
    sub_10028B80C();
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v12);
    v51[0] = sub_1008FA0F0(v22, v24, (uint64_t *)v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a4 = v40;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
    *(_WORD *)(v19 + 22) = 2048;
    v51[0] = v44;
    a1 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "\"Posting low battery notification for %{private,mask.hash}s,                                        level: %ld.", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v9 = v42;
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  }

  sub_10001D010(a1, (uint64_t)v11 + *(int *)(v6 + 28));
  *uint64_t v11 = 17153;
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v25 = (void *)((char *)v11 + *(int *)(v6 + 32));
  *uint64_t v25 = v45;
  v25[1] = a4;
  sub_1011511F4((uint64_t)v11, (uint64_t)v9);
  sub_10001D010(a1, (uint64_t)v52);
  uint64_t v26 = swift_allocObject();
  sub_10001CEB0(v52, v26 + 16);
  v51[3] = v6;
  v51[4] = (uint64_t)&off_10160B4C0;
  uint64_t v27 = sub_10001D958(v51);
  sub_1011511F4((uint64_t)v9, (uint64_t)v27);
  id v28 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v30 = [v28 initWithBundleIdentifier:v29];

  id v31 = sub_101098A3C((uint64_t)v27);
  UUID.uuidString.getter();
  id v32 = v31;
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v34 = [self requestWithIdentifier:v33 content:v32 trigger:0 destinations:7];

  sub_10001D010((uint64_t)v51, (uint64_t)v50);
  uint64_t v35 = swift_allocObject();
  sub_10001CEB0(v50, v35 + 16);
  *(void *)(v35 + 56) = sub_101151290;
  *(void *)(v35 + 64) = v26;
  uint64_t v48 = sub_1002F6720;
  uint64_t v49 = v35;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769474;
  uint64_t v47 = &unk_10160B498;
  uint64_t v36 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v30 addNotificationRequest:v34 withCompletionHandler:v36];

  _Block_release(v36);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v51);
  swift_release();
  sub_1011512FC((uint64_t)v11);
  return sub_1011512FC((uint64_t)v9);
}

uint64_t type metadata accessor for LowBatteryUserNotification()
{
  uint64_t result = qword_10166CE38;
  if (!qword_10166CE38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1011511F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LowBatteryUserNotification();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_101151258()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

void sub_101151290(uint64_t a1, char a2)
{
  sub_1011504B4(a1, a2 & 1, v2 + 16);
}

uint64_t sub_10115129C()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (*(void *)(v0 + 56)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1011512E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1011512F4()
{
  return swift_release();
}

uint64_t sub_1011512FC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LowBatteryUserNotification();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_101151358()
{
  unint64_t result = qword_10166CDD8;
  if (!qword_10166CDD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CDD8);
  }
  return result;
}

uint64_t *sub_1011513AC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v7 = a3[6];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[7];
    long long v12 = *(_OWORD *)((char *)a2 + v11 + 24);
    *(_OWORD *)((char *)v4 + v11 + 24) = v12;
    (**(void (***)(void))(v12 - 8))();
    uint64_t v13 = a3[8];
    os_log_type_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *os_log_type_t v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1011514F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1 + *(int *)(a2 + 28));

  return swift_bridgeObjectRelease();
}

_WORD *sub_101151588(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[7];
  long long v11 = *(_OWORD *)((char *)a2 + v10 + 24);
  *(_OWORD *)((char *)a1 + v10 + 24) = v11;
  (**(void (***)(void))(v11 - 8))();
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)((char *)a1 + v12);
  os_log_type_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *sub_101151680(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a3[6];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  sub_10026A7C0((uint64_t *)&a1[a3[7]], (uint64_t *)&a2[a3[7]]);
  uint64_t v10 = a3[8];
  long long v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *long long v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_WORD *sub_101151750(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  long long v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((void *)v12 + 4) = *((void *)v13 + 4);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

_WORD *sub_101151800(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1 + v10);
  long long v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((void *)v11 + 4) = *((void *)v12 + 4);
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1011518CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1011518E0);
}

uint64_t sub_1011518E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28) + 24);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_1011519A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1011519BC);
}

uint64_t sub_1011519BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 24) = (a2 - 1);
  }
  return result;
}

uint64_t sub_101151A80()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_101151B34(void *a1@<X8>)
{
  *a1 = &off_1015A5CC8;
}

unint64_t sub_101151B44()
{
  return 0xD000000000000019;
}

unsigned char *_s15KnownRecordTypeOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x101151BFCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s15KnownRecordTypeOMa()
{
  return &_s15KnownRecordTypeON;
}

unint64_t sub_101151C38()
{
  unint64_t result = qword_10166CE80;
  if (!qword_10166CE80)
  {
    sub_10000592C(&qword_10166CE88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CE80);
  }
  return result;
}

unint64_t sub_101151C98()
{
  unint64_t result = qword_10166CE90;
  if (!qword_10166CE90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166CE90);
  }
  return result;
}

uint64_t sub_101151CEC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10115A774(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v13 = 0;
  uint64_t v31 = a1;
  uint64_t v32 = result;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v15 = a1 + 64;
  uint64_t v14 = v16;
  uint64_t v17 = 1 << *(unsigned char *)(v15 - 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v14;
  uint64_t v26 = v15;
  int64_t v27 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v29 = v3 + 16;
  id v30 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  uint64_t v28 = v3 + 48;
  if ((v18 & v14) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v20 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (unint64_t i = v20 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v13 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v11, *(void *)(v31 + 48) + *(void *)(v3 + 72) * i, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1) {
      goto LABEL_25;
    }
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
    sub_100DC8CB8((uint64_t)v8, v6);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    if (v19) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v27) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_24;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v13);
      if (!v23)
      {
        int64_t v13 = v22 + 2;
        if (v22 + 2 >= v27) {
          goto LABEL_24;
        }
        unint64_t v23 = *(void *)(v26 + 8 * v13);
        if (!v23)
        {
          int64_t v13 = v22 + 3;
          if (v22 + 3 >= v27) {
            goto LABEL_24;
          }
          unint64_t v23 = *(void *)(v26 + 8 * v13);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v19 = (v23 - 1) & v23;
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v27)
  {
LABEL_24:
    (*v30)(v11, 1, 1, v2);
LABEL_25:
    swift_release();
    return v32;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v27) {
      goto LABEL_24;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10115209C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v23 - v7;
  uint64_t v9 = sub_10000588C(&qword_101650550);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10115A774(&qword_10166CEA0, (void (*)(uint64_t))type metadata accessor for BeaconIdentifier);
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v13 = 0;
  uint64_t v25 = a1;
  uint64_t v26 = result;
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v23 = a1 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v24 = (unint64_t)(v15 + 63) >> 6;
  if ((v16 & v14) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v18 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v13 << 6))
  {
    sub_10115AB30(*(void *)(v25 + 48) + *(void *)(v3 + 72) * i, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1) {
      goto LABEL_25;
    }
    sub_10115A924((uint64_t)v11, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    sub_100DD2A3C((uint64_t)v8, (uint64_t)v6);
    uint64_t result = sub_10115AB98((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    if (v17) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v24) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v23 + 8 * v20);
    ++v13;
    if (!v21)
    {
      int64_t v13 = v20 + 1;
      if (v20 + 1 >= v24) {
        goto LABEL_24;
      }
      unint64_t v21 = *(void *)(v23 + 8 * v13);
      if (!v21)
      {
        int64_t v13 = v20 + 2;
        if (v20 + 2 >= v24) {
          goto LABEL_24;
        }
        unint64_t v21 = *(void *)(v23 + 8 * v13);
        if (!v21)
        {
          int64_t v13 = v20 + 3;
          if (v20 + 3 >= v24) {
            goto LABEL_24;
          }
          unint64_t v21 = *(void *)(v23 + 8 * v13);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v17 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v24)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v11, 1, 1, v2);
LABEL_25:
    swift_release();
    return v26;
  }
  unint64_t v21 = *(void *)(v23 + 8 * v22);
  if (v21)
  {
    int64_t v13 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v13 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v13 >= v24) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v23 + 8 * v13);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_101152438(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_101152DBC);
}

uint64_t sub_101152450(void (*a1)(char *, uint64_t *), void *a2, uint64_t a3)
{
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v45 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v44 = (char *)&v36 - v9;
  uint64_t v10 = type metadata accessor for SharingCircleSecret();
  uint64_t v43 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  uint64_t v49 = (uint64_t)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (!v13) {
    return (uint64_t)v14;
  }
  uint64_t v50 = v3;
  uint64_t v52 = _swiftEmptyArrayStorage;
  uint64_t v48 = v11;
  sub_1000B732C(0, v13, 0);
  uint64_t result = sub_101158194(v48);
  uint64_t v16 = v48;
  uint64_t v17 = result;
  int v19 = v18;
  uint64_t v20 = 0;
  uint64_t v21 = v48 + 64;
  uint64_t v40 = v6 + 32;
  uint64_t v41 = v6 + 16;
  uint64_t v42 = (void (**)(char *, uint64_t))(v6 + 8);
  char v22 = *(unsigned char *)(v48 + 32);
  uint64_t v36 = v48 + 88;
  int64_t v37 = v13;
  uint64_t v38 = v6;
  uint64_t v39 = v5;
  while ((v17 & 0x8000000000000000) == 0 && v17 < 1 << v22)
  {
    unint64_t v24 = (unint64_t)v17 >> 6;
    if ((*(void *)(v21 + 8 * ((unint64_t)v17 >> 6)) & (1 << v17)) == 0) {
      goto LABEL_29;
    }
    if (*(_DWORD *)(v16 + 36) != v19) {
      goto LABEL_30;
    }
    uint64_t v25 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v44, *(void *)(v16 + 48) + *(void *)(v6 + 72) * v17, v5);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    int64_t v27 = v45;
    v26(v45, v25, v5);
    uint64_t v28 = v50;
    uint64_t v14 = v47;
    v46(v27, &v51);
    uint64_t v50 = v28;
    if (v28)
    {
      (*v42)(v27, v5);
      swift_release();
      return (uint64_t)v14;
    }
    (*v42)(v27, v5);
    uint64_t v14 = v52;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000B732C(0, v14[2] + 1, 1);
      uint64_t v14 = v52;
    }
    unint64_t v30 = v14[2];
    unint64_t v29 = v14[3];
    if (v30 >= v29 >> 1)
    {
      sub_1000B732C(v29 > 1, v30 + 1, 1);
      uint64_t v14 = v52;
    }
    void v14[2] = v30 + 1;
    uint64_t result = sub_10115A924(v49, (uint64_t)v14+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(void *)(v43 + 72) * v30, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
    uint64_t v16 = v48;
    char v22 = *(unsigned char *)(v48 + 32);
    unint64_t v23 = 1 << v22;
    if (v17 >= 1 << v22) {
      goto LABEL_31;
    }
    uint64_t v31 = *(void *)(v21 + 8 * v24);
    if ((v31 & (1 << v17)) == 0) {
      goto LABEL_32;
    }
    if (*(_DWORD *)(v48 + 36) != v19) {
      goto LABEL_33;
    }
    unint64_t v32 = v31 & (-2 << (v17 & 0x3F));
    if (v32)
    {
      unint64_t v23 = __clz(__rbit64(v32)) | v17 & 0xFFFFFFFFFFFFFFC0;
      uint64_t v6 = v38;
      uint64_t v5 = v39;
    }
    else
    {
      unint64_t v33 = v24 + 1;
      unint64_t v34 = (v23 + 63) >> 6;
      uint64_t v6 = v38;
      uint64_t v5 = v39;
      if (v24 + 1 < v34)
      {
        unint64_t v35 = *(void *)(v21 + 8 * v33);
        if (!v35)
        {
          unint64_t v33 = v24 + 2;
          if (v24 + 2 >= v34) {
            goto LABEL_4;
          }
          unint64_t v35 = *(void *)(v21 + 8 * v33);
          if (!v35)
          {
            while (v34 - 3 != v24)
            {
              unint64_t v35 = *(void *)(v36 + 8 * v24++);
              if (v35)
              {
                unint64_t v33 = v24 + 2;
                goto LABEL_20;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_20:
        unint64_t v23 = __clz(__rbit64(v35)) + (v33 << 6);
      }
    }
LABEL_4:
    ++v20;
    uint64_t v17 = v23;
    if (v20 == v37) {
      return (uint64_t)v14;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

void *sub_1011528A8(void (*a1)(uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int v18 = a1;
  uint64_t v19 = a2;
  uint64_t v6 = type metadata accessor for CryptoKeys();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
    sub_1000B7E2C(0, v10, 0);
    uint64_t v11 = v21;
    uint64_t v12 = *(void *)(type metadata accessor for TimeBasedKey() - 8);
    uint64_t v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v17 = *(void *)(v12 + 72);
    while (1)
    {
      v18(v13, &v20);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v21 = v11;
      unint64_t v15 = v11[2];
      unint64_t v14 = v11[3];
      if (v15 >= v14 >> 1)
      {
        sub_1000B7E2C(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v21;
      }
      void v11[2] = v15 + 1;
      sub_10115A924((uint64_t)v9, (uint64_t)v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v15, (uint64_t (*)(void))type metadata accessor for CryptoKeys);
      v13 += v17;
      if (!--v10) {
        return v11;
      }
    }
    swift_release();
  }
  return v11;
}

void *sub_101152AA8(void (*a1)(void *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v8 = (uint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v9 = *v8;
      v17[0] = *(v8 - 1);
      v17[1] = v9;
      swift_bridgeObjectRetain();
      a1(v18, v17);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      uint64_t v11 = v18[0];
      uint64_t v10 = v18[1];
      uint64_t v19 = v6;
      unint64_t v13 = v6[2];
      unint64_t v12 = v6[3];
      if (v13 >= v12 >> 1)
      {
        sub_1000B6ED0(v12 > 1, v13 + 1, 1);
        uint64_t v6 = v19;
      }
      v8 += 2;
      _OWORD v6[2] = v13 + 1;
      unint64_t v14 = &v6[2 * v13];
      v14[4] = v11;
      v14[5] = v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_101152BD0(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_101155078);
}

uint64_t sub_101152BE8(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_1011534A0);
}

uint64_t sub_101152C00(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_101156BF4);
}

uint64_t sub_101152C18(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_101153F00);
}

uint64_t sub_101152C30(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_101155AC4);
}

uint64_t sub_101152C48(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_101156514);
}

uint64_t sub_101152C60(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_1011545F0);
}

Swift::Int sub_101152C78(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100B73854(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_101157738(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_101152CE4(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_101156884);
}

uint64_t sub_101152CFC(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_101154964);
}

uint64_t sub_101152D14(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_101155E34);
}

uint64_t sub_101152D2C(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_101154D08);
}

uint64_t sub_101152D44(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_1011553E4);
}

uint64_t sub_101152D5C(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_101153B88);
}

uint64_t sub_101152D74(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_101154278);
}

uint64_t sub_101152D8C(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_101153814);
}

uint64_t sub_101152DA4(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_1011561A4);
}

Class sub_101152DBC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for LostModeInfoRecord();
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x10115311CLL);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LostModeInfoRecord);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LostModeInfoRecord);
          char v22 = v9;
          sub_100036908((id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LostModeInfoRecord);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._object = (void *)0x80000001014234F0;
      v19._uint64_t countAndFlagsBits = 0xD000000000000012;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LostModeInfoRecord);
      char v22 = v9;
      sub_100036908((id *)&v22);
      return v9;
  }
}

Class sub_10115312C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for LeashRecord();
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x101153490);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LeashRecord);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LeashRecord);
          char v22 = v9;
          sub_1012620A4((id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._uint64_t countAndFlagsBits = 0x636552687361654CLL;
      v19._object = (void *)0xEB0000000064726FLL;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      char v22 = v9;
      sub_1012620A4((id *)&v22);
      return v9;
  }
}

Class sub_1011534A0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ShareRecord();
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x101153804);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          char v22 = v9;
          sub_1000C5F10((void **)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._uint64_t countAndFlagsBits = 0x6365526572616853;
      v19._object = (void *)0xEB0000000064726FLL;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      char v22 = v9;
      sub_1000C5F10((void **)&v22);
      return v9;
  }
}

Class sub_101153814(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SafeLocation();
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x101153B78);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SafeLocation);
          char v22 = v9;
          sub_100F129FC((id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._uint64_t countAndFlagsBits = 0x61636F4C65666153;
      v19._object = (void *)0xEC0000006E6F6974;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      char v22 = v9;
      sub_100F129FC((id *)&v22);
      return v9;
  }
}

Class sub_101153B88(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for LostModeRecord();
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x101153EF0);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
          char v22 = v9;
          sub_100E939E4((id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._uint64_t countAndFlagsBits = 0x65646F4D74736F4CLL;
      v19._object = (void *)0xEE0064726F636552;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      char v22 = v9;
      sub_100E939E4((id *)&v22);
      return v9;
  }
}

Class sub_101153F00(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for OwnerPeerTrust();
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x101154268);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
          char v22 = v9;
          sub_1002A7844((id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._uint64_t countAndFlagsBits = 0x65655072656E774FLL;
      v19._object = (void *)0xEE00747375725472;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      char v22 = v9;
      sub_1002A7844((id *)&v22);
      return v9;
  }
}

Class sub_101154278(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MemberPeerTrust();
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x1011545E0);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
          char v22 = v9;
          sub_100EB51E0((id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._uint64_t countAndFlagsBits = 0x65507265626D654DLL;
      v19._object = (void *)0xEF74737572547265;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      char v22 = v9;
      sub_100EB51E0((id *)&v22);
      return v9;
  }
}

Class sub_1011545F0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x101154954);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
          char v22 = v9;
          sub_1004D54EC((id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._uint64_t countAndFlagsBits = 0x72476E6F63616542;
      v19._object = (void *)0xEB0000000070756FLL;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
      char v22 = v9;
      sub_1004D54EC((id *)&v22);
      return v9;
  }
}

Class sub_101154964(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v24);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x101154CF8);
        }
        sub_10001CFB8(v6, v7);
        Class isa = v24;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if (isa)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          unint64_t v24 = isa;
          sub_100D1E8CC((id *)&v24);
          id v10 = [(objc_class *)isa valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)isa encryptedValueStore];
          [v11 resetChangedKeys];

          return isa;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      v17.super.Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      if (qword_1016370A8 != -1) {
        swift_once();
      }
      uint64_t v19 = qword_10170ECB0;
      uint64_t v20 = *(void **)algn_10170ECB8;
      swift_bridgeObjectRetain();
      v21._uint64_t countAndFlagsBits = v19;
      v21._object = v20;
      Class isa = CKRecord.init(recordType:recordID:)(v21, v17).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      unint64_t v24 = isa;
      sub_100D1E8CC((id *)&v24);
      return isa;
  }
}

Class sub_101154D08(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for BeaconNamingRecord();
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x101155068);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
          char v22 = v9;
          sub_100DBF930((id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._object = (void *)0x80000001013F2D70;
      v19._uint64_t countAndFlagsBits = 0xD000000000000012;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      char v22 = v9;
      sub_100DBF930((id *)&v22);
      return v9;
  }
}

Class sub_101155078(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for KeyAlignmentRecord();
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x1011553D4);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
          char v22 = v9;
          sub_1000C17FC(a1, (id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._object = (void *)0x800000010140C280;
      v19._uint64_t countAndFlagsBits = 0xD000000000000012;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      char v22 = v9;
      sub_1000C17FC(a1, (id *)&v22);
      return v9;
  }
}

Class sub_1011553E4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for OwnerSharingCircle();
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x101155744);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          char v22 = v9;
          sub_100DF80CC((id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._object = (void *)0x800000010140C240;
      v19._uint64_t countAndFlagsBits = 0xD000000000000012;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      char v22 = v9;
      sub_100DF80CC((id *)&v22);
      return v9;
  }
}

Class sub_101155754(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x101155AB4);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, type metadata accessor for SharedBeaconRecord);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, type metadata accessor for SharedBeaconRecord);
          char v22 = v9;
          sub_1012100D0((id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, type metadata accessor for SharedBeaconRecord);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._object = (void *)0x80000001013F2D90;
      v19._uint64_t countAndFlagsBits = 0xD000000000000012;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, type metadata accessor for SharedBeaconRecord);
      char v22 = v9;
      sub_1012100D0((id *)&v22);
      return v9;
  }
}

Class sub_101155AC4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MemberSharingCircle();
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x101155E24);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
          char v22 = v9;
          sub_1002C3E04((id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._object = (void *)0x800000010140C220;
      v19._uint64_t countAndFlagsBits = 0xD000000000000013;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      char v22 = v9;
      sub_1002C3E04((id *)&v22);
      return v9;
  }
}

Class sub_101155E34(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SharingCircleSecret();
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x101156194);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
          char v22 = v9;
          sub_100D28AB0((id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._object = (void *)0x80000001013F7E30;
      v19._uint64_t countAndFlagsBits = 0xD000000000000013;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      char v22 = v9;
      sub_100D28AB0((id *)&v22);
      return v9;
  }
}

Class sub_1011561A4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for OwnedDeviceKeyRecord();
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x101156504);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
          char v22 = v9;
          sub_101137CBC((id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._object = (void *)0x800000010140C260;
      v19._uint64_t countAndFlagsBits = 0xD000000000000014;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      char v22 = v9;
      sub_101137CBC((id *)&v22);
      return v9;
  }
}

Class sub_101156514(uint64_t a1)
{
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord();
  __chkstk_darwin(found);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x101156874);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
          char v22 = v9;
          sub_10048FA1C((id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._object = (void *)0x800000010140C2C0;
      v19._uint64_t countAndFlagsBits = 0xD000000000000015;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
      char v22 = v9;
      sub_10048FA1C((id *)&v22);
      return v9;
  }
}

Class sub_101156884(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for BeaconEstimatedLocation();
  __chkstk_darwin(v3);
  int64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_5;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_5;
      }
LABEL_7:
      sub_1000361E0(*(void *)a1, *(void *)(a1 + 8));
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v7 & 0xFF000000000000) != 0)
      {
LABEL_8:
        sub_101156DE4(v6, v7, &v22);
        if (v1)
        {
          __break(1u);
          JUMPOUT(0x101156BE4);
        }
        sub_10001CFB8(v6, v7);
        Class v9 = v22;
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        if (v9)
        {
          sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          char v22 = v9;
          sub_100CC9340((id *)&v22);
          id v10 = [(objc_class *)v9 valueStore];
          [v10 resetChangedKeys];

          id v11 = [(objc_class *)v9 encryptedValueStore];
          [v11 resetChangedKeys];

          return v9;
        }
      }
      else
      {
LABEL_3:
        sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
LABEL_5:
        sub_10115AB30(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      }
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v15 = (id)qword_10170EA30;
      v16._uint64_t countAndFlagsBits = v12;
      v16._object = v14;
      Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      int v18 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      v19._object = (void *)0x800000010140C2A0;
      v19._uint64_t countAndFlagsBits = 0xD000000000000017;
      Class v9 = CKRecord.init(recordType:recordID:)(v19, (CKRecordID)isa).super.isa;
      sub_10115AB98((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      char v22 = v9;
      sub_100CC9340((id *)&v22);
      return v9;
  }
}

Class sub_101156BF4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalFindableAccessoryRecord();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10115AB30(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  sub_10001D4B0(0, &qword_10163CB60);
  uint64_t v5 = UUID.uuidString.getter();
  unint64_t v7 = v6;
  if (qword_101636F68 != -1) {
    swift_once();
  }
  id v8 = (id)qword_10170EA30;
  v9._uint64_t countAndFlagsBits = v5;
  v9._object = v7;
  Class isa = CKRecordID.init(recordName:zoneID:)(v9, (CKRecordZoneID)v8).super.isa;
  static os_log_type_t.default.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  id v11 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  v12._object = (void *)0x8000000101416A10;
  v12._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  Class v13 = CKRecord.init(recordType:recordID:)(v12, (CKRecordID)isa).super.isa;
  sub_10115AB98((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  Class v16 = v13;
  sub_1000CAE74((id *)&v16);
  return v13;
}

void sub_101156DE4(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  id v7 = objc_allocWithZone((Class)NSKeyedUnarchiver);
  sub_1000361E0(a1, a2);
  id v8 = sub_1011584EC();
  if (v3)
  {
    sub_10001CFB8(a1, a2);
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v10 = String.init<A>(describing:)();
    uint64_t v12 = v11;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_10000B4CC();
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v12;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    Class v13 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_errorRelease();
    swift_bridgeObjectRelease();

    id v14 = 0;
  }
  else
  {
    uint64_t v15 = v8;
    sub_10001CFB8(a1, a2);
    [v15 _enableStrictSecureDecodingMode];
    id v16 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v15];
    if (v16)
    {
      id v14 = v16;
    }
    else
    {
      static os_log_type_t.error.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      CKRecordID v17 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      id v14 = 0;
    }
  }
  *a3 = v14;
}

uint64_t CKRecord.description.getter()
{
  uint64_t v1 = v0;
  if (!os_variant_has_internal_diagnostics()) {
    return 0x657463616465723CLL;
  }
  unint64_t v55 = v0;
  uint64_t v52 = &v55;
  sub_10000588C(&qword_10166CE98);
  _print_unlocked<A, B>(_:_:)();
  id v2 = [v0 recordID];
  id v3 = [v2 zoneID];

  id v4 = [v1 recordID];
  id v5 = [v4 recordName];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  uint64_t v53 = v6;
  unint64_t v54 = v8;
  v9._uint64_t countAndFlagsBits = 10298;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  id v10 = [v3 zoneName];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Class v13 = v12;

  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 58;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  id v16 = [v3 ownerName];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v19 = v18;

  v20._uint64_t countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 41;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  char v22 = (void *)v54;
  v50._uint64_t countAndFlagsBits = v53;
  id v23 = [v1 encryptedValues];
  id v24 = [v23 changedKeys];
  uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v26 = sub_101158614(v25);
  swift_bridgeObjectRelease();
  id v27 = [v23 allKeys];
  uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v53 = v28;
  swift_bridgeObjectRetain();
  sub_101152C78(&v53);
  swift_bridgeObjectRelease();
  uint64_t v29 = v53;
  id v30 = [v1 recordChangeTag];
  v50._object = v22;
  id v51 = v3;
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;

    uint64_t v53 = 0x3D676174202CLL;
    unint64_t v54 = 0xE600000000000000;
    v35._uint64_t countAndFlagsBits = v32;
    v35._object = v34;
    String.append(_:)(v35);
    id v30 = (id)swift_bridgeObjectRelease();
    uint64_t v36 = v53;
    int64_t v37 = (void *)v54;
  }
  else
  {
    uint64_t v36 = 0;
    int64_t v37 = (void *)0xE000000000000000;
  }
  __chkstk_darwin(v30);
  v49[2] = v26;
  v49[3] = v23;
  uint64_t v39 = sub_101152AA8((void (*)(void *__return_ptr, void *))sub_1011586AC, (uint64_t)v49, v29);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v53 = (uint64_t)v39;
  sub_10000588C(&qword_101654A30);
  sub_100062734((unint64_t *)&qword_10163A100, &qword_101654A30);
  uint64_t v40 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v42 = v41;
  swift_bridgeObjectRelease();
  uint64_t v53 = 0;
  unint64_t v54 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  uint64_t v53 = 0x726F6365524B433CLL;
  unint64_t v54 = 0xEB00000000203A64;
  v43._uint64_t countAndFlagsBits = 0;
  v43._object = (void *)0xE000000000000000;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = 0x64726F636572203BLL;
  v44._object = (void *)0xEB000000003D6449;
  String.append(_:)(v44);
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  v45._uint64_t countAndFlagsBits = v36;
  v45._object = v37;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._uint64_t countAndFlagsBits = 31520;
  v46._object = (void *)0xE200000000000000;
  String.append(_:)(v46);
  v47._uint64_t countAndFlagsBits = v40;
  v47._object = v42;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 15997;
  v48._object = (void *)0xE200000000000000;
  String.append(_:)(v48);
  swift_unknownObjectRelease();

  return v53;
}

uint64_t sub_101157554@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  id v5 = (void *)a1[1];
  if (sub_100DC6054(*a1, (uint64_t)v5, a2))
  {
    uint64_t v13 = v4;
    unint64_t v14 = (unint64_t)v5;
    swift_bridgeObjectRetain();
    v6._uint64_t countAndFlagsBits = 42;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v7._uint64_t countAndFlagsBits = v4;
  uint64_t v17 = 0;
  unint64_t v18 = 0xE000000000000000;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 2112800;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  if (v12)
  {
    sub_10001CEB0(&v11, (uint64_t)&v13);
  }
  else
  {
    Swift::String v15 = &type metadata for String;
    id v16 = &protocol witness table for String;
    uint64_t v13 = 0;
    unint64_t v14 = 0xE000000000000000;
    sub_10115ACA0((uint64_t)&v11);
  }
  sub_10000588C(&qword_10166CF28);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v13);
  unint64_t v10 = v18;
  *a3 = v17;
  a3[1] = v10;
  return result;
}

uint64_t sub_1011576B0(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_101155754);
}

uint64_t sub_1011576C8(uint64_t a1, uint64_t a2)
{
  return sub_1011576E0(a1, a2, (uint64_t (*)(uint64_t))sub_10115312C);
}

uint64_t sub_1011576E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = a3(v3);
  return v6;
}

Swift::Int sub_101157738(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_101157E24(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    Swift::String v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      long long v11 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      uint64_t v94 = v11;
      int v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_101157EF4((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = sub_100B73584((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          uint64_t v100 = &v97[16 * v96 + 32];
          *(void *)uint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v104[2] = 0;
      return swift_bridgeObjectRelease();
    }
    int v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    int v104 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  long long v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v106 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    unint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    Swift::String v21 = (void *)(v103 + 16 * v20);
    do
    {
      id v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v11 = sub_100B729CC(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      long long v11 = sub_100B729CC((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    Swift::String v43 = &v11[16 * v41 + 32];
    *(void *)Swift::String v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      Swift::Int v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            char v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        unint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        uint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        unint64_t v88 = v42;
        unint64_t v89 = v44;
        uint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_101157EF4((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        long long v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        Swift::Int v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      Swift::String v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    Swift::Int v32 = v3;
  }
  else {
    Swift::Int v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      unint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        unint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        Swift::Int v37 = v13;
        uint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_101157E24(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      Swift::Int result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_101157EF4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  Swift::Int v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      Swift::Int v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        unint64_t v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          Swift::Int v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)unint64_t v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
            }
            Swift::Int v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    unint64_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      Swift::Int v27 = v7;
    }
LABEL_50:
    sub_100B72AC8((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_101158194(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  int64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_101158244(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  Swift::Int v28 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::Int v27 = (char *)v21 - v6;
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v7 - 8);
  int64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  sub_10115A774(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = v11 + 40;
    id v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    uint64_t v25 = v12;
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v23 = v14;
    uint64_t v26 = v11;
    uint64_t v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v18 = (uint64_t)v27;
    uint64_t v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      int v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      sub_100DC8CB8(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    int v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

id sub_1011584EC()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = 0;
  id v2 = [v0 initForReadingFromData:isa error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t sub_1011585AC(uint64_t a1)
{
  return sub_10115A184(a1, (void (*)(void))sub_10115ABF8, (uint64_t)&type metadata for BatteryChargeState, (void (*)(char *, void))sub_100DC92F8);
}

uint64_t sub_1011585E0(uint64_t a1)
{
  return sub_10115A184(a1, (void (*)(void))sub_10115AC4C, (uint64_t)&type metadata for PublishingPolicy, (void (*)(char *, void))sub_100DC930C);
}

uint64_t sub_101158614(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    id v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100DC979C(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1011586AC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_101157554(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1011586CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_100061B8C();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    id v4 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      sub_1000361E0(v5, *v4);
      sub_100DC994C(v7, v5, v6);
      sub_10001CFB8(v7[0], v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_101158768(uint64_t a1)
{
  return sub_101159BDC(a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int, (void (*)(uint64_t *, uint64_t))sub_100DCA424);
}

uint64_t sub_101158790(uint64_t a1)
{
  return sub_10115A184(a1, (void (*)(void))sub_10115A810, (uint64_t)&type metadata for MessagingCapability, (void (*)(char *, void))sub_100DCA438);
}

uint64_t sub_1011587C4(uint64_t a1)
{
  return sub_10115A184(a1, (void (*)(void))sub_10115A7BC, (uint64_t)&type metadata for BeaconStore.BeaconsChangedNotificationReason, (void (*)(char *, void))sub_100DCA44C);
}

uint64_t sub_1011587F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v13 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_10115A774(&qword_10166CED0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v14 = result;
  if (v9)
  {
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v12 = *(void *)(v3 + 72);
    do
    {
      sub_10115AB30(v11, (uint64_t)v6, type metadata accessor for SharedBeaconRecord);
      sub_100DCA460((uint64_t)v8, (uint64_t)v6);
      sub_10115AB98((uint64_t)v8, type metadata accessor for SharedBeaconRecord);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v14;
  }
  return result;
}

uint64_t sub_101158984(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for SPDisabledReason(0);
  sub_10115A774(&qword_101637E20, type metadata accessor for SPDisabledReason);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      sub_100DCA6C0(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_101158A40(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconNamingRecord();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v13 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_10115A774(&qword_10166CEC8, (void (*)(uint64_t))type metadata accessor for BeaconNamingRecord);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v14 = result;
  if (v9)
  {
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v12 = *(void *)(v3 + 72);
    do
    {
      sub_10115AB30(v11, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      sub_100DCA7E4((uint64_t)v8, v6);
      sub_10115AB98((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v14;
  }
  return result;
}

uint64_t sub_101158BCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_100416588();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      sub_1000361E0(v5, *v4);
      sub_100DCBB98(v7, v5, v6);
      sub_10001CFB8(v7[0], v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_101158C68(uint64_t a1)
{
  return sub_10115A184(a1, (void (*)(void))sub_100B95910, (uint64_t)&type metadata for SharingCircleType, (void (*)(char *, void))sub_100DCC5E4);
}

uint64_t sub_101158C9C(unint64_t a1)
{
  return sub_10115A570(a1, (unint64_t *)&qword_10166BF90, (uint64_t)FAFamilyMember_ptr, &qword_101648030, (void (*)(id *, uint64_t))sub_100DCC5F8);
}

uint64_t sub_101158CCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_10054D3D4();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v9 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      Swift::Int v7 = *((unsigned __int8 *)v4 - 16);
      swift_bridgeObjectRetain();
      sub_100DCC8B8((uint64_t)&v8, v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 3;
      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

uint64_t sub_101158D6C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RawSearchResult();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (unsigned __int8 *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v13 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_10115A774(&qword_10166CF08, (void (*)(uint64_t))type metadata accessor for RawSearchResult);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v14 = result;
  if (v9)
  {
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v12 = *(void *)(v3 + 72);
    do
    {
      sub_10115AB30(v11, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      sub_100DCCAA4((uint64_t)v8, v6);
      sub_10115AB98((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v14;
  }
  return result;
}

uint64_t sub_101158EF8(uint64_t a1)
{
  return sub_10115A184(a1, (void (*)(void))sub_10115A98C, (uint64_t)&type metadata for DeviceCapability, (void (*)(char *, void))sub_100DCCFE4);
}

uint64_t sub_101158F2C(unint64_t a1)
{
  return sub_10115A570(a1, &qword_10163B870, (uint64_t)SPBeaconShare_ptr, &qword_10163B878, (void (*)(id *, uint64_t))sub_100DCB5BC);
}

uint64_t sub_101158F5C(unint64_t a1)
{
  return sub_10115A570(a1, (unint64_t *)&unk_101653D70, (uint64_t)SPSafeLocation_ptr, (unint64_t *)&qword_1016556C0, (void (*)(id *, uint64_t))sub_100DCD7C4);
}

uint64_t sub_101158F8C(unint64_t a1)
{
  return sub_10115A570(a1, (unint64_t *)&qword_10163B900, (uint64_t)SPHandle_ptr, &qword_10163C0A0, (void (*)(id *, uint64_t))sub_100DCE8A0);
}

uint64_t sub_101158FBC(uint64_t a1)
{
  return sub_10115A184(a1, (void (*)(void))sub_10115AA34, (uint64_t)&type metadata for KeyDropInterface.KeyType, (void (*)(char *, void))sub_100DCEB60);
}

uint64_t sub_101158FF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_100CF61D4();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v13 = result;
  if (v2)
  {
    uint64_t v4 = (long long *)(a1 + 32);
    do
    {
      long long v5 = v4[7];
      v14[6] = v4[6];
      v14[7] = v5;
      long long v6 = v4[9];
      v14[8] = v4[8];
      v14[9] = v6;
      long long v7 = v4[3];
      void v14[2] = v4[2];
      v14[3] = v7;
      long long v8 = v4[5];
      v14[4] = v4[4];
      v14[5] = v8;
      long long v9 = *v4;
      long long v10 = v4[1];
      v4 += 10;
      v14[0] = v9;
      v14[1] = v10;
      sub_1000A3AA8((uint64_t)v14);
      sub_100DCF218(v11, (uint64_t)v14);
      v12[6] = v11[6];
      v12[7] = v11[7];
      v12[8] = v11[8];
      v12[9] = v11[9];
      void v12[2] = v11[2];
      v12[3] = v11[3];
      v12[4] = v11[4];
      v12[5] = v11[5];
      v12[0] = v11[0];
      v12[1] = v11[1];
      sub_1000A3BB4((uint64_t)v12);
      --v2;
    }
    while (v2);
    return v13;
  }
  return result;
}

uint64_t sub_1011590C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_100551D08();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100DCF974(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_10115915C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      sub_100173F4C(v4, (uint64_t)v5);
      sub_100DCFB24((uint64_t)v6, (uint64_t)v5);
      sub_1004268DC((uint64_t)v6);
      v4 += 40;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1011591E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for SPBeaconType(0);
  sub_10115A774(&qword_101637E10, type metadata accessor for SPBeaconType);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      Swift::Int v5 = *v4++;
      sub_100DD0C34(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1011592A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_10000588C((uint64_t *)&unk_101653DC0);
  sub_100062734(&qword_101659310, (uint64_t *)&unk_101653DC0);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      swift_bridgeObjectRetain();
      sub_100DD0C54(&v6, v5);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_10115935C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for SPBeaconTaskName(0);
  sub_10115A774(&qword_1016387E0, type metadata accessor for SPBeaconTaskName);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      sub_100DD1320(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_101159418(unint64_t a1)
{
  return sub_10115A570(a1, (unint64_t *)&unk_10164DC30, (uint64_t)SPBeacon_ptr, (unint64_t *)&qword_1016556B0, (void (*)(id *, uint64_t))sub_100DD1574);
}

uint64_t sub_101159448(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (double *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v25 = (Swift::UInt64 *)((char *)&v25 - v8);
  __chkstk_darwin(v7);
  long long v10 = (Swift::UInt64 *)((char *)&v25 - v9);
  uint64_t v11 = *(void *)(a1 + 16);
  sub_10115A774(&qword_10166CED8, (void (*)(uint64_t))type metadata accessor for WildModeTrackingLocation);
  uint64_t v12 = Set.init(minimumCapacity:)();
  uint64_t v27 = v11;
  if (v11)
  {
    uint64_t v13 = 0;
    uint64_t v26 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    do
    {
      sub_10115AB30(v26 + v14 * v13, (uint64_t)v10, type metadata accessor for WildModeTrackingLocation);
      Hasher.init(_seed:)();
      if ((*v10 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v17 = *v10;
      }
      else {
        Swift::UInt64 v17 = 0;
      }
      Hasher._combine(_:)(v17);
      if ((v10[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v18 = v10[1];
      }
      else {
        Swift::UInt64 v18 = 0;
      }
      Hasher._combine(_:)(v18);
      if ((v10[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v19 = v10[2];
      }
      else {
        Swift::UInt64 v19 = 0;
      }
      Hasher._combine(_:)(v19);
      type metadata accessor for Date();
      sub_10115A774((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
      swift_bridgeObjectRetain();
      dispatch thunk of Hashable.hash(into:)();
      Swift::Int v20 = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v22 = v20 & ~v21;
      if ((*(void *)(v12 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22))
      {
        uint64_t v23 = ~v21;
        while (1)
        {
          sub_10115AB30(*(void *)(v12 + 48) + v22 * v14, (uint64_t)v6, type metadata accessor for WildModeTrackingLocation);
          if (*v6 == *(double *)v10
            && v6[1] == *((double *)v10 + 1)
            && v6[2] == *((double *)v10 + 2)
            && (static Date.== infix(_:_:)() & 1) != 0)
          {
            break;
          }
          sub_10115AB98((uint64_t)v6, type metadata accessor for WildModeTrackingLocation);
          unint64_t v22 = (v22 + 1) & v23;
          if (((*(void *)(v12 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
            goto LABEL_3;
          }
        }
        sub_10115AB98((uint64_t)v6, type metadata accessor for WildModeTrackingLocation);
      }
      else
      {
LABEL_3:
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v16 = v25;
        sub_10115AB30((uint64_t)v10, (uint64_t)v25, type metadata accessor for WildModeTrackingLocation);
        uint64_t v28 = v12;
        sub_100DE51D8(v16, v22, isUniquelyReferenced_nonNull_native);
        uint64_t v12 = v28;
      }
      swift_bridgeObjectRelease();
      ++v13;
      sub_10115AB98((uint64_t)v10, type metadata accessor for WildModeTrackingLocation);
    }
    while (v13 != v27);
  }
  return v12;
}

uint64_t sub_101159814(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Destination();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_10115A774(&qword_10165F080, (void (*)(uint64_t))&type metadata accessor for Destination);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v6, v14, v2);
      sub_100DD1834((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_1011599B0(uint64_t a1)
{
  return sub_10115A184(a1, (void (*)(void))sub_10115AADC, (uint64_t)&type metadata for BeaconSharingMessageType, (void (*)(char *, void))sub_100DD1B58);
}

uint64_t sub_1011599E4(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for AnyCancellable();
  sub_10115A774((unint64_t *)&unk_10165F250, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v4 = result;
  uint64_t v9 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v5) {
      return v4;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      return v4;
    }
  }
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }
      sub_100DD1C8C(&v8, v7);
      swift_release();
    }
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_101159B54(unint64_t a1)
{
  return sub_10115A570(a1, &qword_10164DCA0, (uint64_t)SPStandaloneBeacon_ptr, &qword_10164DCA8, (void (*)(id *, uint64_t))sub_100DD1F88);
}

uint64_t sub_101159B84(unint64_t a1)
{
  return sub_10115A570(a1, &qword_10164DC58, (uint64_t)SPBeaconGroup_ptr, (unint64_t *)&unk_10164DC60, (void (*)(id *, uint64_t))sub_100DD2248);
}

uint64_t sub_101159BB4(uint64_t a1)
{
  return sub_101159BDC(a1, (uint64_t)&type metadata for UInt64, (uint64_t)&protocol witness table for UInt64, (void (*)(uint64_t *, uint64_t))sub_100DD2508);
}

uint64_t sub_101159BDC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, uint64_t))
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v11 = result;
  if (v6)
  {
    uint64_t v8 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v9 = *v8++;
      a4(&v10, v9);
      --v6;
    }
    while (v6);
    return v11;
  }
  return result;
}

uint64_t sub_101159C48(unint64_t a1)
{
  return sub_10115A570(a1, &qword_10164D830, (uint64_t)SPTrackingAvoidanceResult_ptr, &qword_10164D838, (void (*)(id *, uint64_t))sub_100DD2630);
}

uint64_t sub_101159C78(uint64_t a1)
{
  return sub_10115A184(a1, (void (*)(void))sub_100483504, (uint64_t)&type metadata for LocationSource, (void (*)(char *, void))sub_100DD28F0);
}

uint64_t sub_101159CAC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v19 - v7;
  uint64_t v9 = sub_10000588C(&qword_101650550);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + 16);
  sub_10115A774(&qword_10166CEA0, (void (*)(uint64_t))type metadata accessor for BeaconIdentifier);
  uint64_t v21 = Set.init(minimumCapacity:)();
  if (v12)
  {
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    unint64_t v15 = v3 + 56;
    uint64_t v16 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
    v19[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v20 = v14;
    while (1)
    {
      sub_10115AB30(v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v11, 0, 1, v2);
      if ((*v16)(v11, 1, v2) == 1) {
        break;
      }
      sub_10115A924((uint64_t)v11, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_100DD2A3C((uint64_t)v8, (uint64_t)v6);
      sub_10115AB98((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      v13 += v20;
      if (!--v12) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v17(v11, 1, 1, v2);
  }
  return v21;
}

uint64_t sub_101159F34(unint64_t a1)
{
  return sub_10115A570(a1, (unint64_t *)&unk_10166BF80, (uint64_t)SPCBPeripheralManagerSessionKey_ptr, &qword_10164C940, (void (*)(id *, uint64_t))sub_100DD30E8);
}

uint64_t sub_101159F64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned int *)(a1 + 32);
    do
    {
      unsigned int v5 = *v4++;
      sub_100DD33A8(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_101159FD8(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for Characteristic();
  sub_10115A774(&qword_101655B60, (void (*)(uint64_t))type metadata accessor for Characteristic);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_100DD3A38(&v9, v6);
        swift_release();
      }
    }
    else
    {
      uint64_t v7 = (uint64_t *)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        swift_retain();
        sub_100DD3A38(&v9, v8);
        swift_release();
        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}