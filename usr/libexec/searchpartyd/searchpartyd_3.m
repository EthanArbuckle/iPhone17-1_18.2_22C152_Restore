uint64_t sub_10021E180()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30[3];
  void *v31;
  uint64_t v32;

  v31 = v0;
  v1 = v0 + 18;
  v2 = v0[91];
  sub_10001CFB8(v0[198], v0[199]);
  swift_release();
  sub_10025C56C(v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  v3 = v0[181];
  if (qword_101636908 != -1) {
    swift_once();
  }
  v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D9D8);
  sub_10001D010((uint64_t)(v0 + 18), (uint64_t)(v0 + 28));
  swift_errorRetain();
  swift_errorRetain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v29 = v3;
  if (os_log_type_enabled(v5, v6))
  {
    v28 = v6;
    v27 = (void (*)(uint64_t, uint64_t))v0[151];
    v7 = v0[128];
    v8 = v0[118];
    v9 = swift_slowAlloc();
    v30[0] = swift_slowAlloc();
    *(_DWORD *)v9 = 141558531;
    v0[63] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    v11 = v0[31];
    v10 = v0[32];
    sub_10001CD44(v0 + 28, v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v14 = v13;
    v15 = v8;
    v3 = v29;
    v27(v7, v15);
    v0[61] = sub_1008FA0F0(v12, v14, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v1 = v0 + 18;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
    *(_WORD *)(v9 + 22) = 2080;
    swift_getErrorValue();
    v16 = Error.localizedDescription.getter();
    v0[64] = sub_1008FA0F0(v16, v17, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v28, "Could not create fetch item for owned beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
    swift_errorRelease();
    swift_errorRelease();
  }
  v18 = v0[137];
  v19 = v0[180] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
  if (v19 == v18)
  {
    swift_bridgeObjectRelease();
    v26 = v0[82];
    sub_10001DAB4(v0[132], &qword_10163F788);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v20 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v20(v29, v26);
  }
  else
  {
    v22 = v0[180] + 1;
    v0[181] = v3;
    v0[180] = v22;
    v23 = v0[141];
    sub_10001D010(v0[86] + 40 * v22 + 32, (uint64_t)v1);
    v24 = v0[21];
    v25 = v0[22];
    sub_10001CD44(v1, v24);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8) + 32))(v24);
    return _swift_task_switch(sub_10021B884, v23, 0);
  }
}

uint64_t sub_10021E7F8()
{
  v2 = (void *)*v1;
  v2[216] = v0;
  swift_task_dealloc();
  v3 = (void (*)(uint64_t, uint64_t))v2[151];
  if (v0)
  {
    uint64_t v4 = v2[122];
    uint64_t v5 = v2[121];
    uint64_t v6 = v2[118];
    uint64_t v7 = v2[87];
    swift_bridgeObjectRelease();
    v3(v5, v6);
    v3(v4, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = sub_100220758;
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v10 = v2[134];
    uint64_t v11 = v2[133];
    uint64_t v12 = v2[130];
    uint64_t v13 = v2[122];
    uint64_t v14 = v2[121];
    uint64_t v15 = v2[118];
    uint64_t v16 = v2[87];
    swift_bridgeObjectRelease();
    v3(v14, v15);
    v3(v13, v15);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
    v8 = sub_10021EA34;
    uint64_t v9 = v16;
  }
  return _swift_task_switch(v8, v9, 0);
}

uint64_t sub_10021EA34()
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v3 = *(void *)(v0 + 1704);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_107;
  }
  while (2)
  {
    unint64_t v5 = *(void *)(v3 + 16);
    unint64_t v4 = *(void *)(v3 + 24);
    uint64_t v6 = v5 + 1;
    if (v5 >= v4 >> 1) {
      unint64_t v3 = sub_100A70044(v4 > 1, v5 + 1, 1, v3);
    }
    unint64_t v7 = *(void *)(v0 + 1528);
    uint64_t v8 = *(void *)(v0 + 784);
    uint64_t v9 = *(void *)(v0 + 776);
    uint64_t v10 = *(void *)(v0 + 1696) + 1;
    *(void *)(v3 + 16) = v6;
    sub_10025C5CC(v8, v3+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v5, type metadata accessor for KeyDropFetchItem);
    if (v10 == v7)
    {
      swift_bridgeObjectRelease();
      sub_100442FEC(*(void *)(v0 + 1680));
      swift_release();
      uint64_t v11 = *(void *)(v0 + 1096);
      uint64_t v12 = *(void *)(v0 + 1440) + 1;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 144);
      if (v12 == v11)
      {
        swift_bridgeObjectRelease();
        uint64_t v108 = *(void *)(v0 + 656);
        sub_10001DAB4(*(void *)(v0 + 1056), &qword_10163F788);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v13 = *(uint64_t (**)(unint64_t, uint64_t))(v0 + 8);
        return v13(v3, v108);
      }
      else
      {
        uint64_t v77 = *(void *)(v0 + 1440) + 1;
        *(void *)(v0 + 1448) = v3;
        *(void *)(v0 + 1440) = v77;
        uint64_t v78 = *(void *)(v0 + 1128);
        sub_10001D010(*(void *)(v0 + 688) + 40 * v77 + 32, v0 + 144);
        uint64_t v79 = *(void *)(v0 + 168);
        uint64_t v80 = *(void *)(v0 + 176);
        sub_10001CD44((void *)(v0 + 144), v79);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v80 + 8) + 8) + 32))(v79);
        return _swift_task_switch(sub_10021B884, v78, 0);
      }
    }
    uint64_t v15 = *(void *)(v0 + 1728);
    unint64_t v16 = *(void *)(v0 + 1696) + 1;
    *(void *)(v0 + 1704) = v3;
    *(void *)(v0 + 1696) = v16;
    uint64_t v17 = *(void *)(v0 + 1488);
    if (v16 >= *(void *)(v17 + 16)) {
      goto LABEL_112;
    }
    uint64_t v113 = v15;
    uint64_t v18 = *(int *)(v0 + 1788);
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1144);
    uint64_t v20 = *(void *)(v0 + 976);
    uint64_t v21 = *(void *)(v0 + 968);
    uint64_t v22 = *(void *)(v0 + 944);
    uint64_t v23 = *(void *)(v0 + 720);
    uint64_t v24 = v23 + *(int *)(v0 + 1784);
    uint64_t v25 = v23 + *(int *)(v0 + 1780);
    sub_10025C504(v17+ ((*(unsigned __int8 *)(v0 + 1764) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1764))+ *(void *)(v0 + 1536) * v16, v23, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    v19(v20, v25, v22);
    v19(v21, v24, v22);
    char v26 = *(unsigned char *)(v23 + v18);
    sub_10025C56C(v23, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v27 = *(void *)(v0 + 1680);
    uint64_t v28 = *(void *)(v0 + 1040);
    uint64_t v29 = *(void *)(v0 + 680);
    uint64_t v30 = *(int *)(*(void *)(v0 + 1032) + 48);
    (*(void (**)(uint64_t, void, void))(v0 + 1080))(v28, *(void *)(v0 + 1056), *(void *)(v0 + 1064));
    *(void *)(v28 + v30) = v29;
    int64_t v31 = *(void *)(v27 + 16);
    v32 = _swiftEmptyArrayStorage;
    if (!v31) {
      goto LABEL_88;
    }
    char v109 = v26;
    v111 = (void *)(v0 + 472);
    *(void *)(v0 + 528) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    v110 = (void **)(v0 + 528);
    sub_1000B7930(0, v31, 0);
    unint64_t v33 = 0;
    int64_t v112 = v31;
LABEL_12:
    v34 = *(uint64_t **)(v0 + 856);
    uint64_t v35 = *(void *)(v0 + 1680)
        + ((*(unsigned __int8 *)(v0 + 1768) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1768))
        + *(void *)(v0 + 1608) * v33;
    unint64_t v1 = v33 + 1;
    sub_10025C504(v35, (uint64_t)v34, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v6 = *v34;
    unint64_t v3 = v34[1];
    unint64_t v7 = v3 >> 62;
    uint64_t v10 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    switch(v3 >> 62)
    {
      case 1uLL:
        uint64_t v36 = (int)v6;
        uint64_t v10 = v6 >> 32;
        sub_1000361E0(v6, v3);
        if (v6 >> 32 < (int)v6) {
          goto LABEL_101;
        }
        uint64_t v37 = v6 >> 32;
        uint64_t v38 = (int)v6;
        goto LABEL_18;
      case 2uLL:
        uint64_t v36 = *(void *)(v6 + 16);
        uint64_t v10 = *(void *)(v6 + 24);
        sub_1000361E0(v6, v3);
        if (v10 < v36)
        {
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          unint64_t v3 = sub_100A70044(0, *(void *)(v3 + 16) + 1, 1, v3);
          continue;
        }
        uint64_t v38 = *(void *)(v6 + 16);
        uint64_t v37 = *(void *)(v6 + 24);
LABEL_18:
        if (v37 < v10 || v10 < v38) {
          goto LABEL_102;
        }
        if (__OFSUB__(v10, v36)) {
          goto LABEL_103;
        }
        if ((unint64_t)(v10 - v36) < 0x39)
        {
          uint64_t v39 = v7;
          unint64_t v7 = v0 + 560;
          switch(v39)
          {
            case 1:
              uint64_t v40 = v6 >> 32;
              goto LABEL_33;
            case 2:
              uint64_t v40 = *(void *)(v6 + 24);
              goto LABEL_34;
            default:
              goto LABEL_36;
          }
        }
        uint64_t v40 = v36 + 57;
        if (__OFADD__(v36, 57))
        {
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
          goto LABEL_117;
        }
        uint64_t v41 = v7;
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = v7;
        unint64_t v7 = v0 + 560;
        switch(v44)
        {
          case 1:
            uint64_t v43 = (int)v6;
            uint64_t v42 = v6 >> 32;
            break;
          case 2:
            uint64_t v43 = *(void *)(v6 + 16);
            uint64_t v42 = *(void *)(v6 + 24);
            break;
          case 3:
            break;
          default:
            uint64_t v43 = 0;
            uint64_t v42 = BYTE6(v3);
            break;
        }
        if (v42 < v40 || v40 < v43) {
          goto LABEL_109;
        }
        uint64_t v45 = 0;
        switch(v41)
        {
          case 1:
LABEL_33:
            uint64_t v45 = (int)v6;
            break;
          case 2:
LABEL_34:
            uint64_t v45 = *(void *)(v6 + 16);
            break;
          default:
            break;
        }
        if (v40 < v45) {
          goto LABEL_104;
        }
LABEL_36:
        uint64_t v10 = Data._Representation.subscript.getter();
        unint64_t v47 = v46;
        sub_10001CFB8(v6, v3);
        switch(v47 >> 62)
        {
          case 1uLL:
            LODWORD(v48) = HIDWORD(v10) - v10;
            if (__OFSUB__(HIDWORD(v10), v10)) {
              goto LABEL_110;
            }
            uint64_t v48 = (int)v48;
LABEL_41:
            if (v48 != 57)
            {
LABEL_77:
              sub_10001CFB8(v10, v47);
              return _assertionFailure(_:_:file:line:flags:)();
            }
            sub_1000361E0(v10, v47);
            sub_100A948F8(v10, v47);
            if (v113)
            {
              uint64_t v6 = v113;
              unint64_t v7 = v0 + 536;
              goto LABEL_93;
            }
            *(void *)unint64_t v7 = 57;
            type metadata accessor for __DataStorage();
            swift_allocObject();
            unint64_t v3 = __DataStorage.init(length:)();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              if (__DataStorage._bytes.getter())
              {
                uint64_t v6 = v3;
                if (__OFSUB__(0, __DataStorage._offset.getter())) {
                  goto LABEL_113;
                }
              }
              swift_allocObject();
              uint64_t v52 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
              swift_release();
              unint64_t v3 = v52;
            }
            if (!__DataStorage._bytes.getter()) {
              goto LABEL_120;
            }
            if (__OFSUB__(0, __DataStorage._offset.getter())) {
              goto LABEL_105;
            }
            __DataStorage._length.getter();
            int v53 = CCECCryptorExportKey();
            if (v53)
            {
              int v81 = v53;
              unint64_t v82 = v47;
              static os_log_type_t.error.getter();
              if (qword_101636F48 != -1) {
                swift_once();
              }
              uint64_t v83 = *(void *)(v0 + 760);
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v84 = swift_allocObject();
              *(_OWORD *)(v84 + 16) = xmmword_101342130;
              *(void *)(v84 + 56) = &type metadata for Int32;
              *(void *)(v84 + 64) = &protocol witness table for Int32;
              *(_DWORD *)(v84 + 32) = v81;
              os_log(_:dso:log:_:_:)();
              swift_bridgeObjectRelease();
              CryptoError.init(rawValue:)();
              uint64_t v85 = type metadata accessor for CryptoError();
              sub_10025C710((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
              uint64_t v6 = swift_allocError();
              uint64_t v87 = v86;
              uint64_t v88 = *(void *)(v85 - 8);
              int v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v83, 1, v85);
              uint64_t v90 = *(void *)(v0 + 760);
              if (v89 == 1)
              {
                (*(void (**)(uint64_t, void, uint64_t))(v88 + 104))(v87, enum case for CryptoError.unspecifiedError(_:), v85);
                sub_10001DAB4(v90, &qword_10163F758);
              }
              else
              {
                (*(void (**)(uint64_t, void, uint64_t))(v88 + 32))(v87, *(void *)(v0 + 760), v85);
              }
              swift_willThrow();
              swift_release();
              unint64_t v7 = v0 + 536;
              unint64_t v47 = v82;
LABEL_93:
              unint64_t v1 = v47;
              static os_log_type_t.error.getter();
              if (qword_101636F48 == -1)
              {
LABEL_94:
                sub_10000588C((uint64_t *)&unk_10163AD00);
                uint64_t v97 = swift_allocObject();
                *(_OWORD *)(v97 + 16) = xmmword_101342130;
                *(void *)unint64_t v7 = v6;
                swift_errorRetain();
                sub_10000588C(&qword_101638D40);
                uint64_t v98 = String.init<A>(describing:)();
                uint64_t v100 = v99;
                *(void *)(v97 + 56) = &type metadata for String;
                *(void *)(v97 + 64) = sub_10000B4CC();
                *(void *)(v97 + 32) = v98;
                *(void *)(v97 + 40) = v100;
                os_log(_:dso:log:_:_:)();
                swift_bridgeObjectRelease();
                sub_100130148();
                uint64_t v101 = swift_allocError();
                unsigned char *v102 = 0;
                swift_willThrow();
                swift_errorRelease();
                unint64_t v103 = v1;
                goto LABEL_99;
              }
LABEL_117:
              swift_once();
              goto LABEL_94;
            }
            if ((*(void *)v7 & 0x8000000000000000) != 0) {
              goto LABEL_106;
            }
            if (*(void *)v7 >= 0x39uLL) {
              size_t v54 = 57;
            }
            else {
              size_t v54 = *(void *)v7;
            }
            if (!v54)
            {
              swift_release();
              CCECCryptorRelease();
              sub_10001CFB8(v10, v47);
              uint64_t v6 = 0;
              unint64_t v55 = 0xC000000000000000;
LABEL_98:
              sub_10013019C();
              uint64_t v101 = swift_allocError();
              *(void *)uint64_t v106 = 28;
              *(void *)(v106 + 8) = v54;
              *(unsigned char *)(v106 + 16) = 0;
              swift_willThrow();
              unint64_t v103 = v55;
              uint64_t v10 = v6;
LABEL_99:
              sub_10001CFB8(v10, v103);
              _StringGuts.grow(_:)(35);
              *(void *)(v0 + 424) = 0;
              *(void *)(v0 + 432) = 0xE000000000000000;
              v107._countAndFlagsBits = 0xD000000000000021;
              v107._object = (void *)0x80000001013F3B70;
              String.append(_:)(v107);
              *(void *)(v0 + 552) = v101;
              sub_10000588C(&qword_101638D40);
              _print_unlocked<A, B>(_:_:)();
              return _assertionFailure(_:_:file:line:flags:)();
            }
            if (v54 <= 0xE)
            {
              unint64_t v114 = v1;
              unint64_t v1 = v47;
              *(void *)(v0 + 478) = 0;
              void *v111 = 0;
              *(unsigned char *)(v0 + 486) = v54;
              swift_retain();
              uint64_t v56 = __DataStorage._bytes.getter();
              if (v56)
              {
                uint64_t v6 = v3;
                uint64_t v57 = __DataStorage._offset.getter();
                uint64_t v58 = -v57;
                if (__OFSUB__(0, v57)) {
                  goto LABEL_116;
                }
                __DataStorage._length.getter();
                memcpy(v111, (const void *)(v56 + v58), v54);
                uint64_t v56 = *(unsigned __int8 *)(v0 + 484);
                uint64_t v59 = *(unsigned __int8 *)(v0 + 485);
                size_t v54 = *(unsigned __int8 *)(v0 + 486);
              }
              else
              {
                size_t v54 = v54;
                __DataStorage._length.getter();
                uint64_t v59 = 0;
              }
              uint64_t v6 = *(void *)(v0 + 472);
              unint64_t v7 = *(unsigned int *)(v0 + 480);
              swift_release_n();
              unint64_t v55 = v7 | (v56 << 32) | (v59 << 40) | (v54 << 48);
              unint64_t v47 = v1;
              unint64_t v1 = v114;
            }
            else
            {
              uint64_t v6 = v54 << 32;
              unint64_t v55 = v3 | 0x4000000000000000;
            }
            CCECCryptorRelease();
            sub_10001CFB8(v10, v47);
            unint64_t v60 = v55 >> 62;
            switch(v55 >> 62)
            {
              case 1uLL:
                LODWORD(v61) = HIDWORD(v6) - v6;
                if (__OFSUB__(HIDWORD(v6), v6)) {
                  goto LABEL_114;
                }
                uint64_t v61 = (int)v61;
LABEL_67:
                if (v61 != 28)
                {
                  if (!v60)
                  {
                    size_t v54 = BYTE6(v55);
                    goto LABEL_98;
                  }
                  if (v60 == 1)
                  {
                    if (!__OFSUB__(HIDWORD(v6), v6))
                    {
                      size_t v54 = HIDWORD(v6) - (int)v6;
                      goto LABEL_98;
                    }
                    __break(1u);
                  }
                  else
                  {
                    uint64_t v105 = *(void *)(v6 + 16);
                    uint64_t v104 = *(void *)(v6 + 24);
                    size_t v54 = v104 - v105;
                    if (!__OFSUB__(v104, v105)) {
                      goto LABEL_98;
                    }
                  }
                  __break(1u);
LABEL_120:
                  __break(1u);
                }
                unint64_t v64 = v1;
                uint64_t v65 = *(unsigned int *)(v0 + 1760);
                uint64_t v66 = *(void *)(v0 + 856);
                uint64_t v67 = *(void *)(v0 + 752);
                uint64_t v68 = *(void *)(v0 + 744);
                unint64_t v69 = v47;
                uint64_t v70 = *(void *)(v0 + 736);
                sub_10001CFB8(v10, v69);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 104))(v67, v65, v70);
                uint64_t v71 = Data.hash(algorithm:)();
                uint64_t v73 = v72;
                (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v70);
                sub_10001CFB8(v6, v55);
                sub_10025C56C(v66, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                v32 = *(void **)(v0 + 528);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  sub_1000B7930(0, v32[2] + 1, 1);
                  v32 = *v110;
                }
                unint64_t v33 = v64;
                unint64_t v75 = v32[2];
                unint64_t v74 = v32[3];
                if (v75 >= v74 >> 1)
                {
                  sub_1000B7930(v74 > 1, v75 + 1, 1);
                  v32 = *v110;
                }
                uint64_t v113 = 0;
                v32[2] = v75 + 1;
                v76 = &v32[2 * v75];
                v76[4] = v71;
                v76[5] = v73;
                if (v112 != v64) {
                  goto LABEL_12;
                }
                swift_bridgeObjectRelease();
                char v26 = v109;
                break;
              case 2uLL:
                uint64_t v63 = *(void *)(v6 + 16);
                uint64_t v62 = *(void *)(v6 + 24);
                BOOL v51 = __OFSUB__(v62, v63);
                uint64_t v61 = v62 - v63;
                if (!v51) {
                  goto LABEL_67;
                }
                goto LABEL_115;
              case 3uLL:
                size_t v54 = 0;
                goto LABEL_98;
              default:
                uint64_t v61 = BYTE6(v55);
                goto LABEL_67;
            }
LABEL_88:
            *(void *)(v0 + 1712) = v32;
            v91 = (void *)swift_task_alloc();
            *(void *)(v0 + 1720) = v91;
            void *v91 = v0;
            v91[1] = sub_10021E7F8;
            uint64_t v92 = *(void *)(v0 + 1040);
            uint64_t v93 = *(void *)(v0 + 976);
            uint64_t v94 = *(void *)(v0 + 968);
            uint64_t v95 = *(void *)(v0 + 784);
            uint64_t v96 = *(void *)(v0 + 680);
            return sub_10022364C(v95, v93, v94, 0x4000201u >> (8 * v26), v92, v96, (uint64_t)v32);
          case 2uLL:
            uint64_t v50 = *(void *)(v10 + 16);
            uint64_t v49 = *(void *)(v10 + 24);
            BOOL v51 = __OFSUB__(v49, v50);
            uint64_t v48 = v49 - v50;
            if (!v51) {
              goto LABEL_41;
            }
            goto LABEL_111;
          case 3uLL:
            goto LABEL_77;
          default:
            uint64_t v48 = BYTE6(v47);
            goto LABEL_41;
        }
      case 3uLL:
        goto LABEL_18;
      default:
        uint64_t v36 = 0;
        uint64_t v38 = 0;
        uint64_t v10 = BYTE6(v3);
        uint64_t v37 = BYTE6(v3);
        goto LABEL_18;
    }
  }
}

uint64_t sub_10021FBBC()
{
  uint64_t v35 = v0;
  unint64_t v1 = (void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 1072);
  uint64_t v3 = *(void *)(v0 + 1064);
  uint64_t v4 = *(void *)(v0 + 1048);
  uint64_t v5 = *(void *)(v0 + 928);
  sub_10025C56C(*(void *)(v0 + 832), type metadata accessor for SharedBeaconRecord);
  sub_10025C56C(v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  uint64_t v6 = *(void *)(v0 + 1376);
  if (qword_101636908 != -1) {
    swift_once();
  }
  sub_100010324(*(void *)(v0 + 1320), (uint64_t)qword_10170D9D8);
  sub_10001D010(v0 + 184, v0 + 304);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t type = v8;
    int64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 1208);
    uint64_t v9 = *(void *)(v0 + 1024);
    uint64_t v10 = *(void *)(v0 + 944);
    uint64_t v33 = v6;
    uint64_t v11 = swift_slowAlloc();
    v34[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141558531;
    *(void *)(v0 + 576) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    uint64_t v13 = *(void *)(v0 + 328);
    uint64_t v12 = *(void *)(v0 + 336);
    sub_10001CD44((void *)(v0 + 304), v13);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v12 + 8) + 8) + 32))(v13);
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v16 = v15;
    v31(v9, v10);
    *(void *)(v0 + 584) = sub_1008FA0F0(v14, v16, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v1 = (void *)(v0 + 184);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 304);
    *(_WORD *)(v11 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v17 = Error.localizedDescription.getter();
    *(void *)(v0 + 608) = sub_1008FA0F0(v17, v18, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, type, "Could not create fetch item for shared beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v33;
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 304);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v19 = *(void *)(v0 + 1096);
  uint64_t v20 = *(void *)(v0 + 1112) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
  if (v20 == v19)
  {
    swift_bridgeObjectRelease();
    *(_DWORD *)(v0 + 1760) = enum case for HashAlgorithm.sha256(_:);
    *(void *)(v0 + 1448) = v6;
    *(void *)(v0 + 1440) = 0;
    uint64_t v21 = *(void *)(v0 + 1128);
    uint64_t v22 = *(void *)(v0 + 688) + 32;
    swift_bridgeObjectRetain();
    sub_10001D010(v22, v0 + 144);
    uint64_t v23 = *(void *)(v0 + 168);
    uint64_t v24 = *(void *)(v0 + 176);
    sub_10001CD44((void *)(v0 + 144), v23);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v24 + 8) + 8) + 32))(v23);
    uint64_t v25 = sub_10021B884;
  }
  else
  {
    uint64_t v26 = *(void *)(v0 + 1112) + 1;
    *(void *)(v0 + 1120) = v6;
    *(void *)(v0 + 1112) = v26;
    *(void *)(v0 + 1104) = 0;
    uint64_t v27 = *(void *)(v0 + 696);
    sub_10001D010(*(void *)(v0 + 688) + 40 * v26 + 32, (uint64_t)v1);
    uint64_t v21 = *(void *)(v27 + 136);
    *(void *)(v0 + 1128) = v21;
    uint64_t v28 = *(void *)(v0 + 208);
    uint64_t v29 = *(void *)(v0 + 216);
    sub_10001CD44(v1, v28);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v29 + 8) + 8) + 32))(v28);
    uint64_t v25 = sub_100218070;
  }
  return _swift_task_switch(v25, v21, 0);
}

uint64_t sub_1002200E8()
{
  uint64_t v30 = v0;
  unint64_t v1 = v0 + 18;
  uint64_t v2 = v0[91];
  swift_release();
  sub_10025C56C(v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v3 = v0[181];
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D9D8);
  sub_10001D010((uint64_t)(v0 + 18), (uint64_t)(v0 + 28));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v28 = v6;
    uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[151];
    log = v5;
    uint64_t v7 = v0[128];
    uint64_t v8 = v0[118];
    uint64_t v9 = swift_slowAlloc();
    v29[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558531;
    v0[63] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v11 = v0[31];
    uint64_t v10 = v0[32];
    sub_10001CD44(v0 + 28, v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    v26(v7, v8);
    v0[61] = sub_1008FA0F0(v12, v14, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v1 = v0 + 18;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
    *(_WORD *)(v9 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v15 = Error.localizedDescription.getter();
    v0[64] = sub_1008FA0F0(v15, v16, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v28, "Could not create fetch item for owned beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v17 = v0[137];
  uint64_t v18 = v0[180] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
  if (v18 == v17)
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = v0[82];
    sub_10001DAB4(v0[132], &qword_10163F788);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v19(v3, v25);
  }
  else
  {
    uint64_t v21 = v0[180] + 1;
    v0[181] = v3;
    v0[180] = v21;
    uint64_t v22 = v0[141];
    sub_10001D010(v0[86] + 40 * v21 + 32, (uint64_t)v1);
    uint64_t v24 = v0[21];
    uint64_t v23 = v0[22];
    sub_10001CD44(v1, v24);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v23 + 8) + 8) + 32))(v24);
    return _swift_task_switch(sub_10021B884, v22, 0);
  }
}

uint64_t sub_100220758()
{
  uint64_t v33 = v0;
  unint64_t v1 = v0 + 18;
  uint64_t v2 = v0[134];
  uint64_t v3 = v0[133];
  uint64_t v4 = v0[130];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  uint64_t v5 = v0[213];
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170D9D8);
  sub_10001D010((uint64_t)(v0 + 18), (uint64_t)(v0 + 28));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  uint64_t v31 = v5;
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v30 = v8;
    uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[151];
    uint64_t v9 = v0[128];
    uint64_t v10 = v0[118];
    uint64_t v11 = swift_slowAlloc();
    v32[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141558531;
    v0[63] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    uint64_t v13 = v0[31];
    uint64_t v12 = v0[32];
    sub_10001CD44(v0 + 28, v13);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v12 + 8) + 8) + 32))(v13);
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v16 = v15;
    uint64_t v17 = v10;
    uint64_t v5 = v31;
    v29(v9, v17);
    v0[61] = sub_1008FA0F0(v14, v16, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v1 = v0 + 18;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
    *(_WORD *)(v11 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v18 = Error.localizedDescription.getter();
    v0[64] = sub_1008FA0F0(v18, v19, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v30, "Could not create fetch item for owned beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 28));
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v20 = v0[137];
  uint64_t v21 = v0[180] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
  if (v21 == v20)
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = v0[82];
    sub_10001DAB4(v0[132], &qword_10163F788);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v22(v31, v28);
  }
  else
  {
    uint64_t v24 = v0[180] + 1;
    v0[181] = v5;
    v0[180] = v24;
    uint64_t v25 = v0[141];
    sub_10001D010(v0[86] + 40 * v24 + 32, (uint64_t)v1);
    uint64_t v26 = v0[21];
    uint64_t v27 = v0[22];
    sub_10001CD44(v1, v26);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v27 + 8) + 8) + 32))(v26);
    return _swift_task_switch(sub_10021B884, v25, 0);
  }
}

uint64_t sub_100220DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 344) = a2;
  *(void *)(v5 + 352) = v4;
  *(void *)(v5 + 336) = a1;
  uint64_t v7 = type metadata accessor for SymmetricKey();
  *(void *)(v5 + 360) = v7;
  *(void *)(v5 + 368) = *(void *)(v7 - 8);
  *(void *)(v5 + 376) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Date();
  *(void *)(v5 + 384) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v5 + 392) = v9;
  *(void *)(v5 + 400) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  *(void *)(v5 + 408) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v5 + 416) = v11;
  *(void *)(v5 + 424) = *(void *)(v11 + 64);
  *(void *)(v5 + 432) = swift_task_alloc();
  *(void *)(v5 + 440) = swift_task_alloc();
  *(void *)(v5 + 448) = swift_task_alloc();
  *(void *)(v5 + 456) = swift_task_alloc();
  uint64_t v12 = sub_10000588C(&qword_10163F788);
  *(void *)(v5 + 464) = v12;
  *(void *)(v5 + 472) = swift_task_alloc();
  *(void *)(v5 + 480) = swift_task_alloc();
  *(void *)(v5 + 488) = swift_task_alloc();
  *(void *)(v5 + 496) = swift_task_alloc();
  *(void *)(v5 + 504) = swift_task_alloc();
  uint64_t v13 = swift_task_alloc();
  *(void *)(v5 + 512) = v13;
  uint64_t v14 = *(int *)(v12 + 48);
  *(_DWORD *)(v5 + 712) = v14;
  unint64_t v15 = *(void (**)(void))(v9 + 16);
  *(void *)(v5 + 520) = v15;
  *(void *)(v5 + 528) = (v9 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v15();
  *(void *)(v13 + v14) = a4;
  return _swift_task_switch(sub_100221050, v4, 0);
}

uint64_t sub_100221050()
{
  uint64_t v50 = v0;
  if (qword_101636908 != -1) {
    swift_once();
  }
  os_log_t log = *(os_log_t *)(v0 + 520);
  uint64_t v2 = *(void *)(v0 + 504);
  uint64_t v1 = *(void *)(v0 + 512);
  uint64_t v3 = *(void *)(v0 + 488);
  uint64_t v44 = *(int *)(v0 + 712);
  uint64_t v46 = *(void *)(v0 + 496);
  uint64_t v47 = *(void *)(v0 + 480);
  uint64_t v4 = *(void *)(v0 + 456);
  uint64_t v5 = *(void *)(v0 + 464);
  uint64_t v7 = *(void *)(v0 + 408);
  uint64_t v6 = *(void *)(v0 + 416);
  uint64_t v8 = *(void *)(v0 + 384);
  uint64_t v9 = *(void *)(v0 + 344);
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v0 + 536) = sub_100010324(v10, (uint64_t)qword_10170D9D8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(void *)(v0 + 544) = v11;
  *(void *)(v0 + 552) = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v11(v4, v9, v7);
  uint64_t v12 = *(int *)(v5 + 48);
  uint64_t v13 = v5;
  ((void (*)(uint64_t, uint64_t, uint64_t))log)(v2, v1, v8);
  uint64_t v14 = *(void *)(v1 + v44);
  *(void *)(v2 + v12) = v14;
  sub_10001D608(v2, v46, &qword_10163F788);
  uint64_t v15 = *(int *)(v13 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))log)(v3, v1, v8);
  *(void *)(v3 + v15) = v14;
  sub_10001D608(v3, v47, &qword_10163F788);
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 520);
    uint64_t v39 = *(void *)(v0 + 496);
    uint64_t v18 = *(void *)(v0 + 472);
    uint64_t v40 = *(void *)(v0 + 464);
    uint64_t v41 = *(void *)(v0 + 480);
    os_log_type_t type = v17;
    uint64_t v19 = *(void *)(v0 + 456);
    uint64_t v20 = *(void *)(v0 + 408);
    uint64_t v21 = *(void *)(v0 + 416);
    uint64_t v38 = *(void *)(v0 + 400);
    uint64_t v48 = *(void *)(v0 + 392);
    uint64_t v37 = *(void *)(v0 + 384);
    uint64_t v22 = swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 141558787;
    *(void *)(v0 + 304) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 12) = 2081;
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 312) = sub_1008FA0F0(v23, v24, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
    *(_WORD *)(v22 + 22) = 2080;
    v45(v18, v39, v37);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v38, v18, v37);
    sub_10025C710((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v27 = v26;
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v28(v38, v37);
    *(void *)(v0 + 320) = sub_1008FA0F0(v25, v27, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v39, &qword_10163F788);
    *(_WORD *)(v22 + 32) = 2048;
    uint64_t v29 = *(int *)(v40 + 48);
    v45(v18, v41, v37);
    uint64_t v30 = *(void *)(v41 + v29);
    *(void *)(v18 + v29) = v30;
    v28(v18, v37);
    sub_10001DAB4(v41, &qword_10163F788);
    *(void *)(v0 + 328) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, type, "Bundle Decryption for shareId: %{private,mask.hash}s for dateInterval: %s + %ld days count.", (uint8_t *)v22, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v31 = *(void *)(v0 + 496);
    uint64_t v32 = *(void *)(v0 + 456);
    uint64_t v33 = *(void *)(v0 + 408);
    uint64_t v34 = *(void *)(v0 + 416);
    sub_10001DAB4(*(void *)(v0 + 480), &qword_10163F788);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
    sub_10001DAB4(v31, &qword_10163F788);
  }
  uint64_t v35 = *(void *)(*(void *)(v0 + 352) + 136);
  *(void *)(v0 + 560) = v35;
  return _swift_task_switch(sub_100221574, v35, 0);
}

uint64_t sub_100221574()
{
  uint64_t v1 = v0[70];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[68];
  uint64_t v3 = v0[56];
  uint64_t v4 = v0[52];
  uint64_t v5 = v0[51];
  uint64_t v6 = v0[42];
  v0[71] = *(void *)(v1 + 136);
  v2(v3, v6, v5);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  v0[72] = v8;
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v3, v5);
  swift_retain();
  return _swift_task_switch(sub_100221664, 0, 0);
}

uint64_t sub_100221664()
{
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[71];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[73] = v3;
  v3[2] = v2;
  v3[3] = sub_10001CDDC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[74] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163BBE0);
  *uint64_t v4 = v0;
  v4[1] = sub_100221780;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 15, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001CE50, v3, v5);
}

uint64_t sub_100221780()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 352);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1002218D0, v1, 0);
}

uint64_t sub_1002218D0()
{
  uint64_t v1 = (long long *)(v0 + 15);
  if (v0[18])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 10));
    uint64_t v2 = (void *)swift_task_alloc();
    v0[75] = v2;
    void *v2 = v0;
    v2[1] = sub_100221AB0;
    uint64_t v3 = v0[64];
    return sub_100222A60((uint64_t)(v0 + 10), v3);
  }
  else
  {
    uint64_t v5 = v0[64];
    sub_10001DAB4((uint64_t)v1, (uint64_t *)&unk_10163BBE0);
    sub_10012F634();
    swift_allocError();
    *uint64_t v6 = 5;
    swift_willThrow();
    sub_10001DAB4(v5, &qword_10163F788);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100221AB0(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 608) = a1;
  *(void *)(v4 + 616) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 352);
  if (v1) {
    uint64_t v6 = sub_100222944;
  }
  else {
    uint64_t v6 = sub_100221BE8;
  }
  return _swift_task_switch(v6, v5, 0);
}

void sub_100221BE8()
{
  unint64_t v1 = *(void *)(v0 + 608);
  if (v1) {
    unint64_t v2 = v1 / 0x60 + 1;
  }
  else {
    unint64_t v2 = 0;
  }
  *(void *)(v0 + 624) = v2;
  uint64_t v3 = *(void *)(*(void *)(v0 + 512) + *(int *)(v0 + 712));
  BOOL v4 = __OFSUB__(v2, v3);
  uint64_t v5 = v2 - v3;
  if (v4)
  {
    __break(1u);
    goto LABEL_13;
  }
  BOOL v4 = __OFADD__(v5, 1);
  uint64_t v6 = v5 + 1;
  if (v4)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
  if (v6 <= 1) {
    uint64_t v6 = 1;
  }
  if (v2 < v6) {
    goto LABEL_14;
  }
  *(void *)(v0 + 632) = *(void *)(*(void *)(v0 + 352) + 128);
  *(void *)(v0 + 648) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 640) = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 656) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100221CFC;
  uint64_t v8 = *(void *)(v0 + 344);
  sub_100C32EB4(v0 + 16, v8);
}

uint64_t sub_100221CFC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 664) = v0;
  swift_task_dealloc();
  if (v0)
  {
    *(void *)(v2 + 704) = v0;
    uint64_t v3 = *(void *)(v2 + 632);
    BOOL v4 = sub_1002227BC;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 632);
    BOOL v4 = sub_100221E24;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100221E24()
{
  unint64_t v1 = *(void *)(v0 + 40);
  if (v1 >> 60 == 15)
  {
    sub_100130078();
    uint64_t v2 = swift_allocError();
    *uint64_t v3 = 8;
    swift_willThrow();
    sub_1001300CC((uint64_t *)(v0 + 16));
    *(void *)(v0 + 704) = v2;
    uint64_t v4 = *(void *)(v0 + 632);
    uint64_t v5 = (uint64_t *)sub_1002227BC;
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(v0 + 640);
  uint64_t v7 = *(void *)(v0 + 32);
  sub_1000361E0(v7, *(void *)(v0 + 40));
  sub_100CB2F80(v7, v1, v6);
  sub_100037A24(v7, v1);
  uint64_t v5 = sub_1001300CC((uint64_t *)(v0 + 16));
  if (!is_mul_ok(v6, 0x60uLL))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return _swift_task_switch(v5, v4, v8);
  }
  *(void *)(v0 + 672) = 96 * v6;
  unint64_t v9 = 96 * v6 - 96;
  if (v9 <= 1) {
    unint64_t v9 = 1;
  }
  *(void *)(v0 + 680) = v9;
  if (96 * v6 - 1 < v9) {
    goto LABEL_12;
  }
  uint64_t v11 = *(void *)(v0 + 368);
  uint64_t v10 = *(void *)(v0 + 376);
  uint64_t v13 = *(void *)(v0 + 352);
  uint64_t v12 = *(void *)(v0 + 360);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 160);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  uint64_t v5 = (uint64_t *)sub_100221FDC;
  uint64_t v4 = v13;
LABEL_8:
  uint64_t v8 = 0;
  return _swift_task_switch(v5, v4, v8);
}

void sub_100221FDC()
{
  uint64_t v56 = v0;
  sub_1000361E0(*(void *)(v0 + 688), *(void *)(v0 + 696));
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v2 = *(void **)(v0 + 648);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v2 = sub_100A6FEEC(0, v2[2] + 1, 1, v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100A6FEEC((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  unint64_t v5 = *(void *)(v0 + 696);
  uint64_t v6 = *(void *)(v0 + 688);
  uint64_t v7 = *(void *)(v0 + 680);
  uint64_t v8 = *(void *)(v0 + 640);
  unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 544);
  size_t v54 = v2;
  uint64_t v11 = *(void *)(v0 + 432);
  uint64_t v10 = *(void *)(v0 + 440);
  uint64_t v12 = *(void *)(v0 + 408);
  uint64_t v14 = *(void *)(v0 + 336);
  uint64_t v13 = *(void *)(v0 + 344);
  uint64_t v15 = *(void *)(v0 + 672) - 1;
  v2[2] = v4 + 1;
  unint64_t v16 = &v2[5 * v4];
  v16[4] = v8;
  v16[5] = v7;
  v16[6] = v15;
  v16[7] = v6;
  v16[8] = v5;
  v9(v10, v13, v12);
  v9(v11, v14, v12);
  sub_1000361E0(v6, v5);
  sub_1000361E0(v6, v5);
  sub_1000361E0(v6, v5);
  sub_1000361E0(v6, v5);
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  unint64_t v20 = *(void *)(v0 + 696);
  uint64_t v21 = *(void *)(v0 + 688);
  if (v19)
  {
    unint64_t v50 = *(void *)(v0 + 696);
    uint64_t v51 = *(void *)(v0 + 680);
    uint64_t v49 = *(void *)(v0 + 640);
    os_log_type_t v53 = v18;
    uint64_t v23 = *(void *)(v0 + 432);
    uint64_t v22 = *(void *)(v0 + 440);
    uint64_t v24 = *(void *)(v0 + 408);
    uint64_t v25 = *(void *)(v0 + 416);
    uint64_t v52 = *(void *)(v0 + 672) - 1;
    uint64_t v26 = swift_slowAlloc();
    v55[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 141559555;
    *(void *)(v0 + 280) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v26 + 12) = 2081;
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 256) = sub_1008FA0F0(v27, v28, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v29(v22, v24);
    *(_WORD *)(v26 + 22) = 2160;
    *(void *)(v0 + 232) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v26 + 32) = 2081;
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 224) = sub_1008FA0F0(v30, v31, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v29(v23, v24);
    *(_WORD *)(v26 + 42) = 2082;
    strcpy((char *)(v0 + 208), ".secondary/(");
    *(unsigned char *)(v0 + 221) = 0;
    *(_WORD *)(v0 + 222) = -5120;
    *(void *)(v0 + 240) = v49;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 41;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    *(void *)(v0 + 248) = sub_1008FA0F0(*(void *)(v0 + 208), *(void *)(v0 + 216), v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 52) = 2080;
    *(void *)(v0 + 192) = 0x7972616D6972702ELL;
    *(void *)(v0 + 200) = 0xEA0000000000282FLL;
    *(void *)(v0 + 264) = v51;
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 41;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    *(void *)(v0 + 272) = sub_1008FA0F0(*(void *)(v0 + 192), *(void *)(v0 + 200), v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v21, v50);
    sub_10001CFB8(v21, v50);
    *(_WORD *)(v26 + 62) = 2080;
    *(void *)(v0 + 176) = 0x7972616D6972702ELL;
    *(void *)(v0 + 184) = 0xEA0000000000282FLL;
    *(void *)(v0 + 288) = v52;
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 41;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    *(void *)(v0 + 296) = sub_1008FA0F0(*(void *)(v0 + 176), *(void *)(v0 + 184), v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v21, v50);
    sub_10001CFB8(v21, v50);
    _os_log_impl((void *)&_mh_execute_header, v17, v53, "Create bundle decryption for shareId: %{private,mask.hash}s,\nbeacon: %{private,mask.hash}s\nsecondaryBucket: %{public}s, start:%s\nto end: %s.", (uint8_t *)v26, 0x48u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10001CFB8(v21, v50);
  }
  else
  {
    uint64_t v38 = *(void *)(v0 + 432);
    uint64_t v39 = *(void *)(v0 + 440);
    uint64_t v40 = *(void *)(v0 + 408);
    uint64_t v41 = *(void *)(v0 + 416);
    sub_10001CFB8(*(void *)(v0 + 688), *(void *)(v0 + 696));
    uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v42(v39, v40);
    v42(v38, v40);
    sub_10001CFB8(v21, v20);
    sub_10001CFB8(v21, v20);
    sub_10001CFB8(v21, v20);
    sub_10001CFB8(v21, v20);
  }
  unint64_t v43 = *(void *)(v0 + 640);
  unint64_t v44 = *(void *)(v0 + 624);
  if (v44 == v43)
  {
    uint64_t v45 = *(void *)(v0 + 512);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 80);
    sub_10001DAB4(v45, &qword_10163F788);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v46 = *(void (**)(void *))(v0 + 8);
    v46(v54);
  }
  else
  {
    *(void *)(v0 + 648) = v54;
    *(void *)(v0 + 640) = v43 + 1;
    if (v44 > v43 && ((v44 - (v43 + 1)) & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v47 = (void *)swift_task_alloc();
      *(void *)(v0 + 656) = v47;
      *uint64_t v47 = v0;
      v47[1] = sub_100221CFC;
      uint64_t v48 = *(void *)(v0 + 344);
      sub_100C32EB4(v0 + 16, v48);
    }
  }
}

uint64_t sub_1002227BC()
{
  uint64_t v1 = *(void *)(v0 + 352);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100222828, v1, 0);
}

uint64_t sub_100222828()
{
  uint64_t v1 = *(void *)(v0 + 512);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 80);
  sub_10001DAB4(v1, &qword_10163F788);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100222944()
{
  uint64_t v1 = *(void *)(v0 + 512);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 80);
  sub_10001DAB4(v1, &qword_10163F788);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100222A60(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  v3[9] = sub_10000588C(&qword_10163F7B0);
  v3[10] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DateInterval();
  v3[11] = v5;
  v3[12] = *(void *)(v5 - 8);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v3[15] = v6;
  v3[16] = *(void *)(v6 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  return _swift_task_switch(sub_100222C3C, v2, 0);
}

uint64_t sub_100222C3C()
{
  Date.timeIntervalSince1970.getter();
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = v0[16];
  uint64_t v3 = v0[17];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[5];
  Date.init(timeIntervalSince1970:)();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v8(v1, v2, v5);
  v8(v3, v6, v5);
  DateInterval.init(start:end:)();
  uint64_t v9 = *(void *)(v7 + 136);
  v0[20] = v9;
  return _swift_task_switch(sub_100222D54, v9, 0);
}

uint64_t sub_100222D54()
{
  *(void *)(v0 + 168) = *(void *)(*(void *)(v0 + 160) + 136);
  swift_retain();
  return _swift_task_switch(sub_100222DC8, 0, 0);
}

uint64_t sub_100222DC8()
{
  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[22] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[23] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_100222EDC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_100222EDC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 192) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_10022304C, v2, 0);
}

uint64_t sub_10022304C()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[25] = v1;
  void *v1 = v0;
  v1[1] = sub_1002230F4;
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[3];
  return sub_1006DDD60(v2, v3);
}

uint64_t sub_1002230F4()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100223208;
  }
  else {
    uint64_t v2 = sub_10022337C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100223208()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  return _swift_task_switch(sub_100223274, v1, 0);
}

uint64_t sub_100223274()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[14];
  uint64_t v3 = v0[15];
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[11];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10022337C()
{
  uint64_t v1 = v0[12];
  uint64_t v16 = v0[13];
  uint64_t v18 = v0[11];
  uint64_t v15 = (uint64_t *)v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[7];
  uint64_t v17 = v0[6];
  uint64_t v19 = v0[5];
  uint64_t v4 = (void *)v0[3];
  uint64_t v6 = v4[3];
  uint64_t v5 = v4[4];
  sub_10001CD44(v4, v6);
  LOBYTE(v5) = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 112))(v6, v5);
  uint64_t v8 = v4[3];
  uint64_t v7 = v4[4];
  sub_10001CD44(v4, v8);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v7 + 8) + 8) + 32))(v8);
  sub_1006DD7C4(v5 & 1, v2, v16);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v17);
  unint64_t v10 = v4[3];
  uint64_t v9 = v4[4];
  uint64_t v11 = sub_10001CD44(v4, v10);
  sub_1006DEBCC((uint64_t)v11, v16, v15, v10, v9);
  v0[27] = v12;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v0[28] = v13;
  v0[29] = (v1 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v13(v16, v18);
  sub_10001DAB4((uint64_t)v15, &qword_10163F7B0);
  swift_release();
  return _swift_task_switch(sub_100223544, v19, 0);
}

uint64_t sub_100223544()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[28];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v5 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v6 = v0[11];
  swift_release();
  v1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v8 = v0[27];
  return v7(v8);
}

uint64_t sub_10022364C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 88) = a7;
  *(void *)(v8 + 96) = v7;
  *(unsigned char *)(v8 + 200) = a4;
  *(void *)(v8 + 72) = a1;
  *(void *)(v8 + 80) = a3;
  uint64_t v11 = type metadata accessor for UUID();
  *(void *)(v8 + 104) = v11;
  *(void *)(v8 + 112) = *(void *)(v11 - 8);
  *(void *)(v8 + 120) = swift_task_alloc();
  uint64_t v12 = sub_10000588C(&qword_10163F788) - 8;
  uint64_t v13 = swift_task_alloc();
  *(void *)(v8 + 128) = v13;
  uint64_t v14 = swift_task_alloc();
  *(void *)(v8 + 136) = v14;
  uint64_t v15 = type metadata accessor for Date();
  *(void *)(v8 + 144) = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)(v8 + 152) = v16;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v17(v14, a5, v15);
  *(void *)(v14 + *(int *)(v12 + 56)) = a6;
  uint64_t v18 = *(int *)(v12 + 56);
  v17(v13, v14, v15);
  *(void *)(v13 + v18) = a6;
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v8 + 160) = v19;
  *uint64_t v19 = v8;
  v19[1] = sub_10022384C;
  return sub_100220DC4(a2, a3, v13, a6);
}

uint64_t sub_10022384C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[21] = a1;
  v3[22] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[12];
    uint64_t v5 = sub_10022405C;
  }
  else
  {
    uint64_t v6 = v3[12];
    (*(void (**)(void, void))(v3[19] + 8))(v3[16], v3[18]);
    uint64_t v5 = sub_100223984;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100223984()
{
  uint64_t v57 = v0;
  uint64_t v1 = v0;
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v1 + 104);
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170D9D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v1 + 168);
  uint64_t v12 = *(void *)(v1 + 112);
  uint64_t v11 = *(void *)(v1 + 120);
  uint64_t v13 = *(void *)(v1 + 104);
  if (v9)
  {
    os_log_type_t v47 = v8;
    os_log_t log = v7;
    uint64_t v51 = (void *)(v1 + 40);
    uint64_t v14 = swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134218755;
    int64_t v15 = *(void *)(v10 + 16);
    *(void *)(v1 + 16) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2160;
    *(void *)(v1 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 22) = 2081;
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v1 + 32) = sub_1008FA0F0(v16, v17, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    uint64_t v46 = (uint8_t *)v14;
    *(_WORD *)(v14 + 32) = 2082;
    if (v15)
    {
      uint64_t v49 = (void *)(v1 + 56);
      unint64_t v50 = (void *)(v1 + 48);
      uint64_t v45 = v1;
      uint64_t v18 = *(void *)(v1 + 168);
      size_t v54 = _swiftEmptyArrayStorage;
      sub_1000B6ED0(0, v15, 0);
      uint64_t v19 = v54;
      uint64_t v20 = (unint64_t *)(v18 + 64);
      do
      {
        int64_t v52 = v15;
        uint64_t v21 = *(v20 - 3);
        uint64_t v23 = *(v20 - 2);
        uint64_t v22 = *(v20 - 1);
        unint64_t v24 = *v20;
        *uint64_t v51 = *(v20 - 4);
        sub_1000361E0(v22, v24);
        uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v56 = v25;
        v26._countAndFlagsBits = 8250;
        v26._object = (void *)0xE200000000000000;
        String.append(_:)(v26);
        *unint64_t v50 = v21;
        v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        v28._countAndFlagsBits = 45;
        v28._object = (void *)0xE100000000000000;
        String.append(_:)(v28);
        *uint64_t v49 = v23;
        v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        sub_10001CFB8(v22, v24);
        uint64_t v30 = v55;
        uint64_t v31 = v56;
        size_t v54 = v19;
        unint64_t v33 = v19[2];
        unint64_t v32 = v19[3];
        if (v33 >= v32 >> 1)
        {
          sub_1000B6ED0(v32 > 1, v33 + 1, 1);
          uint64_t v19 = v54;
        }
        v20 += 5;
        v19[2] = v33 + 1;
        Swift::String v34 = &v19[2 * v33];
        v34[4] = v30;
        v34[5] = v31;
        --v15;
      }
      while (v52 != 1);
      uint64_t v1 = v45;
    }
    uint64_t v35 = Array.description.getter();
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    *(void *)(v1 + 64) = sub_1008FA0F0(v35, v37, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, v47, "Found %ld ranges for circle: %{private,mask.hash}s.\nRanges: %{public}s)", v46, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v12 + 8))(*(void *)(v1 + 120), *(void *)(v1 + 104));
    swift_bridgeObjectRelease_n();
  }
  uint64_t v38 = (void *)swift_task_alloc();
  *(void *)(v1 + 184) = v38;
  *uint64_t v38 = v1;
  v38[1] = sub_100223E80;
  uint64_t v39 = *(void *)(v1 + 168);
  uint64_t v40 = *(void *)(v1 + 88);
  uint64_t v41 = *(void *)(v1 + 72);
  uint64_t v42 = *(void *)(v1 + 80);
  char v43 = *(unsigned char *)(v1 + 200);
  return sub_100214484(v41, v39, v42, v43, v40);
}

uint64_t sub_100223E80()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 96);
  if (v0) {
    uint64_t v4 = sub_100224108;
  }
  else {
    uint64_t v4 = sub_100223FC8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100223FC8()
{
  sub_10001DAB4(*(void *)(v0 + 136), &qword_10163F788);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10022405C()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[16];
  sub_10001DAB4(v0[17], &qword_10163F788);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100224108()
{
  sub_10001DAB4(*(void *)(v0 + 136), &qword_10163F788);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100224198@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10001CD44(a1, v9);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v9);
  sub_1012E7018((uint64_t)v8, 1);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v16 = v11;
  uint64_t v17 = v12;
  uint64_t v18 = v13;
  uint64_t v19 = v14;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *a2 = v16;
  a2[1] = v17;
  a2[2] = v18;
  a2[3] = v19;
  return result;
}

uint64_t sub_100224304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[125] = v5;
  v6[124] = a5;
  v6[123] = a4;
  v6[122] = a2;
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v6[126] = swift_task_alloc();
  v6[127] = type metadata accessor for BeaconPayloadv1();
  v6[128] = swift_task_alloc();
  v6[129] = *(void *)(type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo(0) - 8);
  v6[130] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for HashAlgorithm();
  v6[131] = v7;
  v6[132] = *(void *)(v7 - 8);
  v6[133] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(0);
  v6[134] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[135] = v9;
  v6[136] = *(void *)(v9 + 64);
  v6[137] = swift_task_alloc();
  v6[138] = swift_task_alloc();
  v6[139] = swift_task_alloc();
  v6[140] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for RawSearchResult();
  v6[141] = v10;
  v6[142] = *(void *)(v10 - 8);
  v6[143] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Date();
  v6[144] = v11;
  v6[145] = *(void *)(v11 - 8);
  v6[146] = swift_task_alloc();
  v6[147] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v6[148] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v6[149] = v13;
  v6[150] = *(void *)(v13 + 64);
  v6[151] = swift_task_alloc();
  v6[152] = swift_task_alloc();
  v6[153] = swift_task_alloc();
  sub_10000588C(&qword_101657910);
  v6[154] = swift_task_alloc();
  v6[155] = swift_task_alloc();
  v6[156] = swift_task_alloc();
  v6[157] = swift_task_alloc();
  sub_10000588C(&qword_10163F720);
  v6[158] = swift_task_alloc();
  v6[159] = swift_task_alloc();
  uint64_t v14 = sub_10000588C(&qword_10163F728);
  v6[160] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v6[161] = v15;
  v6[162] = *(void *)(v15 + 64);
  v6[163] = swift_task_alloc();
  v6[164] = swift_task_alloc();
  v6[165] = swift_task_alloc();
  v6[166] = swift_task_alloc();
  v6[167] = swift_task_alloc();
  v6[168] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for Logger();
  v6[169] = v16;
  v6[170] = *(void *)(v16 - 8);
  v6[171] = swift_task_alloc();
  v6[172] = swift_task_alloc();
  v6[173] = swift_task_alloc();
  v6[174] = swift_task_alloc();
  v6[175] = swift_task_alloc();
  v6[176] = swift_task_alloc();
  v6[177] = swift_task_alloc();
  v6[178] = swift_task_alloc();
  v6[179] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101638D10);
  v6[180] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for OwnerSharingCircle();
  v6[181] = v17;
  v6[182] = *(void *)(v17 - 8);
  v6[183] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B7C0);
  v6[184] = swift_task_alloc();
  uint64_t v18 = type metadata accessor for MemberSharingCircle();
  v6[185] = v18;
  v6[186] = *(void *)(v18 - 8);
  v6[187] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v6[188] = swift_task_alloc();
  v6[189] = swift_task_alloc();
  v6[190] = swift_task_alloc();
  uint64_t v19 = type metadata accessor for UUID();
  v6[191] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v6[192] = v20;
  v6[193] = *(void *)(v20 + 64);
  v6[194] = swift_task_alloc();
  v6[195] = swift_task_alloc();
  v6[196] = swift_task_alloc();
  v6[197] = swift_task_alloc();
  uint64_t v21 = type metadata accessor for KeyDropFetchResponse.LocationPayload(0);
  v6[198] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v6[199] = v22;
  v6[200] = *(void *)(v22 + 64);
  v6[201] = swift_task_alloc();
  v6[202] = swift_task_alloc();
  v6[203] = swift_task_alloc();
  v6[204] = swift_task_alloc();
  return _swift_task_switch(sub_100224AD8, v5, 0);
}

uint64_t sub_100224AD8()
{
  uint64_t v314 = v1;
  uint64_t v4 = *(NSObject **)(v1 + 984);
  *(void *)(v1 + 1640) = *(void *)(*(void *)(v1 + 1000) + 136);
  uint64_t v5 = swift_allocObject();
  *(void *)(v1 + 1648) = v5;
  *(void *)(v5 + 16) = _swiftEmptyDictionarySingleton;
  if (v4) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  Class isa = v6[2].isa;
  *(void *)(v1 + 1656) = isa;
  if (isa)
  {
    *(_DWORD *)(v1 + 2016) = *(_DWORD *)(*(void *)(v1 + 1592) + 80);
    swift_bridgeObjectRetain();
    unint64_t v8 = 0;
    do
    {
      *(void *)(v1 + 1664) = v8;
      uint64_t v9 = *(void **)(v1 + 984);
      if (!v9) {
        uint64_t v9 = _swiftEmptyArrayStorage;
      }
      if (v8 >= v9[2])
      {
        __break(1u);
        sub_10001CFB8((uint64_t)v6, (unint64_t)v4);
        v312 = 0;
        unint64_t v313 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        *(void *)(v1 + 744) = 0;
        *(void *)(v1 + 752) = 0xE000000000000000;
        v229._object = (void *)0x80000001013F3B70;
        v229._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v229);
        *(void *)(v1 + 848) = v0;
        sub_10000588C(&qword_101638D40);
        _print_unlocked<A, B>(_:_:)();
        return _assertionFailure(_:_:file:line:flags:)();
      }
      uint64_t v10 = *(void *)(v1 + 1632);
      uint64_t v11 = *(void *)(v1 + 1584);
      uint64_t v12 = *(void *)(v1 + 1536);
      uint64_t v13 = *(void *)(v1 + 1528);
      uint64_t v14 = *(void *)(v1 + 1520);
      sub_10025C504((uint64_t)v9+ ((*(unsigned __int8 *)(v1 + 2016) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 2016))+ *(void *)(*(void *)(v1 + 1592) + 72) * v8, v10, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      uint64_t v6 = *(NSObject **)(v10 + 16);
      *(void *)(v1 + 1672) = v6;
      unint64_t v0 = *(void *)(v10 + 24);
      *(void *)(v1 + 1680) = v0;
      sub_10001D074(v10 + *(int *)(v11 + 28), v14, &qword_101638CF0);
      uint64_t v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
      uint64_t v2 = v12 + 48;
      *(void *)(v1 + 1688) = v15;
      *(void *)(v1 + 1696) = v2 & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
      if (v15(v14, 1, v13) != 1)
      {
        uint64_t v19 = *(void *)(v1 + 1576);
        uint64_t v20 = *(void *)(v1 + 1536);
        uint64_t v21 = *(void *)(v1 + 1528);
        uint64_t v22 = *(void *)(v1 + 1520);
        uint64_t v23 = *(void *)(v1 + 1512);
        uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
        *(void *)(v1 + 1704) = v24;
        *(void *)(v1 + 1712) = (v20 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v24(v19, v22, v21);
        uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
        *(void *)(v1 + 1720) = v25;
        *(void *)(v1 + 1728) = (v20 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v25(v23, v19, v21);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v23, 0, 1, v21);
        sub_1000361E0((uint64_t)v6, v0);
        Swift::String v26 = (void *)swift_task_alloc();
        *(void *)(v1 + 1736) = v26;
        *Swift::String v26 = v1;
        v26[1] = sub_1002280E0;
        uint64_t v27 = *(void *)(v1 + 1512);
        return sub_100257574((uint64_t)v6, v0, v27);
      }
      uint64_t v16 = *(void *)(v1 + 1520);
      sub_1000361E0((uint64_t)v6, v0);
      sub_10001DAB4(v16, &qword_101638CF0);
      if (qword_101636908 != -1) {
        swift_once();
      }
      sub_100010324(*(void *)(v1 + 1352), (uint64_t)qword_10170D9D8);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, v17, "Missing share id in payload.", v18, 2u);
        swift_slowDealloc();
      }
      unint64_t v3 = *(void *)(v1 + 1632);
      sub_10001CFB8((uint64_t)v6, v0);

      sub_10025C56C(v3, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      unint64_t v8 = *(void *)(v1 + 1664) + 1;
    }
    while (v8 != *(void *)(v1 + 1656));
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 976)) {
    unint64_t v29 = *(void *)(v1 + 976);
  }
  else {
    unint64_t v29 = (unint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v291 = *(void *)(v29 + 16);
  if (!v291)
  {
    swift_bridgeObjectRetain();
LABEL_120:
    swift_bridgeObjectRelease();
    uint64_t v212 = *(void *)(v1 + 1648);
    swift_beginAccess();
    uint64_t v306 = *(void *)(v212 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v213 = *(uint64_t (**)(uint64_t))(v1 + 8);
    return v213(v306);
  }
  uint64_t v30 = *(void *)(v1 + 1536);
  uint64_t v31 = *(void *)(v1 + 1360);
  uint64_t v275 = *(void *)(v1 + 1280);
  uint64_t v32 = *(void *)(v1 + 1160);
  uint64_t v278 = *(void *)(v1 + 1120);
  uint64_t v305 = *(void *)(v1 + 1104);
  uint64_t v280 = *(void *)(v1 + 1080);
  uint64_t v33 = *(void *)(v1 + 1056);
  v298 = (void (**)(uint64_t, void, uint64_t))(v33 + 104);
  uint64_t v271 = *(void *)(v1 + 1040);
  v297 = (void (**)(uint64_t, uint64_t))(v33 + 8);
  v277 = (void (**)(void))(v30 + 16);
  uint64_t v279 = *(void *)(v1 + 1032);
  v270 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 1192) + 56);
  v269 = (void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
  v268 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
  v267 = (void (**)(uint64_t))(v30 + 32);
  v265 = (void (**)(uint64_t, uint64_t))(v30 + 8);
  uint64_t v34 = *(void *)(*(void *)(v1 + 992) + 16);
  v289 = (void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16);
  v282 = (void (**)(uint64_t, uint64_t))(v31 + 8);
  unsigned int v296 = enum case for HashAlgorithm.sha256(_:);
  unint64_t v293 = v29 + 32;
  uint64_t v264 = *(void *)(v1 + 1288);
  v266 = *(int **)(v1 + 1016);
  swift_bridgeObjectRetain();
  unint64_t v35 = 0;
  uint64_t v290 = v34;
  unint64_t v281 = v29;
  while (1)
  {
    if (v35 >= *(void *)(v29 + 16)) {
      goto LABEL_141;
    }
    unint64_t v292 = v35;
    unint64_t v36 = (uint64_t *)(v293 + 24 * v35);
    uint64_t v37 = *v36;
    unint64_t v3 = v36[1];
    uint64_t v38 = v36[2];
    if (v34) {
      break;
    }
    sub_1000361E0(*v36, v36[1]);
    swift_bridgeObjectRetain();
LABEL_88:
    if (qword_101636908 != -1) {
      swift_once();
    }
    uint64_t v82 = *(void *)(v1 + 1376);
    uint64_t v83 = *(void *)(v1 + 1352);
    uint64_t v84 = sub_100010324(v83, (uint64_t)qword_10170D9D8);
    (*v289)(v82, v84, v83);
    sub_1000361E0(v37, v3);
    swift_bridgeObjectRetain();
    sub_1000361E0(v37, v3);
    swift_bridgeObjectRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.error.getter();
    BOOL v86 = os_log_type_enabled((os_log_t)v2, v85);
    uint64_t v87 = *(void *)(v1 + 1376);
    uint64_t v88 = *(void *)(v1 + 1352);
    if (v86)
    {
      unint64_t v89 = v3;
      unint64_t v3 = swift_slowAlloc();
      v312 = (uint64_t (*)())swift_slowAlloc();
      *(_DWORD *)unint64_t v3 = 141558275;
      *(void *)(v3 + 4) = 1752392040;
      *(_WORD *)(v3 + 12) = 2081;
      *(void *)(v1 + 728) = v37;
      *(void *)(v1 + 736) = v89;
      sub_1001D780C();
      uint64_t v90 = RawRepresentable<>.hexString.getter();
      *(void *)(v3 + 14) = sub_1008FA0F0(v90, v91, (uint64_t *)&v312);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v37, v89);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v37, v89);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v2, v85, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v3, 0x16u);
      swift_arrayDestroy();
      unint64_t v29 = v281;
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10001CFB8(v37, v89);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10001CFB8(v37, v3);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v37, v3);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v37, v3);
      swift_bridgeObjectRelease();
    }
    (*v282)(v87, v88);
    uint64_t v34 = v290;
LABEL_94:
    unint64_t v35 = v292 + 1;
    if (v292 + 1 == v291) {
      goto LABEL_120;
    }
  }
  uint64_t v39 = *(void *)(v1 + 992);
  unint64_t v301 = v3 >> 62;
  sub_1000361E0(v37, v3);
  uint64_t v40 = *(unsigned __int8 *)(v280 + 80);
  uint64_t v272 = ~v40;
  uint64_t v274 = v40;
  uint64_t v41 = v39 + ((v40 + 32) & ~v40);
  uint64_t v299 = BYTE6(v3);
  uint64_t v294 = *(void *)(v280 + 72);
  BOOL v42 = __OFSUB__(HIDWORD(v37), v37);
  BOOL v287 = v42;
  uint64_t v283 = HIDWORD(v37) - (int)v37;
  uint64_t v276 = v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v43 = v34;
  unint64_t v307 = v3;
  uint64_t v308 = v37;
  while (2)
  {
    unint64_t v44 = *(uint64_t **)(v1 + 1104);
    sub_10025C504(v41, (uint64_t)v44, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v45 = *v44;
    unint64_t v46 = *(void *)(v305 + 8);
    unint64_t v47 = v46 >> 62;
    uint64_t v2 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    switch(v46 >> 62)
    {
      case 1uLL:
        uint64_t v2 = (int)v45;
        uint64_t v48 = v45 >> 32;
        sub_1000361E0(v45, *(void *)(v305 + 8));
        uint64_t v49 = v45 >> 32;
        uint64_t v50 = (int)v45;
        break;
      case 2uLL:
        uint64_t v2 = *(void *)(v45 + 16);
        uint64_t v48 = *(void *)(v45 + 24);
        sub_1000361E0(v45, *(void *)(v305 + 8));
        uint64_t v50 = *(void *)(v45 + 16);
        uint64_t v49 = *(void *)(v45 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v2 = 0;
        uint64_t v50 = 0;
        uint64_t v48 = BYTE6(v46);
        uint64_t v49 = BYTE6(v46);
        break;
    }
    if (v49 < v2 || v2 < v50)
    {
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
      swift_once();
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v214 = swift_allocObject();
      uint64_t v215 = sub_1004B810C(v214, 1);
      v217 = v216;
      *(void *)(v1 + 888) = v3;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v218 = String.init<A>(describing:)();
      uint64_t v220 = v219;
      v217[3] = (uint64_t)&type metadata for String;
      v217[4] = sub_10000B4CC();
      uint64_t *v217 = v218;
      v217[1] = v220;
      SharingCircleWildAdvertisementKey.init(key:)(v215);
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_100130148();
      uint64_t v225 = swift_allocError();
      unsigned char *v221 = 0;
      swift_willThrow();
      swift_errorRelease();
      unint64_t v63 = v29;
      uint64_t v61 = v2;
      goto LABEL_132;
    }
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    switch((int)v47)
    {
      case 1:
        uint64_t v52 = (int)v45;
        uint64_t v51 = v45 >> 32;
        break;
      case 2:
        uint64_t v52 = *(void *)(v45 + 16);
        uint64_t v51 = *(void *)(v45 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v52 = 0;
        uint64_t v51 = BYTE6(v46);
        break;
    }
    if (v51 < v48 || v48 < v52) {
      goto LABEL_136;
    }
    if (__OFSUB__(v48, v2)) {
      goto LABEL_137;
    }
    if ((unint64_t)(v48 - v2) < 0x39)
    {
      switch((int)v47)
      {
        case 1:
          uint64_t v53 = v45 >> 32;
          goto LABEL_50;
        case 2:
          uint64_t v53 = *(void *)(v45 + 24);
          goto LABEL_52;
        default:
          goto LABEL_54;
      }
    }
    uint64_t v53 = sub_1008AA520(v2, 57, v45, v46);
    uint64_t v54 = 0;
    switch((int)v47)
    {
      case 1:
LABEL_50:
        uint64_t v54 = (int)v45;
        break;
      case 2:
LABEL_52:
        uint64_t v54 = *(void *)(v45 + 16);
        break;
      default:
        break;
    }
    if (v53 < v54) {
      goto LABEL_138;
    }
LABEL_54:
    uint64_t v2 = Data._Representation.subscript.getter();
    unint64_t v29 = v55;
    sub_10001CFB8(v45, v46);
    switch(v29 >> 62)
    {
      case 1uLL:
        LODWORD(v56) = HIDWORD(v2) - v2;
        if (__OFSUB__(HIDWORD(v2), v2)) {
          goto LABEL_139;
        }
        uint64_t v56 = (int)v56;
LABEL_59:
        if (v56 != 57)
        {
LABEL_123:
          sub_10001CFB8(v2, v29);
          return _assertionFailure(_:_:file:line:flags:)();
        }
        break;
      case 2uLL:
        uint64_t v58 = *(void *)(v2 + 16);
        uint64_t v57 = *(void *)(v2 + 24);
        BOOL v59 = __OFSUB__(v57, v58);
        uint64_t v56 = v57 - v58;
        if (!v59) {
          goto LABEL_59;
        }
        goto LABEL_140;
      case 3uLL:
        goto LABEL_123;
      default:
        uint64_t v56 = BYTE6(v29);
        goto LABEL_59;
    }
    sub_1000361E0(v2, v29);
    uint64_t v60 = sub_100A948F8(v2, v29);
    uint64_t v61 = sub_100A90C58(v60, 0);
    unint64_t v63 = v62;
    CCECCryptorRelease();
    sub_10001CFB8(v2, v29);
    unint64_t v64 = v63 >> 62;
    unint64_t v3 = v307;
    switch(v63 >> 62)
    {
      case 1uLL:
        LODWORD(v65) = HIDWORD(v61) - v61;
        if (__OFSUB__(HIDWORD(v61), v61)) {
          goto LABEL_142;
        }
        uint64_t v65 = (int)v65;
LABEL_65:
        if (v65 == 28)
        {
          uint64_t v68 = *(void *)(v1 + 1064);
          uint64_t v69 = *(void *)(v1 + 1048);
          sub_10001CFB8(v2, v29);
          (*v298)(v68, v296, v69);
          uint64_t v2 = Data.hash(algorithm:)();
          unint64_t v29 = v70;
          (*v297)(v68, v69);
          sub_10001CFB8(v61, v63);
          uint64_t v71 = 0;
          uint64_t v37 = v308;
          switch(v29 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v2), v2)) {
                goto LABEL_144;
              }
              uint64_t v71 = HIDWORD(v2) - (int)v2;
LABEL_71:
              sub_1000361E0(v2, v29);
              break;
            case 2uLL:
              uint64_t v73 = *(void *)(v2 + 16);
              uint64_t v72 = *(void *)(v2 + 24);
              uint64_t v71 = v72 - v73;
              if (!__OFSUB__(v72, v73)) {
                goto LABEL_71;
              }
              goto LABEL_145;
            case 3uLL:
              break;
            default:
              uint64_t v71 = BYTE6(v29);
              break;
          }
          uint64_t v74 = v299;
          switch((int)v301)
          {
            case 1:
              uint64_t v74 = v283;
              if (v287) {
                goto LABEL_146;
              }
              goto LABEL_76;
            case 2:
              uint64_t v76 = *(void *)(v308 + 16);
              uint64_t v75 = *(void *)(v308 + 24);
              BOOL v59 = __OFSUB__(v75, v76);
              uint64_t v74 = v75 - v76;
              if (!v59) {
                goto LABEL_76;
              }
              goto LABEL_147;
            case 3:
              if (v71) {
                goto LABEL_31;
              }
              goto LABEL_97;
            default:
LABEL_76:
              if (v71 == v74)
              {
                if (v71 >= 1)
                {
                  sub_1000361E0(v308, v307);
                  sub_1000361E0(v308, v307);
                  switch(v29 >> 62)
                  {
                    case 1uLL:
                      if (v2 >> 32 < (int)v2) {
                        goto LABEL_149;
                      }
                      sub_1000361E0(v308, v307);
                      sub_1000361E0(v308, v307);
                      sub_1000361E0(v308, v307);
                      sub_1000361E0(v2, v29);
                      sub_1000361E0(v308, v307);
                      uint64_t v37 = v308;
                      char v79 = sub_100BFBE64((int)v2, v2 >> 32, v29 & 0x3FFFFFFFFFFFFFFFLL, v308, v307);
                      sub_10001CFB8(v308, v307);
                      sub_10001CFB8(v2, v29);
                      break;
                    case 2uLL:
                      uint64_t v80 = *(void *)(v2 + 16);
                      uint64_t v81 = *(void *)(v2 + 24);
                      sub_1000361E0(v308, v307);
                      sub_1000361E0(v308, v307);
                      sub_1000361E0(v308, v307);
                      sub_1000361E0(v308, v307);
                      swift_retain();
                      swift_retain();
                      char v79 = sub_100BFBE64(v80, v81, v29 & 0x3FFFFFFFFFFFFFFFLL, v308, v307);
                      sub_10001CFB8(v308, v307);
                      swift_release();
                      swift_release();
                      break;
                    case 3uLL:
                      sub_1000361E0(v308, v307);
                      sub_1000361E0(v308, v307);
                      sub_1000361E0(v308, v307);
                      sub_1000361E0(v308, v307);
                      unint64_t v77 = v263 & 0xFF00000000000000;
                      uint64_t v78 = 0;
                      v263 &= 0xFF00000000000000;
                      goto LABEL_84;
                    default:
                      sub_1000361E0(v308, v307);
                      sub_1000361E0(v308, v307);
                      sub_1000361E0(v308, v307);
                      sub_1000361E0(v308, v307);
                      unint64_t v77 = v262 & 0xFF00000000000000 | v29 & 0xFFFFFFFFFFFFFFLL;
                      uint64_t v78 = v2;
                      unint64_t v262 = v77;
LABEL_84:
                      char v79 = sub_100BFBD8C(v78, v77, v308, v307);
                      sub_10001CFB8(v308, v307);
                      break;
                  }
                  sub_10001CFB8(v2, v29);
                  sub_10001CFB8(v37, v307);
                  sub_10001CFB8(v2, v29);
                  sub_10001CFB8(v37, v307);
                  sub_10001CFB8(v37, v307);
                  sub_10001CFB8(v37, v307);
                  sub_10001CFB8(v37, v307);
                  if (v79) {
                    goto LABEL_98;
                  }
                  goto LABEL_32;
                }
LABEL_97:
                sub_10001CFB8(v2, v29);
                sub_10001CFB8(v2, v29);
LABEL_98:
                uint64_t v92 = *(void *)(v1 + 1120);
                uint64_t v93 = *(void *)(v1 + 1112);
                uint64_t v94 = *(void *)(v1 + 1104);
                swift_bridgeObjectRelease();
                sub_10025C5CC(v94, v93, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                sub_10025C5CC(v93, v92, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                uint64_t v261 = sub_1001340BC(v276);
                if (!v261)
                {
                  swift_bridgeObjectRetain();
                  unint64_t v29 = v281;
                  uint64_t v34 = v290;
                  uint64_t v149 = v308;
LABEL_118:
                  uint64_t v211 = *(void *)(v1 + 1120);
                  sub_10001CFB8(v149, v3);
                  swift_bridgeObjectRelease_n();
                  sub_10025C56C(v211, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                  goto LABEL_94;
                }
                unint64_t v288 = v276
                     + ((*(unsigned __int8 *)(v279 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v279 + 80));
                uint64_t v273 = (v274 + 16) & v272;
                swift_bridgeObjectRetain();
                uint64_t v95 = 0;
                while (1)
                {
                  if (__OFADD__(v95, 1)) {
                    goto LABEL_148;
                  }
                  uint64_t v295 = v95 + 1;
                  uint64_t v96 = *(uint64_t **)(v1 + 1120);
                  uint64_t v300 = v95;
                  sub_10025C504(v288 + *(void *)(v279 + 72) * v95, *(void *)(v1 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                  uint64_t v97 = *v96;
                  unint64_t v98 = *(void *)(v278 + 8);
                  SecKeyRef v99 = sub_100435E70(v97, v98);
                  uint64_t v100 = **(void **)(v1 + 1040);
                  unint64_t v101 = *(void *)(v271 + 8);
                  uint64_t v102 = PrivateKey.publicKey.getter(v97, v98);
                  unint64_t v104 = v103;
                  sub_1000361E0(v102, v103);
                  uint64_t v105 = sub_100A94760(v102, v104);
                  unint64_t v107 = v106;
                  sub_10001CFB8(v102, v104);
                  sub_100434E0C(v105, v107, (uint64_t *)&v312);
                  uint64_t v108 = *(void *)(v1 + 1024);
                  sub_10001CFB8(v102, v104);
                  v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v312;
                  unint64_t v109 = v313;
                  v111 = v99;
                  sub_1000361E0(v100, v101);
                  sub_1000361E0((uint64_t)v110, v109);
                  BeaconPayloadv1.init(using:data:advertisement:)(v111, v100, v101, (uint64_t)v110, v109, v108);
                  v243 = v111;
                  uint64_t v251 = *(void *)(v1 + 1528);
                  uint64_t v255 = *(void *)(v1 + 1560);
                  uint64_t v258 = *(void *)(v1 + 1280);
                  uint64_t v112 = *(void *)(v1 + 1264);
                  uint64_t v113 = *(void *)(v1 + 1240);
                  unint64_t v247 = v109;
                  uint64_t v114 = *(void *)(v1 + 1232);
                  uint64_t v115 = *(void *)(v1 + 1184);
                  uint64_t v284 = (uint64_t)v110;
                  uint64_t v116 = *(void *)(v1 + 1168);
                  uint64_t v117 = *(void *)(v1 + 1152);
                  v244 = *(unsigned char **)(v1 + 1144);
                  uint64_t v118 = *(void *)(v1 + 1024);
                  uint64_t v119 = *(void *)(v1 + 1008);
                  v302 = *v277;
                  (*v277)();
                  (*v270)(v113, 1, 1, v115);
                  LODWORD(v115) = *(unsigned __int8 *)(v118 + v266[10]);
                  (*v269)(v116, v118 + v266[5], v117);
                  double v120 = *(double *)(v118 + v266[7]);
                  double v121 = *(double *)(v118 + v266[8]);
                  double v122 = *(double *)(v118 + v266[9]);
                  (*v268)(v119, 1, 1, v117);
                  sub_10001D074(v113, v114, &qword_101657910);
                  sub_100CC2A6C(v115, v116, 15, v119, v114, 256, v244, v120, v121, v122);
                  sub_10001DAB4(v113, &qword_101657910);
                  sub_10025C56C(v118, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                  uint64_t v123 = v112 + *(int *)(v275 + 48);
                  v124 = *v267;
                  ((void (*)(uint64_t, uint64_t, uint64_t))*v267)(v112, v255, v251);
                  sub_10025C5CC((uint64_t)v244, v123, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v264 + 56))(v112, 0, 1, v258);
                  sub_10001CFB8(v284, v247);
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v264 + 48))(v112, 1, v258) == 1)
                  {
                    uint64_t v125 = *(void *)(v1 + 1264);

                    sub_10001DAB4(v125, &qword_10163F720);
                    if (qword_101636908 != -1) {
                      swift_once();
                    }
                    uint64_t v126 = *(void *)(v1 + 1384);
                    uint64_t v127 = *(void *)(v1 + 1352);
                    uint64_t v128 = *(void *)(v1 + 1120);
                    uint64_t v129 = *(void *)(v1 + 1096);
                    uint64_t v130 = sub_100010324(v127, (uint64_t)qword_10170D9D8);
                    (*v289)(v126, v130, v127);
                    sub_10025C504(v128, v129, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                    uint64_t v131 = swift_allocObject();
                    sub_10025C5CC(v129, v131 + v273, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                    uint64_t v132 = swift_allocObject();
                    *(void *)(v132 + 16) = sub_10025B340;
                    *(void *)(v132 + 24) = v131;
                    v303 = Logger.logObject.getter();
                    os_log_type_t v133 = static os_log_type_t.error.getter();
                    uint64_t v134 = swift_allocObject();
                    *(unsigned char *)(v134 + 16) = 112;
                    uint64_t v2 = swift_allocObject();
                    *(unsigned char *)(v2 + 16) = 8;
                    uint64_t v135 = swift_allocObject();
                    *(void *)(v135 + 16) = 1752392040;
                    uint64_t v136 = swift_allocObject();
                    *(void *)(v136 + 16) = sub_100060540;
                    *(void *)(v136 + 24) = v135;
                    uint64_t v137 = swift_allocObject();
                    *(unsigned char *)(v137 + 16) = 33;
                    uint64_t v138 = swift_allocObject();
                    *(unsigned char *)(v138 + 16) = 8;
                    uint64_t v139 = swift_allocObject();
                    *(void *)(v139 + 16) = sub_1000604E8;
                    *(void *)(v139 + 24) = v132;
                    uint64_t v140 = swift_allocObject();
                    *(void *)(v140 + 16) = sub_10005F790;
                    *(void *)(v140 + 24) = v139;
                    sub_10000588C(&qword_101639B60);
                    uint64_t inited = swift_initStackObject();
                    sub_1004B810C(inited, 6);
                    void *v142 = sub_10005F778;
                    v142[1] = v134;
                    v142[2] = sub_100065514;
                    v142[3] = v2;
                    v142[4] = sub_10006000C;
                    v142[5] = v136;
                    v142[6] = sub_100065514;
                    v142[7] = v137;
                    v142[8] = sub_100065514;
                    v142[9] = v138;
                    v142[10] = sub_10005F7D0;
                    v142[11] = v140;
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_bridgeObjectRelease();
                    if (os_log_type_enabled(v303, v133))
                    {
                      v143 = (uint8_t *)swift_slowAlloc();
                      uint64_t v144 = swift_slowAlloc();
                      uint64_t v310 = 0;
                      uint64_t v311 = v144;
                      *(_WORD *)v143 = 515;
                      v309 = v143 + 2;
                      sub_1008FA6E0(&v309, (uint64_t)&v310, (uint64_t)&v311, 112);
                      swift_release();
                      v312 = sub_100065514;
                      unint64_t v313 = v2;
                      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                      swift_release();
                      v312 = (uint64_t (*)())sub_10006000C;
                      unint64_t v313 = v136;
                      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                      swift_release();
                      v312 = sub_100065514;
                      unint64_t v313 = v137;
                      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                      swift_release();
                      v312 = sub_100065514;
                      unint64_t v313 = v138;
                      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                      swift_release();
                      v312 = (uint64_t (*)())sub_10005F7D0;
                      unint64_t v313 = v140;
                      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                      uint64_t v145 = *(void *)(v1 + 1384);
                      uint64_t v146 = *(void *)(v1 + 1352);
                      swift_release();
                      _os_log_impl((void *)&_mh_execute_header, v303, v133, "Could not create search result for beacon: %{private,mask.hash}s.", v143, 0x16u);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      sub_1008F9FA0();

                      (*v282)(v145, v146);
                    }
                    else
                    {
                      uint64_t v147 = *(void *)(v1 + 1384);
                      uint64_t v148 = *(void *)(v1 + 1352);
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();

                      (*v282)(v147, v148);
                    }
                    unint64_t v3 = v307;
                  }
                  else
                  {
                    uint64_t v150 = *(void *)(v1 + 1648);
                    uint64_t v151 = *(void *)(v1 + 1528);
                    uint64_t v152 = *(void *)(v1 + 1320);
                    uint64_t v153 = *(void *)(v1 + 1312);
                    uint64_t v154 = *(int *)(v275 + 48);
                    uint64_t v155 = v152 + v154;
                    uint64_t v156 = *(void *)(v1 + 1264) + v154;
                    v124(v152);
                    sub_10025C5CC(v156, v155, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    uint64_t v157 = v153 + *(int *)(v275 + 48);
                    ((void (*)(uint64_t, uint64_t, uint64_t))v302)(v153, v152, v151);
                    uint64_t v259 = v155;
                    sub_10025C504(v155, v157, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    swift_beginAccess();
                    v158 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000F790C(v153, *(void *)(v150 + 16));
                    uint64_t v159 = *(void *)(v1 + 1528);
                    uint64_t v160 = *(void *)(v1 + 1328);
                    uint64_t v161 = *(void *)(v1 + 1320);
                    uint64_t v162 = *(void *)(v1 + 1312);
                    if (v158)
                    {
                      uint64_t v252 = *(void *)(v1 + 1144);
                      v312 = (uint64_t (*)())v158;
                      swift_endAccess();
                      sub_10025C56C(v157, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                      v245 = *v265;
                      (*v265)(v162, v159);
                      v163 = (unsigned __int8 *)(v160 + *(int *)(v275 + 48));
                      ((void (*)(uint64_t, uint64_t, uint64_t))v302)(v160, v161, v159);
                      sub_10025C504(v155, (uint64_t)v163, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                      sub_1000D1E3C(v252, v163);
                      sub_10025C56C(v252, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                      v245(v160, v159);
                      uint64_t v164 = v160 + *(int *)(v275 + 48);
                      ((void (*)(uint64_t, uint64_t, uint64_t))v302)(v160, v161, v159);
                      sub_10025C504(v155, v164, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                      v165 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v312;
                      swift_beginAccess();
                      sub_10015DF64((uint64_t)v165, v160);
                      swift_endAccess();
                      sub_10025C56C(v164, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    }
                    else
                    {
                      uint64_t v238 = *(void *)(v1 + 1304);
                      swift_endAccess();
                      sub_10025C56C(v157, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                      v241 = *v265;
                      (*v265)(v162, v159);
                      uint64_t v166 = v160 + *(int *)(v275 + 48);
                      uint64_t v248 = v166;
                      ((void (*)(uint64_t, uint64_t, uint64_t))v302)(v160, v161, v159);
                      sub_10025C504(v155, v166, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                      sub_10000588C(&qword_10163AA18);
                      uint64_t v167 = swift_allocObject();
                      uint64_t v235 = sub_1004B7688(v167, 1);
                      uint64_t v169 = v168;
                      uint64_t v170 = v238 + *(int *)(v275 + 48);
                      ((void (*)(uint64_t, uint64_t, uint64_t))v302)(v238, v161, v159);
                      sub_10025C504(v155, v170, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                      sub_10025C5CC(v170, v169, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                      uint64_t v171 = SharingCircleWildAdvertisementKey.init(key:)(v235);
                      v241(v238, v159);
                      uint64_t v172 = sub_101158D6C(v171);
                      swift_bridgeObjectRelease();
                      swift_beginAccess();
                      sub_10015DF64(v172, v160);
                      swift_endAccess();
                      sub_10025C56C(v248, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    }
                    uint64_t v253 = *(void *)(v1 + 1648);
                    uint64_t v173 = *(void *)(v1 + 1528);
                    uint64_t v174 = *(void *)(v1 + 1392);
                    uint64_t v175 = *(void *)(v1 + 1352);
                    uint64_t v176 = *(void *)(v1 + 1328);
                    uint64_t v285 = *(void *)(v1 + 1320);
                    uint64_t v177 = *(void *)(v1 + 1120);
                    uint64_t v178 = *(void *)(v1 + 1096);
                    uint64_t v179 = sub_100207468();
                    (*v289)(v174, v179, v175);
                    sub_10025C504(v177, v178, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                    uint64_t v180 = swift_allocObject();
                    sub_10025C5CC(v178, v180 + v273, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                    uint64_t v256 = swift_allocObject();
                    *(void *)(v256 + 16) = sub_10025B340;
                    *(void *)(v256 + 24) = v180;
                    uint64_t v181 = v176 + *(int *)(v275 + 48);
                    ((void (*)(uint64_t, uint64_t, uint64_t))v302)(v176, v285, v173);
                    sub_10025C504(v259, v181, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    uint64_t v182 = *(unsigned __int8 *)(v264 + 80);
                    uint64_t v183 = (v182 + 16) & ~v182;
                    uint64_t v184 = swift_allocObject();
                    sub_10001D608(v176, v184 + v183, &qword_10163F728);
                    uint64_t v249 = swift_allocObject();
                    *(void *)(v249 + 16) = sub_10025B4F4;
                    *(void *)(v249 + 24) = v184;
                    uint64_t v185 = v176 + *(int *)(v275 + 48);
                    ((void (*)(uint64_t, uint64_t, uint64_t))v302)(v176, v285, v173);
                    sub_10025C504(v259, v185, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    uint64_t v186 = swift_allocObject();
                    sub_10001D608(v176, v186 + v183, &qword_10163F728);
                    uint64_t v239 = swift_allocObject();
                    *(void *)(v239 + 16) = sub_10025B504;
                    *(void *)(v239 + 24) = v186;
                    uint64_t v187 = v176 + *(int *)(v275 + 48);
                    ((void (*)(uint64_t, uint64_t, uint64_t))v302)(v176, v285, v173);
                    sub_10025C504(v259, v187, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    uint64_t v188 = swift_allocObject();
                    *(void *)(v188 + 16) = v253;
                    sub_10001D608(v176, v188 + ((v182 + 24) & ~v182), &qword_10163F728);
                    swift_retain();
                    osos_log_t log = (os_log_t)Logger.logObject.getter();
                    os_log_type_t v236 = static os_log_type_t.info.getter();
                    uint64_t v254 = swift_allocObject();
                    *(unsigned char *)(v254 + 16) = 112;
                    uint64_t v286 = swift_allocObject();
                    *(unsigned char *)(v286 + 16) = 8;
                    uint64_t v189 = swift_allocObject();
                    *(void *)(v189 + 16) = 1752392040;
                    uint64_t v304 = swift_allocObject();
                    *(void *)(v304 + 16) = sub_10006550C;
                    *(void *)(v304 + 24) = v189;
                    uint64_t v246 = swift_allocObject();
                    *(unsigned char *)(v246 + 16) = 33;
                    uint64_t v190 = swift_allocObject();
                    *(unsigned char *)(v190 + 16) = 8;
                    uint64_t v191 = v190;
                    uint64_t v192 = swift_allocObject();
                    *(void *)(v192 + 16) = sub_1000654F4;
                    *(void *)(v192 + 24) = v256;
                    uint64_t v193 = swift_allocObject();
                    *(void *)(v193 + 16) = sub_1000654EC;
                    *(void *)(v193 + 24) = v192;
                    uint64_t v260 = swift_allocObject();
                    *(unsigned char *)(v260 + 16) = 34;
                    uint64_t v233 = swift_allocObject();
                    *(unsigned char *)(v233 + 16) = 8;
                    uint64_t v194 = swift_allocObject();
                    *(void *)(v194 + 16) = sub_10025B4F8;
                    *(void *)(v194 + 24) = v249;
                    uint64_t v257 = swift_allocObject();
                    *(void *)(v257 + 16) = sub_1000654EC;
                    *(void *)(v257 + 24) = v194;
                    uint64_t v242 = swift_allocObject();
                    *(unsigned char *)(v242 + 16) = 34;
                    uint64_t v250 = swift_allocObject();
                    *(unsigned char *)(v250 + 16) = 8;
                    uint64_t v195 = swift_allocObject();
                    *(void *)(v195 + 16) = sub_10025B508;
                    *(void *)(v195 + 24) = v239;
                    uint64_t v196 = swift_allocObject();
                    *(void *)(v196 + 16) = sub_1000654EC;
                    *(void *)(v196 + 24) = v195;
                    uint64_t v197 = swift_allocObject();
                    *(unsigned char *)(v197 + 16) = 0;
                    uint64_t v198 = v197;
                    uint64_t v240 = swift_allocObject();
                    *(unsigned char *)(v240 + 16) = 8;
                    uint64_t v199 = swift_allocObject();
                    *(void *)(v199 + 16) = sub_10025B514;
                    *(void *)(v199 + 24) = v188;
                    uint64_t v200 = swift_allocObject();
                    *(void *)(v200 + 16) = sub_100060004;
                    *(void *)(v200 + 24) = v199;
                    sub_10000588C(&qword_101639B60);
                    uint64_t v201 = swift_allocObject();
                    sub_1004B810C(v201, 15);
                    void *v202 = sub_100065514;
                    v202[1] = v254;
                    v202[2] = sub_100065514;
                    v202[3] = v286;
                    v202[4] = sub_100065504;
                    v202[5] = v304;
                    v202[6] = sub_100065514;
                    v202[7] = v246;
                    v202[8] = sub_100065514;
                    v202[9] = v191;
                    unint64_t v203 = v191;
                    v202[10] = sub_100065500;
                    v202[11] = v193;
                    v202[12] = sub_100065514;
                    v202[13] = v260;
                    v202[14] = sub_100065514;
                    v202[15] = v233;
                    v202[16] = sub_100065500;
                    v202[17] = v257;
                    v202[18] = sub_100065514;
                    v202[19] = v242;
                    v202[20] = sub_100065514;
                    v202[21] = v250;
                    v202[22] = sub_100065500;
                    v202[23] = v196;
                    uint64_t v204 = v196;
                    v202[24] = sub_100065514;
                    v202[25] = v198;
                    uint64_t v2 = v198;
                    v202[26] = sub_100065514;
                    v202[27] = v240;
                    v202[28] = sub_10006000C;
                    v202[29] = v200;
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    swift_bridgeObjectRelease();
                    if (!os_log_type_enabled(oslog, v236))
                    {
                      uint64_t v232 = *(void *)(v1 + 1392);
                      uint64_t v210 = *(void *)(v1 + 1352);
                      uint64_t v237 = *(void *)(v1 + 1320);

                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      (*v282)(v232, v210);
                      sub_10001DAB4(v237, &qword_10163F728);
                      unint64_t v29 = v281;
                      unint64_t v3 = v307;
                      goto LABEL_109;
                    }
                    unint64_t v231 = v204;
                    uint64_t v205 = sub_1008F9FAC();
                    uint64_t v206 = swift_slowAlloc();
                    uint64_t v310 = 0;
                    uint64_t v311 = v206;
                    buf = (uint8_t *)v205;
                    *(_WORD *)uint64_t v205 = 1283;
                    v309 = (unsigned char *)(v205 + 2);
                    v312 = sub_100065514;
                    unint64_t v313 = v254;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                    unint64_t v3 = v307;
                    swift_release();
                    v312 = sub_100065514;
                    unint64_t v313 = v286;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                    swift_release();
                    v312 = (uint64_t (*)())sub_100065504;
                    unint64_t v313 = v304;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                    swift_release();
                    v312 = sub_100065514;
                    unint64_t v313 = v246;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                    swift_release();
                    v312 = sub_100065514;
                    unint64_t v313 = v203;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                    swift_release();
                    v312 = sub_100065500;
                    unint64_t v313 = v193;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                    swift_release();
                    v312 = sub_100065514;
                    unint64_t v313 = v260;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                    swift_release();
                    v312 = sub_100065514;
                    unint64_t v313 = v233;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                    swift_release();
                    v312 = sub_100065500;
                    unint64_t v313 = v257;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                    swift_release();
                    v312 = sub_100065514;
                    unint64_t v313 = v242;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                    swift_release();
                    v312 = sub_100065514;
                    unint64_t v313 = v250;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                    swift_release();
                    v312 = sub_100065500;
                    unint64_t v313 = v231;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                    swift_release();
                    v312 = sub_100065514;
                    unint64_t v313 = v2;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                    swift_release();
                    v312 = sub_100065514;
                    unint64_t v313 = v240;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                    swift_release();
                    v312 = (uint64_t (*)())sub_10006000C;
                    unint64_t v313 = v200;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v312, (uint64_t)&v309, (uint64_t)&v310, (uint64_t)&v311);
                    uint64_t v207 = *(void *)(v1 + 1392);
                    uint64_t v208 = *(void *)(v1 + 1352);
                    uint64_t v209 = *(void *)(v1 + 1320);
                    swift_release();
                    uint64_t v2 = (uint64_t)oslog;
                    _os_log_impl((void *)&_mh_execute_header, oslog, v236, "Return search result for beacon (own beacon): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", buf, 0x34u);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    sub_1008F9FA0();

                    (*v282)(v207, v208);
                    sub_10001DAB4(v209, &qword_10163F728);
                  }
                  unint64_t v29 = v281;
LABEL_109:
                  sub_10025C56C(*(void *)(v1 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                  uint64_t v95 = v300 + 1;
                  uint64_t v34 = v290;
                  uint64_t v149 = v308;
                  if (v295 == v261) {
                    goto LABEL_118;
                  }
                }
              }
LABEL_31:
              sub_10001CFB8(v2, v29);
              sub_10001CFB8(v2, v29);
LABEL_32:
              sub_10025C56C(*(void *)(v1 + 1104), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
              v41 += v294;
              if (!--v43)
              {
                swift_bridgeObjectRelease();
                unint64_t v29 = v281;
                goto LABEL_88;
              }
              break;
          }
          continue;
        }
        if (v64)
        {
          if (v64 == 1)
          {
            if (!__OFSUB__(HIDWORD(v61), v61))
            {
              uint64_t v222 = HIDWORD(v61) - (int)v61;
              goto LABEL_131;
            }
            __break(1u);
LABEL_151:
            __break(1u);
            JUMPOUT(0x100228050);
          }
          uint64_t v224 = *(void *)(v61 + 16);
          uint64_t v223 = *(void *)(v61 + 24);
          uint64_t v222 = v223 - v224;
          if (__OFSUB__(v223, v224)) {
            goto LABEL_151;
          }
        }
        else
        {
          uint64_t v222 = BYTE6(v63);
        }
LABEL_131:
        sub_10013019C();
        uint64_t v225 = swift_allocError();
        *(void *)uint64_t v226 = 28;
        *(void *)(v226 + 8) = v222;
        *(unsigned char *)(v226 + 16) = 0;
        swift_willThrow();
LABEL_132:
        sub_10001CFB8(v61, v63);
        v312 = 0;
        unint64_t v313 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        unint64_t v227 = v313;
        *(void *)(v1 + 680) = v312;
        *(void *)(v1 + 688) = v227;
        v228._object = (void *)0x80000001013F3B70;
        v228._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v228);
        *(void *)(v1 + 872) = v225;
        sub_10000588C(&qword_101638D40);
        _print_unlocked<A, B>(_:_:)();
        return _assertionFailure(_:_:file:line:flags:)();
      case 2uLL:
        uint64_t v67 = *(void *)(v61 + 16);
        uint64_t v66 = *(void *)(v61 + 24);
        BOOL v59 = __OFSUB__(v66, v67);
        uint64_t v65 = v66 - v67;
        if (!v59) {
          goto LABEL_65;
        }
        goto LABEL_143;
      case 3uLL:
        uint64_t v222 = 0;
        goto LABEL_131;
      default:
        uint64_t v65 = BYTE6(v63);
        goto LABEL_65;
    }
  }
}

uint64_t sub_1002280E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[218] = a1;
  v5[219] = a2;
  v5[220] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[189];
  uint64_t v7 = v4[125];
  sub_10001DAB4(v6, &qword_101638CF0);
  if (v2)
  {
    swift_bridgeObjectRelease();
    unint64_t v8 = sub_10024CBFC;
  }
  else
  {
    unint64_t v8 = sub_100228268;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_100228268()
{
  uint64_t v366 = v0;
  if (*(void *)(v0 + 1752) >> 60 != 15)
  {
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 1768) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_10022BC80;
    uint64_t v19 = *(void *)(v0 + 1576);
    uint64_t v20 = *(void *)(v0 + 1472);
    return sub_100E5ABD4(v20, v19);
  }
  if (qword_101636908 != -1) {
    goto LABEL_149;
  }
  while (1)
  {
    uint64_t v1 = *(void *)(v0 + 1632);
    uint64_t v2 = *(void *)(v0 + 1616);
    uint64_t v3 = *(void *)(v0 + 1608);
    uint64_t v4 = *(void *)(v0 + 1400);
    uint64_t v5 = *(void *)(v0 + 1360);
    uint64_t v6 = *(void *)(v0 + 1352);
    uint64_t v7 = sub_100010324(v6, (uint64_t)qword_10170D9D8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    sub_10025C504(v1, v2, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    sub_10025C504(v2, v3, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    sub_10025C56C(v2, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v356 = v9;
      uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1688);
      uint64_t v11 = *(void *)(v0 + 1608);
      uint64_t v12 = *(void *)(v0 + 1584);
      uint64_t v13 = *(void *)(v0 + 1528);
      uint64_t v14 = *(void *)(v0 + 1504);
      uint64_t v15 = swift_slowAlloc();
      uint64_t v354 = swift_slowAlloc();
      *(void *)(v0 + 840) = v354;
      *(_DWORD *)uint64_t v15 = 141558275;
      *(void *)(v0 + 832) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2081;
      sub_10001D074(v11 + *(int *)(v12 + 28), v14, &qword_101638CF0);
      if (v10(v14, 1, v13) == 1)
      {
        sub_10001DAB4(*(void *)(v0 + 1504), &qword_101638CF0);
        unint64_t v16 = 0xE300000000000000;
        uint64_t v17 = 7104878;
      }
      else
      {
        uint64_t v33 = *(void *)(v0 + 1536);
        uint64_t v34 = *(void *)(v0 + 1528);
        uint64_t v35 = *(void *)(v0 + 1504);
        uint64_t v17 = UUID.uuidString.getter();
        unint64_t v16 = v36;
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
      }
      uint64_t v30 = *(void *)(v0 + 1608);
      uint64_t v345 = *(void *)(v0 + 1576);
      uint64_t v348 = *(void *)(v0 + 1632);
      uint64_t v37 = *(void *)(v0 + 1536);
      uint64_t v343 = *(void *)(v0 + 1528);
      unint64_t v339 = *(void *)(v0 + 1680);
      uint64_t v341 = *(void *)(v0 + 1400);
      uint64_t v38 = *(void *)(v0 + 1360);
      uint64_t v334 = *(void *)(v0 + 1672);
      uint64_t v336 = *(void *)(v0 + 1352);
      *(void *)(v0 + 792) = sub_1008FA0F0(v17, v16, (uint64_t *)(v0 + 840));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10025C56C(v30, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      _os_log_impl((void *)&_mh_execute_header, v8, v356, "Cannot decrypt locations in payload: %{private,mask.hash}s.", (uint8_t *)v15, 0x16u);
      uint64_t v22 = v354;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_10001CFB8(v334, v339);

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v341, v336);
      uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      uint64_t v26 = v37 + 8;
      v39(v345, v343);
      uint64_t v32 = v348;
    }
    else
    {
      uint64_t v22 = *(NSObject **)(v0 + 1632);
      uint64_t v23 = *(void *)(v0 + 1608);
      uint64_t v24 = *(void *)(v0 + 1576);
      uint64_t v25 = *(void *)(v0 + 1536);
      uint64_t v26 = *(void *)(v0 + 1528);
      uint64_t v27 = *(void *)(v0 + 1400);
      uint64_t v28 = *(void *)(v0 + 1360);
      uint64_t v29 = *(void *)(v0 + 1352);
      sub_10001CFB8(*(void *)(v0 + 1672), *(void *)(v0 + 1680));

      unint64_t v8 = type metadata accessor for KeyDropFetchResponse.LocationPayload;
      sub_10025C56C(v23, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
      uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      uint64_t v30 = v25 + 8;
      v31(v24, v26);
      uint64_t v32 = (uint64_t)v22;
    }
    sub_10025C56C(v32, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    uint64_t v357 = *(void *)(v0 + 1760);
    unint64_t v40 = *(void *)(v0 + 1664) + 1;
    if (v40 != *(void *)(v0 + 1656))
    {
      uint64_t v26 = (uint64_t)&qword_101638CF0;
      do
      {
        *(void *)(v0 + 1664) = v40;
        uint64_t v237 = *(void **)(v0 + 984);
        if (!v237) {
          uint64_t v237 = _swiftEmptyArrayStorage;
        }
        if (v40 >= v237[2])
        {
          __break(1u);
          sub_10001CFB8((uint64_t)v8, (unint64_t)v22);
          v364 = 0;
          unint64_t v365 = 0xE000000000000000;
          _StringGuts.grow(_:)(35);
          unint64_t v273 = v365;
          *(void *)(v0 + 744) = v364;
          *(void *)(v0 + 752) = v273;
          v274._object = (void *)0x80000001013F3B70;
          v274._countAndFlagsBits = 0xD000000000000021;
          String.append(_:)(v274);
          *(void *)(v0 + 848) = _swiftEmptyArrayStorage;
          sub_10000588C(&qword_101638D40);
          _print_unlocked<A, B>(_:_:)();
          return _assertionFailure(_:_:file:line:flags:)();
        }
        uint64_t v238 = *(void *)(v0 + 1632);
        uint64_t v30 = *(void *)(v0 + 1584);
        uint64_t v239 = *(void *)(v0 + 1536);
        uint64_t v240 = *(void *)(v0 + 1528);
        uint64_t v241 = *(void *)(v0 + 1520);
        sub_10025C504((uint64_t)v237+ ((*(unsigned __int8 *)(v0 + 2016) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2016))+ *(void *)(*(void *)(v0 + 1592) + 72) * v40, v238, type metadata accessor for KeyDropFetchResponse.LocationPayload);
        unint64_t v8 = *(NSObject **)(v238 + 16);
        *(void *)(v0 + 1672) = v8;
        unint64_t v242 = *(void *)(v238 + 24);
        *(void *)(v0 + 1680) = v242;
        sub_10001D074(v238 + *(int *)(v30 + 28), v241, &qword_101638CF0);
        v243 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v239 + 48);
        *(void *)(v0 + 1688) = v243;
        *(void *)(v0 + 1696) = (v239 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
        if (v243(v241, 1, v240) != 1)
        {
          uint64_t v249 = *(void *)(v0 + 1576);
          uint64_t v250 = *(void *)(v0 + 1536);
          uint64_t v251 = *(void *)(v0 + 1528);
          uint64_t v252 = *(void *)(v0 + 1520);
          uint64_t v253 = *(void *)(v0 + 1512);
          uint64_t v254 = *(void (**)(uint64_t, uint64_t, uint64_t))(v250 + 32);
          *(void *)(v0 + 1704) = v254;
          *(void *)(v0 + 1712) = (v250 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
          v254(v249, v252, v251);
          uint64_t v255 = *(void (**)(uint64_t, uint64_t, uint64_t))(v250 + 16);
          *(void *)(v0 + 1720) = v255;
          *(void *)(v0 + 1728) = (v250 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
          v255(v253, v249, v251);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v250 + 56))(v253, 0, 1, v251);
          sub_1000361E0((uint64_t)v8, v242);
          uint64_t v256 = (void *)swift_task_alloc();
          *(void *)(v0 + 1736) = v256;
          *uint64_t v256 = v0;
          v256[1] = sub_1002280E0;
          uint64_t v257 = *(void *)(v0 + 1512);
          return sub_100257574((uint64_t)v8, v242, v257);
        }
        uint64_t v244 = *(void *)(v0 + 1520);
        sub_1000361E0((uint64_t)v8, v242);
        sub_10001DAB4(v244, &qword_101638CF0);
        if (qword_101636908 != -1) {
          swift_once();
        }
        sub_100010324(*(void *)(v0 + 1352), (uint64_t)qword_10170D9D8);
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v245 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v245))
        {
          uint64_t v246 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v246 = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, v245, "Missing share id in payload.", v246, 2u);
          swift_slowDealloc();
        }
        uint64_t v236 = *(void *)(v0 + 1632);
        sub_10001CFB8((uint64_t)v8, v242);

        sub_10025C56C(v236, type metadata accessor for KeyDropFetchResponse.LocationPayload);
        unint64_t v40 = *(void *)(v0 + 1664) + 1;
      }
      while (v40 != *(void *)(v0 + 1656));
    }
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 976)) {
      unint64_t v41 = *(void *)(v0 + 976);
    }
    else {
      unint64_t v41 = (unint64_t)_swiftEmptyArrayStorage;
    }
    uint64_t v332 = *(void *)(v41 + 16);
    if (!v332)
    {
      swift_bridgeObjectRetain();
LABEL_125:
      swift_bridgeObjectRelease();
      uint64_t v247 = *(void *)(v0 + 1648);
      swift_beginAccess();
      uint64_t v353 = *(void *)(v247 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v248 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v248(v353);
    }
    uint64_t v42 = *(void *)(v0 + 1536);
    uint64_t v43 = *(void *)(v0 + 1360);
    uint64_t v316 = *(void *)(v0 + 1280);
    uint64_t v44 = *(void *)(v0 + 1160);
    uint64_t v317 = *(void *)(v0 + 1120);
    uint64_t v351 = *(void *)(v0 + 1104);
    uint64_t v321 = *(void *)(v0 + 1080);
    uint64_t v45 = *(void *)(v0 + 1056);
    v344 = (void (**)(uint64_t, void, uint64_t))(v45 + 104);
    uint64_t v313 = *(void *)(v0 + 1040);
    v342 = (void (**)(uint64_t, uint64_t))(v45 + 8);
    v318 = (void (**)(void))(v42 + 16);
    uint64_t v319 = *(void *)(v0 + 1032);
    v312 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1192) + 56);
    uint64_t v311 = (void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
    uint64_t v310 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56);
    v309 = (void (**)(uint64_t))(v42 + 32);
    unint64_t v307 = (void (**)(uint64_t, uint64_t))(v42 + 8);
    uint64_t v46 = *(void *)(*(void *)(v0 + 992) + 16);
    v330 = (void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16);
    v323 = (void (**)(uint64_t, uint64_t))(v43 + 8);
    unsigned int v340 = enum case for HashAlgorithm.sha256(_:);
    unint64_t v335 = v41 + 32;
    uint64_t v306 = *(void *)(v0 + 1288);
    uint64_t v308 = *(int **)(v0 + 1016);
    swift_bridgeObjectRetain();
    unint64_t v47 = 0;
    uint64_t v331 = v46;
    unint64_t v322 = v41;
    while (1)
    {
      if (v47 >= *(void *)(v41 + 16)) {
        goto LABEL_152;
      }
      unint64_t v333 = v47;
      uint64_t v48 = (uint64_t *)(v335 + 24 * v47);
      uint64_t v30 = *v48;
      unint64_t v49 = v48[1];
      uint64_t v50 = v48[2];
      if (v46) {
        break;
      }
      sub_1000361E0(*v48, v48[1]);
      swift_bridgeObjectRetain();
LABEL_83:
      if (qword_101636908 != -1) {
        swift_once();
      }
      uint64_t v94 = *(void *)(v0 + 1376);
      uint64_t v95 = *(void *)(v0 + 1352);
      uint64_t v96 = sub_100010324(v95, (uint64_t)qword_10170D9D8);
      (*v330)(v94, v96, v95);
      sub_1000361E0(v30, v49);
      swift_bridgeObjectRetain();
      sub_1000361E0(v30, v49);
      swift_bridgeObjectRetain();
      uint64_t v97 = Logger.logObject.getter();
      os_log_type_t v98 = static os_log_type_t.error.getter();
      uint64_t v99 = v30;
      uint64_t v30 = v98;
      BOOL v100 = os_log_type_enabled(v97, v98);
      uint64_t v101 = *(void *)(v0 + 1376);
      uint64_t v26 = *(void *)(v0 + 1352);
      if (v100)
      {
        uint64_t v102 = swift_slowAlloc();
        v364 = (uint64_t (*)())swift_slowAlloc();
        *(_DWORD *)uint64_t v102 = 141558275;
        *(void *)(v102 + 4) = 1752392040;
        *(_WORD *)(v102 + 12) = 2081;
        *(void *)(v0 + 728) = v99;
        *(void *)(v0 + 736) = v49;
        sub_1001D780C();
        uint64_t v103 = RawRepresentable<>.hexString.getter();
        *(void *)(v102 + 14) = sub_1008FA0F0(v103, v104, (uint64_t *)&v364);
        swift_bridgeObjectRelease();
        sub_10001CFB8(v99, v49);
        swift_bridgeObjectRelease();
        sub_10001CFB8(v99, v49);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v30, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v102, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v41 = v322;
        swift_slowDealloc();

        sub_10001CFB8(v99, v49);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_10001CFB8(v99, v49);
        swift_bridgeObjectRelease();
        sub_10001CFB8(v99, v49);
        swift_bridgeObjectRelease();
        sub_10001CFB8(v99, v49);
        swift_bridgeObjectRelease();
      }
      (*v323)(v101, v26);
      uint64_t v46 = v331;
LABEL_89:
      unint64_t v47 = v333 + 1;
      if (v333 + 1 == v332) {
        goto LABEL_125;
      }
    }
    uint64_t v51 = *(void *)(v0 + 992);
    unint64_t v349 = v49 >> 62;
    sub_1000361E0(v30, v49);
    uint64_t v52 = *(unsigned __int8 *)(v321 + 80);
    uint64_t v314 = ~v52;
    uint64_t v315 = v52;
    uint64_t v53 = v51 + ((v52 + 32) & ~v52);
    uint64_t v346 = BYTE6(v49);
    uint64_t v337 = *(void *)(v321 + 72);
    BOOL v54 = __OFSUB__(HIDWORD(v30), v30);
    BOOL v326 = v54;
    uint64_t v324 = HIDWORD(v30) - (int)v30;
    uint64_t v320 = v50;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v55 = v46;
    uint64_t v352 = v30;
    unint64_t v355 = v49;
LABEL_27:
    uint64_t v56 = *(uint64_t **)(v0 + 1104);
    sub_10025C504(v53, (uint64_t)v56, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v57 = *v56;
    unint64_t v58 = *(void *)(v351 + 8);
    uint64_t v30 = v58 >> 62;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    switch(v58 >> 62)
    {
      case 1uLL:
        uint64_t v59 = (int)v57;
        uint64_t v60 = v57 >> 32;
        sub_1000361E0(v57, *(void *)(v351 + 8));
        uint64_t v61 = v57 >> 32;
        uint64_t v62 = (int)v57;
        break;
      case 2uLL:
        uint64_t v59 = *(void *)(v57 + 16);
        uint64_t v60 = *(void *)(v57 + 24);
        sub_1000361E0(v57, *(void *)(v351 + 8));
        uint64_t v62 = *(void *)(v57 + 16);
        uint64_t v61 = *(void *)(v57 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v59 = 0;
        uint64_t v62 = 0;
        uint64_t v60 = BYTE6(v58);
        uint64_t v61 = BYTE6(v58);
        break;
    }
    if (v61 >= v59 && v59 >= v62) {
      break;
    }
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    swift_once();
  }
  uint64_t v30 = v30;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  switch((int)v30)
  {
    case 1:
      uint64_t v64 = (int)v57;
      uint64_t v63 = v57 >> 32;
      break;
    case 2:
      uint64_t v64 = *(void *)(v57 + 16);
      uint64_t v63 = *(void *)(v57 + 24);
      break;
    case 3:
      break;
    default:
      uint64_t v64 = 0;
      uint64_t v63 = BYTE6(v58);
      break;
  }
  if (v63 < v60 || v60 < v64) {
    goto LABEL_146;
  }
  if (__OFSUB__(v60, v59)) {
    goto LABEL_147;
  }
  if ((unint64_t)(v60 - v59) < 0x39)
  {
    switch((int)v30)
    {
      case 1:
        uint64_t v65 = v57 >> 32;
        goto LABEL_44;
      case 2:
        uint64_t v65 = *(void *)(v57 + 24);
        goto LABEL_46;
      default:
        goto LABEL_48;
    }
  }
  uint64_t v65 = sub_1008AA520(v59, 57, v57, v58);
  uint64_t v66 = 0;
  switch((int)v30)
  {
    case 1:
LABEL_44:
      uint64_t v66 = (int)v57;
      break;
    case 2:
LABEL_46:
      uint64_t v66 = *(void *)(v57 + 16);
      break;
    default:
      break;
  }
  if (v65 < v66) {
    goto LABEL_148;
  }
LABEL_48:
  uint64_t v26 = Data._Representation.subscript.getter();
  unint64_t v41 = v67;
  sub_10001CFB8(v57, v58);
  switch(v41 >> 62)
  {
    case 1uLL:
      LODWORD(v68) = HIDWORD(v26) - v26;
      if (__OFSUB__(HIDWORD(v26), v26))
      {
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        swift_once();
LABEL_133:
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v258 = swift_allocObject();
        uint64_t v259 = sub_1004B810C(v258, 1);
        uint64_t v261 = v260;
        *(void *)(v0 + 888) = v30;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v262 = String.init<A>(describing:)();
        uint64_t v264 = v263;
        v261[3] = (uint64_t)&type metadata for String;
        v261[4] = sub_10000B4CC();
        *uint64_t v261 = v262;
        v261[1] = v264;
        SharingCircleWildAdvertisementKey.init(key:)(v259);
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_100130148();
        uint64_t v265 = swift_allocError();
        unsigned char *v266 = 0;
        swift_willThrow();
        swift_errorRelease();
        unint64_t v75 = v41;
        uint64_t v73 = v26;
        goto LABEL_142;
      }
      uint64_t v68 = (int)v68;
LABEL_53:
      if (v68 != 57)
      {
LABEL_131:
        sub_10001CFB8(v26, v41);
        return _assertionFailure(_:_:file:line:flags:)();
      }
      sub_1000361E0(v26, v41);
      uint64_t v72 = sub_100A948F8(v26, v41);
      uint64_t v30 = v357;
      if (v357)
      {
        static os_log_type_t.error.getter();
        if (qword_101636F48 == -1) {
          goto LABEL_133;
        }
        goto LABEL_161;
      }
      break;
    case 2uLL:
      uint64_t v70 = *(void *)(v26 + 16);
      uint64_t v69 = *(void *)(v26 + 24);
      BOOL v71 = __OFSUB__(v69, v70);
      uint64_t v68 = v69 - v70;
      if (!v71) {
        goto LABEL_53;
      }
      goto LABEL_151;
    case 3uLL:
      goto LABEL_131;
    default:
      uint64_t v68 = BYTE6(v41);
      goto LABEL_53;
  }
  uint64_t v73 = sub_100A90C58(v72, 0);
  unint64_t v75 = v74;
  CCECCryptorRelease();
  sub_10001CFB8(v26, v41);
  unint64_t v76 = v75 >> 62;
  uint64_t v30 = v352;
  switch(v75 >> 62)
  {
    case 1uLL:
      LODWORD(v77) = HIDWORD(v73) - v73;
      if (__OFSUB__(HIDWORD(v73), v73)) {
        goto LABEL_153;
      }
      uint64_t v77 = (int)v77;
LABEL_60:
      if (v77 == 28)
      {
        uint64_t v80 = *(void *)(v0 + 1064);
        uint64_t v81 = *(void *)(v0 + 1048);
        sub_10001CFB8(v26, v41);
        (*v344)(v80, v340, v81);
        uint64_t v26 = Data.hash(algorithm:)();
        unint64_t v41 = v82;
        (*v342)(v80, v81);
        sub_10001CFB8(v73, v75);
        uint64_t v83 = 0;
        unint64_t v49 = v355;
        switch(v41 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v26), v26)) {
              goto LABEL_155;
            }
            uint64_t v83 = HIDWORD(v26) - (int)v26;
LABEL_66:
            sub_1000361E0(v26, v41);
            break;
          case 2uLL:
            uint64_t v85 = *(void *)(v26 + 16);
            uint64_t v84 = *(void *)(v26 + 24);
            uint64_t v83 = v84 - v85;
            if (!__OFSUB__(v84, v85)) {
              goto LABEL_66;
            }
            goto LABEL_156;
          case 3uLL:
            break;
          default:
            uint64_t v83 = BYTE6(v41);
            break;
        }
        uint64_t v86 = v346;
        switch((int)v349)
        {
          case 1:
            uint64_t v86 = v324;
            if (v326) {
              goto LABEL_157;
            }
            goto LABEL_71;
          case 2:
            uint64_t v88 = *(void *)(v352 + 16);
            uint64_t v87 = *(void *)(v352 + 24);
            BOOL v71 = __OFSUB__(v87, v88);
            uint64_t v86 = v87 - v88;
            if (!v71) {
              goto LABEL_71;
            }
            goto LABEL_158;
          case 3:
            if (v83) {
              goto LABEL_25;
            }
            goto LABEL_92;
          default:
LABEL_71:
            if (v83 == v86)
            {
              if (v83 >= 1)
              {
                sub_1000361E0(v352, v355);
                sub_1000361E0(v352, v355);
                switch(v41 >> 62)
                {
                  case 1uLL:
                    if (v26 >> 32 < (int)v26) {
                      goto LABEL_160;
                    }
                    sub_1000361E0(v352, v355);
                    sub_1000361E0(v352, v355);
                    sub_1000361E0(v352, v355);
                    sub_1000361E0(v26, v41);
                    sub_1000361E0(v352, v355);
                    unint64_t v49 = v355;
                    char v91 = sub_100BFBE64((int)v26, v26 >> 32, v41 & 0x3FFFFFFFFFFFFFFFLL, v352, v355);
                    sub_10001CFB8(v352, v355);
                    sub_10001CFB8(v26, v41);
                    break;
                  case 2uLL:
                    uint64_t v92 = *(void *)(v26 + 16);
                    uint64_t v93 = *(void *)(v26 + 24);
                    sub_1000361E0(v352, v355);
                    sub_1000361E0(v352, v355);
                    sub_1000361E0(v352, v355);
                    sub_1000361E0(v352, v355);
                    swift_retain();
                    swift_retain();
                    char v91 = sub_100BFBE64(v92, v93, v41 & 0x3FFFFFFFFFFFFFFFLL, v352, v355);
                    sub_10001CFB8(v352, v355);
                    swift_release();
                    swift_release();
                    break;
                  case 3uLL:
                    sub_1000361E0(v352, v355);
                    sub_1000361E0(v352, v355);
                    sub_1000361E0(v352, v355);
                    sub_1000361E0(v352, v355);
                    unint64_t v89 = v305 & 0xFF00000000000000;
                    uint64_t v90 = 0;
                    v305 &= 0xFF00000000000000;
                    goto LABEL_79;
                  default:
                    sub_1000361E0(v352, v355);
                    sub_1000361E0(v352, v355);
                    sub_1000361E0(v352, v355);
                    sub_1000361E0(v352, v355);
                    unint64_t v89 = v304 & 0xFF00000000000000 | v41 & 0xFFFFFFFFFFFFFFLL;
                    uint64_t v90 = v26;
                    unint64_t v304 = v89;
LABEL_79:
                    char v91 = sub_100BFBD8C(v90, v89, v352, v355);
                    sub_10001CFB8(v352, v355);
                    break;
                }
                sub_10001CFB8(v26, v41);
                sub_10001CFB8(v352, v49);
                sub_10001CFB8(v26, v41);
                sub_10001CFB8(v352, v49);
                sub_10001CFB8(v352, v49);
                sub_10001CFB8(v352, v49);
                sub_10001CFB8(v352, v49);
                if (v91) {
                  goto LABEL_93;
                }
                goto LABEL_26;
              }
LABEL_92:
              sub_10001CFB8(v26, v41);
              sub_10001CFB8(v26, v41);
LABEL_93:
              uint64_t v105 = *(void *)(v0 + 1120);
              uint64_t v106 = *(void *)(v0 + 1112);
              uint64_t v107 = *(void *)(v0 + 1104);
              swift_bridgeObjectRelease();
              sub_10025C5CC(v107, v106, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
              sub_10025C5CC(v106, v105, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
              uint64_t v108 = sub_1001340BC(v320);
              if (!v108)
              {
                swift_bridgeObjectRetain();
                unint64_t v41 = v322;
                uint64_t v46 = v331;
                unint64_t v165 = v355;
LABEL_113:
                uint64_t v235 = *(void *)(v0 + 1120);
                sub_10001CFB8(v30, v165);
                swift_bridgeObjectRelease_n();
                sub_10025C56C(v235, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                uint64_t v357 = 0;
                goto LABEL_89;
              }
              uint64_t v109 = v108;
              unint64_t v338 = v320
                   + ((*(unsigned __int8 *)(v319 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v319 + 80));
              uint64_t v325 = (v315 + 16) & v314;
              swift_bridgeObjectRetain();
              uint64_t v110 = 0;
              uint64_t v303 = v109;
              while (1)
              {
                unint64_t v350 = v110 + 1;
                if (__OFADD__(v110, 1)) {
                  goto LABEL_159;
                }
                v111 = *(uint64_t **)(v0 + 1120);
                uint64_t v347 = v110;
                sub_10025C504(v338 + *(void *)(v319 + 72) * v110, *(void *)(v0 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                uint64_t v112 = *v111;
                unint64_t v113 = *(void *)(v317 + 8);
                SecKeyRef v114 = sub_100435E70(v112, v113);
                uint64_t v115 = **(void **)(v0 + 1040);
                unint64_t v116 = *(void *)(v313 + 8);
                uint64_t v117 = PrivateKey.publicKey.getter(v112, v113);
                unint64_t v119 = v118;
                sub_1000361E0(v117, v118);
                uint64_t v120 = sub_100A94760(v117, v119);
                unint64_t v122 = v121;
                sub_10001CFB8(v117, v119);
                sub_100434E0C(v120, v122, (uint64_t *)&v364);
                uint64_t v123 = *(void *)(v0 + 1024);
                sub_10001CFB8(v117, v119);
                uint64_t v125 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v364;
                unint64_t v124 = v365;
                uint64_t v126 = v114;
                sub_1000361E0(v115, v116);
                sub_1000361E0((uint64_t)v125, v124);
                BeaconPayloadv1.init(using:data:advertisement:)(v126, v115, v116, (uint64_t)v125, v124, v123);
                uint64_t v289 = *(void *)(v0 + 1528);
                uint64_t v293 = *(void *)(v0 + 1560);
                unint64_t v297 = v124;
                uint64_t v300 = *(void *)(v0 + 1280);
                uint64_t v127 = *(void *)(v0 + 1264);
                uint64_t v128 = *(void *)(v0 + 1240);
                uint64_t v285 = v126;
                uint64_t v286 = *(void *)(v0 + 1232);
                uint64_t v129 = *(void *)(v0 + 1184);
                uint64_t v327 = (uint64_t)v125;
                uint64_t v130 = *(void *)(v0 + 1168);
                uint64_t v131 = *(void *)(v0 + 1152);
                uint64_t v132 = *(unsigned char **)(v0 + 1144);
                uint64_t v133 = *(void *)(v0 + 1024);
                uint64_t v134 = *(void *)(v0 + 1008);
                v358 = *v318;
                (*v318)();
                (*v312)(v128, 1, 1, v129);
                LODWORD(v129) = *(unsigned __int8 *)(v133 + v308[10]);
                (*v311)(v130, v133 + v308[5], v131);
                double v135 = *(double *)(v133 + v308[7]);
                double v136 = *(double *)(v133 + v308[8]);
                double v137 = *(double *)(v133 + v308[9]);
                (*v310)(v134, 1, 1, v131);
                sub_10001D074(v128, v286, &qword_101657910);
                sub_100CC2A6C(v129, v130, 15, v134, v286, 256, v132, v135, v136, v137);
                sub_10001DAB4(v128, &qword_101657910);
                sub_10025C56C(v133, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                uint64_t v138 = v127 + *(int *)(v316 + 48);
                uint64_t v139 = *v309;
                ((void (*)(uint64_t, uint64_t, uint64_t))*v309)(v127, v293, v289);
                sub_10025C5CC((uint64_t)v132, v138, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v306 + 56))(v127, 0, 1, v300);
                sub_10001CFB8(v327, v297);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v306 + 48))(v127, 1, v300) == 1)
                {
                  uint64_t v140 = *(void *)(v0 + 1264);

                  sub_10001DAB4(v140, &qword_10163F720);
                  if (qword_101636908 != -1) {
                    swift_once();
                  }
                  uint64_t v141 = *(void *)(v0 + 1384);
                  uint64_t v142 = *(void *)(v0 + 1352);
                  uint64_t v143 = *(void *)(v0 + 1120);
                  uint64_t v144 = *(void *)(v0 + 1096);
                  uint64_t v145 = sub_100010324(v142, (uint64_t)qword_10170D9D8);
                  (*v330)(v141, v145, v142);
                  sub_10025C504(v143, v144, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                  uint64_t v146 = swift_allocObject();
                  sub_10025C5CC(v144, v146 + v325, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                  uint64_t v147 = swift_allocObject();
                  *(void *)(v147 + 16) = sub_10025B340;
                  *(void *)(v147 + 24) = v146;
                  v359 = Logger.logObject.getter();
                  os_log_type_t v148 = static os_log_type_t.error.getter();
                  uint64_t v149 = swift_allocObject();
                  *(unsigned char *)(v149 + 16) = 112;
                  uint64_t v26 = swift_allocObject();
                  *(unsigned char *)(v26 + 16) = 8;
                  uint64_t v150 = swift_allocObject();
                  *(void *)(v150 + 16) = 1752392040;
                  uint64_t v151 = swift_allocObject();
                  *(void *)(v151 + 16) = sub_100060540;
                  *(void *)(v151 + 24) = v150;
                  uint64_t v152 = swift_allocObject();
                  *(unsigned char *)(v152 + 16) = 33;
                  uint64_t v153 = swift_allocObject();
                  *(unsigned char *)(v153 + 16) = 8;
                  uint64_t v154 = swift_allocObject();
                  *(void *)(v154 + 16) = sub_1000604E8;
                  *(void *)(v154 + 24) = v147;
                  uint64_t v155 = swift_allocObject();
                  *(void *)(v155 + 16) = sub_10005F790;
                  *(void *)(v155 + 24) = v154;
                  sub_10000588C(&qword_101639B60);
                  uint64_t inited = swift_initStackObject();
                  sub_1004B810C(inited, 6);
                  *uint64_t v157 = sub_10005F778;
                  v157[1] = v149;
                  v157[2] = sub_100065514;
                  v157[3] = v26;
                  v157[4] = sub_10006000C;
                  v157[5] = v151;
                  v157[6] = sub_100065514;
                  v157[7] = v152;
                  v157[8] = sub_100065514;
                  v157[9] = v153;
                  v157[10] = sub_10005F7D0;
                  v157[11] = v155;
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_bridgeObjectRelease();
                  if (os_log_type_enabled(v359, v148))
                  {
                    v158 = (uint8_t *)swift_slowAlloc();
                    uint64_t v159 = swift_slowAlloc();
                    uint64_t v362 = 0;
                    uint64_t v363 = v159;
                    *(_WORD *)v158 = 515;
                    v361 = v158 + 2;
                    sub_1008FA6E0(&v361, (uint64_t)&v362, (uint64_t)&v363, 112);
                    swift_release();
                    v364 = sub_100065514;
                    unint64_t v365 = v26;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = (uint64_t (*)())sub_10006000C;
                    unint64_t v365 = v151;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = sub_100065514;
                    unint64_t v365 = v152;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = sub_100065514;
                    unint64_t v365 = v153;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = (uint64_t (*)())sub_10005F7D0;
                    unint64_t v365 = v155;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    uint64_t v160 = *(void *)(v0 + 1384);
                    uint64_t v161 = *(void *)(v0 + 1352);
                    swift_release();
                    _os_log_impl((void *)&_mh_execute_header, v359, v148, "Could not create search result for beacon: %{private,mask.hash}s.", v158, 0x16u);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    sub_1008F9FA0();

                    (*v323)(v160, v161);
                  }
                  else
                  {
                    uint64_t v162 = *(void *)(v0 + 1384);
                    uint64_t v163 = *(void *)(v0 + 1352);
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();

                    (*v323)(v162, v163);
                  }
                  uint64_t v30 = v352;
                  unint64_t v41 = v322;
                }
                else
                {
                  uint64_t v166 = *(void *)(v0 + 1648);
                  uint64_t v167 = *(void *)(v0 + 1528);
                  uint64_t v168 = *(void *)(v0 + 1320);
                  uint64_t v169 = *(void *)(v0 + 1312);
                  uint64_t v170 = *(int *)(v316 + 48);
                  uint64_t v171 = v168 + v170;
                  uint64_t v172 = *(void *)(v0 + 1264) + v170;
                  v139(v168);
                  sub_10025C5CC(v172, v171, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  uint64_t v173 = v169 + *(int *)(v316 + 48);
                  ((void (*)(uint64_t, uint64_t, uint64_t))v358)(v169, v168, v167);
                  uint64_t v328 = v171;
                  sub_10025C504(v171, v173, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  swift_beginAccess();
                  uint64_t v174 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000F790C(v169, *(void *)(v166 + 16));
                  uint64_t v175 = *(void *)(v0 + 1528);
                  uint64_t v176 = *(void *)(v0 + 1328);
                  uint64_t v177 = *(void *)(v0 + 1320);
                  uint64_t v178 = *(void *)(v0 + 1312);
                  if (v174)
                  {
                    uint64_t v294 = *(void *)(v0 + 1144);
                    v364 = (uint64_t (*)())v174;
                    swift_endAccess();
                    sub_10025C56C(v173, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    BOOL v287 = *v307;
                    (*v307)(v178, v175);
                    uint64_t v179 = (unsigned __int8 *)(v176 + *(int *)(v316 + 48));
                    ((void (*)(uint64_t, uint64_t, uint64_t))v358)(v176, v177, v175);
                    sub_10025C504(v328, (uint64_t)v179, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    sub_1000D1E3C(v294, v179);
                    sub_10025C56C(v294, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    v287(v176, v175);
                    uint64_t v180 = v176 + *(int *)(v316 + 48);
                    ((void (*)(uint64_t, uint64_t, uint64_t))v358)(v176, v177, v175);
                    sub_10025C504(v328, v180, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    uint64_t v181 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v364;
                    swift_beginAccess();
                    sub_10015DF64((uint64_t)v181, v176);
                    swift_endAccess();
                    sub_10025C56C(v180, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  }
                  else
                  {
                    uint64_t v182 = *(void *)(v0 + 1304);
                    swift_endAccess();
                    sub_10025C56C(v173, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    uint64_t v283 = *v307;
                    (*v307)(v178, v175);
                    uint64_t v183 = v176 + *(int *)(v316 + 48);
                    uint64_t v290 = v183;
                    ((void (*)(uint64_t, uint64_t, uint64_t))v358)(v176, v177, v175);
                    sub_10025C504(v328, v183, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    sub_10000588C(&qword_10163AA18);
                    uint64_t v184 = swift_allocObject();
                    uint64_t v185 = sub_1004B7688(v184, 1);
                    uint64_t v187 = v186;
                    uint64_t v188 = v182 + *(int *)(v316 + 48);
                    ((void (*)(uint64_t, uint64_t, uint64_t))v358)(v182, v177, v175);
                    sub_10025C504(v328, v188, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    sub_10025C5CC(v188, v187, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    uint64_t v189 = SharingCircleWildAdvertisementKey.init(key:)(v185);
                    v283(v182, v175);
                    uint64_t v190 = sub_101158D6C(v189);
                    swift_bridgeObjectRelease();
                    swift_beginAccess();
                    sub_10015DF64(v190, v176);
                    swift_endAccess();
                    sub_10025C56C(v290, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  }
                  uint64_t v295 = *(void *)(v0 + 1648);
                  uint64_t v191 = *(void *)(v0 + 1528);
                  uint64_t v192 = *(void *)(v0 + 1392);
                  uint64_t v193 = *(void *)(v0 + 1352);
                  uint64_t v194 = *(void *)(v0 + 1328);
                  uint64_t v301 = *(void *)(v0 + 1320);
                  uint64_t v195 = *(void *)(v0 + 1120);
                  uint64_t v196 = *(void *)(v0 + 1096);
                  uint64_t v197 = sub_100207468();
                  (*v330)(v192, v197, v193);
                  sub_10025C504(v195, v196, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                  uint64_t v198 = swift_allocObject();
                  sub_10025C5CC(v196, v198 + v325, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                  uint64_t v298 = swift_allocObject();
                  *(void *)(v298 + 16) = sub_10025B340;
                  *(void *)(v298 + 24) = v198;
                  uint64_t v199 = v194 + *(int *)(v316 + 48);
                  ((void (*)(uint64_t, uint64_t, uint64_t))v358)(v194, v301, v191);
                  sub_10025C504(v328, v199, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  uint64_t v200 = *(unsigned __int8 *)(v306 + 80);
                  uint64_t v201 = (v200 + 16) & ~v200;
                  uint64_t v202 = swift_allocObject();
                  sub_10001D608(v194, v202 + v201, &qword_10163F728);
                  uint64_t v291 = swift_allocObject();
                  *(void *)(v291 + 16) = sub_10025B4F4;
                  *(void *)(v291 + 24) = v202;
                  uint64_t v203 = v194 + *(int *)(v316 + 48);
                  ((void (*)(uint64_t, uint64_t, uint64_t))v358)(v194, v301, v191);
                  sub_10025C504(v328, v203, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  uint64_t v204 = swift_allocObject();
                  sub_10001D608(v194, v204 + v201, &qword_10163F728);
                  uint64_t v281 = swift_allocObject();
                  *(void *)(v281 + 16) = sub_10025B504;
                  *(void *)(v281 + 24) = v204;
                  uint64_t v205 = v194 + *(int *)(v316 + 48);
                  ((void (*)(uint64_t, uint64_t, uint64_t))v358)(v194, v301, v191);
                  sub_10025C504(v328, v205, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  uint64_t v206 = swift_allocObject();
                  *(void *)(v206 + 16) = v295;
                  sub_10001D608(v194, v206 + ((v200 + 24) & ~v200), &qword_10163F728);
                  swift_retain();
                  os_log_t log = Logger.logObject.getter();
                  os_log_type_t v279 = static os_log_type_t.info.getter();
                  uint64_t v296 = swift_allocObject();
                  *(unsigned char *)(v296 + 16) = 112;
                  uint64_t v207 = swift_allocObject();
                  *(unsigned char *)(v207 + 16) = 8;
                  uint64_t v208 = swift_allocObject();
                  *(void *)(v208 + 16) = 1752392040;
                  uint64_t v360 = swift_allocObject();
                  *(void *)(v360 + 16) = sub_10006550C;
                  *(void *)(v360 + 24) = v208;
                  uint64_t v209 = v207;
                  uint64_t v210 = swift_allocObject();
                  *(unsigned char *)(v210 + 16) = 33;
                  uint64_t v211 = v210;
                  uint64_t v329 = swift_allocObject();
                  *(unsigned char *)(v329 + 16) = 8;
                  uint64_t v212 = swift_allocObject();
                  *(void *)(v212 + 16) = sub_1000654F4;
                  *(void *)(v212 + 24) = v298;
                  uint64_t v213 = swift_allocObject();
                  *(void *)(v213 + 16) = sub_1000654EC;
                  *(void *)(v213 + 24) = v212;
                  uint64_t v214 = v213;
                  unint64_t v288 = v213;
                  uint64_t v284 = swift_allocObject();
                  *(unsigned char *)(v284 + 16) = 34;
                  uint64_t v302 = swift_allocObject();
                  *(unsigned char *)(v302 + 16) = 8;
                  uint64_t v215 = swift_allocObject();
                  *(void *)(v215 + 16) = sub_10025B4F8;
                  *(void *)(v215 + 24) = v291;
                  uint64_t v299 = swift_allocObject();
                  *(void *)(v299 + 16) = sub_1000654EC;
                  *(void *)(v299 + 24) = v215;
                  uint64_t v292 = swift_allocObject();
                  *(unsigned char *)(v292 + 16) = 34;
                  uint64_t v277 = swift_allocObject();
                  *(unsigned char *)(v277 + 16) = 8;
                  uint64_t v216 = swift_allocObject();
                  *(void *)(v216 + 16) = sub_10025B508;
                  *(void *)(v216 + 24) = v281;
                  uint64_t v217 = swift_allocObject();
                  *(void *)(v217 + 16) = sub_1000654EC;
                  *(void *)(v217 + 24) = v216;
                  uint64_t v218 = v217;
                  uint64_t v219 = swift_allocObject();
                  *(unsigned char *)(v219 + 16) = 0;
                  uint64_t v220 = v219;
                  uint64_t v282 = swift_allocObject();
                  *(unsigned char *)(v282 + 16) = 8;
                  uint64_t v221 = swift_allocObject();
                  *(void *)(v221 + 16) = sub_10025B514;
                  *(void *)(v221 + 24) = v206;
                  uint64_t v222 = swift_allocObject();
                  *(void *)(v222 + 16) = sub_100060004;
                  *(void *)(v222 + 24) = v221;
                  sub_10000588C(&qword_101639B60);
                  uint64_t v223 = swift_allocObject();
                  sub_1004B810C(v223, 15);
                  *uint64_t v224 = sub_100065514;
                  v224[1] = v296;
                  v224[2] = sub_100065514;
                  v224[3] = v209;
                  unint64_t v225 = v209;
                  v224[4] = sub_100065504;
                  v224[5] = v360;
                  v224[6] = sub_100065514;
                  v224[7] = v211;
                  v224[8] = sub_100065514;
                  v224[9] = v329;
                  v224[10] = sub_100065500;
                  v224[11] = v214;
                  v224[12] = sub_100065514;
                  v224[13] = v284;
                  v224[14] = sub_100065514;
                  v224[15] = v302;
                  v224[16] = sub_100065500;
                  v224[17] = v299;
                  v224[18] = sub_100065514;
                  v224[19] = v292;
                  v224[20] = sub_100065514;
                  v224[21] = v277;
                  v224[22] = sub_100065500;
                  v224[23] = v218;
                  unint64_t v226 = v218;
                  v224[24] = sub_100065514;
                  v224[25] = v220;
                  unint64_t v227 = v220;
                  v224[26] = sub_100065514;
                  v224[27] = v282;
                  v224[28] = sub_10006000C;
                  v224[29] = v222;
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  unint64_t v276 = v211;
                  swift_retain();
                  swift_retain();
                  uint64_t v26 = v226;
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_bridgeObjectRelease();
                  if (os_log_type_enabled(log, v279))
                  {
                    uint64_t v228 = sub_1008F9FAC();
                    uint64_t v229 = swift_slowAlloc();
                    uint64_t v362 = 0;
                    uint64_t v363 = v229;
                    buf = (uint8_t *)v228;
                    *(_WORD *)uint64_t v228 = 1283;
                    v361 = (unsigned char *)(v228 + 2);
                    v364 = sub_100065514;
                    unint64_t v365 = v296;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    uint64_t v30 = v352;
                    uint64_t v164 = v303;
                    swift_release();
                    v364 = sub_100065514;
                    unint64_t v365 = v225;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = (uint64_t (*)())sub_100065504;
                    unint64_t v365 = v360;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = sub_100065514;
                    unint64_t v365 = v276;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = sub_100065514;
                    unint64_t v365 = v329;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = sub_100065500;
                    unint64_t v365 = v288;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = sub_100065514;
                    unint64_t v365 = v284;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = sub_100065514;
                    unint64_t v365 = v302;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = sub_100065500;
                    unint64_t v365 = v299;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = sub_100065514;
                    unint64_t v365 = v292;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = sub_100065514;
                    unint64_t v365 = v277;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = sub_100065500;
                    unint64_t v365 = v226;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = sub_100065514;
                    unint64_t v365 = v227;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = sub_100065514;
                    unint64_t v365 = v282;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    swift_release();
                    v364 = (uint64_t (*)())sub_10006000C;
                    unint64_t v365 = v222;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v364, (uint64_t)&v361, (uint64_t)&v362, (uint64_t)&v363);
                    uint64_t v230 = *(void *)(v0 + 1392);
                    uint64_t v231 = *(void *)(v0 + 1352);
                    uint64_t v232 = *(void *)(v0 + 1320);
                    swift_release();
                    uint64_t v26 = (uint64_t)log;
                    _os_log_impl((void *)&_mh_execute_header, log, v279, "Return search result for beacon (own beacon): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", buf, 0x34u);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    sub_1008F9FA0();

                    (*v323)(v230, v231);
                    sub_10001DAB4(v232, &qword_10163F728);
                    unint64_t v41 = v322;
                    goto LABEL_104;
                  }
                  uint64_t v280 = *(void *)(v0 + 1392);
                  uint64_t v233 = *(void *)(v0 + 1352);
                  uint64_t v234 = *(void *)(v0 + 1320);

                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  (*v323)(v280, v233);
                  sub_10001DAB4(v234, &qword_10163F728);
                  unint64_t v41 = v322;
                  uint64_t v30 = v352;
                }
                uint64_t v164 = v303;
LABEL_104:
                sub_10025C56C(*(void *)(v0 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                uint64_t v110 = v347 + 1;
                uint64_t v46 = v331;
                unint64_t v165 = v355;
                if (v350 == v164) {
                  goto LABEL_113;
                }
              }
            }
LABEL_25:
            sub_10001CFB8(v26, v41);
            sub_10001CFB8(v26, v41);
LABEL_26:
            sub_10025C56C(*(void *)(v0 + 1104), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
            uint64_t v357 = 0;
            v53 += v337;
            if (!--v55)
            {
              swift_bridgeObjectRelease();
              uint64_t v357 = 0;
              unint64_t v41 = v322;
              goto LABEL_83;
            }
            break;
        }
        goto LABEL_27;
      }
      if (v76)
      {
        if (v76 == 1)
        {
          if (!__OFSUB__(HIDWORD(v73), v73))
          {
            uint64_t v267 = HIDWORD(v73) - (int)v73;
            goto LABEL_141;
          }
          __break(1u);
LABEL_163:
          __break(1u);
          JUMPOUT(0x10022BBF0);
        }
        uint64_t v269 = *(void *)(v73 + 16);
        uint64_t v268 = *(void *)(v73 + 24);
        uint64_t v267 = v268 - v269;
        if (__OFSUB__(v268, v269)) {
          goto LABEL_163;
        }
      }
      else
      {
        uint64_t v267 = BYTE6(v75);
      }
LABEL_141:
      sub_10013019C();
      uint64_t v265 = swift_allocError();
      *(void *)uint64_t v270 = 28;
      *(void *)(v270 + 8) = v267;
      *(unsigned char *)(v270 + 16) = 0;
      swift_willThrow();
LABEL_142:
      sub_10001CFB8(v73, v75);
      v364 = 0;
      unint64_t v365 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      unint64_t v271 = v365;
      *(void *)(v0 + 680) = v364;
      *(void *)(v0 + 688) = v271;
      v272._object = (void *)0x80000001013F3B70;
      v272._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v272);
      *(void *)(v0 + 872) = v265;
      sub_10000588C(&qword_101638D40);
      _print_unlocked<A, B>(_:_:)();
      return _assertionFailure(_:_:file:line:flags:)();
    case 2uLL:
      uint64_t v79 = *(void *)(v73 + 16);
      uint64_t v78 = *(void *)(v73 + 24);
      BOOL v71 = __OFSUB__(v78, v79);
      uint64_t v77 = v78 - v79;
      if (!v71) {
        goto LABEL_60;
      }
      goto LABEL_154;
    case 3uLL:
      uint64_t v267 = 0;
      goto LABEL_141;
    default:
      uint64_t v77 = BYTE6(v75);
      goto LABEL_60;
  }
}

uint64_t sub_10022BC80()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1000);
  swift_task_dealloc();
  return _swift_task_switch(sub_10022BD90, v1, 0);
}

uint64_t sub_10022BD90()
{
  uint64_t v370 = v0;
  uint64_t v1 = *(void *)(v0 + 1480);
  uint64_t v2 = *(void *)(v0 + 1472);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1488) + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, (uint64_t *)&unk_10163B7C0);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 1776) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10022FA14;
    uint64_t v4 = *(void *)(v0 + 1576);
    uint64_t v5 = *(void *)(v0 + 1440);
    return sub_100E5A8AC(v5, v4);
  }
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1720);
  uint64_t v8 = *(void *)(v0 + 1560);
  uint64_t v9 = *(void *)(v0 + 1528);
  uint64_t v10 = *(void *)(v0 + 1496);
  sub_10025C5CC(v2, v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  v7(v8, v10 + *(int *)(v1 + 24), v9);
  sub_10025C56C(v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v11 = *(void *)(v0 + 1760);
  unint64_t v12 = *(void *)(v0 + 1752);
  uint64_t v13 = *(void *)(v0 + 1744);
  (*(void (**)(void, void, void))(v0 + 1704))(*(void *)(v0 + 1568), *(void *)(v0 + 1560), *(void *)(v0 + 1528));
  SecKeyRef v14 = sub_100435E70(v13, v12);
  *(void *)(v0 + 1784) = v14;
  if (v11)
  {
    unint64_t v15 = *(void *)(v0 + 1752);
    uint64_t v16 = *(void *)(v0 + 1744);
    uint64_t v17 = *(void *)(v0 + 1632);
    uint64_t v18 = *(void *)(v0 + 1576);
    uint64_t v19 = *(void *)(v0 + 1568);
    uint64_t v20 = *(void *)(v0 + 1536);
    uint64_t v21 = *(void *)(v0 + 1528);
    sub_10001CFB8(*(void *)(v0 + 1672), *(void *)(v0 + 1680));
    sub_100037A24(v16, v15);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v22(v18, v21);
    sub_10025C56C(v17, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    swift_bridgeObjectRelease();
    v22(v19, v21);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
  uint64_t v24 = *(NSObject **)(v0 + 1632);
  unint64_t isa = (unint64_t)v24[4].isa;
  *(void *)(v0 + 1792) = isa;
  uint64_t v26 = *(void *)(isa + 16);
  *(void *)(v0 + 1800) = v26;
  unint64_t v27 = *(void *)(v0 + 1752);
  uint64_t v28 = *(void *)(v0 + 1744);
  if (v26)
  {
    *(void *)(v0 + 1808) = 0;
    uint64_t v29 = *(void *)(isa + 32);
    *(void *)(v0 + 1816) = v29;
    uint64_t v30 = *(void *)(isa + 40);
    *(void *)(v0 + 1824) = v30;
    int v31 = *(_DWORD *)(isa + 48);
    *(unsigned char *)(v0 + 1836) = *(unsigned char *)(isa + 52);
    *(_DWORD *)(v0 + 1832) = v31;
    swift_bridgeObjectRetain();
    uint64_t v32 = 0;
    unint64_t isa = 0;
    switch(v27 >> 62)
    {
      case 1uLL:
        sub_100037A38(v28, v27);
        uint64_t v28 = *(void *)(v0 + 1744);
        uint64_t v32 = v28 >> 32;
        unint64_t isa = (int)v28;
        break;
      case 2uLL:
        unint64_t isa = *(void *)(v28 + 16);
        uint64_t v32 = *(void *)(v28 + 24);
        sub_100037A38(v28, v27);
        uint64_t v28 = *(void *)(v0 + 1744);
        break;
      case 3uLL:
        break;
      default:
        unint64_t isa = 0;
        uint64_t v32 = BYTE6(v27);
        break;
    }
    unint64_t v233 = sub_1008AA59C(isa, v32, v28, *(void *)(v0 + 1752));
    unint64_t v39 = *(void *)(v0 + 1752);
    if (v233 < 0x39)
    {
      switch(v39 >> 62)
      {
        case 1uLL:
          uint64_t v247 = *(void *)(v0 + 1744);
          uint64_t v234 = v247 >> 32;
          uint64_t v235 = (int)v247;
          goto LABEL_138;
        case 2uLL:
          uint64_t v248 = *(void *)(v0 + 1744);
          uint64_t v235 = *(void *)(v248 + 16);
          uint64_t v234 = *(void *)(v248 + 24);
          goto LABEL_138;
        default:
          goto LABEL_140;
      }
    }
    uint64_t v234 = sub_1008AA520(isa, 57, *(void *)(v0 + 1744), *(void *)(v0 + 1752));
    uint64_t v235 = 0;
    switch(v39 >> 62)
    {
      case 1uLL:
        uint64_t v235 = (int)*(void *)(v0 + 1744);
        break;
      case 2uLL:
        uint64_t v235 = *(void *)(*(void *)(v0 + 1744) + 16);
        break;
      default:
        break;
    }
LABEL_138:
    if (v234 >= v235)
    {
      unint64_t v39 = *(void *)(v0 + 1752);
LABEL_140:
      uint64_t v249 = *(void *)(v0 + 1744);
      sub_1000361E0(v29, v30);
      sub_1000361E0(v29, v30);
      unint64_t isa = Data._Representation.subscript.getter();
      unint64_t v251 = v250;
      sub_100037A24(v249, v39);
      switch(v251 >> 62)
      {
        case 1uLL:
          LODWORD(v252) = HIDWORD(isa) - isa;
          if (__OFSUB__(HIDWORD(isa), isa)) {
            goto LABEL_178;
          }
          uint64_t v252 = (int)v252;
          goto LABEL_145;
        case 2uLL:
          uint64_t v254 = *(void *)(isa + 16);
          uint64_t v253 = *(void *)(isa + 24);
          BOOL v69 = __OFSUB__(v253, v254);
          uint64_t v252 = v253 - v254;
          if (v69) {
            goto LABEL_179;
          }
          goto LABEL_145;
        case 3uLL:
          goto LABEL_147;
        default:
          uint64_t v252 = BYTE6(v251);
LABEL_145:
          if (v252 != 57)
          {
LABEL_147:
            uint64_t v255 = isa;
            unint64_t v256 = v251;
            goto LABEL_148;
          }
          sub_1000361E0(isa, v251);
          uint64_t v257 = sub_100A94760(isa, v251);
          unint64_t v259 = v258;
          sub_10001CFB8(isa, v251);
          sub_100434E0C(v257, v259, (uint64_t *)(v0 + 696));
          sub_10001CFB8(isa, v251);
          uint64_t v260 = *(void *)(v0 + 696);
          *(void *)(v0 + 1840) = v260;
          uint64_t v261 = *(void *)(v0 + 704);
          *(void *)(v0 + 1848) = v261;
          uint64_t v262 = (void *)swift_task_alloc();
          *(void *)(v0 + 1856) = v262;
          *uint64_t v262 = v0;
          v262[1] = sub_100233AA0;
          uint64_t v263 = *(void *)(v0 + 1784);
          uint64_t v264 = *(void *)(v0 + 1568);
          uint64_t v265 = *(void *)(v0 + 1272);
          uint64_t result = sub_10025916C(v265, v29, v30, v263, v260, v261, 0, v264);
          break;
      }
      return result;
    }
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
    swift_once();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v266 = swift_allocObject();
    uint64_t v267 = sub_1004B810C(v266, 1);
    uint64_t v269 = v268;
    *uint64_t v327 = isa;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v270 = String.init<A>(describing:)();
    uint64_t v272 = v271;
    v269[3] = (uint64_t)&type metadata for String;
    v269[4] = sub_10000B4CC();
    *uint64_t v269 = v270;
    v269[1] = v272;
    SharingCircleWildAdvertisementKey.init(key:)(v267);
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_100130148();
    uint64_t v277 = swift_allocError();
    *unint64_t v273 = 0;
    swift_willThrow();
    swift_errorRelease();
    unint64_t v73 = v39;
    uint64_t v71 = v30;
LABEL_161:
    sub_10001CFB8(v71, v73);
    v368 = 0;
    unint64_t v369 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    unint64_t v279 = v369;
    *(void *)(v0 + 680) = v368;
    *(void *)(v0 + 688) = v279;
    v280._object = (void *)0x80000001013F3B70;
    v280._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v280);
    *(void *)(v0 + 872) = v277;
    sub_10000588C(&qword_101638D40);
    _print_unlocked<A, B>(_:_:)();
    return _assertionFailure(_:_:file:line:flags:)();
  }
  SecKeyRef v33 = v14;
  unint64_t v34 = *(void *)(v0 + 1680);
  uint64_t v30 = *(void *)(v0 + 1672);
  uint64_t v361 = *(void *)(v0 + 1576);
  uint64_t v363 = *(void *)(v0 + 1568);
  uint64_t v35 = *(void *)(v0 + 1536);
  uint64_t v36 = *(void *)(v0 + 1528);
  swift_bridgeObjectRetain();
  sub_10001CFB8(v30, v34);

  sub_100037A24(v28, v27);
  swift_bridgeObjectRelease();
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
  v37(v361, v36);
  sub_10025C56C((uint64_t)v24, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  v37(v363, v36);
  for (unint64_t i = *(void *)(v0 + 1664) + 1; i != *(void *)(v0 + 1656); unint64_t i = *(void *)(v0 + 1664) + 1)
  {
    *(void *)(v0 + 1664) = i;
    uint64_t v223 = *(void **)(v0 + 984);
    if (!v223) {
      uint64_t v223 = _swiftEmptyArrayStorage;
    }
    if (i >= v223[2])
    {
      __break(1u);
      sub_10001CFB8((uint64_t)v37, (unint64_t)v24);
      v368 = 0;
      unint64_t v369 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      *(void *)(v0 + 744) = 0;
      *(void *)(v0 + 752) = 0xE000000000000000;
      v281._object = (void *)0x80000001013F3B70;
      v281._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v281);
      *(void *)(v0 + 848) = v28;
      sub_10000588C(&qword_101638D40);
      _print_unlocked<A, B>(_:_:)();
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v224 = *(void *)(v0 + 1632);
    uint64_t v225 = *(void *)(v0 + 1584);
    uint64_t v226 = *(void *)(v0 + 1536);
    uint64_t v227 = *(void *)(v0 + 1528);
    uint64_t v228 = *(void *)(v0 + 1520);
    sub_10025C504((uint64_t)v223+ ((*(unsigned __int8 *)(v0 + 2016) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2016))+ *(void *)(*(void *)(v0 + 1592) + 72) * i, v224, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v224 + 16);
    *(void *)(v0 + 1672) = v37;
    uint64_t v28 = *(void *)(v224 + 24);
    *(void *)(v0 + 1680) = v28;
    sub_10001D074(v224 + *(int *)(v225 + 28), v228, &qword_101638CF0);
    uint64_t v229 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v226 + 48);
    uint64_t v30 = v226 + 48;
    *(void *)(v0 + 1688) = v229;
    *(void *)(v0 + 1696) = v30 & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
    if (v229(v228, 1, v227) != 1)
    {
      uint64_t v238 = *(void *)(v0 + 1576);
      uint64_t v239 = *(void *)(v0 + 1536);
      uint64_t v240 = *(void *)(v0 + 1528);
      uint64_t v241 = *(void *)(v0 + 1520);
      uint64_t v242 = *(void *)(v0 + 1512);
      v243 = *(void (**)(uint64_t, uint64_t, uint64_t))(v239 + 32);
      *(void *)(v0 + 1704) = v243;
      *(void *)(v0 + 1712) = (v239 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v243(v238, v241, v240);
      uint64_t v244 = *(void (**)(uint64_t, uint64_t, uint64_t))(v239 + 16);
      *(void *)(v0 + 1720) = v244;
      *(void *)(v0 + 1728) = (v239 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v244(v242, v238, v240);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v239 + 56))(v242, 0, 1, v240);
      sub_1000361E0((uint64_t)v37, v28);
      os_log_type_t v245 = (void *)swift_task_alloc();
      *(void *)(v0 + 1736) = v245;
      *os_log_type_t v245 = v0;
      v245[1] = sub_1002280E0;
      uint64_t v246 = *(void *)(v0 + 1512);
      return sub_100257574((uint64_t)v37, v28, v246);
    }
    uint64_t v230 = *(void *)(v0 + 1520);
    sub_1000361E0((uint64_t)v37, v28);
    sub_10001DAB4(v230, &qword_101638CF0);
    if (qword_101636908 != -1) {
      swift_once();
    }
    sub_100010324(*(void *)(v0 + 1352), (uint64_t)qword_10170D9D8);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v231 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v231))
    {
      uint64_t v232 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v232 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v231, "Missing share id in payload.", v232, 2u);
      swift_slowDealloc();
    }
    unint64_t isa = *(void *)(v0 + 1632);
    sub_10001CFB8((uint64_t)v37, v28);

    sub_10025C56C(isa, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 976)) {
    unint64_t v39 = *(void *)(v0 + 976);
  }
  else {
    unint64_t v39 = (unint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v344 = *(void *)(v39 + 16);
  if (!v344)
  {
    swift_bridgeObjectRetain();
LABEL_129:
    swift_bridgeObjectRelease();
    uint64_t v236 = *(void *)(v0 + 1648);
    swift_beginAccess();
    uint64_t v360 = *(void *)(v236 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v237 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v237(v360);
  }
  uint64_t v40 = *(void *)(v0 + 1536);
  uint64_t v41 = *(void *)(v0 + 1360);
  uint64_t v327 = (unint64_t *)(v0 + 888);
  uint64_t v328 = *(void *)(v0 + 1280);
  uint64_t v42 = *(void *)(v0 + 1160);
  uint64_t v331 = *(void *)(v0 + 1120);
  uint64_t v364 = *(void *)(v0 + 1104);
  uint64_t v333 = *(void *)(v0 + 1080);
  uint64_t v43 = *(void *)(v0 + 1056);
  uint64_t v351 = (void (**)(uint64_t, void, uint64_t))(v43 + 104);
  uint64_t v323 = *(void *)(v0 + 1040);
  unint64_t v350 = (void (**)(uint64_t, uint64_t))(v43 + 8);
  v330 = (void (**)(void))(v40 + 16);
  uint64_t v332 = *(void *)(v0 + 1032);
  unint64_t v322 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1192) + 56);
  uint64_t v321 = (void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  uint64_t v320 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56);
  uint64_t v319 = (void (**)(uint64_t))(v40 + 32);
  uint64_t v317 = (void (**)(uint64_t, uint64_t))(v40 + 8);
  uint64_t v44 = *(void *)(*(void *)(v0 + 992) + 16);
  v342 = (void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
  unint64_t v335 = (void (**)(uint64_t, uint64_t))(v41 + 8);
  unsigned int v349 = enum case for HashAlgorithm.sha256(_:);
  unint64_t v346 = v39 + 32;
  uint64_t v316 = *(void *)(v0 + 1288);
  v318 = *(int **)(v0 + 1016);
  swift_bridgeObjectRetain();
  unint64_t v45 = 0;
  uint64_t v343 = v44;
  unint64_t v334 = v39;
LABEL_18:
  if (v45 >= *(void *)(v39 + 16)) {
    goto LABEL_171;
  }
  unint64_t v345 = v45;
  uint64_t v46 = (uint64_t *)(v346 + 24 * v45);
  uint64_t v47 = *v46;
  unint64_t isa = v46[1];
  uint64_t v48 = v46[2];
  if (!v44)
  {
    sub_1000361E0(*v46, v46[1]);
    swift_bridgeObjectRetain();
    goto LABEL_82;
  }
  uint64_t v49 = *(void *)(v0 + 992);
  unint64_t v354 = isa >> 62;
  sub_1000361E0(v47, isa);
  uint64_t v50 = *(unsigned __int8 *)(v333 + 80);
  uint64_t v324 = ~v50;
  uint64_t v326 = v50;
  uint64_t v51 = v49 + ((v50 + 32) & ~v50);
  uint64_t v352 = BYTE6(isa);
  uint64_t v347 = *(void *)(v333 + 72);
  BOOL v52 = __OFSUB__(HIDWORD(v47), v47);
  BOOL v340 = v52;
  uint64_t v336 = HIDWORD(v47) - (int)v47;
  uint64_t v329 = v48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v53 = v44;
  unint64_t v359 = isa;
  uint64_t v362 = v47;
  while (2)
  {
    BOOL v54 = *(uint64_t **)(v0 + 1104);
    sub_10025C504(v51, (uint64_t)v54, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v55 = *v54;
    unint64_t v56 = *(void *)(v364 + 8);
    unint64_t v57 = v56 >> 62;
    uint64_t v30 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    switch(v56 >> 62)
    {
      case 1uLL:
        uint64_t v30 = (int)v55;
        uint64_t v58 = v55 >> 32;
        sub_1000361E0(v55, *(void *)(v364 + 8));
        uint64_t v59 = v55 >> 32;
        uint64_t v60 = (int)v55;
        break;
      case 2uLL:
        uint64_t v30 = *(void *)(v55 + 16);
        uint64_t v58 = *(void *)(v55 + 24);
        sub_1000361E0(v55, *(void *)(v364 + 8));
        uint64_t v60 = *(void *)(v55 + 16);
        uint64_t v59 = *(void *)(v55 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v30 = 0;
        uint64_t v60 = 0;
        uint64_t v58 = BYTE6(v56);
        uint64_t v59 = BYTE6(v56);
        break;
    }
    if (v59 < v30 || v30 < v60)
    {
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
      goto LABEL_168;
    }
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    switch((int)v57)
    {
      case 1:
        uint64_t v62 = (int)v55;
        uint64_t v61 = v55 >> 32;
        break;
      case 2:
        uint64_t v62 = *(void *)(v55 + 16);
        uint64_t v61 = *(void *)(v55 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v62 = 0;
        uint64_t v61 = BYTE6(v56);
        break;
    }
    if (v61 < v58 || v58 < v62) {
      goto LABEL_165;
    }
    if (__OFSUB__(v58, v30)) {
      goto LABEL_166;
    }
    if ((unint64_t)(v58 - v30) < 0x39)
    {
      switch((int)v57)
      {
        case 1:
          uint64_t v63 = v55 >> 32;
          goto LABEL_44;
        case 2:
          uint64_t v63 = *(void *)(v55 + 24);
          goto LABEL_46;
        default:
          goto LABEL_48;
      }
    }
    uint64_t v63 = sub_1008AA520(v30, 57, v55, v56);
    uint64_t v64 = 0;
    switch((int)v57)
    {
      case 1:
LABEL_44:
        uint64_t v64 = (int)v55;
        break;
      case 2:
LABEL_46:
        uint64_t v64 = *(void *)(v55 + 16);
        break;
      default:
        break;
    }
    if (v63 < v64) {
      goto LABEL_167;
    }
LABEL_48:
    uint64_t v30 = Data._Representation.subscript.getter();
    unint64_t v39 = v65;
    sub_10001CFB8(v55, v56);
    switch(v39 >> 62)
    {
      case 1uLL:
        LODWORD(v66) = HIDWORD(v30) - v30;
        if (__OFSUB__(HIDWORD(v30), v30)) {
          goto LABEL_169;
        }
        uint64_t v66 = (int)v66;
LABEL_53:
        if (v66 == 57)
        {
          sub_1000361E0(v30, v39);
          uint64_t v70 = sub_100A948F8(v30, v39);
          uint64_t v71 = sub_100A90C58(v70, 0);
          unint64_t v73 = v72;
          CCECCryptorRelease();
          sub_10001CFB8(v30, v39);
          unint64_t v74 = v73 >> 62;
          unint64_t isa = v359;
          switch(v73 >> 62)
          {
            case 1uLL:
              LODWORD(v75) = HIDWORD(v71) - v71;
              if (__OFSUB__(HIDWORD(v71), v71)) {
                goto LABEL_172;
              }
              uint64_t v75 = (int)v75;
LABEL_59:
              if (v75 != 28)
              {
                if (v74)
                {
                  if (v74 == 1)
                  {
                    if (!__OFSUB__(HIDWORD(v71), v71))
                    {
                      uint64_t v274 = HIDWORD(v71) - (int)v71;
LABEL_160:
                      sub_10013019C();
                      uint64_t v277 = swift_allocError();
                      *(void *)uint64_t v278 = 28;
                      *(void *)(v278 + 8) = v274;
                      *(unsigned char *)(v278 + 16) = 0;
                      swift_willThrow();
                      goto LABEL_161;
                    }
                    __break(1u);
                  }
                  else
                  {
                    uint64_t v276 = *(void *)(v71 + 16);
                    uint64_t v275 = *(void *)(v71 + 24);
                    uint64_t v274 = v275 - v276;
                    if (!__OFSUB__(v275, v276)) {
                      goto LABEL_160;
                    }
                  }
                  __break(1u);
                  JUMPOUT(0x10022F944);
                }
                uint64_t v274 = BYTE6(v73);
                goto LABEL_160;
              }
              uint64_t v78 = *(void *)(v0 + 1064);
              uint64_t v79 = *(void *)(v0 + 1048);
              sub_10001CFB8(v30, v39);
              (*v351)(v78, v349, v79);
              uint64_t v30 = Data.hash(algorithm:)();
              unint64_t v39 = v80;
              (*v350)(v78, v79);
              sub_10001CFB8(v71, v73);
              uint64_t v81 = 0;
              uint64_t v47 = v362;
              switch(v39 >> 62)
              {
                case 1uLL:
                  if (__OFSUB__(HIDWORD(v30), v30)) {
                    goto LABEL_174;
                  }
                  uint64_t v81 = HIDWORD(v30) - (int)v30;
LABEL_65:
                  sub_1000361E0(v30, v39);
                  break;
                case 2uLL:
                  uint64_t v83 = *(void *)(v30 + 16);
                  uint64_t v82 = *(void *)(v30 + 24);
                  uint64_t v81 = v82 - v83;
                  if (!__OFSUB__(v82, v83)) {
                    goto LABEL_65;
                  }
                  goto LABEL_175;
                case 3uLL:
                  break;
                default:
                  uint64_t v81 = BYTE6(v39);
                  break;
              }
              uint64_t v84 = v352;
              switch((int)v354)
              {
                case 1:
                  uint64_t v84 = v336;
                  if (v340) {
                    goto LABEL_176;
                  }
                  goto LABEL_70;
                case 2:
                  uint64_t v86 = *(void *)(v362 + 16);
                  uint64_t v85 = *(void *)(v362 + 24);
                  BOOL v69 = __OFSUB__(v85, v86);
                  uint64_t v84 = v85 - v86;
                  if (!v69) {
                    goto LABEL_70;
                  }
                  goto LABEL_177;
                case 3:
                  if (v81) {
                    goto LABEL_25;
                  }
                  goto LABEL_91;
                default:
LABEL_70:
                  if (v81 == v84)
                  {
                    if (v81 < 1)
                    {
LABEL_91:
                      sub_10001CFB8(v30, v39);
                      sub_10001CFB8(v30, v39);
LABEL_92:
                      uint64_t v102 = *(void *)(v0 + 1120);
                      uint64_t v103 = *(void *)(v0 + 1112);
                      uint64_t v104 = *(void *)(v0 + 1104);
                      swift_bridgeObjectRelease();
                      sub_10025C5CC(v104, v103, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                      sub_10025C5CC(v103, v102, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                      uint64_t v313 = sub_1001340BC(v329);
                      if (v313)
                      {
                        unint64_t v341 = v329
                             + ((*(unsigned __int8 *)(v332 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v332 + 80));
                        uint64_t v325 = (v326 + 16) & v324;
                        swift_bridgeObjectRetain();
                        uint64_t v105 = 0;
                        while (1)
                        {
                          uint64_t v353 = v105 + 1;
                          if (__OFADD__(v105, 1)) {
                            goto LABEL_180;
                          }
                          uint64_t v106 = *(uint64_t **)(v0 + 1120);
                          uint64_t v348 = v105;
                          sub_10025C504(v341 + *(void *)(v332 + 72) * v105, *(void *)(v0 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                          uint64_t v107 = *v106;
                          unint64_t v108 = *(void *)(v331 + 8);
                          SecKeyRef v109 = sub_100435E70(v107, v108);
                          uint64_t v110 = **(void **)(v0 + 1040);
                          unint64_t v111 = *(void *)(v323 + 8);
                          uint64_t v112 = PrivateKey.publicKey.getter(v107, v108);
                          unint64_t v114 = v113;
                          sub_1000361E0(v112, v113);
                          uint64_t v115 = sub_100A94760(v112, v114);
                          unint64_t v117 = v116;
                          sub_10001CFB8(v112, v114);
                          sub_100434E0C(v115, v117, (uint64_t *)&v368);
                          uint64_t v118 = *(void *)(v0 + 1024);
                          sub_10001CFB8(v112, v114);
                          uint64_t v120 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v368;
                          unint64_t v119 = v369;
                          unint64_t v121 = v109;
                          sub_1000361E0(v110, v111);
                          sub_1000361E0((uint64_t)v120, v119);
                          BeaconPayloadv1.init(using:data:advertisement:)(v121, v110, v111, (uint64_t)v120, v119, v118);
                          uint64_t v296 = v121;
                          uint64_t v304 = *(void *)(v0 + 1528);
                          uint64_t v307 = *(void *)(v0 + 1560);
                          uint64_t v310 = *(void *)(v0 + 1280);
                          uint64_t v122 = *(void *)(v0 + 1264);
                          uint64_t v123 = *(void *)(v0 + 1240);
                          unint64_t v301 = v119;
                          uint64_t v124 = *(void *)(v0 + 1232);
                          uint64_t v125 = *(void *)(v0 + 1184);
                          uint64_t v337 = (uint64_t)v120;
                          uint64_t v126 = *(void *)(v0 + 1168);
                          uint64_t v127 = *(void *)(v0 + 1152);
                          unint64_t v297 = *(unsigned char **)(v0 + 1144);
                          uint64_t v128 = *(void *)(v0 + 1024);
                          uint64_t v129 = *(void *)(v0 + 1008);
                          unint64_t v355 = *v330;
                          (*v330)();
                          (*v322)(v123, 1, 1, v125);
                          LODWORD(v125) = *(unsigned __int8 *)(v128 + v318[10]);
                          (*v321)(v126, v128 + v318[5], v127);
                          double v130 = *(double *)(v128 + v318[7]);
                          double v131 = *(double *)(v128 + v318[8]);
                          double v132 = *(double *)(v128 + v318[9]);
                          (*v320)(v129, 1, 1, v127);
                          sub_10001D074(v123, v124, &qword_101657910);
                          sub_100CC2A6C(v125, v126, 15, v129, v124, 256, v297, v130, v131, v132);
                          sub_10001DAB4(v123, &qword_101657910);
                          sub_10025C56C(v128, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                          uint64_t v133 = v122 + *(int *)(v328 + 48);
                          uint64_t v134 = *v319;
                          ((void (*)(uint64_t, uint64_t, uint64_t))*v319)(v122, v307, v304);
                          sub_10025C5CC((uint64_t)v297, v133, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v316 + 56))(v122, 0, 1, v310);
                          sub_10001CFB8(v337, v301);
                          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v316 + 48))(v122, 1, v310) == 1)
                          {
                            uint64_t v135 = *(void *)(v0 + 1264);

                            sub_10001DAB4(v135, &qword_10163F720);
                            if (qword_101636908 != -1) {
                              swift_once();
                            }
                            uint64_t v136 = *(void *)(v0 + 1384);
                            uint64_t v137 = *(void *)(v0 + 1352);
                            uint64_t v138 = *(void *)(v0 + 1120);
                            uint64_t v139 = *(void *)(v0 + 1096);
                            uint64_t v140 = sub_100010324(v137, (uint64_t)qword_10170D9D8);
                            (*v342)(v136, v140, v137);
                            sub_10025C504(v138, v139, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                            uint64_t v141 = swift_allocObject();
                            sub_10025C5CC(v139, v141 + v325, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                            uint64_t v142 = swift_allocObject();
                            *(void *)(v142 + 16) = sub_10025B340;
                            *(void *)(v142 + 24) = v141;
                            os_log_type_t v356 = Logger.logObject.getter();
                            os_log_type_t v143 = static os_log_type_t.error.getter();
                            uint64_t v144 = swift_allocObject();
                            *(unsigned char *)(v144 + 16) = 112;
                            uint64_t v30 = swift_allocObject();
                            *(unsigned char *)(v30 + 16) = 8;
                            uint64_t v145 = swift_allocObject();
                            *(void *)(v145 + 16) = 1752392040;
                            uint64_t v146 = swift_allocObject();
                            *(void *)(v146 + 16) = sub_100060540;
                            *(void *)(v146 + 24) = v145;
                            uint64_t v147 = swift_allocObject();
                            *(unsigned char *)(v147 + 16) = 33;
                            uint64_t v148 = swift_allocObject();
                            *(unsigned char *)(v148 + 16) = 8;
                            uint64_t v149 = swift_allocObject();
                            *(void *)(v149 + 16) = sub_1000604E8;
                            *(void *)(v149 + 24) = v142;
                            uint64_t v150 = swift_allocObject();
                            *(void *)(v150 + 16) = sub_10005F790;
                            *(void *)(v150 + 24) = v149;
                            sub_10000588C(&qword_101639B60);
                            uint64_t inited = swift_initStackObject();
                            sub_1004B810C(inited, 6);
                            *uint64_t v152 = sub_10005F778;
                            v152[1] = v144;
                            v152[2] = sub_100065514;
                            v152[3] = v30;
                            v152[4] = sub_10006000C;
                            v152[5] = v146;
                            v152[6] = sub_100065514;
                            v152[7] = v147;
                            v152[8] = sub_100065514;
                            v152[9] = v148;
                            v152[10] = sub_10005F7D0;
                            v152[11] = v150;
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_bridgeObjectRelease();
                            if (os_log_type_enabled(v356, v143))
                            {
                              uint64_t v153 = (uint8_t *)swift_slowAlloc();
                              uint64_t v154 = swift_slowAlloc();
                              uint64_t v366 = 0;
                              uint64_t v367 = v154;
                              *(_WORD *)uint64_t v153 = 515;
                              unint64_t v365 = v153 + 2;
                              sub_1008FA6E0(&v365, (uint64_t)&v366, (uint64_t)&v367, 112);
                              swift_release();
                              v368 = sub_100065514;
                              unint64_t v369 = v30;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              swift_release();
                              v368 = (uint64_t (*)())sub_10006000C;
                              unint64_t v369 = v146;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              swift_release();
                              v368 = sub_100065514;
                              unint64_t v369 = v147;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              swift_release();
                              v368 = sub_100065514;
                              unint64_t v369 = v148;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              swift_release();
                              v368 = (uint64_t (*)())sub_10005F7D0;
                              unint64_t v369 = v150;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              uint64_t v155 = *(void *)(v0 + 1384);
                              uint64_t v156 = *(void *)(v0 + 1352);
                              swift_release();
                              _os_log_impl((void *)&_mh_execute_header, v356, v143, "Could not create search result for beacon: %{private,mask.hash}s.", v153, 0x16u);
                              swift_arrayDestroy();
                              swift_slowDealloc();
                              sub_1008F9FA0();

                              (*v335)(v155, v156);
                            }
                            else
                            {
                              uint64_t v157 = *(void *)(v0 + 1384);
                              uint64_t v158 = *(void *)(v0 + 1352);
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();

                              (*v335)(v157, v158);
                            }
                            uint64_t v44 = v343;
                            unint64_t isa = v359;
                            uint64_t v47 = v362;
                            unint64_t v39 = v334;
                          }
                          else
                          {
                            uint64_t v159 = *(void *)(v0 + 1648);
                            uint64_t v160 = *(void *)(v0 + 1528);
                            uint64_t v161 = *(void *)(v0 + 1320);
                            uint64_t v162 = *(void *)(v0 + 1312);
                            uint64_t v163 = *(int *)(v328 + 48);
                            uint64_t v164 = v161 + v163;
                            uint64_t v165 = *(void *)(v0 + 1264) + v163;
                            v134(v161);
                            sub_10025C5CC(v165, v164, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            uint64_t v166 = v162 + *(int *)(v328 + 48);
                            ((void (*)(uint64_t, uint64_t, uint64_t))v355)(v162, v161, v160);
                            uint64_t v338 = v164;
                            sub_10025C504(v164, v166, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            swift_beginAccess();
                            uint64_t v167 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000F790C(v162, *(void *)(v159 + 16));
                            uint64_t v168 = *(void *)(v0 + 1528);
                            uint64_t v169 = *(void *)(v0 + 1328);
                            uint64_t v170 = *(void *)(v0 + 1320);
                            uint64_t v171 = *(void *)(v0 + 1312);
                            if (v167)
                            {
                              uint64_t v305 = *(void *)(v0 + 1144);
                              v368 = (uint64_t (*)())v167;
                              swift_endAccess();
                              sub_10025C56C(v166, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              uint64_t v298 = *v317;
                              (*v317)(v171, v168);
                              uint64_t v172 = (unsigned __int8 *)(v169 + *(int *)(v328 + 48));
                              ((void (*)(uint64_t, uint64_t, uint64_t))v355)(v169, v170, v168);
                              sub_10025C504(v164, (uint64_t)v172, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              sub_1000D1E3C(v305, v172);
                              sub_10025C56C(v305, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              v298(v169, v168);
                              uint64_t v173 = v169 + *(int *)(v328 + 48);
                              ((void (*)(uint64_t, uint64_t, uint64_t))v355)(v169, v170, v168);
                              sub_10025C504(v164, v173, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              uint64_t v174 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v368;
                              swift_beginAccess();
                              sub_10015DF64((uint64_t)v174, v169);
                              swift_endAccess();
                              sub_10025C56C(v173, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            }
                            else
                            {
                              uint64_t v291 = *(void *)(v0 + 1304);
                              swift_endAccess();
                              sub_10025C56C(v166, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              uint64_t v294 = *v317;
                              (*v317)(v171, v168);
                              uint64_t v175 = v169 + *(int *)(v328 + 48);
                              uint64_t v302 = v175;
                              ((void (*)(uint64_t, uint64_t, uint64_t))v355)(v169, v170, v168);
                              sub_10025C504(v164, v175, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              sub_10000588C(&qword_10163AA18);
                              uint64_t v176 = swift_allocObject();
                              uint64_t v289 = sub_1004B7688(v176, 1);
                              uint64_t v178 = v177;
                              uint64_t v179 = v291 + *(int *)(v328 + 48);
                              ((void (*)(uint64_t, uint64_t, uint64_t))v355)(v291, v170, v168);
                              sub_10025C504(v164, v179, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              sub_10025C5CC(v179, v178, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              uint64_t v180 = SharingCircleWildAdvertisementKey.init(key:)(v289);
                              v294(v291, v168);
                              uint64_t v181 = sub_101158D6C(v180);
                              swift_bridgeObjectRelease();
                              swift_beginAccess();
                              sub_10015DF64(v181, v169);
                              swift_endAccess();
                              sub_10025C56C(v302, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            }
                            uint64_t v182 = *(void *)(v0 + 1528);
                            uint64_t v183 = *(void *)(v0 + 1392);
                            uint64_t v308 = *(void *)(v0 + 1648);
                            uint64_t v184 = *(void *)(v0 + 1352);
                            uint64_t v185 = *(void *)(v0 + 1328);
                            uint64_t v311 = *(void *)(v0 + 1320);
                            uint64_t v186 = *(void *)(v0 + 1120);
                            uint64_t v187 = *(void *)(v0 + 1096);
                            uint64_t v188 = sub_100207468();
                            (*v342)(v183, v188, v184);
                            sub_10025C504(v186, v187, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                            uint64_t v189 = swift_allocObject();
                            sub_10025C5CC(v187, v189 + v325, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                            uint64_t v299 = swift_allocObject();
                            *(void *)(v299 + 16) = sub_10025B340;
                            *(void *)(v299 + 24) = v189;
                            uint64_t v190 = v185 + *(int *)(v328 + 48);
                            ((void (*)(uint64_t, uint64_t, uint64_t))v355)(v185, v311, v182);
                            sub_10025C504(v338, v190, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            uint64_t v191 = *(unsigned __int8 *)(v316 + 80);
                            uint64_t v192 = (v191 + 16) & ~v191;
                            uint64_t v193 = swift_allocObject();
                            sub_10001D608(v185, v193 + v192, &qword_10163F728);
                            uint64_t v292 = swift_allocObject();
                            *(void *)(v292 + 16) = sub_10025B4F4;
                            *(void *)(v292 + 24) = v193;
                            uint64_t v194 = v185 + *(int *)(v328 + 48);
                            ((void (*)(uint64_t, uint64_t, uint64_t))v355)(v185, v311, v182);
                            sub_10025C504(v338, v194, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            uint64_t v195 = swift_allocObject();
                            sub_10001D608(v185, v195 + v192, &qword_10163F728);
                            uint64_t v287 = swift_allocObject();
                            *(void *)(v287 + 16) = sub_10025B504;
                            *(void *)(v287 + 24) = v195;
                            uint64_t v196 = v185 + *(int *)(v328 + 48);
                            ((void (*)(uint64_t, uint64_t, uint64_t))v355)(v185, v311, v182);
                            sub_10025C504(v338, v196, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            uint64_t v197 = (v191 + 24) & ~v191;
                            uint64_t v198 = swift_allocObject();
                            *(void *)(v198 + 16) = v308;
                            sub_10001D608(v185, v198 + v197, &qword_10163F728);
                            swift_retain();
                            osos_log_t log = Logger.logObject.getter();
                            os_log_type_t v283 = static os_log_type_t.info.getter();
                            uint64_t v339 = swift_allocObject();
                            *(unsigned char *)(v339 + 16) = 112;
                            uint64_t v199 = swift_allocObject();
                            *(unsigned char *)(v199 + 16) = 8;
                            uint64_t v200 = swift_allocObject();
                            *(void *)(v200 + 16) = 1752392040;
                            uint64_t v303 = swift_allocObject();
                            *(void *)(v303 + 16) = sub_10006550C;
                            *(void *)(v303 + 24) = v200;
                            uint64_t v306 = swift_allocObject();
                            *(unsigned char *)(v306 + 16) = 33;
                            uint64_t v312 = swift_allocObject();
                            *(unsigned char *)(v312 + 16) = 8;
                            uint64_t v201 = swift_allocObject();
                            *(void *)(v201 + 16) = sub_1000654F4;
                            *(void *)(v201 + 24) = v299;
                            uint64_t v202 = swift_allocObject();
                            *(void *)(v202 + 16) = sub_1000654EC;
                            *(void *)(v202 + 24) = v201;
                            uint64_t v203 = v202;
                            unint64_t v295 = v202;
                            uint64_t v204 = swift_allocObject();
                            *(unsigned char *)(v204 + 16) = 34;
                            unint64_t v205 = v204;
                            uint64_t v300 = swift_allocObject();
                            *(unsigned char *)(v300 + 16) = 8;
                            uint64_t v206 = swift_allocObject();
                            *(void *)(v206 + 16) = sub_10025B4F8;
                            *(void *)(v206 + 24) = v292;
                            uint64_t v207 = swift_allocObject();
                            *(void *)(v207 + 16) = sub_1000654EC;
                            *(void *)(v207 + 24) = v206;
                            uint64_t v208 = v207;
                            unint64_t v290 = v207;
                            uint64_t v293 = swift_allocObject();
                            *(unsigned char *)(v293 + 16) = 34;
                            uint64_t v209 = v199;
                            unint64_t v309 = v199;
                            uint64_t v357 = swift_allocObject();
                            *(unsigned char *)(v357 + 16) = 8;
                            uint64_t v210 = swift_allocObject();
                            *(void *)(v210 + 16) = sub_10025B508;
                            *(void *)(v210 + 24) = v287;
                            uint64_t v211 = swift_allocObject();
                            *(void *)(v211 + 16) = sub_1000654EC;
                            *(void *)(v211 + 24) = v210;
                            uint64_t v212 = v211;
                            unint64_t v285 = v211;
                            uint64_t v286 = swift_allocObject();
                            *(unsigned char *)(v286 + 16) = 0;
                            uint64_t v288 = swift_allocObject();
                            *(unsigned char *)(v288 + 16) = 8;
                            uint64_t v213 = swift_allocObject();
                            *(void *)(v213 + 16) = sub_10025B514;
                            *(void *)(v213 + 24) = v198;
                            uint64_t v284 = swift_allocObject();
                            *(void *)(v284 + 16) = sub_100060004;
                            *(void *)(v284 + 24) = v213;
                            sub_10000588C(&qword_101639B60);
                            uint64_t v214 = swift_allocObject();
                            sub_1004B810C(v214, 15);
                            *uint64_t v215 = sub_100065514;
                            v215[1] = v339;
                            v215[2] = sub_100065514;
                            v215[3] = v209;
                            v215[4] = sub_100065504;
                            v215[5] = v303;
                            v215[6] = sub_100065514;
                            v215[7] = v306;
                            v215[8] = sub_100065514;
                            v215[9] = v312;
                            v215[10] = sub_100065500;
                            v215[11] = v203;
                            v215[12] = sub_100065514;
                            v215[13] = v205;
                            v215[14] = sub_100065514;
                            v215[15] = v300;
                            v215[16] = sub_100065500;
                            v215[17] = v208;
                            v215[18] = sub_100065514;
                            v215[19] = v293;
                            v215[20] = sub_100065514;
                            v215[21] = v357;
                            v215[22] = sub_100065500;
                            v215[23] = v212;
                            v215[24] = sub_100065514;
                            v215[25] = v286;
                            v215[26] = sub_100065514;
                            v215[27] = v288;
                            v215[28] = sub_10006000C;
                            v215[29] = v284;
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_retain();
                            swift_bridgeObjectRelease();
                            if (os_log_type_enabled(oslog, v283))
                            {
                              uint64_t v216 = (uint8_t *)sub_1008F9FAC();
                              uint64_t v217 = swift_slowAlloc();
                              uint64_t v366 = 0;
                              uint64_t v367 = v217;
                              *(_WORD *)uint64_t v216 = 1283;
                              unint64_t v365 = v216 + 2;
                              v368 = sub_100065514;
                              unint64_t v369 = v339;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              unint64_t isa = v359;
                              swift_release();
                              v368 = sub_100065514;
                              unint64_t v369 = v309;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              uint64_t v47 = v362;
                              swift_release();
                              v368 = (uint64_t (*)())sub_100065504;
                              unint64_t v369 = v303;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              swift_release();
                              v368 = sub_100065514;
                              unint64_t v369 = v306;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              swift_release();
                              v368 = sub_100065514;
                              unint64_t v369 = v312;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              uint64_t v44 = v343;
                              swift_release();
                              v368 = sub_100065500;
                              unint64_t v369 = v295;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              swift_release();
                              v368 = sub_100065514;
                              unint64_t v369 = v205;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              swift_release();
                              v368 = sub_100065514;
                              unint64_t v369 = v300;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              swift_release();
                              v368 = sub_100065500;
                              unint64_t v369 = v290;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              swift_release();
                              v368 = sub_100065514;
                              unint64_t v369 = v293;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              swift_release();
                              v368 = sub_100065514;
                              unint64_t v369 = v357;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              unint64_t v39 = v334;
                              swift_release();
                              v368 = sub_100065500;
                              unint64_t v369 = v285;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              swift_release();
                              v368 = sub_100065514;
                              unint64_t v369 = v286;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              swift_release();
                              v368 = sub_100065514;
                              unint64_t v369 = v288;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              swift_release();
                              v368 = (uint64_t (*)())sub_10006000C;
                              unint64_t v369 = v284;
                              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v368, (uint64_t)&v365, (uint64_t)&v366, (uint64_t)&v367);
                              uint64_t v218 = *(void *)(v0 + 1392);
                              uint64_t v219 = *(void *)(v0 + 1352);
                              uint64_t v358 = *(void *)(v0 + 1320);
                              swift_release();
                              uint64_t v30 = (uint64_t)oslog;
                              _os_log_impl((void *)&_mh_execute_header, oslog, v283, "Return search result for beacon (own beacon): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", v216, 0x34u);
                              swift_arrayDestroy();
                              swift_slowDealloc();
                              sub_1008F9FA0();

                              (*v335)(v218, v219);
                              sub_10001DAB4(v358, &qword_10163F728);
                            }
                            else
                            {
                              uint64_t v220 = *(void *)(v0 + 1392);
                              uint64_t v221 = *(void *)(v0 + 1352);
                              uint64_t v30 = *(void *)(v0 + 1320);

                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              (*v335)(v220, v221);
                              sub_10001DAB4(v30, &qword_10163F728);
                              unint64_t v39 = v334;
                              uint64_t v44 = v343;
                              unint64_t isa = v359;
                              uint64_t v47 = v362;
                            }
                          }
                          sub_10025C56C(*(void *)(v0 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                          uint64_t v105 = v348 + 1;
                          if (v353 == v313) {
                            goto LABEL_111;
                          }
                        }
                      }
                      swift_bridgeObjectRetain();
                      unint64_t v39 = v334;
                      uint64_t v44 = v343;
LABEL_111:
                      uint64_t v222 = *(void *)(v0 + 1120);
                      sub_10001CFB8(v47, isa);
                      swift_bridgeObjectRelease_n();
                      sub_10025C56C(v222, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                      goto LABEL_88;
                    }
                    sub_1000361E0(v362, v359);
                    sub_1000361E0(v362, v359);
                    switch(v39 >> 62)
                    {
                      case 1uLL:
                        if (v30 >> 32 < (int)v30) {
                          goto LABEL_181;
                        }
                        sub_1000361E0(v362, v359);
                        sub_1000361E0(v362, v359);
                        sub_1000361E0(v362, v359);
                        sub_1000361E0(v30, v39);
                        sub_1000361E0(v362, v359);
                        char v89 = sub_100BFBE64((int)v30, v30 >> 32, v39 & 0x3FFFFFFFFFFFFFFFLL, v362, v359);
                        sub_10001CFB8(v362, v359);
                        sub_10001CFB8(v30, v39);
                        break;
                      case 2uLL:
                        uint64_t v90 = *(void *)(v30 + 16);
                        uint64_t v91 = *(void *)(v30 + 24);
                        sub_1000361E0(v362, v359);
                        sub_1000361E0(v362, v359);
                        sub_1000361E0(v362, v359);
                        sub_1000361E0(v362, v359);
                        swift_retain();
                        swift_retain();
                        char v89 = sub_100BFBE64(v90, v91, v39 & 0x3FFFFFFFFFFFFFFFLL, v362, v359);
                        sub_10001CFB8(v362, v359);
                        swift_release();
                        swift_release();
                        uint64_t v47 = v362;
                        break;
                      case 3uLL:
                        sub_1000361E0(v362, v359);
                        sub_1000361E0(v362, v359);
                        sub_1000361E0(v362, v359);
                        sub_1000361E0(v362, v359);
                        unint64_t v87 = v315 & 0xFF00000000000000;
                        uint64_t v88 = 0;
                        v315 &= 0xFF00000000000000;
                        goto LABEL_78;
                      default:
                        sub_1000361E0(v362, v359);
                        sub_1000361E0(v362, v359);
                        sub_1000361E0(v362, v359);
                        sub_1000361E0(v362, v359);
                        unint64_t v87 = v314 & 0xFF00000000000000 | v39 & 0xFFFFFFFFFFFFFFLL;
                        uint64_t v88 = v30;
                        unint64_t v314 = v87;
LABEL_78:
                        char v89 = sub_100BFBD8C(v88, v87, v362, v359);
                        sub_10001CFB8(v362, v359);
                        break;
                    }
                    sub_10001CFB8(v30, v39);
                    sub_10001CFB8(v47, v359);
                    sub_10001CFB8(v30, v39);
                    sub_10001CFB8(v47, v359);
                    sub_10001CFB8(v47, v359);
                    sub_10001CFB8(v47, v359);
                    sub_10001CFB8(v47, v359);
                    if (v89) {
                      goto LABEL_92;
                    }
                  }
                  else
                  {
LABEL_25:
                    sub_10001CFB8(v30, v39);
                    sub_10001CFB8(v30, v39);
                  }
                  sub_10025C56C(*(void *)(v0 + 1104), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                  v51 += v347;
                  if (--v53) {
                    continue;
                  }
                  swift_bridgeObjectRelease();
                  unint64_t v39 = v334;
                  break;
              }
LABEL_82:
              if (qword_101636908 != -1) {
                swift_once();
              }
              uint64_t v92 = *(void *)(v0 + 1376);
              uint64_t v93 = *(void *)(v0 + 1352);
              uint64_t v94 = sub_100010324(v93, (uint64_t)qword_10170D9D8);
              (*v342)(v92, v94, v93);
              sub_1000361E0(v47, isa);
              swift_bridgeObjectRetain();
              sub_1000361E0(v47, isa);
              swift_bridgeObjectRetain();
              uint64_t v30 = Logger.logObject.getter();
              os_log_type_t v95 = static os_log_type_t.error.getter();
              BOOL v96 = os_log_type_enabled((os_log_t)v30, v95);
              uint64_t v97 = *(void *)(v0 + 1376);
              uint64_t v98 = *(void *)(v0 + 1352);
              if (v96)
              {
                unint64_t v99 = isa;
                unint64_t isa = swift_slowAlloc();
                v368 = (uint64_t (*)())swift_slowAlloc();
                *(_DWORD *)unint64_t isa = 141558275;
                *(void *)(isa + 4) = 1752392040;
                *(_WORD *)(isa + 12) = 2081;
                *(void *)(v0 + 728) = v47;
                *(void *)(v0 + 736) = v99;
                sub_1001D780C();
                uint64_t v100 = RawRepresentable<>.hexString.getter();
                *(void *)(isa + 14) = sub_1008FA0F0(v100, v101, (uint64_t *)&v368);
                swift_bridgeObjectRelease();
                sub_10001CFB8(v47, v99);
                swift_bridgeObjectRelease();
                sub_10001CFB8(v47, v99);
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)v30, v95, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)isa, 0x16u);
                swift_arrayDestroy();
                unint64_t v39 = v334;
                swift_slowDealloc();
                swift_slowDealloc();

                sub_10001CFB8(v47, v99);
                swift_bridgeObjectRelease();
              }
              else
              {
                sub_10001CFB8(v47, isa);
                swift_bridgeObjectRelease();
                sub_10001CFB8(v47, isa);
                swift_bridgeObjectRelease();
                sub_10001CFB8(v47, isa);
                swift_bridgeObjectRelease();
              }
              (*v335)(v97, v98);
              uint64_t v44 = v343;
LABEL_88:
              unint64_t v45 = v345 + 1;
              if (v345 + 1 == v344) {
                goto LABEL_129;
              }
              break;
            case 2uLL:
              uint64_t v77 = *(void *)(v71 + 16);
              uint64_t v76 = *(void *)(v71 + 24);
              BOOL v69 = __OFSUB__(v76, v77);
              uint64_t v75 = v76 - v77;
              if (!v69) {
                goto LABEL_59;
              }
              goto LABEL_173;
            case 3uLL:
              uint64_t v274 = 0;
              goto LABEL_160;
            default:
              uint64_t v75 = BYTE6(v73);
              goto LABEL_59;
          }
          goto LABEL_18;
        }
LABEL_149:
        uint64_t v255 = v30;
        unint64_t v256 = v39;
LABEL_148:
        sub_10001CFB8(v255, v256);
        return _assertionFailure(_:_:file:line:flags:)();
      case 2uLL:
        uint64_t v68 = *(void *)(v30 + 16);
        uint64_t v67 = *(void *)(v30 + 24);
        BOOL v69 = __OFSUB__(v67, v68);
        uint64_t v66 = v67 - v68;
        if (!v69) {
          goto LABEL_53;
        }
        goto LABEL_170;
      case 3uLL:
        goto LABEL_149;
      default:
        uint64_t v66 = BYTE6(v39);
        goto LABEL_53;
    }
  }
}

uint64_t sub_10022FA14()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1000);
  swift_task_dealloc();
  return _swift_task_switch(sub_10022FB24, v1, 0);
}

uint64_t sub_10022FB24()
{
  uint64_t v416 = v0;
  uint64_t v1 = *(void *)(v0 + 1448);
  uint64_t v2 = *(void *)(v0 + 1440);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1456) + 48))(v2, 1, v1) != 1)
  {
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1720);
    uint64_t v22 = *(void *)(v0 + 1560);
    uint64_t v23 = *(void *)(v0 + 1528);
    uint64_t v24 = *(void *)(v0 + 1464);
    sub_10025C5CC(v2, v24, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    v21(v22, v24 + *(int *)(v1 + 24), v23);
    sub_10025C56C(v24, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v25 = *(void *)(v0 + 1760);
    unint64_t v26 = *(void *)(v0 + 1752);
    uint64_t v27 = *(void *)(v0 + 1744);
    (*(void (**)(void, void, void))(v0 + 1704))(*(void *)(v0 + 1568), *(void *)(v0 + 1560), *(void *)(v0 + 1528));
    SecKeyRef v28 = sub_100435E70(v27, v26);
    *(void *)(v0 + 1784) = v28;
    if (v25)
    {
      unint64_t v29 = *(void *)(v0 + 1752);
      uint64_t v30 = *(void *)(v0 + 1744);
      uint64_t v31 = *(void *)(v0 + 1632);
      uint64_t v32 = *(void *)(v0 + 1576);
      uint64_t v33 = *(void *)(v0 + 1568);
      uint64_t v34 = *(void *)(v0 + 1536);
      uint64_t v35 = *(void *)(v0 + 1528);
      sub_10001CFB8(*(void *)(v0 + 1672), *(void *)(v0 + 1680));
      sub_100037A24(v30, v29);
      uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
      v36(v32, v35);
      sub_10025C56C(v31, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      swift_bridgeObjectRelease();
      v36(v33, v35);
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
      return v37();
    }
    uint64_t v11 = *(NSObject **)(v0 + 1632);
    Class isa = v11[4].isa;
    *(void *)(v0 + 1792) = isa;
    uint64_t v46 = *((void *)isa + 2);
    *(void *)(v0 + 1800) = v46;
    unint64_t v47 = *(void *)(v0 + 1752);
    uint64_t v48 = *(void *)(v0 + 1744);
    if (!v46)
    {
      SecKeyRef v54 = v28;
      unint64_t v55 = *(void *)(v0 + 1680);
      uint64_t v56 = *(void *)(v0 + 1672);
      uint64_t v403 = *(void *)(v0 + 1576);
      uint64_t v407 = *(void *)(v0 + 1568);
      uint64_t v57 = *(void *)(v0 + 1536);
      uint64_t v58 = *(void *)(v0 + 1528);
      swift_bridgeObjectRetain();
      sub_10001CFB8(v56, v55);

      sub_100037A24(v48, v47);
      swift_bridgeObjectRelease();
      unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
      v15(v403, v58);
      sub_10025C56C((uint64_t)v11, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      v15(v407, v58);
      uint64_t v405 = 0;
      goto LABEL_14;
    }
    *(void *)(v0 + 1808) = 0;
    uint64_t v49 = *((void *)isa + 4);
    *(void *)(v0 + 1816) = v49;
    uint64_t v50 = *((void *)isa + 5);
    *(void *)(v0 + 1824) = v50;
    int v51 = *((_DWORD *)isa + 12);
    *(unsigned char *)(v0 + 1836) = *((unsigned char *)isa + 52);
    *(_DWORD *)(v0 + 1832) = v51;
    swift_bridgeObjectRetain();
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    switch(v47 >> 62)
    {
      case 1uLL:
        sub_100037A38(v48, v47);
        uint64_t v48 = *(void *)(v0 + 1744);
        uint64_t v52 = v48 >> 32;
        uint64_t v53 = (int)v48;
        break;
      case 2uLL:
        uint64_t v53 = *(void *)(v48 + 16);
        uint64_t v52 = *(void *)(v48 + 24);
        sub_100037A38(v48, v47);
        uint64_t v48 = *(void *)(v0 + 1744);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v53 = 0;
        uint64_t v52 = BYTE6(v47);
        break;
    }
    unint64_t v292 = sub_1008AA59C(v53, v52, v48, *(void *)(v0 + 1752));
    unint64_t v60 = *(void *)(v0 + 1752);
    if (v292 < 0x39)
    {
      switch(v60 >> 62)
      {
        case 1uLL:
          uint64_t v295 = *(void *)(v0 + 1744);
          uint64_t v293 = v295 >> 32;
          uint64_t v294 = (int)v295;
          goto LABEL_150;
        case 2uLL:
          uint64_t v296 = *(void *)(v0 + 1744);
          uint64_t v294 = *(void *)(v296 + 16);
          uint64_t v293 = *(void *)(v296 + 24);
          goto LABEL_150;
        default:
          goto LABEL_152;
      }
    }
    uint64_t v293 = sub_1008AA520(v53, 57, *(void *)(v0 + 1744), *(void *)(v0 + 1752));
    uint64_t v294 = 0;
    switch(v60 >> 62)
    {
      case 1uLL:
        uint64_t v294 = (int)*(void *)(v0 + 1744);
        break;
      case 2uLL:
        uint64_t v294 = *(void *)(*(void *)(v0 + 1744) + 16);
        break;
      default:
        break;
    }
LABEL_150:
    if (v293 >= v294)
    {
      unint64_t v60 = *(void *)(v0 + 1752);
LABEL_152:
      uint64_t v297 = *(void *)(v0 + 1744);
      sub_1000361E0(v49, v50);
      sub_1000361E0(v49, v50);
      uint64_t v298 = Data._Representation.subscript.getter();
      unint64_t v300 = v299;
      sub_100037A24(v297, v60);
      switch(v300 >> 62)
      {
        case 1uLL:
          LODWORD(v301) = HIDWORD(v298) - v298;
          if (__OFSUB__(HIDWORD(v298), v298))
          {
            __break(1u);
LABEL_189:
            __break(1u);
            goto LABEL_190;
          }
          uint64_t v301 = (int)v301;
LABEL_157:
          if (v301 == 57)
          {
            sub_1000361E0(v298, v300);
            uint64_t v304 = sub_100A94760(v298, v300);
            unint64_t v306 = v305;
            sub_10001CFB8(v298, v300);
            sub_100434E0C(v304, v306, (uint64_t *)(v0 + 696));
            sub_10001CFB8(v298, v300);
            uint64_t v312 = *(void *)(v0 + 696);
            *(void *)(v0 + 1840) = v312;
            uint64_t v313 = *(void *)(v0 + 704);
            *(void *)(v0 + 1848) = v313;
            unint64_t v314 = (void *)swift_task_alloc();
            *(void *)(v0 + 1856) = v314;
            *unint64_t v314 = v0;
            v314[1] = sub_100233AA0;
            uint64_t v315 = *(void *)(v0 + 1784);
            uint64_t v316 = *(void *)(v0 + 1568);
            uint64_t v317 = *(void *)(v0 + 1272);
            return sub_10025916C(v317, v49, v50, v315, v312, v313, 0, v316);
          }
LABEL_159:
          uint64_t v280 = v298;
          unint64_t v281 = v300;
LABEL_160:
          sub_10001CFB8(v280, v281);
          break;
        case 2uLL:
          uint64_t v303 = *(void *)(v298 + 16);
          uint64_t v302 = *(void *)(v298 + 24);
          BOOL v91 = __OFSUB__(v302, v303);
          uint64_t v301 = v302 - v303;
          if (!v91) {
            goto LABEL_157;
          }
          goto LABEL_189;
        case 3uLL:
          goto LABEL_159;
        default:
          uint64_t v301 = BYTE6(v300);
          goto LABEL_157;
      }
      return _assertionFailure(_:_:file:line:flags:)();
    }
LABEL_186:
    __break(1u);
LABEL_187:
    swift_once();
LABEL_135:
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v282 = swift_allocObject();
    uint64_t v283 = sub_1004B810C(v282, 1);
    unint64_t v285 = v284;
    uint64_t *v361 = v53;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v286 = String.init<A>(describing:)();
    uint64_t v288 = v287;
    v285[3] = (uint64_t)&type metadata for String;
    v285[4] = sub_10000B4CC();
    *unint64_t v285 = v286;
    v285[1] = v288;
    SharingCircleWildAdvertisementKey.init(key:)(v283);
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_100130148();
    uint64_t v289 = swift_allocError();
    *unint64_t v290 = 0;
    swift_willThrow();
    swift_errorRelease();
    unint64_t v95 = v60;
    uint64_t v93 = v50;
    goto LABEL_164;
  }
  sub_10001DAB4(v2, (uint64_t *)&unk_101638D10);
  if (qword_101636908 != -1) {
    goto LABEL_177;
  }
  while (1)
  {
    uint64_t v3 = *(void *)(v0 + 1632);
    uint64_t v4 = *(void *)(v0 + 1624);
    uint64_t v5 = *(void *)(v0 + 1432);
    uint64_t v6 = *(void *)(v0 + 1360);
    uint64_t v7 = *(void *)(v0 + 1352);
    unint64_t v8 = (*(unsigned __int8 *)(v0 + 2016) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2016);
    uint64_t v9 = sub_100010324(v7, (uint64_t)qword_10170D9D8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v9, v7);
    sub_10025C504(v3, v4, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    uint64_t v10 = swift_allocObject();
    sub_10025C5CC(v4, v10 + v8, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    uint64_t v11 = Logger.logObject.getter();
    LOBYTE(v4) = static os_log_type_t.error.getter();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = sub_10025B754;
    *(void *)(v12 + 24) = v10;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = sub_1000654EC;
    *(void *)(v13 + 24) = v12;
    os_log_type_t v14 = v4;
    if (os_log_type_enabled(v11, (os_log_type_t)v4))
    {
      unint64_t v15 = (void (*)(uint64_t, uint64_t))(v0 + 712);
      uint64_t v16 = *(void *)(v0 + 1760);
      uint64_t v390 = *(void *)(v0 + 1744);
      unint64_t v393 = *(void *)(v0 + 1752);
      uint64_t v381 = *(void *)(v0 + 1672);
      unint64_t v384 = *(void *)(v0 + 1680);
      uint64_t v398 = *(void *)(v0 + 1576);
      uint64_t v401 = *(void *)(v0 + 1632);
      uint64_t v17 = *(void *)(v0 + 1536);
      uint64_t v396 = *(void *)(v0 + 1528);
      uint64_t v18 = *(void *)(v0 + 1360);
      uint64_t v386 = *(void *)(v0 + 1352);
      uint64_t v388 = *(void *)(v0 + 1432);
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_slowAlloc();
      uint64_t v413 = 0;
      v414 = (uint64_t (*)())v20;
      *(_DWORD *)uint64_t v19 = 141558275;
      *(void *)(v19 + 4) = 1752392040;
      *(unsigned char *)(v19 + 12) = 33;
      v412 = (unsigned char *)(v19 + 13);
      sub_1008FA6E0(&v412, (uint64_t)&v413, (uint64_t)&v414, 8);
      *(void *)(v0 + 712) = sub_100065500;
      *(void *)(v0 + 720) = v13;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 712), (uint64_t)&v412, (uint64_t)&v413, (uint64_t)&v414);
      uint64_t v405 = v16;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v11, v14, "Cannot find sharing circle for payload: %{private,mask.hash}s.", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();
      sub_10001CFB8(v381, v384);

      sub_100037A24(v390, v393);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v388, v386);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v398, v396);
      sub_10025C56C(v401, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    }
    else
    {
      unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 1752);
      uint64_t v39 = *(void *)(v0 + 1744);
      uint64_t v402 = *(void *)(v0 + 1576);
      uint64_t v406 = *(void *)(v0 + 1632);
      uint64_t v40 = *(void *)(v0 + 1536);
      uint64_t v41 = *(void *)(v0 + 1528);
      uint64_t v42 = *(void *)(v0 + 1432);
      uint64_t v43 = *(void *)(v0 + 1360);
      uint64_t v44 = *(void *)(v0 + 1352);
      sub_10001CFB8(*(void *)(v0 + 1672), *(void *)(v0 + 1680));

      sub_100037A24(v39, (unint64_t)v15);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v402, v41);
      sub_10025C56C(v406, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      uint64_t v405 = *(void *)(v0 + 1760);
    }
LABEL_14:
    for (unint64_t i = *(void *)(v0 + 1664) + 1; i != *(void *)(v0 + 1656); unint64_t i = *(void *)(v0 + 1664) + 1)
    {
      *(void *)(v0 + 1664) = i;
      unint64_t v258 = *(void **)(v0 + 984);
      if (!v258) {
        unint64_t v258 = _swiftEmptyArrayStorage;
      }
      if (i >= v258[2])
      {
        __break(1u);
        sub_10001CFB8((uint64_t)v15, (unint64_t)v11);
        v414 = 0;
        unint64_t v415 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        unint64_t v318 = v415;
        *(void *)(v0 + 744) = v414;
        *(void *)(v0 + 752) = v318;
        v319._object = (void *)0x80000001013F3B70;
        v319._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v319);
        *(void *)(v0 + 848) = _swiftEmptyArrayStorage;
        sub_10000588C(&qword_101638D40);
        _print_unlocked<A, B>(_:_:)();
        return _assertionFailure(_:_:file:line:flags:)();
      }
      uint64_t v259 = *(void *)(v0 + 1632);
      uint64_t v260 = *(void *)(v0 + 1584);
      uint64_t v261 = *(void *)(v0 + 1536);
      uint64_t v262 = *(void *)(v0 + 1528);
      uint64_t v263 = *(void *)(v0 + 1520);
      sub_10025C504((uint64_t)v258+ ((*(unsigned __int8 *)(v0 + 2016) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2016))+ *(void *)(*(void *)(v0 + 1592) + 72) * i, v259, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v259 + 16);
      *(void *)(v0 + 1672) = v15;
      unint64_t v264 = *(void *)(v259 + 24);
      *(void *)(v0 + 1680) = v264;
      sub_10001D074(v259 + *(int *)(v260 + 28), v263, &qword_101638CF0);
      uint64_t v265 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v261 + 48);
      *(void *)(v0 + 1688) = v265;
      *(void *)(v0 + 1696) = (v261 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
      if (v265(v263, 1, v262) != 1)
      {
        uint64_t v271 = *(void *)(v0 + 1576);
        uint64_t v272 = *(void *)(v0 + 1536);
        uint64_t v273 = *(void *)(v0 + 1528);
        uint64_t v274 = *(void *)(v0 + 1520);
        uint64_t v275 = *(void *)(v0 + 1512);
        uint64_t v276 = *(void (**)(uint64_t, uint64_t, uint64_t))(v272 + 32);
        *(void *)(v0 + 1704) = v276;
        *(void *)(v0 + 1712) = (v272 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v276(v271, v274, v273);
        uint64_t v277 = *(void (**)(uint64_t, uint64_t, uint64_t))(v272 + 16);
        *(void *)(v0 + 1720) = v277;
        *(void *)(v0 + 1728) = (v272 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v277(v275, v271, v273);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v272 + 56))(v275, 0, 1, v273);
        sub_1000361E0((uint64_t)v15, v264);
        uint64_t v278 = (void *)swift_task_alloc();
        *(void *)(v0 + 1736) = v278;
        *uint64_t v278 = v0;
        v278[1] = sub_1002280E0;
        uint64_t v279 = *(void *)(v0 + 1512);
        return sub_100257574((uint64_t)v15, v264, v279);
      }
      uint64_t v266 = *(void *)(v0 + 1520);
      sub_1000361E0((uint64_t)v15, v264);
      sub_10001DAB4(v266, &qword_101638CF0);
      if (qword_101636908 != -1) {
        swift_once();
      }
      sub_100010324(*(void *)(v0 + 1352), (uint64_t)qword_10170D9D8);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v267 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v267))
      {
        uint64_t v268 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v268 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v267, "Missing share id in payload.", v268, 2u);
        swift_slowDealloc();
      }
      uint64_t v257 = *(void *)(v0 + 1632);
      sub_10001CFB8((uint64_t)v15, v264);

      sub_10025C56C(v257, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    }
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 976)) {
      unint64_t v60 = *(void *)(v0 + 976);
    }
    else {
      unint64_t v60 = (unint64_t)_swiftEmptyArrayStorage;
    }
    uint64_t v378 = *(void *)(v60 + 16);
    if (!v378)
    {
      swift_bridgeObjectRetain();
LABEL_127:
      swift_bridgeObjectRelease();
      uint64_t v269 = *(void *)(v0 + 1648);
      swift_beginAccess();
      uint64_t v400 = *(void *)(v269 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v270 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v270(v400);
    }
    uint64_t v61 = *(void *)(v0 + 1536);
    uint64_t v361 = (uint64_t *)(v0 + 888);
    uint64_t v62 = *(void *)(v0 + 1360);
    uint64_t v362 = *(void *)(v0 + 1280);
    uint64_t v63 = *(void *)(v0 + 1160);
    uint64_t v363 = *(void *)(v0 + 1120);
    uint64_t v397 = *(void *)(v0 + 1104);
    uint64_t v367 = *(void *)(v0 + 1080);
    uint64_t v64 = *(void *)(v0 + 1056);
    v389 = (void (**)(uint64_t, void, uint64_t))(v64 + 104);
    uint64_t v358 = *(void *)(v0 + 1040);
    v387 = (void (**)(uint64_t, uint64_t))(v64 + 8);
    uint64_t v364 = (void (**)(void))(v61 + 16);
    uint64_t v365 = *(void *)(v0 + 1032);
    uint64_t v357 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1192) + 56);
    os_log_type_t v356 = (void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16);
    unint64_t v355 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56);
    unint64_t v354 = (void (**)(uint64_t))(v61 + 32);
    uint64_t v352 = (void (**)(uint64_t, uint64_t))(v61 + 8);
    uint64_t v65 = *(void *)(*(void *)(v0 + 992) + 16);
    v376 = (void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16);
    unint64_t v369 = (void (**)(uint64_t, uint64_t))(v62 + 8);
    unsigned int v385 = enum case for HashAlgorithm.sha256(_:);
    unint64_t v380 = v60 + 32;
    uint64_t v351 = *(void *)(v0 + 1288);
    uint64_t v353 = *(int **)(v0 + 1016);
    swift_bridgeObjectRetain();
    unint64_t v66 = 0;
    uint64_t v377 = v65;
    unint64_t v368 = v60;
    while (1)
    {
      if (v66 >= *(void *)(v60 + 16)) {
        goto LABEL_176;
      }
      unint64_t v379 = v66;
      uint64_t v67 = (uint64_t *)(v380 + 24 * v66);
      uint64_t v53 = *v67;
      unint64_t v68 = v67[1];
      uint64_t v69 = v67[2];
      if (v65) {
        break;
      }
      sub_1000361E0(*v67, v67[1]);
      swift_bridgeObjectRetain();
LABEL_85:
      if (qword_101636908 != -1) {
        swift_once();
      }
      uint64_t v114 = *(void *)(v0 + 1376);
      uint64_t v115 = *(void *)(v0 + 1352);
      uint64_t v116 = sub_100010324(v115, (uint64_t)qword_10170D9D8);
      (*v376)(v114, v116, v115);
      sub_1000361E0(v53, v68);
      swift_bridgeObjectRetain();
      sub_1000361E0(v53, v68);
      swift_bridgeObjectRetain();
      unint64_t v117 = Logger.logObject.getter();
      uint64_t v118 = v53;
      os_log_type_t v119 = static os_log_type_t.error.getter();
      BOOL v120 = os_log_type_enabled(v117, v119);
      uint64_t v121 = *(void *)(v0 + 1376);
      uint64_t v122 = *(void *)(v0 + 1352);
      if (v120)
      {
        uint64_t v123 = swift_slowAlloc();
        v414 = (uint64_t (*)())swift_slowAlloc();
        *(_DWORD *)uint64_t v123 = 141558275;
        *(void *)(v123 + 4) = 1752392040;
        *(_WORD *)(v123 + 12) = 2081;
        *(void *)(v0 + 728) = v118;
        *(void *)(v0 + 736) = v68;
        sub_1001D780C();
        uint64_t v124 = RawRepresentable<>.hexString.getter();
        *(void *)(v123 + 14) = sub_1008FA0F0(v124, v125, (uint64_t *)&v414);
        swift_bridgeObjectRelease();
        sub_10001CFB8(v118, v68);
        swift_bridgeObjectRelease();
        sub_10001CFB8(v118, v68);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v117, v119, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v123, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v60 = v368;
        swift_slowDealloc();

        sub_10001CFB8(v118, v68);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_10001CFB8(v118, v68);
        swift_bridgeObjectRelease();
        sub_10001CFB8(v118, v68);
        swift_bridgeObjectRelease();
        sub_10001CFB8(v118, v68);
        swift_bridgeObjectRelease();
      }
      (*v369)(v121, v122);
      uint64_t v65 = v377;
LABEL_91:
      unint64_t v66 = v379 + 1;
      if (v379 + 1 == v378) {
        goto LABEL_127;
      }
    }
    uint64_t v70 = *(void *)(v0 + 992);
    unint64_t v394 = v68 >> 62;
    sub_1000361E0(v53, v68);
    uint64_t v71 = *(unsigned __int8 *)(v367 + 80);
    uint64_t v359 = ~v71;
    uint64_t v360 = v71;
    uint64_t v72 = v70 + ((v71 + 32) & ~v71);
    uint64_t v391 = BYTE6(v68);
    uint64_t v382 = *(void *)(v367 + 72);
    BOOL v73 = __OFSUB__(HIDWORD(v53), v53);
    BOOL v372 = v73;
    uint64_t v370 = HIDWORD(v53) - (int)v53;
    uint64_t v366 = v69;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v74 = v65;
    uint64_t v399 = v53;
    unint64_t v404 = v68;
LABEL_29:
    uint64_t v75 = *(uint64_t **)(v0 + 1104);
    sub_10025C504(v72, (uint64_t)v75, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v76 = *v75;
    unint64_t v77 = *(void *)(v397 + 8);
    unint64_t v78 = v77 >> 62;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    switch(v77 >> 62)
    {
      case 1uLL:
        uint64_t v79 = (int)v76;
        uint64_t v80 = v76 >> 32;
        sub_1000361E0(v76, *(void *)(v397 + 8));
        uint64_t v81 = v76 >> 32;
        uint64_t v82 = (int)v76;
        break;
      case 2uLL:
        uint64_t v79 = *(void *)(v76 + 16);
        uint64_t v80 = *(void *)(v76 + 24);
        sub_1000361E0(v76, *(void *)(v397 + 8));
        uint64_t v82 = *(void *)(v76 + 16);
        uint64_t v81 = *(void *)(v76 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v79 = 0;
        uint64_t v82 = 0;
        uint64_t v80 = BYTE6(v77);
        uint64_t v81 = BYTE6(v77);
        break;
    }
    if (v81 >= v79 && v79 >= v82) {
      break;
    }
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    swift_once();
  }
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  switch((int)v78)
  {
    case 1:
      uint64_t v84 = (int)v76;
      uint64_t v83 = v76 >> 32;
      break;
    case 2:
      uint64_t v84 = *(void *)(v76 + 16);
      uint64_t v83 = *(void *)(v76 + 24);
      break;
    case 3:
      break;
    default:
      uint64_t v84 = 0;
      uint64_t v83 = BYTE6(v77);
      break;
  }
  if (v83 < v80 || v80 < v84) {
    goto LABEL_171;
  }
  if (__OFSUB__(v80, v79)) {
    goto LABEL_172;
  }
  if ((unint64_t)(v80 - v79) < 0x39)
  {
    switch((int)v78)
    {
      case 1:
        uint64_t v85 = v76 >> 32;
        goto LABEL_46;
      case 2:
        uint64_t v85 = *(void *)(v76 + 24);
        goto LABEL_48;
      default:
        goto LABEL_50;
    }
  }
  uint64_t v85 = sub_1008AA520(v79, 57, v76, v77);
  uint64_t v86 = 0;
  switch((int)v78)
  {
    case 1:
LABEL_46:
      uint64_t v86 = (int)v76;
      break;
    case 2:
LABEL_48:
      uint64_t v86 = *(void *)(v76 + 16);
      break;
    default:
      break;
  }
  if (v85 < v86) {
    goto LABEL_173;
  }
LABEL_50:
  uint64_t v50 = Data._Representation.subscript.getter();
  unint64_t v60 = v87;
  sub_10001CFB8(v76, v77);
  switch(v60 >> 62)
  {
    case 1uLL:
      LODWORD(v88) = HIDWORD(v50) - v50;
      if (__OFSUB__(HIDWORD(v50), v50)) {
        goto LABEL_174;
      }
      uint64_t v88 = (int)v88;
LABEL_55:
      if (v88 != 57)
      {
LABEL_133:
        uint64_t v280 = v50;
        unint64_t v281 = v60;
        goto LABEL_160;
      }
      sub_1000361E0(v50, v60);
      uint64_t v92 = sub_100A948F8(v50, v60);
      uint64_t v53 = v405;
      if (v405)
      {
        static os_log_type_t.error.getter();
        if (qword_101636F48 == -1) {
          goto LABEL_135;
        }
        goto LABEL_187;
      }
      break;
    case 2uLL:
      uint64_t v90 = *(void *)(v50 + 16);
      uint64_t v89 = *(void *)(v50 + 24);
      BOOL v91 = __OFSUB__(v89, v90);
      uint64_t v88 = v89 - v90;
      if (!v91) {
        goto LABEL_55;
      }
      goto LABEL_175;
    case 3uLL:
      goto LABEL_133;
    default:
      uint64_t v88 = BYTE6(v60);
      goto LABEL_55;
  }
  uint64_t v93 = sub_100A90C58(v92, 0);
  unint64_t v95 = v94;
  CCECCryptorRelease();
  sub_10001CFB8(v50, v60);
  unint64_t v96 = v95 >> 62;
  uint64_t v53 = v399;
  switch(v95 >> 62)
  {
    case 1uLL:
      LODWORD(v97) = HIDWORD(v93) - v93;
      if (__OFSUB__(HIDWORD(v93), v93))
      {
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
        goto LABEL_186;
      }
      uint64_t v97 = (int)v97;
LABEL_62:
      if (v97 == 28)
      {
        uint64_t v100 = *(void *)(v0 + 1064);
        uint64_t v101 = *(void *)(v0 + 1048);
        sub_10001CFB8(v50, v60);
        (*v389)(v100, v385, v101);
        uint64_t v50 = Data.hash(algorithm:)();
        unint64_t v60 = v102;
        (*v387)(v100, v101);
        sub_10001CFB8(v93, v95);
        uint64_t v103 = 0;
        unint64_t v68 = v404;
        switch(v60 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v50), v50)) {
              goto LABEL_180;
            }
            uint64_t v103 = HIDWORD(v50) - (int)v50;
LABEL_68:
            sub_1000361E0(v50, v60);
            break;
          case 2uLL:
            uint64_t v105 = *(void *)(v50 + 16);
            uint64_t v104 = *(void *)(v50 + 24);
            uint64_t v103 = v104 - v105;
            if (!__OFSUB__(v104, v105)) {
              goto LABEL_68;
            }
            goto LABEL_181;
          case 3uLL:
            break;
          default:
            uint64_t v103 = BYTE6(v60);
            break;
        }
        uint64_t v106 = v391;
        switch((int)v394)
        {
          case 1:
            uint64_t v106 = v370;
            if (v372) {
              goto LABEL_182;
            }
            goto LABEL_73;
          case 2:
            uint64_t v108 = *(void *)(v399 + 16);
            uint64_t v107 = *(void *)(v399 + 24);
            BOOL v91 = __OFSUB__(v107, v108);
            uint64_t v106 = v107 - v108;
            if (!v91) {
              goto LABEL_73;
            }
            goto LABEL_183;
          case 3:
            if (v103) {
              goto LABEL_27;
            }
            goto LABEL_94;
          default:
LABEL_73:
            if (v103 == v106)
            {
              if (v103 >= 1)
              {
                sub_1000361E0(v399, v404);
                sub_1000361E0(v399, v404);
                switch(v60 >> 62)
                {
                  case 1uLL:
                    if (v50 >> 32 < (int)v50) {
                      goto LABEL_185;
                    }
                    sub_1000361E0(v399, v404);
                    sub_1000361E0(v399, v404);
                    sub_1000361E0(v399, v404);
                    sub_1000361E0(v50, v60);
                    sub_1000361E0(v399, v404);
                    unint64_t v68 = v404;
                    char v111 = sub_100BFBE64((int)v50, v50 >> 32, v60 & 0x3FFFFFFFFFFFFFFFLL, v399, v404);
                    sub_10001CFB8(v399, v404);
                    sub_10001CFB8(v50, v60);
                    break;
                  case 2uLL:
                    uint64_t v112 = *(void *)(v50 + 16);
                    uint64_t v113 = *(void *)(v50 + 24);
                    sub_1000361E0(v399, v404);
                    sub_1000361E0(v399, v404);
                    sub_1000361E0(v399, v404);
                    sub_1000361E0(v399, v404);
                    swift_retain();
                    swift_retain();
                    char v111 = sub_100BFBE64(v112, v113, v60 & 0x3FFFFFFFFFFFFFFFLL, v399, v404);
                    sub_10001CFB8(v399, v404);
                    swift_release();
                    swift_release();
                    break;
                  case 3uLL:
                    sub_1000361E0(v399, v404);
                    sub_1000361E0(v399, v404);
                    sub_1000361E0(v399, v404);
                    sub_1000361E0(v399, v404);
                    unint64_t v109 = v350 & 0xFF00000000000000;
                    uint64_t v110 = 0;
                    v350 &= 0xFF00000000000000;
                    goto LABEL_81;
                  default:
                    sub_1000361E0(v399, v404);
                    sub_1000361E0(v399, v404);
                    sub_1000361E0(v399, v404);
                    sub_1000361E0(v399, v404);
                    unint64_t v109 = v349 & 0xFF00000000000000 | v60 & 0xFFFFFFFFFFFFFFLL;
                    uint64_t v110 = v50;
                    unint64_t v349 = v109;
LABEL_81:
                    char v111 = sub_100BFBD8C(v110, v109, v399, v404);
                    sub_10001CFB8(v399, v404);
                    break;
                }
                sub_10001CFB8(v50, v60);
                sub_10001CFB8(v399, v68);
                sub_10001CFB8(v50, v60);
                sub_10001CFB8(v399, v68);
                sub_10001CFB8(v399, v68);
                sub_10001CFB8(v399, v68);
                sub_10001CFB8(v399, v68);
                if (v111) {
                  goto LABEL_95;
                }
                goto LABEL_28;
              }
LABEL_94:
              sub_10001CFB8(v50, v60);
              sub_10001CFB8(v50, v60);
LABEL_95:
              uint64_t v126 = *(void *)(v0 + 1120);
              uint64_t v127 = *(void *)(v0 + 1112);
              uint64_t v128 = *(void *)(v0 + 1104);
              swift_bridgeObjectRelease();
              sub_10025C5CC(v128, v127, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
              sub_10025C5CC(v127, v126, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
              uint64_t v129 = sub_1001340BC(v366);
              if (!v129)
              {
                swift_bridgeObjectRetain();
                unint64_t v60 = v368;
                uint64_t v65 = v377;
                unint64_t v186 = v404;
LABEL_115:
                uint64_t v256 = *(void *)(v0 + 1120);
                sub_10001CFB8(v53, v186);
                swift_bridgeObjectRelease_n();
                sub_10025C56C(v256, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                uint64_t v405 = 0;
                goto LABEL_91;
              }
              uint64_t v130 = v129;
              unint64_t v383 = v366
                   + ((*(unsigned __int8 *)(v365 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v365 + 80));
              uint64_t v371 = (v360 + 16) & v359;
              swift_bridgeObjectRetain();
              uint64_t v131 = 0;
              uint64_t v348 = v130;
              while (1)
              {
                unint64_t v395 = v131 + 1;
                if (__OFADD__(v131, 1)) {
                  goto LABEL_184;
                }
                double v132 = *(uint64_t **)(v0 + 1120);
                uint64_t v392 = v131;
                sub_10025C504(v383 + *(void *)(v365 + 72) * v131, *(void *)(v0 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                uint64_t v133 = *v132;
                unint64_t v134 = *(void *)(v363 + 8);
                SecKeyRef v135 = sub_100435E70(v133, v134);
                uint64_t v136 = **(void **)(v0 + 1040);
                unint64_t v137 = *(void *)(v358 + 8);
                uint64_t v138 = PrivateKey.publicKey.getter(v133, v134);
                unint64_t v140 = v139;
                sub_1000361E0(v138, v139);
                uint64_t v141 = sub_100A94760(v138, v140);
                unint64_t v143 = v142;
                sub_10001CFB8(v138, v140);
                sub_100434E0C(v141, v143, (uint64_t *)&v414);
                uint64_t v144 = *(void *)(v0 + 1024);
                sub_10001CFB8(v138, v140);
                uint64_t v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v414;
                unint64_t v145 = v415;
                uint64_t v147 = v135;
                sub_1000361E0(v136, v137);
                sub_1000361E0((uint64_t)v146, v145);
                BeaconPayloadv1.init(using:data:advertisement:)(v147, v136, v137, (uint64_t)v146, v145, v144);
                uint64_t v334 = *(void *)(v0 + 1528);
                uint64_t v338 = *(void *)(v0 + 1560);
                unint64_t v342 = v145;
                uint64_t v345 = *(void *)(v0 + 1280);
                uint64_t v148 = *(void *)(v0 + 1264);
                uint64_t v149 = *(void *)(v0 + 1240);
                v330 = v147;
                uint64_t v331 = *(void *)(v0 + 1232);
                uint64_t v150 = *(void *)(v0 + 1184);
                uint64_t v373 = (uint64_t)v146;
                uint64_t v151 = *(void *)(v0 + 1168);
                uint64_t v152 = *(void *)(v0 + 1152);
                uint64_t v153 = *(unsigned char **)(v0 + 1144);
                uint64_t v154 = *(void *)(v0 + 1024);
                uint64_t v155 = *(void *)(v0 + 1008);
                v408 = *v364;
                (*v364)();
                (*v357)(v149, 1, 1, v150);
                LODWORD(v150) = *(unsigned __int8 *)(v154 + v353[10]);
                (*v356)(v151, v154 + v353[5], v152);
                double v156 = *(double *)(v154 + v353[7]);
                double v157 = *(double *)(v154 + v353[8]);
                double v158 = *(double *)(v154 + v353[9]);
                (*v355)(v155, 1, 1, v152);
                sub_10001D074(v149, v331, &qword_101657910);
                sub_100CC2A6C(v150, v151, 15, v155, v331, 256, v153, v156, v157, v158);
                sub_10001DAB4(v149, &qword_101657910);
                sub_10025C56C(v154, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                uint64_t v159 = v148 + *(int *)(v362 + 48);
                uint64_t v160 = *v354;
                ((void (*)(uint64_t, uint64_t, uint64_t))*v354)(v148, v338, v334);
                sub_10025C5CC((uint64_t)v153, v159, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v351 + 56))(v148, 0, 1, v345);
                sub_10001CFB8(v373, v342);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v351 + 48))(v148, 1, v345) == 1)
                {
                  uint64_t v161 = *(void *)(v0 + 1264);

                  sub_10001DAB4(v161, &qword_10163F720);
                  if (qword_101636908 != -1) {
                    swift_once();
                  }
                  uint64_t v162 = *(void *)(v0 + 1384);
                  uint64_t v163 = *(void *)(v0 + 1352);
                  uint64_t v164 = *(void *)(v0 + 1120);
                  uint64_t v165 = *(void *)(v0 + 1096);
                  uint64_t v166 = sub_100010324(v163, (uint64_t)qword_10170D9D8);
                  (*v376)(v162, v166, v163);
                  sub_10025C504(v164, v165, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                  uint64_t v167 = swift_allocObject();
                  sub_10025C5CC(v165, v167 + v371, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                  uint64_t v168 = swift_allocObject();
                  *(void *)(v168 + 16) = sub_10025B340;
                  *(void *)(v168 + 24) = v167;
                  v409 = Logger.logObject.getter();
                  os_log_type_t v169 = static os_log_type_t.error.getter();
                  uint64_t v170 = swift_allocObject();
                  *(unsigned char *)(v170 + 16) = 112;
                  uint64_t v50 = swift_allocObject();
                  *(unsigned char *)(v50 + 16) = 8;
                  uint64_t v171 = swift_allocObject();
                  *(void *)(v171 + 16) = 1752392040;
                  uint64_t v172 = swift_allocObject();
                  *(void *)(v172 + 16) = sub_100060540;
                  *(void *)(v172 + 24) = v171;
                  uint64_t v173 = swift_allocObject();
                  *(unsigned char *)(v173 + 16) = 33;
                  uint64_t v174 = swift_allocObject();
                  *(unsigned char *)(v174 + 16) = 8;
                  uint64_t v175 = swift_allocObject();
                  *(void *)(v175 + 16) = sub_1000604E8;
                  *(void *)(v175 + 24) = v168;
                  uint64_t v176 = swift_allocObject();
                  *(void *)(v176 + 16) = sub_10005F790;
                  *(void *)(v176 + 24) = v175;
                  sub_10000588C(&qword_101639B60);
                  uint64_t inited = swift_initStackObject();
                  sub_1004B810C(inited, 6);
                  *uint64_t v178 = sub_10005F778;
                  v178[1] = v170;
                  v178[2] = sub_100065514;
                  v178[3] = v50;
                  v178[4] = sub_10006000C;
                  v178[5] = v172;
                  v178[6] = sub_100065514;
                  v178[7] = v173;
                  v178[8] = sub_100065514;
                  v178[9] = v174;
                  v178[10] = sub_10005F7D0;
                  v178[11] = v176;
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_bridgeObjectRelease();
                  if (os_log_type_enabled(v409, v169))
                  {
                    uint64_t v179 = (uint8_t *)swift_slowAlloc();
                    uint64_t v180 = swift_slowAlloc();
                    v412 = 0;
                    uint64_t v413 = v180;
                    *(_WORD *)uint64_t v179 = 515;
                    v411 = v179 + 2;
                    sub_1008FA6E0(&v411, (uint64_t)&v412, (uint64_t)&v413, 112);
                    swift_release();
                    v414 = sub_100065514;
                    unint64_t v415 = v50;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = (uint64_t (*)())sub_10006000C;
                    unint64_t v415 = v172;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = sub_100065514;
                    unint64_t v415 = v173;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = sub_100065514;
                    unint64_t v415 = v174;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = (uint64_t (*)())sub_10005F7D0;
                    unint64_t v415 = v176;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    uint64_t v181 = *(void *)(v0 + 1384);
                    uint64_t v182 = *(void *)(v0 + 1352);
                    swift_release();
                    _os_log_impl((void *)&_mh_execute_header, v409, v169, "Could not create search result for beacon: %{private,mask.hash}s.", v179, 0x16u);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    sub_1008F9FA0();

                    (*v369)(v181, v182);
                  }
                  else
                  {
                    uint64_t v183 = *(void *)(v0 + 1384);
                    uint64_t v184 = *(void *)(v0 + 1352);
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();

                    (*v369)(v183, v184);
                  }
                  uint64_t v53 = v399;
                  unint64_t v60 = v368;
                }
                else
                {
                  uint64_t v187 = *(void *)(v0 + 1648);
                  uint64_t v188 = *(void *)(v0 + 1528);
                  uint64_t v189 = *(void *)(v0 + 1320);
                  uint64_t v190 = *(void *)(v0 + 1312);
                  uint64_t v191 = *(int *)(v362 + 48);
                  uint64_t v192 = v189 + v191;
                  uint64_t v193 = *(void *)(v0 + 1264) + v191;
                  v160(v189);
                  sub_10025C5CC(v193, v192, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  uint64_t v194 = v190 + *(int *)(v362 + 48);
                  ((void (*)(uint64_t, uint64_t, uint64_t))v408)(v190, v189, v188);
                  uint64_t v374 = v192;
                  sub_10025C504(v192, v194, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  swift_beginAccess();
                  uint64_t v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000F790C(v190, *(void *)(v187 + 16));
                  uint64_t v196 = *(void *)(v0 + 1528);
                  uint64_t v197 = *(void *)(v0 + 1328);
                  uint64_t v198 = *(void *)(v0 + 1320);
                  uint64_t v199 = *(void *)(v0 + 1312);
                  if (v195)
                  {
                    uint64_t v339 = *(void *)(v0 + 1144);
                    v414 = (uint64_t (*)())v195;
                    swift_endAccess();
                    sub_10025C56C(v194, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    uint64_t v332 = *v352;
                    (*v352)(v199, v196);
                    uint64_t v200 = (unsigned __int8 *)(v197 + *(int *)(v362 + 48));
                    ((void (*)(uint64_t, uint64_t, uint64_t))v408)(v197, v198, v196);
                    sub_10025C504(v374, (uint64_t)v200, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    sub_1000D1E3C(v339, v200);
                    sub_10025C56C(v339, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    v332(v197, v196);
                    uint64_t v201 = v197 + *(int *)(v362 + 48);
                    ((void (*)(uint64_t, uint64_t, uint64_t))v408)(v197, v198, v196);
                    sub_10025C504(v374, v201, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    uint64_t v202 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v414;
                    swift_beginAccess();
                    sub_10015DF64((uint64_t)v202, v197);
                    swift_endAccess();
                    sub_10025C56C(v201, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  }
                  else
                  {
                    uint64_t v203 = *(void *)(v0 + 1304);
                    swift_endAccess();
                    sub_10025C56C(v194, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    uint64_t v328 = *v352;
                    (*v352)(v199, v196);
                    uint64_t v204 = v197 + *(int *)(v362 + 48);
                    uint64_t v335 = v204;
                    ((void (*)(uint64_t, uint64_t, uint64_t))v408)(v197, v198, v196);
                    sub_10025C504(v374, v204, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    sub_10000588C(&qword_10163AA18);
                    uint64_t v205 = swift_allocObject();
                    uint64_t v206 = sub_1004B7688(v205, 1);
                    uint64_t v208 = v207;
                    uint64_t v209 = v203 + *(int *)(v362 + 48);
                    ((void (*)(uint64_t, uint64_t, uint64_t))v408)(v203, v198, v196);
                    sub_10025C504(v374, v209, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    sub_10025C5CC(v209, v208, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                    uint64_t v210 = SharingCircleWildAdvertisementKey.init(key:)(v206);
                    v328(v203, v196);
                    uint64_t v211 = sub_101158D6C(v210);
                    swift_bridgeObjectRelease();
                    swift_beginAccess();
                    sub_10015DF64(v211, v197);
                    swift_endAccess();
                    sub_10025C56C(v335, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  }
                  uint64_t v340 = *(void *)(v0 + 1648);
                  uint64_t v212 = *(void *)(v0 + 1528);
                  uint64_t v213 = *(void *)(v0 + 1392);
                  uint64_t v214 = *(void *)(v0 + 1352);
                  uint64_t v215 = *(void *)(v0 + 1328);
                  uint64_t v346 = *(void *)(v0 + 1320);
                  uint64_t v216 = *(void *)(v0 + 1120);
                  uint64_t v217 = *(void *)(v0 + 1096);
                  uint64_t v218 = sub_100207468();
                  (*v376)(v213, v218, v214);
                  sub_10025C504(v216, v217, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                  uint64_t v219 = swift_allocObject();
                  sub_10025C5CC(v217, v219 + v371, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                  uint64_t v343 = swift_allocObject();
                  *(void *)(v343 + 16) = sub_10025B340;
                  *(void *)(v343 + 24) = v219;
                  uint64_t v220 = v215 + *(int *)(v362 + 48);
                  ((void (*)(uint64_t, uint64_t, uint64_t))v408)(v215, v346, v212);
                  sub_10025C504(v374, v220, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  uint64_t v221 = *(unsigned __int8 *)(v351 + 80);
                  uint64_t v222 = (v221 + 16) & ~v221;
                  uint64_t v223 = swift_allocObject();
                  sub_10001D608(v215, v223 + v222, &qword_10163F728);
                  uint64_t v336 = swift_allocObject();
                  *(void *)(v336 + 16) = sub_10025B4F4;
                  *(void *)(v336 + 24) = v223;
                  uint64_t v224 = v215 + *(int *)(v362 + 48);
                  ((void (*)(uint64_t, uint64_t, uint64_t))v408)(v215, v346, v212);
                  sub_10025C504(v374, v224, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  uint64_t v225 = swift_allocObject();
                  sub_10001D608(v215, v225 + v222, &qword_10163F728);
                  uint64_t v326 = swift_allocObject();
                  *(void *)(v326 + 16) = sub_10025B504;
                  *(void *)(v326 + 24) = v225;
                  uint64_t v226 = v215 + *(int *)(v362 + 48);
                  ((void (*)(uint64_t, uint64_t, uint64_t))v408)(v215, v346, v212);
                  sub_10025C504(v374, v226, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                  uint64_t v227 = swift_allocObject();
                  *(void *)(v227 + 16) = v340;
                  sub_10001D608(v215, v227 + ((v221 + 24) & ~v221), &qword_10163F728);
                  swift_retain();
                  os_log_t log = Logger.logObject.getter();
                  os_log_type_t v324 = static os_log_type_t.info.getter();
                  uint64_t v341 = swift_allocObject();
                  *(unsigned char *)(v341 + 16) = 112;
                  uint64_t v228 = swift_allocObject();
                  *(unsigned char *)(v228 + 16) = 8;
                  uint64_t v229 = swift_allocObject();
                  *(void *)(v229 + 16) = 1752392040;
                  uint64_t v410 = swift_allocObject();
                  *(void *)(v410 + 16) = sub_10006550C;
                  *(void *)(v410 + 24) = v229;
                  uint64_t v230 = v228;
                  uint64_t v231 = swift_allocObject();
                  *(unsigned char *)(v231 + 16) = 33;
                  uint64_t v232 = v231;
                  uint64_t v375 = swift_allocObject();
                  *(unsigned char *)(v375 + 16) = 8;
                  uint64_t v233 = swift_allocObject();
                  *(void *)(v233 + 16) = sub_1000654F4;
                  *(void *)(v233 + 24) = v343;
                  uint64_t v234 = swift_allocObject();
                  *(void *)(v234 + 16) = sub_1000654EC;
                  *(void *)(v234 + 24) = v233;
                  uint64_t v235 = v234;
                  unint64_t v333 = v234;
                  uint64_t v329 = swift_allocObject();
                  *(unsigned char *)(v329 + 16) = 34;
                  uint64_t v347 = swift_allocObject();
                  *(unsigned char *)(v347 + 16) = 8;
                  uint64_t v236 = swift_allocObject();
                  *(void *)(v236 + 16) = sub_10025B4F8;
                  *(void *)(v236 + 24) = v336;
                  uint64_t v344 = swift_allocObject();
                  *(void *)(v344 + 16) = sub_1000654EC;
                  *(void *)(v344 + 24) = v236;
                  uint64_t v337 = swift_allocObject();
                  *(unsigned char *)(v337 + 16) = 34;
                  uint64_t v322 = swift_allocObject();
                  *(unsigned char *)(v322 + 16) = 8;
                  uint64_t v237 = swift_allocObject();
                  *(void *)(v237 + 16) = sub_10025B508;
                  *(void *)(v237 + 24) = v326;
                  uint64_t v238 = swift_allocObject();
                  *(void *)(v238 + 16) = sub_1000654EC;
                  *(void *)(v238 + 24) = v237;
                  uint64_t v239 = v238;
                  uint64_t v240 = swift_allocObject();
                  *(unsigned char *)(v240 + 16) = 0;
                  uint64_t v241 = v240;
                  uint64_t v327 = swift_allocObject();
                  *(unsigned char *)(v327 + 16) = 8;
                  uint64_t v242 = swift_allocObject();
                  *(void *)(v242 + 16) = sub_10025B514;
                  *(void *)(v242 + 24) = v227;
                  uint64_t v243 = swift_allocObject();
                  *(void *)(v243 + 16) = sub_100060004;
                  *(void *)(v243 + 24) = v242;
                  sub_10000588C(&qword_101639B60);
                  uint64_t v244 = swift_allocObject();
                  sub_1004B810C(v244, 15);
                  *os_log_type_t v245 = sub_100065514;
                  v245[1] = v341;
                  v245[2] = sub_100065514;
                  v245[3] = v230;
                  unint64_t v246 = v230;
                  v245[4] = sub_100065504;
                  v245[5] = v410;
                  v245[6] = sub_100065514;
                  v245[7] = v232;
                  v245[8] = sub_100065514;
                  v245[9] = v375;
                  v245[10] = sub_100065500;
                  v245[11] = v235;
                  v245[12] = sub_100065514;
                  v245[13] = v329;
                  v245[14] = sub_100065514;
                  v245[15] = v347;
                  v245[16] = sub_100065500;
                  v245[17] = v344;
                  v245[18] = sub_100065514;
                  v245[19] = v337;
                  v245[20] = sub_100065514;
                  v245[21] = v322;
                  v245[22] = sub_100065500;
                  v245[23] = v239;
                  unint64_t v247 = v239;
                  v245[24] = sub_100065514;
                  v245[25] = v241;
                  unint64_t v248 = v241;
                  v245[26] = sub_100065514;
                  v245[27] = v327;
                  v245[28] = sub_10006000C;
                  v245[29] = v243;
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  unint64_t v321 = v232;
                  swift_retain();
                  swift_retain();
                  uint64_t v50 = v247;
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_bridgeObjectRelease();
                  if (os_log_type_enabled(log, v324))
                  {
                    uint64_t v249 = sub_1008F9FAC();
                    uint64_t v250 = swift_slowAlloc();
                    v412 = 0;
                    uint64_t v413 = v250;
                    buf = (uint8_t *)v249;
                    *(_WORD *)uint64_t v249 = 1283;
                    v411 = (unsigned char *)(v249 + 2);
                    v414 = sub_100065514;
                    unint64_t v415 = v341;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    uint64_t v53 = v399;
                    uint64_t v185 = v348;
                    swift_release();
                    v414 = sub_100065514;
                    unint64_t v415 = v246;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = (uint64_t (*)())sub_100065504;
                    unint64_t v415 = v410;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = sub_100065514;
                    unint64_t v415 = v321;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = sub_100065514;
                    unint64_t v415 = v375;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = sub_100065500;
                    unint64_t v415 = v333;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = sub_100065514;
                    unint64_t v415 = v329;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = sub_100065514;
                    unint64_t v415 = v347;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = sub_100065500;
                    unint64_t v415 = v344;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = sub_100065514;
                    unint64_t v415 = v337;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = sub_100065514;
                    unint64_t v415 = v322;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = sub_100065500;
                    unint64_t v415 = v247;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = sub_100065514;
                    unint64_t v415 = v248;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = sub_100065514;
                    unint64_t v415 = v327;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    swift_release();
                    v414 = (uint64_t (*)())sub_10006000C;
                    unint64_t v415 = v243;
                    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
                    uint64_t v251 = *(void *)(v0 + 1392);
                    uint64_t v252 = *(void *)(v0 + 1352);
                    uint64_t v253 = *(void *)(v0 + 1320);
                    swift_release();
                    uint64_t v50 = (uint64_t)log;
                    _os_log_impl((void *)&_mh_execute_header, log, v324, "Return search result for beacon (own beacon): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", buf, 0x34u);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    sub_1008F9FA0();

                    (*v369)(v251, v252);
                    sub_10001DAB4(v253, &qword_10163F728);
                    unint64_t v60 = v368;
                    goto LABEL_106;
                  }
                  uint64_t v325 = *(void *)(v0 + 1392);
                  uint64_t v254 = *(void *)(v0 + 1352);
                  uint64_t v255 = *(void *)(v0 + 1320);

                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  (*v369)(v325, v254);
                  sub_10001DAB4(v255, &qword_10163F728);
                  unint64_t v60 = v368;
                  uint64_t v53 = v399;
                }
                uint64_t v185 = v348;
LABEL_106:
                sub_10025C56C(*(void *)(v0 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                uint64_t v131 = v392 + 1;
                uint64_t v65 = v377;
                unint64_t v186 = v404;
                if (v395 == v185) {
                  goto LABEL_115;
                }
              }
            }
LABEL_27:
            sub_10001CFB8(v50, v60);
            sub_10001CFB8(v50, v60);
LABEL_28:
            sub_10025C56C(*(void *)(v0 + 1104), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
            uint64_t v405 = 0;
            v72 += v382;
            if (!--v74)
            {
              swift_bridgeObjectRelease();
              uint64_t v405 = 0;
              unint64_t v60 = v368;
              goto LABEL_85;
            }
            break;
        }
        goto LABEL_29;
      }
      if (v96)
      {
        if (v96 == 1)
        {
          if (!__OFSUB__(HIDWORD(v93), v93))
          {
            uint64_t v291 = HIDWORD(v93) - (int)v93;
            goto LABEL_163;
          }
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
          JUMPOUT(0x1002339D0);
        }
        uint64_t v308 = *(void *)(v93 + 16);
        uint64_t v307 = *(void *)(v93 + 24);
        uint64_t v291 = v307 - v308;
        if (__OFSUB__(v307, v308)) {
          goto LABEL_191;
        }
      }
      else
      {
        uint64_t v291 = BYTE6(v95);
      }
LABEL_163:
      sub_10013019C();
      uint64_t v289 = swift_allocError();
      *(void *)uint64_t v309 = 28;
      *(void *)(v309 + 8) = v291;
      *(unsigned char *)(v309 + 16) = 0;
      swift_willThrow();
LABEL_164:
      sub_10001CFB8(v93, v95);
      v414 = 0;
      unint64_t v415 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      unint64_t v310 = v415;
      *(void *)(v0 + 680) = v414;
      *(void *)(v0 + 688) = v310;
      v311._object = (void *)0x80000001013F3B70;
      v311._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v311);
      *(void *)(v0 + 872) = v289;
      sub_10000588C(&qword_101638D40);
      _print_unlocked<A, B>(_:_:)();
      return _assertionFailure(_:_:file:line:flags:)();
    case 2uLL:
      uint64_t v99 = *(void *)(v93 + 16);
      uint64_t v98 = *(void *)(v93 + 24);
      BOOL v91 = __OFSUB__(v98, v99);
      uint64_t v97 = v98 - v99;
      if (!v91) {
        goto LABEL_62;
      }
      goto LABEL_179;
    case 3uLL:
      uint64_t v291 = 0;
      goto LABEL_163;
    default:
      uint64_t v97 = BYTE6(v95);
      goto LABEL_62;
  }
}

uint64_t sub_100233AA0()
{
  uint64_t v2 = (void *)*v1;
  v2[233] = v0;
  swift_task_dealloc();
  unint64_t v3 = v2[231];
  uint64_t v4 = v2[230];
  unint64_t v5 = v2[228];
  uint64_t v6 = v2[227];
  if (v0)
  {
    uint64_t v7 = v2[125];
    sub_10001CFB8(v4, v3);
    sub_10001CFB8(v6, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v8 = sub_10024CF84;
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v10 = v2[125];
    sub_10001CFB8(v4, v3);
    sub_10001CFB8(v6, v5);
    unint64_t v8 = sub_100233C70;
    uint64_t v9 = v10;
  }
  return _swift_task_switch(v8, v9, 0);
}

uint64_t sub_100233C70()
{
  uint64_t v368 = v0;
  uint64_t v1 = *(void *)(v0 + 1280);
  uint64_t v2 = *(void *)(v0 + 1272);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1288) + 48))(v2, 1, v1) != 1)
  {
    uint64_t v209 = *(void (**)(void))(v0 + 1704);
    uint64_t v210 = *(void *)(v0 + 1344);
    uint64_t v211 = *(int *)(v1 + 48);
    *(_DWORD *)(v0 + 2020) = v211;
    uint64_t v212 = v210 + v211;
    uint64_t v213 = v2 + v211;
    v209();
    sub_10025C5CC(v213, v212, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v214 = (void *)swift_task_alloc();
    *(void *)(v0 + 1872) = v214;
    *uint64_t v214 = v0;
    v214[1] = sub_1002377D8;
    return sub_100E57788();
  }
  sub_10001CFB8(*(void *)(v0 + 1816), *(void *)(v0 + 1824));
  sub_10001DAB4(v2, &qword_10163F720);
  uint64_t v3 = *(void *)(v0 + 1864);
  uint64_t v4 = *(void *)(v0 + 1808) + 1;
  if (v4 != *(void *)(v0 + 1800))
  {
    *(void *)(v0 + 1808) = v4;
    unint64_t v216 = *(void *)(v0 + 1752);
    uint64_t v217 = *(void *)(v0 + 1792) + 24 * v4;
    uint64_t v218 = *(void *)(v217 + 32);
    *(void *)(v0 + 1816) = v218;
    uint64_t v9 = *(void *)(v217 + 40);
    *(void *)(v0 + 1824) = v9;
    int v219 = *(_DWORD *)(v217 + 48);
    *(unsigned char *)(v0 + 1836) = *(unsigned char *)(v217 + 52);
    *(_DWORD *)(v0 + 1832) = v219;
    uint64_t v220 = 0;
    uint64_t v221 = 0;
    switch(v216 >> 62)
    {
      case 1uLL:
        sub_100037A38(*(void *)(v0 + 1744), v216);
        uint64_t v244 = *(void *)(v0 + 1744);
        uint64_t v220 = v244 >> 32;
        uint64_t v221 = (int)v244;
        break;
      case 2uLL:
        uint64_t v245 = *(void *)(v0 + 1744);
        uint64_t v221 = *(void *)(v245 + 16);
        uint64_t v220 = *(void *)(v245 + 24);
        sub_100037A38(v245, v216);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v221 = 0;
        uint64_t v220 = BYTE6(v216);
        break;
    }
    unint64_t v246 = sub_1008AA59C(v221, v220, *(void *)(v0 + 1744), *(void *)(v0 + 1752));
    unint64_t v15 = *(void *)(v0 + 1752);
    if (v246 < 0x39)
    {
      switch(v15 >> 62)
      {
        case 1uLL:
          uint64_t v248 = *(void *)(v0 + 1744);
          uint64_t v247 = v248 >> 32;
          uint64_t v5 = (int)v248;
          goto LABEL_136;
        case 2uLL:
          uint64_t v249 = *(void *)(v0 + 1744);
          uint64_t v5 = *(void *)(v249 + 16);
          uint64_t v247 = *(void *)(v249 + 24);
          goto LABEL_136;
        default:
          goto LABEL_138;
      }
    }
    uint64_t v247 = sub_1008AA520(v221, 57, *(void *)(v0 + 1744), *(void *)(v0 + 1752));
    uint64_t v5 = 0;
    switch(v15 >> 62)
    {
      case 1uLL:
        uint64_t v5 = (int)*(void *)(v0 + 1744);
        break;
      case 2uLL:
        uint64_t v5 = *(void *)(*(void *)(v0 + 1744) + 16);
        break;
      default:
        break;
    }
LABEL_136:
    if (v247 >= v5)
    {
      unint64_t v15 = *(void *)(v0 + 1752);
LABEL_138:
      uint64_t v250 = *(void *)(v0 + 1744);
      sub_1000361E0(v218, v9);
      sub_1000361E0(v218, v9);
      uint64_t v5 = Data._Representation.subscript.getter();
      unint64_t v252 = v251;
      sub_100037A24(v250, v15);
      switch(v252 >> 62)
      {
        case 1uLL:
          LODWORD(v253) = HIDWORD(v5) - v5;
          if (__OFSUB__(HIDWORD(v5), v5)) {
            goto LABEL_181;
          }
          uint64_t v253 = (int)v253;
          goto LABEL_143;
        case 2uLL:
          uint64_t v255 = *(void *)(v5 + 16);
          uint64_t v254 = *(void *)(v5 + 24);
          BOOL v44 = __OFSUB__(v254, v255);
          uint64_t v253 = v254 - v255;
          if (v44) {
            goto LABEL_182;
          }
          goto LABEL_143;
        case 3uLL:
          goto LABEL_146;
        default:
          uint64_t v253 = BYTE6(v252);
LABEL_143:
          if (v253 != 57)
          {
LABEL_146:
            uint64_t v258 = v5;
            unint64_t v259 = v252;
            goto LABEL_147;
          }
          sub_1000361E0(v5, v252);
          uint64_t v256 = sub_100A94760(v5, v252);
          if (v3)
          {
            sub_10001CFB8(v5, v252);
            uint64_t v366 = 0;
            unint64_t v367 = 0xE000000000000000;
            _StringGuts.grow(_:)(35);
            *(void *)(v0 + 632) = 0;
            *(void *)(v0 + 640) = 0xE000000000000000;
            v262._object = (void *)0x80000001013F3B70;
            v262._countAndFlagsBits = 0xD000000000000021;
            String.append(_:)(v262);
            *(void *)(v0 + 936) = v3;
            sub_10000588C(&qword_101638D40);
            _print_unlocked<A, B>(_:_:)();
            return _assertionFailure(_:_:file:line:flags:)();
          }
          uint64_t v260 = v256;
          unint64_t v261 = v257;
          sub_10001CFB8(v5, v252);
          sub_100434E0C(v260, v261, (uint64_t *)(v0 + 696));
          sub_10001CFB8(v5, v252);
          uint64_t v273 = *(void *)(v0 + 696);
          *(void *)(v0 + 1840) = v273;
          uint64_t v274 = *(void *)(v0 + 704);
          *(void *)(v0 + 1848) = v274;
          uint64_t v275 = (void *)swift_task_alloc();
          *(void *)(v0 + 1856) = v275;
          *uint64_t v275 = v0;
          v275[1] = sub_100233AA0;
          uint64_t v276 = *(void *)(v0 + 1784);
          uint64_t v277 = *(void *)(v0 + 1568);
          uint64_t v278 = *(void *)(v0 + 1272);
          uint64_t result = sub_10025916C(v278, v218, v9, v276, v273, v274, 0, v277);
          break;
      }
      return result;
    }
    goto LABEL_170;
  }
  uint64_t v359 = *(void *)(v0 + 1864);
  uint64_t v5 = *(void *)(v0 + 1784);
  unint64_t v6 = *(void *)(v0 + 1752);
  uint64_t v7 = *(void *)(v0 + 1744);
  uint64_t v8 = *(void *)(v0 + 1632);
  uint64_t v9 = *(void *)(v0 + 1576);
  uint64_t v10 = *(void *)(v0 + 1568);
  uint64_t v11 = *(void *)(v0 + 1536);
  uint64_t v12 = *(void *)(v0 + 1528);
  sub_10001CFB8(*(void *)(v0 + 1672), *(void *)(v0 + 1680));

  sub_100037A24(v7, v6);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(NSObject **)(v11 + 8);
  ((void (*)(uint64_t, uint64_t))v13)(v9, v12);
  sub_10025C56C(v8, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  ((void (*)(uint64_t, uint64_t))v13)(v10, v12);
  unint64_t v14 = *(void *)(v0 + 1664) + 1;
  if (v14 != *(void *)(v0 + 1656))
  {
    uint64_t v9 = (uint64_t)&qword_101638CF0;
    do
    {
      *(void *)(v0 + 1664) = v14;
      uint64_t v223 = *(void **)(v0 + 984);
      if (!v223) {
        uint64_t v223 = _swiftEmptyArrayStorage;
      }
      if (v14 >= v223[2])
      {
        __break(1u);
        sub_10001CFB8(v6, (unint64_t)v13);
        uint64_t v366 = 0;
        unint64_t v367 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        *(void *)(v0 + 744) = 0;
        *(void *)(v0 + 752) = 0xE000000000000000;
        v284._object = (void *)0x80000001013F3B70;
        v284._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v284);
        *(void *)(v0 + 848) = _swiftEmptyArrayStorage;
        sub_10000588C(&qword_101638D40);
        _print_unlocked<A, B>(_:_:)();
        return _assertionFailure(_:_:file:line:flags:)();
      }
      uint64_t v224 = *(void *)(v0 + 1632);
      uint64_t v5 = *(void *)(v0 + 1584);
      uint64_t v225 = *(void *)(v0 + 1536);
      uint64_t v226 = *(void *)(v0 + 1528);
      uint64_t v227 = *(void *)(v0 + 1520);
      sub_10025C504((uint64_t)v223+ ((*(unsigned __int8 *)(v0 + 2016) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2016))+ *(void *)(*(void *)(v0 + 1592) + 72) * v14, v224, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      unint64_t v6 = *(void *)(v224 + 16);
      *(void *)(v0 + 1672) = v6;
      unint64_t v228 = *(void *)(v224 + 24);
      *(void *)(v0 + 1680) = v228;
      sub_10001D074(v224 + *(int *)(v5 + 28), v227, &qword_101638CF0);
      uint64_t v229 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v225 + 48);
      *(void *)(v0 + 1688) = v229;
      *(void *)(v0 + 1696) = (v225 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
      if (v229(v227, 1, v226) != 1)
      {
        uint64_t v235 = *(void *)(v0 + 1576);
        uint64_t v236 = *(void *)(v0 + 1536);
        uint64_t v237 = *(void *)(v0 + 1528);
        uint64_t v238 = *(void *)(v0 + 1520);
        uint64_t v239 = *(void *)(v0 + 1512);
        uint64_t v240 = *(void (**)(uint64_t, uint64_t, uint64_t))(v236 + 32);
        *(void *)(v0 + 1704) = v240;
        *(void *)(v0 + 1712) = (v236 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v240(v235, v238, v237);
        uint64_t v241 = *(void (**)(uint64_t, uint64_t, uint64_t))(v236 + 16);
        *(void *)(v0 + 1720) = v241;
        *(void *)(v0 + 1728) = (v236 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v241(v239, v235, v237);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v236 + 56))(v239, 0, 1, v237);
        sub_1000361E0(v6, v228);
        uint64_t v242 = (void *)swift_task_alloc();
        *(void *)(v0 + 1736) = v242;
        *uint64_t v242 = v0;
        v242[1] = sub_1002280E0;
        uint64_t v243 = *(void *)(v0 + 1512);
        return sub_100257574(v6, v228, v243);
      }
      uint64_t v230 = *(void *)(v0 + 1520);
      sub_1000361E0(v6, v228);
      sub_10001DAB4(v230, &qword_101638CF0);
      if (qword_101636908 != -1) {
        swift_once();
      }
      sub_100010324(*(void *)(v0 + 1352), (uint64_t)qword_10170D9D8);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v231 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v231))
      {
        uint64_t v232 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v232 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v231, "Missing share id in payload.", v232, 2u);
        swift_slowDealloc();
      }
      uint64_t v222 = *(void *)(v0 + 1632);
      sub_10001CFB8(v6, v228);

      sub_10025C56C(v222, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      unint64_t v14 = *(void *)(v0 + 1664) + 1;
    }
    while (v14 != *(void *)(v0 + 1656));
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 976)) {
    unint64_t v15 = *(void *)(v0 + 976);
  }
  else {
    unint64_t v15 = (unint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v343 = *(void *)(v15 + 16);
  if (!v343)
  {
    swift_bridgeObjectRetain();
LABEL_121:
    swift_bridgeObjectRelease();
    uint64_t v233 = *(void *)(v0 + 1648);
    swift_beginAccess();
    uint64_t v357 = *(void *)(v233 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v234 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v234(v357);
  }
  uint64_t v16 = *(void *)(v0 + 1536);
  uint64_t v326 = (uint64_t *)(v0 + 888);
  uint64_t v17 = *(void *)(v0 + 1360);
  uint64_t v327 = *(void *)(v0 + 1280);
  uint64_t v18 = *(void *)(v0 + 1160);
  uint64_t v328 = *(void *)(v0 + 1120);
  uint64_t v355 = *(void *)(v0 + 1104);
  uint64_t v332 = *(void *)(v0 + 1080);
  uint64_t v19 = *(void *)(v0 + 1056);
  uint64_t v350 = (void (**)(uint64_t, void, uint64_t))(v19 + 104);
  uint64_t v323 = *(void *)(v0 + 1040);
  unint64_t v349 = (void (**)(uint64_t, uint64_t))(v19 + 8);
  uint64_t v329 = (void (**)(void))(v16 + 16);
  uint64_t v330 = *(void *)(v0 + 1032);
  uint64_t v322 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1192) + 56);
  unint64_t v321 = (void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  uint64_t v320 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  Swift::String v319 = (void (**)(uint64_t))(v16 + 32);
  uint64_t v317 = (void (**)(uint64_t, uint64_t))(v16 + 8);
  uint64_t v20 = *(void *)(*(void *)(v0 + 992) + 16);
  uint64_t v341 = (void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  uint64_t v334 = (void (**)(uint64_t, uint64_t))(v17 + 8);
  unsigned int v348 = enum case for HashAlgorithm.sha256(_:);
  unint64_t v345 = v15 + 32;
  uint64_t v316 = *(void *)(v0 + 1288);
  unint64_t v318 = *(int **)(v0 + 1016);
  swift_bridgeObjectRetain();
  unint64_t v21 = 0;
  uint64_t v342 = v20;
  unint64_t v333 = v15;
  while (1)
  {
    if (v21 >= *(void *)(v15 + 16)) {
      goto LABEL_173;
    }
    unint64_t v344 = v21;
    uint64_t v22 = (uint64_t *)(v345 + 24 * v21);
    uint64_t v5 = *v22;
    unint64_t v23 = v22[1];
    uint64_t v24 = v22[2];
    if (v20) {
      break;
    }
    sub_1000361E0(*v22, v22[1]);
    swift_bridgeObjectRetain();
LABEL_74:
    if (qword_101636908 != -1) {
      swift_once();
    }
    uint64_t v67 = *(void *)(v0 + 1376);
    uint64_t v68 = *(void *)(v0 + 1352);
    uint64_t v69 = sub_100010324(v68, (uint64_t)qword_10170D9D8);
    (*v341)(v67, v69, v68);
    sub_1000361E0(v5, v23);
    swift_bridgeObjectRetain();
    sub_1000361E0(v5, v23);
    swift_bridgeObjectRetain();
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    uint64_t v72 = v5;
    uint64_t v5 = v71;
    BOOL v73 = os_log_type_enabled(v70, v71);
    uint64_t v74 = *(void *)(v0 + 1376);
    uint64_t v9 = *(void *)(v0 + 1352);
    if (v73)
    {
      uint64_t v75 = swift_slowAlloc();
      uint64_t v366 = (uint64_t (*)())swift_slowAlloc();
      *(_DWORD *)uint64_t v75 = 141558275;
      *(void *)(v75 + 4) = 1752392040;
      *(_WORD *)(v75 + 12) = 2081;
      *(void *)(v0 + 728) = v72;
      *(void *)(v0 + 736) = v23;
      sub_1001D780C();
      uint64_t v76 = RawRepresentable<>.hexString.getter();
      *(void *)(v75 + 14) = sub_1008FA0F0(v76, v77, (uint64_t *)&v366);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v72, v23);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v72, v23);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v5, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v75, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v15 = v333;
      swift_slowDealloc();

      sub_10001CFB8(v72, v23);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10001CFB8(v72, v23);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v72, v23);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v72, v23);
      swift_bridgeObjectRelease();
    }
    (*v334)(v74, v9);
    uint64_t v20 = v342;
LABEL_80:
    unint64_t v21 = v344 + 1;
    if (v344 + 1 == v343) {
      goto LABEL_121;
    }
  }
  uint64_t v25 = *(void *)(v0 + 992);
  unint64_t v353 = v23 >> 62;
  sub_1000361E0(v5, v23);
  uint64_t v26 = *(unsigned __int8 *)(v332 + 80);
  uint64_t v324 = ~v26;
  uint64_t v325 = v26;
  uint64_t v27 = v25 + ((v26 + 32) & ~v26);
  uint64_t v351 = BYTE6(v23);
  uint64_t v346 = *(void *)(v332 + 72);
  BOOL v28 = __OFSUB__(HIDWORD(v5), v5);
  BOOL v337 = v28;
  uint64_t v335 = HIDWORD(v5) - (int)v5;
  uint64_t v331 = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v29 = v20;
  uint64_t v356 = v5;
  unint64_t v358 = v23;
  while (2)
  {
    uint64_t v30 = *(uint64_t **)(v0 + 1104);
    sub_10025C504(v27, (uint64_t)v30, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v31 = *v30;
    unint64_t v32 = *(void *)(v355 + 8);
    uint64_t v5 = v32 >> 62;
    uint64_t v9 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    switch(v32 >> 62)
    {
      case 1uLL:
        uint64_t v9 = (int)v31;
        uint64_t v33 = v31 >> 32;
        sub_1000361E0(v31, *(void *)(v355 + 8));
        uint64_t v34 = v31 >> 32;
        uint64_t v35 = (int)v31;
        break;
      case 2uLL:
        uint64_t v9 = *(void *)(v31 + 16);
        uint64_t v33 = *(void *)(v31 + 24);
        sub_1000361E0(v31, *(void *)(v355 + 8));
        uint64_t v35 = *(void *)(v31 + 16);
        uint64_t v34 = *(void *)(v31 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v9 = 0;
        uint64_t v35 = 0;
        uint64_t v33 = BYTE6(v32);
        uint64_t v34 = BYTE6(v32);
        break;
    }
    if (v34 < v9 || v9 < v35)
    {
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      swift_once();
LABEL_151:
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v263 = swift_allocObject();
      uint64_t v264 = sub_1004B810C(v263, 1);
      uint64_t v266 = v265;
      *uint64_t v326 = v5;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v267 = String.init<A>(describing:)();
      uint64_t v269 = v268;
      v266[3] = (uint64_t)&type metadata for String;
      v266[4] = sub_10000B4CC();
      uint64_t *v266 = v267;
      v266[1] = v269;
      SharingCircleWildAdvertisementKey.init(key:)(v264);
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_100130148();
      uint64_t v270 = swift_allocError();
      *uint64_t v271 = 0;
      swift_willThrow();
      swift_errorRelease();
      unint64_t v48 = v15;
      uint64_t v46 = v9;
LABEL_163:
      sub_10001CFB8(v46, v48);
      uint64_t v366 = 0;
      unint64_t v367 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      unint64_t v282 = v367;
      *(void *)(v0 + 680) = v366;
      *(void *)(v0 + 688) = v282;
      v283._object = (void *)0x80000001013F3B70;
      v283._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v283);
      *(void *)(v0 + 872) = v270;
      sub_10000588C(&qword_101638D40);
      _print_unlocked<A, B>(_:_:)();
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v5 = v5;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    switch((int)v5)
    {
      case 1:
        uint64_t v37 = (int)v31;
        uint64_t v36 = v31 >> 32;
        break;
      case 2:
        uint64_t v37 = *(void *)(v31 + 16);
        uint64_t v36 = *(void *)(v31 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v37 = 0;
        uint64_t v36 = BYTE6(v32);
        break;
    }
    if (v36 < v33 || v33 < v37) {
      goto LABEL_167;
    }
    if (__OFSUB__(v33, v9)) {
      goto LABEL_168;
    }
    if ((unint64_t)(v33 - v9) < 0x39)
    {
      switch((int)v5)
      {
        case 1:
          uint64_t v38 = v31 >> 32;
          goto LABEL_35;
        case 2:
          uint64_t v38 = *(void *)(v31 + 24);
          goto LABEL_37;
        default:
          goto LABEL_39;
      }
    }
    uint64_t v38 = sub_1008AA520(v9, 57, v31, v32);
    uint64_t v39 = 0;
    switch((int)v5)
    {
      case 1:
LABEL_35:
        uint64_t v39 = (int)v31;
        break;
      case 2:
LABEL_37:
        uint64_t v39 = *(void *)(v31 + 16);
        break;
      default:
        break;
    }
    if (v38 < v39) {
      goto LABEL_169;
    }
LABEL_39:
    uint64_t v9 = Data._Representation.subscript.getter();
    unint64_t v15 = v40;
    sub_10001CFB8(v31, v32);
    switch(v15 >> 62)
    {
      case 1uLL:
        LODWORD(v41) = HIDWORD(v9) - v9;
        if (__OFSUB__(HIDWORD(v9), v9)) {
          goto LABEL_171;
        }
        uint64_t v41 = (int)v41;
LABEL_44:
        if (v41 == 57)
        {
          sub_1000361E0(v9, v15);
          uint64_t v45 = sub_100A948F8(v9, v15);
          uint64_t v5 = v359;
          if (v359)
          {
            static os_log_type_t.error.getter();
            if (qword_101636F48 != -1) {
              goto LABEL_184;
            }
            goto LABEL_151;
          }
          uint64_t v46 = sub_100A90C58(v45, 0);
          unint64_t v48 = v47;
          CCECCryptorRelease();
          sub_10001CFB8(v9, v15);
          unint64_t v49 = v48 >> 62;
          uint64_t v5 = v356;
          switch(v48 >> 62)
          {
            case 1uLL:
              LODWORD(v50) = HIDWORD(v46) - v46;
              if (__OFSUB__(HIDWORD(v46), v46)) {
                goto LABEL_174;
              }
              uint64_t v50 = (int)v50;
LABEL_51:
              if (v50 != 28)
              {
                if (v49)
                {
                  if (v49 == 1)
                  {
                    if (!__OFSUB__(HIDWORD(v46), v46))
                    {
                      uint64_t v272 = HIDWORD(v46) - (int)v46;
LABEL_162:
                      sub_10013019C();
                      uint64_t v270 = swift_allocError();
                      *(void *)uint64_t v281 = 28;
                      *(void *)(v281 + 8) = v272;
                      *(unsigned char *)(v281 + 16) = 0;
                      swift_willThrow();
                      goto LABEL_163;
                    }
                    __break(1u);
                  }
                  else
                  {
                    uint64_t v280 = *(void *)(v46 + 16);
                    uint64_t v279 = *(void *)(v46 + 24);
                    uint64_t v272 = v279 - v280;
                    if (!__OFSUB__(v279, v280)) {
                      goto LABEL_162;
                    }
                  }
                  __break(1u);
                  JUMPOUT(0x100237708);
                }
                uint64_t v272 = BYTE6(v48);
                goto LABEL_162;
              }
              uint64_t v53 = *(void *)(v0 + 1064);
              uint64_t v54 = *(void *)(v0 + 1048);
              sub_10001CFB8(v9, v15);
              (*v350)(v53, v348, v54);
              uint64_t v9 = Data.hash(algorithm:)();
              unint64_t v15 = v55;
              (*v349)(v53, v54);
              sub_10001CFB8(v46, v48);
              uint64_t v56 = 0;
              unint64_t v23 = v358;
              switch(v15 >> 62)
              {
                case 1uLL:
                  if (__OFSUB__(HIDWORD(v9), v9)) {
                    goto LABEL_176;
                  }
                  uint64_t v56 = HIDWORD(v9) - (int)v9;
LABEL_57:
                  sub_1000361E0(v9, v15);
                  break;
                case 2uLL:
                  uint64_t v58 = *(void *)(v9 + 16);
                  uint64_t v57 = *(void *)(v9 + 24);
                  uint64_t v56 = v57 - v58;
                  if (!__OFSUB__(v57, v58)) {
                    goto LABEL_57;
                  }
                  goto LABEL_177;
                case 3uLL:
                  break;
                default:
                  uint64_t v56 = BYTE6(v15);
                  break;
              }
              uint64_t v59 = v351;
              switch((int)v353)
              {
                case 1:
                  uint64_t v59 = v335;
                  if (v337) {
                    goto LABEL_178;
                  }
                  goto LABEL_62;
                case 2:
                  uint64_t v61 = *(void *)(v356 + 16);
                  uint64_t v60 = *(void *)(v356 + 24);
                  BOOL v44 = __OFSUB__(v60, v61);
                  uint64_t v59 = v60 - v61;
                  if (!v44) {
                    goto LABEL_62;
                  }
                  goto LABEL_179;
                case 3:
                  if (v56) {
                    goto LABEL_16;
                  }
                  goto LABEL_83;
                default:
LABEL_62:
                  if (v56 == v59)
                  {
                    if (v56 >= 1)
                    {
                      sub_1000361E0(v356, v358);
                      sub_1000361E0(v356, v358);
                      switch(v15 >> 62)
                      {
                        case 1uLL:
                          if (v9 >> 32 < (int)v9) {
                            goto LABEL_183;
                          }
                          sub_1000361E0(v356, v358);
                          sub_1000361E0(v356, v358);
                          sub_1000361E0(v356, v358);
                          sub_1000361E0(v9, v15);
                          sub_1000361E0(v356, v358);
                          unint64_t v23 = v358;
                          char v64 = sub_100BFBE64((int)v9, v9 >> 32, v15 & 0x3FFFFFFFFFFFFFFFLL, v356, v358);
                          sub_10001CFB8(v356, v358);
                          sub_10001CFB8(v9, v15);
                          break;
                        case 2uLL:
                          uint64_t v65 = *(void *)(v9 + 16);
                          uint64_t v66 = *(void *)(v9 + 24);
                          sub_1000361E0(v356, v358);
                          sub_1000361E0(v356, v358);
                          sub_1000361E0(v356, v358);
                          sub_1000361E0(v356, v358);
                          swift_retain();
                          swift_retain();
                          char v64 = sub_100BFBE64(v65, v66, v15 & 0x3FFFFFFFFFFFFFFFLL, v356, v358);
                          sub_10001CFB8(v356, v358);
                          swift_release();
                          swift_release();
                          break;
                        case 3uLL:
                          sub_1000361E0(v356, v358);
                          sub_1000361E0(v356, v358);
                          sub_1000361E0(v356, v358);
                          sub_1000361E0(v356, v358);
                          unint64_t v62 = v315 & 0xFF00000000000000;
                          uint64_t v63 = 0;
                          v315 &= 0xFF00000000000000;
                          goto LABEL_70;
                        default:
                          sub_1000361E0(v356, v358);
                          sub_1000361E0(v356, v358);
                          sub_1000361E0(v356, v358);
                          sub_1000361E0(v356, v358);
                          unint64_t v62 = v314 & 0xFF00000000000000 | v15 & 0xFFFFFFFFFFFFFFLL;
                          uint64_t v63 = v9;
                          unint64_t v314 = v62;
LABEL_70:
                          char v64 = sub_100BFBD8C(v63, v62, v356, v358);
                          sub_10001CFB8(v356, v358);
                          break;
                      }
                      sub_10001CFB8(v9, v15);
                      sub_10001CFB8(v356, v23);
                      sub_10001CFB8(v9, v15);
                      sub_10001CFB8(v356, v23);
                      sub_10001CFB8(v356, v23);
                      sub_10001CFB8(v356, v23);
                      sub_10001CFB8(v356, v23);
                      if (v64) {
                        goto LABEL_84;
                      }
                      goto LABEL_17;
                    }
LABEL_83:
                    sub_10001CFB8(v9, v15);
                    sub_10001CFB8(v9, v15);
LABEL_84:
                    uint64_t v78 = *(void *)(v0 + 1120);
                    uint64_t v79 = *(void *)(v0 + 1112);
                    uint64_t v80 = *(void *)(v0 + 1104);
                    swift_bridgeObjectRelease();
                    sub_10025C5CC(v80, v79, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                    sub_10025C5CC(v79, v78, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                    uint64_t v81 = sub_1001340BC(v331);
                    if (!v81)
                    {
                      swift_bridgeObjectRetain();
                      unint64_t v15 = v333;
                      uint64_t v20 = v342;
                      unint64_t v138 = v358;
LABEL_104:
                      uint64_t v208 = *(void *)(v0 + 1120);
                      sub_10001CFB8(v5, v138);
                      swift_bridgeObjectRelease_n();
                      sub_10025C56C(v208, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                      uint64_t v359 = 0;
                      goto LABEL_80;
                    }
                    uint64_t v82 = v81;
                    unint64_t v347 = v331
                         + ((*(unsigned __int8 *)(v330 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v330 + 80));
                    uint64_t v336 = (v325 + 16) & v324;
                    swift_bridgeObjectRetain();
                    uint64_t v83 = 0;
                    uint64_t v313 = v82;
                    while (1)
                    {
                      unint64_t v354 = v83 + 1;
                      if (__OFADD__(v83, 1)) {
                        goto LABEL_180;
                      }
                      uint64_t v84 = *(uint64_t **)(v0 + 1120);
                      uint64_t v352 = v83;
                      sub_10025C504(v347 + *(void *)(v330 + 72) * v83, *(void *)(v0 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                      uint64_t v85 = *v84;
                      unint64_t v86 = *(void *)(v328 + 8);
                      SecKeyRef v87 = sub_100435E70(v85, v86);
                      uint64_t v88 = **(void **)(v0 + 1040);
                      unint64_t v89 = *(void *)(v323 + 8);
                      uint64_t v90 = PrivateKey.publicKey.getter(v85, v86);
                      unint64_t v92 = v91;
                      sub_1000361E0(v90, v91);
                      uint64_t v93 = sub_100A94760(v90, v92);
                      unint64_t v95 = v94;
                      sub_10001CFB8(v90, v92);
                      sub_100434E0C(v93, v95, (uint64_t *)&v366);
                      uint64_t v96 = *(void *)(v0 + 1024);
                      sub_10001CFB8(v90, v92);
                      uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v366;
                      unint64_t v97 = v367;
                      uint64_t v99 = v87;
                      sub_1000361E0(v88, v89);
                      sub_1000361E0((uint64_t)v98, v97);
                      BeaconPayloadv1.init(using:data:advertisement:)(v99, v88, v89, (uint64_t)v98, v97, v96);
                      uint64_t v299 = *(void *)(v0 + 1528);
                      uint64_t v303 = *(void *)(v0 + 1560);
                      unint64_t v307 = v97;
                      uint64_t v310 = *(void *)(v0 + 1280);
                      uint64_t v100 = *(void *)(v0 + 1264);
                      uint64_t v101 = *(void *)(v0 + 1240);
                      uint64_t v295 = v99;
                      uint64_t v296 = *(void *)(v0 + 1232);
                      uint64_t v102 = *(void *)(v0 + 1184);
                      uint64_t v338 = (uint64_t)v98;
                      uint64_t v103 = *(void *)(v0 + 1168);
                      uint64_t v104 = *(void *)(v0 + 1152);
                      uint64_t v105 = *(unsigned char **)(v0 + 1144);
                      uint64_t v106 = *(void *)(v0 + 1024);
                      uint64_t v107 = *(void *)(v0 + 1008);
                      uint64_t v360 = *v329;
                      (*v329)();
                      (*v322)(v101, 1, 1, v102);
                      LODWORD(v102) = *(unsigned __int8 *)(v106 + v318[10]);
                      (*v321)(v103, v106 + v318[5], v104);
                      double v108 = *(double *)(v106 + v318[7]);
                      double v109 = *(double *)(v106 + v318[8]);
                      double v110 = *(double *)(v106 + v318[9]);
                      (*v320)(v107, 1, 1, v104);
                      sub_10001D074(v101, v296, &qword_101657910);
                      sub_100CC2A6C(v102, v103, 15, v107, v296, 256, v105, v108, v109, v110);
                      sub_10001DAB4(v101, &qword_101657910);
                      sub_10025C56C(v106, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                      uint64_t v111 = v100 + *(int *)(v327 + 48);
                      uint64_t v112 = *v319;
                      ((void (*)(uint64_t, uint64_t, uint64_t))*v319)(v100, v303, v299);
                      sub_10025C5CC((uint64_t)v105, v111, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v316 + 56))(v100, 0, 1, v310);
                      sub_10001CFB8(v338, v307);
                      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v316 + 48))(v100, 1, v310) == 1)
                      {
                        uint64_t v113 = *(void *)(v0 + 1264);

                        sub_10001DAB4(v113, &qword_10163F720);
                        if (qword_101636908 != -1) {
                          swift_once();
                        }
                        uint64_t v114 = *(void *)(v0 + 1384);
                        uint64_t v115 = *(void *)(v0 + 1352);
                        uint64_t v116 = *(void *)(v0 + 1120);
                        uint64_t v117 = *(void *)(v0 + 1096);
                        uint64_t v118 = sub_100010324(v115, (uint64_t)qword_10170D9D8);
                        (*v341)(v114, v118, v115);
                        sub_10025C504(v116, v117, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        uint64_t v119 = swift_allocObject();
                        sub_10025C5CC(v117, v119 + v336, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        uint64_t v120 = swift_allocObject();
                        *(void *)(v120 + 16) = sub_10025B340;
                        *(void *)(v120 + 24) = v119;
                        uint64_t v361 = Logger.logObject.getter();
                        os_log_type_t v121 = static os_log_type_t.error.getter();
                        uint64_t v122 = swift_allocObject();
                        *(unsigned char *)(v122 + 16) = 112;
                        uint64_t v9 = swift_allocObject();
                        *(unsigned char *)(v9 + 16) = 8;
                        uint64_t v123 = swift_allocObject();
                        *(void *)(v123 + 16) = 1752392040;
                        uint64_t v124 = swift_allocObject();
                        *(void *)(v124 + 16) = sub_100060540;
                        *(void *)(v124 + 24) = v123;
                        uint64_t v125 = swift_allocObject();
                        *(unsigned char *)(v125 + 16) = 33;
                        uint64_t v126 = swift_allocObject();
                        *(unsigned char *)(v126 + 16) = 8;
                        uint64_t v127 = swift_allocObject();
                        *(void *)(v127 + 16) = sub_1000604E8;
                        *(void *)(v127 + 24) = v120;
                        uint64_t v128 = swift_allocObject();
                        *(void *)(v128 + 16) = sub_10005F790;
                        *(void *)(v128 + 24) = v127;
                        sub_10000588C(&qword_101639B60);
                        uint64_t inited = swift_initStackObject();
                        sub_1004B810C(inited, 6);
                        *uint64_t v130 = sub_10005F778;
                        v130[1] = v122;
                        v130[2] = sub_100065514;
                        v130[3] = v9;
                        v130[4] = sub_10006000C;
                        v130[5] = v124;
                        v130[6] = sub_100065514;
                        v130[7] = v125;
                        v130[8] = sub_100065514;
                        v130[9] = v126;
                        v130[10] = sub_10005F7D0;
                        v130[11] = v128;
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_bridgeObjectRelease();
                        if (os_log_type_enabled(v361, v121))
                        {
                          uint64_t v131 = (uint8_t *)swift_slowAlloc();
                          uint64_t v132 = swift_slowAlloc();
                          uint64_t v364 = 0;
                          uint64_t v365 = v132;
                          *(_WORD *)uint64_t v131 = 515;
                          uint64_t v363 = v131 + 2;
                          sub_1008FA6E0(&v363, (uint64_t)&v364, (uint64_t)&v365, 112);
                          swift_release();
                          uint64_t v366 = sub_100065514;
                          unint64_t v367 = v9;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = (uint64_t (*)())sub_10006000C;
                          unint64_t v367 = v124;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = sub_100065514;
                          unint64_t v367 = v125;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = sub_100065514;
                          unint64_t v367 = v126;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = (uint64_t (*)())sub_10005F7D0;
                          unint64_t v367 = v128;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          uint64_t v133 = *(void *)(v0 + 1384);
                          uint64_t v134 = *(void *)(v0 + 1352);
                          swift_release();
                          _os_log_impl((void *)&_mh_execute_header, v361, v121, "Could not create search result for beacon: %{private,mask.hash}s.", v131, 0x16u);
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          sub_1008F9FA0();

                          (*v334)(v133, v134);
                        }
                        else
                        {
                          uint64_t v135 = *(void *)(v0 + 1384);
                          uint64_t v136 = *(void *)(v0 + 1352);
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();

                          (*v334)(v135, v136);
                        }
                        uint64_t v5 = v356;
                        unint64_t v15 = v333;
                      }
                      else
                      {
                        uint64_t v139 = *(void *)(v0 + 1648);
                        uint64_t v140 = *(void *)(v0 + 1528);
                        uint64_t v141 = *(void *)(v0 + 1320);
                        uint64_t v142 = *(void *)(v0 + 1312);
                        uint64_t v143 = *(int *)(v327 + 48);
                        uint64_t v144 = v141 + v143;
                        uint64_t v145 = *(void *)(v0 + 1264) + v143;
                        v112(v141);
                        sub_10025C5CC(v145, v144, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                        uint64_t v146 = v142 + *(int *)(v327 + 48);
                        ((void (*)(uint64_t, uint64_t, uint64_t))v360)(v142, v141, v140);
                        uint64_t v339 = v144;
                        sub_10025C504(v144, v146, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                        swift_beginAccess();
                        uint64_t v147 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000F790C(v142, *(void *)(v139 + 16));
                        uint64_t v148 = *(void *)(v0 + 1528);
                        uint64_t v149 = *(void *)(v0 + 1328);
                        uint64_t v150 = *(void *)(v0 + 1320);
                        uint64_t v151 = *(void *)(v0 + 1312);
                        if (v147)
                        {
                          uint64_t v304 = *(void *)(v0 + 1144);
                          uint64_t v366 = (uint64_t (*)())v147;
                          swift_endAccess();
                          sub_10025C56C(v146, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v297 = *v317;
                          (*v317)(v151, v148);
                          uint64_t v152 = (unsigned __int8 *)(v149 + *(int *)(v327 + 48));
                          ((void (*)(uint64_t, uint64_t, uint64_t))v360)(v149, v150, v148);
                          sub_10025C504(v339, (uint64_t)v152, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          sub_1000D1E3C(v304, v152);
                          sub_10025C56C(v304, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          v297(v149, v148);
                          uint64_t v153 = v149 + *(int *)(v327 + 48);
                          ((void (*)(uint64_t, uint64_t, uint64_t))v360)(v149, v150, v148);
                          sub_10025C504(v339, v153, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v154 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v366;
                          swift_beginAccess();
                          sub_10015DF64((uint64_t)v154, v149);
                          swift_endAccess();
                          sub_10025C56C(v153, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                        }
                        else
                        {
                          uint64_t v155 = *(void *)(v0 + 1304);
                          swift_endAccess();
                          sub_10025C56C(v146, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v293 = *v317;
                          (*v317)(v151, v148);
                          uint64_t v156 = v149 + *(int *)(v327 + 48);
                          uint64_t v300 = v156;
                          ((void (*)(uint64_t, uint64_t, uint64_t))v360)(v149, v150, v148);
                          sub_10025C504(v339, v156, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          sub_10000588C(&qword_10163AA18);
                          uint64_t v157 = swift_allocObject();
                          uint64_t v158 = sub_1004B7688(v157, 1);
                          uint64_t v160 = v159;
                          uint64_t v161 = v155 + *(int *)(v327 + 48);
                          ((void (*)(uint64_t, uint64_t, uint64_t))v360)(v155, v150, v148);
                          sub_10025C504(v339, v161, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          sub_10025C5CC(v161, v160, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v162 = SharingCircleWildAdvertisementKey.init(key:)(v158);
                          v293(v155, v148);
                          uint64_t v163 = sub_101158D6C(v162);
                          swift_bridgeObjectRelease();
                          swift_beginAccess();
                          sub_10015DF64(v163, v149);
                          swift_endAccess();
                          sub_10025C56C(v300, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                        }
                        uint64_t v305 = *(void *)(v0 + 1648);
                        uint64_t v164 = *(void *)(v0 + 1528);
                        uint64_t v165 = *(void *)(v0 + 1392);
                        uint64_t v166 = *(void *)(v0 + 1352);
                        uint64_t v167 = *(void *)(v0 + 1328);
                        uint64_t v311 = *(void *)(v0 + 1320);
                        uint64_t v168 = *(void *)(v0 + 1120);
                        uint64_t v169 = *(void *)(v0 + 1096);
                        uint64_t v170 = sub_100207468();
                        (*v341)(v165, v170, v166);
                        sub_10025C504(v168, v169, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        uint64_t v171 = swift_allocObject();
                        sub_10025C5CC(v169, v171 + v336, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        uint64_t v308 = swift_allocObject();
                        *(void *)(v308 + 16) = sub_10025B340;
                        *(void *)(v308 + 24) = v171;
                        uint64_t v172 = v167 + *(int *)(v327 + 48);
                        ((void (*)(uint64_t, uint64_t, uint64_t))v360)(v167, v311, v164);
                        sub_10025C504(v339, v172, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                        uint64_t v173 = *(unsigned __int8 *)(v316 + 80);
                        uint64_t v174 = (v173 + 16) & ~v173;
                        uint64_t v175 = swift_allocObject();
                        sub_10001D608(v167, v175 + v174, &qword_10163F728);
                        uint64_t v301 = swift_allocObject();
                        *(void *)(v301 + 16) = sub_10025B4F4;
                        *(void *)(v301 + 24) = v175;
                        uint64_t v176 = v167 + *(int *)(v327 + 48);
                        ((void (*)(uint64_t, uint64_t, uint64_t))v360)(v167, v311, v164);
                        sub_10025C504(v339, v176, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                        uint64_t v177 = swift_allocObject();
                        sub_10001D608(v167, v177 + v174, &qword_10163F728);
                        uint64_t v291 = swift_allocObject();
                        *(void *)(v291 + 16) = sub_10025B504;
                        *(void *)(v291 + 24) = v177;
                        uint64_t v178 = v167 + *(int *)(v327 + 48);
                        ((void (*)(uint64_t, uint64_t, uint64_t))v360)(v167, v311, v164);
                        sub_10025C504(v339, v178, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                        uint64_t v179 = swift_allocObject();
                        *(void *)(v179 + 16) = v305;
                        sub_10001D608(v167, v179 + ((v173 + 24) & ~v173), &qword_10163F728);
                        swift_retain();
                        os_log_t log = Logger.logObject.getter();
                        os_log_type_t v289 = static os_log_type_t.info.getter();
                        uint64_t v306 = swift_allocObject();
                        *(unsigned char *)(v306 + 16) = 112;
                        uint64_t v180 = swift_allocObject();
                        *(unsigned char *)(v180 + 16) = 8;
                        uint64_t v181 = swift_allocObject();
                        *(void *)(v181 + 16) = 1752392040;
                        uint64_t v362 = swift_allocObject();
                        *(void *)(v362 + 16) = sub_10006550C;
                        *(void *)(v362 + 24) = v181;
                        uint64_t v182 = v180;
                        uint64_t v183 = swift_allocObject();
                        *(unsigned char *)(v183 + 16) = 33;
                        uint64_t v184 = v183;
                        uint64_t v340 = swift_allocObject();
                        *(unsigned char *)(v340 + 16) = 8;
                        uint64_t v185 = swift_allocObject();
                        *(void *)(v185 + 16) = sub_1000654F4;
                        *(void *)(v185 + 24) = v308;
                        uint64_t v186 = swift_allocObject();
                        *(void *)(v186 + 16) = sub_1000654EC;
                        *(void *)(v186 + 24) = v185;
                        uint64_t v187 = v186;
                        unint64_t v298 = v186;
                        uint64_t v294 = swift_allocObject();
                        *(unsigned char *)(v294 + 16) = 34;
                        uint64_t v312 = swift_allocObject();
                        *(unsigned char *)(v312 + 16) = 8;
                        uint64_t v188 = swift_allocObject();
                        *(void *)(v188 + 16) = sub_10025B4F8;
                        *(void *)(v188 + 24) = v301;
                        uint64_t v309 = swift_allocObject();
                        *(void *)(v309 + 16) = sub_1000654EC;
                        *(void *)(v309 + 24) = v188;
                        uint64_t v302 = swift_allocObject();
                        *(unsigned char *)(v302 + 16) = 34;
                        uint64_t v287 = swift_allocObject();
                        *(unsigned char *)(v287 + 16) = 8;
                        uint64_t v189 = swift_allocObject();
                        *(void *)(v189 + 16) = sub_10025B508;
                        *(void *)(v189 + 24) = v291;
                        uint64_t v190 = swift_allocObject();
                        *(void *)(v190 + 16) = sub_1000654EC;
                        *(void *)(v190 + 24) = v189;
                        uint64_t v191 = v190;
                        uint64_t v192 = swift_allocObject();
                        *(unsigned char *)(v192 + 16) = 0;
                        uint64_t v193 = v192;
                        uint64_t v292 = swift_allocObject();
                        *(unsigned char *)(v292 + 16) = 8;
                        uint64_t v194 = swift_allocObject();
                        *(void *)(v194 + 16) = sub_10025B514;
                        *(void *)(v194 + 24) = v179;
                        uint64_t v195 = swift_allocObject();
                        *(void *)(v195 + 16) = sub_100060004;
                        *(void *)(v195 + 24) = v194;
                        sub_10000588C(&qword_101639B60);
                        uint64_t v196 = swift_allocObject();
                        sub_1004B810C(v196, 15);
                        *uint64_t v197 = sub_100065514;
                        v197[1] = v306;
                        v197[2] = sub_100065514;
                        v197[3] = v182;
                        unint64_t v198 = v182;
                        v197[4] = sub_100065504;
                        v197[5] = v362;
                        v197[6] = sub_100065514;
                        v197[7] = v184;
                        v197[8] = sub_100065514;
                        v197[9] = v340;
                        v197[10] = sub_100065500;
                        v197[11] = v187;
                        v197[12] = sub_100065514;
                        v197[13] = v294;
                        v197[14] = sub_100065514;
                        v197[15] = v312;
                        v197[16] = sub_100065500;
                        v197[17] = v309;
                        v197[18] = sub_100065514;
                        v197[19] = v302;
                        v197[20] = sub_100065514;
                        v197[21] = v287;
                        v197[22] = sub_100065500;
                        v197[23] = v191;
                        unint64_t v199 = v191;
                        v197[24] = sub_100065514;
                        v197[25] = v193;
                        unint64_t v200 = v193;
                        v197[26] = sub_100065514;
                        v197[27] = v292;
                        v197[28] = sub_10006000C;
                        v197[29] = v195;
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        unint64_t v286 = v184;
                        swift_retain();
                        swift_retain();
                        uint64_t v9 = v199;
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_bridgeObjectRelease();
                        if (os_log_type_enabled(log, v289))
                        {
                          uint64_t v201 = sub_1008F9FAC();
                          uint64_t v202 = swift_slowAlloc();
                          uint64_t v364 = 0;
                          uint64_t v365 = v202;
                          buf = (uint8_t *)v201;
                          *(_WORD *)uint64_t v201 = 1283;
                          uint64_t v363 = (unsigned char *)(v201 + 2);
                          uint64_t v366 = sub_100065514;
                          unint64_t v367 = v306;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          uint64_t v5 = v356;
                          uint64_t v137 = v313;
                          swift_release();
                          uint64_t v366 = sub_100065514;
                          unint64_t v367 = v198;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = (uint64_t (*)())sub_100065504;
                          unint64_t v367 = v362;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = sub_100065514;
                          unint64_t v367 = v286;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = sub_100065514;
                          unint64_t v367 = v340;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = sub_100065500;
                          unint64_t v367 = v298;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = sub_100065514;
                          unint64_t v367 = v294;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = sub_100065514;
                          unint64_t v367 = v312;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = sub_100065500;
                          unint64_t v367 = v309;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = sub_100065514;
                          unint64_t v367 = v302;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = sub_100065514;
                          unint64_t v367 = v287;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = sub_100065500;
                          unint64_t v367 = v199;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = sub_100065514;
                          unint64_t v367 = v200;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = sub_100065514;
                          unint64_t v367 = v292;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          swift_release();
                          uint64_t v366 = (uint64_t (*)())sub_10006000C;
                          unint64_t v367 = v195;
                          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v366, (uint64_t)&v363, (uint64_t)&v364, (uint64_t)&v365);
                          uint64_t v203 = *(void *)(v0 + 1392);
                          uint64_t v204 = *(void *)(v0 + 1352);
                          uint64_t v205 = *(void *)(v0 + 1320);
                          swift_release();
                          uint64_t v9 = (uint64_t)log;
                          _os_log_impl((void *)&_mh_execute_header, log, v289, "Return search result for beacon (own beacon): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", buf, 0x34u);
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          sub_1008F9FA0();

                          (*v334)(v203, v204);
                          sub_10001DAB4(v205, &qword_10163F728);
                          unint64_t v15 = v333;
                          goto LABEL_95;
                        }
                        uint64_t v290 = *(void *)(v0 + 1392);
                        uint64_t v206 = *(void *)(v0 + 1352);
                        uint64_t v207 = *(void *)(v0 + 1320);

                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        (*v334)(v290, v206);
                        sub_10001DAB4(v207, &qword_10163F728);
                        unint64_t v15 = v333;
                        uint64_t v5 = v356;
                      }
                      uint64_t v137 = v313;
LABEL_95:
                      sub_10025C56C(*(void *)(v0 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                      uint64_t v83 = v352 + 1;
                      uint64_t v20 = v342;
                      unint64_t v138 = v358;
                      if (v354 == v137) {
                        goto LABEL_104;
                      }
                    }
                  }
LABEL_16:
                  sub_10001CFB8(v9, v15);
                  sub_10001CFB8(v9, v15);
LABEL_17:
                  sub_10025C56C(*(void *)(v0 + 1104), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                  uint64_t v359 = 0;
                  v27 += v346;
                  if (!--v29)
                  {
                    swift_bridgeObjectRelease();
                    uint64_t v359 = 0;
                    unint64_t v15 = v333;
                    goto LABEL_74;
                  }
                  break;
              }
              break;
            case 2uLL:
              uint64_t v52 = *(void *)(v46 + 16);
              uint64_t v51 = *(void *)(v46 + 24);
              BOOL v44 = __OFSUB__(v51, v52);
              uint64_t v50 = v51 - v52;
              if (!v44) {
                goto LABEL_51;
              }
              goto LABEL_175;
            case 3uLL:
              uint64_t v272 = 0;
              goto LABEL_162;
            default:
              uint64_t v50 = BYTE6(v48);
              goto LABEL_51;
          }
          continue;
        }
LABEL_149:
        uint64_t v258 = v9;
        unint64_t v259 = v15;
LABEL_147:
        sub_10001CFB8(v258, v259);
        return _assertionFailure(_:_:file:line:flags:)();
      case 2uLL:
        uint64_t v43 = *(void *)(v9 + 16);
        uint64_t v42 = *(void *)(v9 + 24);
        BOOL v44 = __OFSUB__(v42, v43);
        uint64_t v41 = v42 - v43;
        if (!v44) {
          goto LABEL_44;
        }
        goto LABEL_172;
      case 3uLL:
        goto LABEL_149;
      default:
        uint64_t v41 = BYTE6(v15);
        goto LABEL_44;
    }
  }
}

uint64_t sub_1002377D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1000);
  *(void *)(*(void *)v1 + 1880) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1002378F0, v2, 0);
}

uint64_t sub_1002378F0()
{
  uint64_t v1 = v0[235];
  unint64_t v2 = v0[219];
  uint64_t v3 = v0[218];
  uint64_t v4 = (void *)swift_allocObject();
  v0[236] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  sub_100037A38(v3, v2);
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[237] = v5;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101665470);
  *uint64_t v5 = v0;
  v5[1] = sub_100237A0C;
  return unsafeBlocking<A>(_:)(v0 + 116, sub_10025B784, v4, v6);
}

uint64_t sub_100237A0C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1000);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100237B38, v1, 0);
}

uint64_t sub_100237B38()
{
  uint64_t v602 = v0;
  unint64_t v1 = *(void *)(v0 + 1864);
  uint64_t v2 = *(void *)(v0 + 1568);
  uint64_t v3 = *(void *)(v0 + 1256);
  uint64_t v4 = *(void *)(v0 + 1248);
  uint64_t v5 = *(void *)(v0 + 1192);
  uint64_t v6 = *(void *)(v0 + 1184);
  uint64_t v7 = *(NSObject **)(v0 + 928);
  *(void *)(swift_task_alloc() + 16) = v2;
  sub_100E4ED78((uint64_t (*)(char *))sub_10025B790, (uint64_t)v7, v3);
  unint64_t v592 = v1;
  swift_task_dealloc();
  sub_10001D074(v3, v4, &qword_101657910);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v6);
  uint64_t v9 = *(void *)(v0 + 1248);
  uint64_t v596 = v0;
  if (v8 != 1)
  {
    uint64_t v46 = *(void *)(v0 + 1224);
    swift_bridgeObjectRelease();
    sub_10025C5CC(v9, v46, type metadata accessor for BeaconKeyManager.IndexInformation);
    if (qword_101636908 != -1) {
      swift_once();
    }
    uint64_t v47 = *(void *)(v0 + 1424);
    uint64_t v48 = *(void *)(v0 + 1360);
    uint64_t v49 = *(void *)(v596 + 1352);
    uint64_t v50 = *(void *)(v596 + 1224);
    uint64_t v51 = *(void *)(v596 + 1216);
    uint64_t v52 = *(void *)(v596 + 1192);
    uint64_t v53 = sub_100010324(v49, (uint64_t)qword_10170D9D8);
    uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16);
    *(void *)(v596 + 1904) = v54;
    *(void *)(v596 + 1912) = (v48 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v54(v47, v53, v49);
    sub_10025C504(v50, v51, type metadata accessor for BeaconKeyManager.IndexInformation);
    unint64_t v55 = (*(unsigned __int8 *)(v52 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
    uint64_t v56 = swift_allocObject();
    sub_10025C5CC(v51, v56 + v55, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = sub_10025BEF4;
    *(void *)(v57 + 24) = v56;
    sub_10025C504(v50, v51, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v587 = swift_allocObject();
    sub_10025C5CC(v51, v587 + v55, type metadata accessor for BeaconKeyManager.IndexInformation);
    v579 = Logger.logObject.getter();
    os_log_type_t v568 = static os_log_type_t.info.getter();
    uint64_t v58 = swift_allocObject();
    *(unsigned char *)(v58 + 16) = 112;
    uint64_t v59 = swift_allocObject();
    *(unsigned char *)(v59 + 16) = 8;
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = 1752392040;
    uint64_t v61 = swift_allocObject();
    *(void *)(v61 + 16) = sub_10006550C;
    *(void *)(v61 + 24) = v60;
    uint64_t v62 = swift_allocObject();
    *(unsigned char *)(v62 + 16) = 33;
    uint64_t v63 = swift_allocObject();
    *(unsigned char *)(v63 + 16) = 8;
    uint64_t v64 = swift_allocObject();
    *(void *)(v64 + 16) = sub_1000654F4;
    *(void *)(v64 + 24) = v57;
    uint64_t v65 = swift_allocObject();
    *(void *)(v65 + 16) = sub_1000654EC;
    *(void *)(v65 + 24) = v64;
    uint64_t v66 = swift_allocObject();
    *(unsigned char *)(v66 + 16) = 34;
    uint64_t v67 = swift_allocObject();
    *(unsigned char *)(v67 + 16) = 8;
    uint64_t v68 = swift_allocObject();
    *(void *)(v68 + 16) = sub_10025C08C;
    *(void *)(v68 + 24) = v587;
    uint64_t v69 = swift_allocObject();
    *(void *)(v69 + 16) = sub_1000654EC;
    *(void *)(v69 + 24) = v68;
    *(void *)(v596 + 1920) = sub_10000588C(&qword_101639B60);
    uint64_t v70 = swift_allocObject();
    sub_1004B810C(v70, 9);
    *os_log_type_t v71 = sub_100065514;
    v71[1] = v58;
    v71[2] = sub_100065514;
    v71[3] = v59;
    v71[4] = sub_100065504;
    v71[5] = v61;
    v71[6] = sub_100065514;
    v71[7] = v62;
    v71[8] = sub_100065514;
    v71[9] = v63;
    v71[10] = sub_100065500;
    v71[11] = v65;
    v71[12] = sub_100065514;
    v71[13] = v66;
    v71[14] = sub_100065514;
    v71[15] = v67;
    v71[16] = sub_100065500;
    v71[17] = v69;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v554 = v66;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v579, v568))
    {
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      *(void *)(v596 + 960) = 0;
      *(_WORD *)uint64_t v72 = 771;
      *(void *)(v596 + 968) = v73;
      *(void *)(v596 + 952) = v72 + 2;
      *(void *)(v596 + 776) = sub_100065514;
      *(void *)(v596 + 784) = v58;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v596 + 776), v596 + 952, v596 + 960, v596 + 968);
      if (v592) {
        goto LABEL_23;
      }
      v593 = v72;
      swift_release();
      *(void *)(v596 + 776) = sub_100065514;
      *(void *)(v596 + 784) = v59;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v596 + 776), v596 + 952, v596 + 960, v596 + 968);
      swift_release();
      *(void *)(v596 + 776) = sub_100065504;
      *(void *)(v596 + 784) = v61;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v596 + 776), v596 + 952, v596 + 960, v596 + 968);
      swift_release();
      *(void *)(v596 + 776) = sub_100065514;
      *(void *)(v596 + 784) = v62;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v596 + 776), v596 + 952, v596 + 960, v596 + 968);
      swift_release();
      *(void *)(v596 + 776) = sub_100065514;
      *(void *)(v596 + 784) = v63;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v596 + 776), v596 + 952, v596 + 960, v596 + 968);
      swift_release();
      *(void *)(v596 + 776) = sub_100065500;
      *(void *)(v596 + 784) = v65;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v596 + 776), v596 + 952, v596 + 960, v596 + 968);
      swift_release();
      *(void *)(v596 + 776) = sub_100065514;
      *(void *)(v596 + 784) = v554;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v596 + 776), v596 + 952, v596 + 960, v596 + 968);
      swift_release();
      *(void *)(v596 + 776) = sub_100065514;
      *(void *)(v596 + 784) = v67;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v596 + 776), v596 + 952, v596 + 960, v596 + 968);
      swift_release();
      *(void *)(v596 + 776) = sub_100065500;
      *(void *)(v596 + 784) = v69;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v596 + 776), v596 + 952, v596 + 960, v596 + 968);
      uint64_t v74 = *(void *)(v596 + 1424);
      uint64_t v45 = v596;
      uint64_t v75 = *(void *)(v596 + 1360);
      uint64_t v76 = *(void *)(v596 + 1352);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v579, v568, "Reconciled beacon: %{private,mask.hash}s, index: %{public}s.", v593, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v76);
      unint64_t v592 = 0;
    }
    else
    {
      uint64_t v45 = v596;
      uint64_t v97 = *(void *)(v596 + 1360);
      uint64_t v561 = *(void *)(v596 + 1352);
      v570 = *(NSObject **)(v596 + 1424);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      (*(void (**)(NSObject *, uint64_t))(v97 + 8))(v570, v561);
    }
    uint64_t v98 = *(void *)(v45 + 1224);
    uint64_t v99 = *(int *)(*(void *)(v45 + 1184) + 20);
    *(_DWORD *)(v45 + 2024) = v99;
    uint64_t v101 = *(void *)(v98 + v99 + 24);
    uint64_t v100 = *(void *)(v98 + v99 + 32);
    sub_10001CD44((void *)(v98 + v99), v101);
    if (sub_100EB7B8C(v101, v100) == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v364 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v364 & 1) == 0)
      {
        uint64_t v366 = (long long *)(v45 + 384);
        unint64_t v367 = (_OWORD *)(v45 + 224);
        *(void *)(v45 + 1984) = v592;
        uint64_t v368 = (void *)(*(void *)(v45 + 1224) + *(int *)(v45 + 2024));
        uint64_t v369 = v368[3];
        uint64_t v370 = v368[4];
        sub_10001CD44(v368, v369);
        int v371 = sub_100EB7B8C(v369, v370);
        if (v371)
        {
          if (v371 == 1)
          {
            sub_10001D010(*(void *)(v45 + 1224) + *(int *)(v45 + 2024), v45 + 224);
          }
          else
          {
            *(void *)(v45 + 256) = 0;
            *unint64_t v367 = 0u;
            *(_OWORD *)(v45 + 240) = 0u;
          }
        }
        else
        {
          uint64_t v394 = v45 + 304;
          unint64_t v395 = (void *)(*(void *)(v45 + 1224) + *(int *)(v45 + 2024));
          sub_10001CD44(v395, v395[3]);
          uint64_t v45 = v596;
          dispatch thunk of RawRepresentable.rawValue.getter();
          uint64_t v396 = *(void *)(v596 + 944);
          *(void *)(v596 + 328) = &type metadata for PrimaryWildIndex;
          *(void *)(v596 + 336) = sub_1001A1694();
          *(void *)(v596 + 304) = v396;
          sub_10001D608(v394, (uint64_t)v367, &qword_10163F740);
        }
        sub_10001D074((uint64_t)v367, (uint64_t)v366, &qword_10163F740);
        if (*(void *)(v45 + 408))
        {
          sub_10001CEB0(v366, v45 + 424);
          uint64_t v397 = (void *)swift_task_alloc();
          *(void *)(v45 + 1992) = v397;
          *uint64_t v397 = v45;
          v397[1] = sub_100242F40;
          uint64_t v398 = *(void *)(v45 + 1568);
          return sub_100E5EB88(v45 + 264, v398);
        }
        uint64_t v399 = *(void *)(v45 + 1224);
        sub_10001DAB4((uint64_t)v367, &qword_10163F740);
        sub_10025C56C(v399, type metadata accessor for BeaconKeyManager.IndexInformation);
        sub_10001DAB4((uint64_t)v366, &qword_10163F740);
        goto LABEL_12;
      }
    }
    uint64_t v365 = (void *)swift_task_alloc();
    *(void *)(v45 + 1928) = v365;
    *uint64_t v365 = v45;
    v365[1] = sub_10023DD18;
    return sub_100E57788();
  }
  sub_10001DAB4(v9, &qword_101657910);
  if (qword_101636908 != -1) {
    goto LABEL_200;
  }
  while (1)
  {
    uint64_t v10 = v0;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1720);
    v566 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 1704);
    uint64_t v12 = *(void *)(v0 + 1568);
    uint64_t v13 = *(void *)(v0 + 1560);
    uint64_t v14 = *(void *)(v0 + 1536);
    uint64_t v15 = *(void *)(v0 + 1528);
    uint64_t v16 = *(void *)(v0 + 1416);
    uint64_t v17 = *(void *)(v10 + 1360);
    uint64_t v18 = *(void *)(v10 + 1352);
    uint64_t v19 = sub_100010324(v18, (uint64_t)qword_10170D9D8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v19, v18);
    v11(v13, v12, v15);
    unint64_t v20 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v21 = swift_allocObject();
    v566(v21 + v20, v13, v15);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = sub_10025B7C4;
    *(void *)(v22 + 24) = v21;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v7;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = sub_100061428;
    *(void *)(v24 + 24) = v23;
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v7;
    swift_bridgeObjectRetain();
    v536 = Logger.logObject.getter();
    os_log_type_t v541 = static os_log_type_t.error.getter();
    uint64_t v586 = swift_allocObject();
    *(unsigned char *)(v586 + 16) = 112;
    uint64_t v553 = swift_allocObject();
    *(unsigned char *)(v553 + 16) = 8;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = 1752392040;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = sub_10006550C;
    *(void *)(v27 + 24) = v26;
    uint64_t v567 = swift_allocObject();
    *(unsigned char *)(v567 + 16) = 33;
    uint64_t v559 = swift_allocObject();
    *(unsigned char *)(v559 + 16) = 8;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = sub_1000654F4;
    *(void *)(v28 + 24) = v22;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = sub_1000654EC;
    *(void *)(v29 + 24) = v28;
    uint64_t v30 = v29;
    uint64_t v578 = v29;
    uint64_t v550 = swift_allocObject();
    *(unsigned char *)(v550 + 16) = 32;
    uint64_t v31 = swift_allocObject();
    *(unsigned char *)(v31 + 16) = 8;
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = sub_10025B7C8;
    *(void *)(v32 + 24) = v24;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = sub_1000654EC;
    *(void *)(v33 + 24) = v32;
    uint64_t v34 = swift_allocObject();
    *(unsigned char *)(v34 + 16) = 0;
    uint64_t v546 = swift_allocObject();
    *(unsigned char *)(v546 + 16) = 8;
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = sub_10025B7D0;
    *(void *)(v35 + 24) = v25;
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = sub_10006569C;
    *(void *)(v36 + 24) = v35;
    sub_10000588C(&qword_101639B60);
    uint64_t v37 = swift_allocObject();
    sub_1004B810C(v37, 12);
    *uint64_t v38 = sub_100065514;
    v38[1] = v586;
    v38[2] = sub_100065514;
    v38[3] = v553;
    v38[4] = sub_100065504;
    v38[5] = v27;
    v38[6] = sub_100065514;
    v38[7] = v567;
    v38[8] = sub_100065514;
    v38[9] = v559;
    v38[10] = sub_100065500;
    v38[11] = v30;
    v38[12] = sub_100065514;
    v38[13] = v550;
    v38[14] = sub_100065514;
    v38[15] = v31;
    v38[16] = sub_100065500;
    v38[17] = v33;
    v38[18] = sub_100065514;
    v38[19] = v34;
    v38[20] = sub_100065514;
    v38[21] = v546;
    v38[22] = sub_100065504;
    v38[23] = v36;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v527 = v33;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v523 = v36;
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v536, v541))
    {
      uint64_t v39 = v596 + 816;
      unint64_t v40 = (uint8_t *)sub_1008F9FAC();
      uint64_t v41 = swift_slowAlloc();
      *(void *)(v596 + 808) = 0;
      *(void *)(v596 + 816) = v41;
      *(_WORD *)unint64_t v40 = 1027;
      *(void *)(v596 + 800) = v40 + 2;
      *(void *)(v596 + 760) = sub_100065514;
      *(void *)(v596 + 768) = v586;
      v519 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v596 + 760);
      uint64_t v533 = v596 + 800;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v596 + 760), v596 + 800, v596 + 808, v596 + 816);
      if (v592) {
        goto LABEL_23;
      }
      swift_release();
      *(void *)(v596 + 760) = sub_100065514;
      *(void *)(v596 + 768) = v553;
      sub_1008F9FB4(v519, v533, v596 + 808, v596 + 816);
      swift_release();
      *(void *)(v596 + 760) = sub_100065504;
      *(void *)(v596 + 768) = v27;
      sub_1008F9FB4(v519, v533, v596 + 808, v596 + 816);
      swift_release();
      *(void *)(v596 + 760) = sub_100065514;
      *(void *)(v596 + 768) = v567;
      sub_1008F9FB4(v519, v533, v596 + 808, v596 + 816);
      swift_release();
      *(void *)(v596 + 760) = sub_100065514;
      *(void *)(v596 + 768) = v559;
      sub_1008F9FB4(v519, v533, v596 + 808, v596 + 816);
      swift_release();
      *(void *)(v596 + 760) = sub_100065500;
      *(void *)(v596 + 768) = v578;
      sub_1008F9FB4(v519, v533, v596 + 808, v596 + 816);
      swift_release();
      *(void *)(v596 + 760) = sub_100065514;
      *(void *)(v596 + 768) = v550;
      sub_1008F9FB4(v519, v533, v596 + 808, v596 + 816);
      swift_release();
      *(void *)(v596 + 760) = sub_100065514;
      *(void *)(v596 + 768) = v31;
      sub_1008F9FB4(v519, v533, v596 + 808, v596 + 816);
      swift_release();
      *(void *)(v596 + 760) = sub_100065500;
      *(void *)(v596 + 768) = v527;
      sub_1008F9FB4(v519, v533, v596 + 808, v596 + 816);
      swift_release();
      *(void *)(v596 + 760) = sub_100065514;
      *(void *)(v596 + 768) = v34;
      sub_1008F9FB4(v519, v533, v596 + 808, v39);
      swift_release();
      *(void *)(v596 + 760) = sub_100065514;
      *(void *)(v596 + 768) = v546;
      sub_1008F9FB4(v519, v533, v596 + 808, v39);
      swift_release();
      *(void *)(v596 + 760) = sub_100065504;
      *(void *)(v596 + 768) = v523;
      sub_1008F9FB4(v519, v533, v596 + 808, v39);
      uint64_t v42 = *(void *)(v596 + 1416);
      uint64_t v43 = *(void *)(v596 + 1360);
      uint64_t v44 = *(void *)(v596 + 1352);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v536, v541, "Could not reconcile beacon: %{private,mask.hash}s,found beacons: %s, found count: %ld.", v40, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
      uint64_t v45 = v596;
      unint64_t v592 = 0;
    }
    else
    {
      uint64_t v77 = *(void *)(v596 + 1416);
      uint64_t v78 = *(void *)(v596 + 1360);
      uint64_t v79 = *(void *)(v596 + 1352);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v77, v79);
      uint64_t v45 = v596;
    }
LABEL_12:
    uint64_t v80 = v45;
    uint64_t v81 = *(void *)(v45 + 1648);
    uint64_t v82 = *(void *)(v45 + 1568);
    swift_beginAccess();
    uint64_t v83 = sub_1000F790C(v82, *(void *)(v81 + 16));
    uint64_t v84 = *(int *)(v45 + 2020);
    uint64_t v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 1720);
    uint64_t v86 = *(void *)(v45 + 1648);
    SecKeyRef v87 = *(NSObject **)(v45 + 1568);
    uint64_t v88 = *(void *)(v45 + 1560);
    uint64_t v588 = *(void *)(v45 + 1536);
    uint64_t v89 = *(void *)(v45 + 1528);
    uint64_t v90 = *(void *)(v45 + 1344);
    uint64_t v91 = *(void *)(v80 + 1328);
    v569 = v87;
    uint64_t v580 = v90 + v84;
    uint64_t v555 = *(void *)(v80 + 1280);
    uint64_t v560 = v88;
    if (v83)
    {
      uint64_t v92 = *(void *)(v80 + 1144);
      *(void *)(v80 + 896) = v83;
      swift_endAccess();
      uint64_t v93 = (unsigned __int8 *)(v91 + *(int *)(v555 + 48));
      v85(v91, v90, v89);
      sub_10025C504(v580, (uint64_t)v93, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      sub_100DCCAA4(v92, v93);
      sub_10025C56C(v92, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      unint64_t v94 = *(void (**)(uint64_t, uint64_t))(v588 + 8);
      v94(v91, v89);
      v85(v88, (uint64_t)v569, v89);
      uint64_t v95 = *(void *)(v80 + 896);
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v600 = *(uint64_t (**)())(v86 + 16);
      *(void *)(v86 + 16) = 0x8000000000000000;
      sub_10016D370(v95, v88, isUniquelyReferenced_nonNull_native);
      *(void *)(v86 + 16) = v600;
      swift_bridgeObjectRelease();
      v94(v88, v89);
    }
    else
    {
      swift_endAccess();
      v85(v88, (uint64_t)v569, v89);
      sub_10000588C(&qword_10163AA18);
      uint64_t v102 = swift_allocObject();
      uint64_t v103 = sub_1004B7688(v102, 1);
      uint64_t v105 = v104;
      uint64_t v106 = v91 + *(int *)(v555 + 48);
      uint64_t v107 = v90;
      uint64_t v108 = v89;
      v85(v91, v107, v89);
      sub_10025C504(v580, v106, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      sub_10025C5CC(v106, v105, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      uint64_t v109 = SharingCircleWildAdvertisementKey.init(key:)(v103);
      double v110 = *(void (**)(uint64_t, uint64_t))(v588 + 8);
      v110(v91, v108);
      uint64_t v111 = sub_101158D6C(v109);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      char v112 = swift_isUniquelyReferenced_nonNull_native();
      v600 = *(uint64_t (**)())(v86 + 16);
      *(void *)(v86 + 16) = 0x8000000000000000;
      sub_10016D370(v111, v560, v112);
      *(void *)(v86 + 16) = v600;
      swift_bridgeObjectRelease();
      v110(v560, v108);
    }
    swift_endAccess();
    uint64_t v113 = (void *)v80;
    if (qword_101636908 != -1) {
      swift_once();
    }
    uint64_t v114 = *(int *)(v80 + 2020);
    uint64_t v115 = *(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 1720);
    v537 = (void (*)(unint64_t, uint64_t, uint64_t))v113[213];
    uint64_t v556 = v113[206];
    uint64_t v116 = v113[196];
    uint64_t v117 = v113[195];
    uint64_t v118 = v113[192];
    uint64_t v119 = v113[191];
    uint64_t v120 = v113[176];
    os_log_type_t v121 = v113;
    uint64_t v122 = v113[170];
    uint64_t v123 = v121[169];
    uint64_t v124 = v121[166];
    uint64_t v547 = v121[161];
    v571 = v121[168];
    uint64_t v581 = (uint64_t)v571 + v114;
    uint64_t v542 = v121[160];
    uint64_t v125 = sub_100010324(v123, (uint64_t)qword_10170D9D8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v122 + 16))(v120, v125, v123);
    v115(v117, v116, v119);
    unint64_t v126 = (*(unsigned __int8 *)(v118 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
    uint64_t v127 = swift_allocObject();
    uint64_t v524 = v119;
    v537(v127 + v126, v117, v119);
    uint64_t v562 = swift_allocObject();
    *(void *)(v562 + 16) = sub_10025B7C4;
    *(void *)(v562 + 24) = v127;
    uint64_t v128 = v124 + *(int *)(v542 + 48);
    v115(v124, (uint64_t)v571, v119);
    sub_10025C504(v581, v128, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v129 = *(unsigned __int8 *)(v547 + 80);
    uint64_t v130 = (v129 + 16) & ~v129;
    uint64_t v131 = swift_allocObject();
    sub_10001D608(v124, v131 + v130, &qword_10163F728);
    uint64_t v538 = swift_allocObject();
    *(void *)(v538 + 16) = sub_10025B4F4;
    *(void *)(v538 + 24) = v131;
    uint64_t v132 = v124 + *(int *)(v542 + 48);
    v115(v124, (uint64_t)v571, v524);
    sub_10025C504(v581, v132, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v133 = swift_allocObject();
    sub_10001D608(v124, v133 + v130, &qword_10163F728);
    uint64_t v528 = swift_allocObject();
    *(void *)(v528 + 16) = sub_10025B504;
    *(void *)(v528 + 24) = v133;
    uint64_t v134 = v124 + *(int *)(v542 + 48);
    v115(v124, (uint64_t)v571, v524);
    sub_10025C504(v581, v134, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v135 = swift_allocObject();
    *(void *)(v135 + 16) = v556;
    sub_10001D608(v124, v135 + ((v129 + 24) & ~v129), &qword_10163F728);
    swift_retain();
    v548 = Logger.logObject.getter();
    os_log_type_t v520 = static os_log_type_t.info.getter();
    uint64_t v557 = swift_allocObject();
    *(unsigned char *)(v557 + 16) = 112;
    uint64_t v589 = swift_allocObject();
    *(unsigned char *)(v589 + 16) = 8;
    uint64_t v136 = swift_allocObject();
    *(void *)(v136 + 16) = 1752392040;
    uint64_t v582 = swift_allocObject();
    *(void *)(v582 + 16) = sub_10006550C;
    *(void *)(v582 + 24) = v136;
    uint64_t v137 = swift_allocObject();
    *(unsigned char *)(v137 + 16) = 33;
    uint64_t v138 = v137;
    uint64_t v551 = swift_allocObject();
    *(unsigned char *)(v551 + 16) = 8;
    uint64_t v139 = swift_allocObject();
    *(void *)(v139 + 16) = sub_1000654F4;
    *(void *)(v139 + 24) = v562;
    uint64_t v572 = swift_allocObject();
    *(void *)(v572 + 16) = sub_1000654EC;
    *(void *)(v572 + 24) = v139;
    uint64_t v563 = swift_allocObject();
    *(unsigned char *)(v563 + 16) = 34;
    uint64_t v543 = swift_allocObject();
    *(unsigned char *)(v543 + 16) = 8;
    uint64_t v140 = swift_allocObject();
    *(void *)(v140 + 16) = sub_10025C990;
    *(void *)(v140 + 24) = v538;
    uint64_t v539 = swift_allocObject();
    *(void *)(v539 + 16) = sub_1000654EC;
    *(void *)(v539 + 24) = v140;
    uint64_t v534 = swift_allocObject();
    *(unsigned char *)(v534 + 16) = 34;
    uint64_t v531 = swift_allocObject();
    *(unsigned char *)(v531 + 16) = 8;
    uint64_t v141 = swift_allocObject();
    *(void *)(v141 + 16) = sub_10025C994;
    *(void *)(v141 + 24) = v528;
    uint64_t v142 = swift_allocObject();
    *(void *)(v142 + 16) = sub_1000654EC;
    *(void *)(v142 + 24) = v141;
    uint64_t v143 = v142;
    uint64_t v529 = swift_allocObject();
    *(unsigned char *)(v529 + 16) = 0;
    uint64_t v525 = swift_allocObject();
    *(unsigned char *)(v525 + 16) = 8;
    uint64_t v144 = swift_allocObject();
    *(void *)(v144 + 16) = sub_10025B514;
    *(void *)(v144 + 24) = v135;
    uint64_t v145 = swift_allocObject();
    *(void *)(v145 + 16) = sub_10006569C;
    *(void *)(v145 + 24) = v144;
    uint64_t v146 = v145;
    sub_10000588C(&qword_101639B60);
    uint64_t v147 = swift_allocObject();
    sub_1004B810C(v147, 15);
    *uint64_t v148 = sub_100065514;
    v148[1] = v557;
    v148[2] = sub_100065514;
    v148[3] = v589;
    v148[4] = sub_100065504;
    v148[5] = v582;
    v148[6] = sub_100065514;
    v148[7] = v138;
    v148[8] = sub_100065514;
    v148[9] = v551;
    v148[10] = sub_100065500;
    v148[11] = v572;
    v148[12] = sub_100065514;
    v148[13] = v563;
    v148[14] = sub_100065514;
    v148[15] = v543;
    v148[16] = sub_100065500;
    v148[17] = v539;
    v148[18] = sub_100065514;
    v148[19] = v534;
    v148[20] = sub_100065514;
    v148[21] = v531;
    v148[22] = sub_100065500;
    v148[23] = v143;
    v148[24] = sub_100065514;
    v148[25] = v529;
    v148[26] = sub_100065514;
    v148[27] = v525;
    v148[28] = sub_100065504;
    v148[29] = v146;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v548, v520))
    {
      uint64_t v149 = (uint8_t *)sub_1008F9FAC();
      uint64_t v150 = swift_slowAlloc();
      *(void *)(v596 + 856) = 0;
      *(void *)(v596 + 824) = v150;
      *(_WORD *)uint64_t v149 = 1283;
      *(void *)(v596 + 864) = v149 + 2;
      *(void *)(v596 + 648) = sub_100065514;
      *(void *)(v596 + 656) = v557;
      uint64_t v505 = v596 + 864;
      v508 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v596 + 648);
      uint64_t v512 = v596 + 856;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v596 + 648), v596 + 864, v596 + 856, v596 + 824);
      if (!v592)
      {
        swift_release();
        *(void *)(v596 + 648) = sub_100065514;
        *(void *)(v596 + 656) = v589;
        sub_1008F9FB4(v508, v505, v512, v596 + 824);
        swift_release();
        *(void *)(v596 + 648) = sub_100065504;
        *(void *)(v596 + 656) = v582;
        sub_1008F9FB4(v508, v505, v512, v596 + 824);
        swift_release();
        *(void *)(v596 + 648) = sub_100065514;
        *(void *)(v596 + 656) = v138;
        sub_1008F9FB4(v508, v505, v512, v596 + 824);
        swift_release();
        *(void *)(v596 + 648) = sub_100065514;
        *(void *)(v596 + 656) = v551;
        sub_1008F9FB4(v508, v505, v512, v596 + 824);
        swift_release();
        *(void *)(v596 + 648) = sub_100065500;
        *(void *)(v596 + 656) = v572;
        sub_1008F9FB4(v508, v505, v512, v596 + 824);
        swift_release();
        *(void *)(v596 + 648) = sub_100065514;
        *(void *)(v596 + 656) = v563;
        sub_1008F9FB4(v508, v505, v512, v596 + 824);
        swift_release();
        *(void *)(v596 + 648) = sub_100065514;
        *(void *)(v596 + 656) = v543;
        sub_1008F9FB4(v508, v505, v512, v596 + 824);
        unint64_t v151 = (unint64_t)v548;
        swift_release();
        *(void *)(v596 + 648) = sub_100065500;
        uint64_t v152 = v596;
        *(void *)(v596 + 656) = v539;
        sub_1008F9FB4(v508, v505, v512, v596 + 824);
        swift_release();
        *(void *)(v596 + 648) = sub_100065514;
        *(void *)(v596 + 656) = v534;
        sub_1008F9FB4(v508, v505, v512, v596 + 824);
        swift_release();
        *(void *)(v596 + 648) = sub_100065514;
        *(void *)(v596 + 656) = v531;
        sub_1008F9FB4(v508, v505, v512, v596 + 824);
        swift_release();
        *(void *)(v596 + 648) = sub_100065500;
        *(void *)(v596 + 656) = v143;
        sub_1008F9FB4(v508, v505, v512, v596 + 824);
        swift_release();
        *(void *)(v596 + 648) = sub_100065514;
        *(void *)(v596 + 656) = v529;
        sub_1008F9FB4(v508, v505, v512, v596 + 824);
        swift_release();
        *(void *)(v596 + 648) = sub_100065514;
        *(void *)(v596 + 656) = v525;
        sub_1008F9FB4(v508, v505, v512, v596 + 824);
        swift_release();
        *(void *)(v596 + 648) = sub_100065504;
        *(void *)(v596 + 656) = v146;
        sub_1008F9FB4(v508, v505, v512, v596 + 824);
        goto LABEL_222;
      }
LABEL_23:
      return swift_errorRelease();
    }
    unint64_t v503 = *(void *)(v596 + 1824);
    uint64_t v154 = *(void *)(v596 + 1816);
    uint64_t v155 = *(void *)(v596 + 1360);
    uint64_t v506 = *(void *)(v596 + 1352);
    uint64_t v509 = *(void *)(v596 + 1408);
    uint64_t v513 = *(void *)(v596 + 1256);
    uint64_t v521 = *(void *)(v596 + 1344);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10001CFB8(v154, v503);
    uint64_t v156 = *(void (**)(uint64_t, uint64_t))(v155 + 8);
    unint64_t v151 = v155 + 8;
    v156(v509, v506);
    sub_10001DAB4(v513, &qword_101657910);
    sub_10001DAB4(v521, &qword_10163F728);
LABEL_27:
    uint64_t v0 = v596;
    uint64_t v157 = *(void *)(v596 + 1808) + 1;
    if (v157 != *(void *)(v596 + 1800))
    {
      *(void *)(v596 + 1808) = v157;
      unint64_t v372 = *(void *)(v596 + 1752);
      uint64_t v373 = *(void *)(v596 + 1792) + 24 * v157;
      uint64_t v374 = *(void *)(v373 + 32);
      *(void *)(v596 + 1816) = v374;
      uint64_t v162 = *(void *)(v373 + 40);
      *(void *)(v596 + 1824) = v162;
      int v375 = *(_DWORD *)(v373 + 48);
      *(unsigned char *)(v596 + 1836) = *(unsigned char *)(v373 + 52);
      *(_DWORD *)(v596 + 1832) = v375;
      uint64_t v376 = 0;
      uint64_t v377 = 0;
      switch(v372 >> 62)
      {
        case 1uLL:
          sub_100037A38(*(void *)(v596 + 1744), v372);
          uint64_t v411 = *(void *)(v596 + 1744);
          uint64_t v376 = v411 >> 32;
          uint64_t v377 = (int)v411;
          break;
        case 2uLL:
          uint64_t v412 = *(void *)(v596 + 1744);
          uint64_t v377 = *(void *)(v412 + 16);
          uint64_t v376 = *(void *)(v412 + 24);
          sub_100037A38(v412, v372);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v377 = 0;
          uint64_t v376 = BYTE6(v372);
          break;
      }
      unint64_t v413 = sub_1008AA59C(v377, v376, *(void *)(v596 + 1744), *(void *)(v596 + 1752));
      unint64_t p_ivar_base_size = *(void *)(v596 + 1752);
      if (v413 < 0x39)
      {
        switch(p_ivar_base_size >> 62)
        {
          case 1uLL:
            uint64_t v416 = *(void *)(v596 + 1744);
            uint64_t v414 = v416 >> 32;
            uint64_t v415 = (int)v416;
            goto LABEL_170;
          case 2uLL:
            uint64_t v417 = *(void *)(v596 + 1744);
            uint64_t v415 = *(void *)(v417 + 16);
            uint64_t v414 = *(void *)(v417 + 24);
            goto LABEL_170;
          default:
            goto LABEL_172;
        }
      }
      uint64_t v414 = sub_1008AA520(v377, 57, *(void *)(v596 + 1744), *(void *)(v596 + 1752));
      uint64_t v415 = 0;
      switch(p_ivar_base_size >> 62)
      {
        case 1uLL:
          uint64_t v415 = (int)*(void *)(v596 + 1744);
          break;
        case 2uLL:
          uint64_t v415 = *(void *)(*(void *)(v596 + 1744) + 16);
          break;
        default:
          break;
      }
LABEL_170:
      if (v414 >= v415)
      {
        unint64_t p_ivar_base_size = *(void *)(v596 + 1752);
LABEL_172:
        uint64_t v418 = *(void *)(v596 + 1744);
        sub_1000361E0(v374, v162);
        sub_1000361E0(v374, v162);
        unint64_t v151 = Data._Representation.subscript.getter();
        unint64_t v420 = v419;
        sub_100037A24(v418, p_ivar_base_size);
        switch(v420 >> 62)
        {
          case 1uLL:
            LODWORD(v421) = HIDWORD(v151) - v151;
            if (__OFSUB__(HIDWORD(v151), v151)) {
              goto LABEL_216;
            }
            uint64_t v421 = (int)v421;
            goto LABEL_177;
          case 2uLL:
            uint64_t v423 = *(void *)(v151 + 16);
            uint64_t v422 = *(void *)(v151 + 24);
            BOOL v198 = __OFSUB__(v422, v423);
            uint64_t v421 = v422 - v423;
            if (v198) {
              goto LABEL_217;
            }
            goto LABEL_177;
          case 3uLL:
            goto LABEL_180;
          default:
            uint64_t v421 = BYTE6(v420);
LABEL_177:
            if (v421 != 57)
            {
LABEL_180:
              uint64_t v426 = v151;
              unint64_t v427 = v420;
              goto LABEL_181;
            }
            sub_1000361E0(v151, v420);
            uint64_t v424 = sub_100A94760(v151, v420);
            if (v592)
            {
              sub_10001CFB8(v151, v420);
              v600 = 0;
              unint64_t v601 = 0xE000000000000000;
              _StringGuts.grow(_:)(35);
              unint64_t v430 = v601;
              *(void *)(v596 + 632) = v600;
              *(void *)(v596 + 640) = v430;
              v431._object = (void *)0x80000001013F3B70;
              v431._countAndFlagsBits = 0xD000000000000021;
              String.append(_:)(v431);
              *(void *)(v596 + 936) = v592;
              sub_10000588C(&qword_101638D40);
              _print_unlocked<A, B>(_:_:)();
              return _assertionFailure(_:_:file:line:flags:)();
            }
            uint64_t v428 = v424;
            unint64_t v429 = v425;
            sub_10001CFB8(v151, v420);
            sub_100434E0C(v428, v429, (uint64_t *)(v596 + 696));
            sub_10001CFB8(v151, v420);
            uint64_t v441 = *(void *)(v596 + 696);
            *(void *)(v596 + 1840) = v441;
            uint64_t v442 = *(void *)(v596 + 704);
            *(void *)(v596 + 1848) = v442;
            v443 = (void *)swift_task_alloc();
            *(void *)(v596 + 1856) = v443;
            void *v443 = v596;
            v443[1] = sub_100233AA0;
            uint64_t v444 = *(void *)(v596 + 1784);
            uint64_t v445 = *(void *)(v596 + 1568);
            uint64_t v446 = *(void *)(v596 + 1272);
            uint64_t result = sub_10025916C(v446, v374, v162, v444, v441, v442, 0, v445);
            break;
        }
        return result;
      }
LABEL_205:
      __break(1u);
LABEL_206:
      __break(1u);
LABEL_207:
      __break(1u);
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
      goto LABEL_219;
    }
    uint64_t v158 = *(void **)(v596 + 1784);
    unint64_t v159 = *(void *)(v596 + 1752);
    uint64_t v160 = *(void *)(v596 + 1744);
    uint64_t v161 = *(void *)(v596 + 1632);
    uint64_t v162 = *(void *)(v596 + 1576);
    uint64_t v163 = *(void *)(v596 + 1568);
    uint64_t v164 = *(void *)(v596 + 1536);
    uint64_t v165 = *(void *)(v596 + 1528);
    sub_10001CFB8(*(void *)(v596 + 1672), *(void *)(v596 + 1680));

    uint64_t v0 = v596;
    sub_100037A24(v160, v159);
    swift_bridgeObjectRelease();
    uint64_t v166 = *(NSObject **)(v164 + 8);
    unint64_t v151 = v164 + 8;
    uint64_t v7 = v166;
    ((void (*)(uint64_t, uint64_t))v166)(v162, v165);
    sub_10025C56C(v161, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    ((void (*)(uint64_t, uint64_t))v166)(v163, v165);
    unint64_t v167 = *(void *)(v596 + 1664) + 1;
    if (v167 == *(void *)(v596 + 1656)) {
      break;
    }
    uint64_t v162 = (uint64_t)&qword_101638CF0;
    while (1)
    {
      *(void *)(v0 + 1664) = v167;
      unint64_t v379 = *(void **)(v0 + 984);
      if (!v379) {
        unint64_t v379 = _swiftEmptyArrayStorage;
      }
      if (v167 >= v379[2]) {
        break;
      }
      uint64_t v380 = *(unsigned __int8 *)(v0 + 2016);
      uint64_t v381 = *(void *)(v0 + 1632);
      uint64_t v382 = *(void *)(v0 + 1592);
      uint64_t v383 = *(void *)(v596 + 1584);
      uint64_t v384 = *(void *)(v596 + 1536);
      uint64_t v385 = *(void *)(v596 + 1528);
      uint64_t v386 = *(void *)(v596 + 1520);
      sub_10025C504((uint64_t)v379 + ((v380 + 32) & ~v380) + *(void *)(v382 + 72) * v167, v381, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      uint64_t v387 = *(void *)(v381 + 16);
      *(void *)(v596 + 1672) = v387;
      unint64_t v388 = *(void *)(v381 + 24);
      *(void *)(v596 + 1680) = v388;
      uint64_t v389 = *(int *)(v383 + 28);
      uint64_t v0 = v596;
      sub_10001D074(v381 + v389, v386, &qword_101638CF0);
      uint64_t v390 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v384 + 48);
      unint64_t v151 = v384 + 48;
      *(void *)(v596 + 1688) = v390;
      *(void *)(v596 + 1696) = v151 & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
      if (v390(v386, 1, v385) != 1)
      {
        uint64_t v402 = *(void *)(v596 + 1576);
        uint64_t v403 = *(void *)(v596 + 1536);
        uint64_t v404 = *(void *)(v596 + 1528);
        uint64_t v405 = *(void *)(v596 + 1520);
        uint64_t v406 = *(void *)(v596 + 1512);
        uint64_t v407 = *(void (**)(uint64_t, uint64_t, uint64_t))(v403 + 32);
        *(void *)(v596 + 1704) = v407;
        *(void *)(v596 + 1712) = (v403 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v407(v402, v405, v404);
        v408 = *(void (**)(uint64_t, uint64_t, uint64_t))(v403 + 16);
        *(void *)(v596 + 1720) = v408;
        *(void *)(v596 + 1728) = (v403 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v408(v406, v402, v404);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v403 + 56))(v406, 0, 1, v404);
        sub_1000361E0(v387, v388);
        v409 = (void *)swift_task_alloc();
        *(void *)(v596 + 1736) = v409;
        void *v409 = v596;
        v409[1] = sub_1002280E0;
        uint64_t v410 = *(void *)(v596 + 1512);
        return sub_100257574(v387, v388, v410);
      }
      uint64_t v391 = *(void *)(v596 + 1520);
      sub_1000361E0(v387, v388);
      sub_10001DAB4(v391, &qword_101638CF0);
      if (qword_101636908 != -1) {
        swift_once();
      }
      sub_100010324(*(void *)(v596 + 1352), (uint64_t)qword_10170D9D8);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v392 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v392))
      {
        unint64_t v393 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v393 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v392, "Missing share id in payload.", v393, 2u);
        swift_slowDealloc();
      }
      uint64_t v378 = *(void *)(v596 + 1632);
      sub_10001CFB8(v387, v388);

      sub_10025C56C(v378, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      unint64_t v167 = *(void *)(v596 + 1664) + 1;
      if (v167 == *(void *)(v596 + 1656)) {
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_200:
    swift_once();
  }
LABEL_29:
  uint64_t v168 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 976)) {
    uint64_t v168 = *(void **)(v0 + 976);
  }
  unint64_t v169 = v592;
  uint64_t v532 = v168[2];
  if (!v532)
  {
    swift_bridgeObjectRetain();
LABEL_155:
    swift_bridgeObjectRelease();
    uint64_t v400 = *(void *)(v0 + 1648);
    swift_beginAccess();
    uint64_t v584 = *(void *)(v400 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v401 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v401(v584);
  }
  uint64_t v170 = *(void *)(v0 + 1536);
  v498 = (unint64_t *)(v0 + 888);
  uint64_t v171 = *(void *)(v0 + 1360);
  uint64_t v500 = *(void *)(v0 + 1280);
  uint64_t v172 = *(void *)(v0 + 1160);
  uint64_t v502 = *(void *)(v0 + 1120);
  uint64_t v583 = *(void *)(v0 + 1104);
  uint64_t v510 = *(void *)(v0 + 1080);
  uint64_t v173 = *(void *)(v0 + 1056);
  v558 = (void (**)(uint64_t, void, uint64_t))(v173 + 104);
  uint64_t v494 = *(void *)(v0 + 1040);
  v552 = (void (**)(uint64_t, uint64_t))(v173 + 8);
  v499 = (void (**)(void))(v170 + 16);
  uint64_t v504 = *(void *)(v0 + 1032);
  v493 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1192) + 56);
  v492 = (void (**)(uint64_t, uint64_t, uint64_t))(v172 + 16);
  v491 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56);
  v490 = (void (**)(uint64_t))(v170 + 32);
  v487 = (void (**)(uint64_t, uint64_t))(v170 + 8);
  uint64_t v174 = *(uint8_t **)(*(void *)(v0 + 992) + 16);
  v526 = (void (**)(uint64_t, uint64_t, uint64_t))(v171 + 16);
  v511 = (void (**)(uint64_t, uint8_t *))(v171 + 8);
  unsigned int v549 = enum case for HashAlgorithm.sha256(_:);
  v540 = v168 + 4;
  uint64_t v488 = *(void *)(v0 + 1288);
  v489 = *(int **)(v0 + 1016);
  swift_bridgeObjectRetain();
  unint64_t v175 = 0;
  unint64_t p_ivar_base_size = (unint64_t)&AnalyticsEvent.ivar_base_size;
  v530 = v174;
  v507 = v168;
LABEL_33:
  if (v175 >= v168[2]) {
    goto LABEL_208;
  }
  unint64_t v535 = v175;
  uint64_t v177 = &v540[3 * v175];
  uint64_t v178 = *v177;
  unint64_t v151 = v177[1];
  uint64_t v179 = v177[2];
  if (!v174)
  {
    sub_1000361E0(*v177, v177[1]);
    swift_bridgeObjectRetain();
    goto LABEL_98;
  }
  uint64_t v180 = *(void *)(v0 + 992);
  unint64_t v573 = v151 >> 62;
  sub_1000361E0(v178, v151);
  uint64_t v181 = *(unsigned __int8 *)(v510 + 80);
  uint64_t v495 = ~v181;
  uint64_t v497 = v181;
  uint64_t v152 = v180 + ((v181 + 32) & ~v181);
  uint64_t v564 = BYTE6(v151);
  uint64_t v544 = *(void *)(v510 + 72);
  BOOL v182 = __OFSUB__(HIDWORD(v178), v178);
  os_log_type_t v520 = v182;
  uint64_t v514 = HIDWORD(v178) - (int)v178;
  uint64_t v501 = v179;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v149 = v174;
  unint64_t v590 = v151;
  uint64_t v594 = v178;
  while (2)
  {
    uint64_t v183 = *(uint64_t **)(v0 + 1104);
    sub_10025C504(v152, (uint64_t)v183, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v184 = *v183;
    unint64_t v185 = *(void *)(v583 + 8);
    uint64_t v162 = v185 >> 62;
    uint64_t v186 = 0;
    uint64_t v0 = 0;
    uint64_t v187 = 0;
    uint64_t v188 = 0;
    switch(v185 >> 62)
    {
      case 1uLL:
        uint64_t v186 = (int)v184;
        uint64_t v0 = v184 >> 32;
        sub_1000361E0(v184, *(void *)(v583 + 8));
        uint64_t v187 = v184 >> 32;
        uint64_t v188 = (int)v184;
        break;
      case 2uLL:
        uint64_t v186 = *(void *)(v184 + 16);
        uint64_t v0 = *(void *)(v184 + 24);
        sub_1000361E0(v184, *(void *)(v583 + 8));
        uint64_t v188 = *(void *)(v184 + 16);
        uint64_t v187 = *(void *)(v184 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v186 = 0;
        uint64_t v188 = 0;
        uint64_t v0 = BYTE6(v185);
        uint64_t v187 = BYTE6(v185);
        break;
    }
    if (v187 < v186 || v186 < v188)
    {
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
      goto LABEL_205;
    }
    uint64_t v162 = v162;
    uint64_t v189 = 0;
    uint64_t v190 = 0;
    switch((int)v162)
    {
      case 1:
        uint64_t v190 = (int)v184;
        uint64_t v189 = v184 >> 32;
        break;
      case 2:
        uint64_t v190 = *(void *)(v184 + 16);
        uint64_t v189 = *(void *)(v184 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v190 = 0;
        uint64_t v189 = BYTE6(v185);
        break;
    }
    if (v189 < v0 || v0 < v190) {
      goto LABEL_202;
    }
    unint64_t v191 = v0 - v186;
    if (__OFSUB__(v0, v186)) {
      goto LABEL_203;
    }
    uint64_t v0 = v596;
    if (v191 < 0x39)
    {
      switch((int)v162)
      {
        case 1:
          uint64_t v192 = v184 >> 32;
          goto LABEL_59;
        case 2:
          uint64_t v192 = *(void *)(v184 + 24);
          goto LABEL_61;
        default:
          goto LABEL_63;
      }
    }
    uint64_t v192 = sub_1008AA520(v186, 57, v184, v185);
    uint64_t v193 = 0;
    switch((int)v162)
    {
      case 1:
LABEL_59:
        uint64_t v193 = (int)v184;
        break;
      case 2:
LABEL_61:
        uint64_t v193 = *(void *)(v184 + 16);
        break;
      default:
        break;
    }
    if (v192 < v193) {
      goto LABEL_204;
    }
LABEL_63:
    uint64_t v162 = Data._Representation.subscript.getter();
    unint64_t p_ivar_base_size = v194;
    sub_10001CFB8(v184, v185);
    switch(p_ivar_base_size >> 62)
    {
      case 1uLL:
        LODWORD(v195) = HIDWORD(v162) - v162;
        if (__OFSUB__(HIDWORD(v162), v162)) {
          goto LABEL_206;
        }
        uint64_t v195 = (int)v195;
LABEL_68:
        if (v195 == 57)
        {
          sub_1000361E0(v162, p_ivar_base_size);
          uint64_t v199 = sub_100A948F8(v162, p_ivar_base_size);
          unint64_t v151 = v169;
          if (v169)
          {
            static os_log_type_t.error.getter();
            if (qword_101636F48 == -1)
            {
LABEL_185:
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v432 = swift_allocObject();
              uint64_t v433 = sub_1004B810C(v432, 1);
              v435 = v434;
              unint64_t *v498 = v151;
              swift_errorRetain();
              sub_10000588C(&qword_101638D40);
              uint64_t v436 = String.init<A>(describing:)();
              uint64_t v438 = v437;
              v435[3] = (uint64_t)&type metadata for String;
              v435[4] = sub_10000B4CC();
              uint64_t *v435 = v436;
              v435[1] = v438;
              SharingCircleWildAdvertisementKey.init(key:)(v433);
              os_log(_:dso:log:_:_:)();
              swift_bridgeObjectRelease();
              sub_100130148();
              uint64_t v439 = swift_allocError();
              unsigned char *v440 = 0;
              swift_willThrow();
              swift_errorRelease();
              unint64_t v202 = p_ivar_base_size;
              uint64_t v200 = v162;
LABEL_197:
              sub_10001CFB8(v200, v202);
              v600 = 0;
              unint64_t v601 = 0xE000000000000000;
              _StringGuts.grow(_:)(35);
              unint64_t v450 = v601;
              *(void *)(v0 + 680) = v600;
              *(void *)(v0 + 688) = v450;
              v451._object = (void *)0x80000001013F3B70;
              v451._countAndFlagsBits = 0xD000000000000021;
              String.append(_:)(v451);
              *(void *)(v0 + 872) = v439;
              sub_10000588C(&qword_101638D40);
              _print_unlocked<A, B>(_:_:)();
              return _assertionFailure(_:_:file:line:flags:)();
            }
LABEL_219:
            swift_once();
            goto LABEL_185;
          }
          uint64_t v200 = sub_100A90C58(v199, 0);
          unint64_t v202 = v201;
          CCECCryptorRelease();
          sub_10001CFB8(v162, p_ivar_base_size);
          unint64_t v203 = v202 >> 62;
          unint64_t v151 = v590;
          switch(v202 >> 62)
          {
            case 1uLL:
              LODWORD(v204) = HIDWORD(v200) - v200;
              if (__OFSUB__(HIDWORD(v200), v200)) {
                goto LABEL_209;
              }
              uint64_t v204 = (int)v204;
LABEL_75:
              if (v204 == 28)
              {
                uint64_t v207 = *(void *)(v596 + 1064);
                uint64_t v208 = *(void *)(v596 + 1048);
                sub_10001CFB8(v162, p_ivar_base_size);
                (*v558)(v207, v549, v208);
                uint64_t v162 = Data.hash(algorithm:)();
                unint64_t p_ivar_base_size = v209;
                (*v552)(v207, v208);
                sub_10001CFB8(v200, v202);
                uint64_t v0 = 0;
                uint64_t v178 = v594;
                switch(p_ivar_base_size >> 62)
                {
                  case 1uLL:
                    if (__OFSUB__(HIDWORD(v162), v162)) {
                      goto LABEL_211;
                    }
                    uint64_t v0 = HIDWORD(v162) - (int)v162;
LABEL_81:
                    sub_1000361E0(v162, p_ivar_base_size);
                    break;
                  case 2uLL:
                    uint64_t v211 = *(void *)(v162 + 16);
                    uint64_t v210 = *(void *)(v162 + 24);
                    uint64_t v0 = v210 - v211;
                    if (!__OFSUB__(v210, v211)) {
                      goto LABEL_81;
                    }
                    goto LABEL_212;
                  case 3uLL:
                    break;
                  default:
                    uint64_t v0 = BYTE6(p_ivar_base_size);
                    break;
                }
                uint64_t v212 = v564;
                switch((int)v573)
                {
                  case 1:
                    uint64_t v212 = v514;
                    if (v520) {
                      goto LABEL_213;
                    }
                    goto LABEL_86;
                  case 2:
                    uint64_t v214 = *(void *)(v594 + 16);
                    uint64_t v213 = *(void *)(v594 + 24);
                    BOOL v198 = __OFSUB__(v213, v214);
                    uint64_t v212 = v213 - v214;
                    if (v198) {
                      goto LABEL_214;
                    }
                    goto LABEL_86;
                  case 3:
                    if (v0) {
                      goto LABEL_40;
                    }
                    goto LABEL_107;
                  default:
LABEL_86:
                    if (v0 == v212)
                    {
                      if (v0 < 1)
                      {
LABEL_107:
                        sub_10001CFB8(v162, p_ivar_base_size);
                        sub_10001CFB8(v162, p_ivar_base_size);
                        uint64_t v0 = v596;
LABEL_108:
                        uint64_t v230 = *(void *)(v0 + 1120);
                        uint64_t v231 = *(void *)(v0 + 1112);
                        uint64_t v232 = *(void *)(v0 + 1104);
                        swift_bridgeObjectRelease();
                        sub_10025C5CC(v232, v231, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        sub_10025C5CC(v231, v230, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        uint64_t v233 = sub_1001340BC(v501);
                        if (v233)
                        {
                          uint64_t v234 = v233;
                          unint64_t v522 = v501
                               + ((*(unsigned __int8 *)(v504 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v504 + 80));
                          uint64_t v496 = (v497 + 16) & v495;
                          swift_bridgeObjectRetain();
                          uint64_t v235 = 0;
                          uint64_t v484 = v234;
                          unint64_t p_ivar_base_size = 0x101636000;
                          while (1)
                          {
                            uint64_t v565 = v235 + 1;
                            if (__OFADD__(v235, 1)) {
                              goto LABEL_215;
                            }
                            uint64_t v236 = *(uint64_t **)(v0 + 1120);
                            uint64_t v545 = v235;
                            sub_10025C504(v522 + *(void *)(v504 + 72) * v235, *(void *)(v0 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                            uint64_t v237 = *v236;
                            unint64_t v238 = *(void *)(v502 + 8);
                            SecKeyRef v239 = sub_100435E70(v237, v238);
                            uint64_t v240 = **(void **)(v0 + 1040);
                            unint64_t v241 = *(void *)(v494 + 8);
                            uint64_t v242 = PrivateKey.publicKey.getter(v237, v238);
                            unint64_t v244 = v243;
                            sub_1000361E0(v242, v243);
                            uint64_t v245 = sub_100A94760(v242, v244);
                            unint64_t v247 = v246;
                            sub_10001CFB8(v242, v244);
                            sub_100434E0C(v245, v247, (uint64_t *)&v600);
                            uint64_t v248 = *(void *)(v0 + 1024);
                            sub_10001CFB8(v242, v244);
                            uint64_t v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v600;
                            unint64_t v249 = v601;
                            unint64_t v251 = (void *)v0;
                            unint64_t v252 = v239;
                            sub_1000361E0(v240, v241);
                            sub_1000361E0((uint64_t)v250, v249);
                            BeaconPayloadv1.init(using:data:advertisement:)(v252, v240, v241, (uint64_t)v250, v249, v248);
                            uint64_t v472 = *(void *)(v0 + 1528);
                            uint64_t v476 = *(void *)(v0 + 1560);
                            unint64_t v478 = v249;
                            uint64_t v481 = *(void *)(v0 + 1280);
                            uint64_t v253 = *(void *)(v0 + 1264);
                            uint64_t v254 = *(void *)(v0 + 1240);
                            v468 = v252;
                            uint64_t v469 = *(void *)(v0 + 1232);
                            uint64_t v255 = *(void *)(v0 + 1184);
                            uint64_t v515 = (uint64_t)v250;
                            uint64_t v256 = *(void *)(v0 + 1168);
                            uint64_t v257 = *(void *)(v0 + 1152);
                            uint64_t v258 = *(unsigned char **)(v0 + 1144);
                            uint64_t v259 = *(void *)(v0 + 1024);
                            uint64_t v260 = *(void *)(v0 + 1008);
                            v574 = *v499;
                            (*v499)();
                            (*v493)(v254, 1, 1, v255);
                            LODWORD(v255) = *(unsigned __int8 *)(v259 + v489[10]);
                            (*v492)(v256, v259 + v489[5], v257);
                            double v261 = *(double *)(v259 + v489[7]);
                            double v262 = *(double *)(v259 + v489[8]);
                            double v263 = *(double *)(v259 + v489[9]);
                            (*v491)(v260, 1, 1, v257);
                            sub_10001D074(v254, v469, &qword_101657910);
                            sub_100CC2A6C(v255, v256, 15, v260, v469, 256, v258, v261, v262, v263);
                            sub_10001DAB4(v254, &qword_101657910);
                            sub_10025C56C(v259, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                            uint64_t v264 = v253 + *(int *)(v500 + 48);
                            uint64_t v265 = *v490;
                            ((void (*)(uint64_t, uint64_t, uint64_t))*v490)(v253, v476, v472);
                            sub_10025C5CC((uint64_t)v258, v264, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v488 + 56))(v253, 0, 1, v481);
                            sub_10001CFB8(v515, v478);
                            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v488 + 48))(v253, 1, v481) == 1)
                            {
                              uint64_t v266 = v251[158];

                              sub_10001DAB4(v266, &qword_10163F720);
                              uint64_t v0 = (uint64_t)v251;
                              if (qword_101636908 != -1) {
                                swift_once();
                              }
                              uint64_t v267 = v251[173];
                              uint64_t v268 = v251[169];
                              uint64_t v269 = v251[140];
                              uint64_t v270 = v251[137];
                              uint64_t v271 = sub_100010324(v268, (uint64_t)qword_10170D9D8);
                              (*v526)(v267, v271, v268);
                              sub_10025C504(v269, v270, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                              uint64_t v272 = swift_allocObject();
                              sub_10025C5CC(v270, v272 + v496, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                              uint64_t v273 = swift_allocObject();
                              *(void *)(v273 + 16) = sub_10025B340;
                              *(void *)(v273 + 24) = v272;
                              v575 = Logger.logObject.getter();
                              os_log_type_t v274 = static os_log_type_t.error.getter();
                              uint64_t v275 = swift_allocObject();
                              *(unsigned char *)(v275 + 16) = 112;
                              uint64_t v162 = swift_allocObject();
                              *(unsigned char *)(v162 + 16) = 8;
                              uint64_t v276 = swift_allocObject();
                              *(void *)(v276 + 16) = 1752392040;
                              uint64_t v277 = swift_allocObject();
                              *(void *)(v277 + 16) = sub_100060540;
                              *(void *)(v277 + 24) = v276;
                              uint64_t v278 = swift_allocObject();
                              *(unsigned char *)(v278 + 16) = 33;
                              uint64_t v279 = swift_allocObject();
                              *(unsigned char *)(v279 + 16) = 8;
                              uint64_t v280 = swift_allocObject();
                              *(void *)(v280 + 16) = sub_1000604E8;
                              *(void *)(v280 + 24) = v273;
                              uint64_t v281 = swift_allocObject();
                              *(void *)(v281 + 16) = sub_10005F790;
                              *(void *)(v281 + 24) = v280;
                              sub_10000588C(&qword_101639B60);
                              uint64_t inited = swift_initStackObject();
                              sub_1004B810C(inited, 6);
                              *Swift::String v283 = sub_10005F778;
                              v283[1] = v275;
                              v283[2] = sub_100065514;
                              v283[3] = v162;
                              v283[4] = sub_10006000C;
                              v283[5] = v277;
                              v283[6] = sub_100065514;
                              v283[7] = v278;
                              v283[8] = sub_100065514;
                              v283[9] = v279;
                              v283[10] = sub_10005F7D0;
                              v283[11] = v281;
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_bridgeObjectRelease();
                              if (os_log_type_enabled(v575, v274))
                              {
                                Swift::String v284 = (uint8_t *)swift_slowAlloc();
                                uint64_t v285 = swift_slowAlloc();
                                uint64_t v598 = 0;
                                uint64_t v599 = v285;
                                *(_WORD *)Swift::String v284 = 515;
                                v597 = v284 + 2;
                                sub_1008FA6E0(&v597, (uint64_t)&v598, (uint64_t)&v599, 112);
                                swift_release();
                                v600 = sub_100065514;
                                unint64_t v601 = v162;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                swift_release();
                                v600 = (uint64_t (*)())sub_10006000C;
                                unint64_t v601 = v277;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                swift_release();
                                v600 = sub_100065514;
                                unint64_t v601 = v278;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                swift_release();
                                v600 = sub_100065514;
                                unint64_t v601 = v279;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                swift_release();
                                v600 = (uint64_t (*)())sub_10005F7D0;
                                unint64_t v601 = v281;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                uint64_t v286 = *(void *)(v0 + 1384);
                                uint64_t v287 = *(uint8_t **)(v0 + 1352);
                                swift_release();
                                _os_log_impl((void *)&_mh_execute_header, v575, v274, "Could not create search result for beacon: %{private,mask.hash}s.", v284, 0x16u);
                                swift_arrayDestroy();
                                swift_slowDealloc();
                                sub_1008F9FA0();

                                (*v511)(v286, v287);
                              }
                              else
                              {
                                uint64_t v288 = *(void *)(v0 + 1384);
                                os_log_type_t v289 = *(uint8_t **)(v0 + 1352);
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();

                                (*v511)(v288, v289);
                              }
                              uint64_t v174 = v530;
                              unint64_t v151 = v590;
                              uint64_t v178 = v594;
                              unint64_t p_ivar_base_size = 0x101636000;
                            }
                            else
                            {
                              uint64_t v290 = v251[206];
                              uint64_t v291 = v251[191];
                              uint64_t v292 = v251[165];
                              uint64_t v293 = v251[164];
                              uint64_t v294 = *(int *)(v500 + 48);
                              uint64_t v295 = v292 + v294;
                              uint64_t v296 = v251[158] + v294;
                              v265(v292);
                              sub_10025C5CC(v296, v295, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              uint64_t v297 = v293 + *(int *)(v500 + 48);
                              ((void (*)(uint64_t, uint64_t, uint64_t))v574)(v293, v292, v291);
                              uint64_t v516 = v295;
                              sub_10025C504(v295, v297, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              swift_beginAccess();
                              unint64_t v298 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000F790C(v293, *(void *)(v290 + 16));
                              uint64_t v299 = v251[191];
                              uint64_t v300 = v251[166];
                              uint64_t v301 = v251[165];
                              uint64_t v302 = v251[164];
                              if (v298)
                              {
                                uint64_t v303 = v251[143];
                                v600 = (uint64_t (*)())v298;
                                swift_endAccess();
                                sub_10025C56C(v297, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                uint64_t v304 = *v487;
                                (*v487)(v302, v299);
                                uint64_t v305 = (unsigned __int8 *)(v300 + *(int *)(v500 + 48));
                                ((void (*)(uint64_t, uint64_t, uint64_t))v574)(v300, v301, v299);
                                sub_10025C504(v516, (uint64_t)v305, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                sub_1000D1E3C(v303, v305);
                                sub_10025C56C(v303, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                v304(v300, v299);
                                uint64_t v306 = v300 + *(int *)(v500 + 48);
                                ((void (*)(uint64_t, uint64_t, uint64_t))v574)(v300, v301, v299);
                                sub_10025C504(v516, v306, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                unint64_t v307 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v600;
                                swift_beginAccess();
                                sub_10015DF64((uint64_t)v307, v300);
                                swift_endAccess();
                                sub_10025C56C(v306, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              }
                              else
                              {
                                uint64_t v308 = v251[163];
                                swift_endAccess();
                                sub_10025C56C(v297, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                v470 = *v487;
                                (*v487)(v302, v299);
                                uint64_t v309 = v300 + *(int *)(v500 + 48);
                                uint64_t v473 = v309;
                                ((void (*)(uint64_t, uint64_t, uint64_t))v574)(v300, v301, v299);
                                sub_10025C504(v516, v309, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                sub_10000588C(&qword_10163AA18);
                                uint64_t v310 = swift_allocObject();
                                uint64_t v311 = sub_1004B7688(v310, 1);
                                uint64_t v466 = v300;
                                uint64_t v313 = v312;
                                uint64_t v314 = v308 + *(int *)(v500 + 48);
                                ((void (*)(uint64_t, uint64_t, uint64_t))v574)(v308, v301, v299);
                                sub_10025C504(v516, v314, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                sub_10025C5CC(v314, v313, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                uint64_t v315 = SharingCircleWildAdvertisementKey.init(key:)(v311);
                                v470(v308, v299);
                                uint64_t v316 = sub_101158D6C(v315);
                                swift_bridgeObjectRelease();
                                swift_beginAccess();
                                sub_10015DF64(v316, v466);
                                swift_endAccess();
                                sub_10025C56C(v473, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              }
                              uint64_t v482 = *(void *)(v596 + 1648);
                              uint64_t v317 = *(void *)(v596 + 1528);
                              uint64_t v318 = *(void *)(v596 + 1392);
                              uint64_t v319 = *(void *)(v596 + 1352);
                              uint64_t v320 = *(void *)(v596 + 1328);
                              uint64_t v321 = *(void *)(v596 + 1320);
                              uint64_t v322 = *(void *)(v596 + 1120);
                              uint64_t v323 = *(void *)(v596 + 1096);
                              uint64_t v324 = sub_100207468();
                              (*v526)(v318, v324, v319);
                              sub_10025C504(v322, v323, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                              uint64_t v325 = swift_allocObject();
                              sub_10025C5CC(v323, v325 + v496, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                              uint64_t v479 = swift_allocObject();
                              *(void *)(v479 + 16) = sub_10025B340;
                              *(void *)(v479 + 24) = v325;
                              uint64_t v326 = v320 + *(int *)(v500 + 48);
                              uint64_t v327 = v317;
                              ((void (*)(uint64_t, uint64_t, uint64_t))v574)(v320, v321, v317);
                              sub_10025C504(v516, v326, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              uint64_t v328 = *(unsigned __int8 *)(v488 + 80);
                              uint64_t v329 = (v328 + 16) & ~v328;
                              uint64_t v330 = swift_allocObject();
                              sub_10001D608(v320, v330 + v329, &qword_10163F728);
                              uint64_t v474 = swift_allocObject();
                              *(void *)(v474 + 16) = sub_10025B4F4;
                              *(void *)(v474 + 24) = v330;
                              uint64_t v331 = v320 + *(int *)(v500 + 48);
                              ((void (*)(uint64_t, uint64_t, uint64_t))v574)(v320, v321, v327);
                              sub_10025C504(v516, v331, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              uint64_t v332 = swift_allocObject();
                              sub_10001D608(v320, v332 + v329, &qword_10163F728);
                              uint64_t v464 = swift_allocObject();
                              *(void *)(v464 + 16) = sub_10025B504;
                              *(void *)(v464 + 24) = v332;
                              uint64_t v333 = v320 + *(int *)(v500 + 48);
                              ((void (*)(uint64_t, uint64_t, uint64_t))v574)(v320, v321, v327);
                              sub_10025C504(v516, v333, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              buf = (uint8_t *)swift_allocObject();
                              *((void *)buf + 2) = v482;
                              sub_10001D608(v320, (uint64_t)&buf[(v328 + 24) & ~v328], &qword_10163F728);
                              swift_retain();
                              os_log_t log = Logger.logObject.getter();
                              os_log_type_t v460 = static os_log_type_t.info.getter();
                              uint64_t v576 = swift_allocObject();
                              *(unsigned char *)(v576 + 16) = 112;
                              uint64_t v334 = swift_allocObject();
                              *(unsigned char *)(v334 + 16) = 8;
                              uint64_t v335 = swift_allocObject();
                              *(void *)(v335 + 16) = 1752392040;
                              uint64_t v517 = swift_allocObject();
                              *(void *)(v517 + 16) = sub_10006550C;
                              *(void *)(v517 + 24) = v335;
                              uint64_t v336 = swift_allocObject();
                              *(unsigned char *)(v336 + 16) = 33;
                              unint64_t v337 = v336;
                              uint64_t v457 = swift_allocObject();
                              *(unsigned char *)(v457 + 16) = 8;
                              uint64_t v338 = swift_allocObject();
                              *(void *)(v338 + 16) = sub_1000654F4;
                              *(void *)(v338 + 24) = v479;
                              uint64_t v339 = swift_allocObject();
                              *(void *)(v339 + 16) = sub_1000654EC;
                              *(void *)(v339 + 24) = v338;
                              uint64_t v340 = v339;
                              unint64_t v480 = v339;
                              uint64_t v341 = swift_allocObject();
                              *(unsigned char *)(v341 + 16) = 34;
                              uint64_t v342 = v341;
                              unint64_t v477 = v341;
                              uint64_t v471 = swift_allocObject();
                              *(unsigned char *)(v471 + 16) = 8;
                              uint64_t v343 = swift_allocObject();
                              *(void *)(v343 + 16) = sub_10025B4F8;
                              *(void *)(v343 + 24) = v474;
                              uint64_t v344 = swift_allocObject();
                              *(void *)(v344 + 16) = sub_1000654EC;
                              *(void *)(v344 + 24) = v343;
                              uint64_t v345 = v344;
                              unint64_t v475 = v344;
                              uint64_t v346 = swift_allocObject();
                              *(unsigned char *)(v346 + 16) = 34;
                              uint64_t v347 = v346;
                              uint64_t v467 = swift_allocObject();
                              *(unsigned char *)(v467 + 16) = 8;
                              uint64_t v348 = swift_allocObject();
                              *(void *)(v348 + 16) = sub_10025B508;
                              *(void *)(v348 + 24) = v464;
                              uint64_t v349 = swift_allocObject();
                              *(void *)(v349 + 16) = sub_1000654EC;
                              *(void *)(v349 + 24) = v348;
                              uint64_t v350 = v349;
                              uint64_t v463 = swift_allocObject();
                              *(unsigned char *)(v463 + 16) = 0;
                              uint64_t v465 = swift_allocObject();
                              *(unsigned char *)(v465 + 16) = 8;
                              uint64_t v351 = swift_allocObject();
                              *(void *)(v351 + 16) = sub_10025B514;
                              *(void *)(v351 + 24) = buf;
                              unint64_t v483 = v334;
                              uint64_t v352 = swift_allocObject();
                              *(void *)(v352 + 16) = sub_100060004;
                              *(void *)(v352 + 24) = v351;
                              sub_10000588C(&qword_101639B60);
                              uint64_t v353 = swift_allocObject();
                              sub_1004B810C(v353, 15);
                              *unint64_t v354 = sub_100065514;
                              v354[1] = v576;
                              v354[2] = sub_100065514;
                              v354[3] = v334;
                              v354[4] = sub_100065504;
                              v354[5] = v517;
                              v354[6] = sub_100065514;
                              v354[7] = v337;
                              v354[8] = sub_100065514;
                              v354[9] = v457;
                              v354[10] = sub_100065500;
                              v354[11] = v340;
                              v354[12] = sub_100065514;
                              v354[13] = v342;
                              v354[14] = sub_100065514;
                              v354[15] = v471;
                              v354[16] = sub_100065500;
                              v354[17] = v345;
                              v354[18] = sub_100065514;
                              v354[19] = v347;
                              unint64_t v355 = v347;
                              v354[20] = sub_100065514;
                              v354[21] = v467;
                              v354[22] = sub_100065500;
                              v354[23] = v350;
                              unint64_t v356 = v350;
                              uint64_t v162 = v463;
                              v354[24] = sub_100065514;
                              v354[25] = v463;
                              v354[26] = sub_100065514;
                              v354[27] = v465;
                              v354[28] = sub_10006000C;
                              v354[29] = v352;
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              unint64_t v456 = v355;
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_bridgeObjectRelease();
                              if (os_log_type_enabled(log, v460))
                              {
                                uint64_t v357 = v352;
                                unint64_t v358 = (uint8_t *)sub_1008F9FAC();
                                uint64_t v359 = swift_slowAlloc();
                                uint64_t v598 = 0;
                                uint64_t v599 = v359;
                                *(_WORD *)unint64_t v358 = 1283;
                                v597 = v358 + 2;
                                v600 = sub_100065514;
                                unint64_t v601 = v576;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                unint64_t v151 = v590;
                                swift_release();
                                v600 = sub_100065514;
                                unint64_t v601 = v483;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                uint64_t v178 = v594;
                                uint64_t v0 = v596;
                                swift_release();
                                v600 = (uint64_t (*)())sub_100065504;
                                unint64_t v601 = v517;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                unint64_t v577 = v357;
                                swift_release();
                                v600 = sub_100065514;
                                unint64_t v601 = v337;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                swift_release();
                                v600 = sub_100065514;
                                unint64_t v601 = v457;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                uint64_t v174 = v530;
                                swift_release();
                                v600 = sub_100065500;
                                unint64_t v601 = v480;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                swift_release();
                                v600 = sub_100065514;
                                unint64_t v601 = v477;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                swift_release();
                                v600 = sub_100065514;
                                unint64_t v601 = v471;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                swift_release();
                                v600 = sub_100065500;
                                unint64_t v601 = v475;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                swift_release();
                                v600 = sub_100065514;
                                unint64_t v601 = v456;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                swift_release();
                                v600 = sub_100065514;
                                unint64_t v601 = v467;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                unint64_t p_ivar_base_size = 0x101636000;
                                swift_release();
                                v600 = sub_100065500;
                                unint64_t v601 = v356;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                swift_release();
                                v600 = sub_100065514;
                                unint64_t v601 = v463;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                swift_release();
                                v600 = sub_100065514;
                                unint64_t v601 = v465;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                swift_release();
                                v600 = (uint64_t (*)())sub_10006000C;
                                unint64_t v601 = v577;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v600, (uint64_t)&v597, (uint64_t)&v598, (uint64_t)&v599);
                                uint64_t v360 = *(void *)(v596 + 1392);
                                uint64_t v361 = *(uint8_t **)(v596 + 1352);
                                uint64_t v518 = *(void *)(v596 + 1320);
                                swift_release();
                                uint64_t v162 = (uint64_t)log;
                                _os_log_impl((void *)&_mh_execute_header, log, v460, "Return search result for beacon (own beacon): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", v358, 0x34u);
                                swift_arrayDestroy();
                                swift_slowDealloc();
                                sub_1008F9FA0();

                                (*v511)(v360, v361);
                                sub_10001DAB4(v518, &qword_10163F728);
                              }
                              else
                              {
                                uint64_t v0 = v596;
                                bufa = *(uint8_t **)(v596 + 1352);
                                uint64_t v461 = *(void *)(v596 + 1392);
                                uint64_t v362 = *(void *)(v596 + 1320);

                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                (*v511)(v461, bufa);
                                sub_10001DAB4(v362, &qword_10163F728);
                                unint64_t p_ivar_base_size = 0x101636000;
                                uint64_t v174 = v530;
                                unint64_t v151 = v590;
                                uint64_t v178 = v594;
                              }
                            }
                            sub_10025C56C(*(void *)(v0 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                            uint64_t v235 = v545 + 1;
                            if (v565 == v484) {
                              goto LABEL_127;
                            }
                          }
                        }
                        swift_bridgeObjectRetain();
                        unint64_t p_ivar_base_size = 0x101636000;
                        uint64_t v174 = v530;
LABEL_127:
                        uint64_t v363 = *(void *)(v0 + 1120);
                        sub_10001CFB8(v178, v151);
                        swift_bridgeObjectRelease_n();
                        sub_10025C56C(v363, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        unint64_t v169 = 0;
                        uint64_t v168 = v507;
                        goto LABEL_104;
                      }
                      sub_1000361E0(v594, v590);
                      sub_1000361E0(v594, v590);
                      switch(p_ivar_base_size >> 62)
                      {
                        case 1uLL:
                          if (v162 >> 32 < (int)v162) {
                            goto LABEL_218;
                          }
                          sub_1000361E0(v594, v590);
                          sub_1000361E0(v594, v590);
                          sub_1000361E0(v594, v590);
                          sub_1000361E0(v162, p_ivar_base_size);
                          sub_1000361E0(v594, v590);
                          char v217 = sub_100BFBE64((int)v162, v162 >> 32, p_ivar_base_size & 0x3FFFFFFFFFFFFFFFLL, v594, v590);
                          sub_10001CFB8(v594, v590);
                          uint64_t v0 = v596;
                          sub_10001CFB8(v162, p_ivar_base_size);
                          break;
                        case 2uLL:
                          uint64_t v218 = *(void *)(v162 + 16);
                          uint64_t v219 = *(void *)(v162 + 24);
                          sub_1000361E0(v594, v590);
                          sub_1000361E0(v594, v590);
                          sub_1000361E0(v594, v590);
                          sub_1000361E0(v594, v590);
                          swift_retain();
                          swift_retain();
                          char v217 = sub_100BFBE64(v218, v219, p_ivar_base_size & 0x3FFFFFFFFFFFFFFFLL, v594, v590);
                          sub_10001CFB8(v594, v590);
                          uint64_t v0 = v596;
                          swift_release();
                          swift_release();
                          uint64_t v178 = v594;
                          break;
                        case 3uLL:
                          sub_1000361E0(v594, v590);
                          sub_1000361E0(v594, v590);
                          sub_1000361E0(v594, v590);
                          sub_1000361E0(v594, v590);
                          unint64_t v215 = v486 & 0xFF00000000000000;
                          uint64_t v216 = 0;
                          v486 &= 0xFF00000000000000;
                          goto LABEL_94;
                        default:
                          sub_1000361E0(v594, v590);
                          sub_1000361E0(v594, v590);
                          sub_1000361E0(v594, v590);
                          sub_1000361E0(v594, v590);
                          unint64_t v215 = v485 & 0xFF00000000000000 | p_ivar_base_size & 0xFFFFFFFFFFFFFFLL;
                          uint64_t v216 = v162;
                          unint64_t v485 = v215;
LABEL_94:
                          char v217 = sub_100BFBD8C(v216, v215, v594, v590);
                          sub_10001CFB8(v594, v590);
                          uint64_t v0 = v596;
                          break;
                      }
                      sub_10001CFB8(v162, p_ivar_base_size);
                      sub_10001CFB8(v178, v590);
                      sub_10001CFB8(v162, p_ivar_base_size);
                      sub_10001CFB8(v178, v590);
                      sub_10001CFB8(v178, v590);
                      sub_10001CFB8(v178, v590);
                      sub_10001CFB8(v178, v590);
                      if (v217) {
                        goto LABEL_108;
                      }
                    }
                    else
                    {
LABEL_40:
                      sub_10001CFB8(v162, p_ivar_base_size);
                      sub_10001CFB8(v162, p_ivar_base_size);
                      uint64_t v0 = v596;
                    }
                    sub_10025C56C(*(void *)(v0 + 1104), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                    unint64_t v169 = 0;
                    v152 += v544;
                    if (--v149) {
                      continue;
                    }
                    swift_bridgeObjectRelease();
                    unint64_t v169 = 0;
                    unint64_t p_ivar_base_size = 0x101636000;
                    break;
                }
LABEL_98:
                if (*(void *)(p_ivar_base_size + 2312) != -1) {
                  swift_once();
                }
                uint64_t v220 = *(void *)(v0 + 1376);
                uint64_t v221 = *(void *)(v0 + 1352);
                uint64_t v222 = sub_100010324(v221, (uint64_t)qword_10170D9D8);
                (*v526)(v220, v222, v221);
                sub_1000361E0(v178, v151);
                swift_bridgeObjectRetain();
                sub_1000361E0(v178, v151);
                swift_bridgeObjectRetain();
                uint64_t v162 = Logger.logObject.getter();
                os_log_type_t v223 = static os_log_type_t.error.getter();
                BOOL v224 = os_log_type_enabled((os_log_t)v162, v223);
                uint64_t v225 = *(void *)(v0 + 1376);
                uint64_t v226 = *(uint8_t **)(v0 + 1352);
                if (v224)
                {
                  unint64_t v227 = v151;
                  unint64_t v151 = swift_slowAlloc();
                  v600 = (uint64_t (*)())swift_slowAlloc();
                  *(_DWORD *)unint64_t v151 = 141558275;
                  *(void *)(v151 + 4) = 1752392040;
                  *(_WORD *)(v151 + 12) = 2081;
                  *(void *)(v0 + 728) = v178;
                  *(void *)(v0 + 736) = v227;
                  sub_1001D780C();
                  uint64_t v228 = RawRepresentable<>.hexString.getter();
                  *(void *)(v151 + 14) = sub_1008FA0F0(v228, v229, (uint64_t *)&v600);
                  swift_bridgeObjectRelease();
                  sub_10001CFB8(v178, v227);
                  swift_bridgeObjectRelease();
                  sub_10001CFB8(v178, v227);
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v162, v223, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v151, 0x16u);
                  swift_arrayDestroy();
                  unint64_t p_ivar_base_size = 0x101636000;
                  swift_slowDealloc();
                  swift_slowDealloc();

                  sub_10001CFB8(v178, v227);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  sub_10001CFB8(v178, v151);
                  swift_bridgeObjectRelease();
                  sub_10001CFB8(v178, v151);
                  swift_bridgeObjectRelease();
                  sub_10001CFB8(v178, v151);
                  swift_bridgeObjectRelease();
                }
                (*v511)(v225, v226);
                uint64_t v168 = v507;
                uint64_t v174 = v530;
LABEL_104:
                unint64_t v175 = v535 + 1;
                if (v535 + 1 == v532) {
                  goto LABEL_155;
                }
                goto LABEL_33;
              }
              if (!v203)
              {
                uint64_t v152 = BYTE6(v202);
                goto LABEL_196;
              }
              if (v203 == 1)
              {
                if (!__OFSUB__(HIDWORD(v200), v200))
                {
                  uint64_t v152 = HIDWORD(v200) - (int)v200;
LABEL_196:
                  sub_10013019C();
                  uint64_t v439 = swift_allocError();
                  *(void *)uint64_t v449 = 28;
                  *(void *)(v449 + 8) = v152;
                  *(unsigned char *)(v449 + 16) = 0;
                  swift_willThrow();
                  goto LABEL_197;
                }
                __break(1u);
              }
              else
              {
                uint64_t v448 = *(void *)(v200 + 16);
                uint64_t v447 = *(void *)(v200 + 24);
                uint64_t v152 = v447 - v448;
                if (!__OFSUB__(v447, v448)) {
                  goto LABEL_196;
                }
              }
              __break(1u);
LABEL_222:
              unint64_t v452 = *(void *)(v152 + 1824);
              uint64_t v453 = *(void *)(v152 + 1816);
              uint64_t v454 = *(void *)(v152 + 1360);
              uint64_t v455 = *(void *)(v152 + 1352);
              uint64_t v595 = *(void *)(v152 + 1344);
              uint64_t v585 = *(void *)(v152 + 1408);
              uint64_t v591 = *(void *)(v152 + 1256);
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)v151, v520, "Return search result for beacon (wild): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", v149, 0x34u);
              swift_arrayDestroy();
              swift_slowDealloc();
              sub_1008F9FA0();

              swift_release();
              sub_10001CFB8(v453, v452);
              (*(void (**)(uint64_t, uint64_t))(v454 + 8))(v585, v455);
              sub_10001DAB4(v591, &qword_101657910);
              sub_10001DAB4(v595, &qword_10163F728);
              unint64_t v592 = 0;
              break;
            case 2uLL:
              uint64_t v206 = *(void *)(v200 + 16);
              uint64_t v205 = *(void *)(v200 + 24);
              BOOL v198 = __OFSUB__(v205, v206);
              uint64_t v204 = v205 - v206;
              if (!v198) {
                goto LABEL_75;
              }
              goto LABEL_210;
            case 3uLL:
              uint64_t v152 = 0;
              goto LABEL_196;
            default:
              uint64_t v204 = BYTE6(v202);
              goto LABEL_75;
          }
          goto LABEL_27;
        }
LABEL_183:
        uint64_t v426 = v162;
        unint64_t v427 = p_ivar_base_size;
LABEL_181:
        sub_10001CFB8(v426, v427);
        return _assertionFailure(_:_:file:line:flags:)();
      case 2uLL:
        uint64_t v197 = *(void *)(v162 + 16);
        uint64_t v196 = *(void *)(v162 + 24);
        BOOL v198 = __OFSUB__(v196, v197);
        uint64_t v195 = v196 - v197;
        if (!v198) {
          goto LABEL_68;
        }
        goto LABEL_207;
      case 3uLL:
        goto LABEL_183;
      default:
        uint64_t v195 = BYTE6(p_ivar_base_size);
        goto LABEL_68;
    }
  }
}

uint64_t sub_10023DD18(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1000);
  *(void *)(*(void *)v1 + 1936) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10023DE30, v2, 0);
}

uint64_t sub_10023DE30()
{
  uint64_t v1 = *(int *)(v0 + 2024);
  unint64_t v2 = *(void *)(v0 + 1752);
  uint64_t v3 = *(void *)(v0 + 1744);
  uint64_t v4 = *(void *)(v0 + 1224);
  *(void *)(v0 + 1944) = *(void *)(*(void *)(v0 + 1936) + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_keyStore);
  swift_retain();
  swift_release();
  uint64_t v5 = PrivateKey.publicKey.getter(v3, v2);
  unint64_t v7 = v6;
  uint64_t v8 = PublicKey.advertisement.getter(v5, v6);
  uint64_t v10 = v9;
  *(void *)(v0 + 1952) = v8;
  *(void *)(v0 + 1960) = v9;
  sub_10001CFB8(v5, v7);
  sub_1006D8A30();
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 1968) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10023DF64;
  uint64_t v12 = *(void *)(v0 + 1552);
  uint64_t v13 = *(void *)(v0 + 1224);
  return sub_1006442A8(v12, v13, v4 + v1, v8, v10);
}

uint64_t sub_10023DF64()
{
  unint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1976) = v0;
  swift_task_dealloc();
  unint64_t v3 = v2[245];
  uint64_t v4 = v2[244];
  uint64_t v5 = v2[194];
  uint64_t v6 = v2[192];
  uint64_t v7 = v2[191];
  uint64_t v8 = v2[125];
  uint64_t v9 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  if (v0)
  {
    sub_10001CFB8(v4, v3);
    swift_release();
    swift_errorRelease();
    (*v9)(v5, v7);
    uint64_t v10 = sub_10024D358;
  }
  else
  {
    (*v9)(v5, v7);
    sub_10001CFB8(v4, v3);
    swift_release();
    uint64_t v10 = sub_10023E180;
  }
  return _swift_task_switch(v10, v8, 0);
}

uint64_t sub_10023E180()
{
  uint64_t v486 = v0;
  uint64_t v1 = *(uint8_t **)(v0 + 1976);
  *(void *)(v0 + 1984) = v1;
  unint64_t v2 = (void *)(*(void *)(v0 + 1224) + *(int *)(v0 + 2024));
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_10001CD44(v2, v3);
  int v5 = sub_100EB7B8C(v3, v4);
  if (v5)
  {
    if (v5 == 1)
    {
      sub_10001D010(*(void *)(v0 + 1224) + *(int *)(v0 + 2024), v0 + 224);
    }
    else
    {
      *(void *)(v0 + 256) = 0;
      *(_OWORD *)(v0 + 224) = 0u;
      *(_OWORD *)(v0 + 240) = 0u;
    }
  }
  else
  {
    uint64_t v6 = (void *)(*(void *)(v0 + 1224) + *(int *)(v0 + 2024));
    sub_10001CD44(v6, v6[3]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v7 = *(void *)(v0 + 944);
    *(void *)(v0 + 328) = &type metadata for PrimaryWildIndex;
    *(void *)(v0 + 336) = sub_1001A1694();
    *(void *)(v0 + 304) = v7;
    sub_10001D608(v0 + 304, v0 + 224, &qword_10163F740);
  }
  sub_10001D074(v0 + 224, v0 + 384, &qword_10163F740);
  if (*(void *)(v0 + 408))
  {
    sub_10001CEB0((long long *)(v0 + 384), v0 + 424);
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 1992) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100242F40;
    uint64_t v9 = *(void *)(v0 + 1568);
    return sub_100E5EB88(v0 + 264, v9);
  }
  v462 = v1;
  uint64_t v11 = *(void *)(v0 + 1224);
  sub_10001DAB4(v0 + 224, &qword_10163F740);
  sub_10025C56C(v11, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_10001DAB4(v0 + 384, &qword_10163F740);
  uint64_t v12 = *(void *)(v0 + 1648);
  uint64_t v13 = *(void *)(v0 + 1568);
  swift_beginAccess();
  uint64_t v14 = sub_1000F790C(v13, *(void *)(v12 + 16));
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1720);
  uint64_t v16 = *(void *)(v0 + 1648);
  uint64_t v17 = *(void *)(v0 + 1568);
  uint64_t v471 = *(void *)(v0 + 1536);
  uint64_t v476 = *(void *)(v0 + 1560);
  uint64_t v18 = *(void *)(v0 + 1528);
  uint64_t v19 = *(void *)(v0 + 1344);
  uint64_t v20 = *(void *)(v0 + 1328);
  uint64_t v464 = v19 + *(int *)(v0 + 2020);
  uint64_t v457 = *(void *)(v0 + 1280);
  if (v14)
  {
    uint64_t v449 = *(void *)(v0 + 1568);
    uint64_t v21 = *(void *)(v0 + 1144);
    *(void *)(v0 + 896) = v14;
    swift_endAccess();
    uint64_t v22 = (unsigned __int8 *)(v20 + *(int *)(v457 + 48));
    v15(v20, v19, v18);
    sub_10025C504(v464, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_100DCCAA4(v21, v22);
    sub_10025C56C(v21, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v471 + 8);
    v23(v20, v18);
    v15(v476, v449, v18);
    uint64_t v24 = *(void *)(v0 + 896);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v484 = *(uint64_t (**)())(v16 + 16);
    *(void *)(v16 + 16) = 0x8000000000000000;
    sub_10016D370(v24, v476, isUniquelyReferenced_nonNull_native);
    *(void *)(v16 + 16) = v484;
    swift_bridgeObjectRelease();
    v23(v476, v18);
  }
  else
  {
    swift_endAccess();
    uint64_t v26 = v17;
    uint64_t v27 = v18;
    uint64_t v28 = v18;
    uint64_t v29 = v15;
    v15(v476, v26, v28);
    sub_10000588C(&qword_10163AA18);
    uint64_t v30 = swift_allocObject();
    uint64_t v31 = sub_1004B7688(v30, 1);
    uint64_t v33 = v32;
    uint64_t v34 = v20 + *(int *)(v457 + 48);
    v29(v20, v19, v27);
    sub_10025C504(v464, v34, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_10025C5CC(v34, v33, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v35 = SharingCircleWildAdvertisementKey.init(key:)(v31);
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v471 + 8);
    v36(v20, v27);
    uint64_t v37 = sub_101158D6C(v35);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v484 = *(uint64_t (**)())(v16 + 16);
    *(void *)(v16 + 16) = 0x8000000000000000;
    sub_10016D370(v37, v476, v38);
    *(void *)(v16 + 16) = v484;
    swift_bridgeObjectRelease();
    v36(v476, v27);
  }
  swift_endAccess();
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v39 = *(int *)(v0 + 2020);
  unint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1720);
  uint64_t v442 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 1704);
  uint64_t v458 = *(void *)(v0 + 1648);
  uint64_t v41 = *(void *)(v0 + 1568);
  uint64_t v42 = *(void *)(v0 + 1560);
  uint64_t v43 = (void *)v0;
  uint64_t v480 = v0;
  uint64_t v44 = *(void *)(v0 + 1536);
  uint64_t v45 = *(void *)(v0 + 1528);
  uint64_t v46 = *(void *)(v0 + 1408);
  uint64_t v47 = v43[170];
  uint64_t v48 = v43[169];
  uint64_t v49 = v43[166];
  unint64_t v465 = v43[168];
  uint64_t v472 = v465 + v39;
  uint64_t v445 = v43[160];
  uint64_t v450 = v43[161];
  uint64_t v50 = sub_100010324(v48, (uint64_t)qword_10170D9D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v46, v50, v48);
  v40(v42, v41, v45);
  unint64_t v51 = (*(unsigned __int8 *)(v44 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  uint64_t v52 = swift_allocObject();
  uint64_t v434 = v45;
  v442(v52 + v51, v42, v45);
  uint64_t v453 = swift_allocObject();
  *(void *)(v453 + 16) = sub_10025B7C4;
  *(void *)(v453 + 24) = v52;
  uint64_t v53 = v49 + *(int *)(v445 + 48);
  v40(v49, v465, v45);
  sub_10025C504(v472, v53, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v54 = *(unsigned __int8 *)(v450 + 80);
  uint64_t v55 = (v54 + 16) & ~v54;
  uint64_t v56 = swift_allocObject();
  sub_10001D608(v49, v56 + v55, &qword_10163F728);
  uint64_t v451 = swift_allocObject();
  *(void *)(v451 + 16) = sub_10025B4F4;
  *(void *)(v451 + 24) = v56;
  uint64_t v57 = v49 + *(int *)(v445 + 48);
  v40(v49, v465, v434);
  sub_10025C504(v472, v57, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v58 = swift_allocObject();
  sub_10001D608(v49, v58 + v55, &qword_10163F728);
  uint64_t v437 = swift_allocObject();
  *(void *)(v437 + 16) = sub_10025B504;
  *(void *)(v437 + 24) = v58;
  uint64_t v59 = v49 + *(int *)(v445 + 48);
  v40(v49, v465, v434);
  sub_10025C504(v472, v59, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = v458;
  sub_10001D608(v49, v60 + ((v54 + 24) & ~v54), &qword_10163F728);
  swift_retain();
  osos_log_t log = (os_log_t)Logger.logObject.getter();
  LOBYTE(v434) = static os_log_type_t.info.getter();
  uint64_t v466 = swift_allocObject();
  *(unsigned char *)(v466 + 16) = 112;
  uint64_t v477 = swift_allocObject();
  *(unsigned char *)(v477 + 16) = 8;
  uint64_t v61 = swift_allocObject();
  *(void *)(v61 + 16) = 1752392040;
  uint64_t v473 = swift_allocObject();
  *(void *)(v473 + 16) = sub_10006550C;
  *(void *)(v473 + 24) = v61;
  uint64_t v446 = swift_allocObject();
  *(unsigned char *)(v446 + 16) = 33;
  uint64_t v459 = swift_allocObject();
  *(unsigned char *)(v459 + 16) = 8;
  uint64_t v62 = swift_allocObject();
  *(void *)(v62 + 16) = sub_1000654F4;
  *(void *)(v62 + 24) = v453;
  uint64_t v455 = swift_allocObject();
  *(void *)(v455 + 16) = sub_1000654EC;
  *(void *)(v455 + 24) = v62;
  uint64_t v443 = swift_allocObject();
  *(unsigned char *)(v443 + 16) = 34;
  uint64_t v63 = swift_allocObject();
  *(unsigned char *)(v63 + 16) = 8;
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = sub_10025C990;
  *(void *)(v64 + 24) = v451;
  uint64_t v440 = swift_allocObject();
  *(void *)(v440 + 16) = sub_1000654EC;
  *(void *)(v440 + 24) = v64;
  uint64_t v65 = swift_allocObject();
  *(unsigned char *)(v65 + 16) = 34;
  uint64_t v66 = swift_allocObject();
  *(unsigned char *)(v66 + 16) = 8;
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = sub_10025C994;
  *(void *)(v67 + 24) = v437;
  uint64_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = sub_1000654EC;
  *(void *)(v68 + 24) = v67;
  uint64_t v438 = swift_allocObject();
  *(unsigned char *)(v438 + 16) = 0;
  uint64_t v69 = swift_allocObject();
  *(unsigned char *)(v69 + 16) = 8;
  uint64_t v70 = swift_allocObject();
  *(void *)(v70 + 16) = sub_10025B514;
  *(void *)(v70 + 24) = v60;
  uint64_t v429 = swift_allocObject();
  *(void *)(v429 + 16) = sub_10006569C;
  *(void *)(v429 + 24) = v70;
  sub_10000588C(&qword_101639B60);
  uint64_t v71 = swift_allocObject();
  sub_1004B810C(v71, 15);
  *uint64_t v72 = sub_100065514;
  v72[1] = v466;
  v72[2] = sub_100065514;
  v72[3] = v477;
  v72[4] = sub_100065504;
  v72[5] = v473;
  v72[6] = sub_100065514;
  v72[7] = v446;
  v72[8] = sub_100065514;
  v72[9] = v459;
  v72[10] = sub_100065500;
  v72[11] = v455;
  v72[12] = sub_100065514;
  v72[13] = v443;
  v72[14] = sub_100065514;
  v72[15] = v63;
  v72[16] = sub_100065500;
  v72[17] = v440;
  v72[18] = sub_100065514;
  v72[19] = v65;
  v72[20] = sub_100065514;
  v72[21] = v66;
  v72[22] = sub_100065500;
  v72[23] = v68;
  v72[24] = sub_100065514;
  v72[25] = v438;
  v72[26] = sub_100065514;
  v72[27] = v69;
  v72[28] = sub_100065504;
  v72[29] = v429;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v73 = v69;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(oslog, (os_log_type_t)v434))
  {
    unint64_t v424 = *(void *)(v480 + 1824);
    uint64_t v420 = *(void *)(v480 + 1816);
    uint64_t v79 = *(void *)(v480 + 1360);
    uint64_t v427 = *(void *)(v480 + 1352);
    uint64_t v80 = *(void *)(v480 + 1344);
    uint64_t v432 = *(void *)(v480 + 1408);
    uint64_t v435 = *(void *)(v480 + 1256);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10001CFB8(v420, v424);
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v432, v427);
    sub_10001DAB4(v435, &qword_101657910);
    sub_10001DAB4(v80, &qword_10163F728);
    goto LABEL_22;
  }
  uint64_t v423 = v68;
  uint64_t v426 = v66;
  uint64_t v74 = (uint8_t *)sub_1008F9FAC();
  uint64_t v75 = swift_slowAlloc();
  *(void *)(v480 + 856) = 0;
  *(void *)(v480 + 824) = v75;
  *(_WORD *)uint64_t v74 = 1283;
  *(void *)(v480 + 864) = v74 + 2;
  *(void *)(v480 + 648) = sub_100065514;
  *(void *)(v480 + 656) = v466;
  uint64_t v76 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v480 + 648);
  uint64_t v431 = v480 + 864;
  uint64_t v77 = v480 + 856;
  uint64_t v78 = v480 + 824;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v480 + 648), v480 + 864, v480 + 856, v480 + 824);
  if (v462)
  {
    return swift_errorRelease();
  }
  v462 = v74;
  swift_release();
  *(void *)(v480 + 648) = sub_100065514;
  *(void *)(v480 + 656) = v477;
  sub_1008F9FB4(v76, v431, v77, v78);
  swift_release();
  *(void *)(v480 + 648) = sub_100065504;
  *(void *)(v480 + 656) = v473;
  sub_1008F9FB4(v76, v431, v77, v78);
  swift_release();
  *(void *)(v480 + 648) = sub_100065514;
  *(void *)(v480 + 656) = v446;
  sub_1008F9FB4(v76, v431, v77, v78);
  swift_release();
  *(void *)(v480 + 648) = sub_100065514;
  *(void *)(v480 + 656) = v459;
  sub_1008F9FB4(v76, v431, v77, v78);
  swift_release();
  *(void *)(v480 + 648) = sub_100065500;
  *(void *)(v480 + 656) = v455;
  sub_1008F9FB4(v76, v431, v77, v78);
  swift_release();
  *(void *)(v480 + 648) = sub_100065514;
  *(void *)(v480 + 656) = v443;
  sub_1008F9FB4(v76, v431, v77, v78);
  swift_release();
  *(void *)(v480 + 648) = sub_100065514;
  *(void *)(v480 + 656) = v63;
  sub_1008F9FB4(v76, v431, v77, v78);
  swift_release();
  *(void *)(v480 + 648) = sub_100065500;
  *(void *)(v480 + 656) = v440;
  sub_1008F9FB4(v76, v431, v77, v78);
  swift_release();
  *(void *)(v480 + 648) = sub_100065514;
  *(void *)(v480 + 656) = v65;
  sub_1008F9FB4(v76, v431, v77, v78);
  swift_release();
  *(void *)(v480 + 648) = sub_100065514;
  *(void *)(v480 + 656) = v426;
  sub_1008F9FB4(v76, v431, v77, v78);
  swift_release();
  *(void *)(v480 + 648) = sub_100065500;
  *(void *)(v480 + 656) = v423;
  sub_1008F9FB4(v76, v431, v77, v78);
  swift_release();
  *(void *)(v480 + 648) = sub_100065514;
  *(void *)(v480 + 656) = v438;
  sub_1008F9FB4(v76, v431, v77, v78);
  swift_release();
  *(void *)(v480 + 648) = sub_100065514;
  *(void *)(v480 + 656) = v73;
  sub_1008F9FB4(v76, v431, v77, v78);
  swift_release();
  *(void *)(v480 + 648) = sub_100065504;
  *(void *)(v480 + 656) = v429;
  sub_1008F9FB4(v76, v431, v77, v78);
LABEL_203:
  unint64_t v364 = *(void *)(v480 + 1824);
  uint64_t v365 = *(void *)(v480 + 1816);
  uint64_t v366 = *(void *)(v480 + 1360);
  uint64_t v367 = *(void *)(v480 + 1352);
  uint64_t v479 = *(void *)(v480 + 1344);
  unint64_t v470 = *(void *)(v480 + 1408);
  uint64_t v475 = *(void *)(v480 + 1256);
  swift_release();
  _os_log_impl((void *)&_mh_execute_header, oslog, (os_log_type_t)v434, "Return search result for beacon (wild): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", v462, 0x34u);
  swift_arrayDestroy();
  swift_slowDealloc();
  sub_1008F9FA0();

  swift_release();
  sub_10001CFB8(v365, v364);
  (*(void (**)(unint64_t, uint64_t))(v366 + 8))(v470, v367);
  sub_10001DAB4(v475, &qword_101657910);
  sub_10001DAB4(v479, &qword_10163F728);
  v462 = 0;
LABEL_22:
  uint64_t v81 = v480;
  uint64_t v82 = *(void *)(v480 + 1808) + 1;
  if (v82 != *(void *)(v480 + 1800))
  {
    *(void *)(v480 + 1808) = v82;
    unint64_t v289 = *(void *)(v480 + 1752);
    uint64_t v290 = *(void *)(v480 + 1792) + 24 * v82;
    uint64_t v291 = *(void *)(v290 + 32);
    *(void *)(v480 + 1816) = v291;
    uint64_t v87 = *(void *)(v290 + 40);
    *(void *)(v480 + 1824) = v87;
    int v292 = *(_DWORD *)(v290 + 48);
    *(unsigned char *)(v480 + 1836) = *(unsigned char *)(v290 + 52);
    *(_DWORD *)(v480 + 1832) = v292;
    uint64_t v293 = 0;
    uint64_t v294 = 0;
    switch(v289 >> 62)
    {
      case 1uLL:
        sub_100037A38(*(void *)(v480 + 1744), v289);
        uint64_t v320 = *(void *)(v480 + 1744);
        uint64_t v293 = v320 >> 32;
        uint64_t v294 = (int)v320;
        break;
      case 2uLL:
        uint64_t v321 = *(void *)(v480 + 1744);
        uint64_t v294 = *(void *)(v321 + 16);
        uint64_t v293 = *(void *)(v321 + 24);
        sub_100037A38(v321, v289);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v294 = 0;
        uint64_t v293 = BYTE6(v289);
        break;
    }
    unint64_t v322 = sub_1008AA59C(v294, v293, *(void *)(v480 + 1744), *(void *)(v480 + 1752));
    unint64_t v97 = *(void *)(v480 + 1752);
    if (v322 < 0x39)
    {
      switch(v97 >> 62)
      {
        case 1uLL:
          uint64_t v325 = *(void *)(v480 + 1744);
          uint64_t v323 = v325 >> 32;
          uint64_t v324 = (int)v325;
          goto LABEL_152;
        case 2uLL:
          uint64_t v326 = *(void *)(v480 + 1744);
          uint64_t v324 = *(void *)(v326 + 16);
          uint64_t v323 = *(void *)(v326 + 24);
          goto LABEL_152;
        default:
          goto LABEL_154;
      }
    }
    uint64_t v323 = sub_1008AA520(v294, 57, *(void *)(v480 + 1744), *(void *)(v480 + 1752));
    uint64_t v324 = 0;
    switch(v97 >> 62)
    {
      case 1uLL:
        uint64_t v324 = (int)*(void *)(v480 + 1744);
        break;
      case 2uLL:
        uint64_t v324 = *(void *)(*(void *)(v480 + 1744) + 16);
        break;
      default:
        break;
    }
LABEL_152:
    if (v323 >= v324)
    {
      unint64_t v97 = *(void *)(v480 + 1752);
LABEL_154:
      uint64_t v327 = *(void *)(v480 + 1744);
      sub_1000361E0(v291, v87);
      sub_1000361E0(v291, v87);
      uint64_t v81 = Data._Representation.subscript.getter();
      unint64_t v329 = v328;
      sub_100037A24(v327, v97);
      switch(v329 >> 62)
      {
        case 1uLL:
          LODWORD(v330) = HIDWORD(v81) - v81;
          if (__OFSUB__(HIDWORD(v81), v81)) {
            goto LABEL_197;
          }
          uint64_t v330 = (int)v330;
          goto LABEL_159;
        case 2uLL:
          uint64_t v332 = *(void *)(v81 + 16);
          uint64_t v331 = *(void *)(v81 + 24);
          BOOL v124 = __OFSUB__(v331, v332);
          uint64_t v330 = v331 - v332;
          if (v124) {
            goto LABEL_198;
          }
          goto LABEL_159;
        case 3uLL:
          goto LABEL_162;
        default:
          uint64_t v330 = BYTE6(v329);
LABEL_159:
          if (v330 != 57)
          {
LABEL_162:
            uint64_t v335 = v81;
            unint64_t v336 = v329;
            goto LABEL_163;
          }
          sub_1000361E0(v81, v329);
          uint64_t v333 = sub_100A94760(v81, v329);
          if (v462)
          {
            sub_10001CFB8(v81, v329);
            uint64_t v484 = 0;
            unint64_t v485 = 0xE000000000000000;
            _StringGuts.grow(_:)(35);
            unint64_t v339 = v485;
            *(void *)(v480 + 632) = v484;
            *(void *)(v480 + 640) = v339;
            v340._object = (void *)0x80000001013F3B70;
            v340._countAndFlagsBits = 0xD000000000000021;
            String.append(_:)(v340);
            *(void *)(v480 + 936) = v462;
            sub_10000588C(&qword_101638D40);
            _print_unlocked<A, B>(_:_:)();
            return _assertionFailure(_:_:file:line:flags:)();
          }
          uint64_t v337 = v333;
          unint64_t v338 = v334;
          sub_10001CFB8(v81, v329);
          sub_100434E0C(v337, v338, (uint64_t *)(v480 + 696));
          sub_10001CFB8(v81, v329);
          uint64_t v351 = *(void *)(v480 + 696);
          *(void *)(v480 + 1840) = v351;
          uint64_t v352 = *(void *)(v480 + 704);
          *(void *)(v480 + 1848) = v352;
          uint64_t v353 = (void *)swift_task_alloc();
          *(void *)(v480 + 1856) = v353;
          *uint64_t v353 = v480;
          v353[1] = sub_100233AA0;
          uint64_t v354 = *(void *)(v480 + 1784);
          uint64_t v355 = *(void *)(v480 + 1568);
          uint64_t v356 = *(void *)(v480 + 1272);
          uint64_t result = sub_10025916C(v356, v291, v87, v354, v351, v352, 0, v355);
          break;
      }
      return result;
    }
    goto LABEL_186;
  }
  uint64_t v83 = *(void **)(v480 + 1784);
  unint64_t v84 = *(void *)(v480 + 1752);
  uint64_t v85 = *(void *)(v480 + 1744);
  uint64_t v86 = *(void *)(v480 + 1632);
  uint64_t v87 = *(void *)(v480 + 1576);
  uint64_t v88 = *(void *)(v480 + 1568);
  uint64_t v89 = *(void *)(v480 + 1536);
  uint64_t v90 = *(void *)(v480 + 1528);
  sub_10001CFB8(*(void *)(v480 + 1672), *(void *)(v480 + 1680));

  sub_100037A24(v85, v84);
  swift_bridgeObjectRelease();
  uint64_t v91 = *(NSObject **)(v89 + 8);
  ((void (*)(uint64_t, uint64_t))v91)(v87, v90);
  sub_10025C56C(v86, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  ((void (*)(uint64_t, uint64_t))v91)(v88, v90);
  uint64_t v81 = v480;
  unint64_t v92 = *(void *)(v480 + 1664) + 1;
  if (v92 != *(void *)(v480 + 1656))
  {
    uint64_t v87 = (uint64_t)&qword_101638CF0;
    do
    {
      *(void *)(v81 + 1664) = v92;
      uint64_t v295 = *(void **)(v81 + 984);
      if (!v295) {
        uint64_t v295 = _swiftEmptyArrayStorage;
      }
      if (v92 >= v295[2])
      {
        __break(1u);
        sub_10001CFB8(v84, (unint64_t)v91);
        uint64_t v484 = 0;
        unint64_t v485 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        unint64_t v362 = v485;
        *(void *)(v480 + 744) = v484;
        *(void *)(v480 + 752) = v362;
        v363._object = (void *)0x80000001013F3B70;
        v363._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v363);
        *(void *)(v480 + 848) = v85;
        sub_10000588C(&qword_101638D40);
        _print_unlocked<A, B>(_:_:)();
        return _assertionFailure(_:_:file:line:flags:)();
      }
      uint64_t v296 = *(unsigned __int8 *)(v81 + 2016);
      uint64_t v297 = *(void *)(v81 + 1632);
      uint64_t v298 = *(void *)(v81 + 1592);
      uint64_t v299 = *(void *)(v81 + 1584);
      uint64_t v300 = (uint64_t *)v81;
      uint64_t v301 = *(void *)(v81 + 1536);
      uint64_t v302 = v300[191];
      uint64_t v303 = v300[190];
      sub_10025C504((uint64_t)v295 + ((v296 + 32) & ~v296) + *(void *)(v298 + 72) * v92, v297, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      unint64_t v84 = *(void *)(v297 + 16);
      v300[209] = v84;
      unint64_t v304 = *(void *)(v297 + 24);
      v300[210] = v304;
      sub_10001D074(v297 + *(int *)(v299 + 28), v303, &qword_101638CF0);
      uint64_t v305 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v301 + 48);
      v300[211] = (uint64_t)v305;
      v300[212] = (v301 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
      if (v305(v303, 1, v302) != 1)
      {
        uint64_t v311 = v300[197];
        uint64_t v312 = v300[192];
        uint64_t v313 = v300[191];
        uint64_t v314 = v300[190];
        uint64_t v315 = v300[189];
        uint64_t v316 = *(void (**)(uint64_t, uint64_t, uint64_t))(v312 + 32);
        v300[213] = (uint64_t)v316;
        v300[214] = (v312 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v316(v311, v314, v313);
        uint64_t v317 = *(void (**)(uint64_t, uint64_t, uint64_t))(v312 + 16);
        v300[215] = (uint64_t)v317;
        v300[216] = (v312 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v317(v315, v311, v313);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v312 + 56))(v315, 0, 1, v313);
        sub_1000361E0(v84, v304);
        uint64_t v318 = (void *)swift_task_alloc();
        v300[217] = (uint64_t)v318;
        void *v318 = v300;
        v318[1] = sub_1002280E0;
        uint64_t v319 = v300[189];
        return sub_100257574(v84, v304, v319);
      }
      uint64_t v306 = v300[190];
      sub_1000361E0(v84, v304);
      sub_10001DAB4(v306, &qword_101638CF0);
      uint64_t v81 = (uint64_t)v300;
      if (qword_101636908 != -1) {
        swift_once();
      }
      sub_100010324(v300[169], (uint64_t)qword_10170D9D8);
      uint64_t v91 = Logger.logObject.getter();
      os_log_type_t v307 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v91, v307))
      {
        uint64_t v308 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v308 = 0;
        _os_log_impl((void *)&_mh_execute_header, v91, v307, "Missing share id in payload.", v308, 2u);
        swift_slowDealloc();
      }
      uint64_t v85 = v300[204];
      sub_10001CFB8(v84, v304);

      sub_10025C56C(v85, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      unint64_t v92 = v300[208] + 1;
    }
    while (v92 != v300[207]);
  }
  uint64_t v93 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  if (*(void *)(v81 + 976)) {
    uint64_t v93 = *(void **)(v81 + 976);
  }
  osos_log_t log = (os_log_t)v93[2];
  if (!oslog)
  {
    swift_bridgeObjectRetain();
LABEL_137:
    swift_bridgeObjectRelease();
    uint64_t v309 = *(void *)(v81 + 1648);
    swift_beginAccess();
    unint64_t v469 = *(void *)(v309 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v310 = *(uint64_t (**)(uint64_t))(v81 + 8);
    return v310(v469);
  }
  uint64_t v94 = *(void *)(v81 + 1536);
  uint64_t v414 = (uint64_t *)(v81 + 888);
  uint64_t v95 = *(void *)(v81 + 1360);
  uint64_t v416 = *(void *)(v81 + 1280);
  uint64_t v96 = *(void *)(v81 + 1160);
  uint64_t v417 = *(void *)(v81 + 1120);
  uint64_t v474 = *(void *)(v81 + 1104);
  unint64_t v97 = *(void *)(v81 + 1080);
  uint64_t v98 = *(void *)(v81 + 1056);
  unint64_t v456 = (void (**)(uint64_t, void, uint64_t))(v98 + 104);
  uint64_t v404 = *(void *)(v81 + 1040);
  uint64_t v454 = (void (**)(uint64_t, uint64_t))(v98 + 8);
  uint64_t v415 = (void (**)(void))(v94 + 16);
  uint64_t v418 = *(void *)(v81 + 1032);
  uint64_t v403 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 + 1192) + 56);
  uint64_t v402 = (void (**)(uint64_t, uint64_t, uint64_t))(v96 + 16);
  uint64_t v401 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 56);
  uint64_t v400 = (void (**)(uint64_t))(v94 + 32);
  uint64_t v398 = (void (**)(uint64_t, uint64_t))(v94 + 8);
  uint64_t v99 = *(void *)(*(void *)(v81 + 992) + 16);
  uint64_t v433 = (void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16);
  unint64_t v425 = (void (**)(uint64_t, uint64_t))(v95 + 8);
  unsigned int v452 = enum case for HashAlgorithm.sha256(_:);
  uint64_t v441 = v93 + 4;
  uint64_t v397 = *(void *)(v81 + 1288);
  uint64_t v399 = *(int **)(v81 + 1016);
  swift_bridgeObjectRetain();
  unint64_t v100 = 0;
  uint64_t v434 = v99;
  unint64_t v419 = v93;
  unint64_t v422 = v97;
  while (1)
  {
    if (v100 >= v93[2]) {
      goto LABEL_189;
    }
    unint64_t v439 = v100;
    uint64_t v101 = &v441[3 * v100];
    uint64_t v103 = *v101;
    unint64_t v102 = v101[1];
    uint64_t v104 = v101[2];
    if (v99) {
      break;
    }
    sub_1000361E0(*v101, v101[1]);
    swift_bridgeObjectRetain();
    unint64_t v147 = v102;
LABEL_93:
    if (qword_101636908 != -1) {
      swift_once();
    }
    uint64_t v148 = *(void *)(v81 + 1376);
    uint64_t v149 = *(void *)(v81 + 1352);
    uint64_t v150 = sub_100010324(v149, (uint64_t)qword_10170D9D8);
    (*v433)(v148, v150, v149);
    sub_1000361E0(v103, v147);
    swift_bridgeObjectRetain();
    sub_1000361E0(v103, v147);
    swift_bridgeObjectRetain();
    uint64_t v87 = Logger.logObject.getter();
    os_log_type_t v151 = static os_log_type_t.error.getter();
    BOOL v152 = os_log_type_enabled((os_log_t)v87, v151);
    uint64_t v153 = *(void *)(v81 + 1376);
    uint64_t v154 = *(void *)(v81 + 1352);
    if (v152)
    {
      uint64_t v155 = swift_slowAlloc();
      uint64_t v484 = (uint64_t (*)())swift_slowAlloc();
      *(_DWORD *)uint64_t v155 = 141558275;
      *(void *)(v155 + 4) = 1752392040;
      *(_WORD *)(v155 + 12) = 2081;
      *(void *)(v480 + 728) = v103;
      *(void *)(v480 + 736) = v147;
      sub_1001D780C();
      uint64_t v156 = RawRepresentable<>.hexString.getter();
      *(void *)(v155 + 14) = sub_1008FA0F0(v156, v157, (uint64_t *)&v484);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v103, v147);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v103, v147);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v87, v151, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v155, 0x16u);
      swift_arrayDestroy();
      unint64_t v97 = v422;
      swift_slowDealloc();
      uint64_t v81 = v480;
      swift_slowDealloc();

      sub_10001CFB8(v103, v147);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10001CFB8(v103, v147);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v103, v147);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v103, v147);
      swift_bridgeObjectRelease();
    }
    (*v425)(v153, v154);
    uint64_t v99 = v434;
LABEL_99:
    unint64_t v100 = v439 + 1;
    uint64_t v93 = v419;
    if ((os_log_t)(v439 + 1) == oslog) {
      goto LABEL_137;
    }
  }
  uint64_t v105 = *(void *)(v81 + 992);
  unint64_t v467 = v102 >> 62;
  sub_1000361E0(v103, v102);
  uint64_t v106 = *(unsigned __int8 *)(v97 + 80);
  uint64_t v405 = ~v106;
  uint64_t v410 = v106;
  uint64_t v107 = v105 + ((v106 + 32) & ~v106);
  uint64_t v460 = BYTE6(v102);
  unint64_t v444 = v102;
  uint64_t v447 = *(void *)(v97 + 72);
  BOOL v108 = __OFSUB__(HIDWORD(v103), v103);
  BOOL v430 = v108;
  uint64_t v428 = HIDWORD(v103) - (int)v103;
  uint64_t v421 = v104;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v109 = v99;
  uint64_t v478 = v103;
  while (2)
  {
    double v110 = *(uint64_t **)(v81 + 1104);
    sub_10025C504(v107, (uint64_t)v110, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v111 = *v110;
    unint64_t v112 = *(void *)(v474 + 8);
    uint64_t v87 = v112 >> 62;
    uint64_t v81 = 0;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    switch(v112 >> 62)
    {
      case 1uLL:
        uint64_t v81 = (int)v111;
        uint64_t v113 = v111 >> 32;
        sub_1000361E0(v111, *(void *)(v474 + 8));
        uint64_t v114 = v111 >> 32;
        uint64_t v115 = (int)v111;
        break;
      case 2uLL:
        uint64_t v81 = *(void *)(v111 + 16);
        uint64_t v113 = *(void *)(v111 + 24);
        sub_1000361E0(v111, *(void *)(v474 + 8));
        uint64_t v115 = *(void *)(v111 + 16);
        uint64_t v114 = *(void *)(v111 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v81 = 0;
        uint64_t v115 = 0;
        uint64_t v113 = BYTE6(v112);
        uint64_t v114 = BYTE6(v112);
        break;
    }
    if (v114 < v81 || v81 < v115)
    {
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      swift_once();
LABEL_167:
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v341 = swift_allocObject();
      uint64_t v342 = sub_1004B810C(v341, 1);
      uint64_t v344 = v343;
      *uint64_t v414 = v81;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v345 = String.init<A>(describing:)();
      uint64_t v347 = v346;
      v344[3] = (uint64_t)&type metadata for String;
      v344[4] = sub_10000B4CC();
      *uint64_t v344 = v345;
      v344[1] = v347;
      SharingCircleWildAdvertisementKey.init(key:)(v342);
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_100130148();
      uint64_t v348 = swift_allocError();
      *uint64_t v349 = 0;
      swift_willThrow();
      swift_errorRelease();
      unint64_t v128 = v97;
      uint64_t v126 = v87;
      uint64_t v81 = v480;
LABEL_179:
      sub_10001CFB8(v126, v128);
      uint64_t v484 = 0;
      unint64_t v485 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      unint64_t v360 = v485;
      *(void *)(v81 + 680) = v484;
      *(void *)(v81 + 688) = v360;
      v361._object = (void *)0x80000001013F3B70;
      v361._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v361);
      *(void *)(v81 + 872) = v348;
      sub_10000588C(&qword_101638D40);
      _print_unlocked<A, B>(_:_:)();
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v87 = v87;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    switch((int)v87)
    {
      case 1:
        uint64_t v117 = (int)v111;
        uint64_t v116 = v111 >> 32;
        break;
      case 2:
        uint64_t v117 = *(void *)(v111 + 16);
        uint64_t v116 = *(void *)(v111 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v117 = 0;
        uint64_t v116 = BYTE6(v112);
        break;
    }
    if (v116 < v113 || v113 < v117) {
      goto LABEL_183;
    }
    if (__OFSUB__(v113, v81)) {
      goto LABEL_184;
    }
    if ((unint64_t)(v113 - v81) < 0x39)
    {
      switch((int)v87)
      {
        case 1:
          uint64_t v118 = v111 >> 32;
          goto LABEL_54;
        case 2:
          uint64_t v118 = *(void *)(v111 + 24);
          goto LABEL_56;
        default:
          goto LABEL_58;
      }
    }
    uint64_t v118 = sub_1008AA520(v81, 57, v111, v112);
    uint64_t v119 = 0;
    switch((int)v87)
    {
      case 1:
LABEL_54:
        uint64_t v119 = (int)v111;
        break;
      case 2:
LABEL_56:
        uint64_t v119 = *(void *)(v111 + 16);
        break;
      default:
        break;
    }
    if (v118 < v119) {
      goto LABEL_185;
    }
LABEL_58:
    uint64_t v87 = Data._Representation.subscript.getter();
    unint64_t v97 = v120;
    sub_10001CFB8(v111, v112);
    switch(v97 >> 62)
    {
      case 1uLL:
        LODWORD(v121) = HIDWORD(v87) - v87;
        if (__OFSUB__(HIDWORD(v87), v87)) {
          goto LABEL_187;
        }
        uint64_t v121 = (int)v121;
LABEL_63:
        if (v121 == 57)
        {
          sub_1000361E0(v87, v97);
          uint64_t v125 = sub_100A948F8(v87, v97);
          uint64_t v81 = (uint64_t)v462;
          if (v462)
          {
            static os_log_type_t.error.getter();
            if (qword_101636F48 != -1) {
              goto LABEL_200;
            }
            goto LABEL_167;
          }
          uint64_t v126 = sub_100A90C58(v125, 0);
          unint64_t v128 = v127;
          CCECCryptorRelease();
          sub_10001CFB8(v87, v97);
          unint64_t v129 = v128 >> 62;
          uint64_t v81 = v480;
          switch(v128 >> 62)
          {
            case 1uLL:
              LODWORD(v130) = HIDWORD(v126) - v126;
              if (__OFSUB__(HIDWORD(v126), v126)) {
                goto LABEL_190;
              }
              uint64_t v130 = (int)v130;
LABEL_70:
              if (v130 == 28)
              {
                uint64_t v133 = *(void *)(v480 + 1064);
                uint64_t v134 = *(void *)(v480 + 1048);
                sub_10001CFB8(v87, v97);
                (*v456)(v133, v452, v134);
                uint64_t v87 = Data.hash(algorithm:)();
                unint64_t v97 = v135;
                (*v454)(v133, v134);
                sub_10001CFB8(v126, v128);
                uint64_t v136 = 0;
                uint64_t v103 = v478;
                switch(v97 >> 62)
                {
                  case 1uLL:
                    if (__OFSUB__(HIDWORD(v87), v87)) {
                      goto LABEL_192;
                    }
                    uint64_t v136 = HIDWORD(v87) - (int)v87;
LABEL_76:
                    sub_1000361E0(v87, v97);
                    break;
                  case 2uLL:
                    uint64_t v138 = *(void *)(v87 + 16);
                    uint64_t v137 = *(void *)(v87 + 24);
                    uint64_t v136 = v137 - v138;
                    if (!__OFSUB__(v137, v138)) {
                      goto LABEL_76;
                    }
                    goto LABEL_193;
                  case 3uLL:
                    break;
                  default:
                    uint64_t v136 = BYTE6(v97);
                    break;
                }
                uint64_t v139 = v460;
                switch((int)v467)
                {
                  case 1:
                    uint64_t v139 = v428;
                    if (v430) {
                      goto LABEL_194;
                    }
                    goto LABEL_81;
                  case 2:
                    uint64_t v141 = *(void *)(v478 + 16);
                    uint64_t v140 = *(void *)(v478 + 24);
                    BOOL v124 = __OFSUB__(v140, v141);
                    uint64_t v139 = v140 - v141;
                    if (v124) {
                      goto LABEL_195;
                    }
                    goto LABEL_81;
                  case 3:
                    if (v136) {
                      goto LABEL_35;
                    }
                    goto LABEL_102;
                  default:
LABEL_81:
                    if (v136 == v139)
                    {
                      if (v136 >= 1)
                      {
                        sub_1000361E0(v478, v444);
                        sub_1000361E0(v478, v444);
                        switch(v97 >> 62)
                        {
                          case 1uLL:
                            if (v87 >> 32 < (int)v87) {
                              goto LABEL_199;
                            }
                            sub_1000361E0(v478, v444);
                            sub_1000361E0(v478, v444);
                            sub_1000361E0(v478, v444);
                            sub_1000361E0(v87, v97);
                            sub_1000361E0(v478, v444);
                            uint64_t v103 = v478;
                            char v144 = sub_100BFBE64((int)v87, v87 >> 32, v97 & 0x3FFFFFFFFFFFFFFFLL, v478, v444);
                            sub_10001CFB8(v478, v444);
                            sub_10001CFB8(v87, v97);
                            break;
                          case 2uLL:
                            uint64_t v145 = *(void *)(v87 + 16);
                            uint64_t v146 = *(void *)(v87 + 24);
                            sub_1000361E0(v478, v444);
                            sub_1000361E0(v478, v444);
                            sub_1000361E0(v478, v444);
                            sub_1000361E0(v478, v444);
                            swift_retain();
                            swift_retain();
                            char v144 = sub_100BFBE64(v145, v146, v97 & 0x3FFFFFFFFFFFFFFFLL, v478, v444);
                            sub_10001CFB8(v478, v444);
                            swift_release();
                            swift_release();
                            break;
                          case 3uLL:
                            sub_1000361E0(v478, v444);
                            sub_1000361E0(v478, v444);
                            sub_1000361E0(v478, v444);
                            sub_1000361E0(v478, v444);
                            unint64_t v142 = v396 & 0xFF00000000000000;
                            uint64_t v143 = 0;
                            v396 &= 0xFF00000000000000;
                            goto LABEL_89;
                          default:
                            sub_1000361E0(v478, v444);
                            sub_1000361E0(v478, v444);
                            sub_1000361E0(v478, v444);
                            sub_1000361E0(v478, v444);
                            unint64_t v142 = v395 & 0xFF00000000000000 | v97 & 0xFFFFFFFFFFFFFFLL;
                            uint64_t v143 = v87;
                            unint64_t v395 = v142;
LABEL_89:
                            char v144 = sub_100BFBD8C(v143, v142, v478, v444);
                            sub_10001CFB8(v478, v444);
                            break;
                        }
                        sub_10001CFB8(v87, v97);
                        sub_10001CFB8(v103, v444);
                        sub_10001CFB8(v87, v97);
                        sub_10001CFB8(v103, v444);
                        sub_10001CFB8(v103, v444);
                        sub_10001CFB8(v103, v444);
                        sub_10001CFB8(v103, v444);
                        if (v144) {
                          goto LABEL_103;
                        }
                        goto LABEL_36;
                      }
LABEL_102:
                      sub_10001CFB8(v87, v97);
                      sub_10001CFB8(v87, v97);
LABEL_103:
                      uint64_t v158 = *(void *)(v480 + 1120);
                      uint64_t v159 = *(void *)(v480 + 1112);
                      uint64_t v160 = *(void *)(v480 + 1104);
                      swift_bridgeObjectRelease();
                      sub_10025C5CC(v160, v159, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                      sub_10025C5CC(v159, v158, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                      uint64_t v87 = v421;
                      uint64_t v161 = sub_1001340BC(v421);
                      if (!v161)
                      {
                        swift_bridgeObjectRetain();
                        unint64_t v97 = v422;
                        uint64_t v99 = v434;
                        uint64_t v221 = v478;
LABEL_123:
                        uint64_t v288 = *(void *)(v81 + 1120);
                        sub_10001CFB8(v221, v444);
                        swift_bridgeObjectRelease_n();
                        sub_10025C56C(v288, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        v462 = 0;
                        goto LABEL_99;
                      }
                      uint64_t v162 = v161;
                      unint64_t v461 = v421
                           + ((*(unsigned __int8 *)(v418 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v418 + 80));
                      uint64_t v448 = (v410 + 16) & v405;
                      swift_bridgeObjectRetain();
                      uint64_t v163 = 0;
                      uint64_t v394 = v162;
                      while (1)
                      {
                        unint64_t v468 = v163 + 1;
                        if (__OFADD__(v163, 1)) {
                          goto LABEL_196;
                        }
                        uint64_t v164 = *(uint64_t **)(v81 + 1120);
                        uint64_t v463 = v163;
                        sub_10025C504(v461 + *(void *)(v418 + 72) * v163, *(void *)(v81 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                        uint64_t v165 = *v164;
                        unint64_t v166 = *(void *)(v417 + 8);
                        uint64_t v167 = v81;
                        SecKeyRef v168 = sub_100435E70(v165, v166);
                        uint64_t v169 = **(void **)(v167 + 1040);
                        unint64_t v170 = *(void *)(v404 + 8);
                        uint64_t v171 = PrivateKey.publicKey.getter(v165, v166);
                        unint64_t v173 = v172;
                        sub_1000361E0(v171, v172);
                        uint64_t v174 = sub_100A94760(v171, v173);
                        unint64_t v176 = v175;
                        sub_10001CFB8(v171, v173);
                        sub_100434E0C(v174, v176, (uint64_t *)&v484);
                        uint64_t v177 = *(void *)(v480 + 1024);
                        sub_10001CFB8(v171, v173);
                        uint64_t v179 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v484;
                        unint64_t v178 = v485;
                        uint64_t v180 = v168;
                        sub_1000361E0(v169, v170);
                        sub_1000361E0((uint64_t)v179, v178);
                        BeaconPayloadv1.init(using:data:advertisement:)(v180, v169, v170, (uint64_t)v179, v178, v177);
                        uint64_t v381 = v180;
                        uint64_t v386 = *(void *)(v480 + 1528);
                        uint64_t v388 = *(void *)(v480 + 1560);
                        uint64_t v391 = *(void *)(v480 + 1280);
                        uint64_t v181 = *(void *)(v480 + 1264);
                        uint64_t v182 = *(void *)(v480 + 1240);
                        uint64_t v382 = *(void *)(v480 + 1232);
                        uint64_t v183 = *(void *)(v480 + 1184);
                        uint64_t v406 = (uint64_t)v179;
                        uint64_t v184 = *(void *)(v480 + 1168);
                        uint64_t v185 = *(void *)(v480 + 1152);
                        uint64_t v186 = *(unsigned char **)(v480 + 1144);
                        uint64_t v187 = *(void *)(v480 + 1024);
                        uint64_t v188 = *(void *)(v480 + 1008);
                        uint64_t v411 = *v415;
                        (*v415)();
                        (*v403)(v182, 1, 1, v183);
                        LODWORD(v183) = *(unsigned __int8 *)(v187 + v399[10]);
                        (*v402)(v184, v187 + v399[5], v185);
                        double v189 = *(double *)(v187 + v399[7]);
                        double v190 = *(double *)(v187 + v399[8]);
                        double v191 = *(double *)(v187 + v399[9]);
                        (*v401)(v188, 1, 1, v185);
                        sub_10001D074(v182, v382, &qword_101657910);
                        sub_100CC2A6C(v183, v184, 15, v188, v382, 256, v186, v189, v190, v191);
                        sub_10001DAB4(v182, &qword_101657910);
                        sub_10025C56C(v187, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                        uint64_t v192 = v181 + *(int *)(v416 + 48);
                        uint64_t v193 = *v400;
                        ((void (*)(uint64_t, uint64_t, uint64_t))*v400)(v181, v388, v386);
                        sub_10025C5CC((uint64_t)v186, v192, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v397 + 56))(v181, 0, 1, v391);
                        sub_10001CFB8(v406, v178);
                        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v397 + 48))(v181, 1, v391) == 1)
                        {
                          uint64_t v194 = *(void *)(v480 + 1264);

                          sub_10001DAB4(v194, &qword_10163F720);
                          if (qword_101636908 != -1) {
                            swift_once();
                          }
                          uint64_t v195 = *(void *)(v480 + 1384);
                          uint64_t v196 = *(void *)(v480 + 1352);
                          uint64_t v197 = *(void *)(v480 + 1120);
                          uint64_t v198 = *(void *)(v480 + 1096);
                          uint64_t v199 = sub_100010324(v196, (uint64_t)qword_10170D9D8);
                          (*v433)(v195, v199, v196);
                          sub_10025C504(v197, v198, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                          uint64_t v200 = swift_allocObject();
                          sub_10025C5CC(v198, v200 + v448, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                          uint64_t v201 = swift_allocObject();
                          *(void *)(v201 + 16) = sub_10025B340;
                          *(void *)(v201 + 24) = v200;
                          unint64_t v202 = Logger.logObject.getter();
                          os_log_type_t v203 = static os_log_type_t.error.getter();
                          uint64_t v204 = swift_allocObject();
                          *(unsigned char *)(v204 + 16) = 112;
                          uint64_t v205 = swift_allocObject();
                          *(unsigned char *)(v205 + 16) = 8;
                          uint64_t v206 = swift_allocObject();
                          *(void *)(v206 + 16) = 1752392040;
                          uint64_t v207 = swift_allocObject();
                          *(void *)(v207 + 16) = sub_100060540;
                          *(void *)(v207 + 24) = v206;
                          uint64_t v208 = swift_allocObject();
                          *(unsigned char *)(v208 + 16) = 33;
                          uint64_t v209 = swift_allocObject();
                          *(unsigned char *)(v209 + 16) = 8;
                          uint64_t v210 = v202;
                          uint64_t v211 = swift_allocObject();
                          *(void *)(v211 + 16) = sub_1000604E8;
                          *(void *)(v211 + 24) = v201;
                          uint64_t v212 = swift_allocObject();
                          *(void *)(v212 + 16) = sub_10005F790;
                          *(void *)(v212 + 24) = v211;
                          sub_10000588C(&qword_101639B60);
                          uint64_t inited = swift_initStackObject();
                          sub_1004B810C(inited, 6);
                          *uint64_t v214 = sub_10005F778;
                          v214[1] = v204;
                          v214[2] = sub_100065514;
                          v214[3] = v205;
                          v214[4] = sub_10006000C;
                          v214[5] = v207;
                          v214[6] = sub_100065514;
                          v214[7] = v208;
                          v214[8] = sub_100065514;
                          v214[9] = v209;
                          v214[10] = sub_10005F7D0;
                          v214[11] = v212;
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_bridgeObjectRelease();
                          if (os_log_type_enabled(v202, v203))
                          {
                            unint64_t v215 = (uint8_t *)swift_slowAlloc();
                            uint64_t v216 = swift_slowAlloc();
                            uint64_t v482 = 0;
                            uint64_t v483 = v216;
                            *(_WORD *)unint64_t v215 = 515;
                            uint64_t v481 = v215 + 2;
                            sub_1008FA6E0(&v481, (uint64_t)&v482, (uint64_t)&v483, 112);
                            swift_release();
                            uint64_t v484 = sub_100065514;
                            unint64_t v485 = v205;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            swift_release();
                            uint64_t v484 = (uint64_t (*)())sub_10006000C;
                            unint64_t v485 = v207;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            swift_release();
                            uint64_t v484 = sub_100065514;
                            unint64_t v485 = v208;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            swift_release();
                            uint64_t v484 = sub_100065514;
                            unint64_t v485 = v209;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            swift_release();
                            uint64_t v484 = (uint64_t (*)())sub_10005F7D0;
                            unint64_t v485 = v212;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            uint64_t v81 = v480;
                            uint64_t v217 = *(void *)(v480 + 1384);
                            uint64_t v218 = *(void *)(v480 + 1352);
                            swift_release();
                            _os_log_impl((void *)&_mh_execute_header, v210, v203, "Could not create search result for beacon: %{private,mask.hash}s.", v215, 0x16u);
                            swift_arrayDestroy();
                            swift_slowDealloc();
                            sub_1008F9FA0();

                            (*v425)(v217, v218);
                          }
                          else
                          {
                            uint64_t v219 = *(void *)(v480 + 1384);
                            uint64_t v220 = *(void *)(v480 + 1352);
                            swift_release();
                            swift_release();
                            swift_release();
                            swift_release();
                            swift_release();
                            swift_release();

                            (*v425)(v219, v220);
                            uint64_t v81 = v480;
                          }
                          uint64_t v99 = v434;
                          uint64_t v221 = v478;
                          uint64_t v87 = v421;
                          unint64_t v97 = v422;
                        }
                        else
                        {
                          uint64_t v223 = *(void *)(v480 + 1648);
                          uint64_t v224 = *(void *)(v480 + 1528);
                          uint64_t v225 = *(void *)(v480 + 1320);
                          uint64_t v226 = *(void *)(v480 + 1312);
                          uint64_t v227 = *(int *)(v416 + 48);
                          uint64_t v228 = v225 + v227;
                          uint64_t v229 = *(void *)(v480 + 1264) + v227;
                          v193(v225);
                          sub_10025C5CC(v229, v228, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v230 = v226 + *(int *)(v416 + 48);
                          ((void (*)(uint64_t, uint64_t, uint64_t))v411)(v226, v225, v224);
                          uint64_t v407 = v228;
                          sub_10025C504(v228, v230, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          swift_beginAccess();
                          uint64_t v231 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000F790C(v226, *(void *)(v223 + 16));
                          uint64_t v232 = *(void *)(v480 + 1528);
                          uint64_t v233 = *(void *)(v480 + 1328);
                          uint64_t v234 = *(void *)(v480 + 1320);
                          uint64_t v235 = *(void *)(v480 + 1312);
                          if (v231)
                          {
                            uint64_t v236 = *(void *)(v480 + 1144);
                            uint64_t v484 = (uint64_t (*)())v231;
                            swift_endAccess();
                            sub_10025C56C(v230, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            uint64_t v383 = *v398;
                            (*v398)(v235, v232);
                            uint64_t v237 = v232;
                            unint64_t v238 = (unsigned __int8 *)(v233 + *(int *)(v416 + 48));
                            ((void (*)(uint64_t, uint64_t, uint64_t))v411)(v233, v234, v237);
                            sub_10025C504(v407, (uint64_t)v238, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            sub_1000D1E3C(v236, v238);
                            sub_10025C56C(v236, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            v383(v233, v237);
                            uint64_t v239 = v233 + *(int *)(v416 + 48);
                            ((void (*)(uint64_t, uint64_t, uint64_t))v411)(v233, v234, v237);
                            sub_10025C504(v407, v239, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            uint64_t v240 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v484;
                            swift_beginAccess();
                            sub_10015DF64((uint64_t)v240, v233);
                            swift_endAccess();
                            sub_10025C56C(v239, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          }
                          else
                          {
                            uint64_t v378 = *(void *)(v480 + 1304);
                            swift_endAccess();
                            sub_10025C56C(v230, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            unint64_t v379 = *v398;
                            (*v398)(v235, v232);
                            uint64_t v241 = v233 + *(int *)(v416 + 48);
                            uint64_t v384 = v241;
                            ((void (*)(uint64_t, uint64_t, uint64_t))v411)(v233, v234, v232);
                            sub_10025C504(v407, v241, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            sub_10000588C(&qword_10163AA18);
                            uint64_t v242 = swift_allocObject();
                            uint64_t v243 = sub_1004B7688(v242, 1);
                            uint64_t v245 = v244;
                            uint64_t v246 = v232;
                            uint64_t v247 = v378 + *(int *)(v416 + 48);
                            ((void (*)(uint64_t, uint64_t, uint64_t))v411)(v378, v234, v246);
                            sub_10025C504(v407, v247, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            sub_10025C5CC(v247, v245, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            uint64_t v248 = SharingCircleWildAdvertisementKey.init(key:)(v243);
                            v379(v378, v246);
                            uint64_t v249 = sub_101158D6C(v248);
                            swift_bridgeObjectRelease();
                            swift_beginAccess();
                            sub_10015DF64(v249, v233);
                            swift_endAccess();
                            sub_10025C56C(v384, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          }
                          uint64_t v392 = *(void *)(v480 + 1648);
                          uint64_t v250 = *(void *)(v480 + 1528);
                          uint64_t v251 = *(void *)(v480 + 1392);
                          uint64_t v252 = *(void *)(v480 + 1352);
                          uint64_t v253 = *(void *)(v480 + 1328);
                          uint64_t v254 = *(void *)(v480 + 1320);
                          uint64_t v255 = *(void *)(v480 + 1120);
                          uint64_t v256 = *(void *)(v480 + 1096);
                          uint64_t v257 = sub_100207468();
                          (*v433)(v251, v257, v252);
                          sub_10025C504(v255, v256, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                          uint64_t v258 = swift_allocObject();
                          sub_10025C5CC(v256, v258 + v448, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                          uint64_t v389 = swift_allocObject();
                          *(void *)(v389 + 16) = sub_10025B340;
                          *(void *)(v389 + 24) = v258;
                          uint64_t v259 = v253 + *(int *)(v416 + 48);
                          uint64_t v260 = v250;
                          ((void (*)(uint64_t, uint64_t, uint64_t))v411)(v253, v254, v250);
                          sub_10025C504(v407, v259, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v261 = *(unsigned __int8 *)(v397 + 80);
                          uint64_t v262 = (v261 + 16) & ~v261;
                          uint64_t v263 = swift_allocObject();
                          sub_10001D608(v253, v263 + v262, &qword_10163F728);
                          uint64_t v375 = swift_allocObject();
                          *(void *)(v375 + 16) = sub_10025B4F4;
                          *(void *)(v375 + 24) = v263;
                          uint64_t v264 = v253 + *(int *)(v416 + 48);
                          ((void (*)(uint64_t, uint64_t, uint64_t))v411)(v253, v254, v260);
                          sub_10025C504(v407, v264, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v265 = swift_allocObject();
                          sub_10001D608(v253, v265 + v262, &qword_10163F728);
                          uint64_t v372 = swift_allocObject();
                          *(void *)(v372 + 16) = sub_10025B504;
                          *(void *)(v372 + 24) = v265;
                          uint64_t v266 = v253 + *(int *)(v416 + 48);
                          ((void (*)(uint64_t, uint64_t, uint64_t))v411)(v253, v254, v260);
                          sub_10025C504(v407, v266, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v267 = swift_allocObject();
                          *(void *)(v267 + 16) = v392;
                          sub_10001D608(v253, v267 + ((v261 + 24) & ~v261), &qword_10163F728);
                          swift_retain();
                          os_log_t log = Logger.logObject.getter();
                          os_log_type_t v370 = static os_log_type_t.info.getter();
                          uint64_t v408 = swift_allocObject();
                          *(unsigned char *)(v408 + 16) = 112;
                          uint64_t v268 = swift_allocObject();
                          *(unsigned char *)(v268 + 16) = 8;
                          uint64_t v269 = swift_allocObject();
                          *(void *)(v269 + 16) = 1752392040;
                          uint64_t v387 = swift_allocObject();
                          *(void *)(v387 + 16) = sub_10006550C;
                          *(void *)(v387 + 24) = v269;
                          uint64_t v380 = swift_allocObject();
                          *(unsigned char *)(v380 + 16) = 33;
                          uint64_t v270 = swift_allocObject();
                          *(unsigned char *)(v270 + 16) = 8;
                          uint64_t v271 = swift_allocObject();
                          *(void *)(v271 + 16) = sub_1000654F4;
                          *(void *)(v271 + 24) = v389;
                          uint64_t v272 = swift_allocObject();
                          *(void *)(v272 + 16) = sub_1000654EC;
                          *(void *)(v272 + 24) = v271;
                          unint64_t v377 = v272;
                          uint64_t v385 = swift_allocObject();
                          *(unsigned char *)(v385 + 16) = 34;
                          uint64_t v390 = swift_allocObject();
                          *(unsigned char *)(v390 + 16) = 8;
                          uint64_t v273 = swift_allocObject();
                          *(void *)(v273 + 16) = sub_10025B4F8;
                          *(void *)(v273 + 24) = v375;
                          uint64_t v274 = swift_allocObject();
                          *(void *)(v274 + 16) = sub_1000654EC;
                          *(void *)(v274 + 24) = v273;
                          uint64_t v374 = swift_allocObject();
                          *(unsigned char *)(v374 + 16) = 34;
                          uint64_t v376 = swift_allocObject();
                          *(unsigned char *)(v376 + 16) = 8;
                          uint64_t v275 = swift_allocObject();
                          *(void *)(v275 + 16) = sub_10025B508;
                          *(void *)(v275 + 24) = v372;
                          unint64_t v393 = v268;
                          uint64_t v276 = swift_allocObject();
                          *(void *)(v276 + 16) = sub_1000654EC;
                          *(void *)(v276 + 24) = v275;
                          uint64_t v277 = v276;
                          unint64_t v373 = v276;
                          uint64_t v371 = swift_allocObject();
                          *(unsigned char *)(v371 + 16) = 0;
                          uint64_t v412 = swift_allocObject();
                          *(unsigned char *)(v412 + 16) = 8;
                          uint64_t v278 = swift_allocObject();
                          *(void *)(v278 + 16) = sub_10025B514;
                          *(void *)(v278 + 24) = v267;
                          uint64_t v279 = swift_allocObject();
                          *(void *)(v279 + 16) = sub_100060004;
                          *(void *)(v279 + 24) = v278;
                          sub_10000588C(&qword_101639B60);
                          uint64_t v280 = swift_allocObject();
                          sub_1004B810C(v280, 15);
                          *uint64_t v281 = sub_100065514;
                          v281[1] = v408;
                          v281[2] = sub_100065514;
                          v281[3] = v268;
                          v281[4] = sub_100065504;
                          v281[5] = v387;
                          v281[6] = sub_100065514;
                          v281[7] = v380;
                          v281[8] = sub_100065514;
                          v281[9] = v270;
                          v281[10] = sub_100065500;
                          v281[11] = v272;
                          v281[12] = sub_100065514;
                          v281[13] = v385;
                          v281[14] = sub_100065514;
                          v281[15] = v390;
                          v281[16] = sub_100065500;
                          v281[17] = v274;
                          v281[18] = sub_100065514;
                          v281[19] = v374;
                          v281[20] = sub_100065514;
                          v281[21] = v376;
                          v281[22] = sub_100065500;
                          v281[23] = v277;
                          v281[24] = sub_100065514;
                          v281[25] = v371;
                          v281[26] = sub_100065514;
                          v281[27] = v412;
                          v281[28] = sub_10006000C;
                          v281[29] = v279;
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_bridgeObjectRelease();
                          if (os_log_type_enabled(log, v370))
                          {
                            unint64_t v368 = v279;
                            unint64_t v282 = (uint8_t *)sub_1008F9FAC();
                            uint64_t v283 = swift_slowAlloc();
                            uint64_t v482 = 0;
                            uint64_t v483 = v283;
                            *(_WORD *)unint64_t v282 = 1283;
                            uint64_t v481 = v282 + 2;
                            uint64_t v484 = sub_100065514;
                            unint64_t v485 = v408;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            uint64_t v222 = v394;
                            swift_release();
                            uint64_t v484 = sub_100065514;
                            unint64_t v485 = v393;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            uint64_t v81 = v480;
                            swift_release();
                            uint64_t v484 = (uint64_t (*)())sub_100065504;
                            unint64_t v485 = v387;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            swift_release();
                            uint64_t v484 = sub_100065514;
                            unint64_t v485 = v380;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            swift_release();
                            uint64_t v484 = sub_100065514;
                            unint64_t v485 = v270;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            uint64_t v99 = v434;
                            uint64_t v87 = v421;
                            swift_release();
                            uint64_t v484 = sub_100065500;
                            unint64_t v485 = v377;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            swift_release();
                            uint64_t v484 = sub_100065514;
                            unint64_t v485 = v385;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            swift_release();
                            uint64_t v484 = sub_100065514;
                            unint64_t v485 = v390;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            swift_release();
                            uint64_t v484 = sub_100065500;
                            unint64_t v485 = v274;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            swift_release();
                            uint64_t v484 = sub_100065514;
                            unint64_t v485 = v374;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            swift_release();
                            uint64_t v484 = sub_100065514;
                            unint64_t v485 = v376;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            unint64_t v97 = v422;
                            swift_release();
                            uint64_t v484 = sub_100065500;
                            unint64_t v485 = v373;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            swift_release();
                            uint64_t v484 = sub_100065514;
                            unint64_t v485 = v371;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            swift_release();
                            uint64_t v484 = sub_100065514;
                            unint64_t v485 = v412;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            swift_release();
                            uint64_t v484 = (uint64_t (*)())sub_10006000C;
                            unint64_t v485 = v368;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v484, (uint64_t)&v481, (uint64_t)&v482, (uint64_t)&v483);
                            uint64_t v284 = *(void *)(v480 + 1352);
                            uint64_t v409 = *(void *)(v480 + 1392);
                            uint64_t v413 = *(void *)(v480 + 1320);
                            swift_release();
                            _os_log_impl((void *)&_mh_execute_header, log, v370, "Return search result for beacon (own beacon): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", v282, 0x34u);
                            swift_arrayDestroy();
                            swift_slowDealloc();
                            sub_1008F9FA0();

                            (*v425)(v409, v284);
                            sub_10001DAB4(v413, &qword_10163F728);
                            uint64_t v221 = v478;
                            goto LABEL_114;
                          }
                          uint64_t v81 = v480;
                          uint64_t v285 = *(void *)(v480 + 1392);
                          uint64_t v286 = *(void *)(v480 + 1352);
                          uint64_t v287 = *(void *)(v480 + 1320);

                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          (*v425)(v285, v286);
                          sub_10001DAB4(v287, &qword_10163F728);
                          uint64_t v87 = v421;
                          unint64_t v97 = v422;
                          uint64_t v99 = v434;
                          uint64_t v221 = v478;
                        }
                        uint64_t v222 = v394;
LABEL_114:
                        sub_10025C56C(*(void *)(v81 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                        uint64_t v163 = v463 + 1;
                        if (v468 == v222) {
                          goto LABEL_123;
                        }
                      }
                    }
LABEL_35:
                    sub_10001CFB8(v87, v97);
                    sub_10001CFB8(v87, v97);
LABEL_36:
                    sub_10025C56C(*(void *)(v480 + 1104), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                    v462 = 0;
                    v107 += v447;
                    if (!--v109)
                    {
                      swift_bridgeObjectRelease();
                      v462 = 0;
                      unint64_t v97 = v422;
                      unint64_t v147 = v444;
                      goto LABEL_93;
                    }
                    break;
                }
                continue;
              }
              if (!v129)
              {
                uint64_t v350 = BYTE6(v128);
                goto LABEL_178;
              }
              if (v129 == 1)
              {
                if (!__OFSUB__(HIDWORD(v126), v126))
                {
                  uint64_t v350 = HIDWORD(v126) - (int)v126;
LABEL_178:
                  sub_10013019C();
                  uint64_t v348 = swift_allocError();
                  *(void *)uint64_t v359 = 28;
                  *(void *)(v359 + 8) = v350;
                  *(unsigned char *)(v359 + 16) = 0;
                  swift_willThrow();
                  goto LABEL_179;
                }
                __break(1u);
              }
              else
              {
                uint64_t v358 = *(void *)(v126 + 16);
                uint64_t v357 = *(void *)(v126 + 24);
                uint64_t v350 = v357 - v358;
                if (!__OFSUB__(v357, v358)) {
                  goto LABEL_178;
                }
              }
              __break(1u);
              break;
            case 2uLL:
              uint64_t v132 = *(void *)(v126 + 16);
              uint64_t v131 = *(void *)(v126 + 24);
              BOOL v124 = __OFSUB__(v131, v132);
              uint64_t v130 = v131 - v132;
              if (!v124) {
                goto LABEL_70;
              }
              goto LABEL_191;
            case 3uLL:
              uint64_t v350 = 0;
              goto LABEL_178;
            default:
              uint64_t v130 = BYTE6(v128);
              goto LABEL_70;
          }
          goto LABEL_203;
        }
LABEL_165:
        uint64_t v335 = v87;
        unint64_t v336 = v97;
LABEL_163:
        sub_10001CFB8(v335, v336);
        return _assertionFailure(_:_:file:line:flags:)();
      case 2uLL:
        uint64_t v123 = *(void *)(v87 + 16);
        uint64_t v122 = *(void *)(v87 + 24);
        BOOL v124 = __OFSUB__(v122, v123);
        uint64_t v121 = v122 - v123;
        if (!v124) {
          goto LABEL_63;
        }
        goto LABEL_188;
      case 3uLL:
        goto LABEL_165;
      default:
        uint64_t v121 = BYTE6(v97);
        goto LABEL_63;
    }
  }
}

uint64_t sub_100242F40()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1000);
  swift_task_dealloc();
  return _swift_task_switch(sub_100243050, v1, 0);
}

uint64_t sub_100243050()
{
  uint64_t v508 = v0;
  if (*(void *)(v0 + 288))
  {
    __int16 v497 = *(unsigned __int8 *)(v0 + 1836);
    uint64_t v485 = *(unsigned __int8 *)(v0 + 1832);
    uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1720);
    uint64_t v2 = *(void *)(v0 + 1568);
    uint64_t v3 = *(void *)(v0 + 1560);
    uint64_t v4 = *(void *)(v0 + 1528);
    uint64_t v5 = *(void *)(v0 + 1344);
    uint64_t v6 = *(void *)(v0 + 1336);
    uint64_t v452 = *(void *)(v0 + 1208);
    uint64_t v457 = *(void *)(v0 + 1280);
    uint64_t v7 = *(void *)(v0 + 1160);
    unint64_t v474 = *(void *)(v0 + 1152);
    uint64_t v481 = *(void *)(v0 + 1176);
    uint64_t v466 = v5 + *(int *)(v0 + 2020);
    uint64_t v470 = *(void *)(v0 + 1128);
    sub_10001CEB0((long long *)(v0 + 264), v0 + 344);
    v1(v3, v2, v4);
    sub_10001D010(v0 + 424, v0 + 184);
    sub_1012D6E2C(v3, (long long *)(v0 + 184), v452);
    uint64_t v8 = v6 + *(int *)(v457 + 48);
    v1(v6, v5, v4);
    sub_10025C504(v466, v8, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v7 + 16))(v481, v8 + *(int *)(v470 + 20), v474);
    sub_10025C56C(v8, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 2000) = v9;
    if (v485 == 3) {
      __int16 v10 = 0;
    }
    else {
      __int16 v10 = v497;
    }
    *uint64_t v9 = v0;
    v9[1] = sub_100247E3C;
    uint64_t v11 = *(void *)(v0 + 1208);
    uint64_t v12 = *(void *)(v0 + 1176);
    return sub_1010ECB08(v11, v12, v10 | (unsigned __int16)((v485 == 3) << 8), v0 + 344);
  }
  uint64_t v14 = *(void *)(v0 + 1224);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 424);
  sub_10001DAB4(v0 + 224, &qword_10163F740);
  sub_10025C56C(v14, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_10001DAB4(v0 + 264, (uint64_t *)&unk_10163BBE0);
  uint64_t v482 = *(void *)(v0 + 1984);
  uint64_t v15 = *(void *)(v0 + 1648);
  uint64_t v16 = *(void *)(v0 + 1568);
  swift_beginAccess();
  uint64_t v17 = sub_1000F790C(v16, *(void *)(v15 + 16));
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1720);
  uint64_t v19 = *(void *)(v0 + 1648);
  unint64_t v475 = *(void *)(v0 + 1568);
  uint64_t v492 = *(void *)(v0 + 1536);
  uint64_t v498 = *(void *)(v0 + 1560);
  uint64_t v20 = *(void *)(v0 + 1528);
  uint64_t v21 = *(void *)(v0 + 1344);
  uint64_t v22 = *(void *)(v0 + 1328);
  uint64_t v486 = v21 + *(int *)(v0 + 2020);
  uint64_t v23 = v0;
  uint64_t v24 = *(void *)(v0 + 1280);
  if (v17)
  {
    uint64_t v25 = *(void *)(v23 + 1144);
    *(void *)(v23 + 896) = v17;
    swift_endAccess();
    uint64_t v26 = (unsigned __int8 *)(v22 + *(int *)(v24 + 48));
    v18(v22, v21, v20);
    sub_10025C504(v486, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_100DCCAA4(v25, v26);
    sub_10025C56C(v25, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v492 + 8);
    v27(v22, v20);
    v18(v498, v475, v20);
    uint64_t v28 = *(void *)(v23 + 896);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v506 = *(uint64_t (**)())(v19 + 16);
    *(void *)(v19 + 16) = 0x8000000000000000;
    sub_10016D370(v28, v498, isUniquelyReferenced_nonNull_native);
    *(void *)(v19 + 16) = v506;
    swift_bridgeObjectRelease();
    v27(v498, v20);
  }
  else
  {
    swift_endAccess();
    uint64_t v458 = v20;
    v18(v498, v475, v20);
    sub_10000588C(&qword_10163AA18);
    uint64_t v30 = swift_allocObject();
    uint64_t v31 = sub_1004B7688(v30, 1);
    uint64_t v33 = v32;
    uint64_t v34 = v22 + *(int *)(v24 + 48);
    v18(v22, v21, v458);
    sub_10025C504(v486, v34, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_10025C5CC(v34, v33, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v35 = SharingCircleWildAdvertisementKey.init(key:)(v31);
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v492 + 8);
    v36(v22, v458);
    uint64_t v37 = sub_101158D6C(v35);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v506 = *(uint64_t (**)())(v19 + 16);
    *(void *)(v19 + 16) = 0x8000000000000000;
    sub_10016D370(v37, v498, v38);
    *(void *)(v19 + 16) = v506;
    swift_bridgeObjectRelease();
    v36(v498, v458);
  }
  swift_endAccess();
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v39 = *(int *)(v23 + 2020);
  unint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 1720);
  v462 = *(void (**)(unint64_t, uint64_t, uint64_t))(v23 + 1704);
  unint64_t v476 = *(void *)(v23 + 1648);
  uint64_t v41 = *(void *)(v23 + 1568);
  uint64_t v42 = *(void *)(v23 + 1560);
  uint64_t v43 = (void *)v23;
  uint64_t v502 = v23;
  uint64_t v44 = *(void *)(v23 + 1536);
  uint64_t v45 = *(void *)(v23 + 1528);
  uint64_t v46 = v43[176];
  uint64_t v47 = v43[170];
  uint64_t v48 = v43[169];
  uint64_t v49 = v43[166];
  uint64_t v493 = v43[168];
  uint64_t v467 = v43[161];
  uint64_t v459 = v493 + v39;
  uint64_t v453 = v43[160];
  uint64_t v50 = sub_100010324(v48, (uint64_t)qword_10170D9D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v46, v50, v48);
  uint64_t v449 = v40;
  v40(v42, v41, v45);
  unint64_t v51 = (*(unsigned __int8 *)(v44 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  uint64_t v52 = swift_allocObject();
  v462(v52 + v51, v42, v45);
  uint64_t v487 = swift_allocObject();
  *(void *)(v487 + 16) = sub_10025B7C4;
  *(void *)(v487 + 24) = v52;
  uint64_t v53 = v49 + *(int *)(v453 + 48);
  v40(v49, v493, v45);
  sub_10025C504(v459, v53, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v54 = *(unsigned __int8 *)(v467 + 80);
  uint64_t v55 = (v54 + 16) & ~v54;
  uint64_t v56 = swift_allocObject();
  sub_10001D608(v49, v56 + v55, &qword_10163F728);
  uint64_t v463 = swift_allocObject();
  *(void *)(v463 + 16) = sub_10025B4F4;
  *(void *)(v463 + 24) = v56;
  uint64_t v57 = v49 + *(int *)(v453 + 48);
  v449(v49, v493, v45);
  sub_10025C504(v459, v57, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v58 = swift_allocObject();
  sub_10001D608(v49, v58 + v55, &qword_10163F728);
  uint64_t v444 = swift_allocObject();
  *(void *)(v444 + 16) = sub_10025B504;
  *(void *)(v444 + 24) = v58;
  uint64_t v59 = v49 + *(int *)(v453 + 48);
  v449(v49, v493, v45);
  sub_10025C504(v459, v59, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = v476;
  sub_10001D608(v49, v60 + ((v54 + 24) & ~v54), &qword_10163F728);
  swift_retain();
  uint64_t v450 = Logger.logObject.getter();
  LOBYTE(v442) = static os_log_type_t.info.getter();
  uint64_t v61 = swift_allocObject();
  *(unsigned char *)(v61 + 16) = 112;
  uint64_t v62 = v61;
  uint64_t v499 = swift_allocObject();
  *(unsigned char *)(v499 + 16) = 8;
  uint64_t v63 = swift_allocObject();
  *(void *)(v63 + 16) = 1752392040;
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = sub_10006550C;
  *(void *)(v64 + 24) = v63;
  uint64_t v65 = v64;
  uint64_t v477 = swift_allocObject();
  *(unsigned char *)(v477 + 16) = 33;
  uint64_t v494 = swift_allocObject();
  *(unsigned char *)(v494 + 16) = 8;
  uint64_t v66 = swift_allocObject();
  *(void *)(v66 + 16) = sub_1000654F4;
  *(void *)(v66 + 24) = v487;
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = sub_1000654EC;
  *(void *)(v67 + 24) = v66;
  uint64_t v68 = v67;
  uint64_t v471 = v67;
  uint64_t v460 = swift_allocObject();
  *(unsigned char *)(v460 + 16) = 34;
  uint64_t v468 = swift_allocObject();
  *(unsigned char *)(v468 + 16) = 8;
  uint64_t v69 = swift_allocObject();
  *(void *)(v69 + 16) = sub_10025C990;
  *(void *)(v69 + 24) = v463;
  uint64_t v454 = swift_allocObject();
  *(void *)(v454 + 16) = sub_1000654EC;
  *(void *)(v454 + 24) = v69;
  uint64_t v488 = swift_allocObject();
  *(unsigned char *)(v488 + 16) = 34;
  uint64_t v447 = swift_allocObject();
  *(unsigned char *)(v447 + 16) = 8;
  uint64_t v70 = swift_allocObject();
  *(void *)(v70 + 16) = sub_10025C994;
  *(void *)(v70 + 24) = v444;
  uint64_t v71 = swift_allocObject();
  *(void *)(v71 + 16) = sub_1000654EC;
  *(void *)(v71 + 24) = v70;
  uint64_t v72 = v71;
  uint64_t v445 = swift_allocObject();
  *(unsigned char *)(v445 + 16) = 0;
  uint64_t v464 = swift_allocObject();
  *(unsigned char *)(v464 + 16) = 8;
  uint64_t v73 = swift_allocObject();
  *(void *)(v73 + 16) = sub_10025B514;
  *(void *)(v73 + 24) = v60;
  uint64_t v74 = swift_allocObject();
  *(void *)(v74 + 16) = sub_10006569C;
  *(void *)(v74 + 24) = v73;
  sub_10000588C(&qword_101639B60);
  uint64_t v75 = swift_allocObject();
  sub_1004B810C(v75, 15);
  void *v76 = sub_100065514;
  v76[1] = v62;
  v76[2] = sub_100065514;
  v76[3] = v499;
  v76[4] = sub_100065504;
  v76[5] = v65;
  v76[6] = sub_100065514;
  v76[7] = v477;
  v76[8] = sub_100065514;
  v76[9] = v494;
  v76[10] = sub_100065500;
  v76[11] = v68;
  v76[12] = sub_100065514;
  v76[13] = v460;
  v76[14] = sub_100065514;
  v76[15] = v468;
  v76[16] = sub_100065500;
  v76[17] = v454;
  v76[18] = sub_100065514;
  v76[19] = v488;
  v76[20] = sub_100065514;
  v76[21] = v447;
  v76[22] = sub_100065500;
  v76[23] = v72;
  uint64_t v77 = v72;
  v76[24] = sub_100065514;
  v76[25] = v445;
  v76[26] = sub_100065514;
  v76[27] = v464;
  v76[28] = sub_100065504;
  v76[29] = v74;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v435 = v74;
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v450, (os_log_type_t)v442))
  {
    unint64_t v439 = *(void *)(v502 + 1824);
    uint64_t v82 = *(void *)(v502 + 1816);
    uint64_t v83 = *(void *)(v502 + 1408);
    uint64_t v84 = *(void *)(v502 + 1360);
    uint64_t v443 = *(void *)(v502 + 1352);
    uint64_t v85 = *(void *)(v502 + 1344);
    uint64_t v86 = *(void *)(v502 + 1256);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10001CFB8(v82, v439);
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v83, v443);
    sub_10001DAB4(v86, &qword_101657910);
    sub_10001DAB4(v85, &qword_10163F728);
    goto LABEL_20;
  }
  uint64_t v78 = (_WORD *)sub_1008F9FAC();
  uint64_t v79 = swift_slowAlloc();
  *(void *)(v502 + 856) = 0;
  *(void *)(v502 + 824) = v79;
  *uint64_t v78 = 1283;
  *(void *)(v502 + 864) = v78 + 1;
  *(void *)(v502 + 648) = sub_100065514;
  *(void *)(v502 + 656) = v62;
  uint64_t v438 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v502 + 648);
  uint64_t v431 = v502 + 864;
  uint64_t v433 = v502 + 824;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v502 + 648), v502 + 864, v502 + 856, v502 + 824);
  if (v482)
  {
    return swift_errorRelease();
  }
  swift_release();
  *(void *)(v502 + 648) = sub_100065514;
  *(void *)(v502 + 656) = v499;
  sub_1008F9FB4(v438, v431, v502 + 856, v433);
  swift_release();
  *(void *)(v502 + 648) = sub_100065504;
  *(void *)(v502 + 656) = v65;
  sub_1008F9FB4(v438, v431, v502 + 856, v433);
  swift_release();
  *(void *)(v502 + 648) = sub_100065514;
  *(void *)(v502 + 656) = v477;
  sub_1008F9FB4(v438, v431, v502 + 856, v433);
  swift_release();
  *(void *)(v502 + 648) = sub_100065514;
  *(void *)(v502 + 656) = v494;
  sub_1008F9FB4(v438, v431, v502 + 856, v433);
  swift_release();
  *(void *)(v502 + 648) = sub_100065500;
  *(void *)(v502 + 656) = v471;
  sub_1008F9FB4(v438, v431, v502 + 856, v433);
  swift_release();
  *(void *)(v502 + 648) = sub_100065514;
  *(void *)(v502 + 656) = v460;
  sub_1008F9FB4(v438, v431, v502 + 856, v433);
  swift_release();
  *(void *)(v502 + 648) = sub_100065514;
  *(void *)(v502 + 656) = v468;
  sub_1008F9FB4(v438, v431, v502 + 856, v433);
  uint64_t v80 = (uint64_t)v78;
  unint64_t v81 = (unint64_t)v450;
  swift_release();
  *(void *)(v502 + 648) = sub_100065500;
  *(void *)(v502 + 656) = v454;
  sub_1008F9FB4(v438, v431, v502 + 856, v433);
  swift_release();
  *(void *)(v502 + 648) = sub_100065514;
  *(void *)(v502 + 656) = v488;
  sub_1008F9FB4(v438, v431, v502 + 856, v433);
  swift_release();
  *(void *)(v502 + 648) = sub_100065514;
  *(void *)(v502 + 656) = v447;
  sub_1008F9FB4(v438, v431, v502 + 856, v433);
  swift_release();
  *(void *)(v502 + 648) = sub_100065500;
  *(void *)(v502 + 656) = v77;
  sub_1008F9FB4(v438, v431, v502 + 856, v433);
  swift_release();
  *(void *)(v502 + 648) = sub_100065514;
  *(void *)(v502 + 656) = v445;
  sub_1008F9FB4(v438, v431, v502 + 856, v433);
  swift_release();
  *(void *)(v502 + 648) = sub_100065514;
  *(void *)(v502 + 656) = v464;
  sub_1008F9FB4(v438, v431, v502 + 856, v433);
  swift_release();
  *(void *)(v502 + 648) = sub_100065504;
  *(void *)(v502 + 656) = v435;
  sub_1008F9FB4(v438, v431, v502 + 856, v433);
LABEL_202:
  uint64_t v376 = *(void *)(v502 + 1816);
  uint64_t v377 = *(void *)(v502 + 1360);
  unint64_t v480 = *(void *)(v502 + 1824);
  uint64_t v484 = *(void *)(v502 + 1352);
  uint64_t v501 = *(void *)(v502 + 1344);
  uint64_t v491 = *(void *)(v502 + 1408);
  uint64_t v496 = *(void *)(v502 + 1256);
  swift_release();
  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v81, (os_log_type_t)v442, "Return search result for beacon (wild): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", (uint8_t *)v80, 0x34u);
  swift_arrayDestroy();
  swift_slowDealloc();
  sub_1008F9FA0();

  swift_release();
  sub_10001CFB8(v376, v480);
  (*(void (**)(uint64_t, uint64_t))(v377 + 8))(v491, v484);
  sub_10001DAB4(v496, &qword_101657910);
  sub_10001DAB4(v501, &qword_10163F728);
  uint64_t v482 = 0;
LABEL_20:
  uint64_t v87 = v502;
  uint64_t v88 = *(void *)(v502 + 1808) + 1;
  if (v88 != *(void *)(v502 + 1800))
  {
    *(void *)(v502 + 1808) = v88;
    unint64_t v300 = *(void *)(v502 + 1752);
    uint64_t v301 = *(void *)(v502 + 1792) + 24 * v88;
    uint64_t v302 = *(void *)(v301 + 32);
    *(void *)(v502 + 1816) = v302;
    uint64_t v94 = *(void *)(v301 + 40);
    *(void *)(v502 + 1824) = v94;
    int v303 = *(_DWORD *)(v301 + 48);
    *(unsigned char *)(v502 + 1836) = *(unsigned char *)(v301 + 52);
    *(_DWORD *)(v502 + 1832) = v303;
    uint64_t v304 = 0;
    uint64_t v305 = 0;
    switch(v300 >> 62)
    {
      case 1uLL:
        sub_100037A38(*(void *)(v502 + 1744), v300);
        uint64_t v332 = *(void *)(v502 + 1744);
        uint64_t v304 = v332 >> 32;
        uint64_t v305 = (int)v332;
        break;
      case 2uLL:
        uint64_t v333 = *(void *)(v502 + 1744);
        uint64_t v305 = *(void *)(v333 + 16);
        uint64_t v304 = *(void *)(v333 + 24);
        sub_100037A38(v333, v300);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v305 = 0;
        uint64_t v304 = BYTE6(v300);
        break;
    }
    unint64_t v334 = sub_1008AA59C(v305, v304, *(void *)(v502 + 1744), *(void *)(v502 + 1752));
    unint64_t v81 = *(void *)(v502 + 1752);
    if (v334 < 0x39)
    {
      switch(v81 >> 62)
      {
        case 1uLL:
          uint64_t v337 = *(void *)(v502 + 1744);
          uint64_t v335 = v337 >> 32;
          uint64_t v336 = (int)v337;
          goto LABEL_151;
        case 2uLL:
          uint64_t v338 = *(void *)(v502 + 1744);
          uint64_t v336 = *(void *)(v338 + 16);
          uint64_t v335 = *(void *)(v338 + 24);
          goto LABEL_151;
        default:
          goto LABEL_153;
      }
    }
    uint64_t v335 = sub_1008AA520(v305, 57, *(void *)(v502 + 1744), *(void *)(v502 + 1752));
    uint64_t v336 = 0;
    switch(v81 >> 62)
    {
      case 1uLL:
        uint64_t v336 = (int)*(void *)(v502 + 1744);
        break;
      case 2uLL:
        uint64_t v336 = *(void *)(*(void *)(v502 + 1744) + 16);
        break;
      default:
        break;
    }
LABEL_151:
    if (v335 >= v336)
    {
      unint64_t v81 = *(void *)(v502 + 1752);
LABEL_153:
      uint64_t v339 = *(void *)(v502 + 1744);
      sub_1000361E0(v302, v94);
      sub_1000361E0(v302, v94);
      uint64_t v87 = Data._Representation.subscript.getter();
      unint64_t v341 = v340;
      sub_100037A24(v339, v81);
      switch(v341 >> 62)
      {
        case 1uLL:
          LODWORD(v342) = HIDWORD(v87) - v87;
          if (__OFSUB__(HIDWORD(v87), v87)) {
            goto LABEL_196;
          }
          uint64_t v342 = (int)v342;
          goto LABEL_158;
        case 2uLL:
          uint64_t v344 = *(void *)(v87 + 16);
          uint64_t v343 = *(void *)(v87 + 24);
          BOOL v129 = __OFSUB__(v343, v344);
          uint64_t v342 = v343 - v344;
          if (v129) {
            goto LABEL_197;
          }
          goto LABEL_158;
        case 3uLL:
          goto LABEL_161;
        default:
          uint64_t v342 = BYTE6(v341);
LABEL_158:
          if (v342 != 57)
          {
LABEL_161:
            uint64_t v347 = v87;
            unint64_t v348 = v341;
            goto LABEL_162;
          }
          sub_1000361E0(v87, v341);
          uint64_t v345 = sub_100A94760(v87, v341);
          if (v482)
          {
            sub_10001CFB8(v87, v341);
            uint64_t v506 = 0;
            unint64_t v507 = 0xE000000000000000;
            _StringGuts.grow(_:)(35);
            unint64_t v351 = v507;
            *(void *)(v502 + 632) = v506;
            *(void *)(v502 + 640) = v351;
            v352._object = (void *)0x80000001013F3B70;
            v352._countAndFlagsBits = 0xD000000000000021;
            String.append(_:)(v352);
            *(void *)(v502 + 936) = v482;
            sub_10000588C(&qword_101638D40);
            _print_unlocked<A, B>(_:_:)();
            return _assertionFailure(_:_:file:line:flags:)();
          }
          uint64_t v349 = v345;
          unint64_t v350 = v346;
          sub_10001CFB8(v87, v341);
          sub_100434E0C(v349, v350, (uint64_t *)(v502 + 696));
          sub_10001CFB8(v87, v341);
          uint64_t v363 = *(void *)(v502 + 696);
          *(void *)(v502 + 1840) = v363;
          uint64_t v364 = *(void *)(v502 + 704);
          *(void *)(v502 + 1848) = v364;
          uint64_t v365 = (void *)swift_task_alloc();
          *(void *)(v502 + 1856) = v365;
          *uint64_t v365 = v502;
          v365[1] = sub_100233AA0;
          uint64_t v366 = *(void *)(v502 + 1784);
          uint64_t v367 = *(void *)(v502 + 1568);
          uint64_t v368 = *(void *)(v502 + 1272);
          uint64_t result = sub_10025916C(v368, v302, v94, v366, v363, v364, 0, v367);
          break;
      }
      return result;
    }
    goto LABEL_185;
  }
  uint64_t v89 = *(void **)(v502 + 1784);
  unint64_t v90 = *(void *)(v502 + 1752);
  uint64_t v91 = *(void *)(v502 + 1744);
  uint64_t v92 = *(void *)(v502 + 1632);
  uint64_t v93 = *(void *)(v502 + 1576);
  uint64_t v94 = *(void *)(v502 + 1568);
  uint64_t v95 = *(void *)(v502 + 1536);
  uint64_t v96 = *(void *)(v502 + 1528);
  sub_10001CFB8(*(void *)(v502 + 1672), *(void *)(v502 + 1680));

  sub_100037A24(v91, v90);
  swift_bridgeObjectRelease();
  unint64_t v97 = *(NSObject **)(v95 + 8);
  ((void (*)(uint64_t, uint64_t))v97)(v93, v96);
  sub_10025C56C(v92, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  ((void (*)(uint64_t, uint64_t))v97)(v94, v96);
  uint64_t v87 = v502;
  unint64_t v98 = *(void *)(v502 + 1664) + 1;
  if (v98 != *(void *)(v502 + 1656))
  {
    uint64_t v94 = (uint64_t)&qword_101638CF0;
    do
    {
      *(void *)(v87 + 1664) = v98;
      os_log_type_t v307 = *(void **)(v87 + 984);
      if (!v307) {
        os_log_type_t v307 = _swiftEmptyArrayStorage;
      }
      if (v98 >= v307[2])
      {
        __break(1u);
        sub_10001CFB8(v91, (unint64_t)v97);
        uint64_t v506 = 0;
        unint64_t v507 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        unint64_t v374 = v507;
        *(void *)(v502 + 744) = v506;
        *(void *)(v502 + 752) = v374;
        v375._object = (void *)0x80000001013F3B70;
        v375._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v375);
        *(void *)(v502 + 848) = v92;
        sub_10000588C(&qword_101638D40);
        _print_unlocked<A, B>(_:_:)();
        return _assertionFailure(_:_:file:line:flags:)();
      }
      uint64_t v308 = *(unsigned __int8 *)(v87 + 2016);
      uint64_t v309 = *(void *)(v87 + 1632);
      uint64_t v310 = *(void *)(v87 + 1592);
      uint64_t v311 = *(void *)(v87 + 1584);
      uint64_t v312 = (uint64_t *)v87;
      uint64_t v313 = *(void *)(v87 + 1536);
      uint64_t v314 = v312[191];
      uint64_t v315 = v312[190];
      sub_10025C504((uint64_t)v307 + ((v308 + 32) & ~v308) + *(void *)(v310 + 72) * v98, v309, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      uint64_t v91 = *(void *)(v309 + 16);
      v312[209] = v91;
      unint64_t v316 = *(void *)(v309 + 24);
      v312[210] = v316;
      sub_10001D074(v309 + *(int *)(v311 + 28), v315, &qword_101638CF0);
      uint64_t v317 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v313 + 48);
      v312[211] = (uint64_t)v317;
      v312[212] = (v313 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
      if (v317(v315, 1, v314) != 1)
      {
        uint64_t v323 = v312[197];
        uint64_t v324 = v312[192];
        uint64_t v325 = v312[191];
        uint64_t v326 = v312[190];
        uint64_t v327 = v312[189];
        unint64_t v328 = *(void (**)(uint64_t, uint64_t, uint64_t))(v324 + 32);
        v312[213] = (uint64_t)v328;
        v312[214] = (v324 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v328(v323, v326, v325);
        unint64_t v329 = *(void (**)(uint64_t, uint64_t, uint64_t))(v324 + 16);
        v312[215] = (uint64_t)v329;
        v312[216] = (v324 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v329(v327, v323, v325);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v324 + 56))(v327, 0, 1, v325);
        sub_1000361E0(v91, v316);
        uint64_t v330 = (void *)swift_task_alloc();
        v312[217] = (uint64_t)v330;
        void *v330 = v312;
        v330[1] = sub_1002280E0;
        uint64_t v331 = v312[189];
        return sub_100257574(v91, v316, v331);
      }
      uint64_t v318 = v312[190];
      sub_1000361E0(v91, v316);
      sub_10001DAB4(v318, &qword_101638CF0);
      uint64_t v87 = (uint64_t)v312;
      if (qword_101636908 != -1) {
        swift_once();
      }
      sub_100010324(v312[169], (uint64_t)qword_10170D9D8);
      unint64_t v97 = Logger.logObject.getter();
      os_log_type_t v319 = static os_log_type_t.error.getter();
      uint64_t v92 = v319;
      if (os_log_type_enabled(v97, v319))
      {
        uint64_t v320 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v320 = 0;
        _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v92, "Missing share id in payload.", v320, 2u);
        swift_slowDealloc();
      }
      uint64_t v306 = v312[204];
      sub_10001CFB8(v91, v316);

      sub_10025C56C(v306, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      unint64_t v98 = v312[208] + 1;
    }
    while (v98 != v312[207]);
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v87 + 976)) {
    unint64_t v81 = *(void *)(v87 + 976);
  }
  else {
    unint64_t v81 = (unint64_t)_swiftEmptyArrayStorage;
  }
  Class v446 = *(Class *)(v81 + 16);
  if (!v446)
  {
    swift_bridgeObjectRetain();
LABEL_136:
    swift_bridgeObjectRelease();
    uint64_t v321 = *(void *)(v87 + 1648);
    swift_beginAccess();
    uint64_t v490 = *(void *)(v321 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v322 = *(uint64_t (**)(uint64_t))(v87 + 8);
    return v322(v490);
  }
  uint64_t v99 = *(void *)(v87 + 1536);
  uint64_t v100 = *(void *)(v87 + 1360);
  unint64_t v425 = (uint64_t *)(v87 + 888);
  uint64_t v426 = *(void *)(v87 + 1280);
  uint64_t v101 = *(void *)(v87 + 1160);
  uint64_t v428 = *(void *)(v87 + 1120);
  uint64_t v489 = *(void *)(v87 + 1104);
  uint64_t v432 = *(void *)(v87 + 1080);
  uint64_t v102 = *(void *)(v87 + 1056);
  unint64_t v469 = (void (**)(uint64_t, void, uint64_t))(v102 + 104);
  uint64_t v416 = *(void *)(v87 + 1040);
  unint64_t v465 = (void (**)(uint64_t, uint64_t))(v102 + 8);
  uint64_t v427 = (void (**)(void))(v99 + 16);
  uint64_t v429 = *(void *)(v87 + 1032);
  uint64_t v415 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v87 + 1192) + 56);
  uint64_t v414 = (void (**)(uint64_t, uint64_t, uint64_t))(v101 + 16);
  uint64_t v413 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56);
  uint64_t v412 = (void (**)(uint64_t))(v99 + 32);
  uint64_t v410 = (void (**)(uint64_t, uint64_t))(v99 + 8);
  uint64_t v103 = *(void *)(*(void *)(v87 + 992) + 16);
  uint64_t v441 = (void (**)(uint64_t, uint64_t, uint64_t))(v100 + 16);
  uint64_t v436 = (void (**)(uint64_t, uint64_t))(v100 + 8);
  unsigned int v461 = enum case for HashAlgorithm.sha256(_:);
  uint64_t v451 = (v81 + 32);
  uint64_t v409 = *(void *)(v87 + 1288);
  uint64_t v411 = *(int **)(v87 + 1016);
  swift_bridgeObjectRetain();
  unint64_t v104 = 0;
  uint64_t v442 = v103;
  uint64_t v434 = v81;
  while (1)
  {
    if (v104 >= *(void *)(v81 + 16)) {
      goto LABEL_188;
    }
    uint64_t v448 = (objc_class *)v104;
    uint64_t v105 = (uint64_t *)&v451[3 * v104];
    uint64_t v106 = *v105;
    unint64_t v107 = v105[1];
    uint64_t v108 = v105[2];
    uint64_t v500 = *v105;
    if (v103) {
      break;
    }
    sub_1000361E0(v106, v107);
    swift_bridgeObjectRetain();
LABEL_92:
    if (qword_101636908 != -1) {
      swift_once();
    }
    uint64_t v153 = *(void *)(v87 + 1376);
    uint64_t v154 = *(void *)(v87 + 1352);
    uint64_t v155 = sub_100010324(v154, (uint64_t)qword_10170D9D8);
    (*v441)(v153, v155, v154);
    sub_1000361E0(v500, v107);
    swift_bridgeObjectRetain();
    sub_1000361E0(v500, v107);
    swift_bridgeObjectRetain();
    uint64_t v94 = Logger.logObject.getter();
    os_log_type_t v156 = static os_log_type_t.error.getter();
    BOOL v157 = os_log_type_enabled((os_log_t)v94, v156);
    uint64_t v158 = *(void *)(v87 + 1376);
    uint64_t v159 = *(void *)(v87 + 1352);
    if (v157)
    {
      uint64_t v160 = swift_slowAlloc();
      uint64_t v506 = (uint64_t (*)())swift_slowAlloc();
      *(_DWORD *)uint64_t v160 = 141558275;
      *(void *)(v160 + 4) = 1752392040;
      *(_WORD *)(v160 + 12) = 2081;
      *(void *)(v502 + 728) = v500;
      *(void *)(v502 + 736) = v107;
      sub_1001D780C();
      uint64_t v161 = RawRepresentable<>.hexString.getter();
      *(void *)(v160 + 14) = sub_1008FA0F0(v161, v162, (uint64_t *)&v506);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v500, v107);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v500, v107);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v94, v156, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v160, 0x16u);
      swift_arrayDestroy();
      unint64_t v81 = (unint64_t)v434;
      swift_slowDealloc();
      uint64_t v87 = v502;
      swift_slowDealloc();

      sub_10001CFB8(v500, v107);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10001CFB8(v500, v107);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v500, v107);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v500, v107);
      swift_bridgeObjectRelease();
    }
    (*v436)(v158, v159);
    uint64_t v103 = v442;
LABEL_98:
    unint64_t v104 = (unint64_t)v448 + 1;
    if ((objc_class *)((char *)v448 + 1) == v446) {
      goto LABEL_136;
    }
  }
  uint64_t v109 = *(void *)(v87 + 992);
  unint64_t v478 = v107 >> 62;
  sub_1000361E0(v106, v107);
  uint64_t v110 = *(unsigned __int8 *)(v432 + 80);
  uint64_t v417 = ~v110;
  uint64_t v421 = v110;
  uint64_t v111 = v109 + ((v110 + 32) & ~v110);
  uint64_t v472 = BYTE6(v107);
  uint64_t v455 = *(void *)(v432 + 72);
  BOOL v112 = __OFSUB__(HIDWORD(v106), v106);
  BOOL v440 = v112;
  uint64_t v437 = HIDWORD(v106) - (int)v106;
  uint64_t v430 = v108;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v113 = v103;
  unint64_t v495 = v107;
  while (2)
  {
    uint64_t v114 = *(uint64_t **)(v87 + 1104);
    sub_10025C504(v111, (uint64_t)v114, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v115 = *v114;
    unint64_t v116 = *(void *)(v489 + 8);
    uint64_t v94 = v116 >> 62;
    uint64_t v117 = 0;
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    uint64_t v120 = 0;
    switch(v116 >> 62)
    {
      case 1uLL:
        uint64_t v117 = (int)v115;
        uint64_t v118 = v115 >> 32;
        sub_1000361E0(v115, *(void *)(v489 + 8));
        uint64_t v119 = v115 >> 32;
        uint64_t v120 = (int)v115;
        break;
      case 2uLL:
        uint64_t v117 = *(void *)(v115 + 16);
        uint64_t v118 = *(void *)(v115 + 24);
        sub_1000361E0(v115, *(void *)(v489 + 8));
        uint64_t v120 = *(void *)(v115 + 16);
        uint64_t v119 = *(void *)(v115 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v117 = 0;
        uint64_t v120 = 0;
        uint64_t v118 = BYTE6(v116);
        uint64_t v119 = BYTE6(v116);
        break;
    }
    if (v119 < v117 || v117 < v120)
    {
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      swift_once();
LABEL_166:
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v353 = swift_allocObject();
      uint64_t v354 = sub_1004B810C(v353, 1);
      uint64_t v356 = v355;
      *unint64_t v425 = v87;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v357 = String.init<A>(describing:)();
      uint64_t v359 = v358;
      v356[3] = (uint64_t)&type metadata for String;
      v356[4] = sub_10000B4CC();
      *uint64_t v356 = v357;
      v356[1] = v359;
      SharingCircleWildAdvertisementKey.init(key:)(v354);
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_100130148();
      uint64_t v360 = swift_allocError();
      unsigned char *v361 = 0;
      swift_willThrow();
      swift_errorRelease();
      unint64_t v132 = v81;
      uint64_t v80 = v94;
      uint64_t v87 = v502;
LABEL_178:
      sub_10001CFB8(v80, v132);
      uint64_t v506 = 0;
      unint64_t v507 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      unint64_t v372 = v507;
      *(void *)(v87 + 680) = v506;
      *(void *)(v87 + 688) = v372;
      v373._object = (void *)0x80000001013F3B70;
      v373._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v373);
      *(void *)(v87 + 872) = v360;
      sub_10000588C(&qword_101638D40);
      _print_unlocked<A, B>(_:_:)();
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v94 = v94;
    uint64_t v121 = 0;
    uint64_t v122 = 0;
    switch((int)v94)
    {
      case 1:
        uint64_t v122 = (int)v115;
        uint64_t v121 = v115 >> 32;
        break;
      case 2:
        uint64_t v122 = *(void *)(v115 + 16);
        uint64_t v121 = *(void *)(v115 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v122 = 0;
        uint64_t v121 = BYTE6(v116);
        break;
    }
    if (v121 < v118 || v118 < v122) {
      goto LABEL_182;
    }
    if (__OFSUB__(v118, v117)) {
      goto LABEL_183;
    }
    if ((unint64_t)(v118 - v117) < 0x39)
    {
      switch((int)v94)
      {
        case 1:
          uint64_t v123 = v115 >> 32;
          goto LABEL_53;
        case 2:
          uint64_t v123 = *(void *)(v115 + 24);
          goto LABEL_55;
        default:
          goto LABEL_57;
      }
    }
    uint64_t v123 = sub_1008AA520(v117, 57, v115, v116);
    uint64_t v124 = 0;
    switch((int)v94)
    {
      case 1:
LABEL_53:
        uint64_t v124 = (int)v115;
        break;
      case 2:
LABEL_55:
        uint64_t v124 = *(void *)(v115 + 16);
        break;
      default:
        break;
    }
    if (v123 < v124) {
      goto LABEL_184;
    }
LABEL_57:
    uint64_t v94 = Data._Representation.subscript.getter();
    unint64_t v81 = (unint64_t)v125;
    sub_10001CFB8(v115, v116);
    switch(v81 >> 62)
    {
      case 1uLL:
        LODWORD(v126) = HIDWORD(v94) - v94;
        if (__OFSUB__(HIDWORD(v94), v94)) {
          goto LABEL_186;
        }
        uint64_t v126 = (int)v126;
LABEL_62:
        if (v126 == 57)
        {
          sub_1000361E0(v94, v81);
          uint64_t v130 = sub_100A948F8(v94, v81);
          uint64_t v87 = v482;
          if (v482)
          {
            static os_log_type_t.error.getter();
            if (qword_101636F48 != -1) {
              goto LABEL_199;
            }
            goto LABEL_166;
          }
          uint64_t v80 = sub_100A90C58(v130, 0);
          unint64_t v132 = v131;
          CCECCryptorRelease();
          sub_10001CFB8(v94, v81);
          unint64_t v133 = v132 >> 62;
          uint64_t v87 = v502;
          unint64_t v107 = v495;
          switch(v132 >> 62)
          {
            case 1uLL:
              LODWORD(v134) = HIDWORD(v80) - v80;
              if (__OFSUB__(HIDWORD(v80), v80)) {
                goto LABEL_189;
              }
              uint64_t v134 = (int)v134;
LABEL_69:
              if (v134 == 28)
              {
                uint64_t v137 = *(void *)(v502 + 1064);
                uint64_t v138 = *(void *)(v502 + 1048);
                sub_10001CFB8(v94, v81);
                (*v469)(v137, v461, v138);
                uint64_t v94 = Data.hash(algorithm:)();
                unint64_t v81 = (unint64_t)v139;
                (*v465)(v137, v138);
                sub_10001CFB8(v80, v132);
                uint64_t v140 = 0;
                switch(v81 >> 62)
                {
                  case 1uLL:
                    if (__OFSUB__(HIDWORD(v94), v94)) {
                      goto LABEL_191;
                    }
                    uint64_t v140 = HIDWORD(v94) - (int)v94;
LABEL_75:
                    sub_1000361E0(v94, v81);
                    break;
                  case 2uLL:
                    uint64_t v142 = *(void *)(v94 + 16);
                    uint64_t v141 = *(void *)(v94 + 24);
                    uint64_t v140 = v141 - v142;
                    if (!__OFSUB__(v141, v142)) {
                      goto LABEL_75;
                    }
                    goto LABEL_192;
                  case 3uLL:
                    break;
                  default:
                    uint64_t v140 = BYTE6(v81);
                    break;
                }
                uint64_t v143 = v472;
                switch((int)v478)
                {
                  case 1:
                    uint64_t v143 = v437;
                    if (v440) {
                      goto LABEL_193;
                    }
                    goto LABEL_80;
                  case 2:
                    uint64_t v145 = *(void *)(v500 + 16);
                    uint64_t v144 = *(void *)(v500 + 24);
                    BOOL v129 = __OFSUB__(v144, v145);
                    uint64_t v143 = v144 - v145;
                    if (v129) {
                      goto LABEL_194;
                    }
                    goto LABEL_80;
                  case 3:
                    if (v140) {
                      goto LABEL_34;
                    }
                    goto LABEL_101;
                  default:
LABEL_80:
                    if (v140 == v143)
                    {
                      if (v140 >= 1)
                      {
                        uint64_t v146 = v500;
                        sub_1000361E0(v500, v495);
                        sub_1000361E0(v500, v495);
                        switch(v81 >> 62)
                        {
                          case 1uLL:
                            if (v94 >> 32 < (int)v94) {
                              goto LABEL_198;
                            }
                            sub_1000361E0(v500, v495);
                            sub_1000361E0(v500, v495);
                            sub_1000361E0(v500, v495);
                            sub_1000361E0(v94, v81);
                            sub_1000361E0(v500, v495);
                            uint64_t v146 = v500;
                            char v149 = sub_100BFBE64((int)v94, v94 >> 32, v81 & 0x3FFFFFFFFFFFFFFFLL, v500, v495);
                            sub_10001CFB8(v500, v495);
                            sub_10001CFB8(v94, v81);
                            break;
                          case 2uLL:
                            uint64_t v151 = *(void *)(v94 + 16);
                            uint64_t v150 = *(void *)(v94 + 24);
                            sub_1000361E0(v500, v495);
                            sub_1000361E0(v500, v495);
                            sub_1000361E0(v500, v495);
                            sub_1000361E0(v500, v495);
                            swift_retain();
                            swift_retain();
                            uint64_t v152 = v151;
                            uint64_t v146 = v500;
                            char v149 = sub_100BFBE64(v152, v150, v81 & 0x3FFFFFFFFFFFFFFFLL, v500, v495);
                            sub_10001CFB8(v500, v495);
                            swift_release();
                            swift_release();
                            break;
                          case 3uLL:
                            sub_1000361E0(v500, v495);
                            sub_1000361E0(v500, v495);
                            sub_1000361E0(v500, v495);
                            sub_1000361E0(v500, v495);
                            unint64_t v147 = v408 & 0xFF00000000000000;
                            uint64_t v148 = 0;
                            v408 &= 0xFF00000000000000;
                            goto LABEL_88;
                          default:
                            sub_1000361E0(v500, v495);
                            sub_1000361E0(v500, v495);
                            sub_1000361E0(v500, v495);
                            sub_1000361E0(v500, v495);
                            unint64_t v147 = v407 & 0xFF00000000000000 | v81 & 0xFFFFFFFFFFFFFFLL;
                            uint64_t v148 = v94;
                            unint64_t v407 = v147;
LABEL_88:
                            char v149 = sub_100BFBD8C(v148, v147, v500, v495);
                            sub_10001CFB8(v500, v495);
                            break;
                        }
                        sub_10001CFB8(v94, v81);
                        sub_10001CFB8(v146, v495);
                        sub_10001CFB8(v94, v81);
                        sub_10001CFB8(v146, v495);
                        sub_10001CFB8(v146, v495);
                        sub_10001CFB8(v146, v495);
                        sub_10001CFB8(v146, v495);
                        if (v149) {
                          goto LABEL_102;
                        }
                        goto LABEL_35;
                      }
LABEL_101:
                      sub_10001CFB8(v94, v81);
                      sub_10001CFB8(v94, v81);
LABEL_102:
                      uint64_t v163 = *(void *)(v502 + 1120);
                      uint64_t v164 = *(void *)(v502 + 1112);
                      uint64_t v165 = *(void *)(v502 + 1104);
                      swift_bridgeObjectRelease();
                      sub_10025C5CC(v165, v164, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                      sub_10025C5CC(v164, v163, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                      uint64_t v94 = v430;
                      uint64_t v166 = sub_1001340BC(v430);
                      if (!v166)
                      {
                        swift_bridgeObjectRetain();
                        unint64_t v81 = (unint64_t)v434;
                        uint64_t v103 = v442;
                        uint64_t v227 = v500;
LABEL_122:
                        uint64_t v299 = *(void *)(v87 + 1120);
                        sub_10001CFB8(v227, v107);
                        swift_bridgeObjectRelease_n();
                        sub_10025C56C(v299, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        uint64_t v482 = 0;
                        goto LABEL_98;
                      }
                      uint64_t v167 = v166;
                      unint64_t v473 = v430
                           + ((*(unsigned __int8 *)(v429 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v429 + 80));
                      uint64_t v456 = (v421 + 16) & v417;
                      swift_bridgeObjectRetain();
                      unint64_t v168 = 0;
                      uint64_t v406 = v167;
                      while (1)
                      {
                        unint64_t v483 = v168 + 1;
                        if (__OFADD__(v168, 1)) {
                          goto LABEL_195;
                        }
                        uint64_t v169 = *(uint64_t **)(v87 + 1120);
                        unint64_t v479 = v168;
                        sub_10025C504(v473 + *(void *)(v429 + 72) * v168, *(void *)(v87 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                        uint64_t v170 = *v169;
                        unint64_t v171 = *(void *)(v428 + 8);
                        uint64_t v172 = v87;
                        SecKeyRef v173 = sub_100435E70(v170, v171);
                        uint64_t v174 = **(void **)(v172 + 1040);
                        unint64_t v175 = *(void *)(v416 + 8);
                        uint64_t v176 = PrivateKey.publicKey.getter(v170, v171);
                        unint64_t v178 = v177;
                        sub_1000361E0(v176, v177);
                        uint64_t v179 = sub_100A94760(v176, v178);
                        unint64_t v181 = v180;
                        sub_10001CFB8(v176, v178);
                        sub_100434E0C(v179, v181, (uint64_t *)&v506);
                        uint64_t v182 = *(void *)(v502 + 1024);
                        sub_10001CFB8(v176, v178);
                        uint64_t v184 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v506;
                        unint64_t v183 = v507;
                        uint64_t v185 = v173;
                        sub_1000361E0(v174, v175);
                        sub_1000361E0((uint64_t)v184, v183);
                        BeaconPayloadv1.init(using:data:advertisement:)(v185, v174, v175, (uint64_t)v184, v183, v182);
                        unint64_t v393 = v185;
                        uint64_t v400 = *(void *)(v502 + 1528);
                        uint64_t v403 = *(void *)(v502 + 1560);
                        uint64_t v186 = *(void *)(v502 + 1264);
                        uint64_t v187 = *(void *)(v502 + 1240);
                        uint64_t v398 = (uint64_t)v184;
                        uint64_t v188 = *(void *)(v502 + 1232);
                        uint64_t v189 = *(void *)(v502 + 1184);
                        uint64_t v190 = *(void *)(v502 + 1168);
                        uint64_t v191 = *(void *)(v502 + 1152);
                        uint64_t v394 = *(unsigned char **)(v502 + 1144);
                        uint64_t v192 = *(void *)(v502 + 1024);
                        uint64_t v193 = *(void *)(v502 + 1008);
                        uint64_t v418 = *(void *)(v502 + 1280);
                        unint64_t v422 = *v427;
                        (*v427)();
                        (*v415)(v187, 1, 1, v189);
                        LODWORD(v189) = *(unsigned __int8 *)(v192 + v411[10]);
                        (*v414)(v190, v192 + v411[5], v191);
                        double v194 = *(double *)(v192 + v411[7]);
                        double v195 = *(double *)(v192 + v411[8]);
                        double v196 = *(double *)(v192 + v411[9]);
                        (*v413)(v193, 1, 1, v191);
                        sub_10001D074(v187, v188, &qword_101657910);
                        sub_100CC2A6C(v189, v190, 15, v193, v188, 256, v394, v194, v195, v196);
                        sub_10001DAB4(v187, &qword_101657910);
                        sub_10025C56C(v192, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                        uint64_t v197 = v186 + *(int *)(v426 + 48);
                        uint64_t v198 = *v412;
                        ((void (*)(uint64_t, uint64_t, uint64_t))*v412)(v186, v403, v400);
                        sub_10025C5CC((uint64_t)v394, v197, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v409 + 56))(v186, 0, 1, v418);
                        sub_10001CFB8(v398, v183);
                        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v409 + 48))(v186, 1, v418) == 1)
                        {
                          uint64_t v199 = *(void *)(v502 + 1264);

                          sub_10001DAB4(v199, &qword_10163F720);
                          if (qword_101636908 != -1) {
                            swift_once();
                          }
                          uint64_t v200 = *(void *)(v502 + 1384);
                          uint64_t v201 = *(void *)(v502 + 1352);
                          uint64_t v202 = *(void *)(v502 + 1120);
                          uint64_t v203 = *(void *)(v502 + 1096);
                          uint64_t v204 = sub_100010324(v201, (uint64_t)qword_10170D9D8);
                          (*v441)(v200, v204, v201);
                          sub_10025C504(v202, v203, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                          uint64_t v205 = swift_allocObject();
                          sub_10025C5CC(v203, v205 + v456, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                          uint64_t v206 = swift_allocObject();
                          *(void *)(v206 + 16) = sub_10025B340;
                          *(void *)(v206 + 24) = v205;
                          uint64_t v207 = Logger.logObject.getter();
                          os_log_type_t v208 = static os_log_type_t.error.getter();
                          uint64_t v209 = swift_allocObject();
                          *(unsigned char *)(v209 + 16) = 112;
                          uint64_t v210 = swift_allocObject();
                          *(unsigned char *)(v210 + 16) = 8;
                          uint64_t v211 = swift_allocObject();
                          *(void *)(v211 + 16) = 1752392040;
                          uint64_t v212 = swift_allocObject();
                          *(void *)(v212 + 16) = sub_100060540;
                          *(void *)(v212 + 24) = v211;
                          uint64_t v213 = swift_allocObject();
                          *(unsigned char *)(v213 + 16) = 33;
                          uint64_t v214 = swift_allocObject();
                          *(unsigned char *)(v214 + 16) = 8;
                          unint64_t v215 = v207;
                          uint64_t v216 = swift_allocObject();
                          *(void *)(v216 + 16) = sub_1000604E8;
                          *(void *)(v216 + 24) = v206;
                          uint64_t v217 = swift_allocObject();
                          *(void *)(v217 + 16) = sub_10005F790;
                          *(void *)(v217 + 24) = v216;
                          sub_10000588C(&qword_101639B60);
                          uint64_t inited = swift_initStackObject();
                          sub_1004B810C(inited, 6);
                          *uint64_t v219 = sub_10005F778;
                          v219[1] = v209;
                          v219[2] = sub_100065514;
                          v219[3] = v210;
                          v219[4] = sub_10006000C;
                          v219[5] = v212;
                          v219[6] = sub_100065514;
                          v219[7] = v213;
                          v219[8] = sub_100065514;
                          v219[9] = v214;
                          v219[10] = sub_10005F7D0;
                          v219[11] = v217;
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_bridgeObjectRelease();
                          if (os_log_type_enabled(v207, v208))
                          {
                            uint64_t v220 = (uint8_t *)swift_slowAlloc();
                            uint64_t v221 = swift_slowAlloc();
                            uint64_t v504 = 0;
                            uint64_t v505 = v221;
                            *(_WORD *)uint64_t v220 = 515;
                            unint64_t v503 = v220 + 2;
                            sub_1008FA6E0(&v503, (uint64_t)&v504, (uint64_t)&v505, 112);
                            swift_release();
                            uint64_t v506 = sub_100065514;
                            unint64_t v507 = v210;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            swift_release();
                            uint64_t v506 = (uint64_t (*)())sub_10006000C;
                            unint64_t v507 = v212;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            swift_release();
                            uint64_t v506 = sub_100065514;
                            unint64_t v507 = v213;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            swift_release();
                            uint64_t v506 = sub_100065514;
                            unint64_t v507 = v214;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            swift_release();
                            uint64_t v506 = (uint64_t (*)())sub_10005F7D0;
                            unint64_t v507 = v217;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            uint64_t v87 = v502;
                            uint64_t v222 = v215;
                            uint64_t v223 = *(void *)(v502 + 1384);
                            uint64_t v224 = *(void *)(v502 + 1352);
                            swift_release();
                            _os_log_impl((void *)&_mh_execute_header, v222, v208, "Could not create search result for beacon: %{private,mask.hash}s.", v220, 0x16u);
                            swift_arrayDestroy();
                            swift_slowDealloc();
                            sub_1008F9FA0();

                            (*v436)(v223, v224);
                          }
                          else
                          {
                            uint64_t v225 = *(void *)(v502 + 1384);
                            uint64_t v226 = *(void *)(v502 + 1352);
                            swift_release();
                            swift_release();
                            swift_release();
                            swift_release();
                            swift_release();
                            swift_release();

                            (*v436)(v225, v226);
                            uint64_t v87 = v502;
                          }
                          unint64_t v107 = v495;
                          uint64_t v227 = v500;
                          uint64_t v94 = v430;
                          unint64_t v81 = (unint64_t)v434;
                        }
                        else
                        {
                          uint64_t v229 = *(void *)(v502 + 1648);
                          uint64_t v230 = *(void *)(v502 + 1528);
                          uint64_t v231 = *(void *)(v502 + 1320);
                          uint64_t v232 = *(void *)(v502 + 1312);
                          uint64_t v233 = *(int *)(v426 + 48);
                          uint64_t v234 = v231 + v233;
                          uint64_t v235 = *(void *)(v502 + 1264) + v233;
                          v198(v231);
                          sub_10025C5CC(v235, v234, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v236 = v232 + *(int *)(v426 + 48);
                          ((void (*)(uint64_t, uint64_t, uint64_t))v422)(v232, v231, v230);
                          uint64_t v419 = v234;
                          sub_10025C504(v234, v236, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          swift_beginAccess();
                          uint64_t v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000F790C(v232, *(void *)(v229 + 16));
                          uint64_t v238 = *(void *)(v502 + 1528);
                          uint64_t v239 = *(void *)(v502 + 1328);
                          uint64_t v240 = *(void *)(v502 + 1320);
                          uint64_t v241 = *(void *)(v502 + 1312);
                          if (v237)
                          {
                            uint64_t v395 = *(void *)(v502 + 1144);
                            uint64_t v506 = (uint64_t (*)())v237;
                            swift_endAccess();
                            sub_10025C56C(v236, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            uint64_t v389 = *v410;
                            (*v410)(v241, v238);
                            uint64_t v242 = (unsigned __int8 *)(v239 + *(int *)(v426 + 48));
                            ((void (*)(uint64_t, uint64_t, uint64_t))v422)(v239, v240, v238);
                            sub_10025C504(v419, (uint64_t)v242, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            sub_1000D1E3C(v395, v242);
                            sub_10025C56C(v395, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            v389(v239, v238);
                            uint64_t v243 = v239 + *(int *)(v426 + 48);
                            ((void (*)(uint64_t, uint64_t, uint64_t))v422)(v239, v240, v238);
                            sub_10025C504(v419, v243, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            uint64_t v244 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v506;
                            swift_beginAccess();
                            sub_10015DF64((uint64_t)v244, v239);
                            swift_endAccess();
                            uint64_t v245 = v243;
                          }
                          else
                          {
                            uint64_t v386 = *(void *)(v502 + 1304);
                            swift_endAccess();
                            sub_10025C56C(v236, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            uint64_t v390 = *v410;
                            (*v410)(v241, v238);
                            uint64_t v246 = v239 + *(int *)(v426 + 48);
                            uint64_t v396 = v246;
                            ((void (*)(uint64_t, uint64_t, uint64_t))v422)(v239, v240, v238);
                            sub_10025C504(v419, v246, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            sub_10000588C(&qword_10163AA18);
                            uint64_t v247 = swift_allocObject();
                            uint64_t v248 = sub_1004B7688(v247, 1);
                            uint64_t v250 = v249;
                            uint64_t v251 = v238;
                            uint64_t v252 = v386 + *(int *)(v426 + 48);
                            ((void (*)(uint64_t, uint64_t, uint64_t))v422)(v386, v240, v251);
                            sub_10025C504(v419, v252, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            sub_10025C5CC(v252, v250, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            uint64_t v253 = SharingCircleWildAdvertisementKey.init(key:)(v248);
                            v390(v386, v251);
                            uint64_t v254 = sub_101158D6C(v253);
                            swift_bridgeObjectRelease();
                            swift_beginAccess();
                            sub_10015DF64(v254, v239);
                            swift_endAccess();
                            uint64_t v245 = v396;
                          }
                          sub_10025C56C(v245, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v255 = *(void *)(v502 + 1528);
                          uint64_t v256 = *(void *)(v502 + 1392);
                          uint64_t v401 = *(void *)(v502 + 1648);
                          uint64_t v257 = *(void *)(v502 + 1352);
                          uint64_t v258 = *(void *)(v502 + 1328);
                          uint64_t v259 = *(void *)(v502 + 1320);
                          uint64_t v387 = v259;
                          uint64_t v260 = *(void *)(v502 + 1120);
                          uint64_t v261 = *(void *)(v502 + 1096);
                          uint64_t v262 = sub_100207468();
                          (*v441)(v256, v262, v257);
                          sub_10025C504(v260, v261, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                          uint64_t v263 = swift_allocObject();
                          sub_10025C5CC(v261, v263 + v456, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                          uint64_t v404 = swift_allocObject();
                          *(void *)(v404 + 16) = sub_10025B340;
                          *(void *)(v404 + 24) = v263;
                          uint64_t v264 = v258 + *(int *)(v426 + 48);
                          ((void (*)(uint64_t, uint64_t, uint64_t))v422)(v258, v259, v255);
                          sub_10025C504(v419, v264, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v265 = *(unsigned __int8 *)(v409 + 80);
                          uint64_t v266 = (v265 + 16) & ~v265;
                          uint64_t v267 = swift_allocObject();
                          sub_10001D608(v258, v267 + v266, &qword_10163F728);
                          uint64_t v391 = swift_allocObject();
                          *(void *)(v391 + 16) = sub_10025B4F4;
                          *(void *)(v391 + 24) = v267;
                          uint64_t v268 = v258 + *(int *)(v426 + 48);
                          ((void (*)(uint64_t, uint64_t, uint64_t))v422)(v258, v387, v255);
                          sub_10025C504(v419, v268, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v269 = swift_allocObject();
                          sub_10001D608(v258, v269 + v266, &qword_10163F728);
                          uint64_t v384 = swift_allocObject();
                          *(void *)(v384 + 16) = sub_10025B504;
                          *(void *)(v384 + 24) = v269;
                          uint64_t v270 = v258 + *(int *)(v426 + 48);
                          ((void (*)(uint64_t, uint64_t, uint64_t))v422)(v258, v387, v255);
                          sub_10025C504(v419, v270, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v271 = swift_allocObject();
                          *(void *)(v271 + 16) = v401;
                          sub_10001D608(v258, v271 + ((v265 + 24) & ~v265), &qword_10163F728);
                          swift_retain();
                          osos_log_t log = Logger.logObject.getter();
                          os_log_type_t v381 = static os_log_type_t.info.getter();
                          uint64_t v272 = swift_allocObject();
                          *(unsigned char *)(v272 + 16) = 112;
                          uint64_t v273 = v272;
                          uint64_t v399 = swift_allocObject();
                          *(unsigned char *)(v399 + 16) = 8;
                          uint64_t v274 = swift_allocObject();
                          *(void *)(v274 + 16) = 1752392040;
                          uint64_t v275 = swift_allocObject();
                          *(void *)(v275 + 16) = sub_10006550C;
                          *(void *)(v275 + 24) = v274;
                          uint64_t v276 = v275;
                          uint64_t v402 = swift_allocObject();
                          *(unsigned char *)(v402 + 16) = 33;
                          uint64_t v277 = swift_allocObject();
                          *(unsigned char *)(v277 + 16) = 8;
                          uint64_t v278 = v277;
                          uint64_t v279 = swift_allocObject();
                          *(void *)(v279 + 16) = sub_1000654F4;
                          *(void *)(v279 + 24) = v404;
                          uint64_t v280 = swift_allocObject();
                          *(void *)(v280 + 16) = sub_1000654EC;
                          *(void *)(v280 + 24) = v279;
                          uint64_t v423 = swift_allocObject();
                          *(unsigned char *)(v423 + 16) = 34;
                          uint64_t v397 = swift_allocObject();
                          *(unsigned char *)(v397 + 16) = 8;
                          uint64_t v281 = swift_allocObject();
                          *(void *)(v281 + 16) = sub_10025B4F8;
                          *(void *)(v281 + 24) = v391;
                          uint64_t v282 = swift_allocObject();
                          *(void *)(v282 + 16) = sub_1000654EC;
                          *(void *)(v282 + 24) = v281;
                          uint64_t v420 = swift_allocObject();
                          *(unsigned char *)(v420 + 16) = 34;
                          uint64_t v392 = swift_allocObject();
                          *(unsigned char *)(v392 + 16) = 8;
                          uint64_t v283 = swift_allocObject();
                          *(void *)(v283 + 16) = sub_10025B508;
                          *(void *)(v283 + 24) = v384;
                          uint64_t v284 = swift_allocObject();
                          *(void *)(v284 + 16) = sub_1000654EC;
                          *(void *)(v284 + 24) = v283;
                          uint64_t v385 = swift_allocObject();
                          *(unsigned char *)(v385 + 16) = 0;
                          uint64_t v405 = swift_allocObject();
                          *(unsigned char *)(v405 + 16) = 8;
                          uint64_t v285 = v282;
                          unint64_t v388 = v282;
                          uint64_t v286 = swift_allocObject();
                          *(void *)(v286 + 16) = sub_10025B514;
                          *(void *)(v286 + 24) = v271;
                          uint64_t v383 = swift_allocObject();
                          *(void *)(v383 + 16) = sub_100060004;
                          *(void *)(v383 + 24) = v286;
                          sub_10000588C(&qword_101639B60);
                          uint64_t v287 = swift_allocObject();
                          sub_1004B810C(v287, 15);
                          *uint64_t v288 = sub_100065514;
                          v288[1] = v273;
                          unint64_t v289 = v273;
                          v288[2] = sub_100065514;
                          v288[3] = v399;
                          v288[4] = sub_100065504;
                          v288[5] = v276;
                          unint64_t v290 = v276;
                          v288[6] = sub_100065514;
                          v288[7] = v402;
                          v288[8] = sub_100065514;
                          v288[9] = v278;
                          unint64_t v291 = v278;
                          v288[10] = sub_100065500;
                          v288[11] = v280;
                          unint64_t v292 = v280;
                          v288[12] = sub_100065514;
                          v288[13] = v423;
                          v288[14] = sub_100065514;
                          v288[15] = v397;
                          v288[16] = sub_100065500;
                          v288[17] = v285;
                          v288[18] = sub_100065514;
                          v288[19] = v420;
                          v288[20] = sub_100065514;
                          v288[21] = v392;
                          v288[22] = sub_100065500;
                          v288[23] = v284;
                          v288[24] = sub_100065514;
                          v288[25] = v385;
                          v288[26] = sub_100065514;
                          v288[27] = v405;
                          v288[28] = sub_10006000C;
                          v288[29] = v383;
                          unint64_t v378 = v289;
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_bridgeObjectRelease();
                          if (os_log_type_enabled(oslog, v381))
                          {
                            unint64_t v379 = v284;
                            uint64_t v293 = (uint8_t *)sub_1008F9FAC();
                            uint64_t v294 = swift_slowAlloc();
                            uint64_t v504 = 0;
                            uint64_t v505 = v294;
                            *(_WORD *)uint64_t v293 = 1283;
                            unint64_t v503 = v293 + 2;
                            uint64_t v506 = sub_100065514;
                            unint64_t v507 = v378;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            uint64_t v228 = v406;
                            swift_release();
                            uint64_t v506 = sub_100065514;
                            unint64_t v507 = v399;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            uint64_t v87 = v502;
                            unint64_t v107 = v495;
                            swift_release();
                            uint64_t v506 = (uint64_t (*)())sub_100065504;
                            unint64_t v507 = v290;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            swift_release();
                            uint64_t v506 = sub_100065514;
                            unint64_t v507 = v402;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            swift_release();
                            uint64_t v506 = sub_100065514;
                            unint64_t v507 = v291;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            uint64_t v94 = v430;
                            swift_release();
                            uint64_t v506 = sub_100065500;
                            unint64_t v507 = v292;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            swift_release();
                            uint64_t v506 = sub_100065514;
                            unint64_t v507 = v423;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            swift_release();
                            uint64_t v506 = sub_100065514;
                            unint64_t v507 = v397;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            swift_release();
                            uint64_t v506 = sub_100065500;
                            unint64_t v507 = v388;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            swift_release();
                            uint64_t v506 = sub_100065514;
                            unint64_t v507 = v420;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            swift_release();
                            uint64_t v506 = sub_100065514;
                            unint64_t v507 = v392;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            unint64_t v81 = (unint64_t)v434;
                            swift_release();
                            uint64_t v506 = sub_100065500;
                            unint64_t v507 = v379;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            swift_release();
                            uint64_t v506 = sub_100065514;
                            unint64_t v507 = v385;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            swift_release();
                            uint64_t v506 = sub_100065514;
                            unint64_t v507 = v405;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            swift_release();
                            uint64_t v506 = (uint64_t (*)())sub_10006000C;
                            unint64_t v507 = v383;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v506, (uint64_t)&v503, (uint64_t)&v504, (uint64_t)&v505);
                            uint64_t v295 = *(void *)(v502 + 1392);
                            uint64_t v296 = *(void *)(v502 + 1352);
                            uint64_t v424 = *(void *)(v502 + 1320);
                            swift_release();
                            _os_log_impl((void *)&_mh_execute_header, oslog, v381, "Return search result for beacon (own beacon): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", v293, 0x34u);
                            swift_arrayDestroy();
                            swift_slowDealloc();
                            sub_1008F9FA0();

                            (*v436)(v295, v296);
                            sub_10001DAB4(v424, &qword_10163F728);
                            uint64_t v227 = v500;
                            goto LABEL_113;
                          }
                          uint64_t v87 = v502;
                          uint64_t v382 = *(void *)(v502 + 1392);
                          uint64_t v297 = *(void *)(v502 + 1352);
                          uint64_t v298 = *(void *)(v502 + 1320);

                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          (*v436)(v382, v297);
                          sub_10001DAB4(v298, &qword_10163F728);
                          unint64_t v81 = (unint64_t)v434;
                          unint64_t v107 = v495;
                          uint64_t v227 = v500;
                          uint64_t v94 = v430;
                        }
                        uint64_t v228 = v406;
LABEL_113:
                        sub_10025C56C(*(void *)(v87 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                        unint64_t v168 = v479 + 1;
                        uint64_t v103 = v442;
                        if (v483 == v228) {
                          goto LABEL_122;
                        }
                      }
                    }
LABEL_34:
                    sub_10001CFB8(v94, v81);
                    sub_10001CFB8(v94, v81);
LABEL_35:
                    sub_10025C56C(*(void *)(v502 + 1104), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                    uint64_t v482 = 0;
                    v111 += v455;
                    if (!--v113)
                    {
                      swift_bridgeObjectRelease();
                      uint64_t v482 = 0;
                      unint64_t v81 = (unint64_t)v434;
                      goto LABEL_92;
                    }
                    break;
                }
                continue;
              }
              if (!v133)
              {
                uint64_t v362 = BYTE6(v132);
                goto LABEL_177;
              }
              if (v133 == 1)
              {
                if (!__OFSUB__(HIDWORD(v80), v80))
                {
                  uint64_t v362 = HIDWORD(v80) - (int)v80;
LABEL_177:
                  sub_10013019C();
                  uint64_t v360 = swift_allocError();
                  *(void *)uint64_t v371 = 28;
                  *(void *)(v371 + 8) = v362;
                  *(unsigned char *)(v371 + 16) = 0;
                  swift_willThrow();
                  goto LABEL_178;
                }
                __break(1u);
              }
              else
              {
                uint64_t v370 = *(void *)(v80 + 16);
                uint64_t v369 = *(void *)(v80 + 24);
                uint64_t v362 = v369 - v370;
                if (!__OFSUB__(v369, v370)) {
                  goto LABEL_177;
                }
              }
              __break(1u);
              break;
            case 2uLL:
              uint64_t v136 = *(void *)(v80 + 16);
              uint64_t v135 = *(void *)(v80 + 24);
              BOOL v129 = __OFSUB__(v135, v136);
              uint64_t v134 = v135 - v136;
              if (!v129) {
                goto LABEL_69;
              }
              goto LABEL_190;
            case 3uLL:
              uint64_t v362 = 0;
              goto LABEL_177;
            default:
              uint64_t v134 = BYTE6(v132);
              goto LABEL_69;
          }
          goto LABEL_202;
        }
LABEL_164:
        uint64_t v347 = v94;
        unint64_t v348 = v81;
LABEL_162:
        sub_10001CFB8(v347, v348);
        return _assertionFailure(_:_:file:line:flags:)();
      case 2uLL:
        uint64_t v128 = *(void *)(v94 + 16);
        uint64_t v127 = *(void *)(v94 + 24);
        BOOL v129 = __OFSUB__(v127, v128);
        uint64_t v126 = v127 - v128;
        if (!v129) {
          goto LABEL_62;
        }
        goto LABEL_187;
      case 3uLL:
        goto LABEL_164;
      default:
        uint64_t v126 = BYTE6(v81);
        goto LABEL_62;
    }
  }
}

uint64_t sub_100247E3C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 2008) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[151];
    uint64_t v4 = v2[147];
    uint64_t v5 = v2[145];
    uint64_t v6 = v2[144];
    uint64_t v7 = v2[125];
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    sub_10025C56C(v3, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v8 = sub_1002520DC;
  }
  else
  {
    uint64_t v9 = v2[192];
    uint64_t v10 = v2[191];
    uint64_t v11 = v2[167];
    uint64_t v12 = v2[151];
    uint64_t v13 = v2[147];
    uint64_t v14 = v2[145];
    uint64_t v15 = v2[144];
    uint64_t v7 = v2[125];
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    sub_10025C56C(v12, type metadata accessor for BeaconKeyManager.IndexInformation);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v10);
    uint64_t v8 = sub_100248004;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_100248004()
{
  uint64_t v472 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0[153];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 43));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 53));
  sub_10001DAB4((uint64_t)(v0 + 28), &qword_10163F740);
  sub_10025C56C(v2, type metadata accessor for BeaconKeyManager.IndexInformation);
  uint64_t v448 = v0[251];
  uint64_t v3 = v0[206];
  uint64_t v4 = v1[196];
  swift_beginAccess();
  uint64_t v5 = sub_1000F790C(v4, *(void *)(v3 + 16));
  uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t))v1[215];
  uint64_t v7 = v1[206];
  uint64_t v443 = v1[196];
  uint64_t v458 = v1[192];
  uint64_t v463 = v1[195];
  uint64_t v8 = v1[191];
  uint64_t v9 = v1[168];
  uint64_t v10 = v1[166];
  uint64_t v451 = v9 + *((int *)v1 + 505);
  uint64_t v11 = v1[160];
  if (v5)
  {
    uint64_t v12 = v1[143];
    v1[112] = v5;
    swift_endAccess();
    uint64_t v13 = (unsigned __int8 *)(v10 + *(int *)(v11 + 48));
    v6(v10, v9, v8);
    sub_10025C504(v451, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_100DCCAA4(v12, v13);
    sub_10025C56C(v12, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v458 + 8);
    v14(v10, v8);
    v6(v463, v443, v8);
    uint64_t v15 = v1[112];
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v470 = *(uint64_t (**)())(v7 + 16);
    *(void *)(v7 + 16) = 0x8000000000000000;
    sub_10016D370(v15, v463, isUniquelyReferenced_nonNull_native);
    *(void *)(v7 + 16) = v470;
    swift_bridgeObjectRelease();
    v14(v463, v8);
  }
  else
  {
    swift_endAccess();
    uint64_t v429 = v8;
    uint64_t v17 = v8;
    uint64_t v18 = v6;
    v6(v463, v443, v17);
    sub_10000588C(&qword_10163AA18);
    uint64_t v19 = swift_allocObject();
    uint64_t v20 = sub_1004B7688(v19, 1);
    uint64_t v22 = v21;
    uint64_t v23 = v10 + *(int *)(v11 + 48);
    v18(v10, v9, v429);
    sub_10025C504(v451, v23, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_10025C5CC(v23, v22, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v24 = SharingCircleWildAdvertisementKey.init(key:)(v20);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v458 + 8);
    v25(v10, v429);
    uint64_t v26 = sub_101158D6C(v24);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    char v27 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v470 = *(uint64_t (**)())(v7 + 16);
    *(void *)(v7 + 16) = 0x8000000000000000;
    sub_10016D370(v26, v463, v27);
    *(void *)(v7 + 16) = v470;
    swift_bridgeObjectRelease();
    v25(v463, v429);
  }
  swift_endAccess();
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v28 = *((int *)v1 + 505);
  uint64_t v29 = (void (*)(void, void, void))v1[215];
  uint64_t v430 = (void (*)(unint64_t, uint64_t, uint64_t))v1[213];
  uint64_t v444 = v1[206];
  uint64_t v30 = v1[196];
  uint64_t v31 = v1[195];
  uint64_t v32 = v1;
  uint64_t v466 = (uint64_t)v1;
  uint64_t v33 = v1[192];
  uint64_t v34 = v1[191];
  uint64_t v35 = v32[176];
  uint64_t v36 = v32[170];
  uint64_t v37 = v32[169];
  uint64_t v38 = v32[166];
  uint64_t v435 = v32[161];
  unint64_t v452 = v32[168];
  uint64_t v459 = v452 + v28;
  uint64_t v426 = v32[160];
  uint64_t v39 = sub_100010324(v37, (uint64_t)qword_10170D9D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v35, v39, v37);
  uint64_t v420 = v29;
  v29(v31, v30, v34);
  unint64_t v40 = (*(unsigned __int8 *)(v33 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  uint64_t v41 = swift_allocObject();
  v430(v41 + v40, v31, v34);
  uint64_t v438 = swift_allocObject();
  *(void *)(v438 + 16) = sub_10025B7C4;
  *(void *)(v438 + 24) = v41;
  uint64_t v42 = v38 + *(int *)(v426 + 48);
  v29(v38, v452, v34);
  sub_10025C504(v459, v42, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v43 = *(unsigned __int8 *)(v435 + 80);
  uint64_t v44 = (v43 + 16) & ~v43;
  uint64_t v45 = swift_allocObject();
  sub_10001D608(v38, v45 + v44, &qword_10163F728);
  uint64_t v431 = swift_allocObject();
  *(void *)(v431 + 16) = sub_10025B4F4;
  *(void *)(v431 + 24) = v45;
  uint64_t v46 = v38 + *(int *)(v426 + 48);
  v420(v38, v452, v34);
  sub_10025C504(v459, v46, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v47 = swift_allocObject();
  sub_10001D608(v38, v47 + v44, &qword_10163F728);
  uint64_t v423 = swift_allocObject();
  *(void *)(v423 + 16) = sub_10025B504;
  *(void *)(v423 + 24) = v47;
  uint64_t v48 = v38 + *(int *)(v426 + 48);
  v420(v38, v452, v34);
  sub_10025C504(v459, v48, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = v444;
  sub_10001D608(v38, v49 + ((v43 + 24) & ~v43), &qword_10163F728);
  swift_retain();
  uint64_t v436 = Logger.logObject.getter();
  LOBYTE(v418) = static os_log_type_t.info.getter();
  uint64_t v50 = swift_allocObject();
  *(unsigned char *)(v50 + 16) = 112;
  uint64_t v51 = v50;
  uint64_t v460 = swift_allocObject();
  *(unsigned char *)(v460 + 16) = 8;
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = 1752392040;
  uint64_t v453 = swift_allocObject();
  *(void *)(v453 + 16) = sub_10006550C;
  *(void *)(v453 + 24) = v52;
  uint64_t v445 = swift_allocObject();
  *(unsigned char *)(v445 + 16) = 33;
  uint64_t v441 = swift_allocObject();
  *(unsigned char *)(v441 + 16) = 8;
  uint64_t v53 = swift_allocObject();
  *(void *)(v53 + 16) = sub_1000654F4;
  *(void *)(v53 + 24) = v438;
  uint64_t v54 = swift_allocObject();
  *(void *)(v54 + 16) = sub_1000654EC;
  *(void *)(v54 + 24) = v53;
  uint64_t v55 = v54;
  uint64_t v439 = v54;
  uint64_t v464 = swift_allocObject();
  *(unsigned char *)(v464 + 16) = 34;
  uint64_t v415 = swift_allocObject();
  *(unsigned char *)(v415 + 16) = 8;
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = sub_10025C990;
  *(void *)(v56 + 24) = v431;
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = sub_1000654EC;
  *(void *)(v57 + 24) = v56;
  uint64_t v58 = v57;
  uint64_t v432 = v57;
  uint64_t v59 = swift_allocObject();
  *(unsigned char *)(v59 + 16) = 34;
  uint64_t v60 = v59;
  uint64_t v427 = swift_allocObject();
  *(unsigned char *)(v427 + 16) = 8;
  uint64_t v61 = swift_allocObject();
  *(void *)(v61 + 16) = sub_10025C994;
  *(void *)(v61 + 24) = v423;
  uint64_t v62 = swift_allocObject();
  *(void *)(v62 + 16) = sub_1000654EC;
  *(void *)(v62 + 24) = v61;
  uint64_t v63 = v62;
  unint64_t v424 = v62;
  uint64_t v64 = swift_allocObject();
  *(unsigned char *)(v64 + 16) = 0;
  uint64_t v65 = v64;
  uint64_t v421 = swift_allocObject();
  *(unsigned char *)(v421 + 16) = 8;
  uint64_t v66 = swift_allocObject();
  *(void *)(v66 + 16) = sub_10025B514;
  *(void *)(v66 + 24) = v49;
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = sub_10006569C;
  *(void *)(v67 + 24) = v66;
  sub_10000588C(&qword_101639B60);
  uint64_t v68 = swift_allocObject();
  sub_1004B810C(v68, 15);
  *uint64_t v69 = sub_100065514;
  v69[1] = v51;
  v69[2] = sub_100065514;
  v69[3] = v460;
  v69[4] = sub_100065504;
  v69[5] = v453;
  v69[6] = sub_100065514;
  v69[7] = v445;
  v69[8] = sub_100065514;
  v69[9] = v441;
  v69[10] = sub_100065500;
  v69[11] = v55;
  v69[12] = sub_100065514;
  v69[13] = v464;
  v69[14] = sub_100065514;
  v69[15] = v415;
  v69[16] = sub_100065500;
  v69[17] = v58;
  v69[18] = sub_100065514;
  v69[19] = v60;
  v69[20] = sub_100065514;
  v69[21] = v427;
  v69[22] = sub_100065500;
  v69[23] = v63;
  v69[24] = sub_100065514;
  v69[25] = v65;
  v69[26] = sub_100065514;
  v69[27] = v421;
  v69[28] = sub_100065504;
  v69[29] = v67;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  unint64_t v70 = v424;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v436, (os_log_type_t)v418))
  {
    uint64_t v404 = *(void *)(v466 + 1816);
    unint64_t v406 = *(void *)(v466 + 1824);
    uint64_t v75 = *(void *)(v466 + 1360);
    uint64_t v408 = *(void *)(v466 + 1352);
    uint64_t v410 = *(void *)(v466 + 1408);
    uint64_t v419 = *(void *)(v466 + 1344);
    uint64_t v412 = *(void *)(v466 + 1256);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10001CFB8(v404, v406);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v410, v408);
    sub_10001DAB4(v412, &qword_101657910);
    sub_10001DAB4(v419, &qword_10163F728);
    goto LABEL_13;
  }
  uint64_t v71 = (uint8_t *)sub_1008F9FAC();
  uint64_t v72 = swift_slowAlloc();
  *(void *)(v466 + 856) = 0;
  *(void *)(v466 + 824) = v72;
  *(_WORD *)uint64_t v71 = 1283;
  *(void *)(v466 + 864) = v71 + 2;
  *(void *)(v466 + 648) = sub_100065514;
  *(void *)(v466 + 656) = v51;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v466 + 648), v466 + 864, v466 + 856, v466 + 824);
  if (v448)
  {
    return swift_errorRelease();
  }
  swift_release();
  *(void *)(v466 + 648) = sub_100065514;
  *(void *)(v466 + 656) = v460;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v466 + 648), v466 + 864, v466 + 856, v466 + 824);
  swift_release();
  *(void *)(v466 + 648) = sub_100065504;
  *(void *)(v466 + 656) = v453;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v466 + 648), v466 + 864, v466 + 856, v466 + 824);
  swift_release();
  *(void *)(v466 + 648) = sub_100065514;
  *(void *)(v466 + 656) = v445;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v466 + 648), v466 + 864, v466 + 856, v466 + 824);
  swift_release();
  *(void *)(v466 + 648) = sub_100065514;
  *(void *)(v466 + 656) = v441;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v466 + 648), v466 + 864, v466 + 856, v466 + 824);
  swift_release();
  *(void *)(v466 + 648) = sub_100065500;
  *(void *)(v466 + 656) = v439;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v466 + 648), v466 + 864, v466 + 856, v466 + 824);
  swift_release();
  *(void *)(v466 + 648) = sub_100065514;
  *(void *)(v466 + 656) = v464;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v466 + 648), v466 + 864, v466 + 856, v466 + 824);
  swift_release();
  *(void *)(v466 + 648) = sub_100065514;
  *(void *)(v466 + 656) = v415;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v466 + 648), v466 + 864, v466 + 856, v466 + 824);
  swift_release();
  *(void *)(v466 + 648) = sub_100065500;
  *(void *)(v466 + 656) = v432;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v466 + 648), v466 + 864, v466 + 856, v466 + 824);
  uint64_t v73 = v71;
  unint64_t v70 = (unint64_t)v436;
  swift_release();
  *(void *)(v466 + 648) = sub_100065514;
  *(void *)(v466 + 656) = v60;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v466 + 648), v466 + 864, v466 + 856, v466 + 824);
  swift_release();
  *(void *)(v466 + 648) = sub_100065514;
  *(void *)(v466 + 656) = v427;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v466 + 648), v466 + 864, v466 + 856, v466 + 824);
  swift_release();
  *(void *)(v466 + 648) = sub_100065500;
  *(void *)(v466 + 656) = v424;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v466 + 648), v466 + 864, v466 + 856, v466 + 824);
  swift_release();
  *(void *)(v466 + 648) = sub_100065514;
  *(void *)(v466 + 656) = v65;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v466 + 648), v466 + 864, v466 + 856, v466 + 824);
  swift_release();
  *(void *)(v466 + 648) = sub_100065514;
  *(void *)(v466 + 656) = v421;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v466 + 648), v466 + 864, v466 + 856, v466 + 824);
  swift_release();
  *(void *)(v466 + 648) = sub_100065504;
  *(void *)(v466 + 656) = v67;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v466 + 648), v466 + 864, v466 + 856, v466 + 824);
LABEL_193:
  unint64_t v352 = *(void *)(v466 + 1824);
  uint64_t v353 = *(void *)(v466 + 1816);
  uint64_t v354 = *(void *)(v466 + 1360);
  uint64_t v355 = *(void *)(v466 + 1352);
  uint64_t v462 = *(void *)(v466 + 1344);
  uint64_t v450 = *(void *)(v466 + 1408);
  uint64_t v457 = *(void *)(v466 + 1256);
  swift_release();
  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v70, (os_log_type_t)v418, "Return search result for beacon (wild): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", v73, 0x34u);
  swift_arrayDestroy();
  swift_slowDealloc();
  sub_1008F9FA0();

  swift_release();
  sub_10001CFB8(v353, v352);
  (*(void (**)(uint64_t, uint64_t))(v354 + 8))(v450, v355);
  sub_10001DAB4(v457, &qword_101657910);
  sub_10001DAB4(v462, &qword_10163F728);
  uint64_t v448 = 0;
LABEL_13:
  uint64_t v76 = v466;
  uint64_t v77 = *(void *)(v466 + 1808) + 1;
  if (v77 != *(void *)(v466 + 1800))
  {
    *(void *)(v466 + 1808) = v77;
    unint64_t v279 = *(void *)(v466 + 1752);
    uint64_t v280 = *(void *)(v466 + 1792) + 24 * v77;
    uint64_t v281 = *(void *)(v280 + 32);
    *(void *)(v466 + 1816) = v281;
    uint64_t v82 = *(void *)(v280 + 40);
    *(void *)(v466 + 1824) = v82;
    int v282 = *(_DWORD *)(v280 + 48);
    *(unsigned char *)(v466 + 1836) = *(unsigned char *)(v280 + 52);
    *(_DWORD *)(v466 + 1832) = v282;
    uint64_t v283 = 0;
    uint64_t v284 = 0;
    switch(v279 >> 62)
    {
      case 1uLL:
        sub_100037A38(*(void *)(v466 + 1744), v279);
        uint64_t v308 = *(void *)(v466 + 1744);
        uint64_t v283 = v308 >> 32;
        uint64_t v284 = (int)v308;
        break;
      case 2uLL:
        uint64_t v309 = *(void *)(v466 + 1744);
        uint64_t v284 = *(void *)(v309 + 16);
        uint64_t v283 = *(void *)(v309 + 24);
        sub_100037A38(v309, v279);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v284 = 0;
        uint64_t v283 = BYTE6(v279);
        break;
    }
    unint64_t v310 = sub_1008AA59C(v284, v283, *(void *)(v466 + 1744), *(void *)(v466 + 1752));
    unint64_t v70 = *(void *)(v466 + 1752);
    if (v310 < 0x39)
    {
      switch(v70 >> 62)
      {
        case 1uLL:
          uint64_t v313 = *(void *)(v466 + 1744);
          uint64_t v311 = v313 >> 32;
          uint64_t v312 = (int)v313;
          goto LABEL_142;
        case 2uLL:
          uint64_t v314 = *(void *)(v466 + 1744);
          uint64_t v312 = *(void *)(v314 + 16);
          uint64_t v311 = *(void *)(v314 + 24);
          goto LABEL_142;
        default:
          goto LABEL_144;
      }
    }
    uint64_t v311 = sub_1008AA520(v284, 57, *(void *)(v466 + 1744), *(void *)(v466 + 1752));
    uint64_t v312 = 0;
    switch(v70 >> 62)
    {
      case 1uLL:
        uint64_t v312 = (int)*(void *)(v466 + 1744);
        break;
      case 2uLL:
        uint64_t v312 = *(void *)(*(void *)(v466 + 1744) + 16);
        break;
      default:
        break;
    }
LABEL_142:
    if (v311 >= v312)
    {
      unint64_t v70 = *(void *)(v466 + 1752);
LABEL_144:
      uint64_t v315 = *(void *)(v466 + 1744);
      sub_1000361E0(v281, v82);
      sub_1000361E0(v281, v82);
      uint64_t v76 = Data._Representation.subscript.getter();
      unint64_t v317 = v316;
      sub_100037A24(v315, v70);
      switch(v317 >> 62)
      {
        case 1uLL:
          LODWORD(v318) = HIDWORD(v76) - v76;
          if (__OFSUB__(HIDWORD(v76), v76)) {
            goto LABEL_187;
          }
          uint64_t v318 = (int)v318;
          goto LABEL_149;
        case 2uLL:
          uint64_t v320 = *(void *)(v76 + 16);
          uint64_t v319 = *(void *)(v76 + 24);
          BOOL v118 = __OFSUB__(v319, v320);
          uint64_t v318 = v319 - v320;
          if (v118) {
            goto LABEL_188;
          }
          goto LABEL_149;
        case 3uLL:
          goto LABEL_152;
        default:
          uint64_t v318 = BYTE6(v317);
LABEL_149:
          if (v318 != 57)
          {
LABEL_152:
            uint64_t v323 = v76;
            unint64_t v324 = v317;
            goto LABEL_153;
          }
          sub_1000361E0(v76, v317);
          uint64_t v321 = sub_100A94760(v76, v317);
          if (v448)
          {
            sub_10001CFB8(v76, v317);
            uint64_t v470 = 0;
            unint64_t v471 = 0xE000000000000000;
            _StringGuts.grow(_:)(35);
            unint64_t v327 = v471;
            *(void *)(v466 + 632) = v470;
            *(void *)(v466 + 640) = v327;
            v328._object = (void *)0x80000001013F3B70;
            v328._countAndFlagsBits = 0xD000000000000021;
            String.append(_:)(v328);
            *(void *)(v466 + 936) = v448;
            sub_10000588C(&qword_101638D40);
            _print_unlocked<A, B>(_:_:)();
            return _assertionFailure(_:_:file:line:flags:)();
          }
          uint64_t v325 = v321;
          unint64_t v326 = v322;
          sub_10001CFB8(v76, v317);
          sub_100434E0C(v325, v326, (uint64_t *)(v466 + 696));
          sub_10001CFB8(v76, v317);
          uint64_t v339 = *(void *)(v466 + 696);
          *(void *)(v466 + 1840) = v339;
          uint64_t v340 = *(void *)(v466 + 704);
          *(void *)(v466 + 1848) = v340;
          unint64_t v341 = (void *)swift_task_alloc();
          *(void *)(v466 + 1856) = v341;
          *unint64_t v341 = v466;
          v341[1] = sub_100233AA0;
          uint64_t v342 = *(void *)(v466 + 1784);
          uint64_t v343 = *(void *)(v466 + 1568);
          uint64_t v344 = *(void *)(v466 + 1272);
          uint64_t result = sub_10025916C(v344, v281, v82, v342, v339, v340, 0, v343);
          break;
      }
      return result;
    }
    goto LABEL_176;
  }
  uint64_t v78 = *(void **)(v466 + 1784);
  unint64_t v79 = *(void *)(v466 + 1752);
  uint64_t v80 = *(void *)(v466 + 1744);
  uint64_t v81 = *(void *)(v466 + 1632);
  uint64_t v82 = *(void *)(v466 + 1576);
  uint64_t v83 = *(void *)(v466 + 1568);
  uint64_t v84 = *(void *)(v466 + 1536);
  uint64_t v85 = *(void *)(v466 + 1528);
  sub_10001CFB8(*(void *)(v466 + 1672), *(void *)(v466 + 1680));

  sub_100037A24(v80, v79);
  swift_bridgeObjectRelease();
  uint64_t v86 = *(NSObject **)(v84 + 8);
  ((void (*)(uint64_t, uint64_t))v86)(v82, v85);
  sub_10025C56C(v81, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  ((void (*)(uint64_t, uint64_t))v86)(v83, v85);
  uint64_t v76 = v466;
  unint64_t v87 = *(void *)(v466 + 1664) + 1;
  if (v87 != *(void *)(v466 + 1656))
  {
    uint64_t v82 = (uint64_t)&qword_101638CF0;
    do
    {
      *(void *)(v76 + 1664) = v87;
      uint64_t v285 = *(void **)(v76 + 984);
      if (!v285) {
        uint64_t v285 = _swiftEmptyArrayStorage;
      }
      if (v87 >= v285[2])
      {
        __break(1u);
        sub_10001CFB8(v79, (unint64_t)v86);
        uint64_t v470 = 0;
        unint64_t v471 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        unint64_t v350 = v471;
        *(void *)(v466 + 744) = v470;
        *(void *)(v466 + 752) = v350;
        v351._object = (void *)0x80000001013F3B70;
        v351._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v351);
        *(void *)(v466 + 848) = v80;
        sub_10000588C(&qword_101638D40);
        _print_unlocked<A, B>(_:_:)();
        return _assertionFailure(_:_:file:line:flags:)();
      }
      uint64_t v286 = *(unsigned __int8 *)(v76 + 2016);
      uint64_t v287 = *(void *)(v76 + 1632);
      uint64_t v288 = *(void *)(v76 + 1592);
      uint64_t v289 = *(void *)(v76 + 1584);
      unint64_t v290 = (uint64_t *)v76;
      uint64_t v291 = *(void *)(v76 + 1536);
      uint64_t v292 = v290[191];
      unint64_t v70 = v290[190];
      sub_10025C504((uint64_t)v285 + ((v286 + 32) & ~v286) + *(void *)(v288 + 72) * v87, v287, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      unint64_t v79 = *(void *)(v287 + 16);
      v290[209] = v79;
      unint64_t v293 = *(void *)(v287 + 24);
      v290[210] = v293;
      sub_10001D074(v287 + *(int *)(v289 + 28), v70, &qword_101638CF0);
      uint64_t v294 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v291 + 48);
      v290[211] = (uint64_t)v294;
      v290[212] = (v291 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
      if (v294(v70, 1, v292) != 1)
      {
        uint64_t v299 = v290[197];
        uint64_t v300 = v290[192];
        uint64_t v301 = v290[191];
        uint64_t v302 = v290[190];
        uint64_t v303 = v290[189];
        uint64_t v304 = *(void (**)(uint64_t, uint64_t, uint64_t))(v300 + 32);
        v290[213] = (uint64_t)v304;
        v290[214] = (v300 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v304(v299, v302, v301);
        uint64_t v305 = *(void (**)(uint64_t, uint64_t, uint64_t))(v300 + 16);
        v290[215] = (uint64_t)v305;
        v290[216] = (v300 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v305(v303, v299, v301);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v300 + 56))(v303, 0, 1, v301);
        sub_1000361E0(v79, v293);
        uint64_t v306 = (void *)swift_task_alloc();
        v290[217] = (uint64_t)v306;
        *uint64_t v306 = v290;
        v306[1] = sub_1002280E0;
        uint64_t v307 = v290[189];
        return sub_100257574(v79, v293, v307);
      }
      uint64_t v295 = v290[190];
      sub_1000361E0(v79, v293);
      sub_10001DAB4(v295, &qword_101638CF0);
      uint64_t v76 = (uint64_t)v290;
      if (qword_101636908 != -1) {
        swift_once();
      }
      sub_100010324(v290[169], (uint64_t)qword_10170D9D8);
      uint64_t v86 = Logger.logObject.getter();
      os_log_type_t v296 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v86, v296))
      {
        unint64_t v70 = swift_slowAlloc();
        *(_WORD *)unint64_t v70 = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, v296, "Missing share id in payload.", (uint8_t *)v70, 2u);
        swift_slowDealloc();
      }
      uint64_t v80 = v290[204];
      sub_10001CFB8(v79, v293);

      sub_10025C56C(v80, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      unint64_t v87 = v290[208] + 1;
    }
    while (v87 != v290[207]);
  }
  uint64_t v88 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  if (*(void *)(v76 + 976)) {
    uint64_t v88 = *(void **)(v76 + 976);
  }
  uint64_t v418 = v88[2];
  if (!v418)
  {
    swift_bridgeObjectRetain();
LABEL_127:
    swift_bridgeObjectRelease();
    uint64_t v297 = *(void *)(v76 + 1648);
    swift_beginAccess();
    unint64_t v456 = *(void *)(v297 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v298 = *(uint64_t (**)(unint64_t))(v76 + 8);
    return v298(v456);
  }
  uint64_t v89 = *(void *)(v76 + 1536);
  uint64_t v398 = (uint64_t *)(v76 + 888);
  uint64_t v90 = *(void *)(v76 + 1360);
  uint64_t v399 = *(void *)(v76 + 1280);
  uint64_t v91 = *(void *)(v76 + 1160);
  uint64_t v400 = *(void *)(v76 + 1120);
  uint64_t v461 = *(void *)(v76 + 1104);
  uint64_t v407 = *(void *)(v76 + 1080);
  uint64_t v92 = *(void *)(v76 + 1056);
  uint64_t v442 = (void (**)(uint64_t, void, uint64_t))(v92 + 104);
  uint64_t v393 = *(void *)(v76 + 1040);
  BOOL v440 = (void (**)(uint64_t, uint64_t))(v92 + 8);
  uint64_t v401 = *(void *)(v76 + 1032);
  uint64_t v402 = (void (**)(void))(v89 + 16);
  uint64_t v392 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 + 1192) + 56);
  uint64_t v391 = (void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16);
  uint64_t v390 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56);
  uint64_t v389 = (void (**)(uint64_t))(v89 + 32);
  uint64_t v386 = (void (**)(uint64_t, uint64_t))(v89 + 8);
  uint64_t v93 = *(uint8_t **)(*(void *)(v76 + 992) + 16);
  uint64_t v416 = (void (**)(uint64_t, uint64_t, uint64_t))(v90 + 16);
  uint64_t v409 = (void (**)(uint64_t, uint64_t))(v90 + 8);
  unsigned int v437 = enum case for HashAlgorithm.sha256(_:);
  unint64_t v425 = v88 + 4;
  uint64_t v387 = *(void *)(v76 + 1288);
  unint64_t v388 = *(int **)(v76 + 1016);
  swift_bridgeObjectRetain();
  unint64_t v94 = 0;
  uint64_t v417 = v93;
  uint64_t v403 = v88;
  while (1)
  {
    if (v94 >= v88[2]) {
      goto LABEL_179;
    }
    unint64_t v422 = v94;
    uint64_t v95 = &v425[3 * v94];
    uint64_t v97 = *v95;
    unint64_t v96 = v95[1];
    uint64_t v98 = v95[2];
    if (v93) {
      break;
    }
    sub_1000361E0(*v95, v95[1]);
    swift_bridgeObjectRetain();
    unint64_t v141 = v96;
LABEL_84:
    if (qword_101636908 != -1) {
      swift_once();
    }
    uint64_t v142 = *(void *)(v76 + 1376);
    uint64_t v143 = *(void *)(v76 + 1352);
    uint64_t v144 = sub_100010324(v143, (uint64_t)qword_10170D9D8);
    (*v416)(v142, v144, v143);
    sub_1000361E0(v97, v141);
    swift_bridgeObjectRetain();
    sub_1000361E0(v97, v141);
    swift_bridgeObjectRetain();
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v145 = static os_log_type_t.error.getter();
    BOOL v146 = os_log_type_enabled((os_log_t)v82, v145);
    uint64_t v147 = *(void *)(v76 + 1376);
    uint64_t v148 = *(void *)(v76 + 1352);
    if (v146)
    {
      uint64_t v149 = swift_slowAlloc();
      unint64_t v70 = swift_slowAlloc();
      uint64_t v470 = (uint64_t (*)())v70;
      *(_DWORD *)uint64_t v149 = 141558275;
      *(void *)(v149 + 4) = 1752392040;
      *(_WORD *)(v149 + 12) = 2081;
      *(void *)(v466 + 728) = v97;
      *(void *)(v466 + 736) = v141;
      sub_1001D780C();
      uint64_t v150 = RawRepresentable<>.hexString.getter();
      *(void *)(v149 + 14) = sub_1008FA0F0(v150, v151, (uint64_t *)&v470);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v97, v141);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v97, v141);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v82, v145, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v149, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v76 = v466;
      swift_slowDealloc();

      sub_10001CFB8(v97, v141);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10001CFB8(v97, v141);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v97, v141);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v97, v141);
      swift_bridgeObjectRelease();
    }
    (*v409)(v147, v148);
    uint64_t v93 = v417;
LABEL_90:
    unint64_t v94 = v422 + 1;
    uint64_t v88 = v403;
    if (v422 + 1 == v418) {
      goto LABEL_127;
    }
  }
  uint64_t v99 = *(void *)(v76 + 992);
  unint64_t v454 = v96 >> 62;
  sub_1000361E0(v97, v96);
  uint64_t v100 = *(unsigned __int8 *)(v407 + 80);
  uint64_t v394 = ~v100;
  uint64_t v397 = v100;
  uint64_t v101 = v99 + ((v100 + 32) & ~v100);
  uint64_t v446 = BYTE6(v96);
  unint64_t v428 = v96;
  uint64_t v433 = *(void *)(v407 + 72);
  BOOL v102 = __OFSUB__(HIDWORD(v97), v97);
  BOOL v413 = v102;
  uint64_t v411 = HIDWORD(v97) - (int)v97;
  uint64_t v405 = v98;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v73 = v93;
  uint64_t v465 = v97;
  while (2)
  {
    uint64_t v103 = *(uint64_t **)(v76 + 1104);
    sub_10025C504(v101, (uint64_t)v103, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v104 = *v103;
    unint64_t v105 = *(void *)(v461 + 8);
    uint64_t v82 = v105 >> 62;
    uint64_t v106 = 0;
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    uint64_t v109 = 0;
    switch(v105 >> 62)
    {
      case 1uLL:
        uint64_t v106 = (int)v104;
        uint64_t v107 = v104 >> 32;
        sub_1000361E0(v104, *(void *)(v461 + 8));
        uint64_t v108 = v104 >> 32;
        uint64_t v109 = (int)v104;
        break;
      case 2uLL:
        uint64_t v106 = *(void *)(v104 + 16);
        uint64_t v107 = *(void *)(v104 + 24);
        sub_1000361E0(v104, *(void *)(v461 + 8));
        uint64_t v109 = *(void *)(v104 + 16);
        uint64_t v108 = *(void *)(v104 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v106 = 0;
        uint64_t v109 = 0;
        uint64_t v107 = BYTE6(v105);
        uint64_t v108 = BYTE6(v105);
        break;
    }
    if (v108 < v106 || v106 < v109)
    {
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      swift_once();
LABEL_157:
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v329 = swift_allocObject();
      uint64_t v330 = sub_1004B810C(v329, 1);
      uint64_t v332 = v331;
      *uint64_t v398 = v76;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v333 = String.init<A>(describing:)();
      uint64_t v335 = v334;
      v332[3] = (uint64_t)&type metadata for String;
      v332[4] = sub_10000B4CC();
      *uint64_t v332 = v333;
      v332[1] = v335;
      SharingCircleWildAdvertisementKey.init(key:)(v330);
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_100130148();
      uint64_t v336 = swift_allocError();
      *uint64_t v337 = 0;
      swift_willThrow();
      swift_errorRelease();
      unint64_t v122 = v70;
      uint64_t v120 = v82;
      uint64_t v76 = v466;
LABEL_169:
      sub_10001CFB8(v120, v122);
      uint64_t v470 = 0;
      unint64_t v471 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      unint64_t v348 = v471;
      *(void *)(v76 + 680) = v470;
      *(void *)(v76 + 688) = v348;
      v349._object = (void *)0x80000001013F3B70;
      v349._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v349);
      *(void *)(v76 + 872) = v336;
      sub_10000588C(&qword_101638D40);
      _print_unlocked<A, B>(_:_:)();
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v82 = v82;
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    switch((int)v82)
    {
      case 1:
        uint64_t v111 = (int)v104;
        uint64_t v110 = v104 >> 32;
        break;
      case 2:
        uint64_t v111 = *(void *)(v104 + 16);
        uint64_t v110 = *(void *)(v104 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v111 = 0;
        uint64_t v110 = BYTE6(v105);
        break;
    }
    if (v110 < v107 || v107 < v111) {
      goto LABEL_173;
    }
    if (__OFSUB__(v107, v106)) {
      goto LABEL_174;
    }
    if ((unint64_t)(v107 - v106) < 0x39)
    {
      switch((int)v82)
      {
        case 1:
          uint64_t v112 = v104 >> 32;
          goto LABEL_45;
        case 2:
          uint64_t v112 = *(void *)(v104 + 24);
          goto LABEL_47;
        default:
          goto LABEL_49;
      }
    }
    uint64_t v112 = sub_1008AA520(v106, 57, v104, v105);
    uint64_t v113 = 0;
    switch((int)v82)
    {
      case 1:
LABEL_45:
        uint64_t v113 = (int)v104;
        break;
      case 2:
LABEL_47:
        uint64_t v113 = *(void *)(v104 + 16);
        break;
      default:
        break;
    }
    if (v112 < v113) {
      goto LABEL_175;
    }
LABEL_49:
    uint64_t v82 = Data._Representation.subscript.getter();
    unint64_t v70 = v114;
    sub_10001CFB8(v104, v105);
    switch(v70 >> 62)
    {
      case 1uLL:
        LODWORD(v115) = HIDWORD(v82) - v82;
        if (__OFSUB__(HIDWORD(v82), v82)) {
          goto LABEL_177;
        }
        uint64_t v115 = (int)v115;
LABEL_54:
        if (v115 == 57)
        {
          sub_1000361E0(v82, v70);
          uint64_t v119 = sub_100A948F8(v82, v70);
          uint64_t v76 = v448;
          if (v448)
          {
            static os_log_type_t.error.getter();
            if (qword_101636F48 != -1) {
              goto LABEL_190;
            }
            goto LABEL_157;
          }
          uint64_t v120 = sub_100A90C58(v119, 0);
          unint64_t v122 = v121;
          CCECCryptorRelease();
          sub_10001CFB8(v82, v70);
          unint64_t v123 = v122 >> 62;
          uint64_t v76 = v466;
          switch(v122 >> 62)
          {
            case 1uLL:
              LODWORD(v124) = HIDWORD(v120) - v120;
              if (__OFSUB__(HIDWORD(v120), v120)) {
                goto LABEL_180;
              }
              uint64_t v124 = (int)v124;
LABEL_61:
              if (v124 == 28)
              {
                uint64_t v127 = *(void *)(v466 + 1064);
                uint64_t v128 = *(void *)(v466 + 1048);
                sub_10001CFB8(v82, v70);
                (*v442)(v127, v437, v128);
                uint64_t v82 = Data.hash(algorithm:)();
                unint64_t v70 = v129;
                (*v440)(v127, v128);
                sub_10001CFB8(v120, v122);
                uint64_t v130 = 0;
                uint64_t v97 = v465;
                switch(v70 >> 62)
                {
                  case 1uLL:
                    if (__OFSUB__(HIDWORD(v82), v82)) {
                      goto LABEL_182;
                    }
                    uint64_t v130 = HIDWORD(v82) - (int)v82;
LABEL_67:
                    sub_1000361E0(v82, v70);
                    break;
                  case 2uLL:
                    uint64_t v132 = *(void *)(v82 + 16);
                    uint64_t v131 = *(void *)(v82 + 24);
                    uint64_t v130 = v131 - v132;
                    if (!__OFSUB__(v131, v132)) {
                      goto LABEL_67;
                    }
                    goto LABEL_183;
                  case 3uLL:
                    break;
                  default:
                    uint64_t v130 = BYTE6(v70);
                    break;
                }
                uint64_t v133 = v446;
                switch((int)v454)
                {
                  case 1:
                    uint64_t v133 = v411;
                    if (v413) {
                      goto LABEL_184;
                    }
                    goto LABEL_72;
                  case 2:
                    uint64_t v135 = *(void *)(v465 + 16);
                    uint64_t v134 = *(void *)(v465 + 24);
                    BOOL v118 = __OFSUB__(v134, v135);
                    uint64_t v133 = v134 - v135;
                    if (v118) {
                      goto LABEL_185;
                    }
                    goto LABEL_72;
                  case 3:
                    if (v130) {
                      goto LABEL_26;
                    }
                    goto LABEL_93;
                  default:
LABEL_72:
                    if (v130 == v133)
                    {
                      if (v130 >= 1)
                      {
                        sub_1000361E0(v465, v428);
                        sub_1000361E0(v465, v428);
                        switch(v70 >> 62)
                        {
                          case 1uLL:
                            if (v82 >> 32 < (int)v82) {
                              goto LABEL_189;
                            }
                            sub_1000361E0(v465, v428);
                            sub_1000361E0(v465, v428);
                            sub_1000361E0(v465, v428);
                            sub_1000361E0(v82, v70);
                            sub_1000361E0(v465, v428);
                            uint64_t v97 = v465;
                            char v138 = sub_100BFBE64((int)v82, v82 >> 32, v70 & 0x3FFFFFFFFFFFFFFFLL, v465, v428);
                            sub_10001CFB8(v465, v428);
                            sub_10001CFB8(v82, v70);
                            break;
                          case 2uLL:
                            uint64_t v139 = *(void *)(v82 + 16);
                            uint64_t v140 = *(void *)(v82 + 24);
                            sub_1000361E0(v465, v428);
                            sub_1000361E0(v465, v428);
                            sub_1000361E0(v465, v428);
                            sub_1000361E0(v465, v428);
                            swift_retain();
                            swift_retain();
                            char v138 = sub_100BFBE64(v139, v140, v70 & 0x3FFFFFFFFFFFFFFFLL, v465, v428);
                            sub_10001CFB8(v465, v428);
                            swift_release();
                            swift_release();
                            break;
                          case 3uLL:
                            sub_1000361E0(v465, v428);
                            sub_1000361E0(v465, v428);
                            sub_1000361E0(v465, v428);
                            sub_1000361E0(v465, v428);
                            unint64_t v136 = v385 & 0xFF00000000000000;
                            uint64_t v137 = 0;
                            v385 &= 0xFF00000000000000;
                            goto LABEL_80;
                          default:
                            sub_1000361E0(v465, v428);
                            sub_1000361E0(v465, v428);
                            sub_1000361E0(v465, v428);
                            sub_1000361E0(v465, v428);
                            unint64_t v136 = v384 & 0xFF00000000000000 | v70 & 0xFFFFFFFFFFFFFFLL;
                            uint64_t v137 = v82;
                            unint64_t v384 = v136;
LABEL_80:
                            char v138 = sub_100BFBD8C(v137, v136, v465, v428);
                            sub_10001CFB8(v465, v428);
                            break;
                        }
                        sub_10001CFB8(v82, v70);
                        sub_10001CFB8(v97, v428);
                        sub_10001CFB8(v82, v70);
                        sub_10001CFB8(v97, v428);
                        sub_10001CFB8(v97, v428);
                        sub_10001CFB8(v97, v428);
                        sub_10001CFB8(v97, v428);
                        if (v138) {
                          goto LABEL_94;
                        }
                        goto LABEL_27;
                      }
LABEL_93:
                      sub_10001CFB8(v82, v70);
                      sub_10001CFB8(v82, v70);
LABEL_94:
                      uint64_t v152 = *(void *)(v466 + 1120);
                      uint64_t v153 = *(void *)(v466 + 1112);
                      uint64_t v154 = *(void *)(v466 + 1104);
                      swift_bridgeObjectRelease();
                      sub_10025C5CC(v154, v153, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                      sub_10025C5CC(v153, v152, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                      uint64_t v434 = sub_1001340BC(v405);
                      if (!v434)
                      {
                        swift_bridgeObjectRetain();
                        uint64_t v93 = v417;
                        uint64_t v211 = v465;
LABEL_113:
                        uint64_t v278 = *(void *)(v76 + 1120);
                        sub_10001CFB8(v211, v428);
                        swift_bridgeObjectRelease_n();
                        sub_10025C56C(v278, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        uint64_t v448 = 0;
                        goto LABEL_90;
                      }
                      unint64_t v447 = v405
                           + ((*(unsigned __int8 *)(v401 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v401 + 80));
                      uint64_t v414 = (v397 + 16) & v394;
                      swift_bridgeObjectRetain();
                      uint64_t v155 = 0;
                      while (1)
                      {
                        unint64_t v455 = v155 + 1;
                        if (__OFADD__(v155, 1)) {
                          goto LABEL_186;
                        }
                        os_log_type_t v156 = *(uint64_t **)(v76 + 1120);
                        uint64_t v449 = v155;
                        sub_10025C504(v447 + *(void *)(v401 + 72) * v155, *(void *)(v76 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                        uint64_t v157 = *v156;
                        unint64_t v158 = *(void *)(v400 + 8);
                        uint64_t v159 = v76;
                        SecKeyRef v160 = sub_100435E70(v157, v158);
                        uint64_t v161 = **(void **)(v159 + 1040);
                        unint64_t v162 = *(void *)(v393 + 8);
                        uint64_t v163 = PrivateKey.publicKey.getter(v157, v158);
                        unint64_t v165 = v164;
                        sub_1000361E0(v163, v164);
                        uint64_t v166 = sub_100A94760(v163, v165);
                        unint64_t v168 = v167;
                        sub_10001CFB8(v163, v165);
                        sub_100434E0C(v166, v168, (uint64_t *)&v470);
                        uint64_t v169 = *(void *)(v466 + 1024);
                        sub_10001CFB8(v163, v165);
                        unint64_t v171 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v470;
                        unint64_t v170 = v471;
                        uint64_t v172 = v160;
                        sub_1000361E0(v161, v162);
                        sub_1000361E0((uint64_t)v171, v170);
                        BeaconPayloadv1.init(using:data:advertisement:)(v172, v161, v162, (uint64_t)v171, v170, v169);
                        uint64_t v366 = v172;
                        uint64_t v375 = *(void *)(v466 + 1528);
                        uint64_t v378 = *(void *)(v466 + 1560);
                        uint64_t v381 = *(void *)(v466 + 1280);
                        uint64_t v173 = *(void *)(v466 + 1264);
                        uint64_t v174 = *(void *)(v466 + 1240);
                        unint64_t v370 = v170;
                        uint64_t v175 = *(void *)(v466 + 1232);
                        uint64_t v176 = *(void *)(v466 + 1184);
                        uint64_t v177 = *(void *)(v466 + 1168);
                        uint64_t v178 = *(void *)(v466 + 1152);
                        uint64_t v367 = *(unsigned char **)(v466 + 1144);
                        uint64_t v179 = *(void *)(v466 + 1024);
                        uint64_t v180 = *(void *)(v466 + 1008);
                        uint64_t v395 = *v402;
                        (*v402)();
                        (*v392)(v174, 1, 1, v176);
                        LODWORD(v176) = *(unsigned __int8 *)(v179 + v388[10]);
                        (*v391)(v177, v179 + v388[5], v178);
                        double v181 = *(double *)(v179 + v388[7]);
                        double v182 = *(double *)(v179 + v388[8]);
                        double v183 = *(double *)(v179 + v388[9]);
                        (*v390)(v180, 1, 1, v178);
                        sub_10001D074(v174, v175, &qword_101657910);
                        sub_100CC2A6C(v176, v177, 15, v180, v175, 256, v367, v181, v182, v183);
                        sub_10001DAB4(v174, &qword_101657910);
                        sub_10025C56C(v179, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                        uint64_t v184 = v173 + *(int *)(v399 + 48);
                        uint64_t v185 = *v389;
                        ((void (*)(uint64_t, uint64_t, uint64_t))*v389)(v173, v378, v375);
                        sub_10025C5CC((uint64_t)v367, v184, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v387 + 56))(v173, 0, 1, v381);
                        sub_10001CFB8((uint64_t)v171, v370);
                        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v387 + 48))(v173, 1, v381) == 1)
                        {
                          uint64_t v186 = *(void *)(v466 + 1264);

                          sub_10001DAB4(v186, &qword_10163F720);
                          if (qword_101636908 != -1) {
                            swift_once();
                          }
                          uint64_t v187 = *(void *)(v466 + 1384);
                          uint64_t v188 = *(void *)(v466 + 1352);
                          uint64_t v189 = *(void *)(v466 + 1120);
                          uint64_t v190 = *(void *)(v466 + 1096);
                          uint64_t v191 = sub_100010324(v188, (uint64_t)qword_10170D9D8);
                          (*v416)(v187, v191, v188);
                          sub_10025C504(v189, v190, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                          uint64_t v192 = swift_allocObject();
                          sub_10025C5CC(v190, v192 + v414, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                          uint64_t v193 = swift_allocObject();
                          *(void *)(v193 + 16) = sub_10025B340;
                          *(void *)(v193 + 24) = v192;
                          double v194 = Logger.logObject.getter();
                          os_log_type_t v195 = static os_log_type_t.error.getter();
                          uint64_t v196 = swift_allocObject();
                          *(unsigned char *)(v196 + 16) = 112;
                          uint64_t v82 = swift_allocObject();
                          *(unsigned char *)(v82 + 16) = 8;
                          uint64_t v197 = swift_allocObject();
                          *(void *)(v197 + 16) = 1752392040;
                          uint64_t v198 = swift_allocObject();
                          *(void *)(v198 + 16) = sub_100060540;
                          *(void *)(v198 + 24) = v197;
                          uint64_t v199 = swift_allocObject();
                          *(unsigned char *)(v199 + 16) = 33;
                          uint64_t v200 = swift_allocObject();
                          *(unsigned char *)(v200 + 16) = 8;
                          uint64_t v201 = v194;
                          uint64_t v202 = swift_allocObject();
                          *(void *)(v202 + 16) = sub_1000604E8;
                          *(void *)(v202 + 24) = v193;
                          unint64_t v70 = swift_allocObject();
                          *(void *)(v70 + 16) = sub_10005F790;
                          *(void *)(v70 + 24) = v202;
                          sub_10000588C(&qword_101639B60);
                          uint64_t inited = swift_initStackObject();
                          sub_1004B810C(inited, 6);
                          *uint64_t v204 = sub_10005F778;
                          v204[1] = v196;
                          v204[2] = sub_100065514;
                          v204[3] = v82;
                          v204[4] = sub_10006000C;
                          v204[5] = v198;
                          v204[6] = sub_100065514;
                          v204[7] = v199;
                          v204[8] = sub_100065514;
                          v204[9] = v200;
                          v204[10] = sub_10005F7D0;
                          v204[11] = v70;
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_bridgeObjectRelease();
                          if (os_log_type_enabled(v194, v195))
                          {
                            uint64_t v205 = (uint8_t *)swift_slowAlloc();
                            uint64_t v206 = swift_slowAlloc();
                            uint64_t v468 = 0;
                            uint64_t v469 = v206;
                            *(_WORD *)uint64_t v205 = 515;
                            uint64_t v467 = v205 + 2;
                            sub_1008FA6E0(&v467, (uint64_t)&v468, (uint64_t)&v469, 112);
                            swift_release();
                            uint64_t v470 = sub_100065514;
                            unint64_t v471 = v82;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = (uint64_t (*)())sub_10006000C;
                            unint64_t v471 = v198;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = sub_100065514;
                            unint64_t v471 = v199;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = sub_100065514;
                            unint64_t v471 = v200;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = (uint64_t (*)())sub_10005F7D0;
                            unint64_t v471 = v70;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            uint64_t v76 = v466;
                            uint64_t v207 = *(void *)(v466 + 1384);
                            uint64_t v208 = *(void *)(v466 + 1352);
                            swift_release();
                            _os_log_impl((void *)&_mh_execute_header, v201, v195, "Could not create search result for beacon: %{private,mask.hash}s.", v205, 0x16u);
                            swift_arrayDestroy();
                            swift_slowDealloc();
                            sub_1008F9FA0();

                            (*v409)(v207, v208);
                          }
                          else
                          {
                            uint64_t v209 = *(void *)(v466 + 1384);
                            uint64_t v210 = *(void *)(v466 + 1352);
                            swift_release();
                            swift_release();
                            swift_release();
                            swift_release();
                            swift_release();
                            swift_release();

                            (*v409)(v209, v210);
                            uint64_t v76 = v466;
                          }
                        }
                        else
                        {
                          uint64_t v212 = *(void *)(v466 + 1648);
                          uint64_t v213 = *(void *)(v466 + 1528);
                          uint64_t v214 = *(void *)(v466 + 1320);
                          uint64_t v215 = *(void *)(v466 + 1312);
                          uint64_t v216 = *(int *)(v399 + 48);
                          uint64_t v217 = v214 + v216;
                          uint64_t v218 = *(void *)(v466 + 1264) + v216;
                          v185(v214);
                          sub_10025C5CC(v218, v217, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v219 = v215 + *(int *)(v399 + 48);
                          ((void (*)(uint64_t, uint64_t, uint64_t))v395)(v215, v214, v213);
                          uint64_t v382 = v217;
                          sub_10025C504(v217, v219, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          swift_beginAccess();
                          uint64_t v220 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000F790C(v215, *(void *)(v212 + 16));
                          uint64_t v221 = *(void *)(v466 + 1528);
                          uint64_t v222 = *(void *)(v466 + 1328);
                          uint64_t v223 = *(void *)(v466 + 1320);
                          uint64_t v224 = *(void *)(v466 + 1312);
                          if (v220)
                          {
                            uint64_t v225 = *(void *)(v466 + 1144);
                            uint64_t v470 = (uint64_t (*)())v220;
                            swift_endAccess();
                            sub_10025C56C(v219, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            uint64_t v371 = *v386;
                            (*v386)(v224, v221);
                            uint64_t v226 = (unsigned __int8 *)(v222 + *(int *)(v399 + 48));
                            ((void (*)(uint64_t, uint64_t, uint64_t))v395)(v222, v223, v221);
                            sub_10025C504(v382, (uint64_t)v226, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            sub_1000D1E3C(v225, v226);
                            sub_10025C56C(v225, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            v371(v222, v221);
                            uint64_t v227 = v222 + *(int *)(v399 + 48);
                            ((void (*)(uint64_t, uint64_t, uint64_t))v395)(v222, v223, v221);
                            sub_10025C504(v382, v227, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            uint64_t v228 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v470;
                            swift_beginAccess();
                            sub_10015DF64((uint64_t)v228, v222);
                            swift_endAccess();
                            sub_10025C56C(v227, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          }
                          else
                          {
                            os_log_t osloga = *(os_log_t *)(v466 + 1304);
                            swift_endAccess();
                            sub_10025C56C(v219, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            uint64_t v368 = *v386;
                            (*v386)(v224, v221);
                            uint64_t v229 = v222 + *(int *)(v399 + 48);
                            uint64_t v372 = v229;
                            ((void (*)(uint64_t, uint64_t, uint64_t))v395)(v222, v223, v221);
                            sub_10025C504(v382, v229, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            sub_10000588C(&qword_10163AA18);
                            uint64_t v230 = swift_allocObject();
                            uint64_t v231 = sub_1004B7688(v230, 1);
                            uint64_t v232 = v223;
                            uint64_t v234 = v233;
                            uint64_t v235 = (uint64_t)osloga + *(int *)(v399 + 48);
                            ((void (*)(os_log_t, uint64_t, uint64_t))v395)(osloga, v232, v221);
                            sub_10025C504(v382, v235, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            sub_10025C5CC(v235, v234, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            uint64_t v236 = SharingCircleWildAdvertisementKey.init(key:)(v231);
                            v368((uint64_t)osloga, v221);
                            uint64_t v237 = sub_101158D6C(v236);
                            swift_bridgeObjectRelease();
                            swift_beginAccess();
                            sub_10015DF64(v237, v222);
                            swift_endAccess();
                            sub_10025C56C(v372, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          }
                          uint64_t v238 = *(void *)(v466 + 1528);
                          uint64_t v239 = *(void *)(v466 + 1392);
                          uint64_t v373 = *(void *)(v466 + 1648);
                          uint64_t v240 = *(void *)(v466 + 1352);
                          uint64_t v241 = *(void *)(v466 + 1328);
                          uint64_t v242 = *(void *)(v466 + 1320);
                          uint64_t v243 = *(void *)(v466 + 1120);
                          uint64_t v244 = *(void *)(v466 + 1096);
                          uint64_t v245 = sub_100207468();
                          (*v416)(v239, v245, v240);
                          sub_10025C504(v243, v244, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                          uint64_t v246 = swift_allocObject();
                          sub_10025C5CC(v244, v246 + v414, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                          uint64_t v379 = swift_allocObject();
                          *(void *)(v379 + 16) = sub_10025B340;
                          *(void *)(v379 + 24) = v246;
                          uint64_t v247 = v241 + *(int *)(v399 + 48);
                          uint64_t v248 = v242;
                          ((void (*)(uint64_t, uint64_t, uint64_t))v395)(v241, v242, v238);
                          sub_10025C504(v382, v247, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v249 = *(unsigned __int8 *)(v387 + 80);
                          uint64_t v250 = (v249 + 16) & ~v249;
                          uint64_t v251 = swift_allocObject();
                          sub_10001D608(v241, v251 + v250, &qword_10163F728);
                          uint64_t v376 = swift_allocObject();
                          *(void *)(v376 + 16) = sub_10025B4F4;
                          *(void *)(v376 + 24) = v251;
                          uint64_t v252 = v241 + *(int *)(v399 + 48);
                          ((void (*)(uint64_t, uint64_t, uint64_t))v395)(v241, v248, v238);
                          sub_10025C504(v382, v252, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v253 = swift_allocObject();
                          sub_10001D608(v241, v253 + v250, &qword_10163F728);
                          uint64_t v361 = swift_allocObject();
                          *(void *)(v361 + 16) = sub_10025B504;
                          *(void *)(v361 + 24) = v253;
                          uint64_t v254 = v241 + *(int *)(v399 + 48);
                          ((void (*)(uint64_t, uint64_t, uint64_t))v395)(v241, v248, v238);
                          sub_10025C504(v382, v254, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                          uint64_t v255 = swift_allocObject();
                          *(void *)(v255 + 16) = v373;
                          sub_10001D608(v241, v255 + ((v249 + 24) & ~v249), &qword_10163F728);
                          swift_retain();
                          osos_log_t log = Logger.logObject.getter();
                          os_log_type_t v359 = static os_log_type_t.info.getter();
                          uint64_t v374 = swift_allocObject();
                          *(unsigned char *)(v374 + 16) = 112;
                          uint64_t v256 = swift_allocObject();
                          *(unsigned char *)(v256 + 16) = 8;
                          uint64_t v257 = swift_allocObject();
                          *(void *)(v257 + 16) = 1752392040;
                          uint64_t v396 = swift_allocObject();
                          *(void *)(v396 + 16) = sub_10006550C;
                          *(void *)(v396 + 24) = v257;
                          uint64_t v258 = swift_allocObject();
                          *(unsigned char *)(v258 + 16) = 33;
                          uint64_t v259 = v258;
                          uint64_t v383 = swift_allocObject();
                          *(unsigned char *)(v383 + 16) = 8;
                          uint64_t v260 = swift_allocObject();
                          *(void *)(v260 + 16) = sub_1000654F4;
                          *(void *)(v260 + 24) = v379;
                          uint64_t v82 = swift_allocObject();
                          *(void *)(v82 + 16) = sub_1000654EC;
                          *(void *)(v82 + 24) = v260;
                          uint64_t v380 = swift_allocObject();
                          *(unsigned char *)(v380 + 16) = 34;
                          uint64_t v363 = swift_allocObject();
                          *(unsigned char *)(v363 + 16) = 8;
                          uint64_t v261 = swift_allocObject();
                          *(void *)(v261 + 16) = sub_10025B4F8;
                          *(void *)(v261 + 24) = v376;
                          uint64_t v377 = swift_allocObject();
                          *(void *)(v377 + 16) = sub_1000654EC;
                          *(void *)(v377 + 24) = v261;
                          uint64_t v369 = swift_allocObject();
                          *(unsigned char *)(v369 + 16) = 34;
                          uint64_t v358 = swift_allocObject();
                          *(unsigned char *)(v358 + 16) = 8;
                          uint64_t v262 = swift_allocObject();
                          *(void *)(v262 + 16) = sub_10025B508;
                          *(void *)(v262 + 24) = v361;
                          uint64_t v263 = swift_allocObject();
                          *(void *)(v263 + 16) = sub_1000654EC;
                          *(void *)(v263 + 24) = v262;
                          unint64_t v264 = v263;
                          uint64_t v265 = swift_allocObject();
                          *(unsigned char *)(v265 + 16) = 0;
                          unint64_t v266 = v265;
                          uint64_t v357 = swift_allocObject();
                          *(unsigned char *)(v357 + 16) = 8;
                          uint64_t v267 = swift_allocObject();
                          *(void *)(v267 + 16) = sub_10025B514;
                          *(void *)(v267 + 24) = v255;
                          uint64_t v362 = swift_allocObject();
                          *(void *)(v362 + 16) = sub_100060004;
                          *(void *)(v362 + 24) = v267;
                          sub_10000588C(&qword_101639B60);
                          uint64_t v268 = swift_allocObject();
                          sub_1004B810C(v268, 15);
                          *uint64_t v269 = sub_100065514;
                          v269[1] = v374;
                          v269[2] = sub_100065514;
                          v269[3] = v256;
                          v269[4] = sub_100065504;
                          v269[5] = v396;
                          v269[6] = sub_100065514;
                          v269[7] = v259;
                          unint64_t v270 = v259;
                          v269[8] = sub_100065514;
                          v269[9] = v383;
                          v269[10] = sub_100065500;
                          v269[11] = v82;
                          v269[12] = sub_100065514;
                          v269[13] = v380;
                          v269[14] = sub_100065514;
                          v269[15] = v363;
                          v269[16] = sub_100065500;
                          v269[17] = v377;
                          v269[18] = sub_100065514;
                          v269[19] = v369;
                          v269[20] = sub_100065514;
                          v269[21] = v358;
                          v269[22] = sub_100065500;
                          v269[23] = v264;
                          v269[24] = sub_100065514;
                          v269[25] = v266;
                          unint64_t v70 = v266;
                          v269[26] = sub_100065514;
                          v269[27] = v357;
                          v269[28] = sub_10006000C;
                          v269[29] = v362;
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          swift_bridgeObjectRelease();
                          if (os_log_type_enabled(oslog, v359))
                          {
                            uint64_t v271 = sub_1008F9FAC();
                            uint64_t v272 = swift_slowAlloc();
                            uint64_t v468 = 0;
                            uint64_t v469 = v272;
                            buf = (uint8_t *)v271;
                            *(_WORD *)uint64_t v271 = 1283;
                            uint64_t v467 = (unsigned char *)(v271 + 2);
                            uint64_t v470 = sub_100065514;
                            unint64_t v471 = v374;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            uint64_t v211 = v465;
                            swift_release();
                            uint64_t v470 = sub_100065514;
                            unint64_t v471 = v256;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = (uint64_t (*)())sub_100065504;
                            unint64_t v471 = v396;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = sub_100065514;
                            unint64_t v471 = v270;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = sub_100065514;
                            unint64_t v471 = v383;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = sub_100065500;
                            unint64_t v471 = v82;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = sub_100065514;
                            unint64_t v471 = v380;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = sub_100065514;
                            unint64_t v471 = v363;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = sub_100065500;
                            unint64_t v471 = v377;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = sub_100065514;
                            unint64_t v471 = v369;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = sub_100065514;
                            unint64_t v471 = v358;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = sub_100065500;
                            unint64_t v471 = v264;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = sub_100065514;
                            unint64_t v471 = v266;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            uint64_t v470 = sub_100065514;
                            unint64_t v471 = v357;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            swift_release();
                            unint64_t v70 = v362;
                            uint64_t v470 = (uint64_t (*)())sub_10006000C;
                            unint64_t v471 = v362;
                            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v470, (uint64_t)&v467, (uint64_t)&v468, (uint64_t)&v469);
                            uint64_t v82 = (uint64_t)oslog;
                            uint64_t v76 = v466;
                            uint64_t v273 = *(void *)(v466 + 1392);
                            uint64_t v274 = *(void *)(v466 + 1352);
                            uint64_t v275 = *(void *)(v466 + 1320);
                            swift_release();
                            _os_log_impl((void *)&_mh_execute_header, oslog, v359, "Return search result for beacon (own beacon): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", buf, 0x34u);
                            swift_arrayDestroy();
                            swift_slowDealloc();
                            sub_1008F9FA0();

                            (*v409)(v273, v274);
                            sub_10001DAB4(v275, &qword_10163F728);
                            goto LABEL_104;
                          }
                          uint64_t v76 = v466;
                          uint64_t v360 = *(void *)(v466 + 1392);
                          uint64_t v276 = *(void *)(v466 + 1352);
                          uint64_t v277 = *(void *)(v466 + 1320);

                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          (*v409)(v360, v276);
                          sub_10001DAB4(v277, &qword_10163F728);
                        }
                        uint64_t v211 = v465;
LABEL_104:
                        sub_10025C56C(*(void *)(v76 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                        uint64_t v155 = v449 + 1;
                        uint64_t v93 = v417;
                        if (v455 == v434) {
                          goto LABEL_113;
                        }
                      }
                    }
LABEL_26:
                    sub_10001CFB8(v82, v70);
                    sub_10001CFB8(v82, v70);
LABEL_27:
                    sub_10025C56C(*(void *)(v466 + 1104), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                    uint64_t v448 = 0;
                    v101 += v433;
                    if (!--v73)
                    {
                      swift_bridgeObjectRelease();
                      uint64_t v448 = 0;
                      unint64_t v141 = v428;
                      goto LABEL_84;
                    }
                    break;
                }
                continue;
              }
              if (!v123)
              {
                uint64_t v338 = BYTE6(v122);
                goto LABEL_168;
              }
              if (v123 == 1)
              {
                if (!__OFSUB__(HIDWORD(v120), v120))
                {
                  uint64_t v338 = HIDWORD(v120) - (int)v120;
LABEL_168:
                  sub_10013019C();
                  uint64_t v336 = swift_allocError();
                  *(void *)uint64_t v347 = 28;
                  *(void *)(v347 + 8) = v338;
                  *(unsigned char *)(v347 + 16) = 0;
                  swift_willThrow();
                  goto LABEL_169;
                }
                __break(1u);
              }
              else
              {
                uint64_t v346 = *(void *)(v120 + 16);
                uint64_t v345 = *(void *)(v120 + 24);
                uint64_t v338 = v345 - v346;
                if (!__OFSUB__(v345, v346)) {
                  goto LABEL_168;
                }
              }
              __break(1u);
              break;
            case 2uLL:
              uint64_t v126 = *(void *)(v120 + 16);
              uint64_t v125 = *(void *)(v120 + 24);
              BOOL v118 = __OFSUB__(v125, v126);
              uint64_t v124 = v125 - v126;
              if (!v118) {
                goto LABEL_61;
              }
              goto LABEL_181;
            case 3uLL:
              uint64_t v338 = 0;
              goto LABEL_168;
            default:
              uint64_t v124 = BYTE6(v122);
              goto LABEL_61;
          }
          goto LABEL_193;
        }
LABEL_155:
        uint64_t v323 = v82;
        unint64_t v324 = v70;
LABEL_153:
        sub_10001CFB8(v323, v324);
        return _assertionFailure(_:_:file:line:flags:)();
      case 2uLL:
        uint64_t v117 = *(void *)(v82 + 16);
        uint64_t v116 = *(void *)(v82 + 24);
        BOOL v118 = __OFSUB__(v116, v117);
        uint64_t v115 = v116 - v117;
        if (!v118) {
          goto LABEL_54;
        }
        goto LABEL_178;
      case 3uLL:
        goto LABEL_155;
      default:
        uint64_t v115 = BYTE6(v70);
        goto LABEL_54;
    }
  }
}

uint64_t sub_10024CBFC()
{
  uint64_t v1 = v0[204];
  uint64_t v2 = v0[197];
  uint64_t v3 = v0[192];
  uint64_t v4 = v0[191];
  sub_10001CFB8(v0[209], v0[210]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_10025C56C(v1, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10024CF84()
{
  unint64_t v1 = v0[228];
  uint64_t v2 = v0[227];
  uint64_t v3 = (void *)v0[223];
  unint64_t v4 = v0[219];
  uint64_t v5 = v0[218];
  uint64_t v6 = v0[204];
  uint64_t v7 = v0[197];
  uint64_t v13 = v0[196];
  uint64_t v8 = v0[192];
  uint64_t v9 = v0[191];
  sub_10001CFB8(v0[209], v0[210]);

  sub_100037A24(v5, v4);
  sub_10001CFB8(v2, v1);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v10(v7, v9);
  sub_10025C56C(v6, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  v10(v13, v9);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10024D358()
{
  unint64_t v479 = v0;
  unint64_t v1 = (_OWORD *)(v0 + 224);
  uint64_t v2 = (long long *)(v0 + 384);
  *(void *)(v0 + 1984) = 0;
  uint64_t v3 = (void *)(*(void *)(v0 + 1224) + *(int *)(v0 + 2024));
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  sub_10001CD44(v3, v4);
  int v6 = sub_100EB7B8C(v4, v5);
  if (v6)
  {
    if (v6 == 1)
    {
      sub_10001D010(*(void *)(v0 + 1224) + *(int *)(v0 + 2024), v0 + 224);
    }
    else
    {
      *(void *)(v0 + 256) = 0;
      _OWORD *v1 = 0u;
      *(_OWORD *)(v0 + 240) = 0u;
    }
  }
  else
  {
    uint64_t v7 = (void *)(*(void *)(v0 + 1224) + *(int *)(v0 + 2024));
    sub_10001CD44(v7, v7[3]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v8 = *(void *)(v0 + 944);
    *(void *)(v0 + 328) = &type metadata for PrimaryWildIndex;
    *(void *)(v0 + 336) = sub_1001A1694();
    *(void *)(v0 + 304) = v8;
    sub_10001D608(v0 + 304, (uint64_t)v1, &qword_10163F740);
  }
  sub_10001D074((uint64_t)v1, (uint64_t)v2, &qword_10163F740);
  if (*(void *)(v0 + 408))
  {
    sub_10001CEB0(v2, v0 + 424);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 1992) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_100242F40;
    uint64_t v10 = *(void *)(v0 + 1568);
    return sub_100E5EB88(v0 + 264, v10);
  }
  uint64_t v12 = *(void *)(v0 + 1224);
  sub_10001DAB4((uint64_t)v1, &qword_10163F740);
  sub_10025C56C(v12, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_10001DAB4((uint64_t)v2, &qword_10163F740);
  unint64_t v13 = v0;
  uint64_t v14 = *(void *)(v0 + 1648);
  uint64_t v15 = *(void *)(v13 + 1568);
  swift_beginAccess();
  uint64_t v16 = sub_1000F790C(v15, *(void *)(v14 + 16));
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 1720);
  uint64_t v18 = *(void *)(v13 + 1648);
  uint64_t v19 = *(void *)(v13 + 1568);
  uint64_t v465 = *(void *)(v13 + 1536);
  uint64_t v470 = *(void *)(v13 + 1560);
  uint64_t v20 = *(void *)(v13 + 1528);
  uint64_t v21 = *(void *)(v13 + 1344);
  uint64_t v22 = *(void *)(v13 + 1328);
  uint64_t v459 = v21 + *(int *)(v13 + 2020);
  uint64_t v450 = *(NSObject **)(v13 + 1280);
  if (v16)
  {
    uint64_t v439 = *(void *)(v13 + 1568);
    uint64_t v23 = *(void *)(v13 + 1144);
    *(void *)(v13 + 896) = v16;
    swift_endAccess();
    uint64_t v24 = (unsigned __int8 *)(v22 + SLODWORD(v450[6].isa));
    v17(v22, v21, v20);
    sub_10025C504(v459, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_100DCCAA4(v23, v24);
    sub_10025C56C(v23, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v465 + 8);
    v25(v22, v20);
    v17(v470, v439, v20);
    uint64_t v26 = *(void *)(v13 + 896);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v477 = *(uint64_t (**)())(v18 + 16);
    *(void *)(v18 + 16) = 0x8000000000000000;
    sub_10016D370(v26, v470, isUniquelyReferenced_nonNull_native);
    *(void *)(v18 + 16) = v477;
    swift_bridgeObjectRelease();
    v25(v470, v20);
  }
  else
  {
    swift_endAccess();
    uint64_t v28 = v19;
    uint64_t v29 = v20;
    uint64_t v30 = v20;
    uint64_t v31 = v17;
    v17(v470, v28, v30);
    sub_10000588C(&qword_10163AA18);
    uint64_t v32 = swift_allocObject();
    uint64_t v33 = sub_1004B7688(v32, 1);
    uint64_t v35 = v34;
    uint64_t v36 = v22 + SLODWORD(v450[6].isa);
    v31(v22, v21, v29);
    sub_10025C504(v459, v36, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_10025C5CC(v36, v35, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v37 = SharingCircleWildAdvertisementKey.init(key:)(v33);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v465 + 8);
    v38(v22, v29);
    uint64_t v39 = sub_101158D6C(v37);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    char v40 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v477 = *(uint64_t (**)())(v18 + 16);
    *(void *)(v18 + 16) = 0x8000000000000000;
    sub_10016D370(v39, v470, v40);
    *(void *)(v18 + 16) = v477;
    swift_bridgeObjectRelease();
    v38(v470, v29);
  }
  swift_endAccess();
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 1720);
  uint64_t v436 = *(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 1704);
  uint64_t v446 = *(void *)(v13 + 1648);
  uint64_t v42 = *(void *)(v13 + 1568);
  uint64_t v43 = *(void *)(v13 + 1560);
  uint64_t v422 = *(void *)(v13 + 1536);
  uint64_t v44 = *(void *)(v13 + 1528);
  uint64_t v45 = *(void *)(v13 + 1408);
  uint64_t v46 = *(void *)(v13 + 1360);
  uint64_t v47 = *(void *)(v13 + 1352);
  uint64_t v48 = *(void *)(v13 + 1328);
  unint64_t v473 = v13;
  uint64_t v440 = *(void *)(v13 + 1288);
  uint64_t v460 = *(void *)(v13 + 1344);
  uint64_t v466 = v460 + *(int *)(v13 + 2020);
  uint64_t v49 = *(void *)(v13 + 1280);
  uint64_t v50 = sub_100010324(v47, (uint64_t)qword_10170D9D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v45, v50, v47);
  uint64_t v432 = v41;
  v41(v43, v42, v44);
  unint64_t v51 = (*(unsigned __int8 *)(v422 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v422 + 80);
  uint64_t v52 = swift_allocObject();
  v436(v52 + v51, v43, v44);
  uint64_t v451 = swift_allocObject();
  *(void *)(v451 + 16) = sub_10025B7C4;
  *(void *)(v451 + 24) = v52;
  uint64_t v53 = v48 + *(int *)(v49 + 48);
  v41(v48, v460, v44);
  sub_10025C504(v466, v53, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v54 = *(unsigned __int8 *)(v440 + 80);
  uint64_t v55 = (v54 + 16) & ~v54;
  uint64_t v56 = swift_allocObject();
  sub_10001D608(v48, v56 + v55, &qword_10163F728);
  uint64_t v441 = swift_allocObject();
  *(void *)(v441 + 16) = sub_10025B4F4;
  *(void *)(v441 + 24) = v56;
  uint64_t v57 = v48 + *(int *)(v49 + 48);
  v432(v48, v460, v44);
  sub_10025C504(v466, v57, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v58 = swift_allocObject();
  sub_10001D608(v48, v58 + v55, &qword_10163F728);
  uint64_t v427 = swift_allocObject();
  *(void *)(v427 + 16) = sub_10025B504;
  *(void *)(v427 + 24) = v58;
  uint64_t v59 = v48 + *(int *)(v49 + 48);
  v432(v48, v460, v44);
  sub_10025C504(v466, v59, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = v446;
  sub_10001D608(v48, v60 + ((v54 + 24) & ~v54), &qword_10163F728);
  swift_retain();
  uint64_t v433 = Logger.logObject.getter();
  LOBYTE(v430) = static os_log_type_t.info.getter();
  uint64_t v447 = swift_allocObject();
  *(unsigned char *)(v447 + 16) = 112;
  uint64_t v471 = swift_allocObject();
  *(unsigned char *)(v471 + 16) = 8;
  uint64_t v61 = swift_allocObject();
  *(void *)(v61 + 16) = 1752392040;
  uint64_t v467 = swift_allocObject();
  *(void *)(v467 + 16) = sub_10006550C;
  *(void *)(v467 + 24) = v61;
  uint64_t v444 = swift_allocObject();
  *(unsigned char *)(v444 + 16) = 33;
  uint64_t v461 = swift_allocObject();
  *(unsigned char *)(v461 + 16) = 8;
  uint64_t v62 = swift_allocObject();
  *(void *)(v62 + 16) = sub_1000654F4;
  *(void *)(v62 + 24) = v451;
  uint64_t v63 = swift_allocObject();
  *(void *)(v63 + 16) = sub_1000654EC;
  *(void *)(v63 + 24) = v62;
  uint64_t v452 = swift_allocObject();
  *(unsigned char *)(v452 + 16) = 34;
  uint64_t v437 = swift_allocObject();
  *(unsigned char *)(v437 + 16) = 8;
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = sub_10025C990;
  *(void *)(v64 + 24) = v441;
  uint64_t v442 = swift_allocObject();
  *(void *)(v442 + 16) = sub_1000654EC;
  *(void *)(v442 + 24) = v64;
  uint64_t v65 = swift_allocObject();
  *(unsigned char *)(v65 + 16) = 34;
  uint64_t v66 = v65;
  uint64_t v67 = swift_allocObject();
  *(unsigned char *)(v67 + 16) = 8;
  uint64_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = sub_10025C994;
  *(void *)(v68 + 24) = v427;
  uint64_t v69 = swift_allocObject();
  *(void *)(v69 + 16) = sub_1000654EC;
  *(void *)(v69 + 24) = v68;
  uint64_t v70 = swift_allocObject();
  *(unsigned char *)(v70 + 16) = 0;
  uint64_t v71 = v70;
  unint64_t v72 = swift_allocObject();
  *(unsigned char *)(v72 + 16) = 8;
  uint64_t v73 = swift_allocObject();
  *(void *)(v73 + 16) = sub_10025B514;
  *(void *)(v73 + 24) = v60;
  uint64_t v425 = swift_allocObject();
  *(void *)(v425 + 16) = sub_10006569C;
  *(void *)(v425 + 24) = v73;
  sub_10000588C(&qword_101639B60);
  uint64_t v74 = swift_allocObject();
  sub_1004B810C(v74, 15);
  *uint64_t v75 = sub_100065514;
  v75[1] = v447;
  v75[2] = sub_100065514;
  v75[3] = v471;
  v75[4] = sub_100065504;
  v75[5] = v467;
  v75[6] = sub_100065514;
  v75[7] = v444;
  v75[8] = sub_100065514;
  v75[9] = v461;
  v75[10] = sub_100065500;
  v75[11] = v63;
  v75[12] = sub_100065514;
  v75[13] = v452;
  v75[14] = sub_100065514;
  v75[15] = v437;
  v75[16] = sub_100065500;
  v75[17] = v442;
  v75[18] = sub_100065514;
  v75[19] = v66;
  v75[20] = sub_100065514;
  v75[21] = v67;
  v75[22] = sub_100065500;
  v75[23] = v69;
  v75[24] = sub_100065514;
  v75[25] = v71;
  v75[26] = sub_100065514;
  v75[27] = v72;
  v75[28] = sub_100065504;
  v75[29] = v425;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v423 = v66;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v433, (os_log_type_t)v430))
  {
    uint64_t v82 = v473;
    unint64_t v417 = *(void *)(v473 + 1824);
    uint64_t v412 = *(void *)(v473 + 1816);
    uint64_t v428 = *(void *)(v473 + 1408);
    uint64_t v83 = *(void *)(v473 + 1360);
    uint64_t v420 = *(void *)(v473 + 1352);
    uint64_t v84 = *(void *)(v473 + 1344);
    uint64_t v431 = *(void *)(v473 + 1256);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10001CFB8(v412, v417);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v428, v420);
    sub_10001DAB4(v431, &qword_101657910);
    uint64_t v85 = v84;
    goto LABEL_18;
  }
  uint64_t v409 = v71;
  unint64_t v76 = v473;
  uint64_t v77 = (uint8_t *)sub_1008F9FAC();
  uint64_t v78 = swift_slowAlloc();
  *(void *)(v473 + 856) = 0;
  *(void *)(v473 + 824) = v78;
  *(_WORD *)uint64_t v77 = 1283;
  *(void *)(v473 + 864) = v77 + 2;
  *(void *)(v473 + 648) = sub_100065514;
  *(void *)(v473 + 656) = v447;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 648), v76 + 864, v76 + 856, v76 + 824);
  swift_release();
  *(void *)(v473 + 648) = sub_100065514;
  *(void *)(v473 + 656) = v471;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v473 + 648), v76 + 864, v76 + 856, v473 + 824);
  swift_release();
  *(void *)(v473 + 648) = sub_100065504;
  *(void *)(v473 + 656) = v467;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v473 + 648), v76 + 864, v76 + 856, v473 + 824);
  swift_release();
  *(void *)(v473 + 648) = sub_100065514;
  *(void *)(v473 + 656) = v444;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v473 + 648), v76 + 864, v76 + 856, v473 + 824);
  swift_release();
  *(void *)(v473 + 648) = sub_100065514;
  *(void *)(v473 + 656) = v461;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v473 + 648), v76 + 864, v76 + 856, v473 + 824);
  swift_release();
  *(void *)(v473 + 648) = sub_100065500;
  *(void *)(v473 + 656) = v63;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v473 + 648), v76 + 864, v76 + 856, v473 + 824);
  swift_release();
  *(void *)(v473 + 648) = sub_100065514;
  *(void *)(v473 + 656) = v452;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v473 + 648), v76 + 864, v76 + 856, v473 + 824);
  swift_release();
  *(void *)(v473 + 648) = sub_100065514;
  *(void *)(v473 + 656) = v437;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v473 + 648), v76 + 864, v76 + 856, v473 + 824);
  unint64_t v79 = v77;
  uint64_t v80 = v433;
  swift_release();
  *(void *)(v473 + 648) = sub_100065500;
  unint64_t v81 = v473;
  *(void *)(v473 + 656) = v442;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v473 + 648), v473 + 864, v473 + 856, v473 + 824);
  swift_release();
  *(void *)(v473 + 648) = sub_100065514;
  *(void *)(v473 + 656) = v423;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v473 + 648), v473 + 864, v473 + 856, v473 + 824);
  swift_release();
  *(void *)(v473 + 648) = sub_100065514;
  *(void *)(v473 + 656) = v67;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v473 + 648), v473 + 864, v473 + 856, v473 + 824);
  swift_release();
  *(void *)(v473 + 648) = sub_100065500;
  *(void *)(v473 + 656) = v69;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v473 + 648), v473 + 864, v473 + 856, v473 + 824);
  swift_release();
  *(void *)(v473 + 648) = sub_100065514;
  *(void *)(v473 + 656) = v409;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v473 + 648), v473 + 864, v473 + 856, v473 + 824);
  swift_release();
  *(void *)(v473 + 648) = sub_100065514;
  *(void *)(v473 + 656) = v72;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v473 + 648), v473 + 864, v473 + 856, v473 + 824);
  swift_release();
  *(void *)(v473 + 648) = sub_100065504;
  *(void *)(v473 + 656) = v425;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v473 + 648), v473 + 864, v473 + 856, v473 + 824);
LABEL_193:
  uint64_t v82 = v81;
  unint64_t v357 = *(void *)(v81 + 1824);
  uint64_t v358 = *(void *)(v81 + 1816);
  os_log_type_t v359 = *(NSObject **)(v81 + 1408);
  uint64_t v360 = *(void *)(v81 + 1360);
  uint64_t v361 = *(void *)(v81 + 1352);
  uint64_t v469 = *(void *)(v82 + 1344);
  uint64_t v458 = v359;
  uint64_t v464 = *(void *)(v82 + 1256);
  swift_release();
  _os_log_impl((void *)&_mh_execute_header, v80, (os_log_type_t)v430, "Return search result for beacon (wild): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", v79, 0x34u);
  swift_arrayDestroy();
  swift_slowDealloc();
  sub_1008F9FA0();

  swift_release();
  sub_10001CFB8(v358, v357);
  uint64_t v362 = *(void (**)(uint64_t, uint64_t))(v360 + 8);
  unint64_t v72 = v360 + 8;
  v362((uint64_t)v458, v361);
  sub_10001DAB4(v464, &qword_101657910);
  uint64_t v85 = v469;
LABEL_18:
  sub_10001DAB4(v85, &qword_10163F728);
  uint64_t v86 = *(void *)(v82 + 1808) + 1;
  if (v86 != *(void *)(v82 + 1800))
  {
    *(void *)(v82 + 1808) = v86;
    unint64_t v286 = *(void *)(v82 + 1752);
    uint64_t v287 = *(void *)(v82 + 1792) + 24 * v86;
    uint64_t v288 = *(void *)(v287 + 32);
    *(void *)(v82 + 1816) = v288;
    uint64_t v91 = *(void *)(v287 + 40);
    *(void *)(v82 + 1824) = v91;
    int v289 = *(_DWORD *)(v287 + 48);
    *(unsigned char *)(v82 + 1836) = *(unsigned char *)(v287 + 52);
    *(_DWORD *)(v82 + 1832) = v289;
    uint64_t v290 = 0;
    uint64_t v291 = 0;
    switch(v286 >> 62)
    {
      case 1uLL:
        sub_100037A38(*(void *)(v82 + 1744), v286);
        uint64_t v316 = *(void *)(v82 + 1744);
        uint64_t v290 = v316 >> 32;
        uint64_t v291 = (int)v316;
        break;
      case 2uLL:
        uint64_t v317 = *(void *)(v82 + 1744);
        uint64_t v291 = *(void *)(v317 + 16);
        uint64_t v290 = *(void *)(v317 + 24);
        sub_100037A38(v317, v286);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v291 = 0;
        uint64_t v290 = BYTE6(v286);
        break;
    }
    unint64_t v318 = sub_1008AA59C(v291, v290, *(void *)(v82 + 1744), *(void *)(v82 + 1752));
    unint64_t v98 = *(void *)(v82 + 1752);
    if (v318 < 0x39)
    {
      switch(v98 >> 62)
      {
        case 1uLL:
          uint64_t v321 = *(void *)(v82 + 1744);
          uint64_t v319 = v321 >> 32;
          uint64_t v320 = (int)v321;
          goto LABEL_147;
        case 2uLL:
          uint64_t v322 = *(void *)(v82 + 1744);
          uint64_t v320 = *(void *)(v322 + 16);
          uint64_t v319 = *(void *)(v322 + 24);
          goto LABEL_147;
        default:
          goto LABEL_149;
      }
    }
    uint64_t v319 = sub_1008AA520(v291, 57, *(void *)(v82 + 1744), *(void *)(v82 + 1752));
    uint64_t v320 = 0;
    switch(v98 >> 62)
    {
      case 1uLL:
        uint64_t v320 = (int)*(void *)(v82 + 1744);
        break;
      case 2uLL:
        uint64_t v320 = *(void *)(*(void *)(v82 + 1744) + 16);
        break;
      default:
        break;
    }
LABEL_147:
    if (v319 >= v320)
    {
      unint64_t v98 = *(void *)(v82 + 1752);
LABEL_149:
      uint64_t v323 = *(void *)(v82 + 1744);
      sub_1000361E0(v288, v91);
      sub_1000361E0(v288, v91);
      unint64_t v72 = Data._Representation.subscript.getter();
      unint64_t v325 = v324;
      sub_100037A24(v323, v98);
      switch(v325 >> 62)
      {
        case 1uLL:
          LODWORD(v326) = HIDWORD(v72) - v72;
          if (__OFSUB__(HIDWORD(v72), v72)) {
            goto LABEL_188;
          }
          uint64_t v326 = (int)v326;
          goto LABEL_154;
        case 2uLL:
          uint64_t v328 = *(void *)(v72 + 16);
          uint64_t v327 = *(void *)(v72 + 24);
          BOOL v126 = __OFSUB__(v327, v328);
          uint64_t v326 = v327 - v328;
          if (v126) {
            goto LABEL_189;
          }
          goto LABEL_154;
        case 3uLL:
          goto LABEL_156;
        default:
          uint64_t v326 = BYTE6(v325);
LABEL_154:
          if (v326 != 57)
          {
LABEL_156:
            uint64_t v329 = v72;
            unint64_t v330 = v325;
            goto LABEL_157;
          }
          sub_1000361E0(v72, v325);
          uint64_t v331 = sub_100A94760(v72, v325);
          unint64_t v333 = v332;
          sub_10001CFB8(v72, v325);
          sub_100434E0C(v331, v333, (uint64_t *)(v82 + 696));
          sub_10001CFB8(v72, v325);
          uint64_t v343 = *(void *)(v82 + 696);
          *(void *)(v82 + 1840) = v343;
          uint64_t v344 = *(void *)(v82 + 704);
          *(void *)(v82 + 1848) = v344;
          uint64_t v345 = (void *)swift_task_alloc();
          *(void *)(v82 + 1856) = v345;
          *uint64_t v345 = v82;
          v345[1] = sub_100233AA0;
          uint64_t v346 = *(void *)(v82 + 1784);
          uint64_t v347 = *(void *)(v82 + 1568);
          uint64_t v348 = *(void *)(v82 + 1272);
          uint64_t result = sub_10025916C(v348, v288, v91, v346, v343, v344, 0, v347);
          break;
      }
      return result;
    }
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
    swift_once();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v334 = swift_allocObject();
    uint64_t v335 = sub_1004B810C(v334, 1);
    uint64_t v337 = v336;
    *uint64_t v402 = v72;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v338 = String.init<A>(describing:)();
    uint64_t v340 = v339;
    v337[3] = (uint64_t)&type metadata for String;
    v337[4] = sub_10000B4CC();
    *uint64_t v337 = v338;
    v337[1] = v340;
    SharingCircleWildAdvertisementKey.init(key:)(v335);
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_100130148();
    uint64_t v351 = swift_allocError();
    *unint64_t v341 = 0;
    swift_willThrow();
    swift_errorRelease();
    unint64_t v81 = v98;
    uint64_t v80 = v91;
LABEL_170:
    sub_10001CFB8((uint64_t)v80, v81);
    uint64_t v477 = 0;
    unint64_t v478 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    unint64_t v353 = v478;
    *(void *)(v82 + 680) = v477;
    *(void *)(v82 + 688) = v353;
    v354._object = (void *)0x80000001013F3B70;
    v354._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v354);
    *(void *)(v82 + 872) = v351;
    sub_10000588C(&qword_101638D40);
    _print_unlocked<A, B>(_:_:)();
    return _assertionFailure(_:_:file:line:flags:)();
  }
  unint64_t v87 = *(void **)(v473 + 1784);
  unint64_t v88 = *(void *)(v473 + 1752);
  unint64_t v89 = *(void *)(v473 + 1744);
  uint64_t v90 = *(void *)(v473 + 1632);
  uint64_t v91 = *(void *)(v473 + 1576);
  uint64_t v92 = *(void *)(v473 + 1568);
  uint64_t v93 = *(void *)(v473 + 1536);
  uint64_t v94 = *(void *)(v473 + 1528);
  sub_10001CFB8(*(void *)(v473 + 1672), *(void *)(v473 + 1680));

  uint64_t v82 = v473;
  sub_100037A24(v89, v88);
  swift_bridgeObjectRelease();
  unint64_t v96 = *(NSObject **)(v93 + 8);
  unint64_t v72 = v93 + 8;
  uint64_t v95 = v96;
  ((void (*)(uint64_t, uint64_t))v96)(v91, v94);
  sub_10025C56C(v90, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  ((void (*)(uint64_t, uint64_t))v96)(v92, v94);
  unint64_t v97 = *(void *)(v473 + 1664) + 1;
  if (v97 != *(void *)(v473 + 1656))
  {
    uint64_t v91 = (uint64_t)qword_10170D9D8;
    do
    {
      *(void *)(v82 + 1664) = v97;
      uint64_t v292 = *(void **)(v82 + 984);
      if (!v292) {
        uint64_t v292 = _swiftEmptyArrayStorage;
      }
      if (v97 >= v292[2])
      {
        __break(1u);
        sub_10001CFB8(v88, (unint64_t)v95);
        uint64_t v477 = 0;
        unint64_t v478 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        unint64_t v355 = v478;
        *(void *)(v82 + 744) = v477;
        *(void *)(v82 + 752) = v355;
        v356._object = (void *)0x80000001013F3B70;
        v356._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v356);
        *(void *)(v82 + 848) = v89;
        sub_10000588C(&qword_101638D40);
        _print_unlocked<A, B>(_:_:)();
        return _assertionFailure(_:_:file:line:flags:)();
      }
      uint64_t v293 = *(unsigned __int8 *)(v82 + 2016);
      uint64_t v294 = *(void *)(v82 + 1632);
      uint64_t v295 = *(void *)(v82 + 1592);
      uint64_t v296 = *(void *)(v473 + 1584);
      uint64_t v297 = *(void *)(v473 + 1536);
      uint64_t v298 = *(void *)(v473 + 1528);
      uint64_t v299 = *(void *)(v473 + 1520);
      sub_10025C504((uint64_t)v292 + ((v293 + 32) & ~v293) + *(void *)(v295 + 72) * v97, v294, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      unint64_t v88 = *(void *)(v294 + 16);
      *(void *)(v473 + 1672) = v88;
      unint64_t v89 = *(void *)(v294 + 24);
      *(void *)(v473 + 1680) = v89;
      uint64_t v300 = *(int *)(v296 + 28);
      uint64_t v82 = v473;
      sub_10001D074(v294 + v300, v299, &qword_101638CF0);
      uint64_t v301 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v297 + 48);
      *(void *)(v473 + 1688) = v301;
      *(void *)(v473 + 1696) = (v297 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
      if (v301(v299, 1, v298) != 1)
      {
        uint64_t v307 = *(void *)(v473 + 1576);
        uint64_t v308 = *(void *)(v473 + 1536);
        uint64_t v309 = *(void *)(v473 + 1528);
        uint64_t v310 = *(void *)(v473 + 1520);
        uint64_t v311 = *(void *)(v473 + 1512);
        uint64_t v312 = *(void (**)(uint64_t, uint64_t, uint64_t))(v308 + 32);
        *(void *)(v473 + 1704) = v312;
        *(void *)(v473 + 1712) = (v308 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v312(v307, v310, v309);
        uint64_t v313 = *(void (**)(uint64_t, uint64_t, uint64_t))(v308 + 16);
        *(void *)(v473 + 1720) = v313;
        *(void *)(v473 + 1728) = (v308 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v313(v311, v307, v309);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v308 + 56))(v311, 0, 1, v309);
        sub_1000361E0(v88, v89);
        uint64_t v314 = (void *)swift_task_alloc();
        *(void *)(v473 + 1736) = v314;
        *uint64_t v314 = v473;
        v314[1] = sub_1002280E0;
        uint64_t v315 = *(void *)(v473 + 1512);
        return sub_100257574(v88, v89, v315);
      }
      uint64_t v302 = *(void *)(v473 + 1520);
      sub_1000361E0(v88, v89);
      sub_10001DAB4(v302, &qword_101638CF0);
      if (qword_101636908 != -1) {
        swift_once();
      }
      sub_100010324(*(void *)(v473 + 1352), (uint64_t)qword_10170D9D8);
      uint64_t v95 = Logger.logObject.getter();
      os_log_type_t v303 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v95, v303))
      {
        uint64_t v304 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v304 = 0;
        _os_log_impl((void *)&_mh_execute_header, v95, v303, "Missing share id in payload.", v304, 2u);
        swift_slowDealloc();
      }
      unint64_t v72 = *(void *)(v473 + 1632);
      sub_10001CFB8(v88, v89);

      sub_10025C56C(v72, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      unint64_t v97 = *(void *)(v473 + 1664) + 1;
    }
    while (v97 != *(void *)(v473 + 1656));
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v82 + 976)) {
    unint64_t v98 = *(void *)(v82 + 976);
  }
  else {
    unint64_t v98 = (unint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t v426 = *(void *)(v98 + 16);
  if (!v426)
  {
    swift_bridgeObjectRetain();
LABEL_132:
    swift_bridgeObjectRelease();
    uint64_t v305 = *(void *)(v82 + 1648);
    swift_beginAccess();
    uint64_t v463 = *(void *)(v305 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v306 = *(uint64_t (**)(uint64_t))(v82 + 8);
    return v306(v463);
  }
  uint64_t v99 = *(void *)(v82 + 1536);
  uint64_t v402 = (unint64_t *)(v82 + 888);
  uint64_t v100 = *(void *)(v82 + 1360);
  uint64_t v403 = *(void *)(v82 + 1280);
  uint64_t v101 = *(void *)(v82 + 1160);
  uint64_t v405 = *(void *)(v82 + 1120);
  uint64_t v462 = *(void *)(v82 + 1104);
  uint64_t v408 = *(void *)(v82 + 1080);
  uint64_t v102 = *(void *)(v82 + 1056);
  uint64_t v445 = (void (**)(uint64_t, void, uint64_t))(v102 + 104);
  uint64_t v398 = *(void *)(v82 + 1040);
  uint64_t v443 = (void (**)(uint64_t, uint64_t))(v102 + 8);
  unint64_t v406 = (void (**)(void))(v99 + 16);
  uint64_t v407 = *(void *)(v82 + 1032);
  uint64_t v397 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 + 1192) + 56);
  uint64_t v396 = (void (**)(uint64_t, uint64_t, uint64_t))(v101 + 16);
  uint64_t v395 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56);
  uint64_t v394 = (void (**)(uint64_t))(v99 + 32);
  uint64_t v391 = (void (**)(uint64_t, uint64_t))(v99 + 8);
  uint64_t v103 = *(uint8_t **)(*(void *)(v82 + 992) + 16);
  uint64_t v421 = (void (**)(uint64_t, uint64_t, uint64_t))(v100 + 16);
  uint64_t v411 = (void (**)(uint64_t, uint64_t))(v100 + 8);
  unsigned int v438 = enum case for HashAlgorithm.sha256(_:);
  unint64_t v430 = v98 + 32;
  uint64_t v392 = *(void *)(v82 + 1288);
  uint64_t v393 = *(int **)(v82 + 1016);
  swift_bridgeObjectRetain();
  unint64_t v104 = 0;
  unint64_t v424 = v103;
  unint64_t v410 = v98;
LABEL_25:
  if (v104 >= *(void *)(v98 + 16)) {
    goto LABEL_180;
  }
  unint64_t v429 = v104;
  unint64_t v105 = (uint64_t *)(v430 + 24 * v104);
  uint64_t v106 = *v105;
  unint64_t v72 = v105[1];
  uint64_t v107 = v105[2];
  if (!v103)
  {
    sub_1000361E0(*v105, v105[1]);
    swift_bridgeObjectRetain();
    goto LABEL_89;
  }
  uint64_t v108 = *(void *)(v82 + 992);
  unint64_t v453 = v72 >> 62;
  sub_1000361E0(v106, v72);
  uint64_t v109 = *(unsigned __int8 *)(v408 + 80);
  uint64_t v399 = ~v109;
  uint64_t v401 = v109;
  uint64_t v110 = v108 + ((v109 + 32) & ~v109);
  uint64_t v448 = BYTE6(v72);
  uint64_t v434 = *(void *)(v408 + 72);
  BOOL v111 = __OFSUB__(HIDWORD(v106), v106);
  BOOL v418 = v111;
  uint64_t v413 = HIDWORD(v106) - (int)v106;
  uint64_t v404 = v107;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v79 = v103;
  unint64_t v468 = v72;
  uint64_t v472 = v106;
  while (2)
  {
    uint64_t v112 = *(uint64_t **)(v82 + 1104);
    sub_10025C504(v110, (uint64_t)v112, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v113 = *v112;
    unint64_t v114 = *(void *)(v462 + 8);
    unint64_t v115 = v114 >> 62;
    uint64_t v91 = 0;
    uint64_t v82 = 0;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    switch(v114 >> 62)
    {
      case 1uLL:
        uint64_t v91 = (int)v113;
        uint64_t v82 = v113 >> 32;
        sub_1000361E0(v113, *(void *)(v462 + 8));
        uint64_t v116 = v113 >> 32;
        uint64_t v117 = (int)v113;
        break;
      case 2uLL:
        uint64_t v91 = *(void *)(v113 + 16);
        uint64_t v82 = *(void *)(v113 + 24);
        sub_1000361E0(v113, *(void *)(v462 + 8));
        uint64_t v117 = *(void *)(v113 + 16);
        uint64_t v116 = *(void *)(v113 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v91 = 0;
        uint64_t v117 = 0;
        uint64_t v82 = BYTE6(v114);
        uint64_t v116 = BYTE6(v114);
        break;
    }
    if (v116 < v91 || v91 < v117)
    {
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
      goto LABEL_177;
    }
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    switch((int)v115)
    {
      case 1:
        uint64_t v119 = (int)v113;
        uint64_t v118 = v113 >> 32;
        break;
      case 2:
        uint64_t v119 = *(void *)(v113 + 16);
        uint64_t v118 = *(void *)(v113 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v119 = 0;
        uint64_t v118 = BYTE6(v114);
        break;
    }
    if (v118 < v82 || v82 < v119) {
      goto LABEL_174;
    }
    if (__OFSUB__(v82, v91)) {
      goto LABEL_175;
    }
    if ((unint64_t)(v82 - v91) < 0x39)
    {
      uint64_t v82 = v473;
      switch((int)v115)
      {
        case 1:
          uint64_t v120 = v113 >> 32;
          goto LABEL_51;
        case 2:
          uint64_t v120 = *(void *)(v113 + 24);
          goto LABEL_53;
        default:
          goto LABEL_55;
      }
    }
    uint64_t v82 = v473;
    uint64_t v120 = sub_1008AA520(v91, 57, v113, v114);
    uint64_t v121 = 0;
    switch((int)v115)
    {
      case 1:
LABEL_51:
        uint64_t v121 = (int)v113;
        break;
      case 2:
LABEL_53:
        uint64_t v121 = *(void *)(v113 + 16);
        break;
      default:
        break;
    }
    if (v120 < v121) {
      goto LABEL_176;
    }
LABEL_55:
    uint64_t v91 = Data._Representation.subscript.getter();
    unint64_t v98 = v122;
    sub_10001CFB8(v113, v114);
    switch(v98 >> 62)
    {
      case 1uLL:
        LODWORD(v123) = HIDWORD(v91) - v91;
        if (__OFSUB__(HIDWORD(v91), v91)) {
          goto LABEL_178;
        }
        uint64_t v123 = (int)v123;
LABEL_60:
        if (v123 == 57)
        {
          sub_1000361E0(v91, v98);
          uint64_t v127 = sub_100A948F8(v91, v98);
          uint64_t v80 = sub_100A90C58(v127, 0);
          unint64_t v81 = v128;
          CCECCryptorRelease();
          sub_10001CFB8(v91, v98);
          unint64_t v129 = v81 >> 62;
          unint64_t v72 = v468;
          switch(v81 >> 62)
          {
            case 1uLL:
              LODWORD(v130) = HIDWORD(v80) - v80;
              if (__OFSUB__(HIDWORD(v80), v80)) {
                goto LABEL_181;
              }
              int64_t v130 = (int)v130;
LABEL_66:
              if (v130 == 28)
              {
                uint64_t v133 = *(void *)(v82 + 1064);
                uint64_t v134 = *(void *)(v82 + 1048);
                sub_10001CFB8(v91, v98);
                (*v445)(v133, v438, v134);
                uint64_t v91 = Data.hash(algorithm:)();
                unint64_t v98 = v135;
                (*v443)(v133, v134);
                sub_10001CFB8((uint64_t)v80, v81);
                uint64_t v82 = 0;
                uint64_t v106 = v472;
                switch(v98 >> 62)
                {
                  case 1uLL:
                    if (__OFSUB__(HIDWORD(v91), v91)) {
                      goto LABEL_183;
                    }
                    uint64_t v82 = HIDWORD(v91) - (int)v91;
LABEL_72:
                    sub_1000361E0(v91, v98);
                    break;
                  case 2uLL:
                    uint64_t v137 = *(void *)(v91 + 16);
                    uint64_t v136 = *(void *)(v91 + 24);
                    uint64_t v82 = v136 - v137;
                    if (!__OFSUB__(v136, v137)) {
                      goto LABEL_72;
                    }
                    goto LABEL_184;
                  case 3uLL:
                    break;
                  default:
                    uint64_t v82 = BYTE6(v98);
                    break;
                }
                uint64_t v138 = v448;
                switch((int)v453)
                {
                  case 1:
                    uint64_t v138 = v413;
                    if (v418) {
                      goto LABEL_185;
                    }
                    goto LABEL_77;
                  case 2:
                    uint64_t v140 = *(void *)(v472 + 16);
                    uint64_t v139 = *(void *)(v472 + 24);
                    BOOL v126 = __OFSUB__(v139, v140);
                    uint64_t v138 = v139 - v140;
                    if (v126) {
                      goto LABEL_186;
                    }
                    goto LABEL_77;
                  case 3:
                    if (v82) {
                      goto LABEL_32;
                    }
                    goto LABEL_98;
                  default:
LABEL_77:
                    if (v82 == v138)
                    {
                      if (v82 < 1)
                      {
LABEL_98:
                        sub_10001CFB8(v91, v98);
                        sub_10001CFB8(v91, v98);
                        uint64_t v82 = v473;
LABEL_99:
                        uint64_t v156 = *(void *)(v82 + 1120);
                        uint64_t v157 = *(void *)(v82 + 1112);
                        uint64_t v158 = *(void *)(v82 + 1104);
                        swift_bridgeObjectRelease();
                        sub_10025C5CC(v158, v157, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        sub_10025C5CC(v157, v156, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        uint64_t v388 = sub_1001340BC(v404);
                        if (v388)
                        {
                          unint64_t v419 = v404
                               + ((*(unsigned __int8 *)(v407 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v407 + 80));
                          uint64_t v400 = (v401 + 16) & v399;
                          swift_bridgeObjectRetain();
                          uint64_t v159 = 0;
                          while (1)
                          {
                            uint64_t v449 = v159 + 1;
                            if (__OFADD__(v159, 1)) {
                              goto LABEL_187;
                            }
                            SecKeyRef v160 = *(uint64_t **)(v82 + 1120);
                            uint64_t v435 = v159;
                            sub_10025C504(v419 + *(void *)(v407 + 72) * v159, *(void *)(v82 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                            uint64_t v161 = *v160;
                            unint64_t v162 = *(void *)(v405 + 8);
                            SecKeyRef v163 = sub_100435E70(v161, v162);
                            uint64_t v164 = **(void **)(v82 + 1040);
                            unint64_t v165 = *(void *)(v398 + 8);
                            uint64_t v166 = PrivateKey.publicKey.getter(v161, v162);
                            unint64_t v168 = v167;
                            sub_1000361E0(v166, v167);
                            uint64_t v169 = sub_100A94760(v166, v168);
                            unint64_t v171 = v170;
                            sub_10001CFB8(v166, v168);
                            sub_100434E0C(v169, v171, (uint64_t *)&v477);
                            uint64_t v172 = *(void *)(v82 + 1024);
                            sub_10001CFB8(v166, v168);
                            uint64_t v174 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v477;
                            unint64_t v173 = v478;
                            uint64_t v175 = (void *)v82;
                            uint64_t v176 = v163;
                            sub_1000361E0(v164, v165);
                            sub_1000361E0((uint64_t)v174, v173);
                            BeaconPayloadv1.init(using:data:advertisement:)(v176, v164, v165, (uint64_t)v174, v173, v172);
                            uint64_t v371 = v176;
                            uint64_t v379 = *(void *)(v82 + 1528);
                            uint64_t v383 = *(void *)(v82 + 1560);
                            uint64_t v385 = *(void *)(v82 + 1280);
                            uint64_t v177 = *(void *)(v82 + 1264);
                            uint64_t v178 = *(void *)(v82 + 1240);
                            unint64_t v376 = v173;
                            uint64_t v179 = *(void *)(v82 + 1232);
                            uint64_t v180 = *(void *)(v82 + 1184);
                            uint64_t v414 = (uint64_t)v174;
                            uint64_t v181 = *(void *)(v82 + 1168);
                            uint64_t v182 = *(void *)(v82 + 1152);
                            uint64_t v372 = *(unsigned char **)(v82 + 1144);
                            uint64_t v183 = *(void *)(v82 + 1024);
                            uint64_t v184 = *(void *)(v82 + 1008);
                            unint64_t v454 = *v406;
                            (*v406)();
                            (*v397)(v178, 1, 1, v180);
                            LODWORD(v180) = *(unsigned __int8 *)(v183 + v393[10]);
                            (*v396)(v181, v183 + v393[5], v182);
                            double v185 = *(double *)(v183 + v393[7]);
                            double v186 = *(double *)(v183 + v393[8]);
                            double v187 = *(double *)(v183 + v393[9]);
                            (*v395)(v184, 1, 1, v182);
                            sub_10001D074(v178, v179, &qword_101657910);
                            sub_100CC2A6C(v180, v181, 15, v184, v179, 256, v372, v185, v186, v187);
                            sub_10001DAB4(v178, &qword_101657910);
                            sub_10025C56C(v183, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                            uint64_t v188 = v177 + *(int *)(v403 + 48);
                            uint64_t v189 = *v394;
                            ((void (*)(uint64_t, uint64_t, uint64_t))*v394)(v177, v383, v379);
                            sub_10025C5CC((uint64_t)v372, v188, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v392 + 56))(v177, 0, 1, v385);
                            sub_10001CFB8(v414, v376);
                            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v392 + 48))(v177, 1, v385) == 1)
                            {
                              uint64_t v190 = v175[158];

                              sub_10001DAB4(v190, &qword_10163F720);
                              uint64_t v82 = (uint64_t)v175;
                              if (qword_101636908 != -1) {
                                swift_once();
                              }
                              uint64_t v191 = v175[173];
                              uint64_t v192 = v175[169];
                              uint64_t v193 = v175[140];
                              uint64_t v194 = v175[137];
                              uint64_t v195 = sub_100010324(v192, (uint64_t)qword_10170D9D8);
                              (*v421)(v191, v195, v192);
                              sub_10025C504(v193, v194, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                              uint64_t v196 = swift_allocObject();
                              sub_10025C5CC(v194, v196 + v400, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                              uint64_t v197 = swift_allocObject();
                              *(void *)(v197 + 16) = sub_10025B340;
                              *(void *)(v197 + 24) = v196;
                              unint64_t v455 = Logger.logObject.getter();
                              os_log_type_t v198 = static os_log_type_t.error.getter();
                              uint64_t v199 = swift_allocObject();
                              *(unsigned char *)(v199 + 16) = 112;
                              uint64_t v91 = swift_allocObject();
                              *(unsigned char *)(v91 + 16) = 8;
                              uint64_t v200 = swift_allocObject();
                              *(void *)(v200 + 16) = 1752392040;
                              uint64_t v201 = swift_allocObject();
                              *(void *)(v201 + 16) = sub_100060540;
                              *(void *)(v201 + 24) = v200;
                              uint64_t v202 = swift_allocObject();
                              *(unsigned char *)(v202 + 16) = 33;
                              uint64_t v203 = swift_allocObject();
                              *(unsigned char *)(v203 + 16) = 8;
                              uint64_t v204 = swift_allocObject();
                              *(void *)(v204 + 16) = sub_1000604E8;
                              *(void *)(v204 + 24) = v197;
                              uint64_t v205 = swift_allocObject();
                              *(void *)(v205 + 16) = sub_10005F790;
                              *(void *)(v205 + 24) = v204;
                              sub_10000588C(&qword_101639B60);
                              uint64_t inited = swift_initStackObject();
                              sub_1004B810C(inited, 6);
                              *uint64_t v207 = sub_10005F778;
                              v207[1] = v199;
                              v207[2] = sub_100065514;
                              v207[3] = v91;
                              v207[4] = sub_10006000C;
                              v207[5] = v201;
                              v207[6] = sub_100065514;
                              v207[7] = v202;
                              v207[8] = sub_100065514;
                              v207[9] = v203;
                              v207[10] = sub_10005F7D0;
                              v207[11] = v205;
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_bridgeObjectRelease();
                              if (os_log_type_enabled(v455, v198))
                              {
                                uint64_t v208 = (uint8_t *)swift_slowAlloc();
                                uint64_t v209 = swift_slowAlloc();
                                uint64_t v475 = 0;
                                uint64_t v476 = v209;
                                *(_WORD *)uint64_t v208 = 515;
                                unint64_t v474 = v208 + 2;
                                sub_1008FA6E0(&v474, (uint64_t)&v475, (uint64_t)&v476, 112);
                                swift_release();
                                uint64_t v477 = sub_100065514;
                                unint64_t v478 = v91;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                swift_release();
                                uint64_t v477 = (uint64_t (*)())sub_10006000C;
                                unint64_t v478 = v201;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                swift_release();
                                uint64_t v477 = sub_100065514;
                                unint64_t v478 = v202;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                swift_release();
                                uint64_t v477 = sub_100065514;
                                unint64_t v478 = v203;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                swift_release();
                                uint64_t v477 = (uint64_t (*)())sub_10005F7D0;
                                unint64_t v478 = v205;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                uint64_t v210 = *(void *)(v82 + 1384);
                                uint64_t v211 = *(void *)(v82 + 1352);
                                swift_release();
                                _os_log_impl((void *)&_mh_execute_header, v455, v198, "Could not create search result for beacon: %{private,mask.hash}s.", v208, 0x16u);
                                swift_arrayDestroy();
                                swift_slowDealloc();
                                sub_1008F9FA0();

                                (*v411)(v210, v211);
                              }
                              else
                              {
                                uint64_t v212 = *(void *)(v82 + 1384);
                                uint64_t v213 = *(void *)(v82 + 1352);
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();

                                (*v411)(v212, v213);
                              }
                              uint64_t v103 = v424;
                              unint64_t v72 = v468;
                              uint64_t v106 = v472;
                              unint64_t v98 = v410;
                            }
                            else
                            {
                              uint64_t v214 = v175[206];
                              uint64_t v215 = v175[191];
                              uint64_t v216 = v175[165];
                              uint64_t v217 = v175[164];
                              uint64_t v218 = *(int *)(v403 + 48);
                              uint64_t v219 = v216 + v218;
                              uint64_t v220 = v175[158] + v218;
                              v189(v216);
                              sub_10025C5CC(v220, v219, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              uint64_t v221 = v217 + *(int *)(v403 + 48);
                              ((void (*)(uint64_t, uint64_t, uint64_t))v454)(v217, v216, v215);
                              uint64_t v415 = v219;
                              sub_10025C504(v219, v221, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              swift_beginAccess();
                              uint64_t v222 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000F790C(v217, *(void *)(v214 + 16));
                              uint64_t v223 = v175[191];
                              uint64_t v224 = v175[166];
                              uint64_t v225 = v175[165];
                              uint64_t v226 = v175[164];
                              if (v222)
                              {
                                uint64_t v227 = v175[143];
                                uint64_t v477 = (uint64_t (*)())v222;
                                swift_endAccess();
                                sub_10025C56C(v221, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                uint64_t v380 = *v391;
                                (*v391)(v226, v223);
                                uint64_t v228 = (unsigned __int8 *)(v224 + *(int *)(v403 + 48));
                                ((void (*)(uint64_t, uint64_t, uint64_t))v454)(v224, v225, v223);
                                sub_10025C504(v415, (uint64_t)v228, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                sub_1000D1E3C(v227, v228);
                                sub_10025C56C(v227, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                v380(v224, v223);
                                uint64_t v229 = v403;
                                uint64_t v230 = v224 + *(int *)(v403 + 48);
                                ((void (*)(uint64_t, uint64_t, uint64_t))v454)(v224, v225, v223);
                                sub_10025C504(v415, v230, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                uint64_t v231 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v477;
                                swift_beginAccess();
                                sub_10015DF64((uint64_t)v231, v224);
                                swift_endAccess();
                                sub_10025C56C(v230, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              }
                              else
                              {
                                uint64_t v232 = v175[163];
                                swift_endAccess();
                                sub_10025C56C(v221, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                uint64_t v373 = *v391;
                                (*v391)(v226, v223);
                                uint64_t v233 = v224 + *(int *)(v403 + 48);
                                uint64_t v381 = v233;
                                ((void (*)(uint64_t, uint64_t, uint64_t))v454)(v224, v225, v223);
                                sub_10025C504(v415, v233, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                sub_10000588C(&qword_10163AA18);
                                uint64_t v234 = swift_allocObject();
                                uint64_t v235 = sub_1004B7688(v234, 1);
                                uint64_t v236 = v225;
                                uint64_t v237 = v235;
                                uint64_t v239 = v238;
                                uint64_t v240 = v232 + *(int *)(v403 + 48);
                                ((void (*)(uint64_t, uint64_t, uint64_t))v454)(v232, v236, v223);
                                sub_10025C504(v415, v240, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                sub_10025C5CC(v240, v239, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                uint64_t v241 = SharingCircleWildAdvertisementKey.init(key:)(v237);
                                v373(v232, v223);
                                uint64_t v242 = sub_101158D6C(v241);
                                swift_bridgeObjectRelease();
                                swift_beginAccess();
                                sub_10015DF64(v242, v224);
                                swift_endAccess();
                                sub_10025C56C(v381, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                uint64_t v229 = v403;
                              }
                              uint64_t v243 = *(void *)(v473 + 1528);
                              uint64_t v244 = *(void *)(v473 + 1392);
                              uint64_t v386 = *(void *)(v473 + 1648);
                              uint64_t v245 = *(void *)(v473 + 1352);
                              uint64_t v246 = *(void *)(v473 + 1328);
                              uint64_t v247 = *(void *)(v473 + 1320);
                              uint64_t v248 = *(void *)(v473 + 1120);
                              uint64_t v249 = *(void *)(v473 + 1096);
                              uint64_t v250 = sub_100207468();
                              (*v421)(v244, v250, v245);
                              sub_10025C504(v248, v249, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                              uint64_t v251 = swift_allocObject();
                              sub_10025C5CC(v249, v251 + v400, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                              uint64_t v377 = swift_allocObject();
                              *(void *)(v377 + 16) = sub_10025B340;
                              *(void *)(v377 + 24) = v251;
                              uint64_t v252 = v246 + *(int *)(v229 + 48);
                              uint64_t v253 = v243;
                              ((void (*)(uint64_t, uint64_t, uint64_t))v454)(v246, v247, v243);
                              sub_10025C504(v415, v252, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              uint64_t v254 = *(unsigned __int8 *)(v392 + 80);
                              uint64_t v255 = (v254 + 16) & ~v254;
                              uint64_t v256 = swift_allocObject();
                              sub_10001D608(v246, v256 + v255, &qword_10163F728);
                              uint64_t v374 = swift_allocObject();
                              *(void *)(v374 + 16) = sub_10025B4F4;
                              *(void *)(v374 + 24) = v256;
                              uint64_t v257 = v246 + *(int *)(v229 + 48);
                              ((void (*)(uint64_t, uint64_t, uint64_t))v454)(v246, v247, v253);
                              sub_10025C504(v415, v257, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              uint64_t v258 = swift_allocObject();
                              sub_10001D608(v246, v258 + v255, &qword_10163F728);
                              uint64_t v368 = swift_allocObject();
                              *(void *)(v368 + 16) = sub_10025B504;
                              *(void *)(v368 + 24) = v258;
                              uint64_t v259 = v246 + *(int *)(v403 + 48);
                              ((void (*)(uint64_t, uint64_t, uint64_t))v454)(v246, v247, v253);
                              sub_10025C504(v415, v259, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              uint64_t v260 = swift_allocObject();
                              *(void *)(v260 + 16) = v386;
                              sub_10001D608(v246, v260 + ((v254 + 24) & ~v254), &qword_10163F728);
                              swift_retain();
                              osos_log_t log = Logger.logObject.getter();
                              os_log_type_t v364 = static os_log_type_t.info.getter();
                              uint64_t v261 = swift_allocObject();
                              *(unsigned char *)(v261 + 16) = 112;
                              unint64_t v262 = v261;
                              uint64_t v387 = swift_allocObject();
                              *(unsigned char *)(v387 + 16) = 8;
                              uint64_t v263 = swift_allocObject();
                              *(void *)(v263 + 16) = 1752392040;
                              uint64_t v264 = swift_allocObject();
                              *(void *)(v264 + 16) = sub_10006550C;
                              *(void *)(v264 + 24) = v263;
                              uint64_t v265 = swift_allocObject();
                              *(unsigned char *)(v265 + 16) = 33;
                              unint64_t v266 = v265;
                              uint64_t v384 = swift_allocObject();
                              *(unsigned char *)(v384 + 16) = 8;
                              uint64_t v267 = swift_allocObject();
                              *(void *)(v267 + 16) = sub_1000654F4;
                              *(void *)(v267 + 24) = v377;
                              uint64_t v268 = swift_allocObject();
                              *(void *)(v268 + 16) = sub_1000654EC;
                              *(void *)(v268 + 24) = v267;
                              uint64_t v456 = swift_allocObject();
                              *(unsigned char *)(v456 + 16) = 34;
                              uint64_t v378 = swift_allocObject();
                              *(unsigned char *)(v378 + 16) = 8;
                              uint64_t v269 = swift_allocObject();
                              *(void *)(v269 + 16) = sub_10025B4F8;
                              *(void *)(v269 + 24) = v374;
                              uint64_t v270 = swift_allocObject();
                              *(void *)(v270 + 16) = sub_1000654EC;
                              *(void *)(v270 + 24) = v269;
                              uint64_t v271 = v270;
                              unint64_t v370 = v270;
                              uint64_t v272 = swift_allocObject();
                              *(unsigned char *)(v272 + 16) = 34;
                              unint64_t v273 = v272;
                              uint64_t v375 = swift_allocObject();
                              *(unsigned char *)(v375 + 16) = 8;
                              uint64_t v274 = swift_allocObject();
                              *(void *)(v274 + 16) = sub_10025B508;
                              *(void *)(v274 + 24) = v368;
                              uint64_t v416 = swift_allocObject();
                              *(void *)(v416 + 16) = sub_1000654EC;
                              *(void *)(v416 + 24) = v274;
                              uint64_t v367 = swift_allocObject();
                              *(unsigned char *)(v367 + 16) = 0;
                              uint64_t v369 = swift_allocObject();
                              *(unsigned char *)(v369 + 16) = 8;
                              uint64_t v275 = swift_allocObject();
                              *(void *)(v275 + 16) = sub_10025B514;
                              *(void *)(v275 + 24) = v260;
                              unint64_t v382 = v264;
                              uint64_t v366 = swift_allocObject();
                              *(void *)(v366 + 16) = sub_100060004;
                              *(void *)(v366 + 24) = v275;
                              sub_10000588C(&qword_101639B60);
                              uint64_t v276 = swift_allocObject();
                              sub_1004B810C(v276, 15);
                              *uint64_t v277 = sub_100065514;
                              v277[1] = v262;
                              v277[2] = sub_100065514;
                              v277[3] = v387;
                              v277[4] = sub_100065504;
                              v277[5] = v264;
                              v277[6] = sub_100065514;
                              v277[7] = v266;
                              v277[8] = sub_100065514;
                              v277[9] = v384;
                              v277[10] = sub_100065500;
                              v277[11] = v268;
                              v277[12] = sub_100065514;
                              v277[13] = v456;
                              v277[14] = sub_100065514;
                              v277[15] = v378;
                              v277[16] = sub_100065500;
                              v277[17] = v271;
                              v277[18] = sub_100065514;
                              v277[19] = v273;
                              v277[20] = sub_100065514;
                              v277[21] = v375;
                              v277[22] = sub_100065500;
                              v277[23] = v416;
                              v277[24] = sub_100065514;
                              v277[25] = v367;
                              v277[26] = sub_100065514;
                              v277[27] = v369;
                              v277[28] = sub_10006000C;
                              v277[29] = v366;
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              uint64_t v91 = v366;
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_bridgeObjectRelease();
                              if (os_log_type_enabled(oslog, v364))
                              {
                                uint64_t v278 = sub_1008F9FAC();
                                uint64_t v279 = swift_slowAlloc();
                                uint64_t v475 = 0;
                                uint64_t v476 = v279;
                                buf = (uint8_t *)v278;
                                *(_WORD *)uint64_t v278 = 1283;
                                unint64_t v474 = (unsigned char *)(v278 + 2);
                                uint64_t v477 = sub_100065514;
                                unint64_t v478 = v262;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                unint64_t v72 = v468;
                                swift_release();
                                uint64_t v477 = sub_100065514;
                                unint64_t v478 = v387;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                uint64_t v106 = v472;
                                uint64_t v82 = v473;
                                swift_release();
                                uint64_t v477 = (uint64_t (*)())sub_100065504;
                                unint64_t v478 = v382;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                swift_release();
                                uint64_t v477 = sub_100065514;
                                unint64_t v478 = v266;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                swift_release();
                                uint64_t v477 = sub_100065514;
                                unint64_t v478 = v384;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                uint64_t v103 = v424;
                                swift_release();
                                uint64_t v477 = sub_100065500;
                                unint64_t v478 = v268;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                swift_release();
                                uint64_t v477 = sub_100065514;
                                unint64_t v478 = v456;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                swift_release();
                                uint64_t v477 = sub_100065514;
                                unint64_t v478 = v378;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                swift_release();
                                uint64_t v477 = sub_100065500;
                                unint64_t v478 = v370;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                swift_release();
                                uint64_t v477 = sub_100065514;
                                unint64_t v478 = v273;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                swift_release();
                                uint64_t v477 = sub_100065514;
                                unint64_t v478 = v375;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                unint64_t v98 = v410;
                                swift_release();
                                uint64_t v477 = sub_100065500;
                                unint64_t v478 = v416;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                swift_release();
                                uint64_t v477 = sub_100065514;
                                unint64_t v478 = v367;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                swift_release();
                                uint64_t v477 = sub_100065514;
                                unint64_t v478 = v369;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                swift_release();
                                uint64_t v477 = (uint64_t (*)())sub_10006000C;
                                unint64_t v478 = v366;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v477, (uint64_t)&v474, (uint64_t)&v475, (uint64_t)&v476);
                                uint64_t v280 = *(void *)(v473 + 1392);
                                uint64_t v281 = *(void *)(v473 + 1352);
                                uint64_t v457 = *(void *)(v473 + 1320);
                                swift_release();
                                uint64_t v91 = (uint64_t)oslog;
                                _os_log_impl((void *)&_mh_execute_header, oslog, v364, "Return search result for beacon (own beacon): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", buf, 0x34u);
                                swift_arrayDestroy();
                                swift_slowDealloc();
                                sub_1008F9FA0();

                                (*v411)(v280, v281);
                                sub_10001DAB4(v457, &qword_10163F728);
                              }
                              else
                              {
                                uint64_t v282 = *(void *)(v473 + 1392);
                                uint64_t v283 = *(void *)(v473 + 1352);
                                uint64_t v284 = *(void *)(v473 + 1320);

                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                (*v411)(v282, v283);
                                sub_10001DAB4(v284, &qword_10163F728);
                                uint64_t v82 = v473;
                                unint64_t v98 = v410;
                                uint64_t v103 = v424;
                                unint64_t v72 = v468;
                                uint64_t v106 = v472;
                              }
                            }
                            sub_10025C56C(*(void *)(v82 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                            uint64_t v159 = v435 + 1;
                            if (v449 == v388) {
                              goto LABEL_118;
                            }
                          }
                        }
                        swift_bridgeObjectRetain();
                        unint64_t v98 = v410;
                        uint64_t v103 = v424;
LABEL_118:
                        uint64_t v285 = *(void *)(v82 + 1120);
                        sub_10001CFB8(v106, v72);
                        swift_bridgeObjectRelease_n();
                        sub_10025C56C(v285, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        goto LABEL_95;
                      }
                      sub_1000361E0(v472, v468);
                      sub_1000361E0(v472, v468);
                      switch(v98 >> 62)
                      {
                        case 1uLL:
                          if (v91 >> 32 < (int)v91) {
                            goto LABEL_190;
                          }
                          sub_1000361E0(v472, v468);
                          sub_1000361E0(v472, v468);
                          sub_1000361E0(v472, v468);
                          sub_1000361E0(v91, v98);
                          sub_1000361E0(v472, v468);
                          char v143 = sub_100BFBE64((int)v91, v91 >> 32, v98 & 0x3FFFFFFFFFFFFFFFLL, v472, v468);
                          sub_10001CFB8(v472, v468);
                          uint64_t v82 = v473;
                          sub_10001CFB8(v91, v98);
                          break;
                        case 2uLL:
                          uint64_t v144 = *(void *)(v91 + 16);
                          uint64_t v145 = *(void *)(v91 + 24);
                          sub_1000361E0(v472, v468);
                          sub_1000361E0(v472, v468);
                          sub_1000361E0(v472, v468);
                          sub_1000361E0(v472, v468);
                          swift_retain();
                          swift_retain();
                          char v143 = sub_100BFBE64(v144, v145, v98 & 0x3FFFFFFFFFFFFFFFLL, v472, v468);
                          sub_10001CFB8(v472, v468);
                          uint64_t v82 = v473;
                          swift_release();
                          swift_release();
                          uint64_t v106 = v472;
                          break;
                        case 3uLL:
                          sub_1000361E0(v472, v468);
                          sub_1000361E0(v472, v468);
                          sub_1000361E0(v472, v468);
                          sub_1000361E0(v472, v468);
                          unint64_t v141 = v390 & 0xFF00000000000000;
                          uint64_t v142 = 0;
                          v390 &= 0xFF00000000000000;
                          goto LABEL_85;
                        default:
                          sub_1000361E0(v472, v468);
                          sub_1000361E0(v472, v468);
                          sub_1000361E0(v472, v468);
                          sub_1000361E0(v472, v468);
                          unint64_t v141 = v389 & 0xFF00000000000000 | v98 & 0xFFFFFFFFFFFFFFLL;
                          uint64_t v142 = v91;
                          unint64_t v389 = v141;
LABEL_85:
                          char v143 = sub_100BFBD8C(v142, v141, v472, v468);
                          sub_10001CFB8(v472, v468);
                          uint64_t v82 = v473;
                          break;
                      }
                      sub_10001CFB8(v91, v98);
                      sub_10001CFB8(v106, v468);
                      sub_10001CFB8(v91, v98);
                      sub_10001CFB8(v106, v468);
                      sub_10001CFB8(v106, v468);
                      sub_10001CFB8(v106, v468);
                      sub_10001CFB8(v106, v468);
                      if (v143) {
                        goto LABEL_99;
                      }
                    }
                    else
                    {
LABEL_32:
                      sub_10001CFB8(v91, v98);
                      sub_10001CFB8(v91, v98);
                      uint64_t v82 = v473;
                    }
                    sub_10025C56C(*(void *)(v82 + 1104), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                    v110 += v434;
                    if (--v79) {
                      continue;
                    }
                    swift_bridgeObjectRelease();
                    unint64_t v98 = v410;
                    break;
                }
LABEL_89:
                if (qword_101636908 != -1) {
                  swift_once();
                }
                uint64_t v146 = *(void *)(v82 + 1376);
                uint64_t v147 = *(void *)(v82 + 1352);
                uint64_t v148 = sub_100010324(v147, (uint64_t)qword_10170D9D8);
                (*v421)(v146, v148, v147);
                sub_1000361E0(v106, v72);
                swift_bridgeObjectRetain();
                sub_1000361E0(v106, v72);
                swift_bridgeObjectRetain();
                uint64_t v91 = Logger.logObject.getter();
                os_log_type_t v149 = static os_log_type_t.error.getter();
                BOOL v150 = os_log_type_enabled((os_log_t)v91, v149);
                uint64_t v151 = *(void *)(v82 + 1376);
                uint64_t v152 = *(void *)(v82 + 1352);
                if (v150)
                {
                  unint64_t v153 = v72;
                  unint64_t v72 = swift_slowAlloc();
                  uint64_t v477 = (uint64_t (*)())swift_slowAlloc();
                  *(_DWORD *)unint64_t v72 = 141558275;
                  *(void *)(v72 + 4) = 1752392040;
                  *(_WORD *)(v72 + 12) = 2081;
                  *(void *)(v82 + 728) = v106;
                  *(void *)(v82 + 736) = v153;
                  sub_1001D780C();
                  uint64_t v154 = RawRepresentable<>.hexString.getter();
                  *(void *)(v72 + 14) = sub_1008FA0F0(v154, v155, (uint64_t *)&v477);
                  swift_bridgeObjectRelease();
                  sub_10001CFB8(v106, v153);
                  swift_bridgeObjectRelease();
                  sub_10001CFB8(v106, v153);
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v91, v149, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v72, 0x16u);
                  swift_arrayDestroy();
                  unint64_t v98 = v410;
                  swift_slowDealloc();
                  swift_slowDealloc();

                  sub_10001CFB8(v106, v153);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  sub_10001CFB8(v106, v72);
                  swift_bridgeObjectRelease();
                  sub_10001CFB8(v106, v72);
                  swift_bridgeObjectRelease();
                  sub_10001CFB8(v106, v72);
                  swift_bridgeObjectRelease();
                }
                (*v411)(v151, v152);
                uint64_t v103 = v424;
LABEL_95:
                unint64_t v104 = v429 + 1;
                if (v429 + 1 == v426) {
                  goto LABEL_132;
                }
                goto LABEL_25;
              }
              if (!v129)
              {
                int64_t v342 = BYTE6(v81);
                goto LABEL_169;
              }
              if (v129 == 1)
              {
                if (!__OFSUB__(HIDWORD(v80), v80))
                {
                  int64_t v342 = HIDWORD(v80) - (int)v80;
LABEL_169:
                  sub_10013019C();
                  uint64_t v351 = swift_allocError();
                  *(void *)uint64_t v352 = 28;
                  *(void *)(v352 + 8) = v342;
                  *(unsigned char *)(v352 + 16) = 0;
                  swift_willThrow();
                  goto LABEL_170;
                }
                __break(1u);
              }
              else
              {
                Class isa = v80[2].isa;
                Class v349 = v80[3].isa;
                int64_t v342 = v349 - isa;
                if (!__OFSUB__(v349, isa)) {
                  goto LABEL_169;
                }
              }
              __break(1u);
              break;
            case 2uLL:
              Class v132 = v80[2].isa;
              Class v131 = v80[3].isa;
              BOOL v126 = __OFSUB__(v131, v132);
              int64_t v130 = v131 - v132;
              if (!v126) {
                goto LABEL_66;
              }
              goto LABEL_182;
            case 3uLL:
              int64_t v342 = 0;
              goto LABEL_169;
            default:
              int64_t v130 = BYTE6(v81);
              goto LABEL_66;
          }
          goto LABEL_193;
        }
LABEL_158:
        uint64_t v329 = v91;
        unint64_t v330 = v98;
LABEL_157:
        sub_10001CFB8(v329, v330);
        return _assertionFailure(_:_:file:line:flags:)();
      case 2uLL:
        uint64_t v125 = *(void *)(v91 + 16);
        uint64_t v124 = *(void *)(v91 + 24);
        BOOL v126 = __OFSUB__(v124, v125);
        uint64_t v123 = v124 - v125;
        if (!v126) {
          goto LABEL_60;
        }
        goto LABEL_179;
      case 3uLL:
        goto LABEL_158;
      default:
        uint64_t v123 = BYTE6(v98);
        goto LABEL_60;
    }
  }
}

uint64_t sub_1002520DC()
{
  uint64_t v525 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 2008);
  (*(void (**)(void, void))(*(void *)(v0 + 1536) + 8))(*(void *)(v0 + 1336), *(void *)(v0 + 1528));
  *(void *)(v0 + 880) = v2;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if ((swift_dynamicCast() & 1) != 0 && *(unsigned char *)(v0 + 2028) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 1224);
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 344);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 424);
    sub_10001DAB4(v0 + 224, &qword_10163F740);
    sub_10025C56C(v3, type metadata accessor for BeaconKeyManager.IndexInformation);
    swift_errorRelease();
  }
  else
  {
    uint64_t v463 = v0 + 344;
    uint64_t v466 = v0 + 224;
    uint64_t v500 = (long long *)(v0 + 144);
    uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1904);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1720);
    uint64_t v477 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 1704);
    uint64_t v6 = *(void *)(v0 + 1568);
    uint64_t v514 = v0 + 424;
    uint64_t v7 = *(void *)(v0 + 1560);
    uint64_t v8 = *(void *)(v0 + 1536);
    uint64_t v9 = *(void *)(v0 + 1528);
    uint64_t v10 = *(void *)(v0 + 1368);
    uint64_t v11 = *(void *)(v0 + 1352);
    swift_errorRelease();
    uint64_t v12 = sub_100207468();
    v4(v10, v12, v11);
    v5(v7, v6, v9);
    unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v14 = swift_allocObject();
    v477(v14 + v13, v7, v9);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = sub_10025B7C4;
    *(void *)(v15 + 24) = v14;
    sub_10001D010(v514, (uint64_t)v500);
    uint64_t v16 = swift_allocObject();
    sub_10001CEB0(v500, v16 + 16);
    uint64_t v490 = Logger.logObject.getter();
    os_log_type_t v483 = static os_log_type_t.error.getter();
    uint64_t v17 = swift_allocObject();
    *(unsigned char *)(v17 + 16) = 112;
    uint64_t v501 = swift_allocObject();
    *(unsigned char *)(v501 + 16) = 8;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = 1752392040;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_10006550C;
    *(void *)(v19 + 24) = v18;
    uint64_t v20 = swift_allocObject();
    *(unsigned char *)(v20 + 16) = 33;
    uint64_t v21 = swift_allocObject();
    *(unsigned char *)(v21 + 16) = 8;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = sub_1000654F4;
    *(void *)(v22 + 24) = v15;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = sub_1000654EC;
    *(void *)(v23 + 24) = v22;
    uint64_t v24 = swift_allocObject();
    *(unsigned char *)(v24 + 16) = 34;
    uint64_t v25 = swift_allocObject();
    *(unsigned char *)(v25 + 16) = 8;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = sub_10025C2E4;
    *(void *)(v26 + 24) = v16;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = sub_1000654EC;
    *(void *)(v27 + 24) = v26;
    uint64_t v28 = swift_allocObject();
    sub_1004B810C(v28, 9);
    *uint64_t v29 = sub_100065514;
    v29[1] = v17;
    v29[2] = sub_100065514;
    uint64_t v29[3] = v501;
    v29[4] = sub_100065504;
    v29[5] = v19;
    v29[6] = sub_100065514;
    v29[7] = v20;
    v29[8] = sub_100065514;
    v29[9] = v21;
    v29[10] = sub_100065500;
    v29[11] = v23;
    v29[12] = sub_100065514;
    v29[13] = v24;
    v29[14] = sub_100065514;
    v29[15] = v25;
    v29[16] = sub_100065500;
    v29[17] = v27;
    uint64_t v508 = v17;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v478 = v20;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v490, v483))
    {
      uint64_t v30 = (uint8_t *)sub_1008F9FAC();
      uint64_t v31 = swift_slowAlloc();
      *(void *)(v1 + 912) = 0;
      *(void *)(v1 + 920) = v31;
      *(_WORD *)uint64_t v30 = 771;
      *(void *)(v1 + 904) = v30 + 2;
      *(void *)(v1 + 664) = sub_100065514;
      *(void *)(v1 + 672) = v508;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 664), v1 + 904, v1 + 912, v1 + 920);
      swift_release();
      *(void *)(v1 + 664) = sub_100065514;
      *(void *)(v1 + 672) = v501;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 664), v1 + 904, v1 + 912, v1 + 920);
      swift_release();
      *(void *)(v1 + 664) = sub_100065504;
      *(void *)(v1 + 672) = v19;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 664), v1 + 904, v1 + 912, v1 + 920);
      swift_release();
      *(void *)(v1 + 664) = sub_100065514;
      *(void *)(v1 + 672) = v478;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 664), v1 + 904, v1 + 912, v1 + 920);
      swift_release();
      *(void *)(v1 + 664) = sub_100065514;
      *(void *)(v1 + 672) = v21;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 664), v1 + 904, v1 + 912, v1 + 920);
      swift_release();
      *(void *)(v1 + 664) = sub_100065500;
      *(void *)(v1 + 672) = v23;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 664), v1 + 904, v1 + 912, v1 + 920);
      swift_release();
      *(void *)(v1 + 664) = sub_100065514;
      *(void *)(v1 + 672) = v24;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 664), v1 + 904, v1 + 912, v1 + 920);
      swift_release();
      *(void *)(v1 + 664) = sub_100065514;
      *(void *)(v1 + 672) = v25;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 664), v1 + 904, v1 + 912, v1 + 920);
      swift_release();
      *(void *)(v1 + 664) = sub_100065500;
      *(void *)(v1 + 672) = v27;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 664), v1 + 904, v1 + 912, v1 + 920);
      uint64_t v32 = *(void *)(v1 + 1368);
      uint64_t v33 = *(void *)(v1 + 1360);
      uint64_t v34 = *(void *)(v1 + 1352);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v490, v483, "Failed to update metadata for: %{private,mask.hash}s,foundIndex: %{public}s.", v30, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    }
    else
    {
      uint64_t v484 = *(void *)(v1 + 1368);
      uint64_t v35 = *(void *)(v1 + 1360);
      uint64_t v474 = *(void *)(v1 + 1352);
      swift_errorRelease();

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v484, v474);
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v463);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v514);
    sub_10001DAB4(v466, &qword_10163F740);
    sub_10025C56C(*(void *)(v1 + 1224), type metadata accessor for BeaconKeyManager.IndexInformation);
  }
  uint64_t v36 = v1;
  uint64_t v37 = *(void *)(v1 + 1648);
  uint64_t v38 = *(void *)(v1 + 1568);
  swift_beginAccess();
  uint64_t v39 = sub_1000F790C(v38, *(void *)(v37 + 16));
  uint64_t v40 = *(int *)(v1 + 2020);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 1720);
  uint64_t v42 = *(void *)(v1 + 1648);
  uint64_t v43 = *(void *)(v1 + 1568);
  uint64_t v44 = *(void *)(v1 + 1560);
  uint64_t v515 = *(void *)(v1 + 1536);
  uint64_t v45 = *(void *)(v1 + 1528);
  uint64_t v46 = *(void *)(v1 + 1344);
  uint64_t v47 = *(void *)(v36 + 1328);
  uint64_t v502 = v43;
  uint64_t v509 = v46 + v40;
  uint64_t v485 = *(void *)(v36 + 1280);
  uint64_t v491 = v44;
  if (v39)
  {
    uint64_t v48 = *(void *)(v36 + 1144);
    *(void *)(v36 + 896) = v39;
    swift_endAccess();
    uint64_t v49 = (unsigned __int8 *)(v47 + *(int *)(v485 + 48));
    v41(v47, v46, v45);
    sub_10025C504(v509, (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_100DCCAA4(v48, v49);
    sub_10025C56C(v48, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v515 + 8);
    v50(v47, v45);
    v41(v44, v502, v45);
    uint64_t v51 = *(void *)(v36 + 896);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v523 = *(uint64_t (**)())(v42 + 16);
    *(void *)(v42 + 16) = 0x8000000000000000;
    sub_10016D370(v51, v44, isUniquelyReferenced_nonNull_native);
    *(void *)(v42 + 16) = v523;
    swift_bridgeObjectRelease();
    v50(v44, v45);
  }
  else
  {
    swift_endAccess();
    v41(v44, v502, v45);
    sub_10000588C(&qword_10163AA18);
    uint64_t v53 = swift_allocObject();
    uint64_t v54 = sub_1004B7688(v53, 1);
    uint64_t v56 = v55;
    uint64_t v57 = v47 + *(int *)(v485 + 48);
    uint64_t v58 = v46;
    uint64_t v59 = v45;
    v41(v47, v58, v45);
    sub_10025C504(v509, v57, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_10025C5CC(v57, v56, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v60 = SharingCircleWildAdvertisementKey.init(key:)(v54);
    uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v515 + 8);
    v61(v47, v59);
    uint64_t v62 = sub_101158D6C(v60);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    char v63 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v523 = *(uint64_t (**)())(v42 + 16);
    *(void *)(v42 + 16) = 0x8000000000000000;
    sub_10016D370(v62, v491, v63);
    *(void *)(v42 + 16) = v523;
    swift_bridgeObjectRelease();
    v61(v491, v59);
  }
  swift_endAccess();
  uint64_t v64 = (void *)v36;
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v65 = *(int *)(v36 + 2020);
  uint64_t v519 = v36;
  uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 1720);
  uint64_t v467 = *(void (**)(unint64_t, uint64_t, uint64_t))(v36 + 1704);
  uint64_t v486 = *(void *)(v36 + 1648);
  uint64_t v67 = *(void *)(v36 + 1568);
  uint64_t v68 = *(void *)(v36 + 1560);
  bufb = *(uint8_t **)(v36 + 1536);
  uint64_t v69 = *(void *)(v36 + 1528);
  uint64_t v70 = v64[176];
  uint64_t v71 = v64[170];
  uint64_t v72 = v64[169];
  uint64_t v73 = v64[166];
  uint64_t v479 = v64[161];
  uint64_t v503 = v64[168];
  uint64_t v510 = v503 + v65;
  uint64_t v471 = v64[160];
  uint64_t v74 = sub_100010324(v72, (uint64_t)qword_10170D9D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v70, v74, v72);
  v66(v68, v67, v69);
  unint64_t v75 = (bufb[80] + 16) & ~(unint64_t)bufb[80];
  uint64_t v76 = swift_allocObject();
  v467(v76 + v75, v68, v69);
  uint64_t v492 = swift_allocObject();
  *(void *)(v492 + 16) = sub_10025B7C4;
  *(void *)(v492 + 24) = v76;
  uint64_t v77 = v73 + *(int *)(v471 + 48);
  v66(v73, v503, v69);
  sub_10025C504(v510, v77, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v78 = *(unsigned __int8 *)(v479 + 80);
  uint64_t v79 = (v78 + 16) & ~v78;
  uint64_t v80 = swift_allocObject();
  sub_10001D608(v73, v80 + v79, &qword_10163F728);
  uint64_t v480 = swift_allocObject();
  *(void *)(v480 + 16) = sub_10025B4F4;
  *(void *)(v480 + 24) = v80;
  uint64_t v81 = v73 + *(int *)(v471 + 48);
  v66(v73, v503, v69);
  sub_10025C504(v510, v81, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v82 = swift_allocObject();
  sub_10001D608(v73, v82 + v79, &qword_10163F728);
  uint64_t v83 = swift_allocObject();
  *(void *)(v83 + 16) = sub_10025B504;
  *(void *)(v83 + 24) = v82;
  uint64_t v84 = v73 + *(int *)(v471 + 48);
  v66(v73, v503, v69);
  sub_10025C504(v510, v84, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v85 = swift_allocObject();
  *(void *)(v85 + 16) = v486;
  sub_10001D608(v73, v85 + ((v78 + 24) & ~v78), &qword_10163F728);
  swift_retain();
  uint64_t v472 = Logger.logObject.getter();
  LOBYTE(v464) = static os_log_type_t.info.getter();
  uint64_t v487 = swift_allocObject();
  *(unsigned char *)(v487 + 16) = 112;
  uint64_t v516 = swift_allocObject();
  *(unsigned char *)(v516 + 16) = 8;
  uint64_t v86 = swift_allocObject();
  *(void *)(v86 + 16) = 1752392040;
  uint64_t v511 = swift_allocObject();
  *(void *)(v511 + 16) = sub_10006550C;
  *(void *)(v511 + 24) = v86;
  uint64_t v87 = swift_allocObject();
  *(unsigned char *)(v87 + 16) = 33;
  uint64_t v88 = v87;
  uint64_t v504 = swift_allocObject();
  *(unsigned char *)(v504 + 16) = 8;
  uint64_t v89 = swift_allocObject();
  *(void *)(v89 + 16) = sub_1000654F4;
  *(void *)(v89 + 24) = v492;
  uint64_t v90 = swift_allocObject();
  *(void *)(v90 + 16) = sub_1000654EC;
  *(void *)(v90 + 24) = v89;
  uint64_t v493 = swift_allocObject();
  *(unsigned char *)(v493 + 16) = 34;
  uint64_t v475 = swift_allocObject();
  *(unsigned char *)(v475 + 16) = 8;
  uint64_t v91 = swift_allocObject();
  *(void *)(v91 + 16) = sub_10025C990;
  *(void *)(v91 + 24) = v480;
  uint64_t v481 = swift_allocObject();
  *(void *)(v481 + 16) = sub_1000654EC;
  *(void *)(v481 + 24) = v91;
  uint64_t v92 = swift_allocObject();
  *(unsigned char *)(v92 + 16) = 34;
  uint64_t v93 = (uint8_t *)v92;
  uint64_t v94 = swift_allocObject();
  *(unsigned char *)(v94 + 16) = 8;
  uint64_t v95 = swift_allocObject();
  *(void *)(v95 + 16) = sub_10025C994;
  *(void *)(v95 + 24) = v83;
  uint64_t v96 = swift_allocObject();
  *(void *)(v96 + 16) = sub_1000654EC;
  *(void *)(v96 + 24) = v95;
  uint64_t v97 = swift_allocObject();
  *(unsigned char *)(v97 + 16) = 0;
  uint64_t v98 = v97;
  uint64_t v468 = swift_allocObject();
  *(unsigned char *)(v468 + 16) = 8;
  uint64_t v99 = swift_allocObject();
  *(void *)(v99 + 16) = sub_10025B514;
  *(void *)(v99 + 24) = v85;
  uint64_t v459 = swift_allocObject();
  *(void *)(v459 + 16) = sub_10006569C;
  *(void *)(v459 + 24) = v99;
  sub_10000588C(&qword_101639B60);
  uint64_t v100 = swift_allocObject();
  sub_1004B810C(v100, 15);
  *uint64_t v101 = sub_100065514;
  v101[1] = v487;
  v101[2] = sub_100065514;
  v101[3] = v516;
  v101[4] = sub_100065504;
  v101[5] = v511;
  v101[6] = sub_100065514;
  v101[7] = v88;
  v101[8] = sub_100065514;
  v101[9] = v504;
  v101[10] = sub_100065500;
  v101[11] = v90;
  v101[12] = sub_100065514;
  v101[13] = v493;
  v101[14] = sub_100065514;
  v101[15] = v475;
  v101[16] = sub_100065500;
  v101[17] = v481;
  v101[18] = sub_100065514;
  v101[19] = v93;
  v101[20] = sub_100065514;
  v101[21] = v94;
  v101[22] = sub_100065500;
  v101[23] = v96;
  v101[24] = sub_100065514;
  v101[25] = v98;
  uint64_t v102 = v98;
  unint64_t v103 = v468;
  v101[26] = sub_100065514;
  v101[27] = v468;
  v101[28] = sub_100065504;
  v101[29] = v459;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v104 = v519;
  swift_retain();
  buf = v93;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v472, (os_log_type_t)v464))
  {
    unint64_t v447 = *(void *)(v519 + 1824);
    uint64_t v445 = *(void *)(v519 + 1816);
    uint64_t v461 = *(void *)(v519 + 1408);
    uint64_t v109 = *(void *)(v519 + 1360);
    uint64_t v452 = *(void *)(v519 + 1352);
    uint64_t v110 = *(void *)(v519 + 1344);
    uint64_t v465 = *(void *)(v519 + 1256);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10001CFB8(v445, v447);
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v461, v452);
    sub_10001DAB4(v465, &qword_101657910);
    uint64_t v111 = v110;
    goto LABEL_16;
  }
  uint64_t v441 = v102;
  unint64_t v105 = (_WORD *)sub_1008F9FAC();
  uint64_t v106 = swift_slowAlloc();
  *(void *)(v519 + 856) = 0;
  *(void *)(v519 + 824) = v106;
  *unint64_t v105 = 1283;
  *(void *)(v519 + 864) = v105 + 1;
  *(void *)(v519 + 648) = sub_100065514;
  *(void *)(v519 + 656) = v487;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v519 + 648), v519 + 864, v519 + 856, v519 + 824);
  swift_release();
  *(void *)(v519 + 648) = sub_100065514;
  *(void *)(v519 + 656) = v516;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v519 + 648), v519 + 864, v519 + 856, v519 + 824);
  swift_release();
  *(void *)(v519 + 648) = sub_100065504;
  *(void *)(v519 + 656) = v511;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v519 + 648), v519 + 864, v519 + 856, v519 + 824);
  swift_release();
  *(void *)(v519 + 648) = sub_100065514;
  *(void *)(v519 + 656) = v88;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v519 + 648), v519 + 864, v519 + 856, v519 + 824);
  swift_release();
  *(void *)(v519 + 648) = sub_100065514;
  *(void *)(v519 + 656) = v504;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v519 + 648), v519 + 864, v519 + 856, v519 + 824);
  swift_release();
  *(void *)(v519 + 648) = sub_100065500;
  *(void *)(v519 + 656) = v90;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v519 + 648), v519 + 864, v519 + 856, v519 + 824);
  swift_release();
  *(void *)(v519 + 648) = sub_100065514;
  *(void *)(v519 + 656) = v493;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v519 + 648), v519 + 864, v519 + 856, v519 + 824);
  swift_release();
  *(void *)(v519 + 648) = sub_100065514;
  *(void *)(v519 + 656) = v475;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v519 + 648), v519 + 864, v519 + 856, v519 + 824);
  swift_release();
  *(void *)(v519 + 648) = sub_100065500;
  *(void *)(v519 + 656) = v481;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v519 + 648), v519 + 864, v519 + 856, v519 + 824);
  unint64_t v107 = (unint64_t)v105;
  unint64_t v108 = (unint64_t)v472;
  swift_release();
  *(void *)(v519 + 648) = sub_100065514;
  *(void *)(v519 + 656) = buf;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v519 + 648), v519 + 864, v519 + 856, v519 + 824);
  swift_release();
  *(void *)(v519 + 648) = sub_100065514;
  *(void *)(v519 + 656) = v94;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v519 + 648), v519 + 864, v519 + 856, v519 + 824);
  swift_release();
  *(void *)(v519 + 648) = sub_100065500;
  *(void *)(v519 + 656) = v96;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v519 + 648), v519 + 864, v519 + 856, v519 + 824);
  swift_release();
  *(void *)(v519 + 648) = sub_100065514;
  *(void *)(v519 + 656) = v441;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v519 + 648), v519 + 864, v519 + 856, v519 + 824);
  swift_release();
  *(void *)(v519 + 648) = sub_100065514;
  *(void *)(v519 + 656) = v468;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v519 + 648), v519 + 864, v519 + 856, v519 + 824);
  swift_release();
  *(void *)(v519 + 648) = sub_100065504;
  *(void *)(v519 + 656) = v459;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v519 + 648), v519 + 864, v519 + 856, v519 + 824);
LABEL_191:
  uint64_t v104 = v519;
  unint64_t v391 = *(void *)(v519 + 1824);
  uint64_t v392 = *(void *)(v519 + 1816);
  uint64_t v393 = *(void *)(v519 + 1360);
  uint64_t v499 = *(NSObject **)(v519 + 1352);
  uint64_t v507 = *(void *)(v519 + 1408);
  uint64_t v513 = *(void *)(v519 + 1256);
  uint64_t v518 = *(void *)(v519 + 1344);
  swift_release();
  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v108, (os_log_type_t)v464, "Return search result for beacon (wild): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", (uint8_t *)v107, 0x34u);
  swift_arrayDestroy();
  swift_slowDealloc();
  sub_1008F9FA0();

  swift_release();
  sub_10001CFB8(v392, v391);
  uint64_t v394 = *(void (**)(uint64_t, uint64_t))(v393 + 8);
  unint64_t v103 = v393 + 8;
  v394(v507, (uint64_t)v499);
  sub_10001DAB4(v513, &qword_101657910);
  uint64_t v111 = v518;
LABEL_16:
  sub_10001DAB4(v111, &qword_10163F728);
  uint64_t v112 = *(void *)(v104 + 1808) + 1;
  if (v112 != *(void *)(v104 + 1800))
  {
    *(void *)(v104 + 1808) = v112;
    unint64_t v319 = *(void *)(v104 + 1752);
    uint64_t v320 = *(void *)(v104 + 1792) + 24 * v112;
    uint64_t v321 = *(void *)(v320 + 32);
    *(void *)(v104 + 1816) = v321;
    uint64_t v117 = *(void *)(v320 + 40);
    *(void *)(v104 + 1824) = v117;
    int v322 = *(_DWORD *)(v320 + 48);
    *(unsigned char *)(v104 + 1836) = *(unsigned char *)(v320 + 52);
    *(_DWORD *)(v104 + 1832) = v322;
    uint64_t v323 = 0;
    uint64_t v324 = 0;
    switch(v319 >> 62)
    {
      case 1uLL:
        sub_100037A38(*(void *)(v104 + 1744), v319);
        uint64_t v350 = *(void *)(v104 + 1744);
        uint64_t v323 = v350 >> 32;
        uint64_t v324 = (int)v350;
        break;
      case 2uLL:
        uint64_t v351 = *(void *)(v104 + 1744);
        uint64_t v324 = *(void *)(v351 + 16);
        uint64_t v323 = *(void *)(v351 + 24);
        sub_100037A38(v351, v319);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v324 = 0;
        uint64_t v323 = BYTE6(v319);
        break;
    }
    unint64_t v352 = sub_1008AA59C(v324, v323, *(void *)(v104 + 1744), *(void *)(v104 + 1752));
    unint64_t v108 = *(void *)(v104 + 1752);
    if (v352 < 0x39)
    {
      switch(v108 >> 62)
      {
        case 1uLL:
          uint64_t v355 = *(void *)(v104 + 1744);
          uint64_t v353 = v355 >> 32;
          uint64_t v354 = (int)v355;
          goto LABEL_145;
        case 2uLL:
          uint64_t v356 = *(void *)(v104 + 1744);
          uint64_t v354 = *(void *)(v356 + 16);
          uint64_t v353 = *(void *)(v356 + 24);
          goto LABEL_145;
        default:
          goto LABEL_147;
      }
    }
    uint64_t v353 = sub_1008AA520(v324, 57, *(void *)(v104 + 1744), *(void *)(v104 + 1752));
    uint64_t v354 = 0;
    switch(v108 >> 62)
    {
      case 1uLL:
        uint64_t v354 = (int)*(void *)(v104 + 1744);
        break;
      case 2uLL:
        uint64_t v354 = *(void *)(*(void *)(v104 + 1744) + 16);
        break;
      default:
        break;
    }
LABEL_145:
    if (v353 >= v354)
    {
      unint64_t v108 = *(void *)(v104 + 1752);
LABEL_147:
      uint64_t v357 = *(void *)(v104 + 1744);
      sub_1000361E0(v321, v117);
      sub_1000361E0(v321, v117);
      unint64_t v103 = Data._Representation.subscript.getter();
      unint64_t v359 = v358;
      sub_100037A24(v357, v108);
      switch(v359 >> 62)
      {
        case 1uLL:
          LODWORD(v360) = HIDWORD(v103) - v103;
          if (__OFSUB__(HIDWORD(v103), v103)) {
            goto LABEL_186;
          }
          uint64_t v360 = (int)v360;
          goto LABEL_152;
        case 2uLL:
          uint64_t v362 = *(void *)(v103 + 16);
          uint64_t v361 = *(void *)(v103 + 24);
          BOOL v152 = __OFSUB__(v361, v362);
          uint64_t v360 = v361 - v362;
          if (v152) {
            goto LABEL_187;
          }
          goto LABEL_152;
        case 3uLL:
          goto LABEL_154;
        default:
          uint64_t v360 = BYTE6(v359);
LABEL_152:
          if (v360 != 57)
          {
LABEL_154:
            uint64_t v363 = v103;
            unint64_t v364 = v359;
            goto LABEL_155;
          }
          sub_1000361E0(v103, v359);
          uint64_t v365 = sub_100A94760(v103, v359);
          unint64_t v367 = v366;
          sub_10001CFB8(v103, v359);
          sub_100434E0C(v365, v367, (uint64_t *)(v104 + 696));
          sub_10001CFB8(v103, v359);
          uint64_t v377 = *(void *)(v104 + 696);
          *(void *)(v104 + 1840) = v377;
          uint64_t v378 = *(void *)(v104 + 704);
          *(void *)(v104 + 1848) = v378;
          uint64_t v379 = (void *)swift_task_alloc();
          *(void *)(v104 + 1856) = v379;
          *uint64_t v379 = v104;
          v379[1] = sub_100233AA0;
          uint64_t v380 = *(void *)(v104 + 1784);
          uint64_t v381 = *(void *)(v104 + 1568);
          uint64_t v382 = *(void *)(v104 + 1272);
          uint64_t result = sub_10025916C(v382, v321, v117, v380, v377, v378, 0, v381);
          break;
      }
      return result;
    }
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
    swift_once();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v368 = swift_allocObject();
    uint64_t v369 = sub_1004B810C(v368, 1);
    uint64_t v371 = v370;
    *uint64_t v436 = v103;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v372 = String.init<A>(describing:)();
    uint64_t v374 = v373;
    v371[3] = (uint64_t)&type metadata for String;
    v371[4] = sub_10000B4CC();
    *uint64_t v371 = v372;
    v371[1] = v374;
    SharingCircleWildAdvertisementKey.init(key:)(v369);
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_100130148();
    uint64_t v385 = swift_allocError();
    *uint64_t v375 = 0;
    swift_willThrow();
    swift_errorRelease();
    unint64_t v107 = v108;
    uint64_t v154 = v117;
LABEL_168:
    sub_10001CFB8(v154, v107);
    uint64_t v523 = 0;
    unint64_t v524 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    unint64_t v387 = v524;
    *(void *)(v104 + 680) = v523;
    *(void *)(v104 + 688) = v387;
    v388._object = (void *)0x80000001013F3B70;
    v388._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v388);
    *(void *)(v104 + 872) = v385;
    sub_10000588C(&qword_101638D40);
    _print_unlocked<A, B>(_:_:)();
    return _assertionFailure(_:_:file:line:flags:)();
  }
  uint64_t v113 = *(void **)(v519 + 1784);
  unint64_t v114 = *(void *)(v519 + 1752);
  unint64_t v115 = *(void *)(v519 + 1744);
  uint64_t v116 = *(void *)(v519 + 1632);
  uint64_t v117 = *(void *)(v519 + 1576);
  uint64_t v118 = *(void *)(v519 + 1568);
  uint64_t v119 = *(void *)(v519 + 1536);
  uint64_t v120 = *(void *)(v519 + 1528);
  sub_10001CFB8(*(void *)(v519 + 1672), *(void *)(v519 + 1680));

  uint64_t v104 = v519;
  sub_100037A24(v115, v114);
  swift_bridgeObjectRelease();
  unint64_t v122 = *(NSObject **)(v119 + 8);
  unint64_t v103 = v119 + 8;
  uint64_t v121 = v122;
  ((void (*)(uint64_t, uint64_t))v122)(v117, v120);
  sub_10025C56C(v116, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  ((void (*)(uint64_t, uint64_t))v122)(v118, v120);
  unint64_t v123 = *(void *)(v519 + 1664) + 1;
  if (v123 != *(void *)(v519 + 1656))
  {
    uint64_t v117 = (uint64_t)qword_10170D9D8;
    do
    {
      *(void *)(v104 + 1664) = v123;
      unint64_t v325 = *(void **)(v104 + 984);
      if (!v325) {
        unint64_t v325 = _swiftEmptyArrayStorage;
      }
      if (v123 >= v325[2])
      {
        __break(1u);
        sub_10001CFB8(v114, (unint64_t)v121);
        uint64_t v523 = 0;
        unint64_t v524 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        unint64_t v389 = v524;
        *(void *)(v104 + 744) = v523;
        *(void *)(v104 + 752) = v389;
        v390._object = (void *)0x80000001013F3B70;
        v390._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v390);
        *(void *)(v104 + 848) = v115;
        sub_10000588C(&qword_101638D40);
        _print_unlocked<A, B>(_:_:)();
        return _assertionFailure(_:_:file:line:flags:)();
      }
      uint64_t v326 = *(unsigned __int8 *)(v104 + 2016);
      uint64_t v327 = *(void *)(v104 + 1632);
      uint64_t v328 = *(void *)(v104 + 1592);
      uint64_t v329 = *(void *)(v519 + 1584);
      uint64_t v330 = *(void *)(v519 + 1536);
      uint64_t v331 = *(void *)(v519 + 1528);
      uint64_t v332 = *(void *)(v519 + 1520);
      sub_10025C504((uint64_t)v325 + ((v326 + 32) & ~v326) + *(void *)(v328 + 72) * v123, v327, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      unint64_t v114 = *(void *)(v327 + 16);
      *(void *)(v519 + 1672) = v114;
      unint64_t v115 = *(void *)(v327 + 24);
      *(void *)(v519 + 1680) = v115;
      uint64_t v333 = *(int *)(v329 + 28);
      uint64_t v104 = v519;
      sub_10001D074(v327 + v333, v332, &qword_101638CF0);
      uint64_t v334 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v330 + 48);
      *(void *)(v519 + 1688) = v334;
      *(void *)(v519 + 1696) = (v330 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
      if (v334(v332, 1, v331) != 1)
      {
        uint64_t v341 = *(void *)(v519 + 1576);
        uint64_t v342 = *(void *)(v519 + 1536);
        uint64_t v343 = *(void *)(v519 + 1528);
        uint64_t v344 = *(void *)(v519 + 1520);
        uint64_t v345 = *(void *)(v519 + 1512);
        uint64_t v346 = *(void (**)(uint64_t, uint64_t, uint64_t))(v342 + 32);
        *(void *)(v519 + 1704) = v346;
        *(void *)(v519 + 1712) = (v342 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v346(v341, v344, v343);
        uint64_t v347 = *(void (**)(uint64_t, uint64_t, uint64_t))(v342 + 16);
        *(void *)(v519 + 1720) = v347;
        *(void *)(v519 + 1728) = (v342 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v347(v345, v341, v343);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v342 + 56))(v345, 0, 1, v343);
        sub_1000361E0(v114, v115);
        uint64_t v348 = (void *)swift_task_alloc();
        *(void *)(v519 + 1736) = v348;
        *uint64_t v348 = v519;
        v348[1] = sub_1002280E0;
        uint64_t v349 = *(void *)(v519 + 1512);
        return sub_100257574(v114, v115, v349);
      }
      uint64_t v335 = *(void *)(v519 + 1520);
      sub_1000361E0(v114, v115);
      sub_10001DAB4(v335, &qword_101638CF0);
      if (qword_101636908 != -1) {
        swift_once();
      }
      sub_100010324(*(void *)(v519 + 1352), (uint64_t)qword_10170D9D8);
      uint64_t v121 = Logger.logObject.getter();
      os_log_type_t v336 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v121, v336))
      {
        uint64_t v337 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v337 = 0;
        _os_log_impl((void *)&_mh_execute_header, v121, v336, "Missing share id in payload.", v337, 2u);
        swift_slowDealloc();
      }
      unint64_t v103 = *(void *)(v519 + 1632);
      sub_10001CFB8(v114, v115);

      sub_10025C56C(v103, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      unint64_t v123 = *(void *)(v519 + 1664) + 1;
    }
    while (v123 != *(void *)(v519 + 1656));
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v104 + 976)) {
    unint64_t v108 = *(void *)(v104 + 976);
  }
  else {
    unint64_t v108 = (unint64_t)_swiftEmptyArrayStorage;
  }
  Class v460 = *(Class *)(v108 + 16);
  if (!v460)
  {
    swift_bridgeObjectRetain();
LABEL_130:
    swift_bridgeObjectRelease();
    uint64_t v338 = *(void *)(v104 + 1648);
    swift_beginAccess();
    uint64_t v506 = *(void *)(v338 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v339 = *(uint64_t (**)(uint64_t))(v104 + 8);
    return v339(v506);
  }
  uint64_t v124 = *(void *)(v104 + 1536);
  uint64_t v436 = (unint64_t *)(v104 + 888);
  uint64_t v125 = *(void *)(v104 + 1360);
  uint64_t v437 = *(void *)(v104 + 1280);
  uint64_t v126 = *(void *)(v104 + 1160);
  uint64_t v439 = *(void *)(v104 + 1120);
  uint64_t v505 = *(void *)(v104 + 1104);
  uint64_t v443 = *(void *)(v104 + 1080);
  uint64_t v127 = *(void *)(v104 + 1056);
  uint64_t v482 = (void (**)(uint64_t, void, uint64_t))(v127 + 104);
  uint64_t v432 = *(void *)(v104 + 1040);
  uint64_t v476 = (void (**)(uint64_t, uint64_t))(v127 + 8);
  uint64_t v440 = (void (**)(void))(v124 + 16);
  uint64_t v442 = *(void *)(v104 + 1032);
  uint64_t v431 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v104 + 1192) + 56);
  unint64_t v430 = (void (**)(uint64_t, uint64_t, uint64_t))(v126 + 16);
  unint64_t v429 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v126 + 56);
  uint64_t v428 = (void (**)(uint64_t))(v124 + 32);
  uint64_t v425 = (void (**)(uint64_t, uint64_t))(v124 + 8);
  uint64_t v128 = *(void *)(*(void *)(v104 + 992) + 16);
  bufa = (uint8_t *)(v125 + 16);
  uint64_t v446 = (void (**)(uint64_t, uint64_t))(v125 + 8);
  unsigned int v473 = enum case for HashAlgorithm.sha256(_:);
  uint64_t v464 = (v108 + 32);
  uint64_t v426 = *(void *)(v104 + 1288);
  uint64_t v427 = *(int **)(v104 + 1016);
  swift_bridgeObjectRetain();
  unint64_t v129 = 0;
  uint64_t v458 = v128;
  uint64_t v444 = v108;
LABEL_23:
  if (v129 >= *(void *)(v108 + 16)) {
    goto LABEL_178;
  }
  uint64_t v462 = (objc_class *)v129;
  int64_t v130 = (uint64_t *)&v464[3 * v129];
  uint64_t v131 = *v130;
  unint64_t v103 = v130[1];
  uint64_t v132 = v130[2];
  if (!v128)
  {
    sub_1000361E0(*v130, v130[1]);
    swift_bridgeObjectRetain();
    goto LABEL_87;
  }
  uint64_t v133 = *(void *)(v104 + 992);
  unint64_t v494 = v103 >> 62;
  sub_1000361E0(v131, v103);
  uint64_t v134 = *(unsigned __int8 *)(v443 + 80);
  uint64_t v433 = ~v134;
  uint64_t v435 = v134;
  uint64_t v135 = v133 + ((v134 + 32) & ~v134);
  uint64_t v488 = BYTE6(v103);
  uint64_t v469 = *(void *)(v443 + 72);
  BOOL v136 = __OFSUB__(HIDWORD(v131), v131);
  BOOL v453 = v136;
  uint64_t v448 = HIDWORD(v131) - (int)v131;
  uint64_t v438 = v132;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v137 = v128;
  unint64_t v512 = v103;
  uint64_t v517 = v131;
  while (2)
  {
    uint64_t v138 = *(uint64_t **)(v104 + 1104);
    sub_10025C504(v135, (uint64_t)v138, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
    uint64_t v139 = *v138;
    unint64_t v140 = *(void *)(v505 + 8);
    unint64_t v141 = v140 >> 62;
    uint64_t v117 = 0;
    uint64_t v104 = 0;
    uint64_t v142 = 0;
    uint64_t v143 = 0;
    switch(v140 >> 62)
    {
      case 1uLL:
        uint64_t v117 = (int)v139;
        uint64_t v104 = v139 >> 32;
        sub_1000361E0(v139, *(void *)(v505 + 8));
        uint64_t v142 = v139 >> 32;
        uint64_t v143 = (int)v139;
        break;
      case 2uLL:
        uint64_t v117 = *(void *)(v139 + 16);
        uint64_t v104 = *(void *)(v139 + 24);
        sub_1000361E0(v139, *(void *)(v505 + 8));
        uint64_t v143 = *(void *)(v139 + 16);
        uint64_t v142 = *(void *)(v139 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v117 = 0;
        uint64_t v143 = 0;
        uint64_t v104 = BYTE6(v140);
        uint64_t v142 = BYTE6(v140);
        break;
    }
    if (v142 < v117 || v117 < v143)
    {
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
      goto LABEL_175;
    }
    uint64_t v144 = 0;
    uint64_t v145 = 0;
    switch((int)v141)
    {
      case 1:
        uint64_t v145 = (int)v139;
        uint64_t v144 = v139 >> 32;
        break;
      case 2:
        uint64_t v145 = *(void *)(v139 + 16);
        uint64_t v144 = *(void *)(v139 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v145 = 0;
        uint64_t v144 = BYTE6(v140);
        break;
    }
    if (v144 < v104 || v104 < v145) {
      goto LABEL_172;
    }
    if (__OFSUB__(v104, v117)) {
      goto LABEL_173;
    }
    if ((unint64_t)(v104 - v117) < 0x39)
    {
      uint64_t v104 = v519;
      switch((int)v141)
      {
        case 1:
          uint64_t v146 = v139 >> 32;
          goto LABEL_49;
        case 2:
          uint64_t v146 = *(void *)(v139 + 24);
          goto LABEL_51;
        default:
          goto LABEL_53;
      }
    }
    uint64_t v104 = v519;
    uint64_t v146 = sub_1008AA520(v117, 57, v139, v140);
    uint64_t v147 = 0;
    switch((int)v141)
    {
      case 1:
LABEL_49:
        uint64_t v147 = (int)v139;
        break;
      case 2:
LABEL_51:
        uint64_t v147 = *(void *)(v139 + 16);
        break;
      default:
        break;
    }
    if (v146 < v147) {
      goto LABEL_174;
    }
LABEL_53:
    uint64_t v117 = Data._Representation.subscript.getter();
    unint64_t v108 = (unint64_t)v148;
    sub_10001CFB8(v139, v140);
    switch(v108 >> 62)
    {
      case 1uLL:
        LODWORD(v149) = HIDWORD(v117) - v117;
        if (__OFSUB__(HIDWORD(v117), v117)) {
          goto LABEL_176;
        }
        uint64_t v149 = (int)v149;
LABEL_58:
        if (v149 == 57)
        {
          sub_1000361E0(v117, v108);
          uint64_t v153 = sub_100A948F8(v117, v108);
          uint64_t v154 = sub_100A90C58(v153, 0);
          unint64_t v107 = v155;
          CCECCryptorRelease();
          sub_10001CFB8(v117, v108);
          unint64_t v156 = v107 >> 62;
          unint64_t v103 = v512;
          switch(v107 >> 62)
          {
            case 1uLL:
              LODWORD(v157) = HIDWORD(v154) - v154;
              if (__OFSUB__(HIDWORD(v154), v154)) {
                goto LABEL_179;
              }
              uint64_t v157 = (int)v157;
LABEL_64:
              if (v157 == 28)
              {
                uint64_t v160 = *(void *)(v104 + 1064);
                uint64_t v161 = *(void *)(v104 + 1048);
                sub_10001CFB8(v117, v108);
                (*v482)(v160, v473, v161);
                uint64_t v117 = Data.hash(algorithm:)();
                unint64_t v108 = (unint64_t)v162;
                (*v476)(v160, v161);
                sub_10001CFB8(v154, v107);
                uint64_t v104 = 0;
                uint64_t v131 = v517;
                switch(v108 >> 62)
                {
                  case 1uLL:
                    if (__OFSUB__(HIDWORD(v117), v117)) {
                      goto LABEL_181;
                    }
                    uint64_t v104 = HIDWORD(v117) - (int)v117;
LABEL_70:
                    sub_1000361E0(v117, v108);
                    break;
                  case 2uLL:
                    uint64_t v164 = *(void *)(v117 + 16);
                    uint64_t v163 = *(void *)(v117 + 24);
                    uint64_t v104 = v163 - v164;
                    if (!__OFSUB__(v163, v164)) {
                      goto LABEL_70;
                    }
                    goto LABEL_182;
                  case 3uLL:
                    break;
                  default:
                    uint64_t v104 = BYTE6(v108);
                    break;
                }
                uint64_t v165 = v488;
                switch((int)v494)
                {
                  case 1:
                    uint64_t v165 = v448;
                    if (v453) {
                      goto LABEL_183;
                    }
                    goto LABEL_75;
                  case 2:
                    uint64_t v167 = *(void *)(v517 + 16);
                    uint64_t v166 = *(void *)(v517 + 24);
                    BOOL v152 = __OFSUB__(v166, v167);
                    uint64_t v165 = v166 - v167;
                    if (v152) {
                      goto LABEL_184;
                    }
                    goto LABEL_75;
                  case 3:
                    if (v104) {
                      goto LABEL_30;
                    }
                    goto LABEL_96;
                  default:
LABEL_75:
                    if (v104 == v165)
                    {
                      if (v104 < 1)
                      {
LABEL_96:
                        sub_10001CFB8(v117, v108);
                        sub_10001CFB8(v117, v108);
                        uint64_t v104 = v519;
LABEL_97:
                        uint64_t v183 = *(void *)(v104 + 1120);
                        uint64_t v184 = *(void *)(v104 + 1112);
                        uint64_t v185 = *(void *)(v104 + 1104);
                        swift_bridgeObjectRelease();
                        sub_10025C5CC(v185, v184, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        sub_10025C5CC(v184, v183, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        uint64_t v422 = sub_1001340BC(v438);
                        if (v422)
                        {
                          unint64_t v454 = v438
                               + ((*(unsigned __int8 *)(v442 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v442 + 80));
                          uint64_t v434 = (v435 + 16) & v433;
                          swift_bridgeObjectRetain();
                          uint64_t v186 = 0;
                          while (1)
                          {
                            uint64_t v489 = v186 + 1;
                            if (__OFADD__(v186, 1)) {
                              goto LABEL_185;
                            }
                            double v187 = *(uint64_t **)(v104 + 1120);
                            uint64_t v470 = v186;
                            sub_10025C504(v454 + *(void *)(v442 + 72) * v186, *(void *)(v104 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                            uint64_t v188 = *v187;
                            unint64_t v189 = *(void *)(v439 + 8);
                            SecKeyRef v190 = sub_100435E70(v188, v189);
                            uint64_t v191 = **(void **)(v104 + 1040);
                            unint64_t v192 = *(void *)(v432 + 8);
                            uint64_t v193 = PrivateKey.publicKey.getter(v188, v189);
                            unint64_t v195 = v194;
                            sub_1000361E0(v193, v194);
                            uint64_t v196 = sub_100A94760(v193, v195);
                            unint64_t v198 = v197;
                            sub_10001CFB8(v193, v195);
                            sub_100434E0C(v196, v198, (uint64_t *)&v523);
                            uint64_t v199 = *(void *)(v104 + 1024);
                            sub_10001CFB8(v193, v195);
                            uint64_t v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v523;
                            unint64_t v200 = v524;
                            uint64_t v202 = (void *)v104;
                            uint64_t v203 = v190;
                            sub_1000361E0(v191, v192);
                            sub_1000361E0((uint64_t)v201, v200);
                            BeaconPayloadv1.init(using:data:advertisement:)(v203, v191, v192, (uint64_t)v201, v200, v199);
                            uint64_t v404 = v203;
                            uint64_t v412 = *(void *)(v104 + 1528);
                            uint64_t v416 = *(void *)(v104 + 1560);
                            uint64_t v419 = *(void *)(v104 + 1280);
                            uint64_t v204 = *(void *)(v104 + 1264);
                            uint64_t v205 = *(void *)(v104 + 1240);
                            unint64_t v409 = v200;
                            uint64_t v206 = *(void *)(v104 + 1232);
                            uint64_t v207 = *(void *)(v104 + 1184);
                            uint64_t v449 = (uint64_t)v201;
                            uint64_t v208 = *(void *)(v104 + 1168);
                            uint64_t v209 = *(void *)(v104 + 1152);
                            uint64_t v405 = *(unsigned char **)(v104 + 1144);
                            uint64_t v210 = *(void *)(v104 + 1024);
                            uint64_t v211 = *(void *)(v104 + 1008);
                            unint64_t v495 = *v440;
                            (*v440)();
                            (*v431)(v205, 1, 1, v207);
                            LODWORD(v207) = *(unsigned __int8 *)(v210 + v427[10]);
                            (*v430)(v208, v210 + v427[5], v209);
                            double v212 = *(double *)(v210 + v427[7]);
                            double v213 = *(double *)(v210 + v427[8]);
                            double v214 = *(double *)(v210 + v427[9]);
                            (*v429)(v211, 1, 1, v209);
                            sub_10001D074(v205, v206, &qword_101657910);
                            sub_100CC2A6C(v207, v208, 15, v211, v206, 256, v405, v212, v213, v214);
                            sub_10001DAB4(v205, &qword_101657910);
                            sub_10025C56C(v210, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
                            uint64_t v215 = v204 + *(int *)(v437 + 48);
                            uint64_t v216 = *v428;
                            ((void (*)(uint64_t, uint64_t, uint64_t))*v428)(v204, v416, v412);
                            sub_10025C5CC((uint64_t)v405, v215, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v426 + 56))(v204, 0, 1, v419);
                            sub_10001CFB8(v449, v409);
                            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v426 + 48))(v204, 1, v419) == 1)
                            {
                              uint64_t v217 = v202[158];

                              sub_10001DAB4(v217, &qword_10163F720);
                              uint64_t v104 = (uint64_t)v202;
                              if (qword_101636908 != -1) {
                                swift_once();
                              }
                              uint64_t v218 = v202[173];
                              uint64_t v219 = v202[169];
                              uint64_t v220 = v202[140];
                              uint64_t v221 = v202[137];
                              uint64_t v222 = sub_100010324(v219, (uint64_t)qword_10170D9D8);
                              (*(void (**)(uint64_t, uint64_t, uint64_t))bufa)(v218, v222, v219);
                              sub_10025C504(v220, v221, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                              uint64_t v223 = swift_allocObject();
                              sub_10025C5CC(v221, v223 + v434, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                              uint64_t v224 = swift_allocObject();
                              *(void *)(v224 + 16) = sub_10025B340;
                              *(void *)(v224 + 24) = v223;
                              uint64_t v496 = Logger.logObject.getter();
                              os_log_type_t v225 = static os_log_type_t.error.getter();
                              uint64_t v226 = swift_allocObject();
                              *(unsigned char *)(v226 + 16) = 112;
                              uint64_t v117 = swift_allocObject();
                              *(unsigned char *)(v117 + 16) = 8;
                              uint64_t v227 = swift_allocObject();
                              *(void *)(v227 + 16) = 1752392040;
                              uint64_t v228 = swift_allocObject();
                              *(void *)(v228 + 16) = sub_100060540;
                              *(void *)(v228 + 24) = v227;
                              uint64_t v229 = swift_allocObject();
                              *(unsigned char *)(v229 + 16) = 33;
                              uint64_t v230 = swift_allocObject();
                              *(unsigned char *)(v230 + 16) = 8;
                              uint64_t v231 = swift_allocObject();
                              *(void *)(v231 + 16) = sub_1000604E8;
                              *(void *)(v231 + 24) = v224;
                              uint64_t v232 = swift_allocObject();
                              *(void *)(v232 + 16) = sub_10005F790;
                              *(void *)(v232 + 24) = v231;
                              sub_10000588C(&qword_101639B60);
                              uint64_t inited = swift_initStackObject();
                              sub_1004B810C(inited, 6);
                              *uint64_t v234 = sub_10005F778;
                              v234[1] = v226;
                              v234[2] = sub_100065514;
                              v234[3] = v117;
                              v234[4] = sub_10006000C;
                              v234[5] = v228;
                              v234[6] = sub_100065514;
                              v234[7] = v229;
                              v234[8] = sub_100065514;
                              v234[9] = v230;
                              v234[10] = sub_10005F7D0;
                              v234[11] = v232;
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_bridgeObjectRelease();
                              if (os_log_type_enabled(v496, v225))
                              {
                                uint64_t v235 = (uint8_t *)swift_slowAlloc();
                                uint64_t v236 = swift_slowAlloc();
                                uint64_t v521 = 0;
                                uint64_t v522 = v236;
                                *(_WORD *)uint64_t v235 = 515;
                                os_log_type_t v520 = v235 + 2;
                                sub_1008FA6E0(&v520, (uint64_t)&v521, (uint64_t)&v522, 112);
                                swift_release();
                                uint64_t v523 = sub_100065514;
                                unint64_t v524 = v117;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                swift_release();
                                uint64_t v523 = (uint64_t (*)())sub_10006000C;
                                unint64_t v524 = v228;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                swift_release();
                                uint64_t v523 = sub_100065514;
                                unint64_t v524 = v229;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                swift_release();
                                uint64_t v523 = sub_100065514;
                                unint64_t v524 = v230;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                swift_release();
                                uint64_t v523 = (uint64_t (*)())sub_10005F7D0;
                                unint64_t v524 = v232;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                uint64_t v237 = *(void *)(v104 + 1384);
                                uint64_t v238 = *(void *)(v104 + 1352);
                                swift_release();
                                _os_log_impl((void *)&_mh_execute_header, v496, v225, "Could not create search result for beacon: %{private,mask.hash}s.", v235, 0x16u);
                                swift_arrayDestroy();
                                swift_slowDealloc();
                                sub_1008F9FA0();

                                (*v446)(v237, v238);
                              }
                              else
                              {
                                uint64_t v239 = *(void *)(v104 + 1384);
                                uint64_t v240 = *(void *)(v104 + 1352);
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();

                                (*v446)(v239, v240);
                              }
                              uint64_t v128 = v458;
                              unint64_t v103 = v512;
                              uint64_t v131 = v517;
                              unint64_t v108 = (unint64_t)v444;
                            }
                            else
                            {
                              uint64_t v241 = v202[206];
                              uint64_t v242 = v202[191];
                              uint64_t v243 = v202[165];
                              uint64_t v244 = v202[164];
                              uint64_t v245 = *(int *)(v437 + 48);
                              uint64_t v246 = v243 + v245;
                              uint64_t v247 = v202[158] + v245;
                              v216(v243);
                              sub_10025C5CC(v247, v246, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              uint64_t v248 = v244 + *(int *)(v437 + 48);
                              ((void (*)(uint64_t, uint64_t, uint64_t))v495)(v244, v243, v242);
                              uint64_t v450 = v246;
                              sub_10025C504(v246, v248, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              swift_beginAccess();
                              uint64_t v249 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000F790C(v244, *(void *)(v241 + 16));
                              uint64_t v250 = v202[191];
                              uint64_t v251 = v202[166];
                              uint64_t v252 = v202[165];
                              uint64_t v253 = v202[164];
                              if (v249)
                              {
                                uint64_t v254 = v202[143];
                                uint64_t v523 = (uint64_t (*)())v249;
                                swift_endAccess();
                                sub_10025C56C(v248, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                uint64_t v413 = *v425;
                                (*v425)(v253, v250);
                                uint64_t v255 = (unsigned __int8 *)(v251 + *(int *)(v437 + 48));
                                ((void (*)(uint64_t, uint64_t, uint64_t))v495)(v251, v252, v250);
                                sub_10025C504(v450, (uint64_t)v255, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                sub_1000D1E3C(v254, v255);
                                sub_10025C56C(v254, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                v413(v251, v250);
                                uint64_t v256 = v437;
                                uint64_t v257 = v251 + *(int *)(v437 + 48);
                                ((void (*)(uint64_t, uint64_t, uint64_t))v495)(v251, v252, v250);
                                sub_10025C504(v450, v257, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                uint64_t v258 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v523;
                                swift_beginAccess();
                                sub_10015DF64((uint64_t)v258, v251);
                                swift_endAccess();
                                sub_10025C56C(v257, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              }
                              else
                              {
                                uint64_t v259 = v202[163];
                                swift_endAccess();
                                sub_10025C56C(v248, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                unint64_t v406 = *v425;
                                (*v425)(v253, v250);
                                uint64_t v260 = v251 + *(int *)(v437 + 48);
                                uint64_t v414 = v260;
                                ((void (*)(uint64_t, uint64_t, uint64_t))v495)(v251, v252, v250);
                                sub_10025C504(v450, v260, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                sub_10000588C(&qword_10163AA18);
                                uint64_t v261 = swift_allocObject();
                                uint64_t v262 = sub_1004B7688(v261, 1);
                                uint64_t v263 = v252;
                                uint64_t v264 = v262;
                                uint64_t v266 = v265;
                                uint64_t v267 = v259 + *(int *)(v437 + 48);
                                ((void (*)(uint64_t, uint64_t, uint64_t))v495)(v259, v263, v250);
                                sub_10025C504(v450, v267, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                sub_10025C5CC(v267, v266, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                uint64_t v268 = SharingCircleWildAdvertisementKey.init(key:)(v264);
                                v406(v259, v250);
                                uint64_t v269 = sub_101158D6C(v268);
                                swift_bridgeObjectRelease();
                                swift_beginAccess();
                                sub_10015DF64(v269, v251);
                                swift_endAccess();
                                sub_10025C56C(v414, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                                uint64_t v256 = v437;
                              }
                              uint64_t v270 = *(void *)(v519 + 1528);
                              uint64_t v271 = *(void *)(v519 + 1392);
                              uint64_t v417 = *(void *)(v519 + 1648);
                              uint64_t v272 = *(void *)(v519 + 1352);
                              uint64_t v273 = *(void *)(v519 + 1328);
                              uint64_t v274 = *(void *)(v519 + 1320);
                              uint64_t v275 = *(void *)(v519 + 1120);
                              uint64_t v276 = *(void *)(v519 + 1096);
                              uint64_t v277 = sub_100207468();
                              (*(void (**)(uint64_t, uint64_t, uint64_t))bufa)(v271, v277, v272);
                              sub_10025C504(v275, v276, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                              uint64_t v278 = swift_allocObject();
                              sub_10025C5CC(v276, v278 + v434, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                              uint64_t v420 = swift_allocObject();
                              *(void *)(v420 + 16) = sub_10025B340;
                              *(void *)(v420 + 24) = v278;
                              uint64_t v279 = v273 + *(int *)(v256 + 48);
                              uint64_t v280 = v270;
                              ((void (*)(uint64_t, uint64_t, uint64_t))v495)(v273, v274, v270);
                              sub_10025C504(v450, v279, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              uint64_t v281 = *(unsigned __int8 *)(v426 + 80);
                              uint64_t v282 = (v281 + 16) & ~v281;
                              uint64_t v283 = swift_allocObject();
                              sub_10001D608(v273, v283 + v282, &qword_10163F728);
                              uint64_t v410 = swift_allocObject();
                              *(void *)(v410 + 16) = sub_10025B4F4;
                              *(void *)(v410 + 24) = v283;
                              uint64_t v284 = v273 + *(int *)(v256 + 48);
                              ((void (*)(uint64_t, uint64_t, uint64_t))v495)(v273, v274, v280);
                              sub_10025C504(v450, v284, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              uint64_t v285 = swift_allocObject();
                              sub_10001D608(v273, v285 + v282, &qword_10163F728);
                              uint64_t v407 = swift_allocObject();
                              *(void *)(v407 + 16) = sub_10025B504;
                              *(void *)(v407 + 24) = v285;
                              uint64_t v286 = v273 + *(int *)(v437 + 48);
                              ((void (*)(uint64_t, uint64_t, uint64_t))v495)(v273, v274, v280);
                              sub_10025C504(v450, v286, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
                              uint64_t v287 = swift_allocObject();
                              *(void *)(v287 + 16) = v417;
                              sub_10001D608(v273, v287 + ((v281 + 24) & ~v281), &qword_10163F728);
                              swift_retain();
                              osos_log_t log = Logger.logObject.getter();
                              os_log_type_t v399 = static os_log_type_t.info.getter();
                              uint64_t v288 = swift_allocObject();
                              *(unsigned char *)(v288 + 16) = 112;
                              uint64_t v289 = v288;
                              uint64_t v290 = swift_allocObject();
                              *(unsigned char *)(v290 + 16) = 8;
                              uint64_t v291 = v290;
                              uint64_t v292 = swift_allocObject();
                              *(void *)(v292 + 16) = 1752392040;
                              uint64_t v293 = swift_allocObject();
                              *(void *)(v293 + 16) = sub_10006550C;
                              *(void *)(v293 + 24) = v292;
                              uint64_t v294 = v293;
                              unint64_t v418 = v293;
                              uint64_t v295 = swift_allocObject();
                              *(unsigned char *)(v295 + 16) = 33;
                              uint64_t v296 = v295;
                              uint64_t v451 = swift_allocObject();
                              *(unsigned char *)(v451 + 16) = 8;
                              uint64_t v297 = swift_allocObject();
                              *(void *)(v297 + 16) = sub_1000654F4;
                              *(void *)(v297 + 24) = v420;
                              uint64_t v415 = swift_allocObject();
                              *(void *)(v415 + 16) = sub_1000654EC;
                              *(void *)(v415 + 24) = v297;
                              uint64_t v298 = swift_allocObject();
                              *(unsigned char *)(v298 + 16) = 34;
                              uint64_t v497 = swift_allocObject();
                              *(unsigned char *)(v497 + 16) = 8;
                              uint64_t v299 = swift_allocObject();
                              *(void *)(v299 + 16) = sub_10025B4F8;
                              *(void *)(v299 + 24) = v410;
                              uint64_t v411 = swift_allocObject();
                              *(void *)(v411 + 16) = sub_1000654EC;
                              *(void *)(v411 + 24) = v299;
                              uint64_t v300 = swift_allocObject();
                              *(unsigned char *)(v300 + 16) = 34;
                              uint64_t v301 = v300;
                              uint64_t v421 = swift_allocObject();
                              *(unsigned char *)(v421 + 16) = 8;
                              uint64_t v302 = swift_allocObject();
                              *(void *)(v302 + 16) = sub_10025B508;
                              *(void *)(v302 + 24) = v407;
                              uint64_t v303 = swift_allocObject();
                              *(void *)(v303 + 16) = sub_1000654EC;
                              *(void *)(v303 + 24) = v302;
                              uint64_t v304 = v303;
                              uint64_t v403 = swift_allocObject();
                              *(unsigned char *)(v403 + 16) = 0;
                              uint64_t v408 = swift_allocObject();
                              *(unsigned char *)(v408 + 16) = 8;
                              uint64_t v305 = swift_allocObject();
                              *(void *)(v305 + 16) = sub_10025B514;
                              *(void *)(v305 + 24) = v287;
                              uint64_t v402 = swift_allocObject();
                              *(void *)(v402 + 16) = sub_100060004;
                              *(void *)(v402 + 24) = v305;
                              sub_10000588C(&qword_101639B60);
                              uint64_t v306 = swift_allocObject();
                              sub_1004B810C(v306, 15);
                              *uint64_t v307 = sub_100065514;
                              v307[1] = v289;
                              unint64_t v308 = v289;
                              v307[2] = sub_100065514;
                              v307[3] = v291;
                              unint64_t v309 = v291;
                              v307[4] = sub_100065504;
                              v307[5] = v294;
                              v307[6] = sub_100065514;
                              v307[7] = v296;
                              unint64_t v310 = v296;
                              v307[8] = sub_100065514;
                              v307[9] = v451;
                              uint64_t v117 = v411;
                              v307[10] = sub_100065500;
                              v307[11] = v415;
                              v307[12] = sub_100065514;
                              v307[13] = v298;
                              v307[14] = sub_100065514;
                              v307[15] = v497;
                              v307[16] = sub_100065500;
                              v307[17] = v411;
                              v307[18] = sub_100065514;
                              v307[19] = v301;
                              v307[20] = sub_100065514;
                              v307[21] = v421;
                              v307[22] = sub_100065500;
                              v307[23] = v304;
                              unint64_t v311 = v304;
                              v307[24] = sub_100065514;
                              v307[25] = v403;
                              v307[26] = sub_100065514;
                              v307[27] = v408;
                              v307[28] = sub_10006000C;
                              v307[29] = v402;
                              unint64_t v396 = v308;
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              unint64_t v395 = v301;
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_retain();
                              swift_bridgeObjectRelease();
                              if (os_log_type_enabled(oslog, v399))
                              {
                                unint64_t v397 = v298;
                                uint64_t v312 = (uint8_t *)sub_1008F9FAC();
                                uint64_t v313 = swift_slowAlloc();
                                uint64_t v521 = 0;
                                uint64_t v522 = v313;
                                *(_WORD *)uint64_t v312 = 1283;
                                os_log_type_t v520 = v312 + 2;
                                uint64_t v523 = sub_100065514;
                                unint64_t v524 = v396;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                unint64_t v103 = v512;
                                swift_release();
                                uint64_t v523 = sub_100065514;
                                unint64_t v524 = v309;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                swift_release();
                                uint64_t v523 = (uint64_t (*)())sub_100065504;
                                unint64_t v524 = v418;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                uint64_t v131 = v517;
                                uint64_t v104 = v519;
                                swift_release();
                                uint64_t v523 = sub_100065514;
                                unint64_t v524 = v310;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                swift_release();
                                uint64_t v523 = sub_100065514;
                                unint64_t v524 = v451;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                uint64_t v128 = v458;
                                unint64_t v314 = v311;
                                swift_release();
                                uint64_t v523 = sub_100065500;
                                unint64_t v524 = v415;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                swift_release();
                                uint64_t v523 = sub_100065514;
                                unint64_t v524 = v397;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                swift_release();
                                uint64_t v523 = sub_100065514;
                                unint64_t v524 = v497;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                swift_release();
                                uint64_t v523 = sub_100065500;
                                unint64_t v524 = v411;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                swift_release();
                                uint64_t v523 = sub_100065514;
                                unint64_t v524 = v395;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                swift_release();
                                uint64_t v523 = sub_100065514;
                                unint64_t v524 = v421;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                unint64_t v108 = (unint64_t)v444;
                                swift_release();
                                uint64_t v523 = sub_100065500;
                                unint64_t v524 = v314;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                swift_release();
                                uint64_t v523 = sub_100065514;
                                unint64_t v524 = v403;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                swift_release();
                                uint64_t v523 = sub_100065514;
                                unint64_t v524 = v408;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                swift_release();
                                uint64_t v523 = (uint64_t (*)())sub_10006000C;
                                unint64_t v524 = v402;
                                sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v523, (uint64_t)&v520, (uint64_t)&v521, (uint64_t)&v522);
                                uint64_t v315 = *(void *)(v519 + 1392);
                                uint64_t v316 = *(void *)(v519 + 1352);
                                uint64_t v498 = *(void *)(v519 + 1320);
                                swift_release();
                                uint64_t v117 = (uint64_t)oslog;
                                _os_log_impl((void *)&_mh_execute_header, oslog, v399, "Return search result for beacon (own beacon): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", v312, 0x34u);
                                swift_arrayDestroy();
                                swift_slowDealloc();
                                sub_1008F9FA0();

                                (*v446)(v315, v316);
                                sub_10001DAB4(v498, &qword_10163F728);
                              }
                              else
                              {
                                uint64_t v104 = v519;
                                uint64_t v317 = *(void *)(v519 + 1352);
                                uint64_t v398 = *(void *)(v519 + 1392);
                                uint64_t v400 = *(void *)(v519 + 1320);

                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                swift_release();
                                (*v446)(v398, v317);
                                sub_10001DAB4(v400, &qword_10163F728);
                                unint64_t v108 = (unint64_t)v444;
                                uint64_t v128 = v458;
                                unint64_t v103 = v512;
                                uint64_t v131 = v517;
                              }
                            }
                            sub_10025C56C(*(void *)(v104 + 1040), type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo);
                            uint64_t v186 = v470 + 1;
                            if (v489 == v422) {
                              goto LABEL_116;
                            }
                          }
                        }
                        swift_bridgeObjectRetain();
                        unint64_t v108 = (unint64_t)v444;
                        uint64_t v128 = v458;
LABEL_116:
                        uint64_t v318 = *(void *)(v104 + 1120);
                        sub_10001CFB8(v131, v103);
                        swift_bridgeObjectRelease_n();
                        sub_10025C56C(v318, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                        goto LABEL_93;
                      }
                      sub_1000361E0(v517, v512);
                      sub_1000361E0(v517, v512);
                      switch(v108 >> 62)
                      {
                        case 1uLL:
                          if (v117 >> 32 < (int)v117) {
                            goto LABEL_188;
                          }
                          sub_1000361E0(v517, v512);
                          sub_1000361E0(v517, v512);
                          sub_1000361E0(v517, v512);
                          sub_1000361E0(v117, v108);
                          sub_1000361E0(v517, v512);
                          char v170 = sub_100BFBE64((int)v117, v117 >> 32, v108 & 0x3FFFFFFFFFFFFFFFLL, v517, v512);
                          sub_10001CFB8(v517, v512);
                          uint64_t v104 = v519;
                          sub_10001CFB8(v117, v108);
                          break;
                        case 2uLL:
                          uint64_t v171 = *(void *)(v117 + 16);
                          uint64_t v172 = *(void *)(v117 + 24);
                          sub_1000361E0(v517, v512);
                          sub_1000361E0(v517, v512);
                          sub_1000361E0(v517, v512);
                          sub_1000361E0(v517, v512);
                          swift_retain();
                          swift_retain();
                          char v170 = sub_100BFBE64(v171, v172, v108 & 0x3FFFFFFFFFFFFFFFLL, v517, v512);
                          sub_10001CFB8(v517, v512);
                          uint64_t v104 = v519;
                          swift_release();
                          swift_release();
                          uint64_t v131 = v517;
                          break;
                        case 3uLL:
                          sub_1000361E0(v517, v512);
                          sub_1000361E0(v517, v512);
                          sub_1000361E0(v517, v512);
                          sub_1000361E0(v517, v512);
                          unint64_t v168 = v424 & 0xFF00000000000000;
                          uint64_t v169 = 0;
                          v424 &= 0xFF00000000000000;
                          goto LABEL_83;
                        default:
                          sub_1000361E0(v517, v512);
                          sub_1000361E0(v517, v512);
                          sub_1000361E0(v517, v512);
                          sub_1000361E0(v517, v512);
                          unint64_t v168 = v423 & 0xFF00000000000000 | v108 & 0xFFFFFFFFFFFFFFLL;
                          uint64_t v169 = v117;
                          unint64_t v423 = v168;
LABEL_83:
                          char v170 = sub_100BFBD8C(v169, v168, v517, v512);
                          sub_10001CFB8(v517, v512);
                          uint64_t v104 = v519;
                          break;
                      }
                      sub_10001CFB8(v117, v108);
                      sub_10001CFB8(v131, v512);
                      sub_10001CFB8(v117, v108);
                      sub_10001CFB8(v131, v512);
                      sub_10001CFB8(v131, v512);
                      sub_10001CFB8(v131, v512);
                      sub_10001CFB8(v131, v512);
                      if (v170) {
                        goto LABEL_97;
                      }
                    }
                    else
                    {
LABEL_30:
                      sub_10001CFB8(v117, v108);
                      sub_10001CFB8(v117, v108);
                      uint64_t v104 = v519;
                    }
                    sub_10025C56C(*(void *)(v104 + 1104), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
                    v135 += v469;
                    if (--v137) {
                      continue;
                    }
                    swift_bridgeObjectRelease();
                    unint64_t v108 = (unint64_t)v444;
                    break;
                }
LABEL_87:
                if (qword_101636908 != -1) {
                  swift_once();
                }
                uint64_t v173 = *(void *)(v104 + 1376);
                uint64_t v174 = *(void *)(v104 + 1352);
                uint64_t v175 = sub_100010324(v174, (uint64_t)qword_10170D9D8);
                (*(void (**)(uint64_t, uint64_t, uint64_t))bufa)(v173, v175, v174);
                sub_1000361E0(v131, v103);
                swift_bridgeObjectRetain();
                sub_1000361E0(v131, v103);
                swift_bridgeObjectRetain();
                uint64_t v117 = Logger.logObject.getter();
                os_log_type_t v176 = static os_log_type_t.error.getter();
                BOOL v177 = os_log_type_enabled((os_log_t)v117, v176);
                uint64_t v178 = *(void *)(v104 + 1376);
                uint64_t v179 = *(void *)(v104 + 1352);
                if (v177)
                {
                  unint64_t v180 = v103;
                  unint64_t v103 = swift_slowAlloc();
                  uint64_t v523 = (uint64_t (*)())swift_slowAlloc();
                  *(_DWORD *)unint64_t v103 = 141558275;
                  *(void *)(v103 + 4) = 1752392040;
                  *(_WORD *)(v103 + 12) = 2081;
                  *(void *)(v104 + 728) = v131;
                  *(void *)(v104 + 736) = v180;
                  sub_1001D780C();
                  uint64_t v181 = RawRepresentable<>.hexString.getter();
                  *(void *)(v103 + 14) = sub_1008FA0F0(v181, v182, (uint64_t *)&v523);
                  swift_bridgeObjectRelease();
                  sub_10001CFB8(v131, v180);
                  swift_bridgeObjectRelease();
                  sub_10001CFB8(v131, v180);
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v117, v176, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v103, 0x16u);
                  swift_arrayDestroy();
                  unint64_t v108 = (unint64_t)v444;
                  swift_slowDealloc();
                  swift_slowDealloc();

                  sub_10001CFB8(v131, v180);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  sub_10001CFB8(v131, v103);
                  swift_bridgeObjectRelease();
                  sub_10001CFB8(v131, v103);
                  swift_bridgeObjectRelease();
                  sub_10001CFB8(v131, v103);
                  swift_bridgeObjectRelease();
                }
                (*v446)(v178, v179);
                uint64_t v128 = v458;
LABEL_93:
                unint64_t v129 = (unint64_t)v462 + 1;
                if ((objc_class *)((char *)v462 + 1) == v460) {
                  goto LABEL_130;
                }
                goto LABEL_23;
              }
              if (!v156)
              {
                uint64_t v376 = BYTE6(v107);
                goto LABEL_167;
              }
              if (v156 == 1)
              {
                if (!__OFSUB__(HIDWORD(v154), v154))
                {
                  uint64_t v376 = HIDWORD(v154) - (int)v154;
LABEL_167:
                  sub_10013019C();
                  uint64_t v385 = swift_allocError();
                  *(void *)uint64_t v386 = 28;
                  *(void *)(v386 + 8) = v376;
                  *(unsigned char *)(v386 + 16) = 0;
                  swift_willThrow();
                  goto LABEL_168;
                }
                __break(1u);
              }
              else
              {
                uint64_t v384 = *(void *)(v154 + 16);
                uint64_t v383 = *(void *)(v154 + 24);
                uint64_t v376 = v383 - v384;
                if (!__OFSUB__(v383, v384)) {
                  goto LABEL_167;
                }
              }
              __break(1u);
              break;
            case 2uLL:
              uint64_t v159 = *(void *)(v154 + 16);
              uint64_t v158 = *(void *)(v154 + 24);
              BOOL v152 = __OFSUB__(v158, v159);
              uint64_t v157 = v158 - v159;
              if (!v152) {
                goto LABEL_64;
              }
              goto LABEL_180;
            case 3uLL:
              uint64_t v376 = 0;
              goto LABEL_167;
            default:
              uint64_t v157 = BYTE6(v107);
              goto LABEL_64;
          }
          goto LABEL_191;
        }
LABEL_156:
        uint64_t v363 = v117;
        unint64_t v364 = v108;
LABEL_155:
        sub_10001CFB8(v363, v364);
        return _assertionFailure(_:_:file:line:flags:)();
      case 2uLL:
        uint64_t v151 = *(void *)(v117 + 16);
        uint64_t v150 = *(void *)(v117 + 24);
        BOOL v152 = __OFSUB__(v150, v151);
        uint64_t v149 = v150 - v151;
        if (!v152) {
          goto LABEL_58;
        }
        goto LABEL_177;
      case 3uLL:
        goto LABEL_156;
      default:
        uint64_t v149 = BYTE6(v108);
        goto LABEL_58;
    }
  }
}

uint64_t sub_100257574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  uint64_t v5 = type metadata accessor for EncryptedData();
  v4[18] = v5;
  v4[19] = *(void *)(v5 - 8);
  v4[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MemberSharingCircle();
  v4[21] = v6;
  v4[22] = *(void *)(v6 - 8);
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  v4[26] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v4[27] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v4[28] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[29] = v8;
  v4[30] = *(void *)(v8 + 64);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  return _swift_task_switch(sub_100257760, v3, 0);
}

uint64_t sub_100257760()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[27];
  sub_10001D074(v0[16], v3, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v0[27], &qword_101638CF0);
    v0[38] = 0;
    v0[39] = 0xF000000000000000;
    v0[37] = 0;
    uint64_t v4 = *(void *)(v0[17] + 136);
    v0[40] = v4;
    return _swift_task_switch(sub_100257A94, v4, 0);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[29] + 32))(v0[32], v0[27], v0[28]);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[33] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1002578C4;
    uint64_t v6 = v0[32];
    uint64_t v8 = v0[14];
    uint64_t v7 = v0[15];
    return sub_100C4F614(v8, v7, v6);
  }
}

uint64_t sub_1002578C4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)*v3;
  v6[34] = v2;
  swift_task_dealloc();
  uint64_t v7 = v6[17];
  if (v2)
  {
    uint64_t v8 = sub_100258F48;
  }
  else
  {
    v6[35] = a2;
    v6[36] = a1;
    uint64_t v8 = sub_100257A04;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_100257A04()
{
  (*(void (**)(void, void))(v0[29] + 8))(v0[32], v0[28]);
  uint64_t v1 = v0[35];
  uint64_t v2 = v0[34];
  v0[38] = v0[36];
  v0[39] = v1;
  v0[37] = v2;
  uint64_t v3 = *(void *)(v0[17] + 136);
  v0[40] = v3;
  return _swift_task_switch(sub_100257A94, v3, 0);
}

uint64_t sub_100257A94()
{
  *(void *)(v0 + 328) = *(void *)(*(void *)(v0 + 320) + 136);
  swift_retain();
  return _swift_task_switch(sub_100257B08, 0, 0);
}

uint64_t sub_100257B08()
{
  uint64_t v2 = v0[40];
  uint64_t v1 = v0[41];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[42] = v3;
  v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[43] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  *uint64_t v4 = v0;
  v4[1] = sub_100257C20;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 10, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000730E0, v3, v5);
}

uint64_t sub_100257C20()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 136);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 352) = *(void *)(v1 + 80);
  return _swift_task_switch(sub_100257D90, v2, 0);
}

uint64_t sub_100257D90()
{
  unint64_t v1 = *(void *)(v0 + 312);
  unint64_t v2 = *(void *)(v0 + 352);
  if (v1 >> 60 == 15)
  {
    *(void *)(v0 + 360) = *(void *)(v0 + 296);
    if (*(void *)(v2 + 16))
    {
      *(void *)(v0 + 368) = 1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v2 = sub_100BBD2B4(v2);
      }
      *(void *)(v0 + 376) = v2;
      uint64_t v3 = *(void *)(v2 + 16);
      if (v3)
      {
        uint64_t v5 = *(void *)(v0 + 200);
        uint64_t v4 = *(void *)(v0 + 208);
        uint64_t v7 = *(void *)(v0 + 184);
        uint64_t v6 = *(void *)(v0 + 192);
        uint64_t v8 = *(void *)(v0 + 168);
        uint64_t v9 = *(void *)(v0 + 136);
        uint64_t v10 = v3 - 1;
        sub_10025C5CC(v2+ ((*(unsigned __int8 *)(*(void *)(v0 + 176) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 + 176) + 80))+ *(void *)(*(void *)(v0 + 176) + 72) * (v3 - 1), v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        *(void *)(v2 + 16) = v10;
        sub_10025C5CC(v7, v6, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        sub_10025C5CC(v6, v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        sub_10025C5CC(v5, v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        *(void *)(v0 + 384) = *(void *)(v9 + 128);
        *(_DWORD *)(v0 + 480) = *(_DWORD *)(v8 + 28);
        return _swift_task_switch(sub_100258234, 0, 0);
      }
      __break(1u);
    }
    else if (qword_101636908 == -1)
    {
LABEL_18:
      uint64_t v21 = type metadata accessor for Logger();
      sub_100010324(v21, (uint64_t)qword_10170D9D8);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 134217984;
        *(void *)(v0 + 104) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Did not find Circle Shared Secret to decrypt Private Key after %ld attempts.", v24, 0xCu);
        swift_slowDealloc();
      }

      swift_bridgeObjectRelease();
      uint64_t v17 = 0;
      unint64_t v19 = 0xF000000000000000;
      goto LABEL_22;
    }
    swift_once();
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)(v0 + 296);
  uint64_t v12 = *(void *)(v0 + 304);
  sub_100037A38(v12, *(void *)(v0 + 312));
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170D9D8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 134217984;
    *(void *)(v0 + 96) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Found decryption key after %ld attempts.", v16, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v17 = sub_10043A040(v12, v1);
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  if (!v11)
  {
    sub_100037A24(v12, v1);
LABEL_22:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
    return v25(v17, v19);
  }
  sub_100037A24(v12, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t sub_100258234()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 384) + 120);
  *(void *)(v0 + 392) = v1;
  return _swift_task_switch(sub_100258258, v1, 0);
}

uint64_t sub_100258258()
{
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v5 = *(void *)(v0 + 208) + *(int *)(v0 + 480);
  *(void *)(v0 + 400) = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 408) = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_100258354, 0, 0);
}

uint64_t sub_100258354()
{
  uint64_t v2 = v0[50];
  uint64_t v1 = v0[51];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[52] = v3;
  v3[2] = v2;
  v3[3] = sub_10025C3B8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[53] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163F748);
  *uint64_t v4 = v0;
  v4[1] = sub_10025846C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 11, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10025C3D0, v3, v5);
}

uint64_t sub_10025846C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 432) = *(void *)(v1 + 88);
  return _swift_task_switch(sub_1002585C8, 0, 0);
}

uint64_t sub_1002585C8()
{
  if (qword_101637020 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EB40);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[54];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v6 + 4) = *(void *)(v5 + 16);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Got %ld keys in the sharing circle secrets keychain.", (uint8_t *)v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v7 = v0[45];
  sub_100CB9100(v0[54], v0 + 2);
  v0[55] = v7;
  if (v7)
  {
    v0[59] = v7;
    uint64_t v8 = v0[17];
    uint64_t v9 = sub_100258C44;
  }
  else
  {
    uint64_t v8 = v0[48];
    uint64_t v9 = sub_100258758;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_100258758()
{
  uint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  if (v1 >> 60 == 15)
  {
    sub_100130078();
    uint64_t v3 = swift_allocError();
    *BOOL v4 = 9;
    swift_willThrow();
  }
  else
  {
    uint64_t v15 = v0[55];
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    sub_1000361E0(v2, v1);
    sub_1000361E0(v2, v1);
    PropertyListDecoder.init()();
    sub_10025C710(&qword_10163F750, (void (*)(uint64_t))&type metadata accessor for EncryptedData);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    uint64_t v3 = v15;
    if (!v15)
    {
      uint64_t v5 = EncryptedData.decrypt(key:)();
      uint64_t v7 = v6;
      v0[56] = 0;
      uint64_t v9 = v0[19];
      uint64_t v8 = v0[20];
      uint64_t v10 = v0[18];
      uint64_t v11 = v0[17];
      v0[57] = v7;
      v0[58] = v5;
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      swift_release();
      sub_100037A24(v2, v1);
      sub_100037A24(v2, v1);
      sub_1001300CC(v0 + 2);
      uint64_t v12 = sub_100258990;
      uint64_t v13 = v11;
      goto LABEL_7;
    }
    swift_release();
    sub_100037A24(v2, v1);
    sub_100037A24(v2, v1);
  }
  sub_1001300CC(v0 + 2);
  v0[59] = v3;
  uint64_t v13 = v0[17];
  uint64_t v12 = sub_100258C44;
LABEL_7:
  return _swift_task_switch(v12, v13, 0);
}

uint64_t sub_100258990()
{
  unint64_t v1 = v0[57];
  uint64_t v2 = v0[58];
  sub_10025C56C(v0[26], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_1000361E0(v2, v1);
  unint64_t v3 = v0[57];
  uint64_t v4 = v0[58];
  uint64_t v5 = v0[56];
  uint64_t v6 = v0[46];
  sub_100037A38(v0[38], v0[39]);
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170D9D8);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134217984;
    v0[12] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Found decryption key after %ld attempts.", v10, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v11 = sub_10043A040(v4, v3);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if (v5)
  {
    sub_100037A24(v4, v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  else
  {
    sub_100037A24(v4, v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v16(v11, v13);
  }
}

uint64_t sub_100258C44()
{
  sub_10025C56C(*(void *)(v0 + 208), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  swift_errorRelease();
  uint64_t v2 = *(void *)(v0 + 368);
  unint64_t v1 = *(void *)(v0 + 376);
  *(void *)(v0 + 360) = 0;
  if (*(void *)(v1 + 16))
  {
    *(void *)(v0 + 368) = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
    }
    else if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_4:
      *(void *)(v0 + 376) = v1;
      uint64_t v3 = *(void *)(v1 + 16);
      if (v3)
      {
        uint64_t v5 = *(void *)(v0 + 200);
        uint64_t v4 = *(void *)(v0 + 208);
        uint64_t v7 = *(void *)(v0 + 184);
        uint64_t v6 = *(void *)(v0 + 192);
        uint64_t v8 = *(void *)(v0 + 168);
        uint64_t v9 = *(void *)(v0 + 136);
        uint64_t v10 = v3 - 1;
        sub_10025C5CC(v1+ ((*(unsigned __int8 *)(*(void *)(v0 + 176) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 + 176) + 80))+ *(void *)(*(void *)(v0 + 176) + 72) * (v3 - 1), v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        *(void *)(v1 + 16) = v10;
        sub_10025C5CC(v7, v6, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        sub_10025C5CC(v6, v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        sub_10025C5CC(v5, v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        *(void *)(v0 + 384) = *(void *)(v9 + 128);
        *(_DWORD *)(v0 + 480) = *(_DWORD *)(v8 + 28);
        return _swift_task_switch(sub_100258234, 0, 0);
      }
      __break(1u);
      goto LABEL_17;
    }
    unint64_t v1 = sub_100BBD2B4(v1);
    goto LABEL_4;
  }
  if (qword_101636908 != -1) {
LABEL_17:
  }
    swift_once();
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170D9D8);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134217984;
    *(void *)(v0 + 104) = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Did not find Circle Shared Secret to decrypt Private Key after %ld attempts.", v14, 0xCu);
    swift_slowDealloc();
  }

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void, unint64_t))(v0 + 8);
  return v15(0, 0xF000000000000000);
}

uint64_t sub_100258F48()
{
  (*(void (**)(void, void))(v0[29] + 8))(v0[32], v0[28]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100259024(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for KeyDropFetchResponse.LocationPayload(0);
  sub_10001D074(a1 + *(int *)(v5 + 28), (uint64_t)v4, &qword_101638CF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_101638CF0);
    return 7104878;
  }
  else
  {
    uint64_t v8 = UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  return v8;
}

uint64_t sub_10025916C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v9 + 184) = a8;
  *(void *)(v9 + 192) = v8;
  *(unsigned char *)(v9 + 408) = a7;
  *(void *)(v9 + 168) = a5;
  *(void *)(v9 + 176) = a6;
  *(void *)(v9 + 152) = a3;
  *(void *)(v9 + 160) = a4;
  *(void *)(v9 + 136) = a1;
  *(void *)(v9 + 144) = a2;
  sub_10000588C((uint64_t *)&unk_10163AC90);
  *(void *)(v9 + 200) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Date();
  *(void *)(v9 + 208) = v10;
  *(void *)(v9 + 216) = *(void *)(v10 - 8);
  *(void *)(v9 + 224) = swift_task_alloc();
  type metadata accessor for RawSearchResult();
  *(void *)(v9 + 232) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  *(void *)(v9 + 240) = v11;
  *(void *)(v9 + 248) = *(void *)(v11 - 8);
  *(void *)(v9 + 256) = swift_task_alloc();
  *(void *)(v9 + 264) = swift_task_alloc();
  *(void *)(v9 + 272) = swift_task_alloc();
  sub_10000588C(&qword_101657910);
  *(void *)(v9 + 280) = swift_task_alloc();
  *(void *)(v9 + 288) = swift_task_alloc();
  *(void *)(v9 + 296) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for UUID();
  *(void *)(v9 + 304) = v12;
  *(void *)(v9 + 312) = *(void *)(v12 - 8);
  *(void *)(v9 + 320) = swift_task_alloc();
  *(void *)(v9 + 328) = swift_task_alloc();
  *(void *)(v9 + 336) = type metadata accessor for BeaconPayloadv1();
  *(void *)(v9 + 344) = swift_task_alloc();
  return _swift_task_switch(sub_1002593F8, v8, 0);
}

uint64_t sub_1002593F8()
{
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 168);
  unint64_t v2 = *(void *)(v0 + 176);
  unint64_t v5 = *(void *)(v0 + 152);
  uint64_t v4 = *(void **)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(*(void *)(v0 + 192) + 136);
  *(void *)(v0 + 352) = v7;
  id v8 = v4;
  sub_1000361E0(v6, v5);
  sub_1000361E0(v3, v2);
  BeaconPayloadv1.init(using:data:advertisement:)(v8, v6, v5, v3, v2, v1);
  if (*(unsigned char *)(v0 + 408) == 1)
  {
    uint64_t v9 = *(void *)(v0 + 296);
    uint64_t v10 = *(void *)(v0 + 240);
    uint64_t v11 = *(void *)(v0 + 248);
    (*(void (**)(void, void, void))(*(void *)(v0 + 312) + 16))(*(void *)(v0 + 328), *(void *)(v0 + 184), *(void *)(v0 + 304));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    os_log_type_t v13 = *(int **)(v0 + 336);
    uint64_t v12 = *(void *)(v0 + 344);
    uint64_t v14 = *(void *)(v0 + 296);
    uint64_t v15 = *(void *)(v0 + 280);
    uint64_t v16 = *(void *)(v0 + 224);
    uint64_t v30 = *(unsigned char **)(v0 + 232);
    uint64_t v31 = *(void *)(v0 + 312);
    uint64_t v17 = *(void *)(v0 + 208);
    uint64_t v18 = *(void *)(v0 + 216);
    uint64_t v19 = *(void *)(v0 + 200);
    int v20 = *(unsigned __int8 *)(v12 + v13[10]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v12 + v13[5], v17);
    double v21 = *(double *)(v12 + v13[7]);
    double v22 = *(double *)(v12 + v13[8]);
    double v23 = *(double *)(v12 + v13[9]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v19, 1, 1, v17);
    sub_10001D074(v14, v15, &qword_101657910);
    sub_100CC2A6C(v20, v16, 15, v19, v15, 256, v30, v21, v22, v23);
    sub_10001DAB4(v14, &qword_101657910);
    sub_10025C56C(v12, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
    uint64_t v24 = sub_10000588C(&qword_10163F728);
    uint64_t v25 = *(void *)(v0 + 232);
    uint64_t v26 = *(void *)(v0 + 136);
    uint64_t v27 = v26 + *(int *)(v24 + 48);
    (*(void (**)(uint64_t, void, void))(v31 + 32))(v26, *(void *)(v0 + 328), *(void *)(v0 + 304));
    sub_10025C5CC(v25, v27, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v26, 0, 1, v24);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
    return v28();
  }
  else
  {
    return _swift_task_switch(sub_100259828, v7, 0);
  }
}

uint64_t sub_100259828()
{
  *(void *)(v0 + 360) = *(void *)(*(void *)(v0 + 352) + 136);
  swift_retain();
  return _swift_task_switch(sub_10025989C, 0, 0);
}

uint64_t sub_10025989C()
{
  uint64_t v2 = v0[44];
  uint64_t v1 = v0[45];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[46] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[47] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_1002599B0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 15, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DAA8, v3, v5);
}

uint64_t sub_1002599B0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 192);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 384) = *(void *)(v1 + 120);
  return _swift_task_switch(sub_100259B20, v2, 0);
}

uint64_t sub_100259B20()
{
  uint64_t v1 = v0[48];
  uint64_t v3 = v0[21];
  unint64_t v2 = v0[22];
  uint64_t v4 = (void *)swift_allocObject();
  v0[49] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  sub_1000361E0(v3, v2);
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[50] = v5;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101665470);
  *uint64_t v5 = v0;
  v5[1] = sub_100259C38;
  return unsafeBlocking<A>(_:)(v0 + 7, sub_10025C420, v4, v6);
}

uint64_t sub_100259C38()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 192);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100259D64, v1, 0);
}

uint64_t sub_100259D64()
{
  uint64_t v113 = v0;
  uint64_t v1 = v0[7];
  unint64_t v2 = *(void *)(v1 + 16);
  if (v2 >= 2)
  {
    if (qword_101636908 != -1) {
      swift_once();
    }
    uint64_t v3 = v0[21];
    unint64_t v4 = v0[22];
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170D9D8);
    sub_1000361E0(v3, v4);
    sub_1000361E0(v3, v4);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v10 = v0[21];
    unint64_t v9 = v0[22];
    if (v8)
    {
      uint64_t v11 = swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 141558275;
      v0[14] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2081;
      v0[2] = v10;
      v0[3] = v9;
      sub_10025C42C();
      uint64_t v12 = RawRepresentable<>.hexString.getter();
      v0[16] = sub_1008FA0F0(v12, v13, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v10, v9);
      sub_10001CFB8(v10, v9);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Multiple beacons reconciled for advertisement %{private,mask.hash}s.", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v0[21], v0[22]);
      sub_10001CFB8(v10, v9);
    }

    unint64_t v2 = *(void *)(v1 + 16);
  }
  uint64_t v14 = v0[36];
  uint64_t v15 = v0[30];
  uint64_t v16 = v0[31];
  if (v2)
  {
    sub_10025C504(v1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), v0[36], type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v17(v14, 0, 1, v15);
  }
  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v17(v0[36], 1, 1, v15);
  }
  uint64_t v18 = v0[36];
  uint64_t v19 = v0[30];
  uint64_t v20 = v0[31];
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    uint64_t v111 = v17;
    sub_10001DAB4(v0[36], &qword_101657910);
    if (qword_101636908 != -1) {
      swift_once();
    }
    uint64_t v21 = v0[21];
    unint64_t v22 = v0[22];
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10170D9D8);
    sub_1000361E0(v21, v22);
    sub_1000361E0(v21, v22);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v28 = v0[21];
    unint64_t v27 = v0[22];
    if (v26)
    {
      uint64_t v29 = swift_slowAlloc();
      v112[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 141558275;
      v0[6] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2081;
      v0[4] = v28;
      v0[5] = v27;
      sub_10025C42C();
      uint64_t v30 = RawRepresentable<>.hexString.getter();
      v0[8] = sub_1008FA0F0(v30, v31, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v28, v27);
      sub_10001CFB8(v28, v27);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Cannot reconcile advertisement %{private,mask.hash}s.", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v0[21], v0[22]);
      sub_10001CFB8(v28, v27);
    }

    uint64_t v59 = (int *)v0[42];
    uint64_t v60 = v0[43];
    uint64_t v109 = v0[39];
    uint64_t v61 = v0[35];
    uint64_t v62 = v0[28];
    *(void *)os_log_type_t type = v0[30];
    uint64_t v106 = (unsigned char *)v0[29];
    uint64_t v64 = v0[26];
    uint64_t v63 = v0[27];
    uint64_t v65 = v0[25];
    int v66 = *(unsigned __int8 *)(v60 + v59[10]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v62, v60 + v59[5], v64);
    double v67 = *(double *)(v60 + v59[7]);
    double v68 = *(double *)(v60 + v59[8]);
    double v69 = *(double *)(v60 + v59[9]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v65, 1, 1, v64);
    v111(v61, 1, 1, *(void *)type);
    sub_100CC2A6C(v66, v62, 7, v65, v61, 256, v106, v67, v68, v69);
    swift_release();
    sub_10025C56C(v60, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
    uint64_t v70 = sub_10000588C(&qword_10163F728);
    uint64_t v71 = (void (**)(uint64_t, void, void))(v109 + 16);
    uint64_t v72 = v0 + 23;
    goto LABEL_28;
  }
  uint64_t v32 = v0[37];
  uint64_t v33 = v0[34];
  uint64_t v34 = v0[30];
  sub_10025C5CC(v0[36], v33, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_10025C504(v33, v32, type metadata accessor for BeaconKeyManager.IndexInformation);
  v17(v32, 0, 1, v34);
  if (qword_101636908 != -1) {
    swift_once();
  }
  uint64_t v36 = v0[39];
  uint64_t v35 = v0[40];
  uint64_t v37 = v0[38];
  uint64_t v39 = v0[33];
  uint64_t v38 = v0[34];
  uint64_t v40 = v0[32];
  uint64_t v41 = v0[23];
  uint64_t v42 = type metadata accessor for Logger();
  sub_100010324(v42, (uint64_t)qword_10170D9D8);
  sub_10025C504(v38, v39, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_10025C504(v38, v40, type metadata accessor for BeaconKeyManager.IndexInformation);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
  v43(v35, v41, v37);
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.info.getter();
  BOOL v46 = os_log_type_enabled(v44, v45);
  uint64_t v47 = v0[39];
  uint64_t v48 = v0[40];
  uint64_t v49 = v0[38];
  uint64_t v51 = v0[32];
  uint64_t v50 = v0[33];
  if (v46)
  {
    uint64_t v103 = v0[30];
    os_log_t log = v44;
    uint64_t v52 = swift_slowAlloc();
    v112[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v52 = 141559043;
    v0[9] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v52 + 12) = 2081;
    sub_10025C710((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[10] = sub_1008FA0F0(v53, v54, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10025C56C(v50, type metadata accessor for BeaconKeyManager.IndexInformation);
    *(_WORD *)(v52 + 22) = 2082;
    sub_10001CD44((void *)(v51 + *(int *)(v103 + 20)), *(void *)(v51 + *(int *)(v103 + 20) + 24));
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[11] = sub_1008FA0F0(v55, v56, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10025C56C(v51, type metadata accessor for BeaconKeyManager.IndexInformation);
    *(_WORD *)(v52 + 32) = 2160;
    v0[12] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v52 + 42) = 2081;
    uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[13] = sub_1008FA0F0(v57, v58, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v49);
    _os_log_impl((void *)&_mh_execute_header, log, v45, "\"Reconciled from location fetch - reconciled Beacon: %{private,mask.hash}s,\nindex: %{public}s - initial beacon: %{private,mask.hash}s.", (uint8_t *)v52, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10025C56C(v0[33], type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_10025C56C(v51, type metadata accessor for BeaconKeyManager.IndexInformation);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v49);
  }
  uint64_t v73 = (void *)(v0[34] + *(int *)(v0[30] + 20));
  uint64_t v75 = v73[3];
  uint64_t v74 = v73[4];
  sub_10001CD44(v73, v75);
  int v76 = sub_100EB7B8C(v75, v74);
  if (!v76)
  {
    int v77 = 7;
    goto LABEL_27;
  }
  if (v76 == 1)
  {
    int v77 = 13;
LABEL_27:
    int v110 = v77;
    uint64_t v78 = v0[41];
    uint64_t v79 = v0[38];
    uint64_t v80 = v0[34];
    swift_release();
    v43(v78, v80, v79);
    sub_10025C56C(v80, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v82 = (int *)v0[42];
    uint64_t v81 = v0[43];
    uint64_t v83 = v0[37];
    uint64_t v84 = v0[35];
    uint64_t v85 = v0[28];
    unint64_t v107 = (unsigned char *)v0[29];
    uint64_t v108 = v0[39];
    uint64_t v87 = v0[26];
    uint64_t v86 = v0[27];
    uint64_t v88 = v0[25];
    int v89 = *(unsigned __int8 *)(v81 + v82[10]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v85, v81 + v82[5], v87);
    double v90 = *(double *)(v81 + v82[7]);
    double v91 = *(double *)(v81 + v82[8]);
    double v92 = *(double *)(v81 + v82[9]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v88, 1, 1, v87);
    sub_10001D074(v83, v84, &qword_101657910);
    sub_100CC2A6C(v89, v85, v110, v88, v84, 256, v107, v90, v91, v92);
    sub_10001DAB4(v83, &qword_101657910);
    sub_10025C56C(v81, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
    uint64_t v93 = sub_10000588C(&qword_10163F728);
    uint64_t v72 = v0 + 41;
    uint64_t v70 = v93;
    uint64_t v71 = (void (**)(uint64_t, void, void))(v108 + 32);
LABEL_28:
    uint64_t v94 = v0[29];
    uint64_t v95 = v0[17];
    uint64_t v96 = v95 + *(int *)(v70 + 48);
    (*v71)(v95, *v72, v0[38]);
    sub_10025C5CC(v94, v96, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v95, 0, 1, v70);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v97 = (uint64_t (*)(void))v0[1];
    goto LABEL_29;
  }
  uint64_t v99 = v0[43];
  uint64_t v100 = v0[37];
  uint64_t v101 = v0[34];
  sub_10012F634();
  swift_allocError();
  unsigned char *v102 = 1;
  swift_willThrow();
  swift_release();
  sub_10001DAB4(v100, &qword_101657910);
  sub_10025C56C(v99, (uint64_t (*)(void))type metadata accessor for BeaconPayloadv1);
  sub_10025C56C(v101, type metadata accessor for BeaconKeyManager.IndexInformation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v97 = (uint64_t (*)(void))v0[1];
LABEL_29:
  return v97();
}

uint64_t sub_10025AB74@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v4 = PrivateKey.publicKey.getter(a1, a2);
  unint64_t v6 = v5;
  sub_1000361E0(v4, v5);
  uint64_t v7 = sub_100A94760(v4, v6);
  unint64_t v9 = v8;
  sub_10001CFB8(v4, v6);
  sub_100434E0C(v7, v9, v14);
  uint64_t v10 = sub_10001CFB8(v4, v6);
  uint64_t v11 = v14[0];
  unint64_t v12 = v14[1];
  __chkstk_darwin(v10);
  sub_10000588C((uint64_t *)&unk_101665470);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t result = sub_10001CFB8(v11, v12);
  *a3 = v14[0];
  return result;
}

uint64_t sub_10025AD48(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  sub_10001CD44((void *)(a1 + *(int *)(v2 + 20)), *(void *)(a1 + *(int *)(v2 + 20) + 24));
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_10025AD94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(0) + 20);
  uint64_t v4 = type metadata accessor for UUID();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, v3, v4);
}

uint64_t sub_10025AE10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_10163F728);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(int *)(v5 + 56);
  uint64_t v9 = (uint64_t)&v7[v8];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v7, a1, v11);
  sub_10025C504(v10, v9, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  uint64_t v13 = v9 + *(int *)(type metadata accessor for RawSearchResult() + 20);
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(a2, v13, v14);
  sub_10025C56C(v9, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v7, v11);
}

uint64_t sub_10025AF9C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_10163F728);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(int *)(v5 + 56);
  uint64_t v9 = (uint64_t)&v7[v8];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v7, a1, v11);
  sub_10025C504(v10, v9, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  LOBYTE(a1) = *(unsigned char *)(v9 + *(int *)(type metadata accessor for RawSearchResult() + 36));
  sub_10025C56C(v9, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  *a2 = a1;
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v7, v11);
}

uint64_t sub_10025B0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163F728);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(int *)(v5 + 56);
  uint64_t v9 = (uint64_t)&v7[v8];
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v7, a2, v11);
  sub_10025C504(v10, v9, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  swift_beginAccess();
  uint64_t v13 = *(void *)(a1 + 16);
  if (*(void *)(v13 + 16) && (unint64_t v14 = sub_1007240CC((uint64_t)v7), (v15 & 1) != 0))
  {
    uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
    swift_endAccess();
    uint64_t v17 = *(void *)(v16 + 16);
  }
  else
  {
    swift_endAccess();
    uint64_t v17 = 0;
  }
  sub_10025C56C(v9, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v11);
  return v17;
}

uint64_t sub_10025B28C@<X0>(void *a1@<X8>)
{
  sub_10000588C((uint64_t *)&unk_101665470);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  *a1 = v3;
  return result;
}

uint64_t sub_10025B304()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025B344()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B354()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B364()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025B374()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B384()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B398()
{
  uint64_t v1 = (int *)(type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10025B48C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(0) - 8);
  return sub_10025AD94(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1);
}

uint64_t sub_10025B4F8()
{
  return sub_10012AB88(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10025B508()
{
  return sub_10012B160(*(void (**)(uint64_t *__return_ptr))(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10025B518()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B528()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B538()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025B548()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B558()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B568()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B578()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B588()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10025B5C0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B5D0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B5E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B5F0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B600()
{
  uint64_t v1 = type metadata accessor for KeyDropFetchResponse.LocationPayload(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v0 + v3;
  unint64_t v6 = *(void *)(v0 + v3 + 8);
  if (v6 >> 60 != 15) {
    sub_10001CFB8(*(void *)v5, v6);
  }
  sub_10001CFB8(*(void *)(v5 + 16), *(void *)(v5 + 24));
  swift_bridgeObjectRelease();
  uint64_t v7 = v5 + *(int *)(v1 + 28);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10025B754()
{
  return sub_10025C0B8(type metadata accessor for KeyDropFetchResponse.LocationPayload, sub_100259024);
}

uint64_t sub_10025B784@<X0>(void *a1@<X8>)
{
  return sub_10025AB74(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_10025B790()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_10025B7C8()
{
  return sub_10012B0F4(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_10025B7D0()
{
  return *(void *)(*(void *)(v0 + 16) + 16);
}

uint64_t sub_10025B7DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B7EC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B7FC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025B80C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B81C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B82C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B83C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B84C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B85C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025B874@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(sub_10000588C(&qword_10163F728) - 8);
  return sub_10025AE10(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1);
}

uint64_t sub_10025B8E0()
{
  uint64_t v1 = (int *)(sub_10000588C(&qword_10163F728) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = *(void *)(*(void *)v1 + 64);
  uint64_t v17 = (v2 + 16) & ~v2;
  uint64_t v18 = v0;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = (void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  char v15 = *v4;
  (*v4)(v0 + v17, v3);
  uint64_t v5 = v0 + v17 + v1[14];
  unint64_t v6 = (int *)type metadata accessor for RawSearchResult();
  uint64_t v7 = v5 + v6[5];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v5 + v6[10];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  uint64_t v12 = v5 + v6[11];
  uint64_t v13 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    v15(v12, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12 + *(int *)(v13 + 20));
  }
  v15(v5 + v6[12], v3);

  return _swift_deallocObject(v18, v17 + v16, v2 | 7);
}

uint64_t sub_10025BB28@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void *)(sub_10000588C(&qword_10163F728) - 8);
  return sub_10025AF9C(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1);
}

uint64_t sub_10025BB94()
{
  uint64_t v1 = (int *)(sub_10000588C(&qword_10163F728) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = *(void *)(*(void *)v1 + 64);
  swift_release();
  uint64_t v17 = v0;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = (void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  char v15 = *v4;
  (*v4)(v0 + ((v2 + 24) & ~v2), v3);
  uint64_t v5 = v0 + ((v2 + 24) & ~v2) + v1[14];
  unint64_t v6 = (int *)type metadata accessor for RawSearchResult();
  uint64_t v7 = v5 + v6[5];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v5 + v6[10];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  uint64_t v12 = v5 + v6[11];
  uint64_t v13 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    v15(v12, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12 + *(int *)(v13 + 20));
  }
  v15(v5 + v6[12], v3);

  return _swift_deallocObject(v17, ((v2 + 24) & ~v2) + v16, v2 | 7);
}

uint64_t sub_10025BDE4()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_10163F728) - 8);
  return sub_10025B0F0(*(void *)(v0 + 16), v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_10025BE40()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025BE50()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025BE60()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025BE70()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025BE80()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025BE90()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025BEA0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025BEB0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025BEC0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025BED0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025BEE0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025BEF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v5 = type metadata accessor for UUID();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a1, v4, v5);
}

uint64_t sub_10025BF9C()
{
  uint64_t v1 = (int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6 + v1[7]);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10025C08C()
{
  return sub_10025C0B8(type metadata accessor for BeaconKeyManager.IndexInformation, sub_10025AD48);
}

uint64_t sub_10025C0B8(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  uint64_t v4 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4);
}

uint64_t sub_10025C134()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025C144()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025C154()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025C164()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025C174()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025C184()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025C194()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025C1A8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10025C238@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return v5(a1, v6, v3);
}

uint64_t sub_10025C2AC()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10025C2E4()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_10001CD44((void *)(v0 + 16), v1);
  return sub_1010EC7E8(v1);
}

uint64_t sub_10025C324()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025C334()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025C344()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025C354()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025C364()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025C374()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025C384()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10025C394@<X0>(void *a1@<X8>)
{
  return sub_1012E4370(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_10025C3B8()
{
  return sub_10025C908((uint64_t (*)(uint64_t, uint64_t))sub_100E5D698);
}

uint64_t sub_10025C3D0(uint64_t a1)
{
  return sub_100129DAC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10025C3E0()
{
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10025C420@<X0>(void *a1@<X8>)
{
  return sub_10025B28C(a1);
}

unint64_t sub_10025C42C()
{
  unint64_t result = qword_10166BFB0;
  if (!qword_10166BFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166BFB0);
  }
  return result;
}

uint64_t sub_10025C484()
{
  return sub_10025C908((uint64_t (*)(uint64_t, uint64_t))sub_100E5B67C);
}

uint64_t sub_10025C4B4()
{
  return sub_10025C878((uint64_t (*)(uint64_t, uint64_t))sub_100E5F4A8);
}

uint64_t sub_10025C4D0()
{
  return sub_10025C878((uint64_t (*)(uint64_t, uint64_t))sub_100E5ABA8);
}

uint64_t sub_10025C4EC()
{
  return sub_10025C878((uint64_t (*)(uint64_t, uint64_t))sub_100E5AB7C);
}

uint64_t sub_10025C504(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10025C56C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10025C5CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10025C634(uint64_t a1)
{
  return a1;
}

uint64_t sub_10025C660()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_10025C6B0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10025C6E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10025C710(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10025C764()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10025C850@<X0>(void *a1@<X8>)
{
  return sub_100224198((void *)(v1 + 24), a1);
}

uint64_t sub_10025C878(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_10025C908(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_10025CA6C@<X0>(void *a1@<X8>)
{
  return sub_10025C850(a1);
}

uint64_t sub_10025CA84@<X0>(void *a1@<X8>)
{
  return sub_10025C394(a1);
}

unint64_t sub_10025CA9C(char a1)
{
  unint64_t result = 0x4E6E6F6973736573;
  switch(a1)
  {
    case 1:
      unint64_t result = 12645;
      break;
    case 2:
    case 17:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0x314B64656573;
      break;
    case 4:
      unint64_t result = 0x7374726563;
      break;
    case 5:
      unint64_t result = 7500643;
      break;
    case 6:
      unint64_t result = 0x69634572656E776FLL;
      break;
    case 7:
      unint64_t result = 0x69684372656E776FLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    case 9:
      unint64_t result = 0x636E6F4E68747561;
      break;
    case 10:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 11:
      unint64_t result = 0x6169726553746C61;
      break;
    case 12:
      unint64_t result = 0x6F636165426D756ELL;
      break;
    case 13:
      unint64_t result = 0xD000000000000012;
      break;
    case 14:
      unint64_t result = 0x6E55646572616873;
      break;
    case 15:
      unint64_t result = 0x7461747365747461;
      break;
    case 16:
      unint64_t result = 0x726F737365636361;
      break;
    case 18:
      unint64_t result = 0x7372655663657073;
      break;
    case 19:
      unint64_t result = 0x657261776D726966;
      break;
    case 20:
      unint64_t result = 0x49746375646F7270;
      break;
    case 21:
      unint64_t result = 0x6449726F646E6576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10025CD60(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163F7D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10025F960();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v11 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v12 = v3[1];
    char v11 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_1001F1980((uint64_t)(v3 + 2), (uint64_t)v14);
    sub_1001F1980((uint64_t)v14, (uint64_t)&v12);
    char v11 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v12 = v3[3];
    char v11 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[4];
    char v11 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[5];
    char v11 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    long long v12 = v3[9];
    char v11 = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[10];
    char v11 = 10;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[11];
    char v11 = 11;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&long long v12 = *((void *)v3 + 26);
    char v11 = 13;
    sub_10000588C((uint64_t *)&unk_10164DBD0);
    sub_10025F9B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 14;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = v3[14];
    char v11 = 15;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[15];
    char v11 = 16;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_1001F1980((uint64_t)(v3 + 16), (uint64_t)v13);
    sub_1001F1980((uint64_t)v13, (uint64_t)&v12);
    char v11 = 17;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 18;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10025D320()
{
  return sub_10025CA9C(*v0);
}

uint64_t sub_10025D328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10025FCC4(a1, a2);
  *a3 = result;
  return result;
}

void sub_10025D350(unsigned char *a1@<X8>)
{
  *a1 = 22;
}

uint64_t sub_10025D35C(uint64_t a1)
{
  unint64_t v2 = sub_10025F960();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10025D398(uint64_t a1)
{
  unint64_t v2 = sub_10025F960();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10025D3D4(void *a1)
{
  memcpy(v4, v1, sizeof(v4));
  return sub_10025CD60(a1);
}

uint64_t sub_10025D428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 240);
  unint64_t v4 = *(void *)(a1 + 248);
  uint64_t v6 = *(void *)(a1 + 256);
  unint64_t v7 = *(void *)(a1 + 264);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v39 = *(void *)(a1 + 32);
  uint64_t v40 = *(void *)(a1 + 16);
  uint64_t v62 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v38 = *(void *)(a1 + 48);
  uint64_t v64 = *(void *)(a1 + 80);
  unint64_t v47 = *(void *)(a1 + 88);
  uint64_t v61 = *(void *)(a1 + 96);
  unint64_t v63 = *(void *)(a1 + 104);
  uint64_t v65 = *(void *)(a1 + 128);
  unint64_t v49 = *(void *)(a1 + 152);
  uint64_t v50 = *(void *)(a1 + 144);
  uint64_t v55 = *(void *)(a1 + 160);
  uint64_t v51 = *(void *)(a1 + 176);
  unint64_t v52 = *(void *)(a1 + 184);
  unint64_t v53 = *(void *)(a1 + 168);
  uint64_t v48 = *(void *)(a1 + 192);
  uint64_t v59 = *(void *)(a1 + 208);
  unint64_t v60 = *(void *)(a1 + 200);
  unint64_t v58 = *(void *)(a1 + 216);
  uint64_t v54 = *(void *)(a1 + 224);
  unint64_t v56 = *(void *)(a1 + 232);
  uint64_t v43 = *(void *)(a1 + 272);
  uint64_t v57 = *(void *)(a1 + 280);
  uint64_t v34 = *(void *)(a1 + 288);
  uint64_t v45 = *(void *)(a1 + 64);
  unint64_t v46 = *(void *)(a1 + 296);
  unint64_t v44 = *(void *)(a1 + 72);
  sub_1000361E0(v45, v44);
  uint64_t v37 = v5;
  sub_1000361E0(v5, v4);
  unint64_t v36 = v7;
  sub_1000361E0(v6, v7);
  unint64_t v35 = v9;
  sub_100037A38(v8, v9);
  uint64_t v41 = v11;
  swift_bridgeObjectRetain();
  uint64_t v42 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v64, v47);
  sub_1000361E0(v61, v63);
  swift_bridgeObjectRetain();
  sub_1000361E0(v50, v49);
  sub_1000361E0(v55, v53);
  sub_1000361E0(v51, v52);
  sub_1000361E0(v48, v60);
  sub_1000361E0(v59, v58);
  sub_100037A38(v54, v56);
  swift_bridgeObjectRetain();
  if (v46 >> 60 == 15)
  {
    uint64_t result = (uint64_t)sub_10025EE90((uint64_t *)a1);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v18 = v44;
    uint64_t v17 = v45;
  }
  else
  {
    uint64_t v19 = sub_1002AA5D4(v34, v46);
    unint64_t v21 = v20;
    uint64_t v15 = Data.hexString.getter();
    uint64_t v33 = v22;
    sub_10001CFB8(v19, v21);
    switch(v46 >> 62)
    {
      case 1uLL:
        LODWORD(v23) = HIDWORD(v34) - v34;
        if (__OFSUB__(HIDWORD(v34), v34)) {
          goto LABEL_11;
        }
        uint64_t v23 = (int)v23;
LABEL_7:
        if (v23 < -1)
        {
          __break(1u);
LABEL_11:
          __break(1u);
LABEL_12:
          __break(1u);
          JUMPOUT(0x10025D81CLL);
        }
LABEL_8:
        uint64_t v27 = Data.subdata(in:)();
        unint64_t v29 = v28;
        uint64_t v13 = Data.hexString.getter();
        uint64_t v14 = v30;
        sub_10025EE90((uint64_t *)a1);
        uint64_t result = sub_10001CFB8(v27, v29);
        unint64_t v18 = v44;
        uint64_t v17 = v45;
        uint64_t v16 = v33;
        break;
      case 2uLL:
        uint64_t v25 = *(void *)(v34 + 16);
        uint64_t v24 = *(void *)(v34 + 24);
        BOOL v26 = __OFSUB__(v24, v25);
        uint64_t v23 = v24 - v25;
        if (!v26) {
          goto LABEL_7;
        }
        goto LABEL_12;
      default:
        goto LABEL_8;
    }
  }
  *(void *)a2 = v37;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v36;
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v35;
  *(void *)(a2 + 48) = v50;
  *(void *)(a2 + 56) = v49;
  char v66 = *(unsigned char *)(a1 + 120);
  *(void *)(a2 + 64) = v55;
  uint64_t v31 = *(void *)(a1 + 112);
  uint64_t v32 = *(void *)(a1 + 136);
  *(void *)(a2 + 72) = v53;
  *(void *)(a2 + 80) = v51;
  *(void *)(a2 + 88) = v52;
  *(void *)(a2 + 96) = v40;
  *(void *)(a2 + 104) = v42;
  *(void *)(a2 + 112) = v39;
  *(void *)(a2 + 120) = v62;
  *(void *)(a2 + 128) = v38;
  *(void *)(a2 + 136) = v41;
  *(void *)(a2 + 144) = v17;
  *(void *)(a2 + 152) = v18;
  *(void *)(a2 + 160) = v64;
  *(void *)(a2 + 168) = v47;
  *(void *)(a2 + 176) = v61;
  *(void *)(a2 + 184) = v63;
  *(void *)(a2 + 192) = v31;
  *(unsigned char *)(a2 + 200) = v66;
  *(void *)(a2 + 208) = v65;
  *(void *)(a2 + 216) = v32;
  *(void *)(a2 + 224) = v48;
  *(void *)(a2 + 232) = v60;
  *(void *)(a2 + 240) = v59;
  *(void *)(a2 + 248) = v58;
  *(void *)(a2 + 256) = v54;
  *(void *)(a2 + 264) = v56;
  *(void *)(a2 + 272) = 0x302E302E32;
  *(void *)(a2 + 280) = 0xE500000000000000;
  *(void *)(a2 + 288) = v43;
  *(void *)(a2 + 296) = v57;
  *(void *)(a2 + 304) = v15;
  *(void *)(a2 + 312) = v16;
  *(void *)(a2 + 320) = v13;
  *(void *)(a2 + 328) = v14;
  return result;
}

uint64_t sub_10025D82C(uint64_t a1, uint64_t a2)
{
  v2[135] = a2;
  v2[134] = a1;
  uint64_t v3 = type metadata accessor for HashAlgorithm();
  v2[136] = v3;
  v2[137] = *(void *)(v3 - 8);
  v2[138] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Locale();
  v2[139] = v4;
  v2[140] = *(void *)(v4 - 8);
  v2[141] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v2[142] = v5;
  v2[143] = *(void *)(v5 - 8);
  v2[144] = swift_task_alloc();
  return _swift_task_switch(sub_10025D9A8, 0, 0);
}

void sub_10025D9A8()
{
  unint64_t v1 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v3 = [self currentDevice];
  if (!v3)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = v3;
  id v5 = [v3 serverFriendlyDescription];

  if (!v5)
  {
LABEL_12:
    __break(1u);
    return;
  }
  unint64_t v47 = v0 + 2;
  uint64_t v6 = v0[144];
  uint64_t v7 = v0[143];
  uint64_t v8 = v0[142];
  uint64_t v9 = v0[141];
  uint64_t v48 = v0[140];
  uint64_t v49 = v0[139];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  char v13 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v10, v12, 0xD000000000000011, 0x80000001013F64E0, v13);
  unint64_t v14 = v1;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v15 = Date.epoch.getter();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v0[131] = v15;
  uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v18 = v17;
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v16, v18, 0xD000000000000015, 0x80000001013F6500, v19);
  swift_bridgeObjectRelease();
  v0[130] = 1;
  uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v22 = v21;
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v20, v22, 0xD000000000000013, 0x80000001013F6520, v23);
  unint64_t v24 = v14;
  uint64_t v25 = swift_bridgeObjectRelease();
  uint64_t v26 = sub_100BCABFC(v25);
  uint64_t v28 = v27;
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v26, v28, 0x6567412D72657355, 0xEA0000000000746ELL, v29);
  swift_bridgeObjectRelease();
  static Locale.current.getter();
  uint64_t v30 = Locale.acceptLanguageCode.getter();
  uint64_t v32 = v31;
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v9, v49);
  char v33 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v30, v32, 0x4C2D747065636341, 0xEF65676175676E61, v33);
  unint64_t v34 = v24;
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  unint64_t v35 = (void *)qword_10170EE68;
  id v36 = [self sharedInstance];
  unsigned int v37 = [v36 isInternalBuild];

  if (v37)
  {
    NSString v38 = String._bridgeToObjectiveC()();
    unsigned int v39 = [v35 BOOLForKey:v38];

    if (v39)
    {
      char v40 = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x80000001013F6560, v40);
      swift_bridgeObjectRelease();
    }
  }
  v0[145] = v34;
  uint64_t v41 = (uint64_t *)v0[134];
  sub_10025E980(v41);
  sub_10025D428((uint64_t)v41, (uint64_t)v47);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  memcpy(v0 + 86, v47, 0x150uLL);
  sub_10025EB08();
  uint64_t v42 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v0[146] = v42;
  v0[147] = v43;
  uint64_t v44 = v42;
  unint64_t v45 = v43;
  swift_release();
  sub_1000361E0(v44, v45);
  uint64_t v50 = (void (__cdecl *)())((char *)&dword_10165AB08 + dword_10165AB08);
  unint64_t v46 = (void *)swift_task_alloc();
  v0[148] = v46;
  *unint64_t v46 = v0;
  v46[1] = sub_10025E168;
  v50();
}

uint64_t sub_10025E168(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1192) = a1;
  *(void *)(v3 + 1200) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_10025E26C, 0, 0);
}

uint64_t sub_10025E26C()
{
  unint64_t v1 = v0[150];
  uint64_t v2 = v0[149];
  unint64_t v3 = v0[147];
  uint64_t v4 = v0[146];
  uint64_t v5 = v0[138];
  uint64_t v6 = v0[137];
  uint64_t v7 = v0[136];
  v0[128] = v2;
  v0[129] = v1;
  sub_1000361E0(v4, v3);
  sub_1000361E0(v2, v1);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  v0[151] = v0[128];
  v0[152] = v0[129];
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v8 = Data.hash(algorithm:)();
  uint64_t v10 = v9;
  v0[153] = v8;
  v0[154] = v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  unint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165AB00 + dword_10165AB00);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[155] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10025E408;
  uint64_t v12 = v0[135];
  return v14(v8, v10, v12);
}

uint64_t sub_10025E408(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 1248) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10025E6B4;
  }
  else
  {
    unint64_t v6 = v4[154];
    uint64_t v7 = v4[153];
    v4[157] = a1;
    sub_10001CFB8(v7, v6);
    uint64_t v5 = sub_10025E538;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10025E538()
{
  uint64_t v16 = v0;
  uint64_t v1 = v0[157];
  uint64_t v2 = v0[156];
  uint64_t v3 = v0[145];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = v3;
  sub_1001EE9C8(v1, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, &v15);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v6 = v0[152];
    uint64_t v7 = v0[151];
    unint64_t v8 = v0[147];
    uint64_t v9 = v0[146];
    uint64_t v10 = (uint64_t *)v0[134];
    uint64_t v11 = v15;
    swift_bridgeObjectRelease();
    swift_release();
    sub_10025EE90(v10);
    sub_10025ECFC(v0 + 2);
    sub_10001CFB8(v9, v8);
    sub_10001CFB8(v7, v6);
    uint64_t v12 = v0[147];
    uint64_t v13 = v0[146];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
    return v14(v11, v13, v12);
  }
}

uint64_t sub_10025E6B4()
{
  unint64_t v1 = v0[152];
  uint64_t v2 = v0[151];
  sub_10001CFB8(v0[153], v0[154]);
  sub_10001CFB8(v2, v1);
  if (qword_1016370D0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170ECF8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v0[147];
  uint64_t v8 = v0[146];
  uint64_t v9 = (uint64_t *)v0[134];
  if (v6)
  {
    unint64_t v20 = v0[147];
    uint64_t v19 = v0[146];
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = v9;
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138543362;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    v0[133] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, " Failed to generate BAA certs, %{public}@", v10, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    sub_10025EE90(v18);

    swift_errorRelease();
    sub_10001CFB8(v19, v20);
    sub_10025ECFC(v0 + 2);
  }
  else
  {
    sub_10025ECFC(v0 + 2);
    sub_10001CFB8(v8, v7);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_release();
    sub_10025EE90(v9);
  }
  uint64_t v13 = v0[145];
  uint64_t v14 = v0[147];
  uint64_t v15 = v0[146];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v16(v13, v15, v14);
}

uint64_t *sub_10025E980(uint64_t *a1)
{
  uint64_t v2 = a1[8];
  unint64_t v3 = a1[9];
  uint64_t v4 = a1[10];
  unint64_t v5 = a1[11];
  uint64_t v6 = a1[12];
  unint64_t v7 = a1[13];
  unint64_t v9 = a1[19];
  uint64_t v10 = a1[18];
  unint64_t v11 = a1[21];
  uint64_t v12 = a1[20];
  unint64_t v13 = a1[23];
  uint64_t v14 = a1[22];
  unint64_t v15 = a1[25];
  uint64_t v16 = a1[24];
  unint64_t v17 = a1[27];
  uint64_t v18 = a1[26];
  unint64_t v19 = a1[29];
  uint64_t v22 = a1[30];
  uint64_t v20 = a1[28];
  unint64_t v21 = a1[31];
  uint64_t v24 = a1[32];
  unint64_t v23 = a1[33];
  uint64_t v26 = a1[36];
  unint64_t v25 = a1[37];
  sub_100037A38(*a1, a1[1]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  sub_1000361E0(v6, v7);
  swift_bridgeObjectRetain();
  sub_1000361E0(v10, v9);
  sub_1000361E0(v12, v11);
  sub_1000361E0(v14, v13);
  sub_1000361E0(v16, v15);
  sub_1000361E0(v18, v17);
  sub_100037A38(v20, v19);
  sub_1000361E0(v22, v21);
  sub_1000361E0(v24, v23);
  swift_bridgeObjectRetain();
  sub_100037A38(v26, v25);
  return a1;
}

unint64_t sub_10025EB08()
{
  unint64_t result = qword_10163F7C8;
  if (!qword_10163F7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F7C8);
  }
  return result;
}

uint64_t *sub_10025EB5C(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  unint64_t v9 = a1[9];
  uint64_t v10 = a1[10];
  unint64_t v12 = a1[11];
  unint64_t v13 = a1[19];
  uint64_t v14 = a1[18];
  unint64_t v15 = a1[21];
  uint64_t v16 = a1[20];
  unint64_t v17 = a1[23];
  uint64_t v18 = a1[22];
  unint64_t v19 = a1[29];
  uint64_t v22 = a1[30];
  uint64_t v20 = a1[28];
  unint64_t v21 = a1[31];
  uint64_t v24 = a1[32];
  unint64_t v23 = a1[33];
  sub_1000361E0(*a1, a1[1]);
  sub_1000361E0(v2, v4);
  sub_100037A38(v3, v5);
  sub_1000361E0(v6, v7);
  sub_1000361E0(v8, v9);
  sub_1000361E0(v10, v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v14, v13);
  sub_1000361E0(v16, v15);
  sub_1000361E0(v18, v17);
  swift_bridgeObjectRetain();
  sub_1000361E0(v20, v19);
  sub_1000361E0(v22, v21);
  sub_100037A38(v24, v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_10025ECFC(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  unint64_t v9 = a1[9];
  uint64_t v10 = a1[10];
  unint64_t v12 = a1[11];
  unint64_t v13 = a1[19];
  uint64_t v14 = a1[18];
  unint64_t v15 = a1[21];
  uint64_t v16 = a1[20];
  unint64_t v17 = a1[23];
  uint64_t v18 = a1[22];
  unint64_t v19 = a1[29];
  uint64_t v20 = a1[28];
  unint64_t v21 = a1[31];
  uint64_t v24 = a1[32];
  uint64_t v22 = a1[30];
  unint64_t v23 = a1[33];
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(v2, v4);
  sub_100037A24(v3, v5);
  sub_10001CFB8(v6, v7);
  sub_10001CFB8(v8, v9);
  sub_10001CFB8(v10, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v14, v13);
  sub_10001CFB8(v16, v15);
  sub_10001CFB8(v18, v17);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v20, v19);
  sub_10001CFB8(v22, v21);
  sub_100037A24(v24, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_10025EE90(uint64_t *a1)
{
  uint64_t v2 = a1[8];
  unint64_t v3 = a1[9];
  uint64_t v4 = a1[10];
  unint64_t v5 = a1[11];
  uint64_t v6 = a1[12];
  unint64_t v7 = a1[13];
  unint64_t v9 = a1[19];
  uint64_t v10 = a1[18];
  unint64_t v11 = a1[21];
  uint64_t v12 = a1[20];
  unint64_t v13 = a1[23];
  uint64_t v14 = a1[22];
  unint64_t v15 = a1[25];
  uint64_t v16 = a1[24];
  unint64_t v17 = a1[27];
  uint64_t v18 = a1[26];
  unint64_t v19 = a1[29];
  uint64_t v22 = a1[30];
  uint64_t v20 = a1[28];
  unint64_t v21 = a1[31];
  uint64_t v24 = a1[32];
  unint64_t v23 = a1[33];
  uint64_t v26 = a1[36];
  unint64_t v25 = a1[37];
  sub_100037A24(*a1, a1[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v3);
  sub_10001CFB8(v4, v5);
  sub_10001CFB8(v6, v7);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v10, v9);
  sub_10001CFB8(v12, v11);
  sub_10001CFB8(v14, v13);
  sub_10001CFB8(v16, v15);
  sub_10001CFB8(v18, v17);
  sub_100037A24(v20, v19);
  sub_10001CFB8(v22, v21);
  sub_10001CFB8(v24, v23);
  swift_bridgeObjectRelease();
  sub_100037A24(v26, v25);
  return a1;
}

uint64_t destroy for PencilPairingLockCheckRequestContent(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  unint64_t v2 = a1[5];
  if (v2 >> 60 != 15) {
    sub_10001CFB8(a1[4], v2);
  }
  sub_10001CFB8(a1[6], a1[7]);
  sub_10001CFB8(a1[8], a1[9]);
  sub_10001CFB8(a1[10], a1[11]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(a1[18], a1[19]);
  sub_10001CFB8(a1[20], a1[21]);
  sub_10001CFB8(a1[22], a1[23]);
  swift_bridgeObjectRelease();
  sub_10001CFB8(a1[28], a1[29]);
  sub_10001CFB8(a1[30], a1[31]);
  unint64_t v3 = a1[33];
  if (v3 >> 60 != 15) {
    sub_10001CFB8(a1[32], v3);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PencilPairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = (uint64_t *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    sub_1000361E0(*v8, *(void *)(a2 + 40));
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v9;
  }
  uint64_t v11 = *(void *)(a2 + 48);
  unint64_t v12 = *(void *)(a2 + 56);
  sub_1000361E0(v11, v12);
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  uint64_t v13 = *(void *)(a2 + 64);
  unint64_t v14 = *(void *)(a2 + 72);
  sub_1000361E0(v13, v14);
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  uint64_t v15 = *(void *)(a2 + 80);
  unint64_t v16 = *(void *)(a2 + 88);
  sub_1000361E0(v15, v16);
  *(void *)(a1 + 80) = v15;
  *(void *)(a1 + 88) = v16;
  uint64_t v17 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v17;
  uint64_t v18 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v18;
  uint64_t v19 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v19;
  uint64_t v20 = *(void *)(a2 + 144);
  unint64_t v21 = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v20, v21);
  *(void *)(a1 + 144) = v20;
  *(void *)(a1 + 152) = v21;
  uint64_t v22 = *(void *)(a2 + 160);
  unint64_t v23 = *(void *)(a2 + 168);
  sub_1000361E0(v22, v23);
  *(void *)(a1 + 160) = v22;
  *(void *)(a1 + 168) = v23;
  uint64_t v24 = *(void *)(a2 + 176);
  unint64_t v25 = *(void *)(a2 + 184);
  sub_1000361E0(v24, v25);
  *(void *)(a1 + 176) = v24;
  *(void *)(a1 + 184) = v25;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  uint64_t v26 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v26;
  uint64_t v27 = *(void *)(a2 + 224);
  unint64_t v28 = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  sub_1000361E0(v27, v28);
  *(void *)(a1 + 224) = v27;
  *(void *)(a1 + 232) = v28;
  uint64_t v29 = *(void *)(a2 + 240);
  unint64_t v30 = *(void *)(a2 + 248);
  sub_1000361E0(v29, v30);
  *(void *)(a1 + 240) = v29;
  *(void *)(a1 + 248) = v30;
  uint64_t v31 = (uint64_t *)(a2 + 256);
  unint64_t v32 = *(void *)(a2 + 264);
  if (v32 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 256) = *(_OWORD *)v31;
  }
  else
  {
    uint64_t v33 = *v31;
    sub_1000361E0(*v31, *(void *)(a2 + 264));
    *(void *)(a1 + 256) = v33;
    *(void *)(a1 + 264) = v32;
  }
  uint64_t v34 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v34;
  uint64_t v35 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v35;
  uint64_t v36 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = v36;
  uint64_t v37 = *(void *)(a2 + 320);
  uint64_t v38 = *(void *)(a2 + 328);
  *(void *)(a1 + 320) = v37;
  *(void *)(a1 + 328) = v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PencilPairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_1000361E0(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  sub_10001CFB8(v10, v11);
  unint64_t v12 = (uint64_t *)(a2 + 32);
  unint64_t v13 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v14 = *v12;
      sub_1000361E0(*v12, *(void *)(a2 + 40));
      *(void *)(a1 + 32) = v14;
      *(void *)(a1 + 40) = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    sub_1001356D0(a1 + 32);
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v12;
    goto LABEL_8;
  }
  uint64_t v15 = *v12;
  sub_1000361E0(*v12, *(void *)(a2 + 40));
  uint64_t v16 = *(void *)(a1 + 32);
  unint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = v13;
  sub_10001CFB8(v16, v17);
LABEL_8:
  uint64_t v18 = *(void *)(a2 + 48);
  unint64_t v19 = *(void *)(a2 + 56);
  sub_1000361E0(v18, v19);
  uint64_t v20 = *(void *)(a1 + 48);
  unint64_t v21 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v19;
  sub_10001CFB8(v20, v21);
  uint64_t v22 = *(void *)(a2 + 64);
  unint64_t v23 = *(void *)(a2 + 72);
  sub_1000361E0(v22, v23);
  uint64_t v24 = *(void *)(a1 + 64);
  unint64_t v25 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v22;
  *(void *)(a1 + 72) = v23;
  sub_10001CFB8(v24, v25);
  uint64_t v26 = *(void *)(a2 + 80);
  unint64_t v27 = *(void *)(a2 + 88);
  sub_1000361E0(v26, v27);
  uint64_t v28 = *(void *)(a1 + 80);
  unint64_t v29 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = v26;
  *(void *)(a1 + 88) = v27;
  sub_10001CFB8(v28, v29);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(a2 + 144);
  unint64_t v31 = *(void *)(a2 + 152);
  sub_1000361E0(v30, v31);
  uint64_t v32 = *(void *)(a1 + 144);
  unint64_t v33 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = v30;
  *(void *)(a1 + 152) = v31;
  sub_10001CFB8(v32, v33);
  uint64_t v34 = *(void *)(a2 + 160);
  unint64_t v35 = *(void *)(a2 + 168);
  sub_1000361E0(v34, v35);
  uint64_t v36 = *(void *)(a1 + 160);
  unint64_t v37 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = v34;
  *(void *)(a1 + 168) = v35;
  sub_10001CFB8(v36, v37);
  uint64_t v38 = *(void *)(a2 + 176);
  unint64_t v39 = *(void *)(a2 + 184);
  sub_1000361E0(v38, v39);
  uint64_t v40 = *(void *)(a1 + 176);
  unint64_t v41 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = v38;
  *(void *)(a1 + 184) = v39;
  sub_10001CFB8(v40, v41);
  uint64_t v42 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v42;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  uint64_t v43 = *(void *)(a2 + 224);
  unint64_t v44 = *(void *)(a2 + 232);
  sub_1000361E0(v43, v44);
  uint64_t v45 = *(void *)(a1 + 224);
  unint64_t v46 = *(void *)(a1 + 232);
  *(void *)(a1 + 224) = v43;
  *(void *)(a1 + 232) = v44;
  sub_10001CFB8(v45, v46);
  uint64_t v47 = *(void *)(a2 + 240);
  unint64_t v48 = *(void *)(a2 + 248);
  sub_1000361E0(v47, v48);
  uint64_t v49 = *(void *)(a1 + 240);
  unint64_t v50 = *(void *)(a1 + 248);
  *(void *)(a1 + 240) = v47;
  *(void *)(a1 + 248) = v48;
  sub_10001CFB8(v49, v50);
  uint64_t v51 = (uint64_t *)(a2 + 256);
  unint64_t v52 = *(void *)(a2 + 264);
  if (*(void *)(a1 + 264) >> 60 != 15)
  {
    if (v52 >> 60 != 15)
    {
      uint64_t v54 = *v51;
      sub_1000361E0(*v51, *(void *)(a2 + 264));
      uint64_t v55 = *(void *)(a1 + 256);
      unint64_t v56 = *(void *)(a1 + 264);
      *(void *)(a1 + 256) = v54;
      *(void *)(a1 + 264) = v52;
      sub_10001CFB8(v55, v56);
      goto LABEL_15;
    }
    sub_1001356D0(a1 + 256);
    goto LABEL_13;
  }
  if (v52 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 256) = *(_OWORD *)v51;
    goto LABEL_15;
  }
  uint64_t v53 = *v51;
  sub_1000361E0(*v51, *(void *)(a2 + 264));
  *(void *)(a1 + 256) = v53;
  *(void *)(a1 + 264) = v52;
LABEL_15:
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for PencilPairingLockCheckRequestContent(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x150uLL);
}

uint64_t assignWithTake for PencilPairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = (_OWORD *)(a2 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  if (v9 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v10 = *(void *)(a2 + 40);
  if (v10 >> 60 == 15)
  {
    sub_1001356D0(a1 + 32);
LABEL_4:
    *(_OWORD *)(a1 + 32) = *v8;
    goto LABEL_6;
  }
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)v8;
  *(void *)(a1 + 40) = v10;
  sub_10001CFB8(v11, v9);
LABEL_6:
  uint64_t v12 = *(void *)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10001CFB8(v12, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  unint64_t v15 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_10001CFB8(v14, v15);
  uint64_t v16 = *(void *)(a1 + 80);
  unint64_t v17 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001CFB8(v16, v17);
  uint64_t v18 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(a1 + 144);
  unint64_t v22 = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_10001CFB8(v21, v22);
  uint64_t v23 = *(void *)(a1 + 160);
  unint64_t v24 = *(void *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_10001CFB8(v23, v24);
  uint64_t v25 = *(void *)(a1 + 176);
  unint64_t v26 = *(void *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  sub_10001CFB8(v25, v26);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void *)(a2 + 232);
  uint64_t v28 = *(void *)(a1 + 224);
  unint64_t v29 = *(void *)(a1 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = v27;
  sub_10001CFB8(v28, v29);
  uint64_t v30 = *(void *)(a1 + 240);
  unint64_t v31 = *(void *)(a1 + 248);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  sub_10001CFB8(v30, v31);
  uint64_t v32 = (void *)(a2 + 256);
  unint64_t v33 = *(void *)(a1 + 264);
  if (v33 >> 60 != 15)
  {
    unint64_t v34 = *(void *)(a2 + 264);
    if (v34 >> 60 != 15)
    {
      uint64_t v35 = *(void *)(a1 + 256);
      *(void *)(a1 + 256) = *v32;
      *(void *)(a1 + 264) = v34;
      sub_10001CFB8(v35, v33);
      goto LABEL_11;
    }
    sub_1001356D0(a1 + 256);
  }
  *(_OWORD *)(a1 + 256) = *(_OWORD *)v32;
LABEL_11:
  uint64_t v36 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v36;
  swift_bridgeObjectRelease();
  uint64_t v37 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v37;
  swift_bridgeObjectRelease();
  uint64_t v38 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = v38;
  swift_bridgeObjectRelease();
  uint64_t v39 = *(void *)(a2 + 328);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = v39;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilPairingLockCheckRequestContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 336)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 208);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilPairingLockCheckRequestContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 328) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 336) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 208) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 336) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingLockCheckRequestContent()
{
  return &type metadata for PencilPairingLockCheckRequestContent;
}

ValueMetadata *type metadata accessor for PencilPairingLockCheckRequest()
{
  return &type metadata for PencilPairingLockCheckRequest;
}

unint64_t sub_10025F960()
{
  unint64_t result = qword_10163F7D8;
  if (!qword_10163F7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F7D8);
  }
  return result;
}

unint64_t sub_10025F9B4()
{
  unint64_t result = qword_10163F7E0;
  if (!qword_10163F7E0)
  {
    sub_10000592C((uint64_t *)&unk_10164DBD0);
    sub_100037BB4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F7E0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PencilPairingLockCheckRequestContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEB) {
    goto LABEL_17;
  }
  if (a2 + 21 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 21) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 21;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x16;
  int v8 = v6 - 22;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PencilPairingLockCheckRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 21 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 21) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEA)
  {
    unsigned int v6 = ((a2 - 235) >> 8) + 1;
    *unint64_t result = a2 + 21;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10025FB84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 21;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingLockCheckRequestContent.CodingKeys()
{
  return &type metadata for PencilPairingLockCheckRequestContent.CodingKeys;
}

unint64_t sub_10025FBC0()
{
  unint64_t result = qword_10163F7E8;
  if (!qword_10163F7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F7E8);
  }
  return result;
}

unint64_t sub_10025FC18()
{
  unint64_t result = qword_10163F7F0;
  if (!qword_10163F7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F7F0);
  }
  return result;
}

unint64_t sub_10025FC70()
{
  unint64_t result = qword_10163F7F8;
  if (!qword_10163F7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F7F8);
  }
  return result;
}

uint64_t sub_10025FCC4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12645 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001013EEBB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x314B64656573 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7374726563 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7500643 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F6580 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x636E6F4E68747561 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6169726553746C61 && a2 == 0xEF7265626D754E6CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6F636165426D756ELL && a2 == 0xEA0000000000736ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001013F4C90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6E55646572616873 && a2 == 0xEA00000000007469 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x7461747365747461 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xED00006E67695379 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001013F6990 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 21;
    }
    else {
      return 22;
    }
  }
}

void *sub_100260624(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(unsigned char *)(a1 + 2) = *((unsigned char *)a2 + 2);
    BOOL v7 = a2 + 1;
    unint64_t v8 = a2[2];
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v7;
    }
    else
    {
      uint64_t v10 = *v7;
      sub_1000361E0(*v7, a2[2]);
      v4[1] = v10;
      v4[2] = v8;
    }
    uint64_t v11 = a3[7];
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    uint64_t v14 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (uint64_t)a2 + v15;
    uint64_t v18 = type metadata accessor for MACAddress();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    uint64_t v19 = a3[9];
    uint64_t v20 = (void *)((char *)v4 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    sub_1001A1790(*v21, v23);
    *uint64_t v20 = v22;
    v20[1] = v23;
    uint64_t v24 = a3[11];
    *(void *)((char *)v4 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *((unsigned char *)v4 + v24) = *((unsigned char *)a2 + v24);
    uint64_t v25 = a3[13];
    *((unsigned char *)v4 + a3[12]) = *((unsigned char *)a2 + a3[12]);
    *(_WORD *)((char *)v4 + v25) = *(_WORD *)((char *)a2 + v25);
    uint64_t v26 = a3[14];
    uint64_t v27 = (void *)((char *)v4 + v26);
    uint64_t v28 = (uint64_t *)((char *)a2 + v26);
    uint64_t v29 = *v28;
    unint64_t v30 = v28[1];
    sub_1000361E0(*v28, v30);
    *uint64_t v27 = v29;
    v27[1] = v30;
    *(_DWORD *)((char *)v4 + a3[15]) = *(_DWORD *)((char *)a2 + a3[15]);
  }
  return v4;
}

uint64_t sub_1002607FC(uint64_t a1, int *a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >> 60 != 15) {
    sub_10001CFB8(*(void *)(a1 + 8), v4);
  }
  uint64_t v5 = a1 + a2[7];
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + a2[8];
  uint64_t v8 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  sub_1001A1AD8(*(void *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8));
  uint64_t v9 = (uint64_t *)(a1 + a2[14]);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];

  return sub_10001CFB8(v10, v11);
}

uint64_t sub_1002608EC(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v6 = (uint64_t *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    sub_1000361E0(*v6, *(void *)(a2 + 16));
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
  }
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  uint64_t v17 = a3[9];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  sub_1001A1790(*v19, v21);
  *uint64_t v18 = v20;
  v18[1] = v21;
  uint64_t v22 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v22) = *(unsigned char *)(a2 + v22);
  uint64_t v23 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(_WORD *)(a1 + v23) = *(_WORD *)(a2 + v23);
  uint64_t v24 = a3[14];
  uint64_t v25 = (uint64_t *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v27 = *v26;
  unint64_t v28 = v26[1];
  sub_1000361E0(*v26, v28);
  *uint64_t v25 = v27;
  v25[1] = v28;
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_100260A74(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v6 = (_OWORD *)(a1 + 8);
  unint64_t v7 = (uint64_t *)(a2 + 8);
  unint64_t v8 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) >> 60 != 15)
  {
    if (v8 >> 60 != 15)
    {
      uint64_t v10 = *v7;
      sub_1000361E0(*v7, *(void *)(a2 + 16));
      uint64_t v11 = *(void *)(a1 + 8);
      unint64_t v12 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = v10;
      *(void *)(a1 + 16) = v8;
      sub_10001CFB8(v11, v12);
      goto LABEL_8;
    }
    sub_1001356D0(a1 + 8);
    goto LABEL_6;
  }
  if (v8 >> 60 == 15)
  {
LABEL_6:
    *uint64_t v6 = *(_OWORD *)v7;
    goto LABEL_8;
  }
  uint64_t v9 = *v7;
  sub_1000361E0(*v7, *(void *)(a2 + 16));
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v8;
LABEL_8:
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 24))(v18, v19, v20);
  uint64_t v21 = a3[9];
  uint64_t v22 = (uint64_t *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  sub_1001A1790(*v23, v25);
  uint64_t v26 = *v22;
  uint64_t v27 = v22[1];
  *uint64_t v22 = v24;
  v22[1] = v25;
  sub_1001A1AD8(v26, v27);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(_WORD *)(a1 + a3[13]) = *(_WORD *)(a2 + a3[13]);
  uint64_t v28 = a3[14];
  uint64_t v29 = (uint64_t *)(a1 + v28);
  unint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v31 = *v30;
  unint64_t v32 = v30[1];
  sub_1000361E0(*v30, v32);
  uint64_t v33 = *v29;
  unint64_t v34 = v29[1];
  *uint64_t v29 = v31;
  v29[1] = v32;
  sub_10001CFB8(v33, v34);
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_100260C58(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  uint64_t v15 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v16 = a3[14];
  *(_WORD *)(a1 + a3[13]) = *(_WORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_100260D84(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v6 = (_OWORD *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if (v8 >> 60 != 15)
  {
    unint64_t v9 = *(void *)(a2 + 16);
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = *v7;
      *(void *)(a1 + 16) = v9;
      sub_10001CFB8(v10, v8);
      goto LABEL_6;
    }
    sub_1001356D0(a1 + 8);
  }
  *uint64_t v6 = *(_OWORD *)v7;
LABEL_6:
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  uint64_t v19 = a3[9];
  uint64_t v20 = *(void *)(a1 + v19);
  uint64_t v21 = *(void *)(a1 + v19 + 8);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  sub_1001A1AD8(v20, v21);
  uint64_t v22 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v22) = *(unsigned char *)(a2 + v22);
  uint64_t v23 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(_WORD *)(a1 + v23) = *(_WORD *)(a2 + v23);
  uint64_t v24 = a3[14];
  uint64_t v25 = *(void *)(a1 + v24);
  unint64_t v26 = *(void *)(a1 + v24 + 8);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  sub_10001CFB8(v25, v26);
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_100260F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100260F24);
}

uint64_t sub_100260F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 2);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = a1 + *(int *)(a3 + 28);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      return v14(v13, a2, v12);
    }
    else
    {
      uint64_t v15 = type metadata accessor for MACAddress();
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
      uint64_t v17 = v15;
      uint64_t v18 = a1 + *(int *)(a3 + 32);
      return v16(v18, a2, v17);
    }
  }
}

uint64_t sub_100261050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100261064);
}

uint64_t sub_100261064(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 2) = a2 + 1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for MACAddress();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for DiscoveredObject(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163F858);
}

uint64_t sub_1002611AC()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MACAddress();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002612D4@<X0>(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v199 = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v187 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v187 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v203 = (uint64_t)&v187 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v195 = (char *)&v187 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v197 = (char *)&v187 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v192 = (char *)&v187 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v191 = (char *)&v187 - v21;
  __chkstk_darwin(v20);
  uint64_t v196 = (char *)&v187 - v22;
  uint64_t v23 = type metadata accessor for MACAddress();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v206 = v23;
  uint64_t v207 = v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v187 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25);
  unint64_t v30 = (char *)&v187 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  unint64_t v194 = (char *)&v187 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v193 = (char *)&v187 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  unint64_t v189 = (char *)&v187 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  SecKeyRef v190 = (char *)&v187 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  unint64_t v198 = (char *)&v187 - v40;
  __chkstk_darwin(v39);
  uint64_t v188 = (char *)&v187 - v41;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = __chkstk_darwin(v42);
  unint64_t v200 = (uint8_t *)&v187 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  uint64_t v47 = (char *)&v187 - v46;
  uint64_t v210 = (int *)type metadata accessor for DiscoveredObject(0);
  uint64_t v205 = *((void *)v210 - 1);
  __chkstk_darwin(v210);
  uint64_t v208 = (char *)&v187 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = swift_bridgeObjectRetain();
  uint64_t v209 = (char *)sub_100266A1C(v49);
  uint64_t v204 = a3;
  if (v209)
  {
    unint64_t v202 = a1;
    if (qword_101636910 != -1) {
      swift_once();
    }
    uint64_t v50 = sub_100010324(v42, (uint64_t)qword_10170D9F0);
    uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
    v51(v47, v50, v42);
    unint64_t v52 = v209;
    if (*((void *)v209 + 2) && (unint64_t v53 = sub_1007240CC((uint64_t)v47), (v54 & 1) != 0))
    {
      uint64_t v55 = (uint64_t *)(*((void *)v52 + 7) + 16 * v53);
      uint64_t v56 = *v55;
      unint64_t v57 = v55[1];
      sub_1000361E0(*v55, v57);
    }
    else
    {
      uint64_t v56 = 0;
      unint64_t v57 = 0xF000000000000000;
    }
    unint64_t v58 = *(void (**)(char *, uint64_t))(v43 + 8);
    v58(v47, v42);
    unint64_t v59 = sub_100266ED4(v56, v57);
    unint64_t v201 = v61;
    if ((v59 & 0xFF00) == 0x200)
    {
      if (qword_101636918 != -1) {
        swift_once();
      }
      uint64_t v62 = sub_100010324(v42, (uint64_t)qword_10170DA08);
      uint64_t v63 = (uint64_t)v200;
      v51((char *)v200, v62, v42);
      if (*((void *)v52 + 2))
      {
        unint64_t v64 = sub_1007240CC(v63);
        uint64_t v65 = v206;
        uint64_t v66 = v203;
        if (v67)
        {
          double v68 = (uint64_t *)(*((void *)v52 + 7) + 16 * v64);
          uint64_t v69 = *v68;
          unint64_t v70 = v68[1];
          sub_1000361E0(*v68, v70);
        }
        else
        {
          uint64_t v69 = 0;
          unint64_t v70 = 0xF000000000000000;
        }
      }
      else
      {
        uint64_t v69 = 0;
        unint64_t v70 = 0xF000000000000000;
        uint64_t v65 = v206;
        uint64_t v66 = v203;
      }
      swift_bridgeObjectRelease();
      v58((char *)v63, v42);
      char v105 = sub_100269104(v69, v70);
      if (v105 == 2)
      {
        unint64_t v108 = swift_bridgeObjectRetain();
        sub_100267850(v108, v211);
        sub_10001D608((uint64_t)v211, (uint64_t)&v218, &qword_10163F8C8);
        uint64_t v82 = (uint64_t)v208;
        if (v220 >> 60 == 15)
        {
          if (qword_1016374D0 != -1) {
            swift_once();
          }
          uint64_t v109 = type metadata accessor for Logger();
          sub_100010324(v109, (uint64_t)qword_10170F3B8);
          swift_bridgeObjectRetain();
          int v110 = Logger.logObject.getter();
          os_log_type_t v111 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v110, v111))
          {
            uint64_t v112 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v215 = swift_slowAlloc();
            *(_DWORD *)uint64_t v112 = 136446210;
            uint64_t v209 = (char *)(v112 + 4);
            swift_bridgeObjectRetain();
            uint64_t v113 = Dictionary.description.getter();
            unint64_t v115 = v114;
            swift_bridgeObjectRelease();
            *(void *)&v213[0] = sub_1008FA0F0(v113, v115, (uint64_t *)&v215);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v110, v111, "Failed to create BluetoothAdvertisementData from: %{public}s", v112, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }

LABEL_76:
          a3 = v204;
          uint64_t v79 = v205;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v79 + 56))(a3, 1, 1, v210);
        }
        long long v132 = v218;
        if ((*((void *)&v218 + 1) & 0x2000000000000000) != 0)
        {
          v208[2] = 1;
          *(_OWORD *)(v82 + 8) = xmmword_101347BB0;
          sub_1000361E0(v132, *((void *)&v132 + 1) & 0xDFFFFFFFFFFFFFFFLL);
          sub_1000361E0(v132, *((void *)&v132 + 1) & 0xDFFFFFFFFFFFFFFFLL);
          uint64_t v145 = v195;
          MACAddress.init(addressToSanitize:type:)();
          uint64_t v84 = v207;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v207 + 48))(v145, 1, v65) == 1)
          {
LABEL_136:
            __break(1u);
            JUMPOUT(0x100262D50);
          }
          uint64_t v146 = *(void (**)(char *, char *, uint64_t))(v84 + 32);
          uint64_t v147 = v193;
          v146(v193, v145, v65);
          sub_1001A1AD8(v132, *((uint64_t *)&v132 + 1));
          sub_10026903C((uint64_t)v211);
          v146((char *)(v82 + v210[8]), v147, v65);
          int v81 = 0;
          uint64_t v203 = 0;
          int v97 = 1;
        }
        else
        {
          v208[2] = 0;
          *(_OWORD *)(v82 + 8) = xmmword_101347BB0;
          sub_1000361E0(v132, *((unint64_t *)&v132 + 1));
          sub_1000361E0(v132, *((unint64_t *)&v132 + 1));
          sub_100435A9C(6, v132, *((unint64_t *)&v132 + 1), (uint64_t *)&v215);
          long long v133 = v215;
          sub_1000361E0(v215, *((unint64_t *)&v215 + 1));
          MACAddress.init(addressToSanitize:type:)();
          uint64_t v84 = v207;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v207 + 48))(v66, 1, v65) == 1)
          {
LABEL_134:
            __break(1u);
            goto LABEL_135;
          }
          uint64_t v134 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 32);
          uint64_t v135 = v194;
          v134(v194, v66, v65);
          sub_1001A1AD8(v132, *((uint64_t *)&v132 + 1));
          sub_10026903C((uint64_t)v211);
          sub_10001CFB8(v133, *((unint64_t *)&v133 + 1));
          BOOL v136 = v208;
          v134(&v208[v210[8]], (uint64_t)v135, v65);
          int v81 = 0;
          uint64_t v203 = 0;
          int v97 = 1;
          uint64_t v82 = (uint64_t)v136;
        }
        unint64_t v101 = v202;
        a1 = 0xC000000000000000;
        goto LABEL_84;
      }
      uint64_t v116 = v106;
      a1 = v107;
      uint64_t v82 = (uint64_t)v208;
      v208[2] = v105 & 1;
      uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v119 = v118;
      unint64_t v101 = v202;
      if (*(void *)(v202 + 16))
      {
        uint64_t v120 = v117;
        sub_1000361E0(v116, a1);
        uint64_t v121 = sub_100723FF4(v120, v119);
        if (v122)
        {
          sub_10012F428(*(void *)(v101 + 56) + 32 * v121, (uint64_t)&v218);
        }
        else
        {
          long long v218 = 0u;
          long long v219 = 0u;
        }
      }
      else
      {
        long long v218 = 0u;
        long long v219 = 0u;
        sub_1000361E0(v116, a1);
      }
      uint64_t v84 = v207;
      swift_bridgeObjectRelease();
      if (*((void *)&v219 + 1))
      {
        if ((swift_dynamicCast() & 1) == 0)
        {
LABEL_70:
          MACAddress.init(stringLiteral:)();
LABEL_71:
          uint64_t v203 = v116;
          *(void *)(v82 + 8) = v116;
          *(void *)(v82 + 16) = a1;
          int v81 = 1;
          int v97 = 1;
          goto LABEL_84;
        }
        unint64_t v140 = v197;
        MACAddress.init(data:type:)();
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v84 + 48))(v140, 1, v65) != 1)
        {
          uint64_t v184 = v140;
          uint64_t v185 = *(void (**)(char *, char *, uint64_t))(v84 + 32);
          uint64_t v186 = v189;
          v185(v189, (char *)v184, v65);
          v185((char *)(v82 + v210[8]), v186, v65);
          goto LABEL_71;
        }
        unint64_t v141 = (uint64_t *)&unk_1016477E0;
        uint64_t v142 = v140;
      }
      else
      {
        unint64_t v141 = (uint64_t *)&unk_101644360;
        uint64_t v142 = &v218;
      }
      sub_10001DAB4((uint64_t)v142, v141);
      goto LABEL_70;
    }
    uint64_t v80 = v59;
    uint64_t v203 = v60;
    swift_bridgeObjectRelease();
    int v81 = v80;
    uint64_t v82 = (uint64_t)v208;
    v208[2] = BYTE1(v80) & 1;
    if (v80 == 1)
    {
      unint64_t v83 = swift_bridgeObjectRetain();
      sub_100267850(v83, v211);
      sub_10001D608((uint64_t)v211, (uint64_t)&v218, &qword_10163F8C8);
      uint64_t v65 = v206;
      uint64_t v84 = v207;
      if (v220 >> 60 == 15)
      {
        if (qword_1016374D0 != -1) {
          swift_once();
        }
        uint64_t v85 = type metadata accessor for Logger();
        sub_100010324(v85, (uint64_t)qword_10170F3B8);
        swift_bridgeObjectRetain();
        uint64_t v86 = Logger.logObject.getter();
        os_log_type_t v87 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v86, v87))
        {
          uint64_t v88 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v215 = swift_slowAlloc();
          *(_DWORD *)uint64_t v88 = 136446210;
          uint64_t v208 = (char *)(v88 + 4);
          swift_bridgeObjectRetain();
          uint64_t v209 = (char *)&type metadata for Any + 8;
          uint64_t v89 = Dictionary.description.getter();
          unint64_t v91 = v90;
          swift_bridgeObjectRelease();
          *(void *)&v213[0] = sub_1008FA0F0(v89, v91, (uint64_t *)&v215);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v86, v87, "Failed to create BluetoothAdvertisementData from: %{public}s", v88, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        sub_100269210(v80, v203, v201);
        goto LABEL_76;
      }
      long long v126 = v218;
      *(_OWORD *)(v82 + 8) = xmmword_101347BB0;
      if ((*((void *)&v126 + 1) & 0x2000000000000000) != 0)
      {
        sub_1000361E0(v126, *((void *)&v126 + 1) & 0xDFFFFFFFFFFFFFFFLL);
        sub_1000361E0(v126, *((void *)&v126 + 1) & 0xDFFFFFFFFFFFFFFFLL);
        uint64_t v143 = v191;
        MACAddress.init(addressToSanitize:type:)();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v143, 1, v65) == 1)
        {
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        uint64_t v144 = *(void (**)(unint64_t, char *, uint64_t))(v84 + 32);
        v144((unint64_t)v198, v143, v65);
        sub_1001A1AD8(v126, *((uint64_t *)&v126 + 1));
        sub_10026903C((uint64_t)v211);
        sub_100269210(v80, v203, v201);
        v144(v82 + v210[8], v198, v65);
      }
      else
      {
        sub_1000361E0(v126, *((unint64_t *)&v126 + 1));
        sub_1000361E0(v126, *((unint64_t *)&v126 + 1));
        sub_100435A9C(6, v126, *((unint64_t *)&v126 + 1), (uint64_t *)&v215);
        long long v127 = v215;
        sub_1000361E0(v215, *((unint64_t *)&v215 + 1));
        uint64_t v128 = v192;
        unint64_t v198 = (char *)*((void *)&v127 + 1);
        unint64_t v200 = (uint8_t *)v127;
        MACAddress.init(addressToSanitize:type:)();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v128, 1, v65) == 1)
        {
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
        unint64_t v129 = *(void (**)(char *, char *, uint64_t))(v84 + 32);
        int64_t v130 = v190;
        v129(v190, v128, v65);
        sub_1001A1AD8(v126, *((uint64_t *)&v126 + 1));
        sub_10026903C((uint64_t)v211);
        sub_100269210(v80, v203, v201);
        sub_10001CFB8((uint64_t)v200, (unint64_t)v198);
        uint64_t v131 = v208;
        v129(&v208[v210[8]], v130, v65);
        uint64_t v82 = (uint64_t)v131;
      }
      int v97 = 0;
      uint64_t v203 = 0;
      a1 = 0xC000000000000000;
      int v81 = 1;
LABEL_80:
      unint64_t v101 = v202;
      goto LABEL_84;
    }
    uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v100 = v99;
    unint64_t v101 = v202;
    uint64_t v65 = v206;
    uint64_t v84 = v207;
    if (*(void *)(v202 + 16))
    {
      uint64_t v102 = v98;
      a1 = v201;
      sub_1000361E0(v203, v201);
      uint64_t v103 = sub_100723FF4(v102, v100);
      if (v104)
      {
        sub_10012F428(*(void *)(v101 + 56) + 32 * v103, (uint64_t)&v218);
      }
      else
      {
        long long v218 = 0u;
        long long v219 = 0u;
      }
    }
    else
    {
      long long v218 = 0u;
      long long v219 = 0u;
      a1 = v201;
      sub_1000361E0(v203, v201);
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v219 + 1))
    {
      if ((swift_dynamicCast() & 1) == 0)
      {
LABEL_61:
        MACAddress.init(stringLiteral:)();
LABEL_62:
        int v97 = 0;
        *(void *)(v82 + 8) = v203;
        *(void *)(v82 + 16) = a1;
        goto LABEL_84;
      }
      uint64_t v137 = v196;
      MACAddress.init(data:type:)();
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v84 + 48))(v137, 1, v65) != 1)
      {
        uint64_t v181 = v137;
        unint64_t v182 = *(void (**)(char *, char *, uint64_t))(v84 + 32);
        uint64_t v183 = v188;
        v182(v188, (char *)v181, v65);
        v182((char *)(v82 + v210[8]), v183, v65);
        goto LABEL_62;
      }
      uint64_t v138 = (uint64_t *)&unk_1016477E0;
      uint64_t v139 = v137;
    }
    else
    {
      uint64_t v138 = (uint64_t *)&unk_101644360;
      uint64_t v139 = &v218;
    }
    sub_10001DAB4((uint64_t)v139, v138);
    goto LABEL_61;
  }
  unint64_t v71 = swift_bridgeObjectRetain();
  sub_100267850(v71, v211);
  sub_10001D608((uint64_t)v211, (uint64_t)&v218, &qword_10163F8C8);
  if (v220 >> 60 == 15)
  {
    if (qword_1016374D0 != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    sub_100010324(v72, (uint64_t)qword_10170F3B8);
    swift_bridgeObjectRetain();
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v215 = swift_slowAlloc();
      *(_DWORD *)uint64_t v75 = 136446210;
      uint64_t v209 = (char *)(v75 + 4);
      swift_bridgeObjectRetain();
      uint64_t v76 = Dictionary.description.getter();
      unint64_t v78 = v77;
      swift_bridgeObjectRelease();
      *(void *)&v213[0] = sub_1008FA0F0(v76, v78, (uint64_t *)&v215);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Failed to create BluetoothAdvertisementData from: %{public}s", v75, 0xCu);
      a3 = v204;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v79 = v205;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v79 + 56))(a3, 1, 1, v210);
  }
  long long v92 = v218;
  if ((*((void *)&v218 + 1) & 0x2000000000000000) == 0)
  {
    unint64_t v202 = a1;
    uint64_t v93 = v208;
    v208[2] = 0;
    *(_OWORD *)(v93 + 8) = xmmword_101347BB0;
    sub_1000361E0(v92, *((unint64_t *)&v92 + 1));
    sub_1000361E0(v92, *((unint64_t *)&v92 + 1));
    sub_100435A9C(6, v92, *((unint64_t *)&v92 + 1), (uint64_t *)&v215);
    long long v94 = v215;
    sub_1000361E0(v215, *((unint64_t *)&v215 + 1));
    MACAddress.init(addressToSanitize:type:)();
    uint64_t v65 = v206;
    uint64_t v95 = v207;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v207 + 48))(v8, 1, v206) == 1)
    {
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    uint64_t v96 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
    a1 = v95 + 32;
    v96(v27, v8, v65);
    sub_1001A1AD8(v92, *((uint64_t *)&v92 + 1));
    sub_10026903C((uint64_t)v211);
    sub_10001CFB8(v94, *((unint64_t *)&v94 + 1));
    uint64_t v82 = (uint64_t)v208;
    v96(&v208[v210[8]], v27, v65);
    uint64_t v84 = v207;
    int v81 = 0;
    int v97 = 1;
    goto LABEL_80;
  }
  uint64_t v82 = (uint64_t)v208;
  v208[2] = 1;
  *(_OWORD *)(v82 + 8) = xmmword_101347BB0;
  sub_1000361E0(v92, *((void *)&v92 + 1) & 0xDFFFFFFFFFFFFFFFLL);
  sub_1000361E0(v92, *((void *)&v92 + 1) & 0xDFFFFFFFFFFFFFFFLL);
  MACAddress.init(addressToSanitize:type:)();
  uint64_t v124 = v206;
  uint64_t v123 = v207;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v207 + 48))(v11, 1, v206) == 1)
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  uint64_t v125 = *(void (**)(char *, char *, uint64_t))(v123 + 32);
  v125(v30, v11, v124);
  sub_1001A1AD8(v92, *((uint64_t *)&v92 + 1));
  sub_10026903C((uint64_t)v211);
  v125((char *)(v82 + v210[8]), v30, v124);
  int v81 = 0;
  int v97 = 1;
  uint64_t v65 = v124;
  uint64_t v84 = v207;
  unint64_t v101 = a1;
LABEL_84:
  *(unsigned char *)uint64_t v82 = v81;
  *(unsigned char *)(v82 + 1) = v97;
  uint64_t v148 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v101 + 16) && (uint64_t v150 = sub_100723FF4(v148, v149), (v151 & 1) != 0))
  {
    sub_10012F428(*(void *)(v101 + 56) + 32 * v150, (uint64_t)&v215);
  }
  else
  {
    long long v215 = 0u;
    long long v216 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v216 + 1))
  {
    sub_10001DAB4((uint64_t)&v215, (uint64_t *)&unk_101644360);
    goto LABEL_94;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_94:
    if (qword_1016374D0 != -1) {
      swift_once();
    }
    uint64_t v153 = type metadata accessor for Logger();
    sub_100010324(v153, (uint64_t)qword_10170F3B8);
    swift_bridgeObjectRetain();
    uint64_t v154 = Logger.logObject.getter();
    os_log_type_t v155 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v154, v155))
    {
      unint64_t v156 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v215 = swift_slowAlloc();
      *(_DWORD *)unint64_t v156 = 136446210;
      unint64_t v200 = v156 + 4;
      unint64_t v201 = a1;
      swift_bridgeObjectRetain();
      uint64_t v157 = Dictionary.description.getter();
      unint64_t v159 = v158;
      swift_bridgeObjectRelease();
      uint64_t v160 = v157;
      uint64_t v65 = v206;
      *(void *)&v213[0] = sub_1008FA0F0(v160, v159, (uint64_t *)&v215);
      uint64_t v82 = (uint64_t)v208;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a1 = v201;
      swift_bridgeObjectRelease_n();
      uint64_t v84 = v207;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v154, v155, "Expected CBAdvertisementDataTimestamp key in: %{public}s", v156, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a3 = v204;
    uint64_t v79 = v205;
    if (v209) {
      sub_10001CFB8(v203, a1);
    }
    sub_100037A24(*(void *)(v82 + 8), *(void *)(v82 + 16));
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v82 + v210[8], v65);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v79 + 56))(a3, 1, 1, v210);
  }
  BOOL v152 = v210;
  Date.init(timeIntervalSinceReferenceDate:)();
  *(_DWORD *)(v82 + v152[15]) = v199;
  if (v97)
  {
    if (!v81)
    {
LABEL_104:
      unint64_t v162 = swift_bridgeObjectRetain();
      sub_100267850(v162, v212);
      sub_10001D608((uint64_t)v212, (uint64_t)v213, &qword_10163F8C8);
      if (*((void *)&v214 + 1) >> 60 != 15)
      {
        long long v215 = v213[0];
        long long v216 = v213[1];
        long long v217 = v214;
        swift_bridgeObjectRelease();
        sub_1002690C4(&v215, &v221);
        unint64_t v180 = v210;
        sub_1002690C4(&v221, (_OWORD *)(v82 + v210[9]));
        *(void *)(v82 + v180[10]) = v216;
        *(unsigned char *)(v82 + v180[11]) = BYTE8(v216);
        long long v222 = v217;
        sub_1002690D4((uint64_t *)&v221);
        sub_100061E54((uint64_t)&v222);
        sub_10026903C((uint64_t)v212);
        *(_OWORD *)(v82 + v180[14]) = v222;
        *(unsigned char *)(v82 + v180[12]) = BYTE9(v216);
        sub_10001D608((uint64_t)&v216 + 10, (uint64_t)v223, &qword_10163F8D0);
        sub_10001D608((uint64_t)v223, v82 + v180[13], &qword_10163F8D0);
        uint64_t v165 = v204;
        uint64_t v178 = v205;
        if (!v209) {
          goto LABEL_123;
        }
        goto LABEL_122;
      }
    }
  }
  else if (v81 == 1)
  {
    goto LABEL_104;
  }
  uint64_t v163 = Data.init(stringLiteral:)();
  uint64_t v165 = v204;
  switch(v164 >> 62)
  {
    case 1uLL:
      LODWORD(v166) = HIDWORD(v163) - v163;
      if (__OFSUB__(HIDWORD(v163), v163))
      {
        __break(1u);
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      uint64_t v166 = (int)v166;
LABEL_110:
      if (v166 != 6)
      {
LABEL_130:
        sub_10001CFB8(v163, v164);
        __break(1u);
        goto LABEL_131;
      }
      char v170 = (uint64_t *)(v82 + v210[9]);
      *char v170 = v163;
      v170[1] = v164 | 0x2000000000000000;
      uint64_t v171 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v101 + 16) && (uint64_t v173 = sub_100723FF4(v171, v172), (v174 & 1) != 0))
      {
        sub_10012F428(*(void *)(v101 + 56) + 32 * v173, (uint64_t)&v215);
      }
      else
      {
        long long v215 = 0u;
        long long v216 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v216 + 1))
      {
        int v175 = swift_dynamicCast();
        os_log_type_t v176 = v209;
        if (v175) {
          uint64_t v177 = v222;
        }
        else {
          uint64_t v177 = 0;
        }
        uint64_t v178 = v205;
      }
      else
      {
        sub_10001DAB4((uint64_t)&v215, (uint64_t *)&unk_101644360);
        uint64_t v177 = 0;
        uint64_t v178 = v205;
        os_log_type_t v176 = v209;
      }
      uint64_t v179 = v210;
      *(void *)(v82 + v210[10]) = v177;
      *(unsigned char *)(v82 + v179[11]) = 0;
      *(_OWORD *)(v82 + v179[14]) = xmmword_101348180;
      *(unsigned char *)(v82 + v179[12]) = 0;
      *(_WORD *)(v82 + v179[13]) = 256;
      if (!v176) {
        goto LABEL_123;
      }
LABEL_122:
      sub_10001CFB8(v203, a1);
LABEL_123:
      sub_10017AC40(v82, v165);
      (*(void (**)(uint64_t, void, uint64_t, int *))(v178 + 56))(v165, 0, 1, v210);
      return sub_10026A9F0(v82, type metadata accessor for DiscoveredObject);
    case 2uLL:
      uint64_t v168 = *(void *)(v163 + 16);
      uint64_t v167 = *(void *)(v163 + 24);
      BOOL v169 = __OFSUB__(v167, v168);
      uint64_t v166 = v167 - v168;
      if (!v169) {
        goto LABEL_110;
      }
      goto LABEL_129;
    case 3uLL:
      goto LABEL_130;
    default:
      uint64_t v166 = BYTE6(v164);
      goto LABEL_110;
  }
}

void *sub_100262D60(uint64_t a1, uint64_t a2)
{
  unint64_t v30 = _swiftEmptyArrayStorage;
  sub_1000B771C(0, 0, 0);
  unsigned int v4 = _swiftEmptyArrayStorage;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  swift_bridgeObjectRetain();
  sub_10115AD00(&v32);
  char v6 = v32;
  uint64_t v5 = v33;
  uint64_t v8 = v34;
  uint64_t v7 = v35;
  uint64_t v9 = v36;
  sub_10001D608((uint64_t)&v32, (uint64_t)v37, &qword_10163F8E8);
  if (v38)
  {
    uint64_t v10 = sub_100062734((unint64_t *)&qword_10163F8F8, &qword_10163F8F0);
    do
    {
      uint64_t v11 = sub_10000588C(&qword_10163F8F0);
      v31[3] = v11;
      v31[4] = v10;
      uint64_t v12 = (void *)swift_allocObject();
      v31[0] = v12;
      v12[2] = v5;
      v12[3] = v8;
      v12[4] = v7;
      v12[5] = v9;
      uint64_t v13 = sub_10001CD44(v31, v11);
      uint64_t v14 = v13[2];
      uint64_t v15 = v13[3] >> 1;
      uint64_t v16 = v15 - v14;
      if (__OFSUB__(v15, v14)) {
        __break(1u);
      }
      if (v16)
      {
        uint64_t v17 = (const void *)(v13[1] + v14);
        if (v16 <= 14)
        {
          memset(__dst, 0, sizeof(__dst));
          unsigned __int8 v27 = v15 - v14;
          memcpy(__dst, v17, v15 - v14);
          uint64_t v20 = *(void *)__dst;
          unint64_t v21 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v27 << 48);
          sub_1002692AC((uint64_t)&v32);
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          sub_1002692AC((uint64_t)&v32);
          uint64_t v18 = __DataStorage.init(bytes:length:)();
          uint64_t v19 = v18;
          if ((unint64_t)v16 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            uint64_t v20 = swift_allocObject();
            *(void *)(v20 + 16) = 0;
            *(void *)(v20 + 24) = v16;
            unint64_t v21 = v19 | 0x8000000000000000;
          }
          else
          {
            uint64_t v20 = v16 << 32;
            unint64_t v21 = v18 | 0x4000000000000000;
          }
        }
      }
      else
      {
        sub_1002692AC((uint64_t)&v32);
        uint64_t v20 = 0;
        unint64_t v21 = 0xC000000000000000;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
      sub_1002692D8((uint64_t)&v32);
      unint64_t v30 = v4;
      unint64_t v23 = v4[2];
      unint64_t v22 = v4[3];
      if (v23 >= v22 >> 1)
      {
        sub_1000B771C(v22 > 1, v23 + 1, 1);
        unsigned int v4 = v30;
      }
      v4[2] = v23 + 1;
      uint64_t v24 = &v4[3 * v23];
      *((unsigned char *)v24 + 32) = v6;
      v24[5] = v20;
      v24[6] = v21;
      sub_10115AD00(&v32);
      char v6 = v32;
      uint64_t v5 = v33;
      uint64_t v8 = v34;
      uint64_t v7 = v35;
      uint64_t v9 = v36;
      sub_10001D608((uint64_t)&v32, (uint64_t)v37, &qword_10163F8E8);
    }
    while (v38);
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100263044(__int16 a1)
{
  if ((a1 & 0x100) != 0)
  {
    if ((_BYTE)a1) {
      return 0x5079636167656C2ELL;
    }
    else {
      return 0x3831657079742ELL;
    }
  }
  else
  {
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = 41;
    v2._object = (void *)0xE100000000000000;
    String.append(_:)(v2);
    return 0x2868736F702ELL;
  }
}

uint64_t sub_100263108(void *a1, int a2)
{
  int v27 = a2;
  uint64_t v3 = sub_10000588C(&qword_10163FAF8);
  uint64_t v25 = *(void *)(v3 - 8);
  uint64_t v26 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163FB00);
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163FB08);
  uint64_t v21 = *(void *)(v9 - 8);
  uint64_t v22 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10163FB10);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10026D514();
  __int16 v16 = v27;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v16 & 0x100) != 0)
  {
    uint64_t v19 = (uint64_t (**)(char *, uint64_t))(v13 + 8);
    if ((_BYTE)v16)
    {
      char v29 = 1;
      sub_10026D5BC();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v24);
    }
    else
    {
      char v28 = 0;
      sub_10026D610();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v22);
    }
    return (*v19)(v15, v12);
  }
  else
  {
    char v30 = 2;
    sub_10026D568();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v17 = v26;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
}

uint64_t sub_1002634B0()
{
  uint64_t v1 = 0x6F5079636167656CLL;
  if (*v0 != 1) {
    uint64_t v1 = 1752395632;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x383165707974;
  }
}

uint64_t sub_100263504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10026C74C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10026352C(uint64_t a1)
{
  unint64_t v2 = sub_10026D514();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100263568(uint64_t a1)
{
  unint64_t v2 = sub_10026D514();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002635A4(uint64_t a1)
{
  unint64_t v2 = sub_10026D5BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002635E0(uint64_t a1)
{
  unint64_t v2 = sub_10026D5BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100263624()
{
  return 0x6B726F7774656ELL;
}

uint64_t sub_10026363C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6B726F7774656ELL && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1002636D4(uint64_t a1)
{
  unint64_t v2 = sub_10026D568();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100263710(uint64_t a1)
{
  unint64_t v2 = sub_10026D568();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10026374C(uint64_t a1)
{
  unint64_t v2 = sub_10026D610();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100263788(uint64_t a1)
{
  unint64_t v2 = sub_10026D610();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002637C4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10026C898(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = BYTE1(result) & 1;
  }
  return result;
}

uint64_t sub_1002637F8(void *a1)
{
  return sub_100263108(a1, *v1 | (v1[1] << 8));
}

uint64_t sub_100263824()
{
  return sub_100263044(*v0 | (unsigned __int16)(v0[1] << 8));
}

uint64_t sub_10026383C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MACAddress();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x2000000000000000) == 0)
  {
    strcpy((char *)v18, ".wild(advt: ");
    BYTE5(v18[1]) = 0;
    HIWORD(v18[1]) = -5120;
    uint64_t v16 = a1;
    unint64_t v17 = a2;
    sub_1001A1790(a1, a2);
    sub_10025C42C();
LABEL_5:
    v14._countAndFlagsBits = RawRepresentable<>.hexString.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 41;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    sub_1001A1AD8(a1, a2);
    return v18[0];
  }
  v18[0] = 0;
  v18[1] = 0xE000000000000000;
  sub_1000361E0(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v18[0] = 0xD000000000000014;
  v18[1] = 0x80000001013F69B0;
  sub_1000361E0(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
  MACAddress.init(addressToSanitize:type:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    sub_10026922C((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v13._countAndFlagsBits = 0x203A74766461202CLL;
    v13._object = (void *)0xE800000000000000;
    String.append(_:)(v13);
    uint64_t v16 = a1;
    unint64_t v17 = a2 & 0xDFFFFFFFFFFFFFFFLL;
    sub_100264FE8();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_100263B10(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v24 = a2;
  unint64_t v27 = a3;
  uint64_t v4 = sub_10000588C(&qword_10163FA40);
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v23 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163FA48);
  uint64_t v21 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163FA50);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  Swift::String v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10026C5A8();
  unint64_t v14 = v27;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v14 & 0x2000000000000000) != 0)
  {
    LOBYTE(v25) = 1;
    uint64_t v17 = v24;
    sub_1000361E0(v24, v14 & 0xDFFFFFFFFFFFFFFFLL);
    sub_10026C5FC();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v25 = v17;
    unint64_t v26 = v14 & 0xDFFFFFFFFFFFFFFFLL;
    sub_10026C650();
    uint64_t v18 = v23;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v18);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v16 = v17;
  }
  else
  {
    LOBYTE(v25) = 0;
    uint64_t v15 = v24;
    sub_1000361E0(v24, v14);
    sub_10026C6A4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v25 = v15;
    unint64_t v26 = v14;
    sub_10026C6F8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v16 = v15;
  }
  return sub_1001A1AD8(v16, v14);
}

uint64_t sub_100263E68()
{
  if (*v0) {
    return 0x656E774F7261656ELL;
  }
  else {
    return 1684826487;
  }
}

uint64_t sub_100263EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10026CDF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100263EC8(uint64_t a1)
{
  unint64_t v2 = sub_10026C5A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100263F04(uint64_t a1)
{
  unint64_t v2 = sub_10026C5A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100263F40()
{
  return 12383;
}

uint64_t sub_100263F50(uint64_t a1)
{
  unint64_t v2 = sub_10026C5FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100263F8C(uint64_t a1)
{
  unint64_t v2 = sub_10026C5FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100263FC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100264048(uint64_t a1)
{
  unint64_t v2 = sub_10026C6A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100264084(uint64_t a1)
{
  unint64_t v2 = sub_10026C6A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1002640C0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10026CEE4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1002640EC(void *a1)
{
  return sub_100263B10(a1, *(void *)v1, *(void *)(v1 + 8));
}

Swift::Int sub_100264108()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)((v2 >> 61) & 1);
  sub_1000361E0(v1, v2 & 0xDFFFFFFFFFFFFFFFLL);
  Data.hash(into:)();
  sub_1001A1AD8(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_100264184()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher._combine(_:)((v2 >> 61) & 1);
  sub_1000361E0(v1, v2 & 0xDFFFFFFFFFFFFFFFLL);
  Data.hash(into:)();

  return sub_1001A1AD8(v1, v2);
}

Swift::Int sub_1002641FC()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)((v2 >> 61) & 1);
  sub_1000361E0(v1, v2 & 0xDFFFFFFFFFFFFFFFLL);
  Data.hash(into:)();
  sub_1001A1AD8(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_100264274()
{
  return sub_10026383C(*v0, v0[1]);
}

uint64_t sub_10026427C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if ((v3 & 0x2000000000000000) != 0)
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      sub_1001A1790(*a1, v3);
      sub_1001A1790(v4, v5);
      uint64_t v6 = v2;
      unint64_t v7 = v3 & 0xDFFFFFFFFFFFFFFFLL;
      uint64_t v8 = v4;
      unint64_t v9 = v5 & 0xDFFFFFFFFFFFFFFFLL;
      goto LABEL_7;
    }
  }
  else if ((v5 & 0x2000000000000000) == 0)
  {
    sub_1001A1790(*a1, v3);
    sub_1001A1790(v4, v5);
    uint64_t v6 = v2;
    unint64_t v7 = v3;
    uint64_t v8 = v4;
    unint64_t v9 = v5;
LABEL_7:
    char v10 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7, v8, v9);
    sub_1001A1AD8(v4, v5);
    sub_1001A1AD8(v2, v3);
    return v10 & 1;
  }
  char v10 = 0;
  return v10 & 1;
}

void sub_100264344(uint64_t a1)
{
}

void sub_100264358(uint64_t a1)
{
}

void sub_10026436C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  sub_10001E384(v3, a2);
  unint64_t v4 = sub_100010324(v3, (uint64_t)a2);
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [self UUIDWithString:v5];

  sub_100BBC528(v4);
}

uint64_t sub_100264420()
{
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  sub_1001A1790(*v0, v2);
  v3._countAndFlagsBits = sub_10026383C(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  sub_1001A1AD8(v1, v2);
  v4._countAndFlagsBits = 0x3A73757461747320;
  v4._object = (void *)0xE900000000000020;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0x3A64616F6C796170;
}

uint64_t sub_100264528()
{
  return (*(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for DiscoveredObject(0) + 44)) >> 4) & 3;
}

uint64_t sub_100264550()
{
  uint64_t v1 = type metadata accessor for DefaultStringInterpolation.BinaryIntegerRadix();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  Swift::String v4 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v5 = *v0;
  if (v0[1] == 1)
  {
    if (*v0) {
      uint64_t v6 = 0x6F5079636167654CLL;
    }
    else {
      uint64_t v6 = 0x38312065707954;
    }
    if (*v0) {
      unint64_t v7 = (void *)0xEA00000000006873;
    }
    else {
      unint64_t v7 = (void *)0xE700000000000000;
    }
  }
  else
  {
    uint64_t v58 = 0x5B68736F50;
    unint64_t v59 = 0xE500000000000000;
    LOBYTE(v57._countAndFlagsBits) = v5;
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 93;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    uint64_t v6 = v58;
    unint64_t v7 = (void *)v59;
  }
  uint64_t v10 = type metadata accessor for DiscoveredObject(0);
  uint64_t v11 = (int *)v10;
  uint64_t v12 = (uint64_t *)&v0[*(int *)(v10 + 36)];
  uint64_t v14 = *v12;
  unint64_t v13 = v12[1];
  if ((v13 & 0x2000000000000000) != 0)
  {
    uint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    sub_1000361E0(v14, v13 & 0xDFFFFFFFFFFFFFFFLL);
    _StringGuts.grow(_:)(70);
    v18._countAndFlagsBits = 0x7461446E6163735BLL;
    v18._object = (void *)0xEB00000000203A65;
    String.append(_:)(v18);
    type metadata accessor for Date();
    sub_10026922C((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0x203A6570797420;
    v20._object = (void *)0xE700000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = v6;
    v21._object = v7;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x7373657264646120;
    v22._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v22);
    type metadata accessor for MACAddress();
    sub_10026922C((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 0x203A56444120;
    v24._object = (void *)0xE600000000000000;
    String.append(_:)(v24);
    v57._countAndFlagsBits = v14;
    v57._object = (void *)(v13 & 0xDFFFFFFFFFFFFFFFLL);
    sub_100264FE8();
    v25._countAndFlagsBits = RawRepresentable<>.hexString.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0x3A73757461747320;
    v26._object = (void *)0xE900000000000020;
    String.append(_:)(v26);
    v27._countAndFlagsBits = sub_1000D0310(v0[v11[11]]);
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    unint64_t v28 = 0xE500000000000000;
    v29._countAndFlagsBits = 0x203A6B6520;
    v29._object = (void *)0xE500000000000000;
    String.append(_:)(v29);
    char v30 = v0[v11[12]];
    v57._countAndFlagsBits = 0x203A4D6F427BLL;
    v57._object = (void *)0xE600000000000000;
    if ((v30 & 4) != 0) {
      uint64_t v31 = 1702195828;
    }
    else {
      uint64_t v31 = 0x65736C6166;
    }
    if ((v30 & 4) != 0) {
      unint64_t v28 = 0xE400000000000000;
    }
    unint64_t v32 = v28;
    String.append(_:)(*(Swift::String *)&v31);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 125;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    String.append(_:)(v57);
  }
  else
  {
    uint64_t v15 = &v0[*(int *)(v10 + 52)];
    if (v15[1])
    {
      sub_1000361E0(v14, v13);
      uint64_t v16 = (void *)0xE300000000000000;
      uint64_t v17 = 4271950;
    }
    else
    {
      char v34 = *v15;
      uint64_t v58 = 0;
      unint64_t v59 = 0xE000000000000000;
      LOBYTE(v57._countAndFlagsBits) = v34;
      (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DefaultStringInterpolation.BinaryIntegerRadix.hex(_:), v1);
      sub_1000361E0(v14, v13);
      sub_1002650E4();
      DefaultStringInterpolation.appendInterpolation<A>(_:radix:padded:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      uint64_t v17 = v58;
      uint64_t v16 = (void *)v59;
    }
    uint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(79);
    v35._countAndFlagsBits = 0x7461446E6163735BLL;
    v35._object = (void *)0xEB00000000203A65;
    String.append(_:)(v35);
    type metadata accessor for Date();
    sub_10026922C((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 0x203A6570797420;
    v37._object = (void *)0xE700000000000000;
    String.append(_:)(v37);
    v38._countAndFlagsBits = v6;
    v38._object = v7;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._countAndFlagsBits = 0x7373657264646120;
    v39._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v39);
    type metadata accessor for MACAddress();
    sub_10026922C((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = 0x203A56444120;
    v41._object = (void *)0xE600000000000000;
    String.append(_:)(v41);
    v57._countAndFlagsBits = v14;
    v57._object = (void *)v13;
    sub_10025C42C();
    v42._countAndFlagsBits = RawRepresentable<>.hexString.getter();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._countAndFlagsBits = 0x3A73757461747320;
    v43._object = (void *)0xE900000000000020;
    String.append(_:)(v43);
    v44._countAndFlagsBits = sub_1000D0310(v0[v11[11]]);
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    unint64_t v45 = 0xE500000000000000;
    v46._countAndFlagsBits = 0x203A6B6520;
    v46._object = (void *)0xE500000000000000;
    String.append(_:)(v46);
    char v47 = v0[v11[12]];
    v57._countAndFlagsBits = 0x203A4D6F427BLL;
    v57._object = (void *)0xE600000000000000;
    if ((v47 & 4) != 0) {
      uint64_t v48 = 1702195828;
    }
    else {
      uint64_t v48 = 0x65736C6166;
    }
    if ((v47 & 4) != 0) {
      unint64_t v45 = 0xE400000000000000;
    }
    unint64_t v49 = v45;
    String.append(_:)(*(Swift::String *)&v48);
    swift_bridgeObjectRelease();
    v50._countAndFlagsBits = 125;
    v50._object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    v51._countAndFlagsBits = 0x203A746E696820;
    v51._object = (void *)0xE700000000000000;
    String.append(_:)(v51);
    v52._countAndFlagsBits = v17;
    v52._object = v16;
    String.append(_:)(v52);
  }
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = 0x203A6973737220;
  v53._object = (void *)0xE700000000000000;
  String.append(_:)(v53);
  LODWORD(v57._countAndFlagsBits) = *(_DWORD *)&v0[v11[15]];
  v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._countAndFlagsBits = 93;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  sub_1001A1AD8(v14, v13);
  return v58;
}

uint64_t sub_100264CE8()
{
  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 123;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  type metadata accessor for BeaconKeyManager.IndexInformation(0);
  sub_10000588C(&qword_10163FAB0);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 125;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t sub_100264DBC()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_1016654F0);
  __chkstk_darwin(v1 - 8);
  Swift::String v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for BeaconDetails(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DetailedDiscoveredObject(0);
  sub_10026D448(v0 + *(int *)(v8 + 20), (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v3, (uint64_t *)&unk_1016654F0);
    return sub_100264550();
  }
  else
  {
    sub_10026D4B0((uint64_t)v3, (uint64_t)v7);
    uint64_t v16 = 0;
    unint64_t v17 = 0xE000000000000000;
    v10._countAndFlagsBits = sub_100264550();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 32;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    v12._countAndFlagsBits = 123;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    type metadata accessor for BeaconKeyManager.IndexInformation(0);
    sub_10000588C(&qword_10163FAB0);
    _print_unlocked<A, B>(_:_:)();
    v13._countAndFlagsBits = 125;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t v9 = v16;
    sub_10026A9F0((uint64_t)v7, type metadata accessor for BeaconDetails);
  }
  return v9;
}

unint64_t sub_100264FE8()
{
  unint64_t result = qword_10163F8B8;
  if (!qword_10163F8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F8B8);
  }
  return result;
}

Swift::Int sub_10026503C(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  Swift::String v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v3 = (void *)sub_100B735AC(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_100265138(v6);
  *a1 = v3;
  return result;
}

unint64_t sub_1002650E4()
{
  unint64_t result = qword_10163F8C0;
  if (!qword_10163F8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163F8C0);
  }
  return result;
}

Swift::Int sub_100265138(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  BOOL v136 = (char *)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  char v151 = (char *)&v131 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v146 = (char *)&v131 - v11;
  __chkstk_darwin(v10);
  uint64_t v147 = (char *)&v131 - v12;
  Swift::Int v13 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v13);
  if (result >= v13)
  {
    if (v13 < 0) {
      goto LABEL_140;
    }
    if (v13) {
      return sub_100265CF8(0, v13, 1, a1);
    }
    return result;
  }
  if (v13 >= 0) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v13 + 1;
  }
  if (v13 < -1) {
    goto LABEL_148;
  }
  uint64_t v149 = v4;
  uint64_t v150 = a1;
  Swift::Int v133 = result;
  if (v13 < 2)
  {
    Swift::String v19 = (char *)_swiftEmptyArrayStorage;
    unint64_t v138 = (unint64_t)_swiftEmptyArrayStorage
         + ((*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80));
    long long v132 = _swiftEmptyArrayStorage;
    if (v13 != 1)
    {
      unint64_t v21 = _swiftEmptyArrayStorage[2];
LABEL_106:
      if (v21 >= 2)
      {
        uint64_t v125 = *v150;
        do
        {
          unint64_t v126 = v21 - 2;
          if (v21 < 2) {
            goto LABEL_135;
          }
          if (!v125) {
            goto LABEL_147;
          }
          uint64_t v127 = *(void *)&v19[16 * v126 + 32];
          uint64_t v128 = *(void *)&v19[16 * v21 + 24];
          sub_100266018(v125 + v5[9] * v127, v125 + v5[9] * *(void *)&v19[16 * v21 + 16], v125 + v5[9] * v128, v138);
          if (v2) {
            break;
          }
          if (v128 < v127) {
            goto LABEL_136;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::String v19 = sub_100B73584((uint64_t)v19);
          }
          if (v126 >= *((void *)v19 + 2)) {
            goto LABEL_137;
          }
          unint64_t v129 = &v19[16 * v126 + 32];
          *(void *)unint64_t v129 = v127;
          *((void *)v129 + 1) = v128;
          unint64_t v130 = *((void *)v19 + 2);
          if (v21 > v130) {
            goto LABEL_138;
          }
          memmove(&v19[16 * v21 + 16], &v19[16 * v21 + 32], 16 * (v130 - v21));
          *((void *)v19 + 2) = v130 - 1;
          unint64_t v21 = v130 - 1;
        }
        while (v130 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      v132[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v16 = v15 >> 1;
    uint64_t v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v17 + 16) = v16;
    unint64_t v18 = (*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80);
    long long v132 = (void *)v17;
    unint64_t v138 = v17 + v18;
  }
  Swift::Int v20 = 0;
  uint64_t v144 = (void (**)(char *, uint64_t))(v5 + 1);
  uint64_t v145 = v5 + 2;
  uint64_t v154 = (void (**)(char *, uint64_t, uint64_t))(v5 + 4);
  Swift::String v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v139 = v5;
  while (1)
  {
    Swift::Int v22 = v20;
    Swift::Int v23 = v20 + 1;
    Swift::Int v137 = v20;
    if (v20 + 1 >= v13) {
      goto LABEL_37;
    }
    uint64_t v24 = v149;
    uint64_t v25 = *v150;
    uint64_t v141 = v25;
    Swift::Int v142 = v20 + 1;
    Swift::Int v153 = v139[9];
    Swift::Int v26 = v153;
    Swift::String v27 = (void (*)(char *, uint64_t, uint64_t))v139[2];
    v27(v147, v25 + v153 * v23, v149);
    uint64_t v28 = v25 + v26 * v22;
    Swift::String v29 = v146;
    v27(v146, v28, v24);
    uint64_t v30 = sub_10026922C(&qword_10163F8D8, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v31 = v147;
    Swift::Int v148 = v30;
    LODWORD(v152) = dispatch thunk of static Comparable.< infix(_:_:)();
    Swift::Int v32 = v13;
    Swift::String v33 = (void (*)(char *, uint64_t))v139[1];
    char v34 = v29;
    Swift::Int v22 = v137;
    v33(v34, v24);
    v33(v31, v24);
    Swift::Int v35 = v153;
    Swift::Int v23 = v22 + 2;
    Swift::Int v143 = v32;
    if (v22 + 2 >= v32)
    {
      Swift::Int v13 = v143;
      if ((v152 & 1) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v134 = v19;
      uint64_t v131 = v2;
      v142 *= v153;
      uint64_t v36 = v141;
      Swift::Int v37 = v153 * v23;
      while (1)
      {
        Swift::Int v38 = v23;
        Swift::String v39 = v147;
        uint64_t v40 = v149;
        v27(v147, v36 + v37, v149);
        Swift::String v41 = v146;
        v27(v146, v36 + v142, v40);
        int v42 = dispatch thunk of static Comparable.< infix(_:_:)();
        v33(v41, v40);
        v33(v39, v40);
        if ((v152 ^ v42)) {
          break;
        }
        Swift::Int v23 = v38 + 1;
        Swift::Int v35 = v153;
        v36 += v153;
        if (v143 == v38 + 1)
        {
          Swift::Int v13 = v143;
          Swift::Int v23 = v143;
          uint64_t v2 = v131;
          Swift::String v19 = v134;
          Swift::Int v22 = v137;
          if (v152) {
            goto LABEL_25;
          }
          goto LABEL_37;
        }
      }
      uint64_t v2 = v131;
      Swift::String v19 = v134;
      Swift::Int v23 = v38;
      Swift::Int v22 = v137;
      Swift::Int v13 = v143;
      Swift::Int v35 = v153;
      if ((v152 & 1) == 0) {
        goto LABEL_37;
      }
    }
LABEL_25:
    if (v23 < v22) {
      goto LABEL_141;
    }
    if (v22 >= v23)
    {
LABEL_37:
      char v47 = v150;
      goto LABEL_38;
    }
    uint64_t v134 = v19;
    uint64_t v43 = 0;
    uint64_t v44 = v35 * (v23 - 1);
    Swift::Int v45 = v23 * v35;
    uint64_t v46 = v22 * v35;
    char v47 = v150;
    Swift::Int v148 = v23;
    do
    {
      if (v22 != v23 + v43 - 1)
      {
        uint64_t v49 = v141;
        if (!v141) {
          goto LABEL_146;
        }
        uint64_t v50 = v2;
        unint64_t v51 = v141 + v46;
        Swift::String v52 = (char *)(v141 + v44);
        BOOL v152 = *v154;
        v152(v136, v141 + v46, v149);
        if (v46 < v44 || v51 >= v49 + v45)
        {
          uint64_t v48 = v149;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v48 = v149;
          if (v46 != v44) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        v152(v52, (uint64_t)v136, v48);
        uint64_t v2 = v50;
        char v47 = v150;
        Swift::Int v23 = v148;
        Swift::Int v35 = v153;
      }
      ++v22;
      --v43;
      v44 -= v35;
      v45 -= v35;
      v46 += v35;
    }
    while (v22 < v23 + v43);
    Swift::String v19 = v134;
    Swift::Int v22 = v137;
    Swift::Int v13 = v143;
LABEL_38:
    uint64_t v53 = v149;
    if (v23 >= v13) {
      goto LABEL_57;
    }
    if (__OFSUB__(v23, v22)) {
      goto LABEL_139;
    }
    if (v23 - v22 >= v133) {
      goto LABEL_57;
    }
    if (__OFADD__(v22, v133)) {
      goto LABEL_142;
    }
    Swift::Int v54 = v22 + v133 >= v13 ? v13 : v22 + v133;
    if (v54 < v22) {
      break;
    }
    if (v23 != v54)
    {
      uint64_t v134 = v19;
      uint64_t v131 = v2;
      uint64_t v55 = v139[9];
      unint64_t v140 = (void (*)(char *, uint64_t, uint64_t))v139[2];
      uint64_t v141 = v55;
      uint64_t v56 = v55 * (v23 - 1);
      Swift::Int v57 = v23 * v55;
      Swift::Int v135 = v54;
      do
      {
        uint64_t v59 = 0;
        Swift::Int v148 = v23;
        Swift::Int v142 = v57;
        Swift::Int v143 = v56;
        while (1)
        {
          uint64_t v60 = *v47;
          BOOL v152 = (void (*)(char *, uint64_t, uint64_t))(v57 + v59);
          Swift::Int v153 = v22;
          Swift::Int v61 = v57 + v59 + v60;
          uint64_t v62 = v147;
          uint64_t v63 = v47;
          unint64_t v64 = v140;
          v140(v147, v61, v53);
          uint64_t v65 = v56 + v59 + v60;
          uint64_t v66 = v146;
          v64(v146, v65, v53);
          sub_10026922C(&qword_10163F8D8, (void (*)(uint64_t))&type metadata accessor for UUID);
          LOBYTE(v60) = dispatch thunk of static Comparable.< infix(_:_:)();
          char v67 = *v144;
          (*v144)(v66, v53);
          v67(v62, v53);
          if ((v60 & 1) == 0) {
            break;
          }
          uint64_t v68 = *v63;
          if (!*v63) {
            goto LABEL_144;
          }
          Swift::Int v57 = v142;
          uint64_t v56 = v143;
          uint64_t v69 = (char *)(v68 + v143 + v59);
          unint64_t v70 = *v154;
          uint64_t v71 = v149;
          (*v154)(v151, v68 + v142 + v59, v149);
          uint64_t v53 = v71;
          swift_arrayInitWithTakeFrontToBack();
          v70(v69, (uint64_t)v151, v71);
          v59 -= v141;
          Swift::Int v22 = v153 + 1;
          Swift::Int v58 = v148;
          char v47 = v150;
          if (v148 == v153 + 1) {
            goto LABEL_49;
          }
        }
        Swift::Int v58 = v148;
        uint64_t v53 = v149;
        char v47 = v63;
        Swift::Int v57 = v142;
        uint64_t v56 = v143;
LABEL_49:
        Swift::Int v23 = v58 + 1;
        v56 += v141;
        v57 += v141;
        Swift::Int v22 = v137;
      }
      while (v23 != v135);
      Swift::Int v23 = v135;
      uint64_t v2 = v131;
      Swift::String v19 = v134;
    }
LABEL_57:
    if (v23 < v22) {
      goto LABEL_134;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v148 = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      Swift::String v19 = sub_100B729CC(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v74 = *((void *)v19 + 2);
    unint64_t v73 = *((void *)v19 + 3);
    unint64_t v21 = v74 + 1;
    if (v74 >= v73 >> 1) {
      Swift::String v19 = sub_100B729CC((char *)(v73 > 1), v74 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v21;
    uint64_t v75 = v19 + 32;
    uint64_t v76 = &v19[16 * v74 + 32];
    Swift::Int v77 = v148;
    *(void *)uint64_t v76 = v22;
    *((void *)v76 + 1) = v77;
    if (v74)
    {
      while (1)
      {
        unint64_t v78 = v21 - 1;
        if (v21 >= 4)
        {
          unint64_t v83 = &v75[16 * v21];
          uint64_t v84 = *((void *)v83 - 8);
          uint64_t v85 = *((void *)v83 - 7);
          BOOL v89 = __OFSUB__(v85, v84);
          uint64_t v86 = v85 - v84;
          if (v89) {
            goto LABEL_123;
          }
          uint64_t v88 = *((void *)v83 - 6);
          uint64_t v87 = *((void *)v83 - 5);
          BOOL v89 = __OFSUB__(v87, v88);
          uint64_t v81 = v87 - v88;
          char v82 = v89;
          if (v89) {
            goto LABEL_124;
          }
          unint64_t v90 = v21 - 2;
          unint64_t v91 = &v75[16 * v21 - 32];
          uint64_t v93 = *(void *)v91;
          uint64_t v92 = *((void *)v91 + 1);
          BOOL v89 = __OFSUB__(v92, v93);
          uint64_t v94 = v92 - v93;
          if (v89) {
            goto LABEL_126;
          }
          BOOL v89 = __OFADD__(v81, v94);
          uint64_t v95 = v81 + v94;
          if (v89) {
            goto LABEL_129;
          }
          if (v95 >= v86)
          {
            uint64_t v113 = &v75[16 * v78];
            uint64_t v115 = *(void *)v113;
            uint64_t v114 = *((void *)v113 + 1);
            BOOL v89 = __OFSUB__(v114, v115);
            uint64_t v116 = v114 - v115;
            if (v89) {
              goto LABEL_133;
            }
            BOOL v106 = v81 < v116;
            goto LABEL_94;
          }
        }
        else
        {
          if (v21 != 3)
          {
            uint64_t v107 = *((void *)v19 + 4);
            uint64_t v108 = *((void *)v19 + 5);
            BOOL v89 = __OFSUB__(v108, v107);
            uint64_t v100 = v108 - v107;
            char v101 = v89;
            goto LABEL_88;
          }
          uint64_t v80 = *((void *)v19 + 4);
          uint64_t v79 = *((void *)v19 + 5);
          BOOL v89 = __OFSUB__(v79, v80);
          uint64_t v81 = v79 - v80;
          char v82 = v89;
        }
        if (v82) {
          goto LABEL_125;
        }
        unint64_t v90 = v21 - 2;
        uint64_t v96 = &v75[16 * v21 - 32];
        uint64_t v98 = *(void *)v96;
        uint64_t v97 = *((void *)v96 + 1);
        BOOL v99 = __OFSUB__(v97, v98);
        uint64_t v100 = v97 - v98;
        char v101 = v99;
        if (v99) {
          goto LABEL_128;
        }
        uint64_t v102 = &v75[16 * v78];
        uint64_t v104 = *(void *)v102;
        uint64_t v103 = *((void *)v102 + 1);
        BOOL v89 = __OFSUB__(v103, v104);
        uint64_t v105 = v103 - v104;
        if (v89) {
          goto LABEL_131;
        }
        if (__OFADD__(v100, v105)) {
          goto LABEL_132;
        }
        if (v100 + v105 >= v81)
        {
          BOOL v106 = v81 < v105;
LABEL_94:
          if (v106) {
            unint64_t v78 = v90;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v101) {
          goto LABEL_127;
        }
        uint64_t v109 = &v75[16 * v78];
        uint64_t v111 = *(void *)v109;
        uint64_t v110 = *((void *)v109 + 1);
        BOOL v89 = __OFSUB__(v110, v111);
        uint64_t v112 = v110 - v111;
        if (v89) {
          goto LABEL_130;
        }
        if (v112 < v100) {
          goto LABEL_14;
        }
LABEL_96:
        unint64_t v117 = v78 - 1;
        if (v78 - 1 >= v21)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        if (!*v150) {
          goto LABEL_145;
        }
        uint64_t v118 = v19;
        uint64_t v119 = &v75[16 * v117];
        uint64_t v120 = *(void *)v119;
        uint64_t v121 = &v75[16 * v78];
        uint64_t v122 = *((void *)v121 + 1);
        sub_100266018(*v150 + v139[9] * *(void *)v119, *v150 + v139[9] * *(void *)v121, *v150 + v139[9] * v122, v138);
        if (v2) {
          goto LABEL_117;
        }
        if (v122 < v120) {
          goto LABEL_120;
        }
        if (v78 > *((void *)v118 + 2)) {
          goto LABEL_121;
        }
        uint64_t v123 = v118;
        *(void *)uint64_t v119 = v120;
        *(void *)&v75[16 * v117 + 8] = v122;
        unint64_t v124 = *((void *)v118 + 2);
        if (v78 >= v124) {
          goto LABEL_122;
        }
        Swift::String v19 = v123;
        unint64_t v21 = v124 - 1;
        memmove(&v75[16 * v78], v121 + 16, 16 * (v124 - 1 - v78));
        *((void *)v19 + 2) = v124 - 1;
        if (v124 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v21 = 1;
LABEL_14:
    Swift::Int v13 = v150[1];
    Swift::Int v20 = v148;
    uint64_t v5 = v139;
    if (v148 >= v13) {
      goto LABEL_106;
    }
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100265CF8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v31 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = __chkstk_darwin(v7);
  Swift::String v41 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  Swift::Int v37 = (char *)&v29 - v11;
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v36 = (char *)&v29 - v14;
  uint64_t v39 = a3;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void (**)(void, void, void))(v13 + 16);
    uint64_t v15 = v13 + 16;
    uint64_t v17 = *(void *)(v15 + 56);
    Swift::Int v32 = (uint64_t (**)(char *, uint64_t))(v15 - 8);
    Swift::String v33 = (void (*)(char *, uint64_t, uint64_t))v16;
    char v34 = a4;
    uint64_t v35 = v15;
    uint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v44 = v17 * (v39 - 1);
    uint64_t v38 = v17;
    uint64_t v43 = v17 * v39;
LABEL_5:
    uint64_t v18 = 0;
    uint64_t v42 = v31;
    while (1)
    {
      uint64_t v19 = *a4;
      uint64_t v20 = v43 + v18 + *a4;
      unint64_t v21 = v36;
      Swift::Int v22 = v33;
      v33(v36, v20, v7);
      Swift::Int v23 = v37;
      v22(v37, v44 + v18 + v19, v7);
      sub_10026922C(&qword_10163F8D8, (void (*)(uint64_t))&type metadata accessor for UUID);
      LOBYTE(v22) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v24 = *v32;
      (*v32)(v23, v7);
      uint64_t v25 = v21;
      a4 = v34;
      uint64_t result = v24(v25, v7);
      if ((v22 & 1) == 0)
      {
LABEL_4:
        v44 += v38;
        v43 += v38;
        if (++v39 == v30) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v26 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v27 = v26 + v44 + v18;
      uint64_t v28 = *v40;
      (*v40)(v41, v26 + v43 + v18, v7);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v27, v41, v7);
      v18 -= v38;
      if (v39 == ++v42) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100266018(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v56 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v55 = (char *)v49 - v12;
  uint64_t v57 = *(void *)(v13 + 72);
  if (!v57)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (a2 - a1 == 0x8000000000000000 && v57 == -1) {
    goto LABEL_68;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v57 == -1) {
    goto LABEL_69;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v57;
  unint64_t v60 = a1;
  unint64_t v59 = a4;
  uint64_t v16 = v14 / v57;
  if (v15 >= v14 / v57)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v57;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
        uint64_t v19 = v9;
      }
      else
      {
        uint64_t v19 = v9;
        if (a4 != a2) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      unint64_t v34 = a4 + v18;
      unint64_t v58 = a4 + v18;
      unint64_t v60 = a2;
      unint64_t v52 = a1;
      if (v18 >= 1 && a1 < a2)
      {
        unint64_t v36 = -v57;
        uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
        uint64_t v37 = v19 + 16;
        v49[1] = v37 - 8;
        uint64_t v50 = v38;
        unint64_t v53 = -v57;
        uint64_t v54 = v37;
        unint64_t v51 = a4;
        uint64_t v39 = v55;
        uint64_t v40 = (void (**)(char *, uint64_t))(v37 - 8);
        do
        {
          uint64_t v57 = a3 + v36;
          Swift::String v41 = v50;
          v50(v39, v34 + v36, v8);
          unint64_t v42 = a2 + v36;
          unint64_t v43 = a3;
          uint64_t v44 = v56;
          v41(v56, v42, v8);
          sub_10026922C(&qword_10163F8D8, (void (*)(uint64_t))&type metadata accessor for UUID);
          LOBYTE(v41) = dispatch thunk of static Comparable.< infix(_:_:)();
          Swift::Int v45 = *v40;
          (*v40)(v44, v8);
          v45(v39, v8);
          if (v41)
          {
            a3 = v57;
            if (v43 < a2 || v57 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v46 = v51;
            }
            else
            {
              unint64_t v46 = v51;
              if (v43 != a2) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            unint64_t v36 = v53;
            v60 += v53;
          }
          else
          {
            a3 = v57;
            unint64_t v47 = v58;
            v58 += v53;
            if (v43 < v47 || v57 >= v47)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v42 = a2;
              unint64_t v36 = v53;
              unint64_t v46 = v51;
            }
            else
            {
              unint64_t v46 = v51;
              if (v43 != v47) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v42 = a2;
              unint64_t v36 = v53;
            }
          }
          unint64_t v34 = v58;
          if (v58 <= v46) {
            break;
          }
          a2 = v42;
        }
        while (v42 > v52);
      }
      goto LABEL_66;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v57;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v53 = a4 + v17;
    unint64_t v58 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      unint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v54 = v9 + 16;
      Swift::Int v22 = (void (**)(char *, uint64_t))(v9 + 8);
      do
      {
        unint64_t v23 = a3;
        uint64_t v24 = v55;
        v21(v55, a2, v8);
        unint64_t v25 = a4;
        uint64_t v26 = v56;
        v21(v56, v25, v8);
        sub_10026922C(&qword_10163F8D8, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v28 = *v22;
        (*v22)(v26, v8);
        v28(v24, v8);
        unint64_t v29 = v60;
        if (v27)
        {
          unint64_t v30 = a2 + v57;
          if (v60 < a2 || v60 >= v30)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v23;
          }
          else
          {
            a3 = v23;
            if (v60 == a2) {
              unint64_t v29 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          unint64_t v32 = v59 + v57;
          if (v60 < v59 || v60 >= v32)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v23;
          }
          else
          {
            a3 = v23;
            if (v60 != v59) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v59 = v32;
          unint64_t v30 = a2;
        }
        unint64_t v60 = v29 + v57;
        a4 = v59;
        if (v59 >= v53) {
          break;
        }
        a2 = v30;
      }
      while (v30 < a3);
    }
LABEL_66:
    sub_100B72B84(&v60, &v59, (uint64_t *)&v58);
    return 1;
  }
LABEL_70:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10026664C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v39 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v12 = v6 + 16;
    uint64_t v14 = a1;
    uint64_t v15 = v13;
    uint64_t v16 = v14 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v42 = *(void *)(v12 + 56);
    unint64_t v43 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 32);
    uint64_t v40 = (void (**)(char *, uint64_t))(v12 - 8);
    Swift::String v41 = (void (**)(uint64_t, char *, uint64_t))(v12 + 16);
    v35[1] = v14;
    v35[2] = v2;
    swift_bridgeObjectRetain();
    unint64_t v47 = _swiftEmptyArrayStorage;
    uint64_t v44 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 40);
    v35[0] = (v12 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v17 = (uint64_t)v39;
    uint64_t v37 = a2;
    uint64_t v38 = v12;
    unint64_t v36 = v13;
    while (1)
    {
      v15(v10, v16, v5);
      uint64_t v18 = *v44;
      (*v44)(v10, 0, 1, v5);
      if ((*v43)(v10, 1, v5) == 1) {
        break;
      }
      (*v41)(v17, v10, v5);
      if (*(void *)(a2 + 16) && (unint64_t v19 = sub_1007240CC(v17), (v20 & 1) != 0))
      {
        unint64_t v21 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v19);
        uint64_t v22 = *v21;
        unint64_t v23 = v21[1];
        sub_1000361E0(*v21, v23);
        sub_10026922C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v46 = v24;
        v25._countAndFlagsBits = 8250;
        v25._object = (void *)0xE200000000000000;
        String.append(_:)(v25);
        v26._countAndFlagsBits = Data.hexString.getter();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        sub_10001CFB8(v22, v23);
        uint64_t v27 = v45;
        uint64_t v28 = v46;
        (*v40)(v39, v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v47 = sub_100A6E25C(0, v47[2] + 1, 1, v47);
        }
        unint64_t v30 = v47[2];
        unint64_t v29 = v47[3];
        if (v30 >= v29 >> 1) {
          unint64_t v47 = sub_100A6E25C((void *)(v29 > 1), v30 + 1, 1, v47);
        }
        uint64_t v31 = v47;
        v47[2] = v30 + 1;
        unint64_t v32 = &v31[2 * v30];
        v32[4] = v27;
        v32[5] = v28;
        a2 = v37;
        uint64_t v17 = (uint64_t)v39;
        uint64_t v15 = v36;
      }
      else
      {
        (*v40)((char *)v17, v5);
      }
      v16 += v42;
      if (!--v11)
      {
        v18(v10, 1, 1, v5);
        break;
      }
    }
  }
  else
  {
    Swift::String v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
    unint64_t v47 = _swiftEmptyArrayStorage;
    v33(v10, 1, 1, v5);
  }
  swift_bridgeObjectRelease();
  return v47;
}

uint64_t sub_100266A1C(uint64_t a1)
{
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  Swift::String v3 = (char *)v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(a1 + 16) || (uint64_t v6 = sub_100723FF4(v4, v5), (v7 & 1) == 0))
  {
    long long v50 = 0u;
    long long v51 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  sub_10012F428(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v51 + 1))
  {
LABEL_42:
    sub_10001DAB4((uint64_t)&v50, (uint64_t *)&unk_101644360);
    return 0;
  }
  sub_10000588C((uint64_t *)&unk_101665F00);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v49 + 64);
  uint64_t v42 = v49 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v49 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v43 = (unint64_t)(v9 + 63) >> 6;
  v41[1] = v44 + 16;
  uint64_t v45 = (void (**)(char *, uint64_t))(v44 + 8);
  uint64_t v46 = v49;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v13 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      int64_t v48 = v12;
      unint64_t v16 = v15 | (v12 << 6);
    }
    else
    {
      int64_t v17 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_48;
      }
      if (v17 >= v43)
      {
LABEL_45:
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v13;
      }
      unint64_t v18 = *(void *)(v42 + 8 * v17);
      int64_t v19 = v12 + 1;
      if (!v18)
      {
        int64_t v19 = v12 + 2;
        if (v12 + 2 >= v43) {
          goto LABEL_45;
        }
        unint64_t v18 = *(void *)(v42 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v12 + 3;
          if (v12 + 3 >= v43) {
            goto LABEL_45;
          }
          unint64_t v18 = *(void *)(v42 + 8 * v19);
          if (!v18)
          {
            int64_t v19 = v12 + 4;
            if (v12 + 4 >= v43) {
              goto LABEL_45;
            }
            unint64_t v18 = *(void *)(v42 + 8 * v19);
            if (!v18)
            {
              int64_t v19 = v12 + 5;
              if (v12 + 5 >= v43) {
                goto LABEL_45;
              }
              unint64_t v18 = *(void *)(v42 + 8 * v19);
              if (!v18)
              {
                uint64_t v20 = v12 + 6;
                if (v12 + 6 >= v43) {
                  goto LABEL_45;
                }
                unint64_t v18 = *(void *)(v42 + 8 * v20);
                if (!v18)
                {
                  while (1)
                  {
                    int64_t v19 = v20 + 1;
                    if (__OFADD__(v20, 1)) {
                      goto LABEL_49;
                    }
                    if (v19 >= v43) {
                      goto LABEL_45;
                    }
                    unint64_t v18 = *(void *)(v42 + 8 * v19);
                    ++v20;
                    if (v18) {
                      goto LABEL_29;
                    }
                  }
                }
                int64_t v19 = v12 + 6;
              }
            }
          }
        }
      }
LABEL_29:
      unint64_t v11 = (v18 - 1) & v18;
      int64_t v48 = v19;
      unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
    }
    unint64_t v21 = *(void **)(*(void *)(v46 + 48) + 8 * v16);
    uint64_t v22 = (uint64_t *)(*(void *)(v46 + 56) + 16 * v16);
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    id v25 = v21;
    sub_1000361E0(v23, v24);
    id v26 = v25;
    sub_1000361E0(v23, v24);
    sub_100BBC528((unint64_t)v3);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v50 = v13;
    unint64_t v29 = sub_1007240CC((uint64_t)v3);
    uint64_t v30 = v13[2];
    BOOL v31 = (v28 & 1) == 0;
    uint64_t v32 = v30 + v31;
    if (__OFADD__(v30, v31)) {
      break;
    }
    char v33 = v28;
    if (v13[3] >= v32)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v13 = (void *)v50;
        if (v28) {
          goto LABEL_8;
        }
      }
      else
      {
        sub_100E7FEE8();
        uint64_t v13 = (void *)v50;
        if (v33) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      sub_100E688BC(v32, isUniquelyReferenced_nonNull_native);
      unint64_t v34 = sub_1007240CC((uint64_t)v3);
      if ((v33 & 1) != (v35 & 1)) {
        goto LABEL_50;
      }
      unint64_t v29 = v34;
      uint64_t v13 = (void *)v50;
      if (v33)
      {
LABEL_8:
        uint64_t v14 = v13[7] + 16 * v29;
        sub_10001CFB8(*(void *)v14, *(void *)(v14 + 8));
        *(void *)uint64_t v14 = v23;
        *(void *)(v14 + 8) = v24;
        goto LABEL_9;
      }
    }
    v13[(v29 >> 6) + 8] |= 1 << v29;
    (*(void (**)(unint64_t, char *, uint64_t))(v44 + 16))(v13[6] + *(void *)(v44 + 72) * v29, v3, v47);
    unint64_t v36 = (uint64_t *)(v13[7] + 16 * v29);
    *unint64_t v36 = v23;
    v36[1] = v24;
    uint64_t v37 = v13[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_47;
    }
    v13[2] = v39;
LABEL_9:
    swift_bridgeObjectRelease();
    (*v45)(v3, v47);

    sub_10001CFB8(v23, v24);
    int64_t v12 = v48;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100266ED4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15) {
    return 512;
  }
  unsigned __int8 v5 = Data.subscript.getter();
  char v6 = Data.subscript.getter();
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x100266FE4);
      }
      uint64_t v7 = HIDWORD(a1) - (int)a1;
LABEL_8:
      if (v7 < 2) {
        goto LABEL_12;
      }
      uint64_t v10 = Data._Representation.subscript.getter();
      sub_10088540C(v10, v11);
      sub_100037A24(a1, a2);
      return v5 | ((unint64_t)(v6 & 1) << 8);
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      uint64_t v7 = v8 - v9;
      if (!__OFSUB__(v8, v9)) {
        goto LABEL_8;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_12;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_8;
  }
}

unint64_t sub_100266FF4(uint64_t a1, char a2, void *a3)
{
  LOBYTE(v4) = a2;
  uint64_t v6 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6) {
    return swift_bridgeObjectRelease();
  }
  unsigned __int8 v7 = *(unsigned char *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v8 = *(void *)(a1 + 48);
  sub_1000361E0(v9, v8);
  if (v8 >> 60 == 15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v10 = (void *)*a3;
  unint64_t result = sub_1007245A4(v7);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  BOOL v15 = __OFADD__(v13, v14);
  uint64_t v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v17 = v12;
  if (v10[3] < v16)
  {
    sub_100E68D08(v16, v4 & 1);
    unint64_t result = sub_1007245A4(v7);
    if ((v17 & 1) == (v18 & 1)) {
      goto LABEL_8;
    }
LABEL_6:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  if ((v4 & 1) == 0)
  {
    unint64_t v21 = result;
    sub_100E7FF08();
    unint64_t result = v21;
    int64_t v19 = (void *)*a3;
    if (v17)
    {
LABEL_9:
      uint64_t v20 = v19[7] + 16 * result;
      sub_10001CFB8(*(void *)v20, *(void *)(v20 + 8));
      *(void *)uint64_t v20 = v9;
      *(void *)(v20 + 8) = v8;
      if (--v6)
      {
LABEL_15:
        uint64_t v4 = (unint64_t *)(a1 + 72);
        do
        {
          unsigned __int8 v7 = *((unsigned char *)v4 - 16);
          uint64_t v9 = *(v4 - 1);
          unint64_t v8 = *v4;
          sub_1000361E0(v9, *v4);
          if (v8 >> 60 == 15) {
            break;
          }
          id v26 = (void *)*a3;
          unint64_t result = sub_1007245A4(v7);
          uint64_t v28 = v26[2];
          BOOL v29 = (v27 & 1) == 0;
          BOOL v15 = __OFADD__(v28, v29);
          uint64_t v30 = v28 + v29;
          if (v15) {
            goto LABEL_25;
          }
          char v17 = v27;
          if (v26[3] < v30)
          {
            sub_100E68D08(v30, 1);
            unint64_t result = sub_1007245A4(v7);
            if ((v17 & 1) != (v31 & 1)) {
              goto LABEL_6;
            }
          }
          uint64_t v32 = (void *)*a3;
          if (v17)
          {
            uint64_t v25 = v32[7] + 16 * result;
            sub_10001CFB8(*(void *)v25, *(void *)(v25 + 8));
            *(void *)uint64_t v25 = v9;
            *(void *)(v25 + 8) = v8;
          }
          else
          {
            v32[(result >> 6) + 8] |= 1 << result;
            *(unsigned char *)(v32[6] + result) = v7;
            char v33 = (uint64_t *)(v32[7] + 16 * result);
            *char v33 = v9;
            v33[1] = v8;
            uint64_t v34 = v32[2];
            BOOL v15 = __OFADD__(v34, 1);
            uint64_t v35 = v34 + 1;
            if (v15) {
              goto LABEL_26;
            }
            v32[2] = v35;
          }
          v4 += 3;
        }
        while (--v6);
      }
      return swift_bridgeObjectRelease();
    }
    goto LABEL_12;
  }
LABEL_8:
  int64_t v19 = (void *)*a3;
  if (v17) {
    goto LABEL_9;
  }
LABEL_12:
  v19[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(v19[6] + result) = v7;
  uint64_t v22 = (uint64_t *)(v19[7] + 16 * result);
  *uint64_t v22 = v9;
  v22[1] = v8;
  uint64_t v23 = v19[2];
  BOOL v15 = __OFADD__(v23, 1);
  uint64_t v24 = v23 + 1;
  if (!v15)
  {
    v19[2] = v24;
    if (--v6) {
      goto LABEL_15;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_100267268(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        swift_once();
LABEL_19:
        uint64_t v19 = type metadata accessor for Logger();
        sub_100010324(v19, (uint64_t)qword_10170F3B8);
        sub_1000361E0(a1, a2);
        sub_1000361E0(a1, a2);
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v10, v11))
        {
          char v12 = (uint8_t *)swift_slowAlloc();
          char v33 = (void *)swift_slowAlloc();
          *(_DWORD *)char v12 = 136446210;
          uint64_t v20 = Data.hexString.getter();
          sub_1008FA0F0(v20, v21, (uint64_t *)&v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001CFB8(a1, a2);
          sub_10001CFB8(a1, a2);
          BOOL v15 = "TLV too large: %{public}s";
          goto LABEL_27;
        }
LABEL_28:
        sub_10001CFB8(a1, a2);
        sub_10001CFB8(a1, a2);
        goto LABEL_29;
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 < 2)
      {
LABEL_7:
        if (qword_1016374D0 != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        sub_100010324(v9, (uint64_t)qword_10170F3B8);
        sub_1000361E0(a1, a2);
        sub_1000361E0(a1, a2);
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v10, v11))
        {
          char v12 = (uint8_t *)swift_slowAlloc();
          char v33 = (void *)swift_slowAlloc();
          *(_DWORD *)char v12 = 136446210;
          uint64_t v13 = Data.hexString.getter();
          sub_1008FA0F0(v13, v14, (uint64_t *)&v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001CFB8(a1, a2);
          sub_10001CFB8(a1, a2);
          BOOL v15 = "No TLV header: %{public}s";
LABEL_27:
          _os_log_impl((void *)&_mh_execute_header, v10, v11, v15, v12, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
LABEL_29:

          return sub_10093FB44((uint64_t)_swiftEmptyArrayStorage);
        }
        goto LABEL_28;
      }
      if (v2)
      {
        if (v2 == 1)
        {
          LODWORD(v16) = HIDWORD(a1) - a1;
          if (!__OFSUB__(HIDWORD(a1), a1))
          {
            uint64_t v16 = (int)v16;
            goto LABEL_17;
          }
          __break(1u);
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
        uint64_t v18 = *(void *)(a1 + 16);
        uint64_t v17 = *(void *)(a1 + 24);
        BOOL v8 = __OFSUB__(v17, v18);
        uint64_t v16 = v17 - v18;
        if (v8) {
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v16 = BYTE6(a2);
      }
LABEL_17:
      if (v16 > 31)
      {
        if (qword_1016374D0 == -1) {
          goto LABEL_19;
        }
        goto LABEL_42;
      }
      if (Data.subscript.getter() != 76 || Data.subscript.getter())
      {
        if (qword_1016374D0 != -1) {
          swift_once();
        }
        uint64_t v22 = type metadata accessor for Logger();
        sub_100010324(v22, (uint64_t)qword_10170F3B8);
        sub_1000361E0(a1, a2);
        sub_1000361E0(a1, a2);
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v10, v11))
        {
          char v12 = (uint8_t *)swift_slowAlloc();
          char v33 = (void *)swift_slowAlloc();
          *(_DWORD *)char v12 = 136446210;
          uint64_t v23 = Data.hexString.getter();
          sub_1008FA0F0(v23, v24, (uint64_t *)&v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001CFB8(a1, a2);
          sub_10001CFB8(a1, a2);
          BOOL v15 = "Not parsing non-Apple TLV data: %{public}s";
          goto LABEL_27;
        }
        goto LABEL_28;
      }
      if (v2)
      {
        if (v2 == 1) {
          uint64_t v26 = a1 >> 32;
        }
        else {
          uint64_t v26 = *(void *)(a1 + 24);
        }
      }
      else
      {
        uint64_t v26 = BYTE6(a2);
      }
      if (v26 < 2)
      {
LABEL_45:
        __break(1u);
        JUMPOUT(0x100267840);
      }
      uint64_t v27 = Data._Representation.subscript.getter();
      unint64_t v29 = v28;
      uint64_t v30 = sub_100ED00B4(v27, v28);
      sub_10001CFB8(v27, v29);
      char v31 = sub_100262D60((uint64_t)v30, 0);
      swift_release();
      if (v31[2])
      {
        sub_10000588C(&qword_10163F8E0);
        uint64_t v32 = (void *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        uint64_t v32 = _swiftEmptyDictionarySingleton;
      }
      char v33 = v32;
      sub_100266FF4((uint64_t)v31, 1, &v33);
      swift_bridgeObjectRelease();
      return (unint64_t)v33;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_41;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100267850(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v4 - 8);
  uint64_t v183 = (uint64_t)&v170 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MACAddress();
  uint64_t v179 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v170 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  os_log_type_t v11 = (char *)&v170 - v10;
  unint64_t v185 = type metadata accessor for Logger();
  uint64_t v181 = *(void *)(v185 - 8);
  __chkstk_darwin(v185);
  unint64_t v180 = (unint64_t)&v170 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v170 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v170 - v18;
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v21 = sub_100266A1C(v20);
  uint64_t v184 = a2;
  uint64_t v178 = v9;
  if (v21)
  {
    uint64_t v22 = v21;
    unint64_t v182 = a1;
    os_log_type_t v176 = v11;
    uint64_t v177 = v6;
    if (qword_101636910 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_100010324(v13, (uint64_t)qword_10170D9F0);
    unint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v24(v19, v23, v13);
    if (*(void *)(v22 + 16) && (unint64_t v25 = sub_1007240CC((uint64_t)v19), (v26 & 1) != 0))
    {
      uint64_t v27 = (uint64_t *)(*(void *)(v22 + 56) + 16 * v25);
      uint64_t v29 = *v27;
      unint64_t v28 = v27[1];
      sub_1000361E0(*v27, v28);
    }
    else
    {
      uint64_t v29 = 0;
      unint64_t v28 = 0xF000000000000000;
    }
    uint64_t v30 = *(void (**)(char *, uint64_t))(v14 + 8);
    v30(v19, v13);
    if ((sub_100266ED4(v29, v28) & 0xFF00) == 0x200)
    {
      if (qword_101636918 != -1) {
        swift_once();
      }
      uint64_t v33 = sub_100010324(v13, (uint64_t)qword_10170DA08);
      v24(v17, v33, v13);
      if (*(void *)(v22 + 16) && (unint64_t v34 = sub_1007240CC((uint64_t)v17), (v35 & 1) != 0))
      {
        unint64_t v36 = (uint64_t *)(*(void *)(v22 + 56) + 16 * v34);
        uint64_t v37 = *v36;
        unint64_t v38 = v36[1];
        sub_1000361E0(*v36, v38);
      }
      else
      {
        uint64_t v37 = 0;
        unint64_t v38 = 0xF000000000000000;
      }
      v30(v17, v13);
      if ((sub_100266ED4(v37, v38) & 0xFF00) == 0x200)
      {
        swift_bridgeObjectRelease();
        uint64_t v58 = v185;
        if (qword_1016374D0 != -1) {
          swift_once();
        }
        uint64_t v59 = sub_100010324(v58, (uint64_t)qword_10170F3B8);
        unint64_t v61 = v180;
        uint64_t v60 = v181;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v181 + 16))(v180, v59, v58);
        swift_bridgeObjectRetain();
        uint64_t v62 = Logger.logObject.getter();
        os_log_type_t v63 = static os_log_type_t.error.getter();
        BOOL v64 = os_log_type_enabled(v62, v63);
        a2 = v184;
        if (v64)
        {
          uint64_t v65 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v187 = swift_slowAlloc();
          *(_DWORD *)uint64_t v65 = 136446210;
          if (*(void *)(v22 + 16))
          {
            uint64_t v66 = a2;
            swift_bridgeObjectRetain_n();
            *(void *)&long long v188 = sub_10070FB1C(v22);
            sub_10026503C((void **)&v188);
            swift_bridgeObjectRelease();
            uint64_t v67 = v188;
            swift_bridgeObjectRetain();
            uint64_t v68 = sub_10026664C(v67, v22);
            swift_release();
            swift_bridgeObjectRelease();
            *(void *)&long long v188 = 91;
            *((void *)&v188 + 1) = 0xE100000000000000;
            uint64_t v186 = v68;
            sub_10000588C(&qword_101654A30);
            sub_100062734((unint64_t *)&qword_10163A100, &qword_101654A30);
            uint64_t v69 = BidirectionalCollection<>.joined(separator:)();
            uint64_t v71 = v70;
            swift_bridgeObjectRelease();
            v72._countAndFlagsBits = v69;
            v72._object = v71;
            String.append(_:)(v72);
            swift_bridgeObjectRelease();
            v73._countAndFlagsBits = 93;
            v73._object = (void *)0xE100000000000000;
            String.append(_:)(v73);
            swift_bridgeObjectRelease();
            unint64_t v75 = *((void *)&v188 + 1);
            uint64_t v74 = v188;
            a2 = v66;
            uint64_t v58 = v185;
          }
          else
          {
            unint64_t v75 = 0xE200000000000000;
            uint64_t v74 = 23899;
          }
          *(void *)&long long v188 = sub_1008FA0F0(v74, v75, (uint64_t *)&v187);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "Unhandled serviceData: %{public}s", v65, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(unint64_t, uint64_t))(v181 + 8))(v180, v58);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(unint64_t, uint64_t))(v60 + 8))(v61, v58);
        }
        goto LABEL_58;
      }
    }
    unint64_t v51 = v32;
    uint64_t v181 = v31;
    swift_bridgeObjectRelease();
    uint64_t v45 = 0;
    unint64_t v46 = 0xC000000000000000;
    a2 = v184;
    uint64_t v44 = v185;
    unint64_t v41 = v182;
    goto LABEL_35;
  }
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v41 = a1;
  if (!*(void *)(a1 + 16) || (uint64_t v42 = sub_100723FF4(v39, v40), (v43 & 1) == 0))
  {
    long long v188 = 0u;
    long long v189 = 0u;
    swift_bridgeObjectRelease();
    uint64_t v44 = v185;
    goto LABEL_22;
  }
  sub_10012F428(*(void *)(a1 + 56) + 32 * v42, (uint64_t)&v188);
  swift_bridgeObjectRelease();
  uint64_t v44 = v185;
  if (!*((void *)&v189 + 1))
  {
LABEL_22:
    sub_10001DAB4((uint64_t)&v188, (uint64_t *)&unk_101644360);
    goto LABEL_23;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_23:
    if (qword_1016374D0 != -1) {
      swift_once();
    }
    sub_100010324(v44, (uint64_t)qword_10170F3B8);
    swift_bridgeObjectRetain();
    unint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v188 = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v55 = Dictionary.description.getter();
      unint64_t v57 = v56;
      swift_bridgeObjectRelease();
      *(void *)&long long v187 = sub_1008FA0F0(v55, v57, (uint64_t *)&v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Missing critical data in %{public}s", v54, 0xCu);
      a2 = v184;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_58;
  }
  os_log_type_t v176 = v11;
  uint64_t v177 = v6;
  unint64_t v46 = *((void *)&v187 + 1);
  uint64_t v45 = v187;
  sub_1000361E0(v187, *((unint64_t *)&v187 + 1));
  unint64_t v47 = sub_100267268(v45, v46);
  if (!*(void *)(v47 + 16) || (unint64_t v48 = sub_1007245A4(0x12u), (v49 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1016374D0 != -1) {
      swift_once();
    }
    sub_100010324(v44, (uint64_t)qword_10170F3B8);
    uint64_t v110 = Logger.logObject.getter();
    os_log_type_t v111 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v110, v111))
    {
      sub_10001CFB8(v45, v46);
      sub_10001CFB8(v45, v46);

      goto LABEL_58;
    }
    uint64_t v112 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v112 = 0;
    _os_log_impl((void *)&_mh_execute_header, v110, v111, "No Type18 payload found!", v112, 2u);
    swift_slowDealloc();
    sub_10001CFB8(v45, v46);

    uint64_t v99 = v45;
    unint64_t v100 = v46;
LABEL_57:
    sub_10001CFB8(v99, v100);
LABEL_58:
    uint64_t v101 = 0;
    unint64_t v102 = 0;
    uint64_t v103 = 0;
    unint64_t v104 = 0;
    uint64_t v105 = 0;
    unint64_t v106 = 0xF000000000000000;
    goto LABEL_59;
  }
  long long v50 = (uint64_t *)(*(void *)(v47 + 56) + 16 * v48);
  unint64_t v51 = v50[1];
  uint64_t v181 = *v50;
  sub_1000361E0(v181, v51);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v45, v46);
LABEL_35:
  uint64_t v76 = v183;
  uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v41 + 16))
  {
    uint64_t v79 = sub_100723FF4(v77, v78);
    if (v80)
    {
      sub_10012F428(*(void *)(v41 + 56) + 32 * v79, (uint64_t)&v188);
    }
    else
    {
      long long v188 = 0u;
      long long v189 = 0u;
    }
    uint64_t v76 = v183;
  }
  else
  {
    long long v188 = 0u;
    long long v189 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v189 + 1))
  {
    sub_10001DAB4((uint64_t)&v188, (uint64_t *)&unk_101644360);
    goto LABEL_50;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_50:
    if (qword_1016374D0 != -1) {
      swift_once();
    }
    sub_100010324(v44, (uint64_t)qword_10170F3B8);
    swift_bridgeObjectRetain();
    unint64_t v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v90, v91))
    {
      swift_bridgeObjectRelease_n();

      sub_10001CFB8(v45, v46);
      uint64_t v99 = v181;
      unint64_t v100 = v51;
      goto LABEL_57;
    }
    uint64_t v92 = (uint8_t *)swift_slowAlloc();
    uint64_t v93 = swift_slowAlloc();
    uint64_t v183 = v45;
    *(void *)&long long v188 = v93;
    unint64_t v185 = v51;
    *(_DWORD *)uint64_t v92 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v94 = Dictionary.description.getter();
    unint64_t v182 = v46;
    unint64_t v96 = v95;
    swift_bridgeObjectRelease();
    *(void *)&long long v187 = sub_1008FA0F0(v94, v96, (uint64_t *)&v188);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "Missing critical data [CBAdvertisementDataDeviceAddress] in %{public}s", v92, 0xCu);
    a2 = v184;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_54;
  }
  unint64_t v185 = v51;
  long long v81 = v187;
  sub_1000361E0(v187, *((unint64_t *)&v187 + 1));
  MACAddress.init(data:type:)();
  uint64_t v82 = v179;
  uint64_t v83 = v177;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v179 + 48))(v76, 1, v177) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10001DAB4(v76, (uint64_t *)&unk_1016477E0);
    if (qword_1016374D0 != -1) {
      swift_once();
    }
    sub_100010324(v44, (uint64_t)qword_10170F3B8);
    sub_1000361E0(v81, *((unint64_t *)&v81 + 1));
    sub_1000361E0(v81, *((unint64_t *)&v81 + 1));
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v84, v85))
    {

      sub_10001CFB8(v81, *((unint64_t *)&v81 + 1));
      sub_10001CFB8(v81, *((unint64_t *)&v81 + 1));
      sub_10001CFB8(v81, *((unint64_t *)&v81 + 1));
      uint64_t v97 = v45;
      unint64_t v98 = v46;
      goto LABEL_55;
    }
    uint64_t v86 = (uint8_t *)swift_slowAlloc();
    uint64_t v87 = swift_slowAlloc();
    uint64_t v183 = v45;
    *(void *)&long long v188 = v87;
    *(_DWORD *)uint64_t v86 = 136446210;
    uint64_t v88 = Data.hexString.getter();
    unint64_t v182 = v46;
    *(void *)&long long v187 = sub_1008FA0F0(v88, v89, (uint64_t *)&v188);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v81, *((unint64_t *)&v81 + 1));
    sub_10001CFB8(v81, *((unint64_t *)&v81 + 1));
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "Not a MAC address: %{public}s", v86, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10001CFB8(v81, *((unint64_t *)&v81 + 1));
LABEL_54:
    unint64_t v98 = v182;
    uint64_t v97 = v183;
LABEL_55:
    sub_10001CFB8(v97, v98);
    uint64_t v99 = v181;
    unint64_t v100 = v185;
    goto LABEL_57;
  }
  unint64_t v180 = *((void *)&v81 + 1);
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(v176, v76, v83);
  unint64_t v107 = v185;
  unint64_t v108 = v185 >> 62;
  switch(v185 >> 62)
  {
    case 1uLL:
      LODWORD(v109) = HIDWORD(v181) - v181;
      if (__OFSUB__(HIDWORD(v181), v181))
      {
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
        swift_release();
        __break(1u);
        goto LABEL_124;
      }
      uint64_t v109 = (int)v109;
LABEL_73:
      switch(v109)
      {
        case 2:
          int v116 = 0;
          break;
        case 25:
          int v116 = 2;
          break;
        case 24:
          int v116 = 1;
          break;
        default:
LABEL_77:
          swift_bridgeObjectRelease();
          if (qword_1016374D0 != -1) {
            swift_once();
          }
          sub_100010324(v44, (uint64_t)qword_10170F3B8);
          uint64_t v117 = v181;
          sub_1000361E0(v181, v107);
          uint64_t v118 = Logger.logObject.getter();
          os_log_type_t v119 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v118, v119))
          {
            uint64_t v120 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v120 = 134217984;
            uint64_t v121 = v120;
            uint64_t v122 = 0;
            switch((int)v108)
            {
              case 1:
                LODWORD(v122) = HIDWORD(v181) - v181;
                if (__OFSUB__(HIDWORD(v181), v181)) {
                  goto LABEL_122;
                }
                uint64_t v122 = (int)v122;
LABEL_118:
                *(void *)&long long v188 = v122;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                uint64_t v117 = v181;
                sub_10001CFB8(v181, v107);
                _os_log_impl((void *)&_mh_execute_header, v118, v119, "Invalid payload length %ld", v121, 0xCu);
                swift_slowDealloc();

                uint64_t v82 = v179;
                break;
              case 2:
                uint64_t v169 = *(void *)(v181 + 16);
                uint64_t v168 = *(void *)(v181 + 24);
                BOOL v115 = __OFSUB__(v168, v169);
                uint64_t v122 = v168 - v169;
                if (!v115) {
                  goto LABEL_118;
                }
                goto LABEL_123;
              case 3:
                goto LABEL_118;
              default:
                uint64_t v122 = BYTE6(v107);
                goto LABEL_118;
            }
          }
          else
          {

            sub_10001CFB8(v117, v107);
          }
          sub_10001CFB8(v81, *((unint64_t *)&v81 + 1));
          sub_10001CFB8(v45, v46);
          sub_10001CFB8(v117, v107);
          (*(void (**)(char *, uint64_t))(v82 + 8))(v176, v177);
          goto LABEL_58;
      }
      uint64_t v174 = Data.subscript.getter();
      uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v41 + 16) && (uint64_t v125 = sub_100723FF4(v123, v124), (v126 & 1) != 0))
      {
        sub_10012F428(*(void *)(v41 + 56) + 32 * v125, (uint64_t)&v188);
      }
      else
      {
        long long v188 = 0u;
        long long v189 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v182 = v46;
      if (*((void *)&v189 + 1))
      {
        if (swift_dynamicCast())
        {
          uint64_t v103 = v187;
          goto LABEL_94;
        }
      }
      else
      {
        sub_10001DAB4((uint64_t)&v188, (uint64_t *)&unk_101644360);
      }
      uint64_t v103 = 0;
LABEL_94:
      uint64_t v175 = v81;
      if (v116)
      {
        uint64_t v183 = v45;
        if (v116 != 1)
        {
          uint64_t v149 = Data.subscript.getter();
          uint64_t v172 = Data.subscript.getter();
          LOBYTE(v186) = 0;
          uint64_t v150 = Data._Representation.subscript.getter();
          unint64_t v152 = v151;
          Swift::Int v153 = v178;
          (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v178, v176, v177);
          uint64_t v154 = MACAddress.data.getter();
          unint64_t v156 = v155;
          *(void *)&long long v188 = v154;
          *((void *)&v188 + 1) = v155;
          sub_1000361E0(v154, v155);
          Data.subscript.getter();
          sub_10001CFB8(v154, v156);
          uint64_t v173 = v149;
          Data._Representation.subscript.setter();
          long long v157 = v188;
          long long v187 = v188;
          sub_1000361E0(v188, *((unint64_t *)&v188 + 1));
          sub_1000361E0(v157, *((unint64_t *)&v157 + 1));
          sub_1000361E0(v150, v152);
          sub_100A42CBC(v150, v152);
          uint64_t v171 = v150;
          uint64_t v158 = v150;
          unint64_t v159 = v152;
          sub_10001CFB8(v158, v152);
          uint64_t v139 = *(void (**)(char *, uint64_t))(v82 + 8);
          v139(v153, v177);
          sub_10001CFB8(v157, *((unint64_t *)&v157 + 1));
          sub_10001CFB8(v188, *((unint64_t *)&v188 + 1));
          if (v108)
          {
            if (v108 == 1) {
              uint64_t v160 = v181 >> 32;
            }
            else {
              uint64_t v160 = *(void *)(v181 + 24);
            }
          }
          else
          {
            uint64_t v160 = BYTE6(v185);
          }
          if (v160 >= 23)
          {
            unint64_t v102 = *((void *)&v187 + 1);
            uint64_t v101 = v187;
            sub_1000361E0(v187, *((unint64_t *)&v187 + 1));
            uint64_t v164 = v181;
            unint64_t v165 = v185;
            uint64_t v105 = Data._Representation.subscript.getter();
            unint64_t v106 = v166;
            sub_10001CFB8(v164, v165);
            sub_10001CFB8(v101, v102);
            sub_10001CFB8(v171, v159);
            sub_10001CFB8(v175, v180);
            sub_10001CFB8(v183, v182);
            unint64_t v148 = (unint64_t)v172 << 16;
            a2 = v184;
            goto LABEL_112;
          }
LABEL_125:
          __break(1u);
          JUMPOUT(0x10026901CLL);
        }
        uint64_t v127 = Data.subscript.getter();
        LOBYTE(v186) = 1;
        uint64_t v128 = Data._Representation.subscript.getter();
        uint64_t v171 = v108;
        uint64_t v129 = v128;
        unint64_t v131 = v130;
        long long v132 = v178;
        (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v178, v176, v177);
        uint64_t v133 = MACAddress.data.getter();
        unint64_t v135 = v134;
        *(void *)&long long v188 = v133;
        *((void *)&v188 + 1) = v134;
        sub_1000361E0(v133, v134);
        Data.subscript.getter();
        sub_10001CFB8(v133, v135);
        uint64_t v173 = v127;
        Data._Representation.subscript.setter();
        long long v136 = v188;
        long long v187 = v188;
        sub_1000361E0(v188, *((unint64_t *)&v188 + 1));
        sub_1000361E0(v136, *((unint64_t *)&v136 + 1));
        sub_1000361E0(v129, v131);
        sub_100A42CBC(v129, v131);
        uint64_t v172 = v129;
        uint64_t v137 = v129;
        int v138 = v171;
        unint64_t v170 = v131;
        sub_10001CFB8(v137, v131);
        uint64_t v139 = *(void (**)(char *, uint64_t))(v82 + 8);
        v139(v132, v177);
        sub_10001CFB8(v136, *((unint64_t *)&v136 + 1));
        sub_10001CFB8(v188, *((unint64_t *)&v188 + 1));
        if (v138)
        {
          if (v138 == 1) {
            uint64_t v140 = v181 >> 32;
          }
          else {
            uint64_t v140 = *(void *)(v181 + 24);
          }
        }
        else
        {
          uint64_t v140 = BYTE6(v185);
        }
        if (v140 >= 23)
        {
          unint64_t v102 = *((void *)&v187 + 1);
          uint64_t v101 = v187;
          sub_1000361E0(v187, *((unint64_t *)&v187 + 1));
          uint64_t v161 = v181;
          unint64_t v162 = v185;
          uint64_t v105 = Data._Representation.subscript.getter();
          unint64_t v106 = v163;
          sub_10001CFB8(v161, v162);
          sub_10001CFB8(v101, v102);
          sub_10001CFB8(v172, v170);
          sub_10001CFB8(v175, v180);
          sub_10001CFB8(v183, v182);
          unint64_t v148 = 0;
          goto LABEL_112;
        }
LABEL_124:
        __break(1u);
        goto LABEL_125;
      }
      uint64_t v141 = Data.subscript.getter();
      LOBYTE(v186) = 1;
      uint64_t v143 = v177;
      Swift::Int v142 = v178;
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v178, v176, v177);
      uint64_t v144 = MACAddress.data.getter();
      unint64_t v146 = v145;
      *(void *)&long long v188 = v144;
      *((void *)&v188 + 1) = v145;
      sub_1000361E0(v144, v145);
      Data.subscript.getter();
      sub_10001CFB8(v144, v146);
      uint64_t v173 = v141;
      Data._Representation.subscript.setter();
      uint64_t v147 = v143;
      uint64_t v139 = *(void (**)(char *, uint64_t))(v82 + 8);
      v139(v142, v147);
      sub_10001CFB8(v175, v180);
      sub_10001CFB8(v45, v182);
      sub_10001CFB8(v181, v185);
      unint64_t v148 = 0;
      uint64_t v105 = 0;
      uint64_t v101 = v188;
      unint64_t v102 = *((void *)&v188 + 1) | 0x2000000000000000;
      unint64_t v106 = 0xC000000000000000;
LABEL_112:
      v139(v176, v177);
      uint64_t v167 = 0x1000000;
      if (!(_BYTE)v186) {
        uint64_t v167 = 0;
      }
      unint64_t v104 = v167 | v174 | ((unint64_t)v173 << 8) | v148;
LABEL_59:
      *a2 = v101;
      a2[1] = v102;
      a2[2] = v103;
      a2[3] = v104;
      a2[4] = v105;
      a2[5] = v106;
      return;
    case 2uLL:
      uint64_t v114 = *(void *)(v181 + 16);
      uint64_t v113 = *(void *)(v181 + 24);
      BOOL v115 = __OFSUB__(v113, v114);
      uint64_t v109 = v113 - v114;
      if (!v115) {
        goto LABEL_73;
      }
      goto LABEL_121;
    case 3uLL:
      goto LABEL_77;
    default:
      uint64_t v109 = BYTE6(v185);
      goto LABEL_73;
  }
}

uint64_t sub_10026903C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100269074(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a6 >> 60 != 15)
  {
    sub_1001A1AD8(result, a2);
    return sub_10001CFB8(a5, a6);
  }
  return result;
}

_OWORD *sub_1002690C4(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

uint64_t *sub_1002690D4(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100269104(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
  {
    char v5 = Data.subscript.getter();
    switch(a2 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(a1), a1))
        {
          __break(1u);
LABEL_12:
          __break(1u);
        }
        else
        {
          uint64_t v6 = HIDWORD(a1) - (int)a1;
LABEL_8:
          if (v6 >= 1)
          {
            BOOL v2 = (v5 & 1) == 0;
            uint64_t v9 = Data._Representation.subscript.getter();
            sub_10088540C(v9, v10);
            sub_100037A24(a1, a2);
            return v2;
          }
        }
LABEL_13:
        __break(1u);
        JUMPOUT(0x100269200);
      case 2uLL:
        uint64_t v8 = *(void *)(a1 + 16);
        uint64_t v7 = *(void *)(a1 + 24);
        uint64_t v6 = v7 - v8;
        if (!__OFSUB__(v7, v8)) {
          goto LABEL_8;
        }
        goto LABEL_12;
      case 3uLL:
        goto LABEL_13;
      default:
        uint64_t v6 = BYTE6(a2);
        goto LABEL_8;
    }
  }
  return 2;
}

uint64_t sub_100269210(uint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xFF00) != 0x200) {
    return sub_10001CFB8(a2, a3);
  }
  return result;
}

uint64_t sub_10026922C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100269274()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002692AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002692D8(uint64_t a1)
{
  return a1;
}

void *sub_100269304(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(unsigned char *)(a1 + 2) = *((unsigned char *)a2 + 2);
    uint64_t v7 = a2 + 1;
    unint64_t v8 = a2[2];
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v7;
    }
    else
    {
      uint64_t v10 = *v7;
      sub_1000361E0(*v7, a2[2]);
      v4[1] = v10;
      v4[2] = v8;
    }
    os_log_type_t v11 = (int *)type metadata accessor for DiscoveredObject(0);
    uint64_t v12 = v11[7];
    uint64_t v13 = (char *)v4 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    uint64_t v15 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = v11[8];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (uint64_t)a2 + v16;
    uint64_t v19 = type metadata accessor for MACAddress();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    uint64_t v20 = v11[9];
    uint64_t v21 = (void *)((char *)v4 + v20);
    uint64_t v22 = (uint64_t *)((char *)a2 + v20);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    sub_1001A1790(*v22, v24);
    *uint64_t v21 = v23;
    v21[1] = v24;
    *(void *)((char *)v4 + v11[10]) = *(uint64_t *)((char *)a2 + v11[10]);
    *((unsigned char *)v4 + v11[11]) = *((unsigned char *)a2 + v11[11]);
    *((unsigned char *)v4 + v11[12]) = *((unsigned char *)a2 + v11[12]);
    *(_WORD *)((char *)v4 + v11[13]) = *(_WORD *)((char *)a2 + v11[13]);
    uint64_t v25 = v11[14];
    char v26 = (void *)((char *)v4 + v25);
    uint64_t v27 = (uint64_t *)((char *)a2 + v25);
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    sub_1000361E0(*v27, v29);
    *char v26 = v28;
    v26[1] = v29;
    *(_DWORD *)((char *)v4 + v11[15]) = *(_DWORD *)((char *)a2 + v11[15]);
    uint64_t v30 = *(int *)(a3 + 20);
    uint64_t v31 = (char *)v4 + v30;
    unint64_t v32 = (char *)a2 + v30;
    uint64_t v33 = type metadata accessor for BeaconDetails(0);
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = sub_10000588C((uint64_t *)&unk_1016654F0);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      uint64_t v36 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v31, v32, v36);
      uint64_t v37 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
      long long v38 = *(_OWORD *)&v32[v37 + 24];
      *(_OWORD *)&v31[v37 + 24] = v38;
      (**(void (***)(void))(v38 - 8))();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    uint64_t v39 = *(int *)(a3 + 24);
    uint64_t v40 = (char *)v4 + v39;
    unint64_t v41 = (char *)a2 + v39;
    uint64_t v42 = (int *)type metadata accessor for AccessoryMetadata(0);
    uint64_t v43 = *((void *)v42 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
    {
      uint64_t v44 = sub_10000588C(&qword_1016653B0);
      memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      uint64_t v45 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v40, v41, v45);
      uint64_t v46 = v42[5];
      unint64_t v47 = (uint64_t *)&v40[v46];
      unint64_t v48 = (uint64_t *)&v41[v46];
      uint64_t v49 = *v48;
      unint64_t v50 = v48[1];
      sub_1000361E0(*v48, v50);
      *unint64_t v47 = v49;
      v47[1] = v50;
      uint64_t v51 = v42[6];
      unint64_t v52 = &v40[v51];
      os_log_type_t v53 = &v41[v51];
      uint64_t v54 = *((void *)v53 + 1);
      *(void *)unint64_t v52 = *(void *)v53;
      *((void *)v52 + 1) = v54;
      uint64_t v55 = v42[7];
      unint64_t v56 = &v40[v55];
      unint64_t v57 = &v41[v55];
      uint64_t v58 = *((void *)v57 + 1);
      *(void *)unint64_t v56 = *(void *)v57;
      *((void *)v56 + 1) = v58;
      *(_DWORD *)&v40[v42[8]] = *(_DWORD *)&v41[v42[8]];
      uint64_t v59 = v42[9];
      uint64_t v60 = &v40[v59];
      unint64_t v61 = &v41[v59];
      *(_DWORD *)uint64_t v60 = *(_DWORD *)v61;
      v60[4] = v61[4];
      uint64_t v62 = v42[10];
      os_log_type_t v63 = &v40[v62];
      BOOL v64 = &v41[v62];
      *(_OWORD *)os_log_type_t v63 = *(_OWORD *)v64;
      v63[16] = v64[16];
      uint64_t v65 = v42[11];
      uint64_t v66 = &v40[v65];
      uint64_t v67 = &v41[v65];
      v66[8] = v67[8];
      *(void *)uint64_t v66 = *(void *)v67;
      uint64_t v68 = v42[12];
      uint64_t v69 = &v40[v68];
      unint64_t v70 = &v41[v68];
      *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
      v69[4] = v70[4];
      v40[v42[13]] = v41[v42[13]];
      v40[v42[14]] = v41[v42[14]];
      uint64_t v71 = v42[15];
      Swift::String v72 = &v40[v71];
      Swift::String v73 = &v41[v71];
      uint64_t v74 = *((void *)v73 + 1);
      *(void *)Swift::String v72 = *(void *)v73;
      *((void *)v72 + 1) = v74;
      unint64_t v75 = *(void (**)(char *, void, uint64_t, int *))(v43 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v75(v40, 0, 1, v42);
    }
  }
  return v4;
}

uint64_t type metadata accessor for BeaconDetails(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163FA00);
}

uint64_t sub_100269874(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >> 60 != 15) {
    sub_10001CFB8(*(void *)(a1 + 8), v4);
  }
  int v5 = (int *)type metadata accessor for DiscoveredObject(0);
  uint64_t v6 = a1 + v5[7];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + v5[8];
  uint64_t v9 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  sub_1001A1AD8(*(void *)(a1 + v5[9]), *(void *)(a1 + v5[9] + 8));
  sub_10001CFB8(*(void *)(a1 + v5[14]), *(void *)(a1 + v5[14] + 8));
  uint64_t v10 = a1 + *(int *)(a2 + 20);
  uint64_t v11 = type metadata accessor for BeaconDetails(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v10, v12);
    uint64_t v13 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v10 + *(int *)(v13 + 20));
  }
  uint64_t v14 = a1 + *(int *)(a2 + 24);
  uint64_t v15 = type metadata accessor for AccessoryMetadata(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15);
  if (!result)
  {
    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v14, v17);
    sub_10001CFB8(*(void *)(v14 + *(int *)(v15 + 20)), *(void *)(v14 + *(int *)(v15 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100269AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v6 = (uint64_t *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    sub_1000361E0(*v6, *(void *)(a2 + 16));
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
  }
  uint64_t v9 = (int *)type metadata accessor for DiscoveredObject(0);
  uint64_t v10 = v9[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  uint64_t v14 = v9[8];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  uint64_t v18 = v9[9];
  uint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  sub_1001A1790(*v20, v22);
  *uint64_t v19 = v21;
  v19[1] = v22;
  *(void *)(a1 + v9[10]) = *(void *)(a2 + v9[10]);
  *(unsigned char *)(a1 + v9[11]) = *(unsigned char *)(a2 + v9[11]);
  *(unsigned char *)(a1 + v9[12]) = *(unsigned char *)(a2 + v9[12]);
  *(_WORD *)(a1 + v9[13]) = *(_WORD *)(a2 + v9[13]);
  uint64_t v23 = v9[14];
  uint64_t v24 = (uint64_t *)(a1 + v23);
  uint64_t v25 = (uint64_t *)(a2 + v23);
  uint64_t v26 = *v25;
  unint64_t v27 = v25[1];
  sub_1000361E0(*v25, v27);
  *uint64_t v24 = v26;
  v24[1] = v27;
  *(_DWORD *)(a1 + v9[15]) = *(_DWORD *)(a2 + v9[15]);
  uint64_t v28 = *(int *)(a3 + 20);
  unint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  uint64_t v31 = type metadata accessor for BeaconDetails(0);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = sub_10000588C((uint64_t *)&unk_1016654F0);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    uint64_t v34 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v29, v30, v34);
    uint64_t v35 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
    long long v36 = *(_OWORD *)&v30[v35 + 24];
    *(_OWORD *)&v29[v35 + 24] = v36;
    (**(void (***)(void))(v36 - 8))();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  uint64_t v37 = *(int *)(a3 + 24);
  long long v38 = (char *)(a1 + v37);
  uint64_t v39 = (char *)(a2 + v37);
  uint64_t v40 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v41 = *((void *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
  {
    uint64_t v42 = sub_10000588C(&qword_1016653B0);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    uint64_t v43 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v38, v39, v43);
    uint64_t v44 = v40[5];
    uint64_t v45 = (uint64_t *)&v38[v44];
    uint64_t v46 = (uint64_t *)&v39[v44];
    uint64_t v47 = *v46;
    unint64_t v48 = v46[1];
    sub_1000361E0(*v46, v48);
    *uint64_t v45 = v47;
    v45[1] = v48;
    uint64_t v49 = v40[6];
    unint64_t v50 = &v38[v49];
    uint64_t v51 = &v39[v49];
    uint64_t v52 = *((void *)v51 + 1);
    *(void *)unint64_t v50 = *(void *)v51;
    *((void *)v50 + 1) = v52;
    uint64_t v53 = v40[7];
    uint64_t v54 = &v38[v53];
    uint64_t v55 = &v39[v53];
    uint64_t v56 = *((void *)v55 + 1);
    *(void *)uint64_t v54 = *(void *)v55;
    *((void *)v54 + 1) = v56;
    *(_DWORD *)&v38[v40[8]] = *(_DWORD *)&v39[v40[8]];
    uint64_t v57 = v40[9];
    uint64_t v58 = &v38[v57];
    uint64_t v59 = &v39[v57];
    *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
    v58[4] = v59[4];
    uint64_t v60 = v40[10];
    unint64_t v61 = &v38[v60];
    uint64_t v62 = &v39[v60];
    *(_OWORD *)unint64_t v61 = *(_OWORD *)v62;
    v61[16] = v62[16];
    uint64_t v63 = v40[11];
    BOOL v64 = &v38[v63];
    uint64_t v65 = &v39[v63];
    v64[8] = v65[8];
    *(void *)BOOL v64 = *(void *)v65;
    uint64_t v66 = v40[12];
    uint64_t v67 = &v38[v66];
    uint64_t v68 = &v39[v66];
    *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
    v67[4] = v68[4];
    v38[v40[13]] = v39[v40[13]];
    v38[v40[14]] = v39[v40[14]];
    uint64_t v69 = v40[15];
    unint64_t v70 = &v38[v69];
    uint64_t v71 = &v39[v69];
    uint64_t v72 = *((void *)v71 + 1);
    *(void *)unint64_t v70 = *(void *)v71;
    *((void *)v70 + 1) = v72;
    Swift::String v73 = *(void (**)(char *, void, uint64_t, int *))(v41 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v73(v38, 0, 1, v40);
  }
  return a1;
}

uint64_t sub_100269FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v6 = (_OWORD *)(a1 + 8);
  unint64_t v7 = (uint64_t *)(a2 + 8);
  unint64_t v8 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) >> 60 == 15)
  {
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = *v7;
      sub_1000361E0(*v7, *(void *)(a2 + 16));
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v8;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v8 >> 60 == 15)
  {
    sub_1001356D0(a1 + 8);
LABEL_6:
    *uint64_t v6 = *(_OWORD *)v7;
    goto LABEL_8;
  }
  uint64_t v10 = *v7;
  sub_1000361E0(*v7, *(void *)(a2 + 16));
  uint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v8;
  sub_10001CFB8(v11, v12);
LABEL_8:
  uint64_t v13 = (int *)type metadata accessor for DiscoveredObject(0);
  uint64_t v14 = v13[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  uint64_t v18 = v13[8];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  uint64_t v22 = v13[9];
  uint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  uint64_t v26 = v24[1];
  sub_1001A1790(*v24, v26);
  uint64_t v27 = *v23;
  uint64_t v28 = v23[1];
  *uint64_t v23 = v25;
  v23[1] = v26;
  sub_1001A1AD8(v27, v28);
  *(void *)(a1 + v13[10]) = *(void *)(a2 + v13[10]);
  *(unsigned char *)(a1 + v13[11]) = *(unsigned char *)(a2 + v13[11]);
  *(unsigned char *)(a1 + v13[12]) = *(unsigned char *)(a2 + v13[12]);
  *(_WORD *)(a1 + v13[13]) = *(_WORD *)(a2 + v13[13]);
  uint64_t v29 = v13[14];
  uint64_t v30 = (uint64_t *)(a1 + v29);
  uint64_t v31 = (uint64_t *)(a2 + v29);
  uint64_t v32 = *v31;
  unint64_t v33 = v31[1];
  sub_1000361E0(*v31, v33);
  uint64_t v34 = *v30;
  unint64_t v35 = v30[1];
  *uint64_t v30 = v32;
  v30[1] = v33;
  sub_10001CFB8(v34, v35);
  *(_DWORD *)(a1 + v13[15]) = *(_DWORD *)(a2 + v13[15]);
  uint64_t v36 = *(int *)(a3 + 20);
  uint64_t v37 = (char *)(a1 + v36);
  long long v38 = (char *)(a2 + v36);
  uint64_t v39 = type metadata accessor for BeaconDetails(0);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  LODWORD(v30) = v41(v37, 1, v39);
  int v42 = v41(v38, 1, v39);
  if (v30)
  {
    if (!v42)
    {
      uint64_t v43 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v37, v38, v43);
      uint64_t v44 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
      uint64_t v45 = &v37[v44];
      uint64_t v46 = *(void *)&v38[v44 + 24];
      *((void *)v45 + 3) = v46;
      *((void *)v45 + 4) = *(void *)&v38[v44 + 32];
      (**(void (***)(void))(v46 - 8))();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v42)
  {
    sub_10026A9F0((uint64_t)v37, type metadata accessor for BeaconDetails);
LABEL_13:
    uint64_t v47 = sub_10000588C((uint64_t *)&unk_1016654F0);
    memcpy(v37, v38, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v89 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 24))(v37, v38, v89);
  uint64_t v90 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  sub_10026A7C0((uint64_t *)&v37[*(int *)(v90 + 20)], (uint64_t *)&v38[*(int *)(v90 + 20)]);
LABEL_14:
  uint64_t v48 = *(int *)(a3 + 24);
  uint64_t v49 = (unsigned char *)(a1 + v48);
  unint64_t v50 = (unsigned char *)(a2 + v48);
  uint64_t v51 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v52 = *((void *)v51 - 1);
  uint64_t v53 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v52 + 48);
  int v54 = v53(v49, 1, v51);
  int v55 = v53(v50, 1, v51);
  if (!v54)
  {
    if (!v55)
    {
      uint64_t v91 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v91 - 8) + 24))(v49, v50, v91);
      uint64_t v92 = v51[5];
      uint64_t v93 = (uint64_t *)&v49[v92];
      uint64_t v94 = (uint64_t *)&v50[v92];
      uint64_t v95 = *v94;
      unint64_t v96 = v94[1];
      sub_1000361E0(*v94, v96);
      uint64_t v97 = *v93;
      unint64_t v98 = v93[1];
      *uint64_t v93 = v95;
      v93[1] = v96;
      sub_10001CFB8(v97, v98);
      uint64_t v99 = v51[6];
      unint64_t v100 = &v49[v99];
      uint64_t v101 = &v50[v99];
      *unint64_t v100 = *v101;
      v100[1] = v101[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v102 = v51[7];
      uint64_t v103 = &v49[v102];
      unint64_t v104 = &v50[v102];
      *uint64_t v103 = *v104;
      v103[1] = v104[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v105 = v51[8];
      unint64_t v106 = &v49[v105];
      unint64_t v107 = &v50[v105];
      *(_WORD *)unint64_t v106 = *(_WORD *)v107;
      v106[2] = v107[2];
      v106[3] = v107[3];
      uint64_t v108 = v51[9];
      uint64_t v109 = &v49[v108];
      uint64_t v110 = &v50[v108];
      int v111 = *(_DWORD *)v110;
      v109[4] = v110[4];
      *(_DWORD *)uint64_t v109 = v111;
      uint64_t v112 = v51[10];
      uint64_t v113 = &v49[v112];
      uint64_t v114 = &v50[v112];
      long long v115 = *(_OWORD *)v114;
      v113[16] = v114[16];
      *(_OWORD *)uint64_t v113 = v115;
      uint64_t v116 = v51[11];
      uint64_t v117 = &v49[v116];
      uint64_t v118 = &v50[v116];
      uint64_t v119 = *(void *)v118;
      v117[8] = v118[8];
      *(void *)uint64_t v117 = v119;
      uint64_t v120 = v51[12];
      uint64_t v121 = &v49[v120];
      uint64_t v122 = &v50[v120];
      LODWORD(v119) = *(_DWORD *)v122;
      v121[4] = v122[4];
      *(_DWORD *)uint64_t v121 = v119;
      v49[v51[13]] = v50[v51[13]];
      v49[v51[14]] = v50[v51[14]];
      uint64_t v123 = v51[15];
      uint64_t v124 = &v49[v123];
      uint64_t v125 = &v50[v123];
      *uint64_t v124 = *v125;
      v124[1] = v125[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10026A9F0((uint64_t)v49, type metadata accessor for AccessoryMetadata);
    goto LABEL_19;
  }
  if (v55)
  {
LABEL_19:
    uint64_t v87 = sub_10000588C(&qword_1016653B0);
    memcpy(v49, v50, *(void *)(*(void *)(v87 - 8) + 64));
    return a1;
  }
  uint64_t v56 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v56 - 8) + 16))(v49, v50, v56);
  uint64_t v57 = v51[5];
  uint64_t v58 = (uint64_t *)&v49[v57];
  uint64_t v59 = (uint64_t *)&v50[v57];
  uint64_t v60 = *v59;
  unint64_t v61 = v59[1];
  sub_1000361E0(*v59, v61);
  *uint64_t v58 = v60;
  v58[1] = v61;
  uint64_t v62 = v51[6];
  uint64_t v63 = &v49[v62];
  BOOL v64 = &v50[v62];
  *uint64_t v63 = *v64;
  v63[1] = v64[1];
  uint64_t v65 = v51[7];
  uint64_t v66 = &v49[v65];
  uint64_t v67 = &v50[v65];
  *uint64_t v66 = *v67;
  v66[1] = v67[1];
  *(_DWORD *)&v49[v51[8]] = *(_DWORD *)&v50[v51[8]];
  uint64_t v68 = v51[9];
  uint64_t v69 = &v49[v68];
  unint64_t v70 = &v50[v68];
  int v71 = *(_DWORD *)v70;
  v69[4] = v70[4];
  *(_DWORD *)uint64_t v69 = v71;
  uint64_t v72 = v51[10];
  Swift::String v73 = &v49[v72];
  uint64_t v74 = &v50[v72];
  long long v75 = *(_OWORD *)v74;
  v73[16] = v74[16];
  *(_OWORD *)Swift::String v73 = v75;
  uint64_t v76 = v51[11];
  uint64_t v77 = &v49[v76];
  uint64_t v78 = &v50[v76];
  uint64_t v79 = *(void *)v78;
  v77[8] = v78[8];
  *(void *)uint64_t v77 = v79;
  uint64_t v80 = v51[12];
  long long v81 = &v49[v80];
  uint64_t v82 = &v50[v80];
  LODWORD(v79) = *(_DWORD *)v82;
  v81[4] = v82[4];
  *(_DWORD *)long long v81 = v79;
  v49[v51[13]] = v50[v51[13]];
  v49[v51[14]] = v50[v51[14]];
  uint64_t v83 = v51[15];
  uint64_t v84 = &v49[v83];
  os_log_type_t v85 = &v50[v83];
  *uint64_t v84 = *v85;
  v84[1] = v85[1];
  uint64_t v86 = *(void (**)(unsigned char *, void, uint64_t, int *))(v52 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v86(v49, 0, 1, v51);
  return a1;
}

uint64_t *sub_10026A7C0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    Swift::String v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *Swift::String v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *Swift::String v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t sub_10026A9F0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10026AA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = (int *)type metadata accessor for DiscoveredObject(0);
  uint64_t v7 = v6[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = v6[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  *(_OWORD *)(a1 + v6[9]) = *(_OWORD *)(a2 + v6[9]);
  *(void *)(a1 + v6[10]) = *(void *)(a2 + v6[10]);
  *(unsigned char *)(a1 + v6[11]) = *(unsigned char *)(a2 + v6[11]);
  *(unsigned char *)(a1 + v6[12]) = *(unsigned char *)(a2 + v6[12]);
  *(_WORD *)(a1 + v6[13]) = *(_WORD *)(a2 + v6[13]);
  *(_OWORD *)(a1 + v6[14]) = *(_OWORD *)(a2 + v6[14]);
  *(_DWORD *)(a1 + v6[15]) = *(_DWORD *)(a2 + v6[15]);
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  uint64_t v18 = type metadata accessor for BeaconDetails(0);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = sub_10000588C((uint64_t *)&unk_1016654F0);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v21 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v16, v17, v21);
    uint64_t v22 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
    uint64_t v23 = &v16[v22];
    uint64_t v24 = &v17[v22];
    long long v25 = *((_OWORD *)v24 + 1);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *((_OWORD *)v23 + 1) = v25;
    *((void *)v23 + 4) = *((void *)v24 + 4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v26 = *(int *)(a3 + 24);
  uint64_t v27 = (char *)(a1 + v26);
  uint64_t v28 = (char *)(a2 + v26);
  uint64_t v29 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v30 = *((void *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = sub_10000588C(&qword_1016653B0);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    uint64_t v32 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v27, v28, v32);
    *(_OWORD *)&v27[v29[5]] = *(_OWORD *)&v28[v29[5]];
    *(_OWORD *)&v27[v29[6]] = *(_OWORD *)&v28[v29[6]];
    *(_OWORD *)&v27[v29[7]] = *(_OWORD *)&v28[v29[7]];
    *(_DWORD *)&v27[v29[8]] = *(_DWORD *)&v28[v29[8]];
    uint64_t v33 = v29[9];
    uint64_t v34 = &v27[v33];
    unint64_t v35 = &v28[v33];
    *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
    v34[4] = v35[4];
    uint64_t v36 = v29[10];
    uint64_t v37 = &v27[v36];
    long long v38 = &v28[v36];
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
    v37[16] = v38[16];
    uint64_t v39 = v29[11];
    uint64_t v40 = &v27[v39];
    uint64_t v41 = &v28[v39];
    v40[8] = v41[8];
    *(void *)uint64_t v40 = *(void *)v41;
    uint64_t v42 = v29[12];
    uint64_t v43 = &v27[v42];
    uint64_t v44 = &v28[v42];
    *(_DWORD *)uint64_t v43 = *(_DWORD *)v44;
    v43[4] = v44[4];
    v27[v29[13]] = v28[v29[13]];
    v27[v29[14]] = v28[v29[14]];
    *(_OWORD *)&v27[v29[15]] = *(_OWORD *)&v28[v29[15]];
    (*(void (**)(char *, void, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

uint64_t sub_10026AE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v6 = (_OWORD *)(a1 + 8);
  uint64_t v7 = (_OWORD *)(a2 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if (v8 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v9 = *(void *)(a2 + 16);
  if (v9 >> 60 == 15)
  {
    sub_1001356D0(a1 + 8);
LABEL_4:
    *uint64_t v6 = *v7;
    goto LABEL_6;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)v7;
  *(void *)(a1 + 16) = v9;
  sub_10001CFB8(v10, v8);
LABEL_6:
  uint64_t v11 = (int *)type metadata accessor for DiscoveredObject(0);
  uint64_t v12 = v11[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = v11[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  uint64_t v20 = v11[9];
  uint64_t v21 = *(void *)(a1 + v20);
  uint64_t v22 = *(void *)(a1 + v20 + 8);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  sub_1001A1AD8(v21, v22);
  *(void *)(a1 + v11[10]) = *(void *)(a2 + v11[10]);
  *(unsigned char *)(a1 + v11[11]) = *(unsigned char *)(a2 + v11[11]);
  *(unsigned char *)(a1 + v11[12]) = *(unsigned char *)(a2 + v11[12]);
  *(_WORD *)(a1 + v11[13]) = *(_WORD *)(a2 + v11[13]);
  uint64_t v23 = v11[14];
  uint64_t v24 = *(void *)(a1 + v23);
  unint64_t v25 = *(void *)(a1 + v23 + 8);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  sub_10001CFB8(v24, v25);
  *(_DWORD *)(a1 + v11[15]) = *(_DWORD *)(a2 + v11[15]);
  uint64_t v26 = *(int *)(a3 + 20);
  uint64_t v27 = (char *)(a1 + v26);
  uint64_t v28 = (char *)(a2 + v26);
  uint64_t v29 = type metadata accessor for BeaconDetails(0);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v27, 1, v29);
  int v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      uint64_t v34 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v27, v28, v34);
      uint64_t v35 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
      uint64_t v36 = &v27[v35];
      uint64_t v37 = &v28[v35];
      long long v38 = *((_OWORD *)v37 + 1);
      *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
      *((_OWORD *)v36 + 1) = v38;
      *((void *)v36 + 4) = *((void *)v37 + 4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v33)
  {
    sub_10026A9F0((uint64_t)v27, type metadata accessor for BeaconDetails);
LABEL_11:
    uint64_t v39 = sub_10000588C((uint64_t *)&unk_1016654F0);
    memcpy(v27, v28, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_12;
  }
  uint64_t v63 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 40))(v27, v28, v63);
  uint64_t v64 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
  uint64_t v65 = (uint64_t)&v27[v64];
  uint64_t v66 = &v28[v64];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v65);
  long long v67 = *((_OWORD *)v66 + 1);
  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
  *(_OWORD *)(v65 + 16) = v67;
  *(void *)(v65 + 32) = *((void *)v66 + 4);
LABEL_12:
  uint64_t v40 = *(int *)(a3 + 24);
  uint64_t v41 = (unsigned char *)(a1 + v40);
  uint64_t v42 = (unsigned char *)(a2 + v40);
  uint64_t v43 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v44 = *((void *)v43 - 1);
  uint64_t v45 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v44 + 48);
  int v46 = v45(v41, 1, v43);
  int v47 = v45(v42, 1, v43);
  if (!v46)
  {
    if (!v47)
    {
      uint64_t v68 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v68 - 8) + 40))(v41, v42, v68);
      uint64_t v69 = v43[5];
      uint64_t v70 = *(void *)&v41[v69];
      unint64_t v71 = *(void *)&v41[v69 + 8];
      *(_OWORD *)&v41[v69] = *(_OWORD *)&v42[v69];
      sub_10001CFB8(v70, v71);
      uint64_t v72 = v43[6];
      Swift::String v73 = &v41[v72];
      uint64_t v74 = (uint64_t *)&v42[v72];
      uint64_t v76 = *v74;
      uint64_t v75 = v74[1];
      *Swift::String v73 = v76;
      v73[1] = v75;
      swift_bridgeObjectRelease();
      uint64_t v77 = v43[7];
      uint64_t v78 = &v41[v77];
      uint64_t v79 = (uint64_t *)&v42[v77];
      uint64_t v81 = *v79;
      uint64_t v80 = v79[1];
      *uint64_t v78 = v81;
      v78[1] = v80;
      swift_bridgeObjectRelease();
      *(_DWORD *)&v41[v43[8]] = *(_DWORD *)&v42[v43[8]];
      uint64_t v82 = v43[9];
      uint64_t v83 = &v41[v82];
      uint64_t v84 = &v42[v82];
      *(_DWORD *)uint64_t v83 = *(_DWORD *)v84;
      v83[4] = v84[4];
      uint64_t v85 = v43[10];
      uint64_t v86 = &v41[v85];
      uint64_t v87 = &v42[v85];
      *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
      v86[16] = v87[16];
      uint64_t v88 = v43[11];
      uint64_t v89 = &v41[v88];
      uint64_t v90 = &v42[v88];
      *(void *)uint64_t v89 = *(void *)v90;
      v89[8] = v90[8];
      uint64_t v91 = v43[12];
      uint64_t v92 = &v41[v91];
      uint64_t v93 = &v42[v91];
      *(_DWORD *)uint64_t v92 = *(_DWORD *)v93;
      v92[4] = v93[4];
      v41[v43[13]] = v42[v43[13]];
      v41[v43[14]] = v42[v43[14]];
      uint64_t v94 = v43[15];
      uint64_t v95 = &v41[v94];
      unint64_t v96 = (uint64_t *)&v42[v94];
      uint64_t v98 = *v96;
      uint64_t v97 = v96[1];
      *uint64_t v95 = v98;
      v95[1] = v97;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10026A9F0((uint64_t)v41, type metadata accessor for AccessoryMetadata);
    goto LABEL_17;
  }
  if (v47)
  {
LABEL_17:
    uint64_t v61 = sub_10000588C(&qword_1016653B0);
    memcpy(v41, v42, *(void *)(*(void *)(v61 - 8) + 64));
    return a1;
  }
  uint64_t v48 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v48 - 8) + 32))(v41, v42, v48);
  *(_OWORD *)&v41[v43[5]] = *(_OWORD *)&v42[v43[5]];
  *(_OWORD *)&v41[v43[6]] = *(_OWORD *)&v42[v43[6]];
  *(_OWORD *)&v41[v43[7]] = *(_OWORD *)&v42[v43[7]];
  *(_DWORD *)&v41[v43[8]] = *(_DWORD *)&v42[v43[8]];
  uint64_t v49 = v43[9];
  unint64_t v50 = &v41[v49];
  uint64_t v51 = &v42[v49];
  *(_DWORD *)unint64_t v50 = *(_DWORD *)v51;
  v50[4] = v51[4];
  uint64_t v52 = v43[10];
  uint64_t v53 = &v41[v52];
  int v54 = &v42[v52];
  *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
  v53[16] = v54[16];
  uint64_t v55 = v43[11];
  uint64_t v56 = &v41[v55];
  uint64_t v57 = &v42[v55];
  v56[8] = v57[8];
  *(void *)uint64_t v56 = *(void *)v57;
  uint64_t v58 = v43[12];
  uint64_t v59 = &v41[v58];
  uint64_t v60 = &v42[v58];
  *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
  v59[4] = v60[4];
  v41[v43[13]] = v42[v43[13]];
  v41[v43[14]] = v42[v43[14]];
  *(_OWORD *)&v41[v43[15]] = *(_OWORD *)&v42[v43[15]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v44 + 56))(v41, 0, 1, v43);
  return a1;
}

uint64_t sub_10026B540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10026B554);
}

uint64_t sub_10026B554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DiscoveredObject(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_1016654F0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = sub_10000588C(&qword_1016653B0);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t sub_10026B6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10026B6BC);
}

uint64_t sub_10026B6BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DiscoveredObject(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_1016654F0);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = sub_10000588C(&qword_1016653B0);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

uint64_t type metadata accessor for DetailedDiscoveredObject(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_10163F958);
}

void sub_10026B83C()
{
  type metadata accessor for DiscoveredObject(319);
  if (v0 <= 0x3F)
  {
    sub_10026B978(319, &qword_10163F968, (void (*)(uint64_t))type metadata accessor for BeaconDetails);
    if (v1 <= 0x3F)
    {
      sub_10026B978(319, (unint64_t *)&unk_10163F970, (void (*)(uint64_t))type metadata accessor for AccessoryMetadata);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_10026B978(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *sub_10026B9CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(v6 + 20);
    long long v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
  }
  return a1;
}

uint64_t sub_10026BAE8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = a1 + *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v3);
}

uint64_t sub_10026BB60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
  long long v6 = *(_OWORD *)(a2 + v5 + 24);
  *(_OWORD *)(a1 + v5 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  return a1;
}

uint64_t sub_10026BC20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  sub_10026A7C0((uint64_t *)(a1 + *(int *)(v5 + 20)), (uint64_t *)(a2 + *(int *)(v5 + 20)));
  return a1;
}

uint64_t sub_10026BC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  long long v8 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
  *(_OWORD *)(v6 + 16) = v8;
  *(void *)(v6 + 32) = *(void *)(v7 + 32);
  return a1;
}

uint64_t sub_10026BD24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1 + v5);
  long long v8 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
  *(_OWORD *)(v6 + 16) = v8;
  *(void *)(v6 + 32) = *(void *)(v7 + 32);
  return a1;
}

uint64_t sub_10026BDBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10026BDD0);
}

uint64_t sub_10026BDD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10026BE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10026BE50);
}

uint64_t sub_10026BE50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_10026BEC0()
{
  uint64_t result = type metadata accessor for BeaconKeyManager.IndexInformation(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for BluetoothManufacturerData(uint64_t *a1)
{
  sub_1001A1AD8(*a1, a1[1]);
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];

  return sub_10001CFB8(v2, v3);
}

uint64_t initializeWithCopy for BluetoothManufacturerData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  sub_1001A1790(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v6 = *(void *)(a2 + 40);
  sub_1000361E0(v7, v6);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for BluetoothManufacturerData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  sub_1001A1790(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_1001A1AD8(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(_WORD *)(a1 + 26) = *(_WORD *)(a2 + 26);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  sub_1000361E0(v9, v8);
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v8;
  sub_10001CFB8(v10, v11);
  return a1;
}

__n128 initializeWithTake for DiversifiedRootKeys(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BluetoothManufacturerData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1001A1AD8(v4, v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001CFB8(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for BluetoothManufacturerData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 40) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 40) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BluetoothManufacturerData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2)
    {
      *(void *)(result + 32) = 0;
      *(void *)(result + 40) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BluetoothManufacturerData()
{
  return &type metadata for BluetoothManufacturerData;
}

uint64_t *initializeBufferWithCopyOfBuffer for AdvertisementUnion(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  sub_1001A1790(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for AdvertisementUnion(uint64_t *a1)
{
  return sub_1001A1AD8(*a1, a1[1]);
}

uint64_t *assignWithCopy for AdvertisementUnion(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  sub_1001A1790(*a2, v4);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1001A1AD8(v5, v6);
  return a1;
}

uint64_t *assignWithTake for AdvertisementUnion(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1001A1AD8(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AdvertisementUnion(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 3 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 3);
  }
  unsigned int v3 = ((2 * ((*(void *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(void *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AdvertisementUnion(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0;
    if (a3 >= 3) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 3) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t sub_10026C318(uint64_t a1)
{
  return (*(void *)(a1 + 8) >> 61) & 1;
}

uint64_t sub_10026C324(uint64_t result)
{
  *(void *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_10026C334(uint64_t result, char a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementUnion()
{
  return &type metadata for AdvertisementUnion;
}

_WORD *initializeBufferWithCopyOfBuffer for AdvertismentType(_WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AdvertismentType(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  unsigned int v2 = a2 + 0xFFFF;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 4;
  }
  if (v2 < 0xFF0000) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x10000) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  switch(v4)
  {
    case 1:
      uint64_t v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((unsigned char *)a1 + 2)) {
        return v4;
      }
      goto LABEL_17;
    case 2:
      uint64_t v4 = a1[1];
      if (!a1[1]) {
        return v4;
      }
      goto LABEL_17;
    case 3:
      __break(1u);
      JUMPOUT(0x10026C404);
    case 4:
      uint64_t v4 = *(unsigned int *)(a1 + 1);
      if (v4) {
LABEL_17:
      }
        uint64_t v4 = (*a1 | (v4 << 16)) - 0xFFFF;
      break;
    default:
      return v4;
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for AdvertismentType(uint64_t result, int a2, int a3)
{
  unsigned int v3 = a3 + 0xFFFF;
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v4 = 2;
  }
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2)
  {
    unsigned int v7 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 1;
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = v7;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v7;
        return result;
      case 3:
        goto LABEL_21;
      case 4:
        *(_DWORD *)(result + 2) = v7;
        return result;
      default:
        return result;
    }
  }
  switch(v6)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_21:
      __break(1u);
      JUMPOUT(0x10026C4D4);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10026C4FC(unsigned __int8 *a1)
{
  if (a1[1]) {
    return (*a1 | (a1[1] << 8)) - 255;
  }
  else {
    return 0;
  }
}

unsigned char *sub_10026C51C(unsigned char *result, int a2)
{
  if (a2)
  {
    *__n128 result = a2 - 1;
    result[1] = ((unsigned __int16)(a2 - 1) >> 8) + 1;
  }
  else
  {
    result[1] = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AdvertismentType()
{
  return &type metadata for AdvertismentType;
}

unint64_t sub_10026C554()
{
  unint64_t result = qword_10163FA38;
  if (!qword_10163FA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FA38);
  }
  return result;
}

unint64_t sub_10026C5A8()
{
  unint64_t result = qword_10163FA58;
  if (!qword_10163FA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FA58);
  }
  return result;
}

unint64_t sub_10026C5FC()
{
  unint64_t result = qword_10163FA60;
  if (!qword_10163FA60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FA60);
  }
  return result;
}

unint64_t sub_10026C650()
{
  unint64_t result = qword_10163FA68;
  if (!qword_10163FA68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FA68);
  }
  return result;
}

unint64_t sub_10026C6A4()
{
  unint64_t result = qword_10163FA70;
  if (!qword_10163FA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FA70);
  }
  return result;
}

unint64_t sub_10026C6F8()
{
  unint64_t result = qword_10163FA78;
  if (!qword_10163FA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FA78);
  }
  return result;
}

uint64_t sub_10026C74C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x383165707974 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F5079636167656CLL && a2 == 0xEA00000000006873 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1752395632 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10026C898(void *a1)
{
  uint64_t v27 = sub_10000588C(&qword_10163FAB8);
  uint64_t v30 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_10163FAC0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v28 = v3;
  uint64_t v29 = v4;
  __chkstk_darwin(v3);
  char v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163FAC8);
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163FAD0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  int v32 = a1;
  sub_10001CD44(a1, v14);
  sub_10026D514();
  uint64_t v15 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    uint64_t v33 = v7;
    uint64_t v16 = v31;
    uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v17 + 16) == 1)
    {
      if (*(unsigned char *)(v17 + 32))
      {
        if (*(unsigned char *)(v17 + 32) != 1)
        {
          char v36 = 2;
          sub_10026D568();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v25 = v27;
          unsigned __int8 v18 = KeyedDecodingContainer.decode(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v25);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
          uint64_t v23 = (uint64_t)v32;
          int v22 = 0;
          goto LABEL_9;
        }
        char v35 = 1;
        sub_10026D5BC();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v28);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        unsigned __int8 v18 = 1;
      }
      else
      {
        char v34 = 0;
        sub_10026D610();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v33);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        unsigned __int8 v18 = 0;
      }
      int v22 = 1;
      uint64_t v23 = (uint64_t)v32;
LABEL_9:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v23);
      return v18 | (v22 << 8);
    }
    uint64_t v19 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v21 = v20;
    sub_10000588C(&qword_10163FA98);
    *uint64_t v21 = &type metadata for AdvertismentType;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, enum case for DecodingError.typeMismatch(_:), v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
}

uint64_t sub_10026CDF4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684826487 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E774F7261656ELL && a2 == 0xE900000000000072)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *sub_10026CEE4(void *a1)
{
  v20[0] = sub_10000588C(&qword_10163FA80);
  uint64_t v21 = *(void *)(v20[0] - 8);
  __chkstk_darwin(v20[0]);
  uint64_t v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_10163FA88);
  v20[1] = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v5 = sub_10000588C(&qword_10163FA90);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  int v22 = a1;
  uint64_t v10 = sub_10001CD44(a1, v9);
  sub_10026C5A8();
  uint64_t v11 = v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v11)
  {
    uint64_t v24 = v6;
    uint64_t v12 = v8;
    if (*(void *)(KeyedDecodingContainer.allKeys.getter() + 16) == 1)
    {
      LOBYTE(v23) = 1;
      sub_10026C5FC();
      uint64_t v13 = v3;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10026D3A0();
      uint64_t v14 = v12;
      uint64_t v15 = v20[0];
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v15);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v5);
      uint64_t v10 = v23;
    }
    else
    {
      uint64_t v10 = v8;
      uint64_t v16 = type metadata accessor for DecodingError();
      swift_allocError();
      unsigned __int8 v18 = v17;
      sub_10000588C(&qword_10163FA98);
      *unsigned __int8 v18 = &type metadata for AdvertisementUnion;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, enum case for DecodingError.typeMismatch(_:), v16);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v24 + 8))(v10, v5);
    }
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
  return v10;
}

unint64_t sub_10026D3A0()
{
  unint64_t result = qword_10163FAA0;
  if (!qword_10163FAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FAA0);
  }
  return result;
}

unint64_t sub_10026D3F4()
{
  unint64_t result = qword_10163FAA8;
  if (!qword_10163FAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FAA8);
  }
  return result;
}

uint64_t sub_10026D448(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016654F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10026D4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconDetails(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10026D514()
{
  unint64_t result = qword_10163FAD8;
  if (!qword_10163FAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FAD8);
  }
  return result;
}

unint64_t sub_10026D568()
{
  unint64_t result = qword_10163FAE0;
  if (!qword_10163FAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FAE0);
  }
  return result;
}

unint64_t sub_10026D5BC()
{
  unint64_t result = qword_10163FAE8;
  if (!qword_10163FAE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FAE8);
  }
  return result;
}

unint64_t sub_10026D610()
{
  unint64_t result = qword_10163FAF0;
  if (!qword_10163FAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FAF0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AdvertismentType.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10026D730);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AdvertismentType.CodingKeys()
{
  return &type metadata for AdvertismentType.CodingKeys;
}

ValueMetadata *type metadata accessor for AdvertismentType.Type18CodingKeys()
{
  return &type metadata for AdvertismentType.Type18CodingKeys;
}

ValueMetadata *type metadata accessor for AdvertismentType.LegacyPoshCodingKeys()
{
  return &type metadata for AdvertismentType.LegacyPoshCodingKeys;
}

ValueMetadata *type metadata accessor for AdvertismentType.PoshCodingKeys()
{
  return &type metadata for AdvertismentType.PoshCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AdvertisementUnion.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10026D868);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementUnion.CodingKeys()
{
  return &type metadata for AdvertisementUnion.CodingKeys;
}

ValueMetadata *type metadata accessor for AdvertisementUnion.WildCodingKeys()
{
  return &type metadata for AdvertisementUnion.WildCodingKeys;
}

unsigned char *_s12searchpartyd16AdvertismentTypeO14PoshCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10026D94CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementUnion.NearOwnerCodingKeys()
{
  return &type metadata for AdvertisementUnion.NearOwnerCodingKeys;
}

unint64_t sub_10026D988()
{
  unint64_t result = qword_10163FB18;
  if (!qword_10163FB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB18);
  }
  return result;
}

unint64_t sub_10026D9E0()
{
  unint64_t result = qword_10163FB20;
  if (!qword_10163FB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB20);
  }
  return result;
}

unint64_t sub_10026DA38()
{
  unint64_t result = qword_10163FB28;
  if (!qword_10163FB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB28);
  }
  return result;
}

unint64_t sub_10026DA90()
{
  unint64_t result = qword_10163FB30;
  if (!qword_10163FB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB30);
  }
  return result;
}

unint64_t sub_10026DAE8()
{
  unint64_t result = qword_10163FB38;
  if (!qword_10163FB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB38);
  }
  return result;
}

unint64_t sub_10026DB40()
{
  unint64_t result = qword_10163FB40;
  if (!qword_10163FB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB40);
  }
  return result;
}

unint64_t sub_10026DB98()
{
  unint64_t result = qword_10163FB48;
  if (!qword_10163FB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB48);
  }
  return result;
}

unint64_t sub_10026DBF0()
{
  unint64_t result = qword_10163FB50;
  if (!qword_10163FB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB50);
  }
  return result;
}

unint64_t sub_10026DC48()
{
  unint64_t result = qword_10163FB58;
  if (!qword_10163FB58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB58);
  }
  return result;
}

unint64_t sub_10026DCA0()
{
  unint64_t result = qword_10163FB60;
  if (!qword_10163FB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB60);
  }
  return result;
}

unint64_t sub_10026DCF8()
{
  unint64_t result = qword_10163FB68;
  if (!qword_10163FB68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB68);
  }
  return result;
}

unint64_t sub_10026DD50()
{
  unint64_t result = qword_10163FB70;
  if (!qword_10163FB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB70);
  }
  return result;
}

unint64_t sub_10026DDA8()
{
  unint64_t result = qword_10163FB78;
  if (!qword_10163FB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB78);
  }
  return result;
}

unint64_t sub_10026DE00()
{
  unint64_t result = qword_10163FB80;
  if (!qword_10163FB80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB80);
  }
  return result;
}

unint64_t sub_10026DE58()
{
  unint64_t result = qword_10163FB88;
  if (!qword_10163FB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB88);
  }
  return result;
}

unint64_t sub_10026DEB0()
{
  unint64_t result = qword_10163FB90;
  if (!qword_10163FB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB90);
  }
  return result;
}

unint64_t sub_10026DF08()
{
  unint64_t result = qword_10163FB98;
  if (!qword_10163FB98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FB98);
  }
  return result;
}

unint64_t sub_10026DF60()
{
  unint64_t result = qword_10163FBA0;
  if (!qword_10163FBA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FBA0);
  }
  return result;
}

unint64_t sub_10026DFB8()
{
  unint64_t result = qword_10163FBA8;
  if (!qword_10163FBA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10163FBA8);
  }
  return result;
}

ValueMetadata *type metadata accessor for CircleTrustEnvelopeTransformer()
{
  return &type metadata for CircleTrustEnvelopeTransformer;
}

uint64_t sub_10026E028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[22] = a5;
  v6[23] = a6;
  v6[20] = a3;
  v6[21] = a4;
  v6[18] = a1;
  v6[19] = a2;
  v6[24] = type metadata accessor for OwnerSharingCircle();
  v6[25] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v6[26] = swift_task_alloc();
  v6[27] = swift_task_alloc();
  v6[28] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v6[29] = v7;
  v6[30] = *(void *)(v7 - 8);
  v6[31] = swift_task_alloc();
  v6[32] = swift_task_alloc();
  v6[33] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v6[34] = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_10026E1CC;
  return _swift_task_switch(sub_1002703EC, 0, 0);
}

uint64_t sub_10026E1CC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 280) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unsigned int v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_10026E368, 0, 0);
  }
}

uint64_t sub_10026E368()
{
  uint64_t v1 = v0[35];
  v0[36] = type metadata accessor for SharingCircleKeyManager();
  uint64_t v2 = swift_allocObject();
  v0[37] = v2;
  swift_retain();
  swift_defaultActor_initialize();
  type metadata accessor for KeyDropInterface();
  uint64_t v3 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 120) = 0;
  *(void *)(v2 + 112) = v3;
  *(void *)(v2 + 120) = v1;
  return _swift_task_switch(sub_10026E428, v2, 0);
}

uint64_t sub_10026E428()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  v0[38] = PropertyListEncoder.init()();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[39] = v1;
  void *v1 = v0;
  v1[1] = sub_10026E4E4;
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[20];
  return sub_100C31718(v3, v2);
}

uint64_t sub_10026E4E4(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 320) = a1;
  *(void *)(v4 + 328) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 296);
  if (v1) {
    uint64_t v6 = sub_10026E6F0;
  }
  else {
    uint64_t v6 = sub_10026E618;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10026E618()
{
  v0[14] = v0[40];
  uint64_t v1 = v0[41];
  sub_10000588C(&qword_10163FBC0);
  sub_1002707D0();
  v0[42] = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v0[43] = v2;
  swift_bridgeObjectRelease();
  swift_release();
  if (v1)
  {
    v0[46] = v1;
    uint64_t v3 = sub_10026E934;
  }
  else
  {
    uint64_t v3 = sub_10026E760;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10026E6F0()
{
  swift_release();
  *(void *)(v0 + 368) = *(void *)(v0 + 328);
  return _swift_task_switch(sub_10026E934, 0, 0);
}

uint64_t sub_10026E760()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 160);
  *(void *)(v0 + 352) = type metadata accessor for OwnerPeerTrust();
  *(_DWORD *)(v0 + 480) = *(_DWORD *)(v1 + 24);
  *(void *)(v0 + 360) = sub_100270874((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of CustomStringConvertible.description.getter();
  v3._countAndFlagsBits = 124;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = String.utf8Data.getter();
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 80) = v5;
  *(void *)(v0 + 88) = v7;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  sub_10001CFB8(v5, v7);
  *(unsigned char *)(v0 + 488) = 0x2020404u >> (8 * *(unsigned char *)(v2 + *(int *)(v1 + 28)));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 376) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10026EA00;
  return _swift_task_switch(sub_1002708D8, 0, 0);
}

uint64_t sub_10026E934()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10026EA00(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[48] = a1;
  v3[49] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return _swift_task_switch(sub_10026ED68, 0, 0);
  }
  else
  {
    uint64_t v4 = v3[19] + *(int *)(v3[44] + 28);
    unint64_t v7 = (uint64_t (*)(uint64_t))((char *)&dword_101661678 + dword_101661678);
    uint64_t v5 = (void *)swift_task_alloc();
    v3[50] = v5;
    *uint64_t v5 = v3;
    v5[1] = sub_10026EB98;
    return v7(v4);
  }
}

uint64_t sub_10026EB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *v4;
  *(void *)(*v4 + 408) = a3;
  swift_task_dealloc();
  if (v3)
  {
    *(void *)(v8 + 440) = v3;
    uint64_t v10 = sub_10026F090;
LABEL_3:
    return _swift_task_switch(v10, 0, 0);
  }
  if (!a3)
  {
    uint64_t v10 = sub_10026F2E4;
    goto LABEL_3;
  }
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165CF98 + dword_10165CF98);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v8 + 416) = v11;
  *uint64_t v11 = v9;
  v11[1] = sub_10026EE60;
  return v13(a1, a2, a3);
}

uint64_t sub_10026ED68()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30];
  sub_10001CFB8(v0[42], v0[43]);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10026EE60(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v3;
  *(void *)(*v3 + 424) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = *(void *)(v5 + 384);
    unint64_t v7 = sub_10026F020;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 384);
    swift_bridgeObjectRelease();
    *(void *)(v5 + 432) = a2;
    unint64_t v7 = sub_10026EFA0;
    uint64_t v6 = v8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10026EFA0()
{
  uint64_t v1 = *(void *)(v0 + 432);
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v2 = sub_10026F198;
  }
  else {
    uint64_t v2 = sub_10026F2E4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10026F020()
{
  swift_bridgeObjectRelease();
  *(void *)(v0 + 440) = *(void *)(v0 + 424);
  return _swift_task_switch(sub_10026F090, 0, 0);
}

uint64_t sub_10026F090()
{
  uint64_t v1 = v0[42];
  unint64_t v2 = v0[43];
  uint64_t v3 = v0[33];
  uint64_t v4 = v0[29];
  uint64_t v5 = v0[30];
  swift_release();
  sub_10001CFB8(v1, v2);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10026F198()
{
  (*(void (**)(void, void, void))(*(void *)(v0 + 240) + 16))(*(void *)(v0 + 224), *(void *)(v0 + 160) + *(int *)(v0 + 480), *(void *)(v0 + 232));
  uint64_t v1 = *(void *)(v0 + 192);
  (*(void (**)(void, void, uint64_t, void))(*(void *)(v0 + 240) + 56))(*(void *)(v0 + 224), 0, 1, *(void *)(v0 + 232));
  *(_DWORD *)(v0 + 484) = *(_DWORD *)(v1 + 32);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_10070FB1C(v2);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 96) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 448) = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016636E0);
  unint64_t v6 = sub_100270D68();
  *uint64_t v4 = v0;
  v4[1] = sub_10026F40C;
  uint64_t v7 = *(void *)(v0 + 352);
  uint64_t v8 = *(void *)(v0 + 280);
  return Sequence.asyncCompactMap<A>(_:)(&unk_10163FBE8, v8, v5, v7, v6);
}

uint64_t sub_10026F2E4()
{
  uint64_t v1 = *(void *)(v0 + 192);
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 240) + 56))(*(void *)(v0 + 224), 1, 1, *(void *)(v0 + 232));
  *(_DWORD *)(v0 + 484) = *(_DWORD *)(v1 + 32);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_10070FB1C(v2);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 96) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 448) = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016636E0);
  unint64_t v6 = sub_100270D68();
  *uint64_t v4 = v0;
  v4[1] = sub_10026F40C;
  uint64_t v7 = *(void *)(v0 + 352);
  uint64_t v8 = *(void *)(v0 + 280);
  return Sequence.asyncCompactMap<A>(_:)(&unk_10163FBE8, v8, v5, v7, v6);
}

uint64_t sub_10026F40C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 456) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10026F52C, 0, 0);
}

uint64_t sub_10026F52C()
{
  uint64_t v30 = v0;
  uint64_t v1 = *(void *)(v0[57] + 16);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_10070FB1C(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v3 + 16);
  swift_release();
  if (v1 == v4)
  {
    uint64_t v5 = v0[36];
    v0[2] = v0[37];
    v0[5] = v5;
    v0[6] = &off_1015EE080;
    uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10163FC00 + dword_10163FC00);
    swift_retain();
    unint64_t v6 = (void *)swift_task_alloc();
    v0[58] = v6;
    *unint64_t v6 = v0;
    v6[1] = sub_10026F9A8;
    uint64_t v7 = v0[57];
    uint64_t v8 = v0[19];
    uint64_t v9 = v0[20];
    return v27(v9, v7, v8, (uint64_t)(v0 + 2));
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v11 = v0[25];
    uint64_t v12 = v0[20];
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170D788);
    sub_100272A30(v12, v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v25 = v0[25];
      uint64_t v16 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 134218755;
      v0[13] = v1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2048;
      v0[17] = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 22) = 2160;
      v0[15] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 32) = 2081;
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[16] = sub_1008FA0F0(v17, v18, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100272AFC(v25, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Peer trusts count %ld is not equal to sharing circles members count %ld, %{private,mask.hash}s!!", (uint8_t *)v16, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100272AFC(v0[25], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }

    uint64_t v20 = v0[42];
    unint64_t v19 = v0[43];
    uint64_t v21 = v0[30];
    uint64_t v26 = v0[29];
    uint64_t v28 = v0[33];
    uint64_t v22 = v0[28];
    sub_100270DC4();
    swift_allocError();
    *uint64_t v23 = 0;
    swift_willThrow();
    swift_release();
    sub_10001CFB8(v20, v19);
    swift_release();
    swift_release();
    sub_100270E18(v22);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v28, v26);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
}

uint64_t sub_10026F9A8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[7] = v2;
  v3[8] = a1;
  v3[9] = v1;
  v3[59] = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v4 = sub_10026FE80;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v3 + 2));
    uint64_t v4 = sub_10026FAE0;
  }
  return _swift_task_switch(v4, 0, 0);
}

int *sub_10026FAE0()
{
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v50 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v53 = *(void *)(v0 + 224);
  uint64_t v55 = *(void *)(v0 + 264);
  uint64_t v48 = *(void *)(v0 + 216);
  uint64_t v51 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 160);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v8(v1, v7 + *(int *)(v4 + 20), v3);
  sub_10001D074(v5, v48, &qword_101638CF0);
  v8(v50, v55, v3);
  sub_10001D074(v53, v51, &qword_101638CF0);
  unint64_t result = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v10 = *(void *)(v6 + result[16]);
  if (v10 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v10 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)(*(void *)(v0 + 176) + result[17]);
  if (v11 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v11 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v46 = *(void *)(*(void *)(v0 + 176) + result[17]);
  uint64_t v12 = (uint64_t *)(v6 + result[14]);
  uint64_t v13 = *v12;
  uint64_t v42 = v12[1];
  uint64_t v14 = (uint64_t *)(v6 + result[15]);
  uint64_t v15 = v14[1];
  uint64_t v44 = v13;
  uint64_t v45 = *v14;
  uint64_t v52 = *(void *)(v0 + 64);
  char v54 = *(unsigned char *)(v0 + 488);
  uint64_t v47 = *(void *)(v0 + 336);
  uint64_t v49 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 256);
  uint64_t v17 = *(void *)(v0 + 264);
  uint64_t v18 = *(void *)(v0 + 240);
  uint64_t v40 = *(void *)(v0 + 248);
  uint64_t v19 = *(void *)(v0 + 224);
  uint64_t v20 = *(void *)(v0 + 232);
  uint64_t v21 = *(void *)(v0 + 216);
  uint64_t v41 = *(void *)(v0 + 208);
  uint64_t v22 = *(void *)(v0 + 184);
  uint64_t v23 = *(void *)(v0 + 144);
  int v43 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100270E18(v19);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v20);
  uint64_t v24 = (int *)type metadata accessor for BeaconNamingRecord();
  uint64_t v25 = (uint64_t *)(v22 + v24[8]);
  uint64_t v26 = v25[1];
  uint64_t v37 = *v25;
  uint64_t v38 = *(void *)(v22 + v24[7]);
  uint64_t v27 = (uint64_t *)(v22 + v24[9]);
  uint64_t v28 = v27[1];
  uint64_t v39 = *v27;
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
  v29(v23, v16, v20);
  uint64_t v30 = (int *)type metadata accessor for CircleTrustEnvelopeV1(0);
  sub_1002729C8(v21, v23 + v30[5]);
  v29(v23 + v30[6], v40, v20);
  sub_1002729C8(v41, v23 + v30[7]);
  uint64_t v31 = (void *)(v23 + v30[8]);
  *uint64_t v31 = v44;
  v31[1] = v42;
  int v32 = (void *)(v23 + v30[9]);
  void *v32 = v45;
  v32[1] = v15;
  *(_DWORD *)(v23 + v30[10]) = v43;
  *(_DWORD *)(v23 + v30[11]) = v46;
  uint64_t v33 = (void *)(v23 + v30[12]);
  *uint64_t v33 = v37;
  v33[1] = v26;
  *(void *)(v23 + v30[13]) = v38;
  char v34 = (void *)(v23 + v30[14]);
  void *v34 = v39;
  v34[1] = v28;
  char v35 = (void *)(v23 + v30[15]);
  *char v35 = v47;
  v35[1] = v49;
  *(void *)(v23 + v30[16]) = v52;
  *(unsigned char *)(v23 + v30[17]) = v54;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v36 = *(uint64_t (**)(void))(v0 + 8);
  return (int *)v36();
}

uint64_t sub_10026FE80()
{
  uint64_t v2 = v0[42];
  unint64_t v1 = v0[43];
  uint64_t v3 = v0[33];
  uint64_t v4 = v0[29];
  uint64_t v5 = v0[30];
  uint64_t v6 = v0[28];
  swift_release();
  sub_10001CFB8(v2, v1);
  swift_release();
  swift_release();
  sub_100270E18(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10026FFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v5 = type metadata accessor for UUID();
  v3[5] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[6] = v6;
  v3[7] = *(void *)(v6 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100270078, a3, 0);
}

uint64_t sub_100270078()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100270168, 0, 0);
}

uint64_t sub_100270168()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100272C28;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016607D0);
  *uint64_t v4 = v0;
  v4[1] = sub_10027027C;
  uint64_t v6 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090E94, v3, v5);
}

uint64_t sub_10027027C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1002703D0()
{
  return _swift_task_switch(sub_1002703EC, 0, 0);
}

uint64_t sub_1002703EC()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v2;
    void *v2 = v0;
    v2[1] = sub_100270528;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100270528(uint64_t a1)
{
  *(void *)(*(void *)v1 + 128) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100270628, 0, 0);
}

uint64_t sub_100270628()
{
  uint64_t v1 = v0 + 16;
  uint64_t v2 = *(void *)(v0 + 128);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v3(v2);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170D788);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No BeaconStoreActor available!", v8, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v9 = 0xD000000000000010;
    v9[1] = 0x80000001013F23D0;
    swift_willThrow();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

unint64_t sub_1002707D0()
{
  unint64_t result = qword_10163FBC8;
  if (!qword_10163FBC8)
  {
    sub_10000592C(&qword_10163FBC0);
    sub_100270874(&qword_10163FBD0, (void (*)(uint64_t))type metadata accessor for KeyDropInterface.KeyPackage);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FBC8);
  }
  return result;
}

uint64_t sub_100270874(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002708BC()
{
  return _swift_task_switch(sub_1002708D8, 0, 0);
}

uint64_t sub_1002708D8()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390A8 + dword_1016390A8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v2;
    void *v2 = v0;
    v2[1] = sub_100270A14;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100270A14(uint64_t a1)
{
  *(void *)(*(void *)v1 + 128) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100270B14, 0, 0);
}

uint64_t sub_100270B14()
{
  uint64_t v1 = v0 + 16;
  uint64_t v2 = *(void *)(v0 + 128);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v3(v2);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170D788);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No FamilyCircleService available!", v8, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v9 = 0xD000000000000013;
    v9[1] = 0x80000001013F6A00;
    swift_willThrow();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

uint64_t sub_100270CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10001D2E4;
  return sub_10026FFA8(a1, a2, v2);
}

unint64_t sub_100270D68()
{
  unint64_t result = qword_10163FBF0;
  if (!qword_10163FBF0)
  {
    sub_10000592C((uint64_t *)&unk_1016636E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FBF0);
  }
  return result;
}

unint64_t sub_100270DC4()
{
  unint64_t result = qword_10163FBF8;
  if (!qword_10163FBF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FBF8);
  }
  return result;
}

uint64_t sub_100270E18(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101638CF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100270E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for PeerTrustEnvelopeV1(0);
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnerPeerTrust();
  v4[13] = v7;
  v4[14] = *(void *)(v7 - 8);
  v4[15] = swift_task_alloc();
  return _swift_task_switch(sub_100271030, 0, 0);
}

uint64_t sub_100271030()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 128) = v2;
  uint64_t v3 = *(uint64_t **)(v0 + 120);
  if (v2)
  {
    uint64_t v77 = (char *)(v0 + 282);
    uint64_t v4 = *(void *)(v0 + 112);
    uint64_t v76 = (char *)(v0 + 286);
    uint64_t v5 = *(uint64_t **)(v0 + 32);
    uint64_t v6 = type metadata accessor for OwnerSharingCircle();
    *(void *)(v0 + 136) = v6;
    *(_DWORD *)(v0 + 216) = *(_DWORD *)(v6 + 20);
    int v7 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 220) = v7;
    uint64_t v8 = *(void *)(v4 + 72);
    *(void *)(v0 + 152) = 0;
    *(void *)(v0 + 160) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 144) = v8;
    uint64_t v9 = v1 + ((v7 + 32) & ~(unint64_t)v7);
    swift_bridgeObjectRetain();
    sub_100272A30(v9, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v11 = *v3;
    unint64_t v10 = v3[1];
    uint64_t v13 = *v5;
    unint64_t v12 = v5[1];
    uint64_t v14 = 0;
    switch(v10 >> 62)
    {
      case 1uLL:
        LODWORD(v14) = HIDWORD(v11) - v11;
        if (__OFSUB__(HIDWORD(v11), v11))
        {
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
        }
        uint64_t v14 = (int)v14;
LABEL_10:
        switch(v12 >> 62)
        {
          case 1uLL:
            LODWORD(v20) = HIDWORD(v13) - v13;
            if (__OFSUB__(HIDWORD(v13), v13)) {
              goto LABEL_88;
            }
            uint64_t v20 = (int)v20;
LABEL_15:
            if (v14 != v20) {
              goto LABEL_77;
            }
            if (v14 >= 1)
            {
              switch(v10 >> 62)
              {
                case 1uLL:
                  if (v11 >> 32 < (int)v11) {
                    goto LABEL_90;
                  }
                  sub_1000361E0(v11, v10);
                  uint64_t v40 = __DataStorage._bytes.getter();
                  if (!v40) {
                    goto LABEL_34;
                  }
                  uint64_t v41 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v11, v41)) {
                    goto LABEL_92;
                  }
                  v40 += (int)v11 - v41;
LABEL_34:
                  __DataStorage._length.getter();
                  sub_100DC89E8(v40, v13, v12, (char *)(v0 + 283));
                  sub_10001CFB8(v11, v10);
                  if ((*(unsigned char *)(v0 + 283) & 1) == 0) {
                    goto LABEL_77;
                  }
                  break;
                case 2uLL:
                  uint64_t v42 = *(void *)(v11 + 16);
                  uint64_t v43 = *(void *)(v11 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v44 = __DataStorage._bytes.getter();
                  if (!v44) {
                    goto LABEL_39;
                  }
                  uint64_t v45 = __DataStorage._offset.getter();
                  if (__OFSUB__(v42, v45)) {
                    goto LABEL_93;
                  }
                  v44 += v42 - v45;
LABEL_39:
                  if (__OFSUB__(v43, v42)) {
                    goto LABEL_91;
                  }
                  __DataStorage._length.getter();
                  sub_100DC89E8(v44, v13, v12, v77);
                  swift_release();
                  swift_release();
                  if ((*v77 & 1) == 0) {
                    goto LABEL_77;
                  }
                  break;
                case 3uLL:
                  *(void *)(v0 + 230) = 0;
                  *(void *)(v0 + 224) = 0;
                  sub_100DC89E8(v0 + 224, v13, v12, (char *)(v0 + 287));
                  if ((*(unsigned char *)(v0 + 287) & 1) == 0) {
                    goto LABEL_77;
                  }
                  break;
                default:
                  *(void *)(v0 + 238) = v11;
                  *(_WORD *)(v0 + 246) = v10;
                  *(unsigned char *)(v0 + 248) = BYTE2(v10);
                  *(unsigned char *)(v0 + 249) = BYTE3(v10);
                  *(unsigned char *)(v0 + 250) = BYTE4(v10);
                  *(unsigned char *)(v0 + 251) = BYTE5(v10);
                  sub_100DC89E8(v0 + 238, v13, v12, (char *)(v0 + 285));
                  if ((*(unsigned char *)(v0 + 285) & 1) == 0) {
                    goto LABEL_77;
                  }
                  break;
              }
            }
LABEL_21:
            if ((static UUID.== infix(_:_:)() & 1) == 0) {
              goto LABEL_77;
            }
            uint64_t v23 = *(void *)(v0 + 120);
            uint64_t v24 = *(void *)(v0 + 104);
            uint64_t v25 = *(void *)(v0 + 32);
            if (*(unsigned __int8 *)(v23 + *(int *)(v24 + 24)) != *(unsigned __int8 *)(v25 + *(int *)(v24 + 24))
              || (sub_1009CA754(v23 + *(int *)(v24 + 28), v25 + *(int *)(v24 + 28)) & 1) == 0)
            {
              goto LABEL_77;
            }
            uint64_t v26 = *(void *)(v0 + 120);
            uint64_t v27 = *(void *)(v0 + 104);
            uint64_t v28 = *(void *)(v0 + 32);
            uint64_t v29 = *(int *)(v27 + 32);
            uint64_t v30 = *(void *)(v26 + v29);
            uint64_t v31 = *(void *)(v26 + v29 + 8);
            int v32 = (void *)(v28 + v29);
            if (v30 == *v32 && v31 == v32[1]) {
              goto LABEL_28;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_77;
            }
            uint64_t v26 = *(void *)(v0 + 120);
            uint64_t v27 = *(void *)(v0 + 104);
            uint64_t v28 = *(void *)(v0 + 32);
LABEL_28:
            uint64_t v33 = *(int *)(v27 + 36);
            char v34 = (uint64_t *)(v26 + v33);
            uint64_t v35 = *v34;
            unint64_t v36 = v34[1];
            uint64_t v38 = *(void *)(v28 + v33);
            unint64_t v37 = *(void *)(v28 + v33 + 8);
            uint64_t v39 = 0;
            switch(v36 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v35), v35)) {
                  goto LABEL_94;
                }
                uint64_t v39 = HIDWORD(v35) - (int)v35;
LABEL_47:
                sub_1000361E0(v35, v36);
                break;
              case 2uLL:
                uint64_t v47 = *(void *)(v35 + 16);
                uint64_t v46 = *(void *)(v35 + 24);
                uint64_t v39 = v46 - v47;
                if (!__OFSUB__(v46, v47)) {
                  goto LABEL_47;
                }
                goto LABEL_95;
              case 3uLL:
                goto LABEL_48;
              default:
                uint64_t v39 = BYTE6(v36);
                goto LABEL_48;
            }
            break;
          case 2uLL:
            uint64_t v22 = *(void *)(v13 + 16);
            uint64_t v21 = *(void *)(v13 + 24);
            BOOL v19 = __OFSUB__(v21, v22);
            uint64_t v20 = v21 - v22;
            if (!v19) {
              goto LABEL_15;
            }
            goto LABEL_89;
          case 3uLL:
            if (!v14) {
              goto LABEL_21;
            }
            goto LABEL_77;
          default:
            uint64_t v20 = BYTE6(v12);
            goto LABEL_15;
        }
        break;
      case 2uLL:
        uint64_t v18 = *(void *)(v11 + 16);
        uint64_t v17 = *(void *)(v11 + 24);
        BOOL v19 = __OFSUB__(v17, v18);
        uint64_t v14 = v17 - v18;
        if (!v19) {
          goto LABEL_10;
        }
        goto LABEL_87;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v14 = BYTE6(v10);
        goto LABEL_10;
    }
LABEL_48:
    switch(v37 >> 62)
    {
      case 1uLL:
        LODWORD(v48) = HIDWORD(v38) - v38;
        if (__OFSUB__(HIDWORD(v38), v38)) {
          goto LABEL_96;
        }
        uint64_t v48 = (int)v48;
LABEL_53:
        if (v39 != v48)
        {
LABEL_58:
          sub_10001CFB8(v35, v36);
          goto LABEL_77;
        }
        if (v39 < 1)
        {
LABEL_59:
          sub_10001CFB8(v35, v36);
LABEL_60:
          uint64_t v56 = *(int *)(*(void *)(v0 + 104) + 40);
          if (*(unsigned __int8 *)(*(void *)(v0 + 120) + v56) == *(unsigned __int8 *)(*(void *)(v0 + 32) + v56))
          {
            sub_1000361E0(v35, v36);
            uint64_t v57 = &qword_10170DA90;
            if (qword_101636948 != -1) {
              swift_once();
            }
            goto LABEL_81;
          }
LABEL_77:
          uint64_t v64 = *(void *)(v0 + 136);
          uint64_t v65 = *(void *)(v0 + 16);
          type metadata accessor for __DataStorage();
          swift_allocObject();
          unint64_t v36 = __DataStorage.init(length:)() | 0x4000000000000000;
          uint64_t v66 = *(void *)(v65 + *(int *)(v64 + 32));
          if (!*(void *)(v66 + 16)
            || (unint64_t v67 = sub_1007240CC(*(void *)(v0 + 120) + *(int *)(*(void *)(v0 + 104) + 20)), (v68 & 1) == 0)
            || *(unsigned char *)(*(void *)(v66 + 56) + v67) != 1)
          {
            uint64_t v69 = 0;
            uint64_t v35 = 0x2000000000;
            uint64_t v70 = 0xE000000000000000;
            goto LABEL_83;
          }
          uint64_t v57 = (uint64_t *)(*(void *)(v0 + 120) + *(int *)(*(void *)(v0 + 104) + 32));
          uint64_t v35 = 0x2000000000;
LABEL_81:
          uint64_t v69 = *v57;
          uint64_t v70 = swift_bridgeObjectRetain();
LABEL_83:
          *(void *)(v0 + 184) = v35;
          *(void *)(v0 + 192) = v36;
          *(void *)(v0 + 168) = v69;
          *(void *)(v0 + 176) = v70;
          uint64_t v71 = *(int *)(v0 + 216);
          uint64_t v72 = *(void *)(v0 + 16);
          sub_10001CD44(*(void **)(v0 + 40), *(void *)(*(void *)(v0 + 40) + 24));
          Swift::String v73 = (void *)swift_task_alloc();
          *(void *)(v0 + 200) = v73;
          *Swift::String v73 = v0;
          v73[1] = sub_100271B10;
          uint64_t v74 = *(void *)(v0 + 120);
          uint64_t v75 = *(void *)(v0 + 96);
          return sub_100C2F69C(v75, v74, v72 + v71);
        }
        break;
      case 2uLL:
        uint64_t v50 = *(void *)(v38 + 16);
        uint64_t v49 = *(void *)(v38 + 24);
        BOOL v19 = __OFSUB__(v49, v50);
        uint64_t v48 = v49 - v50;
        if (!v19) {
          goto LABEL_53;
        }
        goto LABEL_97;
      case 3uLL:
        if (v39) {
          goto LABEL_58;
        }
        goto LABEL_59;
      default:
        uint64_t v48 = BYTE6(v37);
        goto LABEL_53;
    }
    uint64_t v51 = (unsigned char *)(v0 + 281);
    switch(v36 >> 62)
    {
      case 1uLL:
        if (v35 >> 32 < (int)v35)
        {
          __break(1u);
LABEL_99:
          __break(1u);
        }
        else
        {
          sub_1000361E0(v35, v36);
          sub_1000361E0(v38, v37);
          uint64_t v58 = __DataStorage._bytes.getter();
          if (!v58)
          {
LABEL_67:
            __DataStorage._length.getter();
            uint64_t v51 = (unsigned char *)(v0 + 284);
            sub_100DC89E8(v58, v38, v37, (char *)(v0 + 284));
            sub_10001CFB8(v35, v36);
LABEL_76:
            sub_10001CFB8(v38, v37);
            sub_10001CFB8(v35, v36);
            if ((*v51 & 1) == 0) {
              goto LABEL_77;
            }
            goto LABEL_60;
          }
          uint64_t v59 = __DataStorage._offset.getter();
          if (!__OFSUB__((int)v35, v59))
          {
            v58 += (int)v35 - v59;
            goto LABEL_67;
          }
        }
        __break(1u);
LABEL_101:
        __break(1u);
        JUMPOUT(0x100271AB0);
      case 2uLL:
        uint64_t v60 = *(void *)(v35 + 16);
        uint64_t v61 = *(void *)(v35 + 24);
        sub_1000361E0(v38, v37);
        swift_retain();
        swift_retain();
        uint64_t v62 = __DataStorage._bytes.getter();
        if (!v62) {
          goto LABEL_71;
        }
        uint64_t v63 = __DataStorage._offset.getter();
        if (__OFSUB__(v60, v63)) {
          goto LABEL_101;
        }
        v62 += v60 - v63;
LABEL_71:
        if (__OFSUB__(v61, v60)) {
          goto LABEL_99;
        }
        __DataStorage._length.getter();
        sub_100DC89E8(v62, v38, v37, v76);
        swift_release();
        swift_release();
        sub_10001CFB8(v38, v37);
        sub_10001CFB8(v35, v36);
        if ((*v76 & 1) == 0) {
          goto LABEL_77;
        }
        goto LABEL_60;
      case 3uLL:
        *(void *)(v0 + 272) = 0;
        *(void *)(v0 + 266) = 0;
        sub_1000361E0(v38, v37);
        uint64_t v52 = (char *)(v0 + 281);
        uint64_t v53 = v0 + 266;
        uint64_t v54 = v38;
        unint64_t v55 = v37;
        goto LABEL_75;
      default:
        *(void *)(v0 + 252) = v35;
        *(_WORD *)(v0 + 260) = v36;
        *(unsigned char *)(v0 + 262) = BYTE2(v36);
        *(unsigned char *)(v0 + 263) = BYTE3(v36);
        *(unsigned char *)(v0 + 264) = BYTE4(v36);
        *(unsigned char *)(v0 + 265) = BYTE5(v36);
        sub_1000361E0(v38, v37);
        uint64_t v52 = (char *)(v0 + 280);
        uint64_t v53 = v0 + 252;
        uint64_t v54 = v38;
        unint64_t v55 = v37;
        uint64_t v51 = (unsigned char *)(v0 + 280);
LABEL_75:
        sub_100DC89E8(v53, v54, v55, v52);
        goto LABEL_76;
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void *))(v0 + 8);
  return v15(_swiftEmptyArrayStorage);
}

uint64_t sub_100271B10()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1002728E0;
  }
  else
  {
    uint64_t v2 = sub_100271C78;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100271C78()
{
  uint64_t v1 = *(void *)(v0 + 184);
  unint64_t v2 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 88) + 16))(v5, *(void *)(v0 + 96), *(void *)(v0 + 80));
  uint64_t v8 = (void *)(v5 + *(int *)(v7 + 20));
  *uint64_t v8 = v4;
  v8[1] = v3;
  uint64_t v9 = (uint64_t *)(v5 + *(int *)(v7 + 24));
  *uint64_t v9 = v1;
  v9[1] = v2;
  sub_100272A30(v5, v6, type metadata accessor for PeerTrustEnvelopeV1);
  sub_1000361E0(v1, v2);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v11 = *(void *)(v0 + 160);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v11 = sub_100A6F634(0, *(void *)(v11 + 16) + 1, 1, *(void *)(v0 + 160));
  }
  unint64_t v13 = *(void *)(v11 + 16);
  unint64_t v12 = *(void *)(v11 + 24);
  if (v13 >= v12 >> 1) {
    unint64_t v11 = sub_100A6F634(v12 > 1, v13 + 1, 1, v11);
  }
  uint64_t v15 = *(void *)(v0 + 184);
  unint64_t v14 = *(void *)(v0 + 192);
  __s1 = *(void **)(v0 + 120);
  uint64_t v94 = *(void *)(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 88);
  uint64_t v17 = *(void *)(v0 + 96);
  uint64_t v19 = *(void *)(v0 + 72);
  uint64_t v18 = *(void *)(v0 + 80);
  uint64_t v21 = *(void *)(v0 + 56);
  uint64_t v20 = *(void *)(v0 + 64);
  uint64_t v91 = *(void *)(v0 + 152) + 1;
  *(void *)(v11 + 16) = v13 + 1;
  sub_100272A98(v20, v11+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v13);
  sub_10001CFB8(v15, v14);
  sub_100272AFC(v19, type metadata accessor for PeerTrustEnvelopeV1);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
  sub_100272AFC((uint64_t)__s1, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  if (v91 == v94)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v22(v11);
  }
  uint64_t v90 = (char *)(v0 + 280);
  uint64_t v89 = (void *)(v0 + 266);
  uint64_t v92 = (char *)(v0 + 282);
  uint64_t v88 = (char *)(v0 + 286);
  uint64_t v95 = *(void *)(v0 + 208);
  uint64_t v24 = *(void *)(v0 + 144);
  uint64_t v25 = *(void *)(v0 + 152) + 1;
  *(void *)(v0 + 152) = v25;
  *(void *)(v0 + 160) = v11;
  uint64_t v26 = *(uint64_t **)(v0 + 120);
  uint64_t v27 = *(uint64_t **)(v0 + 32);
  sub_100272A30(*(void *)(v0 + 24)+ ((*(unsigned __int8 *)(v0 + 220) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 220))+ v24 * v25, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  uint64_t v28 = *v26;
  unint64_t v29 = v26[1];
  uint64_t v31 = *v27;
  unint64_t v30 = v27[1];
  uint64_t v32 = 0;
  switch(v29 >> 62)
  {
    case 1uLL:
      LODWORD(v32) = HIDWORD(v28) - v28;
      if (__OFSUB__(HIDWORD(v28), v28))
      {
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
      }
      uint64_t v32 = (int)v32;
LABEL_14:
      switch(v30 >> 62)
      {
        case 1uLL:
          LODWORD(v36) = HIDWORD(v31) - v31;
          if (__OFSUB__(HIDWORD(v31), v31)) {
            goto LABEL_101;
          }
          uint64_t v36 = (int)v36;
LABEL_19:
          if (v32 != v36) {
            goto LABEL_90;
          }
          if (v32 >= 1)
          {
            switch(v29 >> 62)
            {
              case 1uLL:
                if (v28 >> 32 < (int)v28) {
                  goto LABEL_103;
                }
                sub_1000361E0(v28, v29);
                uint64_t v39 = __DataStorage._bytes.getter();
                if (!v39) {
                  goto LABEL_31;
                }
                uint64_t v40 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v28, v40)) {
                  goto LABEL_105;
                }
                v39 += (int)v28 - v40;
LABEL_31:
                __DataStorage._length.getter();
                sub_100DC89E8(v39, v31, v30, (char *)(v0 + 283));
                uint64_t result = sub_10001CFB8(v28, v29);
                if (v95) {
                  return result;
                }
                if ((*(unsigned char *)(v0 + 283) & 1) == 0) {
                  goto LABEL_90;
                }
                goto LABEL_44;
              case 2uLL:
                uint64_t v41 = *(void *)(v28 + 16);
                uint64_t v42 = *(void *)(v28 + 24);
                swift_retain();
                swift_retain();
                uint64_t v43 = __DataStorage._bytes.getter();
                if (!v43) {
                  goto LABEL_37;
                }
                uint64_t v44 = __DataStorage._offset.getter();
                if (__OFSUB__(v41, v44)) {
                  goto LABEL_106;
                }
                v43 += v41 - v44;
LABEL_37:
                if (__OFSUB__(v42, v41)) {
                  goto LABEL_104;
                }
                __DataStorage._length.getter();
                sub_100DC89E8(v43, v31, v30, v92);
                swift_release();
                uint64_t result = swift_release();
                if (v95) {
                  return result;
                }
                if ((*v92 & 1) == 0) {
                  goto LABEL_90;
                }
LABEL_44:
                uint64_t v95 = 0;
                break;
              case 3uLL:
                *(void *)(v0 + 230) = 0;
                *(void *)(v0 + 224) = 0;
                uint64_t result = sub_100DC89E8(v0 + 224, v31, v30, (char *)(v0 + 287));
                if (v95) {
                  return result;
                }
                if (*(unsigned char *)(v0 + 287)) {
                  goto LABEL_44;
                }
                goto LABEL_90;
              default:
                *(void *)(v0 + 238) = v28;
                *(_WORD *)(v0 + 246) = v29;
                *(unsigned char *)(v0 + 248) = BYTE2(v29);
                *(unsigned char *)(v0 + 249) = BYTE3(v29);
                *(unsigned char *)(v0 + 250) = BYTE4(v29);
                *(unsigned char *)(v0 + 251) = BYTE5(v29);
                uint64_t result = sub_100DC89E8(v0 + 238, v31, v30, (char *)(v0 + 285));
                if (v95) {
                  return result;
                }
                if ((*(unsigned char *)(v0 + 285) & 1) == 0) {
                  goto LABEL_90;
                }
                goto LABEL_44;
            }
          }
LABEL_45:
          if ((static UUID.== infix(_:_:)() & 1) == 0) {
            goto LABEL_90;
          }
          uint64_t v45 = *(void *)(v0 + 120);
          uint64_t v46 = *(void *)(v0 + 104);
          uint64_t v47 = *(void *)(v0 + 32);
          if (*(unsigned __int8 *)(v45 + *(int *)(v46 + 24)) != *(unsigned __int8 *)(v47 + *(int *)(v46 + 24))
            || (sub_1009CA754(v45 + *(int *)(v46 + 28), v47 + *(int *)(v46 + 28)) & 1) == 0)
          {
            goto LABEL_90;
          }
          uint64_t v48 = *(void *)(v0 + 120);
          uint64_t v49 = *(void *)(v0 + 104);
          uint64_t v50 = *(void *)(v0 + 32);
          uint64_t v51 = *(int *)(v49 + 32);
          uint64_t v52 = *(void *)(v48 + v51);
          uint64_t v53 = *(void *)(v48 + v51 + 8);
          uint64_t v54 = (void *)(v50 + v51);
          if (v52 == *v54 && v53 == v54[1]) {
            goto LABEL_52;
          }
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_90;
          }
          uint64_t v48 = *(void *)(v0 + 120);
          uint64_t v49 = *(void *)(v0 + 104);
          uint64_t v50 = *(void *)(v0 + 32);
LABEL_52:
          uint64_t v55 = *(int *)(v49 + 36);
          uint64_t v56 = (uint64_t *)(v48 + v55);
          uint64_t v57 = *v56;
          unint64_t v58 = v56[1];
          uint64_t v60 = *(void *)(v50 + v55);
          unint64_t v59 = *(void *)(v50 + v55 + 8);
          uint64_t v61 = 0;
          switch(v58 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v57), v57)) {
                goto LABEL_107;
              }
              uint64_t v61 = HIDWORD(v57) - (int)v57;
LABEL_57:
              sub_1000361E0(v57, v58);
              break;
            case 2uLL:
              uint64_t v63 = *(void *)(v57 + 16);
              uint64_t v62 = *(void *)(v57 + 24);
              uint64_t v61 = v62 - v63;
              if (!__OFSUB__(v62, v63)) {
                goto LABEL_57;
              }
              goto LABEL_108;
            case 3uLL:
              goto LABEL_58;
            default:
              uint64_t v61 = BYTE6(v58);
              goto LABEL_58;
          }
          break;
        case 2uLL:
          uint64_t v38 = *(void *)(v31 + 16);
          uint64_t v37 = *(void *)(v31 + 24);
          BOOL v35 = __OFSUB__(v37, v38);
          uint64_t v36 = v37 - v38;
          if (!v35) {
            goto LABEL_19;
          }
          goto LABEL_102;
        case 3uLL:
          if (!v32) {
            goto LABEL_45;
          }
          goto LABEL_90;
        default:
          uint64_t v36 = BYTE6(v30);
          goto LABEL_19;
      }
      break;
    case 2uLL:
      uint64_t v34 = *(void *)(v28 + 16);
      uint64_t v33 = *(void *)(v28 + 24);
      BOOL v35 = __OFSUB__(v33, v34);
      uint64_t v32 = v33 - v34;
      if (!v35) {
        goto LABEL_14;
      }
      goto LABEL_100;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v32 = BYTE6(v29);
      goto LABEL_14;
  }
LABEL_58:
  switch(v59 >> 62)
  {
    case 1uLL:
      LODWORD(v64) = HIDWORD(v60) - v60;
      if (__OFSUB__(HIDWORD(v60), v60)) {
        goto LABEL_109;
      }
      uint64_t v64 = (int)v64;
LABEL_63:
      if (v61 != v64)
      {
LABEL_70:
        sub_10001CFB8(v57, v58);
        goto LABEL_90;
      }
      if (v61 >= 1)
      {
        switch(v58 >> 62)
        {
          case 1uLL:
            if (v57 >> 32 < (int)v57)
            {
              __break(1u);
LABEL_112:
              __break(1u);
            }
            else
            {
              sub_1000361E0(v57, v58);
              sub_1000361E0(v60, v59);
              uint64_t v69 = __DataStorage._bytes.getter();
              if (!v69) {
                goto LABEL_79;
              }
              uint64_t v70 = __DataStorage._offset.getter();
              if (!__OFSUB__((int)v57, v70))
              {
                v69 += (int)v57 - v70;
LABEL_79:
                __DataStorage._length.getter();
                uint64_t v71 = (unsigned char *)(v0 + 284);
                sub_100DC89E8(v69, v60, v59, (char *)(v0 + 284));
                uint64_t result = sub_10001CFB8(v57, v58);
                if (v95) {
                  return result;
                }
LABEL_89:
                sub_10001CFB8(v60, v59);
                sub_10001CFB8(v57, v58);
                if ((*v71 & 1) == 0) {
                  goto LABEL_90;
                }
                goto LABEL_72;
              }
            }
            __break(1u);
LABEL_114:
            __break(1u);
            JUMPOUT(0x100272880);
          case 2uLL:
            uint64_t v72 = *(void *)(v57 + 16);
            uint64_t v73 = *(void *)(v57 + 24);
            sub_1000361E0(v60, v59);
            swift_retain();
            swift_retain();
            uint64_t v74 = __DataStorage._bytes.getter();
            if (!v74) {
              goto LABEL_84;
            }
            uint64_t v75 = __DataStorage._offset.getter();
            if (__OFSUB__(v72, v75)) {
              goto LABEL_114;
            }
            v74 += v72 - v75;
LABEL_84:
            if (__OFSUB__(v73, v72)) {
              goto LABEL_112;
            }
            __DataStorage._length.getter();
            sub_100DC89E8(v74, v60, v59, v88);
            swift_release();
            uint64_t result = swift_release();
            if (v95) {
              return result;
            }
            sub_10001CFB8(v60, v59);
            sub_10001CFB8(v57, v58);
            if ((*v88 & 1) == 0) {
              goto LABEL_90;
            }
            goto LABEL_72;
          case 3uLL:
            *(void *)(v0 + 272) = 0;
            *uint64_t v89 = 0;
            sub_1000361E0(v60, v59);
            uint64_t v71 = (unsigned char *)(v0 + 281);
            uint64_t result = sub_100DC89E8((uint64_t)v89, v60, v59, (char *)(v0 + 281));
            if (!v95) {
              goto LABEL_89;
            }
            return result;
          default:
            *(void *)(v0 + 252) = v57;
            *(_WORD *)(v0 + 260) = v58;
            *(unsigned char *)(v0 + 262) = BYTE2(v58);
            *(unsigned char *)(v0 + 263) = BYTE3(v58);
            *(unsigned char *)(v0 + 264) = BYTE4(v58);
            *(unsigned char *)(v0 + 265) = BYTE5(v58);
            sub_1000361E0(v60, v59);
            uint64_t result = sub_100DC89E8(v0 + 252, v60, v59, v90);
            if (v95) {
              return result;
            }
            sub_10001CFB8(v60, v59);
            sub_10001CFB8(v57, v58);
            if ((*v90 & 1) == 0) {
              goto LABEL_90;
            }
            goto LABEL_72;
        }
      }
LABEL_71:
      sub_10001CFB8(v57, v58);
LABEL_72:
      uint64_t v67 = *(int *)(*(void *)(v0 + 104) + 40);
      if (*(unsigned __int8 *)(*(void *)(v0 + 120) + v67) == *(unsigned __int8 *)(*(void *)(v0 + 32) + v67))
      {
        sub_1000361E0(v57, v58);
        char v68 = &qword_10170DA90;
        if (qword_101636948 != -1) {
          swift_once();
        }
        goto LABEL_94;
      }
LABEL_90:
      uint64_t v76 = *(void *)(v0 + 136);
      uint64_t v77 = *(void *)(v0 + 16);
      type metadata accessor for __DataStorage();
      swift_allocObject();
      unint64_t v58 = __DataStorage.init(length:)() | 0x4000000000000000;
      uint64_t v78 = *(void *)(v77 + *(int *)(v76 + 32));
      if (!*(void *)(v78 + 16)
        || (unint64_t v79 = sub_1007240CC(*(void *)(v0 + 120) + *(int *)(*(void *)(v0 + 104) + 20)), (v80 & 1) == 0)
        || *(unsigned char *)(*(void *)(v78 + 56) + v79) != 1)
      {
        uint64_t v81 = 0;
        uint64_t v57 = 0x2000000000;
        uint64_t v82 = 0xE000000000000000;
        goto LABEL_96;
      }
      char v68 = (uint64_t *)(*(void *)(v0 + 120) + *(int *)(*(void *)(v0 + 104) + 32));
      uint64_t v57 = 0x2000000000;
LABEL_94:
      uint64_t v81 = *v68;
      uint64_t v82 = swift_bridgeObjectRetain();
LABEL_96:
      *(void *)(v0 + 184) = v57;
      *(void *)(v0 + 192) = v58;
      *(void *)(v0 + 168) = v81;
      *(void *)(v0 + 176) = v82;
      uint64_t v83 = *(int *)(v0 + 216);
      uint64_t v84 = *(void *)(v0 + 16);
      sub_10001CD44(*(void **)(v0 + 40), *(void *)(*(void *)(v0 + 40) + 24));
      uint64_t v85 = (void *)swift_task_alloc();
      *(void *)(v0 + 200) = v85;
      *uint64_t v85 = v0;
      v85[1] = sub_100271B10;
      uint64_t v86 = *(void *)(v0 + 120);
      uint64_t v87 = *(void *)(v0 + 96);
      return sub_100C2F69C(v87, v86, v84 + v83);
    case 2uLL:
      uint64_t v66 = *(void *)(v60 + 16);
      uint64_t v65 = *(void *)(v60 + 24);
      BOOL v35 = __OFSUB__(v65, v66);
      uint64_t v64 = v65 - v66;
      if (!v35) {
        goto LABEL_63;
      }
      goto LABEL_110;
    case 3uLL:
      if (v61) {
        goto LABEL_70;
      }
      goto LABEL_71;
    default:
      uint64_t v64 = BYTE6(v59);
      goto LABEL_63;
  }
}

uint64_t sub_1002728E0()
{
  uint64_t v1 = v0[15];
  sub_10001CFB8(v0[23], v0[24]);
  sub_100272AFC(v1, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1002729C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100272A30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100272A98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PeerTrustEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100272AFC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100272B5C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100272C28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100E58EC8(v4, a1);
}

unsigned char *storeEnumTagSinglePayload for CircleTrustEnvelopeTransformerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100272D68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CircleTrustEnvelopeTransformerError()
{
  return &type metadata for CircleTrustEnvelopeTransformerError;
}

unint64_t sub_100272DA4()
{
  unint64_t result = qword_10163FC08;
  if (!qword_10163FC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FC08);
  }
  return result;
}

BOOL sub_100272DF8(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  int v3 = result;
  if (*(unsigned char *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    int v6 = *(unsigned __int8 *)(a2 + i);
    unint64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100272E60(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100272EC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for OwnerSharingCircle();
  __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void *)(a2 + 16);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v10 = *(void *)(v5 + 72);
  v84[1] = a2;
  swift_bridgeObjectRetain();
  uint64_t v86 = a1;
  uint64_t v87 = v4;
  uint64_t v88 = v10;
  while (2)
  {
    sub_10027A8CC(v9, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v11 = *v7;
    unint64_t v12 = v7[1];
    uint64_t v13 = *a1;
    unint64_t v14 = a1[1];
    uint64_t v15 = 0;
    switch(v12 >> 62)
    {
      case 1uLL:
        LODWORD(v15) = HIDWORD(v11) - v11;
        if (__OFSUB__(HIDWORD(v11), v11))
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
        }
        uint64_t v15 = (int)v15;
LABEL_10:
        unint64_t v19 = v14 >> 62;
        switch(v14 >> 62)
        {
          case 1uLL:
            LODWORD(v20) = HIDWORD(v13) - v13;
            if (__OFSUB__(HIDWORD(v13), v13)) {
              goto LABEL_127;
            }
            uint64_t v20 = (int)v20;
LABEL_15:
            if (v15 != v20) {
              goto LABEL_4;
            }
            if (v15 < 1) {
              goto LABEL_115;
            }
            break;
          case 2uLL:
            uint64_t v22 = *(void *)(v13 + 16);
            uint64_t v21 = *(void *)(v13 + 24);
            BOOL v18 = __OFSUB__(v21, v22);
            uint64_t v20 = v21 - v22;
            if (!v18) {
              goto LABEL_15;
            }
            goto LABEL_128;
          case 3uLL:
            if (v15) {
              goto LABEL_4;
            }
            goto LABEL_115;
          default:
            uint64_t v20 = BYTE6(v14);
            goto LABEL_15;
        }
        break;
      case 2uLL:
        uint64_t v17 = *(void *)(v11 + 16);
        uint64_t v16 = *(void *)(v11 + 24);
        BOOL v18 = __OFSUB__(v16, v17);
        uint64_t v15 = v16 - v17;
        if (!v18) {
          goto LABEL_10;
        }
        goto LABEL_126;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v15 = BYTE6(v12);
        goto LABEL_10;
    }
    uint64_t v89 = *a1;
    switch(v12 >> 62)
    {
      case 1uLL:
        if ((int)v11 > v11 >> 32) {
          goto LABEL_129;
        }
        sub_1000361E0(v11, v12);
        uint64_t v29 = __DataStorage._bytes.getter();
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v11, v31)) {
            goto LABEL_131;
          }
          uint64_t v85 = (const void *)(v30 + (int)v11 - v31);
        }
        else
        {
          uint64_t v85 = 0;
        }
        uint64_t v10 = v88;
        __DataStorage._length.getter();
        a1 = v86;
        if (v19)
        {
          if (v19 != 1)
          {
            uint64_t v75 = *(void *)(v89 + 16);
            uint64_t v76 = *(void *)(v89 + 24);
            swift_retain();
            swift_retain();
            uint64_t v77 = (char *)__DataStorage._bytes.getter();
            if (v77)
            {
              uint64_t v78 = __DataStorage._offset.getter();
              if (__OFSUB__(v75, v78)) {
                goto LABEL_146;
              }
              v77 += v75 - v78;
            }
            BOOL v18 = __OFSUB__(v76, v75);
            int64_t v79 = v76 - v75;
            if (v18) {
              goto LABEL_141;
            }
            uint64_t v80 = __DataStorage._length.getter();
            if (v80 >= v79) {
              size_t v81 = v79;
            }
            else {
              size_t v81 = v80;
            }
            if (!v85) {
              goto LABEL_160;
            }
            uint64_t v10 = v88;
            if (!v77) {
              goto LABEL_161;
            }
            int v74 = memcmp(v85, v77, v81);
            swift_release();
            swift_release();
            sub_10001CFB8(v11, v12);
            goto LABEL_114;
          }
          uint64_t v50 = (int)v89;
          uint64_t v51 = (v89 >> 32) - (int)v89;
          if (v89 >> 32 < (int)v89) {
            goto LABEL_140;
          }
          swift_retain();
          uint64_t v52 = (char *)__DataStorage._bytes.getter();
          if (v52)
          {
            uint64_t v53 = __DataStorage._offset.getter();
            if (__OFSUB__(v50, v53)) {
              goto LABEL_147;
            }
            v52 += v50 - v53;
          }
          a1 = v86;
          uint64_t v54 = __DataStorage._length.getter();
          if (v54 >= v51) {
            size_t v55 = v51;
          }
          else {
            size_t v55 = v54;
          }
          if (!v85) {
            goto LABEL_152;
          }
          uint64_t v4 = v87;
          uint64_t v10 = v88;
          if (!v52) {
            goto LABEL_153;
          }
          int v56 = memcmp(v85, v52, v55);
          sub_10001CFB8(v89, v14);
        }
        else
        {
          __s1[0] = v89;
          LOWORD(__s1[1]) = v14;
          BYTE2(__s1[1]) = BYTE2(v14);
          BYTE3(__s1[1]) = BYTE3(v14);
          BYTE4(__s1[1]) = BYTE4(v14);
          BYTE5(__s1[1]) = BYTE5(v14);
          uint64_t v4 = v87;
          if (!v85) {
            goto LABEL_159;
          }
          int v56 = memcmp(v85, __s1, BYTE6(v14));
        }
        sub_10001CFB8(v11, v12);
        if (v56) {
          goto LABEL_4;
        }
        goto LABEL_115;
      case 2uLL:
        uint64_t v32 = v12 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v33 = *(void *)(v11 + 16);
        swift_retain();
        swift_retain();
        uint64_t v34 = __DataStorage._bytes.getter();
        if (v34)
        {
          uint64_t v35 = v34;
          uint64_t v36 = __DataStorage._offset.getter();
          if (__OFSUB__(v33, v36)) {
            goto LABEL_130;
          }
          uint64_t v85 = (const void *)(v35 + v33 - v36);
        }
        else
        {
          uint64_t v85 = 0;
        }
        __DataStorage._length.getter();
        a1 = v86;
        uint64_t v10 = v88;
        if (!v19)
        {
          __s1[0] = v89;
          LOWORD(__s1[1]) = v14;
          BYTE2(__s1[1]) = BYTE2(v14);
          BYTE3(__s1[1]) = BYTE3(v14);
          BYTE4(__s1[1]) = BYTE4(v14);
          BYTE5(__s1[1]) = BYTE5(v14);
          uint64_t v4 = v87;
          if (!v85) {
            goto LABEL_156;
          }
          int v49 = memcmp(v85, __s1, BYTE6(v14));
          goto LABEL_88;
        }
        if (v19 == 1)
        {
          v84[0] = v32;
          uint64_t v43 = (int)v89;
          uint64_t v44 = (v89 >> 32) - (int)v89;
          if (v89 >> 32 < (int)v89) {
            goto LABEL_134;
          }
          swift_retain();
          uint64_t v45 = (char *)__DataStorage._bytes.getter();
          if (v45)
          {
            uint64_t v46 = __DataStorage._offset.getter();
            if (__OFSUB__(v43, v46)) {
              goto LABEL_145;
            }
            v45 += v43 - v46;
          }
          uint64_t v47 = __DataStorage._length.getter();
          if (v47 >= v44) {
            size_t v48 = v44;
          }
          else {
            size_t v48 = v47;
          }
          if (!v85) {
            goto LABEL_150;
          }
          uint64_t v4 = v87;
          uint64_t v10 = v88;
          if (!v45) {
            goto LABEL_151;
          }
          int v49 = memcmp(v85, v45, v48);
          sub_10001CFB8(v89, v14);
LABEL_88:
          swift_release();
          swift_release();
          if (v49) {
            goto LABEL_4;
          }
          goto LABEL_115;
        }
        uint64_t v67 = *(void *)(v89 + 16);
        uint64_t v68 = *(void *)(v89 + 24);
        swift_retain();
        swift_retain();
        uint64_t v69 = (char *)__DataStorage._bytes.getter();
        if (v69)
        {
          uint64_t v70 = __DataStorage._offset.getter();
          if (__OFSUB__(v67, v70)) {
            goto LABEL_144;
          }
          v69 += v67 - v70;
        }
        BOOL v18 = __OFSUB__(v68, v67);
        int64_t v71 = v68 - v67;
        if (v18) {
          goto LABEL_139;
        }
        uint64_t v72 = __DataStorage._length.getter();
        if (v72 >= v71) {
          size_t v73 = v71;
        }
        else {
          size_t v73 = v72;
        }
        if (!v85) {
          goto LABEL_157;
        }
        uint64_t v10 = v88;
        if (!v69) {
          goto LABEL_158;
        }
        int v74 = memcmp(v85, v69, v73);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
LABEL_114:
        uint64_t v4 = v87;
        if (v74) {
          goto LABEL_4;
        }
LABEL_115:
        if ((static UUID.== infix(_:_:)() & 1) != 0
          && (static UUID.== infix(_:_:)() & 1) != 0
          && *((unsigned __int8 *)v7 + v4[7]) == *((unsigned __int8 *)a1 + v4[7])
          && (sub_100DF62D4(*(uint64_t *)((char *)v7 + v4[8]), *(uint64_t *)((char *)a1 + v4[8])) & 1) != 0
          && *((unsigned __int8 *)v7 + v4[9]) == *((unsigned __int8 *)a1 + v4[9]))
        {
          sub_10027A86C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          uint64_t v82 = 1;
          goto LABEL_122;
        }
LABEL_4:
        sub_10027A86C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        v9 += v10;
        if (--v8) {
          continue;
        }
        uint64_t v82 = 0;
LABEL_122:
        swift_bridgeObjectRelease();
        return v82;
      case 3uLL:
        memset(__s1, 0, 14);
        if (!v19) {
          goto LABEL_41;
        }
        if (v19 == 1)
        {
          uint64_t v37 = (int)v13;
          uint64_t v24 = (v13 >> 32) - (int)v13;
          if (v13 >> 32 < (int)v13) {
            goto LABEL_133;
          }
          swift_retain();
          uint64_t v38 = __DataStorage._bytes.getter();
          if (!v38) {
            goto LABEL_149;
          }
          uint64_t v26 = v38;
          uint64_t v39 = __DataStorage._offset.getter();
          uint64_t v28 = v37 - v39;
          if (__OFSUB__(v37, v39)) {
            goto LABEL_138;
          }
          goto LABEL_37;
        }
        uint64_t v63 = *(void *)(v13 + 16);
        uint64_t v64 = *(void *)(v13 + 24);
        swift_retain();
        swift_retain();
        unint64_t v59 = (char *)__DataStorage._bytes.getter();
        if (v59)
        {
          uint64_t v65 = __DataStorage._offset.getter();
          if (__OFSUB__(v63, v65)) {
            goto LABEL_143;
          }
          v59 += v63 - v65;
        }
        BOOL v18 = __OFSUB__(v64, v63);
        int64_t v61 = v64 - v63;
        if (v18) {
          goto LABEL_136;
        }
        uint64_t v62 = __DataStorage._length.getter();
        if (!v59) {
          goto LABEL_155;
        }
        goto LABEL_80;
      default:
        __s1[0] = v11;
        LOWORD(__s1[1]) = v12;
        BYTE2(__s1[1]) = BYTE2(v12);
        BYTE3(__s1[1]) = BYTE3(v12);
        BYTE4(__s1[1]) = BYTE4(v12);
        BYTE5(__s1[1]) = BYTE5(v12);
        if (v19)
        {
          if (v19 == 1)
          {
            uint64_t v23 = (int)v13;
            uint64_t v24 = (v13 >> 32) - (int)v13;
            if (v13 >> 32 < (int)v13) {
              goto LABEL_132;
            }
            swift_retain();
            uint64_t v25 = __DataStorage._bytes.getter();
            if (!v25)
            {
              __DataStorage._length.getter();
              __break(1u);
LABEL_149:
              __DataStorage._length.getter();
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
              JUMPOUT(0x1002738C8);
            }
            uint64_t v26 = v25;
            uint64_t v27 = __DataStorage._offset.getter();
            uint64_t v28 = v23 - v27;
            if (__OFSUB__(v23, v27)) {
              goto LABEL_137;
            }
LABEL_37:
            uint64_t v40 = __DataStorage._length.getter();
            if (v40 >= v24) {
              size_t v41 = v24;
            }
            else {
              size_t v41 = v40;
            }
            int v42 = memcmp(__s1, (const void *)(v26 + v28), v41);
            sub_10001CFB8(v89, v14);
            a1 = v86;
          }
          else
          {
            uint64_t v57 = *(void *)(v13 + 16);
            uint64_t v58 = *(void *)(v13 + 24);
            swift_retain();
            swift_retain();
            unint64_t v59 = (char *)__DataStorage._bytes.getter();
            if (v59)
            {
              uint64_t v60 = __DataStorage._offset.getter();
              if (__OFSUB__(v57, v60)) {
                goto LABEL_142;
              }
              v59 += v57 - v60;
            }
            BOOL v18 = __OFSUB__(v58, v57);
            int64_t v61 = v58 - v57;
            if (v18) {
              goto LABEL_135;
            }
            uint64_t v62 = __DataStorage._length.getter();
            if (!v59) {
              goto LABEL_154;
            }
LABEL_80:
            if (v62 >= v61) {
              size_t v66 = v61;
            }
            else {
              size_t v66 = v62;
            }
            int v42 = memcmp(__s1, v59, v66);
            swift_release();
            swift_release();
          }
          uint64_t v4 = v87;
          uint64_t v10 = v88;
          if (v42) {
            goto LABEL_4;
          }
        }
        else
        {
LABEL_41:
          uint64_t __s2 = v13;
          __int16 v91 = v14;
          char v92 = BYTE2(v14);
          char v93 = BYTE3(v14);
          char v94 = BYTE4(v14);
          char v95 = BYTE5(v14);
          if (memcmp(__s1, &__s2, BYTE6(v14))) {
            goto LABEL_4;
          }
        }
        goto LABEL_115;
    }
  }
}

BOOL sub_1002738F8(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = qword_101351608[result];
  if (qword_101351608[*(char *)(a2 + 32)] == v3) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    uint64_t v6 = qword_101351608[*(char *)(a2 + i)];
    unint64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10027396C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = a2;
  uint64_t v7 = (char *)(a2 >> 62);
  unint64_t v75 = HIDWORD(a1);
  BOOL v8 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v78 = v8;
  size_t __n = BYTE6(a2);
  uint64_t v76 = (int)a1;
  size_t v77 = HIDWORD(a1) - (int)a1;
  uint64_t v74 = a1 >> 32;
  uint64_t v70 = (a1 >> 32) - (int)a1;
  swift_bridgeObjectRetain();
  uint64_t v9 = (unint64_t *)(a3 + 40);
  unint64_t v72 = HIDWORD(v5);
  unint64_t v73 = v5 >> 40;
  uint64_t v80 = v7;
  unint64_t v71 = v5;
  int v79 = (int)v7;
  while (2)
  {
    uint64_t v11 = *(v9 - 1);
    unint64_t v10 = *v9;
    unint64_t v12 = *v9 >> 62;
    v9 += 2;
    uint64_t v13 = 0;
    switch(v12)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v11), v11))
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
        }
        uint64_t v13 = HIDWORD(v11) - (int)v11;
LABEL_14:
        sub_1000361E0(v11, v10);
        break;
      case 2uLL:
        uint64_t v15 = *(void *)(v11 + 16);
        uint64_t v14 = *(void *)(v11 + 24);
        uint64_t v13 = v14 - v15;
        if (!__OFSUB__(v14, v15)) {
          goto LABEL_14;
        }
        goto LABEL_121;
      case 3uLL:
        break;
      default:
        uint64_t v13 = BYTE6(v10);
        break;
    }
    size_t v16 = __n;
    switch(v80)
    {
      case 1:
        size_t v16 = v77;
        if (v78) {
          goto LABEL_122;
        }
        goto LABEL_19;
      case 2:
        uint64_t v18 = *(void *)(a1 + 16);
        uint64_t v17 = *(void *)(a1 + 24);
        BOOL v19 = __OFSUB__(v17, v18);
        size_t v16 = v17 - v18;
        if (!v19) {
          goto LABEL_19;
        }
        goto LABEL_123;
      case 3:
        if (v13) {
          goto LABEL_7;
        }
        goto LABEL_118;
      default:
LABEL_19:
        if (v13 != v16)
        {
LABEL_7:
          sub_10001CFB8(v11, v10);
LABEL_8:
          if (!--v3)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          continue;
        }
        if (v13 >= 1)
        {
          switch((int)v12)
          {
            case 1:
              if ((int)v11 > v11 >> 32) {
                goto LABEL_124;
              }
              uint64_t v24 = __DataStorage._bytes.getter();
              if (v24)
              {
                uint64_t v25 = v24;
                uint64_t v26 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v11, v26)) {
                  goto LABEL_126;
                }
                uint64_t v27 = (const void *)(v25 + (int)v11 - v26);
              }
              else
              {
                uint64_t v27 = 0;
              }
              __DataStorage._length.getter();
              LODWORD(v7) = v79;
              if (!v79)
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v75;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v72;
                BYTE5(__s1[1]) = v73;
                if (!v27) {
                  goto LABEL_154;
                }
                int v34 = memcmp(v27, __s1, __n);
                goto LABEL_101;
              }
              if (v79 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_135;
                }
                swift_retain();
                size_t v41 = (char *)__DataStorage._bytes.getter();
                if (v41)
                {
                  uint64_t v42 = __DataStorage._offset.getter();
                  if (__OFSUB__(v76, v42)) {
                    goto LABEL_142;
                  }
                  v41 += v76 - v42;
                }
                uint64_t v43 = __DataStorage._length.getter();
                size_t v44 = v70;
                if (v43 < v70) {
                  size_t v44 = v43;
                }
                if (!v27) {
                  goto LABEL_147;
                }
                if (!v41) {
                  goto LABEL_148;
                }
                int v34 = memcmp(v27, v41, v44);
                sub_10001CFB8(a1, v5);
LABEL_101:
                sub_10001CFB8(v11, v10);
LABEL_102:
                if (!v34) {
                  goto LABEL_119;
                }
                goto LABEL_8;
              }
              uint64_t v61 = *(void *)(a1 + 16);
              uint64_t v62 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v63 = (char *)__DataStorage._bytes.getter();
              if (v63)
              {
                uint64_t v64 = __DataStorage._offset.getter();
                if (__OFSUB__(v61, v64)) {
                  goto LABEL_141;
                }
                v63 += v61 - v64;
              }
              BOOL v19 = __OFSUB__(v62, v61);
              int64_t v65 = v62 - v61;
              if (v19) {
                goto LABEL_136;
              }
              uint64_t v66 = __DataStorage._length.getter();
              if (v66 >= v65) {
                size_t v67 = v65;
              }
              else {
                size_t v67 = v66;
              }
              if (!v27) {
                goto LABEL_155;
              }
              unint64_t v5 = v71;
              LODWORD(v7) = v79;
              if (!v63) {
                goto LABEL_156;
              }
              int v40 = memcmp(v27, v63, v67);
              swift_release();
              swift_release();
LABEL_114:
              sub_10001CFB8(v11, v10);
              if (!v40) {
                goto LABEL_119;
              }
              break;
            case 2:
              uint64_t v28 = *(void *)(v11 + 16);
              swift_retain();
              swift_retain();
              uint64_t v29 = (char *)__DataStorage._bytes.getter();
              if (!v29) {
                goto LABEL_36;
              }
              uint64_t v30 = __DataStorage._offset.getter();
              if (__OFSUB__(v28, v30)) {
                goto LABEL_125;
              }
              v29 += v28 - v30;
LABEL_36:
              __DataStorage._length.getter();
              LODWORD(v7) = v79;
              if (!v79)
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v75;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v72;
                BYTE5(__s1[1]) = v73;
                if (!v29) {
                  goto LABEL_151;
                }
                int v34 = memcmp(v29, __s1, __n);
                swift_release();
                swift_release();
                goto LABEL_101;
              }
              if (v79 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_129;
                }
                swift_retain();
                uint64_t v7 = (char *)__DataStorage._bytes.getter();
                if (v7)
                {
                  uint64_t v31 = __DataStorage._offset.getter();
                  if (__OFSUB__(v76, v31)) {
                    goto LABEL_140;
                  }
                  v7 += v76 - v31;
                }
                uint64_t v32 = __DataStorage._length.getter();
                size_t v33 = v70;
                if (v32 < v70) {
                  size_t v33 = v32;
                }
                if (!v29) {
                  goto LABEL_144;
                }
                if (!v7) {
                  goto LABEL_145;
                }
                int v34 = memcmp(v29, v7, v33);
                sub_10001CFB8(a1, v5);
                swift_release();
                swift_release();
                sub_10001CFB8(v11, v10);
                LODWORD(v7) = v79;
                goto LABEL_102;
              }
              uint64_t v55 = *(void *)(a1 + 16);
              uint64_t v69 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              int v56 = (char *)__DataStorage._bytes.getter();
              if (v56)
              {
                uint64_t v57 = __DataStorage._offset.getter();
                if (__OFSUB__(v55, v57)) {
                  goto LABEL_139;
                }
                v56 += v55 - v57;
              }
              BOOL v19 = __OFSUB__(v69, v55);
              int64_t v58 = v69 - v55;
              if (v19) {
                goto LABEL_134;
              }
              uint64_t v59 = __DataStorage._length.getter();
              if (v59 >= v58) {
                size_t v60 = v58;
              }
              else {
                size_t v60 = v59;
              }
              if (!v29) {
                goto LABEL_152;
              }
              unint64_t v5 = v71;
              if (!v56) {
                goto LABEL_153;
              }
              int v39 = memcmp(v29, v56, v60);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
LABEL_96:
              sub_10001CFB8(v11, v10);
LABEL_97:
              LODWORD(v7) = v79;
              if (!v39) {
                goto LABEL_119;
              }
              goto LABEL_8;
            case 3:
              memset(__s1, 0, 14);
              if (!v7) {
                goto LABEL_56;
              }
              if (v7 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_128;
                }
                sub_1000361E0(a1, v5);
                uint64_t v35 = __DataStorage._bytes.getter();
                if (!v35) {
                  goto LABEL_146;
                }
                uint64_t v21 = v35;
                uint64_t v36 = __DataStorage._offset.getter();
                uint64_t v23 = v76 - v36;
                if (__OFSUB__(v76, v36)) {
                  goto LABEL_133;
                }
LABEL_52:
                uint64_t v37 = __DataStorage._length.getter();
                if (v37 >= v70) {
                  size_t v38 = v70;
                }
                else {
                  size_t v38 = v37;
                }
                int v39 = memcmp(__s1, (const void *)(v21 + v23), v38);
                sub_10001CFB8(a1, v5);
                goto LABEL_96;
              }
              uint64_t v51 = *(void *)(a1 + 16);
              uint64_t v52 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v47 = (char *)__DataStorage._bytes.getter();
              if (v47)
              {
                uint64_t v53 = __DataStorage._offset.getter();
                if (__OFSUB__(v51, v53)) {
                  goto LABEL_138;
                }
                v47 += v51 - v53;
              }
              BOOL v19 = __OFSUB__(v52, v51);
              int64_t v49 = v52 - v51;
              if (v19) {
                goto LABEL_131;
              }
              uint64_t v50 = __DataStorage._length.getter();
              if (!v47) {
                goto LABEL_150;
              }
LABEL_80:
              if (v50 >= v49) {
                size_t v54 = v49;
              }
              else {
                size_t v54 = v50;
              }
              int v39 = memcmp(__s1, v47, v54);
              swift_release();
              swift_release();
              sub_10001CFB8(v11, v10);
              unint64_t v5 = v71;
              goto LABEL_97;
            default:
              __s1[0] = v11;
              LOWORD(__s1[1]) = v10;
              BYTE2(__s1[1]) = BYTE2(v10);
              BYTE3(__s1[1]) = BYTE3(v10);
              BYTE4(__s1[1]) = BYTE4(v10);
              BYTE5(__s1[1]) = BYTE5(v10);
              if (!v7)
              {
LABEL_56:
                __int16 __s2 = a1;
                char v83 = BYTE2(a1);
                char v84 = BYTE3(a1);
                char v85 = v75;
                char v86 = BYTE5(a1);
                char v87 = BYTE6(a1);
                char v88 = HIBYTE(a1);
                __int16 v89 = v5;
                char v90 = BYTE2(v5);
                char v91 = BYTE3(v5);
                char v92 = v72;
                char v93 = v73;
                int v40 = memcmp(__s1, &__s2, __n);
                goto LABEL_114;
              }
              if (v7 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_127;
                }
                sub_1000361E0(a1, v5);
                uint64_t v20 = __DataStorage._bytes.getter();
                if (!v20)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
                  JUMPOUT(0x1002742BCLL);
                }
                uint64_t v21 = v20;
                uint64_t v22 = __DataStorage._offset.getter();
                uint64_t v23 = v76 - v22;
                if (__OFSUB__(v76, v22)) {
                  goto LABEL_132;
                }
                goto LABEL_52;
              }
              uint64_t v45 = *(void *)(a1 + 16);
              uint64_t v46 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v47 = (char *)__DataStorage._bytes.getter();
              if (v47)
              {
                uint64_t v48 = __DataStorage._offset.getter();
                if (__OFSUB__(v45, v48)) {
                  goto LABEL_137;
                }
                v47 += v45 - v48;
              }
              BOOL v19 = __OFSUB__(v46, v45);
              int64_t v49 = v46 - v45;
              if (v19) {
                goto LABEL_130;
              }
              uint64_t v50 = __DataStorage._length.getter();
              if (!v47) {
                goto LABEL_149;
              }
              goto LABEL_80;
          }
          goto LABEL_8;
        }
LABEL_118:
        sub_10001CFB8(v11, v10);
LABEL_119:
        swift_bridgeObjectRelease();
        return 1;
    }
  }
}

uint64_t sub_1002742EC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = a2;
  unint64_t v7 = a2 >> 62;
  unint64_t v77 = HIDWORD(a1);
  BOOL v8 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v81 = v8;
  size_t v80 = HIDWORD(a1) - (int)a1;
  size_t v9 = BYTE6(a2);
  uint64_t v78 = (int)a1;
  uint64_t v76 = a1 >> 32;
  uint64_t v73 = (a1 >> 32) - (int)a1;
  swift_bridgeObjectRetain();
  unint64_t v10 = (unint64_t *)(a3 + 40);
  unint64_t v74 = HIDWORD(v5);
  unint64_t v75 = v5 >> 40;
  uint64_t v84 = v7;
  unint64_t v82 = v5;
  int v83 = v7;
  size_t __n = v9;
  while (2)
  {
    uint64_t v12 = *(v10 - 1);
    unint64_t v11 = *v10;
    unint64_t v13 = *v10 >> 62;
    v10 += 2;
    uint64_t v14 = 0;
    switch(v13)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v12), v12))
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
        }
        uint64_t v14 = HIDWORD(v12) - (int)v12;
LABEL_14:
        sub_1000361E0(v12, v11);
        sub_1000361E0(v12, v11);
        break;
      case 2uLL:
        uint64_t v16 = *(void *)(v12 + 16);
        uint64_t v15 = *(void *)(v12 + 24);
        uint64_t v14 = v15 - v16;
        if (!__OFSUB__(v15, v16)) {
          goto LABEL_14;
        }
        goto LABEL_122;
      case 3uLL:
        break;
      default:
        uint64_t v14 = BYTE6(v11);
        break;
    }
    size_t v17 = v9;
    switch(v84)
    {
      case 1:
        size_t v17 = v80;
        if (v81) {
          goto LABEL_123;
        }
        goto LABEL_19;
      case 2:
        uint64_t v19 = *(void *)(a1 + 16);
        uint64_t v18 = *(void *)(a1 + 24);
        BOOL v20 = __OFSUB__(v18, v19);
        size_t v17 = v18 - v19;
        if (!v20) {
          goto LABEL_19;
        }
        goto LABEL_124;
      case 3:
        if (v14) {
          goto LABEL_7;
        }
        goto LABEL_119;
      default:
LABEL_19:
        if (v14 != v17)
        {
LABEL_7:
          sub_10001CFB8(v12, v11);
          sub_10001CFB8(v12, v11);
LABEL_8:
          if (!--v3)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          continue;
        }
        if (v14 >= 1)
        {
          switch((int)v13)
          {
            case 1:
              if ((int)v12 > v12 >> 32) {
                goto LABEL_125;
              }
              sub_1000361E0(a1, v5);
              uint64_t v24 = __DataStorage._bytes.getter();
              if (v24)
              {
                uint64_t v25 = v24;
                uint64_t v26 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v12, v26)) {
                  goto LABEL_127;
                }
                uint64_t v27 = (const void *)(v25 + (int)v12 - v26);
              }
              else
              {
                uint64_t v27 = 0;
              }
              __DataStorage._length.getter();
              LODWORD(v7) = v83;
              if (v83)
              {
                if (v83 == 1)
                {
                  if (v76 < v78) {
                    goto LABEL_136;
                  }
                  swift_retain();
                  uint64_t v42 = (char *)__DataStorage._bytes.getter();
                  if (v42)
                  {
                    uint64_t v43 = __DataStorage._offset.getter();
                    if (__OFSUB__(v78, v43)) {
                      goto LABEL_143;
                    }
                    v42 += v78 - v43;
                  }
                  uint64_t v44 = __DataStorage._length.getter();
                  size_t v45 = v73;
                  if (v44 < v73) {
                    size_t v45 = v44;
                  }
                  if (!v27) {
                    goto LABEL_148;
                  }
                  if (!v42) {
                    goto LABEL_149;
                  }
                  int v35 = memcmp(v27, v42, v45);
                  sub_10001CFB8(a1, v5);
                }
                else
                {
                  uint64_t v64 = *(void *)(a1 + 16);
                  uint64_t v65 = *(void *)(a1 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v66 = (char *)__DataStorage._bytes.getter();
                  if (v66)
                  {
                    uint64_t v67 = __DataStorage._offset.getter();
                    if (__OFSUB__(v64, v67)) {
                      goto LABEL_142;
                    }
                    v66 += v64 - v67;
                  }
                  BOOL v20 = __OFSUB__(v65, v64);
                  int64_t v68 = v65 - v64;
                  if (v20) {
                    goto LABEL_137;
                  }
                  uint64_t v69 = __DataStorage._length.getter();
                  if (v69 >= v68) {
                    size_t v70 = v68;
                  }
                  else {
                    size_t v70 = v69;
                  }
                  if (!v27) {
                    goto LABEL_156;
                  }
                  unint64_t v5 = v82;
                  LODWORD(v7) = v83;
                  if (!v66) {
                    goto LABEL_157;
                  }
                  int v35 = memcmp(v27, v66, v70);
                  swift_release();
LABEL_112:
                  swift_release();
                }
                uint64_t v62 = a1;
LABEL_114:
                sub_10001CFB8(v62, v5);
                sub_10001CFB8(v12, v11);
                sub_10001CFB8(v12, v11);
LABEL_115:
                size_t v9 = __n;
                if (!v35) {
                  goto LABEL_120;
                }
              }
              else
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v77;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v74;
                BYTE5(__s1[1]) = v75;
                if (!v27) {
                  goto LABEL_155;
                }
                uint64_t v63 = v27;
                size_t v9 = __n;
                int v41 = memcmp(v63, __s1, __n);
LABEL_99:
                sub_10001CFB8(a1, v5);
LABEL_100:
                sub_10001CFB8(v12, v11);
                sub_10001CFB8(v12, v11);
                if (!v41) {
                  goto LABEL_120;
                }
              }
              break;
            case 2:
              uint64_t v28 = *(void *)(v12 + 16);
              sub_1000361E0(a1, v5);
              swift_retain();
              swift_retain();
              uint64_t v29 = (char *)__DataStorage._bytes.getter();
              if (!v29) {
                goto LABEL_36;
              }
              uint64_t v30 = __DataStorage._offset.getter();
              if (__OFSUB__(v28, v30)) {
                goto LABEL_126;
              }
              v29 += v28 - v30;
LABEL_36:
              __DataStorage._length.getter();
              LODWORD(v7) = v83;
              if (!v83)
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v77;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v74;
                BYTE5(__s1[1]) = v75;
                if (!v29) {
                  goto LABEL_152;
                }
                int v41 = memcmp(v29, __s1, __n);
                size_t v9 = __n;
                swift_release();
                swift_release();
                goto LABEL_99;
              }
              if (v83 == 1)
              {
                if (v76 < v78) {
                  goto LABEL_130;
                }
                swift_retain();
                uint64_t v31 = (char *)__DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = __DataStorage._offset.getter();
                  if (__OFSUB__(v78, v32)) {
                    goto LABEL_141;
                  }
                  v31 += v78 - v32;
                }
                uint64_t v33 = __DataStorage._length.getter();
                size_t v34 = v73;
                if (v33 < v73) {
                  size_t v34 = v33;
                }
                if (!v29) {
                  goto LABEL_145;
                }
                if (!v31) {
                  goto LABEL_146;
                }
                int v35 = memcmp(v29, v31, v34);
                unint64_t v5 = v82;
                sub_10001CFB8(a1, v82);
                swift_release();
                goto LABEL_112;
              }
              uint64_t v56 = *(void *)(a1 + 16);
              uint64_t v72 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v57 = (char *)__DataStorage._bytes.getter();
              if (v57)
              {
                uint64_t v58 = __DataStorage._offset.getter();
                if (__OFSUB__(v56, v58)) {
                  goto LABEL_140;
                }
                v57 += v56 - v58;
              }
              BOOL v20 = __OFSUB__(v72, v56);
              int64_t v59 = v72 - v56;
              if (v20) {
                goto LABEL_135;
              }
              uint64_t v60 = __DataStorage._length.getter();
              if (v60 >= v59) {
                size_t v61 = v59;
              }
              else {
                size_t v61 = v60;
              }
              if (!v29) {
                goto LABEL_153;
              }
              LODWORD(v7) = v83;
              if (!v57) {
                goto LABEL_154;
              }
              int v35 = memcmp(v29, v57, v61);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              uint64_t v62 = a1;
              unint64_t v5 = v82;
              goto LABEL_114;
            case 3:
              memset(__s1, 0, 14);
              if (!v7) {
                goto LABEL_57;
              }
              if (v7 == 1)
              {
                if (v76 < v78) {
                  goto LABEL_129;
                }
                unint64_t v5 = v82;
                sub_1000361E0(a1, v82);
                uint64_t v36 = __DataStorage._bytes.getter();
                if (!v36) {
                  goto LABEL_147;
                }
                uint64_t v22 = v36;
                uint64_t v37 = __DataStorage._offset.getter();
                unint64_t v7 = v78 - v37;
                if (__OFSUB__(v78, v37)) {
                  goto LABEL_134;
                }
LABEL_52:
                uint64_t v38 = __DataStorage._length.getter();
                if (v38 >= v73) {
                  size_t v39 = v73;
                }
                else {
                  size_t v39 = v38;
                }
                int v40 = memcmp(__s1, (const void *)(v22 + v7), v39);
                sub_10001CFB8(a1, v5);
                sub_10001CFB8(v12, v11);
                sub_10001CFB8(v12, v11);
                LODWORD(v7) = v83;
                if (!v40) {
                  goto LABEL_120;
                }
                goto LABEL_8;
              }
              uint64_t v52 = *(void *)(a1 + 16);
              uint64_t v53 = *(void *)(a1 + 24);
              sub_1000361E0(a1, v82);
              swift_retain();
              swift_retain();
              uint64_t v48 = (char *)__DataStorage._bytes.getter();
              if (v48)
              {
                uint64_t v54 = __DataStorage._offset.getter();
                if (__OFSUB__(v52, v54)) {
                  goto LABEL_139;
                }
                v48 += v52 - v54;
              }
              int64_t v50 = v53 - v52;
              if (__OFSUB__(v53, v52)) {
                goto LABEL_132;
              }
              uint64_t v51 = __DataStorage._length.getter();
              if (!v48) {
                goto LABEL_151;
              }
LABEL_81:
              if (v51 >= v50) {
                size_t v55 = v50;
              }
              else {
                size_t v55 = v51;
              }
              int v35 = memcmp(__s1, v48, v55);
              swift_release();
              swift_release();
              unint64_t v5 = v82;
              sub_10001CFB8(a1, v82);
              sub_10001CFB8(v12, v11);
              sub_10001CFB8(v12, v11);
              LODWORD(v7) = v83;
              goto LABEL_115;
            default:
              __s1[0] = v12;
              LOWORD(__s1[1]) = v11;
              BYTE2(__s1[1]) = BYTE2(v11);
              BYTE3(__s1[1]) = BYTE3(v11);
              BYTE4(__s1[1]) = BYTE4(v11);
              BYTE5(__s1[1]) = BYTE5(v11);
              if (!v7)
              {
LABEL_57:
                __int16 __s2 = a1;
                char v86 = BYTE2(a1);
                char v87 = BYTE3(a1);
                char v88 = v77;
                char v89 = BYTE5(a1);
                char v90 = BYTE6(a1);
                char v91 = HIBYTE(a1);
                __int16 v92 = v5;
                char v93 = BYTE2(v5);
                char v94 = BYTE3(v5);
                char v95 = v74;
                char v96 = v75;
                int v41 = memcmp(__s1, &__s2, v9);
                goto LABEL_100;
              }
              if (v7 == 1)
              {
                if (v76 < v78) {
                  goto LABEL_128;
                }
                unint64_t v5 = v82;
                sub_1000361E0(a1, v82);
                uint64_t v21 = __DataStorage._bytes.getter();
                if (!v21)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
LABEL_157:
                  __break(1u);
                  JUMPOUT(0x100274D08);
                }
                uint64_t v22 = v21;
                uint64_t v23 = __DataStorage._offset.getter();
                unint64_t v7 = v78 - v23;
                if (__OFSUB__(v78, v23)) {
                  goto LABEL_133;
                }
                goto LABEL_52;
              }
              uint64_t v46 = *(void *)(a1 + 16);
              uint64_t v47 = *(void *)(a1 + 24);
              sub_1000361E0(a1, v82);
              swift_retain();
              swift_retain();
              uint64_t v48 = (char *)__DataStorage._bytes.getter();
              if (v48)
              {
                uint64_t v49 = __DataStorage._offset.getter();
                if (__OFSUB__(v46, v49)) {
                  goto LABEL_138;
                }
                v48 += v46 - v49;
              }
              int64_t v50 = v47 - v46;
              if (__OFSUB__(v47, v46)) {
                goto LABEL_131;
              }
              uint64_t v51 = __DataStorage._length.getter();
              if (!v48) {
                goto LABEL_150;
              }
              goto LABEL_81;
          }
          goto LABEL_8;
        }
LABEL_119:
        sub_10001CFB8(v12, v11);
        sub_10001CFB8(v12, v11);
LABEL_120:
        swift_bridgeObjectRelease();
        return 1;
    }
  }
}

uint64_t sub_100274D38(uint64_t *a1, uint64_t a2)
{
  uint64_t v260 = a1;
  uint64_t v3 = type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v259 = (uint64_t *)((char *)&v248 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void *)(a2 + 16);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v9 = *(void *)(v5 + 72);
  uint64_t v257 = v4;
  uint64_t v258 = v9;
  uint64_t v256 = a2;
  swift_bridgeObjectRetain();
  uint64_t v255 = 0;
  unint64_t v10 = v259;
  while (2)
  {
    sub_10027A8CC(v8, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    uint64_t v13 = *v260;
    unint64_t v14 = v260[1];
    uint64_t v15 = 0;
    switch(v12 >> 62)
    {
      case 1uLL:
        LODWORD(v15) = HIDWORD(v11) - v11;
        if (__OFSUB__(HIDWORD(v11), v11))
        {
          __break(1u);
LABEL_327:
          __break(1u);
LABEL_328:
          __break(1u);
LABEL_329:
          __break(1u);
LABEL_330:
          __break(1u);
LABEL_331:
          __break(1u);
LABEL_332:
          __break(1u);
LABEL_333:
          __break(1u);
LABEL_334:
          __break(1u);
LABEL_335:
          __break(1u);
LABEL_336:
          __break(1u);
LABEL_337:
          __break(1u);
LABEL_338:
          __break(1u);
LABEL_339:
          __break(1u);
LABEL_340:
          __break(1u);
LABEL_341:
          __break(1u);
LABEL_342:
          __break(1u);
LABEL_343:
          __break(1u);
LABEL_344:
          __break(1u);
LABEL_345:
          __break(1u);
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
LABEL_368:
          __break(1u);
LABEL_369:
          __break(1u);
LABEL_370:
          __break(1u);
LABEL_371:
          __break(1u);
LABEL_372:
          __break(1u);
LABEL_373:
          __break(1u);
LABEL_374:
          __break(1u);
LABEL_375:
          __break(1u);
LABEL_376:
          __break(1u);
LABEL_377:
          __break(1u);
LABEL_378:
          __break(1u);
LABEL_379:
          __break(1u);
LABEL_380:
          __break(1u);
LABEL_381:
          __break(1u);
LABEL_382:
          __break(1u);
LABEL_383:
          __break(1u);
LABEL_384:
          __break(1u);
LABEL_385:
          __break(1u);
LABEL_386:
          __break(1u);
        }
        uint64_t v15 = (int)v15;
LABEL_11:
        unint64_t v19 = v14 >> 62;
        switch(v14 >> 62)
        {
          case 1uLL:
            LODWORD(v20) = HIDWORD(v13) - v13;
            if (__OFSUB__(HIDWORD(v13), v13)) {
              goto LABEL_329;
            }
            uint64_t v20 = (int)v20;
LABEL_18:
            if (v15 != v20) {
              goto LABEL_4;
            }
            if (v15 < 1) {
              goto LABEL_117;
            }
            break;
          case 2uLL:
            uint64_t v22 = *(void *)(v13 + 16);
            uint64_t v21 = *(void *)(v13 + 24);
            BOOL v18 = __OFSUB__(v21, v22);
            uint64_t v20 = v21 - v22;
            if (!v18) {
              goto LABEL_18;
            }
            goto LABEL_328;
          case 3uLL:
            if (v15) {
              goto LABEL_4;
            }
            goto LABEL_117;
          default:
            uint64_t v20 = BYTE6(v14);
            goto LABEL_18;
        }
        break;
      case 2uLL:
        uint64_t v17 = *(void *)(v11 + 16);
        uint64_t v16 = *(void *)(v11 + 24);
        BOOL v18 = __OFSUB__(v16, v17);
        uint64_t v15 = v16 - v17;
        if (!v18) {
          goto LABEL_11;
        }
        goto LABEL_327;
      case 3uLL:
        goto LABEL_11;
      default:
        uint64_t v15 = BYTE6(v12);
        goto LABEL_11;
    }
    switch(v12 >> 62)
    {
      case 1uLL:
        if ((int)v11 > v11 >> 32) {
          goto LABEL_330;
        }
        sub_1000361E0(v11, v12);
        uint64_t v40 = __DataStorage._bytes.getter();
        if (v40)
        {
          uint64_t v41 = v40;
          uint64_t v42 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v11, v42)) {
            goto LABEL_332;
          }
          uint64_t v43 = (const void *)(v41 + (int)v11 - v42);
          __DataStorage._length.getter();
          if (!v19)
          {
LABEL_74:
            __s1[0] = v13;
            LOWORD(__s1[1]) = v14;
            BYTE2(__s1[1]) = BYTE2(v14);
            BYTE3(__s1[1]) = BYTE3(v14);
            BYTE4(__s1[1]) = BYTE4(v14);
            BYTE5(__s1[1]) = BYTE5(v14);
            if (!v43)
            {
              __break(1u);
LABEL_388:
              __break(1u);
LABEL_389:
              __break(1u);
LABEL_390:
              __break(1u);
LABEL_391:
              __DataStorage._length.getter();
              __break(1u);
LABEL_392:
              __break(1u);
LABEL_393:
              __break(1u);
LABEL_394:
              __break(1u);
LABEL_395:
              __break(1u);
LABEL_396:
              __break(1u);
LABEL_397:
              __break(1u);
LABEL_398:
              __break(1u);
LABEL_399:
              __break(1u);
LABEL_400:
              __DataStorage._length.getter();
              __break(1u);
LABEL_401:
              __DataStorage._length.getter();
              __break(1u);
LABEL_402:
              __DataStorage._length.getter();
              __break(1u);
LABEL_403:
              __break(1u);
LABEL_404:
              __break(1u);
LABEL_405:
              __break(1u);
LABEL_406:
              __break(1u);
LABEL_407:
              __DataStorage._length.getter();
              __break(1u);
LABEL_408:
              __break(1u);
LABEL_409:
              swift_release();
              swift_release();
              __break(1u);
LABEL_410:
              swift_release();
              swift_release();
              __break(1u);
              JUMPOUT(0x100276778);
            }
            int v54 = memcmp(v43, __s1, BYTE6(v14));
            sub_10001CFB8(v11, v12);
            if (v54) {
              goto LABEL_4;
            }
            goto LABEL_117;
          }
        }
        else
        {
          uint64_t v43 = 0;
          __DataStorage._length.getter();
          if (!v19) {
            goto LABEL_74;
          }
        }
        if (v19 == 1)
        {
          uint64_t v254 = v43;
          if (v13 >> 32 < (int)v13) {
            goto LABEL_345;
          }
          swift_retain();
          uint64_t v44 = (char *)__DataStorage._bytes.getter();
          if (v44)
          {
            uint64_t v45 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v13, v45)) {
              goto LABEL_352;
            }
            v44 += (int)v13 - v45;
          }
          uint64_t v46 = v254;
          uint64_t v47 = __DataStorage._length.getter();
          if (v47 >= (v13 >> 32) - (int)v13) {
            size_t v48 = (v13 >> 32) - (int)v13;
          }
          else {
            size_t v48 = v47;
          }
          if (!v46) {
            goto LABEL_396;
          }
          if (!v44) {
            goto LABEL_397;
          }
          int v37 = memcmp(v46, v44, v48);
          sub_10001CFB8(v13, v14);
          uint64_t v38 = v11;
          unint64_t v39 = v12;
          goto LABEL_55;
        }
        uint64_t v74 = *(void *)(v13 + 16);
        uint64_t v75 = *(void *)(v13 + 24);
        swift_retain();
        swift_retain();
        uint64_t v76 = (char *)__DataStorage._bytes.getter();
        if (v76)
        {
          uint64_t v77 = __DataStorage._offset.getter();
          if (__OFSUB__(v74, v77)) {
            goto LABEL_351;
          }
          v76 += v74 - v77;
        }
        BOOL v18 = __OFSUB__(v75, v74);
        int64_t v78 = v75 - v74;
        if (v18) {
          goto LABEL_346;
        }
        uint64_t v79 = __DataStorage._length.getter();
        if (v79 >= v78) {
          size_t v80 = v78;
        }
        else {
          size_t v80 = v79;
        }
        if (!v43) {
          goto LABEL_389;
        }
        if (!v76) {
          goto LABEL_390;
        }
        int v81 = memcmp(v43, v76, v80);
        swift_release();
        swift_release();
        sub_10001CFB8(v11, v12);
        if (v81) {
          goto LABEL_4;
        }
        goto LABEL_117;
      case 2uLL:
        uint64_t v28 = *(void *)(v11 + 16);
        swift_retain();
        swift_retain();
        uint64_t v29 = __DataStorage._bytes.getter();
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = __DataStorage._offset.getter();
          if (__OFSUB__(v28, v31)) {
            goto LABEL_331;
          }
          uint64_t v32 = (const void *)(v30 + v28 - v31);
        }
        else
        {
          uint64_t v32 = 0;
        }
        __DataStorage._length.getter();
        if (v19)
        {
          if (v19 != 1)
          {
            uint64_t v67 = *(void *)(v13 + 16);
            uint64_t v68 = *(void *)(v13 + 24);
            swift_retain();
            swift_retain();
            uint64_t v69 = (char *)__DataStorage._bytes.getter();
            if (v69)
            {
              uint64_t v70 = __DataStorage._offset.getter();
              if (__OFSUB__(v67, v70)) {
                goto LABEL_349;
              }
              v69 += v67 - v70;
            }
            BOOL v18 = __OFSUB__(v68, v67);
            int64_t v71 = v68 - v67;
            if (v18) {
              goto LABEL_344;
            }
            uint64_t v72 = __DataStorage._length.getter();
            if (v72 >= v71) {
              size_t v73 = v71;
            }
            else {
              size_t v73 = v72;
            }
            if (!v32) {
              goto LABEL_393;
            }
            if (!v69) {
              goto LABEL_394;
            }
            int v65 = memcmp(v32, v69, v73);
            swift_release();
            swift_release();
            goto LABEL_105;
          }
          uint64_t v254 = v32;
          if (v13 >> 32 < (int)v13) {
            goto LABEL_339;
          }
          swift_retain();
          uint64_t v49 = (char *)__DataStorage._bytes.getter();
          if (v49)
          {
            uint64_t v50 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v13, v50)) {
              goto LABEL_350;
            }
            v49 += (int)v13 - v50;
          }
          uint64_t v51 = __DataStorage._length.getter();
          if (v51 >= (v13 >> 32) - (int)v13) {
            size_t v52 = (v13 >> 32) - (int)v13;
          }
          else {
            size_t v52 = v51;
          }
          if (!v254) {
            goto LABEL_398;
          }
          if (!v49) {
            goto LABEL_399;
          }
          int v53 = memcmp(v254, v49, v52);
          sub_10001CFB8(v13, v14);
          swift_release();
          swift_release();
          if (v53) {
            goto LABEL_4;
          }
        }
        else
        {
          __s1[0] = v13;
          LOWORD(__s1[1]) = v14;
          BYTE2(__s1[1]) = BYTE2(v14);
          BYTE3(__s1[1]) = BYTE3(v14);
          BYTE4(__s1[1]) = BYTE4(v14);
          BYTE5(__s1[1]) = BYTE5(v14);
          if (!v32) {
            goto LABEL_392;
          }
          int v66 = memcmp(v32, __s1, BYTE6(v14));
          swift_release();
          swift_release();
          if (v66) {
            goto LABEL_4;
          }
        }
        goto LABEL_117;
      case 3uLL:
        memset(__s1, 0, 14);
        if (!v19) {
          goto LABEL_57;
        }
        if (v19 == 1)
        {
          uint64_t v23 = (v13 >> 32) - (int)v13;
          if (v13 >> 32 < (int)v13) {
            goto LABEL_338;
          }
          swift_retain();
          uint64_t v33 = __DataStorage._bytes.getter();
          if (!v33) {
            goto LABEL_400;
          }
          uint64_t v25 = v33;
          uint64_t v34 = __DataStorage._offset.getter();
          uint64_t v27 = (int)v13 - v34;
          if (__OFSUB__((int)v13, v34)) {
            goto LABEL_343;
          }
          goto LABEL_36;
        }
        uint64_t v55 = *(void *)(v13 + 16);
        uint64_t v56 = *(void *)(v13 + 24);
        swift_retain();
        swift_retain();
        uint64_t v57 = (char *)__DataStorage._bytes.getter();
        if (v57)
        {
          uint64_t v58 = __DataStorage._offset.getter();
          if (__OFSUB__(v55, v58)) {
            goto LABEL_348;
          }
          v57 += v55 - v58;
        }
        BOOL v18 = __OFSUB__(v56, v55);
        int64_t v59 = v56 - v55;
        if (v18) {
          goto LABEL_340;
        }
        uint64_t v60 = __DataStorage._length.getter();
        if (!v57) {
          goto LABEL_388;
        }
        goto LABEL_88;
      default:
        __s1[0] = v11;
        LOWORD(__s1[1]) = v12;
        BYTE2(__s1[1]) = BYTE2(v12);
        BYTE3(__s1[1]) = BYTE3(v12);
        BYTE4(__s1[1]) = BYTE4(v12);
        BYTE5(__s1[1]) = BYTE5(v12);
        if (!v19)
        {
LABEL_57:
          uint64_t __s2 = v13;
          __int16 v262 = v14;
          char v263 = BYTE2(v14);
          char v264 = BYTE3(v14);
          char v265 = BYTE4(v14);
          char v266 = BYTE5(v14);
          if (!memcmp(__s1, &__s2, BYTE6(v14))) {
            goto LABEL_117;
          }
LABEL_4:
          unint64_t v10 = v259;
LABEL_5:
          sub_10027A86C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
          v8 += v258;
          if (!--v7)
          {
            uint64_t v246 = 0;
            goto LABEL_321;
          }
          continue;
        }
        if (v19 == 1)
        {
          uint64_t v23 = (v13 >> 32) - (int)v13;
          if (v13 >> 32 < (int)v13) {
            goto LABEL_337;
          }
          swift_retain();
          uint64_t v24 = __DataStorage._bytes.getter();
          if (!v24) {
            goto LABEL_391;
          }
          uint64_t v25 = v24;
          uint64_t v26 = __DataStorage._offset.getter();
          uint64_t v27 = (int)v13 - v26;
          if (__OFSUB__((int)v13, v26)) {
            goto LABEL_342;
          }
LABEL_36:
          uint64_t v35 = __DataStorage._length.getter();
          if (v35 >= v23) {
            size_t v36 = v23;
          }
          else {
            size_t v36 = v35;
          }
          int v37 = memcmp(__s1, (const void *)(v25 + v27), v36);
          uint64_t v38 = v13;
          unint64_t v39 = v14;
LABEL_55:
          sub_10001CFB8(v38, v39);
          if (v37) {
            goto LABEL_4;
          }
        }
        else
        {
          uint64_t v61 = *(void *)(v13 + 16);
          uint64_t v62 = *(void *)(v13 + 24);
          swift_retain();
          swift_retain();
          uint64_t v57 = (char *)__DataStorage._bytes.getter();
          if (v57)
          {
            uint64_t v63 = __DataStorage._offset.getter();
            if (__OFSUB__(v61, v63)) {
              goto LABEL_347;
            }
            v57 += v61 - v63;
          }
          BOOL v18 = __OFSUB__(v62, v61);
          int64_t v59 = v62 - v61;
          if (v18) {
            goto LABEL_341;
          }
          uint64_t v60 = __DataStorage._length.getter();
          if (!v57) {
            goto LABEL_395;
          }
LABEL_88:
          if (v60 >= v59) {
            size_t v64 = v59;
          }
          else {
            size_t v64 = v60;
          }
          int v65 = memcmp(__s1, v57, v64);
LABEL_105:
          swift_release();
          swift_release();
          if (v65) {
            goto LABEL_4;
          }
        }
LABEL_117:
        uint64_t v82 = v257;
        unint64_t v10 = v259;
        if ((static UUID.== infix(_:_:)() & 1) == 0 || (static UUID.== infix(_:_:)() & 1) == 0) {
          goto LABEL_5;
        }
        uint64_t v83 = *(int *)(v82 + 28);
        uint64_t v85 = *(uint64_t *)((char *)v10 + v83);
        unint64_t v84 = *(uint64_t *)((char *)v10 + v83 + 8);
        char v86 = (uint64_t *)((char *)v260 + v83);
        uint64_t v87 = *v86;
        unint64_t v88 = v86[1];
        unint64_t v89 = v84 >> 62;
        uint64_t v90 = 0;
        switch(v84 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v85), v85)) {
              goto LABEL_333;
            }
            uint64_t v90 = HIDWORD(v85) - (int)v85;
LABEL_124:
            uint64_t v93 = v87;
            uint64_t v94 = v85;
            unint64_t v95 = v88;
            uint64_t v96 = v85;
            unint64_t v97 = v84;
            sub_1000361E0(v94, v84);
            unint64_t v84 = v97;
            uint64_t v85 = v96;
            uint64_t v82 = v257;
            uint64_t v87 = v93;
            unint64_t v88 = v95;
            break;
          case 2uLL:
            uint64_t v92 = *(void *)(v85 + 16);
            uint64_t v91 = *(void *)(v85 + 24);
            uint64_t v90 = v91 - v92;
            if (!__OFSUB__(v91, v92)) {
              goto LABEL_124;
            }
            goto LABEL_334;
          case 3uLL:
            break;
          default:
            uint64_t v90 = BYTE6(v84);
            break;
        }
        unint64_t v98 = v88 >> 62;
        switch(v88 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v87), v87)) {
              goto LABEL_336;
            }
            if (v90 == HIDWORD(v87) - v87) {
              goto LABEL_135;
            }
            goto LABEL_144;
          case 2uLL:
            uint64_t v100 = *(void *)(v87 + 16);
            uint64_t v99 = *(void *)(v87 + 24);
            BOOL v18 = __OFSUB__(v99, v100);
            uint64_t v101 = v99 - v100;
            if (v18) {
              goto LABEL_335;
            }
            if (v90 != v101)
            {
LABEL_144:
              sub_10001CFB8(v85, v84);
              goto LABEL_5;
            }
LABEL_135:
            if (v90 < 1)
            {
LABEL_145:
              sub_10001CFB8(v85, v84);
            }
            else
            {
              switch((int)v89)
              {
                case 1:
                  if (v85 >> 32 < (int)v85) {
                    goto LABEL_357;
                  }
                  unint64_t v252 = v84;
                  uint64_t v253 = v87;
                  uint64_t v254 = (const void *)v88;
                  sub_1000361E0(v87, v88);
                  uint64_t v133 = __DataStorage._bytes.getter();
                  if (v133)
                  {
                    uint64_t v134 = v133;
                    uint64_t v135 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v85, v135)) {
                      goto LABEL_360;
                    }
                    long long v136 = (void *)(v134 + (int)v85 - v135);
                  }
                  else
                  {
                    long long v136 = 0;
                  }
                  __DataStorage._length.getter();
                  if (!v98)
                  {
                    uint64_t v195 = v253;
                    unint64_t v194 = (unint64_t)v254;
                    __s1[0] = v253;
                    LODWORD(__s1[1]) = v254;
                    WORD2(__s1[1]) = WORD2(v254);
                    uint64_t v82 = v257;
                    if (!v136) {
                      goto LABEL_406;
                    }
                    int v196 = memcmp(v136, __s1, BYTE6(v254));
                    goto LABEL_261;
                  }
                  if (v98 == 1)
                  {
                    uint64_t v172 = (int)v253;
                    uint64_t v173 = (v253 >> 32) - (int)v253;
                    uint64_t v82 = v257;
                    if (v253 >> 32 < (int)v253) {
                      goto LABEL_368;
                    }
                    sub_1000361E0(v253, (unint64_t)v254);
                    uint64_t v174 = __DataStorage._bytes.getter();
                    if (v174)
                    {
                      uint64_t v175 = __DataStorage._offset.getter();
                      if (__OFSUB__(v172, v175)) {
                        goto LABEL_378;
                      }
                      v174 += v172 - v175;
                    }
                    uint64_t v176 = __DataStorage._length.getter();
                    if (v176 >= v173) {
                      uint64_t v177 = v173;
                    }
                    else {
                      uint64_t v177 = v176;
                    }
                    uint64_t v178 = v174 + v177;
                    if (v174) {
                      uint64_t v179 = v178;
                    }
                    else {
                      uint64_t v179 = 0;
                    }
                    uint64_t v180 = v255;
                    sub_100DC8C5C(v174, v136, v179, (BOOL *)__s1);
                    uint64_t v255 = v180;
                    uint64_t v171 = v253;
                    unint64_t v170 = (unint64_t)v254;
                    sub_10001CFB8(v253, (unint64_t)v254);
                    goto LABEL_239;
                  }
                  uint64_t v200 = *(void *)(v253 + 16);
                  uint64_t v201 = *(void *)(v253 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v202 = __DataStorage._bytes.getter();
                  if (v202)
                  {
                    uint64_t v203 = __DataStorage._offset.getter();
                    if (__OFSUB__(v200, v203)) {
                      goto LABEL_376;
                    }
                    v202 += v200 - v203;
                  }
                  if (__OFSUB__(v201, v200)) {
                    goto LABEL_370;
                  }
                  uint64_t v204 = __DataStorage._length.getter();
                  if (v204 >= v201 - v200) {
                    uint64_t v205 = v201 - v200;
                  }
                  else {
                    uint64_t v205 = v204;
                  }
                  uint64_t v206 = v202 + v205;
                  if (v202) {
                    uint64_t v207 = v206;
                  }
                  else {
                    uint64_t v207 = 0;
                  }
                  uint64_t v208 = v255;
                  sub_100DC8C5C(v202, v136, v207, (BOOL *)__s1);
                  uint64_t v255 = v208;
                  swift_release();
                  uint64_t v209 = v253;
                  swift_release();
                  sub_10001CFB8(v209, (unint64_t)v254);
                  sub_10001CFB8(v85, v252);
                  uint64_t v82 = v257;
                  if ((__s1[0] & 1) == 0) {
                    goto LABEL_4;
                  }
                  break;
                case 2:
                  unint64_t v252 = v84;
                  uint64_t v253 = v87;
                  uint64_t v128 = *(void *)(v85 + 16);
                  uint64_t v127 = *(void *)(v85 + 24);
                  uint64_t v254 = (const void *)v88;
                  sub_1000361E0(v87, v88);
                  swift_retain();
                  swift_retain();
                  uint64_t v129 = __DataStorage._bytes.getter();
                  if (v129)
                  {
                    uint64_t v130 = v129;
                    uint64_t v131 = __DataStorage._offset.getter();
                    if (__OFSUB__(v128, v131)) {
                      goto LABEL_359;
                    }
                    long long v132 = (void *)(v130 + v128 - v131);
                    if (__OFSUB__(v127, v128)) {
                      goto LABEL_358;
                    }
                  }
                  else
                  {
                    long long v132 = 0;
                    if (__OFSUB__(v127, v128)) {
                      goto LABEL_358;
                    }
                  }
                  __DataStorage._length.getter();
                  uint64_t v82 = v257;
                  if (v98)
                  {
                    if (v98 == 1)
                    {
                      uint64_t v161 = (int)v253;
                      uint64_t v162 = (v253 >> 32) - (int)v253;
                      if (v253 >> 32 < (int)v253) {
                        goto LABEL_369;
                      }
                      sub_1000361E0(v253, (unint64_t)v254);
                      uint64_t v163 = __DataStorage._bytes.getter();
                      if (v163)
                      {
                        uint64_t v164 = __DataStorage._offset.getter();
                        if (__OFSUB__(v161, v164)) {
                          goto LABEL_379;
                        }
                        v163 += v161 - v164;
                      }
                      uint64_t v82 = v257;
                      uint64_t v165 = __DataStorage._length.getter();
                      if (v165 >= v162) {
                        uint64_t v166 = v162;
                      }
                      else {
                        uint64_t v166 = v165;
                      }
                      uint64_t v167 = v163 + v166;
                      if (v163) {
                        uint64_t v168 = v167;
                      }
                      else {
                        uint64_t v168 = 0;
                      }
                      uint64_t v169 = v255;
                      sub_100DC8C5C(v163, v132, v168, (BOOL *)__s1);
                      uint64_t v255 = v169;
                      uint64_t v171 = v253;
                      unint64_t v170 = (unint64_t)v254;
                      sub_10001CFB8(v253, (unint64_t)v254);
                      swift_release();
                      swift_release();
LABEL_239:
                      sub_10001CFB8(v171, v170);
                      sub_10001CFB8(v85, v252);
                      if ((__s1[0] & 1) == 0) {
                        goto LABEL_4;
                      }
                    }
                    else
                    {
                      uint64_t v197 = *(void *)(v253 + 16);
                      uint64_t v249 = *(void *)(v253 + 24);
                      swift_retain();
                      swift_retain();
                      uint64_t v198 = __DataStorage._bytes.getter();
                      if (v198)
                      {
                        uint64_t v199 = __DataStorage._offset.getter();
                        if (__OFSUB__(v197, v199)) {
                          goto LABEL_377;
                        }
                        v198 += v197 - v199;
                      }
                      uint64_t v239 = v249 - v197;
                      if (__OFSUB__(v249, v197)) {
                        goto LABEL_371;
                      }
                      uint64_t v240 = __DataStorage._length.getter();
                      if (v240 >= v239) {
                        uint64_t v241 = v239;
                      }
                      else {
                        uint64_t v241 = v240;
                      }
                      uint64_t v242 = v198 + v241;
                      if (v198) {
                        uint64_t v243 = v242;
                      }
                      else {
                        uint64_t v243 = 0;
                      }
                      uint64_t v244 = v255;
                      sub_100DC8C5C(v198, v132, v243, (BOOL *)__s1);
                      uint64_t v82 = v257;
                      uint64_t v255 = v244;
                      if (v244) {
                        goto LABEL_410;
                      }
                      swift_release();
                      swift_release();
                      swift_release();
                      uint64_t v245 = v253;
                      swift_release();
                      sub_10001CFB8(v245, (unint64_t)v254);
                      LOBYTE(v245) = __s1[0];
                      sub_10001CFB8(v85, v252);
                      if ((v245 & 1) == 0) {
                        goto LABEL_4;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v195 = v253;
                    unint64_t v194 = (unint64_t)v254;
                    __s1[0] = v253;
                    LODWORD(__s1[1]) = v254;
                    WORD2(__s1[1]) = WORD2(v254);
                    if (!v132) {
                      goto LABEL_405;
                    }
                    int v196 = memcmp(v132, __s1, BYTE6(v254));
                    swift_release();
                    swift_release();
LABEL_261:
                    sub_10001CFB8(v195, v194);
                    sub_10001CFB8(v85, v252);
                    if (v196) {
                      goto LABEL_4;
                    }
                  }
                  break;
                case 3:
                  memset(__s1, 0, 14);
                  if (!v98) {
                    goto LABEL_188;
                  }
                  uint64_t v253 = v87;
                  uint64_t v254 = (const void *)v88;
                  if (v98 == 1)
                  {
                    uint64_t v137 = (int)v87;
                    uint64_t v103 = (v87 >> 32) - (int)v87;
                    if (v87 >> 32 < (int)v87) {
                      goto LABEL_363;
                    }
                    unint64_t v104 = v84;
                    sub_1000361E0(v87, v88);
                    uint64_t v138 = __DataStorage._bytes.getter();
                    if (!v138) {
                      goto LABEL_402;
                    }
                    uint64_t v106 = v138;
                    uint64_t v139 = __DataStorage._offset.getter();
                    uint64_t v108 = v137 - v139;
                    if (__OFSUB__(v137, v139)) {
                      goto LABEL_366;
                    }
                    goto LABEL_183;
                  }
                  unint64_t v181 = v84;
                  uint64_t v182 = *(void *)(v87 + 16);
                  uint64_t v183 = *(void *)(v87 + 24);
                  sub_1000361E0(v87, v88);
                  swift_retain();
                  swift_retain();
                  uint64_t v184 = (char *)__DataStorage._bytes.getter();
                  if (v184)
                  {
                    uint64_t v185 = __DataStorage._offset.getter();
                    if (__OFSUB__(v182, v185)) {
                      goto LABEL_374;
                    }
                    v184 += v182 - v185;
                  }
                  int64_t v186 = v183 - v182;
                  if (__OFSUB__(v183, v182)) {
                    goto LABEL_365;
                  }
                  uint64_t v187 = __DataStorage._length.getter();
                  uint64_t v82 = v257;
                  if (!v184) {
                    goto LABEL_403;
                  }
                  goto LABEL_252;
                default:
                  __s1[0] = v85;
                  LOWORD(__s1[1]) = v84;
                  BYTE2(__s1[1]) = BYTE2(v84);
                  BYTE3(__s1[1]) = BYTE3(v84);
                  BYTE4(__s1[1]) = BYTE4(v84);
                  BYTE5(__s1[1]) = BYTE5(v84);
                  if (v98)
                  {
                    uint64_t v253 = v87;
                    uint64_t v254 = (const void *)v88;
                    if (v98 == 1)
                    {
                      uint64_t v102 = (int)v87;
                      uint64_t v103 = (v87 >> 32) - (int)v87;
                      if (v87 >> 32 < (int)v87) {
                        goto LABEL_362;
                      }
                      unint64_t v104 = v84;
                      sub_1000361E0(v87, v88);
                      uint64_t v105 = __DataStorage._bytes.getter();
                      if (!v105) {
                        goto LABEL_401;
                      }
                      uint64_t v106 = v105;
                      uint64_t v107 = __DataStorage._offset.getter();
                      uint64_t v108 = v102 - v107;
                      if (__OFSUB__(v102, v107)) {
                        goto LABEL_367;
                      }
LABEL_183:
                      uint64_t v140 = __DataStorage._length.getter();
                      if (v140 >= v103) {
                        size_t v141 = v103;
                      }
                      else {
                        size_t v141 = v140;
                      }
                      int v142 = memcmp(__s1, (const void *)(v106 + v108), v141);
                      sub_10001CFB8(v253, (unint64_t)v254);
                      sub_10001CFB8(v85, v104);
                      uint64_t v82 = v257;
                      if (v142) {
                        goto LABEL_4;
                      }
                    }
                    else
                    {
                      unint64_t v181 = v84;
                      uint64_t v188 = *(void *)(v87 + 16);
                      uint64_t v189 = *(void *)(v87 + 24);
                      sub_1000361E0(v87, v88);
                      swift_retain();
                      swift_retain();
                      uint64_t v184 = (char *)__DataStorage._bytes.getter();
                      if (v184)
                      {
                        uint64_t v190 = __DataStorage._offset.getter();
                        if (__OFSUB__(v188, v190)) {
                          goto LABEL_375;
                        }
                        v184 += v188 - v190;
                      }
                      int64_t v186 = v189 - v188;
                      if (__OFSUB__(v189, v188)) {
                        goto LABEL_364;
                      }
                      uint64_t v187 = __DataStorage._length.getter();
                      uint64_t v82 = v257;
                      if (!v184) {
                        goto LABEL_404;
                      }
LABEL_252:
                      if (v187 >= v186) {
                        size_t v191 = v186;
                      }
                      else {
                        size_t v191 = v187;
                      }
                      int v192 = memcmp(__s1, v184, v191);
                      swift_release();
                      uint64_t v193 = v253;
                      swift_release();
                      sub_10001CFB8(v193, (unint64_t)v254);
                      sub_10001CFB8(v85, v181);
                      if (v192) {
                        goto LABEL_4;
                      }
                    }
                  }
                  else
                  {
LABEL_188:
                    uint64_t __s2 = v87;
                    __int16 v262 = v88;
                    char v263 = BYTE2(v88);
                    char v264 = BYTE3(v88);
                    char v265 = BYTE4(v88);
                    char v266 = BYTE5(v88);
                    unint64_t v143 = v84;
                    int v144 = memcmp(__s1, &__s2, BYTE6(v88));
                    sub_10001CFB8(v85, v143);
                    if (v144) {
                      goto LABEL_4;
                    }
                  }
                  break;
              }
            }
            uint64_t v109 = *(int *)(v82 + 32);
            uint64_t v111 = *(uint64_t *)((char *)v259 + v109);
            unint64_t v110 = *(uint64_t *)((char *)v259 + v109 + 8);
            uint64_t v112 = (uint64_t *)((char *)v260 + v109);
            uint64_t v114 = *v112;
            unint64_t v113 = v112[1];
            uint64_t v115 = 0;
            switch(v110 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v111), v111)) {
                  goto LABEL_354;
                }
                uint64_t v115 = HIDWORD(v111) - (int)v111;
LABEL_151:
                sub_1000361E0(v111, v110);
                break;
              case 2uLL:
                uint64_t v117 = *(void *)(v111 + 16);
                uint64_t v116 = *(void *)(v111 + 24);
                uint64_t v115 = v116 - v117;
                if (!__OFSUB__(v116, v117)) {
                  goto LABEL_151;
                }
                goto LABEL_353;
              case 3uLL:
                goto LABEL_152;
              default:
                uint64_t v115 = BYTE6(v110);
                goto LABEL_152;
            }
            break;
          case 3uLL:
            if (!v90) {
              goto LABEL_145;
            }
            goto LABEL_144;
          default:
            if (v90 != BYTE6(v88)) {
              goto LABEL_144;
            }
            goto LABEL_135;
        }
LABEL_152:
        unint64_t v118 = v113 >> 62;
        switch(v113 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v114), v114)) {
              goto LABEL_356;
            }
            if (v115 == HIDWORD(v114) - v114) {
              goto LABEL_162;
            }
            goto LABEL_168;
          case 2uLL:
            uint64_t v120 = *(void *)(v114 + 16);
            uint64_t v119 = *(void *)(v114 + 24);
            BOOL v18 = __OFSUB__(v119, v120);
            uint64_t v121 = v119 - v120;
            if (v18) {
              goto LABEL_355;
            }
            if (v115 != v121)
            {
LABEL_168:
              sub_10001CFB8(v111, v110);
              goto LABEL_4;
            }
LABEL_162:
            if (v115 >= 1)
            {
              unint64_t v122 = v251;
              switch(v110 >> 62)
              {
                case 1uLL:
                  if ((int)v111 > v111 >> 32) {
                    goto LABEL_361;
                  }
                  sub_1000361E0(v114, v113);
                  uint64_t v150 = __DataStorage._bytes.getter();
                  if (!v150) {
                    goto LABEL_197;
                  }
                  uint64_t v151 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v111, v151)) {
                    goto LABEL_373;
                  }
                  v150 += (int)v111 - v151;
LABEL_197:
                  __DataStorage._length.getter();
                  if (!v118)
                  {
                    unint64_t v214 = v248 & 0xFF00000000000000 | v113 & 0xFFFFFFFFFFFFFFLL;
                    uint64_t v213 = v114;
                    unint64_t v248 = v214;
                    double v212 = (void *)v150;
                    goto LABEL_304;
                  }
                  if (v118 != 1)
                  {
                    uint64_t v235 = *(void *)(v114 + 16);
                    uint64_t v236 = *(void *)(v114 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v218 = v235;
                    uint64_t v219 = v236;
                    uint64_t v220 = v113 & 0x3FFFFFFFFFFFFFFFLL;
                    long long v217 = (void *)v150;
                    goto LABEL_308;
                  }
                  if (v114 >> 32 < (int)v114) {
                    goto LABEL_385;
                  }
                  sub_1000361E0(v114, v113);
                  uint64_t v124 = (int)v114;
                  uint64_t v125 = v114 >> 32;
                  uint64_t v126 = v113 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v123 = (void *)v150;
                  goto LABEL_201;
                case 2uLL:
                  uint64_t v145 = *(void *)(v111 + 16);
                  sub_1000361E0(v114, v113);
                  swift_retain();
                  swift_retain();
                  uint64_t v146 = __DataStorage._bytes.getter();
                  if (v146)
                  {
                    uint64_t v147 = v146;
                    uint64_t v148 = __DataStorage._offset.getter();
                    if (__OFSUB__(v145, v148)) {
                      goto LABEL_372;
                    }
                    uint64_t v149 = (void *)(v147 + v145 - v148);
                  }
                  else
                  {
                    uint64_t v149 = 0;
                  }
                  __DataStorage._length.getter();
                  if (v118)
                  {
                    if (v118 == 1)
                    {
                      if (v114 >> 32 < (int)v114) {
                        goto LABEL_382;
                      }
                      uint64_t v254 = (const void *)(v113 & 0x3FFFFFFFFFFFFFFFLL);
                      sub_1000361E0(v114, v113);
                      uint64_t v210 = v255;
                      char v211 = sub_10027A2C0((int)v114, v114 >> 32, (uint64_t)v254, v149);
                      uint64_t v255 = v210;
                      sub_10001CFB8(v114, v113);
                    }
                    else
                    {
                      uint64_t v230 = *(void *)(v114 + 16);
                      uint64_t v254 = *(const void **)(v114 + 24);
                      swift_retain();
                      swift_retain();
                      uint64_t v231 = v230;
                      uint64_t v232 = v255;
                      char v233 = sub_10027A2C0(v231, (uint64_t)v254, v113 & 0x3FFFFFFFFFFFFFFFLL, v149);
                      uint64_t v255 = v232;
                      if (v232) {
                        goto LABEL_409;
                      }
                      char v211 = v233;
                      swift_release();
                      swift_release();
                    }
                  }
                  else
                  {
                    unint64_t v250 = v250 & 0xFF00000000000000 | v113 & 0xFFFFFFFFFFFFFFLL;
                    uint64_t v229 = v255;
                    char v211 = sub_10027A1DC(v114, v250, v149);
                    uint64_t v255 = v229;
                  }
                  swift_release();
                  swift_release();
                  sub_10001CFB8(v114, v113);
                  sub_10001CFB8(v111, v110);
                  unint64_t v10 = v259;
                  if (v211) {
                    goto LABEL_325;
                  }
                  goto LABEL_5;
                case 3uLL:
                  memset(__s1, 0, 14);
                  if (!v118)
                  {
                    uint64_t __s2 = v114;
                    __int16 v262 = v113;
                    char v263 = BYTE2(v113);
                    char v264 = BYTE3(v113);
                    char v265 = BYTE4(v113);
                    char v266 = BYTE5(v113);
                    int v160 = memcmp(__s1, &__s2, BYTE6(v113));
LABEL_285:
                    sub_10001CFB8(v111, v110);
                    unint64_t v10 = v259;
                    if (!v160) {
                      goto LABEL_325;
                    }
                    goto LABEL_5;
                  }
                  if (v118 == 1)
                  {
                    if (v114 >> 32 < (int)v114) {
                      goto LABEL_381;
                    }
                    sub_1000361E0(v114, v113);
                    uint64_t v154 = __DataStorage._bytes.getter();
                    if (!v154) {
                      goto LABEL_407;
                    }
                    uint64_t v155 = v154;
                    uint64_t v156 = __DataStorage._offset.getter();
                    uint64_t v157 = (int)v114 - v156;
                    if (__OFSUB__((int)v114, v156)) {
                      goto LABEL_384;
                    }
                    uint64_t v158 = __DataStorage._length.getter();
                    if (v158 >= (v114 >> 32) - (int)v114) {
                      size_t v159 = (v114 >> 32) - (int)v114;
                    }
                    else {
                      size_t v159 = v158;
                    }
                    int v160 = memcmp(__s1, (const void *)(v155 + v157), v159);
                    sub_10001CFB8(v114, v113);
                    goto LABEL_285;
                  }
                  uint64_t v221 = *(void *)(v114 + 16);
                  uint64_t v222 = *(void *)(v114 + 24);
                  sub_1000361E0(v114, v113);
                  swift_retain();
                  swift_retain();
                  uint64_t v223 = (char *)__DataStorage._bytes.getter();
                  if (v223)
                  {
                    uint64_t v224 = __DataStorage._offset.getter();
                    if (__OFSUB__(v221, v224)) {
                      goto LABEL_386;
                    }
                    v223 += v221 - v224;
                  }
                  BOOL v18 = __OFSUB__(v222, v221);
                  int64_t v225 = v222 - v221;
                  if (v18) {
                    goto LABEL_383;
                  }
                  uint64_t v226 = __DataStorage._length.getter();
                  if (!v223) {
                    goto LABEL_408;
                  }
                  if (v226 >= v225) {
                    size_t v227 = v225;
                  }
                  else {
                    size_t v227 = v226;
                  }
                  int v228 = memcmp(__s1, v223, v227);
                  swift_release();
                  swift_release();
                  sub_10001CFB8(v114, v113);
                  sub_10001CFB8(v111, v110);
                  unint64_t v10 = v259;
                  if (!v228) {
                    goto LABEL_325;
                  }
                  goto LABEL_5;
                default:
                  __s1[0] = v111;
                  LOWORD(__s1[1]) = v110;
                  BYTE2(__s1[1]) = BYTE2(v110);
                  BYTE3(__s1[1]) = BYTE3(v110);
                  BYTE4(__s1[1]) = BYTE4(v110);
                  BYTE5(__s1[1]) = BYTE5(v110);
                  if (!v118)
                  {
                    sub_1000361E0(v114, v113);
                    double v212 = __s1;
                    uint64_t v213 = v114;
                    unint64_t v251 = v122 & 0xFF00000000000000 | v113 & 0xFFFFFFFFFFFFFFLL;
                    unint64_t v214 = v251;
LABEL_304:
                    uint64_t v234 = v255;
                    char v153 = sub_10027A1DC(v213, v214, v212);
                    uint64_t v255 = v234;
LABEL_305:
                    sub_10001CFB8(v114, v113);
                    sub_10001CFB8(v111, v110);
                    unint64_t v10 = v259;
                    if (v153) {
                      goto LABEL_325;
                    }
                    goto LABEL_5;
                  }
                  if (v118 == 1)
                  {
                    if (v114 >> 32 < (int)v114) {
                      goto LABEL_380;
                    }
                    sub_1000361E0(v114, v113);
                    sub_1000361E0(v114, v113);
                    uint64_t v123 = __s1;
                    uint64_t v124 = (int)v114;
                    uint64_t v125 = v114 >> 32;
                    uint64_t v126 = v113 & 0x3FFFFFFFFFFFFFFFLL;
LABEL_201:
                    uint64_t v152 = v255;
                    char v153 = sub_10027A2C0(v124, v125, v126, v123);
                    uint64_t v255 = v152;
                    sub_10001CFB8(v114, v113);
                    goto LABEL_305;
                  }
                  uint64_t v215 = *(void *)(v114 + 16);
                  uint64_t v216 = *(void *)(v114 + 24);
                  sub_1000361E0(v114, v113);
                  swift_retain();
                  swift_retain();
                  long long v217 = __s1;
                  uint64_t v218 = v215;
                  uint64_t v219 = v216;
                  uint64_t v220 = v113 & 0x3FFFFFFFFFFFFFFFLL;
LABEL_308:
                  uint64_t v237 = v255;
                  char v238 = sub_10027A2C0(v218, v219, v220, v217);
                  uint64_t v255 = v237;
                  swift_release();
                  swift_release();
                  sub_10001CFB8(v114, v113);
                  sub_10001CFB8(v111, v110);
                  unint64_t v10 = v259;
                  if (v238) {
                    goto LABEL_325;
                  }
                  break;
              }
              goto LABEL_5;
            }
LABEL_324:
            sub_10001CFB8(v111, v110);
            unint64_t v10 = v259;
LABEL_325:
            sub_10027A86C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
            uint64_t v246 = 1;
LABEL_321:
            swift_bridgeObjectRelease();
            return v246;
          case 3uLL:
            if (!v115) {
              goto LABEL_324;
            }
            goto LABEL_168;
          default:
            if (v115 != BYTE6(v113)) {
              goto LABEL_168;
            }
            goto LABEL_162;
        }
    }
  }
}

uint64_t sub_100276808(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
LABEL_20:
    swift_bridgeObjectRelease_n();
    return 1;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v10 = 5;
  while (1)
  {
    uint64_t v11 = v10 - 3;
    if (__OFADD__(v10 - 4, 1)) {
      break;
    }
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
    if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
    {
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_7;
    }
    ++v10;
    if (v11 == v2) {
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100276960(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_5:
      uint64_t v6 = v5;
      sub_10001D4B0(0, (unint64_t *)&unk_10165F040);
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100276AE8(uint64_t a1)
{
  uint64_t v34 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  char v7 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v4)
    {
      unint64_t v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v9 = v8 | (v6 << 6);
    }
    else
    {
      int64_t v10 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_47;
      }
      if (v10 >= v5)
      {
LABEL_42:
        swift_release();
        return (uint64_t)v7;
      }
      unint64_t v11 = *(void *)(v34 + 8 * v10);
      ++v6;
      if (!v11)
      {
        int64_t v6 = v10 + 1;
        if (v10 + 1 >= v5) {
          goto LABEL_42;
        }
        unint64_t v11 = *(void *)(v34 + 8 * v6);
        if (!v11)
        {
          int64_t v6 = v10 + 2;
          if (v10 + 2 >= v5) {
            goto LABEL_42;
          }
          unint64_t v11 = *(void *)(v34 + 8 * v6);
          if (!v11)
          {
            int64_t v6 = v10 + 3;
            if (v10 + 3 >= v5) {
              goto LABEL_42;
            }
            unint64_t v11 = *(void *)(v34 + 8 * v6);
            if (!v11)
            {
              int64_t v12 = v10 + 4;
              if (v12 >= v5) {
                goto LABEL_42;
              }
              unint64_t v11 = *(void *)(v34 + 8 * v12);
              if (!v11)
              {
                while (1)
                {
                  int64_t v6 = v12 + 1;
                  if (__OFADD__(v12, 1)) {
                    goto LABEL_48;
                  }
                  if (v6 >= v5) {
                    goto LABEL_42;
                  }
                  unint64_t v11 = *(void *)(v34 + 8 * v6);
                  ++v12;
                  if (v11) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v6 = v12;
            }
          }
        }
      }
LABEL_23:
      unint64_t v4 = (v11 - 1) & v11;
      unint64_t v9 = __clz(__rbit64(v11)) + (v6 << 6);
    }
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8 * v9);
    uint64_t v14 = *(void *)(v13 + 16);
    int64_t v15 = v7[2];
    int64_t v16 = v15 + v14;
    if (__OFADD__(v15, v14)) {
      break;
    }
    swift_bridgeObjectRetain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v16 <= v7[3] >> 1)
    {
      if (!*(void *)(v13 + 16)) {
        goto LABEL_4;
      }
    }
    else
    {
      if (v15 <= v16) {
        int64_t v18 = v15 + v14;
      }
      else {
        int64_t v18 = v15;
      }
      char v7 = (void *)sub_100A6E900(isUniquelyReferenced_nonNull_native, v18, 1, (unint64_t)v7);
      if (!*(void *)(v13 + 16))
      {
LABEL_4:
        if (v14) {
          goto LABEL_44;
        }
        goto LABEL_5;
      }
    }
    uint64_t v19 = v7[2];
    uint64_t v20 = (v7[3] >> 1) - v19;
    uint64_t v21 = *(void *)(type metadata accessor for Date() - 8);
    uint64_t v22 = *(void *)(v21 + 72);
    if (v20 < v14) {
      goto LABEL_45;
    }
    unint64_t v23 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    uint64_t v24 = (char *)v7 + v23 + v22 * v19;
    unint64_t v25 = v13 + v23;
    uint64_t v26 = v22 * v14;
    uint64_t v27 = &v24[v26];
    unint64_t v28 = v25 + v26;
    if (v25 < (unint64_t)v27 && (unint64_t)v24 < v28) {
      goto LABEL_49;
    }
    swift_arrayInitWithCopy();
    if (v14)
    {
      uint64_t v30 = v7[2];
      BOOL v31 = __OFADD__(v30, v14);
      uint64_t v32 = v30 + v14;
      if (v31) {
        goto LABEL_46;
      }
      v7[2] = v32;
    }
LABEL_5:
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100276DDC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AB630(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100276E0C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB648(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100276E38@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB900(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100276E64@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB9F8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100276E90()
{
  uint64_t v0 = (void *)SPFinderStateChangedNotification;
  type metadata accessor for DarwinNotificationHelper();
  swift_allocObject();
  id v1 = v0;
  uint64_t result = DarwinNotificationHelper.init(notificationName:rateLimit:)();
  qword_10170DA20 = result;
  return result;
}

uint64_t sub_100276EE4(unsigned __int8 *a1)
{
  int v1 = *a1;
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + 16) = v1;
  sub_10027832C(2, v1, 2, (uint64_t)sub_10027B1A4, v2);

  return swift_release();
}

void sub_100276F68(uint64_t a1, char a2)
{
  if (a1)
  {
    static os_log_type_t.error.getter();
    if (qword_101637230 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_101638EB0);
    uint64_t v3 = String.init<A>(describing:)();
    uint64_t v5 = v4;
    *(void *)(v2 + 56) = &type metadata for String;
    *(void *)(v2 + 64) = sub_10000B4CC();
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = v7;
    *(_OWORD *)(v7 + 16) = xmmword_101342130;
    BOOL v9 = (a2 & 1) == 0;
    if (a2) {
      uint64_t v10 = 1702195828;
    }
    else {
      uint64_t v10 = 0x65736C6166;
    }
    if (v9) {
      unint64_t v11 = 0xE500000000000000;
    }
    else {
      unint64_t v11 = 0xE400000000000000;
    }
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_10000B4CC();
    *(void *)(v8 + 32) = v10;
    *(void *)(v8 + 40) = v11;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v12 = (id)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100277170(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v4 - 8);
  int64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163FE70);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = OBJC_IVAR____TtC12searchpartyd18FinderStateManager_beaconFindMyAccessoryAssociatedPublisher;
  if (*(void *)(v1 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_beaconFindMyAccessoryAssociatedPublisher)) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = a1 == 0;
  }
  if (!v12)
  {
    uint64_t v13 = *(void **)(v1 + 16);
    id v20 = v13;
    uint64_t v21 = a1;
    uint64_t v19 = v8;
    uint64_t v14 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v6, 1, 1, v14);
    swift_retain();
    id v15 = v13;
    sub_10000588C(&qword_10163FE78);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734(&qword_10163FE80, &qword_10163FE78);
    sub_10027B124();
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4((uint64_t)v6, &qword_10163C6C8);

    swift_release();
    sub_100062734(&qword_10163FE88, &qword_10163FE70);
    swift_retain();
    uint64_t v16 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v7);
    *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_cancellable) = v16;
    swift_release();
  }
  *(void *)(v2 + v11) = a1;
  return swift_release();
}

uint64_t sub_100277434@<X0>(unsigned char *a1@<X8>)
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  char v2 = sub_1010AB630(v9);
  uint64_t v3 = sub_1010AB648(v9);
  swift_bridgeObjectRelease();
  BOOL v4 = v3 != -1;
  LOBYTE(v3) = sub_10027A4BC();
  unint64_t v5 = sub_1002A412C();
  uint64_t v6 = sub_100276AE8(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for FinderStateInfo(0);
  sub_100E4CFC0(v6, &a1[*(int *)(v7 + 28)]);
  swift_bridgeObjectRelease();
  uint64_t result = sub_1002A3398((uint64_t)&a1[*(int *)(v7 + 32)]);
  *a1 = v2 & 1;
  a1[1] = v3 & 1;
  a1[2] = v4;
  return result;
}

uint64_t sub_100277570@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for FinderStateInfo(0);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  uint64_t v8 = swift_retain();
  uint64_t v9 = sub_100EFCD30(v8);
  char v11 = sub_100EFC474(v9, v10 & 0x10101);
  swift_release();
  char v12 = sub_10027A4BC();
  sub_100277434(v7);
  char v13 = v7[2];
  sub_10027A86C((uint64_t)v7, type metadata accessor for FinderStateInfo);
  unint64_t v14 = sub_1002A412C();
  uint64_t v15 = sub_100276AE8(v14);
  swift_bridgeObjectRelease();
  sub_100E4CFC0(v15, &a2[*(int *)(v5 + 36)]);
  swift_bridgeObjectRelease();
  uint64_t result = sub_1002A3398((uint64_t)&a2[*(int *)(v5 + 40)]);
  *a2 = v11 & 1;
  a2[1] = v12 & 1;
  a2[2] = v13;
  return result;
}

uint64_t sub_1002776CC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_1016567A0);
  __chkstk_darwin(v4 - 8);
  uint64_t v34 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163FE68);
  __chkstk_darwin(v6 - 8);
  uint64_t v33 = (uint64_t)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10027A934((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v1 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v14 = v1 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_configurationSubscription;
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56);
  uint64_t v31 = v16 + 56;
  uint64_t v32 = v17;
  v17(v14, 1, 1, v15);
  uint64_t v18 = v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateSubscription;
  uint64_t v19 = sub_10000588C(&qword_101657CA0);
  id v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
  v20(v18, 1, 1, v19);
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_cancellable) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_beaconFindMyAccessoryAssociatedPublisher) = 0;
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateManager) = a1;
  id v21 = objc_allocWithZone((Class)FMStateCapture);
  swift_retain_n();
  id v22 = [v21 init];
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_10027A97C;
  *(void *)(v23 + 24) = a1;
  int v37 = sub_10027A9BC;
  uint64_t v38 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000B6B9C;
  size_t v36 = &unk_1015B6940;
  uint64_t v24 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v22 setStateCaptureBlock:v24];
  _Block_release(v24);
  swift_release();
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_stateCapture) = v22;
  sub_10092E16C((uint64_t)&off_1015A0B80);
  type metadata accessor for DarwinNotificationHelper();
  swift_allocObject();
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_notificationListener) = DarwinNotificationHelper.init(notificationHandlers:)();
  uint64_t v25 = type metadata accessor for FinderStateManager(0);
  size_t v36 = (void *)v25;
  int v37 = (uint64_t (*)())&off_1015B6900;
  aBlock[0] = v2;
  swift_retain();
  uint64_t v26 = v33;
  sub_100497078((uint64_t)aBlock, v33);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  v20(v26, 0, 1, v19);
  uint64_t v27 = v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateSubscription;
  swift_beginAccess();
  sub_100062604(v26, v27, &qword_10163FE68);
  swift_endAccess();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  size_t v36 = (void *)v25;
  int v37 = (uint64_t (*)())&off_1015B68C8;
  aBlock[0] = v2;
  swift_retain();
  uint64_t v28 = v34;
  sub_1000B5EA4((uint64_t)aBlock, v34);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  v32(v28, 0, 1, v15);
  uint64_t v29 = v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_configurationSubscription;
  swift_beginAccess();
  sub_100062604(v28, v29, &qword_1016567A0);
  swift_endAccess();
  return v2;
}

uint64_t sub_100277D44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_retain();
  uint64_t result = sub_100EFCD30(v2);
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4 & 1;
  *(unsigned char *)(a1 + 9) = v5 & 1;
  *(unsigned char *)(a1 + 10) = v6 & 1;
  return result;
}

uint64_t sub_100277D88()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_101657CA0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = v1 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_configurationSubscription;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
    Subscription.unsubscribe(completion:)();
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v11 = v1 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateSubscription;
  swift_beginAccess();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2))
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v11, v2);
    Subscription.unsubscribe(completion:)();
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  }

  sub_10001DAB4(v10, &qword_1016567A0);
  sub_10001DAB4(v11, &qword_10163FE68);
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10027807C(uint64_t result)
{
  if (result)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v2 = String.init<A>(describing:)();
    uint64_t v4 = v3;
    *(void *)(v1 + 56) = &type metadata for String;
    *(void *)(v1 + 64) = sub_10000B4CC();
    *(void *)(v1 + 32) = v2;
    *(void *)(v1 + 40) = v4;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    char v5 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100278194()
{
  sub_100277D88();

  return swift_deallocClassInstance();
}

uint64_t sub_1002781EC()
{
  return type metadata accessor for FinderStateManager(0);
}

uint64_t type metadata accessor for FinderStateManager(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_10163FC58);
}

void sub_100278214()
{
  sub_100278584(319, (unint64_t *)&qword_10163D550, (uint64_t *)&unk_1016488F0);
  if (v0 <= 0x3F)
  {
    sub_100278584(319, (unint64_t *)&unk_10163FC68, &qword_101657CA0);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_10027832C(char a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  int v20 = a3;
  int v21 = a2;
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v6;
  *(void *)(v17 + 24) = a4;
  *(void *)(v17 + 32) = a5;
  *(unsigned char *)(v17 + 40) = a1;
  *(unsigned char *)(v17 + 41) = v20;
  *(unsigned char *)(v17 + 42) = v21;
  aBlock[4] = sub_10027AA1C;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  void aBlock[3] = &unk_1015B6990;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v22);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release();
}

void sub_100278584(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_10000592C(a3);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *sub_1002785D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(unsigned char *)(a1 + 2) = *((unsigned char *)a2 + 2);
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = *(int *)(a3 + 32);
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (v12(v17, 1, v10))
    {
      uint64_t v18 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
  }
  return v4;
}

uint64_t sub_1002787F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v5 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v6(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 32);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v7, 1, v5);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v9(v7, v5);
  }
  return result;
}

uint64_t sub_100278928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11(v15, 1, v9))
  {
    uint64_t v16 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  return a1;
}

unsigned char *sub_100278AF8(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 32);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = v11(&a1[v15], 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v16, v17, v9);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  return a1;
}

uint64_t sub_100278D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11(v15, 1, v9))
  {
    uint64_t v16 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  return a1;
}

unsigned char *sub_100278F5C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 32);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = v11(&a1[v15], 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v16, v17, v9);
      return a1;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  return a1;
}

uint64_t sub_1002791F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100279204);
}

uint64_t sub_100279204(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_10000588C((uint64_t *)&unk_10163AC90);
    uint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    int v13 = &a1[*(int *)(a3 + 28)];
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1002792B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002792CC);
}

unsigned char *sub_1002792CC(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = sub_10000588C((uint64_t *)&unk_10163AC90);
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 28)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for FinderStateInfo(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163FE20);
}

void sub_100279394()
{
  sub_1000C7D80();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_100279430(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, unsigned __int8 a5, char a6)
{
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  int v37 = a5;
  int v7 = a4;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v38 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v35 - v11;
  uint64_t v13 = type metadata accessor for FinderStateInfo(0);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  int v19 = (char *)&v35 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (unsigned __int8 *)&v35 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v35 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (unsigned __int8 *)&v35 - v26;
  sub_100277434(v25);
  sub_10027A8CC((uint64_t)v25, (uint64_t)v22, type metadata accessor for FinderStateInfo);
  if (v7 == 2) {
    int v28 = *v22;
  }
  else {
    int v28 = v7 & 1;
  }
  int v36 = v28;
  sub_10027A86C((uint64_t)v22, type metadata accessor for FinderStateInfo);
  sub_10027A8CC((uint64_t)v25, (uint64_t)v19, type metadata accessor for FinderStateInfo);
  if (v37 == 2) {
    unsigned __int8 v29 = v19[2];
  }
  else {
    unsigned __int8 v29 = v37 & 1;
  }
  sub_10027A86C((uint64_t)v19, type metadata accessor for FinderStateInfo);
  sub_10027A8CC((uint64_t)v25, (uint64_t)v16, type metadata accessor for FinderStateInfo);
  if (a6 == 2) {
    unsigned __int8 v30 = v16[1];
  }
  else {
    unsigned __int8 v30 = a6 & 1;
  }
  sub_10027A86C((uint64_t)v16, type metadata accessor for FinderStateInfo);
  unint64_t v31 = sub_1002A412C();
  uint64_t v32 = sub_100276AE8(v31);
  swift_bridgeObjectRelease();
  sub_100E4CFC0(v32, v12);
  swift_bridgeObjectRelease();
  uint64_t v33 = v38;
  sub_1002A3398(v38);
  sub_10027A86C((uint64_t)v25, type metadata accessor for FinderStateInfo);
  *uint64_t v27 = v36;
  v27[1] = v30;
  v27[2] = v29;
  sub_10001D608((uint64_t)v12, (uint64_t)&v27[*(int *)(v13 + 28)], (uint64_t *)&unk_10163AC90);
  sub_10001D608(v33, (uint64_t)&v27[*(int *)(v13 + 32)], (uint64_t *)&unk_10163AC90);
  sub_10027ACEC(v27, v39, v40);
  return sub_10027A86C((uint64_t)v27, type metadata accessor for FinderStateInfo);
}

uint64_t sub_10027976C()
{
  return sub_10027978C();
}

uint64_t sub_10027977C()
{
  return sub_10027978C();
}

uint64_t sub_10027978C()
{
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  unint64_t v0 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  if (qword_101636920 != -1) {
    swift_once();
  }
  return dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
}

uint64_t sub_100279884(void (*a1)(id, void), uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v41 = a1;
  uint64_t v3 = type metadata accessor for FinderStateInfo(0);
  __chkstk_darwin(v3 - 8);
  BOOL v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v38 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = type metadata accessor for Date();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v2;
  uint64_t v14 = swift_retain();
  uint64_t v15 = sub_100EFCD30(v14);
  int v17 = v16;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v18 = sub_1010AB9F8((uint64_t)v43);
  swift_bridgeObjectRelease();
  uint64_t v43 = &_swiftEmptySetSingleton;
  id v19 = SPDisabledReasoniCloudSignedOut;
  char v20 = sub_100276808((uint64_t)v19, v18);

  if (v20)
  {
    sub_100DCCD04(v42, SPFinderDisabledReasoniCloudSignedOut);
  }
  id v21 = SPDisabledReasonLowAccountSecurity;
  char v22 = sub_100276808((uint64_t)v21, v18);

  if (v22)
  {
    sub_100DCCD04(v42, SPFinderDisabledReasonLowAccountSecurity);
  }
  id v23 = SPDisabledReasonUserOptOut;
  char v24 = sub_100276808((uint64_t)v23, v18);
  swift_bridgeObjectRelease();

  if (v24)
  {
    sub_100DCCD04(v42, SPFinderDisabledReasonUserOptOut);
  }
  if (sub_100496614())
  {
    if (v17) {
      goto LABEL_11;
    }
  }
  else
  {
    sub_100DCCD04(v42, SPFinderDisabledReasonFindMyiPhoneOff);

    if (v17)
    {
LABEL_11:
      if (sub_100F2C998()) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  sub_100DCCD04(v42, SPFinderDisabledReasonServiceDisabled);

  if ((sub_100F2C998() & 1) == 0)
  {
LABEL_12:
    sub_100DCCD04(v42, SPFinderDisabledReasonLocationServices);
  }
LABEL_13:
  uint64_t v25 = sub_1004963A0();
  *(&v37 - 2) = __chkstk_darwin(v25);
  type metadata accessor for CLAuthorizationStatus(0);
  OS_dispatch_queue.sync<A>(execute:)();

  if ((LODWORD(v42[0]) - 3) >= 2)
  {
    sub_100DCCD04(v42, SPFinderDisabledReasonLocationServicesFindMyFramework);
  }
  if ((v17 & 0x10000) == 0)
  {
    sub_100DCCD04(v42, SPFinderDisabledReasonCannotPublishAnonymously);
  }
  if (!v43[2])
  {
    sub_100DCCD04(v42, SPFinderDisabledReasonNone);
  }
  char v26 = sub_100EFC474(v15, v17 & 0x10101);
  char v27 = sub_10027A4BC();
  Date.init()();
  unint64_t v28 = sub_1002A412C();
  uint64_t v29 = sub_100276AE8(v28);
  swift_bridgeObjectRelease();
  sub_100E4CFC0(v29, v10);
  swift_bridgeObjectRelease();
  uint64_t v30 = v38;
  sub_1002A3398(v38);
  sub_100277434(v5);
  int v31 = v5[2];
  sub_10027A86C((uint64_t)v5, type metadata accessor for FinderStateInfo);
  if (v31) {
    uint64_t v32 = 1;
  }
  else {
    uint64_t v32 = -1;
  }
  id v33 = objc_allocWithZone((Class)SPFinderStateInfo);
  id v34 = sub_100279FC8(v26 & 1, v27 & 1, (uint64_t)v13, (uint64_t)v10, v30, v32);
  id v35 = v34;
  v41(v34, 0);

  return swift_release();
}

uint64_t sub_100279E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100279E30(a1, a2, a3, a4, (uint64_t)"trying to enableFinderMode", 26, 1);
}

uint64_t sub_100279E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100279E30(a1, a2, a3, a4, (uint64_t)"trying to disableFinderMode", 27, 0);
}

uint64_t sub_100279E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v10 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  return sub_10027832C(a7, 2, 2, a1, a2);
}

uint64_t sub_100279EEC(void (*a1)(id, void), uint64_t a2)
{
  return sub_100279884(a1, a2);
}

uint64_t sub_100279F10(char a1, uint64_t a2, uint64_t a3)
{
  int v5 = a1 & 1;
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v6 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  return sub_10027832C(2, 2, v5, a2, a3);
}

uint64_t sub_100279FC0()
{
  return sub_10027A360();
}

id sub_100279FC8(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v8.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  Class isa = 0;
  if (v11(a4, 1, v9) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a4, v9);
  }
  if (v11(a5, 1, v9) == 1)
  {
    Class v13 = 0;
  }
  else
  {
    Class v13 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a5, v9);
  }
  type metadata accessor for SPFinderDisabledReason(0);
  sub_10027A934(&qword_1016387F0, type metadata accessor for SPFinderDisabledReason);
  Class v14 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v15 = [v19 initWithState:a1 & 1 optInScreenOffScan:a2 & 1 lastUpdated:v8.super.isa lastPublishDate:isa lastScheduledPublishActivityDate:v13 activeCache:a6 disabledReasons:v14];

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a3, v9);
  return v15;
}

BOOL sub_10027A1DC(uint64_t a1, uint64_t a2, void *__s1)
{
  uint64_t __s2 = a1;
  __int16 v5 = a2;
  char v6 = BYTE2(a2);
  char v7 = BYTE3(a2);
  char v8 = BYTE4(a2);
  char v9 = BYTE5(a2);
  if (!__s1) {
    __break(1u);
  }
  return memcmp(__s1, &__s2, BYTE6(a2)) == 0;
}

uint64_t sub_10027A2C0(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result = __DataStorage._bytes.getter();
  char v8 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  int64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = result;
  }
  return memcmp(a4, v8, v11) == 0;
}

uint64_t sub_10027A360()
{
  type metadata accessor for AnyKeyPath();
  swift_getKeyPath();
  char v0 = static AnyKeyPath.== infix(_:_:)();
  swift_release();
  if (v0) {
    goto LABEL_5;
  }
  swift_getKeyPath();
  char v1 = static AnyKeyPath.== infix(_:_:)();
  swift_release();
  if ((v1 & 1) != 0
    || (swift_getKeyPath(), char v2 = static AnyKeyPath.== infix(_:_:)(), swift_release(), (v2 & 1) != 0)
    || (swift_getKeyPath(), char v3 = static AnyKeyPath.== infix(_:_:)(), result = swift_release(), (v3 & 1) != 0))
  {
LABEL_5:
    if (qword_101636920 != -1) {
      swift_once();
    }
    return dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
  }
  return result;
}

uint64_t sub_10027A4BC()
{
  static os_log_type_t.debug.getter();
  if (qword_101637230 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_101342130;
  char v1 = self;
  id v2 = [v1 standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
  }
  sub_10001D608((uint64_t)&v15, (uint64_t)v17, (uint64_t *)&unk_101644360);
  if (v18)
  {
    int v5 = swift_dynamicCast();
    char v6 = v14;
    if (!v5) {
      char v6 = 2;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_101644360);
    char v6 = 2;
  }
  v17[0] = v6;
  sub_10000588C(&qword_101649EA0);
  uint64_t v7 = String.init<A>(describing:)();
  uint64_t v9 = v8;
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 64) = sub_10000B4CC();
  *(void *)(v0 + 32) = v7;
  *(void *)(v0 + 40) = v9;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v10 = [v1 standardUserDefaults];
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 objectForKey:v11];

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
  }
  sub_10001D608((uint64_t)&v15, (uint64_t)v17, (uint64_t *)&unk_101644360);
  if (v18)
  {
    uint64_t result = swift_dynamicCast();
    if (result) {
      return v14;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_101644360);
    return 0;
  }
  return result;
}

uint64_t sub_10027A79C@<X0>(_DWORD *a1@<X8>)
{
  return sub_1004B57B0(*(void *)(v1 + 16), a1);
}

uint64_t sub_10027A7B8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AB630(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10027A7E8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB648(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10027A814@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB900(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10027A840@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB9F8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10027A86C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10027A8CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10027A934(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10027A97C@<X0>(uint64_t a1@<X8>)
{
  return sub_100277D44(a1);
}

uint64_t sub_10027A984()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10027A9BC()
{
  return sub_100AA6280(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_10027A9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10027A9D4()
{
  return swift_release();
}

uint64_t sub_10027A9DC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 43, 7);
}

uint64_t sub_10027AA1C()
{
  return sub_100279430(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(unsigned char *)(v0 + 41), *(unsigned char *)(v0 + 42));
}

uint64_t sub_10027AA34(unsigned __int8 *a1)
{
  uint64_t v2 = type metadata accessor for FinderStateInfo(0);
  __chkstk_darwin(v2);
  id v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [self standardUserDefaults];
  uint64_t v6 = *a1;
  NSString v7 = String._bridgeToObjectiveC()();
  [v5 setBool:v6 forKey:v7];

  if (a1[2]) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = -1;
  }
  NSString v9 = String._bridgeToObjectiveC()();
  [v5 setInteger:v8 forKey:v9];

  uint64_t v10 = a1[1];
  NSString v11 = String._bridgeToObjectiveC()();
  [v5 setBool:v10 forKey:v11];

  static os_log_type_t.debug.getter();
  if (qword_101637230 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_101342130;
  sub_10027A8CC((uint64_t)a1, (uint64_t)v4, type metadata accessor for FinderStateInfo);
  uint64_t v13 = String.init<A>(describing:)();
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_10000B4CC();
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101636920 != -1) {
    swift_once();
  }
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();

  return 0;
}

uint64_t sub_10027ACEC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  NSString v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v8 - 8);
  uint64_t v23 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10027AA34(a1);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  long long v16 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v21;
  v17[3] = a3;
  v17[4] = v15;
  aBlock[4] = sub_10027B0F4;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  void aBlock[3] = &unk_1015B69E0;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_10027A934((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  swift_errorRelease();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v23);
  return swift_release();
}

uint64_t sub_10027B0B4()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10027B0F4()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

unint64_t sub_10027B124()
{
  unint64_t result = qword_10166C020;
  if (!qword_10166C020)
  {
    sub_10001D4B0(255, (unint64_t *)&qword_1016376E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C020);
  }
  return result;
}

uint64_t sub_10027B18C(unsigned __int8 *a1)
{
  return sub_100276EE4(a1);
}

uint64_t sub_10027B194()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_10027B1A4(uint64_t a1)
{
  sub_100276F68(a1, *(unsigned char *)(v1 + 16));
}

void sub_10027B1BC()
{
  qword_10163FE90 = qword_10163FE98;
}

uint64_t sub_10027B1D0(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v3, v4);
  sub_10027D788();
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  if (!v1)
  {
    sub_1000BD078((uint64_t)v3, v4);
    sub_10006145C();
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
    sub_1000BD078((uint64_t)v3, v4);
    sub_10027D7DC();
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v3);
}

uint64_t sub_10027B308@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10027D3E0(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(void *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_10027B340(void *a1)
{
  return sub_10027B1D0(a1);
}

uint64_t sub_10027B360(char a1)
{
  switch(a1)
  {
    case 1:
      sub_10027E4C4();
      uint64_t v5 = CustomStringConvertible.typeDescription.getter();
      unint64_t v1 = 0x614D44496E6D662ELL;
      unint64_t v2 = 0xED00006465686374;
      break;
    case 2:
      _StringGuts.grow(_:)(18);
      sub_10027E4C4();
      uint64_t v3 = CustomStringConvertible.typeDescription.getter();
      swift_bridgeObjectRelease();
      uint64_t v5 = v3;
      unint64_t v2 = 0x80000001013F6E10;
      unint64_t v1 = 0xD000000000000010;
      break;
    case 3:
      sub_10027E4C4();
      uint64_t v5 = CustomStringConvertible.typeDescription.getter();
      unint64_t v1 = 0x6E776F6E6B6E752ELL;
      unint64_t v2 = 0xE800000000000000;
      break;
    default:
      sub_10027E4C4();
      uint64_t v5 = CustomStringConvertible.typeDescription.getter();
      unint64_t v1 = 0x72696150746F6E2ELL;
      unint64_t v2 = 0xEA00000000006465;
      break;
  }
  String.append(_:)(*(Swift::String *)&v1);
  return v5;
}

uint64_t sub_10027B4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10027BCD8(a1, a2, a3, (void (*)(void))sub_10027E0B8);
}

uint64_t sub_10027B528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10027BD74(a1, a2, a3, (void (*)(void))sub_10027E0B8);
}

uint64_t sub_10027B554()
{
  return sub_10027B360(*v0);
}

uint64_t sub_10027B55C(void *a1, uint64_t a2)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  uint64_t v19 = a2;
  swift_bridgeObjectRetain_n();
  sub_10027C9E4(&v19);
  if (v2) {
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v19 + 16);
  if (v4)
  {
    uint64_t v18 = a2;
    uint64_t v24 = swift_retain();
    uint64_t v5 = (unsigned char *)(v24 + 56);
    while (1)
    {
      uint64_t v6 = *((void *)v5 - 2);
      unint64_t v7 = *((void *)v5 - 1);
      char v9 = *v5;
      v5 += 32;
      char v8 = v9;
      switch(v7 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v6), v6))
          {
            __break(1u);
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
          uint64_t v10 = HIDWORD(v6) - (int)v6;
LABEL_9:
          sub_1000361E0(v6, v7);
LABEL_10:
          if (v10 != 20) {
            goto LABEL_19;
          }
          uint64_t v19 = v6;
          unint64_t v20 = v7;
          char v21 = v8;
          sub_1000BD078((uint64_t)v22, v23);
          sub_1000361E0(v6, v7);
          sub_10027DD30();
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
          sub_10001CFB8(v6, v7);
          sub_10001CFB8(v6, v7);
          if (!--v4)
          {
            swift_release_n();
            a2 = v18;
            goto LABEL_14;
          }
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v6 + 16);
          uint64_t v11 = *(void *)(v6 + 24);
          uint64_t v10 = v11 - v12;
          if (!__OFSUB__(v11, v12)) {
            goto LABEL_9;
          }
          goto LABEL_17;
        case 3uLL:
          goto LABEL_19;
        default:
          uint64_t v10 = BYTE6(v7);
          goto LABEL_10;
      }
    }
  }
  swift_release();
LABEL_14:
  uint64_t v13 = 4 - *(void *)(a2 + 16);
  if ((unsigned __int128)(v13 * (__int128)21) >> 64 != (21 * v13) >> 63)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    swift_release();
    __break(1u);
    JUMPOUT(0x10027B7CCLL);
  }
  uint64_t v19 = sub_10085E9A4(21 * v13);
  unint64_t v20 = v14;
  sub_10072AD40(&v19, 0);
  uint64_t v15 = v19;
  unint64_t v16 = v20;
  sub_1000BD078((uint64_t)v22, v23);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  sub_10001CFB8(v15, v16);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
}

uint64_t sub_10027B7DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _StringGuts.grow(_:)(48);
  sub_10027BC58();
  uint64_t v5 = CustomStringConvertible.typeDescription.getter();
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x3A44497472617020;
  v6._object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x4E6C616972657320;
  v8._object = (void *)0xEF203A7265626D75;
  String.append(_:)(v8);
  v9._countAndFlagsBits = Data.hexString.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x80000001013F6DF0;
  v10._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v10);
  v11._countAndFlagsBits = sub_10027BB64(a4);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v5;
}

void *sub_10027B950@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10027D830(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10027B97C(void *a1)
{
  return sub_10027B55C(a1, *v1);
}

Swift::Int sub_10027B998()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_100CCAD88((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_10027B9E0()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = (Swift::UInt8 *)(v1 + 56);
    do
    {
      uint64_t v4 = *((void *)v3 - 2);
      unint64_t v5 = *((void *)v3 - 1);
      Swift::UInt8 v6 = *(v3 - 24);
      Swift::UInt8 v7 = *v3;
      v3 += 32;
      Hasher._combine(_:)(v6);
      sub_1000361E0(v4, v5);
      Data.hash(into:)();
      Hasher._combine(_:)(v7);
      sub_10001CFB8(v4, v5);
      --v2;
    }
    while (v2);
  }
}

Swift::Int sub_10027BA74()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_100CCAD88((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_10027BAB8()
{
  uint64_t v4 = CustomStringConvertible.typeDescription.getter();
  v0._countAndFlagsBits = 8250;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_100EFD2C8(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10027BB58(uint64_t *a1, uint64_t *a2)
{
  return sub_100335C58(*a1, *a2);
}

uint64_t sub_10027BB64(char a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      sub_10027BDE4();
      uint64_t v4 = CustomStringConvertible.typeDescription.getter();
      uint64_t v1 = 0x6465726961702ELL;
      unint64_t v2 = 0xE700000000000000;
    }
    else
    {
      sub_10027BDE4();
      uint64_t v4 = CustomStringConvertible.typeDescription.getter();
      uint64_t v1 = 0x65726961706E752ELL;
      unint64_t v2 = 0xE900000000000064;
    }
  }
  else
  {
    sub_10027BDE4();
    uint64_t v4 = CustomStringConvertible.typeDescription.getter();
    uint64_t v1 = 0x6E776F6E6B6E752ELL;
    unint64_t v2 = 0xE800000000000000;
  }
  String.append(_:)(*(Swift::String *)&v1);
  return v4;
}

unint64_t sub_10027BC58()
{
  unint64_t result = qword_10163FEA0;
  if (!qword_10163FEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FEA0);
  }
  return result;
}

uint64_t sub_10027BCAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10027BCD8(a1, a2, a3, (void (*)(void))sub_10027C990);
}

uint64_t sub_10027BCD8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10027BD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10027BD74(a1, a2, a3, (void (*)(void))sub_10027C990);
}

uint64_t sub_10027BD74(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10027BDDC()
{
  return sub_10027BB64(*v0);
}

unint64_t sub_10027BDE4()
{
  unint64_t result = qword_10163FEA8;
  if (!qword_10163FEA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FEA8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10027BF04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus;
}

uint64_t destroy for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1)
{
  return sub_10001CFB8(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t initializeWithCopy for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_1000361E0(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_1000361E0(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  sub_10001CFB8(v6, v7);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10001CFB8(v4, v5);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload.PartStatus()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartStatus;
}

uint64_t destroy for MessagingAccount()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s12searchpartyd38VerifyFindMyNetworkIdResponseV2PayloadVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VerifyFindMyNetworkIdResponseV2Payload(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VerifyFindMyNetworkIdResponseV2Payload(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingAccount(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagingAccount(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus;
}

unint64_t sub_10027C254()
{
  unint64_t result = qword_10163FEB0;
  if (!qword_10163FEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FEB0);
  }
  return result;
}

unint64_t sub_10027C2A8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10027C2D8();
  unint64_t result = sub_10027C32C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10027C2D8()
{
  unint64_t result = qword_10163FEB8;
  if (!qword_10163FEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FEB8);
  }
  return result;
}

unint64_t sub_10027C32C()
{
  unint64_t result = qword_10163FEC0;
  if (!qword_10163FEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FEC0);
  }
  return result;
}

uint64_t sub_10027C380(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v3, v4);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v1)
  {
    sub_1000BD078((uint64_t)v3, v4);
    sub_10027E41C();
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v3);
}

uint64_t sub_10027C47C(uint64_t a1, uint64_t a2, char a3)
{
  _StringGuts.grow(_:)(37);
  sub_10027E470();
  uint64_t v4 = CustomStringConvertible.typeDescription.getter();
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x4E6C616972657320;
  v5._object = (void *)0xEF203A7265626D75;
  String.append(_:)(v5);
  v6._countAndFlagsBits = Data.hexString.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x80000001013F6DF0;
  v7._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v7);
  v8._countAndFlagsBits = sub_10027BB64(a3);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10027C590@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10027E10C(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_10027C5C0(void *a1)
{
  return sub_10027C380(a1);
}

Swift::Int sub_10027C5E0()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  Data.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10027C644()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 16);
  Data.hash(into:)();
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10027C67C()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  Data.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10027C6DC()
{
  return sub_10027C47C(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_10027C6E8(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  return _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & (v2 == v3);
}

Swift::Int sub_10027C72C()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[24];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Data.hash(into:)();
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10027C7A8()
{
  Swift::UInt8 v1 = v0[24];
  Hasher._combine(_:)(*v0);
  Data.hash(into:)();
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10027C804()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[24];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Data.hash(into:)();
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10027C87C()
{
  return sub_10027B7DC(*v0, *((void *)v0 + 1), *((void *)v0 + 2), v0[24]);
}

uint64_t sub_10027C88C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v2 = a2[24];
  int v3 = a1[24];
  return _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2)) & (v3 == v2);
}

unint64_t sub_10027C8E4()
{
  unint64_t result = qword_10163FEC8;
  if (!qword_10163FEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FEC8);
  }
  return result;
}

unint64_t sub_10027C93C()
{
  unint64_t result = qword_10163FED0;
  if (!qword_10163FED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FED0);
  }
  return result;
}

unint64_t sub_10027C990()
{
  unint64_t result = qword_10163FED8;
  if (!qword_10163FED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FED8);
  }
  return result;
}

Swift::Int sub_10027C9E4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100B7369C(v2);
  }
  int v3 = *(unsigned __int8 **)(v2 + 16);
  v5[0] = (unsigned __int8 *)(v2 + 32);
  v5[1] = v3;
  Swift::Int result = sub_10027CA50(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_10027CA50(unsigned __int8 **a1)
{
  Swift::Int v3 = (Swift::Int)a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_141;
    }
    if ((unint64_t)v3 >= 2)
    {
      unint64_t v89 = *a1;
      uint64_t v90 = -1;
      uint64_t v91 = 1;
      uint64_t v92 = *a1;
      do
      {
        uint64_t v93 = v90;
        uint64_t v94 = v92;
        do
        {
          unsigned int v95 = v94[32];
          if (v95 >= *v94) {
            break;
          }
          if (!v89) {
            goto LABEL_145;
          }
          unsigned __int8 v96 = v94[56];
          long long v97 = *(_OWORD *)(v94 + 40);
          long long v98 = *((_OWORD *)v94 + 1);
          *((_OWORD *)v94 + 2) = *(_OWORD *)v94;
          *((_OWORD *)v94 + 3) = v98;
          *uint64_t v94 = v95;
          *(_OWORD *)(v94 + 8) = v97;
          v94[24] = v96;
          v94 -= 32;
        }
        while (!__CFADD__(v93++, 1));
        ++v91;
        v92 += 32;
        --v90;
      }
      while (v91 != v3);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_150;
  }
  Swift::Int v6 = result;
  uint64_t v109 = (uint64_t *)a1;
  if (v3 < 2)
  {
    Swift::String v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      uint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      uint64_t v100 = v12;
      uint64_t v111 = v9;
      if (v13 >= 2)
      {
        uint64_t v101 = *v109;
        do
        {
          unint64_t v102 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_136;
          }
          if (!v101) {
            goto LABEL_149;
          }
          uint64_t v103 = v100;
          uint64_t v104 = *(void *)&v100[16 * v102 + 32];
          uint64_t v105 = *(void *)&v100[16 * v13 + 24];
          sub_10027D160((unsigned __int8 *)(v101 + 32 * v104), (unsigned __int8 *)(v101 + 32 * *(void *)&v100[16 * v13 + 16]), v101 + 32 * v105, __dst);
          if (v1) {
            break;
          }
          if (v105 < v104) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v103 = sub_100B73584((uint64_t)v103);
          }
          if (v102 >= *((void *)v103 + 2)) {
            goto LABEL_138;
          }
          uint64_t v106 = &v103[16 * v102 + 32];
          *(void *)uint64_t v106 = v104;
          *((void *)v106 + 1) = v105;
          unint64_t v107 = *((void *)v103 + 2);
          if (v13 > v107) {
            goto LABEL_139;
          }
          memmove(&v103[16 * v13 + 16], &v103[16 * v13 + 32], 16 * (v107 - v13));
          uint64_t v100 = v103;
          *((void *)v103 + 2) = v107 - 1;
          unint64_t v13 = v107 - 1;
        }
        while (v107 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      v111[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v111 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v111 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  Swift::String v11 = *a1;
  uint64_t v110 = (uint64_t)(*a1 + 64);
  uint64_t v108 = (uint64_t)(*a1 + 24);
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v112 = v6;
  Swift::Int v113 = v3;
  uint64_t v114 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      unsigned int v15 = v11[32 * v10];
      uint64_t v16 = 32 * v14;
      unsigned int v17 = v11[32 * v14];
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v18 = (unsigned __int8 *)(v110 + 32 * v14);
        while (v15 < v17 != *v18 >= *(v18 - 32))
        {
          v18 += 32;
          if (v3 == ++v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14) {
          goto LABEL_142;
        }
        if (v14 < v10)
        {
          uint64_t v19 = 32 * v10 - 32;
          Swift::Int v20 = v10;
          Swift::Int v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11) {
                goto LABEL_148;
              }
              uint64_t v24 = &v11[v16];
              uint64_t v25 = &v11[v19];
              unsigned __int8 v26 = v11[v16];
              long long v27 = *(_OWORD *)&v11[v16 + 8];
              unsigned __int8 v28 = v11[v16 + 24];
              if (v16 != v19 || v24 >= v25 + 32)
              {
                long long v22 = *((_OWORD *)v25 + 1);
                *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
                *((_OWORD *)v24 + 1) = v22;
              }
              uint64_t v23 = &v11[v19];
              *uint64_t v23 = v26;
              *(_OWORD *)(v23 + 8) = v27;
              v23[24] = v28;
            }
            ++v21;
            v19 -= 32;
            v16 += 32;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_50;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_140;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_50;
    }
    Swift::Int v29 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_143;
    }
    if (v29 >= v3) {
      Swift::Int v29 = v3;
    }
    if (v29 < v14) {
      break;
    }
    if (v10 != v29)
    {
      uint64_t v30 = v108 + 32 * v10;
      do
      {
        Swift::Int v31 = v14;
        uint64_t v32 = v30;
        do
        {
          id v33 = (_OWORD *)(v32 - 24);
          unsigned int v34 = *(unsigned __int8 *)(v32 - 24);
          if (v34 >= *(unsigned __int8 *)(v32 - 56)) {
            break;
          }
          if (!v11) {
            goto LABEL_146;
          }
          long long v36 = *(_OWORD *)(v32 - 56);
          long long v35 = *(_OWORD *)(v32 - 40);
          *(unsigned char *)(v32 - 32) = *(unsigned char *)v32;
          v32 -= 32;
          long long v37 = *(_OWORD *)(v32 + 16);
          *id v33 = v36;
          v33[1] = v35;
          *(unsigned char *)(v32 - 24) = v34;
          *(_OWORD *)(v32 - 16) = v37;
          ++v31;
        }
        while (v10 != v31);
        ++v10;
        v30 += 32;
      }
      while (v10 != v29);
      Swift::Int v10 = v29;
    }
LABEL_50:
    if (v10 < v14) {
      goto LABEL_135;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = sub_100B729CC(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v39 = *((void *)v12 + 2);
    unint64_t v38 = *((void *)v12 + 3);
    unint64_t v13 = v39 + 1;
    Swift::String v11 = v114;
    if (v39 >= v38 >> 1)
    {
      unint64_t v88 = sub_100B729CC((char *)(v38 > 1), v39 + 1, 1, v12);
      Swift::String v11 = v114;
      uint64_t v12 = v88;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v40 = v12 + 32;
    uint64_t v41 = &v12[16 * v39 + 32];
    *(void *)uint64_t v41 = v14;
    *((void *)v41 + 1) = v10;
    if (v39)
    {
      while (1)
      {
        unint64_t v42 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v47 = &v40[16 * v13];
          uint64_t v48 = *((void *)v47 - 8);
          uint64_t v49 = *((void *)v47 - 7);
          BOOL v53 = __OFSUB__(v49, v48);
          uint64_t v50 = v49 - v48;
          if (v53) {
            goto LABEL_124;
          }
          uint64_t v52 = *((void *)v47 - 6);
          uint64_t v51 = *((void *)v47 - 5);
          BOOL v53 = __OFSUB__(v51, v52);
          uint64_t v45 = v51 - v52;
          char v46 = v53;
          if (v53) {
            goto LABEL_125;
          }
          unint64_t v54 = v13 - 2;
          uint64_t v55 = &v40[16 * v13 - 32];
          uint64_t v57 = *(void *)v55;
          uint64_t v56 = *((void *)v55 + 1);
          BOOL v53 = __OFSUB__(v56, v57);
          uint64_t v58 = v56 - v57;
          if (v53) {
            goto LABEL_127;
          }
          BOOL v53 = __OFADD__(v45, v58);
          uint64_t v59 = v45 + v58;
          if (v53) {
            goto LABEL_130;
          }
          if (v59 >= v50)
          {
            uint64_t v77 = &v40[16 * v42];
            uint64_t v79 = *(void *)v77;
            uint64_t v78 = *((void *)v77 + 1);
            BOOL v53 = __OFSUB__(v78, v79);
            uint64_t v80 = v78 - v79;
            if (v53) {
              goto LABEL_134;
            }
            BOOL v70 = v45 < v80;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v71 = *((void *)v12 + 4);
            uint64_t v72 = *((void *)v12 + 5);
            BOOL v53 = __OFSUB__(v72, v71);
            uint64_t v64 = v72 - v71;
            char v65 = v53;
            goto LABEL_81;
          }
          uint64_t v44 = *((void *)v12 + 4);
          uint64_t v43 = *((void *)v12 + 5);
          BOOL v53 = __OFSUB__(v43, v44);
          uint64_t v45 = v43 - v44;
          char v46 = v53;
        }
        if (v46) {
          goto LABEL_126;
        }
        unint64_t v54 = v13 - 2;
        uint64_t v60 = &v40[16 * v13 - 32];
        uint64_t v62 = *(void *)v60;
        uint64_t v61 = *((void *)v60 + 1);
        BOOL v63 = __OFSUB__(v61, v62);
        uint64_t v64 = v61 - v62;
        char v65 = v63;
        if (v63) {
          goto LABEL_129;
        }
        int v66 = &v40[16 * v42];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v53 = __OFSUB__(v67, v68);
        uint64_t v69 = v67 - v68;
        if (v53) {
          goto LABEL_132;
        }
        if (__OFADD__(v64, v69)) {
          goto LABEL_133;
        }
        if (v64 + v69 >= v45)
        {
          BOOL v70 = v45 < v69;
LABEL_87:
          if (v70) {
            unint64_t v42 = v54;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v65) {
          goto LABEL_128;
        }
        size_t v73 = &v40[16 * v42];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        BOOL v53 = __OFSUB__(v74, v75);
        uint64_t v76 = v74 - v75;
        if (v53) {
          goto LABEL_131;
        }
        if (v76 < v64) {
          goto LABEL_15;
        }
LABEL_89:
        unint64_t v81 = v42 - 1;
        if (v42 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11) {
          goto LABEL_147;
        }
        uint64_t v82 = v12;
        uint64_t v83 = &v40[16 * v81];
        uint64_t v84 = *(void *)v83;
        uint64_t v85 = &v40[16 * v42];
        uint64_t v86 = *((void *)v85 + 1);
        sub_10027D160(&v11[32 * *(void *)v83], &v11[32 * *(void *)v85], (unint64_t)&v11[32 * v86], __dst);
        if (v1) {
          goto LABEL_97;
        }
        if (v86 < v84) {
          goto LABEL_121;
        }
        if (v42 > *((void *)v82 + 2)) {
          goto LABEL_122;
        }
        *(void *)uint64_t v83 = v84;
        *(void *)&v40[16 * v81 + 8] = v86;
        unint64_t v87 = *((void *)v82 + 2);
        if (v42 >= v87) {
          goto LABEL_123;
        }
        uint64_t v12 = v82;
        unint64_t v13 = v87 - 1;
        memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
        *((void *)v82 + 2) = v87 - 1;
        Swift::String v11 = v114;
        if (v87 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v112;
    Swift::Int v3 = v113;
    if (v10 >= v113)
    {
      Swift::String v9 = v111;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10027D160(unsigned __int8 *__src, unsigned __int8 *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = (unsigned __int8 *)__dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 31;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 31;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 5;
  Swift::Int v29 = __dst;
  uint64_t v30 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -31)
    {
      uint64_t v19 = 32 * v13;
      if (__dst != (char *)a2 || &a2[v19] <= (unsigned __int8 *)__dst) {
        memmove(__dst, a2, 32 * v13);
      }
      Swift::Int v20 = &v4[v19];
      unsigned __int8 v28 = &v4[v19];
      uint64_t v30 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 32) <= 0xFFFFFFFFFFFFFFC0)
      {
        Swift::Int v21 = (unsigned __int8 *)(a3 - 32);
        long long v22 = v6;
        while (1)
        {
          uint64_t v23 = v21 + 32;
          unsigned int v24 = *(v22 - 32);
          v22 -= 32;
          if (*(v20 - 32) >= v24)
          {
            unsigned __int8 v28 = v20 - 32;
            if (v23 < v20 || v21 >= v20 || v23 != v20)
            {
              long long v26 = *((_OWORD *)v20 - 1);
              *(_OWORD *)Swift::Int v21 = *((_OWORD *)v20 - 2);
              *((_OWORD *)v21 + 1) = v26;
            }
            long long v22 = v6;
            v20 -= 32;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v23 != v6 || v21 >= v6)
            {
              long long v25 = *((_OWORD *)v22 + 1);
              *(_OWORD *)Swift::Int v21 = *(_OWORD *)v22;
              *((_OWORD *)v21 + 1) = v25;
            }
            uint64_t v30 = v22;
            if (v22 <= v7) {
              goto LABEL_42;
            }
          }
          v21 -= 32;
          Swift::Int v6 = v22;
          if (v20 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -31)
  {
    size_t v14 = 32 * v10;
    if (__dst != (char *)__src || &__src[v14] <= (unsigned __int8 *)__dst) {
      memmove(__dst, __src, v14);
    }
    unsigned int v15 = &v4[v14];
    unsigned __int8 v28 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 32) <= 0xFFFFFFFFFFFFFFC0)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
          {
            long long v18 = *((_OWORD *)v4 + 1);
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
            *((_OWORD *)v7 + 1) = v18;
          }
          v4 += 32;
          Swift::Int v29 = (char *)v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 32;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
          {
            long long v17 = *((_OWORD *)v6 + 1);
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
            *((_OWORD *)v7 + 1) = v17;
          }
        }
        v7 += 32;
        if (v4 >= v15) {
          break;
        }
        Swift::Int v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      uint64_t v30 = v7;
    }
LABEL_42:
    sub_100B72D34(&v30, &v29, &v28);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10027D3E0(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v12, v13);
  sub_10006145C();
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)();
  if (v1)
  {
LABEL_12:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v12);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  int v3 = v14;
  if (v14 >= 4u)
  {
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F098);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      int64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)int64_t v9 = 16777472;
      LOBYTE(v14) = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Invalid findMyNetworkIdStatus: %hhu", v9, 5u);
      swift_slowDealloc();
    }

    uint64_t v10 = type metadata accessor for BinaryEncodingError();
    sub_10027DCE8((unint64_t *)&qword_101639620, (void (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104))(v11, enum case for BinaryEncodingError.encodingError(_:), v10);
    swift_willThrow();
    goto LABEL_12;
  }
  sub_1000BD078((uint64_t)v12, v13);
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)();
  unsigned int v4 = v14;
  if (qword_101636928 != -1) {
    swift_once();
  }
  sub_1000BD078((uint64_t)v12, v13);
  dispatch thunk of BinaryDecodingContaining.decode(length:)();
  sub_10027D734();
  uint64_t result = BinaryDecodable.init(data:)();
  if (v4 > 4)
  {
    __break(1u);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    return v3 | (v4 << 8);
  }
  return result;
}

unint64_t sub_10027D734()
{
  unint64_t result = qword_10163FEE0;
  if (!qword_10163FEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FEE0);
  }
  return result;
}

unint64_t sub_10027D788()
{
  unint64_t result = qword_10163FEE8;
  if (!qword_10163FEE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FEE8);
  }
  return result;
}

unint64_t sub_10027D7DC()
{
  unint64_t result = qword_10163FEF0;
  if (!qword_10163FEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FEF0);
  }
  return result;
}

void *sub_10027D830(void *a1)
{
  uint64_t v3 = type metadata accessor for Data.Iterator();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BinaryDecoder();
  uint64_t v23 = *(void *)(v7 - 8);
  uint64_t v24 = v7;
  __chkstk_darwin(v7);
  int64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1[3];
  long long v25 = a1;
  sub_10001CD44(a1, v10);
  dispatch thunk of BinaryDecoding.container()();
  long long v27 = v9;
  BinaryDecoder.init()();
  uint64_t v11 = 0;
  long long v26 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v30 = _swiftEmptyArrayStorage;
  do
  {
    sub_1000BD078((uint64_t)v34, v35);
    uint64_t v12 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    if (v1)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v24);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v34);
      return (void *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
    }
    uint64_t v14 = v12;
    unint64_t v15 = v13;
    sub_10027DC94();
    BinaryDecoder.decode<A>(_:from:)();
    uint64_t v29 = v11;
    uint64_t v36 = v11 + 1;
    uint64_t v17 = v31;
    unint64_t v16 = v32;
    int v28 = v33;
    switch(v32 >> 62)
    {
      case 1uLL:
      case 2uLL:
        sub_1000361E0(v31, v32);
        sub_1000361E0(v17, v16);
        sub_1000361E0(v17, v16);
        break;
      default:
        break;
    }
    Data.Iterator.init(_:at:)();
    sub_10001CFB8(v17, v16);
    sub_10027DCE8(&qword_10163FF00, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
    do
    {
      dispatch thunk of IteratorProtocol.next()();
      if ((v31 & 0x100) != 0)
      {
        (*v26)(v6, v3);
        sub_10001CFB8(v17, v16);
        goto LABEL_3;
      }
    }
    while (!(_BYTE)v31);
    (*v26)(v6, v3);
    sub_10001CFB8(v17, v16);
    sub_1000361E0(v17, v16);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      long long v18 = v30;
    }
    else {
      long long v18 = sub_100A6FDA8(0, v30[2] + 1, 1, v30);
    }
    unint64_t v20 = v18[2];
    unint64_t v19 = v18[3];
    if (v20 >= v19 >> 1) {
      long long v18 = sub_100A6FDA8((void *)(v19 > 1), v20 + 1, 1, v18);
    }
    void v18[2] = v20 + 1;
    uint64_t v30 = v18;
    Swift::Int v21 = &v18[4 * v20];
    *((unsigned char *)v21 + 32) = v29;
    v21[5] = v17;
    v21[6] = v16;
    *((unsigned char *)v21 + 56) = v28;
LABEL_3:
    sub_10001CFB8(v14, v15);
    sub_10001CFB8(v17, v16);
    uint64_t v11 = v36;
  }
  while (v36 != 4);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v24);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v34);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  return v30;
}

unint64_t sub_10027DC94()
{
  unint64_t result = qword_10163FEF8;
  if (!qword_10163FEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FEF8);
  }
  return result;
}

uint64_t sub_10027DCE8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10027DD30()
{
  unint64_t result = qword_10163FF08;
  if (!qword_10163FF08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FF08);
  }
  return result;
}

uint64_t sub_10027DD88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10001CFB8(v6, v7);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus;
}

unsigned char *storeEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10027DFD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus;
}

unint64_t sub_10027E00C()
{
  unint64_t result = qword_10163FF10;
  if (!qword_10163FF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FF10);
  }
  return result;
}

unint64_t sub_10027E064()
{
  unint64_t result = qword_10163FF18;
  if (!qword_10163FF18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FF18);
  }
  return result;
}

unint64_t sub_10027E0B8()
{
  unint64_t result = qword_10163FF20;
  if (!qword_10163FF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FF20);
  }
  return result;
}

uint64_t sub_10027E10C(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v3 = v20;
  sub_1000BD078((uint64_t)v19, v20);
  uint64_t v4 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v1) {
    goto LABEL_10;
  }
  uint64_t v3 = v4;
  unint64_t v6 = v5;
  sub_1000BD078((uint64_t)v19, v20);
  sub_10006145C();
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)();
  if (v18 < 3u)
  {
    switch(v6 >> 62)
    {
      case 1uLL:
        LODWORD(v7) = HIDWORD(v3) - v3;
        if (__OFSUB__(HIDWORD(v3), v3))
        {
          __break(1u);
LABEL_17:
          __break(1u);
        }
        else
        {
          uint64_t v7 = (int)v7;
LABEL_14:
          if (v7 == 20) {
            goto LABEL_10;
          }
        }
LABEL_18:
        __break(1u);
        JUMPOUT(0x10027E40CLL);
      case 2uLL:
        uint64_t v16 = *(void *)(v3 + 16);
        uint64_t v15 = *(void *)(v3 + 24);
        BOOL v17 = __OFSUB__(v15, v16);
        uint64_t v7 = v15 - v16;
        if (!v17) {
          goto LABEL_14;
        }
        goto LABEL_17;
      case 3uLL:
        goto LABEL_18;
      default:
        uint64_t v7 = BYTE6(v6);
        goto LABEL_14;
    }
  }
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170F098);
  int64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 16777472;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Invalid PartPairingStatus: %hhu", v11, 5u);
    swift_slowDealloc();
  }

  uint64_t v12 = type metadata accessor for BinaryEncodingError();
  sub_10027DCE8((unint64_t *)&qword_101639620, (void (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104))(v13, enum case for BinaryEncodingError.encodingError(_:), v12);
  swift_willThrow();
  sub_10001CFB8(v3, v6);
LABEL_10:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v3;
}

unint64_t sub_10027E41C()
{
  unint64_t result = qword_10163FF28;
  if (!qword_10163FF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FF28);
  }
  return result;
}

unint64_t sub_10027E470()
{
  unint64_t result = qword_10163FF30;
  if (!qword_10163FF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163FF30);
  }
  return result;
}

unint64_t sub_10027E4C4()
{
  unint64_t result = qword_10163FF38;
  if (!qword_10163FF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10163FF38);
  }
  return result;
}

uint64_t sub_10027E518(uint64_t a1, uint64_t a2)
{
  static os_log_type_t.default.getter();
  if (qword_101637230 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v6 = String.init<A>(describing:)();
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v9 = sub_10000B4CC();
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  *(void *)(v5 + 96) = &type metadata for String;
  *(void *)(v5 + 104) = v9;
  *(void *)(v5 + 64) = v9;
  *(void *)(v5 + 72) = 0xD00000000000002BLL;
  *(void *)(v5 + 80) = 0x80000001013F74D0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001CD44(&v2[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(void *)&v2[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
  os_log_type_t v10 = (void *)swift_allocObject();
  v10[2] = v2;
  v10[3] = a1;
  v10[4] = a2;
  uint64_t v11 = v2;
  swift_retain();
  sub_10027EF84((uint64_t)sub_100289694, (uint64_t)v10);
  return swift_release();
}

uint64_t sub_10027E6D4(char a1, char *a2, uint64_t (*a3)(void *))
{
  if ((a1 & 1) == 0) {
    return a3(_swiftEmptyArrayStorage);
  }
  sub_10001CD44(&a2[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(void *)&a2[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
  uint64_t v5 = sub_10027F8E8();
  uint64_t v6 = a2;
  unint64_t v7 = (unint64_t)sub_100286E04((uint64_t)v5, (uint64_t)v6);
  swift_bridgeObjectRelease();

  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101342130;
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *(void *)(v8 + 56) = &type metadata for Int;
  *(void *)(v8 + 64) = &protocol witness table for Int;
  *(void *)(v8 + 32) = v9;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  a3((void *)v7);
  return swift_bridgeObjectRelease();
}

void sub_10027E918(uint64_t a1, uint64_t a2)
{
  sub_10001D4B0(0, (unint64_t *)&unk_10164DC30);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

uint64_t sub_10027EC9C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v8 = String.init<A>(describing:)();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v11 = sub_10000B4CC();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v11;
  *(void *)(v7 + 64) = v11;
  *(void *)(v7 + 72) = 0xD00000000000002BLL;
  *(void *)(v7 + 80) = 0x80000001013F6E80;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001CD44((void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_100285CCC(a1, a2, a3);
}

uint64_t sub_10027EF4C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10027EF84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  sub_10000588C(&qword_10163FFB0);
  OS_dispatch_queue.sync<A>(execute:)();
  size_t v9 = sub_100B752E8(v13[1]);
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  unint64_t v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v9;
  v11[5] = v3;
  v11[6] = a1;
  v11[7] = a2;
  swift_retain();
  swift_retain();
  sub_1008F5E44((uint64_t)v8, (uint64_t)&unk_10163FFC0, (uint64_t)v11);
  return swift_release();
}

uint64_t sub_10027F134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v7[6] = *(void *)(type metadata accessor for BeaconObservation() - 8);
  v7[7] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v7[8] = v8;
  v7[9] = *(void *)(v8 - 8);
  v7[10] = swift_task_alloc();
  return _swift_task_switch(sub_10027F250, 0, 0);
}

uint64_t sub_10027F250()
{
  uint64_t v1 = v0[2];
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v4 = v0[9];
    uint64_t v5 = v0[6];
    unsigned __int8 v18 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v2, 0);
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v17 = *(void *)(v5 + 72);
    uint64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v7 = v0[10];
      uint64_t v9 = v0[7];
      uint64_t v8 = v0[8];
      sub_1002892E4(v6, v9, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, v9, v8);
      sub_100289434(v9, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v3[2] + 1, 1);
        uint64_t v3 = v18;
      }
      unint64_t v11 = v3[2];
      unint64_t v10 = v3[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7034(v10 > 1, v11 + 1, 1);
        uint64_t v3 = v18;
      }
      uint64_t v12 = v0[10];
      uint64_t v13 = v0[8];
      v3[2] = v11 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))((unint64_t)v3+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v11, v12, v13);
      unsigned __int8 v18 = v3;
      v6 += v17;
      --v2;
    }
    while (v2);
  }
  uint64_t v14 = sub_101158244((uint64_t)v3);
  v0[11] = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)swift_task_alloc();
  v0[12] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_10027F488;
  return sub_1001CE0DC(v14);
}

uint64_t sub_10027F488(uint64_t a1)
{
  *(void *)(*(void *)v1 + 104) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10027F5A8, 0, 0);
}

uint64_t sub_10027F5A8()
{
  uint64_t v1 = *(void *)(v0[13] + 16);
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v3 = v0[4];
    uint64_t v2 = v0[5];
    uint64_t v4 = swift_allocObject();
    v0[14] = v4;
    *(void *)(v4 + 16) = v3;
    *(void *)(v4 + 24) = v2;
    swift_retain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[15] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10027F764;
    return unsafeBlocking<A>(_:)(v5, sub_100289818, v4, (char *)&type metadata for () + 8);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    uint64_t v6 = (void (*)(void))v0[4];
    os_log(_:dso:log:_:_:)();
    v6(0);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_10027F764()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10027F87C, 0, 0);
}

uint64_t sub_10027F87C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void *sub_10027F8E8()
{
  uint64_t v0 = sub_1001CC120();
  swift_retain();
  uint64_t v1 = sub_1006AE11C(v0);
  swift_bridgeObjectRelease();
  swift_release();
  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101342130;
  uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v5 = v4;
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = sub_10000B4CC();
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = v5;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10027FA44(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v34 = a3;
  int v32 = a2;
  uint64_t v41 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v40 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v42 = *(void *)(v10 - 8);
  uint64_t v43 = v10;
  __chkstk_darwin(v10);
  unsigned __int8 v33 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = *(void *)(v7 + 48);
  uint64_t v31 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = v16 + v14;
  unint64_t v18 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  unint64_t v21 = v18 + v20;
  *(void *)(v20 + 16) = v7;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v20 + v16, v15, v12);
  *(unsigned char *)(v20 + v17) = v32;
  uint64_t v22 = v35;
  *(void *)(v21 + 8) = v34;
  *(void *)(v21 + 16) = v22;
  uint64_t v23 = v37;
  *(void *)(v20 + v19) = v36;
  uint64_t v24 = (void *)(v20 + ((v19 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v25 = v38;
  *uint64_t v24 = v23;
  v24[1] = v25;
  aBlock[4] = sub_10028779C;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  void aBlock[3] = &unk_1015B6E18;
  long long v26 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_retain();
  long long v27 = v33;
  static DispatchQoS.unspecified.getter();
  uint64_t v45 = _swiftEmptyArrayStorage;
  sub_100289604((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_10002FE84();
  uint64_t v29 = v40;
  uint64_t v28 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v29, v28);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v27, v43);
  return swift_release();
}

uint64_t sub_10027FE20(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v14 - 8);
  uint64_t v31 = v14;
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a2) = sub_1002801D0(a2, a3, a4, v26, v27);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchQoS.QoSClass.default(_:), v17);
  unint64_t v21 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = v29;
  *(void *)(v22 + 16) = v28;
  *(void *)(v22 + 24) = v23;
  *(unsigned char *)(v22 + 32) = a2 & 1;
  aBlock[4] = sub_10028789C;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  void aBlock[3] = &unk_1015B6E68;
  uint64_t v24 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unsigned __int8 v33 = _swiftEmptyArrayStorage;
  sub_100289604((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_10002FE84();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v31);
  return swift_release();
}

uint64_t sub_1002801D0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v113 = a5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v112 = v12;
  uint64_t v13 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v110 = *(void *)(v14 - 8);
  uint64_t v111 = v14;
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100ACCD98(a1, (uint64_t)&v114);
  if (v115)
  {
    uint64_t v103 = v16;
    uint64_t v106 = v13;
    uint64_t v107 = v11;
    uint64_t v108 = v10;
    uint64_t v104 = a4;
    uint64_t v105 = (char *)a3;
    uint64_t v109 = v5;
    sub_10001CEB0(&v114, (uint64_t)v120);
    static os_log_type_t.default.getter();
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_101347BA0;
    uint64_t v18 = UUID.uuidString.getter();
    uint64_t v20 = v19;
    *(void *)(v17 + 56) = &type metadata for String;
    unint64_t v21 = sub_10000B4CC();
    *(void *)(v17 + 64) = v21;
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v20;
    unint64_t v22 = sub_10096A84C(a2);
    *(void *)(v17 + 96) = &type metadata for String;
    *(void *)(v17 + 104) = v21;
    *(void *)(v17 + 72) = v22;
    *(void *)(v17 + 80) = v23;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (qword_101636CB8 != -1) {
      swift_once();
    }
    uint64_t v24 = qword_10170E330;
    sub_100287A28(qword_10170E330, a1, a2, v113);
    switch(a2)
    {
      case 6:
        type metadata accessor for Transaction();
        uint64_t v26 = v107;
        uint64_t v25 = v108;
        uint64_t v27 = v106;
        (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v106, a1, v108);
        unint64_t v28 = (*(unsigned __int8 *)(v26 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
        uint64_t v29 = swift_allocObject();
        *(void *)(v29 + 16) = v109;
        (*(void (**)(unint64_t, char *, uint64_t))(v26 + 32))(v29 + v28, v27, v25);
        swift_retain();
        static Transaction.asyncTask(name:block:)();
        goto LABEL_32;
      case 7:
        sub_10001D010((uint64_t)v120, (uint64_t)&v114);
        if (qword_101636F28 != -1) {
          swift_once();
        }
        uint64_t v119 = qword_10170E9C0;
        uint64_t v117 = 0;
        uint64_t v118 = 0;
        uint64_t v35 = self;
        swift_retain();
        id v36 = [v35 sharedInstance];
        unsigned int v37 = [v36 isInternalBuild];

        uint64_t v38 = v104;
        uint64_t v39 = v103;
        if (v37) {
          sub_100A6AB04(a1);
        }
        sub_100288B98((uint64_t)&v114);
        uint64_t v40 = static DispatchWorkItemFlags.barrier.getter();
        __chkstk_darwin(v40);
        *(&v103 - 4) = (char *)v24;
        *(&v103 - 3) = (char *)a1;
        *(&v103 - 2) = (char *)sub_100280FE4;
        *(&v103 - 1) = 0;
        OS_dispatch_queue.sync<A>(flags:execute:)();
        (*(void (**)(char *, uint64_t))(v110 + 8))(v39, v111);
        sub_10001D010((uint64_t)v120, (uint64_t)&v114);
        uint64_t v41 = v109;
        if (v38)
        {
          uint64_t v113 = (uint64_t)v105;
          uint64_t v42 = v38;
        }
        else
        {
          uint64_t v78 = v115;
          uint64_t v79 = v116;
          sub_10001CD44(&v114, v115);
          uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 24))(v78, v79);
          uint64_t v42 = v80;
        }
        swift_bridgeObjectRetain();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v114);
        type metadata accessor for Transaction();
        uint64_t v81 = v107;
        uint64_t v82 = v106;
        uint64_t v83 = a1;
        uint64_t v84 = v108;
        (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v106, v83, v108);
        unint64_t v85 = (*(unsigned __int8 *)(v81 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
        unint64_t v86 = (v112 + v85 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v87 = swift_allocObject();
        *(void *)(v87 + 16) = v41;
        (*(void (**)(unint64_t, char *, uint64_t))(v81 + 32))(v87 + v85, v82, v84);
        unint64_t v88 = (void *)(v87 + v86);
        *unint64_t v88 = v113;
        v88[1] = v42;
        swift_retain();
        swift_bridgeObjectRetain();
        static Transaction.asyncTask(name:block:)();
        swift_bridgeObjectRelease();
        swift_release();
        if (!v38)
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
          goto LABEL_11;
        }
        LOBYTE(v34) = sub_100280FE8((uint64_t)v105, v38, (uint64_t)v120);
LABEL_29:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
        break;
      case 8:
        static os_log_type_t.default.getter();
        uint64_t v43 = swift_allocObject();
        *(_OWORD *)(v43 + 16) = xmmword_101347500;
        uint64_t v45 = v121;
        uint64_t v44 = v122;
        sub_10001CD44(v120, v121);
        char v46 = v106;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v44 + 8) + 8) + 32))(v45);
        uint64_t v47 = UUID.uuidString.getter();
        uint64_t v49 = v48;
        (*(void (**)(char *, uint64_t))(v107 + 8))(v46, v108);
        *(void *)(v43 + 56) = &type metadata for String;
        *(void *)(v43 + 64) = v21;
        *(void *)(v43 + 32) = v47;
        *(void *)(v43 + 40) = v49;
        uint64_t v50 = v121;
        uint64_t v51 = v122;
        sub_10001CD44(v120, v121);
        uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 24))(v50, v51);
        *(void *)(v43 + 96) = &type metadata for String;
        *(void *)(v43 + 104) = v21;
        *(void *)(v43 + 72) = v52;
        *(void *)(v43 + 80) = v53;
        *(void *)&long long v114 = v113;
        swift_errorRetain();
        sub_10000588C((uint64_t *)&unk_101638EB0);
        uint64_t v54 = String.init<A>(describing:)();
        *(void *)(v43 + 136) = &type metadata for String;
        *(void *)(v43 + 144) = v21;
        *(void *)(v43 + 112) = v54;
        *(void *)(v43 + 120) = v55;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v56 = qword_10170E330;
        uint64_t v57 = v103;
        uint64_t v58 = static DispatchWorkItemFlags.barrier.getter();
        __chkstk_darwin(v58);
        *(&v103 - 4) = (char *)v56;
        *(&v103 - 3) = (char *)a1;
        *(&v103 - 2) = (char *)sub_100280FE4;
        *(&v103 - 1) = 0;
        OS_dispatch_queue.sync<A>(flags:execute:)();
        (*(void (**)(char *, uint64_t))(v110 + 8))(v57, v111);
        sub_10001D010((uint64_t)v120, (uint64_t)&v114);
        if (v104)
        {
          uint64_t v59 = v104;
          uint64_t v60 = v109;
          uint64_t v61 = (uint64_t)v105;
        }
        else
        {
          uint64_t v89 = v115;
          uint64_t v90 = v116;
          sub_10001CD44(&v114, v115);
          uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 24))(v89, v90);
          uint64_t v59 = v91;
          uint64_t v60 = v109;
        }
        swift_bridgeObjectRetain();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v114);
        uint64_t v111 = type metadata accessor for Transaction();
        uint64_t v92 = v107;
        uint64_t v93 = v106;
        uint64_t v94 = a1;
        uint64_t v95 = v108;
        (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v106, v94, v108);
        unint64_t v96 = (*(unsigned __int8 *)(v92 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
        unint64_t v97 = (v96 + v112 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v98 = (v96 + v112 + 31) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v99 = swift_allocObject();
        *(void *)(v99 + 16) = v60;
        (*(void (**)(unint64_t, char *, uint64_t))(v92 + 32))(v99 + v96, v93, v95);
        unint64_t v100 = v99 + v97;
        *(void *)unint64_t v100 = v61;
        *(void *)(v100 + 8) = v59;
        *(unsigned char *)(v100 + 16) = 0;
        *(void *)(v99 + v98) = v113;
        swift_retain();
        swift_errorRetain();
        swift_bridgeObjectRetain();
        static Transaction.asyncTask(name:block:)();
        swift_bridgeObjectRelease();
LABEL_32:
        swift_release();
        goto LABEL_33;
      case 11:
        uint64_t v62 = v103;
        uint64_t v63 = static DispatchWorkItemFlags.barrier.getter();
        __chkstk_darwin(v63);
        *(&v103 - 4) = (char *)v24;
        *(&v103 - 3) = (char *)a1;
        *(&v103 - 2) = (char *)sub_100280FE4;
        *(&v103 - 1) = 0;
        OS_dispatch_queue.sync<A>(flags:execute:)();
        (*(void (**)(char *, uint64_t))(v110 + 8))(v62, v111);
        type metadata accessor for Transaction();
        uint64_t v65 = v107;
        uint64_t v64 = v108;
        int v66 = v106;
        (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v106, a1, v108);
        unint64_t v67 = (*(unsigned __int8 *)(v65 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
        unint64_t v68 = (v112 + v67 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v69 = swift_allocObject();
        *(void *)(v69 + 16) = v109;
        (*(void (**)(unint64_t, char *, uint64_t))(v65 + 32))(v69 + v67, v66, v64);
        BOOL v70 = (char **)(v69 + v68);
        uint64_t v71 = v104;
        *BOOL v70 = v105;
        v70[1] = (char *)v71;
        swift_bridgeObjectRetain();
        swift_retain();
        static Transaction.asyncTask(name:block:)();
        swift_release();
        if (v71)
        {
          uint64_t v72 = v121;
          uint64_t v73 = v122;
          sub_10001CD44(v120, v121);
          uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 24))(v72, v73);
          if ((char *)v74 == v105 && v75 == v104)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v102 & 1) == 0) {
              sub_100280FE8((uint64_t)v105, v104, (uint64_t)v120);
            }
          }
        }
        goto LABEL_33;
      case 13:
        uint64_t v34 = *(char **)(v109 + 176);
        if (!v34) {
          goto LABEL_29;
        }
        swift_retain();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:_:_:)();
        uint64_t v76 = type metadata accessor for Transaction();
        __chkstk_darwin(v76);
        *(&v103 - 4) = v34;
        *(&v103 - 3) = (char *)a1;
        uint64_t v77 = v104;
        *(&v103 - 2) = v105;
        *(&v103 - 1) = (char *)v77;
        static Transaction.named<A>(_:with:)();
        swift_release();
LABEL_33:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
        LOBYTE(v34) = 1;
        return v34 & 1;
      default:
        goto LABEL_33;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)&v114, (uint64_t *)&unk_10163BBE0);
    static os_log_type_t.error.getter();
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_101342130;
    uint64_t v31 = UUID.uuidString.getter();
    uint64_t v33 = v32;
    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 64) = sub_10000B4CC();
    *(void *)(v30 + 32) = v31;
    *(void *)(v30 + 40) = v33;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
LABEL_11:
    LOBYTE(v34) = 0;
  }
  return v34 & 1;
}

uint64_t sub_100280FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v7 = __chkstk_darwin(v37);
  uint64_t v35 = (uint64_t)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v36 = (char *)v34 - v9;
  uint64_t v40 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v10 = __chkstk_darwin(v40);
  uint64_t v38 = (uint64_t)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v34 - v12;
  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  v34[1] = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101347BA0;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v15 = sub_10000B4CC();
  *(void *)(v14 + 64) = v15;
  *(void *)(v14 + 32) = a1;
  *(void *)(v14 + 40) = a2;
  sub_10001D010(a3, (uint64_t)v42);
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  uint64_t v39 = a1;
  uint64_t v16 = String.init<A>(describing:)();
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v15;
  *(void *)(v14 + 72) = v16;
  *(void *)(v14 + 80) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = PressuredExitTransactionManager.begin(_:)();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v3;
  *(void *)(v19 + 24) = v18;
  uint64_t v20 = a3;
  sub_10001D010(a3, (uint64_t)v42);
  swift_retain_n();
  swift_retain();
  if (swift_dynamicCast())
  {
    uint64_t v21 = v38;
    sub_100289360((uint64_t)v13, v38, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v39;
    *(void *)(v22 + 24) = a2;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = sub_100289358;
    *(void *)(v23 + 24) = v19;
    *(void *)(v23 + 32) = sub_10028934C;
    *(void *)(v23 + 40) = v18;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_101073560(v21, 0, (void (*)(uint64_t))sub_100289494, v22, (void (*)(uint64_t (*)()))sub_1002894E0, (void (*)(uint64_t (*)()))v23);
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
    uint64_t v24 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
  }
  else
  {
    uint64_t v25 = v39;
    uint64_t v26 = (uint64_t)v36;
    if (!swift_dynamicCast())
    {
      static os_log_type_t.error.getter();
      uint64_t v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_101342130;
      sub_10001D010(v20, (uint64_t)v41);
      uint64_t v31 = String.init<A>(describing:)();
      *(void *)(v30 + 56) = &type metadata for String;
      *(void *)(v30 + 64) = v15;
      *(void *)(v30 + 32) = v31;
      *(void *)(v30 + 40) = v32;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      Transaction.end()();
      swift_release();
      swift_release_n();
      uint64_t v29 = 0;
      goto LABEL_9;
    }
    uint64_t v21 = v35;
    sub_100289360(v26, v35, type metadata accessor for SharedBeaconRecord);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v25;
    *(void *)(v27 + 24) = a2;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = sub_100289358;
    *(void *)(v28 + 24) = v19;
    *(void *)(v28 + 32) = sub_10028934C;
    *(void *)(v28 + 40) = v18;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_101073C68(v21, 0, (void (*)(uint64_t))sub_100289400, v27, (void (*)(uint64_t (*)(uint64_t)))sub_10028940C, (void (*)(uint64_t (*)(uint64_t)))v28);
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
    uint64_t v24 = type metadata accessor for SharedBeaconRecord;
  }
  sub_100289434(v21, v24);
  uint64_t v29 = 1;
LABEL_9:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v42);
  return v29;
}

BOOL sub_1002815A8(uint64_t a1)
{
  return *(unsigned char *)(a1 + *(int *)(type metadata accessor for BeaconObservation() + 24)) == 10;
}

uint64_t sub_1002815E0(uint64_t a1, uint64_t a2)
{
  v2[11] = a1;
  v2[12] = a2;
  v2[13] = sub_10000588C(&qword_10163B9F0);
  v2[14] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord();
  v2[15] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[16] = v4;
  v2[17] = *(void *)(v4 + 64);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  sub_10000588C(&qword_101639428);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v2[22] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[23] = v6;
  v2[24] = *(void *)(v6 + 64);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  return _swift_task_switch(sub_1002817A0, 0, 0);
}

uint64_t sub_1002817A0()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[12];
  uint64_t v5 = *(void *)(v0[11] + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  v0[27] = v5;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[28] = v6;
  v0[29] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  return _swift_task_switch(sub_10028183C, v5, 0);
}

uint64_t sub_10028183C()
{
  uint64_t v1 = *(void *)(v0 + 216);
  swift_beginAccess();
  *(void *)(v0 + 240) = *(void *)(v1 + 144);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1002818C4, 0, 0);
}

uint64_t sub_1002818C4()
{
  if (*(void *)(v0[30] + 16) && (unint64_t v1 = sub_1007240CC(v0[26]), (v2 & 1) != 0))
  {
    uint64_t v3 = v0[26];
    uint64_t v4 = v0[22];
    uint64_t v5 = v0[23];
    uint64_t v6 = *(void *)(*(void *)(v0[30] + 56) + 8 * v1);
    v0[31] = v6;
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v0[32] = v7;
    v0[33] = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v3, v4);
    return _swift_task_switch(sub_100281A3C, v6, 0);
  }
  else
  {
    uint64_t v8 = v0[26];
    uint64_t v9 = v0[22];
    uint64_t v10 = v0[23];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100281A3C()
{
  *(void *)(v0 + 272) = sub_10117C064(0xD000000000000013, 0x80000001013F54A0);
  return _swift_task_switch(sub_100281AC0, 0, 0);
}

uint64_t sub_100281AC0()
{
  unint64_t v1 = (void *)v0[34];
  if (v1)
  {
    self;
    uint64_t v2 = swift_dynamicCastObjCClass();
    v0[35] = v2;
    uint64_t v3 = v0[31];
    if (v2)
    {
      return _swift_task_switch(sub_100281BEC, v3, 0);
    }
    swift_release();
  }
  else
  {
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100281BEC()
{
  *(void *)(v0 + 288) = sub_10117C064(0x496E6F6973736573, 0xE900000000000044);
  return _swift_task_switch(sub_100281C70, 0, 0);
}

uint64_t sub_100281C70()
{
  unint64_t v1 = (void *)v0[36];
  if (v1)
  {
    self;
    uint64_t v2 = swift_dynamicCastObjCClass();
    v0[37] = v2;
    if (v2)
    {
      uint64_t v3 = v0[31];
      return _swift_task_switch(sub_100281DA8, v3, 0);
    }
    uint64_t v4 = (void *)v0[34];
    swift_release();
  }
  else
  {
    uint64_t v4 = (void *)v0[34];
    swift_release();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100281DA8()
{
  sub_10117D52C(*(void *)(v0 + 248));
  *(void *)(v0 + 304) = 0;
  return _swift_task_switch(sub_100281E3C, 0, 0);
}

uint64_t sub_100281E3C()
{
  v0[39] = v0[38];
  type metadata accessor for AnalyticsEvent(0);
  unint64_t v1 = (char *)swift_allocObject();
  v0[40] = v1;
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  v0[41] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v0[42] = v5;
  v0[43] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v2, 1, 1, v3);
  v5(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD000000000000032;
  *((void *)v1 + 16) = 0x80000001013F7260;
  return _swift_task_switch(sub_100281FA0, v1, 0);
}

uint64_t sub_100281FA0()
{
  unint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[42];
  uint64_t v3 = v0[40];
  uint64_t v2 = v0[41];
  uint64_t v5 = v0[20];
  uint64_t v4 = v0[21];
  static DispatchTime.now()();
  v1(v4, 0, 1, v2);
  sub_100288DF0(v4, v5);
  uint64_t v6 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess();
  sub_10003377C(v5, v6);
  swift_endAccess();
  return _swift_task_switch(sub_100282088, 0, 0);
}

uint64_t sub_100282088()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 88);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 224))(v1, *(void *)(v0 + 96), v2);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 352) = v6;
  *(void *)(v6 + 16) = v4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v6 + v5, v1, v2);
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 360) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1002821B8;
  uint64_t v9 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 112);
  return unsafeBlocking<A>(_:)(v8, sub_100288E5C, v6, v9);
}

uint64_t sub_1002821B8()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1002822D0, 0, 0);
}

uint64_t sub_1002822D0()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v1 + 48))(v2, 1, *(void *)(v0 + 120)) == 1)
  {
    sub_10001DAB4(v2, &qword_10163B9F0);
    uint64_t v13 = (uint64_t (*)(uint64_t))((char *)&dword_10166D7E0 + dword_10166D7E0);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 368) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100282514;
    uint64_t v4 = *(void *)(v0 + 320);
    return v13(v4);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v6 = *(void *)(v0 + 152);
    uint64_t v8 = *(void *)(v0 + 88);
    sub_100289360(v2, v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_1002892E4(v6, v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    int v9 = *(_DWORD *)(v1 + 80);
    *(_DWORD *)(v0 + 416) = v9;
    unint64_t v10 = (v9 + 24) & ~(unint64_t)v9;
    uint64_t v11 = swift_allocObject();
    *(void *)(v0 + 376) = v11;
    *(void *)(v11 + 16) = v8;
    sub_100289360(v7, v11 + v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_retain();
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 384) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100282628;
    return unsafeBlocking<A>(_:)(v0 + 420, sub_100288E64, v11, &type metadata for Bool);
  }
}

uint64_t sub_100282514()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  uint64_t v3 = *(void *)(v2 + 216);
  return _swift_task_switch(sub_100282B90, v3, 0);
}

uint64_t sub_100282628()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100282740, 0, 0);
}

uint64_t sub_100282740()
{
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 88);
  unint64_t v4 = (*(unsigned __int8 *)(v0 + 416) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 416);
  *(unsigned char *)(v0 + 422) = *(unsigned char *)(v0 + 420);
  sub_1002892E4(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 392) = v5;
  *(void *)(v5 + 16) = v3;
  sub_100289360(v2, v5 + v4, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 400) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10028289C;
  return unsafeBlocking<A>(_:)(v0 + 421, sub_10028925C, v5, &type metadata for Bool);
}

uint64_t sub_10028289C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1002829B4, 0, 0);
}

uint64_t sub_1002829B4()
{
  char v1 = *(unsigned char *)(v0 + 422);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 152);
  char v6 = *(unsigned char *)(v0 + 421);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 408) = v7;
  *(void *)(v7 + 16) = v3;
  *(void *)(v7 + 24) = v5;
  *(void *)(v7 + 32) = v4;
  *(unsigned char *)(v7 + 40) = v1;
  *(unsigned char *)(v7 + 41) = v6;
  return _swift_task_switch(sub_100282A5C, v2, 0);
}

uint64_t sub_100282A5C()
{
  uint64_t v1 = *(void *)(v0 + 312);
  sub_10118B228((uint64_t)sub_1002892D0);
  if (v1)
  {
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v2 = sub_100289870;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100282B14;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100282B14()
{
  sub_100289434(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v1 = *(void *)(v0 + 216);
  return _swift_task_switch(sub_100282B90, v1, 0);
}

uint64_t sub_100282B90()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 176);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 224))(v4, *(void *)(v0 + 96), v5);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *(void *)(v3 + 152);
  *(void *)(v3 + 152) = 0x8000000000000000;
  sub_10016CA6C(v1, v4, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 152) = v8;
  swift_bridgeObjectRelease();
  v2(v4, v5);
  swift_endAccess();
  return _swift_task_switch(sub_100282CA8, 0, 0);
}

uint64_t sub_100282CA8()
{
  uint64_t v1 = (void *)v0[36];
  uint64_t v2 = (void *)v0[34];
  swift_release();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100282D78()
{
  v0[39] = 0;
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v1 = (char *)swift_allocObject();
  v0[40] = v1;
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  v0[41] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v0[42] = v5;
  v0[43] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v2, 1, 1, v3);
  v5(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD000000000000032;
  *((void *)v1 + 16) = 0x80000001013F7260;
  return _swift_task_switch(sub_100281FA0, v1, 0);
}

uint64_t sub_100282ED8@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(int *)(type metadata accessor for OwnedBeaconRecord() + 20);
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  uint64_t v8 = a1 + v7;
  sub_1007B4970(v8, 0, 0, &v13);
  char v10 = sub_100AF7A38((uint64_t)v6, v8, v13, 0);
  swift_bridgeObjectRelease();
  uint64_t result = sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_10163AC90);
  *a2 = v10 & 1;
  return result;
}

unint64_t sub_100283014(void *a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  int v24 = a5;
  uint64_t v23 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v23);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347580;
  *(void *)(inited + 32) = 0x496E6F6973736573;
  *(void *)(inited + 40) = 0xE900000000000044;
  *(void *)(inited + 48) = a1;
  *(unsigned char *)(inited + 56) = 0;
  strcpy((char *)(inited + 64), "batteryLevel");
  *(unsigned char *)(inited + 77) = 0;
  *(_WORD *)(inited + 78) = -5120;
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v12 = *(unsigned __int8 *)(a2 + *(int *)(v11 + 76));
  id v13 = objc_allocWithZone((Class)NSNumber);
  id v14 = a1;
  *(void *)(inited + 80) = [v13 initWithInteger:v12 v23];
  *(unsigned char *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "updateRequired");
  *(unsigned char *)(inited + 111) = -18;
  *(void *)(inited + 112) = 1;
  *(unsigned char *)(inited + 120) = 1;
  *(void *)(inited + 128) = 0x737265566D6F7266;
  *(void *)(inited + 136) = 0xEB000000006E6F69;
  *(void *)(inited + 144) = String._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0xD000000000000013;
  *(void *)(inited + 168) = 0x80000001013F54A0;
  *(void *)(inited + 176) = a3;
  *(unsigned char *)(inited + 184) = 0;
  *(void *)(inited + 192) = 0x6563697665447369;
  *(void *)(inited + 200) = 0xEF6465687361654CLL;
  id v15 = a3;
  *(NSNumber *)(inited + 208) = Bool._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 216) = 0;
  *(void *)(inited + 224) = 0xD000000000000011;
  *(void *)(inited + 232) = 0x80000001013F72A0;
  *(NSNumber *)(inited + 240) = Bool._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 248) = 0;
  unint64_t v16 = sub_10092E03C(inited);
  id v17 = [self sharedInstance];
  LODWORD(v12) = [v17 isInternalBuild];

  if (v12)
  {
    UUID.uuidString.getter();
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v25 = v16;
    sub_10016D430((uint64_t)v18, 0, 0x6544646572696170, 0xEE00444965636976, isUniquelyReferenced_nonNull_native);
    unint64_t v16 = v25;
    swift_bridgeObjectRelease();
    sub_1002892E4(a2 + *(int *)(v11 + 24), (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      char v21 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v25 = v16;
      sub_10016D430((uint64_t)v20, 0, 0xD000000000000018, 0x80000001013F72C0, v21);
      unint64_t v16 = v25;
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100289434((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    }
  }
  return v16;
}

uint64_t sub_1002833DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_1002834A0, 0, 0);
}

uint64_t sub_1002834A0()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = *(void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  v0[12] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  return _swift_task_switch(sub_100283530, v5, 0);
}

uint64_t sub_100283530()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_beginAccess();
  *(void *)(v0 + 104) = *(void *)(v1 + 152);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1002835B8, 0, 0);
}

uint64_t sub_1002835B8()
{
  uint64_t v1 = v0[11];
  if (*(void *)(v0[13] + 16))
  {
    unint64_t v2 = sub_1007240CC(v0[11]);
    uint64_t v4 = v0[10];
    uint64_t v3 = v0[11];
    uint64_t v5 = v0[9];
    if (v6)
    {
      uint64_t v7 = *(void *)(*(void *)(v0[13] + 56) + 8 * v2);
      v0[14] = v7;
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
      swift_retain();
      swift_bridgeObjectRetain();
      return _swift_task_switch(sub_100283760, v7, 0);
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  else
  {
    uint64_t v8 = v0[9];
    uint64_t v9 = v0[10];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v8);
  }
  v0[15] = 0;
  char v10 = (void *)swift_task_alloc();
  v0[16] = v10;
  *char v10 = v0;
  v10[1] = sub_100283838;
  uint64_t v11 = v0[6];
  return sub_1001CAD6C(v11);
}

uint64_t sub_100283760()
{
  sub_1011A36B8(v0[14], v0[7], v0[8]);
  swift_bridgeObjectRelease();
  swift_release();
  v0[15] = v0[14];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[16] = v1;
  void *v1 = v0;
  v1[1] = sub_100283838;
  uint64_t v2 = v0[6];
  return sub_1001CAD6C(v2);
}

uint64_t sub_100283838()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  swift_task_dealloc();
  return _swift_task_switch(sub_100283948, v1, 0);
}

uint64_t sub_100283948()
{
  sub_1001CB2C8(*(void *)(v0 + 48));
  return _swift_task_switch(sub_1002839B4, 0, 0);
}

uint64_t sub_1002839B4()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_100283A20()
{
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347500;
  *(void *)(inited + 32) = 0x6563637553736177;
  *(void *)(inited + 40) = 0xEA00000000007373;
  *(void *)(inited + 48) = 1;
  *(unsigned char *)(inited + 56) = 1;
  *(void *)(inited + 64) = 0x6F69737265566F74;
  *(void *)(inited + 72) = 0xE90000000000006ELL;
  *(void *)(inited + 80) = String._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "didShowAlert");
  *(unsigned char *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(void *)(inited + 112) = 0;
  *(unsigned char *)(inited + 120) = 1;
  return sub_10092E03C(inited);
}

uint64_t sub_100283B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v6 + 88) = a4;
  *(void *)(v6 + 96) = a6;
  *(unsigned char *)(v6 + 240) = a5;
  *(void *)(v6 + 72) = a2;
  *(void *)(v6 + 80) = a3;
  *(void *)(v6 + 64) = a1;
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v6 + 104) = v7;
  *(void *)(v6 + 112) = *(void *)(v7 - 8);
  *(void *)(v6 + 120) = swift_task_alloc();
  *(void *)(v6 + 128) = swift_task_alloc();
  return _swift_task_switch(sub_100283BDC, 0, 0);
}

uint64_t sub_100283BDC()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[9];
  uint64_t v5 = *(void *)(v0[8] + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  v0[17] = v5;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[18] = v6;
  v0[19] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  return _swift_task_switch(sub_100283C78, v5, 0);
}

uint64_t sub_100283C78()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_beginAccess();
  *(void *)(v0 + 160) = *(void *)(v1 + 144);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100283D00, 0, 0);
}

uint64_t sub_100283D00()
{
  uint64_t v1 = *(void *)(v0 + 128);
  if (*(void *)(*(void *)(v0 + 160) + 16))
  {
    unint64_t v2 = sub_1007240CC(*(void *)(v0 + 128));
    uint64_t v3 = *(void *)(v0 + 128);
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v5 = *(void *)(v0 + 112);
    if (v6)
    {
      uint64_t v7 = *(void *)(*(void *)(*(void *)(v0 + 160) + 56) + 8 * v2);
      *(void *)(v0 + 168) = v7;
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      *(void *)(v0 + 176) = v8;
      v8(v3, v4);
      uint64_t v9 = sub_100283E40;
      uint64_t v10 = v7;
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v13(v3, v4);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 104);
    uint64_t v12 = *(void *)(v0 + 112);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v13(v1, v11);
  }
  *(void *)(v0 + 192) = 0;
  *(void *)(v0 + 200) = v13;
  uint64_t v14 = *(void *)(v0 + 136);
  (*(void (**)(void, void, void))(v0 + 144))(*(void *)(v0 + 120), *(void *)(v0 + 72), *(void *)(v0 + 104));
  uint64_t v9 = sub_100283F6C;
  uint64_t v10 = v14;
LABEL_7:
  return _swift_task_switch(v9, v10, 0);
}

uint64_t sub_100283E40()
{
  sub_10117D54C(*(void *)(v0 + 168));
  *(void *)(v0 + 184) = 0;
  swift_release();
  return _swift_task_switch(sub_100283EE8, 0, 0);
}

uint64_t sub_100283EE8()
{
  *(int8x16_t *)(v0 + 192) = vextq_s8(*(int8x16_t *)(v0 + 176), *(int8x16_t *)(v0 + 176), 8uLL);
  uint64_t v1 = *(void *)(v0 + 136);
  (*(void (**)(void, void, void))(v0 + 144))(*(void *)(v0 + 120), *(void *)(v0 + 72), *(void *)(v0 + 104));
  return _swift_task_switch(sub_100283F6C, v1, 0);
}

uint64_t sub_100283F6C()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_beginAccess();
  *(void *)(v0 + 208) = *(void *)(v1 + 152);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100283FF4, 0, 0);
}

uint64_t sub_100283FF4()
{
  if (*(void *)(v0[26] + 16))
  {
    unint64_t v1 = sub_1007240CC(v0[15]);
    uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[25];
    uint64_t v3 = v0[15];
    uint64_t v4 = v0[13];
    if (v5)
    {
      uint64_t v6 = *(void *)(*(void *)(v0[26] + 56) + 8 * v1);
      v0[27] = v6;
      swift_retain();
      swift_bridgeObjectRelease();
      v2(v3, v4);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      return _swift_task_switch(sub_1002841B0, v6, 0);
    }
    swift_bridgeObjectRelease();
    v2(v3, v4);
  }
  else
  {
    uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[25];
    uint64_t v8 = v0[15];
    uint64_t v9 = v0[13];
    swift_bridgeObjectRelease();
    v7(v8, v9);
  }
  v0[28] = 0;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[29] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100284298;
  uint64_t v11 = v0[9];
  return sub_1001CAD6C(v11);
}

uint64_t sub_1002841B0()
{
  uint64_t v1 = *(void *)(v0 + 192);
  sub_1011A36F8(*(void *)(v0 + 216), *(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 240), *(void *)(v0 + 96));
  swift_errorRelease();
  swift_bridgeObjectRelease();
  if (v1) {
    swift_errorRelease();
  }
  swift_release();
  *(void *)(v0 + 224) = *(void *)(v0 + 216);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v2;
  void *v2 = v0;
  v2[1] = sub_100284298;
  uint64_t v3 = *(void *)(v0 + 72);
  return sub_1001CAD6C(v3);
}

uint64_t sub_100284298()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  return _swift_task_switch(sub_1002843A8, v1, 0);
}

uint64_t sub_1002843A8()
{
  sub_1001CB2C8(*(void *)(v0 + 72));
  return _swift_task_switch(sub_100284414, 0, 0);
}

uint64_t sub_100284414()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100284488()
{
  uint64_t v1 = *(void *)(v0 + 176);
  *(void *)(v0 + 192) = 0;
  *(void *)(v0 + 200) = v1;
  uint64_t v2 = *(void *)(v0 + 136);
  (*(void (**)(void, void, void))(v0 + 144))(*(void *)(v0 + 120), *(void *)(v0 + 72), *(void *)(v0 + 104));
  return _swift_task_switch(sub_100283F6C, v2, 0);
}

unint64_t sub_100284508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347500;
  *(void *)(inited + 32) = 0x6563637553736177;
  *(void *)(inited + 40) = 0xEA00000000007373;
  sub_10001D4B0(0, (unint64_t *)&qword_10164DC40);
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(0);
  *(unsigned char *)(inited + 56) = 0;
  *(void *)(inited + 64) = 0x6F69737265566F74;
  *(void *)(inited + 72) = 0xE90000000000006ELL;
  *(void *)(inited + 80) = String._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "didShowAlert");
  *(unsigned char *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(NSNumber *)(inited + 112) = Bool._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 120) = 0;
  unint64_t v6 = sub_10092E03C(inited);
  if (a4)
  {
    swift_getErrorValue();
    swift_errorRetain();
    Error.domain.getter();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10016D430((uint64_t)v7, 0, 0x6D6F44726F727265, 0xEB000000006E6961, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_getErrorValue();
    Error.code.getter();
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    char v10 = swift_isUniquelyReferenced_nonNull_native();
    sub_10016D430((uint64_t)isa, 0, 0x646F43726F727265, 0xE900000000000065, v10);
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  return v6;
}

uint64_t sub_100284730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[10] = v6;
  v4[11] = *(void *)(v6 + 64);
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  v4[14] = sub_10000588C(&qword_10163B9F0);
  v4[15] = swift_task_alloc();
  return _swift_task_switch(sub_100284840, 0, 0);
}

uint64_t sub_100284840()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[16] = v6;
  v0[17] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v3);
  unint64_t v7 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v8 = swift_allocObject();
  v0[18] = v8;
  *(void *)(v8 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v8 + v7, v1, v3);
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[19] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10028498C;
  uint64_t v11 = v0[14];
  uint64_t v10 = v0[15];
  return unsafeBlocking<A>(_:)(v10, sub_100288E5C, v8, v11);
}

uint64_t sub_10028498C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100284AA4, 0, 0);
}

uint64_t sub_100284AA4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[16];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = *(void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  v0[20] = v5;
  v1(v2, v4, v3);
  return _swift_task_switch(sub_100284B2C, v5, 0);
}

uint64_t sub_100284B2C()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_beginAccess();
  *(void *)(v0 + 168) = *(void *)(v1 + 152);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100284BB4, 0, 0);
}

uint64_t sub_100284BB4()
{
  uint64_t v1 = v0[12];
  if (*(void *)(v0[21] + 16))
  {
    unint64_t v2 = sub_1007240CC(v0[12]);
    if (v3)
    {
      uint64_t v4 = v0[15];
      uint64_t v5 = v0[12];
      uint64_t v6 = v0[9];
      uint64_t v7 = v0[10];
      uint64_t v9 = v0[7];
      uint64_t v8 = v0[8];
      uint64_t v10 = *(void *)(*(void *)(v0[21] + 56) + 8 * v2);
      v0[22] = v10;
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
      uint64_t v11 = (void *)swift_task_alloc();
      v0[23] = v11;
      v11[2] = v4;
      v11[3] = v9;
      v11[4] = v8;
      swift_retain();
      return _swift_task_switch(sub_100284D58, v10, 0);
    }
    uint64_t v1 = v0[12];
  }
  uint64_t v12 = v0[9];
  uint64_t v13 = v0[10];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v1, v12);
  v0[24] = 0;
  uint64_t v14 = (void *)swift_task_alloc();
  v0[25] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100284E40;
  uint64_t v15 = v0[6];
  return sub_1001CAD6C(v15);
}

uint64_t sub_100284D58()
{
  sub_10118B228((uint64_t)sub_1002895F0);
  swift_release();
  swift_task_dealloc();
  v0[24] = v0[22];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[25] = v1;
  void *v1 = v0;
  v1[1] = sub_100284E40;
  uint64_t v2 = v0[6];
  return sub_1001CAD6C(v2);
}

uint64_t sub_100284E40()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  swift_task_dealloc();
  return _swift_task_switch(sub_100284F50, v1, 0);
}

uint64_t sub_100284F50()
{
  sub_1001CB2C8(*(void *)(v0 + 48));
  return _swift_task_switch(sub_100284FBC, 0, 0);
}

uint64_t sub_100284FBC()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_release();
  sub_10001DAB4(v1, &qword_10163B9F0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

unint64_t sub_100285054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v14 = &v19[-v13];
  sub_10001D074(a1, (uint64_t)v7, &qword_10163B9F0);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10001DAB4((uint64_t)v7, &qword_10163B9F0);
    return sub_10092E03C((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    sub_100289360((uint64_t)v7, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10000588C(&qword_10163C5D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10134BF90;
    strcpy((char *)(inited + 32), "updateRequired");
    *(unsigned char *)(inited + 47) = -18;
    *(void *)(inited + 48) = 0;
    *(unsigned char *)(inited + 56) = 1;
    *(void *)(inited + 64) = 0x6563637553736177;
    *(void *)(inited + 72) = 0xEA00000000007373;
    *(void *)(inited + 80) = 0;
    *(unsigned char *)(inited + 88) = 1;
    *(void *)(inited + 96) = 0x6F69737265566F74;
    *(void *)(inited + 104) = 0xE90000000000006ELL;
    sub_1002892E4((uint64_t)v14, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (!a3) {
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    sub_100289434((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 112) = v17;
    *(unsigned char *)(inited + 120) = 0;
    strcpy((char *)(inited + 128), "didShowAlert");
    *(unsigned char *)(inited + 141) = 0;
    *(_WORD *)(inited + 142) = -5120;
    *(void *)(inited + 144) = 0;
    *(unsigned char *)(inited + 152) = 1;
    unint64_t v15 = sub_10092E03C(inited);
    sub_100289434((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  return v15;
}

uint64_t sub_100285364(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconObservation();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = *(int *)(v8 + 24);
  uint64_t v12 = qword_101351D30[*(char *)(a1 + v11)];
  uint64_t v13 = qword_101351D30[*(char *)(a2 + v11)];
  sub_1002892E4(a1, (uint64_t)&v16 - v9, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  sub_1002892E4(a2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  if (v12 == v13) {
    char v14 = static Date.== infix(_:_:)();
  }
  else {
    char v14 = 0;
  }
  sub_100289434((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  sub_100289434((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  return v14 & 1;
}

void sub_1002854B4()
{
  static os_log_type_t.error.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v0 = (void *)static OS_os_log.default.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101342130;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v2 = String.init<A>(describing:)();
  uint64_t v4 = v3;
  *(void *)(v1 + 56) = &type metadata for String;
  *(void *)(v1 + 64) = sub_10000B4CC();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v4;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  Transaction.end()();
}

uint64_t sub_1002855C4(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v13 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  char v14 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v20;
  *(void *)(v15 + 16) = v19;
  *(void *)(v15 + 24) = v16;
  aBlock[4] = sub_10028954C;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  void aBlock[3] = &unk_1015B7098;
  NSString v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_100289604((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_10002FE84();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v21);
  return swift_release();
}

uint64_t sub_1002859A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + *(int *)(type metadata accessor for OwnedBeaconRecord() + 60));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_1002859FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + *(int *)(type metadata accessor for SharedBeaconRecord(0) + 40));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_100285A54(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t *a6)
{
  uint64_t v10 = sub_10000588C(a6);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v12, a6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    a4(*v12);
    return swift_errorRelease();
  }
  else
  {
    a2();
    return sub_10001DAB4((uint64_t)v12, a6);
  }
}

uint64_t sub_100285B48(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  sub_10000588C(&qword_101638CF0);
  *(void *)(v1 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_100285BDC, 0, 0);
}

uint64_t sub_100285BDC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  *(void *)(v0 + 32) = v1;
  return _swift_task_switch(sub_100285C0C, v1, 0);
}

uint64_t sub_100285C0C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  sub_1001CCD8C(4, v1);
  sub_10001DAB4(v1, &qword_101638CF0);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100285CCC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v93 = a3;
  uint64_t v92 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v90 = *(void *)(v4 - 8);
  uint64_t v91 = v4;
  __chkstk_darwin(v4);
  uint64_t v88 = v5;
  uint64_t v89 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v6 - 8);
  uint64_t v84 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BeaconObservation();
  uint64_t v100 = *(void *)(v8 - 8);
  uint64_t v101 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v79 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v99 = (char *)&v79 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v98 = (uint64_t)&v79 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v79 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  int v24 = (char *)&v79 - v23;
  __chkstk_darwin(v22);
  uint64_t v82 = (uint64_t)&v79 - v25;
  uint64_t v26 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v87 = (char *)&v79 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v79 - v29;
  uint64_t v31 = type metadata accessor for Date();
  uint64_t v85 = *(void *)(v31 - 8);
  uint64_t v86 = v31;
  uint64_t v32 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v85 + 56);
  uint64_t v94 = v30;
  uint64_t v81 = v85 + 56;
  uint64_t v80 = v32;
  ((void (*)(char *, uint64_t, uint64_t))v32)(v30, 1, 1);
  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
LABEL_38:
  }
    swift_once();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_101342130;
  uint64_t v34 = UUID.uuidString.getter();
  uint64_t v36 = v35;
  *(void *)(v33 + 56) = &type metadata for String;
  *(void *)(v33 + 64) = sub_10000B4CC();
  *(void *)(v33 + 32) = v34;
  *(void *)(v33 + 40) = v36;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  sub_10000588C(&qword_101655540);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v37 = v103;
  if (v103[2] && (unint64_t v38 = sub_1007240CC(a1), (v39 & 1) != 0))
  {
    uint64_t v40 = *(void *)(v37[7] + 8 * v38);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v41 = sub_1007100C0(v40);
    swift_bridgeObjectRelease();
    size_t v42 = sub_100B752E8((uint64_t)v41);
    swift_release();
    uint64_t v43 = _swiftEmptyArrayStorage;
    uint64_t v103 = _swiftEmptyArrayStorage;
    uint64_t v97 = *(void *)(v42 + 16);
    if (v97)
    {
      unint64_t v79 = a1;
      a1 = 0;
      size_t v95 = v42;
      unint64_t v96 = v21;
      while (1)
      {
        if (a1 >= *(void *)(v42 + 16))
        {
          __break(1u);
          goto LABEL_38;
        }
        uint64_t v44 = (uint64_t)v14;
        uint64_t v45 = v11;
        uint64_t v46 = *(void *)(v100 + 72);
        unint64_t v102 = (*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
        sub_1002892E4(v42 + v102 + v46 * a1, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v47 = v101;
        int v48 = v24[*(int *)(v101 + 24)];
        sub_1002892E4((uint64_t)v24, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if (v48 == 7) {
          break;
        }
        int v51 = v21[*(int *)(v47 + 24)];
        sub_100289434((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v49 = v98;
        sub_1002892E4((uint64_t)v24, v98, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v50 = (uint64_t)v99;
        if (v51 == 8) {
          goto LABEL_12;
        }
        int v54 = *(unsigned __int8 *)(v49 + *(int *)(v101 + 24));
        sub_100289434(v49, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        sub_1002892E4((uint64_t)v24, v50, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v11 = v45;
        if (v54 == 11) {
          goto LABEL_13;
        }
        int v55 = *(unsigned __int8 *)(v50 + *(int *)(v101 + 24));
        sub_100289434(v50, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v14 = (char *)v44;
        sub_1002892E4((uint64_t)v24, v44, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if (v55 == 6) {
          goto LABEL_14;
        }
        int v56 = *(unsigned __int8 *)(v44 + *(int *)(v101 + 24));
        sub_100289434(v44, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if (v56 == 9) {
          goto LABEL_15;
        }
        sub_100289434((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_20:
        ++a1;
        uint64_t v21 = v96;
        size_t v42 = v95;
        if (v97 == a1)
        {
          uint64_t v43 = v103;
          a1 = v79;
          goto LABEL_27;
        }
      }
      sub_100289434((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v49 = v98;
      sub_1002892E4((uint64_t)v24, v98, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v50 = (uint64_t)v99;
LABEL_12:
      sub_100289434(v49, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      sub_1002892E4((uint64_t)v24, v50, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v11 = v45;
LABEL_13:
      sub_100289434(v50, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v14 = (char *)v44;
      sub_1002892E4((uint64_t)v24, v44, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_14:
      sub_100289434((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_15:
      sub_100289360((uint64_t)v24, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B77F0(0, v43[2] + 1, 1);
      }
      uint64_t v43 = v103;
      unint64_t v53 = v103[2];
      unint64_t v52 = v103[3];
      if (v53 >= v52 >> 1)
      {
        sub_1000B77F0(v52 > 1, v53 + 1, 1);
        uint64_t v43 = v103;
      }
      v43[2] = v53 + 1;
      sub_100289360((uint64_t)v11, (uint64_t)v43 + v102 + v53 * v46, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      goto LABEL_20;
    }
LABEL_27:
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v43 = _swiftEmptyArrayStorage;
  }
  uint64_t v58 = v86;
  uint64_t v57 = (uint64_t)v87;
  uint64_t v59 = v85;
  uint64_t v60 = (uint64_t)v84;
  sub_100E4D5E0((uint64_t)v43, v60);
  swift_bridgeObjectRelease();
  uint64_t v61 = v101;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v60, 1, v101) == 1)
  {
    sub_10001DAB4(v60, (uint64_t *)&unk_101655530);
  }
  else
  {
    uint64_t v62 = (uint64_t)v94;
    sub_10001DAB4((uint64_t)v94, (uint64_t *)&unk_10163AC90);
    uint64_t v63 = v60;
    uint64_t v64 = v82;
    sub_100289360(v63, v82, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v62, v64 + *(int *)(v61 + 20), v58);
    v80(v62, 0, 1, v58);
    int v65 = *(unsigned __int8 *)(v64 + *(int *)(v61 + 24));
    sub_100289434(v64, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    if ((v65 - 6) <= 5)
    {
      uint64_t v66 = qword_101351E90[(char)(v65 - 6)];
      goto LABEL_33;
    }
  }
  uint64_t v66 = -1;
LABEL_33:
  id v67 = [objc_allocWithZone((Class)SPFirmwareUpdateStateResult) init];
  [v67 setState:v66];
  sub_10001D074((uint64_t)v94, v57, (uint64_t *)&unk_10163AC90);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58) == 1)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
  }
  [v67 setStateDate:isa, v79];

  BOOL v70 = v89;
  uint64_t v69 = v90;
  uint64_t v71 = v91;
  (*(void (**)(char *, unint64_t, uint64_t))(v90 + 16))(v89, a1, v91);
  unint64_t v72 = (*(unsigned __int8 *)(v69 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
  unint64_t v73 = (v88 + v72 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v74 = swift_allocObject();
  *(void *)(v74 + 16) = v67;
  (*(void (**)(unint64_t, char *, uint64_t))(v69 + 32))(v74 + v72, v70, v71);
  uint64_t v75 = (void *)(v74 + v73);
  uint64_t v76 = v93;
  *uint64_t v75 = v92;
  v75[1] = v76;
  id v77 = v67;
  swift_retain();
  sub_100656BA8(a1, (void (*)(void))sub_100286D60, v74);

  swift_release();
  return sub_10001DAB4((uint64_t)v94, (uint64_t *)&unk_10163AC90);
}

uint64_t sub_100286820(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(void *))
{
  if (a1)
  {
    id v5 = a1;
    id v6 = [v5 systemVersion];
    if (!v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [a2 setCurrentSystemVersion:v6];
  }
  else
  {
    type metadata accessor for FirmwareUpdateError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100289604(&qword_1016383A0, type metadata accessor for FirmwareUpdateError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v6 = (id)_convertErrorToNSError(_:)();

    [a2 setError:v6];
  }

  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347BA0;
  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v11 = sub_10000B4CC();
  *(void *)(v7 + 64) = v11;
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  id v12 = [a2 description];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v11;
  *(void *)(v7 + 72) = v13;
  *(void *)(v7 + 80) = v15;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return a4(a2);
}

void *sub_100286A74(uint64_t a1, char *a2)
{
  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101347BA0;
  sub_10000588C(&qword_10163FF50);
  uint64_t v5 = String.init<A>(describing:)();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v8 = sub_10000B4CC();
  *(void *)(v4 + 64) = v8;
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  type metadata accessor for DateInterval();
  sub_100289604(&qword_10163FF58, (void (*)(uint64_t))&type metadata accessor for DateInterval);
  uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v4 + 96) = &type metadata for String;
  *(void *)(v4 + 104) = v8;
  *(void *)(v4 + 72) = v9;
  *(void *)(v4 + 80) = v10;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  unint64_t v11 = sub_1010F8DC8(a1, a2);
  swift_retain();
  id v12 = sub_1006AE11C((uint64_t)v11);
  swift_bridgeObjectRelease();
  swift_release();
  return v12;
}

uint64_t sub_100286C74()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100286D60(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void **)(v1 + 16);
  unint64_t v6 = *(uint64_t (**)(void *))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100286820(a1, v5, v1 + v4, v6);
}

void *sub_100286E04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t v6 = (void *)(a1 + 32);
    uint64_t v7 = *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_beaconStore);
    do
    {
      uint64_t v8 = v6[3];
      uint64_t v9 = v6[4];
      uint64_t v10 = sub_10001CD44(v6, v8);
      sub_100B2B68C((uint64_t)v10, v7, v8, v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v6 += 5;
      --v3;
    }
    while (v3);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100286EE4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (**a7)(void, void))
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a7;
  _Block_copy(a7);
  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v15 = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v15;
  *(void *)(v11 + 64) = v15;
  *(void *)(v11 + 72) = 0xD000000000000047;
  *(void *)(v11 + 80) = 0x80000001013F7040;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (a2 <= 6 && ((0x5Fu >> a2) & 1) != 0)
  {
    sub_10001CD44((void *)(a6 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a6 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    sub_10027FA44(a1, 0xD070B0A070806uLL >> (8 * a2), a3, a4, a5, (uint64_t)sub_100287680, v10);
  }
  else
  {
    a7[2](a7, 0);
  }
  return swift_release();
}

void sub_1002870EC(unint64_t a1, char *a2, char *a3, uint64_t a4)
{
  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v8 = String.init<A>(describing:)();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v11 = sub_10000B4CC();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v11;
  *(void *)(v7 + 64) = v11;
  *(void *)(v7 + 72) = 0xD000000000000029;
  *(void *)(v7 + 80) = 0x80000001013F6FB0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (a1 <= 6 && ((0x5Fu >> a1) & 1) != 0)
  {
    sub_10001CD44(&a3[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(void *)&a3[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
    uint64_t v13 = sub_100286A74(0xD070B0A070806uLL >> (8 * a1), a2);
    uint64_t v14 = a3;
    unint64_t v15 = (unint64_t)sub_100286E04((uint64_t)v13, (uint64_t)v14);
    swift_bridgeObjectRelease();

    static os_log_type_t.default.getter();
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_101342130;
    if (v15 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    *(void *)(v16 + 56) = &type metadata for Int;
    *(void *)(v16 + 64) = &protocol witness table for Int;
    *(void *)(v16 + 32) = v17;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10001D4B0(0, (unint64_t *)&unk_10164DC30);
    v12.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class))(a4 + 16))(a4, v12.super.isa);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10001D4B0(0, (unint64_t *)&unk_10164DC30);
    v12.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class))(a4 + 16))(a4, v12.super.isa);
  }
}

uint64_t sub_100287404(uint64_t a1, uint64_t a2)
{
  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v5 = String.init<A>(describing:)();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v8 = sub_10000B4CC();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  *(void *)(v4 + 96) = &type metadata for String;
  *(void *)(v4 + 104) = v8;
  *(void *)(v4 + 64) = v8;
  *(void *)(v4 + 72) = 0xD000000000000038;
  *(void *)(v4 + 80) = 0x80000001013F6F10;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001CD44((void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  type metadata accessor for Transaction();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1);
}

uint64_t sub_1002875F0()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  void *v2 = v1;
  v2[1] = sub_100033F68;
  return sub_100285B48(v0);
}

uint64_t sub_100287680(char a1)
{
  return sub_100FC3A54(a1, *(void *)(v1 + 16));
}

uint64_t sub_100287688()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10028779C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  uint64_t v4 = (v3 & 0xFFFFFFFFFFFFFFF8) + v0;
  unint64_t v5 = ((v3 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = v0 + v2;
  uint64_t v8 = *(void *)(v4 + 8);
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v0 + v5);
  unint64_t v11 = (uint64_t *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  char v14 = *(unsigned char *)(v0 + v3);

  return sub_10027FE20(v6, v7, v14, v8, v9, v10, v12, v13);
}

uint64_t sub_10028784C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10028785C()
{
  return swift_release();
}

uint64_t sub_100287864()
{
  swift_release();

  return _swift_deallocObject(v0, 33, 7);
}

uint64_t sub_10028789C()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_1002878CC(unsigned __int8 a1, void *a2)
{
  int v3 = a1;
  sub_10000588C(&qword_10163FFA8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v5;
  sub_10000588C((uint64_t *)&unk_101657C90);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101347BA0;
  *(_OWORD *)(v6 + 32) = xmmword_101351D10;
  *(void *)(inited + 48) = v6;
  unint64_t v7 = sub_10092E18C(inited);
  if (v3 != 8) {
    goto LABEL_6;
  }
  id v8 = [a2 domain];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  if (!*(void *)(v7 + 16) || (uint64_t v12 = sub_100723FF4(v9, v11), (v13 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    char v15 = 0;
    return v15 & 1;
  }
  uint64_t v14 = *(void *)(*(void *)(v7 + 56) + 8 * v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v15 = sub_100272E60((uint64_t)[a2 code], v14);
  swift_bridgeObjectRelease();
  return v15 & 1;
}

uint64_t sub_100287A28(size_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v100 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v96 = *(void *)(v7 - 8);
  uint64_t v97 = v7;
  __chkstk_darwin(v7);
  size_t v95 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101655530);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v94 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  char v13 = (char *)&v86 - v12;
  uint64_t v14 = type metadata accessor for BeaconObservation();
  uint64_t v104 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v102 = (uint64_t)&v86 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v99 = (char *)&v86 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v24 = (unint64_t)&v86 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v103 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v86 - v26);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v86 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v86 - v30;
  if (!a4) {
    goto LABEL_18;
  }
  uint64_t v32 = (void *)_convertErrorToNSError(_:)();
  if ((sub_1002878CC(a3, v32) & 1) == 0)
  {

LABEL_18:
    uint64_t v47 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16))(v17, v100, v47);
    static Date.trustedNow.getter((uint64_t)&v17[*(int *)(v14 + 20)]);
    v17[*(int *)(v14 + 24)] = a3;
    sub_10000588C(&qword_10163A778);
    unint64_t v48 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_101342130;
    sub_1002892E4((uint64_t)v17, v49 + v48, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v50 = type metadata accessor for Transaction();
    __chkstk_darwin(v50);
    *(&v86 - 4) = v51;
    *(&v86 - 3) = v49;
    *(&v86 - 2) = 0;
    *(&v86 - 1) = 0;
    static Transaction.named<A>(_:with:)();
    swift_bridgeObjectRelease();
    uint64_t v52 = (uint64_t)v17;
    return sub_100289434(v52, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  }
  id v91 = v32;
  uint64_t v92 = v13;
  uint64_t v90 = v31;
  static os_log_type_t.default.getter();
  if (qword_1016372F8 != -1) {
    goto LABEL_47;
  }
  while (1)
  {
    os_log(_:dso:log:_:_:)();
    uint64_t v34 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
    uint64_t v93 = sub_10000588C(&qword_101655540);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v35 = v105;
    uint64_t v36 = v105[2];
    uint64_t v101 = v14;
    uint64_t v98 = v34;
    if (!v36) {
      goto LABEL_20;
    }
    unint64_t v37 = sub_1007240CC(v100);
    if (v38)
    {
      uint64_t v87 = v33;
      size_t v89 = a1;
      uint64_t v39 = *(void *)(v35[7] + 8 * v37);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v40 = sub_1007100C0(v39);
      swift_bridgeObjectRelease();
      size_t v41 = sub_100B752E8((uint64_t)v40);
      swift_release();
      size_t v42 = _swiftEmptyArrayStorage;
      uint64_t v105 = _swiftEmptyArrayStorage;
      a1 = *(void *)(v41 + 16);
      if (a1)
      {
        unint64_t v88 = v24;
        unint64_t v24 = 0;
        while (v24 < *(void *)(v41 + 16))
        {
          unint64_t v43 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
          uint64_t v44 = *(void *)(v104 + 72);
          sub_1002892E4(v41 + v43 + v44 * v24, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          if (v29[*(int *)(v14 + 24)] == 9)
          {
            sub_100289360((uint64_t)v29, (uint64_t)v103, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_1000B77F0(0, v42[2] + 1, 1);
            }
            size_t v42 = v105;
            unint64_t v46 = v105[2];
            unint64_t v45 = v105[3];
            if (v46 >= v45 >> 1)
            {
              sub_1000B77F0(v45 > 1, v46 + 1, 1);
              size_t v42 = v105;
            }
            id v42[2] = v46 + 1;
            sub_100289360((uint64_t)v103, (uint64_t)v42 + v43 + v46 * v44, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
            uint64_t v14 = v101;
          }
          else
          {
            sub_100289434((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          }
          if (a1 == ++v24)
          {
            size_t v42 = v105;
            unint64_t v24 = v88;
            goto LABEL_22;
          }
        }
        __break(1u);
        goto LABEL_46;
      }
LABEL_22:
      swift_release();
      a1 = v89;
      uint64_t v33 = v87;
    }
    else
    {
LABEL_20:
      swift_bridgeObjectRelease();
      size_t v42 = _swiftEmptyArrayStorage;
    }
    uint64_t v54 = (uint64_t)v92;
    sub_100E4D5E0((uint64_t)v42, (uint64_t)v92);
    swift_bridgeObjectRelease();
    uint64_t v29 = (char *)(v104 + 48);
    uint64_t v103 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48);
    if (v103(v54, 1, v14) == 1)
    {
      sub_10001DAB4(v54, (uint64_t *)&unk_101655530);
    }
    else
    {
      uint64_t v55 = (uint64_t)v90;
      uint64_t v56 = sub_100289360(v54, (uint64_t)v90, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      __chkstk_darwin(v56);
      *(&v86 - 2) = v55;
      uint64_t v57 = v95;
      uint64_t v58 = static DispatchWorkItemFlags.barrier.getter();
      __chkstk_darwin(v58);
      uint64_t v59 = v100;
      *(&v86 - 4) = a1;
      *(&v86 - 3) = v59;
      *(&v86 - 2) = (uint64_t)sub_1002895FC;
      *(&v86 - 1) = (uint64_t)(&v86 - 4);
      OS_dispatch_queue.sync<A>(flags:execute:)();
      (*(void (**)(char *, uint64_t))(v96 + 8))(v57, v97);
      static os_log_type_t.default.getter();
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v60 = swift_allocObject();
      *(_OWORD *)(v60 + 16) = xmmword_101342130;
      type metadata accessor for Date();
      sub_100289604((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v63 = v62;
      *(void *)(v60 + 56) = &type metadata for String;
      *(void *)(v60 + 64) = sub_10000B4CC();
      *(void *)(v60 + 32) = v61;
      *(void *)(v60 + 40) = v63;
      os_log(_:dso:log:_:_:)();
      uint64_t v14 = v101;
      swift_bridgeObjectRelease();
      sub_100289434(v55, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    }
    uint64_t v64 = (uint64_t)v99;
    OS_dispatch_queue.sync<A>(execute:)();
    int v65 = v105;
    if (!v105[2] || (unint64_t v66 = sub_1007240CC(v100), (v67 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      BOOL v70 = _swiftEmptyArrayStorage;
      uint64_t v76 = (uint64_t)v94;
      goto LABEL_42;
    }
    size_t v89 = a1;
    uint64_t v68 = *(void *)(v65[7] + 8 * v66);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v69 = sub_1007100C0(v68);
    swift_bridgeObjectRelease();
    a1 = sub_100B752E8((uint64_t)v69);
    swift_release();
    BOOL v70 = _swiftEmptyArrayStorage;
    uint64_t v105 = _swiftEmptyArrayStorage;
    uint64_t v71 = *(void *)(a1 + 16);
    if (!v71) {
      break;
    }
    unint64_t v88 = v24;
    unint64_t v24 = 0;
    while (v24 < *(void *)(a1 + 16))
    {
      unint64_t v72 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
      uint64_t v73 = *(void *)(v104 + 72);
      sub_1002892E4(a1 + v72 + v73 * v24, v64, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (*(unsigned char *)(v64 + *(int *)(v14 + 24)) == 6)
      {
        sub_100289360(v64, v102, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B77F0(0, v70[2] + 1, 1);
        }
        BOOL v70 = v105;
        unint64_t v75 = v105[2];
        unint64_t v74 = v105[3];
        if (v75 >= v74 >> 1)
        {
          sub_1000B77F0(v74 > 1, v75 + 1, 1);
          BOOL v70 = v105;
        }
        v70[2] = v75 + 1;
        sub_100289360(v102, (uint64_t)v70 + v72 + v75 * v73, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v14 = v101;
        uint64_t v64 = (uint64_t)v99;
      }
      else
      {
        sub_100289434(v64, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      }
      if (v71 == ++v24)
      {
        BOOL v70 = v105;
        unint64_t v24 = v88;
        goto LABEL_41;
      }
    }
LABEL_46:
    __break(1u);
LABEL_47:
    swift_once();
  }
LABEL_41:
  swift_release();
  a1 = v89;
  uint64_t v76 = (uint64_t)v94;
LABEL_42:
  sub_100E4D5E0((uint64_t)v70, v76);
  swift_bridgeObjectRelease();
  if (v103(v76, 1, v14) != 1)
  {
    uint64_t v77 = sub_100289360(v76, v24, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    __chkstk_darwin(v77);
    *(&v86 - 2) = v24;
    uint64_t v78 = v95;
    uint64_t v79 = static DispatchWorkItemFlags.barrier.getter();
    unint64_t v80 = v24;
    __chkstk_darwin(v79);
    uint64_t v81 = v100;
    *(&v86 - 4) = a1;
    *(&v86 - 3) = v81;
    *(&v86 - 2) = (uint64_t)sub_1002895FC;
    *(&v86 - 1) = (uint64_t)(&v86 - 4);
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v78, v97);
    static os_log_type_t.default.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v82 = swift_allocObject();
    *(_OWORD *)(v82 + 16) = xmmword_101342130;
    type metadata accessor for Date();
    sub_100289604((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v85 = v84;
    *(void *)(v82 + 56) = &type metadata for String;
    *(void *)(v82 + 64) = sub_10000B4CC();
    *(void *)(v82 + 32) = v83;
    *(void *)(v82 + 40) = v85;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    uint64_t v52 = v80;
    return sub_100289434(v52, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  }

  return sub_10001DAB4(v76, (uint64_t *)&unk_101655530);
}

uint64_t sub_100288758(uint64_t a1)
{
  return sub_101079F34(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100288778()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (v4 + *(void *)(v2 + 64) + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_errorRelease();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100288874()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  unint64_t v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = *(void *)(v0 + v5);
  uint64_t v9 = *(void *)(v0 + v5 + 8);
  char v10 = *(unsigned char *)(v0 + v5 + 16);
  uint64_t v11 = *(void *)(v0 + ((v4 + 31) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v12;
  *uint64_t v12 = v1;
  v12[1] = sub_100033F68;
  return sub_100283B00(v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1002889AC()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_100033F68;
  return sub_100284730(v4, v5, v7, v8);
}

uint64_t sub_100288AC4()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100033F68;
  return sub_1002815E0(v3, v4);
}

uint64_t sub_100288B98(uint64_t a1)
{
  return a1;
}

uint64_t sub_100288BF0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100288CDC()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  unint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_100033F68;
  return sub_1002833DC(v4, v5, v7, v8);
}

uint64_t sub_100288DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101639428);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100288E64@<X0>(BOOL *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t result = sub_10069422C(v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), *(void *)(v1 + 16));
  *a1 = result == 0;
  return result;
}

uint64_t sub_100288ED8()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  char v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_10028925C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100282ED8(v4, a1);
}

unint64_t sub_1002892D0()
{
  return sub_100283014(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(unsigned __int8 *)(v0 + 41));
}

uint64_t sub_1002892E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_10028934C()
{
}

uint64_t sub_100289358()
{
  return sub_1002855C4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100289360(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002893C8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100289400(uint64_t a1)
{
  return sub_1002859FC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10028940C(uint64_t a1)
{
  return sub_100285A54(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), *(void (**)(void))(v1 + 32), *(void *)(v1 + 40), &qword_10163FFA0);
}

uint64_t sub_100289434(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100289494(uint64_t a1)
{
  return sub_1002859A4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002894A0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002894E0(uint64_t a1)
{
  return sub_100285A54(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), *(void (**)(void))(v1 + 32), *(void *)(v1 + 40), (uint64_t *)&unk_101656900);
}

uint64_t sub_10028950C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10028954C()
{
}

uint64_t sub_100289584@<X0>(uint64_t a1@<X8>)
{
  return sub_100ACD178(a1);
}

unint64_t sub_1002895F0()
{
  return sub_100285054(v0[2], v0[3], v0[4]);
}

uint64_t sub_1002895FC(uint64_t a1)
{
  return sub_100285364(a1, *(void *)(v1 + 16));
}

uint64_t sub_100289604(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10028964C(uint64_t a1)
{
  sub_10027E918(a1, *(void *)(v1 + 16));
}

uint64_t sub_100289654()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100289694(char a1)
{
  return sub_10027E6D4(a1, *(char **)(v1 + 16), *(uint64_t (**)(void *))(v1 + 24));
}

void sub_1002896A0(uint64_t *a1@<X8>)
{
  sub_1007B6030(v1, a1);
}

uint64_t sub_1002896BC()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10028970C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10001D2E4;
  return sub_10027F134(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1002897E0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100289818()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

void sub_100289858()
{
}

uint64_t sub_10028987C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  if (a4)
  {
    if (a8)
    {
      uint64_t updated = type metadata accessor for ItemShareAirTagCircleUpdateWithBlockedContactUserNotification(0);
      uint64_t v18 = (int *)updated;
      uint64_t v19 = &off_1015B7328;
    }
    else
    {
      uint64_t updated = type metadata accessor for ItemShareAirTagCircleUpdateUserNotification(0);
      uint64_t v18 = (int *)updated;
      uint64_t v19 = &off_1015B7368;
    }
  }
  else if (a8)
  {
    uint64_t updated = type metadata accessor for ItemShareCircleUpdateWithBlockedContactUserNotification(0);
    uint64_t v18 = (int *)updated;
    uint64_t v19 = &off_1015B73A8;
  }
  else
  {
    uint64_t updated = type metadata accessor for ItemShareCircleUpdateUserNotification(0);
    uint64_t v18 = (int *)updated;
    uint64_t v19 = &off_1015B73E8;
  }
  uint64_t v29 = updated;
  uint64_t v30 = v19;
  uint64_t v20 = sub_10001D958((uint64_t *)&v28);
  sub_10028B744(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v21 = (char *)v20 + v18[6];
  uint64_t v22 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v21, a5, v22);
  uint64_t v23 = (uint64_t *)((char *)v20 + v18[5]);
  *uint64_t v23 = a2;
  v23[1] = a3;
  unint64_t v24 = (uint64_t *)((char *)v20 + v18[7]);
  *unint64_t v24 = a6;
  v24[1] = a7;
  uint64_t v25 = (uint64_t *)((char *)v20 + v18[8]);
  *uint64_t v25 = a10;
  v25[1] = a11;
  sub_10001CEB0(&v28, a9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for ItemShareCircleUpdateUserNotification(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101640200);
}

uint64_t type metadata accessor for ItemShareCircleUpdateWithBlockedContactUserNotification(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101640160);
}

uint64_t type metadata accessor for ItemShareAirTagCircleUpdateUserNotification(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016400C0);
}

uint64_t type metadata accessor for ItemShareAirTagCircleUpdateWithBlockedContactUserNotification(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101640020);
}

uint64_t sub_100289A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100289AA4);
}

uint64_t sub_100289AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100289ABC);
}

uint64_t sub_100289AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100289AD8);
}

uint64_t sub_100289ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100289AF0);
}

uint64_t sub_100289AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100289B08);
}

uint64_t sub_100289B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100289B20);
}

uint64_t *sub_100289B24(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v30 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = (int *)type metadata accessor for MemberSharingCircle();
    uint64_t v10 = v9[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UUID();
    unint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    v14((char *)a1 + v9[6], (char *)a2 + v9[6], v13);
    v14((char *)a1 + v9[7], (char *)a2 + v9[7], v13);
    v14((char *)a1 + v9[8], (char *)a2 + v9[8], v13);
    *(uint64_t *)((char *)a1 + v9[9]) = *(uint64_t *)((char *)a2 + v9[9]);
    *((unsigned char *)a1 + v9[10]) = *((unsigned char *)a2 + v9[10]);
    uint64_t v15 = a3[5];
    uint64_t v16 = a3[6];
    uint64_t v17 = (uint64_t *)((char *)a1 + v15);
    uint64_t v18 = (uint64_t *)((char *)a2 + v15);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = (char *)a1 + v16;
    uint64_t v21 = (char *)a2 + v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v20, v21, v13);
    uint64_t v22 = a3[7];
    uint64_t v23 = a3[8];
    unint64_t v24 = (uint64_t *)((char *)a1 + v22);
    uint64_t v25 = (uint64_t *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    *unint64_t v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = (uint64_t *)((char *)a1 + v23);
    long long v28 = (uint64_t *)((char *)a2 + v23);
    uint64_t v29 = v28[1];
    *uint64_t v27 = *v28;
    v27[1] = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100289D08(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = (int *)type metadata accessor for MemberSharingCircle();
  uint64_t v5 = a1 + v4[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(a1 + v4[6], v6);
  v7(a1 + v4[7], v6);
  v7(a1 + v4[8], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7(a1 + *(int *)(a2 + 24), v6);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *sub_100289E48(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  unint64_t v8 = (int *)type metadata accessor for MemberSharingCircle();
  uint64_t v9 = v8[5];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  v13(v10, v11, v12);
  v13((char *)a1 + v8[6], (char *)a2 + v8[6], v12);
  v13((char *)a1 + v8[7], (char *)a2 + v8[7], v12);
  v13((char *)a1 + v8[8], (char *)a2 + v8[8], v12);
  *(uint64_t *)((char *)a1 + v8[9]) = *(uint64_t *)((char *)a2 + v8[9]);
  *((unsigned char *)a1 + v8[10]) = *((unsigned char *)a2 + v8[10]);
  uint64_t v14 = a3[5];
  uint64_t v15 = a3[6];
  uint64_t v16 = (uint64_t *)((char *)a1 + v14);
  uint64_t v17 = (uint64_t *)((char *)a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = (char *)a1 + v15;
  uint64_t v20 = (char *)a2 + v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v19, v20, v12);
  uint64_t v21 = a3[7];
  uint64_t v22 = a3[8];
  uint64_t v23 = (uint64_t *)((char *)a1 + v21);
  unint64_t v24 = (uint64_t *)((char *)a2 + v21);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = (uint64_t *)((char *)a1 + v22);
  uint64_t v27 = (uint64_t *)((char *)a2 + v22);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_100289FDC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = (int *)type metadata accessor for MemberSharingCircle();
  uint64_t v11 = v10[5];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24);
  v15(v12, v13, v14);
  v15((char *)a1 + v10[6], (char *)a2 + v10[6], v14);
  v15((char *)a1 + v10[7], (char *)a2 + v10[7], v14);
  v15((char *)a1 + v10[8], (char *)a2 + v10[8], v14);
  *(uint64_t *)((char *)a1 + v10[9]) = *(uint64_t *)((char *)a2 + v10[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v10[10]) = *((unsigned char *)a2 + v10[10]);
  uint64_t v16 = a3[5];
  uint64_t v17 = (uint64_t *)((char *)a1 + v16);
  uint64_t v18 = (uint64_t *)((char *)a2 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15((char *)a1 + a3[6], (char *)a2 + a3[6], v14);
  uint64_t v19 = a3[7];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = (uint64_t *)((char *)a1 + v22);
  unint64_t v24 = (uint64_t *)((char *)a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_10028A1B8(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = (int *)type metadata accessor for MemberSharingCircle();
  uint64_t v7 = v6[5];
  uint64_t v8 = &a1[v7];
  unint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(&a1[v6[6]], &a2[v6[6]], v10);
  v11(&a1[v6[7]], &a2[v6[7]], v10);
  v11(&a1[v6[8]], &a2[v6[8]], v10);
  *(void *)&a1[v6[9]] = *(void *)&a2[v6[9]];
  a1[v6[10]] = a2[v6[10]];
  uint64_t v12 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  v11(&a1[v12], &a2[v12], v10);
  uint64_t v13 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  return a1;
}

uint64_t *sub_10028A308(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = (int *)type metadata accessor for MemberSharingCircle();
  uint64_t v9 = v8[5];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40);
  v13(v10, v11, v12);
  v13((char *)a1 + v8[6], &a2[v8[6]], v12);
  v13((char *)a1 + v8[7], &a2[v8[7]], v12);
  v13((char *)a1 + v8[8], &a2[v8[8]], v12);
  *(uint64_t *)((char *)a1 + v8[9]) = *(void *)&a2[v8[9]];
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + v8[10]) = a2[v8[10]];
  uint64_t v14 = a3[5];
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)&a2[v14];
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  v13((char *)a1 + a3[6], &a2[a3[6]], v12);
  uint64_t v19 = a3[7];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)&a2[v19];
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[8];
  uint64_t v25 = (uint64_t *)((char *)a1 + v24);
  uint64_t v26 = (uint64_t *)&a2[v24];
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10028A4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10028A4B8);
}

uint64_t sub_10028A4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MemberSharingCircle();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 24);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_10028A5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10028A600);
}

uint64_t sub_10028A604(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MemberSharingCircle();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_10028A734()
{
  uint64_t result = type metadata accessor for MemberSharingCircle();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_10028A808(uint64_t (*a1)(void))
{
  uint64_t v3 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000588C(&qword_1016552B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  uint64_t v8 = (void *)(v1 + *(int *)(a1(0) + 20));
  uint64_t v9 = v8[1];
  *(void *)(inited + 32) = *v8;
  *(void *)(inited + 40) = v9;
  (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v6, enum case for LocalizationUtility.Table.itemSharing(_:), v3);
  swift_bridgeObjectRetain();
  static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100A9A508(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v10 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10028A9D0(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  v21[0] = a2;
  v21[1] = a3;
  uint64_t v5 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_1016552B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347BA0;
  uint64_t v10 = a1(0);
  uint64_t v11 = *(void *)(v3 + *(int *)(v10 + 32));
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_101115048(v11);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  *(void *)(inited + 32) = v12;
  *(void *)(inited + 40) = v14;
  uint64_t v15 = *(void *)(v3 + *(int *)(v10 + 28));
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_101115048(v15);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v16;
  *(void *)(inited + 56) = v18;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for LocalizationUtility.Table.itemSharing(_:), v5);
  static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100A9A508(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v19 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19;
}

unint64_t sub_10028ABE4(uint64_t (*a1)(void), void (*a2)(uint64_t *, char *), uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t v52 = a4;
  unint64_t v53 = a3;
  uint64_t v49 = a1(0);
  uint64_t v6 = __chkstk_darwin(v49);
  uint64_t v54 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v51 = (uint64_t)&v47 - v8;
  uint64_t v9 = type metadata accessor for MemberSharingCircle();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10163B8A0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v48 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10028B744(v4, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v50 = v9;
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = sub_10070FB1C(v21);
  swift_bridgeObjectRelease();
  uint64_t v57 = v11;
  uint64_t v23 = sub_1000D137C((uint64_t)_swiftEmptyDictionarySingleton, a2, (uint64_t)v56, v22);
  swift_release();
  sub_10028B7AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v55 = v4;
  sub_100E4E45C(v53, v23, (uint64_t)v14);
  swift_bridgeObjectRelease();
  uint64_t v24 = sub_10000588C(&qword_101661010);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v14, 1, v24) == 1)
  {
    sub_10001DAB4((uint64_t)v14, &qword_10163B8A0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
  }
  else
  {
    uint64_t v25 = &v14[*(int *)(v24 + 48)];
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v26(v17, v14, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
    uint64_t v27 = *(void (**)(char *, uint64_t))(v19 + 8);
    v27(v25, v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
    {
      size_t v42 = v48;
      v26(v48, v17, v18);
      sub_10000588C((uint64_t *)&unk_101637F00);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_101342130;
      *(void *)(inited + 32) = 0x6564496572616873;
      *(void *)(inited + 40) = 0xEF7265696669746ELL;
      uint64_t v44 = UUID.uuidString.getter();
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = v44;
      *(void *)(inited + 56) = v45;
      unint64_t v41 = sub_10092CEEC(inited);
      v27(v42, v18);
      return v41;
    }
  }
  sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_100010324(v28, (uint64_t)qword_10170D788);
  uint64_t v29 = v51;
  uint64_t v30 = v52;
  sub_10028B744(v4, v51, v52);
  uint64_t v31 = v54;
  sub_10028B744(v4, v54, v30);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v35 = (uint64_t (*)(uint64_t))swift_slowAlloc();
    unint64_t v53 = v35;
    *(_DWORD *)uint64_t v34 = 141558787;
    uint64_t v58 = 1752392040;
    v59[0] = (uint64_t)v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v34 + 12) = 2081;
    sub_10028B80C();
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v58 = sub_1008FA0F0(v36, v37, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10028B7AC(v29, v30);
    *(_WORD *)(v34 + 22) = 2160;
    uint64_t v58 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v34 + 32) = 2081;
    uint64_t v38 = v54;
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v58 = sub_1008FA0F0(v39, v40, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10028B7AC(v38, v30);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to find client share identifier for transparency notification. Member %{private,mask.hash}s,\ncircle: %{private,mask.hash}s.", (uint8_t *)v34, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10028B7AC(v29, v30);
    sub_10028B7AC(v31, v30);
  }

  return sub_10092CEEC((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_10028B314()
{
  return 99;
}

uint64_t sub_10028B320()
{
  return sub_10028A808(type metadata accessor for ItemShareCircleUpdateUserNotification);
}

uint64_t sub_10028B34C()
{
  return sub_10028A9D0(type metadata accessor for ItemShareCircleUpdateUserNotification, 0xD000000000000035, 0x80000001013F76B0);
}

unint64_t sub_10028B390()
{
  return sub_10028ABE4(type metadata accessor for ItemShareCircleUpdateUserNotification, (void (*)(uint64_t *, char *))sub_10028B968, sub_10028B938, type metadata accessor for ItemShareCircleUpdateUserNotification);
}

uint64_t sub_10028B3F8()
{
  return sub_10028A808(type metadata accessor for ItemShareAirTagCircleUpdateUserNotification);
}

uint64_t sub_10028B424()
{
  return sub_10028A9D0(type metadata accessor for ItemShareAirTagCircleUpdateUserNotification, 0xD000000000000037, 0x80000001013F7620);
}

unint64_t sub_10028B468()
{
  return sub_10028ABE4(type metadata accessor for ItemShareAirTagCircleUpdateUserNotification, (void (*)(uint64_t *, char *))sub_10028B968, sub_10028B864, type metadata accessor for ItemShareAirTagCircleUpdateUserNotification);
}

uint64_t sub_10028B4D0()
{
  return sub_10028A808(type metadata accessor for ItemShareCircleUpdateWithBlockedContactUserNotification);
}

uint64_t sub_10028B4FC()
{
  return sub_10028A9D0(type metadata accessor for ItemShareCircleUpdateWithBlockedContactUserNotification, 0xD000000000000044, 0x80000001013F7660);
}

unint64_t sub_10028B540()
{
  return sub_10028ABE4(type metadata accessor for ItemShareCircleUpdateWithBlockedContactUserNotification, (void (*)(uint64_t *, char *))sub_10028B968, sub_10028B908, type metadata accessor for ItemShareCircleUpdateWithBlockedContactUserNotification);
}

uint64_t sub_10028B5A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MemberSharingCircle() + 28);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10028B620()
{
  return sub_10028A808(type metadata accessor for ItemShareAirTagCircleUpdateWithBlockedContactUserNotification);
}

uint64_t sub_10028B64C()
{
  return sub_10028A9D0(type metadata accessor for ItemShareAirTagCircleUpdateWithBlockedContactUserNotification, 0xD000000000000046, 0x80000001013F75A0);
}

unint64_t sub_10028B690()
{
  return sub_10028ABE4(type metadata accessor for ItemShareAirTagCircleUpdateWithBlockedContactUserNotification, (void (*)(uint64_t *, char *))sub_10028B6F8, sub_10028B714, type metadata accessor for ItemShareAirTagCircleUpdateWithBlockedContactUserNotification);
}

uint64_t sub_10028B6F8(uint64_t a1, char *a2)
{
  return sub_1001299CC(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10028B714(uint64_t a1)
{
  return sub_10028B894(a1, (void (*)(void))type metadata accessor for ItemShareAirTagCircleUpdateWithBlockedContactUserNotification) & 1;
}

uint64_t sub_10028B744(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10028B7AC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10028B80C()
{
  unint64_t result = qword_101638B10;
  if (!qword_101638B10)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101638B10);
  }
  return result;
}

uint64_t sub_10028B864(uint64_t a1)
{
  return sub_10028B894(a1, (void (*)(void))type metadata accessor for ItemShareAirTagCircleUpdateUserNotification) & 1;
}

uint64_t sub_10028B894(uint64_t a1, void (*a2)(void))
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_10028B908(uint64_t a1)
{
  return sub_10028B894(a1, (void (*)(void))type metadata accessor for ItemShareCircleUpdateWithBlockedContactUserNotification) & 1;
}

uint64_t sub_10028B938(uint64_t a1)
{
  return sub_10028B894(a1, (void (*)(void))type metadata accessor for ItemShareCircleUpdateUserNotification) & 1;
}

uint64_t sub_10028B968(uint64_t a1, char *a2)
{
  return sub_10028B6F8(a1, a2);
}

uint64_t sub_10028B980()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170DA40);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170DA40);
  if (qword_101636938 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170DA58);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10028BA48(uint64_t a1)
{
  v2[29] = a1;
  v2[30] = v1;
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v2[31] = v3;
  v2[32] = *(void *)(v3 - 8);
  v2[33] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[34] = v4;
  v2[35] = *(void *)(v4 - 8);
  v2[36] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant();
  v2[37] = v5;
  v2[38] = *(void *)(v5 - 8);
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v2[42] = v6;
  v2[43] = *(void *)(v6 - 8);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  return _swift_task_switch(sub_10028BC48, v1, 0);
}

uint64_t sub_10028BC48()
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 200) = 0x7365547265646E75;
  *(void *)(v0 + 208) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 392))
  {
    uint64_t v1 = type metadata accessor for GenericError();
    sub_10028DEC0((unint64_t *)&qword_10163A240, 255, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    void *v2 = 0xD00000000000001ELL;
    v2[1] = 0x80000001013F7740;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v1 - 8) + 104))(v2, enum case for GenericError.error(_:), v1);
    swift_willThrow();
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  ContinuousClock.init()();
  if (qword_101636930 != -1) {
    swift_once();
  }
  *(void *)(v0 + 368) = sub_100010324(*(void *)(v0 + 272), (uint64_t)qword_10170DA40);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Retrieving fmipAccount info...", v5, 2u);
    swift_slowDealloc();
  }

  ContinuousClock.now.getter();
  id v6 = [self defaultStore];
  *(void *)(v0 + 376) = v6;
  if (!v6)
  {
    uint64_t v9 = *(void *)(v0 + 360);
    uint64_t v10 = *(void *)(v0 + 336);
    uint64_t v11 = *(void *)(v0 + 344);
    uint64_t v12 = *(void *)(v0 + 328);
    uint64_t v13 = *(void *)(v0 + 296);
    uint64_t v14 = *(void *)(v0 + 304);
    sub_10028DE6C();
    swift_allocError();
    *uint64_t v15 = 0;
    v15[1] = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    goto LABEL_14;
  }
  uint64_t v7 = v6;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 216;
  *(void *)(v0 + 24) = sub_10028C09C;
  uint64_t v8 = swift_continuation_init();
  *(void *)(v0 + 160) = _NSConcreteStackBlock;
  *(void *)(v0 + 168) = 0x40000000;
  *(void *)(v0 + 176) = sub_100C27604;
  *(void *)(v0 + 184) = &unk_1015B74B0;
  *(void *)(v0 + 192) = v8;
  [v7 aa_primaryAppleAccountWithCompletion:v0 + 160];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_10028C09C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 384) = v2;
  uint64_t v3 = *(void *)(v1 + 240);
  if (v2) {
    os_log_type_t v4 = sub_10028C72C;
  }
  else {
    os_log_type_t v4 = sub_10028C1BC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10028C1BC()
{
  uint64_t v56 = v0;
  uint64_t v1 = *(void **)(v0 + 216);
  if (v1)
  {
    if ((static SystemInfo.underTest.getter() & 1) == 0)
    {
      id v52 = v1;
      uint64_t v53 = *(void *)(v0 + 360);
      uint64_t v10 = *(void *)(v0 + 344);
      uint64_t v9 = *(void *)(v0 + 352);
      uint64_t v12 = *(void *)(v0 + 328);
      uint64_t v11 = *(void *)(v0 + 336);
      uint64_t v13 = *(void *)(v0 + 320);
      uint64_t v15 = *(void *)(v0 + 296);
      uint64_t v14 = *(void *)(v0 + 304);
      (*(void (**)(void, void, void))(*(void *)(v0 + 280) + 16))(*(void *)(v0 + 288), *(void *)(v0 + 368), *(void *)(v0 + 272));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v12, v15);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v53, v11);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      uint64_t v54 = v16;
      BOOL v18 = os_log_type_enabled(v16, v17);
      uint64_t v19 = *(void *)(v0 + 344);
      uint64_t v20 = *(void *)(v0 + 352);
      uint64_t v21 = *(void *)(v0 + 320);
      if (v18)
      {
        uint64_t v47 = *(void *)(v0 + 336);
        uint64_t v22 = *(void *)(v0 + 312);
        uint64_t v45 = *(void *)(v0 + 304);
        uint64_t v43 = *(void *)(v0 + 296);
        uint64_t v49 = *(void *)(v0 + 280);
        uint64_t v23 = *(void *)(v0 + 264);
        uint64_t v50 = *(void *)(v0 + 272);
        uint64_t v51 = *(void *)(v0 + 288);
        uint64_t v24 = *(void *)(v0 + 256);
        uint64_t v44 = *(void *)(v0 + 248);
        os_log_type_t type = v17;
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v55 = swift_slowAlloc();
        buf = v25;
        *(_DWORD *)uint64_t v25 = 136315138;
        ContinuousClock.now.getter();
        static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
        sub_10028DEC0(&qword_101653DE0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
        uint64_t v26 = static Duration.description<A>(_:_:units:)();
        unint64_t v28 = v27;
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v44);
        uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
        v29(v22, v43);
        *(void *)(v0 + 224) = sub_1008FA0F0(v26, v28, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v29(v21, v43);
        uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
        v30(v20, v47);
        _os_log_impl((void *)&_mh_execute_header, v54, type, "aa_primaryAppleAccount fetch duration: %s", buf, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v51, v50);
      }
      else
      {
        uint64_t v31 = *(void *)(v0 + 336);
        uint64_t v33 = *(void *)(v0 + 280);
        uint64_t v32 = *(void *)(v0 + 288);
        uint64_t v34 = *(void *)(v0 + 272);
        uint64_t v29 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 304) + 8);
        v29(*(void *)(v0 + 320), *(void *)(v0 + 296));
        uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
        v30(v20, v31);

        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
      }
      sub_10028DF70(v52, *(void **)(v0 + 376), (uint64_t *)(v0 + 80));
      uint64_t v35 = *(void *)(v0 + 360);
      uint64_t v38 = *(void *)(v0 + 336);
      uint64_t v39 = *(_OWORD **)(v0 + 232);
      v29(*(void *)(v0 + 328), *(void *)(v0 + 296));
      v30(v35, v38);
      *uint64_t v39 = *(_OWORD *)(v0 + 80);
      long long v40 = *(_OWORD *)(v0 + 96);
      long long v41 = *(_OWORD *)(v0 + 112);
      long long v42 = *(_OWORD *)(v0 + 144);
      v39[3] = *(_OWORD *)(v0 + 128);
      v39[4] = v42;
      v39[1] = v40;
      v39[2] = v41;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_10;
    }
  }
  else
  {
  }
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v5 = *(void *)(v0 + 328);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 304);
  sub_10028DE6C();
  swift_allocError();
  *uint64_t v8 = 0;
  v8[1] = 0;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
LABEL_10:
  return v36();
}

uint64_t sub_10028C72C()
{
  uint64_t v1 = (void *)v0[47];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[42];
  uint64_t v4 = v0[43];
  uint64_t v5 = v0[41];
  uint64_t v6 = v0[37];
  uint64_t v7 = v0[38];
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10028C83C(uint64_t a1)
{
  v2[19] = a1;
  v2[20] = v1;
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v2[21] = v3;
  v2[22] = *(void *)(v3 - 8);
  v2[23] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[24] = v4;
  v2[25] = *(void *)(v4 - 8);
  v2[26] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant();
  v2[27] = v5;
  v2[28] = *(void *)(v5 - 8);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v2[32] = v6;
  v2[33] = *(void *)(v6 - 8);
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  return _swift_task_switch(sub_10028CA3C, v1, 0);
}

uint64_t sub_10028CA3C()
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 120) = 0x7365547265646E75;
  *(void *)(v0 + 128) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 312))
  {
    uint64_t v1 = type metadata accessor for GenericError();
    sub_10028DEC0((unint64_t *)&qword_10163A240, 255, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    void *v2 = 0xD00000000000001ELL;
    v2[1] = 0x80000001013F7740;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v1 - 8) + 104))(v2, enum case for GenericError.error(_:), v1);
    swift_willThrow();
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  ContinuousClock.init()();
  if (qword_101636930 != -1) {
    swift_once();
  }
  *(void *)(v0 + 288) = sub_100010324(*(void *)(v0 + 192), (uint64_t)qword_10170DA40);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Retrieving searchpartyAccount info...", v5, 2u);
    swift_slowDealloc();
  }

  ContinuousClock.now.getter();
  id v6 = [self defaultStore];
  *(void *)(v0 + 296) = v6;
  if (!v6)
  {
    uint64_t v9 = *(void *)(v0 + 280);
    uint64_t v10 = *(void *)(v0 + 256);
    uint64_t v11 = *(void *)(v0 + 264);
    uint64_t v12 = *(void *)(v0 + 248);
    uint64_t v13 = *(void *)(v0 + 216);
    uint64_t v14 = *(void *)(v0 + 224);
    sub_10028DE6C();
    swift_allocError();
    *uint64_t v15 = 0;
    v15[1] = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    goto LABEL_14;
  }
  uint64_t v7 = v6;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 136;
  *(void *)(v0 + 24) = sub_10028CE90;
  uint64_t v8 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_100C27604;
  *(void *)(v0 + 104) = &unk_1015B7498;
  *(void *)(v0 + 112) = v8;
  [v7 aa_primaryAppleAccountWithCompletion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_10028CE90()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 304) = v2;
  uint64_t v3 = *(void *)(v1 + 160);
  if (v2) {
    os_log_type_t v4 = sub_10028D4F4;
  }
  else {
    os_log_type_t v4 = sub_10028CFB0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10028CFB0()
{
  uint64_t v53 = v0;
  uint64_t v1 = *(void **)(v0 + 136);
  if (v1)
  {
    if ((static SystemInfo.underTest.getter() & 1) == 0)
    {
      uint64_t v49 = v1;
      uint64_t v50 = *(void *)(v0 + 280);
      uint64_t v9 = *(void *)(v0 + 264);
      uint64_t v10 = *(void *)(v0 + 272);
      uint64_t v12 = *(void *)(v0 + 248);
      uint64_t v11 = *(void *)(v0 + 256);
      uint64_t v13 = *(void *)(v0 + 240);
      uint64_t v15 = *(void *)(v0 + 216);
      uint64_t v14 = *(void *)(v0 + 224);
      (*(void (**)(void, void, void))(*(void *)(v0 + 200) + 16))(*(void *)(v0 + 208), *(void *)(v0 + 288), *(void *)(v0 + 192));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v12, v15);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v50, v11);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      uint64_t v51 = v16;
      BOOL v18 = os_log_type_enabled(v16, v17);
      uint64_t v19 = *(void *)(v0 + 264);
      uint64_t v20 = *(void *)(v0 + 272);
      if (v18)
      {
        uint64_t v44 = *(void *)(v0 + 256);
        uint64_t v21 = *(void *)(v0 + 232);
        uint64_t v22 = *(void *)(v0 + 216);
        uint64_t v48 = *(void *)(v0 + 208);
        uint64_t v46 = *(void *)(v0 + 200);
        uint64_t v23 = *(void *)(v0 + 184);
        uint64_t v47 = *(void *)(v0 + 192);
        uint64_t v24 = *(void *)(v0 + 176);
        uint64_t v41 = *(void *)(v0 + 168);
        uint64_t v42 = *(void *)(v0 + 224);
        os_log_type_t type = v17;
        uint64_t v25 = *(void *)(v0 + 240);
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v52 = swift_slowAlloc();
        buf = v26;
        *(_DWORD *)uint64_t v26 = 136315138;
        ContinuousClock.now.getter();
        static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
        sub_10028DEC0(&qword_101653DE0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
        uint64_t v27 = static Duration.description<A>(_:_:units:)();
        uint64_t v40 = v20;
        unint64_t v29 = v28;
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v41);
        uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
        v30(v21, v22);
        *(void *)(v0 + 144) = sub_1008FA0F0(v27, v29, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v30(v25, v22);
        uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
        v31(v40, v44);
        _os_log_impl((void *)&_mh_execute_header, v51, type, "aa_primaryAppleAccount fetch duration: %s", buf, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v47);
      }
      else
      {
        uint64_t v32 = *(void *)(v0 + 256);
        uint64_t v33 = *(void *)(v0 + 200);
        uint64_t v34 = *(void *)(v0 + 208);
        uint64_t v35 = *(void *)(v0 + 192);
        uint64_t v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 224) + 8);
        v30(*(void *)(v0 + 240), *(void *)(v0 + 216));
        uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
        v31(v20, v32);

        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
      }
      sub_10028D604(*(id *)(v0 + 296), v49, *(uint64_t **)(v0 + 152));
      uint64_t v36 = *(void *)(v0 + 280);
      uint64_t v39 = *(void *)(v0 + 256);
      v30(*(void *)(v0 + 248), *(void *)(v0 + 216));
      v31(v36, v39);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_10;
    }
  }
  else
  {
  }
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v7 = *(void *)(v0 + 224);
  sub_10028DE6C();
  swift_allocError();
  *uint64_t v8 = 0;
  v8[1] = 0;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
LABEL_10:
  return v37();
}

uint64_t sub_10028D4F4()
{
  uint64_t v1 = (void *)v0[37];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[33];
  uint64_t v5 = v0[31];
  uint64_t v6 = v0[27];
  uint64_t v7 = v0[28];
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

void sub_10028D604(id a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [a2 aa_personID];
  if (!v13) {
    goto LABEL_7;
  }
  uint64_t v14 = v13;
  uint64_t v57 = (uint64_t)v12;
  uint64_t v15 = v9;
  uint64_t v53 = v10;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  id v19 = [a2 username];
  if (!v19)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    sub_10028DE6C();
    swift_allocError();
    long long v27 = xmmword_1013520A0;
LABEL_19:
    *uint64_t v26 = v27;
LABEL_20:
    swift_willThrow();

    return;
  }
  uint64_t v20 = v19;
  uint64_t v50 = v16;
  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  id v23 = [a2 dataclassProperties];
  if (!v23)
  {
    long long v55 = 0u;
    long long v56 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    sub_10001DAB4((uint64_t)&v55, (uint64_t *)&unk_101644360);
LABEL_18:
    sub_10028DE6C();
    swift_allocError();
    long long v27 = xmmword_101352090;
    goto LABEL_19;
  }
  uint64_t v24 = v23;
  id v51 = a1;
  uint64_t v52 = v22;
  uint64_t v48 = a3;
  *(void *)&v54[0] = 0xD00000000000001FLL;
  *((void *)&v54[0] + 1) = 0x80000001013F7760;
  id v25 = [v23 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

  swift_unknownObjectRelease();
  if (v25)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v54, 0, sizeof(v54));
  }
  uint64_t v28 = v18;
  uint64_t v29 = v15;
  uint64_t v30 = v57;
  sub_10028DF08((uint64_t)v54, (uint64_t)&v55);
  if (!*((void *)&v56 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v51;
    goto LABEL_16;
  }
  sub_10000588C((uint64_t *)&unk_101664240);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v51;
    goto LABEL_18;
  }
  uint64_t v31 = *(void *)&v54[0];
  if (*(void *)(*(void *)&v54[0] + 16)
    && (uint64_t v32 = sub_100723FF4(0xD000000000000017, 0x80000001013F7780), (v33 & 1) != 0))
  {
    sub_10012F428(*(void *)(v31 + 56) + 32 * v32, (uint64_t)&v55);
  }
  else
  {
    long long v55 = 0u;
    long long v56 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v56 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)&v55, (uint64_t *)&unk_101644360);
LABEL_28:
    a1 = v51;
    sub_10028DE6C();
    swift_allocError();
    *uint64_t v36 = 0xD000000000000017;
    v36[1] = 0x80000001013F7780;
    goto LABEL_20;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v34 = v53;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v8, 1, v29) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v8, &qword_101649E40);
    sub_10028DE6C();
    swift_allocError();
    *uint64_t v35 = 0xD000000000000017;
    v35[1] = 0x80000001013F7780;
    swift_willThrow();

    return;
  }
  unint64_t v37 = *(void (**)(uint64_t, char *, uint64_t))(v34 + 32);
  v37(v30, v8, v29);
  id v38 = [v51 credentialForAccount:a2];
  if (v38)
  {
    uint64_t v39 = v38;
    id v40 = [v38 credentialItemForKey:ACSearchPartyTokenKey];
    if (v40)
    {
      uint64_t v41 = v40;
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v53 = v42;

      uint64_t v43 = v48;
      uint64_t v44 = v52;
      *uint64_t v48 = v49;
      v43[1] = v44;
      v43[2] = v50;
      v43[3] = v28;
      uint64_t v45 = v53;
      v43[4] = v57;
      v43[5] = v45;
      uint64_t v46 = type metadata accessor for SearchpartyAccount();
      v37((uint64_t)v43 + *(int *)(v46 + 28), (char *)v30, v29);
      return;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10028DE6C();
  swift_allocError();
  *uint64_t v47 = xmmword_101352080;
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v30, v29);
}

uint64_t type metadata accessor for AccountService()
{
  return self;
}

uint64_t sub_10028DC54(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10028DEC0(&qword_101640310, a2, (void (*)(uint64_t))type metadata accessor for AccountService);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10028DCAC(uint64_t a1, void *a2)
{
  unint64_t result = 0xD000000000000016;
  switch((unint64_t)a2)
  {
    case 0uLL:
      return result;
    case 1uLL:
    case 3uLL:
    case 4uLL:
      unint64_t result = 0xD000000000000013;
      break;
    case 2uLL:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = 0xD000000000000016;
      v4._object = a2;
      String.append(_:)(v4);
      v5._countAndFlagsBits = 41;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      unint64_t result = 0xD00000000000001ALL;
      break;
  }
  return result;
}

unint64_t sub_10028DDE0()
{
  return sub_10028DCAC(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t sub_10028DDE8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170DA58);
  sub_100010324(v0, (uint64_t)qword_10170DA58);
  return Logger.init(subsystem:category:)();
}

unint64_t sub_10028DE6C()
{
  unint64_t result = qword_101640318;
  if (!qword_101640318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640318);
  }
  return result;
}

uint64_t sub_10028DEC0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10028DF08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101644360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10028DF70(id a1@<X1>, void *a2@<X0>, uint64_t *a3@<X8>)
{
  id v6 = [a1 aa_personID];
  if (!v6) {
    goto LABEL_7;
  }
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  id v11 = [a1 username];
  if (!v11)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    sub_10028DE6C();
    swift_allocError();
    uint64_t v20 = 1;
LABEL_18:
    *id v19 = 0;
    v19[1] = v20;
    swift_willThrow();

    return;
  }
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  id v16 = [a1 dataclassProperties];
  if (!v16)
  {
    long long v46 = 0u;
    long long v47 = 0u;
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)&v46, (uint64_t *)&unk_101644360);
LABEL_17:
    sub_10028DE6C();
    swift_allocError();
    uint64_t v20 = 2;
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  uint64_t v44 = v13;
  uint64_t v48 = v8;
  *(void *)&v45[0] = 0xD000000000000021;
  *((void *)&v45[0] + 1) = 0x80000001013F77A0;
  id v18 = [v16 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

  swift_unknownObjectRelease();
  if (v18)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v45, 0, sizeof(v45));
  }
  sub_10028DF08((uint64_t)v45, (uint64_t)&v46);
  if (!*((void *)&v47 + 1)) {
    goto LABEL_15;
  }
  sub_10000588C((uint64_t *)&unk_101664240);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v21 = *(void *)&v45[0];
  if (*(void *)(*(void *)&v45[0] + 16)
    && (uint64_t v22 = sub_100723FF4(0x6E74736F48707061, 0xEB00000000656D61), (v23 & 1) != 0))
  {
    sub_10012F428(*(void *)(v21 + 56) + 32 * v22, (uint64_t)&v46);
  }
  else
  {
    long long v46 = 0u;
    long long v47 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v47 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)&v46, (uint64_t *)&unk_101644360);
LABEL_29:
    sub_10028DE6C();
    swift_allocError();
    uint64_t v20 = 3;
    goto LABEL_18;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  uint64_t v25 = *((void *)&v45[0] + 1);
  uint64_t v24 = *(void *)&v45[0];
  id v26 = [a1 aa_fmipAccount];
  if (!v26)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10028DE6C();
    swift_allocError();
    uint64_t v20 = 4;
    goto LABEL_18;
  }
  long long v27 = v26;
  id v28 = [a2 credentialForAccount:v26];
  if (!v28)
  {
LABEL_31:

    goto LABEL_32;
  }
  uint64_t v43 = v25;
  uint64_t v42 = v28;
  id v29 = [v28 credentialItemForKey:ACFindMyiPhoneAppTokenKey];
  if (!v29)
  {

    long long v27 = v42;
    goto LABEL_31;
  }
  uint64_t v30 = v29;
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v32;
  uint64_t v41 = v31;

  id v33 = [a1 aa_authToken];
  if (v33)
  {
    uint64_t v39 = v24;
    uint64_t v34 = v33;
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v36;

    uint64_t v37 = v38;
    uint64_t v24 = v39;
  }
  else
  {

    uint64_t v35 = 0;
    uint64_t v37 = 0;
  }
  *a3 = v44;
  a3[1] = v15;
  a3[2] = v48;
  a3[3] = v10;
  a3[4] = v35;
  a3[5] = v37;
  a3[6] = v41;
  a3[7] = v40;
  a3[8] = v24;
  a3[9] = v43;
}

unint64_t destroy for AccountService.Error(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s12searchpartyd14AccountServiceC5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for AccountService.Error(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccountService.Error(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountService.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFA && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 4;
  if (v4 >= 6) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AccountService.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 4;
    }
  }
  return result;
}

uint64_t sub_10028E60C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_10028E624(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountService.Error()
{
  return &type metadata for AccountService.Error;
}

BOOL sub_10028E654()
{
  uint64_t v1 = type metadata accessor for Endianness();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for WildModeAssociationRecord(0);
  sub_10001D074(v0 + *(int *)(v5 + 56), (uint64_t)v4, &qword_1016653B0);
  uint64_t v6 = type metadata accessor for AccessoryMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_1016653B0);
    return 0;
  }
  else
  {
    uint64_t v8 = (uint64_t *)&v4[*(int *)(v6 + 20)];
    uint64_t v9 = *v8;
    unint64_t v10 = v8[1];
    sub_1000361E0(*v8, v10);
    sub_100294680((uint64_t)v4, type metadata accessor for AccessoryMetadata);
    uint64_t v11 = sub_1002AA484(v9, v10);
    sub_1002AA5D4(v9, v10);
    static Endianness.current.getter();
    sub_100091A80();
    FixedWidthInteger.init(data:ofEndianness:)();
    if (v15) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v14[2];
    }
    BOOL v7 = sub_100DF1520(v11, v12);
    sub_10001CFB8(v9, v10);
  }
  return v7;
}

unint64_t sub_10028E848@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10029EF24(*a1);
  *a2 = result;
  return result;
}

void sub_10028E874(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10028E880()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10028E8E0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10028E930(unsigned __int8 *a1, char *a2)
{
  return sub_10071B798(*a1, *a2);
}

Swift::Int sub_10028E93C()
{
  return sub_10072108C();
}

uint64_t sub_10028E948()
{
  return sub_10071FC24();
}

Swift::Int sub_10028E950()
{
  return sub_10072108C();
}

unint64_t sub_10028E958@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10029EF34(*a1);
  *a2 = result;
  return result;
}

void sub_10028E988(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x6E776F6E6B6E75;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x646567617473;
      goto LABEL_3;
    case 2:
      *a1 = 0x796669746F6ELL;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 0x657461647075;
      a1[1] = 0xE600000000000000;
      break;
    case 4:
      *a1 = 0x6465676174736E75;
      a1[1] = 0xE800000000000000;
      break;
    case 5:
      *a1 = 0x7761726468746977;
      a1[1] = 0xE800000000000000;
      break;
    case 6:
      *a1 = 0x6465726F6E6769;
      a1[1] = 0xE700000000000000;
      break;
    case 7:
      *a1 = 0x7265766F63736964;
      a1[1] = 0xEA00000000006465;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_10028EA98()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10028EAF8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10028EB48(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_1016405E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_10029F028();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for WildModeTrackingLocation(0);
    v8[12] = 3;
    type metadata accessor for Date();
    sub_1002931B8((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int sub_10028ED50()
{
  Hasher.init(_seed:)();
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v0[2];
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  type metadata accessor for WildModeTrackingLocation(0);
  type metadata accessor for Date();
  sub_1002931B8((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_10028EE28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_1016405C8);
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for WildModeTrackingLocation(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10029F028();
  id v26 = v8;
  uint64_t v12 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v12)
  {
    uint64_t v13 = v5;
    char v31 = 0;
    uint64_t v14 = v24;
    uint64_t v15 = v25;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)uint64_t v11 = v16;
    char v30 = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v11 + 1) = v17;
    char v29 = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v11 + 2) = v19;
    char v28 = 3;
    sub_1002931B8(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
    long long v27 = v13;
    uint64_t v20 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v15);
    uint64_t v21 = v22;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v11[*(int *)(v9 + 28)], v27, v3);
    sub_100295F48((uint64_t)v11, v21, type metadata accessor for WildModeTrackingLocation);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

unint64_t sub_10028F168()
{
  unint64_t result = 0x656475746974616CLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x6D617473656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10028F208(uint64_t a1)
{
  unint64_t v2 = sub_10029F028();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028F244(uint64_t a1)
{
  unint64_t v2 = sub_10029F028();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10028F280@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10028EE28(a1, a2);
}

uint64_t sub_10028F298(void *a1)
{
  return sub_10028EB48(a1);
}

uint64_t sub_10028F2B4()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v0[2];
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  type metadata accessor for Date();
  sub_1002931B8((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_10028F370()
{
  Hasher.init(_seed:)();
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v0[2];
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  type metadata accessor for Date();
  sub_1002931B8((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

void *sub_10028F44C@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_10028F46C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10028F4CC()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int sub_10028F51C()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  if (v2 >> 60 == 11)
  {
    Hasher._combine(_:)(1uLL);
  }
  else if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    sub_1000361E0(v1, v2);
    Data.hash(into:)();
    sub_100293254(v1, v2);
  }
  return Hasher._finalize()();
}

void sub_10028F5C0()
{
  unint64_t v1 = v0[1];
  if (v1 >> 60 == 11)
  {
    Swift::UInt v2 = 1;
    goto LABEL_5;
  }
  if (v1 >> 60 == 15)
  {
    Swift::UInt v2 = 0;
LABEL_5:
    Hasher._combine(_:)(v2);
    return;
  }
  uint64_t v3 = *v0;
  Hasher._combine(_:)(2uLL);
  sub_1000361E0(v3, v1);
  Data.hash(into:)();

  sub_100293254(v3, v1);
}

Swift::Int sub_10028F668()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  if (v2 >> 60 == 11)
  {
    Hasher._combine(_:)(1uLL);
  }
  else if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    sub_1000361E0(v1, v2);
    Data.hash(into:)();
    sub_100293254(v1, v2);
  }
  return Hasher._finalize()();
}

BOOL sub_10028F708(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = a2[1];
  if (v2 >> 60 == 11) {
    return v3 >> 60 == 11;
  }
  if (v2 >> 60 == 15) {
    return v3 >> 60 == 15;
  }
  if (((v3 >> 60) | 4) == 0xF) {
    return 0;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  sub_100295FB0(*a1, v2);
  sub_100295FB0(v6, v3);
  char v7 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v2, v6, v3);
  sub_100293254(v6, v3);
  sub_100293254(v5, v2);
  return v7 & 1;
}

uint64_t sub_10028F7E0()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170DA70);
  sub_100010324(v0, (uint64_t)qword_10170DA70);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_10028F8FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, unsigned __int8 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned __int8 a20,unsigned __int16 a21)
{
  uint64_t v114 = a8;
  uint64_t v116 = a7;
  LODWORD(v98) = a6;
  uint64_t v93 = a5;
  uint64_t v115 = a4;
  uint64_t v117 = a2;
  uint64_t v118 = a1;
  int v109 = a20;
  int v110 = a21;
  uint64_t v107 = a18;
  uint64_t v108 = a19;
  uint64_t v106 = a17;
  uint64_t v103 = a16;
  int v97 = a15;
  uint64_t v112 = a14;
  uint64_t v113 = a13;
  LODWORD(v96) = a12;
  uint64_t v95 = a11;
  int v92 = a3 & 1;
  long long v94 = a10;
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v119 = *(void *)(v22 - 8);
  uint64_t v23 = v119;
  __chkstk_darwin(v22);
  uint64_t v83 = (char *)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v84 = (char *)&v82 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v86 = (uint64_t)&v82 - v29;
  __chkstk_darwin(v28);
  uint64_t v85 = (uint64_t)&v82 - v30;
  char v31 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v87 = a9 + v31[5];
  uint64_t v32 = v87;
  uint64_t v33 = type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v33 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v32, 1, 1, v33);
  uint64_t v35 = v31[6];
  *(unsigned char *)(a9 + v35) = 0;
  uint64_t v91 = a9 + v31[11];
  uint64_t v36 = *(void (**)(void))(v23 + 56);
  v36();
  uint64_t v37 = (void *)(a9 + v31[12]);
  *uint64_t v37 = 0;
  v37[1] = 0;
  v37[2] = 0;
  uint64_t v90 = a9 + v31[14];
  uint64_t v38 = v90;
  uint64_t v39 = type metadata accessor for AccessoryMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
  uint64_t v89 = a9 + v31[15];
  uint64_t v40 = v89;
  uint64_t v41 = type metadata accessor for AccessoryProductInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1, v41);
  uint64_t v88 = v31[16];
  *(unsigned char *)(a9 + v88) = 8;
  uint64_t v42 = v31[17];
  unint64_t v43 = sub_10092E1C4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v99 = v42;
  *(void *)(a9 + v42) = v43;
  uint64_t v44 = a9 + v31[18];
  static Date.trustedNow.getter(v44);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v36)(v44, 0, 1, v22);
  uint64_t v102 = a9 + v31[19];
  uint64_t v111 = v36;
  v36();
  uint64_t v101 = v31[21];
  *(unsigned char *)(a9 + v101) = 2;
  uint64_t v100 = (_WORD *)(a9 + v31[22]);
  *uint64_t v100 = 256;
  uint64_t v104 = v34;
  uint64_t v105 = v33;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(a9, v118, v33);
  sub_100156D3C(v117, v87, &qword_101638CF0);
  *(unsigned char *)(a9 + v35) = v92;
  uint64_t v45 = a9 + v31[7];
  uint64_t v46 = type metadata accessor for MACAddress();
  uint64_t v47 = *(void *)(v46 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v45, v115, v46);
  *(void *)(a9 + v31[8]) = v93;
  *(unsigned char *)(a9 + v31[9]) = v98;
  uint64_t v48 = a9 + v31[10];
  uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 16);
  uint64_t v98 = v22;
  v49(v48, v116, v22);
  uint64_t v50 = v114;
  sub_100156D3C(v114, v91, (uint64_t *)&unk_10163AC90);
  swift_bridgeObjectRelease();
  *(_OWORD *)uint64_t v37 = v94;
  v37[2] = v95;
  uint64_t v51 = v113;
  *(unsigned char *)(a9 + v31[13]) = v96;
  sub_100156D3C(v51, v90, &qword_1016653B0);
  uint64_t v52 = v112;
  int v53 = v97;
  sub_100156D3C(v112, v89, (uint64_t *)&unk_10166BFA0);
  *(unsigned char *)(a9 + v88) = v53;
  if (v53 == 8)
  {
    unint64_t v54 = sub_10092E1C4((uint64_t)_swiftEmptyArrayStorage);
    sub_10001DAB4(v103, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4(v52, (uint64_t *)&unk_10166BFA0);
    sub_10001DAB4(v51, &qword_1016653B0);
    sub_10001DAB4(v50, (uint64_t *)&unk_10163AC90);
    uint64_t v55 = v98;
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v116, v98);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v115, v46);
    sub_10001DAB4(v117, &qword_101638CF0);
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v118, v105);
    *(void *)(a9 + v99) = v54;
    swift_bridgeObjectRelease();
    sub_10001DAB4(v44, (uint64_t *)&unk_10163AC90);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v111)(v44, 1, 1, v55);
  }
  else
  {
    uint64_t v95 = v47;
    uint64_t v96 = v46;
    uint64_t v56 = v115;
    uint64_t v57 = v85;
    static Date.trustedNow.getter(v85);
    uint64_t v58 = v98;
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v111)(v57, 0, 1, v98);
    sub_100062604(v57, v44, (uint64_t *)&unk_10163AC90);
    uint64_t v59 = v86;
    sub_10001D074(v44, v86, (uint64_t *)&unk_10163AC90);
    uint64_t v60 = v119;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v59, 1, v58) == 1)
    {
      sub_10001DAB4(v59, (uint64_t *)&unk_10163AC90);
      uint64_t v61 = v99;
      swift_bridgeObjectRetain();
      unint64_t v62 = sub_100723FB0(v53);
      char v64 = v63;
      swift_bridgeObjectRelease();
      uint64_t v65 = v56;
      if (v64)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v67 = *(void *)(a9 + v61);
        uint64_t v120 = v67;
        *(void *)(a9 + v61) = 0x8000000000000000;
        uint64_t v68 = v116;
        uint64_t v69 = v61;
        uint64_t v70 = (uint64_t)v84;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100E80940();
          uint64_t v67 = v120;
        }
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v119 + 32))(v70, *(void *)(v67 + 56) + *(void *)(v119 + 72) * v62, v58);
        sub_100167A88(v62, v67);
        *(void *)(a9 + v69) = v67;
        swift_bridgeObjectRelease();
        uint64_t v71 = 0;
        uint64_t v72 = v117;
      }
      else
      {
        uint64_t v71 = 1;
        uint64_t v68 = v116;
        uint64_t v72 = v117;
        uint64_t v70 = (uint64_t)v84;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v111)(v70, v71, 1, v58);
      sub_10001DAB4(v70, (uint64_t *)&unk_10163AC90);
      uint64_t v77 = v118;
      uint64_t v76 = v119;
    }
    else
    {
      uint64_t v73 = (uint64_t)v83;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v83, v59, v58);
      uint64_t v74 = v99;
      char v75 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v120 = *(void *)(a9 + v74);
      *(void *)(a9 + v74) = 0x8000000000000000;
      sub_10016D58C(v73, v53, v75);
      *(void *)(a9 + v74) = v120;
      swift_bridgeObjectRelease();
      uint64_t v76 = v60;
      uint64_t v72 = v117;
      uint64_t v77 = v118;
      uint64_t v65 = v56;
      uint64_t v68 = v116;
    }
    sub_10001DAB4(v103, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4(v112, (uint64_t *)&unk_10166BFA0);
    sub_10001DAB4(v113, &qword_1016653B0);
    sub_10001DAB4(v114, (uint64_t *)&unk_10163AC90);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v68, v58);
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v65, v96);
    sub_10001DAB4(v72, &qword_101638CF0);
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v77, v105);
  }
  uint64_t result = sub_100062604(v106, v102, (uint64_t *)&unk_10163AC90);
  uint64_t v79 = (void *)(a9 + v31[20]);
  uint64_t v80 = v108;
  *uint64_t v79 = v107;
  v79[1] = v80;
  *(unsigned char *)(a9 + v101) = v109;
  BYTE1(v79) = BYTE1(v110);
  uint64_t v81 = v100;
  *(unsigned char *)uint64_t v100 = v110;
  *((unsigned char *)v81 + 1) = BYTE1(v79) & 1;
  return result;
}

void sub_100290298(long long *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AccessoryProductInfo();
  uint64_t v66 = *(void *)(v4 - 8);
  uint64_t v67 = v4;
  __chkstk_darwin(v4);
  uint64_t v59 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v6 - 8);
  uint64_t v65 = (uint64_t)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v63 = *(void *)(v8 - 8);
  uint64_t v64 = v8;
  __chkstk_darwin(v8);
  uint64_t v58 = (uint64_t)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v10 - 8);
  uint64_t v61 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for Date();
  uint64_t v72 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v71 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v69 = (uint64_t)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v68 = (uint64_t)&v57 - v17;
  __chkstk_darwin(v16);
  uint64_t v60 = (uint64_t)&v57 - v18;
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002931B8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v26 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  sub_10001D074(v1 + v26[5], (uint64_t)v25, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v25, 1, v19) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v25, v19);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + v26[6]));
  type metadata accessor for MACAddress();
  sub_1002931B8((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v27 = *(void *)(v1 + v26[8]);
  swift_bridgeObjectRetain();
  sub_100CCB1DC((uint64_t)a1, v27);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + v26[9]));
  sub_1002931B8((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v28 = v70;
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v29 = v60;
  sub_10001D074(v2 + v26[11], v60, (uint64_t *)&unk_10163AC90);
  uint64_t v30 = v72;
  char v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  unsigned int v32 = v31(v29, 1, v28);
  unint64_t v62 = v31;
  if (v32 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v33 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v71, v29, v28);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v28);
  }
  uint64_t v34 = (unsigned __int8 *)(v2 + v26[12]);
  if (*((void *)v34 + 2))
  {
    Swift::UInt v35 = *v34;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  int v36 = *(unsigned __int8 *)(v2 + v26[13]);
  if (v36 == 4) {
    LOBYTE(v36) = 0;
  }
  else {
    Hasher._combine(_:)(1u);
  }
  uint64_t v37 = v72;
  Hasher._combine(_:)(v36);
  uint64_t v38 = v61;
  sub_10001D074(v2 + v26[14], v61, &qword_1016653B0);
  int v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v38, 1, v64);
  uint64_t v40 = v62;
  if (v39 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v41 = v58;
    sub_100295F48(v38, v58, type metadata accessor for AccessoryMetadata);
    Hasher._combine(_:)(1u);
    sub_1001A7BE0();
    sub_100294680(v41, type metadata accessor for AccessoryMetadata);
  }
  uint64_t v42 = v65;
  sub_10001D074(v2 + v26[15], v65, (uint64_t *)&unk_10166BFA0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v42, 1, v67) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v43 = v59;
    sub_100295F48(v42, v59, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    Hasher._combine(_:)(1u);
    sub_1011E1CA4((uint64_t)a1);
    sub_100294680(v43, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  }
  if (*(unsigned char *)(v2 + v26[16]) == 8)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v44 = *(void *)(v2 + v26[17]);
  swift_bridgeObjectRetain();
  sub_100DF8EA4(a1, v44);
  swift_bridgeObjectRelease();
  uint64_t v45 = v68;
  sub_10001D074(v2 + v26[18], v68, (uint64_t *)&unk_10163AC90);
  if (v40(v45, 1, v28) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v46 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v71, v45, v28);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v46, v28);
  }
  uint64_t v47 = v69;
  sub_10001D074(v2 + v26[19], v69, (uint64_t *)&unk_10163AC90);
  if (v40(v47, 1, v28) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v48 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v71, v47, v28);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v48, v28);
  }
  uint64_t v49 = (uint64_t *)(v2 + v26[20]);
  unint64_t v50 = v49[1];
  if (v50 >> 60 == 11)
  {
    Swift::UInt v51 = 1;
    goto LABEL_32;
  }
  if (v50 >> 60 == 15)
  {
    Swift::UInt v51 = 0;
LABEL_32:
    Hasher._combine(_:)(v51);
    goto LABEL_34;
  }
  uint64_t v52 = *v49;
  Hasher._combine(_:)(2uLL);
  sub_1000361E0(v52, v50);
  Data.hash(into:)();
  sub_100293254(v52, v50);
LABEL_34:
  int v53 = *(unsigned __int8 *)(v2 + v26[21]);
  if (v53 == 2)
  {
    Swift::UInt8 v54 = 0;
  }
  else
  {
    Swift::UInt8 v54 = v53 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v54);
  uint64_t v55 = (Swift::UInt8 *)(v2 + v26[22]);
  if (v55[1])
  {
    Swift::UInt8 v56 = 0;
  }
  else
  {
    Swift::UInt8 v56 = *v55;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v56);
}

unint64_t sub_100290E50(char a1)
{
  unint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
    case 8:
    case 15:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x746176726573626FLL;
      break;
    case 3:
      unint64_t result = 0x7369747265766461;
      break;
    case 4:
      unint64_t result = 0x73736572646461;
      break;
    case 5:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 6:
      unint64_t result = 0x6574617473;
      break;
    case 7:
      unint64_t result = 0x4472656767697274;
      break;
    case 9:
      unint64_t result = 0x656C646E6168;
      break;
    case 10:
      unint64_t result = 0x7954656369766564;
      break;
    case 11:
      unint64_t result = 0x617461646174656DLL;
      break;
    case 12:
      unint64_t result = 0x49746375646F7270;
      break;
    case 13:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 14:
      unint64_t result = 0x6C62755065746164;
      break;
    case 16:
      unint64_t result = 0xD000000000000011;
      break;
    case 17:
      unint64_t result = 0x68736F507369;
      break;
    case 18:
      unint64_t result = 0x496B726F7774656ELL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1002910C0(char a1)
{
  unint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
    case 8:
    case 15:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x746176726573626FLL;
      break;
    case 3:
      unint64_t result = 0x7369747265766461;
      break;
    case 4:
      unint64_t result = 0x73736572646461;
      break;
    case 5:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 6:
      unint64_t result = 0x6574617473;
      break;
    case 7:
      unint64_t result = 0x4472656767697274;
      break;
    case 9:
      unint64_t result = 0x656C646E6168;
      break;
    case 10:
      unint64_t result = 0x7954656369766564;
      break;
    case 11:
      unint64_t result = 0x617461646174656DLL;
      break;
    case 12:
      unint64_t result = 0x49746375646F7270;
      break;
    case 13:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 14:
      unint64_t result = 0x6C62755065746164;
      break;
    case 16:
      unint64_t result = 0xD000000000000011;
      break;
    case 17:
      unint64_t result = 0x68736F507369;
      break;
    case 18:
      unint64_t result = 0x496B726F7774656ELL;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_100291330()
{
  Hasher.init(_seed:)();
  sub_100290298(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100291374()
{
  Hasher.init(_seed:)();
  sub_100290298(v1);
  return Hasher._finalize()();
}

uint64_t sub_1002913B4(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_100290E50(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100290E50(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100291440()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100290E50(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002914A4()
{
  sub_100290E50(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002914F8()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100290E50(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100291558@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10029EF80();
  *a1 = result;
  return result;
}

unint64_t sub_100291588@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100290E50(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1002915B4()
{
  return sub_1002910C0(*v0);
}

uint64_t sub_1002915BC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10029EF80();
  *a1 = result;
  return result;
}

void sub_1002915E4(unsigned char *a1@<X8>)
{
  *a1 = 19;
}

uint64_t sub_1002915F0(uint64_t a1)
{
  unint64_t v2 = sub_100293200();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029162C(uint64_t a1)
{
  unint64_t v2 = sub_100293200();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100291668@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v135 = a1;
  uint64_t v103 = a2;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v2 - 8);
  uint64_t v107 = (uint64_t)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v108 = (uint64_t)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v104 = (uint64_t)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v106 = (uint64_t)&v100 - v10;
  __chkstk_darwin(v9);
  int v109 = (char *)&v100 - v11;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  *(void *)&long long v120 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v15 - 8);
  uint64_t v111 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for MACAddress();
  uint64_t v115 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  int v110 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v18 - 8);
  uint64_t v118 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v119 = (char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_10000588C(&qword_101640330);
  uint64_t v121 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v24 = (char *)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v100 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = (uint64_t)&v28[*(int *)(v26 + 20)];
  uint64_t v117 = v21;
  uint64_t v30 = *(void (**)(void))(v21 + 56);
  uint64_t v134 = v29;
  uint64_t v122 = v20;
  v30();
  uint64_t v112 = v25[6];
  v28[v112] = 0;
  uint64_t v31 = (uint64_t)&v28[v25[11]];
  uint64_t v113 = v13;
  unsigned int v32 = *(void (**)(void))(v13 + 56);
  uint64_t v133 = v31;
  v32();
  uint64_t v33 = &v28[v25[12]];
  *(void *)uint64_t v33 = 0;
  *((void *)v33 + 1) = 0;
  uint64_t v131 = v33;
  *((void *)v33 + 2) = 0;
  uint64_t v34 = (uint64_t)&v28[v25[14]];
  uint64_t v35 = type metadata accessor for AccessoryMetadata(0);
  int v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56);
  uint64_t v130 = v34;
  v36(v34, 1, 1, v35);
  uint64_t v37 = (uint64_t)&v28[v25[15]];
  uint64_t v38 = type metadata accessor for AccessoryProductInfo();
  int v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56);
  uint64_t v129 = v37;
  v39(v37, 1, 1, v38);
  uint64_t v105 = v25[16];
  v28[v105] = 8;
  uint64_t v40 = v25[17];
  unint64_t v41 = sub_10092E1C4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v127 = v40;
  *(void *)&v28[v40] = v41;
  uint64_t v42 = (uint64_t)&v28[v25[18]];
  static Date.trustedNow.getter(v42);
  uint64_t v126 = v42;
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v32)(v42, 0, 1, v12);
  uint64_t v128 = &v28[v25[19]];
  uint64_t v114 = v12;
  v32();
  uint64_t v43 = v25[21];
  v28[v43] = 2;
  uint64_t v123 = v25;
  uint64_t v44 = v25[22];
  long long v132 = v28;
  uint64_t v45 = &v28[v44];
  *(_WORD *)&v28[v44] = 256;
  sub_10001CD44(v135, v135[3]);
  sub_100293200();
  uint64_t v46 = v125;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v46)
  {
    uint64_t v56 = (uint64_t)v132;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v135);
    sub_10001DAB4(v134, &qword_101638CF0);
    int v52 = 0;
    goto LABEL_4;
  }
  uint64_t v47 = (uint64_t)v118;
  uint64_t v125 = v35;
  uint64_t v102 = v38;
  uint64_t v48 = v120;
  uint64_t v100 = v43;
  uint64_t v101 = v45;
  LOBYTE(v136) = 0;
  sub_1002931B8((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v49 = v24;
  unint64_t v50 = v119;
  uint64_t v51 = v122;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v54 = v51;
  uint64_t v55 = v117;
  uint64_t v56 = (uint64_t)v132;
  (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v132, v50, v54);
  LOBYTE(v136) = 1;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_100062604(v47, v134, &qword_101638CF0);
  char v138 = 2;
  sub_10029326C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v57 = v121;
  *(unsigned char *)(v56 + v112) = v136 & 1;
  char v138 = 3;
  sub_10026D3F4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v119 = 0;
  uint64_t v118 = v49;
  unint64_t v59 = *((void *)&v136 + 1);
  uint64_t v60 = v56 + v123[20];
  if (*((void *)&v136 + 1) >> 60 == 15)
  {
    *(_OWORD *)uint64_t v60 = xmmword_101347BB0;
    LOBYTE(v136) = 4;
    sub_1002931B8(&qword_10163E568, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v61 = v110;
    uint64_t v62 = v116;
    uint64_t v63 = v124;
    uint64_t v64 = v118;
    uint64_t v65 = v119;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v119 = v65;
    if (v65)
    {
      (*(void (**)(char *, uint64_t))(v57 + 8))(v64, v63);
      int v66 = 0;
      int v67 = 0;
      int v68 = 0;
LABEL_24:
      int v52 = 1;
      goto LABEL_7;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v115 + 32))(v56 + v123[7], v61, v62);
  }
  else
  {
    uint64_t v69 = v136;
    *(void *)uint64_t v60 = v136;
    *(void *)(v60 + 8) = v59;
    sub_1000361E0(v69, v59);
    sub_1000361E0(v69, v59);
    uint64_t v70 = static MACAddress.length.getter();
    sub_100435A9C(v70, v69, v59, (uint64_t *)&v136);
    uint64_t v71 = v111;
    MACAddress.init(data:type:)();
    uint64_t v72 = v115;
    uint64_t v73 = v116;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v115 + 48))(v71, 1, v116);
    if (result == 1)
    {
      __break(1u);
      return result;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v56 + v123[7], v71, v73);
    sub_100037A24(v69, v59);
    uint64_t v55 = v117;
    uint64_t v57 = v121;
  }
  sub_10000588C(&qword_101640348);
  char v138 = 5;
  sub_1002943BC(&qword_101640350, &qword_101640358);
  uint64_t v74 = v124;
  char v75 = v118;
  uint64_t v76 = v119;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v76)
  {
    uint64_t v119 = v76;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v75, v74);
    int v67 = 0;
    int v68 = 0;
    int v66 = 1;
    goto LABEL_24;
  }
  uint64_t v77 = v123;
  *(void *)(v56 + v123[8]) = v136;
  char v138 = 6;
  sub_1002932E0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(unsigned char *)(v56 + v77[9]) = v136;
  LOBYTE(v136) = 7;
  sub_1002931B8(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v78 = v114;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v119 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 32))(v56 + v123[10], v48, v78);
  LOBYTE(v136) = 8;
  uint64_t v79 = (uint64_t)v109;
  uint64_t v80 = v119;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  if (v80)
  {
    uint64_t v119 = v80;
    (*(void (**)(char *, uint64_t))(v121 + 8))(v75, v74);
    int v66 = 1;
    int v67 = 1;
    int v68 = 1;
    goto LABEL_24;
  }
  sub_100062604(v79, v133, (uint64_t *)&unk_10163AC90);
  char v138 = 9;
  sub_1000C8098();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v119 = 0;
  long long v120 = v136;
  uint64_t v81 = v137;
  uint64_t v82 = v131;
  swift_bridgeObjectRelease();
  *(_OWORD *)uint64_t v82 = v120;
  *((void *)v82 + 2) = v81;
  char v138 = 10;
  sub_100293334();
  uint64_t v83 = v119;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v119 = v83;
  if (!v83)
  {
    v132[v123[13]] = v136;
    LOBYTE(v136) = 11;
    sub_1002931B8(&qword_101640370, (void (*)(uint64_t))type metadata accessor for AccessoryMetadata);
    uint64_t v84 = v119;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v119 = v84;
    if (!v84)
    {
      sub_100062604(v108, v130, &qword_1016653B0);
      LOBYTE(v136) = 12;
      sub_1002931B8(&qword_101640378, (void (*)(uint64_t))type metadata accessor for AccessoryProductInfo);
      uint64_t v85 = v119;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      uint64_t v119 = v85;
      if (!v85)
      {
        sub_100062604(v107, v129, (uint64_t *)&unk_10166BFA0);
        LOBYTE(v136) = 14;
        uint64_t v86 = v119;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
        uint64_t v119 = v86;
        if (!v86)
        {
          sub_100062604(v106, (uint64_t)v128, (uint64_t *)&unk_10163AC90);
          char v138 = 15;
          sub_100293388();
          uint64_t v87 = v119;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          uint64_t v119 = v87;
          if (!v87)
          {
            v132[v105] = v136;
            sub_10000588C(&qword_101640388);
            char v138 = 16;
            sub_1002933DC();
            uint64_t v88 = v119;
            KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
            uint64_t v119 = v88;
            if (!v88)
            {
              unint64_t v89 = v136;
              if (!(void)v136) {
                unint64_t v89 = sub_10092E1C4((uint64_t)_swiftEmptyArrayStorage);
              }
              uint64_t v90 = v127;
              uint64_t v91 = (uint64_t)v132;
              swift_bridgeObjectRelease();
              *(void *)(v91 + v90) = v89;
              LOBYTE(v136) = 13;
              int v92 = v119;
              KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
              uint64_t v119 = v92;
              if (!v92)
              {
                sub_100062604(v104, v126, (uint64_t *)&unk_10163AC90);
                LOBYTE(v136) = 17;
                uint64_t v93 = v119;
                char v94 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                uint64_t v119 = v93;
                if (!v93)
                {
                  v132[v100] = v94;
                  LOBYTE(v136) = 18;
                  uint64_t v95 = v119;
                  __int16 v96 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                  uint64_t v119 = v95;
                  if (!v95)
                  {
                    __int16 v97 = v96;
                    (*(void (**)(char *, uint64_t))(v121 + 8))(v118, v124);
                    uint64_t v98 = v101;
                    *uint64_t v101 = v97;
                    v98[1] = HIBYTE(v97) & 1;
                    uint64_t v99 = (uint64_t)v132;
                    sub_100293488((uint64_t)v132, v103);
                    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v135);
                    return sub_100294680(v99, type metadata accessor for WildModeAssociationRecord);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  (*(void (**)(char *, uint64_t))(v121 + 8))(v118, v124);
  int v66 = 1;
  int v67 = 1;
  int v68 = 1;
  int v52 = 1;
  uint64_t v55 = v117;
  uint64_t v56 = (uint64_t)v132;
LABEL_7:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v135);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v56, v122);
  sub_10001DAB4(v134, &qword_101638CF0);
  if (v66)
  {
    uint64_t v58 = v123;
    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v56 + v123[7], v116);
    if ((v67 & 1) == 0) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v58 = v123;
    if (!v67)
    {
LABEL_9:
      if (!v68) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  if (v68) {
LABEL_10:
  }
    (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v56 + v58[10], v114);
LABEL_4:
  sub_10001DAB4(v133, (uint64_t *)&unk_10163AC90);
  swift_bridgeObjectRelease();
  sub_10001DAB4(v130, &qword_1016653B0);
  sub_10001DAB4(v129, (uint64_t *)&unk_10166BFA0);
  swift_bridgeObjectRelease();
  sub_10001DAB4(v126, (uint64_t *)&unk_10163AC90);
  uint64_t result = sub_10001DAB4((uint64_t)v128, (uint64_t *)&unk_10163AC90);
  if (v52) {
    return sub_100293254(*(void *)(v56 + v123[20]), *(void *)(v56 + v123[20] + 8));
  }
  return result;
}

uint64_t sub_100292960(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101640398);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100293200();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  type metadata accessor for UUID();
  sub_1002931B8(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for WildModeAssociationRecord(0);
    LOBYTE(v18) = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = *(unsigned char *)(v3 + v9[6]);
    char v20 = 2;
    sub_1002942F4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 4;
    type metadata accessor for MACAddress();
    sub_1002931B8(&qword_1016477B0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v10 = v3 + v9[20];
    unint64_t v11 = *(void *)(v10 + 8);
    if (((v11 >> 60) | 4) == 0xF)
    {
      uint64_t v12 = 0;
      unint64_t v11 = 0xF000000000000000;
    }
    else
    {
      uint64_t v12 = *(void *)v10;
      sub_1000361E0(*(void *)v10, *(void *)(v10 + 8));
    }
    *(void *)&long long v18 = v12;
    *((void *)&v18 + 1) = v11;
    char v20 = 3;
    sub_10000588C(&qword_1016403A8);
    sub_100294348();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_100037A24(v12, v11);
    *(void *)&long long v18 = *(void *)(v3 + v9[8]);
    char v20 = 5;
    sub_10000588C(&qword_101640348);
    sub_1002943BC(&qword_1016403B8, &qword_1016403C0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v18) = *(unsigned char *)(v3 + v9[9]);
    char v20 = 6;
    sub_100294450();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v18) = 7;
    type metadata accessor for Date();
    sub_1002931B8((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v18) = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v13 = (long long *)(v3 + v9[12]);
    uint64_t v14 = *((void *)v13 + 2);
    long long v18 = *v13;
    uint64_t v19 = v14;
    char v20 = 9;
    sub_1000C7FF0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = *(unsigned char *)(v3 + v9[13]);
    char v20 = 10;
    sub_1002944A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v17 = v3 + v9[14];
    LOBYTE(v18) = 11;
    type metadata accessor for AccessoryMetadata(0);
    sub_1002931B8(&qword_1016403D8, (void (*)(uint64_t))type metadata accessor for AccessoryMetadata);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v17 = v3 + v9[15];
    LOBYTE(v18) = 12;
    type metadata accessor for AccessoryProductInfo();
    sub_1002931B8(&qword_1016403E0, (void (*)(uint64_t))type metadata accessor for AccessoryProductInfo);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 14;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = *(unsigned char *)(v3 + v9[16]);
    char v20 = 15;
    sub_1002944F8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v18 = *(void *)(v3 + v9[17]);
    char v20 = 16;
    sub_10000588C(&qword_101640388);
    sub_10029454C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 13;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v18) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002930E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100291668(a1, a2);
}

uint64_t sub_1002930FC(void *a1)
{
  return sub_100292960(a1);
}

uint64_t sub_100293114(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1002931B8(&qword_101640320, (void (*)(uint64_t))type metadata accessor for WildModeAssociationRecord);
  uint64_t result = sub_1002931B8(&qword_101640328, (void (*)(uint64_t))type metadata accessor for WildModeAssociationRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for WildModeAssociationRecord(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101640460);
}

uint64_t sub_1002931B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100293200()
{
  unint64_t result = qword_101640338;
  if (!qword_101640338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640338);
  }
  return result;
}

uint64_t sub_100293254(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 60) | 4) != 0xF) {
    return sub_10001CFB8(a1, a2);
  }
  return a1;
}

unint64_t sub_10029326C()
{
  unint64_t result = qword_101640340;
  if (!qword_101640340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640340);
  }
  return result;
}

uint64_t type metadata accessor for WildModeTrackingLocation(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101640538);
}

unint64_t sub_1002932E0()
{
  unint64_t result = qword_101640360;
  if (!qword_101640360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640360);
  }
  return result;
}

unint64_t sub_100293334()
{
  unint64_t result = qword_101640368;
  if (!qword_101640368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640368);
  }
  return result;
}

unint64_t sub_100293388()
{
  unint64_t result = qword_101640380;
  if (!qword_101640380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640380);
  }
  return result;
}

unint64_t sub_1002933DC()
{
  unint64_t result = qword_101640390;
  if (!qword_101640390)
  {
    sub_10000592C(&qword_101640388);
    sub_100293388();
    sub_1002931B8(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640390);
  }
  return result;
}

uint64_t sub_100293488(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WildModeAssociationRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002934EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v17 = v16;
  if (*(unsigned __int8 *)(v1 + v16[13]) - 2 < 3)
  {
    uint64_t v80 = v12;
    sub_10001D074(v1 + v16[15], (uint64_t)v11, (uint64_t *)&unk_10166BFA0);
    uint64_t v18 = type metadata accessor for AccessoryProductInfo();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v11, 1, v18) != 1)
    {
      uint64_t v34 = (uint64_t *)&v11[*(int *)(v18 + 48)];
      uint64_t v35 = *v34;
      uint64_t v36 = v34[1];
      swift_bridgeObjectRetain();
      uint64_t v37 = (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo;
      uint64_t v38 = (uint64_t)v11;
      goto LABEL_22;
    }
    sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_10166BFA0);
    sub_10001D074(v1 + v17[14], (uint64_t)v4, &qword_1016653B0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_10001DAB4((uint64_t)v4, &qword_1016653B0);
      uint64_t v19 = v1 + v17[12];
      char v20 = *(void **)(v19 + 16);
      if (v20)
      {
        uint64_t v21 = *(void *)(v19 + 8);
        char v22 = *(unsigned char *)v19;
LABEL_25:
        uint64_t v64 = v80;
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v65 = swift_allocObject();
        *(_OWORD *)(v65 + 16) = xmmword_101342130;
        int v66 = (void *)sub_100ECF4F0(v22, v21, v20);
        id v67 = [v66 description];

        uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v69 = sub_101115048(v68);
        uint64_t v71 = v70;
        swift_bridgeObjectRelease();
        *(void *)(v65 + 56) = &type metadata for String;
        *(void *)(v65 + 64) = sub_10000B4CC();
        *(void *)(v65 + 32) = v69;
        *(void *)(v65 + 40) = v71;
LABEL_29:
        (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for LocalizationUtility.Table.default(_:), v64);
        static LocalizationUtility.localizedString(key:table:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v64);
        goto LABEL_30;
      }
LABEL_28:
      uint64_t v64 = v80;
      goto LABEL_29;
    }
    sub_100295F48((uint64_t)v4, (uint64_t)v8, type metadata accessor for AccessoryMetadata);
    BOOL v39 = sub_10028E654();
    uint64_t v40 = (uint64_t *)&v8[*(int *)(v5 + 28)];
    if (v39)
    {
      unint64_t v41 = (void *)v40[1];
      uint64_t v79 = "WING_SUBTITLE_HAWKEYE";
      if (v41)
      {
        uint64_t v42 = *v40;
        unint64_t v81 = 0;
        unint64_t v82 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        unint64_t v81 = 0xD00000000000001DLL;
        unint64_t v82 = 0x80000001013F62C0;
        v43._countAndFlagsBits = v42;
        v43._object = v41;
        String.append(_:)(v43);
        swift_bridgeObjectRelease();
        unint64_t v45 = v81;
        unint64_t v44 = v82;
      }
      else
      {
        unint64_t v44 = 0x80000001013F6270;
        unint64_t v45 = 0xD00000000000001CLL;
      }
      uint64_t v46 = v80;
      uint64_t v47 = *(void (**)(void))(v13 + 104);
      unsigned int v78 = enum case for LocalizationUtility.Table.default(_:);
      uint64_t v77 = (void (*)(char *, void, uint64_t))v47;
      uint64_t v75 = v13 + 104;
      v47(v15);
      uint64_t v48 = static LocalizationUtility.localizedString(key:table:)();
      uint64_t v49 = v46;
      uint64_t v36 = v50;
      uint64_t v76 = *(void (**)(char *, uint64_t))(v13 + 8);
      v76(v15, v49);
      BOOL v51 = v48 == v45;
      uint64_t v35 = v48;
      if (v51 && v36 == v44)
      {
        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        uint64_t v53 = v80;
        v77(v15, v78, v80);
        uint64_t v35 = static LocalizationUtility.localizedString(key:table:)();
        uint64_t v36 = v54;
        v76(v15, v53);
        goto LABEL_21;
      }
      char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v52) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v35 = *v40;
      uint64_t v36 = v40[1];
      swift_bridgeObjectRetain();
    }
LABEL_21:
    uint64_t v37 = type metadata accessor for AccessoryMetadata;
    uint64_t v38 = (uint64_t)v8;
LABEL_22:
    sub_100294680(v38, v37);
    uint64_t v55 = v1 + v17[12];
    char v20 = *(void **)(v55 + 16);
    if (v20)
    {
      uint64_t v21 = *(void *)(v55 + 8);
      char v22 = *(unsigned char *)v55;
      if (!v36) {
        goto LABEL_25;
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v56 = swift_allocObject();
      *(_OWORD *)(v56 + 16) = xmmword_101347BA0;
      uint64_t v57 = (void *)sub_100ECF4F0(v22, v21, v20);
      id v58 = [v57 description];

      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v60 = sub_101115048(v59);
      uint64_t v62 = v61;
      swift_bridgeObjectRelease();
      *(void *)(v56 + 56) = &type metadata for String;
      unint64_t v63 = sub_10000B4CC();
      *(void *)(v56 + 32) = v60;
      *(void *)(v56 + 40) = v62;
      *(void *)(v56 + 96) = &type metadata for String;
      *(void *)(v56 + 104) = v63;
      *(void *)(v56 + 64) = v63;
      *(void *)(v56 + 72) = v35;
      *(void *)(v56 + 80) = v36;
    }
    else if (v36)
    {
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v72 = swift_allocObject();
      *(_OWORD *)(v72 + 16) = xmmword_101342130;
      *(void *)(v72 + 56) = &type metadata for String;
      *(void *)(v72 + 64) = sub_10000B4CC();
      *(void *)(v72 + 32) = v35;
      *(void *)(v72 + 40) = v36;
    }
    goto LABEL_28;
  }
  uint64_t v23 = v1 + v16[12];
  uint64_t v24 = *(void **)(v23 + 16);
  if (v24)
  {
    uint64_t v25 = *(void *)(v23 + 8);
    char v26 = *(unsigned char *)v23;
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_101342130;
    uint64_t v28 = (void *)sub_100ECF4F0(v26, v25, v24);
    id v29 = [v28 description];

    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = sub_101115048(v30);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = sub_10000B4CC();
    *(void *)(v27 + 32) = v31;
    *(void *)(v27 + 40) = v33;
  }
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for LocalizationUtility.Table.default(_:), v12);
  static LocalizationUtility.localizedString(key:table:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
LABEL_30:
  uint64_t v73 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v73;
}

uint64_t sub_100293DF4()
{
  uint64_t v1 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AccessoryProductInfo();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for WildModeAssociationRecord(0);
  sub_10001D074(v0 + *(int *)(v11 + 60), (uint64_t)v6, (uint64_t *)&unk_10166BFA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_10166BFA0);
    sub_10001D074(v0 + *(int *)(v11 + 56), (uint64_t)v3, &qword_1016653B0);
    uint64_t v12 = type metadata accessor for AccessoryMetadata(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v3, 1, v12) == 1)
    {
      sub_10001DAB4((uint64_t)v3, &qword_1016653B0);
      return 0;
    }
    else
    {
      uint64_t v14 = &v3[*(int *)(v12 + 48)];
      unsigned int v15 = *(_DWORD *)v14;
      char v16 = v14[4];
      sub_100294680((uint64_t)v3, type metadata accessor for AccessoryMetadata);
      if (v16) {
        return 0;
      }
      else {
        return (v15 >> 8) & 1;
      }
    }
  }
  else
  {
    sub_100295F48((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    uint64_t v13 = (*(_DWORD *)&v10[*(int *)(v7 + 84)] >> 8) & 1;
    sub_100294680((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  }
  return v13;
}

BOOL sub_10029408C()
{
  uint64_t v1 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v2 = (unsigned char *)(v0 + v1[22]);
  if (v2[1])
  {
    if (*(unsigned char *)(v0 + v1[21])) {
      return 0;
    }
    return (*(unsigned char *)(v0 + v1[13]) & 0xFD) != 4;
  }
  if ((*(unsigned char *)(v0 + v1[21]) & 1) == 0) {
    return (*(unsigned char *)(v0 + v1[13]) & 0xFD) != 4;
  }
  return *v2 == 1;
}

uint64_t sub_100294100()
{
  uint64_t v1 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v2 = (unsigned char *)(v0 + v1[22]);
  if (v2[1] == 1)
  {
    if (*(unsigned char *)(v0 + v1[21])) {
      return 6;
    }
    return *(unsigned __int8 *)(v0 + v1[13]);
  }
  if ((*(unsigned char *)(v0 + v1[21]) & 1) == 0) {
    return *(unsigned __int8 *)(v0 + v1[13]);
  }
  if (*v2 == 1) {
    return 5;
  }
  return 6;
}

uint64_t sub_10029416C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v4 = (unsigned char *)(v1 + v3[22]);
  if (v4[1])
  {
    if (*(unsigned char *)(v1 + v3[21])) {
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  if ((*(unsigned char *)(v1 + v3[21]) & 1) == 0)
  {
LABEL_5:
    if (*(unsigned char *)(v1 + v3[13]) == 4)
    {
      uint64_t v5 = type metadata accessor for MACAddress();
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
      uint64_t v7 = v5;
      uint64_t v8 = a1;
      uint64_t v9 = 1;
LABEL_12:
      return v6(v8, v9, 1, v7);
    }
    goto LABEL_8;
  }
  if (*v4 != 1)
  {
LABEL_11:
    uint64_t v11 = v1 + v3[7];
    uint64_t v12 = type metadata accessor for MACAddress();
    uint64_t v13 = *(void *)(v12 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a1, v11, v12);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    uint64_t v8 = a1;
    uint64_t v9 = 0;
    uint64_t v7 = v12;
    goto LABEL_12;
  }
LABEL_8:
  MACAddress.data.getter();

  return MACAddress.init(addressToSanitize:type:)();
}

unint64_t sub_1002942F4()
{
  unint64_t result = qword_1016403A0;
  if (!qword_1016403A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016403A0);
  }
  return result;
}

unint64_t sub_100294348()
{
  unint64_t result = qword_1016403B0;
  if (!qword_1016403B0)
  {
    sub_10000592C(&qword_1016403A8);
    sub_10026C6F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016403B0);
  }
  return result;
}

uint64_t sub_1002943BC(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101640348);
    sub_1002931B8(a2, (void (*)(uint64_t))type metadata accessor for WildModeTrackingLocation);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100294450()
{
  unint64_t result = qword_1016403C8;
  if (!qword_1016403C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016403C8);
  }
  return result;
}

unint64_t sub_1002944A4()
{
  unint64_t result = qword_1016403D0;
  if (!qword_1016403D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016403D0);
  }
  return result;
}

unint64_t sub_1002944F8()
{
  unint64_t result = qword_1016403E8;
  if (!qword_1016403E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016403E8);
  }
  return result;
}

unint64_t sub_10029454C()
{
  unint64_t result = qword_1016403F0;
  if (!qword_1016403F0)
  {
    sub_10000592C(&qword_101640388);
    sub_1002944F8();
    sub_1002931B8((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016403F0);
  }
  return result;
}

uint64_t sub_1002945F8(double *a1, double *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0;
  }
  type metadata accessor for WildModeTrackingLocation(0);

  return static Date.== infix(_:_:)();
}

uint64_t sub_100294680(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL sub_1002946E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessoryProductInfo();
  uint64_t v182 = *(void *)(v4 - 8);
  uint64_t v183 = v4;
  __chkstk_darwin(v4);
  uint64_t v178 = (uint64_t)&v165 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v181 = sub_10000588C(&qword_1016403F8);
  __chkstk_darwin(v181);
  uint64_t v185 = (uint64_t)&v165 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v180 = (uint64_t)&v165 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v186 = (uint64_t)&v165 - v11;
  __chkstk_darwin(v10);
  uint64_t v187 = (uint64_t)&v165 - v12;
  uint64_t v13 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v192 = *(void *)(v13 - 8);
  uint64_t v193 = v13;
  __chkstk_darwin(v13);
  uint64_t v179 = (uint64_t)&v165 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = sub_10000588C(&qword_101640400);
  __chkstk_darwin(v188);
  uint64_t v189 = (uint64_t)&v165 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_1016653B0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v184 = (uint64_t)&v165 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v194 = (uint64_t)&v165 - v20;
  __chkstk_darwin(v19);
  size_t v191 = (char *)&v165 - v21;
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v200 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v190 = (char *)&v165 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v197 = sub_10000588C((uint64_t *)&unk_10165C700);
  uint64_t v24 = __chkstk_darwin(v197);
  uint64_t v173 = (uint64_t)&v165 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v177 = (uint64_t)&v165 - v27;
  __chkstk_darwin(v26);
  uint64_t v196 = (uint64_t)&v165 - v28;
  uint64_t v29 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  uint64_t v170 = (uint64_t)&v165 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v171 = (uint64_t)&v165 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v172 = (uint64_t)&v165 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v174 = (uint64_t)&v165 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v175 = (uint64_t)&v165 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v176 = (uint64_t)&v165 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v195 = (uint64_t)&v165 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v198 = (uint64_t)&v165 - v45;
  __chkstk_darwin(v44);
  uint64_t v199 = (uint64_t)&v165 - v46;
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v48 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v201 = (char *)&v165 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v50);
  char v52 = (char *)&v165 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10000588C(&qword_101638CF0);
  uint64_t v54 = __chkstk_darwin(v53 - 8);
  uint64_t v56 = (char *)&v165 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __chkstk_darwin(v54);
  uint64_t v59 = (char *)&v165 - v58;
  __chkstk_darwin(v57);
  uint64_t v61 = (char *)&v165 - v60;
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v166 = v22;
  uint64_t v62 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v63 = *(int *)(v62 + 20);
  uint64_t v169 = a1;
  sub_10001D074(a1 + v63, (uint64_t)v61, &qword_101638CF0);
  uint64_t v167 = (int *)v62;
  uint64_t v64 = *(int *)(v62 + 20);
  uint64_t v168 = a2;
  sub_10001D074(a2 + v64, (uint64_t)v59, &qword_101638CF0);
  uint64_t v65 = (uint64_t)&v52[*(int *)(v50 + 48)];
  sub_10001D074((uint64_t)v61, (uint64_t)v52, &qword_101638CF0);
  sub_10001D074((uint64_t)v59, v65, &qword_101638CF0);
  int v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  if (v66((uint64_t)v52, 1, v47) == 1)
  {
    sub_10001DAB4((uint64_t)v59, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v61, &qword_101638CF0);
    if (v66(v65, 1, v47) == 1)
    {
      sub_10001DAB4((uint64_t)v52, &qword_101638CF0);
      goto LABEL_10;
    }
LABEL_7:
    id v67 = (uint64_t *)&unk_10166EAF0;
    uint64_t v68 = (uint64_t)v52;
    goto LABEL_8;
  }
  sub_10001D074((uint64_t)v52, (uint64_t)v56, &qword_101638CF0);
  if (v66(v65, 1, v47) == 1)
  {
    sub_10001DAB4((uint64_t)v59, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v61, &qword_101638CF0);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v56, v47);
    goto LABEL_7;
  }
  uint64_t v69 = v201;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v201, v65, v47);
  sub_1002931B8((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v70 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v71 = *(void (**)(char *, uint64_t))(v48 + 8);
  v71(v69, v47);
  sub_10001DAB4((uint64_t)v59, &qword_101638CF0);
  sub_10001DAB4((uint64_t)v61, &qword_101638CF0);
  v71(v56, v47);
  sub_10001DAB4((uint64_t)v52, &qword_101638CF0);
  if ((v70 & 1) == 0) {
    return 0;
  }
LABEL_10:
  uint64_t v72 = v167;
  uint64_t v73 = v169;
  uint64_t v74 = v168;
  if (*(unsigned __int8 *)(v169 + v167[6]) != *(unsigned __int8 *)(v168 + v167[6])
    || (static MACAddress.== infix(_:_:)() & 1) == 0
    || (sub_1003367D4(*(void *)(v73 + v72[8]), *(void *)(v74 + v72[8])) & 1) == 0
    || *(unsigned __int8 *)(v73 + v72[9]) != *(unsigned __int8 *)(v74 + v72[9])
    || (static Date.== infix(_:_:)() & 1) == 0)
  {
    return 0;
  }
  uint64_t v75 = v199;
  sub_10001D074(v73 + v72[11], v199, (uint64_t *)&unk_10163AC90);
  uint64_t v76 = v198;
  sub_10001D074(v74 + v72[11], v198, (uint64_t *)&unk_10163AC90);
  uint64_t v77 = v196;
  uint64_t v78 = v196 + *(int *)(v197 + 48);
  sub_10001D074(v75, v196, (uint64_t *)&unk_10163AC90);
  sub_10001D074(v76, v78, (uint64_t *)&unk_10163AC90);
  uint64_t v79 = v200 + 48;
  uint64_t v80 = *(char **)(v200 + 48);
  uint64_t v81 = v166;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v80)(v77, 1, v166) == 1)
  {
    sub_10001DAB4(v76, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4(v75, (uint64_t *)&unk_10163AC90);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v80)(v78, 1, v81) == 1)
    {
      uint64_t v165 = v79;
      uint64_t v201 = v80;
      sub_10001DAB4(v77, (uint64_t *)&unk_10163AC90);
      goto LABEL_22;
    }
LABEL_20:
    id v67 = (uint64_t *)&unk_10165C700;
    uint64_t v68 = v77;
    goto LABEL_8;
  }
  uint64_t v82 = v195;
  sub_10001D074(v77, v195, (uint64_t *)&unk_10163AC90);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v80)(v78, 1, v81) == 1)
  {
    sub_10001DAB4(v198, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4(v199, (uint64_t *)&unk_10163AC90);
    (*(void (**)(uint64_t, uint64_t))(v200 + 8))(v82, v81);
    goto LABEL_20;
  }
  uint64_t v165 = v79;
  uint64_t v201 = v80;
  uint64_t v83 = v200;
  uint64_t v84 = v77;
  uint64_t v85 = v190;
  (*(void (**)(char *, uint64_t, uint64_t))(v200 + 32))(v190, v78, v81);
  sub_1002931B8(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
  char v86 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v87 = *(void (**)(char *, uint64_t))(v83 + 8);
  v87(v85, v81);
  sub_10001DAB4(v198, (uint64_t *)&unk_10163AC90);
  sub_10001DAB4(v199, (uint64_t *)&unk_10163AC90);
  v87((char *)v82, v81);
  uint64_t v73 = v169;
  sub_10001DAB4(v84, (uint64_t *)&unk_10163AC90);
  if ((v86 & 1) == 0) {
    return 0;
  }
LABEL_22:
  uint64_t v88 = v72[12];
  unint64_t v89 = (void *)(v73 + v88);
  uint64_t v90 = *(void *)(v73 + v88 + 16);
  uint64_t v91 = (void *)(v74 + v88);
  uint64_t v92 = v91[2];
  if (!v90)
  {
    uint64_t v94 = v192;
    uint64_t v93 = v193;
    uint64_t v95 = (uint64_t)v191;
    uint64_t v96 = v194;
    if (v92) {
      return 0;
    }
LABEL_30:
    uint64_t v99 = v72[13];
    int v100 = *(unsigned __int8 *)(v73 + v99);
    int v101 = *(unsigned __int8 *)(v74 + v99);
    if (v100 == 4)
    {
      if (v101 != 4) {
        return 0;
      }
    }
    else
    {
      BOOL result = 0;
      if (v101 == 4 || v100 != v101) {
        return result;
      }
    }
    sub_10001D074(v73 + v72[14], v95, &qword_1016653B0);
    sub_10001D074(v74 + v72[14], v96, &qword_1016653B0);
    uint64_t v102 = v189;
    uint64_t v103 = v189 + *(int *)(v188 + 48);
    sub_10001D074(v95, v189, &qword_1016653B0);
    uint64_t v104 = v102;
    sub_10001D074(v96, v103, &qword_1016653B0);
    uint64_t v105 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
    if (v105(v104, 1, v93) == 1)
    {
      sub_10001DAB4(v96, &qword_1016653B0);
      sub_10001DAB4(v95, &qword_1016653B0);
      if (v105(v103, 1, v93) == 1)
      {
        sub_10001DAB4(v189, &qword_1016653B0);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v106 = v104;
      uint64_t v107 = v184;
      sub_10001D074(v106, v184, &qword_1016653B0);
      if (v105(v103, 1, v93) != 1)
      {
        uint64_t v108 = v179;
        sub_100295F48(v103, v179, type metadata accessor for AccessoryMetadata);
        char v109 = sub_1001AB3A8(v107, v108);
        sub_100294680(v108, type metadata accessor for AccessoryMetadata);
        sub_10001DAB4(v194, &qword_1016653B0);
        sub_10001DAB4(v95, &qword_1016653B0);
        sub_100294680(v107, type metadata accessor for AccessoryMetadata);
        sub_10001DAB4(v189, &qword_1016653B0);
        if ((v109 & 1) == 0) {
          return 0;
        }
LABEL_42:
        uint64_t v110 = v187;
        sub_10001D074(v169 + v72[15], v187, (uint64_t *)&unk_10166BFA0);
        uint64_t v111 = v74 + v72[15];
        uint64_t v112 = v186;
        sub_10001D074(v111, v186, (uint64_t *)&unk_10166BFA0);
        uint64_t v113 = v185;
        uint64_t v114 = v185 + *(int *)(v181 + 48);
        sub_10001D074(v110, v185, (uint64_t *)&unk_10166BFA0);
        sub_10001D074(v112, v114, (uint64_t *)&unk_10166BFA0);
        uint64_t v115 = v183;
        uint64_t v116 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v182 + 48);
        if (v116(v113, 1, v183) == 1)
        {
          sub_10001DAB4(v186, (uint64_t *)&unk_10166BFA0);
          sub_10001DAB4(v187, (uint64_t *)&unk_10166BFA0);
          if (v116(v114, 1, v115) == 1)
          {
            sub_10001DAB4(v113, (uint64_t *)&unk_10166BFA0);
            goto LABEL_49;
          }
        }
        else
        {
          sub_10001D074(v113, v180, (uint64_t *)&unk_10166BFA0);
          if (v116(v114, 1, v115) != 1)
          {
            uint64_t v117 = v178;
            sub_100295F48(v114, v178, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
            uint64_t v118 = v180;
            char v119 = sub_1011E2940(v180, v117);
            sub_100294680(v117, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
            sub_10001DAB4(v186, (uint64_t *)&unk_10166BFA0);
            sub_10001DAB4(v187, (uint64_t *)&unk_10166BFA0);
            sub_100294680(v118, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
            sub_10001DAB4(v185, (uint64_t *)&unk_10166BFA0);
            if ((v119 & 1) == 0) {
              return 0;
            }
LABEL_49:
            uint64_t v120 = v167[16];
            int v121 = *(unsigned __int8 *)(v169 + v120);
            int v122 = *(unsigned __int8 *)(v168 + v120);
            if (v121 == 8)
            {
              if (v122 != 8) {
                return 0;
              }
            }
            else if (v122 == 8 || (sub_10071B798(v121, v122) & 1) == 0)
            {
              return 0;
            }
            if ((sub_100DF4F18(*(void *)(v169 + v167[17]), *(void *)(v168 + v167[17])) & 1) == 0) {
              return 0;
            }
            uint64_t v123 = v167;
            uint64_t v124 = v176;
            sub_10001D074(v169 + v167[18], v176, (uint64_t *)&unk_10163AC90);
            uint64_t v125 = v175;
            sub_10001D074(v168 + v123[18], v175, (uint64_t *)&unk_10163AC90);
            uint64_t v126 = v177;
            uint64_t v127 = v177 + *(int *)(v197 + 48);
            sub_10001D074(v124, v177, (uint64_t *)&unk_10163AC90);
            sub_10001D074(v125, v127, (uint64_t *)&unk_10163AC90);
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v201)(v126, 1, v166) == 1)
            {
              sub_10001DAB4(v175, (uint64_t *)&unk_10163AC90);
              sub_10001DAB4(v176, (uint64_t *)&unk_10163AC90);
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v201)(v127, 1, v166) == 1)
              {
                sub_10001DAB4(v177, (uint64_t *)&unk_10163AC90);
LABEL_62:
                uint64_t v134 = v167;
                uint64_t v135 = v172;
                sub_10001D074(v169 + v167[19], v172, (uint64_t *)&unk_10163AC90);
                uint64_t v136 = v171;
                sub_10001D074(v168 + v134[19], v171, (uint64_t *)&unk_10163AC90);
                uint64_t v137 = v173;
                uint64_t v138 = v173 + *(int *)(v197 + 48);
                sub_10001D074(v135, v173, (uint64_t *)&unk_10163AC90);
                sub_10001D074(v136, v138, (uint64_t *)&unk_10163AC90);
                if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v201)(v137, 1, v166) == 1)
                {
                  sub_10001DAB4(v171, (uint64_t *)&unk_10163AC90);
                  sub_10001DAB4(v172, (uint64_t *)&unk_10163AC90);
                  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v201)(v138, 1, v166) == 1)
                  {
                    sub_10001DAB4(v173, (uint64_t *)&unk_10163AC90);
LABEL_69:
                    uint64_t v145 = v167[20];
                    uint64_t v146 = v169 + v145;
                    unint64_t v147 = *(void *)(v169 + v145 + 8);
                    uint64_t v148 = (uint64_t *)(v168 + v145);
                    unint64_t v149 = v148[1];
                    if (v147 >> 60 == 11)
                    {
                      if (v149 >> 60 != 11) {
                        return 0;
                      }
                    }
                    else if (v147 >> 60 == 15)
                    {
                      if (v149 >> 60 != 15) {
                        return 0;
                      }
                    }
                    else
                    {
                      if (((v149 >> 60) | 4) == 0xF) {
                        return 0;
                      }
                      uint64_t v150 = *(void *)v146;
                      uint64_t v151 = *v148;
                      sub_100295FB0(*(void *)v146, *(void *)(v146 + 8));
                      sub_100295FB0(v151, v149);
                      char v152 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v150, v147, v151, v149);
                      sub_100293254(v151, v149);
                      sub_100293254(v150, v147);
                      if ((v152 & 1) == 0) {
                        return 0;
                      }
                    }
                    uint64_t v153 = v167[21];
                    int v154 = *(unsigned __int8 *)(v169 + v153);
                    int v155 = *(unsigned __int8 *)(v168 + v153);
                    if (v154 == 2)
                    {
                      uint64_t v156 = v168;
                      uint64_t v157 = v169;
                      uint64_t v158 = v167;
                      if (v155 != 2) {
                        return 0;
                      }
                    }
                    else
                    {
                      BOOL result = 0;
                      BOOL v159 = (v154 & 1) == 0;
                      if (v155 == 2) {
                        return result;
                      }
                      char v160 = v159 ^ v155;
                      uint64_t v156 = v168;
                      uint64_t v157 = v169;
                      uint64_t v158 = v167;
                      if ((v160 & 1) == 0) {
                        return result;
                      }
                    }
                    uint64_t v161 = v158[22];
                    uint64_t v162 = (unsigned __int8 *)(v157 + v161);
                    uint64_t v163 = (unsigned __int8 *)(v156 + v161);
                    char v164 = v163[1];
                    if ((v162[1] & 1) == 0)
                    {
                      if (*v162 != *v163) {
                        char v164 = 1;
                      }
                      return (v164 & 1) == 0;
                    }
                    return (v163[1] & 1) != 0;
                  }
                }
                else
                {
                  sub_10001D074(v173, v170, (uint64_t *)&unk_10163AC90);
                  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v201)(v138, 1, v166) != 1)
                  {
                    uint64_t v139 = v200;
                    uint64_t v140 = v190;
                    uint64_t v141 = v166;
                    (*(void (**)(char *, uint64_t, uint64_t))(v200 + 32))(v190, v138, v166);
                    sub_1002931B8(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
                    uint64_t v142 = v170;
                    char v143 = dispatch thunk of static Equatable.== infix(_:_:)();
                    int v144 = *(void (**)(char *, uint64_t))(v139 + 8);
                    v144(v140, v141);
                    sub_10001DAB4(v171, (uint64_t *)&unk_10163AC90);
                    sub_10001DAB4(v172, (uint64_t *)&unk_10163AC90);
                    v144((char *)v142, v141);
                    sub_10001DAB4(v173, (uint64_t *)&unk_10163AC90);
                    if ((v143 & 1) == 0) {
                      return 0;
                    }
                    goto LABEL_69;
                  }
                  sub_10001DAB4(v171, (uint64_t *)&unk_10163AC90);
                  sub_10001DAB4(v172, (uint64_t *)&unk_10163AC90);
                  (*(void (**)(uint64_t, uint64_t))(v200 + 8))(v170, v166);
                }
                id v67 = (uint64_t *)&unk_10165C700;
                uint64_t v68 = v173;
LABEL_8:
                sub_10001DAB4(v68, v67);
                return 0;
              }
            }
            else
            {
              sub_10001D074(v177, v174, (uint64_t *)&unk_10163AC90);
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v201)(v127, 1, v166) != 1)
              {
                uint64_t v128 = v200;
                uint64_t v129 = v190;
                uint64_t v130 = v166;
                (*(void (**)(char *, uint64_t, uint64_t))(v200 + 32))(v190, v127, v166);
                sub_1002931B8(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
                uint64_t v131 = v174;
                char v132 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v133 = *(void (**)(char *, uint64_t))(v128 + 8);
                v133(v129, v130);
                sub_10001DAB4(v175, (uint64_t *)&unk_10163AC90);
                sub_10001DAB4(v176, (uint64_t *)&unk_10163AC90);
                v133((char *)v131, v130);
                sub_10001DAB4(v177, (uint64_t *)&unk_10163AC90);
                if ((v132 & 1) == 0) {
                  return 0;
                }
                goto LABEL_62;
              }
              sub_10001DAB4(v175, (uint64_t *)&unk_10163AC90);
              sub_10001DAB4(v176, (uint64_t *)&unk_10163AC90);
              (*(void (**)(uint64_t, uint64_t))(v200 + 8))(v174, v166);
            }
            id v67 = (uint64_t *)&unk_10165C700;
            uint64_t v68 = v177;
            goto LABEL_8;
          }
          sub_10001DAB4(v186, (uint64_t *)&unk_10166BFA0);
          sub_10001DAB4(v187, (uint64_t *)&unk_10166BFA0);
          sub_100294680(v180, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
          uint64_t v113 = v185;
        }
        id v67 = &qword_1016403F8;
        uint64_t v68 = v113;
        goto LABEL_8;
      }
      sub_10001DAB4(v194, &qword_1016653B0);
      sub_10001DAB4(v95, &qword_1016653B0);
      sub_100294680(v107, type metadata accessor for AccessoryMetadata);
    }
    id v67 = &qword_101640400;
    uint64_t v68 = v189;
    goto LABEL_8;
  }
  uint64_t v94 = v192;
  uint64_t v93 = v193;
  uint64_t v95 = (uint64_t)v191;
  uint64_t v96 = v194;
  if (!v92 || *v91 != *v89) {
    return 0;
  }
  if (v89[1] == v91[1] && v90 == v92) {
    goto LABEL_30;
  }
  char v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v97) {
    goto LABEL_30;
  }
  return result;
}

uint64_t sub_100295F48(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100295FB0(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 60) | 4) != 0xF) {
    return sub_1000361E0(a1, a2);
  }
  return a1;
}

uint64_t *destroy for WildModeAssociationRecord.AdvertisementType(uint64_t *result)
{
  unint64_t v1 = result[1];
  if ((v1 & 0x3000000000000000) == 0) {
    return (uint64_t *)sub_10001CFB8(*result, v1);
  }
  return result;
}

uint64_t _s12searchpartyd25WildModeAssociationRecordV17AdvertisementTypeOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  if ((v3 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v4 = *a2;
    sub_1000361E0(*a2, a2[1]);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for WildModeAssociationRecord.AdvertisementType(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  uint64_t v6 = v5 & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) == 0)
  {
    if (!v6)
    {
      uint64_t v9 = *a2;
      sub_1000361E0(v9, v5);
      uint64_t v10 = *a1;
      unint64_t v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      sub_10001CFB8(v10, v11);
      return a1;
    }
    sub_10001CFB8(*a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  uint64_t v7 = *a2;
  sub_1000361E0(v7, v5);
  *a1 = v7;
  a1[1] = v5;
  return a1;
}

uint64_t *assignWithTake for WildModeAssociationRecord.AdvertisementType(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    uint64_t v5 = a2[1];
    if ((v5 & 0x3000000000000000) == 0)
    {
      uint64_t v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_10001CFB8(v7, v4);
      return a1;
    }
    sub_10001CFB8(*a1, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for WildModeAssociationRecord.AdvertisementType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xB && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 11);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * v3) & 0xC) != 0) {
    unsigned int v4 = 16 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 >= 3) {
    return v4 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WildModeAssociationRecord.AdvertisementType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xA)
  {
    *(void *)BOOL result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)BOOL result = a2 - 11;
    if (a3 >= 0xB) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xB) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)BOOL result = 0;
      *(void *)(result + 8) = (unint64_t)((4 * (14 - a2)) | ((14 - a2) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t sub_1002961E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 60;
  if (((4 * v1) & 0xC) != 0) {
    return 16 - ((4 * v1) & 0xC | (v1 >> 2));
  }
  else {
    return 0;
  }
}

void *sub_10029620C(void *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    *BOOL result = a2 - 13;
    result[1] = 0;
  }
  else if (a2)
  {
    *BOOL result = 0;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for WildModeAssociationRecord.AdvertisementType()
{
  return &type metadata for WildModeAssociationRecord.AdvertisementType;
}

unsigned char *storeEnumTagSinglePayload for WildModeObservationState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *BOOL result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100296318);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *BOOL result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WildModeObservationState()
{
  return &type metadata for WildModeObservationState;
}

unsigned char *storeEnumTagSinglePayload for WildModeAlertState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *BOOL result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10029641CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *BOOL result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WildModeAlertState()
{
  return &type metadata for WildModeAlertState;
}

unsigned char *storeEnumTagSinglePayload for UnauthorizedTrackingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *BOOL result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100296520);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *BOOL result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnauthorizedTrackingType()
{
  return &type metadata for UnauthorizedTrackingType;
}

uint64_t getEnumTagSinglePayload for LocationSource(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for WildModeAssociationRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *BOOL result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002966B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *BOOL result = a2 + 18;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WildModeAssociationRecord.CodingKeys()
{
  return &type metadata for WildModeAssociationRecord.CodingKeys;
}

void *sub_1002966EC(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v15 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = a3[5];
    unint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v220 = v9;
    uint64_t v222 = v7;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&a2[v10], 1, v7))
    {
      uint64_t v13 = sub_10000588C(&qword_101638CF0);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    uint64_t v16 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    uint64_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    uint64_t v19 = type metadata accessor for MACAddress();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    uint64_t v20 = a3[9];
    *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
    a1[v20] = a2[v20];
    uint64_t v21 = a3[10];
    uint64_t v22 = &a1[v21];
    uint64_t v23 = &a2[v21];
    uint64_t v24 = type metadata accessor for Date();
    uint64_t v25 = *(void *)(v24 - 8);
    uint64_t v26 = a1;
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    swift_bridgeObjectRetain();
    v27(v22, v23, v24);
    uint64_t v28 = a3[11];
    uint64_t v29 = (char *)v26 + v28;
    uint64_t v30 = &a2[v28];
    size_t v227 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
    uint64_t v228 = v24;
    uint64_t v225 = v25;
    uint64_t v226 = v27;
    if (v227(&a2[v28], 1, v24))
    {
      uint64_t v31 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      v27(v29, v30, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v29, 0, 1, v24);
    }
    uint64_t v15 = v26;
    uint64_t v32 = a3[12];
    uint64_t v33 = a3[13];
    uint64_t v34 = (char *)v26 + v32;
    uint64_t v35 = &a2[v32];
    char *v34 = *v35;
    uint64_t v36 = *((void *)v35 + 1);
    uint64_t v37 = *((void *)v35 + 2);
    LOBYTE(v35) = a2[v33];
    *((void *)v34 + 1) = v36;
    *((void *)v34 + 2) = v37;
    *((unsigned char *)v26 + v33) = (_BYTE)v35;
    uint64_t v229 = a3;
    uint64_t v230 = a2;
    uint64_t v38 = a3[14];
    uint64_t v39 = (char *)v26 + v38;
    uint64_t v40 = &a2[v38];
    uint64_t v41 = (int *)type metadata accessor for AccessoryMetadata(0);
    uint64_t v42 = *((void *)v41 - 1);
    uint64_t v43 = *(unsigned int (**)(char *, uint64_t, int *))(v42 + 48);
    swift_bridgeObjectRetain();
    if (v43(v40, 1, v41))
    {
      uint64_t v44 = sub_10000588C(&qword_1016653B0);
      memcpy(v39, v40, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      v220(v39, v40, v222);
      uint64_t v45 = v41[5];
      uint64_t v46 = (uint64_t *)&v39[v45];
      uint64_t v47 = (uint64_t *)&v40[v45];
      uint64_t v48 = *v47;
      unint64_t v49 = v47[1];
      sub_1000361E0(*v47, v49);
      *uint64_t v46 = v48;
      v46[1] = v49;
      uint64_t v50 = v41[6];
      uint64_t v51 = &v39[v50];
      char v52 = &v40[v50];
      uint64_t v53 = *((void *)v52 + 1);
      *(void *)uint64_t v51 = *(void *)v52;
      *((void *)v51 + 1) = v53;
      uint64_t v54 = v41[7];
      uint64_t v55 = &v39[v54];
      uint64_t v56 = &v40[v54];
      uint64_t v57 = *((void *)v56 + 1);
      *(void *)uint64_t v55 = *(void *)v56;
      *((void *)v55 + 1) = v57;
      *(_DWORD *)&v39[v41[8]] = *(_DWORD *)&v40[v41[8]];
      uint64_t v58 = v41[9];
      uint64_t v59 = &v39[v58];
      uint64_t v60 = &v40[v58];
      *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
      v59[4] = v60[4];
      uint64_t v61 = v41[10];
      uint64_t v62 = &v39[v61];
      uint64_t v63 = &v40[v61];
      *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
      v62[16] = v63[16];
      uint64_t v64 = v41[11];
      uint64_t v65 = &v39[v64];
      int v66 = &v40[v64];
      v65[8] = v66[8];
      *(void *)uint64_t v65 = *(void *)v66;
      uint64_t v67 = v41[12];
      uint64_t v68 = &v39[v67];
      uint64_t v69 = &v40[v67];
      *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
      v68[4] = v69[4];
      v39[v41[13]] = v40[v41[13]];
      v39[v41[14]] = v40[v41[14]];
      uint64_t v70 = v41[15];
      uint64_t v71 = &v39[v70];
      uint64_t v72 = &v40[v70];
      uint64_t v73 = *((void *)v72 + 1);
      *(void *)uint64_t v71 = *(void *)v72;
      *((void *)v71 + 1) = v73;
      uint64_t v74 = *(void (**)(char *, void, uint64_t, int *))(v42 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v74(v39, 0, 1, v41);
    }
    uint64_t v76 = a3;
    uint64_t v75 = v230;
    uint64_t v77 = v228;
    uint64_t v78 = v227;
    uint64_t v79 = v229[15];
    uint64_t v80 = (char *)v15 + v79;
    uint64_t v81 = (char *)v230 + v79;
    uint64_t v82 = (int *)type metadata accessor for AccessoryProductInfo();
    uint64_t v83 = *((void *)v82 - 1);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v83 + 48))(v81, 1, v82))
    {
      uint64_t v84 = sub_10000588C((uint64_t *)&unk_10166BFA0);
      memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
      uint64_t v85 = v226;
    }
    else
    {
      long long v217 = v15;
      uint64_t v218 = v83;
      *(void *)uint64_t v80 = *(void *)v81;
      v80[8] = v81[8];
      uint64_t v86 = v82[5];
      uint64_t v87 = &v80[v86];
      uint64_t v88 = &v81[v86];
      uint64_t v89 = type metadata accessor for ServerStatusCode();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v89 - 8) + 16))(v87, v88, v89);
      v80[v82[6]] = v81[v82[6]];
      v80[v82[7]] = v81[v82[7]];
      uint64_t v90 = v82[8];
      uint64_t v91 = &v80[v90];
      uint64_t v92 = &v81[v90];
      uint64_t v223 = v92[1];
      void *v91 = *v92;
      v91[1] = v223;
      v80[v82[9]] = v81[v82[9]];
      v80[v82[10]] = v81[v82[10]];
      v80[v82[11]] = v81[v82[11]];
      uint64_t v93 = v82[12];
      uint64_t v94 = &v80[v93];
      uint64_t v95 = &v81[v93];
      uint64_t v215 = v95[1];
      *uint64_t v94 = *v95;
      v94[1] = v215;
      uint64_t v96 = v82[13];
      char v97 = &v80[v96];
      uint64_t v98 = &v81[v96];
      uint64_t v99 = v98[1];
      *char v97 = *v98;
      v97[1] = v99;
      uint64_t v100 = v82[14];
      int v101 = &v80[v100];
      uint64_t v102 = &v81[v100];
      *(void *)int v101 = *(void *)v102;
      v101[8] = v102[8];
      uint64_t v103 = v82[15];
      uint64_t v104 = &v80[v103];
      uint64_t v105 = &v81[v103];
      uint64_t v106 = v105[1];
      *uint64_t v104 = *v105;
      v104[1] = v106;
      uint64_t v107 = v82[16];
      __dst = &v80[v107];
      unint64_t v214 = &v81[v107];
      uint64_t v108 = type metadata accessor for URL();
      uint64_t v109 = *(void *)(v108 - 8);
      uint64_t v110 = *(unsigned int (**)(void))(v109 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v111 = v108;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unsigned int v112 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v110)(v214, 1, v108);
      uint64_t v113 = v110;
      uint64_t v221 = v109;
      if (v112)
      {
        uint64_t v114 = sub_10000588C(&qword_101649E40);
        memcpy(__dst, v214, *(void *)(*(void *)(v114 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v109 + 16))(__dst, v214, v111);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v109 + 56))(__dst, 0, 1, v111);
      }
      uint64_t v115 = v82[17];
      uint64_t v116 = &v80[v115];
      uint64_t v117 = &v81[v115];
      uint64_t v219 = v111;
      double v212 = v113;
      if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v113)(&v81[v115], 1, v111))
      {
        uint64_t v118 = sub_10000588C(&qword_101649E40);
        memcpy(v116, v117, *(void *)(*(void *)(v118 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v109 + 16))(v116, v117, v111);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v109 + 56))(v116, 0, 1, v111);
      }
      uint64_t v119 = v82[18];
      uint64_t v120 = &v80[v119];
      int v121 = &v81[v119];
      uint64_t v122 = v121[1];
      *uint64_t v120 = *v121;
      v120[1] = v122;
      *(void *)&v80[v82[19]] = *(void *)&v81[v82[19]];
      uint64_t v123 = v82[20];
      uint64_t v124 = &v80[v123];
      uint64_t v125 = &v81[v123];
      uint64_t v126 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
      uint64_t v127 = *((void *)v126 - 1);
      uint64_t v128 = *(unsigned int (**)(void *, uint64_t, int *))(v127 + 48);
      swift_bridgeObjectRetain();
      if (v128(v125, 1, v126))
      {
        uint64_t v129 = sub_10000588C(&qword_101649E50);
        memcpy(v124, v125, *(void *)(*(void *)(v129 - 8) + 64));
      }
      else
      {
        uint64_t v216 = v127;
        uint64_t v130 = v125[1];
        *uint64_t v124 = *v125;
        v124[1] = v130;
        uint64_t v131 = v125[3];
        v124[2] = v125[2];
        v124[3] = v131;
        uint64_t v132 = v125[5];
        v124[4] = v125[4];
        v124[5] = v132;
        *((_WORD *)v124 + 24) = *((_WORD *)v125 + 24);
        *((unsigned char *)v124 + 72) = *((unsigned char *)v125 + 72);
        uint64_t v133 = v125[8];
        v124[7] = v125[7];
        v124[8] = v133;
        uint64_t v134 = v126[10];
        uint64_t v135 = (char *)v124 + v134;
        uint64_t v136 = (char *)v125 + v134;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v212)(v136, 1, v219))
        {
          uint64_t v137 = sub_10000588C(&qword_101649E40);
          memcpy(v135, v136, *(void *)(*(void *)(v137 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v221 + 16))(v135, v136, v219);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v221 + 56))(v135, 0, 1, v219);
        }
        uint64_t v138 = v126[11];
        uint64_t v139 = (char *)v124 + v138;
        uint64_t v140 = (char *)v125 + v138;
        if (v212())
        {
          uint64_t v141 = sub_10000588C(&qword_101649E40);
          memcpy(v139, v140, *(void *)(*(void *)(v141 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v221 + 16))(v139, v140, v219);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v221 + 56))(v139, 0, 1, v219);
        }
        uint64_t v142 = v126[12];
        char v143 = (char *)v124 + v142;
        int v144 = (char *)v125 + v142;
        *(void *)char v143 = *(void *)v144;
        v143[8] = v144[8];
        uint64_t v145 = v126[13];
        uint64_t v146 = (void *)((char *)v124 + v145);
        unint64_t v147 = (void *)((char *)v125 + v145);
        uint64_t v148 = v147[1];
        *uint64_t v146 = *v147;
        v146[1] = v148;
        *(void *)((char *)v124 + v126[14]) = *(void *)((char *)v125 + v126[14]);
        uint64_t v149 = v126[15];
        uint64_t v150 = (void *)((char *)v124 + v149);
        uint64_t v151 = (void *)((char *)v125 + v149);
        uint64_t v152 = v151[1];
        *uint64_t v150 = *v151;
        v150[1] = v152;
        *(void *)((char *)v124 + v126[16]) = *(void *)((char *)v125 + v126[16]);
        uint64_t v153 = v126[17];
        int v154 = (char *)v124 + v153;
        int v155 = (char *)v125 + v153;
        *(_OWORD *)int v154 = *(_OWORD *)v155;
        v154[16] = v155[16];
        uint64_t v156 = v126[18];
        uint64_t v157 = (char *)v124 + v156;
        uint64_t v158 = (char *)v125 + v156;
        *(_OWORD *)uint64_t v157 = *(_OWORD *)v158;
        v157[16] = v158[16];
        BOOL v159 = *(void (**)(void *, void, uint64_t, int *))(v216 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v159(v124, 0, 1, v126);
      }
      *(_DWORD *)&v80[v82[21]] = *(_DWORD *)&v81[v82[21]];
      *(void *)&v80[v82[22]] = *(void *)&v81[v82[22]];
      uint64_t v160 = v82[23];
      uint64_t v161 = &v80[v160];
      uint64_t v162 = (uint64_t *)&v81[v160];
      unint64_t v163 = *(void *)&v81[v160 + 8];
      swift_bridgeObjectRetain();
      if (v163 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v161 = *(_OWORD *)v162;
      }
      else
      {
        uint64_t v164 = *v162;
        sub_1000361E0(*v162, v163);
        *(void *)uint64_t v161 = v164;
        *((void *)v161 + 1) = v163;
      }
      uint64_t v165 = v82[24];
      uint64_t v166 = &v80[v165];
      uint64_t v167 = &v81[v165];
      unint64_t v168 = *((void *)v167 + 1);
      if (v168 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v166 = *(_OWORD *)v167;
      }
      else
      {
        uint64_t v169 = *(void *)v167;
        sub_1000361E0(*(void *)v167, *((void *)v167 + 1));
        *(void *)uint64_t v166 = v169;
        *((void *)v166 + 1) = v168;
      }
      uint64_t v170 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v221 + 16);
      v170(&v80[v82[25]], &v81[v82[25]], v219);
      v170(&v80[v82[26]], &v81[v82[26]], v219);
      v170(&v80[v82[27]], &v81[v82[27]], v219);
      v170(&v80[v82[28]], &v81[v82[28]], v219);
      v170(&v80[v82[29]], &v81[v82[29]], v219);
      v170(&v80[v82[30]], &v81[v82[30]], v219);
      uint64_t v171 = v82[31];
      uint64_t v172 = &v80[v171];
      uint64_t v173 = &v81[v171];
      uint64_t v174 = v173[1];
      *uint64_t v172 = *v173;
      v172[1] = v174;
      *(void *)&v80[v82[32]] = *(void *)&v81[v82[32]];
      uint64_t v175 = v82[33];
      uint64_t v176 = &v80[v175];
      uint64_t v177 = &v81[v175];
      uint64_t v178 = v177[1];
      *uint64_t v176 = *v177;
      v176[1] = v178;
      *(void *)&v80[v82[34]] = *(void *)&v81[v82[34]];
      uint64_t v179 = v82[35];
      uint64_t v180 = &v80[v179];
      uint64_t v181 = &v81[v179];
      *(_OWORD *)uint64_t v180 = *(_OWORD *)v181;
      v180[16] = v181[16];
      uint64_t v182 = v82[36];
      uint64_t v183 = &v80[v182];
      uint64_t v184 = &v81[v182];
      *(_OWORD *)uint64_t v183 = *(_OWORD *)v184;
      v183[16] = v184[16];
      uint64_t v185 = v82[37];
      uint64_t v186 = &v80[v185];
      uint64_t v224 = &v81[v185];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v170(v186, v224, v219);
      v170(&v80[v82[38]], &v81[v82[38]], v219);
      v170(&v80[v82[39]], &v81[v82[39]], v219);
      v170(&v80[v82[40]], &v81[v82[40]], v219);
      v170(&v80[v82[41]], &v81[v82[41]], v219);
      v170(&v80[v82[42]], &v81[v82[42]], v219);
      v80[v82[43]] = v81[v82[43]];
      v80[v82[44]] = v81[v82[44]];
      v80[v82[45]] = v81[v82[45]];
      uint64_t v187 = v82[46];
      uint64_t v188 = &v80[v187];
      uint64_t v189 = &v81[v187];
      uint64_t v190 = v189[1];
      *uint64_t v188 = *v189;
      v188[1] = v190;
      uint64_t v191 = v82[47];
      uint64_t v192 = &v80[v191];
      uint64_t v193 = &v81[v191];
      uint64_t v194 = v193[1];
      *uint64_t v192 = *v193;
      v192[1] = v194;
      uint64_t v195 = *(void (**)(unsigned char *, void, uint64_t, int *))(v218 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v195(v80, 0, 1, v82);
      uint64_t v76 = v229;
      uint64_t v75 = v230;
      uint64_t v77 = v228;
      uint64_t v85 = v226;
      uint64_t v78 = v227;
      uint64_t v15 = v217;
    }
    uint64_t v196 = v76[17];
    *((unsigned char *)v15 + v76[16]) = *((unsigned char *)v75 + v76[16]);
    *(void *)((char *)v15 + v196) = *(void *)((char *)v75 + v196);
    uint64_t v197 = v76[18];
    uint64_t v198 = (char *)v15 + v197;
    uint64_t v199 = (char *)v75 + v197;
    swift_bridgeObjectRetain();
    if (v78(v199, 1, v77))
    {
      uint64_t v200 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v198, v199, *(void *)(*(void *)(v200 - 8) + 64));
    }
    else
    {
      v85(v198, v199, v77);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v225 + 56))(v198, 0, 1, v77);
    }
    uint64_t v201 = v76[19];
    uint64_t v202 = (char *)v15 + v201;
    uint64_t v203 = (char *)v75 + v201;
    if (v78((char *)v75 + v201, 1, v77))
    {
      uint64_t v204 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v202, v203, *(void *)(*(void *)(v204 - 8) + 64));
    }
    else
    {
      v85(v202, v203, v77);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v225 + 56))(v202, 0, 1, v77);
    }
    uint64_t v205 = v76[20];
    uint64_t v206 = (uint64_t)v15 + v205;
    uint64_t v207 = (void *)((char *)v75 + v205);
    unint64_t v208 = v207[1];
    if (((v208 >> 60) | 4) == 0xF)
    {
      *(_OWORD *)uint64_t v206 = *(_OWORD *)v207;
    }
    else
    {
      uint64_t v209 = *v207;
      sub_1000361E0(*v207, v207[1]);
      *(void *)uint64_t v206 = v209;
      *(void *)(v206 + 8) = v208;
    }
    uint64_t v210 = v76[22];
    *((unsigned char *)v15 + v76[21]) = *((unsigned char *)v75 + v76[21]);
    *(_WORD *)((char *)v15 + v210) = *(_WORD *)((char *)v75 + v210);
  }
  return v15;
}

uint64_t sub_1002977A0(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = a1 + a2[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4)) {
    v6(v7, v4);
  }
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + a2[10];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);
  uint64_t v14 = a1 + a2[11];
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v43(v14, 1, v11)) {
    v13(v14, v11);
  }
  uint64_t v44 = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a1 + a2[14];
  uint64_t v16 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
  {
    v6(v15, v4);
    sub_10001CFB8(*(void *)(v15 + *(int *)(v16 + 20)), *(void *)(v15 + *(int *)(v16 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = a1 + a2[15];
  uint64_t v18 = (int *)type metadata accessor for AccessoryProductInfo();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v18 - 1) + 48))(v17, 1, v18))
  {
    uint64_t v42 = v11;
    uint64_t v19 = v17 + v18[5];
    uint64_t v20 = type metadata accessor for ServerStatusCode();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v21 = v17 + v18[16];
    uint64_t v22 = type metadata accessor for URL();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(unsigned int (**)(void))(v23 + 48);
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v24)(v21, 1, v22)) {
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    }
    uint64_t v25 = v17 + v18[17];
    uint64_t v41 = v24;
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v24)(v25, 1, v22)) {
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v22);
    }
    swift_bridgeObjectRelease();
    uint64_t v26 = v17 + v18[20];
    uint64_t v27 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v26, 1, v27))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v39 = v26 + *(int *)(v27 + 40);
      if (!v41()) {
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v39, v22);
      }
      uint64_t v40 = v26 + *(int *)(v27 + 44);
      if (!v41()) {
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v40, v22);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v28 = (uint64_t *)(v17 + v18[23]);
    unint64_t v29 = v28[1];
    if (v29 >> 60 != 15) {
      sub_10001CFB8(*v28, v29);
    }
    uint64_t v30 = (uint64_t *)(v17 + v18[24]);
    unint64_t v31 = v30[1];
    if (v31 >> 60 != 15) {
      sub_10001CFB8(*v30, v31);
    }
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v32(v17 + v18[25], v22);
    v32(v17 + v18[26], v22);
    v32(v17 + v18[27], v22);
    v32(v17 + v18[28], v22);
    v32(v17 + v18[29], v22);
    v32(v17 + v18[30], v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32(v17 + v18[37], v22);
    v32(v17 + v18[38], v22);
    v32(v17 + v18[39], v22);
    v32(v17 + v18[40], v22);
    v32(v17 + v18[41], v22);
    v32(v17 + v18[42], v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v42;
  }
  swift_bridgeObjectRelease();
  uint64_t v33 = a1 + a2[18];
  if (!v43(v33, 1, v11)) {
    v44(v33, v11);
  }
  uint64_t v34 = a1 + a2[19];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v43)(v34, 1, v11);
  if (!result) {
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v44)(v34, v11);
  }
  uint64_t v36 = (uint64_t *)(a1 + a2[20]);
  unint64_t v37 = v36[1];
  if (((v37 >> 60) | 4) != 0xF)
  {
    uint64_t v38 = *v36;
    return sub_10001CFB8(v38, v37);
  }
  return result;
}

uint64_t sub_100297F94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v218 = (void (*)(char *, char *, uint64_t))v8;
  uint64_t v220 = v6;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2 + v9, 1, v6))
  {
    uint64_t v12 = sub_10000588C(&qword_101638CF0);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v10, (uint64_t)v11, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  uint64_t v13 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  uint64_t v17 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = a1;
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
  swift_bridgeObjectRetain();
  v24(v19, v20, v21);
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)(v23 + v25);
  uint64_t v27 = (const void *)(a2 + v25);
  uint64_t v225 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  uint64_t v226 = v21;
  uint64_t v223 = v22;
  uint64_t v224 = v24;
  if (v225(a2 + v25, 1, v21))
  {
    uint64_t v28 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    v24((uint64_t)v26, (uint64_t)v27, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v26, 0, 1, v21);
  }
  uint64_t v29 = v23;
  uint64_t v30 = a3[12];
  uint64_t v31 = a3[13];
  uint64_t v32 = v23 + v30;
  uint64_t v33 = a2 + v30;
  *(unsigned char *)uint64_t v32 = *(unsigned char *)v33;
  uint64_t v34 = *(void *)(v33 + 8);
  uint64_t v35 = *(void *)(v33 + 16);
  LOBYTE(v33) = *(unsigned char *)(a2 + v31);
  *(void *)(v32 + 8) = v34;
  *(void *)(v32 + 16) = v35;
  *(unsigned char *)(v23 + v31) = v33;
  size_t v227 = a3;
  uint64_t v228 = a2;
  uint64_t v36 = a3[14];
  unint64_t v37 = (char *)(v23 + v36);
  uint64_t v38 = (char *)(a2 + v36);
  uint64_t v39 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v40 = *((void *)v39 - 1);
  uint64_t v41 = *(unsigned int (**)(char *, uint64_t, int *))(v40 + 48);
  swift_bridgeObjectRetain();
  if (v41(v38, 1, v39))
  {
    uint64_t v42 = sub_10000588C(&qword_1016653B0);
    memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    v218(v37, v38, v220);
    uint64_t v43 = v39[5];
    uint64_t v44 = (uint64_t *)&v37[v43];
    uint64_t v45 = (uint64_t *)&v38[v43];
    uint64_t v46 = *v45;
    unint64_t v47 = v45[1];
    sub_1000361E0(*v45, v47);
    *uint64_t v44 = v46;
    v44[1] = v47;
    uint64_t v48 = v39[6];
    unint64_t v49 = &v37[v48];
    uint64_t v50 = &v38[v48];
    uint64_t v51 = *((void *)v50 + 1);
    *(void *)unint64_t v49 = *(void *)v50;
    *((void *)v49 + 1) = v51;
    uint64_t v52 = v39[7];
    uint64_t v53 = &v37[v52];
    uint64_t v54 = &v38[v52];
    uint64_t v55 = *((void *)v54 + 1);
    *(void *)uint64_t v53 = *(void *)v54;
    *((void *)v53 + 1) = v55;
    *(_DWORD *)&v37[v39[8]] = *(_DWORD *)&v38[v39[8]];
    uint64_t v56 = v39[9];
    uint64_t v57 = &v37[v56];
    uint64_t v58 = &v38[v56];
    *(_DWORD *)uint64_t v57 = *(_DWORD *)v58;
    v57[4] = v58[4];
    uint64_t v59 = v39[10];
    uint64_t v60 = &v37[v59];
    uint64_t v61 = &v38[v59];
    *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
    v60[16] = v61[16];
    uint64_t v62 = v39[11];
    uint64_t v63 = &v37[v62];
    uint64_t v64 = &v38[v62];
    v63[8] = v64[8];
    *(void *)uint64_t v63 = *(void *)v64;
    uint64_t v65 = v39[12];
    int v66 = &v37[v65];
    uint64_t v67 = &v38[v65];
    *(_DWORD *)int v66 = *(_DWORD *)v67;
    v66[4] = v67[4];
    v37[v39[13]] = v38[v39[13]];
    v37[v39[14]] = v38[v39[14]];
    uint64_t v68 = v39[15];
    uint64_t v69 = &v37[v68];
    uint64_t v70 = &v38[v68];
    uint64_t v71 = *((void *)v70 + 1);
    *(void *)uint64_t v69 = *(void *)v70;
    *((void *)v69 + 1) = v71;
    uint64_t v72 = *(void (**)(char *, void, uint64_t, int *))(v40 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v72(v37, 0, 1, v39);
  }
  uint64_t v74 = a3;
  uint64_t v73 = v228;
  uint64_t v76 = (unsigned int (*)(const void *, uint64_t, uint64_t))v225;
  uint64_t v75 = v226;
  uint64_t v77 = v227[15];
  uint64_t v78 = (unsigned char *)(v29 + v77);
  uint64_t v79 = (unsigned char *)(v228 + v77);
  uint64_t v80 = (int *)type metadata accessor for AccessoryProductInfo();
  uint64_t v81 = *((void *)v80 - 1);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v81 + 48))(v79, 1, v80))
  {
    uint64_t v82 = sub_10000588C((uint64_t *)&unk_10166BFA0);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
    uint64_t v83 = (void (*)(void *, const void *, uint64_t))v224;
  }
  else
  {
    uint64_t v214 = v29;
    uint64_t v215 = v81;
    *(void *)uint64_t v78 = *(void *)v79;
    v78[8] = v79[8];
    uint64_t v84 = v80[5];
    uint64_t v85 = &v78[v84];
    uint64_t v86 = &v79[v84];
    uint64_t v87 = type metadata accessor for ServerStatusCode();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v87 - 8) + 16))(v85, v86, v87);
    v78[v80[6]] = v79[v80[6]];
    v78[v80[7]] = v79[v80[7]];
    uint64_t v88 = v80[8];
    uint64_t v89 = &v78[v88];
    uint64_t v90 = &v79[v88];
    uint64_t v221 = v90[1];
    *uint64_t v89 = *v90;
    v89[1] = v221;
    v78[v80[9]] = v79[v80[9]];
    v78[v80[10]] = v79[v80[10]];
    v78[v80[11]] = v79[v80[11]];
    uint64_t v91 = v80[12];
    uint64_t v92 = &v78[v91];
    uint64_t v93 = &v79[v91];
    uint64_t v212 = v93[1];
    *uint64_t v92 = *v93;
    v92[1] = v212;
    uint64_t v94 = v80[13];
    uint64_t v95 = &v78[v94];
    uint64_t v96 = &v79[v94];
    uint64_t v97 = v96[1];
    *uint64_t v95 = *v96;
    v95[1] = v97;
    uint64_t v98 = v80[14];
    uint64_t v99 = &v78[v98];
    uint64_t v100 = &v79[v98];
    *(void *)uint64_t v99 = *(void *)v100;
    v99[8] = v100[8];
    uint64_t v101 = v80[15];
    uint64_t v102 = &v78[v101];
    uint64_t v103 = &v79[v101];
    uint64_t v104 = v103[1];
    void *v102 = *v103;
    v102[1] = v104;
    uint64_t v105 = v80[16];
    __dst = &v78[v105];
    char v211 = &v79[v105];
    uint64_t v106 = type metadata accessor for URL();
    uint64_t v107 = *(void *)(v106 - 8);
    uint64_t v108 = *(unsigned int (**)(void))(v107 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v109 = (void *)v106;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unsigned int v110 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v108)(v211, 1, v106);
    uint64_t v111 = v108;
    uint64_t v219 = v107;
    if (v110)
    {
      uint64_t v112 = sub_10000588C(&qword_101649E40);
      memcpy(__dst, v211, *(void *)(*(void *)(v112 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, void *))(v107 + 16))(__dst, v211, v109);
      (*(void (**)(unsigned char *, void, uint64_t, void *))(v107 + 56))(__dst, 0, 1, v109);
    }
    uint64_t v113 = v80[17];
    uint64_t v114 = &v78[v113];
    uint64_t v115 = &v79[v113];
    __dsta = v109;
    uint64_t v210 = v111;
    if (((unsigned int (*)(unsigned char *, uint64_t, void *))v111)(&v79[v113], 1, v109))
    {
      uint64_t v116 = sub_10000588C(&qword_101649E40);
      memcpy(v114, v115, *(void *)(*(void *)(v116 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, void *))(v107 + 16))(v114, v115, v109);
      (*(void (**)(unsigned char *, void, uint64_t, void *))(v107 + 56))(v114, 0, 1, v109);
    }
    uint64_t v117 = v80[18];
    uint64_t v118 = &v78[v117];
    uint64_t v119 = &v79[v117];
    uint64_t v120 = v119[1];
    *uint64_t v118 = *v119;
    v118[1] = v120;
    *(void *)&v78[v80[19]] = *(void *)&v79[v80[19]];
    uint64_t v121 = v80[20];
    uint64_t v122 = &v78[v121];
    uint64_t v123 = &v79[v121];
    uint64_t v124 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    uint64_t v125 = *((void *)v124 - 1);
    uint64_t v126 = *(unsigned int (**)(void *, uint64_t, int *))(v125 + 48);
    swift_bridgeObjectRetain();
    if (v126(v123, 1, v124))
    {
      uint64_t v127 = sub_10000588C(&qword_101649E50);
      memcpy(v122, v123, *(void *)(*(void *)(v127 - 8) + 64));
    }
    else
    {
      uint64_t v213 = v125;
      uint64_t v128 = v123[1];
      *uint64_t v122 = *v123;
      v122[1] = v128;
      uint64_t v129 = v123[3];
      v122[2] = v123[2];
      v122[3] = v129;
      uint64_t v130 = v123[5];
      v122[4] = v123[4];
      v122[5] = v130;
      *((_WORD *)v122 + 24) = *((_WORD *)v123 + 24);
      *((unsigned char *)v122 + 72) = *((unsigned char *)v123 + 72);
      uint64_t v131 = v123[8];
      v122[7] = v123[7];
      v122[8] = v131;
      uint64_t v132 = v124[10];
      uint64_t v133 = (char *)v122 + v132;
      uint64_t v134 = (char *)v123 + v132;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (((unsigned int (*)(char *, uint64_t, void *))v210)(v134, 1, __dsta))
      {
        uint64_t v135 = sub_10000588C(&qword_101649E40);
        memcpy(v133, v134, *(void *)(*(void *)(v135 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, void *))(v219 + 16))(v133, v134, __dsta);
        (*(void (**)(char *, void, uint64_t, void *))(v219 + 56))(v133, 0, 1, __dsta);
      }
      uint64_t v136 = v124[11];
      uint64_t v137 = (char *)v122 + v136;
      uint64_t v138 = (char *)v123 + v136;
      if (v210())
      {
        uint64_t v139 = sub_10000588C(&qword_101649E40);
        memcpy(v137, v138, *(void *)(*(void *)(v139 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, void *))(v219 + 16))(v137, v138, __dsta);
        (*(void (**)(char *, void, uint64_t, void *))(v219 + 56))(v137, 0, 1, __dsta);
      }
      uint64_t v140 = v124[12];
      uint64_t v141 = (char *)v122 + v140;
      uint64_t v142 = (char *)v123 + v140;
      *(void *)uint64_t v141 = *(void *)v142;
      v141[8] = v142[8];
      uint64_t v143 = v124[13];
      int v144 = (void *)((char *)v122 + v143);
      uint64_t v145 = (void *)((char *)v123 + v143);
      uint64_t v146 = v145[1];
      *int v144 = *v145;
      v144[1] = v146;
      *(void *)((char *)v122 + v124[14]) = *(void *)((char *)v123 + v124[14]);
      uint64_t v147 = v124[15];
      uint64_t v148 = (void *)((char *)v122 + v147);
      uint64_t v149 = (void *)((char *)v123 + v147);
      uint64_t v150 = v149[1];
      *uint64_t v148 = *v149;
      v148[1] = v150;
      *(void *)((char *)v122 + v124[16]) = *(void *)((char *)v123 + v124[16]);
      uint64_t v151 = v124[17];
      uint64_t v152 = (char *)v122 + v151;
      uint64_t v153 = (char *)v123 + v151;
      *(_OWORD *)uint64_t v152 = *(_OWORD *)v153;
      v152[16] = v153[16];
      uint64_t v154 = v124[18];
      int v155 = (char *)v122 + v154;
      uint64_t v156 = (char *)v123 + v154;
      *(_OWORD *)int v155 = *(_OWORD *)v156;
      v155[16] = v156[16];
      uint64_t v157 = *(void (**)(void *, void, uint64_t, int *))(v213 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v157(v122, 0, 1, v124);
    }
    *(_DWORD *)&v78[v80[21]] = *(_DWORD *)&v79[v80[21]];
    *(void *)&v78[v80[22]] = *(void *)&v79[v80[22]];
    uint64_t v158 = v80[23];
    BOOL v159 = &v78[v158];
    uint64_t v160 = (uint64_t *)&v79[v158];
    unint64_t v161 = *(void *)&v79[v158 + 8];
    swift_bridgeObjectRetain();
    if (v161 >> 60 == 15)
    {
      *(_OWORD *)BOOL v159 = *(_OWORD *)v160;
    }
    else
    {
      uint64_t v162 = *v160;
      sub_1000361E0(*v160, v161);
      *(void *)BOOL v159 = v162;
      *((void *)v159 + 1) = v161;
    }
    uint64_t v163 = v80[24];
    uint64_t v164 = &v78[v163];
    uint64_t v165 = &v79[v163];
    unint64_t v166 = *((void *)v165 + 1);
    if (v166 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v164 = *(_OWORD *)v165;
    }
    else
    {
      uint64_t v167 = *(void *)v165;
      sub_1000361E0(*(void *)v165, *((void *)v165 + 1));
      *(void *)uint64_t v164 = v167;
      *((void *)v164 + 1) = v166;
    }
    unint64_t v168 = *(void (**)(unsigned char *, unsigned char *, void *))(v219 + 16);
    v168(&v78[v80[25]], &v79[v80[25]], __dsta);
    v168(&v78[v80[26]], &v79[v80[26]], __dsta);
    v168(&v78[v80[27]], &v79[v80[27]], __dsta);
    v168(&v78[v80[28]], &v79[v80[28]], __dsta);
    v168(&v78[v80[29]], &v79[v80[29]], __dsta);
    v168(&v78[v80[30]], &v79[v80[30]], __dsta);
    uint64_t v169 = v80[31];
    uint64_t v170 = &v78[v169];
    uint64_t v171 = &v79[v169];
    uint64_t v172 = v171[1];
    *uint64_t v170 = *v171;
    v170[1] = v172;
    *(void *)&v78[v80[32]] = *(void *)&v79[v80[32]];
    uint64_t v173 = v80[33];
    uint64_t v174 = &v78[v173];
    uint64_t v175 = &v79[v173];
    uint64_t v176 = v175[1];
    *uint64_t v174 = *v175;
    v174[1] = v176;
    *(void *)&v78[v80[34]] = *(void *)&v79[v80[34]];
    uint64_t v177 = v80[35];
    uint64_t v178 = &v78[v177];
    uint64_t v179 = &v79[v177];
    *(_OWORD *)uint64_t v178 = *(_OWORD *)v179;
    v178[16] = v179[16];
    uint64_t v180 = v80[36];
    uint64_t v181 = &v78[v180];
    uint64_t v182 = &v79[v180];
    *(_OWORD *)uint64_t v181 = *(_OWORD *)v182;
    v181[16] = v182[16];
    uint64_t v183 = v80[37];
    uint64_t v184 = &v78[v183];
    uint64_t v222 = &v79[v183];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v168(v184, v222, __dsta);
    v168(&v78[v80[38]], &v79[v80[38]], __dsta);
    v168(&v78[v80[39]], &v79[v80[39]], __dsta);
    v168(&v78[v80[40]], &v79[v80[40]], __dsta);
    v168(&v78[v80[41]], &v79[v80[41]], __dsta);
    v168(&v78[v80[42]], &v79[v80[42]], __dsta);
    v78[v80[43]] = v79[v80[43]];
    v78[v80[44]] = v79[v80[44]];
    v78[v80[45]] = v79[v80[45]];
    uint64_t v185 = v80[46];
    uint64_t v186 = &v78[v185];
    uint64_t v187 = &v79[v185];
    uint64_t v188 = v187[1];
    *uint64_t v186 = *v187;
    v186[1] = v188;
    uint64_t v189 = v80[47];
    uint64_t v190 = &v78[v189];
    uint64_t v191 = &v79[v189];
    uint64_t v192 = v191[1];
    *uint64_t v190 = *v191;
    v190[1] = v192;
    uint64_t v193 = *(void (**)(unsigned char *, void, uint64_t, int *))(v215 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v193(v78, 0, 1, v80);
    uint64_t v74 = v227;
    uint64_t v73 = v228;
    uint64_t v76 = (unsigned int (*)(const void *, uint64_t, uint64_t))v225;
    uint64_t v75 = v226;
    uint64_t v83 = (void (*)(void *, const void *, uint64_t))v224;
    uint64_t v29 = v214;
  }
  uint64_t v194 = v74[17];
  *(unsigned char *)(v29 + v74[16]) = *(unsigned char *)(v73 + v74[16]);
  *(void *)(v29 + v194) = *(void *)(v73 + v194);
  uint64_t v195 = v74[18];
  uint64_t v196 = (void *)(v29 + v195);
  uint64_t v197 = (const void *)(v73 + v195);
  swift_bridgeObjectRetain();
  if (v76(v197, 1, v75))
  {
    uint64_t v198 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v196, v197, *(void *)(*(void *)(v198 - 8) + 64));
  }
  else
  {
    v83(v196, v197, v75);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v223 + 56))(v196, 0, 1, v75);
  }
  uint64_t v199 = v74[19];
  uint64_t v200 = (void *)(v29 + v199);
  uint64_t v201 = (const void *)(v73 + v199);
  if (v76((const void *)(v73 + v199), 1, v75))
  {
    uint64_t v202 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v200, v201, *(void *)(*(void *)(v202 - 8) + 64));
  }
  else
  {
    v83(v200, v201, v75);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v223 + 56))(v200, 0, 1, v75);
  }
  uint64_t v203 = v74[20];
  uint64_t v204 = v29 + v203;
  uint64_t v205 = (uint64_t *)(v73 + v203);
  unint64_t v206 = v205[1];
  if (((v206 >> 60) | 4) == 0xF)
  {
    *(_OWORD *)uint64_t v204 = *(_OWORD *)v205;
  }
  else
  {
    uint64_t v207 = *v205;
    sub_1000361E0(*v205, v205[1]);
    *(void *)uint64_t v204 = v207;
    *(void *)(v204 + 8) = v206;
  }
  uint64_t v208 = v74[22];
  *(unsigned char *)(v29 + v74[21]) = *(unsigned char *)(v73 + v74[21]);
  *(_WORD *)(v29 + v208) = *(_WORD *)(v73 + v208);
  return v29;
}

uint64_t sub_100298FF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v424 = a3;
  uint64_t v9 = a3[5];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(a1 + v9, 1, v6);
  int v14 = v12((uint64_t)v11, 1, v6);
  uint64_t v416 = v6;
  uint64_t v405 = v8;
  uint64_t v409 = v7;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v10, v11, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    uint64_t v15 = sub_10000588C(&qword_101638CF0);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v10, (uint64_t)v11, v6);
LABEL_7:
  *(unsigned char *)(a1 + v424[6]) = *(unsigned char *)(a2 + v424[6]);
  uint64_t v16 = v424[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  *(void *)(a1 + v424[8]) = *(void *)(a2 + v424[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v424[9]) = *(unsigned char *)(a2 + v424[9]);
  uint64_t v20 = v424[10];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = a1;
  uint64_t v25 = *(void *)(v23 - 8);
  uint64_t v419 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24);
  v419(v21, v22, v23);
  uint64_t v26 = v424[11];
  uint64_t v27 = v24;
  uint64_t v28 = (void *)(v24 + v26);
  uint64_t v29 = (const void *)(a2 + v26);
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v24) = v30(v24 + v26, 1, v23);
  uint64_t v421 = v30;
  int v31 = v30((uint64_t)v29, 1, v23);
  uint64_t v422 = v23;
  uint64_t v420 = v25;
  if (v24)
  {
    if (!v31)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v28, v29, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v28, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v28, v23);
LABEL_12:
    uint64_t v32 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  v419((uint64_t)v28, (uint64_t)v29, v23);
LABEL_13:
  uint64_t v33 = v27;
  uint64_t v34 = v424[12];
  uint64_t v35 = v27 + v34;
  uint64_t v36 = a2 + v34;
  *(unsigned char *)uint64_t v35 = *(unsigned char *)v36;
  *(void *)(v35 + 8) = *(void *)(v36 + 8);
  *(void *)(v35 + 16) = *(void *)(v36 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v27 + v424[13]) = *(unsigned char *)(a2 + v424[13]);
  uint64_t v37 = v424[14];
  uint64_t v38 = (unsigned char *)(v27 + v37);
  uint64_t v423 = a2;
  uint64_t v39 = (unsigned char *)(a2 + v37);
  uint64_t v40 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v41 = *((void *)v40 - 1);
  uint64_t v42 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v41 + 48);
  int v43 = v42(v38, 1, v40);
  int v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v409 + 16))(v38, v39, v416);
      uint64_t v45 = v40[5];
      uint64_t v46 = (uint64_t *)&v38[v45];
      unint64_t v47 = (uint64_t *)&v39[v45];
      uint64_t v48 = *v47;
      unint64_t v49 = v47[1];
      sub_1000361E0(*v47, v49);
      *uint64_t v46 = v48;
      v46[1] = v49;
      uint64_t v50 = v40[6];
      uint64_t v51 = &v38[v50];
      uint64_t v52 = &v39[v50];
      *uint64_t v51 = *v52;
      v51[1] = v52[1];
      uint64_t v53 = v40[7];
      uint64_t v54 = &v38[v53];
      uint64_t v55 = &v39[v53];
      *uint64_t v54 = *v55;
      v54[1] = v55[1];
      *(_DWORD *)&v38[v40[8]] = *(_DWORD *)&v39[v40[8]];
      uint64_t v56 = v40[9];
      uint64_t v57 = &v38[v56];
      uint64_t v58 = &v39[v56];
      int v59 = *(_DWORD *)v58;
      v57[4] = v58[4];
      *(_DWORD *)uint64_t v57 = v59;
      uint64_t v60 = v40[10];
      uint64_t v61 = &v38[v60];
      uint64_t v62 = &v39[v60];
      long long v63 = *(_OWORD *)v62;
      v61[16] = v62[16];
      *(_OWORD *)uint64_t v61 = v63;
      uint64_t v64 = v40[11];
      uint64_t v65 = &v38[v64];
      int v66 = &v39[v64];
      uint64_t v67 = *(void *)v66;
      v65[8] = v66[8];
      *(void *)uint64_t v65 = v67;
      uint64_t v68 = v40[12];
      uint64_t v69 = &v38[v68];
      uint64_t v70 = &v39[v68];
      LODWORD(v67) = *(_DWORD *)v70;
      v69[4] = v70[4];
      *(_DWORD *)uint64_t v69 = v67;
      v38[v40[13]] = v39[v40[13]];
      v38[v40[14]] = v39[v40[14]];
      uint64_t v71 = v40[15];
      uint64_t v72 = &v38[v71];
      uint64_t v73 = &v39[v71];
      *uint64_t v72 = *v73;
      v72[1] = v73[1];
      uint64_t v74 = *(void (**)(unsigned char *, void, uint64_t, int *))(v41 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v74(v38, 0, 1, v40);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v44)
  {
    sub_100294680((uint64_t)v38, type metadata accessor for AccessoryMetadata);
LABEL_18:
    uint64_t v75 = sub_10000588C(&qword_1016653B0);
    memcpy(v38, v39, *(void *)(*(void *)(v75 - 8) + 64));
    goto LABEL_19;
  }
  v405((uint64_t)v38, (uint64_t)v39, v416);
  uint64_t v116 = v40[5];
  uint64_t v117 = (uint64_t *)&v38[v116];
  uint64_t v118 = (uint64_t *)&v39[v116];
  uint64_t v119 = *v118;
  unint64_t v120 = v118[1];
  sub_1000361E0(*v118, v120);
  uint64_t v121 = *v117;
  unint64_t v122 = v117[1];
  *uint64_t v117 = v119;
  v117[1] = v120;
  sub_10001CFB8(v121, v122);
  uint64_t v123 = v40[6];
  uint64_t v124 = &v38[v123];
  uint64_t v125 = &v39[v123];
  *uint64_t v124 = *v125;
  v124[1] = v125[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v126 = v40[7];
  uint64_t v127 = &v38[v126];
  uint64_t v128 = &v39[v126];
  *uint64_t v127 = *v128;
  v127[1] = v128[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v129 = v40[8];
  uint64_t v130 = &v38[v129];
  uint64_t v131 = &v39[v129];
  *(_WORD *)uint64_t v130 = *(_WORD *)v131;
  v130[2] = v131[2];
  v130[3] = v131[3];
  uint64_t v132 = v40[9];
  uint64_t v133 = &v38[v132];
  uint64_t v134 = &v39[v132];
  int v135 = *(_DWORD *)v134;
  v133[4] = v134[4];
  *(_DWORD *)uint64_t v133 = v135;
  uint64_t v136 = v40[10];
  uint64_t v137 = &v38[v136];
  uint64_t v138 = &v39[v136];
  long long v139 = *(_OWORD *)v138;
  v137[16] = v138[16];
  *(_OWORD *)uint64_t v137 = v139;
  uint64_t v140 = v40[11];
  uint64_t v141 = &v38[v140];
  uint64_t v142 = &v39[v140];
  uint64_t v143 = *(void *)v142;
  v141[8] = v142[8];
  *(void *)uint64_t v141 = v143;
  uint64_t v144 = v40[12];
  uint64_t v145 = &v38[v144];
  uint64_t v146 = &v39[v144];
  LODWORD(v143) = *(_DWORD *)v146;
  v145[4] = v146[4];
  *(_DWORD *)uint64_t v145 = v143;
  v38[v40[13]] = v39[v40[13]];
  v38[v40[14]] = v39[v40[14]];
  uint64_t v147 = v40[15];
  uint64_t v148 = &v38[v147];
  uint64_t v149 = &v39[v147];
  *uint64_t v148 = *v149;
  v148[1] = v149[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v77 = v423;
  uint64_t v76 = v424;
  uint64_t v78 = v422;
  uint64_t v79 = v424[15];
  uint64_t v80 = (unsigned char *)(v33 + v79);
  uint64_t v81 = (unsigned char *)(v423 + v79);
  uint64_t v82 = (int *)type metadata accessor for AccessoryProductInfo();
  __src = (void *)*((void *)v82 - 1);
  uint64_t v83 = (uint64_t (*)(unsigned char *, uint64_t, int *))__src[6];
  int v84 = v83(v80, 1, v82);
  int v85 = v83(v81, 1, v82);
  if (!v84)
  {
    if (v85)
    {
      sub_100294680((uint64_t)v80, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      goto LABEL_25;
    }
    uint64_t v150 = *(void *)v81;
    v80[8] = v81[8];
    *(void *)uint64_t v80 = v150;
    uint64_t v151 = v82[5];
    uint64_t v152 = &v80[v151];
    uint64_t v153 = &v81[v151];
    uint64_t v154 = type metadata accessor for ServerStatusCode();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v154 - 8) + 24))(v152, v153, v154);
    v80[v82[6]] = v81[v82[6]];
    v80[v82[7]] = v81[v82[7]];
    uint64_t v155 = v82[8];
    uint64_t v156 = &v80[v155];
    uint64_t v157 = &v81[v155];
    *uint64_t v156 = *v157;
    v156[1] = v157[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v80[v82[9]] = v81[v82[9]];
    v80[v82[10]] = v81[v82[10]];
    v80[v82[11]] = v81[v82[11]];
    uint64_t v158 = v82[12];
    BOOL v159 = &v80[v158];
    uint64_t v160 = &v81[v158];
    *BOOL v159 = *v160;
    v159[1] = v160[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v161 = v82[13];
    uint64_t v162 = &v80[v161];
    uint64_t v163 = &v81[v161];
    *uint64_t v162 = *v163;
    v162[1] = v163[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v164 = v82[14];
    uint64_t v165 = &v80[v164];
    unint64_t v166 = &v81[v164];
    uint64_t v167 = *(void *)v166;
    v165[8] = v166[8];
    *(void *)uint64_t v165 = v167;
    uint64_t v168 = v82[15];
    uint64_t v169 = &v80[v168];
    uint64_t v170 = &v81[v168];
    *uint64_t v169 = *v170;
    v169[1] = v170[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v171 = v82[16];
    uint64_t v172 = &v80[v171];
    uint64_t v173 = &v81[v171];
    uint64_t v174 = type metadata accessor for URL();
    uint64_t v175 = *(void *)(v174 - 8);
    uint64_t v176 = *(uint64_t (**)(void))(v175 + 48);
    uint64_t v407 = v172;
    LODWORD(v172) = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v176)(v172, 1, v174);
    unint64_t v418 = v176;
    unsigned int v177 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v176)(v173, 1, v174);
    if (v172)
    {
      if (v177)
      {
        size_t v178 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
        uint64_t v179 = v407;
LABEL_43:
        memcpy(v179, v173, v178);
        goto LABEL_80;
      }
      (*(void (**)(void *, unsigned char *, uint64_t))(v175 + 16))(v407, v173, v174);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v175 + 56))(v407, 0, 1, v174);
    }
    else
    {
      if (v177)
      {
        (*(void (**)(void *, uint64_t))(v175 + 8))(v407, v174);
        size_t v178 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
        uint64_t v179 = v407;
        goto LABEL_43;
      }
      (*(void (**)(void *, unsigned char *, uint64_t))(v175 + 24))(v407, v173, v174);
    }
LABEL_80:
    uint64_t v282 = v82[17];
    uint64_t v283 = &v81[v282];
    uint64_t v403 = &v80[v282];
    int v284 = v176();
    unsigned int v285 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v176)(v283, 1, v174);
    uint64_t v413 = v175;
    __srca = (void *)v174;
    if (v284)
    {
      if (v285)
      {
        size_t v286 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
        uint64_t v287 = v403;
LABEL_85:
        memcpy(v287, v283, v286);
        goto LABEL_88;
      }
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v175 + 16))(v403, v283, v174);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v175 + 56))(v403, 0, 1, v174);
    }
    else
    {
      if (v285)
      {
        (*(void (**)(unsigned char *, uint64_t))(v175 + 8))(v403, v174);
        size_t v286 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
        uint64_t v287 = v403;
        goto LABEL_85;
      }
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v175 + 24))(v403, v283, v174);
    }
LABEL_88:
    uint64_t v288 = v82[18];
    uint64_t v289 = &v80[v288];
    uint64_t v290 = &v81[v288];
    *uint64_t v289 = *v290;
    v289[1] = v290[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&v80[v82[19]] = *(void *)&v81[v82[19]];
    uint64_t v291 = v82[20];
    uint64_t v292 = &v80[v291];
    uint64_t v293 = &v81[v291];
    uint64_t v294 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    uint64_t v398 = *(void *)(v294 - 8);
    uint64_t v295 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v398 + 48);
    uint64_t v296 = (uint64_t)v292;
    LODWORD(v292) = v295(v292, 1, v294);
    uint64_t v404 = (int *)v294;
    uint64_t v408 = v293;
    int v297 = v295(v293, 1, v294);
    if (v292)
    {
      if (!v297)
      {
        uint64_t v298 = v296;
        *(void *)uint64_t v296 = *(void *)v293;
        *(void *)(v296 + 8) = *((void *)v293 + 1);
        *(void *)(v296 + 16) = *((void *)v293 + 2);
        *(void *)(v296 + 24) = *((void *)v293 + 3);
        *(void *)(v296 + 32) = *((void *)v293 + 4);
        *(void *)(v296 + 40) = *((void *)v293 + 5);
        *(_WORD *)(v296 + 48) = *((_WORD *)v293 + 24);
        *(void *)(v296 + 56) = *((void *)v293 + 7);
        uint64_t v299 = *((void *)v293 + 8);
        *(unsigned char *)(v296 + 72) = v293[72];
        *(void *)(v296 + 64) = v299;
        uint64_t v300 = v404[10];
        __dst = (void *)(v296 + v300);
        uint64_t v301 = &v293[v300];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v418)(v301, 1, v174))
        {
          uint64_t v302 = sub_10000588C(&qword_101649E40);
          memcpy(__dst, v301, *(void *)(*(void *)(v302 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v413 + 16))(__dst, v301, v174);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v413 + 56))(__dst, 0, 1, v174);
        }
        uint64_t v311 = v404[11];
        uint64_t v312 = (void *)(v296 + v311);
        uint64_t v313 = &v408[v311];
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v418)(&v408[v311], 1, v174))
        {
          uint64_t v314 = sub_10000588C(&qword_101649E40);
          memcpy(v312, v313, *(void *)(*(void *)(v314 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v413 + 16))(v312, v313, v174);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v413 + 56))(v312, 0, 1, v174);
        }
        uint64_t v315 = v404[12];
        uint64_t v316 = v298 + v315;
        uint64_t v317 = &v408[v315];
        uint64_t v318 = *(void *)v317;
        *(unsigned char *)(v316 + 8) = v317[8];
        *(void *)uint64_t v316 = v318;
        uint64_t v319 = v404[13];
        uint64_t v320 = (void *)(v298 + v319);
        uint64_t v321 = &v408[v319];
        *uint64_t v320 = *(void *)v321;
        v320[1] = *((void *)v321 + 1);
        *(void *)(v298 + v404[14]) = *(void *)&v408[v404[14]];
        uint64_t v322 = v404[15];
        uint64_t v323 = (void *)(v298 + v322);
        uint64_t v324 = &v408[v322];
        *uint64_t v323 = *(void *)v324;
        v323[1] = *((void *)v324 + 1);
        *(void *)(v298 + v404[16]) = *(void *)&v408[v404[16]];
        uint64_t v325 = v404[17];
        uint64_t v326 = v298 + v325;
        uint64_t v327 = &v408[v325];
        long long v328 = *(_OWORD *)v327;
        *(unsigned char *)(v326 + 16) = v327[16];
        *(_OWORD *)uint64_t v326 = v328;
        uint64_t v329 = v404[18];
        uint64_t v330 = v298 + v329;
        uint64_t v331 = &v408[v329];
        long long v332 = *(_OWORD *)v331;
        *(unsigned char *)(v330 + 16) = v331[16];
        *(_OWORD *)uint64_t v330 = v332;
        uint64_t v333 = *(void (**)(uint64_t, void, uint64_t, int *))(v398 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v333(v298, 0, 1, v404);
LABEL_116:
        *(_DWORD *)&v80[v82[21]] = *(_DWORD *)&v81[v82[21]];
        *(void *)&v80[v82[22]] = *(void *)&v81[v82[22]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v359 = v82[23];
        uint64_t v360 = (uint64_t *)&v80[v359];
        uint64_t v361 = (uint64_t *)&v81[v359];
        unint64_t v362 = *(void *)&v81[v359 + 8];
        if (*(void *)&v80[v359 + 8] >> 60 == 15)
        {
          if (v362 >> 60 != 15)
          {
            uint64_t v363 = *v361;
            sub_1000361E0(*v361, v362);
            *uint64_t v360 = v363;
            v360[1] = v362;
            goto LABEL_123;
          }
        }
        else
        {
          if (v362 >> 60 != 15)
          {
            uint64_t v364 = *v361;
            sub_1000361E0(*v361, v362);
            uint64_t v365 = *v360;
            unint64_t v366 = v360[1];
            *uint64_t v360 = v364;
            v360[1] = v362;
            sub_10001CFB8(v365, v366);
LABEL_123:
            uint64_t v367 = v82[24];
            uint64_t v368 = (uint64_t *)&v80[v367];
            uint64_t v369 = (uint64_t *)&v81[v367];
            unint64_t v370 = *(void *)&v81[v367 + 8];
            if (*(void *)&v80[v367 + 8] >> 60 == 15)
            {
              if (v370 >> 60 != 15)
              {
                uint64_t v371 = *v369;
                sub_1000361E0(*v369, v370);
                *uint64_t v368 = v371;
                v368[1] = v370;
LABEL_130:
                uint64_t v78 = v422;
                uint64_t v77 = v423;
                uint64_t v375 = *(void (**)(unsigned char *, unsigned char *, void *))(v413 + 24);
                v375(&v80[v82[25]], &v81[v82[25]], __srca);
                v375(&v80[v82[26]], &v81[v82[26]], __srca);
                v375(&v80[v82[27]], &v81[v82[27]], __srca);
                v375(&v80[v82[28]], &v81[v82[28]], __srca);
                v375(&v80[v82[29]], &v81[v82[29]], __srca);
                v375(&v80[v82[30]], &v81[v82[30]], __srca);
                uint64_t v376 = v82[31];
                uint64_t v377 = &v80[v376];
                uint64_t v378 = &v81[v376];
                *uint64_t v377 = *v378;
                v377[1] = v378[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                *(void *)&v80[v82[32]] = *(void *)&v81[v82[32]];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                uint64_t v379 = v82[33];
                uint64_t v380 = &v80[v379];
                uint64_t v381 = &v81[v379];
                *uint64_t v380 = *v381;
                v380[1] = v381[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                *(void *)&v80[v82[34]] = *(void *)&v81[v82[34]];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                uint64_t v382 = v82[35];
                uint64_t v383 = &v80[v382];
                uint64_t v384 = &v81[v382];
                long long v385 = *(_OWORD *)v384;
                v383[16] = v384[16];
                *(_OWORD *)uint64_t v383 = v385;
                uint64_t v386 = v82[36];
                unint64_t v387 = &v80[v386];
                Swift::String v388 = &v81[v386];
                long long v389 = *(_OWORD *)v388;
                v387[16] = v388[16];
                *(_OWORD *)unint64_t v387 = v389;
                v375(&v80[v82[37]], &v81[v82[37]], __srca);
                v375(&v80[v82[38]], &v81[v82[38]], __srca);
                v375(&v80[v82[39]], &v81[v82[39]], __srca);
                v375(&v80[v82[40]], &v81[v82[40]], __srca);
                v375(&v80[v82[41]], &v81[v82[41]], __srca);
                v375(&v80[v82[42]], &v81[v82[42]], __srca);
                v80[v82[43]] = v81[v82[43]];
                v80[v82[44]] = v81[v82[44]];
                v80[v82[45]] = v81[v82[45]];
                uint64_t v390 = v82[46];
                unint64_t v391 = &v80[v390];
                uint64_t v392 = &v81[v390];
                *unint64_t v391 = *v392;
                v391[1] = v392[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                uint64_t v393 = v82[47];
                uint64_t v394 = &v80[v393];
                unint64_t v395 = &v81[v393];
                *uint64_t v394 = *v395;
                v394[1] = v395[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                uint64_t v76 = v424;
                goto LABEL_26;
              }
            }
            else
            {
              if (v370 >> 60 != 15)
              {
                uint64_t v372 = *v369;
                sub_1000361E0(*v369, v370);
                uint64_t v373 = *v368;
                unint64_t v374 = v368[1];
                *uint64_t v368 = v372;
                v368[1] = v370;
                sub_10001CFB8(v373, v374);
                goto LABEL_130;
              }
              sub_1001356D0((uint64_t)v368);
            }
            *(_OWORD *)uint64_t v368 = *(_OWORD *)v369;
            goto LABEL_130;
          }
          sub_1001356D0((uint64_t)v360);
        }
        *(_OWORD *)uint64_t v360 = *(_OWORD *)v361;
        goto LABEL_123;
      }
LABEL_94:
      uint64_t v303 = sub_10000588C(&qword_101649E50);
      memcpy((void *)v296, v293, *(void *)(*(void *)(v303 - 8) + 64));
      goto LABEL_116;
    }
    if (v297)
    {
      sub_100294680(v296, type metadata accessor for AccessoryInfoResponseContent.Configuration);
      goto LABEL_94;
    }
    *(void *)uint64_t v296 = *(void *)v293;
    *(void *)(v296 + 8) = *((void *)v293 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v296 + 16) = *((void *)v293 + 2);
    *(void *)(v296 + 24) = *((void *)v293 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v296 + 32) = *((void *)v293 + 4);
    *(void *)(v296 + 40) = *((void *)v293 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_WORD *)(v296 + 48) = *((_WORD *)v293 + 24);
    *(void *)(v296 + 56) = *((void *)v293 + 7);
    uint64_t v304 = *((void *)v293 + 8);
    *(unsigned char *)(v296 + 72) = v293[72];
    *(void *)(v296 + 64) = v304;
    uint64_t v305 = *(int *)(v294 + 40);
    uint64_t v306 = &v293[v305];
    os_log_type_t v399 = (void *)(v296 + v305);
    int v307 = v418();
    unsigned int v308 = ((uint64_t (*)(char *, uint64_t, uint64_t))v418)(v306, 1, v174);
    if (v307)
    {
      if (v308)
      {
        uint64_t v309 = sub_10000588C(&qword_101649E40);
        memcpy(v399, v306, *(void *)(*(void *)(v309 - 8) + 64));
        uint64_t v310 = v174;
      }
      else
      {
        uint64_t v310 = v174;
        (*(void (**)(void *, char *, uint64_t))(v413 + 16))(v399, v306, v174);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v413 + 56))(v399, 0, 1, v174);
      }
    }
    else
    {
      uint64_t v310 = v174;
      if (v308)
      {
        (*(void (**)(void *, uint64_t))(v413 + 8))(v399, v174);
        uint64_t v334 = sub_10000588C(&qword_101649E40);
        memcpy(v399, v306, *(void *)(*(void *)(v334 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v413 + 24))(v399, v306, v174);
      }
    }
    uint64_t v335 = v404[11];
    os_log_type_t v336 = &v408[v335];
    uint64_t v400 = (void *)(v296 + v335);
    int v337 = v418();
    unsigned int v338 = ((uint64_t (*)(char *, uint64_t, uint64_t))v418)(v336, 1, v310);
    if (v337)
    {
      if (!v338)
      {
        (*(void (**)(void *, char *, uint64_t))(v413 + 16))(v400, v336, v174);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v413 + 56))(v400, 0, 1, v174);
        goto LABEL_115;
      }
      size_t v339 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
      uint64_t v340 = v400;
    }
    else
    {
      if (!v338)
      {
        (*(void (**)(void *, char *, uint64_t))(v413 + 24))(v400, v336, v174);
        goto LABEL_115;
      }
      (*(void (**)(void *, uint64_t))(v413 + 8))(v400, v174);
      size_t v339 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
      uint64_t v340 = v400;
    }
    memcpy(v340, v336, v339);
LABEL_115:
    uint64_t v341 = v404[12];
    uint64_t v342 = v296 + v341;
    uint64_t v343 = &v408[v341];
    uint64_t v344 = *(void *)v343;
    *(unsigned char *)(v342 + 8) = v343[8];
    *(void *)uint64_t v342 = v344;
    uint64_t v345 = v404[13];
    uint64_t v346 = (void *)(v296 + v345);
    uint64_t v347 = &v408[v345];
    *uint64_t v346 = *(void *)v347;
    v346[1] = *((void *)v347 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v296 + v404[14]) = *(void *)&v408[v404[14]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v348 = v404[15];
    uint64_t v349 = (void *)(v296 + v348);
    uint64_t v350 = &v408[v348];
    *uint64_t v349 = *(void *)v350;
    v349[1] = *((void *)v350 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v296 + v404[16]) = *(void *)&v408[v404[16]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v351 = v404[17];
    uint64_t v352 = v296 + v351;
    uint64_t v353 = &v408[v351];
    long long v354 = *(_OWORD *)v353;
    *(unsigned char *)(v352 + 16) = v353[16];
    *(_OWORD *)uint64_t v352 = v354;
    uint64_t v355 = v404[18];
    uint64_t v356 = v296 + v355;
    uint64_t v357 = &v408[v355];
    long long v358 = *(_OWORD *)v357;
    *(unsigned char *)(v356 + 16) = v357[16];
    *(_OWORD *)uint64_t v356 = v358;
    goto LABEL_116;
  }
  if (v85)
  {
LABEL_25:
    uint64_t v114 = sub_10000588C((uint64_t *)&unk_10166BFA0);
    memcpy(v80, v81, *(void *)(*(void *)(v114 - 8) + 64));
LABEL_26:
    uint64_t v115 = v421;
    goto LABEL_57;
  }
  uint64_t v401 = v33;
  uint64_t v86 = *(void *)v81;
  v80[8] = v81[8];
  *(void *)uint64_t v80 = v86;
  uint64_t v87 = v82[5];
  uint64_t v88 = &v80[v87];
  uint64_t v89 = &v81[v87];
  uint64_t v90 = type metadata accessor for ServerStatusCode();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v90 - 8) + 16))(v88, v89, v90);
  v80[v82[6]] = v81[v82[6]];
  v80[v82[7]] = v81[v82[7]];
  uint64_t v91 = v82[8];
  uint64_t v92 = &v80[v91];
  uint64_t v93 = &v81[v91];
  *uint64_t v92 = *v93;
  v92[1] = v93[1];
  v80[v82[9]] = v81[v82[9]];
  v80[v82[10]] = v81[v82[10]];
  v80[v82[11]] = v81[v82[11]];
  uint64_t v94 = v82[12];
  uint64_t v95 = &v80[v94];
  uint64_t v96 = &v81[v94];
  *uint64_t v95 = *v96;
  v95[1] = v96[1];
  uint64_t v97 = v82[13];
  uint64_t v98 = &v80[v97];
  uint64_t v99 = &v81[v97];
  *uint64_t v98 = *v99;
  v98[1] = v99[1];
  uint64_t v100 = v82[14];
  uint64_t v101 = &v80[v100];
  uint64_t v102 = &v81[v100];
  char v103 = v102[8];
  *(void *)uint64_t v101 = *(void *)v102;
  v101[8] = v103;
  uint64_t v104 = v82[15];
  uint64_t v105 = &v80[v104];
  uint64_t v106 = &v81[v104];
  *uint64_t v105 = *v106;
  v105[1] = v106[1];
  uint64_t v417 = v82;
  uint64_t v107 = v82[16];
  unint64_t v406 = v81;
  uint64_t v410 = v80;
  uint64_t v108 = &v80[v107];
  uint64_t v109 = &v81[v107];
  uint64_t v110 = type metadata accessor for URL();
  uint64_t v111 = *(void *)(v110 - 8);
  uint64_t v112 = *(unsigned int (**)(void))(v111 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v112)(v109, 1, v110))
  {
    uint64_t v113 = sub_10000588C(&qword_101649E40);
    memcpy(v108, v109, *(void *)(*(void *)(v113 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v111 + 16))(v108, v109, v110);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v111 + 56))(v108, 0, 1, v110);
  }
  uint64_t v180 = v417[17];
  uint64_t v181 = &v410[v180];
  uint64_t v182 = &v406[v180];
  uint64_t v402 = v110;
  unint64_t v396 = v112;
  if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v112)(&v406[v180], 1, v110))
  {
    uint64_t v183 = sub_10000588C(&qword_101649E40);
    memcpy(v181, v182, *(void *)(*(void *)(v183 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, char *, uint64_t))(v111 + 16))(v181, v182, v110);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v111 + 56))(v181, 0, 1, v110);
  }
  uint64_t v184 = v410;
  uint64_t v185 = v417[18];
  uint64_t v186 = &v410[v185];
  uint64_t v187 = &v406[v185];
  *uint64_t v186 = *v187;
  v186[1] = v187[1];
  *(void *)&v410[v417[19]] = *(void *)&v406[v417[19]];
  uint64_t v188 = v417[20];
  uint64_t v189 = &v410[v188];
  uint64_t v190 = &v406[v188];
  uint64_t v191 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  uint64_t v192 = *((void *)v191 - 1);
  uint64_t v193 = *(unsigned int (**)(void *, uint64_t, int *))(v192 + 48);
  swift_bridgeObjectRetain();
  if (v193(v190, 1, v191))
  {
    uint64_t v194 = sub_10000588C(&qword_101649E50);
    memcpy(v189, v190, *(void *)(*(void *)(v194 - 8) + 64));
    uint64_t v195 = v111;
  }
  else
  {
    uint64_t v411 = v192;
    *uint64_t v189 = *v190;
    v189[1] = v190[1];
    v189[2] = v190[2];
    v189[3] = v190[3];
    v189[4] = v190[4];
    v189[5] = v190[5];
    *((_WORD *)v189 + 24) = *((_WORD *)v190 + 24);
    v189[7] = v190[7];
    uint64_t v196 = v190[8];
    *((unsigned char *)v189 + 72) = *((unsigned char *)v190 + 72);
    v189[8] = v196;
    uint64_t v197 = v191[10];
    uint64_t v198 = (char *)v189 + v197;
    uint64_t v199 = (char *)v190 + v197;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v396)(v199, 1, v402))
    {
      uint64_t v200 = sub_10000588C(&qword_101649E40);
      memcpy(v198, v199, *(void *)(*(void *)(v200 - 8) + 64));
      uint64_t v195 = v111;
    }
    else
    {
      uint64_t v201 = v198;
      uint64_t v195 = v111;
      (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v201, v199, v402);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v111 + 56))(v201, 0, 1, v402);
    }
    uint64_t v202 = v191[11];
    uint64_t v203 = (char *)v189 + v202;
    uint64_t v204 = (char *)v190 + v202;
    if (v396())
    {
      uint64_t v205 = sub_10000588C(&qword_101649E40);
      memcpy(v203, v204, *(void *)(*(void *)(v205 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v195 + 16))(v203, v204, v402);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v195 + 56))(v203, 0, 1, v402);
    }
    uint64_t v206 = v191[12];
    uint64_t v207 = (char *)v189 + v206;
    uint64_t v208 = (char *)v190 + v206;
    uint64_t v209 = *(void *)v208;
    v207[8] = v208[8];
    *(void *)uint64_t v207 = v209;
    uint64_t v210 = v191[13];
    char v211 = (void *)((char *)v189 + v210);
    uint64_t v212 = (void *)((char *)v190 + v210);
    *char v211 = *v212;
    v211[1] = v212[1];
    *(void *)((char *)v189 + v191[14]) = *(void *)((char *)v190 + v191[14]);
    uint64_t v213 = v191[15];
    uint64_t v214 = (void *)((char *)v189 + v213);
    uint64_t v215 = (void *)((char *)v190 + v213);
    *uint64_t v214 = *v215;
    v214[1] = v215[1];
    *(void *)((char *)v189 + v191[16]) = *(void *)((char *)v190 + v191[16]);
    uint64_t v216 = v191[17];
    long long v217 = (char *)v189 + v216;
    uint64_t v218 = (char *)v190 + v216;
    long long v219 = *(_OWORD *)v218;
    v217[16] = v218[16];
    *(_OWORD *)long long v217 = v219;
    uint64_t v220 = v191[18];
    uint64_t v221 = (char *)v189 + v220;
    uint64_t v222 = (char *)v190 + v220;
    long long v223 = *(_OWORD *)v222;
    v221[16] = v222[16];
    *(_OWORD *)uint64_t v221 = v223;
    uint64_t v224 = *(void (**)(void *, void, uint64_t, int *))(v411 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v224(v189, 0, 1, v191);
  }
  *(_DWORD *)&v184[v417[21]] = *(_DWORD *)&v406[v417[21]];
  *(void *)&v184[v417[22]] = *(void *)&v406[v417[22]];
  uint64_t v225 = v417[23];
  uint64_t v226 = &v184[v225];
  size_t v227 = &v406[v225];
  unint64_t v228 = *(void *)&v406[v225 + 8];
  swift_bridgeObjectRetain();
  if (v228 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v226 = *v227;
  }
  else
  {
    uint64_t v229 = *(void *)v227;
    sub_1000361E0(v229, v228);
    *(void *)uint64_t v226 = v229;
    *((void *)v226 + 1) = v228;
  }
  uint64_t v230 = v417[24];
  uint64_t v231 = &v184[v230];
  uint64_t v232 = &v406[v230];
  unint64_t v233 = *((void *)v232 + 1);
  if (v233 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v231 = *(_OWORD *)v232;
  }
  else
  {
    uint64_t v234 = *(void *)v232;
    sub_1000361E0(*(void *)v232, *((void *)v232 + 1));
    *(void *)uint64_t v231 = v234;
    *((void *)v231 + 1) = v233;
  }
  uint64_t v235 = v417;
  uint64_t v236 = *(void (**)(unsigned char *, char *, uint64_t))(v195 + 16);
  v236(&v184[v417[25]], &v406[v417[25]], v402);
  v236(&v184[v235[26]], &v406[v235[26]], v402);
  v236(&v184[v235[27]], &v406[v235[27]], v402);
  v236(&v184[v235[28]], &v406[v235[28]], v402);
  v236(&v184[v235[29]], &v406[v235[29]], v402);
  v236(&v184[v235[30]], &v406[v235[30]], v402);
  uint64_t v237 = v417[31];
  char v238 = &v184[v237];
  uint64_t v239 = &v406[v237];
  *char v238 = *v239;
  v238[1] = v239[1];
  *(void *)&v184[v417[32]] = *(void *)&v406[v417[32]];
  uint64_t v240 = v417[33];
  uint64_t v241 = &v184[v240];
  uint64_t v242 = &v406[v240];
  *uint64_t v241 = *v242;
  v241[1] = v242[1];
  *(void *)&v184[v417[34]] = *(void *)&v406[v417[34]];
  uint64_t v243 = v417[35];
  uint64_t v244 = &v184[v243];
  uint64_t v245 = &v406[v243];
  char v246 = v245[16];
  *(_OWORD *)uint64_t v244 = *(_OWORD *)v245;
  v244[16] = v246;
  uint64_t v247 = v417[36];
  unint64_t v248 = &v184[v247];
  uint64_t v249 = &v406[v247];
  char v250 = v249[16];
  *(_OWORD *)unint64_t v248 = *(_OWORD *)v249;
  v248[16] = v250;
  uint64_t v251 = v417[37];
  uint64_t v412 = &v184[v251];
  unint64_t v252 = &v406[v251];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v236(v412, v252, v402);
  v236(&v184[v235[38]], &v406[v235[38]], v402);
  v236(&v184[v235[39]], &v406[v235[39]], v402);
  v236(&v184[v235[40]], &v406[v235[40]], v402);
  v236(&v184[v235[41]], &v406[v235[41]], v402);
  v236(&v184[v235[42]], &v406[v235[42]], v402);
  v184[v417[43]] = v406[v417[43]];
  v184[v417[44]] = v406[v417[44]];
  v184[v417[45]] = v406[v417[45]];
  uint64_t v253 = v417[46];
  uint64_t v254 = &v184[v253];
  uint64_t v255 = &v406[v253];
  *uint64_t v254 = *v255;
  v254[1] = v255[1];
  uint64_t v256 = v417[47];
  uint64_t v257 = &v184[v256];
  uint64_t v258 = &v406[v256];
  *uint64_t v257 = *v258;
  v257[1] = v258[1];
  uint64_t v259 = (void (*)(unsigned char *, void, uint64_t, int *))__src[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v259(v184, 0, 1, v417);
  uint64_t v77 = v423;
  uint64_t v76 = v424;
  uint64_t v78 = v422;
  uint64_t v115 = v421;
  uint64_t v33 = v401;
LABEL_57:
  *(unsigned char *)(v33 + v76[16]) = *(unsigned char *)(v77 + v76[16]);
  *(void *)(v33 + v76[17]) = *(void *)(v77 + v76[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v260 = v76[18];
  uint64_t v261 = (void *)(v33 + v260);
  __int16 v262 = (const void *)(v77 + v260);
  int v263 = v115(v33 + v260, 1, v78);
  int v264 = v115((uint64_t)v262, 1, v78);
  if (v263)
  {
    if (!v264)
    {
      (*(void (**)(void *, const void *, uint64_t))(v420 + 16))(v261, v262, v78);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v420 + 56))(v261, 0, 1, v78);
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (v264)
  {
    (*(void (**)(void *, uint64_t))(v420 + 8))(v261, v78);
LABEL_62:
    uint64_t v265 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v261, v262, *(void *)(*(void *)(v265 - 8) + 64));
    goto LABEL_63;
  }
  v419((uint64_t)v261, (uint64_t)v262, v78);
LABEL_63:
  uint64_t v266 = v76[19];
  uint64_t v267 = (void *)(v33 + v266);
  uint64_t v268 = (const void *)(v77 + v266);
  int v269 = v115(v33 + v266, 1, v78);
  int v270 = v115((uint64_t)v268, 1, v78);
  if (v269)
  {
    if (!v270)
    {
      (*(void (**)(void *, const void *, uint64_t))(v420 + 16))(v267, v268, v78);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v420 + 56))(v267, 0, 1, v78);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v270)
  {
    (*(void (**)(void *, uint64_t))(v420 + 8))(v267, v78);
LABEL_68:
    uint64_t v271 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v267, v268, *(void *)(*(void *)(v271 - 8) + 64));
    goto LABEL_69;
  }
  v419((uint64_t)v267, (uint64_t)v268, v78);
LABEL_69:
  uint64_t v272 = v76[20];
  uint64_t v273 = (uint64_t *)(v33 + v272);
  uint64_t v274 = (uint64_t *)(v77 + v272);
  if (((*(void *)(v33 + v272 + 8) >> 60) | 4) != 0xF)
  {
    unint64_t v277 = v274[1];
    if (((v277 >> 60) | 4) != 0xF)
    {
      uint64_t v279 = *v274;
      sub_1000361E0(v279, v277);
      uint64_t v280 = *v273;
      unint64_t v281 = v273[1];
      *uint64_t v273 = v279;
      v273[1] = v277;
      sub_10001CFB8(v280, v281);
      goto LABEL_75;
    }
    sub_1001EADA0((uint64_t)v273);
    goto LABEL_74;
  }
  unint64_t v275 = v274[1];
  if (((v275 >> 60) | 4) == 0xF)
  {
LABEL_74:
    *(_OWORD *)uint64_t v273 = *(_OWORD *)v274;
    goto LABEL_75;
  }
  uint64_t v276 = *v274;
  sub_1000361E0(v276, v275);
  *uint64_t v273 = v276;
  v273[1] = v275;
LABEL_75:
  *(unsigned char *)(v33 + v76[21]) = *(unsigned char *)(v77 + v76[21]);
  *(_WORD *)(v33 + v76[22]) = *(_WORD *)(v77 + v76[22]);
  return v33;
}

uint64_t sub_10029B494(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v127 = (void (*)(char *, char *, uint64_t))v8;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2 + v9, 1, v6))
  {
    uint64_t v12 = sub_10000588C(&qword_101638CF0);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v10, (uint64_t)v11, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  uint64_t v13 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  uint64_t v17 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
  v23(v19, v20, v21);
  uint64_t v24 = a3[11];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  uint64_t v132 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  uint64_t v129 = v21;
  uint64_t v131 = v22;
  uint64_t v130 = v23;
  if (v132(a2 + v24, 1, v21))
  {
    uint64_t v27 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    v23((uint64_t)v25, (uint64_t)v26, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v21);
  }
  uint64_t v28 = a3[12];
  uint64_t v29 = a3[13];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  char v32 = *(unsigned char *)(a2 + v29);
  *(void *)(v30 + 16) = *(void *)(v31 + 16);
  *(unsigned char *)(a1 + v29) = v32;
  uint64_t v33 = a3[14];
  uint64_t v34 = (char *)(a1 + v33);
  uint64_t v35 = (char *)(a2 + v33);
  uint64_t v36 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v37 = *((void *)v36 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v37 + 48))(v35, 1, v36))
  {
    uint64_t v38 = sub_10000588C(&qword_1016653B0);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v127(v34, v35, v6);
    *(_OWORD *)&v34[v36[5]] = *(_OWORD *)&v35[v36[5]];
    *(_OWORD *)&v34[v36[6]] = *(_OWORD *)&v35[v36[6]];
    *(_OWORD *)&v34[v36[7]] = *(_OWORD *)&v35[v36[7]];
    *(_DWORD *)&v34[v36[8]] = *(_DWORD *)&v35[v36[8]];
    uint64_t v39 = v36[9];
    uint64_t v40 = &v34[v39];
    uint64_t v41 = &v35[v39];
    *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
    v40[4] = v41[4];
    uint64_t v42 = v36[10];
    int v43 = &v34[v42];
    int v44 = &v35[v42];
    *(_OWORD *)int v43 = *(_OWORD *)v44;
    v43[16] = v44[16];
    uint64_t v45 = v36[11];
    uint64_t v46 = &v34[v45];
    unint64_t v47 = &v35[v45];
    v46[8] = v47[8];
    *(void *)uint64_t v46 = *(void *)v47;
    uint64_t v48 = v36[12];
    unint64_t v49 = &v34[v48];
    uint64_t v50 = &v35[v48];
    *(_DWORD *)unint64_t v49 = *(_DWORD *)v50;
    v49[4] = v50[4];
    v34[v36[13]] = v35[v36[13]];
    v34[v36[14]] = v35[v36[14]];
    *(_OWORD *)&v34[v36[15]] = *(_OWORD *)&v35[v36[15]];
    (*(void (**)(char *, void, uint64_t, int *))(v37 + 56))(v34, 0, 1, v36);
  }
  uint64_t v51 = v22;
  uint64_t v52 = (void (*)(void *, const void *, uint64_t))v23;
  uint64_t v53 = a3[15];
  uint64_t v54 = (unsigned char *)(a1 + v53);
  uint64_t v55 = (unsigned char *)(a2 + v53);
  uint64_t v56 = (int *)type metadata accessor for AccessoryProductInfo();
  uint64_t v57 = *((void *)v56 - 1);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v57 + 48))(v55, 1, v56))
  {
    uint64_t v58 = sub_10000588C((uint64_t *)&unk_10166BFA0);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    uint64_t v59 = v129;
  }
  else
  {
    uint64_t v125 = v57;
    *(void *)uint64_t v54 = *(void *)v55;
    v54[8] = v55[8];
    uint64_t v60 = v56[5];
    uint64_t v61 = &v54[v60];
    uint64_t v62 = &v55[v60];
    uint64_t v63 = type metadata accessor for ServerStatusCode();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v63 - 8) + 32))(v61, v62, v63);
    v54[v56[6]] = v55[v56[6]];
    v54[v56[7]] = v55[v56[7]];
    *(_OWORD *)&v54[v56[8]] = *(_OWORD *)&v55[v56[8]];
    v54[v56[9]] = v55[v56[9]];
    v54[v56[10]] = v55[v56[10]];
    v54[v56[11]] = v55[v56[11]];
    *(_OWORD *)&v54[v56[12]] = *(_OWORD *)&v55[v56[12]];
    *(_OWORD *)&v54[v56[13]] = *(_OWORD *)&v55[v56[13]];
    uint64_t v64 = v56[14];
    uint64_t v65 = &v54[v64];
    int v66 = &v55[v64];
    v65[8] = v66[8];
    *(void *)uint64_t v65 = *(void *)v66;
    *(_OWORD *)&v54[v56[15]] = *(_OWORD *)&v55[v56[15]];
    uint64_t v67 = v56[16];
    uint64_t v68 = &v54[v67];
    uint64_t v69 = &v55[v67];
    uint64_t v70 = type metadata accessor for URL();
    uint64_t v71 = *(void *)(v70 - 8);
    uint64_t v126 = *(unsigned int (**)(void))(v71 + 48);
    uint64_t v128 = v71;
    if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v126)(v69, 1, v70))
    {
      uint64_t v72 = sub_10000588C(&qword_101649E40);
      memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v71 + 32))(v68, v69, v70);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
    }
    uint64_t v73 = v56[17];
    uint64_t v74 = &v54[v73];
    uint64_t v75 = &v55[v73];
    uint64_t v124 = v70;
    if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v126)(&v55[v73], 1, v70))
    {
      uint64_t v76 = sub_10000588C(&qword_101649E40);
      memcpy(v74, v75, *(void *)(*(void *)(v76 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v71 + 32))(v74, v75, v70);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v71 + 56))(v74, 0, 1, v70);
    }
    *(_OWORD *)&v54[v56[18]] = *(_OWORD *)&v55[v56[18]];
    *(void *)&v54[v56[19]] = *(void *)&v55[v56[19]];
    uint64_t v77 = v56[20];
    uint64_t v78 = &v54[v77];
    uint64_t v79 = &v55[v77];
    uint64_t v80 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    uint64_t v81 = *(void *)(v80 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
    {
      uint64_t v82 = sub_10000588C(&qword_101649E50);
      memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
      uint64_t v83 = v124;
    }
    else
    {
      long long v84 = v79[1];
      *uint64_t v78 = *v79;
      v78[1] = v84;
      v78[2] = v79[2];
      *((_WORD *)v78 + 24) = *((_WORD *)v79 + 24);
      uint64_t v85 = *((void *)v79 + 8);
      *((void *)v78 + 7) = *((void *)v79 + 7);
      *((void *)v78 + 8) = v85;
      *((unsigned char *)v78 + 72) = *((unsigned char *)v79 + 72);
      uint64_t v123 = (int *)v80;
      uint64_t v86 = *(int *)(v80 + 40);
      uint64_t v120 = v81;
      __dst = (char *)v78 + v86;
      __src = (char *)v79 + v86;
      uint64_t v87 = v78;
      if (v126())
      {
        uint64_t v88 = sub_10000588C(&qword_101649E40);
        memcpy(__dst, __src, *(void *)(*(void *)(v88 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v128 + 32))(__dst, __src, v124);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(__dst, 0, 1, v124);
      }
      uint64_t v83 = v124;
      uint64_t v89 = v123[11];
      __dsta = (char *)v87 + v89;
      uint64_t v90 = (char *)v79 + v89;
      if (v126())
      {
        uint64_t v91 = sub_10000588C(&qword_101649E40);
        memcpy(__dsta, v90, *(void *)(*(void *)(v91 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v128 + 32))(__dsta, v90, v124);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(__dsta, 0, 1, v124);
      }
      uint64_t v92 = v123[12];
      uint64_t v93 = (char *)v87 + v92;
      uint64_t v94 = (char *)v79 + v92;
      *(void *)uint64_t v93 = *(void *)v94;
      v93[8] = v94[8];
      *(_OWORD *)((char *)v87 + v123[13]) = *(_OWORD *)((char *)v79 + v123[13]);
      *(void *)((char *)v87 + v123[14]) = *(void *)((char *)v79 + v123[14]);
      *(_OWORD *)((char *)v87 + v123[15]) = *(_OWORD *)((char *)v79 + v123[15]);
      *(void *)((char *)v87 + v123[16]) = *(void *)((char *)v79 + v123[16]);
      uint64_t v95 = v123[17];
      uint64_t v96 = (char *)v87 + v95;
      uint64_t v97 = (char *)v79 + v95;
      v96[16] = v97[16];
      *(_OWORD *)uint64_t v96 = *(_OWORD *)v97;
      uint64_t v98 = v123[18];
      uint64_t v99 = (char *)v87 + v98;
      uint64_t v100 = (char *)v79 + v98;
      v99[16] = v100[16];
      *(_OWORD *)uint64_t v99 = *(_OWORD *)v100;
      (*(void (**)(_OWORD *, void, uint64_t))(v120 + 56))(v87, 0, 1);
    }
    *(_DWORD *)&v54[v56[21]] = *(_DWORD *)&v55[v56[21]];
    *(void *)&v54[v56[22]] = *(void *)&v55[v56[22]];
    *(_OWORD *)&v54[v56[23]] = *(_OWORD *)&v55[v56[23]];
    *(_OWORD *)&v54[v56[24]] = *(_OWORD *)&v55[v56[24]];
    uint64_t v101 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v128 + 32);
    v101(&v54[v56[25]], &v55[v56[25]], v83);
    v101(&v54[v56[26]], &v55[v56[26]], v83);
    v101(&v54[v56[27]], &v55[v56[27]], v83);
    v101(&v54[v56[28]], &v55[v56[28]], v83);
    v101(&v54[v56[29]], &v55[v56[29]], v83);
    v101(&v54[v56[30]], &v55[v56[30]], v83);
    *(_OWORD *)&v54[v56[31]] = *(_OWORD *)&v55[v56[31]];
    *(void *)&v54[v56[32]] = *(void *)&v55[v56[32]];
    *(_OWORD *)&v54[v56[33]] = *(_OWORD *)&v55[v56[33]];
    *(void *)&v54[v56[34]] = *(void *)&v55[v56[34]];
    uint64_t v102 = v56[35];
    char v103 = &v54[v102];
    uint64_t v104 = &v55[v102];
    v103[16] = v104[16];
    *(_OWORD *)char v103 = *(_OWORD *)v104;
    uint64_t v105 = v56[36];
    uint64_t v106 = &v54[v105];
    uint64_t v107 = &v55[v105];
    v106[16] = v107[16];
    *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
    v101(&v54[v56[37]], &v55[v56[37]], v83);
    v101(&v54[v56[38]], &v55[v56[38]], v83);
    v101(&v54[v56[39]], &v55[v56[39]], v83);
    v101(&v54[v56[40]], &v55[v56[40]], v83);
    v101(&v54[v56[41]], &v55[v56[41]], v83);
    v101(&v54[v56[42]], &v55[v56[42]], v83);
    v54[v56[43]] = v55[v56[43]];
    v54[v56[44]] = v55[v56[44]];
    v54[v56[45]] = v55[v56[45]];
    *(_OWORD *)&v54[v56[46]] = *(_OWORD *)&v55[v56[46]];
    *(_OWORD *)&v54[v56[47]] = *(_OWORD *)&v55[v56[47]];
    (*(void (**)(unsigned char *, void, uint64_t, int *))(v125 + 56))(v54, 0, 1, v56);
    uint64_t v59 = v129;
    uint64_t v51 = v131;
    uint64_t v52 = (void (*)(void *, const void *, uint64_t))v130;
  }
  uint64_t v108 = a3[17];
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  *(void *)(a1 + v108) = *(void *)(a2 + v108);
  uint64_t v109 = a3[18];
  uint64_t v110 = (void *)(a1 + v109);
  uint64_t v111 = (const void *)(a2 + v109);
  if (v132(a2 + v109, 1, v59))
  {
    uint64_t v112 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v110, v111, *(void *)(*(void *)(v112 - 8) + 64));
  }
  else
  {
    v52(v110, v111, v59);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v110, 0, 1, v59);
  }
  uint64_t v113 = a3[19];
  uint64_t v114 = (void *)(a1 + v113);
  uint64_t v115 = (const void *)(a2 + v113);
  if (v132(a2 + v113, 1, v59))
  {
    uint64_t v116 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v114, v115, *(void *)(*(void *)(v116 - 8) + 64));
  }
  else
  {
    v52(v114, v115, v59);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v114, 0, 1, v59);
  }
  uint64_t v117 = a3[21];
  *(_OWORD *)(a1 + a3[20]) = *(_OWORD *)(a2 + a3[20]);
  *(unsigned char *)(a1 + v117) = *(unsigned char *)(a2 + v117);
  *(_WORD *)(a1 + a3[22]) = *(_WORD *)(a2 + a3[22]);
  return a1;
}

unsigned char *sub_10029C2EC(char *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v325 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 40);
  v325(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = (unsigned char *)(a2 + v8);
  __dst = (void (**)(void *, const void *, void))v7;
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(&a1[v8], 1, v6);
  int v13 = v11(v10, 1, v6);
  uint64_t v328 = v6;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, unsigned char *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_6:
    uint64_t v14 = sub_10000588C(&qword_101638CF0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v325(v9, (uint64_t)v10, v6);
LABEL_7:
  uint64_t v15 = a3[7];
  a1[a3[6]] = *(unsigned char *)(a2 + a3[6]);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for MACAddress();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  *(void *)&a1[a3[8]] = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[10];
  a1[a3[9]] = *(unsigned char *)(a2 + a3[9]);
  uint64_t v20 = &a1[v19];
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = a1;
  uint64_t v24 = *(void *)(v22 - 8);
  uint64_t v331 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 40);
  v331(v20, v21, v22);
  uint64_t v25 = a3[11];
  uint64_t v26 = v23;
  uint64_t v27 = &v23[v25];
  uint64_t v28 = (unsigned char *)(a2 + v25);
  uint64_t v29 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v23) = v29(&v23[v25], 1, v22);
  int v337 = v29;
  int v30 = v29(v28, 1, v22);
  uint64_t v340 = v22;
  uint64_t v332 = v24;
  if (v23)
  {
    if (!v30)
    {
      (*(void (**)(char *, unsigned char *, uint64_t))(v24 + 32))(v27, v28, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v27, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v22);
LABEL_12:
    uint64_t v31 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  v331(v27, (uint64_t)v28, v22);
LABEL_13:
  uint64_t v32 = a3[12];
  uint64_t v33 = &v26[v32];
  uint64_t v34 = (char *)(a2 + v32);
  *uint64_t v33 = *v34;
  uint64_t v36 = *((void *)v34 + 1);
  uint64_t v35 = *((void *)v34 + 2);
  *((void *)v33 + 1) = v36;
  *((void *)v33 + 2) = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[14];
  unsigned int v338 = a3;
  uint64_t v339 = a2;
  v26[a3[13]] = *(unsigned char *)(a2 + a3[13]);
  uint64_t v38 = &v26[v37];
  uint64_t v39 = (unsigned char *)(a2 + v37);
  uint64_t v40 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v41 = *((void *)v40 - 1);
  uint64_t v42 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v41 + 48);
  int v43 = v42(v38, 1, v40);
  int v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (!v44)
    {
      __dst[4](v38, v39, v328);
      *(_OWORD *)&v38[v40[5]] = *(_OWORD *)&v39[v40[5]];
      *(_OWORD *)&v38[v40[6]] = *(_OWORD *)&v39[v40[6]];
      *(_OWORD *)&v38[v40[7]] = *(_OWORD *)&v39[v40[7]];
      *(_DWORD *)&v38[v40[8]] = *(_DWORD *)&v39[v40[8]];
      uint64_t v45 = v40[9];
      uint64_t v46 = &v38[v45];
      unint64_t v47 = &v39[v45];
      *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
      v46[4] = v47[4];
      uint64_t v48 = v40[10];
      unint64_t v49 = &v38[v48];
      uint64_t v50 = &v39[v48];
      *(_OWORD *)unint64_t v49 = *(_OWORD *)v50;
      v49[16] = v50[16];
      uint64_t v51 = v40[11];
      uint64_t v52 = &v38[v51];
      uint64_t v53 = &v39[v51];
      v52[8] = v53[8];
      *(void *)uint64_t v52 = *(void *)v53;
      uint64_t v54 = v40[12];
      uint64_t v55 = &v38[v54];
      uint64_t v56 = &v39[v54];
      *(_DWORD *)uint64_t v55 = *(_DWORD *)v56;
      v55[4] = v56[4];
      v38[v40[13]] = v39[v40[13]];
      v38[v40[14]] = v39[v40[14]];
      *(_OWORD *)&v38[v40[15]] = *(_OWORD *)&v39[v40[15]];
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v44)
  {
    sub_100294680((uint64_t)v38, type metadata accessor for AccessoryMetadata);
LABEL_18:
    uint64_t v57 = sub_10000588C(&qword_1016653B0);
    memcpy(v38, v39, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_19;
  }
  v325(v38, (uint64_t)v39, v328);
  uint64_t v85 = v40[5];
  uint64_t v86 = *(void *)&v38[v85];
  unint64_t v87 = *(void *)&v38[v85 + 8];
  *(_OWORD *)&v38[v85] = *(_OWORD *)&v39[v85];
  sub_10001CFB8(v86, v87);
  uint64_t v88 = v40[6];
  uint64_t v89 = &v38[v88];
  uint64_t v90 = (uint64_t *)&v39[v88];
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  *uint64_t v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
  uint64_t v93 = v40[7];
  uint64_t v94 = &v38[v93];
  uint64_t v95 = (uint64_t *)&v39[v93];
  uint64_t v97 = *v95;
  uint64_t v96 = v95[1];
  *uint64_t v94 = v97;
  v94[1] = v96;
  swift_bridgeObjectRelease();
  *(_DWORD *)&v38[v40[8]] = *(_DWORD *)&v39[v40[8]];
  uint64_t v98 = v40[9];
  uint64_t v99 = &v38[v98];
  uint64_t v100 = &v39[v98];
  *(_DWORD *)uint64_t v99 = *(_DWORD *)v100;
  v99[4] = v100[4];
  uint64_t v101 = v40[10];
  uint64_t v102 = &v38[v101];
  char v103 = &v39[v101];
  *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
  v102[16] = v103[16];
  uint64_t v104 = v40[11];
  uint64_t v105 = &v38[v104];
  uint64_t v106 = &v39[v104];
  *(void *)uint64_t v105 = *(void *)v106;
  v105[8] = v106[8];
  uint64_t v107 = v40[12];
  uint64_t v108 = &v38[v107];
  uint64_t v109 = &v39[v107];
  *(_DWORD *)uint64_t v108 = *(_DWORD *)v109;
  v108[4] = v109[4];
  v38[v40[13]] = v39[v40[13]];
  v38[v40[14]] = v39[v40[14]];
  uint64_t v110 = v40[15];
  uint64_t v111 = &v38[v110];
  uint64_t v112 = (uint64_t *)&v39[v110];
  uint64_t v114 = *v112;
  uint64_t v113 = v112[1];
  void *v111 = v114;
  v111[1] = v113;
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v59 = v338;
  uint64_t v58 = v339;
  uint64_t v60 = v340;
  uint64_t v61 = v338[15];
  __dsta = v26;
  uint64_t v62 = &v26[v61];
  uint64_t v63 = (unsigned char *)(v339 + v61);
  uint64_t v64 = (int *)type metadata accessor for AccessoryProductInfo();
  uint64_t v65 = *((void *)v64 - 1);
  int v66 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v65 + 48);
  int v67 = v66(v62, 1, v64);
  int v68 = v66(v63, 1, v64);
  if (v67)
  {
    if (!v68)
    {
      *(void *)uint64_t v62 = *(void *)v63;
      v62[8] = v63[8];
      uint64_t v69 = v64[5];
      uint64_t v70 = &v62[v69];
      uint64_t v71 = &v63[v69];
      uint64_t v72 = type metadata accessor for ServerStatusCode();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v72 - 8) + 32))(v70, v71, v72);
      v62[v64[6]] = v63[v64[6]];
      v62[v64[7]] = v63[v64[7]];
      *(_OWORD *)&v62[v64[8]] = *(_OWORD *)&v63[v64[8]];
      v62[v64[9]] = v63[v64[9]];
      v62[v64[10]] = v63[v64[10]];
      v62[v64[11]] = v63[v64[11]];
      *(_OWORD *)&v62[v64[12]] = *(_OWORD *)&v63[v64[12]];
      *(_OWORD *)&v62[v64[13]] = *(_OWORD *)&v63[v64[13]];
      uint64_t v73 = v64[14];
      uint64_t v74 = &v62[v73];
      uint64_t v75 = &v63[v73];
      v74[8] = v75[8];
      *(void *)uint64_t v74 = *(void *)v75;
      *(_OWORD *)&v62[v64[15]] = *(_OWORD *)&v63[v64[15]];
      uint64_t v76 = v64[16];
      uint64_t v77 = &v62[v76];
      uint64_t v78 = &v63[v76];
      uint64_t v79 = type metadata accessor for URL();
      uint64_t v80 = *(void *)(v79 - 8);
      uint64_t v329 = *(unsigned int (**)(void))(v80 + 48);
      if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v329)(v78, 1, v79))
      {
        uint64_t v81 = sub_10000588C(&qword_101649E40);
        memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v80 + 32))(v77, v78, v79);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
      }
      uint64_t v150 = v65;
      long long v84 = __dsta;
      uint64_t v151 = v64[17];
      uint64_t v152 = &v62[v151];
      uint64_t v153 = &v63[v151];
      uint64_t v327 = v150;
      if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v329)(&v63[v151], 1, v79))
      {
        uint64_t v154 = sub_10000588C(&qword_101649E40);
        memcpy(v152, v153, *(void *)(*(void *)(v154 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v80 + 32))(v152, v153, v79);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v80 + 56))(v152, 0, 1, v79);
      }
      *(_OWORD *)&v62[v64[18]] = *(_OWORD *)&v63[v64[18]];
      *(void *)&v62[v64[19]] = *(void *)&v63[v64[19]];
      uint64_t v155 = v64[20];
      uint64_t v156 = &v62[v155];
      uint64_t v157 = &v63[v155];
      uint64_t v158 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
      BOOL v159 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((void *)v158 - 1);
      if (v159[6](v157, 1, v158))
      {
        uint64_t v160 = sub_10000588C(&qword_101649E50);
        memcpy(v156, v157, *(void *)(*(void *)(v160 - 8) + 64));
        uint64_t v59 = v338;
        uint64_t v58 = v339;
        uint64_t v161 = v327;
      }
      else
      {
        __src = v159;
        long long v162 = v157[1];
        *uint64_t v156 = *v157;
        v156[1] = v162;
        v156[2] = v157[2];
        *((_WORD *)v156 + 24) = *((_WORD *)v157 + 24);
        uint64_t v163 = *((void *)v157 + 8);
        *((void *)v156 + 7) = *((void *)v157 + 7);
        *((void *)v156 + 8) = v163;
        *((unsigned char *)v156 + 72) = *((unsigned char *)v157 + 72);
        uint64_t v164 = v158[10];
        __dstb = (char *)v156 + v164;
        uint64_t v165 = (char *)v157 + v164;
        if (v329())
        {
          uint64_t v166 = sub_10000588C(&qword_101649E40);
          memcpy(__dstb, v165, *(void *)(*(void *)(v166 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v80 + 32))(__dstb, v165, v79);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(__dstb, 0, 1, v79);
        }
        uint64_t v192 = v158[11];
        __dstc = (char *)v156 + v192;
        uint64_t v193 = (char *)v157 + v192;
        if (v329())
        {
          uint64_t v194 = sub_10000588C(&qword_101649E40);
          memcpy(__dstc, v193, *(void *)(*(void *)(v194 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v80 + 32))(__dstc, v193, v79);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(__dstc, 0, 1, v79);
        }
        uint64_t v161 = v327;
        uint64_t v195 = v158[12];
        uint64_t v196 = (char *)v156 + v195;
        uint64_t v197 = (char *)v157 + v195;
        *(void *)uint64_t v196 = *(void *)v197;
        v196[8] = v197[8];
        *(_OWORD *)((char *)v156 + v158[13]) = *(_OWORD *)((char *)v157 + v158[13]);
        *(void *)((char *)v156 + v158[14]) = *(void *)((char *)v157 + v158[14]);
        *(_OWORD *)((char *)v156 + v158[15]) = *(_OWORD *)((char *)v157 + v158[15]);
        *(void *)((char *)v156 + v158[16]) = *(void *)((char *)v157 + v158[16]);
        uint64_t v198 = v158[17];
        uint64_t v199 = (char *)v156 + v198;
        uint64_t v200 = (char *)v157 + v198;
        v199[16] = v200[16];
        *(_OWORD *)uint64_t v199 = *(_OWORD *)v200;
        uint64_t v201 = v158[18];
        uint64_t v202 = (char *)v156 + v201;
        uint64_t v203 = (char *)v157 + v201;
        v202[16] = v203[16];
        *(_OWORD *)uint64_t v202 = *(_OWORD *)v203;
        (*((void (**)(_OWORD *, void, uint64_t, int *))__src + 7))(v156, 0, 1, v158);
        uint64_t v59 = v338;
        uint64_t v58 = v339;
      }
      *(_DWORD *)&v62[v64[21]] = *(_DWORD *)&v63[v64[21]];
      *(void *)&v62[v64[22]] = *(void *)&v63[v64[22]];
      *(_OWORD *)&v62[v64[23]] = *(_OWORD *)&v63[v64[23]];
      *(_OWORD *)&v62[v64[24]] = *(_OWORD *)&v63[v64[24]];
      uint64_t v204 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v80 + 32);
      v204(&v62[v64[25]], &v63[v64[25]], v79);
      v204(&v62[v64[26]], &v63[v64[26]], v79);
      v204(&v62[v64[27]], &v63[v64[27]], v79);
      v204(&v62[v64[28]], &v63[v64[28]], v79);
      v204(&v62[v64[29]], &v63[v64[29]], v79);
      v204(&v62[v64[30]], &v63[v64[30]], v79);
      *(_OWORD *)&v62[v64[31]] = *(_OWORD *)&v63[v64[31]];
      *(void *)&v62[v64[32]] = *(void *)&v63[v64[32]];
      *(_OWORD *)&v62[v64[33]] = *(_OWORD *)&v63[v64[33]];
      *(void *)&v62[v64[34]] = *(void *)&v63[v64[34]];
      uint64_t v205 = v64[35];
      uint64_t v206 = &v62[v205];
      uint64_t v207 = &v63[v205];
      v206[16] = v207[16];
      *(_OWORD *)uint64_t v206 = *(_OWORD *)v207;
      uint64_t v208 = v64[36];
      uint64_t v209 = &v62[v208];
      uint64_t v210 = &v63[v208];
      v209[16] = v210[16];
      *(_OWORD *)uint64_t v209 = *(_OWORD *)v210;
      v204(&v62[v64[37]], &v63[v64[37]], v79);
      v204(&v62[v64[38]], &v63[v64[38]], v79);
      v204(&v62[v64[39]], &v63[v64[39]], v79);
      v204(&v62[v64[40]], &v63[v64[40]], v79);
      v204(&v62[v64[41]], &v63[v64[41]], v79);
      v204(&v62[v64[42]], &v63[v64[42]], v79);
      v62[v64[43]] = v63[v64[43]];
      v62[v64[44]] = v63[v64[44]];
      v62[v64[45]] = v63[v64[45]];
      *(_OWORD *)&v62[v64[46]] = *(_OWORD *)&v63[v64[46]];
      *(_OWORD *)&v62[v64[47]] = *(_OWORD *)&v63[v64[47]];
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v161 + 56))(v62, 0, 1, v64);
      goto LABEL_98;
    }
LABEL_25:
    uint64_t v82 = sub_10000588C((uint64_t *)&unk_10166BFA0);
    memcpy(v62, v63, *(void *)(*(void *)(v82 - 8) + 64));
    uint64_t v83 = v337;
    long long v84 = v26;
    goto LABEL_99;
  }
  if (v68)
  {
    sub_100294680((uint64_t)v62, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    goto LABEL_25;
  }
  *(void *)uint64_t v62 = *(void *)v63;
  v62[8] = v63[8];
  uint64_t v115 = v64[5];
  uint64_t v116 = &v62[v115];
  uint64_t v117 = &v63[v115];
  uint64_t v118 = type metadata accessor for ServerStatusCode();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v118 - 8) + 40))(v116, v117, v118);
  v62[v64[6]] = v63[v64[6]];
  v62[v64[7]] = v63[v64[7]];
  uint64_t v119 = v64[8];
  uint64_t v120 = &v62[v119];
  uint64_t v121 = (uint64_t *)&v63[v119];
  uint64_t v123 = *v121;
  uint64_t v122 = v121[1];
  *uint64_t v120 = v123;
  v120[1] = v122;
  swift_bridgeObjectRelease();
  v62[v64[9]] = v63[v64[9]];
  v62[v64[10]] = v63[v64[10]];
  v62[v64[11]] = v63[v64[11]];
  uint64_t v124 = v64[12];
  uint64_t v125 = &v62[v124];
  uint64_t v126 = (uint64_t *)&v63[v124];
  uint64_t v128 = *v126;
  uint64_t v127 = v126[1];
  *uint64_t v125 = v128;
  v125[1] = v127;
  swift_bridgeObjectRelease();
  uint64_t v129 = v64[13];
  uint64_t v130 = &v62[v129];
  uint64_t v131 = (uint64_t *)&v63[v129];
  uint64_t v133 = *v131;
  uint64_t v132 = v131[1];
  *uint64_t v130 = v133;
  v130[1] = v132;
  swift_bridgeObjectRelease();
  uint64_t v134 = v64[14];
  int v135 = &v62[v134];
  uint64_t v136 = &v63[v134];
  *(void *)int v135 = *(void *)v136;
  v135[8] = v136[8];
  uint64_t v137 = v64[15];
  uint64_t v138 = &v62[v137];
  long long v139 = (uint64_t *)&v63[v137];
  uint64_t v141 = *v139;
  uint64_t v140 = v139[1];
  *uint64_t v138 = v141;
  v138[1] = v140;
  swift_bridgeObjectRelease();
  uint64_t v142 = v64[16];
  uint64_t v143 = &v62[v142];
  uint64_t v144 = &v63[v142];
  uint64_t v145 = type metadata accessor for URL();
  uint64_t v146 = *(void *)(v145 - 8);
  uint64_t v147 = *(uint64_t (**)(void))(v146 + 48);
  int v148 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v147)(v143, 1, v145);
  uint64_t v326 = v147;
  int v149 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v147)(v144, 1, v145);
  long long v84 = v26;
  if (v148)
  {
    if (!v149)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v146 + 32))(v143, v144, v145);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v149)
  {
    (*(void (**)(unsigned char *, uint64_t))(v146 + 8))(v143, v145);
LABEL_42:
    uint64_t v167 = sub_10000588C(&qword_101649E40);
    memcpy(v143, v144, *(void *)(*(void *)(v167 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v146 + 40))(v143, v144, v145);
LABEL_43:
  uint64_t v168 = v64[17];
  uint64_t v169 = &v62[v168];
  uint64_t v170 = &v63[v168];
  int v171 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v326)(&v62[v168], 1, v145);
  uint64_t v330 = v145;
  int v172 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v326)(v170, 1, v145);
  if (v171)
  {
    if (!v172)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v146 + 32))(v169, v170, v145);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v146 + 56))(v169, 0, 1, v145);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v172)
  {
    (*(void (**)(unsigned char *, uint64_t))(v146 + 8))(v169, v145);
LABEL_48:
    uint64_t v173 = sub_10000588C(&qword_101649E40);
    memcpy(v169, v170, *(void *)(*(void *)(v173 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v146 + 40))(v169, v170, v145);
LABEL_49:
  uint64_t v174 = v64[18];
  uint64_t v175 = &v62[v174];
  uint64_t v176 = (uint64_t *)&v63[v174];
  uint64_t v178 = *v176;
  uint64_t v177 = v176[1];
  *uint64_t v175 = v178;
  v175[1] = v177;
  swift_bridgeObjectRelease();
  *(void *)&v62[v64[19]] = *(void *)&v63[v64[19]];
  uint64_t v179 = v64[20];
  uint64_t v180 = &v62[v179];
  uint64_t v181 = &v63[v179];
  uint64_t v182 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  uint64_t v320 = *((void *)v182 - 1);
  uint64_t v183 = *(uint64_t (**)(char *, uint64_t, int *))(v320 + 48);
  uint64_t v184 = (uint64_t)v180;
  LODWORD(v180) = v183(v180, 1, v182);
  __srca = v181;
  int v185 = v183(v181, 1, v182);
  if (v180)
  {
    if (!v185)
    {
      long long v186 = *((_OWORD *)v181 + 1);
      *(_OWORD *)uint64_t v184 = *(_OWORD *)v181;
      *(_OWORD *)(v184 + 16) = v186;
      *(_OWORD *)(v184 + 32) = *((_OWORD *)v181 + 2);
      *(_WORD *)(v184 + 48) = *((_WORD *)v181 + 24);
      uint64_t v187 = *((void *)v181 + 8);
      *(void *)(v184 + 56) = *((void *)v181 + 7);
      *(void *)(v184 + 64) = v187;
      *(unsigned char *)(v184 + 72) = v181[72];
      uint64_t v188 = v182[10];
      uint64_t v318 = (void *)(v184 + v188);
      uint64_t v189 = &v181[v188];
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v326)(&v181[v188], 1, v330))
      {
        uint64_t v190 = sub_10000588C(&qword_101649E40);
        memcpy(v318, v189, *(void *)(*(void *)(v190 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v146 + 32))(v318, v189, v330);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v146 + 56))(v318, 0, 1, v330);
      }
      uint64_t v220 = v182[11];
      uint64_t v319 = (void *)(v184 + v220);
      uint64_t v221 = &v181[v220];
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v326)(&v181[v220], 1, v330))
      {
        uint64_t v222 = sub_10000588C(&qword_101649E40);
        memcpy(v319, v221, *(void *)(*(void *)(v222 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v146 + 32))(v319, v221, v330);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v146 + 56))(v319, 0, 1, v330);
      }
      uint64_t v223 = v182[12];
      uint64_t v224 = v184 + v223;
      uint64_t v225 = &v181[v223];
      *(void *)uint64_t v224 = *(void *)v225;
      *(unsigned char *)(v224 + 8) = v225[8];
      *(_OWORD *)(v184 + v182[13]) = *(_OWORD *)&v181[v182[13]];
      *(void *)(v184 + v182[14]) = *(void *)&v181[v182[14]];
      *(_OWORD *)(v184 + v182[15]) = *(_OWORD *)&v181[v182[15]];
      *(void *)(v184 + v182[16]) = *(void *)&v181[v182[16]];
      uint64_t v226 = v182[17];
      uint64_t v227 = v184 + v226;
      unint64_t v228 = &v181[v226];
      *(unsigned char *)(v227 + 16) = v228[16];
      *(_OWORD *)uint64_t v227 = *(_OWORD *)v228;
      uint64_t v229 = v182[18];
      uint64_t v230 = v184 + v229;
      uint64_t v231 = &v181[v229];
      *(unsigned char *)(v230 + 16) = v231[16];
      *(_OWORD *)uint64_t v230 = *(_OWORD *)v231;
      (*(void (**)(uint64_t, void, uint64_t))(v320 + 56))(v184, 0, 1);
      goto LABEL_86;
    }
LABEL_55:
    uint64_t v191 = sub_10000588C(&qword_101649E50);
    memcpy((void *)v184, v181, *(void *)(*(void *)(v191 - 8) + 64));
    uint64_t v59 = v338;
    uint64_t v58 = v339;
    goto LABEL_87;
  }
  if (v185)
  {
    sub_100294680(v184, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    goto LABEL_55;
  }
  uint64_t v211 = *((void *)v181 + 1);
  *(void *)uint64_t v184 = *(void *)v181;
  *(void *)(v184 + 8) = v211;
  swift_bridgeObjectRelease();
  uint64_t v212 = *((void *)v181 + 3);
  *(void *)(v184 + 16) = *((void *)v181 + 2);
  *(void *)(v184 + 24) = v212;
  swift_bridgeObjectRelease();
  uint64_t v213 = *((void *)v181 + 5);
  *(void *)(v184 + 32) = *((void *)v181 + 4);
  *(void *)(v184 + 40) = v213;
  swift_bridgeObjectRelease();
  *(_WORD *)(v184 + 48) = *((_WORD *)v181 + 24);
  uint64_t v214 = *((void *)v181 + 8);
  *(void *)(v184 + 56) = *((void *)v181 + 7);
  *(void *)(v184 + 64) = v214;
  *(unsigned char *)(v184 + 72) = v181[72];
  uint64_t v215 = v182[10];
  uint64_t v216 = &v181[v215];
  uint64_t v321 = (void *)(v184 + v215);
  int v316 = v326();
  int v217 = ((uint64_t (*)(char *, uint64_t, uint64_t))v326)(v216, 1, v330);
  if (v316)
  {
    if (v217)
    {
      size_t v218 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
      long long v219 = v321;
LABEL_74:
      memcpy(v219, v216, v218);
      goto LABEL_77;
    }
    (*(void (**)(void *, char *, uint64_t))(v146 + 32))(v321, v216, v330);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v146 + 56))(v321, 0, 1, v330);
  }
  else
  {
    if (v217)
    {
      (*(void (**)(void *, uint64_t))(v146 + 8))(v321, v330);
      size_t v218 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
      long long v219 = v321;
      goto LABEL_74;
    }
    (*(void (**)(void *, char *, uint64_t))(v146 + 40))(v321, v216, v330);
  }
LABEL_77:
  uint64_t v232 = v182[11];
  unint64_t v233 = &v181[v232];
  uint64_t v322 = (void *)(v184 + v232);
  int v317 = v326();
  int v234 = ((uint64_t (*)(char *, uint64_t, uint64_t))v326)(v233, 1, v330);
  if (v317)
  {
    if (!v234)
    {
      (*(void (**)(void *, char *, uint64_t))(v146 + 32))(v322, v233, v330);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v146 + 56))(v322, 0, 1, v330);
      goto LABEL_85;
    }
    size_t v235 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
    uint64_t v236 = v322;
  }
  else
  {
    if (!v234)
    {
      (*(void (**)(void *, char *, uint64_t))(v146 + 40))(v322, v233, v330);
      goto LABEL_85;
    }
    (*(void (**)(void *, uint64_t))(v146 + 8))(v322, v330);
    size_t v235 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
    uint64_t v236 = v322;
  }
  memcpy(v236, v233, v235);
LABEL_85:
  uint64_t v237 = v182[12];
  uint64_t v238 = v184 + v237;
  uint64_t v239 = &__srca[v237];
  *(void *)uint64_t v238 = *(void *)v239;
  *(unsigned char *)(v238 + 8) = v239[8];
  uint64_t v240 = v182[13];
  uint64_t v241 = (void *)(v184 + v240);
  uint64_t v242 = &__srca[v240];
  uint64_t v244 = *(void *)v242;
  uint64_t v243 = *((void *)v242 + 1);
  *uint64_t v241 = v244;
  v241[1] = v243;
  swift_bridgeObjectRelease();
  *(void *)(v184 + v182[14]) = *(void *)&__srca[v182[14]];
  swift_bridgeObjectRelease();
  uint64_t v245 = v182[15];
  char v246 = (void *)(v184 + v245);
  uint64_t v247 = &__srca[v245];
  uint64_t v249 = *(void *)v247;
  uint64_t v248 = *((void *)v247 + 1);
  *char v246 = v249;
  v246[1] = v248;
  swift_bridgeObjectRelease();
  *(void *)(v184 + v182[16]) = *(void *)&__srca[v182[16]];
  swift_bridgeObjectRelease();
  uint64_t v250 = v182[17];
  uint64_t v251 = v184 + v250;
  unint64_t v252 = &__srca[v250];
  *(_OWORD *)uint64_t v251 = *(_OWORD *)v252;
  *(unsigned char *)(v251 + 16) = v252[16];
  uint64_t v253 = v182[18];
  uint64_t v254 = v184 + v253;
  uint64_t v255 = &__srca[v253];
  *(unsigned char *)(v254 + 16) = v255[16];
  *(_OWORD *)uint64_t v254 = *(_OWORD *)v255;
LABEL_86:
  uint64_t v59 = v338;
  uint64_t v58 = v339;
LABEL_87:
  *(_DWORD *)&v62[v64[21]] = *(_DWORD *)&v63[v64[21]];
  *(void *)&v62[v64[22]] = *(void *)&v63[v64[22]];
  swift_bridgeObjectRelease();
  uint64_t v256 = v64[23];
  uint64_t v257 = (uint64_t)&v62[v256];
  uint64_t v258 = &v63[v256];
  unint64_t v259 = *(void *)&v62[v256 + 8];
  if (v259 >> 60 == 15)
  {
LABEL_90:
    *(_OWORD *)uint64_t v257 = *(_OWORD *)v258;
    goto LABEL_92;
  }
  unint64_t v260 = *((void *)v258 + 1);
  if (v260 >> 60 == 15)
  {
    sub_1001356D0(v257);
    goto LABEL_90;
  }
  uint64_t v261 = *(void *)v257;
  *(void *)uint64_t v257 = *(void *)v258;
  *(void *)(v257 + 8) = v260;
  sub_10001CFB8(v261, v259);
LABEL_92:
  uint64_t v262 = v64[24];
  int v263 = (uint64_t *)&v62[v262];
  int v264 = (uint64_t *)&v63[v262];
  unint64_t v265 = *(void *)&v62[v262 + 8];
  if (v265 >> 60 != 15)
  {
    unint64_t v266 = v264[1];
    if (v266 >> 60 != 15)
    {
      uint64_t v267 = *v263;
      *int v263 = *v264;
      v263[1] = v266;
      sub_10001CFB8(v267, v265);
      goto LABEL_97;
    }
    sub_1001356D0((uint64_t)v263);
  }
  *(_OWORD *)int v263 = *(_OWORD *)v264;
LABEL_97:
  uint64_t v268 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v146 + 40);
  v268(&v62[v64[25]], &v63[v64[25]], v330);
  v268(&v62[v64[26]], &v63[v64[26]], v330);
  v268(&v62[v64[27]], &v63[v64[27]], v330);
  v268(&v62[v64[28]], &v63[v64[28]], v330);
  v268(&v62[v64[29]], &v63[v64[29]], v330);
  v268(&v62[v64[30]], &v63[v64[30]], v330);
  uint64_t v269 = v64[31];
  int v270 = &v62[v269];
  uint64_t v271 = (uint64_t *)&v63[v269];
  uint64_t v273 = *v271;
  uint64_t v272 = v271[1];
  *int v270 = v273;
  v270[1] = v272;
  swift_bridgeObjectRelease();
  *(void *)&v62[v64[32]] = *(void *)&v63[v64[32]];
  swift_bridgeObjectRelease();
  uint64_t v274 = v64[33];
  unint64_t v275 = &v62[v274];
  uint64_t v276 = (uint64_t *)&v63[v274];
  uint64_t v278 = *v276;
  uint64_t v277 = v276[1];
  *unint64_t v275 = v278;
  v275[1] = v277;
  swift_bridgeObjectRelease();
  *(void *)&v62[v64[34]] = *(void *)&v63[v64[34]];
  swift_bridgeObjectRelease();
  uint64_t v279 = v64[35];
  uint64_t v280 = &v62[v279];
  unint64_t v281 = &v63[v279];
  *(_OWORD *)uint64_t v280 = *(_OWORD *)v281;
  v280[16] = v281[16];
  uint64_t v282 = v64[36];
  uint64_t v283 = &v62[v282];
  int v284 = &v63[v282];
  v283[16] = v284[16];
  *(_OWORD *)uint64_t v283 = *(_OWORD *)v284;
  v268(&v62[v64[37]], &v63[v64[37]], v330);
  v268(&v62[v64[38]], &v63[v64[38]], v330);
  v268(&v62[v64[39]], &v63[v64[39]], v330);
  v268(&v62[v64[40]], &v63[v64[40]], v330);
  v268(&v62[v64[41]], &v63[v64[41]], v330);
  v268(&v62[v64[42]], &v63[v64[42]], v330);
  v62[v64[43]] = v63[v64[43]];
  v62[v64[44]] = v63[v64[44]];
  v62[v64[45]] = v63[v64[45]];
  uint64_t v285 = v64[46];
  size_t v286 = &v62[v285];
  uint64_t v287 = (uint64_t *)&v63[v285];
  uint64_t v289 = *v287;
  uint64_t v288 = v287[1];
  *size_t v286 = v289;
  v286[1] = v288;
  swift_bridgeObjectRelease();
  uint64_t v290 = v64[47];
  uint64_t v291 = &v62[v290];
  uint64_t v292 = (uint64_t *)&v63[v290];
  uint64_t v294 = *v292;
  uint64_t v293 = v292[1];
  *uint64_t v291 = v294;
  v291[1] = v293;
  swift_bridgeObjectRelease();
LABEL_98:
  uint64_t v60 = v340;
  uint64_t v83 = v337;
LABEL_99:
  uint64_t v295 = v59[17];
  v84[v59[16]] = *(unsigned char *)(v58 + v59[16]);
  *(void *)&v84[v295] = *(void *)(v58 + v295);
  swift_bridgeObjectRelease();
  uint64_t v296 = v59[18];
  int v297 = &v84[v296];
  uint64_t v298 = (unsigned char *)(v58 + v296);
  int v299 = v83(&v84[v296], 1, v60);
  int v300 = v83(v298, 1, v60);
  if (v299)
  {
    if (!v300)
    {
      (*(void (**)(char *, unsigned char *, uint64_t))(v332 + 32))(v297, v298, v60);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v332 + 56))(v297, 0, 1, v60);
      goto LABEL_105;
    }
    goto LABEL_104;
  }
  if (v300)
  {
    (*(void (**)(char *, uint64_t))(v332 + 8))(v297, v60);
LABEL_104:
    uint64_t v301 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v297, v298, *(void *)(*(void *)(v301 - 8) + 64));
    goto LABEL_105;
  }
  v331(v297, (uint64_t)v298, v60);
LABEL_105:
  uint64_t v302 = v59[19];
  uint64_t v303 = &v84[v302];
  uint64_t v304 = (unsigned char *)(v58 + v302);
  int v305 = v83(&v84[v302], 1, v60);
  int v306 = v83(v304, 1, v60);
  if (v305)
  {
    if (!v306)
    {
      (*(void (**)(char *, unsigned char *, uint64_t))(v332 + 32))(v303, v304, v60);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v332 + 56))(v303, 0, 1, v60);
      goto LABEL_111;
    }
    goto LABEL_110;
  }
  if (v306)
  {
    (*(void (**)(char *, uint64_t))(v332 + 8))(v303, v60);
LABEL_110:
    uint64_t v307 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v303, v304, *(void *)(*(void *)(v307 - 8) + 64));
    goto LABEL_111;
  }
  v331(v303, (uint64_t)v304, v60);
LABEL_111:
  uint64_t v308 = v59[20];
  uint64_t v309 = (uint64_t *)&v84[v308];
  uint64_t v310 = (uint64_t *)(v58 + v308);
  unint64_t v311 = *(void *)&v84[v308 + 8];
  if (((v311 >> 60) | 4) != 0xF)
  {
    unint64_t v312 = v310[1];
    if (((v312 >> 60) | 4) != 0xF)
    {
      uint64_t v315 = *v309;
      uint64_t *v309 = *v310;
      v309[1] = v312;
      sub_10001CFB8(v315, v311);
      goto LABEL_115;
    }
    sub_1001EADA0((uint64_t)v309);
  }
  *(_OWORD *)uint64_t v309 = *(_OWORD *)v310;
LABEL_115:
  uint64_t v313 = v59[22];
  v84[v59[21]] = *(unsigned char *)(v58 + v59[21]);
  *(_WORD *)&v84[v313] = *(_WORD *)(v58 + v313);
  return v84;
}

uint64_t sub_10029E25C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10029E270);
}

uint64_t sub_10029E270(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_18:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_17:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_18;
  }
  uint64_t v14 = type metadata accessor for MACAddress();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_17;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v15 = *(void *)(a1 + a3[8]);
    if (v15 >= 0xFFFFFFFF) {
      LODWORD(v15) = -1;
    }
    return (v15 + 1);
  }
  else
  {
    uint64_t v17 = type metadata accessor for Date();
    if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
    {
      uint64_t v8 = v17;
      uint64_t v12 = *(void *)(v17 - 8);
      uint64_t v13 = a3[10];
      goto LABEL_17;
    }
    uint64_t v18 = sub_10000588C((uint64_t *)&unk_10163AC90);
    if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a2)
    {
      uint64_t v8 = v18;
      uint64_t v12 = *(void *)(v18 - 8);
      uint64_t v13 = a3[11];
      goto LABEL_17;
    }
    uint64_t v19 = sub_10000588C(&qword_1016653B0);
    if (*(_DWORD *)(*(void *)(v19 - 8) + 84) == a2)
    {
      uint64_t v8 = v19;
      uint64_t v12 = *(void *)(v19 - 8);
      uint64_t v13 = a3[14];
      goto LABEL_17;
    }
    uint64_t v20 = sub_10000588C((uint64_t *)&unk_10166BFA0);
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48);
    uint64_t v22 = v20;
    uint64_t v23 = a1 + a3[15];
    return v21(v23, a2, v22);
  }
}

uint64_t sub_10029E530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10029E544);
}

uint64_t sub_10029E544(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_16:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = sub_10000588C(&qword_101638CF0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[5];
LABEL_15:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_16;
  }
  uint64_t result = type metadata accessor for MACAddress();
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v14 = *(void *)(result - 8);
    uint64_t v15 = a4[7];
    goto LABEL_15;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[8]) = (a2 - 1);
    return result;
  }
  uint64_t v17 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
  {
    uint64_t v10 = v17;
    uint64_t v14 = *(void *)(v17 - 8);
    uint64_t v15 = a4[10];
    goto LABEL_15;
  }
  uint64_t v18 = sub_10000588C((uint64_t *)&unk_10163AC90);
  if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a3)
  {
    uint64_t v10 = v18;
    uint64_t v14 = *(void *)(v18 - 8);
    uint64_t v15 = a4[11];
    goto LABEL_15;
  }
  uint64_t v19 = sub_10000588C(&qword_1016653B0);
  if (*(_DWORD *)(*(void *)(v19 - 8) + 84) == a3)
  {
    uint64_t v10 = v19;
    uint64_t v14 = *(void *)(v19 - 8);
    uint64_t v15 = a4[14];
    goto LABEL_15;
  }
  uint64_t v20 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  uint64_t v22 = v20;
  uint64_t v23 = a1 + a4[15];

  return v21(v23, a2, a2, v22);
}

void sub_10029E804()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_10029EACC(319, (unint64_t *)&qword_101655AB0, (void (*)(uint64_t))&type metadata accessor for UUID);
    if (v1 <= 0x3F)
    {
      type metadata accessor for MACAddress();
      if (v2 <= 0x3F)
      {
        type metadata accessor for Date();
        if (v3 <= 0x3F)
        {
          sub_10029EACC(319, (unint64_t *)&qword_10165C690, (void (*)(uint64_t))&type metadata accessor for Date);
          if (v4 <= 0x3F)
          {
            sub_10029EACC(319, (unint64_t *)&unk_10163F970, (void (*)(uint64_t))type metadata accessor for AccessoryMetadata);
            if (v5 <= 0x3F)
            {
              sub_10029EACC(319, (unint64_t *)&qword_10163DD70, (void (*)(uint64_t))type metadata accessor for AccessoryProductInfo);
              if (v6 <= 0x3F) {
                swift_initStructMetadata();
              }
            }
          }
        }
      }
    }
  }
}

void sub_10029EACC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10029EB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10029EB34);
}

uint64_t sub_10029EB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = type metadata accessor for Date();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_10029EBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10029EBB8);
}

uint64_t sub_10029EBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_10029EC2C()
{
  return sub_1002931B8(&qword_101640578, (void (*)(uint64_t))type metadata accessor for WildModeAssociationRecord);
}

unint64_t sub_10029EC78()
{
  unint64_t result = qword_101640580;
  if (!qword_101640580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640580);
  }
  return result;
}

unint64_t sub_10029ECD0()
{
  unint64_t result = qword_101640588;
  if (!qword_101640588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640588);
  }
  return result;
}

unint64_t sub_10029ED28()
{
  unint64_t result = qword_101640590;
  if (!qword_101640590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640590);
  }
  return result;
}

unint64_t sub_10029ED80()
{
  unint64_t result = qword_101640598;
  if (!qword_101640598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640598);
  }
  return result;
}

unint64_t sub_10029EDD8()
{
  unint64_t result = qword_1016405A0;
  if (!qword_1016405A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016405A0);
  }
  return result;
}

uint64_t sub_10029EE2C()
{
  return sub_1002931B8(&qword_1016405A8, (void (*)(uint64_t))type metadata accessor for WildModeTrackingLocation);
}

unint64_t sub_10029EE78()
{
  unint64_t result = qword_1016405B0;
  if (!qword_1016405B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016405B0);
  }
  return result;
}

unint64_t sub_10029EED0()
{
  unint64_t result = qword_1016405B8;
  if (!qword_1016405B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016405B8);
  }
  return result;
}

unint64_t sub_10029EF24(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

unint64_t sub_10029EF34(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A0C88, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t sub_10029EF80()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x13) {
    return 19;
  }
  else {
    return v0;
  }
}

unint64_t sub_10029EFD4()
{
  unint64_t result = qword_1016405C0;
  if (!qword_1016405C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016405C0);
  }
  return result;
}

unint64_t sub_10029F028()
{
  unint64_t result = qword_1016405D0;
  if (!qword_1016405D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016405D0);
  }
  return result;
}

unint64_t sub_10029F07C()
{
  unint64_t result = qword_1016405D8;
  if (!qword_1016405D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016405D8);
  }
  return result;
}

unint64_t sub_10029F0D0()
{
  unint64_t result = qword_1016405E0;
  if (!qword_1016405E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016405E0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for WildModeTrackingLocation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10029F1F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WildModeTrackingLocation.CodingKeys()
{
  return &type metadata for WildModeTrackingLocation.CodingKeys;
}

unint64_t sub_10029F22C()
{
  unint64_t result = qword_1016405F0;
  if (!qword_1016405F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016405F0);
  }
  return result;
}

unint64_t sub_10029F284()
{
  unint64_t result = qword_1016405F8;
  if (!qword_1016405F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016405F8);
  }
  return result;
}

unint64_t sub_10029F2DC()
{
  unint64_t result = qword_101640600;
  if (!qword_101640600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640600);
  }
  return result;
}

uint64_t sub_10029F330(void *a1, int a2)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  if (a2 == 2 || (a2 & 0x10000) != 0)
  {
    sub_1000BD078((uint64_t)v6, v7);
    sub_10006145C();
LABEL_8:
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
    if (!v2)
    {
      sub_1000BD078((uint64_t)v6, v7);
      sub_10006145C();
      dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
      sub_1000BD078((uint64_t)v6, v7);
      dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
    }
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v6);
  }
  sub_1000BD078((uint64_t)v6, v7);
  sub_10006145C();
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v6);
  }
  unint64_t v4 = Bool.intValue.getter();
  if ((v4 & 0x8000000000000000) == 0 && v4 < 0x100)
  {
    sub_1000BD078((uint64_t)v6, v7);
    goto LABEL_8;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10029F5A0(void *a1, int a2)
{
  char v3 = HIBYTE(a2);
  uint64_t v5 = sub_10000588C(&qword_101640628);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1002A04EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    v10[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v10[12] = v3;
    v10[11] = 2;
    sub_100205480();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[10] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029F770()
{
  uint64_t result = 0x656E774F7261656ELL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6465767265736572;
      break;
    case 2:
      uint64_t result = 0x79654B6172747865;
      break;
    case 3:
      uint64_t result = 1953393000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10029F804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002A00F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029F82C(uint64_t a1)
{
  unint64_t v2 = sub_1002A04EC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029F868(uint64_t a1)
{
  unint64_t v2 = sub_1002A04EC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029F8A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10029F928((uint64_t (*)(void))sub_10029FF10, a1);
}

uint64_t sub_10029F8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10029F9A4(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t))sub_10029F330);
}

uint64_t sub_10029F8FC@<X0>(uint64_t a1@<X8>)
{
  return sub_10029F928((uint64_t (*)(void))sub_1002A02C4, a1);
}

uint64_t sub_10029F928@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(unsigned char *)(a2 + 2) = BYTE2(result) & 1;
    *(unsigned char *)(a2 + 3) = BYTE3(result);
    *(unsigned char *)(a2 + 4) = BYTE4(result);
  }
  return result;
}

uint64_t sub_10029F978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10029F9A4(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t))sub_10029F5A0);
}

uint64_t sub_10029F9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, unint64_t))
{
  return a4(a1, *(unsigned __int16 *)v4 | ((unint64_t)v4[3] << 24) | ((unint64_t)v4[4] << 32) | ((unint64_t)v4[2] << 16));
}

BOOL sub_10029F9EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10029FA40(*(unsigned __int16 *)a1 | ((unint64_t)a1[3] << 24) | ((unint64_t)a1[4] << 32) | ((unint64_t)a1[2] << 16), *(unsigned __int16 *)a2 | ((unint64_t)a2[3] << 24) | ((unint64_t)a2[4] << 32) | ((unint64_t)a2[2] << 16));
}

BOOL sub_10029FA40(uint64_t a1, uint64_t a2)
{
  if (a1 == 2)
  {
    if (a2 != 2) {
      return 0;
    }
  }
  else if (a2 == 2 || ((((a1 & 1) == 0) ^ a2) & 1) == 0)
  {
    return 0;
  }
  if ((a1 & 0x10000) != 0)
  {
    if ((a2 & 0x10000) == 0) {
      return 0;
    }
  }
  else if ((a2 & 0x10000) != 0 || BYTE1(a1) != BYTE1(a2))
  {
    return 0;
  }
  if (BYTE3(a1) != BYTE3(a2)) {
    return 0;
  }
  return BYTE4(a1) == BYTE4(a2);
}

unint64_t sub_10029FACC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (!((a1 ^ (unint64_t)(a1 << 32)) >> 32)) {
        goto LABEL_23;
      }
      goto LABEL_12;
    case 2uLL:
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      if (v3 == v4) {
        goto LABEL_23;
      }
      if (v2 == 2)
      {
        BOOL v5 = __OFSUB__(v4, v3);
        uint64_t v6 = v4 - v3;
        if (!v5)
        {
          if (v6 > 4) {
            goto LABEL_23;
          }
          goto LABEL_14;
        }
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
LABEL_12:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if (HIDWORD(a1) - (int)a1 > 4) {
        goto LABEL_23;
      }
LABEL_14:
      if (v2)
      {
        if (v2 == 1)
        {
          if (!__OFSUB__(HIDWORD(a1), a1))
          {
            uint64_t v7 = HIDWORD(a1) - (int)a1;
            goto LABEL_20;
          }
          goto LABEL_28;
        }
        uint64_t v9 = *(void *)(a1 + 16);
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v7 = v8 - v9;
        if (__OFSUB__(v8, v9))
        {
LABEL_29:
          __break(1u);
          JUMPOUT(0x10029FCB8);
        }
      }
      else
      {
        uint64_t v7 = BYTE6(a2);
      }
LABEL_20:
      if (v7 == 2)
      {
        uint64_t v12 = 0;
        unsigned __int8 v11 = 1;
        goto LABEL_25;
      }
      if (v7 != 3)
      {
LABEL_23:
        sub_10029FCC8();
        swift_allocError();
        return swift_willThrow();
      }
      char v10 = Data.subscript.getter();
      unsigned __int8 v11 = 0;
      uint64_t v12 = (Data.subscript.getter() & 0xFE) << 8;
      uint64_t v7 = v10 & 1;
LABEL_25:
      unsigned __int8 v14 = Data.subscript.getter();
      return v7 | v12 | ((unint64_t)v14 << 24) | ((unint64_t)Data.subscript.getter() << 32) | ((unint64_t)v11 << 16);
    case 3uLL:
      goto LABEL_23;
    default:
      if ((a2 & 0xFF000000000000) == 0 || BYTE6(a2) > 4uLL) {
        goto LABEL_23;
      }
      goto LABEL_14;
  }
}

unint64_t sub_10029FCC8()
{
  unint64_t result = qword_101640608;
  if (!qword_101640608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640608);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AdvInfo(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AdvInfo(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[5]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AdvInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AdvInfo()
{
  return &type metadata for AdvInfo;
}

unsigned char *storeEnumTagSinglePayload for AdvInfo.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10029FE80);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AdvInfo.Error()
{
  return &type metadata for AdvInfo.Error;
}

unint64_t sub_10029FEBC()
{
  unint64_t result = qword_101640610;
  if (!qword_101640610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640610);
  }
  return result;
}

unint64_t sub_10029FF10(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v15, v16);
  uint64_t v3 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v5 = v3;
    unint64_t v6 = v4;
    sub_1000362FC();
    DataProtocol.intValue.getter();
    sub_1000BD078((uint64_t)v15, v16);
    uint64_t v7 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v9 = v8;
    sub_1000361E0(v5, v6);
    sub_1000361E0(v7, v9);
    sub_100A42CBC(v7, v9);
    sub_10001CFB8(v7, v9);
    uint64_t v10 = sub_10088540C(v5, v6);
    unint64_t v12 = v11;
    unint64_t v13 = sub_10029FACC(v10, v11);
    sub_10001CFB8(v10, v12);
    sub_10001CFB8(v7, v9);
    sub_10001CFB8(v5, v6);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    return v13 & 0xFFFF00FFFFLL | ((unint64_t)(BYTE2(v13) & 1) << 16);
  }
}

uint64_t sub_1002A00F4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656E774F7261656ELL && a2 == 0xE900000000000072;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465767265736572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79654B6172747865 && a2 == 0xEC00000073746942 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1953393000 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_1002A02C4(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101640618);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1002A04EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v17 = 0;
  unsigned __int8 v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v16 = 1;
  __int16 v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v14 = 2;
  sub_100205330();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v15;
  char v13 = 3;
  unsigned __int8 v10 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return (v9 << 24) | ((unint64_t)v10 << 32) | ((unint64_t)(HIBYTE(v8) & 1) << 16) | ((unint64_t)v8 << 8) | v7;
}

unint64_t sub_1002A04EC()
{
  unint64_t result = qword_101640620;
  if (!qword_101640620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640620);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AdvInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A060CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AdvInfo.CodingKeys()
{
  return &type metadata for AdvInfo.CodingKeys;
}

unint64_t sub_1002A0648()
{
  unint64_t result = qword_101640630;
  if (!qword_101640630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640630);
  }
  return result;
}

unint64_t sub_1002A06A0()
{
  unint64_t result = qword_101640638;
  if (!qword_101640638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640638);
  }
  return result;
}

unint64_t sub_1002A06F8()
{
  unint64_t result = qword_101640640;
  if (!qword_101640640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640640);
  }
  return result;
}

uint64_t sub_1002A074C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1002A07AC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1002A07FC@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1002A08D8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002A0828()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1002A0888()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1002A08D8(uint64_t result)
{
  if (result >= 5u) {
    return 5;
  }
  else {
    return result;
  }
}

uint64_t sub_1002A08EC(double a1)
{
  if (a1 >= 0.0 && a1 < 65.0) {
    return 3;
  }
  if (a1 >= 65.0 && a1 < 400.0) {
    return 2;
  }
  if (a1 <= 9.22337204e18) {
    return a1 >= 400.0;
  }
  return 0;
}

unsigned char *storeEnumTagSinglePayload for BeaconPayloadMetaData.BeaconType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A0A18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadMetaData.BeaconType()
{
  return &type metadata for BeaconPayloadMetaData.BeaconType;
}

ValueMetadata *type metadata accessor for BeaconPayloadMetaData()
{
  return &type metadata for BeaconPayloadMetaData;
}

unsigned char *storeEnumTagSinglePayload for BeaconPayloadMetaData.ConfidenceScore(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A0B2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadMetaData.ConfidenceScore()
{
  return &type metadata for BeaconPayloadMetaData.ConfidenceScore;
}

unint64_t sub_1002A0B68()
{
  unint64_t result = qword_101640648;
  if (!qword_101640648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640648);
  }
  return result;
}

unint64_t sub_1002A0BC0()
{
  unint64_t result = qword_101640650;
  if (!qword_101640650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640650);
  }
  return result;
}

unint64_t sub_1002A0C14()
{
  unint64_t result = qword_101640658;
  if (!qword_101640658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640658);
  }
  return result;
}

unint64_t sub_1002A0C68()
{
  unint64_t result = qword_101640660;
  if (!qword_101640660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640660);
  }
  return result;
}

uint64_t sub_1002A0CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002A0CD0);
}

uint64_t sub_1002A0CD0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    unint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1002A0D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002A0D94);
}

void *sub_1002A0D94(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for PencilUnpairEndPoint()
{
  uint64_t result = qword_1016406C0;
  if (!qword_1016406C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002A0E88()
{
  sub_10000588C(&qword_101639580);
  OS_dispatch_queue.sync<A>(execute:)();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  unint64_t v0 = (void (*)(uint64_t *, void))URLComponents.path.modify();
  v1._countAndFlagsBits = 0xD000000000000015;
  v1._object = (void *)0x80000001013F79B0;
  String.append(_:)(v1);
  v0(&v7, 0);
  if (qword_101637188 != -1) {
    swift_once();
  }
  BOOL v2 = (void *)qword_10170EE68;
  id v3 = [self sharedInstance];
  unsigned int v4 = [v3 isInternalBuild];

  if (v4)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v2 stringForKey:v5];

    if (v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URLComponents.host.setter();
    }
  }
}

unint64_t sub_1002A1070(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int8x16_t v5 = (int8x16_t)vdupq_n_s64(v2);
      id v6 = (uint64x2_t *)(a1 + 56);
      unint64_t v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      int8x16_t v8 = v5;
      do
      {
        int8x16_t v5 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v5, v6[-1]), (int8x16_t)v6[-1], v5);
        int8x16_t v8 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v8, *v6), *(int8x16_t *)v6, v8);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      int8x16_t v9 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v8, (uint64x2_t)v5), v5, v8);
      unint64_t v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      unint64_t v2 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v10, v9.u64[0]), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL)) {
        return v2;
      }
    }
    else
    {
      unint64_t v4 = 1;
    }
    unint64_t v11 = v1 - v4;
    uint64_t v12 = (unint64_t *)(a1 + 8 * v4 + 32);
    do
    {
      unint64_t v14 = *v12++;
      unint64_t v13 = v14;
      if (v14 < v2) {
        unint64_t v2 = v13;
      }
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t sub_1002A1124@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  unint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  int8x16_t v9 = (char *)&v29 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v16 = (char *)&v29 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  if (!v17)
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v19(v9, 1, 1, v10);
    goto LABEL_5;
  }
  unint64_t v18 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v37 = v11 + 16;
  v36(v9, a1 + v18, v10);
  uint64_t v31 = a1;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v38(v9, 0, 1, v10);
  uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v35 = v11 + 48;
  if (v34(v9, 1, v10) == 1)
  {
    uint64_t v19 = v38;
LABEL_5:
    sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_10163AC90);
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v19)(a2, 1, 1, v10);
  }
  int v30 = a2;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v33(v16, v9, v10);
  swift_bridgeObjectRetain();
  uint64_t v21 = v17 - 1;
  if (v21)
  {
    uint64_t v23 = *(void *)(v11 + 72);
    uint64_t v24 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v32 = v23;
    unint64_t v25 = v31 + v23 + v18;
    uint64_t v26 = v33;
    while (1)
    {
      v36(v7, v25, v10);
      v38(v7, 0, 1, v10);
      if (v34(v7, 1, v10) == 1) {
        break;
      }
      v26(v14, v7, v10);
      sub_1001C3888((unint64_t *)&qword_1016605E0);
      char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v28 = *v24;
      if (v27)
      {
        v28(v16, v10);
        v26(v16, v14, v10);
      }
      else
      {
        v28(v14, v10);
      }
      v25 += v32;
      if (!--v21) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    v38(v7, 1, 1, v10);
  }
  swift_bridgeObjectRelease();
  sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_10163AC90);
  uint64_t v22 = v30;
  v33(v30, v16, v10);
  return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v38)(v22, 0, 1, v10);
}

uint64_t sub_1002A1534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_10163A790);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v55 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v57 = (uint64_t)&v48 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v48 - v10;
  __chkstk_darwin(v9);
  unint64_t v14 = (char *)&v48 - v13;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    uint64_t v48 = a2;
    uint64_t v50 = v12;
    unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    sub_1002A426C(a1 + v16, (uint64_t)&v48 - v13);
    uint64_t v49 = a1;
    swift_bridgeObjectRetain();
    uint64_t v17 = v15 - 1;
    if (v15 == 1)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      uint64_t v18 = v48;
      sub_10001D608((uint64_t)v14, v48, &qword_10163A790);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v50 + 56))(v18, 0, 1, v4);
    }
    uint64_t v21 = *(void *)(v50 + 72);
    uint64_t v53 = v4;
    uint64_t v54 = v21;
    uint64_t v22 = v49 + v21 + v16;
    uint64_t v51 = v11;
    uint64_t v52 = v14;
    while (1)
    {
      uint64_t v56 = v17;
      sub_1002A426C(v22, (uint64_t)v11);
      uint64_t v23 = &v11[*(int *)(v4 + 40)];
      uint64_t v24 = (uint64_t)v11;
      uint64_t v25 = *((void *)v23 + 3);
      uint64_t v26 = *((void *)v23 + 4);
      sub_10001CD44(v23, v25);
      int v27 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26);
      uint64_t v28 = &v14[*(int *)(v4 + 40)];
      uint64_t v30 = *((void *)v28 + 3);
      uint64_t v29 = *((void *)v28 + 4);
      sub_10001CD44(v28, v30);
      unsigned __int8 v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 16))(v30, v29);
      sub_1002A426C(v24, v57);
      uint64_t v32 = (uint64_t)v14;
      uint64_t v33 = v55;
      sub_1002A426C(v32, v55);
      if (v27 == v31) {
        break;
      }
      uint64_t v34 = (void *)(v57 + *(int *)(v4 + 40));
      uint64_t v35 = v34[3];
      uint64_t v36 = v34[4];
      sub_10001CD44(v34, v35);
      uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v35, v36);
      uint64_t v38 = (void *)(v33 + *(int *)(v4 + 40));
      uint64_t v40 = v38[3];
      uint64_t v39 = v38[4];
      sub_10001CD44(v38, v40);
      uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v40, v39);
      sub_10001DAB4(v57, &qword_10163A790);
      sub_10001DAB4(v33, &qword_10163A790);
      if (v37 == v41) {
        goto LABEL_13;
      }
      uint64_t v42 = *((void *)v23 + 3);
      uint64_t v43 = *((void *)v23 + 4);
      sub_10001CD44(v23, v42);
      uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v42, v43);
      uint64_t v45 = *((void *)v28 + 3);
      uint64_t v46 = *((void *)v28 + 4);
      sub_10001CD44(v28, v45);
      uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v45, v46);
      unint64_t v14 = v52;
      uint64_t v4 = v53;
      uint64_t v11 = v51;
      if (v44 < v47)
      {
LABEL_16:
        sub_10001DAB4((uint64_t)v14, &qword_10163A790);
        sub_10001D608((uint64_t)v11, (uint64_t)v14, &qword_10163A790);
        goto LABEL_9;
      }
LABEL_8:
      sub_10001DAB4((uint64_t)v11, &qword_10163A790);
LABEL_9:
      v22 += v54;
      uint64_t v17 = v56 - 1;
      if (v56 == 1) {
        goto LABEL_3;
      }
    }
    sub_10001DAB4(v57, &qword_10163A790);
    sub_10001DAB4(v33, &qword_10163A790);
LABEL_13:
    unint64_t v14 = v52;
    uint64_t v4 = v53;
    uint64_t v11 = v51;
    if (static Date.> infix(_:_:)()) {
      goto LABEL_16;
    }
    goto LABEL_8;
  }
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);

  return v20(a2, 1, 1, v4);
}

uint64_t sub_1002A1990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v19 = v8;
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    sub_1002A42D4(a1 + v12, (uint64_t)&v18 - v9, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    swift_bridgeObjectRetain();
    uint64_t v13 = v11 - 1;
    if (v11 != 1)
    {
      uint64_t v16 = *(void *)(v19 + 72);
      uint64_t v17 = a1 + v16 + v12;
      do
      {
        sub_1002A42D4(v17, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        if (static Date.< infix(_:_:)())
        {
          sub_1002A433C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          sub_1002A439C((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        }
        else
        {
          sub_1002A433C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        }
        v17 += v16;
        --v13;
      }
      while (v13);
    }
    swift_bridgeObjectRelease();
    sub_1002A439C((uint64_t)v10, a2, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(a2, 0, 1, v4);
  }
  else
  {
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    return v15(a2, 1, 1, v4);
  }
}

uint64_t sub_1002A1BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BeaconObservation();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v19 = v8;
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    sub_1002A42D4(a1 + v12, (uint64_t)&v18 - v9, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    swift_bridgeObjectRetain();
    uint64_t v13 = v11 - 1;
    if (v11 != 1)
    {
      uint64_t v16 = *(void *)(v19 + 72);
      uint64_t v17 = a1 + v16 + v12;
      do
      {
        sub_1002A42D4(v17, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if (static Date.< infix(_:_:)())
        {
          sub_1002A433C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          sub_1002A439C((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        }
        else
        {
          sub_1002A433C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        }
        v17 += v16;
        --v13;
      }
      while (v13);
    }
    swift_bridgeObjectRelease();
    sub_1002A439C((uint64_t)v10, a2, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(a2, 0, 1, v4);
  }
  else
  {
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    return v15(a2, 1, 1, v4);
  }
}

uint64_t sub_1002A1E60(uint64_t a1, uint64_t a2)
{
  return sub_1002A1E90(a1, a2, (void (*)(uint64_t))sub_100E4CFC0);
}

uint64_t sub_1002A1E78(uint64_t a1, uint64_t a2)
{
  return sub_1002A1E90(a1, a2, (void (*)(uint64_t))sub_1002A1124);
}

uint64_t sub_1002A1E90(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unint64_t v4 = sub_1002A3600();
  uint64_t v5 = sub_100276AE8(v4);
  swift_bridgeObjectRelease();
  a3(v5);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002A1F04(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unint64_t v4 = sub_1002A4148();
  uint64_t v5 = sub_100276AE8(v4);
  swift_bridgeObjectRelease();
  a3(v5);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002A1F90(char a1, char a2)
{
  if (a2) {
    unsigned int v2 = 2;
  }
  else {
    unsigned int v2 = 3;
  }
  if (a1) {
    return v2;
  }
  else {
    return (a2 & 1) == 0;
  }
}

uint64_t sub_1002A1FB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v74 = a1;
  uint64_t v75 = a2;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = &v65[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  uint64_t v7 = &v65[-v6];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v73 = &v65[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v76 = &v65[-v13];
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = &v65[-v15];
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v71 = &v65[-v18];
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = &v65[-v20];
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v72 = &v65[-v23];
  __chkstk_darwin(v22);
  uint64_t v25 = &v65[-v24];
  unint64_t v26 = sub_1002A3600();
  uint64_t v27 = sub_100276AE8(v26);
  swift_bridgeObjectRelease();
  sub_1002A1124(v27, v7);
  swift_bridgeObjectRelease();
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v28(v7, 1, v8) == 1)
  {
    uint64_t v5 = v7;
LABEL_5:
    sub_10001DAB4((uint64_t)v5, (uint64_t *)&unk_10163AC90);
    uint64_t v32 = v76;
    Date.init()();
    uint64_t v33 = v73;
    if (qword_101636820 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100010324(v34, (uint64_t)qword_10170D690);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 16))(v33, v32, v8);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      unint64_t v37 = 0xE900000000000069;
      uint64_t v38 = 0x4669577265776F70;
      uint64_t v39 = swift_slowAlloc();
      v78[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136446466;
      switch((char)v74)
      {
        case 1:
          uint64_t v38 = 0x6C65437265776F70;
          unint64_t v37 = 0xE90000000000006CLL;
          break;
        case 2:
          uint64_t v38 = 0x5779726574746162;
          uint64_t v56 = 6899305;
          goto LABEL_22;
        case 3:
          uint64_t v38 = 0x4379726574746162;
          uint64_t v56 = 7105637;
LABEL_22:
          unint64_t v37 = v56 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          break;
        default:
          break;
      }
      uint64_t v77 = sub_1008FA0F0(v38, v37, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 12) = 2082;
      sub_1001C3888((unint64_t *)&qword_101638DA0);
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v77 = sub_1008FA0F0(v57, v58, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v33, v8);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "nextFinderPublishDate: powerMode: %{public}s, now: %{public}s (first publish).", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v32 = v76;
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v33, v8);
    }
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v9 + 32))(v75, v32, v8);
  }
  uint64_t v69 = v16;
  uint64_t v29 = v8;
  uint64_t v70 = *(void (**)(unsigned char *, char *, uint64_t))(v9 + 32);
  v70(v25, v7, v8);
  unint64_t v30 = sub_1002A3600();
  uint64_t v31 = sub_100276AE8(v30);
  swift_bridgeObjectRelease();
  sub_100E4CFC0(v31, v5);
  swift_bridgeObjectRelease();
  if (v28(v5, 1, v8) == 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v25, v8);
    goto LABEL_5;
  }
  uint64_t v40 = (uint64_t (*)(uint64_t, unsigned char *, uint64_t))v70;
  v70(v72, v5, v8);
  sub_1002A3DF0(v74);
  if (v41 <= 1) {
    uint64_t v42 = 1;
  }
  else {
    uint64_t v42 = v41;
  }
  uint64_t v76 = v25;
  Date.addingTimeInterval(_:)();
  Date.timeIntervalSince(_:)();
  double v44 = v43;
  uint64_t v73 = *(unsigned char **)(v9 + 8);
  ((void (*)(unsigned char *, uint64_t))v73)(v21, v8);
  uint64_t v68 = v42;
  double v45 = v44 / (double)v42;
  uint64_t v46 = v71;
  Date.addingTimeInterval(_:)();
  if (qword_101636820 != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  sub_100010324(v47, (uint64_t)qword_10170D690);
  uint64_t v48 = v69;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 16))(v69, v46, v8);
  uint64_t v49 = Logger.logObject.getter();
  int v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, (os_log_type_t)v50))
  {
    int v66 = v50;
    uint64_t v51 = v29;
    uint64_t v67 = v9 + 32;
    unint64_t v52 = 0xE900000000000069;
    uint64_t v53 = 0x4669577265776F70;
    uint64_t v54 = swift_slowAlloc();
    v78[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136447234;
    switch((char)v74)
    {
      case 1:
        uint64_t v53 = 0x6C65437265776F70;
        unint64_t v52 = 0xE90000000000006CLL;
        break;
      case 2:
        uint64_t v53 = 0x5779726574746162;
        uint64_t v60 = 6899305;
        goto LABEL_27;
      case 3:
        uint64_t v53 = 0x4379726574746162;
        uint64_t v60 = 7105637;
LABEL_27:
        unint64_t v52 = v60 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
        break;
      default:
        break;
    }
    uint64_t v77 = sub_1008FA0F0(v53, v52, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v54 + 12) = 2082;
    sub_1001C3888((unint64_t *)&qword_101638DA0);
    uint64_t v61 = v69;
    uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v77 = sub_1008FA0F0(v62, v63, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v64 = (void (*)(unsigned char *, uint64_t))v73;
    ((void (*)(unsigned char *, uint64_t))v73)(v61, v51);
    *(_WORD *)(v54 + 22) = 2048;
    uint64_t v77 = *(void *)&v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v54 + 32) = 2048;
    uint64_t v77 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v54 + 42) = 2048;
    uint64_t v77 = *(void *)&v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v66, "nextFinderPublishDate: powerMode, %{public}s, next publish date: %{public}s, remaining time: %f, available publish count: %ld, interval: %f.", (uint8_t *)v54, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v64(v72, v51);
    v64(v76, v51);
    uint64_t v40 = (uint64_t (*)(uint64_t, unsigned char *, uint64_t))v70;
    uint64_t v46 = v71;
  }
  else
  {

    uint64_t v55 = (void (*)(unsigned char *, uint64_t))v73;
    ((void (*)(unsigned char *, uint64_t))v73)(v48, v29);
    v55(v72, v29);
    v55(v76, v29);
    uint64_t v51 = v29;
  }
  return v40(v75, v46, v51);
}

uint64_t sub_1002A29A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v76 = a1;
  uint64_t v77 = a4;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v68 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v74 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v75 = (char *)&v68 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v70 = (char *)&v68 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v71 = (char *)&v68 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v68 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v72 = (char *)&v68 - v26;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v68 - v27;
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(a3 + 24);
  uint64_t v73 = a2;
  v29(a2, a3);
  unint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v30(v11, 1, v12) == 1)
  {
    uint64_t v9 = v11;
LABEL_5:
    uint64_t v35 = v12;
    sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_10163AC90);
    os_log_type_t v36 = v75;
    Date.init()();
    unint64_t v37 = v74;
    if (qword_101636820 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100010324(v38, (uint64_t)qword_10170D690);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v37, v36, v35);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      unint64_t v41 = 0xE900000000000069;
      uint64_t v42 = 0x4669577265776F70;
      uint64_t v43 = swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      uint64_t v79 = v73;
      *(_DWORD *)uint64_t v43 = 136446466;
      switch((char)v76)
      {
        case 1:
          uint64_t v42 = 0x6C65437265776F70;
          unint64_t v41 = 0xE90000000000006CLL;
          break;
        case 2:
          uint64_t v42 = 0x5779726574746162;
          uint64_t v61 = 6899305;
          goto LABEL_22;
        case 3:
          uint64_t v42 = 0x4379726574746162;
          uint64_t v61 = 7105637;
LABEL_22:
          unint64_t v41 = v61 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          break;
        default:
          break;
      }
      uint64_t v78 = sub_1008FA0F0(v42, v41, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2082;
      sub_1001C3888((unint64_t *)&qword_101638DA0);
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v78 = sub_1008FA0F0(v62, v63, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v37, v35);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "nextFinderPublishDate: powerMode: %{public}s, now: %{public}s (first publish).", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v37, v35);
    }

    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v77, v36, v35);
  }
  uint64_t v69 = v13;
  uint64_t v31 = v13 + 32;
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  uint64_t v33 = v11;
  uint64_t v34 = v31;
  v32(v28, v33, v12);
  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(v73, a3);
  if (v30(v9, 1, v12) == 1)
  {
    uint64_t v13 = v69;
    (*(void (**)(char *, uint64_t))(v69 + 8))(v28, v12);
    goto LABEL_5;
  }
  uint64_t v75 = (char *)v32;
  v32(v72, v9, v12);
  uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 72))(v76, v73, a3);
  if (v44 <= 1) {
    uint64_t v45 = 1;
  }
  else {
    uint64_t v45 = v44;
  }
  Date.addingTimeInterval(_:)();
  Date.timeIntervalSince(_:)();
  double v47 = v46;
  uint64_t v48 = v69;
  uint64_t v49 = *(void (**)(char *, uint64_t))(v69 + 8);
  v49(v24, v12);
  uint64_t v74 = (char *)v45;
  double v50 = v47 / (double)v45;
  uint64_t v51 = v71;
  Date.addingTimeInterval(_:)();
  uint64_t v52 = v12;
  if (qword_101636820 != -1) {
    swift_once();
  }
  uint64_t v53 = type metadata accessor for Logger();
  sub_100010324(v53, (uint64_t)qword_10170D690);
  uint64_t v54 = v70;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v70, v51, v52);
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v69 = v34;
    uint64_t v73 = (uint64_t)v28;
    unint64_t v57 = 0xE900000000000069;
    uint64_t v58 = 0x4669577265776F70;
    uint64_t v59 = swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    uint64_t v79 = v68;
    *(_DWORD *)uint64_t v59 = 136447234;
    switch((char)v76)
    {
      case 1:
        uint64_t v58 = 0x6C65437265776F70;
        unint64_t v57 = 0xE90000000000006CLL;
        break;
      case 2:
        uint64_t v58 = 0x5779726574746162;
        uint64_t v64 = 6899305;
        goto LABEL_27;
      case 3:
        uint64_t v58 = 0x4379726574746162;
        uint64_t v64 = 7105637;
LABEL_27:
        unint64_t v57 = v64 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
        break;
      default:
        break;
    }
    uint64_t v78 = sub_1008FA0F0(v58, v57, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v59 + 12) = 2082;
    sub_1001C3888((unint64_t *)&qword_101638DA0);
    uint64_t v65 = v70;
    uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v78 = sub_1008FA0F0(v66, v67, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v49(v65, v52);
    *(_WORD *)(v59 + 22) = 2048;
    uint64_t v78 = *(void *)&v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v59 + 32) = 2048;
    uint64_t v78 = (uint64_t)v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v59 + 42) = 2048;
    uint64_t v78 = *(void *)&v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "nextFinderPublishDate: powerMode, %{public}s, next publish date: %{public}s, remaining time: %f, available publish count: %ld, interval: %f.", (uint8_t *)v59, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v49(v72, v52);
    v49((char *)v73, v52);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v75)(v77, v71, v52);
  }
  else
  {

    v49(v54, v52);
    v49(v72, v52);
    v49(v28, v52);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v75)(v77, v51, v52);
  }
}

uint64_t sub_1002A3398@<X0>(uint64_t a1@<X8>)
{
  id v2 = [self standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_10001D608((uint64_t)v9, (uint64_t)v10, (uint64_t *)&unk_101644360);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date();
    int v6 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_101644360);
    uint64_t v8 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t sub_1002A3520(uint64_t a1, uint64_t a2)
{
  return sub_1002A1F04(a1, a2, (void (*)(uint64_t))sub_100E4CFC0);
}

uint64_t sub_1002A354C(uint64_t a1, uint64_t a2)
{
  return sub_1002A1F04(a1, a2, (void (*)(uint64_t))sub_1002A1124);
}

uint64_t sub_1002A3580(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1002A35A8(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

unint64_t sub_1002A3600()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_10001D608((uint64_t)v5, (uint64_t)v6, (uint64_t *)&unk_101644360);
  if (v7)
  {
    sub_10000588C(&qword_1016406F8);
    if (swift_dynamicCast()) {
      return v4;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_101644360);
  }
  return sub_10092D658((uint64_t)_swiftEmptyArrayStorage);
}

double sub_1002A372C(char a1)
{
  switch(a1)
  {
    case 1:
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      sub_1010ABBC8(v4);
      break;
    case 2:
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      sub_1010ABBD4(v4);
      break;
    case 3:
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      sub_1010ABBE0(v4);
      break;
    default:
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      sub_1010ABBBC(v4);
      break;
  }
  double v2 = v1;
  swift_bridgeObjectRelease();
  return v2;
}

void sub_1002A3970(char a1)
{
  unint64_t v2 = sub_1002A4148();
  double v3 = 0.0;
  double v4 = 0.0;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = sub_100723FF4(0x4669577265776F70, 0xE900000000000069);
    if (v6) {
      double v4 = (double)*(uint64_t *)(*(void *)(*(void *)(v2 + 56) + 8 * v5) + 16);
    }
  }
  double v7 = v4 / sub_1002A372C(0);
  if (*(void *)(v2 + 16))
  {
    uint64_t v8 = sub_100723FF4(0x6C65437265776F70, 0xE90000000000006CLL);
    if (v9) {
      double v3 = (double)*(uint64_t *)(*(void *)(*(void *)(v2 + 56) + 8 * v8) + 16);
    }
  }
  double v10 = v7 + v3 / sub_1002A372C(1);
  double v11 = 0.0;
  if (*(void *)(v2 + 16))
  {
    uint64_t v12 = sub_100723FF4(0x5779726574746162, 0xEB00000000694669);
    if (v13) {
      double v11 = (double)*(uint64_t *)(*(void *)(*(void *)(v2 + 56) + 8 * v12) + 16);
    }
  }
  double v14 = v10 + v11 / sub_1002A372C(2);
  if (*(void *)(v2 + 16) && (uint64_t v15 = sub_100723FF4(0x4379726574746162, 0xEB000000006C6C65), (v16 & 1) != 0))
  {
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(v17 + 16);
    swift_bridgeObjectRelease();
    double v19 = (double)v18;
  }
  else
  {
    swift_bridgeObjectRelease();
    double v19 = 0.0;
  }
  double v20 = 24.0 - (v14 + v19 / sub_1002A372C(3));
  double v21 = sub_1002A372C(a1) * v20;
  if ((~*(void *)&v21 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v21 >= 9.22337204e18) {
LABEL_20:
  }
    __break(1u);
}

double sub_1002A3BAC(char a1)
{
  switch(a1)
  {
    case 1:
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      sub_1010ABBC8(v4);
      break;
    case 2:
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      sub_1010ABBD4(v4);
      break;
    case 3:
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      sub_1010ABBE0(v4);
      break;
    default:
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      sub_1010ABBBC(v4);
      break;
  }
  double v2 = v1;
  swift_bridgeObjectRelease();
  return v2;
}

void sub_1002A3DF0(char a1)
{
  unint64_t v2 = sub_1002A3600();
  double v3 = 0.0;
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = sub_100723FF4(0x4669577265776F70, 0xE900000000000069);
    if (v5) {
      double v3 = (double)*(uint64_t *)(*(void *)(*(void *)(v2 + 56) + 8 * v4) + 16);
    }
  }
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010ABBBC(v29);
  double v7 = v6;
  swift_bridgeObjectRelease();
  double v8 = 0.0;
  double v9 = 0.0;
  double v10 = v3 / v7;
  if (*(void *)(v2 + 16))
  {
    uint64_t v11 = sub_100723FF4(0x6C65437265776F70, 0xE90000000000006CLL);
    if (v12) {
      double v9 = (double)*(uint64_t *)(*(void *)(*(void *)(v2 + 56) + 8 * v11) + 16);
    }
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010ABBC8(v29);
  double v14 = v13;
  swift_bridgeObjectRelease();
  double v15 = v10 + v9 / v14;
  if (*(void *)(v2 + 16))
  {
    uint64_t v16 = sub_100723FF4(0x5779726574746162, 0xEB00000000694669);
    if (v17) {
      double v8 = (double)*(uint64_t *)(*(void *)(*(void *)(v2 + 56) + 8 * v16) + 16);
    }
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010ABBD4(v29);
  double v19 = v18;
  swift_bridgeObjectRelease();
  double v20 = v15 + v8 / v19;
  if (*(void *)(v2 + 16) && (uint64_t v21 = sub_100723FF4(0x4379726574746162, 0xEB000000006C6C65), (v22 & 1) != 0))
  {
    uint64_t v23 = *(void *)(*(void *)(v2 + 56) + 8 * v21);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void *)(v23 + 16);
    swift_bridgeObjectRelease();
    double v25 = (double)v24;
  }
  else
  {
    swift_bridgeObjectRelease();
    double v25 = 0.0;
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010ABBE0(v29);
  double v27 = v26;
  swift_bridgeObjectRelease();
  double v28 = sub_1002A3BAC(a1) * (24.0 - (v20 + v25 / v27));
  if ((~*(void *)&v28 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v28 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v28 >= 9.22337204e18) {
LABEL_22:
  }
    __break(1u);
}

unint64_t sub_1002A412C()
{
  return sub_1002A4148();
}

unint64_t sub_1002A4148()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_10001D608((uint64_t)v5, (uint64_t)v6, (uint64_t *)&unk_101644360);
  if (v7)
  {
    sub_10000588C(&qword_1016406F8);
    if (swift_dynamicCast()) {
      return v4;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_101644360);
  }
  return sub_10092D658((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1002A426C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163A790);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A42D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002A433C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002A439C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

ValueMetadata *sub_1002A4404(char a1)
{
  switch(a1)
  {
    case 7:
      NSString v1 = &type metadata for AccessorySetMaxConnectionsPayload;
      sub_1002A5C44();
      break;
    case 9:
      NSString v1 = &type metadata for AccessoryKeyrollIndicationPayload;
      sub_1002A5A60();
      break;
    case 10:
      NSString v1 = &type metadata for AccessoryCommandResponsePayload;
      sub_1002A5BB0();
      break;
    case 11:
      NSString v1 = &type metadata for AccessoryMultistatusResponsePayload;
      sub_1002A5A0C();
      break;
    case 13:
      NSString v1 = &type metadata for AccessoryLatchSeparatedKeyResponsePayload;
      sub_1002A5AB4();
      break;
    case 14:
      NSString v1 = &type metadata for AccessoryStartAggressiveAdvertisingPayload;
      sub_1002A5B5C();
      break;
    case 17:
      NSString v1 = &type metadata for AccessoryTXPowerResponsePayload;
      sub_1002A5B08();
      break;
    default:
      NSString v1 = &type metadata for AccessoryGenericPayload;
      sub_10006258C();
      break;
  }
  return v1;
}

unint64_t sub_1002A4514(char a1)
{
  unint64_t result = 0x7453646E756F732ELL;
  switch(a1)
  {
    case 2:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0x726961706E752ELL;
      break;
    case 5:
      unint64_t result = 0xD000000000000018;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 8:
      unint64_t result = 0x4354557465732ELL;
      break;
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    case 10:
    case 18:
      unint64_t result = 0xD000000000000010;
      break;
    case 11:
      unint64_t result = 0xD000000000000014;
      break;
    case 12:
      unint64_t result = 0x6F43646E756F732ELL;
      break;
    case 13:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 14:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 15:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 16:
      unint64_t result = 0x585468637465662ELL;
      break;
    case 17:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002A4770(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 7;
  switch((a4 >> 59) & 6 | ((a2 & 0x2000000000000000) != 0))
  {
    case 1uLL:
      uint64_t result = 10;
      break;
    case 2uLL:
      uint64_t result = 14;
      break;
    case 3uLL:
      uint64_t result = 17;
      break;
    case 4uLL:
      uint64_t result = 9;
      break;
    case 5uLL:
      uint64_t result = 11;
      break;
    case 6uLL:
      uint64_t result = 13;
      break;
    case 7uLL:
      if (a4 == 0x3000000000000000 && a2 == 0x2000000000000000)
      {
        uint64_t v4 = a3 | a1;
        if (!(a3 | a1)) {
          goto LABEL_11;
        }
      }
      if (a1 == 1 && a2 == 0x2000000000000000 && !a3 && a4 == 0x3000000000000000)
      {
        uint64_t result = 1;
      }
      else if (a1 == 2 && a2 == 0x2000000000000000 && !a3 && a4 == 0x3000000000000000)
      {
        uint64_t result = 4;
      }
      else if (a1 == 3 && a2 == 0x2000000000000000 && !a3 && a4 == 0x3000000000000000)
      {
        uint64_t result = 12;
      }
      else if (a1 == 4 && a2 == 0x2000000000000000 && !a3 && a4 == 0x3000000000000000)
      {
        uint64_t result = 15;
      }
      else if (a1 == 5 && a2 == 0x2000000000000000 && !a3 && a4 == 0x3000000000000000)
      {
        uint64_t result = 16;
      }
      else if (a1 == 6 && a2 == 0x2000000000000000 && !a3 && a4 == 0x3000000000000000)
      {
        uint64_t result = 18;
      }
      else if (a1 == 7 && a2 == 0x2000000000000000 && !a3 && a4 == 0x3000000000000000)
      {
        uint64_t result = 2;
      }
      else if (a1 == 8 && a2 == 0x2000000000000000 && !a3 && a4 == 0x3000000000000000)
      {
        uint64_t result = 3;
      }
      else if (a1 == 9 && a2 == 0x2000000000000000 && !a3 && a4 == 0x3000000000000000)
      {
        uint64_t result = 5;
      }
      else if (a4 == 0x3000000000000000 && a3 == 0 && a2 == 0x2000000000000000 && a1 == 10)
      {
        uint64_t result = 6;
      }
      else
      {
        uint64_t result = 8;
      }
      break;
    default:
LABEL_11:
      uint64_t result = v4;
      break;
  }
  return result;
}

unint64_t sub_1002A49D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  switch((a4 >> 59) & 6 | ((a2 & 0x2000000000000000) != 0))
  {
    case 1uLL:
      unint64_t v9 = a2 & 0xDFFFFFFFFFFFFFFFLL;
      unint64_t v10 = a4 & 0xCFFFFFFFFFFFFFFFLL;
      a5[3] = (uint64_t)&type metadata for AccessoryCommandResponsePayload;
      a5[4] = sub_1002A5BB0();
      uint64_t v11 = (void *)swift_allocObject();
      *a5 = (uint64_t)v11;
      v11[2] = a1;
      v11[3] = v9;
      v11[4] = a3;
      v11[5] = v10;
      sub_1000361E0(a1, v9);
      uint64_t v12 = a3;
      unint64_t v13 = v10;
      goto LABEL_11;
    case 2uLL:
      a5[3] = (uint64_t)&type metadata for AccessoryStartAggressiveAdvertisingPayload;
      unint64_t result = sub_1002A5B5C();
      a5[4] = result;
      *(_DWORD *)a5 = a1;
      return result;
    case 3uLL:
      a5[3] = (uint64_t)&type metadata for AccessoryTXPowerResponsePayload;
      unint64_t result = sub_1002A5B08();
      goto LABEL_8;
    case 4uLL:
      unint64_t v14 = a2 & 0xDFFFFFFFFFFFFFFFLL;
      a5[3] = (uint64_t)&type metadata for AccessoryKeyrollIndicationPayload;
      unint64_t v15 = sub_1002A5A60();
      goto LABEL_10;
    case 5uLL:
      a5[3] = (uint64_t)&type metadata for AccessoryMultistatusResponsePayload;
      unint64_t result = sub_1002A5A0C();
      goto LABEL_8;
    case 6uLL:
      unint64_t v14 = a2 & 0xDFFFFFFFFFFFFFFFLL;
      a5[3] = (uint64_t)&type metadata for AccessoryLatchSeparatedKeyResponsePayload;
      unint64_t v15 = sub_1002A5AB4();
LABEL_10:
      a5[4] = v15;
      *a5 = a1;
      a5[1] = v14;
      uint64_t v12 = a1;
      unint64_t v13 = v14;
LABEL_11:
      unint64_t result = sub_1000361E0(v12, v13);
      break;
    case 7uLL:
      a5[3] = (uint64_t)&type metadata for AccessoryGenericPayload;
      unint64_t result = sub_10006258C();
      a5[4] = result;
      break;
    default:
      a5[3] = (uint64_t)&type metadata for AccessorySetMaxConnectionsPayload;
      unint64_t result = sub_1002A5C44();
LABEL_8:
      a5[4] = result;
      *(unsigned char *)a5 = a1;
      break;
  }
  return result;
}

uint64_t sub_1002A4D08(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v28 = type metadata accessor for Endianness();
  uint64_t v10 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  unint64_t v27 = a5;
  unsigned __int8 v13 = sub_1002A4770(a2, a3, a4, a5);
  LOWORD(v29) = word_101353126[v13];
  static Endianness.current.getter();
  sub_100179818();
  FixedWidthInteger.convert(to:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v28);
  LOWORD(v29) = v33;
  sub_1000BD078((uint64_t)v37, v38);
  uint64_t v14 = v39;
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  if (!v14)
  {
    switch(v13)
    {
      case 7u:
        sub_1002A49D4(v24, v25, v26, v27, &v33);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_21;
        }
        LOBYTE(v33) = v29;
        sub_1000BD078((uint64_t)v37, v38);
        sub_1002A59B8();
        goto LABEL_5;
      case 9u:
        sub_1002A49D4(v24, v25, v26, v27, &v33);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_21;
        }
        uint64_t v15 = v29;
        unint64_t v16 = v30;
        uint64_t v33 = v29;
        unint64_t v34 = v30;
        sub_1000BD078((uint64_t)v37, v38);
        sub_1002A5964();
        goto LABEL_16;
      case 0xAu:
        sub_1002A49D4(v24, v25, v26, v27, &v33);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_21;
        }
        uint64_t v17 = v29;
        unint64_t v18 = v30;
        uint64_t v19 = v31;
        unint64_t v20 = v32;
        uint64_t v33 = v29;
        unint64_t v34 = v30;
        uint64_t v35 = v31;
        unint64_t v36 = v32;
        sub_1000BD078((uint64_t)v37, v38);
        sub_1002A5910();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_10001CFB8(v17, v18);
        sub_10001CFB8(v19, v20);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v37);
      case 0xBu:
        sub_1002A49D4(v24, v25, v26, v27, &v33);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_21;
        }
        LOBYTE(v33) = v29;
        sub_1000BD078((uint64_t)v37, v38);
        sub_1002A58BC();
        goto LABEL_5;
      case 0xDu:
        sub_1002A49D4(v24, v25, v26, v27, &v33);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_21;
        }
        uint64_t v15 = v29;
        unint64_t v16 = v30;
        uint64_t v33 = v29;
        unint64_t v34 = v30;
        sub_1000BD078((uint64_t)v37, v38);
        sub_1002A5868();
LABEL_16:
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_10001CFB8(v15, v16);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v37);
      case 0xEu:
        sub_1002A49D4(v24, v25, v26, v27, &v33);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_21;
        }
        LODWORD(v33) = v29;
        sub_1000BD078((uint64_t)v37, v38);
        sub_1002A5814();
        goto LABEL_5;
      case 0x11u:
        sub_1002A49D4(v24, v25, v26, v27, &v33);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_21;
        }
        LOBYTE(v33) = v29;
        sub_1000BD078((uint64_t)v37, v38);
        sub_1002A57C0();
        goto LABEL_5;
      default:
        sub_1002A49D4(v24, v25, v26, v27, &v33);
        sub_10000588C(&qword_101639B68);
        if (swift_dynamicCast())
        {
          sub_1000BD078((uint64_t)v37, v38);
          sub_1002A576C();
LABEL_5:
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        }
        else
        {
LABEL_21:
          sub_1002A5718();
          swift_allocError();
          *uint64_t v21 = 0;
          swift_willThrow();
        }
        break;
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v37);
}

__int16 *sub_1002A5300@<X0>(void *a1@<X0>, __int16 **a2@<X8>)
{
  unint64_t result = sub_1002A63DC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1002A5330(void *a1)
{
  return sub_1002A4D08(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002A5350(__int16 a1)
{
  if ((unsigned __int16)(a1 - 512) > 0x13u) {
    return 19;
  }
  else {
    return byte_10135314C[(__int16)(a1 - 512)];
  }
}

uint64_t destroy for AccessoryConfigCommand(uint64_t a1)
{
  return sub_1002A53B4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), sub_10001CFB8);
}

uint64_t sub_1002A53B4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, unint64_t))
{
  int v6 = (a4 >> 59) & 6 | ((a2 & 0x2000000000000000) != 0);
  if (v6 == 6 || v6 == 4)
  {
    unint64_t v9 = a2 & 0xDFFFFFFFFFFFFFFFLL;
    return a5(result, v9);
  }
  else if (v6 == 1)
  {
    unint64_t v8 = a4 & 0xCFFFFFFFFFFFFFFFLL;
    a5(result, a2 & 0xDFFFFFFFFFFFFFFFLL);
    return a5(a3, v8);
  }
  return result;
}

uint64_t *initializeWithCopy for AccessoryConfigCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  sub_1002A53B4(*a2, v4, v5, v6, sub_1000361E0);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for AccessoryConfigCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  sub_1002A53B4(*a2, v4, v5, v6, sub_1000361E0);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  unint64_t v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_1002A53B4(v7, v8, v9, v10, sub_10001CFB8);
  return a1;
}

__n128 initializeWithTake for FeatureSupportMatrixProductType(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for AccessoryConfigCommand(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v6 = a1[3];
  long long v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  sub_1002A53B4(v3, v5, v4, v6, sub_10001CFB8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryConfigCommand(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 9 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 9);
  }
  unsigned int v3 = ((((*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 2) >> 1) & 0xFFFFFFF7 | (8 * ((*(void *)(a1 + 8) & 0x1000000000000000) != 0))) ^ 0xF;
  if (v3 >= 8) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessoryConfigCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 8)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 9;
    *(void *)(result + 8) = 0;
    if (a3 >= 9) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 9) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)((-2 * (_BYTE)a2) & 2 | 1u) << 60;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = ((unint64_t)((-2 * a2) & 0x1E | 1) << 58) & 0x3000000000000000;
    }
  }
  return result;
}

uint64_t sub_1002A5674(uint64_t a1)
{
  unsigned int v1 = (*(void *)(a1 + 24) >> 59) & 6 | ((*(void *)(a1 + 8) & 0x2000000000000000) != 0);
  if (v1 == 7) {
    return (*(_DWORD *)a1 + 7);
  }
  else {
    return v1;
  }
}

uint64_t sub_1002A56A0(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 8) &= ~0x2000000000000000uLL;
  *(void *)(result + 24) = v1;
  return result;
}

void *sub_1002A56BC(void *result, unsigned int a2)
{
  if (a2 < 7)
  {
    unint64_t v2 = result[3] & 0xCFFFFFFFFFFFFFFFLL | ((((unint64_t)a2 >> 1) & 3) << 60);
    result[1] = result[1] & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
    result[3] = v2;
  }
  else
  {
    *__n128 result = a2 - 7;
    *(_OWORD *)(result + 1) = xmmword_101352FE0;
    result[3] = 0x3000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryConfigCommand()
{
  return &type metadata for AccessoryConfigCommand;
}

unint64_t sub_1002A5718()
{
  unint64_t result = qword_101640700;
  if (!qword_101640700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640700);
  }
  return result;
}

unint64_t sub_1002A576C()
{
  unint64_t result = qword_101640708;
  if (!qword_101640708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640708);
  }
  return result;
}

unint64_t sub_1002A57C0()
{
  unint64_t result = qword_101640710;
  if (!qword_101640710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640710);
  }
  return result;
}

unint64_t sub_1002A5814()
{
  unint64_t result = qword_101640718;
  if (!qword_101640718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640718);
  }
  return result;
}

unint64_t sub_1002A5868()
{
  unint64_t result = qword_101640720;
  if (!qword_101640720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640720);
  }
  return result;
}

unint64_t sub_1002A58BC()
{
  unint64_t result = qword_101640728;
  if (!qword_101640728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640728);
  }
  return result;
}

unint64_t sub_1002A5910()
{
  unint64_t result = qword_101640730;
  if (!qword_101640730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640730);
  }
  return result;
}

unint64_t sub_1002A5964()
{
  unint64_t result = qword_101640738;
  if (!qword_101640738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640738);
  }
  return result;
}

unint64_t sub_1002A59B8()
{
  unint64_t result = qword_101640740;
  if (!qword_101640740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640740);
  }
  return result;
}

unint64_t sub_1002A5A0C()
{
  unint64_t result = qword_101640748;
  if (!qword_101640748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640748);
  }
  return result;
}

unint64_t sub_1002A5A60()
{
  unint64_t result = qword_101640750;
  if (!qword_101640750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640750);
  }
  return result;
}

unint64_t sub_1002A5AB4()
{
  unint64_t result = qword_101640758;
  if (!qword_101640758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640758);
  }
  return result;
}

unint64_t sub_1002A5B08()
{
  unint64_t result = qword_101640760;
  if (!qword_101640760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640760);
  }
  return result;
}

unint64_t sub_1002A5B5C()
{
  unint64_t result = qword_101640768;
  if (!qword_101640768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640768);
  }
  return result;
}

unint64_t sub_1002A5BB0()
{
  unint64_t result = qword_101640770;
  if (!qword_101640770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640770);
  }
  return result;
}

uint64_t sub_1002A5C04()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_1002A5C44()
{
  unint64_t result = qword_101640778;
  if (!qword_101640778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640778);
  }
  return result;
}

uint64_t sub_1002A5C98(char a1, uint64_t a2)
{
  sub_10001D010(a2, (uint64_t)v10);
  uint64_t v4 = sub_1002A4404(a1);
  sub_10001CD44(v10, v10[3]);
  uint64_t DynamicType = swift_getDynamicType();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v10);
  if (v4 != (ValueMetadata *)DynamicType)
  {
    __break(1u);
    JUMPOUT(0x1002A6390);
  }
  switch(a1)
  {
    case 1:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 1;
    case 2:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 7;
    case 3:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 8;
    case 4:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 2;
    case 5:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 9;
    case 6:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 10;
    case 7:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
      goto LABEL_38;
    case 8:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 11;
    case 9:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast()) {
        goto LABEL_30;
      }
      goto LABEL_41;
    case 10:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast()) {
        goto LABEL_30;
      }
      goto LABEL_41;
    case 11:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast()) {
        goto LABEL_38;
      }
      goto LABEL_41;
    case 12:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      return 3;
    case 13:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
LABEL_30:
      uint64_t DynamicType = v8;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      break;
    case 14:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
      uint64_t DynamicType = v8;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      break;
    case 15:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t DynamicType = 4;
      break;
    case 16:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t DynamicType = 5;
      break;
    case 17:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
LABEL_38:
      uint64_t DynamicType = v8;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      break;
    case 18:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_41;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t DynamicType = 6;
      break;
    default:
      sub_10001D010(a2, (uint64_t)v9);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast())
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
        uint64_t DynamicType = 0;
      }
      else
      {
LABEL_41:
        sub_1002A5718();
        swift_allocError();
        *unint64_t v6 = 0;
        swift_willThrow();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      }
      break;
  }
  return DynamicType;
}

__int16 *sub_1002A63DC(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v16[-4] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  long long v7 = (__int16 *)sub_1000BD078((uint64_t)v18, v19);
  sub_100179818();
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)();
  if (v1) {
    goto LABEL_5;
  }
  __int16 v20 = v16[0];
  static Endianness.current.getter();
  long long v7 = &v20;
  FixedWidthInteger.convert(to:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  char v8 = sub_1002A5350(v17[0]);
  if (v8 == 19)
  {
    sub_1002A5718();
    swift_allocError();
    *uint64_t v9 = 1;
    swift_willThrow();
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v18);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    return v7;
  }
  char v10 = v8;
  uint64_t v11 = sub_1002A4404(v8);
  uint64_t v13 = v12;
  sub_10001D010((uint64_t)a1, (uint64_t)v16);
  v17[3] = (uint64_t)v11;
  v17[4] = v13;
  sub_10001D958(v17);
  dispatch thunk of BinaryDecodable.init(from:)();
  sub_10001D010((uint64_t)v17, (uint64_t)v16);
  long long v7 = (__int16 *)sub_1002A5C98(v10, (uint64_t)v16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v7;
}

unsigned char *storeEnumTagSinglePayload for AccessoryConfigCommand.AccessoryConfigCommandError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A6730);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryConfigCommand.AccessoryConfigCommandError()
{
  return &type metadata for AccessoryConfigCommand.AccessoryConfigCommandError;
}

unint64_t sub_1002A676C()
{
  unint64_t result = qword_101640780;
  if (!qword_101640780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640780);
  }
  return result;
}

void sub_1002A67C0(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v76 = a2;
  uint64_t v3 = type metadata accessor for PeerCommunicationIdentifier();
  __chkstk_darwin(v3);
  uint64_t v78 = (uint64_t)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  long long v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (CKRecord.recordType.getter() == 0x65655072656E774FLL && v12 == 0xEE00747375725472)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      sub_1002A8A5C();
      swift_allocError();
      *uint64_t v23 = 0;
      goto LABEL_17;
    }
  }
  id v14 = [a1 recordID];
  id v15 = [v14 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v75(v11, v7, v8);
    id v17 = [a1 encryptedValues];
    NSString v18 = String._bridgeToObjectiveC()();
    uint64_t v19 = [v17 objectForKeyedSubscript:v18];

    if (v19)
    {
      uint64_t v79 = v19;
      uint64_t v20 = sub_10000588C((uint64_t *)&unk_10163AE50);
      if (swift_dynamicCast())
      {
        if (!v81)
        {
          unint64_t v74 = v20;
          int v73 = 0;
LABEL_20:
          NSString v24 = String._bridgeToObjectiveC()();
          id v25 = [v17 objectForKeyedSubscript:v24];

          if (v25)
          {
            unint64_t v81 = (unint64_t)v25;
            if (swift_dynamicCast())
            {
              uint64_t v26 = (uint64_t)v79;
              unint64_t v72 = v80;
              type metadata accessor for PropertyListDecoder();
              swift_allocObject();
              PropertyListDecoder.init()();
              sub_1002AA42C((unint64_t *)&unk_101661A40, (void (*)(uint64_t))type metadata accessor for PeerCommunicationIdentifier);
              unint64_t v27 = v77;
              uint64_t v71 = v26;
              unint64_t v28 = v72;
              dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
              if (v27)
              {
                swift_release();
                swift_unknownObjectRelease();
                sub_10001CFB8(v71, v28);
                goto LABEL_14;
              }
              swift_release();
              NSString v29 = String._bridgeToObjectiveC()();
              id v30 = [v17 objectForKeyedSubscript:v29];

              uint64_t v31 = v78;
              if (v30 && (unint64_t v81 = (unint64_t)v30, (swift_dynamicCast() & 1) != 0))
              {
                uint64_t v70 = (uint64_t)v79;
                unint64_t v77 = v80;
                NSString v32 = String._bridgeToObjectiveC()();
                id v33 = [v17 objectForKeyedSubscript:v32];

                if (v33)
                {
                  unint64_t v81 = (unint64_t)v33;
                  char v34 = swift_dynamicCast();
                  uint64_t v31 = v78;
                  if (v34)
                  {
                    uint64_t v36 = (uint64_t)v79;
                    unint64_t v35 = v80;
                    uint64_t v37 = v71;
                    switch(v80 >> 62)
                    {
                      case 1uLL:
                        if (__OFSUB__(HIDWORD(v79), v79))
                        {
                          __break(1u);
LABEL_50:
                          __break(1u);
                          JUMPOUT(0x1002A719CLL);
                        }
                        uint64_t v38 = HIDWORD(v79) - (int)v79;
LABEL_38:
                        uint64_t v68 = (uint64_t)v79;
                        unint64_t v69 = v80;
                        sub_1000361E0((uint64_t)v79, v80);
                        uint64_t v36 = v68;
                        unint64_t v35 = v69;
LABEL_39:
                        if (v38 != 32)
                        {
LABEL_44:
                          uint64_t v58 = v36;
                          unint64_t v59 = v35;
                          sub_10001CFB8(v36, v35);
                          sub_10001CFB8(v58, v59);
                          swift_bridgeObjectRelease();
                          uint64_t v31 = v78;
                          goto LABEL_45;
                        }
                        uint64_t v68 = v36;
                        unint64_t v69 = v35;
                        NSString v43 = String._bridgeToObjectiveC()();
                        uint64_t v44 = [v17 objectForKeyedSubscript:v43];

                        if (v44)
                        {
                          uint64_t v79 = v44;
                          if (swift_dynamicCast())
                          {
                            unint64_t v74 = v81;
                            if (v81 < 3)
                            {
                              id v46 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
                              [a1 encodeSystemFieldsWithCoder:v46];
                              [v46 finishEncoding];
                              id v47 = [v46 encodedData];
                              uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                              uint64_t v66 = v49;
                              uint64_t v67 = v48;

                              sub_10001CFB8(v71, v72);
                              uint64_t v50 = v68;
                              unint64_t v51 = v69;
                              sub_10001CFB8(v68, v69);
                              swift_unknownObjectRelease();
                              uint64_t v52 = v76;
                              uint64_t v53 = v66;
                              uint64_t *v76 = v67;
                              v52[1] = v53;
                              uint64_t v54 = (int *)type metadata accessor for OwnerPeerTrust();
                              v75((char *)v52 + v54[5], v11, v8);
                              *((unsigned char *)v52 + v54[6]) = v73;
                              sub_1002A8790(v78, (uint64_t)v52 + v54[7]);
                              uint64_t v55 = (uint64_t *)((char *)v52 + v54[8]);
                              unint64_t v56 = v77;
                              *uint64_t v55 = v70;
                              v55[1] = v56;
                              unint64_t v57 = (uint64_t *)((char *)v52 + v54[9]);
                              *unint64_t v57 = v50;
                              v57[1] = v51;
                              *((unsigned char *)v52 + v54[10]) = v74;
                              return;
                            }
                          }
                        }
                        swift_bridgeObjectRelease();
                        uint64_t v31 = v78;
                        uint64_t v61 = v71;
                        sub_1002A8A5C();
                        swift_allocError();
                        *uint64_t v62 = 6;
                        swift_willThrow();
                        sub_10001CFB8(v61, v72);
                        uint64_t v64 = v68;
                        unint64_t v63 = v69;
                        sub_10001CFB8(v68, v69);
                        swift_unknownObjectRelease();

                        sub_10001CFB8(v64, v63);
                        break;
                      case 2uLL:
                        uint64_t v42 = v79[2];
                        uint64_t v41 = v79[3];
                        uint64_t v38 = v41 - v42;
                        if (!__OFSUB__(v41, v42)) {
                          goto LABEL_38;
                        }
                        goto LABEL_50;
                      case 3uLL:
                        goto LABEL_44;
                      default:
                        uint64_t v38 = BYTE6(v80);
                        goto LABEL_39;
                    }
                    goto LABEL_47;
                  }
                  swift_bridgeObjectRelease();
                }
                else
                {
                  swift_bridgeObjectRelease();
                  uint64_t v31 = v78;
                }
                uint64_t v37 = v71;
LABEL_45:
                sub_1002A8A5C();
                swift_allocError();
                *uint64_t v60 = 5;
                swift_willThrow();
                uint64_t v40 = v37;
              }
              else
              {
                sub_1002A8A5C();
                swift_allocError();
                *uint64_t v39 = 4;
                swift_willThrow();
                uint64_t v40 = v71;
              }
              sub_10001CFB8(v40, v72);
              swift_unknownObjectRelease();

LABEL_47:
              sub_1002A8900(v31, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
              goto LABEL_15;
            }
          }
          sub_1002A8A5C();
          swift_allocError();
          char v22 = 3;
LABEL_13:
          *uint64_t v21 = v22;
          swift_willThrow();
          swift_unknownObjectRelease();
LABEL_14:

LABEL_15:
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
          return;
        }
        if (v81 == 1)
        {
          unint64_t v74 = v20;
          int v73 = 1;
          goto LABEL_20;
        }
      }
    }
    sub_1002A8A5C();
    swift_allocError();
    char v22 = 2;
    goto LABEL_13;
  }
  sub_100270E18((uint64_t)v7);
  sub_1002A8A5C();
  swift_allocError();
  *unint64_t v16 = 1;
LABEL_17:
  swift_willThrow();
}

char *sub_1002A71AC()
{
  if (qword_101636948 != -1) {
    swift_once();
  }
  return &byte_10170DA88;
}

void sub_1002A71F8()
{
  NSString v0 = String._bridgeToObjectiveC()();
  uint64_t v1 = (void *)IDSCopyIDForEmailAddress();

  if (v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;

    byte_10170DA88 = 0;
    qword_10170DA90 = v2;
    qword_10170DA98 = v4;
  }
  else
  {
    __break(1u);
  }
}

void sub_1002A727C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  unint64_t v3 = v1[1];
  sub_1000361E0(v2, v3);
  Data.hash(into:)();
  sub_10001CFB8(v2, v3);
  uint64_t v4 = (int *)type metadata accessor for OwnerPeerTrust();
  type metadata accessor for UUID();
  sub_1002AA42C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*((unsigned __int8 *)v1 + v4[6]));
  sub_1009C7C44();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t *)((char *)v1 + v4[9]);
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  sub_1000361E0(*v5, v7);
  Data.hash(into:)();
  sub_10001CFB8(v6, v7);
  Hasher._combine(_:)(*((unsigned __int8 *)v1 + v4[10]));
}

unint64_t sub_1002A73D4(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 2:
      unint64_t result = 1701869940;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0x6574617473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002A74A8()
{
  uint64_t v0 = type metadata accessor for UUID();
  sub_10001E384(v0, qword_10170DAA0);
  sub_100010324(v0, (uint64_t)qword_10170DAA0);
  return UUID.init(uuid:)();
}

unint64_t sub_1002A7520()
{
  return sub_1002A73D4(*v0);
}

uint64_t sub_1002A7528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002AA11C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1002A7550(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1002A755C(uint64_t a1)
{
  unint64_t v2 = sub_1002A86E8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A7598(uint64_t a1)
{
  unint64_t v2 = sub_1002A86E8();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1002A75D4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002A7618()
{
  return Hasher._finalize()();
}

uint64_t *sub_1002A7658@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

uint64_t sub_1002A7670()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1002A76D0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1002A7720()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170DAB8);
  sub_100010324(v0, (uint64_t)qword_10170DAB8);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1002A7844(id *a1)
{
  id v2 = *a1;
  [*a1 encryptedValues];
  swift_getObjectType();
  static os_log_type_t.debug.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101342130;
  id v4 = v2;
  id v5 = [v4 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_10000B4CC();
  *(void *)(v3 + 32) = v6;
  *(void *)(v3 + 40) = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for OwnerPeerTrust();
  CKRecordKeyValueSetting.subscript.setter();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for PeerCommunicationIdentifier();
  sub_1002AA42C(&qword_1016407A8, (void (*)(uint64_t))type metadata accessor for PeerCommunicationIdentifier);
  dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  CKRecordKeyValueSetting.subscript.setter();
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();
  sub_1000361E0(*(void *)(v1 + *(int *)(v9 + 36)), *(void *)(v1 + *(int *)(v9 + 36) + 8));
  CKRecordKeyValueSetting.subscript.setter();
  CKRecordKeyValueSetting.subscript.setter();

  return swift_unknownObjectRelease();
}

uint64_t sub_1002A7BB0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016407E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1002A86E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v13 = *v3;
  char v12 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for OwnerPeerTrust();
    LOBYTE(v13) = 1;
    type metadata accessor for UUID();
    sub_1002AA42C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = *((unsigned char *)v3 + v9[6]);
    char v12 = 2;
    sub_1002A8960();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 3;
    type metadata accessor for PeerCommunicationIdentifier();
    sub_1002AA42C(&qword_1016407A8, (void (*)(uint64_t))type metadata accessor for PeerCommunicationIdentifier);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v13 = *(_OWORD *)((char *)v3 + v9[9]);
    char v12 = 5;
    sub_1002A89B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = *((unsigned char *)v3 + v9[10]);
    char v12 = 6;
    sub_1002A8A08();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002A7EF8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v24 = type metadata accessor for PeerCommunicationIdentifier();
  __chkstk_darwin(v24);
  id v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000588C(&qword_1016407B0);
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for OwnerPeerTrust();
  __chkstk_darwin(v10);
  char v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  NSString v29 = a1;
  sub_10001CD44(a1, v13);
  sub_1002A86E8();
  unint64_t v28 = v9;
  id v14 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
  }
  id v30 = v4;
  uint64_t v15 = v26;
  char v32 = 0;
  sub_100037AA0();
  uint64_t v16 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)char v12 = v31;
  LOBYTE(v31) = 1;
  sub_1002AA42C((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v12[v10[5]], v7, v5);
  char v32 = 2;
  sub_1002A873C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v12[v10[6]] = v31;
  LOBYTE(v31) = 3;
  sub_1002AA42C((unint64_t *)&unk_101661A40, (void (*)(uint64_t))type metadata accessor for PeerCommunicationIdentifier);
  uint64_t v17 = (uint64_t)v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  LODWORD(v24) = 1;
  uint64_t v18 = v25;
  sub_1002A8790(v17, (uint64_t)&v12[v10[7]]);
  LOBYTE(v31) = 4;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v20 = (uint64_t *)&v12[v10[8]];
  *uint64_t v20 = v19;
  v20[1] = v21;
  char v32 = 5;
  sub_1002A87F4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)&v12[v10[9]] = v31;
  char v32 = 6;
  sub_1002A8848();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v28, v16);
  v12[v10[10]] = v31;
  sub_1002A889C((uint64_t)v12, v23);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
  return sub_1002A8900((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
}

uint64_t sub_1002A8590@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002A7EF8(a1, a2);
}

uint64_t sub_1002A85A8(void *a1)
{
  return sub_1002A7BB0(a1);
}

uint64_t sub_1002A85C0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1002AA42C(&qword_101640790, (void (*)(uint64_t))type metadata accessor for OwnerPeerTrust);
  uint64_t result = sub_1002AA42C(&qword_101640798, (void (*)(uint64_t))type metadata accessor for OwnerPeerTrust);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for OwnerPeerTrust()
{
  uint64_t result = qword_101640870;
  if (!qword_101640870) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002A8690(uint64_t a1)
{
  uint64_t result = sub_1002AA42C(&qword_1016407A0, (void (*)(uint64_t))type metadata accessor for OwnerPeerTrust);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002A86E8()
{
  unint64_t result = qword_1016407B8;
  if (!qword_1016407B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016407B8);
  }
  return result;
}

unint64_t sub_1002A873C()
{
  unint64_t result = qword_1016407C0;
  if (!qword_1016407C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016407C0);
  }
  return result;
}

uint64_t sub_1002A8790(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PeerCommunicationIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1002A87F4()
{
  unint64_t result = qword_1016407D0;
  if (!qword_1016407D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016407D0);
  }
  return result;
}

unint64_t sub_1002A8848()
{
  unint64_t result = qword_1016407D8;
  if (!qword_1016407D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016407D8);
  }
  return result;
}

uint64_t sub_1002A889C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnerPeerTrust();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A8900(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1002A8960()
{
  unint64_t result = qword_1016407E8;
  if (!qword_1016407E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016407E8);
  }
  return result;
}

unint64_t sub_1002A89B4()
{
  unint64_t result = qword_1016407F0;
  if (!qword_1016407F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016407F0);
  }
  return result;
}

unint64_t sub_1002A8A08()
{
  unint64_t result = qword_1016407F8;
  if (!qword_1016407F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016407F8);
  }
  return result;
}

unint64_t sub_1002A8A5C()
{
  unint64_t result = qword_101640808;
  if (!qword_101640808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640808);
  }
  return result;
}

BOOL sub_1002A8AB0(uint64_t a1, uint64_t a2)
{
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)return 0; {
  uint64_t v4 = (int *)type metadata accessor for OwnerPeerTrust();
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0
    || *(unsigned __int8 *)(a1 + v4[6]) != *(unsigned __int8 *)(a2 + v4[6])
    || (sub_1009CA754(a1 + v4[7], a2 + v4[7]) & 1) == 0)
  {
    return 0;
  }
  uint64_t v5 = v4[8];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v10 & 1) != 0))
  {
    uint64_t v12 = v4[9];
    uint64_t v13 = *(void *)(a1 + v12);
    unint64_t v14 = *(void *)(a1 + v12 + 8);
    uint64_t v15 = (uint64_t *)(a2 + v12);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    sub_1000361E0(v13, v14);
    sub_1000361E0(v16, v17);
    char v18 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v13, v14, v16, v17);
    sub_10001CFB8(v16, v17);
    sub_10001CFB8(v13, v14);
    if (v18) {
      return *(unsigned __int8 *)(a1 + v4[10]) == *(unsigned __int8 *)(a2 + v4[10]);
    }
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OwnerPeerTrust.ConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *BOOL result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A8CC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *BOOL result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnerPeerTrust.ConversionError()
{
  return &type metadata for OwnerPeerTrust.ConversionError;
}

unsigned char *storeEnumTagSinglePayload for OwnerPeerTrust.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *BOOL result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A8DC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *BOOL result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnerPeerTrust.State()
{
  return &type metadata for OwnerPeerTrust.State;
}

unsigned char *storeEnumTagSinglePayload for OwnerPeerTrust.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *BOOL result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A8ECCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *BOOL result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnerPeerTrust.CodingKeys()
{
  return &type metadata for OwnerPeerTrust.CodingKeys;
}

uint64_t *sub_1002A8F04(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    char v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for PeerCommunicationIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v18 = *((void *)v16 + 1);
        *(void *)uint64_t v15 = *(void *)v16;
        *((void *)v15 + 1) = v18;
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 1u:
        v13(v15, v16, v12);
        goto LABEL_11;
      case 2u:
        *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
        *((void *)v15 + 2) = *((void *)v16 + 2);
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 3u:
        *uint64_t v15 = *v16;
        uint64_t v20 = *((void *)v16 + 2);
        *((void *)v15 + 1) = *((void *)v16 + 1);
        *((void *)v15 + 2) = v20;
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 4u:
        *uint64_t v15 = *v16;
        uint64_t v21 = *((void *)v16 + 2);
        *((void *)v15 + 1) = *((void *)v16 + 1);
        *((void *)v15 + 2) = v21;
        uint64_t v22 = *((void *)v16 + 3);
        uint64_t v23 = *((void *)v16 + 4);
        *((void *)v15 + 3) = v22;
        *((void *)v15 + 4) = v23;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 5u:
        uint64_t v24 = *((void *)v16 + 1);
        *(void *)uint64_t v15 = *(void *)v16;
        *((void *)v15 + 1) = v24;
        v15[16] = v16[16];
        uint64_t v25 = *((void *)v16 + 4);
        *((void *)v15 + 3) = *((void *)v16 + 3);
        *((void *)v15 + 4) = v25;
        uint64_t v26 = *((void *)v16 + 5);
        uint64_t v27 = *((void *)v16 + 6);
        *((void *)v15 + 5) = v26;
        *((void *)v15 + 6) = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_11:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
        break;
    }
    uint64_t v28 = a3[8];
    uint64_t v29 = a3[9];
    id v30 = (uint64_t *)((char *)a1 + v28);
    long long v31 = (uint64_t *)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *id v30 = *v31;
    v30[1] = v32;
    id v33 = (uint64_t *)((char *)a1 + v29);
    uint64_t v34 = *(uint64_t *)((char *)a2 + v29);
    unint64_t v35 = *(uint64_t *)((char *)a2 + v29 + 8);
    swift_bridgeObjectRetain();
    sub_1000361E0(v34, v35);
    *id v33 = v34;
    v33[1] = v35;
    *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  }
  return a1;
}

uint64_t sub_1002A91D8(uint64_t a1, int *a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID();
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + a2[7];
  type metadata accessor for PeerCommunicationIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 2u:
    case 3u:
      goto LABEL_5;
    case 1u:
      v6(v7, v5);
      break;
    case 4u:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 5u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  unint64_t v8 = (uint64_t *)(a1 + a2[9]);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];

  return sub_10001CFB8(v9, v10);
}

uint64_t *sub_1002A9338(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  unint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for PeerCommunicationIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v17 = *((void *)v15 + 1);
      *(void *)uint64_t v14 = *(void *)v15;
      *((void *)v14 + 1) = v17;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 1u:
      v12(v14, v15, v11);
      goto LABEL_9;
    case 2u:
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((void *)v14 + 2) = *((void *)v15 + 2);
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 3u:
      *uint64_t v14 = *v15;
      uint64_t v18 = *((void *)v15 + 2);
      *((void *)v14 + 1) = *((void *)v15 + 1);
      *((void *)v14 + 2) = v18;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 4u:
      *uint64_t v14 = *v15;
      uint64_t v19 = *((void *)v15 + 2);
      *((void *)v14 + 1) = *((void *)v15 + 1);
      *((void *)v14 + 2) = v19;
      uint64_t v20 = *((void *)v15 + 3);
      uint64_t v21 = *((void *)v15 + 4);
      *((void *)v14 + 3) = v20;
      *((void *)v14 + 4) = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 5u:
      uint64_t v22 = *((void *)v15 + 1);
      *(void *)uint64_t v14 = *(void *)v15;
      *((void *)v14 + 1) = v22;
      unsigned char v14[16] = v15[16];
      uint64_t v23 = *((void *)v15 + 4);
      *((void *)v14 + 3) = *((void *)v15 + 3);
      *((void *)v14 + 4) = v23;
      uint64_t v24 = *((void *)v15 + 5);
      uint64_t v25 = *((void *)v15 + 6);
      *((void *)v14 + 5) = v24;
      *((void *)v14 + 6) = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
      break;
  }
  uint64_t v26 = a3[8];
  uint64_t v27 = a3[9];
  uint64_t v28 = (uint64_t *)((char *)a1 + v26);
  uint64_t v29 = (uint64_t *)((char *)a2 + v26);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  long long v31 = (uint64_t *)((char *)a1 + v27);
  uint64_t v32 = *(uint64_t *)((char *)a2 + v27);
  unint64_t v33 = *(uint64_t *)((char *)a2 + v27 + 8);
  swift_bridgeObjectRetain();
  sub_1000361E0(v32, v33);
  *long long v31 = v32;
  v31[1] = v33;
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

uint64_t *sub_1002A95BC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  if (a1 != a2)
  {
    uint64_t v15 = a3[7];
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    sub_1002A8900((uint64_t)a1 + v15, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    uint64_t v18 = type metadata accessor for PeerCommunicationIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *uint64_t v16 = *v17;
        v16[1] = v17[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v16, v17, v13);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        *uint64_t v16 = *v17;
        v16[1] = v17[1];
        v16[2] = v17[2];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
        v16[1] = v17[1];
        v16[2] = v17[2];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
        v16[1] = v17[1];
        v16[2] = v17[2];
        v16[3] = v17[3];
        v16[4] = v17[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        *uint64_t v16 = *v17;
        v16[1] = v17[1];
        *((unsigned char *)v16 + 16) = *((unsigned char *)v17 + 16);
        v16[3] = v17[3];
        v16[4] = v17[4];
        v16[5] = v17[5];
        v16[6] = v17[6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
        break;
    }
  }
  uint64_t v19 = a3[8];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[9];
  uint64_t v23 = (uint64_t *)((char *)a1 + v22);
  uint64_t v24 = (uint64_t *)((char *)a2 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_1000361E0(*v24, v26);
  uint64_t v27 = *v23;
  unint64_t v28 = v23[1];
  *uint64_t v23 = v25;
  v23[1] = v26;
  sub_10001CFB8(v27, v28);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

_OWORD *sub_1002A98F8(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for PeerCommunicationIdentifier();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10(v12, v13, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  uint64_t v15 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

uint64_t *sub_1002A9A38(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  if (a1 != a2)
  {
    uint64_t v13 = a3[7];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    sub_1002A8900((uint64_t)a1 + v13, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    uint64_t v16 = type metadata accessor for PeerCommunicationIdentifier();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v15, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[9];
  uint64_t v23 = *(uint64_t *)((char *)a1 + v22);
  unint64_t v24 = *(uint64_t *)((char *)a1 + v22 + 8);
  *(_OWORD *)((char *)a1 + v22) = *(_OWORD *)((char *)a2 + v22);
  sub_10001CFB8(v23, v24);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  return a1;
}

uint64_t sub_1002A9BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002A9BF4);
}

uint64_t sub_1002A9BF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for PeerCommunicationIdentifier();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[7];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[8] + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t sub_1002A9D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002A9D1C);
}

uint64_t sub_1002A9D1C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t result = type metadata accessor for PeerCommunicationIdentifier();
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[8] + 8) = (a2 - 1);
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[7];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

uint64_t sub_1002A9E2C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PeerCommunicationIdentifier();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002A9F1C()
{
  return sub_1002AA42C(&qword_1016408C0, (void (*)(uint64_t))type metadata accessor for OwnerPeerTrust);
}

unint64_t sub_1002A9F68()
{
  unint64_t result = qword_1016408C8;
  if (!qword_1016408C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016408C8);
  }
  return result;
}

unint64_t sub_1002A9FC0()
{
  unint64_t result = qword_1016408D0;
  if (!qword_1016408D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016408D0);
  }
  return result;
}

unint64_t sub_1002AA018()
{
  unint64_t result = qword_1016408D8;
  if (!qword_1016408D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016408D8);
  }
  return result;
}

unint64_t sub_1002AA070()
{
  unint64_t result = qword_1016408E0;
  if (!qword_1016408E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016408E0);
  }
  return result;
}

unint64_t sub_1002AA0C8()
{
  unint64_t result = qword_1016408E8;
  if (!qword_1016408E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016408E8);
  }
  return result;
}

uint64_t sub_1002AA11C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EEA50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001013F7C30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F7C50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013F7C70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

unint64_t sub_1002AA3D8()
{
  unint64_t result = qword_1016408F0;
  if (!qword_1016408F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016408F0);
  }
  return result;
}

uint64_t sub_1002AA42C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryProductData()
{
  return &type metadata for AccessoryProductData;
}

uint64_t sub_1002AA484(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Endianness();
  __chkstk_darwin(v4 - 8);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_10;
      }
      uint64_t v5 = (int)v5;
LABEL_5:
      if (v5 < -1)
      {
        __break(1u);
LABEL_10:
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x1002AA5C4);
      }
LABEL_6:
      Data.subdata(in:)();
      static Endianness.current.getter();
      sub_100091A80();
      FixedWidthInteger.init(data:ofEndianness:)();
      if (v11) {
        return 0;
      }
      else {
        return v10;
      }
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_5;
      }
      goto LABEL_11;
    default:
      goto LABEL_6;
  }
}

uint64_t sub_1002AA5D4(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v2 = BYTE6(a2);
  switch(a2 >> 62)
  {
    case 1uLL:
      int v5 = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_13;
      }
      uint64_t v3 = v5;
      uint64_t v4 = (uint64_t)(v5 + (v5 < 0)) >> 1;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      uint64_t v3 = v6 - v7;
      if (__OFSUB__(v6, v7)) {
        goto LABEL_14;
      }
      if (v3 >= 0) {
        uint64_t v8 = v6 - v7;
      }
      else {
        uint64_t v8 = v3 + 1;
      }
      uint64_t v4 = v8 >> 1;
      break;
    case 3uLL:
      return Data.subdata(in:)();
    default:
      uint64_t v3 = BYTE6(a2);
      uint64_t v4 = v2 >> 1;
      break;
  }
  if (v3 < v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    JUMPOUT(0x1002AA668);
  }
  return Data.subdata(in:)();
}

uint64_t sub_1002AA678(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Endianness();
  __chkstk_darwin(v8 - 8);
  uint64_t v25 = 0;
  unint64_t v26 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v9._countAndFlagsBits = 0x49726F646E65763CLL;
  v9._object = (void *)0xEB00000000203A64;
  String.append(_:)(v9);
  uint64_t v23 = sub_1002AA484(a1, a2);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x746375646F727020;
  v11._object = (void *)0xEC000000203A6449;
  String.append(_:)(v11);
  sub_1002AA5D4(a1, a2);
  static Endianness.current.getter();
  sub_100091A80();
  FixedWidthInteger.init(data:ofEndianness:)();
  uint64_t v12 = (int)v23;
  if (BYTE4(v23)) {
    uint64_t v12 = 0;
  }
  uint64_t v23 = v12;
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0xEB00000000203A65;
  v14._countAndFlagsBits = 0x756C615677617220;
  String.append(_:)(v14);
  v15._countAndFlagsBits = Data.hexString.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x746375646F727020;
  v16._object = (void *)0xEE00203A44495555;
  String.append(_:)(v16);
  if (qword_101636960 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_1016408F8;
  unint64_t v24 = qword_101640900;
  sub_1000361E0(qword_1016408F8, qword_101640900);
  Data.append(_:)();
  uint64_t v17 = v23;
  unint64_t v18 = v24;
  v22[0] = v23;
  v22[1] = v24;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  sub_10001CFB8(v17, v18);
  sub_10028B80C();
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v20._countAndFlagsBits = 62;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  return v25;
}

uint64_t sub_1002AA9D4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101640938);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::String v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1002AB424();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = a2;
  v11[1] = a3;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1002AAB24(uint64_t a1)
{
  unint64_t v2 = sub_1002AB424();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002AAB60(uint64_t a1)
{
  unint64_t v2 = sub_1002AB424();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002AAB9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002AB228(*(void *)a1, *(void *)(a1 + 8));
  *a2 = result;
  a2[1] = v4;
  return result;
}

void *sub_1002AABCC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1002AB2B4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1002AABF8(void *a1)
{
  return sub_1002AA9D4(a1, *v1, v1[1]);
}

uint64_t sub_1002AAC14()
{
  return sub_1002AA678(*(void *)v0, *(void *)(v0 + 8));
}

unint64_t sub_1002AAC20()
{
  unint64_t result = qword_101640920;
  if (!qword_101640920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640920);
  }
  return result;
}

uint64_t sub_1002AAC74()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuid:)();
  uint64_t v4 = UUID.data.getter();
  uint64_t v6 = v5;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_1016408F8 = v4;
  unk_101640900 = v6;
  return result;
}

uint64_t sub_1002AAD8C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_101640908);
  sub_100010324(v0, (uint64_t)qword_101640908);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1002AAE18(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  a4(&v7);
  uint64_t v5 = *a1 + 1;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

uint64_t sub_1002AAE78(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  a4(&v7);
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

uint64_t sub_1002AAED8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1002AAF08(uint64_t a1, uint64_t a2)
{
  if (a1 != (int)a1)
  {
    if (qword_1016371D8 == -1)
    {
LABEL_6:
      SynchronousCache.cachedValue<A>(key:computeBlock:)();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
        if (qword_101636968 != -1) {
          swift_once();
        }
        uint64_t v2 = type metadata accessor for Logger();
        sub_100010324(v2, (uint64_t)qword_101640908);
        uint64_t v3 = Logger.logObject.getter();
        os_log_type_t v4 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v3, v4))
        {
          uint64_t v5 = swift_slowAlloc();
          *(_DWORD *)uint64_t v5 = 134218240;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v5 + 12) = 2048;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v3, v4, "Invalid vendorId: %ld productId: %ld", (uint8_t *)v5, 0x16u);
          swift_slowDealloc();
        }
      }
      return 0;
    }
LABEL_21:
    swift_once();
    goto LABEL_6;
  }
  if (a2 != (int)a2)
  {
    if (qword_1016371D8 == -1) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
  sub_100091A80();
  uint64_t v16 = FixedWidthInteger.data.getter();
  unint64_t v17 = v7;
  uint64_t v8 = FixedWidthInteger.data.getter();
  unint64_t v10 = v9;
  Data.append(_:)();
  sub_10001CFB8(v8, v10);
  uint64_t result = v16;
  switch(v17 >> 62)
  {
    case 1uLL:
      LODWORD(v11) = HIDWORD(v16) - v16;
      if (__OFSUB__(HIDWORD(v16), v16))
      {
        __break(1u);
LABEL_24:
        __break(1u);
        JUMPOUT(0x1002AB218);
      }
      uint64_t v11 = (int)v11;
LABEL_19:
      if (v11 == 8) {
        return result;
      }
      sub_10001CFB8(v16, v17);
      break;
    case 2uLL:
      uint64_t v13 = *(void *)(v16 + 16);
      uint64_t v12 = *(void *)(v16 + 24);
      BOOL v14 = __OFSUB__(v12, v13);
      uint64_t v11 = v12 - v13;
      if (!v14) {
        goto LABEL_19;
      }
      goto LABEL_24;
    case 3uLL:
      return 0;
    default:
      uint64_t v11 = BYTE6(v17);
      goto LABEL_19;
  }
  return 0;
}

uint64_t sub_1002AB228(uint64_t result, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v2) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x1002AB2A4);
      }
      uint64_t v2 = (int)v2;
LABEL_6:
      if (v2 != 8)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        return 0;
      }
      return result;
    case 2uLL:
      uint64_t v4 = *(void *)(result + 16);
      uint64_t v3 = *(void *)(result + 24);
      BOOL v5 = __OFSUB__(v3, v4);
      uint64_t v2 = v3 - v4;
      if (!v5) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v2 = BYTE6(a2);
      goto LABEL_6;
  }
}

void *sub_1002AB2B4(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101640928);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = sub_10001CD44(a1, a1[3]);
  sub_1002AB424();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100037AA0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v7 = v9;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1002AB424()
{
  unint64_t result = qword_101640930;
  if (!qword_101640930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640930);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessoryProductData.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002AB514);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryProductData.CodingKeys()
{
  return &type metadata for AccessoryProductData.CodingKeys;
}

unint64_t sub_1002AB550()
{
  unint64_t result = qword_101640940;
  if (!qword_101640940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640940);
  }
  return result;
}

unint64_t sub_1002AB5A8()
{
  unint64_t result = qword_101640948;
  if (!qword_101640948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640948);
  }
  return result;
}

unint64_t sub_1002AB600()
{
  unint64_t result = qword_101640950;
  if (!qword_101640950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640950);
  }
  return result;
}

uint64_t sub_1002AB654(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v54 = (char *)&v39 - v9;
  uint64_t v10 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *(void *)(a2 + 16);
  if (!v13) {
    return 1;
  }
  unint64_t v14 = *(void *)(a1 + 16);
  if (!v14) {
    return 1;
  }
  uint64_t v48 = v12;
  if (v13 >= v14) {
    uint64_t v15 = a1;
  }
  else {
    uint64_t v15 = a2;
  }
  if (v13 >= v14) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = a1;
  }
  uint64_t v17 = *(void *)(v15 + 56);
  uint64_t v40 = v15 + 56;
  uint64_t v18 = -1 << *(unsigned char *)(v15 + 32);
  uint64_t v39 = ~v18;
  if (-v18 < 64) {
    uint64_t v19 = ~(-1 << -(char)v18);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v17;
  int64_t v42 = (unint64_t)(63 - v18) >> 6;
  uint64_t v46 = v5 + 48;
  id v47 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v44 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v52 = v16 + 56;
  uint64_t v53 = v5 + 16;
  uint64_t v21 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v49 = v15;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v23 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    int64_t v45 = v23;
    if (v20)
    {
      uint64_t v51 = (v20 - 1) & v20;
      unint64_t v24 = __clz(__rbit64(v20)) | (v23 << 6);
      int64_t v25 = v23;
      unint64_t v26 = v48;
      goto LABEL_28;
    }
    int64_t v27 = v23 + 1;
    unint64_t v26 = v48;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v27 >= v42) {
      goto LABEL_40;
    }
    unint64_t v28 = *(void *)(v40 + 8 * v27);
    int64_t v25 = v23 + 1;
    if (!v28)
    {
      int64_t v25 = v23 + 2;
      if (v23 + 2 >= v42) {
        goto LABEL_40;
      }
      unint64_t v28 = *(void *)(v40 + 8 * v25);
      if (!v28) {
        break;
      }
    }
LABEL_27:
    uint64_t v51 = (v28 - 1) & v28;
    unint64_t v24 = __clz(__rbit64(v28)) + (v25 << 6);
LABEL_28:
    uint64_t v30 = *(void *)(v5 + 72);
    long long v31 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v31(v26, *(void *)(v49 + 48) + v30 * v24, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v26, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v26, 1, v4) == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v38 = 1;
LABEL_37:
      sub_100132C20();
      return v38;
    }
    int64_t v50 = v25;
    unint64_t v43 = v20;
    (*v44)(v54, v26, v4);
    if (*(void *)(v16 + 16))
    {
      sub_1002ADA80(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v33 = -1 << *(unsigned char *)(v16 + 32);
      unint64_t v34 = v32 & ~v33;
      if ((*(void *)(v52 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34))
      {
        uint64_t v35 = ~v33;
        while (1)
        {
          v31(v8, *(void *)(v16 + 48) + v34 * v30, v4);
          sub_1002ADA80((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v37 = (uint64_t (*)(char *, uint64_t))*v21;
          (*v21)(v8, v4);
          if (v36) {
            break;
          }
          unint64_t v34 = (v34 + 1) & v35;
          if (((*(void *)(v52 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0) {
            goto LABEL_13;
          }
        }
        swift_bridgeObjectRelease();
        v37(v54, v4);
        uint64_t v38 = 0;
        goto LABEL_37;
      }
    }
LABEL_13:
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v21)(v54, v4);
    int64_t v23 = v50;
    unint64_t v20 = v51;
  }
  int64_t v29 = v23 + 3;
  if (v23 + 3 >= v42)
  {
LABEL_40:
    uint64_t v38 = 1;
    (*v47)(v48, 1, 1, v4);
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  unint64_t v28 = *(void *)(v40 + 8 * v29);
  if (v28)
  {
    int64_t v25 = v23 + 3;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v25 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v25 >= v42) {
      goto LABEL_40;
    }
    unint64_t v28 = *(void *)(v40 + 8 * v25);
    ++v29;
    if (v28) {
      goto LABEL_27;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

void sub_1002ABB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OwnerSharingCircle();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170D788);
  sub_1002B1494(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  int v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v29 = v26;
    *(_DWORD *)uint64_t v17 = 134350083;
    uint64_t v18 = v27;
    uint64_t v27 = v3;
    uint64_t v28 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2160;
    uint64_t v28 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 22) = 2081;
    int v25 = v16;
    os_log_t v24 = v14;
    sub_1002ADA80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v28 = sub_1008FA0F0(v19, v20, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002AD9D8((uint64_t)v12);
    *(_WORD *)(v17 + 32) = 2160;
    uint64_t v28 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 42) = 2081;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v28 = sub_1008FA0F0(v21, v22, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    unint64_t v14 = v24;
    _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v25, "Deleting circle of type: %{public}ld\ncircle: %{private,mask.hash}s,\nfor beacon:%{private,mask.hash}s.", (uint8_t *)v17, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1002AD9D8((uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_1002ABF68(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v25 - v10;
  unint64_t v12 = *(void *)(*(void *)(a1 + *(int *)(v9 + 32)) + 16);
  if (v12) {
    BOOL v13 = v12 > a2;
  }
  else {
    BOOL v13 = 0;
  }
  uint64_t v14 = v13;
  if (v14 == 1)
  {
    uint64_t v29 = v2;
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170D788);
    sub_1002B1494(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_1002B1494(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    int v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    int v18 = v17;
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v31 = v28;
      *(_DWORD *)uint64_t v19 = 134219267;
      uint64_t v30 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2048;
      uint64_t v30 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 22) = 2160;
      uint64_t v30 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 32) = 2081;
      uint64_t v25 = v19 + 34;
      os_log_t v27 = v16;
      type metadata accessor for UUID();
      sub_1002ADA80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v26 = v18;
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v30 = sub_1008FA0F0(v20, v21, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002AD9D8((uint64_t)v11);
      *(_WORD *)(v19 + 42) = 2160;
      uint64_t v30 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 52) = 2081;
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v30 = sub_1008FA0F0(v22, v23, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002AD9D8((uint64_t)v8);
      int v16 = v27;
      _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v26, "BeaconSharingService: cannot create new circle. memberCount: %ld > maxCircleMembers: %lu.\nBeaconIdentifier: %{private,mask.hash}s,\nShareId: %{private,mask.hash}s.", (uint8_t *)v19, 0x3Eu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1002AD9D8((uint64_t)v11);
      sub_1002AD9D8((uint64_t)v8);
    }
  }
  return v14;
}

uint64_t sub_1002AC328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(int *)(sub_10000588C(&qword_10165F390) + 48);
  uint64_t v5 = *(int *)(sub_10000588C(&qword_101640960) + 48);
  LOBYTE(v4) = *(unsigned char *)(a1 + v4);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  *(unsigned char *)(a2 + v5) = v4;
  return result;
}

uint64_t sub_1002AC3B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101640958);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = ~v16;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v19 = -v16;
  uint64_t v44 = a1;
  uint64_t v45 = a1 + 64;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  else {
    uint64_t v20 = -1;
  }
  uint64_t v46 = v17;
  uint64_t v47 = 0;
  uint64_t v48 = v20 & v18;
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  v40[2] = a1;
  swift_bridgeObjectRetain();
  v40[1] = a3;
  swift_retain();
  sub_100BD73D8((uint64_t)v15);
  uint64_t v21 = sub_10000588C(&qword_101640960);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100132C20();
    return swift_release();
  }
  unint64_t v43 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
  uint64_t v51 = v42 + 32;
  uint64_t v41 = (void (**)(char *, uint64_t))(v42 + 8);
  while (1)
  {
    uint64_t v24 = *(int *)(v21 + 48);
    uint64_t v25 = v10;
    v43(v12, v15, v10);
    char v26 = v15[v24];
    os_log_t v27 = *(void **)a5;
    unint64_t v29 = sub_1007240CC((uint64_t)v12);
    uint64_t v30 = v27[2];
    BOOL v31 = (v28 & 1) == 0;
    uint64_t v32 = v30 + v31;
    if (__OFADD__(v30, v31)) {
      break;
    }
    char v33 = v28;
    if (v27[3] >= v32)
    {
      if (a4)
      {
        char v36 = *(void **)a5;
        if (v28) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_100E7F8E0();
        char v36 = *(void **)a5;
        if (v33) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      sub_100E67CB8(v32, a4 & 1);
      unint64_t v34 = sub_1007240CC((uint64_t)v12);
      if ((v33 & 1) != (v35 & 1)) {
        goto LABEL_22;
      }
      unint64_t v29 = v34;
      char v36 = *(void **)a5;
      if (v33)
      {
LABEL_7:
        char v23 = *(unsigned char *)(v36[7] + v29);
        uint64_t v10 = v25;
        (*v41)(v12, v25);
        *(unsigned char *)(*(void *)(*(void *)a5 + 56) + v29) = v23;
        goto LABEL_8;
      }
    }
    v36[(v29 >> 6) + 8] |= 1 << v29;
    uint64_t v10 = v25;
    v43((char *)(v36[6] + *(void *)(v42 + 72) * v29), v12, v25);
    *(unsigned char *)(v36[7] + v29) = v26;
    uint64_t v37 = v36[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_21;
    }
    v36[2] = v39;
LABEL_8:
    sub_100BD73D8((uint64_t)v15);
    uint64_t v21 = sub_10000588C(&qword_101640960);
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21) == 1) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002AC78C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101640958);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = ~v16;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v19 = -v16;
  uint64_t v43 = a1;
  uint64_t v44 = a1 + 64;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  else {
    uint64_t v20 = -1;
  }
  uint64_t v45 = v17;
  uint64_t v46 = 0;
  uint64_t v47 = v20 & v18;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  v39[2] = a1;
  swift_bridgeObjectRetain();
  v39[1] = a3;
  swift_retain();
  sub_100BD73D8((uint64_t)v15);
  uint64_t v21 = sub_10000588C(&qword_101640960);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100132C20();
    return swift_release();
  }
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  uint64_t v50 = v41 + 32;
  uint64_t v40 = (void (**)(char *, uint64_t))(v41 + 8);
  while (1)
  {
    uint64_t v23 = *(int *)(v21 + 48);
    uint64_t v24 = v10;
    v42(v12, v15, v10);
    char v25 = v15[v23];
    uint64_t v26 = *a5;
    unint64_t v28 = sub_1007240CC((uint64_t)v12);
    uint64_t v29 = *(void *)(v26 + 16);
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30)) {
      break;
    }
    char v32 = v27;
    if (*(void *)(v26 + 24) >= v31)
    {
      if (a4)
      {
        if (v27) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_100E7F8E0();
        if (v32) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      sub_100E67CB8(v31, a4 & 1);
      unint64_t v33 = sub_1007240CC((uint64_t)v12);
      if ((v32 & 1) != (v34 & 1)) {
        goto LABEL_22;
      }
      unint64_t v28 = v33;
      if (v32)
      {
LABEL_7:
        uint64_t v10 = v24;
        (*v40)(v12, v24);
        *(unsigned char *)(*(void *)(*a5 + 56) + v28) = v25;
        goto LABEL_8;
      }
    }
    char v35 = (void *)*a5;
    *(void *)(*a5 + 8 * (v28 >> 6) + 64) |= 1 << v28;
    uint64_t v10 = v24;
    v42((char *)(v35[6] + *(void *)(v41 + 72) * v28), v12, v24);
    *(unsigned char *)(v35[7] + v28) = v25;
    uint64_t v36 = v35[2];
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37) {
      goto LABEL_21;
    }
    v35[2] = v38;
LABEL_8:
    sub_100BD73D8((uint64_t)v15);
    uint64_t v21 = sub_10000588C(&qword_101640960);
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21) == 1) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002ACB50(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1002ACB68(a1, a2, a3, a4, (uint64_t *)&unk_101660750);
}

uint64_t sub_1002ACB5C(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1002ACB68(a1, a2, a3, a4, &qword_101640990);
}

uint64_t sub_1002ACB68(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v45 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v48 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v44 = (char *)&v39 - v13;
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_10000588C(a5);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v15 = result;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  if (a2 < 1) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = *a1;
  }
  uint64_t v17 = 0;
  uint64_t v42 = a4;
  uint64_t v43 = v45 + 16;
  uint64_t v47 = v45 + 32;
  uint64_t v18 = result + 64;
  while (1)
  {
    if (v16)
    {
      unint64_t v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      uint64_t v46 = v17;
      unint64_t v20 = v19 | (v17 << 6);
    }
    else
    {
      uint64_t v21 = v17 + 1;
      if (__OFADD__(v17, 1)) {
        goto LABEL_40;
      }
      if (v21 >= v41) {
        return v15;
      }
      unint64_t v22 = v40[v21];
      uint64_t v23 = v17 + 1;
      if (!v22)
      {
        uint64_t v23 = v17 + 2;
        if (v17 + 2 >= v41) {
          return v15;
        }
        unint64_t v22 = v40[v23];
        if (!v22)
        {
          uint64_t v23 = v17 + 3;
          if (v17 + 3 >= v41) {
            return v15;
          }
          unint64_t v22 = v40[v23];
          if (!v22)
          {
            uint64_t v24 = v17 + 4;
            if (v17 + 4 >= v41) {
              return v15;
            }
            unint64_t v22 = v40[v24];
            if (!v22)
            {
              while (1)
              {
                uint64_t v23 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v23 >= v41) {
                  return v15;
                }
                unint64_t v22 = v40[v23];
                ++v24;
                if (v22) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v23 = v17 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v16 = (v22 - 1) & v22;
      uint64_t v46 = v23;
      unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
    }
    char v25 = v44;
    uint64_t v26 = v45;
    uint64_t v27 = *(void *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v44, a4[6] + v27 * v20, v10);
    char v28 = *(unsigned char *)(a4[7] + v20);
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v29(v48, v25, v10);
    sub_1002ADA80(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v30 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v18 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v33 = __clz(__rbit64((-1 << v31) & ~*(void *)(v18 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v36 = v32 == v35;
        if (v32 == v35) {
          unint64_t v32 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v32);
      }
      while (v37 == -1);
      unint64_t v33 = __clz(__rbit64(~v37)) + (v32 << 6);
    }
    *(void *)(v18 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v29)(*(void *)(v15 + 48) + v33 * v27, v48, v10);
    *(unsigned char *)(*(void *)(v15 + 56) + v33) = v28;
    ++*(void *)(v15 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v42;
    uint64_t v17 = v46;
    if (!a3) {
      return v15;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1002ACF38(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v39 = a1;
  uint64_t v7 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v43 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v41 = (char *)&v37 - v10;
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_10000588C(&qword_101640980);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = result;
  uint64_t v38 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *v39;
  }
  uint64_t v14 = 0;
  uint64_t v15 = result + 64;
  uint64_t v40 = a4;
  uint64_t v16 = (uint64_t)v41;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v18 = v17 | (v14 << 6);
    }
    else
    {
      uint64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v19 >= v38) {
        return v12;
      }
      unint64_t v20 = v39[v19];
      ++v14;
      if (!v20)
      {
        uint64_t v14 = v19 + 1;
        if (v19 + 1 >= v38) {
          return v12;
        }
        unint64_t v20 = v39[v14];
        if (!v20)
        {
          uint64_t v14 = v19 + 2;
          if (v19 + 2 >= v38) {
            return v12;
          }
          unint64_t v20 = v39[v14];
          if (!v20)
          {
            uint64_t v21 = v19 + 3;
            if (v21 >= v38) {
              return v12;
            }
            unint64_t v20 = v39[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v14 >= v38) {
                  return v12;
                }
                unint64_t v20 = v39[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v14 = v21;
          }
        }
      }
LABEL_24:
      unint64_t v13 = (v20 - 1) & v20;
      unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
    }
    uint64_t v22 = a4[7];
    uint64_t v23 = (uint64_t *)(a4[6] + 16 * v18);
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    uint64_t v26 = *(void *)(v42 + 72);
    sub_1002B1494(v22 + v26 * v18, v16, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_1002B14FC(v16, v43, type metadata accessor for OwnedBeaconGroup.PairingState);
    Hasher.init(_seed:)();
    sub_1000361E0(v24, v25);
    sub_1000361E0(v24, v25);
    Data.hash(into:)();
    sub_10001CFB8(v24, v25);
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    unint64_t v35 = (uint64_t *)(*(void *)(v12 + 48) + 16 * v30);
    *unint64_t v35 = v24;
    v35[1] = v25;
    uint64_t result = sub_1002B14FC(v43, *(void *)(v12 + 56) + v30 * v26, type metadata accessor for OwnedBeaconGroup.PairingState);
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v40;
    if (!a3) {
      return v12;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1002AD2F4(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v47 - 8);
  uint64_t v8 = __chkstk_darwin(v47);
  uint64_t v46 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v41 = (char *)&v36 - v10;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_10000588C(&qword_101640988);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = result;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  uint64_t v39 = a4;
  uint64_t v40 = v42 + 16;
  uint64_t v45 = v42 + 32;
  uint64_t v15 = result + 64;
  uint64_t v16 = v47;
  while (1)
  {
    if (v13)
    {
      uint64_t v43 = (v13 - 1) & v13;
      uint64_t v44 = v14;
      unint64_t v17 = __clz(__rbit64(v13)) | (v14 << 6);
    }
    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v18 >= v38) {
        return v12;
      }
      unint64_t v19 = v37[v18];
      uint64_t v20 = v14 + 1;
      if (!v19)
      {
        uint64_t v20 = v14 + 2;
        if (v14 + 2 >= v38) {
          return v12;
        }
        unint64_t v19 = v37[v20];
        if (!v19)
        {
          uint64_t v20 = v14 + 3;
          if (v14 + 3 >= v38) {
            return v12;
          }
          unint64_t v19 = v37[v20];
          if (!v19)
          {
            uint64_t v21 = v14 + 4;
            if (v14 + 4 >= v38) {
              return v12;
            }
            unint64_t v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                uint64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v20 >= v38) {
                  return v12;
                }
                unint64_t v19 = v37[v20];
                ++v21;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v20 = v14 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v43 = (v19 - 1) & v19;
      uint64_t v44 = v20;
      unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    uint64_t v22 = v41;
    uint64_t v23 = v42;
    uint64_t v24 = *(void *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v41, a4[6] + v24 * v17, v16);
    uint64_t v25 = *(void *)(a4[7] + 8 * v17);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v26(v46, v22, v16);
    sub_1002ADA80(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_bridgeObjectRetain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v12 + 48) + v30 * v24, v46, v47);
    *(void *)(*(void *)(v12 + 56) + 8 * v30) = v25;
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v39;
    unint64_t v13 = v43;
    uint64_t v14 = v44;
    if (!a3) {
      return v12;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1002AD6CC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_10000588C(&qword_1016608C0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v31) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v31) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v31) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v31) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_41;
                }
                if (v10 >= v31) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v10 = v16;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    char v20 = *(unsigned char *)(*(void *)(v4 + 56) + v13);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    unint64_t v29 = (void *)(*(void *)(v8 + 48) + 16 * v24);
    *unint64_t v29 = v19;
    v29[1] = v18;
    *(unsigned char *)(*(void *)(v8 + 56) + v24) = v20;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1002AD974(uint64_t a1, unint64_t a2, int a3, uint64_t a4, char *a5, uint64_t a6, int a7)
{
  return sub_1002AE084(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(char *))sub_1002AD9BC, (uint64_t)sub_10001DA84);
}

uint64_t sub_1002AD9BC()
{
  return sub_1002AFDC0() & 1;
}

uint64_t sub_1002AD9D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnerSharingCircle();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for BeaconSharingCircleTransformer.Error()
{
  uint64_t result = qword_101640A08;
  if (!qword_101640A08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002ADA80(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002ADAC8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a2;
  uint64_t v40 = a1;
  uint64_t v48 = sub_10000588C(&qword_10165F390);
  uint64_t v6 = __chkstk_darwin(v48);
  uint64_t v47 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v53 = (char *)&v38 - v8;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v14 = 0;
  uint64_t v49 = (void *)a3;
  uint64_t v15 = *(void *)(a3 + 64);
  uint64_t v41 = 0;
  uint64_t v42 = a3 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v45 = v11 + 16;
  uint64_t v46 = v11;
  int64_t v43 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v44 = (void (**)(uint64_t, uint64_t))(v11 + 8);
  if (v18) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v22 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v22 < v43)
    {
      unint64_t v23 = *(void *)(v42 + 8 * v22);
      int64_t v24 = v14 + 1;
      if (v23) {
        goto LABEL_21;
      }
      int64_t v24 = v14 + 2;
      if (v14 + 2 >= v43) {
        return sub_1002ACB68(v40, v39, v41, v49, (uint64_t *)&unk_101660750);
      }
      unint64_t v23 = *(void *)(v42 + 8 * v24);
      if (v23) {
        goto LABEL_21;
      }
      int64_t v24 = v14 + 3;
      if (v14 + 3 >= v43) {
        return sub_1002ACB68(v40, v39, v41, v49, (uint64_t *)&unk_101660750);
      }
      unint64_t v23 = *(void *)(v42 + 8 * v24);
      if (v23)
      {
LABEL_21:
        uint64_t v51 = (v23 - 1) & v23;
        int64_t v52 = v24;
        for (unint64_t i = __clz(__rbit64(v23)) + (v24 << 6); ; unint64_t i = __clz(__rbit64(v18)) | (v14 << 6))
        {
          unint64_t v26 = v49;
          BOOL v27 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 16);
          v27(v13, v49[6] + *(void *)(v46 + 72) * i, v9);
          uint64_t v28 = v26[7];
          unint64_t v50 = i;
          char v29 = *(unsigned char *)(v28 + i);
          uint64_t v30 = v9;
          uint64_t v31 = (uint64_t)v53;
          unint64_t v32 = v13;
          v27(v53, (unint64_t)v13, v30);
          uint64_t v33 = (uint64_t)v47;
          uint64_t v34 = *(int *)(v48 + 48);
          *(unsigned char *)(v31 + v34) = v29;
          uint64_t v35 = v31;
          uint64_t v9 = v30;
          v27((char *)v33, v35, v30);
          *(unsigned char *)(v33 + v34) = v29;
          if (*(void *)(a4 + 16) && (sub_1007240CC(v33), (v36 & 1) != 0))
          {
            sub_10001DAB4((uint64_t)v53, &qword_10165F390);
            uint64_t v37 = *v44;
            (*v44)(v33, v30);
            unint64_t v13 = v32;
            uint64_t result = ((uint64_t (*)(char *, uint64_t))v37)(v32, v30);
            unint64_t v18 = v51;
            int64_t v14 = v52;
            if (!v51) {
              goto LABEL_8;
            }
          }
          else
          {
            sub_10001DAB4((uint64_t)v53, &qword_10165F390);
            uint64_t v19 = *v44;
            (*v44)(v33, v30);
            unint64_t v13 = v32;
            uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v32, v30);
            *(unint64_t *)((char *)v40 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v50;
            BOOL v20 = __OFADD__(v41++, 1);
            unint64_t v18 = v51;
            int64_t v14 = v52;
            if (v20) {
              goto LABEL_29;
            }
            if (!v51) {
              goto LABEL_8;
            }
          }
LABEL_7:
          uint64_t v51 = (v18 - 1) & v18;
          int64_t v52 = v14;
        }
      }
      uint64_t v25 = v14 + 4;
      if (v14 + 4 < v43)
      {
        unint64_t v23 = *(void *)(v42 + 8 * v25);
        if (v23)
        {
          int64_t v24 = v14 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v24 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            goto LABEL_28;
          }
          if (v24 >= v43) {
            return sub_1002ACB68(v40, v39, v41, v49, (uint64_t *)&unk_101660750);
          }
          unint64_t v23 = *(void *)(v42 + 8 * v24);
          ++v25;
          if (v23) {
            goto LABEL_21;
          }
        }
      }
    }
    return sub_1002ACB68(v40, v39, v41, v49, (uint64_t *)&unk_101660750);
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1002ADEC8(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1002ADAC8((unint64_t *)((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1002ADAC8((unint64_t *)v11, v7, a1, a2);
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

uint64_t sub_1002AE084(uint64_t a1, unint64_t a2, int a3, uint64_t a4, char *a5, uint64_t a6, int a7, uint64_t (*a8)(char *), uint64_t a9)
{
  uint64_t v183 = a8;
  int v185 = a7;
  uint64_t v198 = a5;
  uint64_t v182 = a4;
  LODWORD(v194) = a3;
  uint64_t v188 = a1;
  uint64_t v11 = sub_10000588C(&qword_101640958);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v175 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OwnerSharingCircle();
  uint64_t v208 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t)&v175 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v178 = (uint64_t)&v175 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v179 = (long long *)((char *)&v175 - v21);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v192 = (uint64_t)&v175 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v181 = (unint64_t)&v175 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  unint64_t v180 = (unint64_t)&v175 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v187 = (_OWORD *)((char *)&v175 - v29);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v189 = (uint64_t)&v175 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v200 = (char *)&v175 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  unint64_t v205 = (unint64_t)&v175 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v193 = (char *)&v175 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  int64_t v197 = (int64_t)&v175 - v39;
  __chkstk_darwin(v38);
  uint64_t v202 = (uint64_t)&v175 - v40;
  uint64_t isUniquelyReferenced_nonNull_native = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(isUniquelyReferenced_nonNull_native - 8);
  uint64_t v43 = __chkstk_darwin(isUniquelyReferenced_nonNull_native);
  uint64_t v45 = (char *)&v175 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __chkstk_darwin(v43);
  uint64_t v48 = (char *)&v175 - v47;
  uint64_t v49 = __chkstk_darwin(v46);
  long long v186 = (char *)&v175 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  uint64_t v211 = (uint64_t *)((char *)&v175 - v52);
  __chkstk_darwin(v51);
  uint64_t v206 = (char *)&v175 - v53;
  uint64_t v54 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v54 - 8);
  uint64_t v199 = (uint64_t *)((char *)&v175 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a2 + 16))
  {
    type metadata accessor for BeaconSharingCircleTransformer.Error();
    sub_1002ADA80(&qword_101639EF0, (void (*)(uint64_t))type metadata accessor for BeaconSharingCircleTransformer.Error);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v86, 1, 1, isUniquelyReferenced_nonNull_native);
    swift_willThrow();
    return a6;
  }
  uint64_t v201 = (void *)a6;
  uint64_t v176 = v45;
  uint64_t v210 = (int *)v14;
  uint64_t v175 = v17;
  uint64_t v177 = a9;
  uint64_t v56 = *(void *)(a2 + 56);
  unint64_t v190 = a2 + 56;
  uint64_t v57 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v58 = -1;
  if (v57 < 64) {
    uint64_t v58 = ~(-1 << v57);
  }
  unint64_t v59 = v58 & v56;
  int64_t v191 = (unint64_t)(v57 + 63) >> 6;
  a6 = v42 + 16;
  uint64_t v196 = (void (*)(char *, uint64_t, uint64_t))(v42 + 56);
  *(void *)&long long v195 = v42 + 48;
  uint64_t v215 = (unint64_t *)(v42 + 32);
  uint64_t v212 = v42;
  uint64_t v213 = (uint64_t *)(v42 + 8);
  swift_bridgeObjectRetain();
  unint64_t v60 = 0;
  uint64_t v61 = _swiftEmptyDictionarySingleton;
  uint64_t v214 = isUniquelyReferenced_nonNull_native;
  uint64_t v207 = (void *)(v42 + 16);
  unint64_t v62 = (unint64_t)v199;
  while (1)
  {
    unint64_t v63 = v202;
    uint64_t v209 = v61;
    if (v59)
    {
      uint64_t v203 = (v59 - 1) & v59;
      unint64_t v204 = v60;
      unint64_t v64 = __clz(__rbit64(v59)) | (v60 << 6);
      goto LABEL_27;
    }
    unint64_t v65 = v60 + 1;
    if (__OFADD__(v60, 1)) {
      goto LABEL_136;
    }
    uint64_t v66 = (uint64_t)v193;
    if ((uint64_t)v65 >= v191) {
      goto LABEL_39;
    }
    unint64_t v67 = *(void *)(v190 + 8 * v65);
    int64_t v68 = v60 + 1;
    if (!v67)
    {
      int64_t v68 = v60 + 2;
      if ((uint64_t)(v60 + 2) >= v191) {
        goto LABEL_39;
      }
      unint64_t v67 = *(void *)(v190 + 8 * v68);
      if (!v67)
      {
        int64_t v68 = v60 + 3;
        if ((uint64_t)(v60 + 3) >= v191) {
          goto LABEL_39;
        }
        unint64_t v67 = *(void *)(v190 + 8 * v68);
        if (!v67)
        {
          int64_t v68 = v60 + 4;
          if ((uint64_t)(v60 + 4) >= v191) {
            goto LABEL_39;
          }
          unint64_t v67 = *(void *)(v190 + 8 * v68);
          if (!v67)
          {
            int64_t v68 = v60 + 5;
            if ((uint64_t)(v60 + 5) >= v191) {
              goto LABEL_39;
            }
            unint64_t v67 = *(void *)(v190 + 8 * v68);
            if (!v67) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    uint64_t v203 = (v67 - 1) & v67;
    unint64_t v204 = v68;
    unint64_t v64 = __clz(__rbit64(v67)) + (v68 << 6);
LABEL_27:
    unint64_t v70 = a2;
    uint64_t v71 = *(void *)(a2 + 48);
    uint64_t v72 = v212;
    a2 = *(void *)(v212 + 72);
    uint64_t v17 = *(void *)(v212 + 16);
    ((void (*)(unint64_t, unint64_t, uint64_t))v17)(v62, v71 + a2 * v64, isUniquelyReferenced_nonNull_native);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v72 + 56))(v62, 0, 1, isUniquelyReferenced_nonNull_native);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v72 + 48))(v62, 1, isUniquelyReferenced_nonNull_native) == 1)
    {
      uint64_t v85 = swift_release();
      uint64_t v66 = (uint64_t)v193;
      unint64_t v63 = v202;
      goto LABEL_40;
    }
    int v73 = v206;
    ((void (*)(char *, unint64_t, uint64_t))*v215)(v206, v62, isUniquelyReferenced_nonNull_native);
    unint64_t v74 = v211;
    ((void (*)(uint64_t *, char *, uint64_t))v17)(v211, v73, isUniquelyReferenced_nonNull_native);
    unint64_t v63 = (unint64_t)v209;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v216[0] = v63;
    unint64_t v62 = sub_1007240CC((uint64_t)v74);
    unint64_t v65 = *(void *)(v63 + 16);
    BOOL v76 = (v75 & 1) == 0;
    uint64_t v77 = v65 + v76;
    if (__OFADD__(v65, v76)) {
      goto LABEL_134;
    }
    char v78 = v75;
    if (*(void *)(v63 + 24) >= v77)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v63 = (unint64_t)v216;
        sub_100E7F8E0();
      }
    }
    else
    {
      sub_100E67CB8(v77, isUniquelyReferenced_nonNull_native);
      unint64_t v63 = v216[0];
      unint64_t v79 = sub_1007240CC((uint64_t)v211);
      if ((v78 & 1) != (v80 & 1))
      {
LABEL_141:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_142:
        uint64_t result = swift_bridgeObjectRelease();
        __break(1u);
        return result;
      }
      unint64_t v62 = v79;
    }
    uint64_t isUniquelyReferenced_nonNull_native = v214;
    uint64_t v81 = v216[0];
    if (v78)
    {
      a2 = v216[0];
      *(unsigned char *)(*(void *)(v216[0] + 56) + v62) = v194;
      a6 = (uint64_t)v207;
    }
    else
    {
      *(void *)(v216[0] + 8 * (v62 >> 6) + 64) |= 1 << v62;
      unint64_t v82 = *(void *)(v81 + 48) + v62 * a2;
      a2 = v81;
      a6 = (uint64_t)v207;
      ((void (*)(unint64_t, uint64_t *, uint64_t))v17)(v82, v211, isUniquelyReferenced_nonNull_native);
      *(unsigned char *)(*(void *)(a2 + 56) + v62) = v194;
      uint64_t v83 = *(void *)(a2 + 16);
      BOOL v84 = __OFADD__(v83, 1);
      unint64_t v65 = v83 + 1;
      if (v84) {
        goto LABEL_135;
      }
      *(void *)(a2 + 16) = v65;
    }
    swift_bridgeObjectRelease();
    uint64_t v17 = *v213;
    ((void (*)(uint64_t *, uint64_t))*v213)(v211, isUniquelyReferenced_nonNull_native);
    ((void (*)(char *, uint64_t))v17)(v206, isUniquelyReferenced_nonNull_native);
    uint64_t v61 = (void *)a2;
    a2 = v70;
    unint64_t v62 = (unint64_t)v199;
    unint64_t v59 = v203;
    unint64_t v60 = v204;
  }
  unint64_t v69 = v60 + 6;
  if ((uint64_t)(v60 + 6) >= v191) {
    goto LABEL_39;
  }
  unint64_t v67 = *(void *)(v190 + 8 * v69);
  if (v67)
  {
    int64_t v68 = v60 + 6;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v68 = v69 + 1;
    if (__OFADD__(v69, 1)) {
      goto LABEL_139;
    }
    if (v68 >= v191) {
      break;
    }
    unint64_t v67 = *(void *)(v190 + 8 * v68);
    ++v69;
    if (v67) {
      goto LABEL_26;
    }
  }
LABEL_39:
  (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))v196)(v62, 1, 1, isUniquelyReferenced_nonNull_native);
  uint64_t v85 = swift_release();
LABEL_40:
  uint64_t v17 = (uint64_t)&v175;
  __chkstk_darwin(v85);
  *(&v175 - 2) = v188;
  uint64_t v87 = v182;
  swift_bridgeObjectRetain();
  unint64_t v88 = v184;
  uint64_t v89 = sub_1000A3E84(v183, &v175 - 4, v87);
  a2 = v88;
  v216[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v90 = *(uint64_t **)(v89 + 16);
  uint64_t v206 = (char *)v89;
  uint64_t v211 = v90;
  if (v90)
  {
    unint64_t v91 = 0;
    uint64_t v17 = (uint64_t)_swiftEmptyArrayStorage;
    unint64_t v62 = (unint64_t)v210;
    unint64_t v204 = v88;
    do
    {
      unint64_t v65 = *(void *)(v89 + 16);
      if (v91 >= v65) {
        goto LABEL_132;
      }
      unint64_t v92 = (*(unsigned __int8 *)(v208 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80);
      uint64_t v93 = *(void *)(v208 + 72);
      sub_1002B1494(v89 + v92 + v93 * v91, v63, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (*(unsigned __int8 *)(v63 + *(int *)(v62 + 28)) == v201)
      {
        sub_1002B14FC(v63, v197, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B721C(0, *(void *)(v17 + 16) + 1, 1);
          unint64_t v63 = v202;
        }
        uint64_t v17 = v216[0];
        unint64_t v95 = *(void *)(v216[0] + 16);
        unint64_t v94 = *(void *)(v216[0] + 24);
        if (v95 >= v94 >> 1)
        {
          sub_1000B721C(v94 > 1, v95 + 1, 1);
          unint64_t v63 = v202;
          uint64_t v17 = v216[0];
        }
        *(void *)(v17 + 16) = v95 + 1;
        sub_1002B14FC(v197, v17 + v92 + v95 * v93, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        unint64_t v62 = (unint64_t)v210;
        uint64_t v66 = (uint64_t)v193;
      }
      else
      {
        sub_1002AD9D8(v63);
      }
      ++v91;
      uint64_t isUniquelyReferenced_nonNull_native = v214;
      a2 = v204;
      uint64_t v89 = (uint64_t)v206;
    }
    while (v211 != (uint64_t *)v91);
    uint64_t v96 = (void *)v216[0];
    a6 = (uint64_t)v207;
  }
  else
  {
    uint64_t v96 = _swiftEmptyArrayStorage;
  }
  uint64_t v97 = v96[2];
  uint64_t v202 = (uint64_t)v96;
  if (v97)
  {
    uint64_t v17 = (uint64_t)v96 + ((*(unsigned __int8 *)(v208 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80));
    uint64_t v203 = *(void *)(v208 + 72);
    swift_retain();
    uint64_t v98 = (uint64_t)v209;
    do
    {
      sub_1002B1494(v17, v66, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      unint64_t v63 = *(void *)(v66 + v210[8]);
      swift_bridgeObjectRetain();
      char v99 = swift_isUniquelyReferenced_nonNull_native();
      v216[0] = v98;
      sub_1002AC3B8(v63, (uint64_t)sub_1002AC328, 0, v99, (uint64_t)v216);
      if (a2) {
        goto LABEL_142;
      }
      a2 = 0;
      uint64_t v98 = v216[0];
      swift_bridgeObjectRelease();
      sub_1002AD9D8(v66);
      v17 += v203;
      --v97;
    }
    while (v97);
    uint64_t v209 = (void *)v98;
    swift_release();
    uint64_t v89 = (uint64_t)v206;
    a6 = (uint64_t)v207;
  }
  v216[0] = (uint64_t)_swiftEmptyArrayStorage;
  unint64_t v62 = (unint64_t)v200;
  if (v211)
  {
    unint64_t v204 = a2;
    a2 = 0;
    while (1)
    {
      unint64_t v65 = *(void *)(v89 + 16);
      if (a2 >= v65) {
        goto LABEL_133;
      }
      unint64_t v100 = (*(unsigned __int8 *)(v208 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80);
      uint64_t v203 = *(void *)(v208 + 72);
      uint64_t v17 = (uint64_t)type metadata accessor for OwnerSharingCircle;
      uint64_t v101 = v205;
      sub_1002B1494(v89 + v100 + v203 * a2, v205, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      unint64_t v63 = *(unsigned __int8 *)(v101 + v210[7]);
      sub_1002B1494(v101, v62, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (v63 == v198)
      {
        uint64_t v102 = swift_bridgeObjectRetain();
        uint64_t v103 = sub_10070FB1C(v102);
        swift_bridgeObjectRelease();
        uint64_t v17 = sub_101158244(v103);
        swift_release();
        uint64_t v104 = swift_bridgeObjectRetain();
        unint64_t v63 = sub_101151CEC(v104);
        char v105 = sub_1002AB654(v63, v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1002AD9D8(v62);
        if ((v105 & 1) == 0)
        {
          sub_1002B14FC(v205, v189, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          uint64_t v17 = v216[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            unint64_t v63 = (unint64_t)v216;
            sub_1000B721C(0, *(void *)(v17 + 16) + 1, 1);
            uint64_t v17 = v216[0];
          }
          uint64_t v106 = v203;
          unint64_t v108 = *(void *)(v17 + 16);
          unint64_t v107 = *(void *)(v17 + 24);
          if (v108 >= v107 >> 1)
          {
            unint64_t v63 = (unint64_t)v216;
            sub_1000B721C(v107 > 1, v108 + 1, 1);
            uint64_t v17 = v216[0];
          }
          *(void *)(v17 + 16) = v108 + 1;
          sub_1002B14FC(v189, v17 + v100 + v108 * v106, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          goto LABEL_62;
        }
      }
      else
      {
        sub_1002AD9D8(v62);
      }
      sub_1002AD9D8(v205);
LABEL_62:
      ++a2;
      uint64_t isUniquelyReferenced_nonNull_native = v214;
      uint64_t v89 = (uint64_t)v206;
      a6 = (uint64_t)v207;
      unint64_t v62 = (unint64_t)v200;
      if (v211 == (uint64_t *)a2)
      {
        int64_t v197 = v216[0];
        a2 = v204;
        goto LABEL_73;
      }
    }
  }
  int64_t v197 = (int64_t)_swiftEmptyArrayStorage;
LABEL_73:
  swift_bridgeObjectRelease();
  size_t v218 = _swiftEmptyArrayStorage;
  uint64_t v109 = v210;
  uint64_t v110 = v187;
  UUID.init()();
  uint64_t v111 = (char *)v110 + v109[6];
  uint64_t v196 = *(void (**)(char *, uint64_t, uint64_t))a6;
  v196(v111, v188, isUniquelyReferenced_nonNull_native);
  long long v195 = xmmword_101348180;
  *uint64_t v110 = xmmword_101348180;
  *((unsigned char *)v110 + v109[7]) = (_BYTE)v201;
  *(void *)((char *)v110 + v109[8]) = v209;
  *((unsigned char *)v110 + v109[9]) = v185;
  unint64_t v62 = v180;
  sub_1002B1494((uint64_t)v110, v180, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_bridgeObjectRetain();
  uint64_t v199 = (void *)sub_100A6F2F4(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  unint64_t v63 = v199[2];
  unint64_t v65 = v199[3];
  uint64_t v17 = v63 + 1;
  if (v63 >= v65 >> 1) {
    goto LABEL_137;
  }
LABEL_74:
  unint64_t v204 = a2;
  unint64_t v112 = (unint64_t)v199;
  v199[2] = v17;
  uint64_t v200 = (char *)((*(unsigned __int8 *)(v208 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80));
  unint64_t v205 = *(void *)(v208 + 72);
  sub_1002B14FC(v62, (uint64_t)&v200[v112 + v205 * v63], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v113 = type metadata accessor for Logger();
  uint64_t v114 = sub_100010324(v113, (uint64_t)qword_10170D788);
  a2 = v181;
  sub_1002B1494((uint64_t)v187, v181, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v115 = v186;
  v196(v186, v188, isUniquelyReferenced_nonNull_native);
  uint64_t v116 = Logger.logObject.getter();
  os_log_type_t v117 = static os_log_type_t.default.getter();
  int v118 = v117;
  BOOL v119 = os_log_type_enabled(v116, v117);
  uint64_t v194 = v114;
  if (v119)
  {
    uint64_t v120 = swift_slowAlloc();
    uint64_t v208 = swift_slowAlloc();
    v216[0] = v208;
    *(_DWORD *)uint64_t v120 = 134350083;
    uint64_t v217 = v201;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v120 + 12) = 2160;
    uint64_t v217 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v120 + 22) = 2081;
    LODWORD(v206) = v118;
    sub_1002ADA80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v121 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v217 = sub_1008FA0F0(v121, v122, v216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002AD9D8(a2);
    *(_WORD *)(v120 + 32) = 2160;
    uint64_t v217 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v120 + 42) = 2081;
    a2 = (unint64_t)v186;
    uint64_t isUniquelyReferenced_nonNull_native = v214;
    uint64_t v123 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v217 = sub_1008FA0F0(v123, v124, v216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v211 = (uint64_t *)*v213;
    ((void (*)(unint64_t, uint64_t))v211)(a2, isUniquelyReferenced_nonNull_native);
    _os_log_impl((void *)&_mh_execute_header, v116, (os_log_type_t)v206, "Create a new type: %{public}ld\ncircle: %{private,mask.hash}s,\nfor beacon:%{private,mask.hash}s.", (uint8_t *)v120, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1002AD9D8(a2);
    uint64_t v211 = (uint64_t *)*v213;
    ((void (*)(char *, uint64_t))v211)(v115, isUniquelyReferenced_nonNull_native);
  }

  unint64_t v125 = v204;
  size_t v218 = (void *)v202;
  uint64_t v126 = *(void *)(v202 + 16);
  if (v126)
  {
    uint64_t v127 = (uint64_t)&v200[v202];
    swift_retain();
    uint64_t v128 = v188;
    uint64_t v129 = v210;
    uint64_t v130 = (uint64_t)v201;
    a2 = v205;
    do
    {
      sub_1002ABB74(v127, v130, v128);
      v127 += a2;
      --v126;
    }
    while (v126);
    swift_release();
  }
  else
  {
    uint64_t v129 = v210;
  }
  uint64_t v131 = v192;
  uint64_t v203 = *(void *)(v197 + 16);
  unint64_t v204 = v125;
  if (!v203)
  {
    swift_release();
    swift_bridgeObjectRelease();
    a6 = (uint64_t)v199;
    uint64_t isUniquelyReferenced_nonNull_native = v205;
    goto LABEL_118;
  }
  uint64_t v132 = (uint64_t)&v200[v197];
  swift_retain();
  uint64_t v133 = 0;
  uint64_t v134 = _swiftEmptyDictionarySingleton;
  uint64_t v202 = v132;
  do
  {
    uint64_t v208 = v133;
    sub_1002B1494(v132 + v133 * v205, v131, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v135 = *(void *)(v131 + v129[8]);
    swift_bridgeObjectRetain();
    uint64_t v17 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v136 = -1 << *(unsigned char *)(v135 + 32);
    uint64_t v137 = ~v136;
    uint64_t v138 = -v136;
    if (v138 < 64) {
      uint64_t v139 = ~(-1 << v138);
    }
    else {
      uint64_t v139 = -1;
    }
    uint64_t v140 = v139 & *(void *)(v135 + 64);
    v216[0] = v135;
    v216[1] = v135 + 64;
    v216[2] = v137;
    v216[3] = 0;
    v216[4] = v140;
    v216[5] = (uint64_t)sub_1002AC328;
    v216[6] = 0;
    uint64_t v217 = (uint64_t)v134;
    uint64_t v206 = (char *)v135;
    swift_bridgeObjectRetain();
    sub_100BD73D8((uint64_t)v13);
    uint64_t v141 = sub_10000588C(&qword_101640960);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v141 - 8) + 48))(v13, 1, v141) != 1)
    {
      a2 = *v215;
      do
      {
        uint64_t v142 = *(int *)(v141 + 48);
        ((void (*)(char *, char *, uint64_t))a2)(v48, v13, isUniquelyReferenced_nonNull_native);
        char v143 = v13[v142];
        unint64_t v63 = (unint64_t)v134;
        unint64_t v62 = sub_1007240CC((uint64_t)v48);
        unint64_t v65 = v134[2];
        BOOL v145 = (v144 & 1) == 0;
        uint64_t v146 = v65 + v145;
        if (__OFADD__(v65, v145))
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          uint64_t v199 = (void *)sub_100A6F2F4(v65 > 1, v17, 1, (unint64_t)v199);
          goto LABEL_74;
        }
        char v147 = v144;
        if (v134[3] >= v146)
        {
          if (v17)
          {
            if (v144) {
              goto LABEL_92;
            }
          }
          else
          {
            unint64_t v63 = (unint64_t)&v217;
            sub_100E7F8E0();
            if (v147) {
              goto LABEL_92;
            }
          }
        }
        else
        {
          sub_100E67CB8(v146, v17 & 1);
          unint64_t v63 = v217;
          unint64_t v148 = sub_1007240CC((uint64_t)v48);
          if ((v147 & 1) != (v149 & 1)) {
            goto LABEL_141;
          }
          unint64_t v62 = v148;
          if (v147)
          {
LABEL_92:
            uint64_t isUniquelyReferenced_nonNull_native = v214;
            ((void (*)(char *, uint64_t))v211)(v48, v214);
            uint64_t v134 = (void *)v217;
            *(unsigned char *)(*(void *)(v217 + 56) + v62) = v143;
            goto LABEL_93;
          }
        }
        uint64_t v134 = (void *)v217;
        *(void *)(v217 + 8 * (v62 >> 6) + 64) |= 1 << v62;
        uint64_t isUniquelyReferenced_nonNull_native = v214;
        ((void (*)(unint64_t, char *, uint64_t))a2)(v134[6] + *(void *)(v212 + 72) * v62, v48, v214);
        *(unsigned char *)(v134[7] + v62) = v143;
        uint64_t v150 = v134[2];
        BOOL v84 = __OFADD__(v150, 1);
        unint64_t v65 = v150 + 1;
        if (v84) {
          goto LABEL_131;
        }
        v134[2] = v65;
LABEL_93:
        sub_100BD73D8((uint64_t)v13);
        uint64_t v141 = sub_10000588C(&qword_101640960);
        uint64_t v17 = 1;
      }
      while ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v141 - 8) + 48))(v13, 1, v141) != 1);
    }
    uint64_t v133 = v208 + 1;
    swift_bridgeObjectRelease();
    sub_100132C20();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v131 = v192;
    sub_1002AD9D8(v192);
    uint64_t v129 = v210;
    uint64_t v132 = v202;
  }
  while (v133 != v203);
  a2 = v197;
  swift_release();
  uint64_t v151 = (uint64_t)v209;
  swift_bridgeObjectRetain();
  unint64_t v152 = v204;
  uint64_t v153 = sub_1002ADEC8((uint64_t)v134, v151);
  unint64_t v204 = v152;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!*(void *)(v153 + 16))
  {
    swift_release();
    uint64_t v13 = v198;
    uint64_t v48 = (char *)v188;
    a6 = (uint64_t)v199;
    uint64_t isUniquelyReferenced_nonNull_native = v205;
    goto LABEL_113;
  }
  uint64_t v154 = v179;
  UUID.init()();
  uint64_t v48 = (char *)v188;
  uint64_t v155 = (void (*)(char *, char *, uint64_t))v196;
  v196((char *)v154 + v129[6], v188, isUniquelyReferenced_nonNull_native);
  *uint64_t v154 = v195;
  uint64_t v13 = v198;
  *((unsigned char *)v154 + v129[7]) = (_BYTE)v198;
  *(void *)((char *)v154 + v129[8]) = v153;
  *((unsigned char *)v154 + v129[9]) = v185;
  uint64_t v156 = v178;
  sub_1002B1494((uint64_t)v154, v178, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  v155(v176, v48, isUniquelyReferenced_nonNull_native);
  uint64_t v157 = Logger.logObject.getter();
  os_log_type_t v158 = static os_log_type_t.default.getter();
  int v159 = v158;
  if (os_log_type_enabled(v157, v158))
  {
    uint64_t v160 = swift_slowAlloc();
    LODWORD(v214) = v159;
    uint64_t v161 = v160;
    uint64_t v215 = (unint64_t *)swift_slowAlloc();
    v216[0] = (uint64_t)v215;
    *(_DWORD *)uint64_t v161 = 134350083;
    uint64_t v217 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v161 + 12) = 2160;
    uint64_t v217 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v161 + 22) = 2081;
    sub_1002ADA80((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v162 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v217 = sub_1008FA0F0(v162, v163, v216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002AD9D8(v156);
    *(_WORD *)(v161 + 32) = 2160;
    uint64_t v217 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v161 + 42) = 2081;
    uint64_t v13 = v198;
    uint64_t v164 = v176;
    uint64_t v165 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v217 = sub_1008FA0F0(v165, v166, v216);
    a2 = v197;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v211)(v164, isUniquelyReferenced_nonNull_native);
    _os_log_impl((void *)&_mh_execute_header, v157, (os_log_type_t)v214, "Create a new type: %{public}ld\ncircle: %{private,mask.hash}s,\nfor beacon:%{private,mask.hash}s.", (uint8_t *)v161, 0x34u);
    swift_arrayDestroy();
    uint64_t v48 = (char *)v188;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1002AD9D8(v156);
    ((void (*)(char *, uint64_t))v211)(v176, isUniquelyReferenced_nonNull_native);
  }

  unint64_t v62 = v175;
  sub_1002B1494((uint64_t)v179, v175, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  a6 = (uint64_t)v199;
  unint64_t v63 = v199[2];
  unint64_t v69 = v199[3];
  uint64_t v17 = v63 + 1;
  uint64_t isUniquelyReferenced_nonNull_native = v205;
  if (v63 >= v69 >> 1) {
    goto LABEL_140;
  }
  while (1)
  {
    *(void *)(a6 + 16) = v17;
    sub_1002B14FC(v62, (uint64_t)&v200[a6 + v63 * isUniquelyReferenced_nonNull_native], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_1002AD9D8((uint64_t)v179);
    uint64_t v132 = v202;
LABEL_113:
    uint64_t v167 = swift_retain();
    sub_100442B14(v167);
    uint64_t v168 = *(void *)(a2 + 16);
    if (v168)
    {
      swift_retain();
      unint64_t v169 = v204;
      do
      {
        sub_1002ABB74(v132, (uint64_t)v13, (uint64_t)v48);
        v132 += isUniquelyReferenced_nonNull_native;
        --v168;
      }
      while (v168);
      unint64_t v204 = v169;
      swift_release_n();
    }
    else
    {
      swift_release();
    }
LABEL_118:
    uint64_t v170 = qword_101636CD8;
    swift_bridgeObjectRetain();
    if (v170 != -1) {
      swift_once();
    }
    uint64_t v171 = v204;
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v17 = v171;
    unint64_t v62 = sub_1010AC198(v216[0]);
    swift_bridgeObjectRelease();
    unint64_t v63 = v62 - 1;
    if (v62) {
      break;
    }
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    a6 = sub_100A6F2F4(v69 > 1, v17, 1, a6);
  }
  uint64_t v172 = *(void *)(a6 + 16);
  if (v172)
  {
    uint64_t v173 = (uint64_t)&v200[a6];
    swift_bridgeObjectRetain();
    while ((sub_1002ABF68(v173, v63) & 1) == 0)
    {
      v173 += isUniquelyReferenced_nonNull_native;
      if (!--v172)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_127;
      }
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for SPBeaconSharingError(0);
    uint64_t v217 = 6;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1002ADA80((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    sub_1002AD9D8((uint64_t)v187);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_127:
    sub_1002AD9D8((uint64_t)v187);
  }
  return a6;
}

uint64_t sub_1002AFDC0()
{
  return static UUID.== infix(_:_:)() & 1;
}

void *sub_1002AFE10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for OwnerSharingCircle();
  uint64_t v5 = *((void *)v4 - 1);
  uint64_t v6 = __chkstk_darwin(v4);
  size_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (_OWORD *)((char *)&v25 - v9);
  sub_10000588C(&qword_101657700);
  uint64_t v11 = *(void *)(v5 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  sub_1002B1494(a2, v13 + v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  if (*(void *)(*(void *)(a2 + v4[8]) + 16) < 2uLL) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v26 = *(void *)(a2 + v4[8]);
  swift_bridgeObjectRetain();
  sub_100163D34(a1);
  UUID.init()();
  uint64_t v14 = v4[6];
  uint64_t v15 = a2 + v14;
  uint64_t v16 = (char *)v10 + v14;
  uint64_t v17 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v16, v15, v17);
  uint64_t v18 = v4[7];
  char v19 = *(unsigned char *)(a2 + v18);
  uint64_t v20 = v26;
  *uint64_t v10 = xmmword_101348180;
  *((unsigned char *)v10 + v18) = v19;
  *(void *)((char *)v10 + v4[8]) = v20;
  *((unsigned char *)v10 + v4[9]) = 1;
  sub_1002B1494((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  unint64_t v21 = sub_100A6F2F4(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  unint64_t v23 = *(void *)(v21 + 16);
  unint64_t v22 = *(void *)(v21 + 24);
  if (v23 >= v22 >> 1) {
    unint64_t v21 = sub_100A6F2F4(v22 > 1, v23 + 1, 1, v21);
  }
  *(void *)(v21 + 16) = v23 + 1;
  sub_1002B14FC((uint64_t)v8, v21 + v12 + v23 * v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_1002AD9D8((uint64_t)v10);
  return (void *)v21;
}

unint64_t sub_1002B00B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = a3;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101638D10);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v8 = (int *)type metadata accessor for OwnerSharingCircle();
  uint64_t v9 = *((void *)v8 - 1);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)v44 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v44 - v17;
  __chkstk_darwin(v16);
  uint64_t v50 = (uint64_t)v44 - v19;
  unint64_t v21 = (unint64_t)sub_1002AFE10(a1, a2);
  if (*(unsigned char *)(a2 + v8[7]))
  {
    v44[0] = (uint64_t)v18;
    uint64_t v46 = a2;
    unint64_t v47 = v20;
    uint64_t v48 = v12;
    sub_10000588C(&qword_101640978);
    uint64_t v22 = v9;
    unint64_t v23 = (int *)(sub_10000588C(&qword_101640960) - 8);
    unint64_t v24 = (*(unsigned __int8 *)(*(void *)v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v23 + 80);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_101342130;
    unint64_t v26 = v25 + v24;
    uint64_t v27 = v23[14];
    uint64_t v28 = type metadata accessor for UUID();
    uint64_t v29 = *(void *)(v28 - 8);
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
    v44[1] = v29 + 16;
    uint64_t v45 = v30;
    v30((char *)v26, a1, v28);
    *(unsigned char *)(v26 + v27) = 1;
    uint64_t v31 = v22;
    unint64_t v32 = sub_10092E3BC(v25);
    sub_10001D074(v49, (uint64_t)v7, (uint64_t *)&unk_101638D10);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v22 + 48))(v7, 1, v8) == 1)
    {
      sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_101638D10);
    }
    else
    {
      uint64_t v33 = v50;
      sub_1002B14FC((uint64_t)v7, v50, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v34 = *(void *)(v33 + v8[8]);
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v51 = v32;
      sub_1002AC78C(v34, (uint64_t)sub_1002AC328, 0, isUniquelyReferenced_nonNull_native, (uint64_t *)&v51);
      unint64_t v36 = v47;
      unint64_t v32 = v51;
      swift_bridgeObjectRelease();
      uint64_t v37 = v44[0];
      sub_1002B1494(v33, v44[0], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v36 = sub_100A6F2F4(0, *(void *)(v36 + 16) + 1, 1, v36);
      }
      unint64_t v39 = *(void *)(v36 + 16);
      unint64_t v38 = *(void *)(v36 + 24);
      if (v39 >= v38 >> 1) {
        unint64_t v36 = sub_100A6F2F4(v38 > 1, v39 + 1, 1, v36);
      }
      *(void *)(v36 + 16) = v39 + 1;
      sub_1002B14FC(v37, v36+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v39, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_1002AD9D8(v50);
    }
    UUID.init()();
    v45(&v15[v8[6]], v46 + v8[6], v28);
    *(_OWORD *)uint64_t v15 = xmmword_101348180;
    v15[v8[7]] = 0;
    *(void *)&v15[v8[8]] = v32;
    v15[v8[9]] = 1;
    uint64_t v40 = (uint64_t)v48;
    sub_1002B1494((uint64_t)v15, (uint64_t)v48, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v21 = sub_100A6F2F4(0, *(void *)(v21 + 16) + 1, 1, v21);
    }
    unint64_t v42 = *(void *)(v21 + 16);
    unint64_t v41 = *(void *)(v21 + 24);
    if (v42 >= v41 >> 1) {
      unint64_t v21 = sub_100A6F2F4(v41 > 1, v42 + 1, 1, v21);
    }
    *(void *)(v21 + 16) = v42 + 1;
    sub_1002B14FC(v40, v21+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v42, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_1002AD9D8((uint64_t)v15);
  }
  return v21;
}

uint64_t sub_1002B060C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v113 = a2;
  unint64_t v124 = a1;
  uint64_t v131 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  unint64_t v125 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101640968);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v121 = (uint64_t)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v120 = (uint64_t)&v105 - v9;
  uint64_t v10 = (int *)type metadata accessor for OwnerSharingCircle();
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v109 = (uint64_t)&v105 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v105 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v128 = (uint64_t)&v105 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v126 = (uint64_t *)((char *)&v105 - v23);
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v26 = (uint64_t *)((char *)&v105 - v25);
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v105 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v112 = (uint64_t)&v105 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v111 = (long long *)((char *)&v105 - v33);
  __chkstk_darwin(v32);
  uint64_t v35 = (char *)&v105 - v34;
  uint64_t v36 = sub_10000588C((uint64_t *)&unk_101638D10);
  uint64_t v37 = __chkstk_darwin(v36 - 8);
  uint64_t v114 = (uint64_t)&v105 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v116 = (uint64_t)&v105 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v118 = (uint64_t)&v105 - v42;
  __chkstk_darwin(v41);
  uint64_t v129 = (char *)&_swiftEmptySetSingleton;
  uint64_t v139 = &_swiftEmptySetSingleton;
  uint64_t v119 = a3;
  uint64_t v43 = a3;
  uint64_t v44 = (uint64_t)v125;
  uint64_t v122 = (uint64_t)&v105 - v45;
  sub_10001D074(v43, (uint64_t)&v105 - v45, (uint64_t *)&unk_101638D10);
  uint64_t v136 = v35;
  sub_1002B1494((uint64_t)v124, (uint64_t)v35, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  os_log_type_t v117 = (void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  unint64_t v46 = *(void *)(v113 + 16);
  uint64_t v123 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v106 = v4;
  unint64_t v108 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v135 = (void **)(v11 + 48);
  uint64_t v130 = v11;
  uint64_t v133 = (void (**)(uint64_t, uint64_t, uint64_t, int *))(v11 + 56);
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v48 = 0;
  long long v110 = xmmword_101342130;
  long long v107 = xmmword_101348180;
  unint64_t v115 = v46;
  while (1)
  {
    if (v48 == v46)
    {
      uint64_t v53 = sub_10000588C(&qword_101640970);
      uint64_t v54 = v121;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v121, 1, 1, v53);
      unint64_t v127 = v46;
      goto LABEL_8;
    }
    if (v48 >= v46) {
      break;
    }
    uint64_t v55 = sub_10000588C(&qword_101640970);
    uint64_t v56 = *(void *)(v55 - 8);
    uint64_t v54 = v121;
    sub_10001D074(v113+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(void *)(v56 + 72) * v48, v121, &qword_101640970);
    unint64_t v127 = v48 + 1;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v54, 0, 1, v55);
    uint64_t v44 = (uint64_t)v125;
LABEL_8:
    uint64_t v57 = v120;
    sub_1002B142C(v54, v120);
    uint64_t v58 = sub_10000588C(&qword_101640970);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 48))(v57, 1, v58) == 1)
    {
      swift_bridgeObjectRelease();
LABEL_52:
      uint64_t v104 = sub_100710214((uint64_t)v129);
      swift_bridgeObjectRelease();
      sub_100710214((uint64_t)v139);
      swift_bridgeObjectRelease();
      sub_1002AD9D8((uint64_t)v136);
      sub_10001DAB4(v122, (uint64_t *)&unk_101638D10);
      return (uint64_t)v104;
    }
    int v59 = *(unsigned __int8 *)(v57 + *(int *)(v58 + 48));
    (*v117)(v44, v57, v131);
    if (v59 == 1)
    {
      unint64_t v60 = (void *)sub_1002B00B8(v44, (uint64_t)v136, v122);
      uint64_t v137 = v61;
LABEL_20:
      uint64_t v71 = v126;
      goto LABEL_21;
    }
    sub_10000588C(&qword_101657700);
    unint64_t v62 = *(void **)(v130 + 72);
    unint64_t v63 = (*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80);
    uint64_t v64 = swift_allocObject();
    *(_OWORD *)(v64 + 16) = v110;
    uint64_t v137 = v64;
    uint64_t v65 = (uint64_t)v136;
    sub_1002B1494((uint64_t)v136, v64 + v63, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v66 = *(void *)(v65 + v10[8]);
    if (*(void *)(v66 + 16) < 2uLL)
    {
      unint64_t v60 = _swiftEmptyArrayStorage;
      goto LABEL_20;
    }
    uint64_t v134 = v62;
    swift_bridgeObjectRetain_n();
    unint64_t v67 = sub_1007240CC(v44);
    char v69 = v68;
    swift_bridgeObjectRelease();
    if (v69)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v138 = (char *)v66;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_100E7F8E0();
        uint64_t v66 = (uint64_t)v138;
      }
      (*(void (**)(unint64_t, uint64_t))(v106 + 8))(*(void *)(v66 + 48) + *(void *)(v106 + 72) * v67, v131);
      uint64_t v66 = (uint64_t)v138;
      sub_10016701C(v67, (uint64_t)v138);
      swift_bridgeObjectRelease();
    }
    uint64_t v71 = v126;
    uint64_t v72 = v111;
    UUID.init()();
    uint64_t v73 = (uint64_t)v136;
    (*v108)((char *)v72 + v10[6], (uint64_t)&v136[v10[6]], v131);
    uint64_t v74 = v10[7];
    char v75 = *(unsigned char *)(v73 + v74);
    *uint64_t v72 = v107;
    *((unsigned char *)v72 + v74) = v75;
    *(void *)((char *)v72 + v10[8]) = v66;
    *((unsigned char *)v72 + v10[9]) = 1;
    sub_1002B1494((uint64_t)v72, v112, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    unint64_t v60 = (void *)sub_100A6F2F4(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    unint64_t v77 = v60[2];
    unint64_t v76 = v60[3];
    if (v77 >= v76 >> 1) {
      unint64_t v60 = (void *)sub_100A6F2F4(v76 > 1, v77 + 1, 1, (unint64_t)v60);
    }
    v60[2] = v77 + 1;
    sub_1002B14FC(v112, (uint64_t)v60 + v63 + v77 * (void)v134, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_1002AD9D8((uint64_t)v111);
LABEL_21:
    char v78 = v129;
    uint64_t v138 = v129;
    uint64_t v79 = v60[2];
    if (v79)
    {
      uint64_t v80 = v130;
      uint64_t v81 = (uint64_t)v60
          + ((*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80));
      uint64_t v134 = v60;
      swift_bridgeObjectRetain();
      uint64_t v82 = *(void *)(v80 + 72);
      uint64_t v83 = v79;
      do
      {
        sub_1002B1494(v81, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        sub_100DCDBC4((uint64_t)v29, v26);
        sub_1002AD9D8((uint64_t)v29);
        v81 += v82;
        --v83;
      }
      while (v83);
      unint64_t v60 = v134;
      swift_bridgeObjectRelease();
      char v78 = v138;
      uint64_t v71 = v126;
    }
    uint64_t v84 = v137;
    uint64_t v85 = swift_bridgeObjectRetain();
    uint64_t v129 = sub_1008A2A00(v85, (uint64_t)v78);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    char v86 = sub_100272EC4(v124, v84);
    swift_bridgeObjectRelease();
    if (v86)
    {
      sub_1002B1494((uint64_t)v124, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_100DCDBC4((uint64_t)v29, v26);
      sub_1002AD9D8((uint64_t)v29);
    }
    uint64_t v87 = v118;
    sub_10001D074(v119, v118, (uint64_t *)&unk_101638D10);
    uint64_t v134 = *v135;
    if (((unsigned int (*)(uint64_t, uint64_t, int *))v134)(v87, 1, v10) == 1)
    {
      sub_10001DAB4(v87, (uint64_t *)&unk_101638D10);
      if (v79) {
        goto LABEL_29;
      }
    }
    else
    {
      sub_1002B14FC(v87, (uint64_t)v71, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v92 = v137;
      swift_bridgeObjectRetain();
      char v93 = sub_100272EC4(v71, v92);
      swift_bridgeObjectRelease();
      if (v93)
      {
        sub_1002B1494((uint64_t)v71, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        sub_100DCDBC4((uint64_t)v29, v26);
        sub_1002AD9D8((uint64_t)v29);
      }
      sub_1002AD9D8((uint64_t)v71);
      if (v79)
      {
LABEL_29:
        uint64_t v88 = v130;
        uint64_t v89 = (uint64_t)v60
            + ((*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80));
        swift_bridgeObjectRetain();
        uint64_t v90 = *(void *)(v88 + 72);
        uint64_t v91 = v79;
        while (1)
        {
          sub_1002B1494(v89, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          if (v19[v10[7]] == 2) {
            break;
          }
          sub_1002AD9D8((uint64_t)v19);
          v89 += v90;
          if (!--v91) {
            goto LABEL_37;
          }
        }
        uint64_t v95 = v116;
        sub_1002B14FC((uint64_t)v19, v116, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        unint64_t v94 = *v133;
        uint64_t v96 = v95;
        uint64_t v97 = 0;
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRetain();
LABEL_37:
    unint64_t v94 = *v133;
    uint64_t v95 = v116;
    uint64_t v96 = v116;
    uint64_t v97 = 1;
LABEL_39:
    uint64_t v132 = v94;
    v94(v96, v97, 1, v10);
    swift_bridgeObjectRelease();
    if (((unsigned int (*)(uint64_t, uint64_t, int *))v134)(v95, 1, v10) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*v123)(v125, v131);
      swift_bridgeObjectRelease();
      sub_10001DAB4(v95, (uint64_t *)&unk_101638D10);
      goto LABEL_52;
    }
    sub_1002B14FC(v95, v128, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v79)
    {
      uint64_t v98 = v130;
      uint64_t v99 = (uint64_t)v60
          + ((*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80));
      swift_bridgeObjectRetain();
      uint64_t v100 = *(void *)(v98 + 72);
      while (1)
      {
        sub_1002B1494(v99, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        if (!v14[v10[7]]) {
          break;
        }
        sub_1002AD9D8((uint64_t)v14);
        v99 += v100;
        if (!--v79) {
          goto LABEL_46;
        }
      }
      uint64_t v101 = v114;
      sub_1002B14FC((uint64_t)v14, v114, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v102 = v101;
      uint64_t v103 = 0;
    }
    else
    {
      swift_bridgeObjectRetain();
LABEL_46:
      uint64_t v101 = v114;
      uint64_t v102 = v114;
      uint64_t v103 = 1;
    }
    v132(v102, v103, 1, v10);
    uint64_t v44 = (uint64_t)v125;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    (*v123)((char *)v44, v131);
    sub_1002AD9D8((uint64_t)v136);
    if (((unsigned int (*)(uint64_t, uint64_t, int *))v134)(v101, 1, v10) == 1)
    {
      sub_10001DAB4(v101, (uint64_t *)&unk_101638D10);
    }
    else
    {
      uint64_t v49 = v44;
      uint64_t v50 = v122;
      sub_10001DAB4(v122, (uint64_t *)&unk_101638D10);
      uint64_t v51 = v109;
      sub_1002B14FC(v101, v109, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_1002B14FC(v51, v50, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v52 = v50;
      uint64_t v44 = v49;
      v132(v52, 0, 1, v10);
    }
    unint64_t v46 = v115;
    unint64_t v48 = v127;
    uint64_t result = sub_1002B14FC(v128, (uint64_t)v136, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002B142C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101640968);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B1494(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002B14FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *sub_1002B1564(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1002B16B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_1002B1780(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_1002B1890(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_1002B1A04(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_1002B1B14(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_1002B1C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002B1C9C);
}

uint64_t sub_1002B1C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1002B1D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002B1D1C);
}

uint64_t sub_1002B1D1C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_1002B1D9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_1002B1E04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t sub_1002B1E74()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_1002B1EEC(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, char a4)
{
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (!a4) {
    return (uint64_t)v4;
  }
  if (a4 != 1)
  {
    uint64_t v58 = _swiftEmptyArrayStorage;
    uint64_t v22 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (v22)
    {
      uint64_t v23 = a1 + 32;
      do
      {
        sub_10001D010(v23, (uint64_t)&v55);
        uint64_t v24 = v56;
        uint64_t v25 = v57;
        sub_10001CD44(&v55, v56);
        if ((*(uint64_t (**)(uint64_t, uint64_t))(v25 + 112))(v24, v25))
        {
          sub_10001CEB0(&v55, (uint64_t)v52);
          unint64_t v26 = v58;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B7570(0, v26[2] + 1, 1);
            unint64_t v26 = v58;
          }
          unint64_t v28 = v26[2];
          unint64_t v27 = v26[3];
          if (v28 >= v27 >> 1) {
            sub_1000B7570(v27 > 1, v28 + 1, 1);
          }
          uint64_t v29 = v53;
          uint64_t v30 = v54;
          uint64_t v31 = sub_1000BD078((uint64_t)v52, v53);
          __chkstk_darwin(v31);
          uint64_t v33 = (char *)&v49 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v34 + 16))(v33);
          sub_1006985B0(v28, (uint64_t)v33, (uint64_t *)&v58, v29, v30);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v52);
        }
        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v55);
        }
        v23 += 40;
        --v22;
      }
      while (v22);
      uint64_t v4 = v58;
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v4;
  }
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &off_1015A0F50;
  uint64_t v58 = _swiftEmptyArrayStorage;
  uint64_t v9 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v51 = v8;
  if (v9)
  {
    uint64_t v50 = (void (*)(uint64_t, uint64_t))a1;
    uint64_t v10 = a1 + 32;
    do
    {
      sub_10001D010(v10, (uint64_t)&v55);
      uint64_t v11 = v56;
      uint64_t v12 = v57;
      sub_10001CD44(&v55, v56);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v12 + 112))(v11, v12))
      {
        sub_10001CEB0(&v55, (uint64_t)v52);
        uint64_t v13 = v58;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v13[2] + 1, 1);
          uint64_t v13 = v58;
        }
        unint64_t v15 = v13[2];
        unint64_t v14 = v13[3];
        if (v15 >= v14 >> 1) {
          sub_1000B7570(v14 > 1, v15 + 1, 1);
        }
        uint64_t v16 = v53;
        uint64_t v17 = v54;
        uint64_t v18 = sub_1000BD078((uint64_t)v52, v53);
        __chkstk_darwin(v18);
        uint64_t v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v21 + 16))(v20);
        sub_1006985B0(v15, (uint64_t)v20, (uint64_t *)&v58, v16, v17);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v52);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v55);
      }
      v10 += 40;
      --v9;
    }
    while (v9);
    uint64_t v35 = v58;
    uint64_t v8 = v51;
  }
  else
  {
    uint64_t v35 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v58 = _swiftEmptyArrayStorage;
  uint64_t v36 = v35[2];
  swift_retain_n();
  swift_retain_n();
  uint64_t result = swift_retain_n();
  if (!v36)
  {
LABEL_39:
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release();
    return (uint64_t)v4;
  }
  unint64_t v38 = 0;
  uint64_t v39 = (uint64_t)(v35 + 4);
  uint64_t v50 = a2;
  while (v38 < v35[2])
  {
    sub_10001D010(v39, (uint64_t)&v55);
    if (sub_1002B25B4(&v55, a3, a2, (uint64_t (*)(char *))sub_1002B25AC, v8))
    {
      sub_10001CEB0(&v55, (uint64_t)v52);
      uint64_t v40 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7570(0, v40[2] + 1, 1);
        uint64_t v40 = v58;
      }
      unint64_t v42 = v40[2];
      unint64_t v41 = v40[3];
      if (v42 >= v41 >> 1) {
        sub_1000B7570(v41 > 1, v42 + 1, 1);
      }
      uint64_t v43 = v53;
      uint64_t v44 = v54;
      uint64_t v45 = sub_1000BD078((uint64_t)v52, v53);
      __chkstk_darwin(v45);
      unint64_t v47 = (char *)&v49 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v48 + 16))(v47);
      sub_1006985B0(v42, (uint64_t)v47, (uint64_t *)&v58, v43, v44);
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v52);
      a2 = v50;
      uint64_t v8 = v51;
    }
    else
    {
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v55);
    }
    ++v38;
    v39 += 40;
    if (v36 == v38)
    {
      uint64_t v4 = v58;
      goto LABEL_39;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1002B24D4(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for BeaconObservation();
  uint64_t v5 = *(void *)(a2 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = qword_101353860[*(char *)(a1 + *(int *)(result + 24))];
  if (qword_101353860[*(char *)(a2 + 32)] == v6) {
    return 1;
  }
  if (v5 == 1) {
    return 0;
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v8 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    uint64_t v9 = qword_101353860[*(char *)(a2 + i)];
    uint64_t result = v9 == v6;
    if (v9 == v6 || v8 == v5) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1002B2574()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002B25AC(uint64_t a1)
{
  return sub_1002B24D4(a1, *(void *)(v1 + 16));
}

BOOL sub_1002B25B4(void *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t (*a4)(char *), void *a5)
{
  unint64_t v70 = a5;
  char v69 = a4;
  unint64_t v76 = a3;
  uint64_t v77 = a2;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v6 - 8);
  uint64_t v83 = (uint64_t)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v8 - 8);
  uint64_t v84 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016511A0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v85 = v13;
  uint64_t v86 = v14;
  uint64_t v15 = __chkstk_darwin(v13);
  char v75 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v68 - v17;
  uint64_t v19 = sub_10000588C(&qword_10163BBA0);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for BeaconStatus(0);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v71 = (uint64_t)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v82 = *(void *)(v25 - 8);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v81 = (uint64_t)&v68 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v80 = (char *)&v68 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v79 = (char *)&v68 - v31;
  __chkstk_darwin(v30);
  char v78 = (char *)&v68 - v32;
  uint64_t v34 = a1[3];
  uint64_t v33 = a1[4];
  uint64_t v35 = sub_10001CD44(a1, v34);
  uint64_t v36 = *(void *)(*(void *)(v33 + 8) + 8);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v36 + 32);
  uint64_t v73 = v35;
  uint64_t v74 = v34;
  uint64_t v72 = v37;
  v37(v34, v36);
  sub_100AE9138((uint64_t)v18, (uint64_t)v12);
  uint64_t v38 = sub_10000588C(&qword_1016511B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v12, 1, v38) == 1)
  {
    sub_10001DAB4((uint64_t)v12, (uint64_t *)&unk_1016511A0);
    uint64_t v39 = 1;
  }
  else
  {
    sub_1002B2EC0((uint64_t)v12, (uint64_t)v21);
    uint64_t v39 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, v39, 1, v22);
  uint64_t v40 = v85;
  unint64_t v41 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
  v86 += 8;
  unint64_t v76 = v41;
  v41((uint64_t)v18, v85);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    sub_10001DAB4((uint64_t)v21, &qword_10163BBA0);
    uint64_t v42 = v82;
    uint64_t v43 = v78;
  }
  else
  {
    uint64_t v44 = v71;
    sub_1002B2EC0((uint64_t)v21, v71);
    uint64_t v42 = v82;
    uint64_t v43 = v78;
    if ((*(unsigned char *)(v44 + *(int *)(v22 + 32)) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v78, v44 + *(int *)(v22 + 24), v25);
      sub_1002B2F24(v44, type metadata accessor for BeaconStatus);
      goto LABEL_10;
    }
    sub_1002B2F24(v44, type metadata accessor for BeaconStatus);
  }
  static Date.distantPast.getter();
LABEL_10:
  uint64_t v45 = v79;
  uint64_t v46 = (uint64_t)v75;
  v72(v74, v36);
  sub_10000588C(&qword_101655540);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v48 = v87;
  if (*(void *)(v87 + 16) && (unint64_t v49 = sub_1007240CC(v46), (v50 & 1) != 0))
  {
    uint64_t v51 = *(void *)(*(void *)(v48 + 56) + 8 * v49);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v52 = sub_1007100C0(v51);
    swift_bridgeObjectRelease();
    size_t v53 = sub_100B752E8((uint64_t)v52);
    swift_release();
    uint64_t v54 = v70;
    swift_retain();
    uint64_t v55 = v53;
    uint64_t v40 = v85;
    uint64_t v56 = (void *)sub_1000A43B4(v69, v54, v55);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v56 = _swiftEmptyArrayStorage;
  }
  v76(v46, v40);
  uint64_t v57 = v83;
  sub_100E4D5E0((uint64_t)v56, v83);
  swift_bridgeObjectRelease();
  uint64_t v58 = type metadata accessor for BeaconObservation();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 48))(v57, 1, v58) == 1)
  {
    sub_10001DAB4(v57, (uint64_t *)&unk_101655530);
    uint64_t v59 = (uint64_t)v84;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v84, 1, 1, v25);
LABEL_17:
    static Date.distantPast.getter();
    sub_10001DAB4(v59, (uint64_t *)&unk_10163AC90);
    goto LABEL_19;
  }
  uint64_t v60 = v57 + *(int *)(v58 + 20);
  uint64_t v59 = (uint64_t)v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v84, v60, v25);
  sub_1002B2F24(v57, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v59, 0, 1, v25);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v59, 1, v25) == 1) {
    goto LABEL_17;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v45, v59, v25);
LABEL_19:
  sub_1002B2E68();
  if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
    uint64_t v61 = v45;
  }
  else {
    uint64_t v61 = v43;
  }
  unint64_t v62 = v80;
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v80, v61, v25);
  uint64_t v63 = v81;
  static Date.trustedNow.getter(v81);
  Date.timeIntervalSince(_:)();
  double v65 = v64;
  uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  v66(v63, v25);
  v66((uint64_t)v62, v25);
  v66((uint64_t)v45, v25);
  v66((uint64_t)v43, v25);
  return fabs(v65) <= 1800.0;
}

unint64_t sub_1002B2E68()
{
  unint64_t result = qword_1016605E0;
  if (!qword_1016605E0)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016605E0);
  }
  return result;
}

uint64_t sub_1002B2EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B2F24(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1002B2F84(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1002B2FB4();
  unint64_t result = sub_1002B3008();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1002B2FB4()
{
  unint64_t result = qword_101640A18;
  if (!qword_101640A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640A18);
  }
  return result;
}

unint64_t sub_1002B3008()
{
  unint64_t result = qword_101640A20;
  if (!qword_101640A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101640A20);
  }
  return result;
}

uint64_t sub_1002B305C(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v4, v5);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v2)
  {
    sub_1000BD078((uint64_t)v4, v5);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v4, v5);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v4, v5);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1001F1980(v1 + 64, (uint64_t)v7);
    sub_1001F1980((uint64_t)v7, (uint64_t)&v8);
    if (*((void *)&v8 + 1) >> 60 != 15)
    {
      sub_1000BD078((uint64_t)v4, v5);
      dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    }
    sub_1001F1980(v1 + 80, (uint64_t)v6);
    sub_1001F1980((uint64_t)v6, (uint64_t)&v9);
    if (*((void *)&v9 + 1) >> 60 != 15)
    {
      sub_1000BD078((uint64_t)v4, v5);
      dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v4);
}

double sub_1002B32B4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1002B3528(a1, v8);
  if (!v2)
  {
    long long v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    long long v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    double result = *(double *)v8;
    long long v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_1002B3300(void *a1)
{
  return sub_1002B305C(a1);
}

uint64_t sub_1002B3344@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v13) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x1002B34E8);
      }
      uint64_t v13 = (int)v13;
LABEL_6:
      if (v13 != 89) {
        goto LABEL_34;
      }
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v17) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_28;
          }
          uint64_t v17 = (int)v17;
LABEL_12:
          if (v17 != 32) {
            goto LABEL_35;
          }
          switch(a8 >> 62)
          {
            case 1uLL:
              LODWORD(v20) = HIDWORD(a7) - a7;
              if (__OFSUB__(HIDWORD(a7), a7)) {
                goto LABEL_30;
              }
              uint64_t v20 = (int)v20;
LABEL_18:
              if (v20 != 100) {
                goto LABEL_36;
              }
              switch(a6 >> 62)
              {
                case 1uLL:
                  LODWORD(v23) = HIDWORD(a5) - a5;
                  if (__OFSUB__(HIDWORD(a5), a5)) {
                    goto LABEL_32;
                  }
                  uint64_t v23 = (int)v23;
LABEL_24:
                  if (v23 != 60) {
                    goto LABEL_37;
                  }
                  *a9 = result;
                  a9[1] = a2;
                  a9[2] = a3;
                  a9[3] = a4;
                  a9[4] = a5;
                  a9[5] = a6;
                  a9[6] = a7;
                  a9[7] = a8;
                  a9[8] = a10;
                  a9[9] = a11;
                  a9[10] = a12;
                  a9[11] = a13;
                  return result;
                case 2uLL:
                  uint64_t v25 = *(void *)(a5 + 16);
                  uint64_t v24 = *(void *)(a5 + 24);
                  BOOL v16 = __OFSUB__(v24, v25);
                  uint64_t v23 = v24 - v25;
                  if (!v16) {
                    goto LABEL_24;
                  }
                  goto LABEL_33;
                case 3uLL:
                  goto LABEL_37;
                default:
                  uint64_t v23 = BYTE6(a6);
                  goto LABEL_24;
              }
            case 2uLL:
              uint64_t v22 = *(void *)(a7 + 16);
              uint64_t v21 = *(void *)(a7 + 24);
              BOOL v16 = __OFSUB__(v21, v22);
              uint64_t v20 = v21 - v22;
              if (!v16) {
                goto LABEL_18;
              }
              goto LABEL_31;
            case 3uLL:
              goto LABEL_36;
            default:
              uint64_t v20 = BYTE6(a8);
              goto LABEL_18;
          }
        case 2uLL:
          uint64_t v19 = *(void *)(a3 + 16);
          uint64_t v18 = *(void *)(a3 + 24);
          BOOL v16 = __OFSUB__(v18, v19);
          uint64_t v17 = v18 - v19;
          if (!v16) {
            goto LABEL_12;
          }
          goto LABEL_29;
        case 3uLL:
          goto LABEL_35;
        default:
          uint64_t v17 = BYTE6(a4);
          goto LABEL_12;
      }
    case 2uLL:
      uint64_t v15 = *(void *)(result + 16);
      uint64_t v14 = *(void *)(result + 24);
      BOOL v16 = __OFSUB__(v14, v15);
      uint64_t v13 = v14 - v15;
      if (!v16) {
        goto LABEL_6;
      }
      goto LABEL_27;
    case 3uLL:
      goto LABEL_34;
    default:
      uint64_t v13 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1002B3528@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v27, v28);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000BD078((uint64_t)v27, v28);
    uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v30 = v10;
    sub_1000BD078((uint64_t)v27, v28);
    uint64_t v25 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v26 = v11;
    sub_1000BD078((uint64_t)v27, v28);
    uint64_t v23 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v24 = v12;
    sub_1000BD078((uint64_t)v27, v28);
    uint64_t v13 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    uint64_t v21 = v14;
    uint64_t v22 = v13;
    sub_1000BD078((uint64_t)v27, v28);
    uint64_t v15 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    sub_1002B3344(v7, v8, v9, v30, v23, v24, v25, v26, v29, v22, v21, v15, v16);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    long long v18 = v29[3];
    a2[2] = v29[2];
    a2[3] = v18;
    long long v19 = v29[5];
    a2[4] = v29[4];
    a2[5] = v19;
    long long v20 = v29[1];
    *a2 = v29[0];
    a2[1] = v20;
  }
  return result;
}

uint64_t destroy for AirPodsFinalizePairingCommandPayload(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  sub_10001CFB8(a1[4], a1[5]);
  uint64_t result = sub_10001CFB8(a1[6], a1[7]);
  unint64_t v3 = a1[9];
  if (v3 >> 60 != 15) {
    uint64_t result = sub_10001CFB8(a1[8], v3);
  }
  unint64_t v4 = a1[11];
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = a1[10];
    return sub_10001CFB8(v5, v4);
  }
  return result;
}

uint64_t initializeWithCopy for AirPodsFinalizePairingCommandPayload(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  unint64_t v12 = a2 + 8;
  unint64_t v13 = a2[9];
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
  }
  else
  {
    uint64_t v14 = *v12;
    sub_1000361E0(*v12, a2[9]);
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = v13;
  }
  uint64_t v15 = a2 + 10;
  unint64_t v16 = a2[11];
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v17 = *v15;
    sub_1000361E0(*v15, v16);
    *(void *)(a1 + 80) = v17;
    *(void *)(a1 + 88) = v16;
  }
  return a1;
}

uint64_t *assignWithCopy for AirPodsFinalizePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[4];
  unint64_t v13 = a2[5];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[6];
  unint64_t v17 = a2[7];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[6];
  unint64_t v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_10001CFB8(v18, v19);
  long long v20 = a2 + 8;
  unint64_t v21 = a2[9];
  if ((unint64_t)a1[9] >> 60 == 15)
  {
    if (v21 >> 60 != 15)
    {
      uint64_t v22 = *v20;
      sub_1000361E0(*v20, a2[9]);
      a1[8] = v22;
      a1[9] = v21;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v21 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)(a1 + 8));
LABEL_6:
    *((_OWORD *)a1 + 4) = *(_OWORD *)v20;
    goto LABEL_8;
  }
  uint64_t v23 = *v20;
  sub_1000361E0(*v20, a2[9]);
  uint64_t v24 = a1[8];
  unint64_t v25 = a1[9];
  a1[8] = v23;
  a1[9] = v21;
  sub_10001CFB8(v24, v25);
LABEL_8:
  unint64_t v26 = a2 + 10;
  unint64_t v27 = a2[11];
  if ((unint64_t)a1[11] >> 60 != 15)
  {
    if (v27 >> 60 != 15)
    {
      uint64_t v29 = *v26;
      sub_1000361E0(*v26, v27);
      uint64_t v30 = a1[10];
      unint64_t v31 = a1[11];
      a1[10] = v29;
      a1[11] = v27;
      sub_10001CFB8(v30, v31);
      return a1;
    }
    sub_1001356D0((uint64_t)(a1 + 10));
    goto LABEL_13;
  }
  if (v27 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 5) = *(_OWORD *)v26;
    return a1;
  }
  uint64_t v28 = *v26;
  sub_1000361E0(*v26, v27);
  a1[10] = v28;
  a1[11] = v27;
  return a1;
}

__n128 initializeWithTake for AirPodsFinalizePairingCommandPayload(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for AirPodsFinalizePairingCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = (_OWORD *)(a2 + 64);
  unint64_t v13 = *(void *)(a1 + 72);
  if (v13 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v14 = *(void *)(a2 + 72);
  if (v14 >> 60 == 15)
  {
    sub_1001356D0(a1 + 64);
LABEL_4:
    *(_OWORD *)(a1 + 64) = *v12;
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)v12;
  *(void *)(a1 + 72) = v14;
  sub_10001CFB8(v15, v13);
LABEL_6:
  uint64_t v16 = (void *)(a2 + 80);
  unint64_t v17 = *(void *)(a1 + 88);
  if (v17 >> 60 != 15)
  {
    unint64_t v18 = *(void *)(a2 + 88);
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = *v16;
      *(void *)(a1 + 88) = v18;
      sub_10001CFB8(v19, v17);
      return a1;
    }
    sub_1001356D0(a1 + 80);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsFinalizePairingCommandPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsFinalizePairingCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsFinalizePairingCommandPayload()
{
  return &type metadata for AirPodsFinalizePairingCommandPayload;
}

uint64_t sub_1002B3C90()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_101640A28);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_101640A28);
  if (qword_101636A40 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170DD28);
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002B3D58@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 24);
  return swift_retain();
}

unsigned char *sub_1002B3D78@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1002B3D84()
{
  sub_10000588C(&qword_101640CA8);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101342130;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + 32);
  unsigned int v3 = v2 + 4;
  uint64_t v4 = v2 + 5;
  os_unfair_lock_lock(v2 + 5);
  sub_1002B3D78(v3, &v6);
  os_unfair_lock_unlock(v4);
  *(unsigned char *)(v1 + 32) = v6;
  AsyncStreamProvider.stream(initialEvents:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002B3E50()
{
  uint64_t v0 = sub_10000588C(&qword_10163CE70);
  sub_10001E384(v0, qword_10170DAD0);
  sub_100010324(v0, (uint64_t)qword_10170DAD0);
  sub_100062734(&qword_101640BC0, &qword_10163CE70);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B3EFC()
{
  uint64_t v0 = sub_10000588C(&qword_10163CE70);
  sub_10001E384(v0, qword_10170DAE8);
  sub_100010324(v0, (uint64_t)qword_10170DAE8);
  sub_100062734(&qword_101640BC0, &qword_10163CE70);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B3FA0()
{
  uint64_t v0 = sub_10000588C(&qword_10163CEC8);
  sub_10001E384(v0, qword_10170DB00);
  sub_100010324(v0, (uint64_t)qword_10170DB00);
  sub_100062734(&qword_101640BB0, &qword_10163CEC8);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B403C()
{
  uint64_t v0 = sub_10000588C(&qword_10163CE78);
  sub_10001E384(v0, qword_10170DB18);
  sub_100010324(v0, (uint64_t)qword_10170DB18);
  sub_100062734(&qword_101640BB8, &qword_10163CE78);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B40DC()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF58);
  sub_10001E384(v0, qword_10170DB30);
  sub_100010324(v0, (uint64_t)qword_10170DB30);
  sub_100062734(&qword_10163CF80, &qword_10163CF58);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B4180()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF58);
  sub_10001E384(v0, qword_10170DB48);
  sub_100010324(v0, (uint64_t)qword_10170DB48);
  sub_100062734(&qword_10163CF80, &qword_10163CF58);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B422C()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF58);
  sub_10001E384(v0, qword_10170DB60);
  sub_100010324(v0, (uint64_t)qword_10170DB60);
  sub_100062734(&qword_10163CF80, &qword_10163CF58);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B42D8()
{
  uint64_t v0 = sub_10000588C(&qword_101640BE8);
  sub_10001E384(v0, qword_10170DB78);
  sub_100010324(v0, (uint64_t)qword_10170DB78);
  sub_100062734(&qword_101640BF0, &qword_101640BE8);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B4370()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF78);
  sub_10001E384(v0, qword_10170DB90);
  sub_100010324(v0, (uint64_t)qword_10170DB90);
  sub_100062734(&qword_101640C38, &qword_10163CF78);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B441C()
{
  uint64_t v0 = sub_10000588C(&qword_101640C28);
  sub_10001E384(v0, qword_10170DBA8);
  sub_100010324(v0, (uint64_t)qword_10170DBA8);
  sub_100062734(&qword_101640C30, &qword_101640C28);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B44B8()
{
  uint64_t v0 = sub_10000588C(&qword_101640BE8);
  sub_10001E384(v0, qword_10170DBC0);
  sub_100010324(v0, (uint64_t)qword_10170DBC0);
  sub_100062734(&qword_101640BF0, &qword_101640BE8);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B4564()
{
  uint64_t v0 = sub_10000588C(&qword_101640C28);
  sub_10001E384(v0, qword_10170DBD8);
  sub_100010324(v0, (uint64_t)qword_10170DBD8);
  sub_100062734(&qword_101640C30, &qword_101640C28);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B460C()
{
  uint64_t v0 = sub_10000588C(&qword_10163CFF8);
  sub_10001E384(v0, qword_10170DBF0);
  sub_100010324(v0, (uint64_t)qword_10170DBF0);
  sub_100062734(&qword_101640C20, &qword_10163CFF8);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B46B0()
{
  uint64_t v0 = sub_10000588C(&qword_10163CE70);
  sub_10001E384(v0, qword_10170DC08);
  sub_100010324(v0, (uint64_t)qword_10170DC08);
  sub_100062734(&qword_101640BC0, &qword_10163CE70);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B4754()
{
  uint64_t v0 = sub_10000588C(&qword_101640BF8);
  sub_10001E384(v0, qword_10170DC20);
  sub_100010324(v0, (uint64_t)qword_10170DC20);
  sub_100062734(&qword_101640C00, &qword_101640BF8);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B47FC()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF98);
  sub_10001E384(v0, qword_10170DC38);
  sub_100010324(v0, (uint64_t)qword_10170DC38);
  sub_100062734(&qword_101640C08, &qword_10163CF98);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B48A0()
{
  uint64_t v0 = sub_10000588C(&qword_101640C10);
  sub_10001E384(v0, qword_10170DC50);
  sub_100010324(v0, (uint64_t)qword_10170DC50);
  sub_100062734(&qword_101640C18, &qword_101640C10);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B4944()
{
  uint64_t v0 = sub_10000588C(&qword_10163CE68);
  sub_10001E384(v0, qword_10170DC68);
  sub_100010324(v0, (uint64_t)qword_10170DC68);
  sub_100062734(&qword_10163CFC8, &qword_10163CE68);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B49E8()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF98);
  sub_10001E384(v0, qword_10170DC80);
  sub_100010324(v0, (uint64_t)qword_10170DC80);
  sub_100062734(&qword_101640C08, &qword_10163CF98);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B4A8C()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF98);
  sub_10001E384(v0, qword_10170DC98);
  sub_100010324(v0, (uint64_t)qword_10170DC98);
  sub_100062734(&qword_101640C08, &qword_10163CF98);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B4B30()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF98);
  sub_10001E384(v0, qword_10170DCB0);
  sub_100010324(v0, (uint64_t)qword_10170DCB0);
  sub_100062734(&qword_101640C08, &qword_10163CF98);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B4BD4()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF58);
  sub_10001E384(v0, qword_10170DCC8);
  sub_100010324(v0, (uint64_t)qword_10170DCC8);
  sub_100062734(&qword_10163CF80, &qword_10163CF58);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B4C78()
{
  uint64_t v0 = sub_10000588C(&qword_101640BE8);
  sub_10001E384(v0, qword_10170DCE0);
  sub_100010324(v0, (uint64_t)qword_10170DCE0);
  sub_100062734(&qword_101640BF0, &qword_101640BE8);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B4D1C()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF40);
  sub_10001E384(v0, qword_10170DCF8);
  sub_100010324(v0, (uint64_t)qword_10170DCF8);
  sub_100062734(&qword_10163D000, &qword_10163CF40);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B4DC0()
{
  uint64_t v0 = sub_10000588C(&qword_10163CE70);
  sub_10001E384(v0, qword_10170DD10);
  sub_100010324(v0, (uint64_t)qword_10170DD10);
  sub_100062734(&qword_101640BC0, &qword_10163CE70);
  return ExpressionType.init(_:)();
}

uint64_t sub_1002B4E64(char a1)
{
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = 0;
  sub_10000588C(&qword_101640BC8);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 20) = 0;
  *(unsigned char *)(v4 + 16) = 0;
  *(void *)(v1 + 32) = v4;
  sub_10000588C(&qword_101640BD0);
  swift_allocObject();
  *(void *)(v1 + 40) = AsyncStreamProvider.init()();
  *(_DWORD *)(v1 + 48) = 11;
  Table.init(_:database:)();
  Table.init(_:database:)();
  Table.init(_:database:)();
  Table.init(_:database:)();
  Table.init(_:database:)();
  Table.init(_:database:)();
  Table.init(_:database:)();
  *(unsigned char *)(v1 + 52) = a1;
  *(unsigned char *)(v1 + 53) = a1 ^ 1;
  if (qword_101636970 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = sub_100010324(v5, (uint64_t)qword_101640A28);
  sub_1002B50B8(v6);
  return v1;
}

uint64_t sub_1002B50B8(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  uint64_t v38 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v41 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v39 = (char *)&v33 - v7;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v33 - v12;
  unint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v14((char *)&v33 - v12, a1, v8);
  if (*(unsigned char *)(v42 + 53) == 1)
  {
    uint64_t v33 = v10;
    uint64_t v34 = v14;
    uint64_t v35 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v36 = a1;
    uint64_t v15 = v39;
    static SystemInfo.lockState.getter();
    uint64_t v16 = v40;
    unint64_t v17 = v41;
    (*(void (**)(char *, void, uint64_t))(v40 + 104))(v41, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v4);
    sub_1002BEF40((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
    uint64_t v37 = v8;
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v19 = v43;
    uint64_t v18 = v44;
    long long v20 = *(void (**)(char *, uint64_t))(v16 + 8);
    v20(v17, v4);
    v20(v15, v4);
    uint64_t v21 = v42;
    BOOL v22 = v18 == v19;
    uint64_t v23 = v37;
    uint64_t v24 = v9;
    if (v22)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v37);
      uint64_t v25 = type metadata accessor for TaskPriority();
      uint64_t v26 = (uint64_t)v38;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v38, 1, 1, v25);
      unint64_t v27 = v35;
      v34(v35, v36, v23);
      unint64_t v28 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      uint64_t v29 = v23;
      unint64_t v30 = (v33 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = 0;
      *(void *)(v31 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v31 + v28, v27, v29);
      *(void *)(v31 + v30) = v21;
      swift_retain();
      sub_1008F5E44(v26, (uint64_t)&unk_101640BE0, v31);
      return swift_release();
    }
    else
    {
      sub_1002BC74C(v42, (uint64_t)v13, sub_10019E634);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v23);
    }
  }
  else
  {
    sub_1002BC74C(v42, (uint64_t)v13, sub_10019E634);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }
}

uint64_t sub_1002B5520(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  uint64_t v38 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v41 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v39 = (char *)&v33 - v7;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v33 - v12;
  unint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v14((char *)&v33 - v12, a1, v8);
  if (*(unsigned char *)(v42 + 57) == 1)
  {
    uint64_t v33 = v10;
    uint64_t v34 = v14;
    uint64_t v35 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v36 = a1;
    uint64_t v15 = v39;
    static SystemInfo.lockState.getter();
    uint64_t v16 = v40;
    unint64_t v17 = v41;
    (*(void (**)(char *, void, uint64_t))(v40 + 104))(v41, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v4);
    sub_1002BEF40((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
    uint64_t v37 = v8;
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v19 = v43;
    uint64_t v18 = v44;
    long long v20 = *(void (**)(char *, uint64_t))(v16 + 8);
    v20(v17, v4);
    v20(v15, v4);
    uint64_t v21 = v42;
    BOOL v22 = v18 == v19;
    uint64_t v23 = v37;
    uint64_t v24 = v9;
    if (v22)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v37);
      uint64_t v25 = type metadata accessor for TaskPriority();
      uint64_t v26 = (uint64_t)v38;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v38, 1, 1, v25);
      unint64_t v27 = v35;
      v34(v35, v36, v23);
      unint64_t v28 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      uint64_t v29 = v23;
      unint64_t v30 = (v33 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = 0;
      *(void *)(v31 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v31 + v28, v27, v29);
      *(void *)(v31 + v30) = v21;
      swift_retain();
      sub_1008F5E44(v26, (uint64_t)&unk_101640C58, v31);
      return swift_release();
    }
    else
    {
      sub_1002BC74C(v42, (uint64_t)v13, sub_10019D830);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v23);
    }
  }
  else
  {
    sub_1002BC74C(v42, (uint64_t)v13, sub_10019D830);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }
}

uint64_t sub_1002B5988(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  uint64_t v38 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v41 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v39 = (char *)&v33 - v7;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v33 - v12;
  unint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v14((char *)&v33 - v12, a1, v8);
  if (*(unsigned char *)(v42 + 49) == 1)
  {
    uint64_t v33 = v10;
    uint64_t v34 = v14;
    uint64_t v35 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v36 = a1;
    uint64_t v15 = v39;
    static SystemInfo.lockState.getter();
    uint64_t v16 = v40;
    unint64_t v17 = v41;
    (*(void (**)(char *, void, uint64_t))(v40 + 104))(v41, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v4);
    sub_1002BEF40((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
    uint64_t v37 = v8;
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v19 = v43;
    uint64_t v18 = v44;
    long long v20 = *(void (**)(char *, uint64_t))(v16 + 8);
    v20(v17, v4);
    v20(v15, v4);
    uint64_t v21 = v42;
    BOOL v22 = v18 == v19;
    uint64_t v23 = v37;
    uint64_t v24 = v9;
    if (v22)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v37);
      uint64_t v25 = type metadata accessor for TaskPriority();
      uint64_t v26 = (uint64_t)v38;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v38, 1, 1, v25);
      unint64_t v27 = v35;
      v34(v35, v36, v23);
      unint64_t v28 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      uint64_t v29 = v23;
      unint64_t v30 = (v33 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = 0;
      *(void *)(v31 + 24) = 0;
      (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v31 + v28, v27, v29);
      *(void *)(v31 + v30) = v21;
      swift_retain();
      sub_1008F5E44(v26, (uint64_t)&unk_101640C48, v31);
      return swift_release();
    }
    else
    {
      sub_1002BC74C(v42, (uint64_t)v13, sub_10019F46C);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v23);
    }
  }
  else
  {
    sub_1002BC74C(v42, (uint64_t)v13, sub_10019F46C);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }
}

uint64_t sub_1002B5DF0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v45 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  unint64_t v13 = (char *)&v45 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v45 - v14;
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    *(void *)(a1 + 24) = 0;
    uint64_t result = swift_release();
    if ((*(unsigned char *)(a1 + 52) & 1) == 0)
    {
      uint64_t v49 = v1;
      char v50 = v13;
      sub_1002B6318();
      id v48 = [self defaultManager];
      if (qword_101636970 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100010324(v17, (uint64_t)qword_101640A28);
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v15, v3);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      BOOL v20 = os_log_type_enabled(v18, v19);
      uint64_t v51 = v4;
      if (v20)
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v45 = (void *)swift_slowAlloc();
        id v53 = v45;
        uint64_t v46 = v10;
        *(_DWORD *)uint64_t v21 = 136446210;
        unint64_t v47 = (void (*)(char *, uint64_t))(v21 + 4);
        sub_1002BEF40((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v52 = sub_1008FA0F0(v22, v23, (uint64_t *)&v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v10 = v46;
        unint64_t v47 = *(void (**)(char *, uint64_t))(v4 + 8);
        v47(v7, v3);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Purging database: %{public}s", v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        unint64_t v47 = *(void (**)(char *, uint64_t))(v4 + 8);
        v47(v7, v3);
      }

      URL._bridgeToObjectiveC()(v24);
      uint64_t v26 = v25;
      id v53 = 0;
      id v27 = v48;
      unsigned int v28 = [v48 removeItemAtURL:v25 error:&v53];

      uint64_t v29 = v50;
      if (v28)
      {
        id v30 = v53;
      }
      else
      {
        id v32 = v53;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
      }
      URL._bridgeToObjectiveC()(v31);
      uint64_t v34 = v33;
      id v53 = 0;
      unsigned int v35 = [v27 removeItemAtURL:v33 error:&v53];

      if (v35)
      {
        id v36 = v53;
      }
      else
      {
        id v38 = v53;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
      }
      URL._bridgeToObjectiveC()(v37);
      uint64_t v40 = v39;
      id v53 = 0;
      unsigned int v41 = [v27 removeItemAtURL:v39 error:&v53];

      if (v41)
      {
        id v42 = v53;
      }
      else
      {
        id v43 = v53;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
      }
      uint64_t v44 = v47;
      v47(v10, v3);
      v44(v29, v3);
      return ((uint64_t (*)(char *, uint64_t))v44)(v15, v3);
    }
  }
  return result;
}

uint64_t sub_1002B6318()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v3);
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v4 = *(void (**)(char *, uint64_t))(v1 + 8);
  v4(v3, v0);
  sub_100A9DB34((uint64_t)v3);
  URL.appendingPathComponent(_:isDirectory:)();
  v4(v3, v0);
  sub_100A9DB34((uint64_t)v3);
  URL.appendingPathComponent(_:isDirectory:)();
  return ((uint64_t (*)(char *, uint64_t))v4)(v3, v0);
}

uint64_t sub_1002B64C0(uint64_t a1, uint64_t a2)
{
  if (qword_101636970 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = (void *)sub_100010324(v5, (uint64_t)qword_101640A28);
  unsigned int v7 = *(unsigned __int8 *)(a1 + 52);
  uint64_t v8 = sub_1002BEF40(&qword_101640BA8, (void (*)(uint64_t))type metadata accessor for ItemSharingKeyDatabase);
  uint64_t result = static Database.establishConnection(logger:temporary:)(v6, v7, a2, v8);
  if (!v2)
  {
    *(void *)(a1 + 24) = result;
    return swift_release();
  }
  return result;
}

unsigned char *sub_1002B65AC(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

void sub_1002B65B8(int a1, int a2, char *a3)
{
  int v63 = a1;
  uint64_t v6 = type metadata accessor for Connection.TransactionMode();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v64 = v6;
  uint64_t v65 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v58 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v55 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  unint64_t v62 = (char *)&v55 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v61 = (char *)&v55 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v60 = (char *)&v55 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v59 = (char *)&v55 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v23 = (char *)&v55 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v55 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v55 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  id v32 = (char *)&v55 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  unsigned int v35 = (char *)&v55 - v34;
  if ((v3[52] & 1) == 0)
  {
    uint64_t v56 = v3;
    uint64_t v57 = a3;
    if (qword_101636970 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100010324(v36, (uint64_t)qword_101640A28);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (_DWORD *)swift_slowAlloc();
      uint64_t v55 = v12;
      uint64_t v40 = v39;
      *uint64_t v39 = 67109376;
      int v68 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((_WORD *)v40 + 4) = 1024;
      int v67 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Migrate schema %d -> %d", (uint8_t *)v40, 0xEu);
      uint64_t v12 = v55;
      swift_slowDealloc();
    }

    uint64_t v3 = v56;
    a3 = v57;
  }
  switch(a2)
  {
    case 1:
      v41._countAndFlagsBits = 0xD00000000000001FLL;
      v41._object = (void *)0x80000001013F7F50;
      Connection.execute(_:)(v41);
      if (!v42)
      {
        v43._object = (void *)0x80000001013F7F70;
        v43._countAndFlagsBits = 0xD000000000000018;
        Connection.execute(_:)(v43);
        if (!v45)
        {
          __chkstk_darwin(v44);
          *(&v55 - 2) = a3;
          *(&v55 - 1) = v3;
          uint64_t v47 = v64;
          uint64_t v46 = v65;
          unsigned int v35 = v58;
          (*(void (**)(char *, void, uint64_t))(v65 + 104))(v58, enum case for Connection.TransactionMode.deferred(_:), v64);
          goto LABEL_26;
        }
      }
      return;
    case 2:
      unsigned int v35 = v12;
      __chkstk_darwin(v33);
      *(&v55 - 2) = a3;
      *(&v55 - 1) = v3;
      uint64_t v47 = v64;
      uint64_t v46 = v65;
      (*(void (**)(char *, void, uint64_t))(v65 + 104))(v12, enum case for Connection.TransactionMode.deferred(_:), v64);
      goto LABEL_26;
    case 3:
      __chkstk_darwin(v33);
      *(&v55 - 2) = a3;
      *(&v55 - 1) = v3;
      uint64_t v47 = v64;
      uint64_t v46 = v65;
      unsigned int v35 = v62;
      (*(void (**)(char *, void, uint64_t))(v65 + 104))(v62, enum case for Connection.TransactionMode.deferred(_:), v64);
      goto LABEL_26;
    case 4:
      __chkstk_darwin(v33);
      *(&v55 - 2) = a3;
      *(&v55 - 1) = v3;
      uint64_t v47 = v64;
      uint64_t v46 = v65;
      unsigned int v35 = v61;
      (*(void (**)(char *, void, uint64_t))(v65 + 104))(v61, enum case for Connection.TransactionMode.deferred(_:), v64);
      goto LABEL_26;
    case 5:
      __chkstk_darwin(v33);
      *(&v55 - 2) = a3;
      *(&v55 - 1) = v3;
      uint64_t v47 = v64;
      uint64_t v46 = v65;
      unsigned int v35 = v60;
      (*(void (**)(char *, void, uint64_t))(v65 + 104))(v60, enum case for Connection.TransactionMode.deferred(_:), v64);
      goto LABEL_26;
    case 6:
      __chkstk_darwin(v33);
      *(&v55 - 2) = a3;
      *(&v55 - 1) = v3;
      uint64_t v47 = v64;
      uint64_t v46 = v65;
      unsigned int v35 = v59;
      (*(void (**)(char *, void, uint64_t))(v65 + 104))(v59, enum case for Connection.TransactionMode.deferred(_:), v64);
      goto LABEL_26;
    case 7:
      __chkstk_darwin(v33);
      *(&v55 - 2) = a3;
      *(&v55 - 1) = v3;
      uint64_t v47 = v64;
      uint64_t v49 = v65;
      (*(void (**)(char *, void, uint64_t))(v65 + 104))(v23, enum case for Connection.TransactionMode.deferred(_:), v64);
      uint64_t v50 = v66;
      Connection.transaction(_:block:)();
      if (v50)
      {
        (*(void (**)(char *, uint64_t))(v49 + 8))(v23, v47);
        return;
      }
      unsigned int v35 = v23;
      uint64_t v46 = v49;
      goto LABEL_27;
    case 8:
      __chkstk_darwin(v33);
      *(&v55 - 2) = a3;
      *(&v55 - 1) = v3;
      uint64_t v51 = v64;
      uint64_t v46 = v65;
      (*(void (**)(char *, void, uint64_t))(v65 + 104))(v26, enum case for Connection.TransactionMode.deferred(_:), v64);
      uint64_t v52 = v66;
      Connection.transaction(_:block:)();
      if (v52)
      {
        (*(void (**)(char *, uint64_t))(v46 + 8))(v26, v51);
        return;
      }
      unsigned int v35 = v26;
      uint64_t v47 = v51;
      goto LABEL_27;
    case 9:
      __chkstk_darwin(v33);
      *(&v55 - 2) = a3;
      *(&v55 - 1) = v3;
      uint64_t v47 = v64;
      uint64_t v46 = v65;
      (*(void (**)(char *, void, uint64_t))(v65 + 104))(v29, enum case for Connection.TransactionMode.deferred(_:), v64);
      uint64_t v53 = v66;
      Connection.transaction(_:block:)();
      if (v53)
      {
        (*(void (**)(char *, uint64_t))(v46 + 8))(v29, v47);
        return;
      }
      unsigned int v35 = v29;
      goto LABEL_27;
    case 10:
      __chkstk_darwin(v33);
      *(&v55 - 2) = a3;
      *(&v55 - 1) = v3;
      uint64_t v47 = v64;
      uint64_t v46 = v65;
      (*(void (**)(char *, void, uint64_t))(v65 + 104))(v32, enum case for Connection.TransactionMode.deferred(_:), v64);
      uint64_t v54 = v66;
      Connection.transaction(_:block:)();
      if (v54)
      {
        (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v47);
      }
      else
      {
        unsigned int v35 = v32;
LABEL_27:
        (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v47);
      }
      return;
    case 11:
      __chkstk_darwin(v33);
      *(&v55 - 2) = a3;
      *(&v55 - 1) = v3;
      uint64_t v47 = v64;
      uint64_t v46 = v65;
      (*(void (**)(char *, void, uint64_t))(v65 + 104))(v35, enum case for Connection.TransactionMode.deferred(_:), v64);
LABEL_26:
      Connection.transaction(_:block:)();
      goto LABEL_27;
    default:
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v48 = a2;
      *(unsigned char *)(v48 + 4) = 0;
      swift_willThrow();
      return;
  }
}

uint64_t sub_1002B6F98()
{
  Table.create(temporary:ifNotExists:withoutRowid:block:)();
  Connection.run(_:_:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000588C(&qword_10163CE90);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101342130;
  if (qword_101636980 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000588C(&qword_10163CE70);
  uint64_t v3 = sub_100010324(v2, (uint64_t)qword_10170DAE8);
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = sub_100062734(&qword_10163CFA8, &qword_10163CE70);
  uint64_t v4 = sub_10001D958((uint64_t *)(v1 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v4, v3, v2);
  Table.createIndex(_:unique:ifNotExists:)();
  swift_bridgeObjectRelease();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1002B7190()
{
  uint64_t v0 = sub_10000588C(&qword_101640C60);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_101640C68);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101640C70);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636980 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v9, (uint64_t)qword_10170DAE8);
  uint64_t v10 = sub_10000588C(&qword_10163CE68);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v13 = v11 + 56;
  v12(v8, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 1, 1, v9);
  type metadata accessor for UUID();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v5, &qword_101640C68);
  sub_10001DAB4((uint64_t)v8, &qword_101640C70);
  if (qword_101636A08 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10000588C(&qword_10163CF98);
  sub_100010324(v14, (uint64_t)qword_10170DC80);
  v12(v8, 1, 1, v10);
  uint64_t v15 = sub_10000588C(&qword_10163CE98);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v20 = v12;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v19 = v13;
  v17(v2, 1, 1, v15);
  type metadata accessor for Date();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v2, &qword_101640C60);
  sub_10001DAB4((uint64_t)v8, &qword_101640C70);
  if (qword_101636A10 != -1) {
    swift_once();
  }
  sub_100010324(v14, (uint64_t)qword_10170DC98);
  v20(v8, 1, 1, v10);
  v17(v2, 1, 1, v15);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v2, &qword_101640C60);
  sub_10001DAB4((uint64_t)v8, &qword_101640C70);
  if (qword_101636A18 != -1) {
    swift_once();
  }
  sub_100010324(v14, (uint64_t)qword_10170DCB0);
  v20(v8, 1, 1, v10);
  v17(v2, 1, 1, v15);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v2, &qword_101640C60);
  return sub_10001DAB4((uint64_t)v8, &qword_101640C70);
}

uint64_t sub_1002B7650()
{
  uint64_t v1 = sub_10000588C(&qword_101640C70);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_101636A00 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_10000588C(&qword_10163CE68);
  sub_100010324(v4, (uint64_t)qword_10170DC68);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6[15] = 0;
  Table.addColumn<A>(_:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v3, &qword_101640C70);
  Connection.run(_:_:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1002B77F0()
{
  Table.create(temporary:ifNotExists:withoutRowid:block:)();
  Connection.run(_:_:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1002B7894()
{
  uint64_t v0 = sub_10000588C(&qword_101640C68);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_101640C78);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101640C80);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101640C70);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636A20 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v12, (uint64_t)qword_10170DCC8);
  uint64_t v13 = sub_10000588C(&qword_10163CE68);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  uint64_t v16 = v14 + 56;
  v15(v11, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 1, 1, v12);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v8, &qword_101640C80);
  sub_10001DAB4((uint64_t)v11, &qword_101640C70);
  if (qword_101636A28 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_10000588C(&qword_101640BE8);
  sub_100010324(v17, (uint64_t)qword_10170DCE0);
  v15(v11, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v5, 1, 1, v17);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v5, &qword_101640C78);
  sub_10001DAB4((uint64_t)v11, &qword_101640C70);
  if (qword_101636A30 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_10000588C(&qword_10163CF40);
  sub_100010324(v18, (uint64_t)qword_10170DCF8);
  v15(v11, 1, 1, v13);
  uint64_t v19 = sub_10000588C(&qword_10163CE70);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
  v22[1] = v16;
  v20(v2, 1, 1, v19);
  type metadata accessor for UUID();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v2, &qword_101640C68);
  sub_10001DAB4((uint64_t)v11, &qword_101640C70);
  if (qword_101636A38 != -1) {
    swift_once();
  }
  sub_100010324(v19, (uint64_t)qword_10170DD10);
  v15(v11, 1, 1, v13);
  v20(v2, 1, 1, v19);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v2, &qword_101640C68);
  return sub_10001DAB4((uint64_t)v11, &qword_101640C70);
}

uint64_t sub_1002B7DBC()
{
  uint64_t v1 = sub_10000588C(&qword_101640C70);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016369F8 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_10000588C(&qword_101640C10);
  sub_100010324(v4, (uint64_t)qword_10170DC50);
  uint64_t v5 = sub_10000588C(&qword_10163CE68);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
  long long v7 = xmmword_101347BB0;
  Table.addColumn<A>(_:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v3, &qword_101640C70);
  Connection.run(_:_:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1002B7F6C()
{
  uint64_t v1 = sub_10000588C(&qword_101640C70);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016369D8 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_10000588C(&qword_10163CFF8);
  sub_100010324(v4, (uint64_t)qword_10170DBF0);
  uint64_t v5 = sub_10000588C(&qword_10163CE68);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
  char v8 = 0;
  Table.addColumn<A>(_:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v3, &qword_101640C70);
  Connection.run(_:_:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1002B8110()
{
  Table.create(temporary:ifNotExists:withoutRowid:block:)();
  Connection.run(_:_:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000588C(&qword_10163CE90);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101342130;
  if (qword_1016369E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000588C(&qword_10163CE70);
  uint64_t v3 = sub_100010324(v2, (uint64_t)qword_10170DC08);
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = sub_100062734(&qword_10163CFA8, &qword_10163CE70);
  uint64_t v4 = sub_10001D958((uint64_t *)(v1 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v4, v3, v2);
  Table.createIndex(_:unique:ifNotExists:)();
  swift_bridgeObjectRelease();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1002B8308()
{
  uint64_t v0 = sub_10000588C(&qword_101640C60);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_101640C88);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101640C68);
  __chkstk_darwin(v6 - 8);
  char v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101640C70);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016369E0 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v12, (uint64_t)qword_10170DC08);
  uint64_t v13 = sub_10000588C(&qword_10163CE68);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v11, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 1, 1, v12);
  type metadata accessor for UUID();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v8, &qword_101640C68);
  sub_10001DAB4((uint64_t)v11, &qword_101640C70);
  if (qword_1016369E8 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_10000588C(&qword_101640BF8);
  sub_100010324(v15, (uint64_t)qword_10170DC20);
  v14(v11, 1, 1, v13);
  uint64_t v16 = sub_10000588C(&qword_10163CF78);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v5, 1, 1, v16);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v5, &qword_101640C88);
  sub_10001DAB4((uint64_t)v11, &qword_101640C70);
  if (qword_1016369F0 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_10000588C(&qword_10163CF98);
  sub_100010324(v17, (uint64_t)qword_10170DC38);
  v14(v11, 1, 1, v13);
  uint64_t v18 = sub_10000588C(&qword_10163CE98);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v2, 1, 1, v18);
  type metadata accessor for Date();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v2, &qword_101640C60);
  return sub_10001DAB4((uint64_t)v11, &qword_101640C70);
}

uint64_t sub_1002B8768()
{
  Table.create(temporary:ifNotExists:withoutRowid:block:)();
  Connection.run(_:_:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000588C(&qword_10163CE90);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10134BF90;
  if (qword_101636978 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000588C(&qword_10163CE70);
  uint64_t v3 = sub_100010324(v2, (uint64_t)qword_10170DAD0);
  *(void *)(v1 + 56) = v2;
  uint64_t v4 = sub_100062734(&qword_10163CFA8, &qword_10163CE70);
  *(void *)(v1 + 64) = v4;
  uint64_t v5 = sub_10001D958((uint64_t *)(v1 + 32));
  uint64_t v6 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  v6(v5, v3, v2);
  if (qword_101636980 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_100010324(v2, (uint64_t)qword_10170DAE8);
  *(void *)(v1 + 96) = v2;
  *(void *)(v1 + 104) = v4;
  char v8 = sub_10001D958((uint64_t *)(v1 + 72));
  v6(v8, v7, v2);
  if (qword_101636990 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10000588C(&qword_10163CE78);
  uint64_t v10 = sub_100010324(v9, (uint64_t)qword_10170DB18);
  *(void *)(v1 + 136) = v9;
  *(void *)(v1 + 144) = sub_100062734(&qword_10163CFB8, &qword_10163CE78);
  uint64_t v11 = sub_10001D958((uint64_t *)(v1 + 112));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v11, v10, v9);
  if (qword_101636988 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10000588C(&qword_10163CEC8);
  uint64_t v13 = sub_100010324(v12, (uint64_t)qword_10170DB00);
  *(void *)(v1 + 176) = v12;
  *(void *)(v1 + 184) = sub_100062734(&qword_101640C90, &qword_10163CEC8);
  uint64_t v14 = sub_10001D958((uint64_t *)(v1 + 152));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v14, v13, v12);
  Table.createIndex(_:unique:ifNotExists:)();
  swift_bridgeObjectRelease();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1002B8B54(uint64_t a1)
{
  return sub_1002B9BC8(a1, &qword_1016369A0, (uint64_t)qword_10170DB48, 28, (uint64_t)sub_1002B4180);
}

uint64_t sub_1002B8B7C()
{
  Table.create(temporary:ifNotExists:withoutRowid:block:)();
  Connection.run(_:_:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000588C(&qword_10163CE90);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101347BA0;
  if (qword_101636978 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000588C(&qword_10163CE70);
  uint64_t v3 = sub_100010324(v2, (uint64_t)qword_10170DAD0);
  *(void *)(v1 + 56) = v2;
  uint64_t v4 = sub_100062734(&qword_10163CFA8, &qword_10163CE70);
  *(void *)(v1 + 64) = v4;
  uint64_t v5 = sub_10001D958((uint64_t *)(v1 + 32));
  uint64_t v6 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  v6(v5, v3, v2);
  if (qword_101636980 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_100010324(v2, (uint64_t)qword_10170DAE8);
  *(void *)(v1 + 96) = v2;
  *(void *)(v1 + 104) = v4;
  char v8 = sub_10001D958((uint64_t *)(v1 + 72));
  v6(v8, v7, v2);
  Table.createIndex(_:unique:ifNotExists:)();
  swift_bridgeObjectRelease();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1002B8DEC()
{
  uint64_t v0 = sub_10000588C(&qword_101640C88);
  __chkstk_darwin(v0 - 8);
  uint64_t v28 = (uint64_t)v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_10000588C(&qword_101640C78);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101640C68);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101640C70);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636978 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v11, (uint64_t)qword_10170DAD0);
  uint64_t v12 = sub_10000588C(&qword_10163CE68);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  uint64_t v29 = v13 + 56;
  uint64_t v30 = v14;
  v14(v10, 1, 1, v12);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v15(v7, 1, 1, v11);
  type metadata accessor for UUID();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v7, &qword_101640C68);
  sub_10001DAB4((uint64_t)v10, &qword_101640C70);
  if (qword_101636980 != -1) {
    swift_once();
  }
  sub_100010324(v11, (uint64_t)qword_10170DAE8);
  v30(v10, 1, 1, v12);
  v15(v7, 1, 1, v11);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v7, &qword_101640C68);
  sub_10001DAB4((uint64_t)v10, &qword_101640C70);
  if (qword_1016369B0 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10000588C(&qword_101640BE8);
  sub_100010324(v16, (uint64_t)qword_10170DB78);
  uint64_t v17 = v30;
  v30(v10, 1, 1, v12);
  uint64_t v18 = *(void *)(v16 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  v26[1] = v18 + 56;
  uint64_t v27 = v19;
  v19(v4, 1, 1, v16);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v4, &qword_101640C78);
  sub_10001DAB4((uint64_t)v10, &qword_101640C70);
  if (qword_1016369B8 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_10000588C(&qword_10163CF78);
  sub_100010324(v20, (uint64_t)qword_10170DB90);
  v17(v10, 1, 1, v12);
  uint64_t v21 = v28;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v28, 1, 1, v20);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v21, &qword_101640C88);
  sub_10001DAB4((uint64_t)v10, &qword_101640C70);
  if (qword_1016369C0 != -1) {
    swift_once();
  }
  uint64_t v28 = sub_10000588C(&qword_101640C28);
  sub_100010324(v28, (uint64_t)qword_10170DBA8);
  v17(v10, 1, 1, v12);
  uint64_t v22 = v12;
  unint64_t v23 = v17;
  uint64_t v24 = v27;
  v27(v4, 1, 1, v16);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v4, &qword_101640C78);
  sub_10001DAB4((uint64_t)v10, &qword_101640C70);
  if (qword_1016369C8 != -1) {
    swift_once();
  }
  sub_100010324(v16, (uint64_t)qword_10170DBC0);
  v23(v10, 1, 1, v22);
  v24(v4, 1, 1, v16);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v4, &qword_101640C78);
  sub_10001DAB4((uint64_t)v10, &qword_101640C70);
  if (qword_1016369D0 != -1) {
    swift_once();
  }
  sub_100010324(v28, (uint64_t)qword_10170DBD8);
  v23(v10, 1, 1, v22);
  v24(v4, 1, 1, v16);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v4, &qword_101640C78);
  return sub_10001DAB4((uint64_t)v10, &qword_101640C70);
}

uint64_t sub_1002B9574()
{
  type metadata accessor for Table();
  SchemaType.drop(ifExists:)(0);
  Connection.run(_:_:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  SchemaType.drop(ifExists:)(0);
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  Table.create(temporary:ifNotExists:withoutRowid:block:)();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000588C(&qword_10163CE90);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10134BF90;
  if (qword_101636978 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000588C(&qword_10163CE70);
  uint64_t v3 = sub_100010324(v2, (uint64_t)qword_10170DAD0);
  *(void *)(v1 + 56) = v2;
  uint64_t v4 = sub_100062734(&qword_10163CFA8, &qword_10163CE70);
  *(void *)(v1 + 64) = v4;
  uint64_t v5 = sub_10001D958((uint64_t *)(v1 + 32));
  uint64_t v6 = (void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  uint64_t v25 = v3;
  uint64_t v7 = v3;
  uint64_t v8 = *v6;
  (*v6)(v5, v7, v2);
  if (qword_101636980 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100010324(v2, (uint64_t)qword_10170DAE8);
  *(void *)(v1 + 96) = v2;
  *(void *)(v1 + 104) = v4;
  uint64_t v24 = v4;
  uint64_t v10 = sub_10001D958((uint64_t *)(v1 + 72));
  uint64_t v26 = v2;
  unint64_t v23 = v8;
  v8(v10, v9, v2);
  if (qword_101636990 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_10000588C(&qword_10163CE78);
  uint64_t v12 = sub_100010324(v11, (uint64_t)qword_10170DB18);
  *(void *)(v1 + 136) = v11;
  *(void *)(v1 + 144) = sub_100062734(&qword_10163CFB8, &qword_10163CE78);
  uint64_t v13 = sub_10001D958((uint64_t *)(v1 + 112));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v13, v12, v11);
  if (qword_101636988 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10000588C(&qword_10163CEC8);
  uint64_t v15 = sub_100010324(v14, (uint64_t)qword_10170DB00);
  *(void *)(v1 + 176) = v14;
  uint64_t v27 = sub_100062734(&qword_101640C90, &qword_10163CEC8);
  *(void *)(v1 + 184) = v27;
  uint64_t v16 = sub_10001D958((uint64_t *)(v1 + 152));
  uint64_t v17 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  v17(v16, v15, v14);
  Table.createIndex(_:unique:ifNotExists:)();
  swift_bridgeObjectRelease();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  Table.create(temporary:ifNotExists:withoutRowid:block:)();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_101347500;
  *(void *)(v18 + 56) = v26;
  *(void *)(v18 + 64) = v24;
  uint64_t v19 = sub_10001D958((uint64_t *)(v18 + 32));
  v23(v19, v25, v26);
  *(void *)(v18 + 96) = v26;
  *(void *)(v18 + 104) = v24;
  uint64_t v20 = sub_10001D958((uint64_t *)(v18 + 72));
  v23(v20, v9, v26);
  *(void *)(v18 + 136) = v14;
  *(void *)(v18 + 144) = v27;
  uint64_t v21 = sub_10001D958((uint64_t *)(v18 + 112));
  v17(v21, v15, v14);
  Table.createIndex(_:unique:ifNotExists:)();
  swift_bridgeObjectRelease();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1002B9BA0(uint64_t a1)
{
  return sub_1002B9BC8(a1, &qword_101636998, (uint64_t)qword_10170DB30, 6, (uint64_t)sub_1002B40DC);
}

uint64_t sub_1002B9BC8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = a5;
  uint64_t v45 = a4;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v50 = a1;
  uint64_t v5 = sub_10000588C(&qword_10163CF78);
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  __chkstk_darwin(v5);
  uint64_t v44 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163CE68);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v48 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101640C80);
  __chkstk_darwin(v10 - 8);
  Swift::String v41 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101640C98);
  __chkstk_darwin(v12 - 8);
  uint64_t v40 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101640CA0);
  __chkstk_darwin(v14 - 8);
  os_log_type_t v38 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101640C68);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_101640C70);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636978 != -1) {
    swift_once();
  }
  uint64_t v22 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v22, (uint64_t)qword_10170DAD0);
  uint64_t v49 = v8;
  unint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v23(v21, 1, 1, v7);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
  v24(v18, 1, 1, v22);
  type metadata accessor for UUID();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v18, &qword_101640C68);
  sub_10001DAB4((uint64_t)v21, &qword_101640C70);
  if (qword_101636980 != -1) {
    swift_once();
  }
  sub_100010324(v22, (uint64_t)qword_10170DAE8);
  v23(v21, 1, 1, v7);
  v24(v18, 1, 1, v22);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v18, &qword_101640C68);
  sub_10001DAB4((uint64_t)v21, &qword_101640C70);
  if (qword_101636990 != -1) {
    swift_once();
  }
  uint64_t v25 = sub_10000588C(&qword_10163CE78);
  uint64_t v26 = sub_100010324(v25, (uint64_t)qword_10170DB18);
  v23(v21, 1, 1, v7);
  uint64_t v27 = (uint64_t)v38;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v38, 1, 1, v25);
  sub_1001A1448();
  uint64_t v39 = v26;
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v27, &qword_101640CA0);
  sub_10001DAB4((uint64_t)v21, &qword_101640C70);
  uint64_t v28 = v7;
  if (qword_101636988 != -1) {
    swift_once();
  }
  uint64_t v29 = sub_10000588C(&qword_10163CEC8);
  sub_100010324(v29, (uint64_t)qword_10170DB00);
  v23(v21, 1, 1, v7);
  uint64_t v30 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v40, 1, 1, v29);
  sub_1001A1544();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v30, &qword_101640C98);
  sub_10001DAB4((uint64_t)v21, &qword_101640C70);
  if (*v42 != -1) {
    swift_once();
  }
  uint64_t v31 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v31, v43);
  v23(v21, 1, 1, v28);
  uint64_t v32 = (uint64_t)v41;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v41, 1, 1, v31);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v32, &qword_101640C80);
  sub_10001DAB4((uint64_t)v21, &qword_101640C70);
  sub_100062734(&qword_10163CF80, &qword_10163CF58);
  uint64_t v33 = v44;
  ExpressionType<>.length.getter();
  uint64_t v52 = v45;
  uint64_t v34 = v48;
  == infix<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v33, v47);
  TableBuilder.check(_:)();
  unsigned int v35 = *(void (**)(char *, uint64_t))(v49 + 8);
  v35(v34, v28);
  __int16 v51 = 512;
  ~= infix<A>(_:_:)();
  TableBuilder.check(_:)();
  return ((uint64_t (*)(char *, uint64_t))v35)(v34, v28);
}

uint64_t sub_1002BA41C(uint64_t a1)
{
  uint64_t v34 = a1;
  uint64_t v1 = sub_10000588C(&qword_10163CF78);
  uint64_t v32 = *(void *)(v1 - 8);
  uint64_t v33 = v1;
  __chkstk_darwin(v1);
  uint64_t v30 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_10163CE68);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v29 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101640C80);
  __chkstk_darwin(v6 - 8);
  uint64_t v28 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101640C98);
  __chkstk_darwin(v8 - 8);
  uint64_t v27 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101640C68);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101640C70);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636978 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v16, (uint64_t)qword_10170DAD0);
  uint64_t v31 = v4;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v17(v15, 1, 1, v3);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  v18(v12, 1, 1, v16);
  type metadata accessor for UUID();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v12, &qword_101640C68);
  sub_10001DAB4((uint64_t)v15, &qword_101640C70);
  if (qword_101636980 != -1) {
    swift_once();
  }
  sub_100010324(v16, (uint64_t)qword_10170DAE8);
  v17(v15, 1, 1, v3);
  v18(v12, 1, 1, v16);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v12, &qword_101640C68);
  sub_10001DAB4((uint64_t)v15, &qword_101640C70);
  if (qword_101636988 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_10000588C(&qword_10163CEC8);
  sub_100010324(v19, (uint64_t)qword_10170DB00);
  v17(v15, 1, 1, v3);
  uint64_t v20 = (uint64_t)v27;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v27, 1, 1, v19);
  sub_1001A1544();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v20, &qword_101640C98);
  sub_10001DAB4((uint64_t)v15, &qword_101640C70);
  if (qword_1016369A8 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v21, (uint64_t)qword_10170DB60);
  v17(v15, 1, 1, v3);
  uint64_t v22 = (uint64_t)v28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v28, 1, 1, v21);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v22, &qword_101640C80);
  sub_10001DAB4((uint64_t)v15, &qword_101640C70);
  sub_100062734(&qword_10163CF80, &qword_10163CF58);
  unint64_t v23 = v30;
  ExpressionType<>.length.getter();
  uint64_t v35 = 32;
  uint64_t v24 = v29;
  == infix<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v33);
  TableBuilder.check(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v24, v3);
}

uint64_t sub_1002BAAE0()
{
  type metadata accessor for Table();
  SchemaType.drop(ifExists:)(0);
  Connection.run(_:_:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  Table.create(temporary:ifNotExists:withoutRowid:block:)();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000588C(&qword_10163CE90);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101347500;
  if (qword_101636980 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000588C(&qword_10163CE70);
  uint64_t v3 = sub_100010324(v2, (uint64_t)qword_10170DAE8);
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = sub_100062734(&qword_10163CFA8, &qword_10163CE70);
  uint64_t v4 = sub_10001D958((uint64_t *)(v1 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v4, v3, v2);
  if (qword_101636990 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10000588C(&qword_10163CE78);
  uint64_t v6 = sub_100010324(v5, (uint64_t)qword_10170DB18);
  *(void *)(v1 + 96) = v5;
  *(void *)(v1 + 104) = sub_100062734(&qword_10163CFB8, &qword_10163CE78);
  uint64_t v7 = sub_10001D958((uint64_t *)(v1 + 72));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v7, v6, v5);
  if (qword_101636988 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10000588C(&qword_10163CEC8);
  uint64_t v9 = sub_100010324(v8, (uint64_t)qword_10170DB00);
  *(void *)(v1 + 136) = v8;
  *(void *)(v1 + 144) = sub_100062734(&qword_101640C90, &qword_10163CEC8);
  uint64_t v10 = sub_10001D958((uint64_t *)(v1 + 112));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v10, v9, v8);
  Table.createIndex(_:unique:ifNotExists:)();
  swift_bridgeObjectRelease();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1002BAEA4(uint64_t a1)
{
  return sub_1002BB38C(a1, 0);
}

uint64_t sub_1002BAEAC()
{
  Table.create(temporary:ifNotExists:withoutRowid:block:)();
  Connection.run(_:_:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  Table.create(temporary:ifNotExists:withoutRowid:block:)();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10000588C(&qword_10163CE90);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101347500;
  if (qword_101636980 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10000588C(&qword_10163CE70);
  uint64_t v3 = sub_100010324(v2, (uint64_t)qword_10170DAE8);
  *(void *)(v1 + 56) = v2;
  uint64_t v18 = sub_100062734(&qword_10163CFA8, &qword_10163CE70);
  *(void *)(v1 + 64) = v18;
  uint64_t v4 = sub_10001D958((uint64_t *)(v1 + 32));
  uint64_t v19 = v3;
  uint64_t v17 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  v17(v4, v3, v2);
  if (qword_101636990 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10000588C(&qword_10163CE78);
  uint64_t v6 = sub_100010324(v5, (uint64_t)qword_10170DB18);
  *(void *)(v1 + 96) = v5;
  *(void *)(v1 + 104) = sub_100062734(&qword_10163CFB8, &qword_10163CE78);
  uint64_t v7 = sub_10001D958((uint64_t *)(v1 + 72));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v7, v6, v5);
  if (qword_101636988 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10000588C(&qword_10163CEC8);
  uint64_t v9 = sub_100010324(v8, (uint64_t)qword_10170DB00);
  *(void *)(v1 + 136) = v8;
  uint64_t v10 = sub_100062734(&qword_101640C90, &qword_10163CEC8);
  *(void *)(v1 + 144) = v10;
  uint64_t v11 = sub_10001D958((uint64_t *)(v1 + 112));
  uint64_t v16 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  v16(v11, v9, v8);
  Table.createIndex(_:unique:ifNotExists:)();
  swift_bridgeObjectRelease();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_101347BA0;
  *(void *)(v12 + 56) = v2;
  *(void *)(v12 + 64) = v18;
  uint64_t v13 = sub_10001D958((uint64_t *)(v12 + 32));
  v17(v13, v19, v2);
  *(void *)(v12 + 96) = v8;
  *(void *)(v12 + 104) = v10;
  uint64_t v14 = sub_10001D958((uint64_t *)(v12 + 72));
  v16(v14, v9, v8);
  Table.createIndex(_:unique:ifNotExists:)();
  swift_bridgeObjectRelease();
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1002BB384(uint64_t a1)
{
  return sub_1002BB38C(a1, 1);
}

uint64_t sub_1002BB38C(uint64_t a1, int a2)
{
  int v38 = a2;
  uint64_t v39 = a1;
  uint64_t v2 = sub_10000588C(&qword_10163CF78);
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  __chkstk_darwin(v2);
  uint64_t v34 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_10163CE68);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101640C80);
  __chkstk_darwin(v8 - 8);
  uint64_t v33 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101640C98);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101640CA0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101640C68);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_101640C70);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636980 != -1) {
    swift_once();
  }
  uint64_t v22 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v22, (uint64_t)qword_10170DAE8);
  uint64_t v37 = v5;
  unint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v23(v21, 1, 1, v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v18, 1, 1, v22);
  type metadata accessor for UUID();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v18, &qword_101640C68);
  sub_10001DAB4((uint64_t)v21, &qword_101640C70);
  if (qword_101636990 != -1) {
    swift_once();
  }
  uint64_t v24 = sub_10000588C(&qword_10163CE78);
  uint64_t v25 = sub_100010324(v24, (uint64_t)qword_10170DB18);
  v23(v21, 1, 1, v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v15, 1, 1, v24);
  sub_1001A1448();
  uint64_t v32 = v25;
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v15, &qword_101640CA0);
  sub_10001DAB4((uint64_t)v21, &qword_101640C70);
  if (qword_101636988 != -1) {
    swift_once();
  }
  uint64_t v26 = sub_10000588C(&qword_10163CEC8);
  sub_100010324(v26, (uint64_t)qword_10170DB00);
  v23(v21, 1, 1, v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v12, 1, 1, v26);
  sub_1001A1544();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v12, &qword_101640C98);
  sub_10001DAB4((uint64_t)v21, &qword_101640C70);
  if (qword_101636998 != -1) {
    swift_once();
  }
  uint64_t v27 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v27, (uint64_t)qword_10170DB30);
  v23(v21, 1, 1, v4);
  uint64_t v28 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v33, 1, 1, v27);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v28, &qword_101640C80);
  sub_10001DAB4((uint64_t)v21, &qword_101640C70);
  sub_100062734(&qword_10163CF80, &qword_10163CF58);
  uint64_t v29 = v34;
  ExpressionType<>.length.getter();
  uint64_t v42 = 6;
  == infix<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v29, v36);
  TableBuilder.check(_:)();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v37 + 8);
  v30(v7, v4);
  char v40 = v38;
  char v41 = 2;
  ~= infix<A>(_:_:)();
  TableBuilder.check(_:)();
  return ((uint64_t (*)(char *, uint64_t))v30)(v7, v4);
}

uint64_t sub_1002BBB1C(uint64_t a1)
{
  uint64_t v29 = a1;
  uint64_t v1 = sub_10000588C(&qword_10163CF78);
  uint64_t v27 = *(void *)(v1 - 8);
  uint64_t v28 = v1;
  __chkstk_darwin(v1);
  uint64_t v25 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_10163CE68);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101640C80);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101640C98);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101640C68);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101640C70);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636980 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v19, (uint64_t)qword_10170DAE8);
  uint64_t v26 = v4;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v20(v18, 1, 1, v3);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v15, 1, 1, v19);
  type metadata accessor for UUID();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v15, &qword_101640C68);
  sub_10001DAB4((uint64_t)v18, &qword_101640C70);
  if (qword_101636988 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_10000588C(&qword_10163CEC8);
  sub_100010324(v21, (uint64_t)qword_10170DB00);
  v20(v18, 1, 1, v3);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v12, 1, 1, v21);
  sub_1001A1544();
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v12, &qword_101640C98);
  sub_10001DAB4((uint64_t)v18, &qword_101640C70);
  if (qword_1016369A8 != -1) {
    swift_once();
  }
  uint64_t v22 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v22, (uint64_t)qword_10170DB60);
  v20(v18, 1, 1, v3);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v9, 1, 1, v22);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v9, &qword_101640C80);
  sub_10001DAB4((uint64_t)v18, &qword_101640C70);
  sub_100062734(&qword_10163CF80, &qword_10163CF58);
  unint64_t v23 = v25;
  ExpressionType<>.length.getter();
  uint64_t v30 = 32;
  == infix<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v23, v28);
  TableBuilder.check(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v6, v3);
}

uint64_t sub_1002BC100()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_keys;
  uint64_t v2 = type metadata accessor for Table();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_nearOwnerKeys, v2);
  v3(v0 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_connectionKeys, v2);
  v3(v0 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_beaconAttributes, v2);
  v3(v0 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_sharingCircleSecret, v2);
  v3(v0 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_delegatedBeaconMetadata, v2);
  v3(v0 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_lostItemDates, v2);
  return v0;
}

uint64_t sub_1002BC240()
{
  sub_1002BC100();

  return swift_deallocClassInstance();
}

uint64_t sub_1002BC298()
{
  return type metadata accessor for ItemSharingKeyDatabase();
}

uint64_t type metadata accessor for ItemSharingKeyDatabase()
{
  uint64_t result = qword_101640A68;
  if (!qword_101640A68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002BC2EC()
{
  uint64_t result = type metadata accessor for Table();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_1002BC3BC()
{
  sub_10000588C(&qword_10163CEF8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  return v1;
}

uint64_t sub_1002BC434()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 32);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1002B3D78(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1002BC498()
{
  return 11;
}

uint64_t sub_1002BC4A0()
{
  return *(unsigned __int8 *)(v0 + 52);
}

uint64_t sub_1002BC4A8()
{
  return *(unsigned __int8 *)(v0 + 53);
}

uint64_t sub_1002BC4B0()
{
  return sub_1002BE650();
}

uint64_t sub_1002BC4C8()
{
  return sub_1002B6318();
}

void sub_1002BC4E0(int a1, int a2, char *a3)
{
}

uint64_t sub_1002BC4F8()
{
  return sub_1002BC550();
}

uint64_t sub_1002BC524()
{
  return sub_1002BC550();
}

uint64_t sub_1002BC550()
{
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)();
}

uint64_t sub_1002BC5B4()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 32);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1002B65AC(v2);
  os_unfair_lock_unlock(v3);
  return AsyncStreamProvider.yield(value:transaction:)();
}

uint64_t sub_1002BC628(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return Database.description.getter(a1, WitnessTable);
}

uint64_t sub_1002BC674(uint64_t a1)
{
  uint64_t result = sub_1002BEF40(&qword_10163D0A0, (void (*)(uint64_t))type metadata accessor for ItemSharingKeyDatabase);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002BC6CC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170DD28);
  sub_100010324(v0, (uint64_t)qword_10170DD28);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1002BC74C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_1002BC8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 160) = a4;
  *(void *)(v5 + 168) = a5;
  return _swift_task_switch(sub_1002BC900, 0, 0);
}

uint64_t sub_1002BC900()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639288 + dword_101639288);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v2;
    void *v2 = v0;
    v2[1] = sub_1002BCA34;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002BCA34(uint64_t a1)
{
  *(void *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1002BCB34, 0, 0);
}

uint64_t sub_1002BCB34()
{
  uint64_t v17 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[23])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_retain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = v0[21];
    if (v4)
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      v0[18] = v5;
      type metadata accessor for ItemSharingKeyDatabase();
      sub_1002BEF40(&qword_10163D0A0, (void (*)(uint64_t))type metadata accessor for ItemSharingKeyDatabase);
      uint64_t v7 = CustomStringConvertible.typeDescription.getter();
      v0[19] = sub_1008FA0F0(v7, v8, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Waiting for first unlock to open encrypted SQLite database for %{public}s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v15 = (void *)swift_task_alloc();
    v0[24] = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_1002BCE6C;
    return sub_100611988();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637448 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170F250);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unable to get FirstUnlockService", v12, 2u);
      swift_slowDealloc();
    }

    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_1002BCE6C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1002BCF68, 0, 0);
}

uint64_t sub_1002BCF68()
{
  os_log_type_t v11 = v0;
  sub_10019E634();
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = v0[21];
  if (v3)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[16] = v4;
    type metadata accessor for ItemSharingKeyDatabase();
    sub_1002BEF40(&qword_10163D0A0, (void (*)(uint64_t))type metadata accessor for ItemSharingKeyDatabase);
    uint64_t v6 = CustomStringConvertible.typeDescription.getter();
    v0[17] = sub_1008FA0F0(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SQLite database for %s opened successfully after device unlock.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_release();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1002BD2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 160) = a4;
  *(void *)(v5 + 168) = a5;
  return _swift_task_switch(sub_1002BD2D0, 0, 0);
}

uint64_t sub_1002BD2D0()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    BOOL v3 = (uint64_t (__cdecl *)())((char *)&dword_101639288 + dword_101639288);
    os_log_type_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v2;
    void *v2 = v0;
    v2[1] = sub_1002BD404;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002BD404(uint64_t a1)
{
  *(void *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1002BD504, 0, 0);
}

uint64_t sub_1002BD504()
{
  uint64_t v17 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[23])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_retain_n();
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = v0[21];
    if (v4)
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      v0[18] = v5;
      type metadata accessor for ObservationDatabase();
      sub_1002BEF40(&qword_10163D090, (void (*)(uint64_t))type metadata accessor for ObservationDatabase);
      uint64_t v7 = CustomStringConvertible.typeDescription.getter();
      v0[19] = sub_1008FA0F0(v7, v8, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Waiting for first unlock to open encrypted SQLite database for %{public}s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v15 = (void *)swift_task_alloc();
    v0[24] = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_1002BD83C;
    return sub_100611988();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637448 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170F250);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unable to get FirstUnlockService", v12, 2u);
      swift_slowDealloc();
    }

    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_1002BD83C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1002BD938, 0, 0);
}

uint64_t sub_1002BD938()
{
  os_log_type_t v11 = v0;
  sub_10019D830();
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = v0[21];
  if (v3)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[16] = v4;
    type metadata accessor for ObservationDatabase();
    sub_1002BEF40(&qword_10163D090, (void (*)(uint64_t))type metadata accessor for ObservationDatabase);
    uint64_t v6 = CustomStringConvertible.typeDescription.getter();
    v0[17] = sub_1008FA0F0(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SQLite database for %s opened successfully after device unlock.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_release();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1002BDC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 160) = a4;
  *(void *)(v5 + 168) = a5;
  return _swift_task_switch(sub_1002BDCA0, 0, 0);
}

uint64_t sub_1002BDCA0()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    BOOL v3 = (uint64_t (__cdecl *)())((char *)&dword_101639288 + dword_101639288);
    os_log_type_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v2;
    void *v2 = v0;
    v2[1] = sub_1002BDDD4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002BDDD4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1002BDED4, 0, 0);
}

uint64_t sub_1002BDED4()
{
  uint64_t v17 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[23])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_retain_n();
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = v0[21];
    if (v4)
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      v0[18] = v5;
      type metadata accessor for StandaloneBeaconDatabase();
      sub_1002BEF40(&qword_10163D098, (void (*)(uint64_t))type metadata accessor for StandaloneBeaconDatabase);
      uint64_t v7 = CustomStringConvertible.typeDescription.getter();
      v0[19] = sub_1008FA0F0(v7, v8, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Waiting for first unlock to open encrypted SQLite database for %{public}s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v15 = (void *)swift_task_alloc();
    v0[24] = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_1002BE20C;
    return sub_100611988();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637448 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170F250);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unable to get FirstUnlockService", v12, 2u);
      swift_slowDealloc();
    }

    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_1002BE20C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1002BE308, 0, 0);
}

uint64_t sub_1002BE308()
{
  os_log_type_t v11 = v0;
  sub_10019F46C();
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  BOOL v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = v0[21];
  if (v3)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[16] = v4;
    type metadata accessor for StandaloneBeaconDatabase();
    sub_1002BEF40(&qword_10163D098, (void (*)(uint64_t))type metadata accessor for StandaloneBeaconDatabase);
    uint64_t v6 = CustomStringConvertible.typeDescription.getter();
    v0[17] = sub_1008FA0F0(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "SQLite database for %s opened successfully after device unlock.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_release();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1002BE650()
{
  uint64_t v2 = type metadata accessor for Keychain.DataProtectionClass();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = static Keychain.data(account:service:)();
  if (!v1)
  {
    if (v7 >> 60 == 15)
    {
      uint64_t v0 = static Data.random(bytes:)();
      unint64_t v9 = v8;
      v11[0] = v0;
      v11[1] = v8;
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Keychain.DataProtectionClass.c(_:), v2);
      sub_1000361E0(v0, v9);
      sub_1000362FC();
      static Keychain.set<A>(data:account:service:dataProtectionClass:)();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_10001CFB8(v0, v9);
    }
    else
    {
      return v6;
    }
  }
  return v0;
}

uint64_t sub_1002BE870@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 24);
  return swift_retain();
}

uint64_t sub_1002BE890()
{
  return 1;
}

uint64_t sub_1002BEB20()
{
  uint64_t v2 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100033F68;
  v6[20] = v4;
  v6[21] = v5;
  return _swift_task_switch(sub_1002BC900, 0, 0);
}

uint64_t sub_1002BEC34()
{
  uint64_t v2 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100033F68;
  v6[20] = v4;
  v6[21] = v5;
  return _swift_task_switch(sub_1002BDCA0, 0, 0);
}

uint64_t sub_1002BED48()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1002BEE30()
{
  uint64_t v2 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_10001D2E4;
  v6[20] = v4;
  v6[21] = v5;
  return _swift_task_switch(sub_1002BD2D0, 0, 0);
}

uint64_t sub_1002BEF40(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002BEF88()
{
  return sub_1002BAEAC();
}

uint64_t sub_1002BEFA4()
{
  return sub_1002BAAE0();
}

uint64_t sub_1002BEFC0()
{
  return sub_1002B9574();
}

uint64_t sub_1002BEFDC()
{
  return sub_1002B8B7C();
}

uint64_t sub_1002BEFF8()
{
  return sub_1002B8768();
}

uint64_t sub_1002BF014()
{
  return sub_1002B8110();
}

uint64_t sub_1002BF030()
{
  return sub_1002B7F6C();
}

uint64_t sub_1002BF04C()
{
  return sub_1002B7DBC();
}

uint64_t sub_1002BF068()
{
  return sub_1002B77F0();
}

uint64_t sub_1002BF084()
{
  return sub_1002B7650();
}

uint64_t sub_1002BF0A0()
{
  return sub_1002B6F98();
}

uint64_t *sub_1002BF0BC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v6 = a2[2];
    v4[1] = a2[1];
    v4[2] = v6;
    uint64_t v7 = a3[6];
    uint64_t v8 = (uint64_t *)((char *)v4 + v7);
    unint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = *(uint64_t *)((char *)a2 + v7);
    unint64_t v11 = *(uint64_t *)((char *)a2 + v7 + 8);
    swift_bridgeObjectRetain();
    sub_1000361E0(v10, v11);
    *uint64_t v8 = v10;
    v8[1] = v11;
    uint64_t v12 = (int *)type metadata accessor for OwnedBeaconRecord();
    uint64_t v13 = v12[5];
    uint64_t v14 = (char *)v8 + v13;
    uint64_t v15 = &v9[v13];
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v112 = *(void *)(v16 - 8);
    uint64_t v116 = *(void (**)(char *, char *, uint64_t))(v112 + 16);
    v116(v14, v15, v16);
    uint64_t v17 = v12[6];
    uint64_t v18 = (char *)v8 + v17;
    uint64_t v19 = &v9[v17];
    type metadata accessor for StableIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v23 = *((void *)v19 + 1);
        *(void *)uint64_t v18 = *(void *)v19;
        *((void *)v18 + 1) = v23;
        uint64_t v24 = *((void *)v19 + 3);
        *((void *)v18 + 2) = *((void *)v19 + 2);
        *((void *)v18 + 3) = v24;
        uint64_t v20 = v16;
        uint64_t v25 = *((void *)v19 + 5);
        *((void *)v18 + 4) = *((void *)v19 + 4);
        *((void *)v18 + 5) = v25;
        goto LABEL_8;
      case 2u:
        v116(v18, v19, v16);
        uint64_t v26 = (int *)sub_10000588C(&qword_1016555E0);
        uint64_t v27 = v26[12];
        uint64_t v28 = &v18[v27];
        uint64_t v29 = &v19[v27];
        uint64_t v31 = *(void *)v29;
        uint64_t v30 = *((void *)v29 + 1);
        *uint64_t v28 = v31;
        v28[1] = v30;
        uint64_t v32 = v26[16];
        uint64_t v33 = &v18[v32];
        uint64_t v34 = &v19[v32];
        uint64_t v111 = *((void *)v34 + 1);
        *uint64_t v33 = *(void *)v34;
        v33[1] = v111;
        uint64_t v35 = v26[20];
        uint64_t v36 = &v18[v35];
        uint64_t v37 = &v19[v35];
        uint64_t v38 = *((void *)v37 + 1);
        *uint64_t v36 = *(void *)v37;
        v36[1] = v38;
        *(_WORD *)&v18[v26[24]] = *(_WORD *)&v19[v26[24]];
        uint64_t v39 = v26[28];
        char v40 = &v18[v39];
        char v41 = &v19[v39];
        uint64_t v20 = v16;
        uint64_t v42 = *((void *)v41 + 1);
        *char v40 = *(void *)v41;
        v40[1] = v42;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 3u:
        v116(v18, v19, v16);
        uint64_t v43 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        uint64_t v44 = v43[12];
        uint64_t v45 = &v18[v44];
        uint64_t v46 = &v19[v44];
        uint64_t v48 = *(void *)v46;
        uint64_t v47 = *((void *)v46 + 1);
        *uint64_t v45 = v48;
        v45[1] = v47;
        uint64_t v49 = v43[16];
        uint64_t v50 = &v18[v49];
        __int16 v51 = &v19[v49];
        uint64_t v52 = *((void *)v51 + 1);
        *uint64_t v50 = *(void *)v51;
        v50[1] = v52;
        uint64_t v53 = v43[20];
        uint64_t v54 = &v18[v53];
        uint64_t v55 = &v19[v53];
        uint64_t v20 = v16;
        uint64_t v56 = *((void *)v55 + 1);
        *uint64_t v54 = *(void *)v55;
        v54[1] = v56;
        v18[v43[24]] = v19[v43[24]];
LABEL_8:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v20 = v16;
        uint64_t v21 = *((void *)v19 + 1);
        *(void *)uint64_t v18 = *(void *)v19;
        *((void *)v18 + 1) = v21;
        break;
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    uint64_t v57 = v12[7];
    uint64_t v58 = (char *)v8 + v57;
    uint64_t v59 = &v9[v57];
    uint64_t v114 = v20;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(&v9[v57], 1, v20))
    {
      uint64_t v60 = sub_10000588C(&qword_101638CF0);
      memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64));
    }
    else
    {
      v116(v58, v59, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(v58, 0, 1, v20);
    }
    uint64_t v61 = v12[8];
    unint64_t v62 = (char *)v8 + v61;
    int v63 = &v9[v61];
    uint64_t v64 = type metadata accessor for Date();
    uint64_t v65 = *(void *)(v64 - 8);
    uint64_t v113 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
    v113(v62, v63, v64);
    uint64_t v66 = v12[9];
    int v67 = (uint64_t *)((char *)v8 + v66);
    int v68 = (uint64_t *)&v9[v66];
    uint64_t v69 = *v68;
    unint64_t v70 = v68[1];
    sub_1000361E0(*v68, v70);
    *int v67 = v69;
    v67[1] = v70;
    uint64_t v71 = v12[10];
    uint64_t v72 = (char *)v8 + v71;
    uint64_t v73 = &v9[v71];
    unint64_t v74 = *((void *)v73 + 1);
    if (v74 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
    }
    else
    {
      uint64_t v75 = *(void *)v73;
      sub_1000361E0(*(void *)v73, *((void *)v73 + 1));
      *(void *)uint64_t v72 = v75;
      *((void *)v72 + 1) = v74;
    }
    uint64_t v76 = v12[11];
    uint64_t v77 = (char *)v8 + v76;
    char v78 = &v9[v76];
    unint64_t v79 = *((void *)v78 + 1);
    if (v79 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
    }
    else
    {
      uint64_t v80 = *(void *)v78;
      sub_1000361E0(*(void *)v78, *((void *)v78 + 1));
      *(void *)uint64_t v77 = v80;
      *((void *)v77 + 1) = v79;
    }
    uint64_t v81 = v12[12];
    uint64_t v82 = (uint64_t *)((char *)v8 + v81);
    uint64_t v83 = (uint64_t *)&v9[v81];
    uint64_t v84 = *v83;
    unint64_t v85 = v83[1];
    sub_1000361E0(*v83, v85);
    *uint64_t v82 = v84;
    v82[1] = v85;
    uint64_t v86 = v12[13];
    uint64_t v87 = (uint64_t *)((char *)v8 + v86);
    uint64_t v88 = (uint64_t *)&v9[v86];
    uint64_t v89 = *v88;
    unint64_t v90 = v88[1];
    sub_1000361E0(*v88, v90);
    *uint64_t v87 = v89;
    v87[1] = v90;
    uint64_t v91 = v12[14];
    uint64_t v92 = (uint64_t *)((char *)v8 + v91);
    char v93 = &v9[v91];
    uint64_t v94 = *((void *)v93 + 1);
    *uint64_t v92 = *(void *)v93;
    v92[1] = v94;
    uint64_t v95 = v12[15];
    uint64_t v96 = (uint64_t *)((char *)v8 + v95);
    uint64_t v97 = &v9[v95];
    uint64_t v98 = *((void *)v97 + 1);
    *uint64_t v96 = *(void *)v97;
    v96[1] = v98;
    *(uint64_t *)((char *)v8 + v12[16]) = *(void *)&v9[v12[16]];
    *(uint64_t *)((char *)v8 + v12[17]) = *(void *)&v9[v12[17]];
    *((unsigned char *)v8 + v12[18]) = v9[v12[18]];
    *((unsigned char *)v8 + v12[19]) = v9[v12[19]];
    *((unsigned char *)v8 + v12[20]) = v9[v12[20]];
    uint64_t v99 = a3[7];
    uint64_t v100 = a3[8];
    uint64_t v101 = (char *)v4 + v99;
    uint64_t v102 = (char *)a2 + v99;
    *uint64_t v101 = *v102;
    uint64_t v103 = *((void *)v102 + 2);
    *((void *)v101 + 1) = *((void *)v102 + 1);
    *((void *)v101 + 2) = v103;
    uint64_t v104 = (char *)v4 + v100;
    uint64_t v105 = (char *)a2 + v100;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v116(v104, v105, v114);
    uint64_t v106 = a3[9];
    long long v107 = (char *)v4 + v106;
    unint64_t v108 = (char *)a2 + v106;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v108, 1, v64))
    {
      uint64_t v109 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v107, v108, *(void *)(*(void *)(v109 - 8) + 64));
    }
    else
    {
      v113(v107, v108, v64);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v107, 0, 1, v64);
    }
  }
  return v4;
}

uint64_t sub_1002BF730(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  sub_10001CFB8(*(void *)v4, *(void *)(v4 + 8));
  int v5 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = v4 + v5[5];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v4 + v5[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v9(v10, v7);
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v4 + v5[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7)) {
    v9(v11, v7);
  }
  uint64_t v12 = v4 + v5[8];
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v21(v12, v13);
  sub_10001CFB8(*(void *)(v4 + v5[9]), *(void *)(v4 + v5[9] + 8));
  uint64_t v15 = (uint64_t *)(v4 + v5[10]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  uint64_t v17 = (uint64_t *)(v4 + v5[11]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_10001CFB8(*v17, v18);
  }
  sub_10001CFB8(*(void *)(v4 + v5[12]), *(void *)(v4 + v5[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v5[13]), *(void *)(v4 + v5[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9(a1 + a2[8], v7);
  uint64_t v19 = a1 + a2[9];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v19, 1, v13);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v21)(v19, v13);
  }
  return result;
}

uint64_t sub_1002BFB00(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = a3[6];
  uint64_t v6 = (uint64_t *)(a1 + v5);
  uint64_t v7 = a2 + v5;
  uint64_t v8 = *(void *)(a2 + v5);
  unint64_t v9 = *(void *)(a2 + v5 + 8);
  swift_bridgeObjectRetain();
  sub_1000361E0(v8, v9);
  *uint64_t v6 = v8;
  v6[1] = v9;
  uint64_t v10 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v11 = v10[5];
  uint64_t v12 = (char *)v6 + v11;
  uint64_t v13 = v7 + v11;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v113 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v113(v12, v13, v14);
  uint64_t v16 = v10[6];
  uint64_t v17 = (char *)v6 + v16;
  unint64_t v18 = (void *)(v7 + v16);
  type metadata accessor for StableIdentifier();
  uint64_t v112 = v14;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v20 = v18[1];
      *(void *)uint64_t v17 = *v18;
      *((void *)v17 + 1) = v20;
      uint64_t v21 = v18[3];
      *((void *)v17 + 2) = v18[2];
      *((void *)v17 + 3) = v21;
      uint64_t v22 = v18[5];
      *((void *)v17 + 4) = v18[4];
      *((void *)v17 + 5) = v22;
      goto LABEL_6;
    case 2u:
      v113(v17, (uint64_t)v18, v14);
      uint64_t v23 = (int *)sub_10000588C(&qword_1016555E0);
      uint64_t v24 = v23[12];
      uint64_t v25 = &v17[v24];
      uint64_t v26 = (void *)((char *)v18 + v24);
      uint64_t v28 = *v26;
      uint64_t v27 = v26[1];
      *(void *)uint64_t v25 = v28;
      *((void *)v25 + 1) = v27;
      uint64_t v29 = v23[16];
      uint64_t v30 = &v17[v29];
      uint64_t v31 = (void *)((char *)v18 + v29);
      uint64_t v108 = v31[1];
      *(void *)uint64_t v30 = *v31;
      *((void *)v30 + 1) = v108;
      uint64_t v32 = v23[20];
      uint64_t v33 = &v17[v32];
      uint64_t v34 = (void *)((char *)v18 + v32);
      uint64_t v35 = v34[1];
      *(void *)uint64_t v33 = *v34;
      *((void *)v33 + 1) = v35;
      *(_WORD *)&v17[v23[24]] = *(_WORD *)((char *)v18 + v23[24]);
      uint64_t v36 = v23[28];
      uint64_t v37 = &v17[v36];
      uint64_t v38 = (void *)((char *)v18 + v36);
      uint64_t v39 = v38[1];
      *(void *)uint64_t v37 = *v38;
      *((void *)v37 + 1) = v39;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 3u:
      v113(v17, (uint64_t)v18, v14);
      char v40 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
      uint64_t v41 = v40[12];
      uint64_t v42 = &v17[v41];
      uint64_t v43 = (void *)((char *)v18 + v41);
      uint64_t v45 = *v43;
      uint64_t v44 = v43[1];
      *(void *)uint64_t v42 = v45;
      *((void *)v42 + 1) = v44;
      uint64_t v46 = v40[16];
      uint64_t v47 = &v17[v46];
      uint64_t v48 = (void *)((char *)v18 + v46);
      uint64_t v49 = v48[1];
      *(void *)uint64_t v47 = *v48;
      *((void *)v47 + 1) = v49;
      uint64_t v50 = v40[20];
      __int16 v51 = &v17[v50];
      uint64_t v52 = (void *)((char *)v18 + v50);
      uint64_t v53 = v52[1];
      *(void *)__int16 v51 = *v52;
      *((void *)v51 + 1) = v53;
      v17[v40[24]] = *((unsigned char *)v18 + v40[24]);
LABEL_6:
      swift_bridgeObjectRetain();
      uint64_t v14 = v112;
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v19 = v18[1];
      *(void *)uint64_t v17 = *v18;
      *((void *)v17 + 1) = v19;
      break;
  }
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  uint64_t v54 = v10[7];
  uint64_t v55 = (char *)v6 + v54;
  uint64_t v56 = (const void *)(v7 + v54);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v7 + v54, 1, v14))
  {
    uint64_t v57 = sub_10000588C(&qword_101638CF0);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    v113(v55, (uint64_t)v56, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v55, 0, 1, v14);
  }
  uint64_t v58 = v10[8];
  uint64_t v59 = (char *)v6 + v58;
  uint64_t v60 = v7 + v58;
  uint64_t v61 = type metadata accessor for Date();
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v109 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
  v109(v59, v60, v61);
  uint64_t v63 = v10[9];
  uint64_t v64 = (uint64_t *)((char *)v6 + v63);
  uint64_t v65 = (uint64_t *)(v7 + v63);
  uint64_t v66 = *v65;
  unint64_t v67 = v65[1];
  sub_1000361E0(*v65, v67);
  *uint64_t v64 = v66;
  v64[1] = v67;
  uint64_t v68 = v10[10];
  uint64_t v69 = (char *)v6 + v68;
  unint64_t v70 = (uint64_t *)(v7 + v68);
  unint64_t v71 = v70[1];
  if (v71 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
  }
  else
  {
    uint64_t v72 = *v70;
    sub_1000361E0(*v70, v70[1]);
    *(void *)uint64_t v69 = v72;
    *((void *)v69 + 1) = v71;
  }
  uint64_t v73 = v10[11];
  unint64_t v74 = (char *)v6 + v73;
  uint64_t v75 = (uint64_t *)(v7 + v73);
  unint64_t v76 = v75[1];
  if (v76 >> 60 == 15)
  {
    *(_OWORD *)unint64_t v74 = *(_OWORD *)v75;
  }
  else
  {
    uint64_t v77 = *v75;
    sub_1000361E0(*v75, v75[1]);
    *(void *)unint64_t v74 = v77;
    *((void *)v74 + 1) = v76;
  }
  uint64_t v78 = v10[12];
  unint64_t v79 = (uint64_t *)((char *)v6 + v78);
  uint64_t v80 = (uint64_t *)(v7 + v78);
  uint64_t v81 = *v80;
  unint64_t v82 = v80[1];
  sub_1000361E0(*v80, v82);
  *unint64_t v79 = v81;
  v79[1] = v82;
  uint64_t v83 = v10[13];
  uint64_t v84 = (uint64_t *)((char *)v6 + v83);
  unint64_t v85 = (uint64_t *)(v7 + v83);
  uint64_t v86 = *v85;
  unint64_t v87 = v85[1];
  sub_1000361E0(*v85, v87);
  *uint64_t v84 = v86;
  v84[1] = v87;
  uint64_t v88 = v10[14];
  uint64_t v89 = (uint64_t *)((char *)v6 + v88);
  unint64_t v90 = (void *)(v7 + v88);
  uint64_t v91 = v90[1];
  *uint64_t v89 = *v90;
  v89[1] = v91;
  uint64_t v92 = v10[15];
  char v93 = (uint64_t *)((char *)v6 + v92);
  uint64_t v94 = (void *)(v7 + v92);
  uint64_t v95 = v94[1];
  *char v93 = *v94;
  v93[1] = v95;
  *(uint64_t *)((char *)v6 + v10[16]) = *(void *)(v7 + v10[16]);
  *(uint64_t *)((char *)v6 + v10[17]) = *(void *)(v7 + v10[17]);
  *((unsigned char *)v6 + v10[18]) = *(unsigned char *)(v7 + v10[18]);
  *((unsigned char *)v6 + v10[19]) = *(unsigned char *)(v7 + v10[19]);
  *((unsigned char *)v6 + v10[20]) = *(unsigned char *)(v7 + v10[20]);
  uint64_t v96 = a3[7];
  uint64_t v97 = a3[8];
  uint64_t v98 = a1 + v96;
  uint64_t v99 = a2 + v96;
  *(unsigned char *)uint64_t v98 = *(unsigned char *)v99;
  uint64_t v100 = *(void *)(v99 + 16);
  *(void *)(v98 + 8) = *(void *)(v99 + 8);
  *(void *)(v98 + 16) = v100;
  uint64_t v101 = (char *)(a1 + v97);
  uint64_t v102 = a2 + v97;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v113(v101, v102, v112);
  uint64_t v103 = a3[9];
  uint64_t v104 = (void *)(a1 + v103);
  uint64_t v105 = (const void *)(a2 + v103);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(a2 + v103, 1, v61))
  {
    uint64_t v106 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v104, v105, *(void *)(*(void *)(v106 - 8) + 64));
  }
  else
  {
    v109((char *)v104, (uint64_t)v105, v61);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v104, 0, 1, v61);
  }
  return a1;
}

uint64_t sub_1002C0104(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v112 = a3;
  uint64_t v6 = a3[6];
  uint64_t v7 = (uint64_t *)(a1 + v6);
  uint64_t v8 = a2 + v6;
  uint64_t v9 = *(void *)(a2 + v6);
  unint64_t v10 = *(void *)(a2 + v6 + 8);
  sub_1000361E0(v9, v10);
  uint64_t v11 = *v7;
  unint64_t v12 = v7[1];
  *uint64_t v7 = v9;
  v7[1] = v10;
  sub_10001CFB8(v11, v12);
  uint64_t v13 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v14 = v13[5];
  uint64_t v15 = (char *)v7 + v14;
  uint64_t v16 = v8 + v14;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  unint64_t v115 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 24);
  v115(v15, v16, v17);
  uint64_t v113 = a2;
  uint64_t v114 = a1;
  if (a1 != a2)
  {
    uint64_t v19 = v13[6];
    uint64_t v20 = (uint64_t *)((char *)v7 + v19);
    uint64_t v21 = (void *)(v8 + v19);
    sub_1002C0934((uint64_t)v7 + v19);
    type metadata accessor for StableIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *uint64_t v20 = *v21;
        v20[1] = v21[1];
        void v20[2] = v21[2];
        v20[3] = v21[3];
        v20[4] = v21[4];
        v20[5] = v21[5];
        goto LABEL_7;
      case 2u:
        (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v20, v21, v17);
        uint64_t v22 = (int *)sub_10000588C(&qword_1016555E0);
        uint64_t v23 = v22[12];
        uint64_t v24 = (void *)((char *)v20 + v23);
        uint64_t v25 = (void *)((char *)v21 + v23);
        *uint64_t v24 = *v25;
        v24[1] = v25[1];
        uint64_t v26 = v22[16];
        uint64_t v27 = (void *)((char *)v20 + v26);
        uint64_t v28 = (void *)((char *)v21 + v26);
        *uint64_t v27 = *v28;
        v27[1] = v28[1];
        uint64_t v29 = v22[20];
        uint64_t v30 = (void *)((char *)v20 + v29);
        uint64_t v31 = (void *)((char *)v21 + v29);
        *uint64_t v30 = *v31;
        v30[1] = v31[1];
        *(_WORD *)((char *)v20 + v22[24]) = *(_WORD *)((char *)v21 + v22[24]);
        uint64_t v32 = v22[28];
        uint64_t v33 = (void *)((char *)v20 + v32);
        uint64_t v34 = (void *)((char *)v21 + v32);
        *uint64_t v33 = *v34;
        v33[1] = v34[1];
        swift_bridgeObjectRetain();
        goto LABEL_7;
      case 3u:
        (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v20, v21, v17);
        uint64_t v35 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        uint64_t v36 = v35[12];
        uint64_t v37 = (void *)((char *)v20 + v36);
        uint64_t v38 = (void *)((char *)v21 + v36);
        *uint64_t v37 = *v38;
        v37[1] = v38[1];
        uint64_t v39 = v35[16];
        char v40 = (void *)((char *)v20 + v39);
        uint64_t v41 = (void *)((char *)v21 + v39);
        *char v40 = *v41;
        v40[1] = v41[1];
        uint64_t v42 = v35[20];
        uint64_t v43 = (void *)((char *)v20 + v42);
        uint64_t v44 = (void *)((char *)v21 + v42);
        *uint64_t v43 = *v44;
        v43[1] = v44[1];
        *((unsigned char *)v20 + v35[24]) = *((unsigned char *)v21 + v35[24]);
LABEL_7:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        *uint64_t v20 = *v21;
        v20[1] = v21[1];
        break;
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v45 = v13[7];
  uint64_t v46 = (char *)v7 + v45;
  uint64_t v47 = (char *)(v8 + v45);
  uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v49 = v48((char *)v7 + v45, 1, v17);
  int v50 = v48(v47, 1, v17);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v46, v47, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v46, 0, 1, v17);
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v46, v17);
LABEL_14:
    uint64_t v51 = sub_10000588C(&qword_101638CF0);
    memcpy(v46, v47, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_15;
  }
  v115(v46, (uint64_t)v47, v17);
LABEL_15:
  uint64_t v52 = v13[8];
  uint64_t v53 = (char *)v7 + v52;
  uint64_t v54 = v8 + v52;
  uint64_t v55 = type metadata accessor for Date();
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v111 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 24);
  v111(v53, v54, v55);
  uint64_t v57 = v13[9];
  uint64_t v58 = (uint64_t *)((char *)v7 + v57);
  uint64_t v59 = (uint64_t *)(v8 + v57);
  uint64_t v60 = *v59;
  unint64_t v61 = v59[1];
  sub_1000361E0(*v59, v61);
  uint64_t v62 = *v58;
  unint64_t v63 = v58[1];
  *uint64_t v58 = v60;
  v58[1] = v61;
  sub_10001CFB8(v62, v63);
  uint64_t v64 = v13[10];
  uint64_t v65 = (uint64_t *)((char *)v7 + v64);
  uint64_t v66 = (uint64_t *)(v8 + v64);
  unint64_t v67 = *(void *)(v8 + v64 + 8);
  if (*(unint64_t *)((char *)v7 + v64 + 8) >> 60 == 15)
  {
    if (v67 >> 60 != 15)
    {
      uint64_t v68 = *v66;
      sub_1000361E0(v68, v67);
      *uint64_t v65 = v68;
      v65[1] = v67;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v67 >> 60 == 15)
  {
    sub_1002C0990((uint64_t)v65);
LABEL_20:
    *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
    goto LABEL_22;
  }
  uint64_t v69 = *v66;
  sub_1000361E0(v69, v67);
  uint64_t v70 = *v65;
  unint64_t v71 = v65[1];
  *uint64_t v65 = v69;
  v65[1] = v67;
  sub_10001CFB8(v70, v71);
LABEL_22:
  uint64_t v72 = v13[11];
  uint64_t v73 = (uint64_t *)((char *)v7 + v72);
  unint64_t v74 = (uint64_t *)(v8 + v72);
  unint64_t v75 = *(void *)(v8 + v72 + 8);
  if (*(unint64_t *)((char *)v7 + v72 + 8) >> 60 == 15)
  {
    if (v75 >> 60 != 15)
    {
      uint64_t v76 = *v74;
      sub_1000361E0(v76, v75);
      *uint64_t v73 = v76;
      v73[1] = v75;
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (v75 >> 60 == 15)
  {
    sub_1002C0990((uint64_t)v73);
LABEL_27:
    *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
    goto LABEL_29;
  }
  uint64_t v77 = *v74;
  sub_1000361E0(v77, v75);
  uint64_t v78 = *v73;
  unint64_t v79 = v73[1];
  *uint64_t v73 = v77;
  v73[1] = v75;
  sub_10001CFB8(v78, v79);
LABEL_29:
  uint64_t v80 = v13[12];
  uint64_t v81 = (uint64_t *)((char *)v7 + v80);
  unint64_t v82 = (uint64_t *)(v8 + v80);
  uint64_t v83 = *v82;
  unint64_t v84 = v82[1];
  sub_1000361E0(*v82, v84);
  uint64_t v85 = *v81;
  unint64_t v86 = v81[1];
  *uint64_t v81 = v83;
  v81[1] = v84;
  sub_10001CFB8(v85, v86);
  uint64_t v87 = v13[13];
  uint64_t v88 = (uint64_t *)((char *)v7 + v87);
  uint64_t v89 = (uint64_t *)(v8 + v87);
  uint64_t v90 = *v89;
  unint64_t v91 = v89[1];
  sub_1000361E0(*v89, v91);
  uint64_t v92 = *v88;
  unint64_t v93 = v88[1];
  *uint64_t v88 = v90;
  v88[1] = v91;
  sub_10001CFB8(v92, v93);
  uint64_t v94 = v13[14];
  uint64_t v95 = (uint64_t *)((char *)v7 + v94);
  uint64_t v96 = (void *)(v8 + v94);
  *uint64_t v95 = *v96;
  v95[1] = v96[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v97 = v13[15];
  uint64_t v98 = (uint64_t *)((char *)v7 + v97);
  uint64_t v99 = (void *)(v8 + v97);
  *uint64_t v98 = *v99;
  v98[1] = v99[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)v7 + v13[16]) = *(void *)(v8 + v13[16]);
  *(uint64_t *)((char *)v7 + v13[17]) = *(void *)(v8 + v13[17]);
  *((unsigned char *)v7 + v13[18]) = *(unsigned char *)(v8 + v13[18]);
  *((unsigned char *)v7 + v13[19]) = *(unsigned char *)(v8 + v13[19]);
  *((unsigned char *)v7 + v13[20]) = *(unsigned char *)(v8 + v13[20]);
  uint64_t v100 = v112[7];
  uint64_t v101 = v114 + v100;
  uint64_t v102 = v113 + v100;
  *(unsigned char *)uint64_t v101 = *(unsigned char *)v102;
  *(void *)(v101 + 8) = *(void *)(v102 + 8);
  *(void *)(v101 + 16) = *(void *)(v102 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v115((char *)(v114 + v112[8]), v113 + v112[8], v17);
  uint64_t v103 = v112[9];
  uint64_t v104 = (char *)(v114 + v103);
  uint64_t v105 = (const void *)(v113 + v103);
  uint64_t v106 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
  int v107 = v106(v114 + v103, 1, v55);
  int v108 = v106((uint64_t)v105, 1, v55);
  if (!v107)
  {
    if (!v108)
    {
      v111(v104, (uint64_t)v105, v55);
      return v114;
    }
    (*(void (**)(char *, uint64_t))(v56 + 8))(v104, v55);
    goto LABEL_34;
  }
  if (v108)
  {
LABEL_34:
    uint64_t v109 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v104, v105, *(void *)(*(void *)(v109 - 8) + 64));
    return v114;
  }
  (*(void (**)(char *, const void *, uint64_t))(v56 + 16))(v104, v105, v55);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v104, 0, 1, v55);
  return v114;
}

uint64_t sub_1002C0934(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StableIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002C0990(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002C09E4(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = a3[6];
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_OWORD *)(a1 + v4) = *(_OWORD *)(a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v8 = v7[5];
  uint64_t v9 = v5 + v8;
  uint64_t v10 = v6 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v42(v9, v10, v11);
  uint64_t v13 = v7[6];
  uint64_t v14 = (unsigned char *)(v5 + v13);
  uint64_t v15 = (unsigned char *)(v6 + v13);
  uint64_t v16 = type metadata accessor for StableIdentifier();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v42((uint64_t)v14, (uint64_t)v15, v11);
    uint64_t v19 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
    *(_OWORD *)&v14[v19[12]] = *(_OWORD *)&v15[v19[12]];
    *(_OWORD *)&v14[v19[16]] = *(_OWORD *)&v15[v19[16]];
    *(_OWORD *)&v14[v19[20]] = *(_OWORD *)&v15[v19[20]];
    v14[v19[24]] = v15[v19[24]];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 2)
  {
    v42((uint64_t)v14, (uint64_t)v15, v11);
    uint64_t v18 = (int *)sub_10000588C(&qword_1016555E0);
    *(_OWORD *)&v14[v18[12]] = *(_OWORD *)&v15[v18[12]];
    *(_OWORD *)&v14[v18[16]] = *(_OWORD *)&v15[v18[16]];
    *(_OWORD *)&v14[v18[20]] = *(_OWORD *)&v15[v18[20]];
    *(_WORD *)&v14[v18[24]] = *(_WORD *)&v15[v18[24]];
    *(_OWORD *)&v14[v18[28]] = *(_OWORD *)&v15[v18[28]];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  uint64_t v20 = v7[7];
  uint64_t v21 = (void *)(v5 + v20);
  uint64_t v22 = (const void *)(v6 + v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v6 + v20, 1, v11))
  {
    uint64_t v23 = sub_10000588C(&qword_101638CF0);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    v42((uint64_t)v21, (uint64_t)v22, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v21, 0, 1, v11);
  }
  uint64_t v24 = v7[8];
  uint64_t v25 = v5 + v24;
  uint64_t v26 = v6 + v24;
  uint64_t v27 = type metadata accessor for Date();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = v25;
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32);
  v30(v29, v26, v27);
  *(_OWORD *)(v5 + v7[9]) = *(_OWORD *)(v6 + v7[9]);
  *(_OWORD *)(v5 + v7[10]) = *(_OWORD *)(v6 + v7[10]);
  *(_OWORD *)(v5 + v7[11]) = *(_OWORD *)(v6 + v7[11]);
  *(_OWORD *)(v5 + v7[12]) = *(_OWORD *)(v6 + v7[12]);
  *(_OWORD *)(v5 + v7[13]) = *(_OWORD *)(v6 + v7[13]);
  *(_OWORD *)(v5 + v7[14]) = *(_OWORD *)(v6 + v7[14]);
  *(_OWORD *)(v5 + v7[15]) = *(_OWORD *)(v6 + v7[15]);
  *(void *)(v5 + v7[16]) = *(void *)(v6 + v7[16]);
  *(void *)(v5 + v7[17]) = *(void *)(v6 + v7[17]);
  *(unsigned char *)(v5 + v7[18]) = *(unsigned char *)(v6 + v7[18]);
  *(unsigned char *)(v5 + v7[19]) = *(unsigned char *)(v6 + v7[19]);
  *(unsigned char *)(v5 + v7[20]) = *(unsigned char *)(v6 + v7[20]);
  uint64_t v31 = a3[7];
  uint64_t v32 = a3[8];
  uint64_t v33 = a1 + v31;
  uint64_t v34 = a2 + v31;
  *(void *)(v33 + 16) = *(void *)(v34 + 16);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  v42(a1 + v32, a2 + v32, v11);
  uint64_t v35 = a3[9];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (const void *)(a2 + v35);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v37, 1, v27))
  {
    uint64_t v38 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    v30((uint64_t)v36, (uint64_t)v37, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v36, 0, 1, v27);
  }
  return a1;
}

uint64_t sub_1002C0E8C(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v83 = a3;
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a1 + v7);
  unint64_t v11 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v13 = v12[5];
  uint64_t v14 = v8 + v13;
  uint64_t v15 = v9 + v13;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 40);
  v85(v14, v15, v16);
  uint64_t v84 = a2;
  if (a1 != a2)
  {
    uint64_t v18 = v12[6];
    uint64_t v19 = (unsigned char *)(v8 + v18);
    uint64_t v20 = (unsigned char *)(v9 + v18);
    sub_1002C0934(v8 + v18);
    uint64_t v21 = type metadata accessor for StableIdentifier();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v17 + 32))(v19, v20, v16);
      uint64_t v24 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
      *(_OWORD *)&v19[v24[12]] = *(_OWORD *)&v20[v24[12]];
      *(_OWORD *)&v19[v24[16]] = *(_OWORD *)&v20[v24[16]];
      *(_OWORD *)&v19[v24[20]] = *(_OWORD *)&v20[v24[20]];
      v19[v24[24]] = v20[v24[24]];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v17 + 32))(v19, v20, v16);
      uint64_t v23 = (int *)sub_10000588C(&qword_1016555E0);
      *(_OWORD *)&v19[v23[12]] = *(_OWORD *)&v20[v23[12]];
      *(_OWORD *)&v19[v23[16]] = *(_OWORD *)&v20[v23[16]];
      *(_OWORD *)&v19[v23[20]] = *(_OWORD *)&v20[v23[20]];
      *(_WORD *)&v19[v23[24]] = *(_WORD *)&v20[v23[24]];
      *(_OWORD *)&v19[v23[28]] = *(_OWORD *)&v20[v23[28]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
  }
  uint64_t v25 = v12[7];
  uint64_t v26 = (void *)(v8 + v25);
  uint64_t v27 = (const void *)(v9 + v25);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  int v29 = v28(v8 + v25, 1, v16);
  uint64_t v86 = v16;
  int v30 = v28((uint64_t)v27, 1, v16);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v26, v27, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v26, 0, 1, v16);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v26, v16);
LABEL_12:
    uint64_t v31 = sub_10000588C(&qword_101638CF0);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  v85((uint64_t)v26, (uint64_t)v27, v16);
LABEL_13:
  uint64_t v32 = v12[8];
  uint64_t v33 = v8 + v32;
  uint64_t v34 = v9 + v32;
  uint64_t v35 = type metadata accessor for Date();
  uint64_t v36 = *(void *)(v35 - 8);
  unint64_t v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 40);
  v82(v33, v34, v35);
  uint64_t v37 = v12[9];
  uint64_t v38 = *(void *)(v8 + v37);
  unint64_t v39 = *(void *)(v8 + v37 + 8);
  *(_OWORD *)(v8 + v37) = *(_OWORD *)(v9 + v37);
  sub_10001CFB8(v38, v39);
  uint64_t v40 = v12[10];
  uint64_t v41 = v8 + v40;
  uint64_t v42 = v9 + v40;
  unint64_t v43 = *(void *)(v8 + v40 + 8);
  if (v43 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    goto LABEL_18;
  }
  unint64_t v44 = *(void *)(v42 + 8);
  if (v44 >> 60 == 15)
  {
    sub_1002C0990(v41);
    goto LABEL_16;
  }
  uint64_t v45 = *(void *)v41;
  *(void *)uint64_t v41 = *(void *)v42;
  *(void *)(v41 + 8) = v44;
  sub_10001CFB8(v45, v43);
LABEL_18:
  uint64_t v46 = v36;
  uint64_t v47 = v12[11];
  uint64_t v48 = v8 + v47;
  uint64_t v49 = v9 + v47;
  unint64_t v50 = *(void *)(v8 + v47 + 8);
  if (v50 >> 60 == 15)
  {
LABEL_21:
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
    goto LABEL_23;
  }
  unint64_t v51 = *(void *)(v49 + 8);
  if (v51 >> 60 == 15)
  {
    sub_1002C0990(v48);
    goto LABEL_21;
  }
  uint64_t v52 = *(void *)v48;
  *(void *)uint64_t v48 = *(void *)v49;
  *(void *)(v48 + 8) = v51;
  sub_10001CFB8(v52, v50);
LABEL_23:
  uint64_t v53 = v12[12];
  uint64_t v54 = *(void *)(v8 + v53);
  unint64_t v55 = *(void *)(v8 + v53 + 8);
  *(_OWORD *)(v8 + v53) = *(_OWORD *)(v9 + v53);
  sub_10001CFB8(v54, v55);
  uint64_t v56 = v12[13];
  uint64_t v57 = *(void *)(v8 + v56);
  unint64_t v58 = *(void *)(v8 + v56 + 8);
  *(_OWORD *)(v8 + v56) = *(_OWORD *)(v9 + v56);
  sub_10001CFB8(v57, v58);
  uint64_t v59 = v12[14];
  uint64_t v60 = (void *)(v8 + v59);
  unint64_t v61 = (uint64_t *)(v9 + v59);
  uint64_t v63 = *v61;
  uint64_t v62 = v61[1];
  *uint64_t v60 = v63;
  v60[1] = v62;
  swift_bridgeObjectRelease();
  uint64_t v64 = v12[15];
  uint64_t v65 = (void *)(v8 + v64);
  uint64_t v66 = (uint64_t *)(v9 + v64);
  uint64_t v68 = *v66;
  uint64_t v67 = v66[1];
  *uint64_t v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease();
  *(void *)(v8 + v12[16]) = *(void *)(v9 + v12[16]);
  *(void *)(v8 + v12[17]) = *(void *)(v9 + v12[17]);
  *(unsigned char *)(v8 + v12[18]) = *(unsigned char *)(v9 + v12[18]);
  *(unsigned char *)(v8 + v12[19]) = *(unsigned char *)(v9 + v12[19]);
  *(unsigned char *)(v8 + v12[20]) = *(unsigned char *)(v9 + v12[20]);
  uint64_t v69 = v83[7];
  uint64_t v70 = a1 + v69;
  uint64_t v71 = v84 + v69;
  *(unsigned char *)uint64_t v70 = *(unsigned char *)v71;
  uint64_t v73 = *(void *)(v71 + 8);
  uint64_t v72 = *(void *)(v71 + 16);
  *(void *)(v70 + 8) = v73;
  *(void *)(v70 + 16) = v72;
  swift_bridgeObjectRelease();
  v85(a1 + v83[8], v84 + v83[8], v86);
  uint64_t v74 = v83[9];
  unint64_t v75 = (void *)(a1 + v74);
  uint64_t v76 = (const void *)(v84 + v74);
  uint64_t v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
  int v78 = v77(a1 + v74, 1, v35);
  int v79 = v77((uint64_t)v76, 1, v35);
  if (!v78)
  {
    if (!v79)
    {
      v82((uint64_t)v75, (uint64_t)v76, v35);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v46 + 8))(v75, v35);
    goto LABEL_28;
  }
  if (v79)
  {
LABEL_28:
    uint64_t v80 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v75, v76, *(void *)(*(void *)(v80 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v46 + 32))(v75, v76, v35);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v75, 0, 1, v35);
  return a1;
}

uint64_t sub_1002C1514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002C1528);
}

uint64_t sub_1002C1528(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_9;
  }
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[9];

  return v15(v17, a2, v16);
}

uint64_t sub_1002C16A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002C16B8);
}

uint64_t sub_1002C16B8(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_7;
  }
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[9];

  return v15(v17, a2, a2, v16);
}

uint64_t type metadata accessor for ShareInstruction()
{
  uint64_t result = qword_101640D08;
  if (!qword_101640D08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002C1880()
{
  type metadata accessor for OwnedBeaconRecord();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v1 <= 0x3F)
    {
      sub_1000C7D80();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1002C19A0()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for ShareInstruction();
  sub_100D1CDD8();
  Hasher._combine(_:)(v0[*(int *)(v8 + 28)]);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  sub_1002C26A4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  sub_10001E2BC((uint64_t)&v0[*(int *)(v8 + 36)], (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    sub_1002C26A4((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}