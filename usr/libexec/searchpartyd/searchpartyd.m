uint64_t sub_100005144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = type metadata accessor for LocalizationUtility.Table();
  v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.delegatedSharing(_:), v1);
  static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  v6 = (uint64_t *)(v0 + *(int *)(type metadata accessor for DelegatedShareStartUserNotification() + 20));
  v8 = *v6;
  v7 = v6[1];
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_10000B4CC();
  *(void *)(v5 + 32) = v8;
  *(void *)(v5 + 40) = v7;
  swift_bridgeObjectRetain();
  v9 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1000052E0()
{
  return 129;
}

uint64_t LocationProvider.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_100005354()
{
  uint64_t v0 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LocalizationUtility.Table.delegatedSharing(_:), v0);
  uint64_t v4 = static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

unint64_t sub_10000546C()
{
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = 0x6564496572616873;
  *(void *)(inited + 40) = 0xEF7265696669746ELL;
  uint64_t v1 = UUID.uuidString.getter();
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v1;
  *(void *)(inited + 56) = v2;
  return sub_10092CEEC(inited);
}

uint64_t variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus()
{
  return 0;
}

uint64_t sub_1000054FC()
{
  return 1;
}

uint64_t sub_100005504()
{
  if (qword_101636920 != -1) {
    swift_once();
  }
  return dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
}

uint64_t variable initialization expression of CurrentLocationMonitor.delegate()
{
  return 0;
}

uint64_t variable initialization expression of CurrentLocationMonitor.locationManager()
{
  return 0;
}

uint64_t variable initialization expression of CurrentLocationMonitor.queue()
{
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  static DispatchQoS.unspecified.getter();
  v5[1] = &_swiftEmptyArrayStorage;
  sub_10000AAE0((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1000058D0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t variable initialization expression of DeviceIdentityUtility.certExpiryDate@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

void *variable initialization expression of DeviceIdentityUtility.certs()
{
  return &_swiftEmptyArrayStorage;
}

unint64_t sub_10000584C()
{
  unint64_t result = qword_1016376E0;
  if (!qword_1016376E0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1016376E0);
  }
  return result;
}

uint64_t sub_10000588C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_1000058D0()
{
  unint64_t result = qword_101638CD0;
  if (!qword_101638CD0)
  {
    sub_10000592C((uint64_t *)&unk_1016376F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101638CD0);
  }
  return result;
}

uint64_t sub_10000592C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void type metadata accessor for CBManagerState(uint64_t a1)
{
}

void type metadata accessor for QualityOfService(uint64_t a1)
{
}

__n128 initializeWithTake for KeyRepresentableInternal(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MessagingStats.MessageKey(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MessagingStats.MessageKey(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for sp_key_index_map_handle(uint64_t a1)
{
}

void type metadata accessor for CFRunLoopSource(uint64_t a1)
{
}

void type metadata accessor for CKAccountStatus(uint64_t a1)
{
}

void type metadata accessor for sp_key_subsequence_handle(uint64_t a1)
{
}

void type metadata accessor for CFUserNotification(uint64_t a1)
{
}

void type metadata accessor for SPBTRSSIChannel(uint64_t a1)
{
}

void type metadata accessor for SPBeaconType(uint64_t a1)
{
}

void type metadata accessor for CBUseCase(uint64_t a1)
{
}

void type metadata accessor for SecureLocationsStewieServiceState(uint64_t a1)
{
}

void type metadata accessor for Scope(uint64_t a1)
{
}

void type metadata accessor for SPDisabledReason(uint64_t a1)
{
}

void type metadata accessor for SPServiceState(uint64_t a1)
{
}

void type metadata accessor for NWConnectionState(uint64_t a1)
{
}

void type metadata accessor for BluetoothPowerState(uint64_t a1)
{
}

void type metadata accessor for RTLocationOfInterestType(uint64_t a1)
{
}

void type metadata accessor for SPSecureLocationPublishReason(uint64_t a1)
{
}

void type metadata accessor for SPMotionActivityState(uint64_t a1)
{
}

void type metadata accessor for SPDeviceEventSource(uint64_t a1)
{
}

void type metadata accessor for CBCharacteristicProperties(uint64_t a1)
{
}

void type metadata accessor for BeaconTaskState(uint64_t a1)
{
}

void type metadata accessor for PlaySoundContext(uint64_t a1)
{
}

void type metadata accessor for TrackingObservationAction(uint64_t a1)
{
}

void type metadata accessor for SPSecureLocationSubscriptionMode(uint64_t a1)
{
}

void type metadata accessor for SPBeaconObservationType(uint64_t a1)
{
}

void type metadata accessor for SecKey(uint64_t a1)
{
}

void type metadata accessor for SPBeaconGroupStatus(uint64_t a1)
{
}

void type metadata accessor for TrackingObservationType(uint64_t a1)
{
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
}

uint64_t sub_100005C24(uint64_t a1, uint64_t a2)
{
  return sub_10000B274(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100005C48(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638740, type metadata accessor for SPPairingSessionError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100005CB4(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638740, type metadata accessor for SPPairingSessionError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005D24(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638770, type metadata accessor for SPPairingSessionError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100005D90@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100005D98(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016385C8, type metadata accessor for SPBeaconSharingError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100005E04(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016385C8, type metadata accessor for SPBeaconSharingError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005E70(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

void *sub_100005EE0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100005EEC(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016384D8, type metadata accessor for SecureLocationsError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100005F58(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016384D8, type metadata accessor for SecureLocationsError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005FC4(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_10163F370, type metadata accessor for SecureLocationsError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100006038(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638368, type metadata accessor for FirmwareUpdateError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000060A4(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638368, type metadata accessor for FirmwareUpdateError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100006110(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016383A0, type metadata accessor for FirmwareUpdateError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100006184(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016386E0, type metadata accessor for SPOwnerSessionError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000061F0(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016386E0, type metadata accessor for SPOwnerSessionError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10000625C(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638460, type metadata accessor for SPOwnerSessionError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000062C8(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638600, type metadata accessor for UnpairError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100006334(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638600, type metadata accessor for UnpairError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000063A0(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638630, type metadata accessor for UnpairError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10000640C(uint64_t a1, uint64_t a2)
{
  return sub_10000B274(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100006428(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016384A0, type metadata accessor for UpdateBatteryLevelError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100006494(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016384A0, type metadata accessor for UpdateBatteryLevelError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100006500(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016384D0, type metadata accessor for UpdateBatteryLevelError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10000656C(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016386A8, type metadata accessor for CommandError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000065D8(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016386A8, type metadata accessor for CommandError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100006644(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0((unint64_t *)&unk_101651190, type metadata accessor for CommandError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

_DWORD *sub_1000066B0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

id sub_1000066C0()
{
  return *v0;
}

void *sub_1000066C8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1000066D8(void *a1@<X8>)
{
  *a1 = *v1;
}

void sub_1000066E4()
{
  Hasher._combine(_:)(*v0);
}

uint64_t sub_100006710(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016383A8, type metadata accessor for SPAccessoryDiscoverySessionError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000677C(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016383A8, type metadata accessor for SPAccessoryDiscoverySessionError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000067E8(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_10165F670, type metadata accessor for SPAccessoryDiscoverySessionError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100006854(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638510, type metadata accessor for SecureLocationsStewieError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000068C0(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638510, type metadata accessor for SecureLocationsStewieError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10000692C(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638540, type metadata accessor for SecureLocationsStewieError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100006998(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016383E0, type metadata accessor for TrackingAvoidanceError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100006A04(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016383E0, type metadata accessor for TrackingAvoidanceError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100006A70(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638410, type metadata accessor for TrackingAvoidanceError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100006ADC()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100006B28()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_100006B80()
{
  return Hasher._finalize()();
}

void sub_100006BE8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100006BF4(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638708, type metadata accessor for SPCBPeripheralError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100006C60(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638708, type metadata accessor for SPCBPeripheralError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100006CCC(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638738, type metadata accessor for SPCBPeripheralError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100006D38(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638670, type metadata accessor for SPSeparationMonitoringError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100006DA4(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638670, type metadata accessor for SPSeparationMonitoringError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100006E10(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100006E7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100006EA8(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638420, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100006F14(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638420, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100006F80(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0((unint64_t *)&qword_101638450, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100006FEC(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638468, type metadata accessor for SPBTFindingSessionError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100007058(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638468, type metadata accessor for SPBTFindingSessionError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000070C4(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101666550, type metadata accessor for SPBTFindingSessionError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100007130(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638638, type metadata accessor for CKError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000719C(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638638, type metadata accessor for CKError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100007208(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638668, type metadata accessor for CKError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100007274(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638548, type metadata accessor for SPUnknownDiscoverySessionError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000072E0(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638548, type metadata accessor for SPUnknownDiscoverySessionError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10000734C(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_10166C240, type metadata accessor for SPUnknownDiscoverySessionError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000073B8(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638580, type metadata accessor for SPTagSeparationError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100007424(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638580, type metadata accessor for SPTagSeparationError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100007490(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0((unint64_t *)&qword_1016385B0, type metadata accessor for SPTagSeparationError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000074FC(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100007574(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1000075F4@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

Swift::Int sub_100007638()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100007680()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000076C4()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000076D4(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638770, type metadata accessor for SPPairingSessionError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100007740(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638770, type metadata accessor for SPPairingSessionError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000077AC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101638770, type metadata accessor for SPPairingSessionError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10000783C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101638770, type metadata accessor for SPPairingSessionError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000078BC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000078CC(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100007938(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000079A4(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100007A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

void sub_100007AB0(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_100007AB8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_100007ACC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_100007AE0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100007AF4(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_100007B24@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100007B50@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_100007B74(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100007B88(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_100007B9C(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_100007BB0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100007BC4(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_100007BD8(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100007BEC(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_100007C00()
{
  return *v0 == 0;
}

uint64_t sub_100007C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_100007C28(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_100007C3C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100007C4C(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_10163F370, type metadata accessor for SecureLocationsError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100007CB8(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_10163F370, type metadata accessor for SecureLocationsError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100007D24(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_10163F370, type metadata accessor for SecureLocationsError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100007DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_10163F370, type metadata accessor for SecureLocationsError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100007E30()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100007E40(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016383A0, type metadata accessor for FirmwareUpdateError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100007EAC(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016383A0, type metadata accessor for FirmwareUpdateError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100007F18(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_1016383A0, type metadata accessor for FirmwareUpdateError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100007FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_1016383A0, type metadata accessor for FirmwareUpdateError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100008024()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100008034(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638460, type metadata accessor for SPOwnerSessionError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000080A0(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638460, type metadata accessor for SPOwnerSessionError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000810C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101638460, type metadata accessor for SPOwnerSessionError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10000819C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101638460, type metadata accessor for SPOwnerSessionError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100008218()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100008228(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638630, type metadata accessor for UnpairError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100008294(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638630, type metadata accessor for UnpairError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100008300(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101638630, type metadata accessor for UnpairError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100008390(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101638630, type metadata accessor for UnpairError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10000840C(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016384D0, type metadata accessor for UpdateBatteryLevelError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100008478(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016384D0, type metadata accessor for UpdateBatteryLevelError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000084E4(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_1016384D0, type metadata accessor for UpdateBatteryLevelError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100008574(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_1016384D0, type metadata accessor for UpdateBatteryLevelError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000085F0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100008600(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0((unint64_t *)&unk_101651190, type metadata accessor for CommandError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000866C(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0((unint64_t *)&unk_101651190, type metadata accessor for CommandError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000086D8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0((unint64_t *)&unk_101651190, type metadata accessor for CommandError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100008768(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0((unint64_t *)&unk_101651190, type metadata accessor for CommandError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000087E4()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000087F4(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638668, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100008860(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638668, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000088CC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101638668, type metadata accessor for CKError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10000895C()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100008994(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101638668, type metadata accessor for CKError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100008A10()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100008A20(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_10165F670, type metadata accessor for SPAccessoryDiscoverySessionError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100008A8C(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_10165F670, type metadata accessor for SPAccessoryDiscoverySessionError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100008AF8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_10165F670, type metadata accessor for SPAccessoryDiscoverySessionError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100008B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_10165F670, type metadata accessor for SPAccessoryDiscoverySessionError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100008C04()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100008C14(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638540, type metadata accessor for SecureLocationsStewieError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100008C80(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638540, type metadata accessor for SecureLocationsStewieError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100008CEC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100008D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101638540, type metadata accessor for SecureLocationsStewieError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100008DF8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100008E08(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638410, type metadata accessor for TrackingAvoidanceError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100008E74(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638410, type metadata accessor for TrackingAvoidanceError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100008EE0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100008F70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101638410, type metadata accessor for TrackingAvoidanceError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100008FEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_100009058()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100009068(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638738, type metadata accessor for SPCBPeripheralError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000090D4(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638738, type metadata accessor for SPCBPeripheralError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100009140(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101638738, type metadata accessor for SPCBPeripheralError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000091D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101638738, type metadata accessor for SPCBPeripheralError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10000924C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10000925C(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000092C8(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100009334(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000093C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100009440()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100009450(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0((unint64_t *)&qword_101638450, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000094BC(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0((unint64_t *)&qword_101638450, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100009528(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0((unint64_t *)&qword_101638450, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000095B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0((unint64_t *)&qword_101638450, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100009634()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100009644(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101666550, type metadata accessor for SPBTFindingSessionError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000096B0(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101666550, type metadata accessor for SPBTFindingSessionError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000971C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101666550, type metadata accessor for SPBTFindingSessionError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000097AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_101666550, type metadata accessor for SPBTFindingSessionError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100009828()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100009838(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_10166C240, type metadata accessor for SPUnknownDiscoverySessionError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000098A4(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_10166C240, type metadata accessor for SPUnknownDiscoverySessionError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100009910(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_10166C240, type metadata accessor for SPUnknownDiscoverySessionError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000099A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0(&qword_10166C240, type metadata accessor for SPUnknownDiscoverySessionError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100009A1C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100009A2C(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0((unint64_t *)&qword_1016385B0, type metadata accessor for SPTagSeparationError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100009A98(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0((unint64_t *)&qword_1016385B0, type metadata accessor for SPTagSeparationError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100009B04(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0((unint64_t *)&qword_1016385B0, type metadata accessor for SPTagSeparationError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100009B94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AAE0((unint64_t *)&qword_1016385B0, type metadata accessor for SPTagSeparationError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100009C10()
{
  return Hasher._finalize()();
}

uint64_t sub_100009C70(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101638790, type metadata accessor for SPBeaconLocationSource);
  uint64_t v3 = sub_10000AAE0(&qword_101638798, type metadata accessor for SPBeaconLocationSource);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100009D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0(&qword_101638770, type metadata accessor for SPPairingSessionError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100009DB0(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101637E10, type metadata accessor for SPBeaconType);
  uint64_t v3 = sub_10000AAE0(&qword_101637E18, type metadata accessor for SPBeaconType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100009E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100009EF0(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016387B0, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_10000AAE0(&qword_1016387B8, type metadata accessor for URLResourceKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100009FAC(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101637E30, type metadata accessor for SPServiceState);
  uint64_t v3 = sub_10000AAE0(&qword_101637E38, type metadata accessor for SPServiceState);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A068(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_101637E20, type metadata accessor for SPDisabledReason);
  uint64_t v3 = sub_10000AAE0(&qword_101637E28, type metadata accessor for SPDisabledReason);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A124(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016387D0, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_10000AAE0(&qword_1016387D8, type metadata accessor for FileAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A1E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10000B448(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_10000A220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0(&qword_10163F370, type metadata accessor for SecureLocationsError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A2A4(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016387F0, type metadata accessor for SPFinderDisabledReason);
  uint64_t v3 = sub_10000AAE0(&qword_1016387F8, type metadata accessor for SPFinderDisabledReason);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0(&qword_1016383A0, type metadata accessor for FirmwareUpdateError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0(&qword_101638460, type metadata accessor for SPOwnerSessionError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0(&qword_101638630, type metadata accessor for UnpairError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A4EC(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016387E0, type metadata accessor for SPBeaconTaskName);
  uint64_t v3 = sub_10000AAE0(&qword_1016387E8, type metadata accessor for SPBeaconTaskName);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0(&qword_1016384D0, type metadata accessor for UpdateBatteryLevelError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A62C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0((unint64_t *)&unk_101651190, type metadata accessor for CommandError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0(&qword_101638668, type metadata accessor for CKError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_10000A734(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10000A748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0(&qword_10165F670, type metadata accessor for SPAccessoryDiscoverySessionError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A7CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0(&qword_101638540, type metadata accessor for SecureLocationsStewieError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0(&qword_101638410, type metadata accessor for TrackingAvoidanceError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A8D4(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016387C0, type metadata accessor for FileProtectionType);
  uint64_t v3 = sub_10000AAE0(&qword_1016387C8, type metadata accessor for FileProtectionType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0(&qword_101638738, type metadata accessor for SPCBPeripheralError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000AA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000AA98()
{
  return sub_10000AAE0(&qword_101637D30, type metadata accessor for CBCharacteristicProperties);
}

uint64_t sub_10000AAE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000AB28()
{
  return sub_10000AAE0(&qword_101637D38, type metadata accessor for CBCharacteristicProperties);
}

uint64_t sub_10000AB70()
{
  return sub_10000AAE0(&qword_101637D40, type metadata accessor for CBCharacteristicProperties);
}

uint64_t sub_10000ABB8()
{
  return sub_10000AAE0(&qword_101637D48, type metadata accessor for CBCharacteristicProperties);
}

uint64_t sub_10000AC00()
{
  return sub_10000AAE0(&qword_101637D50, type metadata accessor for SPMotionActivityState);
}

uint64_t sub_10000AC48()
{
  return sub_10000AAE0(&qword_101637D58, type metadata accessor for SPSecureLocationPublishReason);
}

uint64_t sub_10000AC90()
{
  return sub_10000AAE0(&qword_101637D60, type metadata accessor for SPServiceState);
}

uint64_t sub_10000ACD8()
{
  return sub_10000AAE0(&qword_101637D68, type metadata accessor for SPServiceState);
}

uint64_t sub_10000AD20()
{
  return sub_10000AAE0(&qword_101637D70, type metadata accessor for SPServiceState);
}

uint64_t sub_10000AD68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0((unint64_t *)&qword_101638450, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000ADEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0(&qword_101666550, type metadata accessor for SPBTFindingSessionError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000AE70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0(&qword_10166C240, type metadata accessor for SPUnknownDiscoverySessionError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000AEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000AAE0((unint64_t *)&qword_1016385B0, type metadata accessor for SPTagSeparationError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000AF78@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10000AFC0(uint64_t a1)
{
  uint64_t v2 = sub_10000AAE0(&qword_1016387A0, type metadata accessor for CBConnectionEventMatchingOption);
  uint64_t v3 = sub_10000AAE0(&qword_1016387A8, type metadata accessor for CBConnectionEventMatchingOption);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000B07C()
{
  return sub_10000AAE0(&qword_101637D78, type metadata accessor for SPDisabledReason);
}

uint64_t sub_10000B0C4()
{
  return sub_10000AAE0(&qword_101637D80, type metadata accessor for SPDisabledReason);
}

uint64_t sub_10000B10C()
{
  return sub_10000AAE0(&qword_101637D88, type metadata accessor for SPDisabledReason);
}

uint64_t sub_10000B154()
{
  return sub_10000AAE0(&qword_101637D90, type metadata accessor for SPBeaconType);
}

uint64_t sub_10000B19C()
{
  return sub_10000AAE0(&qword_101637D98, type metadata accessor for SPBeaconType);
}

uint64_t sub_10000B1E4()
{
  return sub_10000AAE0(&qword_101637DA0, type metadata accessor for SPBeaconType);
}

uint64_t sub_10000B22C()
{
  return sub_10000AAE0(&qword_101637DA8, type metadata accessor for SPBTRSSIChannel);
}

uint64_t sub_10000B274(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10000B2B8()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000B30C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000B380()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_10000B410(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_10000B448(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t type metadata accessor for DelegatedShareStartUserNotification()
{
  uint64_t result = qword_101638020;
  if (!qword_101638020) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10000B4CC()
{
  unint64_t result = qword_101637F10;
  if (!qword_101637F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101637F10);
  }
  return result;
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
}

void type metadata accessor for SPSharingCircleType(uint64_t a1)
{
}

void type metadata accessor for SPShareType(uint64_t a1)
{
}

void type metadata accessor for SPRecordsTypeToDelete(uint64_t a1)
{
}

void type metadata accessor for FirmwareUpdateError(uint64_t a1)
{
}

void type metadata accessor for SPAccessoryPairingStatus(uint64_t a1)
{
}

void type metadata accessor for SPAccessoryDiscoverySessionError(uint64_t a1)
{
}

void type metadata accessor for TrackingAvoidanceError(uint64_t a1)
{
}

void type metadata accessor for SPBeaconLocationSource(uint64_t a1)
{
}

void type metadata accessor for CLFindMyAccessoryBatteryStatus(uint64_t a1)
{
}

uint64_t *sub_10000B5E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    void *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10000B6C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10000B738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10000B7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10000B85C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10000B8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10000B964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000B978);
}

uint64_t sub_10000B978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10000BA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000BA50);
}

uint64_t sub_10000BA50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10000BB10()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for NotificationType(uint64_t a1)
{
}

void type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError(uint64_t a1)
{
}

void type metadata accessor for ShutdownReason(uint64_t a1)
{
}

void type metadata accessor for LocalBeaconManagerState(uint64_t a1)
{
}

void type metadata accessor for BeaconingKeyType(uint64_t a1)
{
}

void type metadata accessor for Code(uint64_t a1)
{
}

void type metadata accessor for SPBTFindingSessionError(uint64_t a1)
{
}

void type metadata accessor for UpdateBatteryLevelError(uint64_t a1)
{
}

void type metadata accessor for SecureLocationsError(uint64_t a1)
{
}

void type metadata accessor for SecureLocationsStewieError(uint64_t a1)
{
}

void type metadata accessor for SPUnknownDiscoverySessionError(uint64_t a1)
{
}

void type metadata accessor for SPTagSeparationError(uint64_t a1)
{
}

void type metadata accessor for SPSeparationEventType(uint64_t a1)
{
}

void type metadata accessor for IDSIDStatus(uint64_t a1)
{
}

void type metadata accessor for CBConnectionEventMatchingOption(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for SPBeaconSharingError(uint64_t a1)
{
}

void type metadata accessor for UnpairError(uint64_t a1)
{
}

void type metadata accessor for CKError(uint64_t a1)
{
}

void type metadata accessor for SPSeparationMonitoringError(uint64_t a1)
{
}

void type metadata accessor for CommandError(uint64_t a1)
{
}

void type metadata accessor for SPOwnerSessionError(uint64_t a1)
{
}

void type metadata accessor for CFNotificationName(uint64_t a1)
{
}

void type metadata accessor for CFNotificationCenter(uint64_t a1)
{
}

void type metadata accessor for SPCBPeripheralError(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for SPPairingSessionError(uint64_t a1)
{
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for SPBeaconTaskName(uint64_t a1)
{
}

void type metadata accessor for SPFinderDisabledReason(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for DelegatedLocationContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

void *sub_10000BE6C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1020uLL);
}

uint64_t sub_10000BE74(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 4128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000BE98(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 4104) = 0u;
    *(void *)(result + 4120) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4128) = v3;
  return result;
}

void type metadata accessor for _sp_key_index_map(uint64_t a1)
{
}

__n128 sub_10000C328(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for _sp_key_subsequence(uint64_t a1)
{
}

void type metadata accessor for SPSimpleBeaconProperty(uint64_t a1)
{
}

uint64_t sub_10000C35C()
{
  return sub_10000AAE0(&qword_101638178, type metadata accessor for SPSimpleBeaconProperty);
}

uint64_t sub_10000C3A4()
{
  return sub_10000AAE0(&qword_101638180, type metadata accessor for SPSimpleBeaconProperty);
}

uint64_t sub_10000C3EC()
{
  return sub_10000AAE0(&qword_101638188, type metadata accessor for SPSimpleBeaconProperty);
}

uint64_t sub_10000C434()
{
  return sub_10000AAE0(&qword_101638190, type metadata accessor for SPSimpleBeaconProperty);
}

uint64_t sub_10000C47C()
{
  return sub_10000AAE0(&qword_101638198, type metadata accessor for SPFinderDisabledReason);
}

uint64_t sub_10000C4C4()
{
  return sub_10000AAE0(&qword_1016381A0, type metadata accessor for SPFinderDisabledReason);
}

uint64_t sub_10000C50C()
{
  return sub_10000AAE0(&qword_1016381A8, type metadata accessor for SPBeaconTaskName);
}

uint64_t sub_10000C554()
{
  return sub_10000AAE0(&qword_1016381B0, type metadata accessor for SPBeaconTaskName);
}

uint64_t sub_10000C59C()
{
  return sub_10000AAE0(&qword_1016381B8, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10000C5E4()
{
  return sub_10000AAE0(&qword_1016381C0, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10000C62C()
{
  return sub_10000AAE0(&qword_1016381C8, type metadata accessor for FileProtectionType);
}

uint64_t sub_10000C674()
{
  return sub_10000AAE0(&qword_1016381D0, type metadata accessor for FileProtectionType);
}

uint64_t sub_10000C6BC()
{
  return sub_10000AAE0(&qword_1016381D8, type metadata accessor for FileProtectionType);
}

uint64_t sub_10000C704()
{
  return sub_10000AAE0(&qword_1016381E0, type metadata accessor for SPPairingSessionError);
}

uint64_t sub_10000C74C()
{
  return sub_10000AAE0(&qword_1016381E8, type metadata accessor for SPPairingSessionError);
}

uint64_t sub_10000C794()
{
  return sub_10000AAE0(&qword_1016381F0, type metadata accessor for CFString);
}

uint64_t sub_10000C7DC()
{
  return sub_10000AAE0(&qword_1016381F8, type metadata accessor for CFString);
}

uint64_t sub_10000C824()
{
  return sub_10000AAE0(&qword_101638200, type metadata accessor for SPCBPeripheralError);
}

uint64_t sub_10000C86C()
{
  return sub_10000AAE0(&qword_101638208, type metadata accessor for SPCBPeripheralError);
}

uint64_t sub_10000C8B4()
{
  return sub_10000AAE0(&qword_101638210, type metadata accessor for SPOwnerSessionError);
}

uint64_t sub_10000C8FC()
{
  return sub_10000AAE0(&qword_101638218, type metadata accessor for SPOwnerSessionError);
}

uint64_t sub_10000C944()
{
  return sub_10000AAE0(&qword_101638220, type metadata accessor for CommandError);
}

uint64_t sub_10000C98C()
{
  return sub_10000AAE0(&qword_101638228, type metadata accessor for CommandError);
}

uint64_t sub_10000C9D4()
{
  return sub_10000AAE0(&qword_101638230, type metadata accessor for SPSeparationMonitoringError);
}

uint64_t sub_10000CA1C()
{
  return sub_10000AAE0(&qword_101638238, type metadata accessor for SPSeparationMonitoringError);
}

uint64_t sub_10000CA64()
{
  return sub_10000AAE0(&qword_101638240, type metadata accessor for CKError);
}

uint64_t sub_10000CAAC()
{
  return sub_10000AAE0(&qword_101638248, type metadata accessor for CKError);
}

uint64_t sub_10000CAF4()
{
  return sub_10000AAE0(&qword_101638250, type metadata accessor for UnpairError);
}

uint64_t sub_10000CB3C()
{
  return sub_10000AAE0(&qword_101638258, type metadata accessor for UnpairError);
}

uint64_t sub_10000CB84()
{
  return sub_10000AAE0(&qword_101638260, type metadata accessor for SPBeaconSharingError);
}

uint64_t sub_10000CBCC()
{
  return sub_10000AAE0(&qword_101638268, type metadata accessor for SPBeaconSharingError);
}

uint64_t sub_10000CC14()
{
  return sub_10000AAE0(&qword_101638270, type metadata accessor for URLResourceKey);
}

uint64_t sub_10000CC5C()
{
  return sub_10000AAE0(&qword_101638278, type metadata accessor for URLResourceKey);
}

uint64_t sub_10000CCA4()
{
  return sub_10000AAE0(&qword_101638280, type metadata accessor for CBConnectionEventMatchingOption);
}

uint64_t sub_10000CCEC()
{
  return sub_10000AAE0(&qword_101638288, type metadata accessor for CBConnectionEventMatchingOption);
}

uint64_t sub_10000CD34()
{
  return sub_10000AAE0(&qword_101638290, type metadata accessor for SPTagSeparationError);
}

uint64_t sub_10000CD7C()
{
  return sub_10000AAE0(&qword_101638298, type metadata accessor for SPTagSeparationError);
}

uint64_t sub_10000CDC4()
{
  return sub_10000AAE0(&qword_1016382A0, type metadata accessor for SPUnknownDiscoverySessionError);
}

uint64_t sub_10000CE0C()
{
  return sub_10000AAE0(&qword_1016382A8, type metadata accessor for SPUnknownDiscoverySessionError);
}

uint64_t sub_10000CE54()
{
  return sub_10000AAE0(&qword_1016382B0, type metadata accessor for SecureLocationsStewieError);
}

uint64_t sub_10000CE9C()
{
  return sub_10000AAE0(&qword_1016382B8, type metadata accessor for SecureLocationsStewieError);
}

uint64_t sub_10000CEE4()
{
  return sub_10000AAE0(&qword_1016382C0, type metadata accessor for SecureLocationsError);
}

uint64_t sub_10000CF2C()
{
  return sub_10000AAE0(&qword_1016382C8, type metadata accessor for SecureLocationsError);
}

uint64_t sub_10000CF74()
{
  return sub_10000AAE0(&qword_1016382D0, type metadata accessor for UpdateBatteryLevelError);
}

uint64_t sub_10000CFBC()
{
  return sub_10000AAE0(&qword_1016382D8, type metadata accessor for UpdateBatteryLevelError);
}

uint64_t sub_10000D004()
{
  return sub_10000AAE0(&qword_1016382E0, type metadata accessor for SPBTFindingSessionError);
}

uint64_t sub_10000D04C()
{
  return sub_10000AAE0(&qword_1016382E8, type metadata accessor for SPBTFindingSessionError);
}

uint64_t sub_10000D094()
{
  return sub_10000AAE0(&qword_1016382F0, type metadata accessor for ShutdownReason);
}

uint64_t sub_10000D0DC()
{
  return sub_10000AAE0(&qword_1016382F8, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);
}

uint64_t sub_10000D124()
{
  return sub_10000AAE0(&qword_101638300, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);
}

uint64_t sub_10000D16C()
{
  return sub_10000AAE0(&qword_101638308, type metadata accessor for SPBeaconLocationSource);
}

uint64_t sub_10000D1B4()
{
  return sub_10000AAE0(&qword_101638310, type metadata accessor for SPBeaconLocationSource);
}

uint64_t sub_10000D1FC()
{
  return sub_10000AAE0(&qword_101638318, type metadata accessor for TrackingAvoidanceError);
}

uint64_t sub_10000D244()
{
  return sub_10000AAE0(&qword_101638320, type metadata accessor for TrackingAvoidanceError);
}

uint64_t sub_10000D28C()
{
  return sub_10000AAE0(&qword_101638328, type metadata accessor for SPAccessoryDiscoverySessionError);
}

uint64_t sub_10000D2D4()
{
  return sub_10000AAE0(&qword_101638330, type metadata accessor for SPAccessoryDiscoverySessionError);
}

uint64_t sub_10000D31C()
{
  return sub_10000AAE0(&qword_101638338, type metadata accessor for FirmwareUpdateError);
}

uint64_t sub_10000D364()
{
  return sub_10000AAE0(&qword_101638340, type metadata accessor for FirmwareUpdateError);
}

uint64_t sub_10000D3AC()
{
  return sub_10000AAE0(&qword_101638348, type metadata accessor for SPShareType);
}

uint64_t sub_10000D3F4()
{
  return sub_10000AAE0(&qword_101638350, type metadata accessor for SPShareType);
}

uint64_t sub_10000D43C()
{
  return sub_10000AAE0(&qword_101638358, type metadata accessor for SPShareType);
}

uint64_t sub_10000D484()
{
  return sub_10000AAE0(&qword_101638360, type metadata accessor for SPShareType);
}

uint64_t sub_10000D4CC()
{
  return sub_10000AAE0(&qword_101638368, type metadata accessor for FirmwareUpdateError);
}

uint64_t sub_10000D514()
{
  return sub_10000AAE0(&qword_101638370, type metadata accessor for FirmwareUpdateError);
}

uint64_t sub_10000D55C()
{
  return sub_10000AAE0(&qword_101638378, type metadata accessor for FirmwareUpdateError);
}

uint64_t sub_10000D5A4()
{
  return sub_10000AAE0(&qword_101638380, _s3__C4CodeOMa_16);
}

void _s3__C4CodeOMa_16(uint64_t a1)
{
}

uint64_t sub_10000D600()
{
  return sub_10000AAE0(&qword_101638388, _s3__C4CodeOMa_16);
}

unint64_t sub_10000D64C()
{
  unint64_t result = qword_101638390;
  if (!qword_101638390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101638390);
  }
  return result;
}

uint64_t sub_10000D6A0()
{
  return sub_10000AAE0(&qword_101638398, _s3__C4CodeOMa_16);
}

uint64_t sub_10000D6E8()
{
  return sub_10000AAE0(&qword_1016383A0, type metadata accessor for FirmwareUpdateError);
}

uint64_t sub_10000D730()
{
  return sub_10000AAE0(&qword_1016383A8, type metadata accessor for SPAccessoryDiscoverySessionError);
}

uint64_t sub_10000D778()
{
  return sub_10000AAE0(&qword_1016383B0, type metadata accessor for SPAccessoryDiscoverySessionError);
}

uint64_t sub_10000D7C0()
{
  return sub_10000AAE0(&qword_1016383B8, type metadata accessor for SPAccessoryDiscoverySessionError);
}

uint64_t sub_10000D808()
{
  return sub_10000AAE0(&qword_1016383C0, _s3__C4CodeOMa_15);
}

void _s3__C4CodeOMa_15(uint64_t a1)
{
}

uint64_t sub_10000D864()
{
  return sub_10000AAE0(&qword_1016383C8, _s3__C4CodeOMa_15);
}

uint64_t sub_10000D8AC()
{
  return sub_10000AAE0((unint64_t *)&unk_1016383D0, _s3__C4CodeOMa_15);
}

uint64_t sub_10000D8F4()
{
  return sub_10000AAE0(&qword_10165F670, type metadata accessor for SPAccessoryDiscoverySessionError);
}

uint64_t sub_10000D93C()
{
  return sub_10000AAE0(&qword_1016383E0, type metadata accessor for TrackingAvoidanceError);
}

uint64_t sub_10000D984()
{
  return sub_10000AAE0(&qword_1016383E8, type metadata accessor for TrackingAvoidanceError);
}

uint64_t sub_10000D9CC()
{
  return sub_10000AAE0(&qword_1016383F0, type metadata accessor for TrackingAvoidanceError);
}

uint64_t sub_10000DA14()
{
  return sub_10000AAE0(&qword_1016383F8, _s3__C4CodeOMa_14);
}

void _s3__C4CodeOMa_14(uint64_t a1)
{
}

uint64_t sub_10000DA70()
{
  return sub_10000AAE0(&qword_101638400, _s3__C4CodeOMa_14);
}

uint64_t sub_10000DAB8()
{
  return sub_10000AAE0(&qword_101638408, _s3__C4CodeOMa_14);
}

uint64_t sub_10000DB00()
{
  return sub_10000AAE0(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
}

uint64_t sub_10000DB48()
{
  return sub_10000AAE0(&qword_101638418, type metadata accessor for SPBeaconLocationSource);
}

uint64_t sub_10000DB90()
{
  return sub_10000AAE0(&qword_101638420, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);
}

uint64_t sub_10000DBD8()
{
  return sub_10000AAE0(&qword_101638428, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);
}

uint64_t sub_10000DC20()
{
  return sub_10000AAE0(&qword_101638430, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);
}

uint64_t sub_10000DC68()
{
  return sub_10000AAE0(&qword_101638438, _s3__C4CodeOMa_13);
}

void _s3__C4CodeOMa_13(uint64_t a1)
{
}

uint64_t sub_10000DCC4()
{
  return sub_10000AAE0(&qword_101638440, _s3__C4CodeOMa_13);
}

uint64_t sub_10000DD0C()
{
  return sub_10000AAE0(&qword_101638448, _s3__C4CodeOMa_13);
}

uint64_t sub_10000DD54()
{
  return sub_10000AAE0((unint64_t *)&qword_101638450, type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError);
}

uint64_t sub_10000DD9C()
{
  return sub_10000AAE0(&qword_101638458, type metadata accessor for Code);
}

uint64_t sub_10000DDE4()
{
  return sub_10000AAE0(&qword_101638460, type metadata accessor for SPOwnerSessionError);
}

uint64_t sub_10000DE2C()
{
  return sub_10000AAE0(&qword_101638468, type metadata accessor for SPBTFindingSessionError);
}

uint64_t sub_10000DE74()
{
  return sub_10000AAE0(&qword_101638470, type metadata accessor for SPBTFindingSessionError);
}

uint64_t sub_10000DEBC()
{
  return sub_10000AAE0(&qword_101638478, type metadata accessor for SPBTFindingSessionError);
}

uint64_t sub_10000DF04()
{
  return sub_10000AAE0(&qword_101638480, _s3__C4CodeOMa_12);
}

void _s3__C4CodeOMa_12(uint64_t a1)
{
}

uint64_t sub_10000DF60()
{
  return sub_10000AAE0(&qword_101638488, _s3__C4CodeOMa_12);
}

uint64_t sub_10000DFA8()
{
  return sub_10000AAE0((unint64_t *)&unk_101638490, _s3__C4CodeOMa_12);
}

uint64_t sub_10000DFF0()
{
  return sub_10000AAE0(&qword_101666550, type metadata accessor for SPBTFindingSessionError);
}

uint64_t sub_10000E038()
{
  return sub_10000AAE0(&qword_1016384A0, type metadata accessor for UpdateBatteryLevelError);
}

uint64_t sub_10000E080()
{
  return sub_10000AAE0(&qword_1016384A8, type metadata accessor for UpdateBatteryLevelError);
}

uint64_t sub_10000E0C8()
{
  return sub_10000AAE0(&qword_1016384B0, type metadata accessor for UpdateBatteryLevelError);
}

uint64_t sub_10000E110()
{
  return sub_10000AAE0(&qword_1016384B8, _s3__C4CodeOMa_11);
}

void _s3__C4CodeOMa_11(uint64_t a1)
{
}

uint64_t sub_10000E16C()
{
  return sub_10000AAE0(&qword_1016384C0, _s3__C4CodeOMa_11);
}

uint64_t sub_10000E1B4()
{
  return sub_10000AAE0(&qword_1016384C8, _s3__C4CodeOMa_11);
}

uint64_t sub_10000E1FC()
{
  return sub_10000AAE0(&qword_1016384D0, type metadata accessor for UpdateBatteryLevelError);
}

uint64_t sub_10000E244()
{
  return sub_10000AAE0(&qword_1016384D8, type metadata accessor for SecureLocationsError);
}

uint64_t sub_10000E28C()
{
  return sub_10000AAE0(&qword_1016384E0, type metadata accessor for SecureLocationsError);
}

uint64_t sub_10000E2D4()
{
  return sub_10000AAE0(&qword_1016384E8, type metadata accessor for SecureLocationsError);
}

uint64_t sub_10000E31C()
{
  return sub_10000AAE0(&qword_1016384F0, _s3__C4CodeOMa_10);
}

void _s3__C4CodeOMa_10(uint64_t a1)
{
}

uint64_t sub_10000E378()
{
  return sub_10000AAE0(&qword_1016384F8, _s3__C4CodeOMa_10);
}

uint64_t sub_10000E3C0()
{
  return sub_10000AAE0((unint64_t *)&unk_101638500, _s3__C4CodeOMa_10);
}

uint64_t sub_10000E408()
{
  return sub_10000AAE0(&qword_10163F370, type metadata accessor for SecureLocationsError);
}

uint64_t sub_10000E450()
{
  return sub_10000AAE0(&qword_101638510, type metadata accessor for SecureLocationsStewieError);
}

uint64_t sub_10000E498()
{
  return sub_10000AAE0(&qword_101638518, type metadata accessor for SecureLocationsStewieError);
}

uint64_t sub_10000E4E0()
{
  return sub_10000AAE0(&qword_101638520, type metadata accessor for SecureLocationsStewieError);
}

uint64_t sub_10000E528()
{
  return sub_10000AAE0(&qword_101638528, _s3__C4CodeOMa_9);
}

void _s3__C4CodeOMa_9(uint64_t a1)
{
}

uint64_t sub_10000E584()
{
  return sub_10000AAE0(&qword_101638530, _s3__C4CodeOMa_9);
}

uint64_t sub_10000E5CC()
{
  return sub_10000AAE0(&qword_101638538, _s3__C4CodeOMa_9);
}

uint64_t sub_10000E614()
{
  return sub_10000AAE0(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
}

uint64_t sub_10000E65C()
{
  return sub_10000AAE0(&qword_101638548, type metadata accessor for SPUnknownDiscoverySessionError);
}

uint64_t sub_10000E6A4()
{
  return sub_10000AAE0(&qword_101638550, type metadata accessor for SPUnknownDiscoverySessionError);
}

uint64_t sub_10000E6EC()
{
  return sub_10000AAE0(&qword_101638558, type metadata accessor for SPUnknownDiscoverySessionError);
}

uint64_t sub_10000E734()
{
  return sub_10000AAE0(&qword_101638560, _s3__C4CodeOMa_8);
}

void _s3__C4CodeOMa_8(uint64_t a1)
{
}

uint64_t sub_10000E790()
{
  return sub_10000AAE0(&qword_101638568, _s3__C4CodeOMa_8);
}

uint64_t sub_10000E7D8()
{
  return sub_10000AAE0((unint64_t *)&unk_101638570, _s3__C4CodeOMa_8);
}

uint64_t sub_10000E820()
{
  return sub_10000AAE0(&qword_10166C240, type metadata accessor for SPUnknownDiscoverySessionError);
}

uint64_t sub_10000E868()
{
  return sub_10000AAE0(&qword_101638580, type metadata accessor for SPTagSeparationError);
}

uint64_t sub_10000E8B0()
{
  return sub_10000AAE0(&qword_101638588, type metadata accessor for SPTagSeparationError);
}

uint64_t sub_10000E8F8()
{
  return sub_10000AAE0(&qword_101638590, type metadata accessor for SPTagSeparationError);
}

uint64_t sub_10000E940()
{
  return sub_10000AAE0(&qword_101638598, _s3__C4CodeOMa_7);
}

void _s3__C4CodeOMa_7(uint64_t a1)
{
}

uint64_t sub_10000E99C()
{
  return sub_10000AAE0(&qword_1016385A0, _s3__C4CodeOMa_7);
}

uint64_t sub_10000E9E4()
{
  return sub_10000AAE0(&qword_1016385A8, _s3__C4CodeOMa_7);
}

uint64_t sub_10000EA2C()
{
  return sub_10000AAE0((unint64_t *)&qword_1016385B0, type metadata accessor for SPTagSeparationError);
}

uint64_t sub_10000EA74()
{
  return sub_10000AAE0(&qword_1016385B8, type metadata accessor for CBConnectionEventMatchingOption);
}

uint64_t sub_10000EABC()
{
  return sub_10000AAE0(&qword_1016385C0, type metadata accessor for URLResourceKey);
}

uint64_t sub_10000EB04()
{
  return sub_10000AAE0(&qword_1016385C8, type metadata accessor for SPBeaconSharingError);
}

uint64_t sub_10000EB4C()
{
  return sub_10000AAE0(&qword_1016385D0, type metadata accessor for SPBeaconSharingError);
}

uint64_t sub_10000EB94()
{
  return sub_10000AAE0(&qword_1016385D8, type metadata accessor for SPBeaconSharingError);
}

uint64_t sub_10000EBDC()
{
  return sub_10000AAE0(&qword_1016385E0, _s3__C4CodeOMa_6);
}

void _s3__C4CodeOMa_6(uint64_t a1)
{
}

uint64_t sub_10000EC38()
{
  return sub_10000AAE0(&qword_1016385E8, _s3__C4CodeOMa_6);
}

uint64_t sub_10000EC80()
{
  return sub_10000AAE0(&qword_1016385F0, _s3__C4CodeOMa_6);
}

uint64_t sub_10000ECC8()
{
  return sub_10000AAE0((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
}

uint64_t sub_10000ED10()
{
  return sub_10000AAE0(&qword_101638600, type metadata accessor for UnpairError);
}

uint64_t sub_10000ED58()
{
  return sub_10000AAE0(&qword_101638608, type metadata accessor for UnpairError);
}

uint64_t sub_10000EDA0()
{
  return sub_10000AAE0(&qword_101638610, type metadata accessor for UnpairError);
}

uint64_t sub_10000EDE8()
{
  return sub_10000AAE0(&qword_101638618, _s3__C4CodeOMa_5);
}

void _s3__C4CodeOMa_5(uint64_t a1)
{
}

uint64_t sub_10000EE44()
{
  return sub_10000AAE0(&qword_101638620, _s3__C4CodeOMa_5);
}

uint64_t sub_10000EE8C()
{
  return sub_10000AAE0(&qword_101638628, _s3__C4CodeOMa_5);
}

uint64_t sub_10000EED4()
{
  return sub_10000AAE0(&qword_101638630, type metadata accessor for UnpairError);
}

uint64_t sub_10000EF1C()
{
  return sub_10000AAE0(&qword_101638638, type metadata accessor for CKError);
}

uint64_t sub_10000EF64()
{
  return sub_10000AAE0(&qword_101638640, type metadata accessor for CKError);
}

uint64_t sub_10000EFAC()
{
  return sub_10000AAE0(&qword_101638648, type metadata accessor for CKError);
}

uint64_t sub_10000EFF4()
{
  return sub_10000AAE0(&qword_101638650, _s3__C4CodeOMa_4);
}

void _s3__C4CodeOMa_4(uint64_t a1)
{
}

uint64_t sub_10000F050()
{
  return sub_10000AAE0(&qword_101638658, _s3__C4CodeOMa_4);
}

uint64_t sub_10000F098()
{
  return sub_10000AAE0(&qword_101638660, _s3__C4CodeOMa_4);
}

uint64_t sub_10000F0E0()
{
  return sub_10000AAE0(&qword_101638668, type metadata accessor for CKError);
}

uint64_t sub_10000F128()
{
  return sub_10000AAE0(&qword_101638670, type metadata accessor for SPSeparationMonitoringError);
}

uint64_t sub_10000F170()
{
  return sub_10000AAE0(&qword_101638678, type metadata accessor for SPSeparationMonitoringError);
}

uint64_t sub_10000F1B8()
{
  return sub_10000AAE0(&qword_101638680, type metadata accessor for SPSeparationMonitoringError);
}

uint64_t sub_10000F200()
{
  return sub_10000AAE0(&qword_101638688, _s3__C4CodeOMa_3);
}

void _s3__C4CodeOMa_3(uint64_t a1)
{
}

uint64_t sub_10000F25C()
{
  return sub_10000AAE0(&qword_101638690, _s3__C4CodeOMa_3);
}

uint64_t sub_10000F2A4()
{
  return sub_10000AAE0(&qword_101638698, _s3__C4CodeOMa_3);
}

uint64_t sub_10000F2EC()
{
  return sub_10000AAE0(&qword_1016386A0, type metadata accessor for SPSeparationMonitoringError);
}

uint64_t sub_10000F334()
{
  return sub_10000AAE0(&qword_1016386A8, type metadata accessor for CommandError);
}

uint64_t sub_10000F37C()
{
  return sub_10000AAE0(&qword_1016386B0, type metadata accessor for CommandError);
}

uint64_t sub_10000F3C4()
{
  return sub_10000AAE0(&qword_1016386B8, type metadata accessor for CommandError);
}

uint64_t sub_10000F40C()
{
  return sub_10000AAE0(&qword_1016386C0, _s3__C4CodeOMa_2);
}

void _s3__C4CodeOMa_2(uint64_t a1)
{
}

uint64_t sub_10000F468()
{
  return sub_10000AAE0(&qword_1016386C8, _s3__C4CodeOMa_2);
}

uint64_t sub_10000F4B0()
{
  return sub_10000AAE0((unint64_t *)&unk_1016386D0, _s3__C4CodeOMa_2);
}

uint64_t sub_10000F4F8()
{
  return sub_10000AAE0((unint64_t *)&unk_101651190, type metadata accessor for CommandError);
}

uint64_t sub_10000F540()
{
  return sub_10000AAE0(&qword_1016386E0, type metadata accessor for SPOwnerSessionError);
}

uint64_t sub_10000F588()
{
  return sub_10000AAE0(&qword_1016386E8, type metadata accessor for SPOwnerSessionError);
}

uint64_t sub_10000F5D0()
{
  return sub_10000AAE0(&qword_1016386F0, type metadata accessor for SPOwnerSessionError);
}

uint64_t sub_10000F618()
{
  return sub_10000AAE0(&qword_1016386F8, type metadata accessor for Code);
}

uint64_t sub_10000F660()
{
  return sub_10000AAE0(&qword_101638700, type metadata accessor for Code);
}

uint64_t sub_10000F6A8()
{
  return sub_10000AAE0(&qword_101638708, type metadata accessor for SPCBPeripheralError);
}

uint64_t sub_10000F6F0()
{
  return sub_10000AAE0(&qword_101638710, type metadata accessor for SPCBPeripheralError);
}

uint64_t sub_10000F738()
{
  return sub_10000AAE0(&qword_101638718, type metadata accessor for SPCBPeripheralError);
}

uint64_t sub_10000F780()
{
  return sub_10000AAE0(&qword_101638720, _s3__C4CodeOMa_1);
}

void _s3__C4CodeOMa_1(uint64_t a1)
{
}

uint64_t sub_10000F7DC()
{
  return sub_10000AAE0(&qword_101638728, _s3__C4CodeOMa_1);
}

uint64_t sub_10000F824()
{
  return sub_10000AAE0(&qword_101638730, _s3__C4CodeOMa_1);
}

uint64_t sub_10000F86C()
{
  return sub_10000AAE0(&qword_101638738, type metadata accessor for SPCBPeripheralError);
}

uint64_t sub_10000F8B4()
{
  return sub_10000AAE0(&qword_101638740, type metadata accessor for SPPairingSessionError);
}

uint64_t sub_10000F8FC()
{
  return sub_10000AAE0(&qword_101638748, type metadata accessor for SPPairingSessionError);
}

uint64_t sub_10000F944()
{
  return sub_10000AAE0(&qword_101638750, type metadata accessor for SPPairingSessionError);
}

uint64_t sub_10000F98C()
{
  return sub_10000AAE0(&qword_101638758, _s3__C4CodeOMa_0);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

uint64_t sub_10000F9E8()
{
  return sub_10000AAE0(&qword_101638760, _s3__C4CodeOMa_0);
}

uint64_t sub_10000FA30()
{
  return sub_10000AAE0(&qword_101638768, _s3__C4CodeOMa_0);
}

uint64_t sub_10000FA78()
{
  return sub_10000AAE0(&qword_101638770, type metadata accessor for SPPairingSessionError);
}

uint64_t sub_10000FAC0()
{
  return sub_10000AAE0(&qword_101638778, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10000FB08()
{
  return sub_10000AAE0(&qword_101638780, type metadata accessor for SPBeaconTaskName);
}

uint64_t sub_10000FB50()
{
  return sub_10000AAE0(&qword_101638788, type metadata accessor for SPFinderDisabledReason);
}

__n128 sub_10000FB98(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for sp_key_index_map_toc_entry(uint64_t a1)
{
}

uint64_t sub_10000FBB8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000FBD8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for sp_key_file_header(uint64_t a1)
{
}

void sub_10000FC18(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10000FCE4()
{
  return swift_initClassMetadata2();
}

void sub_10000FD3C()
{
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170DED0);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "All delegated location publish subscriptions terminated.", v2, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10000FE24()
{
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)();
}

void sub_10000FE80()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  XPCSession.identifier.getter();
  char v17 = 0;
  memset(v16, 0, sizeof(v16));
  swift_beginAccess();
  swift_getTupleTypeMetadata2();
  sub_10001035C(&qword_10163BC60);
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170DED0);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(void *)&v16[0] = v14;
    *(_DWORD *)uint64_t v8 = 141558275;
    uint64_t v15 = 1752392040;
    uint64_t v18 = v0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    v13[1] = v8 + 14;
    XPCSession.identifier.getter();
    sub_10001035C((unint64_t *)&qword_101638B10);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v10 = v2;
    unint64_t v12 = v11;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v1);
    uint64_t v15 = sub_1008FA0F0(v9, v12, (uint64_t *)v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Removed delegated location publish subscription %{private,mask.hash}s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_10001020C()
{
  return sub_100010300(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100010240()
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100010278()
{
  uint64_t v0 = sub_10110D850();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000102B8()
{
  sub_100010278();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DelegationPublishServiceConnections()
{
  return sub_1000103A0();
}

uint64_t sub_100010300(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100010308()
{
}

uint64_t sub_100010324(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10001035C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000103A0()
{
  return swift_getGenericMetadata();
}

uint64_t destroy for DelegatedLocationContext()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DelegatedLocationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DelegatedLocationContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for DelegatedLocationContext(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DelegatedLocationContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for DelegatedLocationContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DelegatedLocationContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DelegatedLocationContext()
{
  return &type metadata for DelegatedLocationContext;
}

uint64_t sub_1000105C4()
{
  return sub_1000105D0(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1000105D0(uint64_t a1, char a2)
{
  _StringGuts.grow(_:)(56);
  v3._object = (void *)0x80000001013F1790;
  v3._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x726373627573202CLL;
  v5._object = (void *)0xED0000203A656269;
  String.append(_:)(v5);
  if (a2) {
    uint64_t v6 = 1702195828;
  }
  else {
    uint64_t v6 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v7 = 0xE400000000000000;
  }
  else {
    unint64_t v7 = 0xE500000000000000;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 93;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t sub_1000106EC()
{
  uint64_t v0 = type metadata accessor for UUID();
  __chkstk_darwin(v0 - 8);
  sub_10000588C(&qword_101638CD8);
  uint64_t v1 = (void *)swift_allocObject();
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  v1[5] = v2;
  type metadata accessor for WorkItemQueue();
  swift_retain();
  UUID.init()();
  v1[6] = WorkItemQueue.__allocating_init(identifier:)();
  v1[7] = _swiftEmptyDictionarySingleton;
  uint64_t v3 = swift_release();
  return sub_100F36EDC(v3);
}

uint64_t sub_1000107D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  uint64_t v4 = type metadata accessor for Date();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[14] = v5;
  v3[15] = *(void *)(v5 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  sub_10000588C(&qword_101638D80);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  return _swift_task_switch(sub_100010950, 0, 0);
}

uint64_t sub_100010950()
{
  v66 = v0;
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[15];
  uint64_t v53 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 64);
  uint64_t v6 = (void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v61 = (void (**)(void, uint64_t, void))(v2 + 32);
  uint64_t v57 = v0[15];
  v63 = (void (**)(uint64_t, uint64_t))(v2 + 8);
  v55 = (void (**)(uint64_t, uint64_t))(v0[12] + 8);
  int64_t v54 = (unint64_t)(63 - v4) >> 6;
  uint64_t v58 = v0[8];
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v62 = 0;
  v56 = v6;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = v9 | (v62 << 6);
LABEL_8:
      uint64_t v12 = v0[19];
      (*(void (**)(uint64_t, unint64_t, void))(v57 + 16))(v12, *(void *)(v58 + 48) + *(void *)(v57 + 72) * v11, v0[14]);
      uint64_t v13 = *(void *)(v58 + 56);
      uint64_t v14 = sub_10000588C(&qword_101638D88);
      uint64_t v15 = *(void **)(v13 + 8 * v11);
      *(void *)(v12 + *(int *)(v14 + 48)) = v15;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 0, 1, v14);
      id v16 = v15;
      goto LABEL_30;
    }
    int64_t v17 = v62 + 1;
    if (__OFADD__(v62, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    if (v17 < v54)
    {
      unint64_t v18 = *(void *)(v53 + 8 * v17);
      if (v18) {
        goto LABEL_12;
      }
      int64_t v19 = v62 + 2;
      ++v62;
      if (v17 + 1 < v54)
      {
        unint64_t v18 = *(void *)(v53 + 8 * v19);
        if (v18) {
          goto LABEL_15;
        }
        int64_t v62 = v17 + 1;
        if (v17 + 2 < v54)
        {
          unint64_t v18 = *(void *)(v53 + 8 * (v17 + 2));
          if (v18)
          {
            v17 += 2;
            goto LABEL_12;
          }
          int64_t v62 = v17 + 2;
          if (v17 + 3 < v54)
          {
            unint64_t v18 = *(void *)(v53 + 8 * (v17 + 3));
            if (v18)
            {
              v17 += 3;
              goto LABEL_12;
            }
            int64_t v19 = v17 + 4;
            int64_t v62 = v17 + 3;
            if (v17 + 4 < v54)
            {
              unint64_t v18 = *(void *)(v53 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  int64_t v17 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v17 >= v54)
                  {
                    int64_t v62 = v54 - 1;
                    goto LABEL_29;
                  }
                  unint64_t v18 = *(void *)(v53 + 8 * v17);
                  ++v19;
                  if (v18) {
                    goto LABEL_12;
                  }
                }
              }
LABEL_15:
              int64_t v17 = v19;
LABEL_12:
              uint64_t v10 = (v18 - 1) & v18;
              unint64_t v11 = __clz(__rbit64(v18)) + (v17 << 6);
              int64_t v62 = v17;
              goto LABEL_8;
            }
          }
        }
      }
    }
LABEL_29:
    uint64_t v20 = v0[19];
    uint64_t v21 = sub_10000588C(&qword_101638D88);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
    uint64_t v10 = 0;
LABEL_30:
    uint64_t v22 = v0[20];
    sub_10001D608(v0[19], v22, &qword_101638D80);
    uint64_t v23 = sub_10000588C(&qword_101638D88);
    int v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23);
    uint64_t v25 = v0[20];
    if (v24 == 1) {
      break;
    }
    unint64_t v64 = v10;
    v26 = *(void **)(v25 + *(int *)(v23 + 48));
    (*v61)(v0[18], v25, v0[14]);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v27 = v0[17];
    uint64_t v28 = v0[18];
    uint64_t v29 = v0[14];
    uint64_t v30 = type metadata accessor for Logger();
    sub_100010324(v30, (uint64_t)qword_10170DED0);
    (*v6)(v27, v28, v29);
    id v31 = v26;
    v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = v0[17];
    uint64_t v36 = v0[18];
    uint64_t v37 = v0[14];
    if (v34)
    {
      uint64_t v59 = v0[13];
      uint64_t v38 = v0[11];
      uint64_t v39 = swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 141559299;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v39 + 12) = 2081;
      sub_10001D910((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = sub_1008FA0F0(v40, v41, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v60 = *v63;
      (*v63)(v35, v37);
      *(_WORD *)(v39 + 22) = 2053;
      [v31 latitude];
      v0[4] = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v39 + 32) = 2053;
      [v31 longitude];
      v0[5] = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v39 + 42) = 2049;
      [v31 horizontalAccuracy];
      v0[6] = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v39 + 52) = 2081;
      id v45 = [v31 timestamp];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10001D910((unint64_t *)&qword_101638DA0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v48 = v47;
      (*v55)(v59, v38);
      v0[7] = sub_1008FA0F0(v46, v48, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Did publish for delegated beacon: %{private,mask.hash}s,\nLoc: lat: %{sensitive}f, lon: %{sensitive}f, horAcc: %{private}f,\nTimestamp: %{private}s.", (uint8_t *)v39, 0x3Eu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v6 = v56;
      swift_slowDealloc();

      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v60)(v36, v37);
    }
    else
    {

      unint64_t v8 = *v63;
      (*v63)(v35, v37);

      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v8)(v36, v37);
    }
    unint64_t v5 = v64;
  }
  uint64_t v49 = v0[10];
  uint64_t v50 = v0[8];
  swift_release();
  type metadata accessor for WorkItemQueue.WorkItem();
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = v49;
  *(void *)(v51 + 24) = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v52 = (uint64_t (*)(void))v0[1];
  return v52();
}

uint64_t sub_100011244(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_10000588C(&qword_101638DA8);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = *(void *)(v4 + 64);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_10001132C, 0, 0);
}

uint64_t sub_10001132C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 16);
  char v5 = *(unsigned char *)(v4 + 32);
  *(unsigned char *)(v0 + 121) = v5;
  uint64_t v6 = -1;
  uint64_t v7 = -1 << v5;
  if (-(-1 << v5) < 64) {
    uint64_t v6 = ~(-1 << -(char)v7);
  }
  unint64_t v8 = v6 & *(void *)(v4 + 64);
  swift_bridgeObjectRetain();
  uint64_t v49 = v3;
  if (v8)
  {
    uint64_t v46 = v2;
    uint64_t v47 = v1;
    uint64_t v9 = 0;
    unint64_t v10 = __clz(__rbit64(v8));
    uint64_t v11 = (v8 - 1) & v8;
LABEL_5:
    *(void *)(v0 + 80) = v9;
    *(void *)(v0 + 88) = v11;
    uint64_t v12 = *(void *)(v0 + 72);
    unint64_t v48 = *(void *)(v0 + 64);
    uint64_t v45 = *(void *)(v0 + 56);
    uint64_t v13 = *(void *)(v4 + 48);
    uint64_t v14 = type metadata accessor for UUID();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v44 = *(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 16);
    v44(v12, v13 + *(void *)(v15 + 72) * v10, v14);
    uint64_t v16 = *(void *)(v4 + 56) + 40 * v10;
    uint64_t v18 = *(void *)v16;
    uint64_t v17 = *(void *)(v16 + 8);
    uint64_t v19 = *(void *)(v16 + 16);
    uint64_t v20 = *(void *)(v16 + 24);
    char v21 = *(unsigned char *)(v16 + 32);
    uint64_t v22 = v12 + *(int *)(v49 + 48);
    *(void *)uint64_t v22 = v18;
    *(void *)(v22 + 8) = v17;
    uint64_t v23 = v17;
    uint64_t v43 = v17;
    *(void *)(v22 + 16) = v19;
    *(void *)(v22 + 24) = v20;
    *(unsigned char *)(v22 + 32) = v21;
    unint64_t v24 = v48 + *(int *)(v49 + 48);
    (*(void (**)(void))(v15 + 32))();
    *(void *)unint64_t v24 = v18;
    *(void *)(v24 + 8) = v23;
    *(void *)(v24 + 16) = v19;
    *(void *)(v24 + 24) = v20;
    *(unsigned char *)(v24 + 32) = v21;
    id v25 = objc_allocWithZone((Class)SPDelegatedLocationResult);
    sub_10001D4B0(0, (unint64_t *)&qword_101638DB0);
    sub_10001D910(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v27 = [v25 initWithResults:isa];
    *(void *)(v0 + 96) = v27;

    uint64_t v28 = *(int *)(v49 + 48);
    v44(v45, v48, v14);
    unint64_t v29 = (*(unsigned __int8 *)(v46 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    uint64_t v30 = v45 + v28;
    *(void *)uint64_t v30 = v18;
    *(void *)(v30 + 8) = v43;
    *(void *)(v30 + 16) = v19;
    *(void *)(v30 + 24) = v20;
    *(unsigned char *)(v30 + 32) = v21;
    uint64_t v31 = swift_allocObject();
    *(void *)(v0 + 104) = v31;
    sub_10001D608(v45, v31 + v29, &qword_101638DA8);
    *(void *)(v31 + ((v47 + v29 + 7) & 0xFFFFFFFFFFFFFFF8)) = v27;
    id v32 = v27;
    os_log_type_t v33 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v33;
    uint64_t v34 = sub_10000588C((uint64_t *)&unk_101638DC0);
    *os_log_type_t v33 = v0;
    v33[1] = sub_1000117F0;
    return unsafeBlocking<A>(_:)(v0 + 120, sub_10001D66C, v31, v34);
  }
  unint64_t v35 = 63 - v7;
  if ((unint64_t)(63 - v7) > 0x7F)
  {
    unint64_t v36 = *(void *)(v4 + 72);
    if (v36)
    {
      uint64_t v9 = 1;
LABEL_11:
      uint64_t v46 = v2;
      uint64_t v47 = v1;
      unint64_t v37 = __clz(__rbit64(v36));
      uint64_t v11 = (v36 - 1) & v36;
      unint64_t v10 = v37 + (v9 << 6);
      goto LABEL_5;
    }
    if (v35 >= 0xC0)
    {
      unint64_t v36 = *(void *)(v4 + 80);
      if (v36)
      {
        uint64_t v9 = 2;
        goto LABEL_11;
      }
      if (v35 >= 0x100)
      {
        unint64_t v36 = *(void *)(v4 + 88);
        if (v36)
        {
          uint64_t v9 = 3;
          goto LABEL_11;
        }
        if (v35 >= 0x140)
        {
          unint64_t v36 = *(void *)(v4 + 96);
          if (v36)
          {
            uint64_t v9 = 4;
            goto LABEL_11;
          }
          uint64_t v38 = 0;
          uint64_t v39 = v35 >> 6;
          if (v39 <= 5) {
            uint64_t v39 = 5;
          }
          uint64_t v40 = v39 - 5;
          while (v40 != v38)
          {
            unint64_t v36 = *(void *)(v4 + 104 + 8 * v38++);
            if (v36)
            {
              uint64_t v9 = v38 + 4;
              goto LABEL_11;
            }
          }
        }
      }
    }
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
  return v41();
}

uint64_t sub_1000117F0()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100011908, 0, 0);
}

uint64_t sub_100011908()
{
  uint64_t v1 = *(void *)(v0 + 64);

  uint64_t v2 = sub_10001DAB4(v1, &qword_101638DA8);
  int64_t v6 = *(void *)(v0 + 80);
  unint64_t v7 = *(void *)(v0 + 88);
  if (v7)
  {
    unint64_t v8 = __clz(__rbit64(v7));
    uint64_t v9 = (v7 - 1) & v7;
    unint64_t v10 = v8 | (v6 << 6);
    uint64_t v11 = *(void *)(v0 + 16);
    goto LABEL_3;
  }
  int64_t v34 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  int64_t v35 = (unint64_t)((1 << *(unsigned char *)(v0 + 121)) + 63) >> 6;
  uint64_t v11 = *(void *)(v0 + 16);
  if (v34 < v35)
  {
    uint64_t v36 = v11 + 64;
    unint64_t v37 = *(void *)(v11 + 64 + 8 * v34);
    ++v6;
    if (v37)
    {
LABEL_9:
      uint64_t v9 = (v37 - 1) & v37;
      unint64_t v10 = __clz(__rbit64(v37)) + (v6 << 6);
LABEL_3:
      *(void *)(v0 + 80) = v6;
      *(void *)(v0 + 88) = v9;
      uint64_t v12 = *(void *)(v0 + 72);
      unint64_t v47 = *(void *)(v0 + 64);
      uint64_t v46 = *(void *)(v0 + 48);
      uint64_t v13 = *(void *)(v0 + 32);
      uint64_t v44 = *(void *)(v0 + 56);
      uint64_t v45 = *(void *)(v0 + 40);
      uint64_t v14 = *(void *)(v11 + 48);
      uint64_t v15 = type metadata accessor for UUID();
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v43 = *(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16);
      v43(v12, v14 + *(void *)(v16 + 72) * v10, v15);
      uint64_t v17 = *(void *)(v11 + 56) + 40 * v10;
      uint64_t v18 = *(void *)v17;
      uint64_t v19 = *(void *)(v17 + 16);
      uint64_t v20 = *(void *)(v17 + 24);
      char v21 = *(unsigned char *)(v17 + 32);
      uint64_t v22 = v13;
      uint64_t v41 = v13;
      uint64_t v42 = *(void *)(v17 + 8);
      uint64_t v23 = v12 + *(int *)(v13 + 48);
      *(void *)uint64_t v23 = v18;
      *(void *)(v23 + 8) = v42;
      *(void *)(v23 + 16) = v19;
      *(void *)(v23 + 24) = v20;
      *(unsigned char *)(v23 + 32) = v21;
      LOBYTE(v13) = v21;
      unint64_t v24 = v47 + *(int *)(v22 + 48);
      (*(void (**)(void))(v16 + 32))();
      *(void *)unint64_t v24 = v18;
      *(void *)(v24 + 8) = v42;
      *(void *)(v24 + 16) = v19;
      *(void *)(v24 + 24) = v20;
      *(unsigned char *)(v24 + 32) = v13;
      id v25 = objc_allocWithZone((Class)SPDelegatedLocationResult);
      sub_10001D4B0(0, (unint64_t *)&qword_101638DB0);
      sub_10001D910(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v27 = [v25 initWithResults:isa];
      *(void *)(v0 + 96) = v27;

      uint64_t v28 = *(int *)(v41 + 48);
      v43(v44, v47, v15);
      unint64_t v29 = (*(unsigned __int8 *)(v45 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
      uint64_t v30 = v44 + v28;
      *(void *)uint64_t v30 = v18;
      *(void *)(v30 + 8) = v42;
      *(void *)(v30 + 16) = v19;
      *(void *)(v30 + 24) = v20;
      *(unsigned char *)(v30 + 32) = v13;
      uint64_t v31 = swift_allocObject();
      *(void *)(v0 + 104) = v31;
      sub_10001D608(v44, v31 + v29, &qword_101638DA8);
      *(void *)(v31 + ((v46 + v29 + 7) & 0xFFFFFFFFFFFFFFF8)) = v27;
      id v32 = v27;
      os_log_type_t v33 = (void *)swift_task_alloc();
      *(void *)(v0 + 112) = v33;
      uint64_t v5 = sub_10000588C((uint64_t *)&unk_101638DC0);
      *os_log_type_t v33 = v0;
      v33[1] = sub_1000117F0;
      uint64_t v3 = sub_10001D66C;
      uint64_t v2 = v0 + 120;
      uint64_t v4 = v31;
      return unsafeBlocking<A>(_:)(v2, v3, v4, v5);
    }
    int64_t v6 = v34 + 1;
    if (v34 + 1 < v35)
    {
      unint64_t v37 = *(void *)(v36 + 8 * v6);
      if (v37) {
        goto LABEL_9;
      }
      int64_t v6 = v34 + 2;
      if (v34 + 2 < v35)
      {
        unint64_t v37 = *(void *)(v36 + 8 * v6);
        if (v37) {
          goto LABEL_9;
        }
        int64_t v38 = v34 + 3;
        if (v38 < v35)
        {
          unint64_t v37 = *(void *)(v36 + 8 * v38);
          if (v37)
          {
            int64_t v6 = v38;
            goto LABEL_9;
          }
          while (1)
          {
            int64_t v6 = v38 + 1;
            if (__OFADD__(v38, 1)) {
              break;
            }
            if (v6 >= v35) {
              goto LABEL_20;
            }
            unint64_t v37 = *(void *)(v36 + 8 * v6);
            ++v38;
            if (v37) {
              goto LABEL_9;
            }
          }
LABEL_24:
          __break(1u);
          return unsafeBlocking<A>(_:)(v2, v3, v4, v5);
        }
      }
    }
  }
LABEL_20:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
  return v39();
}

BOOL sub_100011DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101638DA8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(int *)(v5 + 56);
  uint64_t v9 = &v7[v8];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v7, a1, v11);
  *(void *)uint64_t v9 = *(void *)v10;
  uint64_t v13 = *(void *)(v10 + 24);
  char v14 = *(unsigned char *)(v10 + 32);
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(v10 + 8);
  *((void *)v9 + 3) = v13;
  v9[32] = v14;
  swift_retain();
  XPCSession.proxy.getter();
  swift_release();
  id v15 = v18;
  if (v18)
  {
    [v18 didPublishDelegatedLocation:a2];
    swift_unknownObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v11);
  return v15 == 0;
}

BOOL sub_100011F34(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100011F48()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100011F90()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100011FBC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10001200C()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AAF84(v3);
  uint64_t v1 = v0;
  uint64_t result = swift_bridgeObjectRelease();
  qword_101638B20 = v1;
  return result;
}

void *sub_1000120C4(uint64_t a1)
{
  v13[0] = a1;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  __chkstk_darwin(v8 - 8);
  swift_defaultActor_initialize();
  v1[14] = 0xD00000000000001FLL;
  v1[15] = 0x8000000101347380;
  type metadata accessor for WorkItemQueue();
  UUID.init()();
  v1[16] = WorkItemQueue.__allocating_init(identifier:)();
  type metadata accessor for UnsafeSynchronizer();
  uint64_t v9 = swift_allocObject();
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v4);
  static DispatchQoS.unspecified.getter();
  v13[1] = _swiftEmptyArrayStorage;
  sub_10001D910((unint64_t *)&qword_101638CC0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1000058D0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v9 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[17] = v9;
  uint64_t v10 = sub_1000106EC();
  uint64_t v11 = v13[0];
  v1[18] = v10;
  v1[19] = v11;
  return v1;
}

uint64_t sub_1000123CC(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return _swift_task_switch(sub_1000123F0, v2, 0);
}

uint64_t sub_1000123F0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 152);
  *(void *)(v0 + 48) = v1;
  return _swift_task_switch(sub_100012414, v1, 0);
}

uint64_t sub_100012414()
{
  *(void *)(v0 + 56) = *(void *)(*(void *)(v0 + 48) + 136);
  swift_retain();
  return _swift_task_switch(sub_100012488, 0, 0);
}

uint64_t sub_100012488()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[8] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[9] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_10001259C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_10001259C()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  v1[10] = v1[2];
  uint64_t v3 = (void *)swift_task_alloc();
  v1[11] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10001274C;
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[3];
  return sub_1012E2414(v5, v4);
}

uint64_t sub_10001274C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10001285C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  sub_10000588C(&qword_101638DD8);
  v2[4] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_1000129A8, v1, 0);
}

uint64_t sub_1000129A8()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = *(void *)(v1 + 16);
  v0[11] = v2;
  if (v2)
  {
    v0[12] = 0;
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[13] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100012ABC;
    uint64_t v5 = v0[4];
    return sub_10001BE80(v5, v3);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100012ABC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_100012BCC, v1, 0);
}

uint64_t sub_100012BCC()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = sub_10000588C(&qword_101638CF8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, &qword_101638DD8);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170DED0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to extract share identifier and location timestamp from the delegated payload. Cannot set last delegated publish date", v6, 2u);
      swift_slowDealloc();
    }

    uint64_t v7 = v0[12] + 1;
    if (v7 == v0[11])
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v8 = (uint64_t (*)(void))v0[1];
      return v8();
    }
    else
    {
      v0[12] = v7;
      uint64_t v17 = v0[2] + 40 * v7 + 32;
      id v18 = (void *)swift_task_alloc();
      v0[13] = v18;
      *id v18 = v0;
      v18[1] = sub_100012ABC;
      uint64_t v19 = v0[4];
      return sub_10001BE80(v19, v17);
    }
  }
  else
  {
    uint64_t v10 = v0[7];
    uint64_t v11 = v0[5];
    uint64_t v12 = v0[6];
    uint64_t v13 = v1 + *(int *)(v2 + 48);
    (*(void (**)(void, uint64_t, void))(v0[9] + 32))(v0[10], v1, v0[8]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v10, v13, v11);
    char v14 = (void *)swift_task_alloc();
    v0[14] = v14;
    *char v14 = v0;
    v14[1] = sub_100012ECC;
    uint64_t v15 = v0[10];
    uint64_t v16 = v0[7];
    return sub_100013130(v15, v16);
  }
}

uint64_t sub_100012ECC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_100012FDC, v1, 0);
}

uint64_t sub_100012FDC()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = v0[12] + 1;
  if (v4 == v0[11])
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    v0[12] = v4;
    uint64_t v7 = v0[2] + 40 * v4 + 32;
    uint64_t v8 = (void *)swift_task_alloc();
    v0[13] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100012ABC;
    uint64_t v9 = v0[4];
    return sub_10001BE80(v9, v7);
  }
}

uint64_t sub_100013130(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v3[11] = swift_task_alloc();
  return _swift_task_switch(sub_100013224, v2, 0);
}

uint64_t sub_100013224()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 56) + 152);
  *(void *)(v0 + 96) = v1;
  return _swift_task_switch(sub_100013248, v1, 0);
}

uint64_t sub_100013248()
{
  *(void *)(v0 + 104) = *(void *)(*(void *)(v0 + 96) + 136);
  swift_retain();
  return _swift_task_switch(sub_1000132BC, 0, 0);
}

uint64_t sub_1000132BC()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[15] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_1000133D0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DAA8, v3, v5);
}

uint64_t sub_1000133D0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 128) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_10001352C, 0, 0);
}

uint64_t sub_10001352C()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[6];
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v1, 0, 1, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[17] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10001367C;
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[5];
  return sub_10065013C(v7, 0, 1, v6, 0, 0xF000000000000000, 2);
}

uint64_t sub_10001367C()
{
  uint64_t v2 = *(void *)(*v1 + 88);
  uint64_t v3 = *v1;
  *(void *)(v3 + 144) = v0;
  swift_task_dealloc();
  sub_10001DAB4(v2, (uint64_t *)&unk_10163AC90);
  if (v0)
  {
    return _swift_task_switch(sub_1000137F8, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
}

uint64_t sub_1000137F8()
{
  return _swift_task_switch(sub_100013814, *(void *)(v0 + 56), 0);
}

uint64_t sub_100013814()
{
  uint64_t v22 = v0;
  swift_release();
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[8];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170DED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[9];
  uint64_t v9 = v0[10];
  uint64_t v11 = v0[8];
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    log = v6;
    sub_10001D910((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 12) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v19 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Unable to update last delegated publish date in the local DB for share id %s, error %{public}@", (uint8_t *)v12, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100013B64()
{
  v1[43] = v0;
  v1[44] = *v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[45] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[46] = v3;
  v1[47] = *(void *)(v3 + 64);
  v1[48] = swift_task_alloc();
  v1[49] = sub_10000588C(&qword_10163B9F0);
  v1[50] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  v1[51] = v4;
  v1[52] = *(void *)(v4 - 8);
  v1[53] = swift_task_alloc();
  v1[54] = swift_task_alloc();
  v1[55] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  v1[56] = v5;
  v1[57] = *(void *)(v5 - 8);
  v1[58] = swift_task_alloc();
  v1[59] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v1[60] = swift_task_alloc();
  return _swift_task_switch(sub_100013D9C, v0, 0);
}

uint64_t sub_100013D9C()
{
  *(void *)(v0 + 288) = _swiftEmptyArrayStorage;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 488) = qword_10170E390;
  return _swift_task_switch(sub_100013E44, 0, 0);
}

uint64_t sub_100013E44()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100013F0C;
  uint64_t v2 = *(void *)(v0 + 488);
  return unsafeBlocking<A>(_:)(v0 + 264, sub_10001D704, v2, &type metadata for Configuration);
}

uint64_t sub_100013F0C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100014024, 0, 0);
}

uint64_t sub_100014024()
{
  uint64_t v1 = v0[43];
  v0[63] = v0[33];
  return _swift_task_switch(sub_100014048, v1, 0);
}

uint64_t sub_100014048()
{
  char v1 = sub_1010AAF90(v0[63]);
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v2 = v0[36];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
    return v3(v2);
  }
  else
  {
    uint64_t v5 = v0[60];
    uint64_t v6 = v0[45];
    uint64_t v7 = v0[46];
    v0[64] = *(void *)(v0[43] + 152);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    BOOL v8 = (void *)swift_task_alloc();
    v0[65] = v8;
    *BOOL v8 = v0;
    v8[1] = sub_1000141DC;
    uint64_t v9 = v0[60];
    return sub_100E5C1B8(v9, 1);
  }
}

uint64_t sub_1000141DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 480);
  uint64_t v3 = *(void *)(*(void *)v1 + 344);
  *(void *)(*(void *)v1 + 528) = a1;
  swift_task_dealloc();
  sub_10001DAB4(v2, &qword_101638CF0);
  return _swift_task_switch(sub_100014318, v3, 0);
}

uint64_t sub_100014318()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 528) + 16);
  *(void *)(v0 + 536) = v1;
  if (v1)
  {
    uint64_t v2 = qword_1016375E8;
    swift_retain();
    if (v2 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 176, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 200))
    {
      sub_10001CEB0((long long *)(v0 + 176), v0 + 96);
      swift_release();
      sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v7 = (uint64_t (*)(void))((char *)&dword_1016394D0 + dword_1016394D0);
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 544) = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_100014530;
      return v7();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = *(void *)(v0 + 288);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v6(v5);
  }
  return result;
}

uint64_t sub_100014530(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 344);
  *(void *)(*(void *)v1 + 552) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100014648, v2, 0);
}

uint64_t sub_100014648()
{
  if (v0[69])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
    uint64_t v1 = (void *)swift_task_alloc();
    v0[70] = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1000148B0;
    return sub_1003C9E30();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170DED0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "LeaderCheckService is not available.", v6, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v7 = 0xD000000000000012;
    v7[1] = 0x80000001013F1900;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_1000148B0(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 568) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 344);
  if (v1)
  {
    uint64_t v6 = sub_1000163CC;
  }
  else
  {
    *(unsigned char *)(v4 + 704) = a1 & 1;
    uint64_t v6 = sub_1000149F0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000149F0()
{
  if (*(unsigned char *)(v0 + 704))
  {
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    *(void *)(v0 + 576) = sub_100010324(v1, (uint64_t)qword_10170DED0);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "I am the leader. Will proceed to publishing delegated locations.", v4, 2u);
      swift_slowDealloc();
    }

    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 160))
    {
      sub_10001CEB0((long long *)(v0 + 136), v0 + 56);
      sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
      uint64_t v13 = (uint64_t (*)(void))((char *)&dword_101639108 + dword_101639108);
      uint64_t v6 = (void *)swift_task_alloc();
      *(void *)(v0 + 584) = v6;
      *uint64_t v6 = v0;
      v6[1] = sub_100014D1C;
      return v13();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170DED0);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Will skip publishing delegated locations because I am not the leader", v10, 2u);
      swift_slowDealloc();
    }

    swift_release();
    uint64_t v11 = *(void *)(v0 + 288);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v12(v11);
  }
  return result;
}

uint64_t sub_100014D1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 344);
  *(void *)(*(void *)v1 + 592) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100014E34, v2, 0);
}

uint64_t sub_100014E34()
{
  uint64_t v1 = v0[74];
  if (v1)
  {
    uint64_t v3 = v0[43];
    uint64_t v2 = v0[44];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 7));
    v0[75] = *(void *)(v3 + 136);
    uint64_t v4 = swift_allocObject();
    v0[76] = v4;
    *(void *)(v4 + 16) = v1;
    *(void *)(v4 + 24) = v2;
    swift_retain();
    return _swift_task_switch(sub_10001506C, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 7));
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "BeaconManagerService is not available for fetching online locations", v7, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v8 = 0xD000000000000014;
    v8[1] = 0x80000001013F1920;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_10001506C()
{
  uint64_t v1 = v0[76];
  uint64_t v2 = v0[75];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[77] = v3;
  v3[2] = v2;
  v3[3] = sub_10001D744;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[78] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100015178;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001D74C, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100015178()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 344);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000152C8, v1, 0);
}

uint64_t sub_1000152C8()
{
  uint64_t v1 = *(void *)(v0 + 528);
  uint64_t v2 = *(void *)(v0 + 512);
  uint64_t v3 = *(void *)(v0 + 448);
  int v4 = *(_DWORD *)(*(void *)(v0 + 456) + 80);
  *(_DWORD *)(v0 + 696) = v4;
  *(void *)(v0 + 632) = 1;
  uint64_t v5 = *(void *)(v0 + 472);
  uint64_t v6 = v1 + ((v4 + 32) & ~(unint64_t)v4);
  swift_bridgeObjectRetain();
  sub_10001D9BC(v6, v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  *(_DWORD *)(v0 + 700) = *(_DWORD *)(v3 + 24);
  return _swift_task_switch(sub_10001538C, v2, 0);
}

uint64_t sub_10001538C()
{
  uint64_t v1 = *(void *)(v0 + 512);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 472) + *(int *)(v0 + 700);
  *(void *)(v0 + 640) = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 648) = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_100015488, 0, 0);
}

uint64_t sub_100015488()
{
  uint64_t v1 = v0[81];
  uint64_t v2 = v0[80];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[82] = v3;
  v3[2] = v2;
  v3[3] = sub_10001D828;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[83] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100015590;
  uint64_t v6 = v0[49];
  uint64_t v5 = v0[50];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001D89C, v3, v6);
}

uint64_t sub_100015590()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 344);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000156E0, v1, 0);
}

uint64_t sub_1000156E0()
{
  uint64_t v38 = v0;
  uint64_t v1 = *(void *)(v0 + 400);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 416) + 48))(v1, 1, *(void *)(v0 + 408)) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 464);
    uint64_t v2 = *(void *)(v0 + 472);
    sub_10001DAB4(v1, &qword_10163B9F0);
    sub_10001D9BC(v2, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v8 = *(void *)(v0 + 464);
    uint64_t v7 = *(void *)(v0 + 472);
    if (v6)
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 141558275;
      *(void *)(v9 + 4) = 1752392040;
      *(_WORD *)(v9 + 12) = 2081;
      sub_10001D910((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v9 + 14) = sub_1008FA0F0(v10, v11, &v37);
      swift_bridgeObjectRelease();
      sub_10001DA24(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Owned beacon record not found for delegated beacon identifier %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10001DA24(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }
    uint64_t v14 = v7;
LABEL_8:
    uint64_t v15 = (uint64_t (*)())sub_10001DA24(v14, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v18 = *(void *)(v0 + 632);
    if (v18 == *(void *)(v0 + 536))
    {
      swift_bridgeObjectRelease();
      uint64_t v19 = *(void *)(v0 + 288);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      BOOL v22 = os_log_type_enabled(v20, v21);
      uint64_t v23 = *(void *)(v0 + 528);
      if (v22)
      {
        uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 134218240;
        *(void *)(v0 + 272) = *(void *)(v19 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 12) = 2048;
        uint64_t v25 = *(void *)(v23 + 16);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 280) = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Got %ld payloads to publish for %ld delegated beacons.", (uint8_t *)v24, 0x16u);
        swift_slowDealloc();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();

        swift_release();
      }
      swift_release();
      swift_beginAccess();
      uint64_t v35 = *(void *)(v0 + 288);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v36 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v36(v35);
    }
    else
    {
      *(void *)(v0 + 632) = v18 + 1;
      if (__OFADD__(v18, 1))
      {
        __break(1u);
      }
      else
      {
        uint64_t v26 = *(void *)(v0 + 512);
        uint64_t v27 = *(void *)(v0 + 448);
        sub_10001D9BC(*(void *)(v0 + 528)+ ((*(unsigned __int8 *)(v0 + 696) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 696))+ *(void *)(*(void *)(v0 + 456) + 72) * v18, *(void *)(v0 + 472), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        *(_DWORD *)(v0 + 700) = *(_DWORD *)(v27 + 24);
        uint64_t v15 = sub_10001538C;
        uint64_t v16 = v26;
        uint64_t v17 = 0;
      }
      return _swift_task_switch(v15, v16, v17);
    }
  }
  uint64_t v12 = *(uint64_t **)(v0 + 472);
  sub_10001D8A8(v1, *(void *)(v0 + 440), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  type metadata accessor for DelegatedShareUseCase();
  if (sub_1005753E8(v12))
  {
    uint64_t v13 = *(void *)(v0 + 472);
    sub_10001DA24(*(void *)(v0 + 440), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v14 = v13;
    goto LABEL_8;
  }
  uint64_t v28 = *(void *)(v0 + 472);
  uint64_t v29 = *(void *)(v0 + 440);
  uint64_t v30 = *(void *)(v0 + 448);
  *(void *)(v0 + 40) = *(void *)(v0 + 408);
  *(void *)(v0 + 48) = sub_10001D910(&qword_101638DD0, 255, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  uint64_t v31 = sub_10001D958((uint64_t *)(v0 + 16));
  sub_10001D9BC(v29, (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v32 = v28 + *(int *)(v30 + 20);
  os_log_type_t v33 = (void *)swift_task_alloc();
  *(void *)(v0 + 672) = v33;
  *os_log_type_t v33 = v0;
  v33[1] = sub_100015D28;
  return sub_10001942C(v0 + 16, v32);
}

uint64_t sub_100015D28(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[85] = a1;
  v3[86] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[43];
    os_log_type_t v5 = sub_100016720;
  }
  else
  {
    uint64_t v6 = v3[43];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v3 + 2));
    os_log_type_t v5 = sub_100015E54;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100015E54()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 440);
  if (*(void *)(v1 + 16))
  {
    uint64_t v3 = *(void *)(v0 + 472);
    sub_100442854(v1);
    sub_10001DA24(v2, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 432);
    swift_bridgeObjectRelease();
    sub_10001D9BC(v2, v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void *)(v0 + 472);
    uint64_t v11 = *(void *)(v0 + 432);
    uint64_t v10 = *(void *)(v0 + 440);
    if (v8)
    {
      uint64_t v31 = *(void *)(v0 + 440);
      uint64_t v32 = *(void *)(v0 + 472);
      uint64_t v12 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 141558275;
      *(void *)(v0 + 320) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2081;
      sub_10001D910((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 328) = sub_1008FA0F0(v13, v14, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001DA24(v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No observations to publish for device %{private,mask.hash}s.", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10001DA24(v31, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v4 = v32;
    }
    else
    {

      sub_10001DA24(v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_10001DA24(v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v4 = v9;
    }
  }
  uint64_t v15 = (uint64_t (*)())sub_10001DA24(v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v18 = *(void *)(v0 + 632);
  if (v18 == *(void *)(v0 + 536))
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void *)(v0 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    uint64_t v23 = *(void *)(v0 + 528);
    if (v22)
    {
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 134218240;
      *(void *)(v0 + 272) = *(void *)(v19 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2048;
      uint64_t v25 = *(void *)(v23 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 280) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Got %ld payloads to publish for %ld delegated beacons.", (uint8_t *)v24, 0x16u);
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();

      swift_release();
    }
    swift_release();
    swift_beginAccess();
    uint64_t v28 = *(void *)(v0 + 288);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v29(v28);
  }
  else
  {
    *(void *)(v0 + 632) = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v26 = *(void *)(v0 + 512);
      uint64_t v27 = *(void *)(v0 + 448);
      sub_10001D9BC(*(void *)(v0 + 528)+ ((*(unsigned __int8 *)(v0 + 696) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 696))+ *(void *)(*(void *)(v0 + 456) + 72) * v18, *(void *)(v0 + 472), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      *(_DWORD *)(v0 + 700) = *(_DWORD *)(v27 + 24);
      uint64_t v15 = sub_10001538C;
      uint64_t v16 = v26;
      uint64_t v17 = 0;
    }
    return _swift_task_switch(v15, v16, v17);
  }
}

uint64_t sub_1000163CC()
{
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170DED0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v13 = v2;
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138543362;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 336) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LeaderCheckService error: %{public}@", v5, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v13;
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  if (*((void *)p_ivar_base_size + 355) != -1) {
    swift_once();
  }
  *(void *)(v0 + 576) = sub_100010324(v2, (uint64_t)qword_10170DED0);
  BOOL v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "I am the leader. Will proceed to publishing delegated locations.", v10, 2u);
    swift_slowDealloc();
  }

  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 160))
  {
    sub_10001CEB0((long long *)(v0 + 136), v0 + 56);
    sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
    unint64_t v14 = (uint64_t (__cdecl *)())((char *)&dword_101639108 + dword_101639108);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 584) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100014D1C;
    return v14();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100016720()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void *)(v0 + 440);
  uint64_t v2 = *(void *)(v0 + 424);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  sub_10001D9BC(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v31 = *(void *)(v0 + 440);
    uint64_t v32 = *(void *)(v0 + 472);
    uint64_t v5 = *(void *)(v0 + 424);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v30 = (void *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 141558531;
    *(void *)(v0 + 296) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2081;
    sub_10001D910((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 304) = sub_1008FA0F0(v7, v8, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DA24(v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    *(_WORD *)(v6 + 22) = 2114;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 312) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v30 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error gathering delegation payloads for owned device %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v6, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    sub_10001DA24(v31, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v10 = v32;
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 472);
    uint64_t v12 = *(void *)(v0 + 440);
    uint64_t v13 = *(void *)(v0 + 424);

    swift_errorRelease();
    swift_errorRelease();
    sub_10001DA24(v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_errorRelease();
    sub_10001DA24(v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v10 = v11;
  }
  unint64_t v14 = (uint64_t (*)())sub_10001DA24(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v17 = *(void *)(v0 + 632);
  if (v17 == *(void *)(v0 + 536))
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(v0 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = *(void *)(v0 + 528);
    if (v21)
    {
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 134218240;
      *(void *)(v0 + 272) = *(void *)(v18 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2048;
      uint64_t v24 = *(void *)(v22 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 280) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Got %ld payloads to publish for %ld delegated beacons.", (uint8_t *)v23, 0x16u);
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();

      swift_release();
    }
    swift_release();
    swift_beginAccess();
    uint64_t v27 = *(void *)(v0 + 288);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v28(v27);
  }
  else
  {
    *(void *)(v0 + 632) = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v25 = *(void *)(v0 + 512);
      uint64_t v26 = *(void *)(v0 + 448);
      sub_10001D9BC(*(void *)(v0 + 528)+ ((*(unsigned __int8 *)(v0 + 696) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 696))+ *(void *)(*(void *)(v0 + 456) + 72) * v17, *(void *)(v0 + 472), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      *(_DWORD *)(v0 + 700) = *(_DWORD *)(v26 + 24);
      unint64_t v14 = sub_10001538C;
      uint64_t v15 = v25;
      uint64_t v16 = 0;
    }
    return _swift_task_switch(v14, v15, v16);
  }
}

uint64_t sub_100016D30()
{
  if (qword_101636810 != -1) {
    swift_once();
  }
  return sub_10044A50C(*(double *)&qword_101638B20);
}

uint64_t sub_100016D8C(uint64_t a1)
{
  v2[48] = a1;
  v2[49] = v1;
  v2[50] = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  v2[51] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[52] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[53] = v3;
  v2[54] = *(void *)(v3 - 8);
  v2[55] = swift_task_alloc();
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  return _swift_task_switch(sub_100016EC8, v1, 0);
}

uint64_t sub_100016EC8()
{
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 464) = sub_100010324(v1, (uint64_t)qword_10170DED0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Did publish delegated locations.", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = qword_1016375E8;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 184, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 208))
  {
    sub_10001CEB0((long long *)(v0 + 184), v0 + 224);
    swift_release();
    sub_10001CD44((void *)(v0 + 224), *(void *)(v0 + 248));
    unint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 472) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1000170DC;
    return v8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000170DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 392);
  *(void *)(*(void *)v1 + 480) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000171F4, v2, 0);
}

uint64_t sub_1000171F4()
{
  uint64_t v1 = v0 + 224;
  if (!*(void *)(v0 + 480))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Missing BeaconSharingService!", v12, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v13 = 0xD000000000000014;
    v13[1] = 0x80000001013F1890;
    swift_willThrow();
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(v0 + 384);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  *(void *)(v0 + 488) = JSONDecoder.init()();
  unint64_t v3 = sub_10092D644((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 368) = v3;
  uint64_t v4 = *(void *)(v2 + 16);
  *(void *)(v0 + 496) = v4;
  if (!v4)
  {
    unint64_t v14 = v3;
    uint64_t v15 = *(void *)(*(void *)(v0 + 392) + 144);
    sub_10000588C(&qword_101638D68);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v16 = *(void *)(v0 + 376);
    type metadata accessor for Transaction();
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = v14;
    v17[3] = v15;
    v17[4] = v16;
    swift_bridgeObjectRetain();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
LABEL_20:
    return v18();
  }
  uint64_t v5 = *(void *)(v0 + 384);
  *(void *)(v0 + 504) = SPBeaconLocationSourceUnknown;
  *(void *)(v0 + 512) = 0;
  uint64_t v6 = v5 + 32;
  swift_bridgeObjectRetain();
  sub_10001D010(v6, v0 + 144);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v8 = *(void *)(v0 + 176);
  sub_10001CD44((void *)(v0 + 144), v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
  swift_getAssociatedTypeWitness();
  sub_10000588C(&qword_101638D00);
  uint64_t v9 = _arrayForceCast<A, B>(_:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v9 + 16))
  {
    sub_10001D010(v9 + 32, v0 + 304);
  }
  else
  {
    *(void *)(v0 + 336) = 0;
    *(_OWORD *)(v0 + 304) = 0u;
    *(_OWORD *)(v0 + 320) = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10001D074(v0 + 304, v0 + 264, &qword_101638D08);
  uint64_t v19 = *(void *)(v0 + 288);
  if (!v19)
  {
    sub_10001DAB4(v0 + 264, &qword_101638D08);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CE5C();
    swift_allocError();
    *uint64_t v24 = 5;
    swift_willThrow();
    swift_release();
    swift_release();
    uint64_t v25 = v0 + 304;
LABEL_18:
    sub_10001DAB4(v25, &qword_101638D08);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 144);
LABEL_19:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_20;
  }
  uint64_t v20 = *(void *)(v0 + 296);
  sub_10001CD44((void *)(v0 + 264), *(void *)(v0 + 288));
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
  unint64_t v23 = v22;
  *(void *)(v0 + 520) = v21;
  *(void *)(v0 + 528) = v22;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 264);
  sub_10001D0D8();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  long long v26 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 32) = v26;
  long long v27 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 64) = v27;
  uint64_t v28 = *(void *)(v0 + 168);
  uint64_t v29 = *(void *)(v0 + 176);
  sub_10001CD44((void *)(v0 + 144), v28);
  (*(void (**)(uint64_t, uint64_t))(v29 + 72))(v28, v29);
  if (!v30)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CE5C();
    swift_allocError();
    *uint64_t v38 = 5;
    swift_willThrow();
    sub_10001CFB8(v21, v23);
    sub_10001D12C((uint64_t *)(v0 + 16));
    swift_release();
    goto LABEL_17;
  }
  uint64_t v31 = *(void *)(v0 + 424);
  uint64_t v32 = *(void *)(v0 + 432);
  uint64_t v33 = *(void *)(v0 + 416);
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  int v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v33, 1, v31);
  uint64_t v35 = *(void *)(v0 + 480);
  if (v34 == 1)
  {
    uint64_t v36 = *(void *)(v0 + 416);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v36, &qword_101638CF0);
    sub_10001CE5C();
    swift_allocError();
    *uint64_t v37 = 5;
    swift_willThrow();
    sub_10001CFB8(v21, v23);
    sub_10001D12C((uint64_t *)(v0 + 16));
    swift_release();
LABEL_17:
    swift_release();
    uint64_t v25 = v0 + 304;
    goto LABEL_18;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 432) + 32))(*(void *)(v0 + 456), *(void *)(v0 + 416), *(void *)(v0 + 424));
  *(void *)(v0 + 536) = *(void *)(v35 + 128);
  swift_retain();
  uint64_t v40 = (void *)swift_task_alloc();
  *(void *)(v0 + 544) = v40;
  *uint64_t v40 = v0;
  v40[1] = sub_10001795C;
  uint64_t v41 = *(void *)(v0 + 448);
  uint64_t v42 = *(void *)(v0 + 456);
  uint64_t v43 = *(void *)(v0 + 408);
  return sub_100CAA88C(v41, v43, v0 + 16, v42);
}

uint64_t sub_10001795C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 552) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 392);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10001828C;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 392);
    swift_release();
    uint64_t v4 = sub_100017AA8;
    uint64_t v5 = v6;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100017AA8()
{
  uint64_t v58 = (_OWORD *)(v0 + 304);
  uint64_t v1 = (uint64_t *)(v0 + 368);
  uint64_t v2 = *(void **)(v0 + 504);
  uint64_t v3 = *(double **)(v0 + 408);
  (*(void (**)(void, void, void))(*(void *)(v0 + 432) + 16))(*(void *)(v0 + 440), *(void *)(v0 + 448), *(void *)(v0 + 424));
  double v4 = *v3;
  double v5 = v3[1];
  double v6 = v3[2];
  id v7 = objc_allocWithZone((Class)SPBeaconLocation);
  id v8 = v2;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v10 = [v7 initWithTimestamp:isa latitude:v8 longitude:v4 horizontalAccuracy:v5 source:v6];

  uint64_t v11 = *(void *)(v0 + 440);
  uint64_t v12 = *(void *)(v0 + 424);
  uint64_t v13 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 432) + 8);
  uint64_t v57 = (uint64_t *)(v0 + 16);
  if (v10)
  {
    uint64_t v14 = *v1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10016BA48((uint64_t)v10, v11, isUniquelyReferenced_nonNull_native);
    *uint64_t v1 = v14;
    swift_bridgeObjectRelease();
    uint64_t v16 = *v13;
    (*v13)(v11, v12);
  }
  else
  {
    uint64_t v17 = (void *)sub_1001634D0(v11);
    uint64_t v16 = *v13;
    (*v13)(v11, v12);
  }
  uint64_t v18 = *(void *)(v0 + 496);
  uint64_t v20 = *(void *)(v0 + 448);
  uint64_t v19 = *(void *)(v0 + 456);
  uint64_t v21 = *(void *)(v0 + 424);
  uint64_t v22 = *(void *)(v0 + 408);
  uint64_t v23 = *(void *)(v0 + 512) + 1;
  sub_10001CFB8(*(void *)(v0 + 520), *(void *)(v0 + 528));
  sub_10001D12C(v57);
  sub_10001DA24(v22, type metadata accessor for DeviceEventFormat.LocationFormat);
  v16(v20, v21);
  v16(v19, v21);
  sub_10001DAB4((uint64_t)v58, &qword_101638D08);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 144);
  if (v23 == v18)
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void *)(v0 + 368);
    uint64_t v25 = *(void *)(*(void *)(v0 + 392) + 144);
    sub_10000588C(&qword_101638D68);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v26 = *(void *)(v0 + 376);
    type metadata accessor for Transaction();
    long long v27 = (void *)swift_allocObject();
    v27[2] = v24;
    v27[3] = v25;
    v27[4] = v26;
    swift_bridgeObjectRetain();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
LABEL_20:
    return v28();
  }
  uint64_t v29 = *(void *)(v0 + 552);
  uint64_t v30 = *(void *)(v0 + 512) + 1;
  *(void *)(v0 + 512) = v30;
  sub_10001D010(*(void *)(v0 + 384) + 40 * v30 + 32, v0 + 144);
  uint64_t v31 = *(void *)(v0 + 168);
  uint64_t v32 = *(void *)(v0 + 176);
  sub_10001CD44((void *)(v0 + 144), v31);
  (*(void (**)(uint64_t, uint64_t))(v32 + 64))(v31, v32);
  swift_getAssociatedTypeWitness();
  sub_10000588C(&qword_101638D00);
  uint64_t v33 = _arrayForceCast<A, B>(_:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v33 + 16))
  {
    sub_10001D010(v33 + 32, (uint64_t)v58);
  }
  else
  {
    *(void *)(v0 + 336) = 0;
    *uint64_t v58 = 0u;
    *(_OWORD *)(v0 + 320) = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10001D074((uint64_t)v58, v0 + 264, &qword_101638D08);
  uint64_t v34 = *(void *)(v0 + 288);
  if (!v34)
  {
    sub_10001DAB4(v0 + 264, &qword_101638D08);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CE5C();
    swift_allocError();
    *uint64_t v39 = 5;
    swift_willThrow();
    swift_release();
    swift_release();
    uint64_t v40 = v0 + 304;
LABEL_18:
    sub_10001DAB4(v40, &qword_101638D08);
    goto LABEL_19;
  }
  uint64_t v35 = *(void *)(v0 + 296);
  sub_10001CD44((void *)(v0 + 264), *(void *)(v0 + 288));
  uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 24))(v34, v35);
  unint64_t v38 = v37;
  *(void *)(v0 + 520) = v36;
  *(void *)(v0 + 528) = v37;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 264);
  sub_10001D0D8();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v29)
  {
    sub_10001CFB8(v36, v38);
    swift_release();
    swift_release();
    sub_10001DAB4((uint64_t)v58, &qword_101638D08);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_19:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 144);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_20;
  }
  long long v41 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)uint64_t v57 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 32) = v41;
  long long v42 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 64) = v42;
  uint64_t v43 = *(void *)(v0 + 168);
  uint64_t v44 = *(void *)(v0 + 176);
  sub_10001CD44((void *)(v0 + 144), v43);
  (*(void (**)(uint64_t, uint64_t))(v44 + 72))(v43, v44);
  if (!v45)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v46 = *(void *)(v0 + 424);
  uint64_t v47 = *(void *)(v0 + 432);
  uint64_t v48 = *(void *)(v0 + 416);
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v48, 1, v46) == 1)
  {
    uint64_t v49 = *(void *)(v0 + 416);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v49, &qword_101638CF0);
LABEL_17:
    sub_10001CE5C();
    swift_allocError();
    *uint64_t v50 = 5;
    swift_willThrow();
    sub_10001CFB8(v36, v38);
    sub_10001D12C(v57);
    swift_release();
    swift_release();
    uint64_t v40 = v0 + 304;
    goto LABEL_18;
  }
  uint64_t v52 = *(void *)(v0 + 480);
  (*(void (**)(void, void, void))(*(void *)(v0 + 432) + 32))(*(void *)(v0 + 456), *(void *)(v0 + 416), *(void *)(v0 + 424));
  *(void *)(v0 + 536) = *(void *)(v52 + 128);
  swift_retain();
  uint64_t v53 = (void *)swift_task_alloc();
  *(void *)(v0 + 544) = v53;
  *uint64_t v53 = v0;
  v53[1] = sub_10001795C;
  uint64_t v54 = *(void *)(v0 + 448);
  uint64_t v55 = *(void *)(v0 + 456);
  uint64_t v56 = *(void *)(v0 + 408);
  return sub_100CAA88C(v54, v56, v0 + 16, v55);
}

uint64_t sub_10001828C()
{
  uint64_t v1 = v0[57];
  uint64_t v2 = v0[53];
  uint64_t v3 = v0[54];
  sub_10001CFB8(v0[65], v0[66]);
  sub_10001D12C(v0 + 2);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_10001DAB4((uint64_t)(v0 + 38), &qword_101638D08);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 18));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10001839C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v4[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v4[15] = v5;
  v4[16] = *(void *)(v5 - 8);
  v4[17] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[18] = v6;
  v4[19] = *(void *)(v6 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101638D50);
  v4[24] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for BeaconEstimatedLocation();
  v4[25] = v7;
  v4[26] = *(void *)(v7 - 8);
  v4[27] = swift_task_alloc();
  return _swift_task_switch(sub_1000185A0, v3, 0);
}

uint64_t sub_1000185A0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001863C;
  uint64_t v2 = *(void *)(v0 + 88);
  return sub_100E62DA0(v2);
}

uint64_t sub_10001863C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104);
  *(void *)(*(void *)v1 + 232) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100018754, v2, 0);
}

uint64_t sub_100018754()
{
  uint64_t v33 = v0;
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[24];
  sub_100E4CD4C(v0[29], v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(v0[24], (uint64_t *)&unk_101638D50);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170DED0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No localEstimated Location found.", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = v0[25];
    uint64_t v9 = v0[26];
    uint64_t v10 = v0[10];

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, 1, 1, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  else
  {
    sub_10001D8A8(v0[24], v0[27], (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v13 = v0[23];
    uint64_t v14 = v0[18];
    uint64_t v15 = v0[19];
    uint64_t v16 = v0[11];
    uint64_t v17 = type metadata accessor for Logger();
    v0[30] = sub_100010324(v17, (uint64_t)qword_10170DED0);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    v0[31] = v18;
    v0[32] = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v18(v13, v16, v14);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = v0[23];
    uint64_t v23 = v0[18];
    uint64_t v24 = v0[19];
    if (v21)
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 141558275;
      v0[8] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2081;
      sub_10001D910((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[9] = sub_1008FA0F0(v26, v27, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v28(v22, v23);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Got localEstimated Location from beaconStore for %{private,mask.hash}s.", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v28(v0[23], v0[18]);
    }

    v0[33] = v28;
    uint64_t v29 = (void *)swift_task_alloc();
    v0[34] = v29;
    *uint64_t v29 = v0;
    v29[1] = sub_100018C24;
    uint64_t v30 = v0[13];
    uint64_t v31 = v0[14];
    v29[4] = v0[12];
    v29[5] = v30;
    v29[3] = v31;
    return _swift_task_switch(sub_1000123F0, v30, 0);
  }
}

uint64_t sub_100018C24()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 104);
  swift_task_dealloc();
  return _swift_task_switch(sub_100018D34, v1, 0);
}

uint64_t sub_100018D34()
{
  uint64_t v46 = v0;
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[14];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = (void (*)(uint64_t, uint64_t, uint64_t))v0[31];
    uint64_t v6 = v0[20];
    uint64_t v5 = v0[21];
    uint64_t v7 = v0[18];
    uint64_t v9 = v0[11];
    uint64_t v8 = v0[12];
    sub_10001DAB4(v3, (uint64_t *)&unk_10163AC90);
    v4(v5, v8, v7);
    v4(v6, v9, v7);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[33];
    uint64_t v15 = v0[20];
    uint64_t v14 = v0[21];
    uint64_t v16 = v0[18];
    if (v12)
    {
      uint64_t v43 = (void (*)(uint64_t, uint64_t))v0[33];
      uint64_t v17 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 141558787;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2081;
      sub_10001D910((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = sub_1008FA0F0(v18, v19, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v43(v14, v16);
      *(_WORD *)(v17 + 22) = 2160;
      v0[4] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 32) = 2081;
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[5] = sub_1008FA0F0(v20, v21, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v43(v15, v16);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Last publish date not found in local cache for share: %{private,mask.hash}s\nand beacon %{private,mask.hash}s. Return the location we have.", (uint8_t *)v17, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v13(v0[21], v0[18]);
      v13(v15, v16);
    }
    uint64_t v26 = v0[26];
    uint64_t v27 = v0[25];
    uint64_t v28 = v0[10];
    sub_10001D8A8(v0[27], v28, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v27);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[17], v3, v1);
    if (static Date.> infix(_:_:)())
    {
      uint64_t v23 = v0[26];
      uint64_t v22 = v0[27];
      uint64_t v24 = v0[25];
      uint64_t v25 = v0[10];
      (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
      sub_10001D8A8(v22, v25, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v24);
    }
    else
    {
      ((void (*)(void, void, void))v0[31])(v0[22], v0[11], v0[18]);
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      BOOL v31 = os_log_type_enabled(v29, v30);
      uint64_t v32 = v0[27];
      uint64_t v33 = v0[22];
      uint64_t v34 = v0[18];
      uint64_t v44 = (void (*)(uint64_t, uint64_t))v0[33];
      uint64_t v35 = v0[16];
      uint64_t v36 = v0[17];
      uint64_t v37 = v0[15];
      if (v31)
      {
        uint64_t v38 = swift_slowAlloc();
        uint64_t v45 = swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 141558275;
        v0[6] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v38 + 12) = 2081;
        sub_10001D910((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[7] = sub_1008FA0F0(v39, v40, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v44(v33, v34);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Stored location older than lastPublishDate: %{private,mask.hash}s.", (uint8_t *)v38, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
      }
      else
      {

        v44(v33, v34);
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
      }
      sub_10001DA24(v32, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      (*(void (**)(void, uint64_t, uint64_t, void))(v0[26] + 56))(v0[10], 1, 1, v0[25]);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v41 = (uint64_t (*)(void))v0[1];
  return v41();
}

uint64_t sub_10001942C(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  sub_10000588C((uint64_t *)&unk_101638D50);
  v3[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for BeaconEstimatedLocation();
  v3[16] = v4;
  v3[17] = *(void *)(v4 - 8);
  v3[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[19] = v5;
  v3[20] = *(void *)(v5 - 8);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  return _swift_task_switch(sub_100019598, v2, 0);
}

uint64_t sub_100019598()
{
  uint64_t v1 = (void *)v0[12];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10001CD44(v1, v2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 8) + 8) + 32))(v2);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[24] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100019678;
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[13];
  return sub_10001839C(v6, v5, v7);
}

uint64_t sub_100019678()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  swift_task_dealloc();
  return _swift_task_switch(sub_100019788, v1, 0);
}

uint64_t sub_100019788()
{
  uint64_t v23 = v0;
  uint64_t v1 = v0[15];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[17] + 48))(v1, 1, v0[16]) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_101638D50);
    if (qword_101637660 != -1) {
      swift_once();
    }
    uint64_t v2 = v0[22];
    uint64_t v3 = v0[23];
    uint64_t v4 = v0[19];
    uint64_t v5 = v0[20];
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F838);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[22];
    uint64_t v11 = v0[19];
    uint64_t v12 = v0[20];
    if (v9)
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 141558275;
      v0[7] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2081;
      sub_10001D910((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[8] = sub_1008FA0F0(v14, v15, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v16(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No new location available for delegated publish for : %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v16(v0[22], v0[19]);
    }

    v16(v0[23], v0[19]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(void *))v0[1];
    return v20(_swiftEmptyArrayStorage);
  }
  else
  {
    sub_10001D8A8(v1, v0[18], (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    uint64_t v17 = (void *)swift_task_alloc();
    v0[25] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_100019B54;
    uint64_t v18 = v0[18];
    uint64_t v19 = v0[14];
    v17[32] = v0[13];
    v17[33] = v19;
    v17[30] = v0 + 2;
    v17[31] = v18;
    return _swift_task_switch(sub_10001A1BC, v19, 0);
  }
}

uint64_t sub_100019B54()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 112);
  if (v0) {
    uint64_t v4 = sub_100019DD0;
  }
  else {
    uint64_t v4 = sub_100019C80;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100019C80()
{
  uint64_t v1 = sub_100A6E8E0(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = sub_100A6E8E0((void *)(v2 > 1), v3 + 1, 1, v1);
  }
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v7 = *(void *)(v0 + 144);
  v1[2] = v3 + 1;
  sub_10001CEB0((long long *)(v0 + 16), (uint64_t)&v1[5 * v3 + 4]);
  sub_10001DA24(v7, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v8 = *(uint64_t (**)(void *))(v0 + 8);
  return v8(v1);
}

uint64_t sub_100019DD0()
{
  uint64_t v27 = v0;
  if (qword_101637660 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v4 = v0[19];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170F838);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[20];
  uint64_t v9 = v0[21];
  uint64_t v11 = v0[19];
  if (v8)
  {
    log = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v24 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[9] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10001D910((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[10] = sub_1008FA0F0(v13, v14, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v15(v9, v11);
    uint64_t v16 = v15;
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    v0[11] = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v24 = v17;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "No delegation keys found for shared item: %{private,mask.hash}s, error %{public}@)", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v18(v0[21], v0[19]);
    uint64_t v16 = v18;
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v19 = v0[23];
  uint64_t v21 = v0[18];
  uint64_t v20 = v0[19];
  swift_willThrow();
  sub_10001DA24(v21, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  v16(v19, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t sub_10001A198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[32] = a4;
  v5[33] = v4;
  v5[30] = a1;
  v5[31] = a3;
  return _swift_task_switch(sub_10001A1BC, v4, 0);
}

uint64_t sub_10001A1BC()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 168, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 192))
  {
    sub_10001CEB0((long long *)(v0 + 168), v0 + 128);
    swift_release();
    sub_10001CD44((void *)(v0 + 128), *(void *)(v0 + 152));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 272) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10001A30C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001A30C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 264);
  *(void *)(*(void *)v1 + 280) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10001A424, v2, 0);
}

uint64_t sub_10001A424()
{
  uint64_t v1 = *(void *)(v0 + 280);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 128);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 280);
    return _swift_task_switch(sub_10001A5C8, v2, 0);
  }
  else
  {
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170DED0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing BeaconSharingService!", v6, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *os_log_type_t v7 = 0xD000000000000014;
    v7[1] = 0x80000001013F1890;
    swift_willThrow();
    BOOL v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_10001A5C8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[36] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001A66C;
  uint64_t v3 = v0[31];
  uint64_t v2 = v0[32];
  return sub_100CA8BEC((uint64_t)(v0 + 9), v2, v3);
}

uint64_t sub_10001A66C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 264);
    uint64_t v4 = sub_10001A898;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 280);
    uint64_t v4 = sub_10001A784;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10001A784()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(uint64_t **)(v0 + 240);
  v2[3] = (uint64_t)&type metadata for OwnSubmitPayload;
  v2[4] = sub_10001CF1C();
  uint64_t v3 = swift_allocObject();
  *uint64_t v2 = v3;
  long long v4 = *(_OWORD *)(v0 + 88);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 72);
  *(_OWORD *)(v3 + 32) = v4;
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v0 + 104);
  *(void *)(v3 + 64) = *(void *)(v0 + 120);
  return _swift_task_switch(sub_10001A834, v1, 0);
}

uint64_t sub_10001A834()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001A898()
{
  *(void *)(v0 + 232) = *(void *)(v0 + 296);
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if (swift_dynamicCast() && *(unsigned char *)(v0 + 336) == 21)
  {
    swift_errorRelease();
    uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&dword_101642168 + dword_101642168);
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10001A9F0;
    uint64_t v2 = *(void *)(v0 + 256);
    return v5(v2);
  }
  else
  {
    swift_errorRelease();
    swift_willThrow();
    swift_release();
    long long v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_10001A9F0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 264);
    long long v4 = sub_10001ACC4;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 280);
    long long v4 = sub_10001AB08;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10001AB08()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[40] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001ABAC;
  uint64_t v3 = v0[31];
  uint64_t v2 = v0[32];
  return sub_100CA8BEC((uint64_t)(v0 + 2), v2, v3);
}

uint64_t sub_10001ABAC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 328) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 264);
    long long v4 = sub_10001AE48;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 280);
    long long v4 = sub_10001AD30;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10001ACC4()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001AD30()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(uint64_t **)(v0 + 240);
  v2[3] = (uint64_t)&type metadata for OwnSubmitPayload;
  v2[4] = sub_10001CF1C();
  uint64_t v3 = swift_allocObject();
  *uint64_t v2 = v3;
  long long v4 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 32) = v4;
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v0 + 48);
  *(void *)(v3 + 64) = *(void *)(v0 + 64);
  return _swift_task_switch(sub_10001ADDC, v1, 0);
}

uint64_t sub_10001ADDC()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001AE48()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001AEB4(uint64_t a1)
{
  v2[14] = a1;
  v2[15] = v1;
  sub_10000588C((uint64_t *)&unk_101638D10);
  v2[16] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[17] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OwnerSharingCircle();
  v2[18] = v3;
  v2[19] = *(void *)(v3 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[21] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[22] = v5;
  v2[23] = *(void *)(v5 + 64);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  return _swift_task_switch(sub_10001B048, v1, 0);
}

uint64_t sub_10001B048()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 120) + 152);
  *(void *)(v0 + 208) = v1;
  return _swift_task_switch(sub_10001B06C, v1, 0);
}

uint64_t sub_10001B06C()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[21];
  uint64_t v5 = v0[14];
  v0[27] = *(void *)(v2 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[28] = v6;
  v0[29] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  v0[30] = v8;
  *(void *)(v8 + 16) = v2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
  swift_retain();
  return _swift_task_switch(sub_10001B16C, 0, 0);
}

uint64_t sub_10001B16C()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[27];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[31] = v3;
  v3[2] = v2;
  v3[3] = sub_10001CDDC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[32] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163BBE0);
  *uint64_t v4 = v0;
  v4[1] = sub_10001B288;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001CE50, v3, v5);
}

uint64_t sub_10001B288()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_10001B3D8, v1, 0);
}

uint64_t sub_10001B3D8()
{
  uint64_t v27 = v0;
  uint64_t v1 = (long long *)(v0 + 7);
  if (v0[10])
  {
    uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[28];
    uint64_t v3 = v0[21];
    uint64_t v4 = v0[22];
    uint64_t v5 = v0[17];
    uint64_t v6 = v0[14];
    sub_10001CEB0(v1, (uint64_t)(v0 + 2));
    v2(v5, v6, v3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v5, 0, 1, v3);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[33] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_10001B798;
    uint64_t v8 = v0[17];
    return sub_100E5C1B8(v8, 1);
  }
  else
  {
    sub_10001DAB4((uint64_t)v1, (uint64_t *)&unk_10163BBE0);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v10 = v0[14];
    uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))v0[28];
    uint64_t v12 = v0[24];
    uint64_t v13 = v0[21];
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170DED0);
    v11(v12, v10, v13);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = v0[24];
    uint64_t v19 = v0[21];
    uint64_t v20 = v0[22];
    if (v17)
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 141558275;
      v0[12] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2081;
      sub_10001D910((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[13] = sub_1008FA0F0(v22, v23, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Cannot publish delegated locations for beacon %{private,mask.hash}s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v20 + 8))(v0[24], v0[21]);
    }

    sub_10001CE5C();
    swift_allocError();
    *uint64_t v24 = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
}

uint64_t sub_10001B798(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  uint64_t v3 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 272) = a1;
  swift_task_dealloc();
  sub_10001DAB4(v2, &qword_101638CF0);
  return _swift_task_switch(sub_10001B8D4, v3, 0);
}

uint64_t sub_10001B8D4()
{
  uint64_t v1 = v0[34];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(v0[19] + 80);
    sub_10001D9BC(v1 + ((v2 + 32) & ~v2), v0[16], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[19];
  uint64_t v6 = v0[16];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
  {
    sub_10001DAB4(v0[16], (uint64_t *)&unk_101638D10);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170DED0);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Delegated circle not found", v10, 2u);
      swift_slowDealloc();
    }

    sub_10001CE5C();
    swift_allocError();
    *uint64_t v11 = 4;
    swift_willThrow();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    uint64_t v14 = v0[20];
    uint64_t v15 = v0[18];
    sub_10001D8A8(v0[16], v14, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    BOOL v17 = (void *)swift_task_alloc();
    v0[35] = v17;
    *BOOL v17 = v0;
    v17[1] = sub_10001BBB4;
    return sub_10001942C((uint64_t)(v0 + 2), v16);
  }
}

uint64_t sub_10001BBB4(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[36] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[15];
  if (v1)
  {
    uint64_t v6 = sub_10001BDBC;
  }
  else
  {
    v4[37] = a1;
    uint64_t v6 = sub_10001BCF0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10001BCF0()
{
  sub_10001DA24(v0[20], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[37];
  return v1(v2);
}

uint64_t sub_10001BDBC()
{
  sub_10001DA24(*(void *)(v0 + 160), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10001BE80(uint64_t a1, uint64_t a2)
{
  v3[17] = a1;
  v3[18] = a2;
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v3[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v3[20] = v4;
  v3[21] = *(void *)(v4 - 8);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v3[25] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[26] = v5;
  v3[27] = *(void *)(v5 - 8);
  v3[28] = swift_task_alloc();
  return _swift_task_switch(sub_10001C018, v2, 0);
}

uint64_t sub_10001C018()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t)(v0 + 2);
  uint64_t v3 = (uint64_t)(v0 + 7);
  uint64_t v4 = (long long *)(v0 + 12);
  uint64_t v5 = (void *)v1[18];
  uint64_t v6 = v5[3];
  uint64_t v7 = v5[4];
  sub_10001CD44(v5, v6);
  switch((*(unsigned __int8 (**)(uint64_t, uint64_t))(v7 + 80))(v6, v7))
  {
    case 4u:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 5u:
      goto LABEL_18;
    default:
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) == 0) {
        goto LABEL_18;
      }
LABEL_5:
      uint64_t v9 = v5[3];
      uint64_t v10 = v5[4];
      sub_10001CD44((void *)v1[18], v9);
      (*(void (**)(uint64_t, uint64_t))(v10 + 72))(v9, v10);
      uint64_t v12 = v11;
      swift_bridgeObjectRelease();
      if (!v12) {
        goto LABEL_18;
      }
      uint64_t v13 = v5[3];
      uint64_t v14 = v5[4];
      sub_10001CD44((void *)v1[18], v13);
      (*(void (**)(uint64_t, uint64_t))(v14 + 72))(v13, v14);
      if (!v15)
      {
        __break(1u);
        JUMPOUT(0x10001C748);
      }
      uint64_t v17 = v1[26];
      uint64_t v16 = v1[27];
      uint64_t v18 = v1[25];
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v18, 1, v17) == 1)
      {
        uint64_t v19 = v1[25];
        uint64_t v20 = &qword_101638CF0;
        goto LABEL_17;
      }
      uint64_t v21 = (void *)v1[18];
      v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1[27] + 32);
      v63(v1[28], v1[25], v1[26]);
      uint64_t v23 = v5[3];
      uint64_t v22 = v5[4];
      sub_10001CD44(v21, v23);
      (*(void (**)(uint64_t, uint64_t))(v22 + 64))(v23, v22);
      swift_getAssociatedTypeWitness();
      sub_10000588C(&qword_101638D00);
      uint64_t v24 = _arrayForceCast<A, B>(_:)();
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void *)(v24 + 16);
      if (!v25)
      {
        *(void *)(v2 + 32) = 0;
        *(_OWORD *)uint64_t v2 = 0u;
        *(_OWORD *)(v2 + 16) = 0u;
        swift_bridgeObjectRelease();
LABEL_15:
        uint64_t v42 = v1[20];
        uint64_t v43 = v1[21];
        uint64_t v44 = v1[19];
        sub_10001DAB4(v2, &qword_101638D08);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, 1, 1, v42);
        goto LABEL_16;
      }
      uint64_t v26 = v4;
      unint64_t v64 = (void *)v2;
      uint64_t v27 = (long long *)v3;
      sub_10001D010(v24 + 32, v3);
      swift_bridgeObjectRetain();
      if (v25 != 1)
      {
        v65 = (void (**)(uint64_t, uint64_t))(v1[21] + 8);
        uint64_t v66 = v24;
        uint64_t v52 = v24 + 72;
        unint64_t v53 = 1;
        uint64_t v67 = v1;
        uint64_t v68 = v3;
        uint64_t v69 = v25;
        while (v53 < *(void *)(v24 + 16))
        {
          uint64_t v55 = v1[22];
          uint64_t v54 = v1[23];
          uint64_t v56 = v1[20];
          sub_10001D010(v52, (uint64_t)v26);
          uint64_t v57 = v1[10];
          uint64_t v58 = v1[11];
          sub_10001CD44(v27, v57);
          (*(void (**)(uint64_t, uint64_t))(v58 + 32))(v57, v58);
          uint64_t v59 = v1[15];
          uint64_t v60 = v1[16];
          sub_10001CD44(v26, v59);
          (*(void (**)(uint64_t, uint64_t))(v60 + 32))(v59, v60);
          char v61 = static Date.< infix(_:_:)();
          int64_t v62 = *v65;
          (*v65)(v55, v56);
          v62(v54, v56);
          if (v61)
          {
            uint64_t v27 = (long long *)v68;
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v68);
            sub_10001CEB0(v26, v68);
          }
          else
          {
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
            uint64_t v27 = (long long *)v68;
          }
          ++v53;
          v52 += 40;
          uint64_t v24 = v66;
          uint64_t v1 = v67;
          if (v69 == v53) {
            goto LABEL_11;
          }
        }
        __break(1u);
LABEL_32:
        swift_once();
        goto LABEL_19;
      }
LABEL_11:
      swift_bridgeObjectRelease();
      uint64_t v2 = (uint64_t)v64;
      sub_10001CEB0(v27, (uint64_t)v64);
      swift_bridgeObjectRelease();
      uint64_t v28 = v1[5];
      if (!v28) {
        goto LABEL_15;
      }
      uint64_t v29 = v1[20];
      uint64_t v30 = v1[21];
      uint64_t v31 = v1[19];
      uint64_t v32 = v1[6];
      sub_10001CD44(v64, v1[5]);
      (*(void (**)(uint64_t, uint64_t))(v32 + 32))(v28, v32);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v31, 0, 1, v29);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v64);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v31, 1, v29) != 1)
      {
        uint64_t v33 = v1[28];
        uint64_t v34 = v1[26];
        uint64_t v35 = v1[24];
        uint64_t v36 = v1[20];
        uint64_t v37 = v1[17];
        uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1[21] + 32);
        v38(v35, v1[19], v36);
        uint64_t v39 = sub_10000588C(&qword_101638CF8);
        uint64_t v40 = v37 + *(int *)(v39 + 48);
        v63(v37, v33, v34);
        v38(v40, v35, v36);
        uint64_t v41 = 0;
        goto LABEL_22;
      }
LABEL_16:
      uint64_t v45 = v1[19];
      (*(void (**)(void, void))(v1[27] + 8))(v1[28], v1[26]);
      uint64_t v20 = (uint64_t *)&unk_10163AC90;
      uint64_t v19 = v45;
LABEL_17:
      sub_10001DAB4(v19, v20);
LABEL_18:
      if (qword_101636B18 != -1) {
        goto LABEL_32;
      }
LABEL_19:
      uint64_t v46 = type metadata accessor for Logger();
      sub_100010324(v46, (uint64_t)qword_10170DED0);
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Invalid ShareId in the payload or cannot extract location Ts. Cannot store last delegated publish date", v49, 2u);
        swift_slowDealloc();
      }

      uint64_t v39 = sub_10000588C(&qword_101638CF8);
      uint64_t v41 = 1;
LABEL_22:
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v1[17], v41, 1, v39);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v50 = (uint64_t (*)(void))v1[1];
      return v50();
  }
}

uint64_t sub_10001C760()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for DelegatedBeaconPayloadPublisher()
{
  return self;
}

uint64_t DeviceIdentityUtility.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_10001C7E8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001C878;
  return sub_100013B64();
}

uint64_t sub_10001C878(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_10001C978(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_10001C998, v3, 0);
}

uint64_t sub_10001C998()
{
  if (*(void *)(v0[2] + 16))
  {
    uint64_t v1 = (void *)swift_task_alloc();
    v0[4] = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10001CA6C;
    uint64_t v2 = v0[2];
    return sub_10001285C(v2);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_10001CA6C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 40) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10001CBC4;
  uint64_t v4 = *(void *)(v1 + 16);
  return sub_100016D8C(v4);
}

uint64_t sub_10001CBC4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10001CCB8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10001CCEC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10001D910((unint64_t *)&unk_101638CB0, a2, (void (*)(uint64_t))type metadata accessor for DelegatedBeaconPayloadPublisher);
  *(void *)(a1 + 8) = result;
  return result;
}

void *sub_10001CD44(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001CDDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100E5EE58(v4, a1);
}

uint64_t sub_10001CE50(uint64_t a1)
{
  return sub_100129E3C(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_10001CE5C()
{
  unint64_t result = qword_101638D20;
  if (!qword_101638D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101638D20);
  }
  return result;
}

uint64_t sub_10001CEB0(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_10001CEC8()
{
  unint64_t result = qword_10163B990;
  if (!qword_10163B990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B990);
  }
  return result;
}

unint64_t sub_10001CF1C()
{
  unint64_t result = qword_101638D48;
  if (!qword_101638D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101638D48);
  }
  return result;
}

uint64_t sub_10001CF70()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10001CFB8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10001D010(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001D074(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000588C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10001D0D8()
{
  unint64_t result = qword_101638D60;
  if (!qword_101638D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101638D60);
  }
  return result;
}

uint64_t *sub_10001D12C(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(v2, v3);
  sub_10001CFB8(v4, v5);
  sub_10001CFB8(v6, v7);
  return a1;
}

uint64_t sub_10001D1A4@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  *a1 = *(void *)(v1 + 56);
  return swift_bridgeObjectRetain();
}

uint64_t sub_10001D1F4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001D23C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *unint64_t v5 = v1;
  v5[1] = sub_10001D2E4;
  return sub_1000107D4(v2, v3, v4);
}

uint64_t sub_10001D2E4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10001D3D8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001D418()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10001D2E4;
  return sub_100011244(v2, v3);
}

uint64_t sub_10001D4B0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10001D4EC()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_101638DA8) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_10001D608(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000588C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

BOOL sub_10001D66C@<W0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void *)(sub_10000588C(&qword_101638DA8) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  BOOL result = sub_100011DC4(v1 + v4, *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
  *a1 = result;
  return result;
}

uint64_t sub_10001D704()
{
  return sub_1000A5800();
}

uint64_t sub_10001D70C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001D744()
{
  return sub_100016D30();
}

uint64_t sub_10001D74C(uint64_t a1)
{
  return sub_100129DDC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10001D75C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10001D828@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for UUID();

  return sub_100E5F1B0(a1);
}

uint64_t sub_10001D89C(uint64_t a1)
{
  return sub_100129D4C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10001D8A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001D910(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_10001D958(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10001D9BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001DA24(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10001DA84@<X0>(void *a1@<X8>)
{
  return sub_1000A57E0(v1, a1);
}

uint64_t sub_10001DAA0@<X0>(void *a1@<X8>)
{
  return sub_100E57930(a1);
}

uint64_t sub_10001DAA8(uint64_t a1)
{
  return sub_100129CBC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10001DAB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000588C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *initializeBufferWithCopyOfBuffer for DatabaseState(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MessagingDestination.DestinationType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DelegatedBeaconPayloadPublisher.PublishError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001DC78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t sub_10001DCA0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10001DCAC(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DelegatedBeaconPayloadPublisher.PublishError()
{
  return &type metadata for DelegatedBeaconPayloadPublisher.PublishError;
}

unint64_t sub_10001DCC8()
{
  unint64_t result = qword_101638DE0;
  if (!qword_101638DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101638DE0);
  }
  return result;
}

uint64_t sub_10001DD20()
{
  uint64_t v0 = sub_10000588C((uint64_t *)&unk_10163AC90);
  sub_10001E384(v0, qword_101638DF0);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_101638DF0);
  uint64_t v2 = type metadata accessor for Date();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t static Date.testSetNow(date:)(uint64_t a1)
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v5 == 1)
  {
    if (qword_101636818 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
    uint64_t v3 = sub_100010324(v2, (uint64_t)qword_101638DF0);
    swift_beginAccess();
    sub_10001E1FC(a1, v3);
    return swift_endAccess();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static Date.trustedNow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v2);
  unsigned int v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  v14[0] = 0x7365547265646E75;
  v14[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v13[0] == 1)
  {
    id v5 = [self sharedInstance];
    unsigned int v6 = [v5 isInternalBuild];

    if (v6)
    {
      if (qword_101636818 != -1) {
        swift_once();
      }
      uint64_t v7 = sub_100010324(v2, (uint64_t)qword_101638DF0);
      swift_beginAccess();
      sub_10001E2BC(v7, (uint64_t)v4);
      uint64_t v8 = type metadata accessor for Date();
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8) != 1) {
        return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v9 + 32))(a1, v4, v8);
      }
      sub_10001E324((uint64_t)v4);
    }
  }
  uint64_t My = type metadata accessor for Feature.FindMy();
  v14[3] = My;
  v14[4] = sub_10001E264();
  uint64_t v11 = sub_10001D958(v14);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v11, enum case for Feature.FindMy.trustedNowUsesReferenceClock(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v14);
  if ((My & 1) == 0) {
    return Date.init()();
  }
  sub_100F46E34();
  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t sub_10001E1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t sub_10001E264()
{
  unint64_t result = qword_101653E00;
  if (!qword_101653E00)
  {
    type metadata accessor for Feature.FindMy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101653E00);
  }
  return result;
}

uint64_t sub_10001E2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001E324(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10001E384(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

id sub_10001E3E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC12searchpartyd40UnwantedTrackingUserNotificationDelegate_name];
  *(void *)uint64_t v2 = 0xD000000000000028;
  *((void *)v2 + 1) = 0x8000000101347500;
  if (qword_101637110 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170ED70);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unsigned int v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned int v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "UnwantedTrackingUserNotificationDelegate: init", v6, 2u);
    swift_slowDealloc();
  }

  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for UnwantedTrackingUserNotificationDelegate();
  return [super init];
}

id sub_10001E530()
{
  uint64_t v1 = v0;
  if (qword_101637110 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170ED70);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "UnwantedTrackingUserNotificationDelegate: Deinit", v5, 2u);
    swift_slowDealloc();
  }

  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for UnwantedTrackingUserNotificationDelegate();
  return [super dealloc];
}

uint64_t type metadata accessor for UnwantedTrackingUserNotificationDelegate()
{
  return self;
}

void sub_10001E764()
{
  uint64_t v1 = v0;
  if (qword_101637110 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170ED70);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "UnwantedTrackingUserNotificationDelegate: setupUserNotifications", v5, 2u);
    swift_slowDealloc();
  }

  id v6 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 initWithBundleIdentifier:v7];

  [v8 setDelegate:v1];
  [v8 setWantsNotificationResponsesDelivered];
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  sub_1000A5940();
  id v9 = sub_100F16154();
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 BOOLForKey:v10];
  swift_release();

  uint64_t v11 = type metadata accessor for Transaction();
  __chkstk_darwin(v11);
  static Transaction.named<A>(_:with:)();
  id v12 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v12 initWithBundleIdentifier:v13];

  __chkstk_darwin(v15);
  static Transaction.named<A>(_:with:)();
}

void sub_10001EA6C(uint64_t a1, void *a2, uint64_t a3)
{
  v6[5] = a1;
  v6[4] = sub_10002033C;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_10001EB4C;
  v6[3] = &unk_1015A7238;
  os_log_type_t v5 = _Block_copy(v6);
  swift_retain();
  swift_release();
  [a2 requestAuthorizationWithOptions:a3 completionHandler:v5];
  _Block_release(v5);
}

void sub_10001EB4C(uint64_t a1, uint64_t a2, void *a3)
{
  os_log_type_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_10001EBC4(uint64_t a1, id a2)
{
  id v4 = [a2 notificationSettings];
  id v5 = [v4 authorizationStatus];

  if (v5)
  {
    if (qword_101637110 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170ED70);
    NSString v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "UnwantedTrackingUserNotificationDelegate: No need to request deliver quietly authorization for Find My. Authorization already determined.", v9, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    v11[4] = sub_100020318;
    v11[5] = a1;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_10001EB4C;
    v11[3] = &unk_1015A7210;
    NSString v10 = _Block_copy(v11);
    swift_retain();
    swift_release();
    [a2 requestAuthorizationWithOptions:66 completionHandler:v10];
    _Block_release(v10);
  }
}

void sub_10001ED8C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if (qword_101637110 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170ED70);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 67109378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 8) = 2080;
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_101638EB0);
    uint64_t v9 = String.init<A>(describing:)();
    sub_1008FA0F0(v9, v10, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a4, (uint8_t *)v8, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  Transaction.capture()();
}

uint64_t sub_10001EF90()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC12searchpartyd40UnwantedTrackingUserNotificationDelegate_name);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_10001EFD0()
{
  if (qword_101637110 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170ED70);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "UnwantedTrackingUserNotificationDelegate: startup", v3, 2u);
    swift_slowDealloc();
  }

  sub_10001E764();
}

void sub_10001F2A8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_101637110 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170ED70);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      id v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)id v4 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v5 = String.init<A>(describing:)();
      sub_1008FA0F0(v5, v6, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "UnwantedTrackingUserNotificationDelegate: Error opening url %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_10001F4BC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_10001F548(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637110 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170ED70);
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "UnwantedTrackingUserNotificationDelegate: OpenURL", v12, 2u);
    swift_slowDealloc();
  }

  sub_100020260(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100020198((uint64_t)v4);
    NSString v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "UnwantedTrackingUserNotificationDelegate: Error opening settings. Invalid URL", v15, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_10000588C((uint64_t *)&unk_101637F00);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101347500;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v17;
    *(void *)(inited + 72) = v5;
    uint64_t v18 = sub_10001D958((uint64_t *)(inited + 48));
    (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 16))(v18, v8, v5);
    *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 88) = v19;
    *(void *)(inited + 120) = &type metadata for Bool;
    *(unsigned char *)(inited + 96) = 1;
    *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 136) = v20;
    *(void *)(inited + 168) = &type metadata for Bool;
    *(unsigned char *)(inited + 144) = 1;
    unint64_t v21 = sub_10092CEEC(inited);
    id v22 = [self serviceWithDefaultShellEndpoint];
    if (v22)
    {
      uint64_t v23 = v22;
      NSString v24 = String._bridgeToObjectiveC()();
      sub_100653C34(v21);
      swift_bridgeObjectRelease();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v26 = [self optionsWithDictionary:isa];

      aBlock[4] = sub_10001F2A8;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10001F4BC;
      aBlock[3] = &unk_1015A71E8;
      uint64_t v27 = _Block_copy(aBlock);
      [v23 openApplication:v24 withOptions:v26 completion:v27];
      _Block_release(v27);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_10001FA2C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_101649E40);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  os_log_type_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  NSString v13 = (char *)&v22 - v12;
  if (qword_101637110 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170ED70);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v24 = a3;
    uint64_t v18 = v17;
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_1008FA0F0(a1, (unint64_t)a2, &v26);
    uint64_t v23 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_1008FA0F0(v24, a4, &v26);
    os_log_type_t v11 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "UnwantedTrackingUserNotificationDelegate: processUTNotification for beacon %s, action %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v24;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v26 = 0;
  unint64_t v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  uint64_t v26 = 0xD000000000000026;
  unint64_t v27 = 0x80000001013F1A40;
  v19._countAndFlagsBits = a1;
  v19._object = a2;
  String.append(_:)(v19);
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if (a3 == 0xD00000000000002ELL && a4 == 0x80000001013F1A70
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v26 = 0;
    unint64_t v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    uint64_t v26 = 0xD000000000000026;
    unint64_t v27 = 0x80000001013F1AA0;
    v20._countAndFlagsBits = a1;
    v20._object = a2;
    String.append(_:)(v20);
    URL.init(string:)();
    swift_bridgeObjectRelease();
    sub_100020198((uint64_t)v13);
    sub_1000201F8((uint64_t)v11, (uint64_t)v13);
  }
  sub_10001F548((uint64_t)v13);
  return sub_100020198((uint64_t)v13);
}

uint64_t sub_10001FDD8(void *a1, uint64_t a2)
{
  if (qword_101637110 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170ED70);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "UnwantedTrackingUserNotificationDelegate: didReceiveResponse", v7, 2u);
    swift_slowDealloc();
  }

  id v8 = [a1 notification];
  id v9 = [v8 request];

  id v10 = [v9 content];
  id v11 = [v10 categoryIdentifier];

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  if (v12 == 0xD000000000000024 && v14 == 0x80000001013F1A10)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    id v16 = [a1 notification];
    id v17 = [v16 request];

    id v18 = [v17 identifier];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;

    id v22 = [a1 actionIdentifier];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;

    sub_10001FA2C(v19, v21, v23, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v15) {
    goto LABEL_9;
  }
  id v27 = a1;
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 138412290;
    id v32 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v31 = v27;

    _os_log_impl((void *)&_mh_execute_header, v28, v29, "UnwantedTrackingUserNotificationDelegate: Unhandled notification response %@", v30, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_100020198(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101649E40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000201F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101649E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100020260(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101649E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000202C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000202D8()
{
  return swift_release();
}

void sub_1000202E0(uint64_t a1)
{
  sub_10001EA6C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

void sub_1000202FC(uint64_t a1)
{
  sub_10001EBC4(a1, *(id *)(v1 + 16));
}

void sub_100020318(uint64_t a1, uint64_t a2)
{
  sub_10001ED8C(a1, a2, v2, "UnwantedTrackingUserNotificationDelegate: Request deliver quietly authorization for Find My completed. Granted?: %{BOOL}d. Error?: %s");
}

void sub_10002033C(uint64_t a1, uint64_t a2)
{
  sub_10001ED8C(a1, a2, v2, "UnwantedTrackingUserNotificationDelegate: Request UT Alerts authorization completed. Granted?: %{BOOL}d. Error?: %s");
}

uint64_t sub_100020370()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D690);
  sub_100010324(v0, (uint64_t)qword_10170D690);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000203F8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D6A8);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170D6A8);
  if (qword_101636820 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170D690);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000204C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a4;
  sub_10000588C(&qword_101639058);
  v4[16] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FinderStateInfo(0);
  v4[17] = v5;
  v4[18] = *(void *)(v5 - 8);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  sub_10000588C(&qword_101639060);
  v4[21] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_101639068);
  v4[22] = v6;
  v4[23] = *(void *)(v6 - 8);
  v4[24] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_101639070);
  v4[25] = v7;
  v4[26] = *(void *)(v7 - 8);
  v4[27] = swift_task_alloc();
  return _swift_task_switch(sub_1000206B0, 0, 0);
}

uint64_t sub_1000206B0()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639078 + dword_101639078);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100020800;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100020800(uint64_t a1)
{
  *(void *)(*(void *)v1 + 232) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100020900, 0, 0);
}

uint64_t sub_100020900()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[29])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[30] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100020AE4;
    uint64_t v3 = v0[24];
    return sub_100867118(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636828 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170D6A8);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing FinderStateObserver service.", v8, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100020AE4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100020BE0, 0, 0);
}

uint64_t sub_100020BE0()
{
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[22];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[31] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100020CBC;
  uint64_t v5 = v0[25];
  uint64_t v6 = v0[21];
  return AsyncStream.Iterator.next(isolation:)(v6, 0, 0, v5);
}

uint64_t sub_100020CBC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100020DB8, 0, 0);
}

uint64_t sub_100020DB8()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = sub_10000588C(&qword_101639080);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[26] + 8))(v0[27], v0[25]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  uint64_t v5 = v0[20];
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[18];
  uint64_t v8 = v0[16];
  swift_release();
  uint64_t v9 = v1 + *(int *)(v2 + 48);
  uint64_t v10 = sub_10000588C(&qword_101639088);
  sub_10002FD2C(v9 + *(int *)(v10 + 48), v5);
  sub_10001D608(v9, v8, &qword_101639058);
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6);
  uint64_t v12 = (unsigned __int8 *)v0[20];
  if (v11 == 1)
  {
    uint64_t v13 = v0[16];
    sub_10002FD90(v0[20]);
    sub_10001DAB4(v13, &qword_101639058);
LABEL_12:
    id v17 = (void *)swift_task_alloc();
    v0[31] = v17;
    *id v17 = v0;
    v17[1] = sub_100020CBC;
    uint64_t v18 = v0[25];
    uint64_t v19 = v0[21];
    return AsyncStream.Iterator.next(isolation:)(v19, 0, 0, v18);
  }
  uint64_t v14 = (unsigned __int8 *)v0[19];
  sub_10002FD2C(v0[16], (uint64_t)v14);
  if (*v14 == *v12)
  {
    uint64_t v16 = v0[20];
    sub_10002FD90(v0[19]);
    sub_10002FD90(v16);
    goto LABEL_12;
  }
  uint64_t v15 = v0[15];
  return _swift_task_switch(sub_100021060, v15, 0);
}

uint64_t sub_100021060()
{
  *(unsigned char *)(*(void *)(v0 + 120) + 176) = 1;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000210FC;
  return sub_1000214A4();
}

uint64_t sub_1000210FC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000211F8, 0, 0);
}

uint64_t sub_1000211F8()
{
  uint64_t v1 = v0[20];
  sub_10002FD90(v0[19]);
  sub_10002FD90(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[31] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100020CBC;
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[21];
  return AsyncStream.Iterator.next(isolation:)(v4, 0, 0, v3);
}

uint64_t sub_1000212B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v8, &qword_10164DBB0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10001DAB4((uint64_t)v8, &qword_10164DBB0);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    _OWORD v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t sub_1000214A4()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for XPCActivity.State();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_100021564, v0, 0);
}

uint64_t sub_100021564()
{
  uint64_t v1 = *(void *)(v0 + 48);
  if (*(unsigned char *)(v1 + 176) == 1)
  {
    *(unsigned char *)(v1 + 176) = 0;
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 168);
    *(void *)(v0 + 80) = v2;
    char v3 = *(unsigned char *)(v2 + 32);
    *(unsigned char *)(v0 + 120) = v3;
    uint64_t v4 = -1;
    uint64_t v5 = -1 << v3;
    if (-(-1 << v3) < 64) {
      uint64_t v4 = ~(-1 << -(char)v5);
    }
    unint64_t v6 = v4 & *(void *)(v2 + 64);
    uint64_t v7 = (void *)swift_bridgeObjectRetain();
    if (v6)
    {
      uint64_t v8 = 0;
      unint64_t v9 = __clz(__rbit64(v6));
      uint64_t v10 = (v6 - 1) & v6;
LABEL_6:
      *(void *)(v0 + 88) = v8;
      *(void *)(v0 + 96) = v10;
      uint64_t v11 = *(unsigned __int8 *)(v7[6] + v9);
      *(void *)(v0 + 104) = *(void *)(v7[7] + 8 * v9);
      uint64_t v12 = qword_101636828;
      swift_retain();
      if (v12 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100010324(v13, (uint64_t)qword_10170D6A8);
      swift_retain_n();
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = swift_slowAlloc();
        *(void *)(v0 + 40) = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136446210;
        unint64_t v17 = 0xE800000000000000;
        uint64_t v18 = 0x7265776F50776F6CLL;
        switch(v11)
        {
          case 1:
            unint64_t v17 = 0xEB00000000726577;
            uint64_t v18 = 0x6F506D756964656DLL;
            break;
          case 2:
            unint64_t v17 = 0xE900000000000072;
            uint64_t v18 = 0x65776F5068676968;
            break;
          case 3:
            uint64_t v27 = 0x694669576ELL;
            goto LABEL_30;
          case 4:
            uint64_t v27 = 0x6C6C65436ELL;
LABEL_30:
            unint64_t v17 = v27 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
            uint64_t v18 = 0x4F7265776F506E6FLL;
            break;
          case 5:
            unint64_t v17 = 0xEF694669576E4F79;
            goto LABEL_33;
          case 6:
            unint64_t v17 = 0xEF6C6C65436E4F79;
LABEL_33:
            uint64_t v18 = 0x7265747461426E6FLL;
            break;
          case 7:
            unint64_t v17 = 0xEF79627261654E6ELL;
            uint64_t v18 = 0x6F696E61706D6F63;
            break;
          case 8:
            unint64_t v17 = 0xEF646E756F466E65;
            uint64_t v18 = 0x6857796669746F6ELL;
            break;
          default:
            break;
        }
        *(void *)(v16 + 4) = sub_1008FA0F0(v18, v17, (uint64_t *)(v0 + 40));
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "FindMyNetworkPublishActivityService updateCriteria %{public}s.", (uint8_t *)v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      uint64_t v33 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                            + async function pointer to dispatch thunk of XPCActivity.updateCriteria());
      uint64_t v28 = (void *)swift_task_alloc();
      *(void *)(v0 + 112) = v28;
      *uint64_t v28 = v0;
      v28[1] = sub_100021AF8;
      uint64_t v29 = *(void *)(v0 + 72);
      return v33(v29);
    }
    unint64_t v25 = 63 - v5;
    if ((unint64_t)(63 - v5) > 0x7F)
    {
      unint64_t v26 = v7[9];
      if (v26)
      {
        uint64_t v8 = 1;
LABEL_23:
        uint64_t v10 = (v26 - 1) & v26;
        unint64_t v9 = __clz(__rbit64(v26)) + (v8 << 6);
        goto LABEL_6;
      }
      if (v25 >= 0xC0)
      {
        unint64_t v26 = v7[10];
        if (v26)
        {
          uint64_t v8 = 2;
          goto LABEL_23;
        }
        if (v25 >= 0x100)
        {
          unint64_t v26 = v7[11];
          if (v26)
          {
            uint64_t v8 = 3;
            goto LABEL_23;
          }
          if (v25 > 0x13F)
          {
            unint64_t v26 = v7[12];
            if (v26)
            {
              uint64_t v8 = 4;
              goto LABEL_23;
            }
            uint64_t v30 = 0;
            uint64_t v31 = v25 >> 6;
            if (v31 <= 5) {
              uint64_t v31 = 5;
            }
            uint64_t v32 = v31 - 5;
            while (v32 != v30)
            {
              unint64_t v26 = v7[v30++ + 13];
              if (v26)
              {
                uint64_t v8 = v30 + 4;
                goto LABEL_23;
              }
            }
          }
        }
      }
    }
    swift_release();
  }
  else
  {
    if (qword_101636828 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170D6A8);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "FindMyNetworkPublishActivityService maintaining existing criteria.", v22, 2u);
      swift_slowDealloc();
    }
  }
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_100021AF8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  uint64_t v2 = *(void *)(*(void *)v0 + 64);
  uint64_t v3 = *(void *)(*(void *)v0 + 56);
  uint64_t v4 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100021C64, v4, 0);
}

uint64_t sub_100021C64()
{
  swift_release();
  int64_t v1 = *(void *)(v0 + 88);
  unint64_t v2 = *(void *)(v0 + 96);
  if (v2)
  {
    uint64_t v3 = (v2 - 1) & v2;
    unint64_t v4 = __clz(__rbit64(v2)) | (v1 << 6);
    uint64_t v5 = *(void *)(v0 + 80);
LABEL_3:
    *(void *)(v0 + 88) = v1;
    *(void *)(v0 + 96) = v3;
    uint64_t v6 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v4);
    *(void *)(v0 + 104) = *(void *)(*(void *)(v5 + 56) + 8 * v4);
    uint64_t v7 = qword_101636828;
    swift_retain();
    if (v7 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170D6A8);
    swift_retain_n();
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      *(void *)(v0 + 40) = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      unint64_t v12 = 0xE800000000000000;
      uint64_t v13 = 0x7265776F50776F6CLL;
      switch(v6)
      {
        case 1:
          unint64_t v12 = 0xEB00000000726577;
          uint64_t v13 = 0x6F506D756964656DLL;
          break;
        case 2:
          unint64_t v12 = 0xE900000000000072;
          uint64_t v13 = 0x65776F5068676968;
          break;
        case 3:
          uint64_t v19 = 0x694669576ELL;
          goto LABEL_23;
        case 4:
          uint64_t v19 = 0x6C6C65436ELL;
LABEL_23:
          unint64_t v12 = v19 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
          uint64_t v13 = 0x4F7265776F506E6FLL;
          break;
        case 5:
          unint64_t v12 = 0xEF694669576E4F79;
          goto LABEL_26;
        case 6:
          unint64_t v12 = 0xEF6C6C65436E4F79;
LABEL_26:
          uint64_t v13 = 0x7265747461426E6FLL;
          break;
        case 7:
          unint64_t v12 = 0xEF79627261654E6ELL;
          uint64_t v13 = 0x6F696E61706D6F63;
          break;
        case 8:
          unint64_t v12 = 0xEF646E756F466E65;
          uint64_t v13 = 0x6857796669746F6ELL;
          break;
        default:
          break;
      }
      *(void *)(v11 + 4) = sub_1008FA0F0(v13, v12, (uint64_t *)(v0 + 40));
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "FindMyNetworkPublishActivityService updateCriteria %{public}s.", (uint8_t *)v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    unint64_t v24 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                          + async function pointer to dispatch thunk of XPCActivity.updateCriteria());
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100021AF8;
    uint64_t v21 = *(void *)(v0 + 72);
    return v24(v21);
  }
  int64_t v14 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
    goto LABEL_40;
  }
  int64_t v15 = (unint64_t)((1 << *(unsigned char *)(v0 + 120)) + 63) >> 6;
  uint64_t v5 = *(void *)(v0 + 80);
  if (v14 < v15)
  {
    uint64_t v16 = v5 + 64;
    unint64_t v17 = *(void *)(v5 + 64 + 8 * v14);
    ++v1;
    if (v17)
    {
LABEL_12:
      uint64_t v3 = (v17 - 1) & v17;
      unint64_t v4 = __clz(__rbit64(v17)) + (v1 << 6);
      goto LABEL_3;
    }
    int64_t v1 = v14 + 1;
    if (v14 + 1 < v15)
    {
      unint64_t v17 = *(void *)(v16 + 8 * v1);
      if (v17) {
        goto LABEL_12;
      }
      int64_t v1 = v14 + 2;
      if (v14 + 2 < v15)
      {
        unint64_t v17 = *(void *)(v16 + 8 * v1);
        if (v17) {
          goto LABEL_12;
        }
        int64_t v18 = v14 + 3;
        if (v18 < v15)
        {
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (v17)
          {
            int64_t v1 = v18;
            goto LABEL_12;
          }
          while (1)
          {
            int64_t v1 = v18 + 1;
            if (__OFADD__(v18, 1)) {
              break;
            }
            if (v1 >= v15) {
              goto LABEL_36;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v1);
            ++v18;
            if (v17) {
              goto LABEL_12;
            }
          }
LABEL_40:
          __break(1u);
          JUMPOUT(0x1000220D4);
        }
      }
    }
  }
LABEL_36:
  swift_release();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_1000220F8()
{
  v1[6] = v0;
  v1[7] = *v0;
  type metadata accessor for DispatchQoS();
  v1[8] = swift_task_alloc();
  return _swift_task_switch(sub_1000221B0, v0, 0);
}

uint64_t sub_1000221B0()
{
  if (qword_101636828 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D6A8);
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "FindMyNetworkPublishActivityService registerPublishActivities.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 48);

  *(unsigned char *)(v5 + 176) = 0;
  uint64_t v6 = sub_100B64CB0();
  *(void *)(v0 + 72) = v6;
  char v7 = *(unsigned char *)(v6 + 32);
  *(unsigned char *)(v0 + 120) = v7;
  uint64_t v8 = -1;
  uint64_t v9 = -1 << v7;
  if (-v9 < 64) {
    uint64_t v8 = ~(-1 << -(char)v9);
  }
  unint64_t v10 = v8 & *(void *)(v6 + 56);
  if (v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = __clz(__rbit64(v10));
    uint64_t v13 = (v10 - 1) & v10;
LABEL_9:
    *(void *)(v0 + 80) = v11;
    *(void *)(v0 + 88) = v13;
    uint64_t v14 = *(unsigned __int8 *)(*(void *)(v6 + 48) + v12);
    *(unsigned char *)(v0 + 121) = v14;
    type metadata accessor for FindMyNetworkPublishDateProvider();
    uint64_t v15 = swift_allocObject();
    *(void *)(v0 + 96) = v15;
    swift_defaultActor_initialize();
    unint64_t v16 = 0xD000000000000044;
    unint64_t v17 = 0x80000001013F20F0;
    switch(v14)
    {
      case 1:
        unint64_t v16 = 0xD000000000000047;
        int64_t v18 = "com.apple.icloud.searchpartyd.activity.BeaconPayloadPublish-MediumPower";
        goto LABEL_20;
      case 2:
        unint64_t v16 = 0xD000000000000045;
        int64_t v18 = "com.apple.icloud.searchpartyd.activity.BeaconPayloadPublish-HighPower";
        goto LABEL_20;
      case 3:
        unint64_t v16 = 0xD000000000000049;
        int64_t v18 = "com.apple.icloud.searchpartyd.activity.BeaconPayLoadPublish-onPowerOnWiFi";
        goto LABEL_20;
      case 4:
        unint64_t v16 = 0xD000000000000049;
        int64_t v18 = "com.apple.icloud.searchpartyd.activity.BeaconPayLoadPublish-onPowerOnCell";
        goto LABEL_20;
      case 5:
        unint64_t v16 = 0xD00000000000004BLL;
        int64_t v18 = "com.apple.icloud.searchpartyd.activity.BeaconPayLoadPublish-onBatteryOnWiFi";
        goto LABEL_20;
      case 6:
        unint64_t v16 = 0xD00000000000004BLL;
        int64_t v18 = "com.apple.icloud.searchpartyd.activity.BeaconPayLoadPublish-onBatteryOnCell";
LABEL_20:
        unint64_t v17 = (unint64_t)(v18 - 32) | 0x8000000000000000;
        break;
      case 7:
        uint64_t v21 = "com.apple.icloud.searchpartyd.activity.CompanionNearby";
        goto LABEL_23;
      case 8:
        uint64_t v21 = "com.apple.icloud.searchpartyd.activity.NotifyWhenFound";
LABEL_23:
        unint64_t v17 = (unint64_t)(v21 - 32) | 0x8000000000000000;
        unint64_t v16 = 0xD000000000000036;
        break;
      default:
        break;
    }
    uint64_t v22 = *(void *)(v0 + 56);
    uint64_t v23 = *(void *)(v0 + 48);
    type metadata accessor for XPCActivity();
    static DispatchQoS.background.getter();
    uint64_t v24 = swift_allocObject();
    *(unsigned char *)(v24 + 16) = v14;
    *(void *)(v24 + 24) = v15;
    *(void *)(v24 + 32) = &off_1015AFBD0;
    *(void *)(v24 + 40) = v22;
    uint64_t v25 = swift_allocObject();
    *(unsigned char *)(v25 + 16) = v14;
    *(void *)(v25 + 24) = v23;
    *(void *)(v25 + 32) = v22;
    swift_retain();
    swift_retain();
    unint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v26;
    void *v26 = v0;
    v26[1] = sub_100022644;
    uint64_t v27 = *(void *)(v0 + 64);
    return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(v16, v17, v27, &unk_101639480, v24, &unk_101639490, v25);
  }
  unint64_t v19 = 63 - v9;
  if (v19 > 0x7F)
  {
    unint64_t v20 = *(void *)(v6 + 64);
    if (v20)
    {
      uint64_t v11 = 1;
LABEL_14:
      uint64_t v13 = (v20 - 1) & v20;
      unint64_t v12 = __clz(__rbit64(v20)) + (v11 << 6);
      goto LABEL_9;
    }
    if (v19 >= 0xC0)
    {
      unint64_t v20 = *(void *)(v6 + 72);
      if (v20)
      {
        uint64_t v11 = 2;
        goto LABEL_14;
      }
      if (v19 >= 0x100)
      {
        unint64_t v20 = *(void *)(v6 + 80);
        if (v20)
        {
          uint64_t v11 = 3;
          goto LABEL_14;
        }
        if (v19 >= 0x140)
        {
          unint64_t v20 = *(void *)(v6 + 88);
          if (v20)
          {
            uint64_t v11 = 4;
            goto LABEL_14;
          }
          uint64_t v28 = 0;
          uint64_t v29 = v19 >> 6;
          if (v29 <= 5) {
            uint64_t v29 = 5;
          }
          uint64_t v30 = v29 - 5;
          while (v30 != v28)
          {
            unint64_t v20 = *(void *)(v6 + 96 + 8 * v28++);
            if (v20)
            {
              uint64_t v11 = v28 + 4;
              goto LABEL_14;
            }
          }
        }
      }
    }
  }
  swift_release();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_100022644(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 112) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10002275C, v2, 0);
}

uint64_t sub_10002275C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  unsigned __int8 v2 = *(unsigned char *)(v0 + 121);
  swift_release();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *(void *)(v1 + 168);
  *(void *)(v0 + 40) = v4;
  *(void *)(v1 + 168) = 0x8000000000000000;
  unint64_t v6 = sub_1007241FC(v2);
  uint64_t v7 = *(void *)(v4 + 16);
  BOOL v8 = (v5 & 1) == 0;
  uint64_t v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
    goto LABEL_48;
  }
  char v10 = v5;
  if (*(void *)(v4 + 24) >= v9)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_100E7E3C4();
    }
  }
  else
  {
    unsigned __int8 v11 = *(unsigned char *)(v0 + 121);
    sub_100E651F8(v9, isUniquelyReferenced_nonNull_native);
    unint64_t v12 = sub_1007241FC(v11);
    if ((v10 & 1) != (v13 & 1))
    {
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    }
    unint64_t v6 = v12;
  }
  uint64_t v15 = *(void **)(v0 + 40);
  uint64_t v16 = *(void *)(v0 + 112);
  if (v10)
  {
    uint64_t v17 = v15[7];
    swift_release();
    *(void *)(v17 + 8 * v6) = v16;
    goto LABEL_14;
  }
  char v18 = *(unsigned char *)(v0 + 121);
  v15[(v6 >> 6) + 8] |= 1 << v6;
  *(unsigned char *)(v15[6] + v6) = v18;
  *(void *)(v15[7] + 8 * v6) = v16;
  uint64_t v19 = v15[2];
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (v20)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v15[2] = v21;
LABEL_14:
  *(void *)(*(void *)(v0 + 48) + 168) = v15;
  swift_bridgeObjectRelease();
  swift_endAccess();
  int64_t v22 = *(void *)(v0 + 80);
  unint64_t v23 = *(void *)(v0 + 88);
  if (v23)
  {
    unint64_t v24 = __clz(__rbit64(v23));
    uint64_t v25 = (v23 - 1) & v23;
    unint64_t v26 = v24 | (v22 << 6);
    uint64_t v27 = *(void *)(v0 + 72);
LABEL_16:
    *(void *)(v0 + 80) = v22;
    *(void *)(v0 + 88) = v25;
    uint64_t v28 = *(unsigned __int8 *)(*(void *)(v27 + 48) + v26);
    *(unsigned char *)(v0 + 121) = v28;
    type metadata accessor for FindMyNetworkPublishDateProvider();
    uint64_t v29 = swift_allocObject();
    *(void *)(v0 + 96) = v29;
    swift_defaultActor_initialize();
    unint64_t v30 = 0xD000000000000044;
    unint64_t v31 = 0x80000001013F20F0;
    switch(v28)
    {
      case 1:
        unint64_t v30 = 0xD000000000000047;
        uint64_t v32 = "com.apple.icloud.searchpartyd.activity.BeaconPayloadPublish-MediumPower";
        goto LABEL_27;
      case 2:
        unint64_t v30 = 0xD000000000000045;
        uint64_t v32 = "com.apple.icloud.searchpartyd.activity.BeaconPayloadPublish-HighPower";
        goto LABEL_27;
      case 3:
        unint64_t v30 = 0xD000000000000049;
        uint64_t v32 = "com.apple.icloud.searchpartyd.activity.BeaconPayLoadPublish-onPowerOnWiFi";
        goto LABEL_27;
      case 4:
        unint64_t v30 = 0xD000000000000049;
        uint64_t v32 = "com.apple.icloud.searchpartyd.activity.BeaconPayLoadPublish-onPowerOnCell";
        goto LABEL_27;
      case 5:
        unint64_t v30 = 0xD00000000000004BLL;
        uint64_t v32 = "com.apple.icloud.searchpartyd.activity.BeaconPayLoadPublish-onBatteryOnWiFi";
        goto LABEL_27;
      case 6:
        unint64_t v30 = 0xD00000000000004BLL;
        uint64_t v32 = "com.apple.icloud.searchpartyd.activity.BeaconPayLoadPublish-onBatteryOnCell";
LABEL_27:
        unint64_t v31 = (unint64_t)(v32 - 32) | 0x8000000000000000;
        break;
      case 7:
        uint64_t v37 = "com.apple.icloud.searchpartyd.activity.CompanionNearby";
        goto LABEL_30;
      case 8:
        uint64_t v37 = "com.apple.icloud.searchpartyd.activity.NotifyWhenFound";
LABEL_30:
        unint64_t v31 = (unint64_t)(v37 - 32) | 0x8000000000000000;
        unint64_t v30 = 0xD000000000000036;
        break;
      default:
        break;
    }
    uint64_t v38 = *(void *)(v0 + 56);
    uint64_t v39 = *(void *)(v0 + 48);
    type metadata accessor for XPCActivity();
    static DispatchQoS.background.getter();
    uint64_t v40 = swift_allocObject();
    *(unsigned char *)(v40 + 16) = v28;
    *(void *)(v40 + 24) = v29;
    *(void *)(v40 + 32) = &off_1015AFBD0;
    *(void *)(v40 + 40) = v38;
    uint64_t v41 = swift_allocObject();
    *(unsigned char *)(v41 + 16) = v28;
    *(void *)(v41 + 24) = v39;
    *(void *)(v41 + 32) = v38;
    swift_retain();
    swift_retain();
    uint64_t v42 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_100022644;
    uint64_t v43 = *(void *)(v0 + 64);
    return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(v30, v31, v43, &unk_101639480, v40, &unk_101639490, v41);
  }
  int64_t v33 = v22 + 1;
  if (__OFADD__(v22, 1)) {
    goto LABEL_49;
  }
  int64_t v34 = (unint64_t)((1 << *(unsigned char *)(v0 + 120)) + 63) >> 6;
  uint64_t v27 = *(void *)(v0 + 72);
  if (v33 < v34)
  {
    uint64_t v35 = v27 + 56;
    unint64_t v36 = *(void *)(v27 + 56 + 8 * v33);
    ++v22;
    if (v36)
    {
LABEL_21:
      uint64_t v25 = (v36 - 1) & v36;
      unint64_t v26 = __clz(__rbit64(v36)) + (v22 << 6);
      goto LABEL_16;
    }
    int64_t v22 = v33 + 1;
    if (v33 + 1 < v34)
    {
      unint64_t v36 = *(void *)(v35 + 8 * v22);
      if (v36) {
        goto LABEL_21;
      }
      int64_t v22 = v33 + 2;
      if (v33 + 2 < v34)
      {
        unint64_t v36 = *(void *)(v35 + 8 * v22);
        if (v36) {
          goto LABEL_21;
        }
        int64_t v44 = v33 + 3;
        if (v44 < v34)
        {
          unint64_t v36 = *(void *)(v35 + 8 * v44);
          if (v36)
          {
            int64_t v22 = v44;
            goto LABEL_21;
          }
          while (1)
          {
            int64_t v22 = v44 + 1;
            if (__OFADD__(v44, 1)) {
              break;
            }
            if (v22 >= v34) {
              goto LABEL_44;
            }
            unint64_t v36 = *(void *)(v35 + 8 * v22);
            ++v44;
            if (v36) {
              goto LABEL_21;
            }
          }
LABEL_50:
          __break(1u);
          JUMPOUT(0x100022C60);
        }
      }
    }
  }
LABEL_44:
  swift_release();
  swift_task_dealloc();
  uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
  return v45();
}

uint64_t sub_100022C84(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *unsigned __int8 v11 = v5;
  v11[1] = sub_100033F68;
  return sub_100022D50(a1, a3, a2, a4, a5);
}

uint64_t sub_100022D50(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 168) = a4;
  *(void *)(v5 + 176) = a5;
  *(unsigned char *)(v5 + 296) = a2;
  *(void *)(v5 + 160) = a1;
  type metadata accessor for XPCActivity.Criteria.Options();
  *(void *)(v5 + 184) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for XPCActivity.Priority();
  *(void *)(v5 + 192) = v6;
  *(void *)(v5 + 200) = *(void *)(v6 - 8);
  *(void *)(v5 + 208) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for XPCActivity.Criteria();
  *(void *)(v5 + 216) = v7;
  *(void *)(v5 + 224) = *(void *)(v7 - 8);
  *(void *)(v5 + 232) = swift_task_alloc();
  *(void *)(v5 + 240) = sub_10000588C(&qword_101639058);
  *(void *)(v5 + 248) = swift_task_alloc();
  return _swift_task_switch(sub_100022ED4, 0, 0);
}

uint64_t sub_100022ED4()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    os_log_type_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639078 + dword_101639078);
    unsigned __int8 v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v2;
    *unsigned __int8 v2 = v0;
    v2[1] = sub_100023010;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100023010(uint64_t a1)
{
  *(void *)(*(void *)v1 + 264) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100023110, 0, 0);
}

uint64_t sub_100023110()
{
  uint64_t v13 = v0;
  uint64_t v1 = *(void *)(v0 + 264);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 264);
    swift_retain();
    return _swift_task_switch(sub_100023388, v2, 0);
  }
  else
  {
    if (qword_101636828 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170D6A8);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      char v6 = *(unsigned char *)(v0 + 296);
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      unint64_t v8 = sub_100B64524(v6);
      *(void *)(v0 + 120) = sub_1008FA0F0(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "                    FindMyNetworkPublishActivityService has finder disabled.                     Removing publish criteria for policy %{public}s.", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_release();
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 224) + 56))(*(void *)(v0 + 160), 1, 1, *(void *)(v0 + 216));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

uint64_t sub_100023388()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = sub_100033DDC((unint64_t *)&qword_1016394B0, 255, (void (*)(uint64_t))type metadata accessor for FinderStateObserver);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[34] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10002349C;
  uint64_t v4 = v0[33];
  uint64_t v6 = v0[30];
  uint64_t v5 = v0[31];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, v4, v2, 0x6E4965746174735FLL, 0xEC00000029286F66, sub_100033DD4, v1, v6);
}

uint64_t sub_10002349C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1000235B4, 0, 0);
}

uint64_t sub_1000235B4()
{
  uint64_t v16 = v0;
  uint64_t v1 = *(unsigned __int8 **)(v0 + 248);
  uint64_t v2 = type metadata accessor for FinderStateInfo(0);
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4((uint64_t)v1, &qword_101639058);
LABEL_9:
    if (qword_101636828 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170D6A8);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      char v9 = *(unsigned char *)(v0 + 296);
      char v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)char v10 = 136446210;
      unint64_t v11 = sub_100B64524(v9);
      *(void *)(v0 + 120) = sub_1008FA0F0(v11, v12, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "                    FindMyNetworkPublishActivityService has finder disabled.                     Removing publish criteria for policy %{public}s.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_release();
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 224) + 56))(*(void *)(v0 + 160), 1, 1, *(void *)(v0 + 216));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  int v3 = *v1;
  sub_10002FD90((uint64_t)v1);
  if (v3 != 1) {
    goto LABEL_9;
  }
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_10170E390;
  *(void *)(v0 + 280) = qword_10170E390;
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100023920;
  return unsafeBlocking<A>(_:)(v0 + 128, sub_10001D704, v4, &type metadata for Configuration);
}

uint64_t sub_100023920()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100023A38, 0, 0);
}

uint64_t sub_100023A38()
{
  uint64_t v20 = v2;
  sub_1010AAF9C(*(void *)(v2 + 128));
  double v4 = v3;
  swift_bridgeObjectRelease();
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v4 < 9.22337204e18)
  {
    uint64_t v6 = *(void *)(v2 + 200);
    uint64_t v5 = *(void *)(v2 + 208);
    uint64_t v7 = *(void *)(v2 + 192);
    uint64_t v0 = (uint64_t)v4;
    char v8 = *(unsigned char *)(v2 + 296);
    uint64_t v1 = sub_100B6461C(*(void *)(v2 + 168), *(void *)(v2 + 176), v8);
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for XPCActivity.Priority.maintenance(_:), v7);
    sub_100025B90(v8);
    XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)();
    if (qword_101636828 == -1) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  swift_once();
LABEL_5:
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170D6A8);
  char v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = *(unsigned __int8 *)(v2 + 296);
    uint64_t v13 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446722;
    unint64_t v14 = 0xE800000000000000;
    uint64_t v15 = 0x7265776F50776F6CLL;
    switch(v12)
    {
      case 1:
        unint64_t v14 = 0xEB00000000726577;
        uint64_t v15 = 0x6F506D756964656DLL;
        break;
      case 2:
        unint64_t v14 = 0xE900000000000072;
        uint64_t v15 = 0x65776F5068676968;
        break;
      case 3:
        uint64_t v16 = 0x694669576ELL;
        goto LABEL_12;
      case 4:
        uint64_t v16 = 0x6C6C65436ELL;
LABEL_12:
        unint64_t v14 = v16 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
        uint64_t v15 = 0x4F7265776F506E6FLL;
        break;
      case 5:
        unint64_t v14 = 0xEF694669576E4F79;
        goto LABEL_15;
      case 6:
        unint64_t v14 = 0xEF6C6C65436E4F79;
LABEL_15:
        uint64_t v15 = 0x7265747461426E6FLL;
        break;
      case 7:
        unint64_t v14 = 0xEF79627261654E6ELL;
        uint64_t v15 = 0x6F696E61706D6F63;
        break;
      case 8:
        unint64_t v14 = 0xEF646E756F466E65;
        uint64_t v15 = 0x6857796669746F6ELL;
        break;
      default:
        break;
    }
    *(void *)(v2 + 136) = sub_1008FA0F0(v15, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2048;
    *(void *)(v2 + 144) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2048;
    *(void *)(v2 + 152) = v0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Renewed criteria for policy: %{public}s.\ndelay: %lld, gracePeriod: %lld.", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_release();
  (*(void (**)(void, void, void))(*(void *)(v2 + 224) + 32))(*(void *)(v2 + 160), *(void *)(v2 + 232), *(void *)(v2 + 216));
  (*(void (**)(void, void, uint64_t, void))(*(void *)(v2 + 224) + 56))(*(void *)(v2 + 160), 0, 1, *(void *)(v2 + 216));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v2 + 8);
  return v17();
}

uint64_t sub_100023ED0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 48) = a4;
  *(unsigned char *)(v4 + 96) = a3;
  *(void *)(v4 + 32) = a1;
  uint64_t v6 = type metadata accessor for XPCActivity.State();
  *(void *)(v4 + 56) = v6;
  *(void *)(v4 + 64) = *(void *)(v6 - 8);
  *(void *)(v4 + 72) = swift_task_alloc();
  *(void *)(v4 + 80) = swift_task_alloc();
  return _swift_task_switch(sub_100023FAC, a4, 0);
}

uint64_t sub_100023FAC()
{
  uint64_t v37 = v0;
  if (qword_101636828 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D6A8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v1, v4, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v12 = *(void *)(v0 + 56);
  uint64_t v11 = *(void *)(v0 + 64);
  if (v9)
  {
    char v13 = *(unsigned char *)(v0 + 96);
    os_log_type_t type = v8;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446466;
    unint64_t v15 = sub_100B64524(v13);
    *(void *)(v0 + 16) = sub_1008FA0F0(v15, v16, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    sub_100033DDC(&qword_1016394A0, 255, (void (*)(uint64_t))&type metadata accessor for XPCActivity.State);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 24) = sub_1008FA0F0(v17, v18, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v19(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "Publish activity %{public}s, state: %s.", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v19(*(void *)(v0 + 80), *(void *)(v0 + 56));
  }

  uint64_t v21 = *(void *)(v0 + 64);
  uint64_t v20 = *(void *)(v0 + 72);
  uint64_t v22 = *(void *)(v0 + 56);
  v6(v20, *(void *)(v0 + 40), v22);
  int v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 88))(v20, v22);
  if (v23 != enum case for XPCActivity.State.checkIn(_:) && v23 != enum case for XPCActivity.State.wait(_:))
  {
    if (v23 == enum case for XPCActivity.State.run(_:))
    {
      uint64_t v27 = swift_task_alloc();
      *(void *)(v0 + 88) = v27;
      *(void *)uint64_t v27 = v0;
      *(void *)(v27 + 8) = sub_100024538;
      uint64_t v28 = *(void *)(v0 + 48);
      char v29 = *(unsigned char *)(v0 + 96);
      *(void *)(v27 + 144) = v28;
      *(unsigned char *)(v27 + 232) = v29;
      unint64_t v30 = sub_100024730;
      uint64_t v31 = 0;
LABEL_18:
      return _swift_task_switch(v30, v28, v31);
    }
    if (v23 == enum case for XPCActivity.State.defer(_:))
    {
      type metadata accessor for XPCActivity();
      sub_100033DDC(&qword_101639498, 255, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
      uint64_t v32 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v34 = v33;
      unint64_t v30 = sub_100024464;
      uint64_t v28 = v32;
      uint64_t v31 = v34;
      goto LABEL_18;
    }
    if (v23 != enum case for XPCActivity.State.continue(_:) && v23 != enum case for XPCActivity.State.done(_:))
    {
      if (v23 == enum case for XPCActivity.State.invalidated(_:)) {
        *(unsigned char *)(*(void *)(v0 + 48) + 176) = 1;
      }
      else {
        v19(*(void *)(v0 + 72), *(void *)(v0 + 56));
      }
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t sub_100024464()
{
  uint64_t v1 = *(void *)(v0 + 48);
  dispatch thunk of XPCActivity.defer()();
  return _swift_task_switch(sub_1000244D0, v1, 0);
}

uint64_t sub_1000244D0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100024538()
{
  swift_task_dealloc();
  type metadata accessor for XPCActivity();
  sub_100033DDC(&qword_101639498, 255, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000246A0, v1, v0);
}

uint64_t sub_1000246A0()
{
  uint64_t v1 = *(void *)(v0 + 48);
  dispatch thunk of XPCActivity.done()();
  return _swift_task_switch(sub_100033F64, v1, 0);
}

uint64_t sub_10002470C(char a1)
{
  *(void *)(v2 + 144) = v1;
  *(unsigned char *)(v2 + 232) = a1;
  return _swift_task_switch(sub_100024730, v1, 0);
}

uint64_t sub_100024730()
{
  uint64_t v16 = v0;
  if (qword_101636828 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 152) = sub_100010324(v1, (uint64_t)qword_10170D6A8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(unsigned __int8 *)(v0 + 232);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    unint64_t v6 = 0xE800000000000000;
    uint64_t v7 = 0x7265776F50776F6CLL;
    switch(v4)
    {
      case 1:
        unint64_t v6 = 0xEB00000000726577;
        uint64_t v7 = 0x6F506D756964656DLL;
        break;
      case 2:
        unint64_t v6 = 0xE900000000000072;
        uint64_t v7 = 0x65776F5068676968;
        break;
      case 3:
        uint64_t v8 = 0x694669576ELL;
        goto LABEL_9;
      case 4:
        uint64_t v8 = 0x6C6C65436ELL;
LABEL_9:
        unint64_t v6 = v8 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
        uint64_t v7 = 0x4F7265776F506E6FLL;
        break;
      case 5:
        unint64_t v6 = 0xEF694669576E4F79;
        goto LABEL_12;
      case 6:
        unint64_t v6 = 0xEF6C6C65436E4F79;
LABEL_12:
        uint64_t v7 = 0x7265747461426E6FLL;
        break;
      case 7:
        unint64_t v6 = 0xEF79627261654E6ELL;
        uint64_t v7 = 0x6F696E61706D6F63;
        break;
      case 8:
        unint64_t v6 = 0xEF646E756F466E65;
        uint64_t v7 = 0x6857796669746F6ELL;
        break;
      default:
        break;
    }
    *(void *)(v0 + 136) = sub_1008FA0F0(v7, v6, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "FindMyNetworkPublishActivityService runPublishActivity with policy: %{public}s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  type metadata accessor for FindMyNetworkPublishDateProvider();
  *(void *)(v0 + 160) = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v9 = sub_1011585AC((uint64_t)&off_10159F3E8);
  uint64_t v10 = sub_10092BE88();
  char v11 = sub_100DC6050(v10, v9) & 1;
  *(unsigned char *)(v0 + 233) = v11;
  swift_bridgeObjectRelease();
  uint64_t v14 = (uint64_t (*)(char))((char *)&dword_101639440 + dword_101639440);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100024AB0;
  return v14(v11);
}

uint64_t sub_100024AB0(char a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  swift_task_dealloc();
  if (a1)
  {
    uint64_t v5 = swift_task_alloc();
    *(void *)(v3 + 224) = v5;
    *(void *)uint64_t v5 = v4;
    *(void *)(v5 + 8) = sub_10002564C;
    char v6 = *(unsigned char *)(v3 + 233);
    uint64_t v7 = *(void *)(v3 + 144);
    *(void *)(v5 + 120) = v7;
    *(unsigned char *)(v5 + 176) = v6;
    return _swift_task_switch(sub_100026308, v7, 0);
  }
  else
  {
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v3 + 176) = v8;
    *uint64_t v8 = v4;
    v8[1] = sub_100024C80;
    char v9 = *(unsigned char *)(v3 + 232);
    return sub_100025DF4(v9);
  }
}

uint64_t sub_100024C80(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  *(void *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100024D98, v2, 0);
}

uint64_t sub_100024D98()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639120 + dword_101639120);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100024EE8;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100024EE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  *(void *)(*(void *)v1 + 200) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100025000, v2, 0);
}

uint64_t sub_100025000()
{
  uint64_t v17 = v0;
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 200))
  {
    uint64_t v2 = *(void *)(v0 + 184);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100025490;
    return sub_100923BB4(v2);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v5 = 0xD00000000000001DLL;
    v5[1] = 0x80000001013F1E50;
    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    char v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(unsigned __int8 *)(v0 + 232);
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446466;
      unint64_t v11 = 0xE800000000000000;
      uint64_t v12 = 0x7265776F50776F6CLL;
      switch(v8)
      {
        case 1:
          unint64_t v11 = 0xEB00000000726577;
          uint64_t v12 = 0x6F506D756964656DLL;
          break;
        case 2:
          unint64_t v11 = 0xE900000000000072;
          uint64_t v12 = 0x65776F5068676968;
          break;
        case 3:
          uint64_t v13 = 0x694669576ELL;
          goto LABEL_12;
        case 4:
          uint64_t v13 = 0x6C6C65436ELL;
LABEL_12:
          unint64_t v11 = v13 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
          uint64_t v12 = 0x4F7265776F506E6FLL;
          break;
        case 5:
          unint64_t v11 = 0xEF694669576E4F79;
          goto LABEL_15;
        case 6:
          unint64_t v11 = 0xEF6C6C65436E4F79;
LABEL_15:
          uint64_t v12 = 0x7265747461426E6FLL;
          break;
        case 7:
          unint64_t v11 = 0xEF79627261654E6ELL;
          uint64_t v12 = 0x6F696E61706D6F63;
          break;
        case 8:
          unint64_t v11 = 0xEF646E756F466E65;
          uint64_t v12 = 0x6857796669746F6ELL;
          break;
        default:
          break;
      }
      *(void *)(v0 + 120) = sub_1008FA0F0(v12, v11, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2112;
      swift_errorRetain();
      uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 128) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v10 = v14;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed publish activity %{public}s, error: %@.", (uint8_t *)v9, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      swift_release();
      swift_errorRelease();
    }
    else
    {
      swift_release();
      swift_release();
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    *(unsigned char *)(*(void *)(v0 + 144) + 176) = 1;
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_100025490(void *a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 216) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 144);
    char v6 = sub_1000257C8;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 144);
    swift_release();
    swift_release();

    char v6 = sub_1000255D4;
    uint64_t v5 = v7;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000255D4()
{
  swift_release();
  swift_release();
  *(unsigned char *)(*(void *)(v0 + 144) + 176) = 1;
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10002564C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  swift_task_dealloc();
  return _swift_task_switch(sub_10002575C, v1, 0);
}

uint64_t sub_10002575C()
{
  swift_release();
  *(unsigned char *)(*(void *)(v0 + 144) + 176) = 1;
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000257C8()
{
  uint64_t v13 = v0;
  swift_release();
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(unsigned __int8 *)(v0 + 232);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    unint64_t v6 = 0xE800000000000000;
    uint64_t v7 = 0x7265776F50776F6CLL;
    switch(v3)
    {
      case 1:
        unint64_t v6 = 0xEB00000000726577;
        uint64_t v7 = 0x6F506D756964656DLL;
        break;
      case 2:
        unint64_t v6 = 0xE900000000000072;
        uint64_t v7 = 0x65776F5068676968;
        break;
      case 3:
        uint64_t v8 = 0x694669576ELL;
        goto LABEL_8;
      case 4:
        uint64_t v8 = 0x6C6C65436ELL;
LABEL_8:
        unint64_t v6 = v8 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
        uint64_t v7 = 0x4F7265776F506E6FLL;
        break;
      case 5:
        unint64_t v6 = 0xEF694669576E4F79;
        goto LABEL_11;
      case 6:
        unint64_t v6 = 0xEF6C6C65436E4F79;
LABEL_11:
        uint64_t v7 = 0x7265747461426E6FLL;
        break;
      case 7:
        unint64_t v6 = 0xEF79627261654E6ELL;
        uint64_t v7 = 0x6F696E61706D6F63;
        break;
      case 8:
        unint64_t v6 = 0xEF646E756F466E65;
        uint64_t v7 = 0x6857796669746F6ELL;
        break;
      default:
        break;
    }
    *(void *)(v0 + 120) = sub_1008FA0F0(v7, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 128) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed publish activity %{public}s, error: %@.", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    swift_release();
    swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  *(unsigned char *)(*(void *)(v0 + 144) + 176) = 1;
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_100025B90(char a1)
{
  uint64_t v2 = type metadata accessor for XPCActivity.Criteria.Options();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v11 - v7;
  static XPCActivity.Criteria.Options.usesDuetPowerBudgeting.getter();
  static XPCActivity.Criteria.Options.requiresNetwork.getter();
  sub_1000274F0(v8, (uint64_t)v6);
  uint64_t v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v6, v2);
  v9(v8, v2);
  static XPCActivity.Criteria.Options.usesDuetNetworkBudgeting.getter();
  sub_1000274F0(v8, (uint64_t)v6);
  v9(v6, v2);
  v9(v8, v2);
  static XPCActivity.Criteria.Options.preventDeviceSleep.getter();
  sub_1000274F0(v8, (uint64_t)v6);
  v9(v6, v2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v9)(v8, v2);
  switch(a1)
  {
    case 3:
      goto LABEL_3;
    case 5:
      static XPCActivity.Criteria.Options.allowBattery.getter();
      sub_1000274F0(v8, (uint64_t)v6);
      v9(v6, v2);
      v9(v8, v2);
LABEL_3:
      static XPCActivity.Criteria.Options.requiresInexpensiveNetwork.getter();
      goto LABEL_5;
    case 6:
      static XPCActivity.Criteria.Options.allowBattery.getter();
LABEL_5:
      sub_1000274F0(v8, (uint64_t)v6);
      v9(v6, v2);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v9)(v8, v2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100025DF4(char a1)
{
  *(void *)(v2 + 40) = v1;
  *(unsigned char *)(v2 + 104) = a1;
  sub_10000588C(&qword_101639428);
  *(void *)(v2 + 48) = swift_task_alloc();
  *(void *)(v2 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_100025E9C, v1, 0);
}

uint64_t sub_100025E9C()
{
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v1 = (char *)swift_allocObject();
  v0[8] = v1;
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  v0[9] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v0[10] = v5;
  v0[11] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v2, 1, 1, v3);
  v5(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD000000000000034;
  *((void *)v1 + 16) = 0x80000001013F1D50;
  return _swift_task_switch(sub_100025FF8, v1, 0);
}

uint64_t sub_100025FF8()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[10];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = v0[5];
  static DispatchTime.now()();
  v1(v4, 0, 1, v2);
  sub_10001D608(v4, v5, &qword_101639428);
  uint64_t v7 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess();
  sub_10003377C(v5, v7);
  swift_endAccess();
  return _swift_task_switch(sub_1000260EC, v6, 0);
}

uint64_t sub_1000260EC()
{
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_10166D808 + dword_10166D808);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000261A8;
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 40);
  char v4 = *(unsigned char *)(v0 + 104);
  return v6(v2, v3, v4);
}

uint64_t sub_1000261A8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  char v4 = *(uint64_t (**)(uint64_t))(v3 + 8);
  uint64_t v5 = *(void *)(v2 + 64);
  return v4(v5);
}

uint64_t sub_1000262E4(char a1)
{
  *(void *)(v2 + 120) = v1;
  *(unsigned char *)(v2 + 176) = a1;
  return _swift_task_switch(sub_100026308, v1, 0);
}

uint64_t sub_100026308()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    char v4 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100026458;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100026458(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100026570, v2, 0);
}

uint64_t sub_100026570()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v1 = (char *)swift_allocObject();
  *(void *)(v0 + 144) = v1;
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v4(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD000000000000037;
  *((void *)v1 + 16) = 0x80000001013F1CD0;
  uint64_t v9 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&dword_10166D800 + dword_10166D800);
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100026724;
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 176);
  return v9(v1, v6, v7);
}

uint64_t sub_100026724()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 120);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_1000340B4;
  }
  else
  {
    uint64_t v4 = sub_100026878;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100026878()
{
  type metadata accessor for AnalyticsPublisher();
  v0[20] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[21] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10002692C;
  uint64_t v2 = v0[18];
  return sub_101196838(v2);
}

uint64_t sub_10002692C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100026A58, v1, 0);
}

uint64_t sub_100026A58()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100026AC0(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 264) = a2;
  *(void *)(v2 + 240) = a1;
  return _swift_task_switch(sub_100026AE4, 0, 0);
}

uint64_t sub_100026AE4()
{
  if (*(void *)(v0 + 240))
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100026C84;
    return sub_101103760();
  }
  else
  {
    char v3 = *(unsigned char *)(v0 + 264);
    sub_10000588C(&qword_101639418);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101347500;
    *(void *)(inited + 32) = 0x6E6F73616572;
    *(void *)(inited + 40) = 0xE600000000000000;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 80) = sub_1000336D4();
    *(void *)(inited + 48) = 0xD000000000000012;
    *(void *)(inited + 56) = 0x80000001013F1D10;
    *(_WORD *)(inited + 88) = 1;
    *(void *)(inited + 96) = 0xD000000000000010;
    *(void *)(inited + 104) = 0x80000001013F1D30;
    *(void *)(inited + 136) = &type metadata for Int64;
    *(void *)(inited + 144) = sub_100033728();
    *(void *)(inited + 112) = 0;
    *(_WORD *)(inited + 152) = 2;
    *(void *)(inited + 160) = 0x7265747461426E6FLL;
    *(void *)(inited + 168) = 0xE900000000000079;
    *(unsigned char *)(inited + 176) = v3;
    *(_WORD *)(inited + 216) = 0;
    unint64_t v5 = sub_10092D7A8(inited);
    uint64_t v6 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v6(v5);
  }
}

uint64_t sub_100026C84(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    unint64_t v5 = sub_100026EF0;
  }
  else
  {
    *(void *)(v4 + 256) = a1;
    unint64_t v5 = sub_100026DB0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100026DB0()
{
  uint64_t v1 = *(void *)(v0 + 256);
  char v2 = *(unsigned char *)(v0 + 264);
  sub_10000588C(&qword_101639418);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347500;
  *(void *)(inited + 32) = 0x6E6F73616572;
  *(void *)(inited + 40) = 0xE600000000000000;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = sub_1000336D4();
  *(void *)(inited + 48) = 0xD000000000000012;
  *(void *)(inited + 56) = 0x80000001013F1D10;
  *(_WORD *)(inited + 88) = 1;
  *(void *)(inited + 96) = 0xD000000000000010;
  *(void *)(inited + 104) = 0x80000001013F1D30;
  *(void *)(inited + 136) = &type metadata for Int64;
  *(void *)(inited + 144) = sub_100033728();
  *(void *)(inited + 112) = v1;
  *(_WORD *)(inited + 152) = 2;
  *(void *)(inited + 160) = 0x7265747461426E6FLL;
  *(void *)(inited + 168) = 0xE900000000000079;
  *(unsigned char *)(inited + 176) = v2;
  *(_WORD *)(inited + 216) = 0;
  unint64_t v4 = sub_10092D7A8(inited);
  unint64_t v5 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v5(v4);
}

uint64_t sub_100026EF0()
{
  char v1 = *(unsigned char *)(v0 + 264);
  sub_10000588C(&qword_101639418);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347500;
  *(void *)(inited + 32) = 0x6E6F73616572;
  *(void *)(inited + 40) = 0xE600000000000000;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = sub_1000336D4();
  *(void *)(inited + 48) = 0xD000000000000012;
  *(void *)(inited + 56) = 0x80000001013F1D10;
  *(_WORD *)(inited + 88) = 1;
  *(void *)(inited + 96) = 0xD000000000000010;
  *(void *)(inited + 104) = 0x80000001013F1D30;
  *(void *)(inited + 136) = &type metadata for Int64;
  *(void *)(inited + 144) = sub_100033728();
  *(void *)(inited + 112) = 0;
  *(_WORD *)(inited + 152) = 2;
  *(void *)(inited + 160) = 0x7265747461426E6FLL;
  *(void *)(inited + 168) = 0xE900000000000079;
  *(unsigned char *)(inited + 176) = v1;
  *(_WORD *)(inited + 216) = 0;
  unint64_t v3 = sub_10092D7A8(inited);
  unint64_t v4 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v4(v3);
}

uint64_t sub_100027024()
{
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 128);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FindMyNetworkPublishActivityService()
{
  return self;
}

uint64_t sub_100027090()
{
  v1[2] = v0;
  v1[3] = *v0;
  sub_10000588C(&qword_10164DBB0);
  v1[4] = swift_task_alloc();
  return _swift_task_switch(sub_10002714C, v0, 0);
}

uint64_t sub_10002714C()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  unint64_t v5 = (void *)swift_allocObject();
  void v5[2] = 0;
  v5[3] = 0;
  v5[4] = v3;
  v5[5] = v2;
  swift_retain();
  sub_1000212B0(v1, (uint64_t)&unk_101639048, (uint64_t)v5);
  swift_release();
  sub_10001DAB4(v1, &qword_10164DBB0);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[5] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100027288;
  return sub_1000220F8();
}

uint64_t sub_100027288()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100027398(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100033DDC(&qword_101639038, a2, (void (*)(uint64_t))type metadata accessor for FindMyNetworkPublishActivityService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000273F0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100027430(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_1000204C0(a1, v4, v5, v6);
}

uint64_t sub_1000274F0(char *a1, uint64_t a2)
{
  unint64_t v30 = a1;
  uint64_t v4 = sub_10000588C(&qword_1016394B8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v28 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v24 - v7;
  uint64_t v9 = type metadata accessor for XPCActivity.Criteria.Options();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v24 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v27 = v2;
  uint64_t v25 = v16;
  v16(v13, v2, v9);
  v24[1] = sub_100033DDC(&qword_1016394C0, 255, (void (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options);
  dispatch thunk of SetAlgebra.intersection(_:)();
  sub_100033DDC(&qword_1016394C8, 255, (void (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options);
  uint64_t v26 = a2;
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
  uint64_t v29 = v4;
  uint64_t v18 = &v8[*(int *)(v4 + 48)];
  *uint64_t v8 = v17 & 1;
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    uint64_t v21 = v25;
    uint64_t v20 = v26;
    v25(v18, v26, v9);
    v21(v13, v20, v9);
    dispatch thunk of SetAlgebra.formUnion(_:)();
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v19(v18, v15, v9);
  }
  uint64_t v22 = &v28[*(int *)(v29 + 48)];
  v19(v22, v18, v9);
  v19(v30, v22, v9);
  return v17 & 1;
}

uint64_t sub_1000277F0@<X0>(uint64_t a1@<X8>)
{
  id v2 = [self standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_10001D608((uint64_t)v9, (uint64_t)v10, (uint64_t *)&unk_101644360);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date();
    int v6 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_101644360);
    uint64_t v8 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t sub_100027978()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_1000279C0, 0, 0);
}

uint64_t sub_1000279C0()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_100027ABC;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100027ABC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100027BD4, 0, 0);
}

uint64_t sub_100027BD4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016390E0);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10003004C, v3, v2);
}

uint64_t sub_100027CBC()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_100027D04, 0, 0);
}

uint64_t sub_100027D04()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_100027E00;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100027E00()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100027F18, 0, 0);
}

uint64_t sub_100027F18()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639140);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10003022C, v3, v2);
}

uint64_t sub_100028000()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_100028048, 0, 0);
}

uint64_t sub_100028048()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_100028144;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100028144()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002825C, 0, 0);
}

uint64_t sub_10002825C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016390F8);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_1000300C4, v3, v2);
}

uint64_t sub_100028344()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002838C, 0, 0);
}

uint64_t sub_10002838C()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_100028488;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100028488()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000285A0, 0, 0);
}

uint64_t sub_1000285A0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016390C8);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10002FFD4, v3, v2);
}

uint64_t sub_100028688()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_1000286D0, 0, 0);
}

uint64_t sub_1000286D0()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_1000287CC;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1000287CC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000288E4, 0, 0);
}

uint64_t sub_1000288E4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639230);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10003074C, v3, v2);
}

uint64_t sub_1000289CC()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_100028A14, 0, 0);
}

uint64_t sub_100028A14()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_100028B10;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100028B10()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100028C28, 0, 0);
}

uint64_t sub_100028C28()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639110);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10003013C, v3, v2);
}

uint64_t sub_100028D10()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_100028D58, 0, 0);
}

uint64_t sub_100028D58()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_100028E54;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100028E54()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100028F6C, 0, 0);
}

uint64_t sub_100028F6C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016394D8);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100033E24, v3, v2);
}

uint64_t sub_100029054()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002909C, 0, 0);
}

uint64_t sub_10002909C()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_100029198;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100029198()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000292B0, 0, 0);
}

uint64_t sub_1000292B0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639128);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_1000301B4, v3, v2);
}

uint64_t sub_100029398()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_1000293E0, 0, 0);
}

uint64_t sub_1000293E0()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_1000294DC;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_10002FDEC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1000294DC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000295F4, 0, 0);
}

uint64_t sub_1000295F4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639090);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10002FDF4, v3, v2);
}

uint64_t sub_1000296DC()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_100029724, 0, 0);
}

uint64_t sub_100029724()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_100029820;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100029820()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100029938, 0, 0);
}

uint64_t sub_100029938()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016391D0);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10003056C, v3, v2);
}

uint64_t sub_100029A20()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_100029A68, 0, 0);
}

uint64_t sub_100029A68()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_100029B64;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100029B64()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100029C7C, 0, 0);
}

uint64_t sub_100029C7C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016391E8);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_1000305E4, v3, v2);
}

uint64_t sub_100029D64()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_100029DAC, 0, 0);
}

uint64_t sub_100029DAC()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_100029EA8;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100029EA8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100029FC0, 0, 0);
}

uint64_t sub_100029FC0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639200);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10003065C, v3, v2);
}

uint64_t sub_10002A0A8()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002A0F0, 0, 0);
}

uint64_t sub_10002A0F0()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002A1EC;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002A1EC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002A304, 0, 0);
}

uint64_t sub_10002A304()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016390B0);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10002FEE0, v3, v2);
}

uint64_t sub_10002A3EC()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002A434, 0, 0);
}

uint64_t sub_10002A434()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002A530;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002A530()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002A648, 0, 0);
}

uint64_t sub_10002A648()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639398);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10003121C, v3, v2);
}

uint64_t sub_10002A730()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002A778, 0, 0);
}

uint64_t sub_10002A778()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002A874;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002A874()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002A98C, 0, 0);
}

uint64_t sub_10002A98C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016392F0);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030B00, v3, v2);
}

uint64_t sub_10002AA74()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002AABC, 0, 0);
}

uint64_t sub_10002AABC()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002ABB8;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002ABB8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002ACD0, 0, 0);
}

uint64_t sub_10002ACD0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639348);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030CD8, v3, v2);
}

uint64_t sub_10002ADB8()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002AE00, 0, 0);
}

uint64_t sub_10002AE00()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002AEFC;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002AEFC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002B014, 0, 0);
}

uint64_t sub_10002B014()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639218);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_1000306D4, v3, v2);
}

uint64_t sub_10002B0FC()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002B144, 0, 0);
}

uint64_t sub_10002B144()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002B240;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002B240()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002B358, 0, 0);
}

uint64_t sub_10002B358()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016392D8);
  *uint64_t v1 = v0;
  v1[1] = sub_10002B440;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030A88, v3, v2);
}

uint64_t sub_10002B440()
{
  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(v2);
}

uint64_t sub_10002B54C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002B594, 0, 0);
}

uint64_t sub_10002B594()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002B690;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002B690()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002B7A8, 0, 0);
}

uint64_t sub_10002B7A8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639170);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10003031C, v3, v2);
}

uint64_t sub_10002B890()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002B8D8, 0, 0);
}

uint64_t sub_10002B8D8()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002B9D4;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002B9D4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002BAEC, 0, 0);
}

uint64_t sub_10002BAEC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016391A0);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10003047C, v3, v2);
}

uint64_t sub_10002BBD4()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002BC1C, 0, 0);
}

uint64_t sub_10002BC1C()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002BD18;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002BD18()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002BE30, 0, 0);
}

uint64_t sub_10002BE30()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016393E8);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100031380, v3, v2);
}

uint64_t sub_10002BF18()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002BF60, 0, 0);
}

uint64_t sub_10002BF60()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002C05C;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002C05C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002C174, 0, 0);
}

uint64_t sub_10002C174()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639400);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_1000313F8, v3, v2);
}

uint64_t sub_10002C25C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002C2A4, 0, 0);
}

uint64_t sub_10002C2A4()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002C3A0;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002C3A0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002C4B8, 0, 0);
}

uint64_t sub_10002C4B8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639290);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030928, v3, v2);
}

uint64_t sub_10002C5A0()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002C5E8, 0, 0);
}

uint64_t sub_10002C5E8()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002C6E4;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002C6E4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002C7FC, 0, 0);
}

uint64_t sub_10002C7FC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016393C8);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100031308, v3, v2);
}

uint64_t sub_10002C8E4()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002C92C, 0, 0);
}

uint64_t sub_10002C92C()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002CA28;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002CA28()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002CB40, 0, 0);
}

uint64_t sub_10002CB40()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639248);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_1000307C4, v3, v2);
}

uint64_t sub_10002CC28()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002CC70, 0, 0);
}

uint64_t sub_10002CC70()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002CD6C;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002CD6C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002CE84, 0, 0);
}

uint64_t sub_10002CE84()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639260);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10003083C, v3, v2);
}

uint64_t sub_10002CF6C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002CFB4, 0, 0);
}

uint64_t sub_10002CFB4()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002D0B0;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002D0B0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002D1C8, 0, 0);
}

uint64_t sub_10002D1C8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016391B8);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_1000304F4, v3, v2);
}

uint64_t sub_10002D2B0()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002D2F8, 0, 0);
}

uint64_t sub_10002D2F8()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002D3F4;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002D3F4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002D50C, 0, 0);
}

uint64_t sub_10002D50C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639308);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030B78, v3, v2);
}

uint64_t sub_10002D5F4()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002D63C, 0, 0);
}

uint64_t sub_10002D63C()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002D738;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002D738()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002D850, 0, 0);
}

uint64_t sub_10002D850()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639158);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_1000302A4, v3, v2);
}

uint64_t sub_10002D938()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002D980, 0, 0);
}

uint64_t sub_10002D980()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002DA7C;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002DA7C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002DB94, 0, 0);
}

uint64_t sub_10002DB94()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639360);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030D50, v3, v2);
}

uint64_t sub_10002DC7C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002DCC4, 0, 0);
}

uint64_t sub_10002DCC4()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002DDC0;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002DDC0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002DED8, 0, 0);
}

uint64_t sub_10002DED8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016392A8);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_1000309A0, v3, v2);
}

uint64_t sub_10002DFC0()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002E008, 0, 0);
}

uint64_t sub_10002E008()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002E104;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002E104()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002E21C, 0, 0);
}

uint64_t sub_10002E21C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016392C0);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030A14, v3, v2);
}

uint64_t sub_10002E304()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002E34C, 0, 0);
}

uint64_t sub_10002E34C()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002E448;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002E448()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002E560, 0, 0);
}

uint64_t sub_10002E560()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_1016393B0);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100031294, v3, v2);
}

uint64_t sub_10002E648()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002E690, 0, 0);
}

uint64_t sub_10002E690()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002E78C;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002E78C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002E8A4, 0, 0);
}

uint64_t sub_10002E8A4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639378);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030DC8, v3, v2);
}

uint64_t sub_10002E98C()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002E9D4, 0, 0);
}

uint64_t sub_10002E9D4()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002EAD0;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002EAD0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002EBE8, 0, 0);
}

uint64_t sub_10002EBE8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639278);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_1000308B4, v3, v2);
}

uint64_t sub_10002ECD0()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002ED18, 0, 0);
}

uint64_t sub_10002ED18()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002EE14;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002EE14()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002EF2C, 0, 0);
}

uint64_t sub_10002EF2C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639330);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030C64, v3, v2);
}

uint64_t sub_10002F014()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002F05C, 0, 0);
}

uint64_t sub_10002F05C()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002F158;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002F158()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002F270, 0, 0);
}

uint64_t sub_10002F270()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C(&qword_101639188);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030394, v3, v2);
}

uint64_t sub_10002F358()
{
  *(void *)(v1 + 24) = v0;
  *(void *)(v1 + 32) = *v0;
  return _swift_task_switch(sub_10002F3A0, 0, 0);
}

uint64_t sub_10002F3A0()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  id v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *id v4 = v0;
  v4[1] = sub_10002F49C;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_1000340B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10002F49C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10002F5B4, 0, 0);
}

uint64_t sub_10002F5B4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10165F6A0);
  *uint64_t v1 = v0;
  v1[1] = sub_1000340B0;
  uint64_t v3 = *(void *)(v0 + 24);
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030BF0, v3, v2);
}

uint64_t sub_10002F69C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a6;
  v23[1] = a4;
  uint64_t v24 = a5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(a3);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  unint64_t v19 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v20 + v19, v18, v15);
  aBlock[4] = v24;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = v26;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = _swiftEmptyArrayStorage;
  sub_100033DDC((unint64_t *)&qword_10163B7E0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_10002FE84();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v27);
  return swift_release();
}

uint64_t sub_10002FA00(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t *a5)
{
  swift_beginAccess();
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v11 = v9 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_10001D010(v11, (uint64_t)v15);
      sub_10000588C(&qword_1016390A0);
      a4(a3);
      if (swift_dynamicCast()) {
        BOOL v12 = v14 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      if (!v12)
      {
        swift_bridgeObjectRelease();
        v15[0] = v14;
        goto LABEL_11;
      }
      v11 += 40;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  v15[0] = 0;
LABEL_11:
  sub_10000588C(a5);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10002FB18(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  swift_beginAccess();
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = v7 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10001D010(v9, (uint64_t)v12);
      sub_10000588C(&qword_1016390A0);
      a4(0);
      if (swift_dynamicCast()) {
        break;
      }
      v9 += 40;
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    v12[0] = v11;
  }
  else
  {
LABEL_6:
    v12[0] = 0;
  }
  sub_10000588C(a3);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10002FC18(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *id v4 = v2;
  v4[1] = sub_1000340BC;
  return v6(a1);
}

uint64_t sub_10002FCF4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002FD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FinderStateInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002FD90(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FinderStateInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002FDEC(uint64_t a1)
{
  return sub_10055FD50(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10002FDF4(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639098, (uint64_t)&unk_1015A7330, (uint64_t)sub_10002FE48, (uint64_t)&unk_1015A7348);
}

uint64_t sub_10002FE3C()
{
  return sub_100033E78(&qword_101639098);
}

uint64_t sub_10002FE48()
{
  return sub_10002FF58(&qword_101639098, 0, (void (*)(uint64_t))type metadata accessor for FinderStateObserver);
}

uint64_t sub_10002FE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002FE7C()
{
  return swift_release();
}

unint64_t sub_10002FE84()
{
  unint64_t result = qword_10163B7F0;
  if (!qword_10163B7F0)
  {
    sub_10000592C((uint64_t *)&unk_10163F350);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B7F0);
  }
  return result;
}

uint64_t sub_10002FEE0(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016390B8, (uint64_t)&unk_1015A7380, (uint64_t)sub_10002FF34, (uint64_t)&unk_1015A7398);
}

uint64_t sub_10002FF28()
{
  return sub_100033E78(&qword_1016390B8);
}

uint64_t sub_10002FF34()
{
  return sub_10002FF58(&qword_1016390B8, 0, (void (*)(uint64_t))type metadata accessor for FamilyCircleService);
}

uint64_t sub_10002FF58(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v7 = *(void *)(sub_10000588C(a1) - 8);
  return sub_10002FA00(*(void *)(v3 + 16), v3 + ((*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), a2, a3, a1);
}

uint64_t sub_10002FFD4(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016390D0, (uint64_t)&unk_1015A73D0, (uint64_t)sub_100030028, (uint64_t)&unk_1015A73E8);
}

uint64_t sub_10003001C()
{
  return sub_100033E78(&qword_1016390D0);
}

uint64_t sub_100030028()
{
  return sub_10002FF58(&qword_1016390D0, 0, (void (*)(uint64_t))type metadata accessor for IDSTransportService_ItemSharingCrossAccount);
}

uint64_t sub_10003004C(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016390E8, (uint64_t)&unk_1015A7420, (uint64_t)sub_1000300A0, (uint64_t)&unk_1015A7438);
}

uint64_t sub_100030094()
{
  return sub_100033E78(&qword_1016390E8);
}

uint64_t sub_1000300A0()
{
  return sub_10002FF58(&qword_1016390E8, 0, (void (*)(uint64_t))type metadata accessor for BeaconStoreActor);
}

uint64_t sub_1000300C4(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639100, (uint64_t)&unk_1015A7470, (uint64_t)sub_100030118, (uint64_t)&unk_1015A7488);
}

uint64_t sub_10003010C()
{
  return sub_100033E78(&qword_101639100);
}

uint64_t sub_100030118()
{
  return sub_10002FF58(&qword_101639100, 0, (void (*)(uint64_t))type metadata accessor for PeerTrustService);
}

uint64_t sub_10003013C(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639118, (uint64_t)&unk_1015A74C0, (uint64_t)sub_100030190, (uint64_t)&unk_1015A74D8);
}

uint64_t sub_100030184()
{
  return sub_100033E78(&qword_101639118);
}

uint64_t sub_100030190()
{
  return sub_10002FF58(&qword_101639118, 0, (void (*)(uint64_t))type metadata accessor for BeaconManagerService);
}

uint64_t sub_1000301B4(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639130, (uint64_t)&unk_1015A7510, (uint64_t)sub_100030208, (uint64_t)&unk_1015A7528);
}

uint64_t sub_1000301FC()
{
  return sub_100033E78(&qword_101639130);
}

uint64_t sub_100030208()
{
  return sub_10002FF58(&qword_101639130, 0, (void (*)(uint64_t))type metadata accessor for FindMyNetworkPublisherService);
}

uint64_t sub_10003022C(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639148, (uint64_t)&unk_1015A7560, (uint64_t)sub_100030280, (uint64_t)&unk_1015A7578);
}

uint64_t sub_100030274()
{
  return sub_100033E78(&qword_101639148);
}

uint64_t sub_100030280()
{
  return sub_10002FF58(&qword_101639148, 0, (void (*)(uint64_t))type metadata accessor for ObservationStoreService);
}

uint64_t sub_1000302A4(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639160, (uint64_t)&unk_1015A75B0, (uint64_t)sub_1000302F8, (uint64_t)&unk_1015A75C8);
}

uint64_t sub_1000302EC()
{
  return sub_100033E78(&qword_101639160);
}

uint64_t sub_1000302F8()
{
  return sub_10002FF58(&qword_101639160, 0, (void (*)(uint64_t))type metadata accessor for CloudStorageService);
}

uint64_t sub_10003031C(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639178, (uint64_t)&unk_1015A7600, (uint64_t)sub_100030370, (uint64_t)&unk_1015A7618);
}

uint64_t sub_100030364()
{
  return sub_100033E78(&qword_101639178);
}

uint64_t sub_100030370()
{
  return sub_10002FF58(&qword_101639178, 0, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
}

uint64_t sub_100030394(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639190, (uint64_t)&unk_1015A7650, (uint64_t)sub_1000303E8, (uint64_t)&unk_1015A7668);
}

uint64_t sub_1000303DC()
{
  return sub_100033E78(&qword_101639190);
}

uint64_t sub_1000303E8()
{
  return sub_100030408(&qword_101639190, (void (*)(void))type metadata accessor for LocalFindableLostModeDetectionService);
}

uint64_t sub_100030408(uint64_t *a1, void (*a2)(void))
{
  uint64_t v5 = *(void *)(sub_10000588C(a1) - 8);
  return sub_10002FB18(*(void *)(v2 + 16), v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a1, a2);
}

uint64_t sub_10003047C(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016391A8, (uint64_t)&unk_1015A76A0, (uint64_t)sub_1000304D0, (uint64_t)&unk_1015A76B8);
}

uint64_t sub_1000304C4()
{
  return sub_100033E78(&qword_1016391A8);
}

uint64_t sub_1000304D0()
{
  return sub_10002FF58(&qword_1016391A8, 0, (void (*)(uint64_t))type metadata accessor for BeaconKeyService);
}

uint64_t sub_1000304F4(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016391C0, (uint64_t)&unk_1015A76F0, (uint64_t)sub_100030548, (uint64_t)&unk_1015A7708);
}

uint64_t sub_10003053C()
{
  return sub_100033E78(&qword_1016391C0);
}

uint64_t sub_100030548()
{
  return sub_10002FF58(&qword_1016391C0, 0, (void (*)(uint64_t))type metadata accessor for BeaconStore);
}

uint64_t sub_10003056C(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016391D8, (uint64_t)&unk_1015A7740, (uint64_t)sub_1000305C0, (uint64_t)&unk_1015A7758);
}

uint64_t sub_1000305B4()
{
  return sub_100033E78(&qword_1016391D8);
}

uint64_t sub_1000305C0()
{
  return sub_10002FF58(&qword_1016391D8, 0, (void (*)(uint64_t))type metadata accessor for StandaloneBeaconService);
}

uint64_t sub_1000305E4(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016391F0, (uint64_t)&unk_1015A7790, (uint64_t)sub_100030638, (uint64_t)&unk_1015A77A8);
}

uint64_t sub_10003062C()
{
  return sub_100033E78(&qword_1016391F0);
}

uint64_t sub_100030638()
{
  return sub_10002FF58(&qword_1016391F0, 0, (void (*)(uint64_t))type metadata accessor for SimpleBeaconUpdateService);
}

uint64_t sub_10003065C(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639208, (uint64_t)&unk_1015A77E0, (uint64_t)sub_1000306B0, (uint64_t)&unk_1015A77F8);
}

uint64_t sub_1000306A4()
{
  return sub_100033E78(&qword_101639208);
}

uint64_t sub_1000306B0()
{
  return sub_10002FF58(&qword_101639208, 0, (void (*)(uint64_t))type metadata accessor for ItemSharingNotificationsService);
}

uint64_t sub_1000306D4(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639220, (uint64_t)&unk_1015A7830, (uint64_t)sub_100030728, (uint64_t)&unk_1015A7848);
}

uint64_t sub_10003071C()
{
  return sub_100033E78(&qword_101639220);
}

uint64_t sub_100030728()
{
  return sub_10002FF58(&qword_101639220, 0, (void (*)(uint64_t))type metadata accessor for DelegatedShareMetadataService);
}

uint64_t sub_10003074C(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639238, (uint64_t)&unk_1015A7880, (uint64_t)sub_1000307A0, (uint64_t)&unk_1015A7898);
}

uint64_t sub_100030794()
{
  return sub_100033E78(&qword_101639238);
}

uint64_t sub_1000307A0()
{
  return sub_10002FF58(&qword_101639238, 0, (void (*)(uint64_t))type metadata accessor for BeaconSharingService);
}

uint64_t sub_1000307C4(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639250, (uint64_t)&unk_1015A78D0, (uint64_t)sub_100030818, (uint64_t)&unk_1015A78E8);
}

uint64_t sub_10003080C()
{
  return sub_100033E78(&qword_101639250);
}

uint64_t sub_100030818()
{
  return sub_10002FF58(&qword_101639250, 0, (void (*)(uint64_t))type metadata accessor for NotifyWhenFoundManager);
}

uint64_t sub_10003083C(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639268, (uint64_t)&unk_1015A7920, (uint64_t)sub_100030890, (uint64_t)&unk_1015A7938);
}

uint64_t sub_100030884()
{
  return sub_100033E78(&qword_101639268);
}

uint64_t sub_100030890()
{
  return sub_10002FF58(&qword_101639268, 0, (void (*)(uint64_t))type metadata accessor for OwnerCommandService);
}

uint64_t sub_1000308B4(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639280, (uint64_t)&unk_1015A7970, (uint64_t)sub_100030908, (uint64_t)&unk_1015A7988);
}

uint64_t sub_1000308FC()
{
  return sub_100033E78(&qword_101639280);
}

uint64_t sub_100030908()
{
  return sub_100030408(&qword_101639280, (void (*)(void))type metadata accessor for FMIPService);
}

uint64_t sub_100030928(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639298, (uint64_t)&unk_1015A79C0, (uint64_t)sub_10003097C, (uint64_t)&unk_1015A79D8);
}

uint64_t sub_100030970()
{
  return sub_100033E78(&qword_101639298);
}

uint64_t sub_10003097C()
{
  return sub_10002FF58(&qword_101639298, 0, (void (*)(uint64_t))type metadata accessor for FirstUnlockService);
}

uint64_t sub_1000309A0(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016392B0, (uint64_t)&unk_1015A7A10, (uint64_t)sub_1000309F4, (uint64_t)&unk_1015A7A28);
}

uint64_t sub_1000309E8()
{
  return sub_100033E78(&qword_1016392B0);
}

uint64_t sub_1000309F4()
{
  return sub_100030408(&qword_1016392B0, (void (*)(void))type metadata accessor for DistributedNotificationService);
}

uint64_t sub_100030A14(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016392C8, (uint64_t)&unk_1015A7A60, (uint64_t)sub_100030A68, (uint64_t)&unk_1015A7A78);
}

uint64_t sub_100030A5C()
{
  return sub_100033E78(&qword_1016392C8);
}

uint64_t sub_100030A68()
{
  return sub_100030408(&qword_1016392C8, (void (*)(void))type metadata accessor for OwnerCommandManager);
}

uint64_t sub_100030A88(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016392E0, (uint64_t)&unk_1015A7AB0, (uint64_t)sub_100030ADC, (uint64_t)&unk_1015A7AC8);
}

uint64_t sub_100030AD0()
{
  return sub_100033E78(&qword_1016392E0);
}

uint64_t sub_100030ADC()
{
  return sub_10002FF58(&qword_1016392E0, 0, (void (*)(uint64_t))type metadata accessor for CircleTrustService);
}

uint64_t sub_100030B00(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016392F8, (uint64_t)&unk_1015A7B00, (uint64_t)sub_100030B54, (uint64_t)&unk_1015A7B18);
}

uint64_t sub_100030B48()
{
  return sub_100033E78(&qword_1016392F8);
}

uint64_t sub_100030B54()
{
  return sub_10002FF58(&qword_1016392F8, 0, (void (*)(uint64_t))type metadata accessor for DeviceBeaconPayloadPublisher);
}

uint64_t sub_100030B78(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639310, (uint64_t)&unk_1015A7B50, (uint64_t)sub_100030BCC, (uint64_t)&unk_1015A7B68);
}

uint64_t sub_100030BC0()
{
  return sub_100033E78(&qword_101639310);
}

uint64_t sub_100030BCC()
{
  return sub_10002FF58(&qword_101639310, 0, (void (*)(uint64_t))type metadata accessor for AirPodsLEPairingService);
}

uint64_t sub_100030BF0(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639320, (uint64_t)&unk_1015A7BA0, (uint64_t)sub_100030C44, (uint64_t)&unk_1015A7BB8);
}

uint64_t sub_100030C38()
{
  return sub_100033E78(&qword_101639320);
}

uint64_t sub_100030C44()
{
  return sub_100030408(&qword_101639320, (void (*)(void))type metadata accessor for CentralManager);
}

uint64_t sub_100030C64(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639338, (uint64_t)&unk_1015A7BF0, (uint64_t)sub_100030CB8, (uint64_t)&unk_1015A7C08);
}

uint64_t sub_100030CAC()
{
  return sub_100033E78(&qword_101639338);
}

uint64_t sub_100030CB8()
{
  return sub_100030408(&qword_101639338, (void (*)(void))type metadata accessor for AccessoryConnectionService);
}

uint64_t sub_100030CD8(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639350, (uint64_t)&unk_1015A7C40, (uint64_t)sub_100030D2C, (uint64_t)&unk_1015A7C58);
}

uint64_t sub_100030D20()
{
  return sub_100033E78(&qword_101639350);
}

uint64_t sub_100030D2C()
{
  return sub_10002FF58(&qword_101639350, 0, (void (*)(uint64_t))type metadata accessor for AccountService);
}

uint64_t sub_100030D50(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639368, (uint64_t)&unk_1015A7C90, (uint64_t)sub_100030DA4, (uint64_t)&unk_1015A7CA8);
}

uint64_t sub_100030D98()
{
  return sub_100033E78(&qword_101639368);
}

uint64_t sub_100030DA4()
{
  return sub_10002FF58(&qword_101639368, 0, (void (*)(uint64_t))type metadata accessor for BatteryLevelService);
}

uint64_t sub_100030DC8(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639380, (uint64_t)&unk_1015A7CE0, (uint64_t)sub_100030E1C, (uint64_t)&unk_1015A7CF8);
}

uint64_t sub_100030E10()
{
  return sub_100033E78(&qword_101639380);
}

uint64_t sub_100030E1C()
{
  return sub_100030408(&qword_101639380, (void (*)(void))type metadata accessor for LeechScanningService);
}

uint64_t sub_100030E3C(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100030F18;
  return v6(a1);
}

uint64_t sub_100030F18()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100031010()
{
  uint64_t v0 = type metadata accessor for NetworkReachabilityStatus();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v10 - v5;
  type metadata accessor for NetworkReachability();
  swift_allocObject();
  NetworkReachability.init()();
  dispatch thunk of NetworkReachability.status.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for NetworkReachabilityStatus.reachableViaWiFi(_:), v0);
  sub_100033DDC(&qword_101639388, 255, (void (*)(uint64_t))&type metadata accessor for NetworkReachabilityStatus);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v10[2] == v10[0] && v10[3] == v10[1]) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  return v7 & 1;
}

uint64_t sub_10003121C(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016393A0, (uint64_t)&unk_1015A7D30, (uint64_t)sub_100031270, (uint64_t)&unk_1015A7D48);
}

uint64_t sub_100031264()
{
  return sub_100033E78(&qword_1016393A0);
}

uint64_t sub_100031270()
{
  return sub_10002FF58(&qword_1016393A0, 0, (void (*)(uint64_t))type metadata accessor for DelegatedBeaconPayloadPublisher);
}

uint64_t sub_100031294(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016393B8, (uint64_t)&unk_1015A7D80, (uint64_t)sub_1000312E8, (uint64_t)&unk_1015A7D98);
}

uint64_t sub_1000312DC()
{
  return sub_100033E78(&qword_1016393B8);
}

uint64_t sub_1000312E8()
{
  return sub_100030408(&qword_1016393B8, (void (*)(void))type metadata accessor for WildModeAssociationRecordsPublisher);
}

uint64_t sub_100031308(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016393D0, (uint64_t)&unk_1015A7DD0, (uint64_t)sub_10003135C, (uint64_t)&unk_1015A7DE8);
}

uint64_t sub_100031350()
{
  return sub_100033E78(&qword_1016393D0);
}

uint64_t sub_10003135C()
{
  return sub_10002FF58(&qword_1016393D0, 0, (void (*)(uint64_t))type metadata accessor for APSNotificationService);
}

uint64_t sub_100031380(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016393F0, (uint64_t)&unk_1015A7E20, (uint64_t)sub_1000313D4, (uint64_t)&unk_1015A7E38);
}

uint64_t sub_1000313C8()
{
  return sub_100033E78(&qword_1016393F0);
}

uint64_t sub_1000313D4()
{
  return sub_10002FF58(&qword_1016393F0, 0, (void (*)(uint64_t))type metadata accessor for CompanionPublishActivity);
}

uint64_t sub_1000313F8(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_101639408, (uint64_t)&unk_1015A7E70, (uint64_t)sub_10003144C, (uint64_t)&unk_1015A7E88);
}

uint64_t sub_100031440()
{
  return sub_100033E78(&qword_101639408);
}

uint64_t sub_10003144C(uint64_t a1, uint64_t a2)
{
  return sub_10002FF58(&qword_101639408, a2, (void (*)(uint64_t))type metadata accessor for FindMyNetworkPublishActivityService);
}

uint64_t sub_10003146C()
{
  uint64_t v0 = sub_10000588C(&qword_10164DBB0);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  v91 = (char *)v90 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v97 = (char *)v90 - v3;
  uint64_t v103 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v4 = __chkstk_darwin(v103);
  uint64_t v92 = (uint64_t)v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v98 = (uint64_t)v90 - v6;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  v95 = (char *)v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  v96 = (char *)v90 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v108 = (char *)v90 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v90 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)v90 - v19;
  __chkstk_darwin(v18);
  v115 = (char *)v90 - v21;
  unint64_t v22 = sub_1002A3600();
  int v23 = 0;
  uint64_t v24 = sub_100276AE8(v22);
  swift_bridgeObjectRelease();
  unint64_t v25 = *(void *)(v24 + 16);
  if (!v25) {
    goto LABEL_43;
  }
  v106 = v20;
  unint64_t v26 = 0;
  uint64_t v27 = *(void (**)(char *))(v8 + 16);
  uint64_t v113 = v8 + 16;
  v112 = v27;
  unint64_t v28 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v107 = v24;
  v90[0] = v28;
  uint64_t v29 = (uint64_t (**)(uint64_t))(v24 + v28);
  v102 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v114 = *(void *)(v8 + 72);
  v94 = (void (**)(void))(v8 + 32);
  unsigned int v109 = enum case for Feature.FindMy.trustedNowUsesReferenceClock(_:);
  v90[1] = &v127;
  v111 = (void (**)(char *, uint64_t))(v8 + 8);
  NSNotificationName v100 = NSSystemClockDidChangeNotification;
  v93 = (char *)&type metadata for () + 8;
  uint64_t v99 = v7;
  v101 = v17;
  unint64_t v110 = v25;
  while (1)
  {
    v104 = v29;
    v112(v108);
    if (qword_1016371D8 != -1) {
      swift_once();
    }
    double aBlock = 7.45683732e247;
    *(double *)&uint64_t v126 = -5.98008217e197;
    SynchronousCache.cachedValue<A>(key:computeBlock:)();
    swift_bridgeObjectRelease();
    if (v120 == 1)
    {
      id v30 = [self sharedInstance];
      unsigned int v31 = [v30 isInternalBuild];

      if (v31)
      {
        if (qword_101636818 != -1) {
          swift_once();
        }
        uint64_t v32 = sub_100010324(v103, (uint64_t)qword_101638DF0);
        swift_beginAccess();
        uint64_t v33 = v32;
        uint64_t v34 = v92;
        sub_10001D074(v33, v92, (uint64_t *)&unk_10163AC90);
        if ((*v102)(v34, 1, v7) != 1)
        {
          v105 = v23;
          unint64_t v46 = v25;
          uint64_t v47 = v95;
          (*v94)();
          goto LABEL_34;
        }
        sub_10001DAB4(v34, (uint64_t *)&unk_10163AC90);
      }
    }
    uint64_t My = type metadata accessor for Feature.FindMy();
    v128 = (void *)My;
    uint64_t v129 = sub_100033DDC((unint64_t *)&qword_101653E00, 255, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    uint64_t v36 = sub_10001D958((uint64_t *)&aBlock);
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v36, v109, My);
    LOBYTE(My) = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
    if (My)
    {
      if (qword_101637200 != -1) {
        swift_once();
      }
      sub_10000588C(&qword_101639448);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      double v37 = *(double *)&v126;
      if ((LOBYTE(aBlock) & 1) == 0)
      {
        id v38 = [self defaultCenter];
        uint64_t v129 = (uint64_t)sub_1000338A4;
        uint64_t v130 = 0;
        double aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
        uint64_t v126 = 1107296256;
        v127 = sub_100F468EC;
        v128 = &unk_1015A7F28;
        uint64_t v39 = _Block_copy(&aBlock);
        swift_release();
        id v40 = [v38 addObserverForName:v100 object:0 queue:0 usingBlock:v39];
        _Block_release(v39);
        unint64_t v25 = v110;
        swift_unknownObjectRelease();
      }
      if (qword_101637210 != -1) {
        swift_once();
      }
      if (*(double *)&qword_1016650F0 >= v37) {
        sub_100F47194(0);
      }
      double Current = CFAbsoluteTimeGetCurrent();
      sub_10000588C(&qword_101639450);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      if (Current - aBlock - *(double *)&v126 <= 86400.0)
      {
        v105 = v23;
        unint64_t v46 = v25;
        uint64_t v47 = v95;
      }
      else
      {
        OSAllocatedUnfairLock.callAsFunction<A>(_:)();
        uint64_t v42 = type metadata accessor for TaskPriority();
        uint64_t v43 = *(void *)(v42 - 8);
        uint64_t v44 = (uint64_t)v91;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v91, 1, 1, v42);
        uint64_t v45 = swift_allocObject();
        *(void *)(v45 + 16) = 0;
        *(void *)(v45 + 24) = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v44, 1, v42) == 1)
        {
          sub_10001DAB4(v44, &qword_10164DBB0);
        }
        else
        {
          TaskPriority.rawValue.getter();
          (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v42);
        }
        if (*(void *)(v45 + 16))
        {
          swift_getObjectType();
          swift_unknownObjectRetain();
          uint64_t v48 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v50 = v49;
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v48 = 0;
          uint64_t v50 = 0;
        }
        uint64_t v51 = swift_allocObject();
        *(void *)(v51 + 16) = &unk_101639468;
        *(void *)(v51 + 24) = v45;
        v105 = v23;
        if (v50 | v48)
        {
          uint64_t v116 = 0;
          uint64_t v117 = 0;
          uint64_t v118 = v48;
          uint64_t v119 = v50;
        }
        uint64_t v7 = v99;
        unint64_t v46 = v110;
        uint64_t v47 = v95;
        swift_task_create();
        swift_release();
        uint64_t v17 = v101;
      }
      Date.init(timeIntervalSinceReferenceDate:)();
    }
    else
    {
      v105 = v23;
      unint64_t v46 = v25;
      uint64_t v47 = v95;
      Date.init()();
    }
LABEL_34:
    uint64_t v52 = v96;
    Date.addingTimeInterval(_:)();
    unint64_t v53 = *v111;
    (*v111)(v47, v7);
    uint64_t v54 = v108;
    char v55 = static Date.> infix(_:_:)();
    v53(v52, v7);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v53)(v54, v7);
    if (v55) {
      break;
    }
    ++v26;
    uint64_t v29 = (uint64_t (**)(uint64_t))((char *)v104 + v114);
    unint64_t v25 = v46;
    BOOL v57 = v46 == v26;
    int v23 = v105;
    if (v57) {
      goto LABEL_43;
    }
  }
  uint64_t v58 = v26;
  unint64_t v59 = v46;
  if (v46 < v26)
  {
    uint64_t v60 = -1;
    uint64_t v61 = v26;
    uint64_t v58 = v46;
    int64_t v62 = v106;
    goto LABEL_45;
  }
  if (v46 == v26)
  {
LABEL_43:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v60 = 1;
  uint64_t v61 = v46;
  int64_t v62 = v106;
LABEL_45:
  v63 = 0;
  v104 = &v127;
  v95 = (char *)(v107 + v90[0]);
  v105 = (char *)&type metadata for () + 8;
  v93 = (char *)v60;
  uint64_t v92 = v61;
  while (2)
  {
    BOOL v65 = __OFADD__(v63, v60);
    v63 += v60;
    if (v65) {
      goto LABEL_89;
    }
    if (v58 == v59)
    {
LABEL_90:
      __break(1u);
      return result;
    }
    unint64_t v64 = v58 + 1;
    if (v58 + 1 != v59)
    {
      v96 = v63;
      uint64_t v66 = &v95[v114 * v64];
      v108 = (char *)v58;
      while (1)
      {
        if (v58 < -1)
        {
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
        if (v64 >= *(void *)(v107 + 16)) {
          goto LABEL_88;
        }
        ((void (*)(char *, char *, uint64_t))v112)(v115, v66, v7);
        double aBlock = 7.45683732e247;
        *(double *)&uint64_t v126 = -5.98008217e197;
        SynchronousCache.cachedValue<A>(key:computeBlock:)();
        swift_bridgeObjectRelease();
        if (v131 == 1)
        {
          id v67 = [self sharedInstance];
          unsigned int v68 = [v67 isInternalBuild];

          if (v68)
          {
            if (qword_101636818 != -1) {
              swift_once();
            }
            uint64_t v69 = sub_100010324(v103, (uint64_t)qword_101638DF0);
            swift_beginAccess();
            uint64_t v70 = v69;
            uint64_t v71 = v98;
            sub_10001D074(v70, v98, (uint64_t *)&unk_10163AC90);
            if ((*v102)(v71, 1, v7) != 1)
            {
              ((void (*)(char *, uint64_t, uint64_t))*v94)(v17, v71, v7);
              goto LABEL_81;
            }
            sub_10001DAB4(v71, (uint64_t *)&unk_10163AC90);
          }
        }
        uint64_t v72 = type metadata accessor for Feature.FindMy();
        v128 = (void *)v72;
        uint64_t v129 = sub_100033DDC((unint64_t *)&qword_101653E00, 255, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
        v73 = sub_10001D958((uint64_t *)&aBlock);
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v72 - 8) + 104))(v73, v109, v72);
        LOBYTE(v72) = isFeatureEnabled(_:)();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
        if ((v72 & 1) == 0)
        {
          Date.init()();
          goto LABEL_81;
        }
        if (qword_101637200 != -1) {
          swift_once();
        }
        sub_10000588C(&qword_101639448);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)();
        double v74 = *(double *)&v126;
        if ((LOBYTE(aBlock) & 1) == 0)
        {
          id v75 = [self defaultCenter];
          uint64_t v129 = (uint64_t)sub_1000338A4;
          uint64_t v130 = 0;
          double aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
          uint64_t v126 = 1107296256;
          v127 = sub_100F468EC;
          v128 = &unk_1015A7EB0;
          v76 = _Block_copy(&aBlock);
          swift_release();
          id v77 = [v75 addObserverForName:v100 object:0 queue:0 usingBlock:v76];
          _Block_release(v76);
          int64_t v62 = v106;
          swift_unknownObjectRelease();
        }
        if (qword_101637210 != -1) {
          swift_once();
        }
        if (*(double *)&qword_1016650F0 >= v74) {
          sub_100F47194(0);
        }
        double v78 = CFAbsoluteTimeGetCurrent();
        sub_10000588C(&qword_101639450);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)();
        if (v78 - aBlock - *(double *)&v126 > 86400.0) {
          break;
        }
LABEL_80:
        Date.init(timeIntervalSinceReferenceDate:)();
LABEL_81:
        Date.addingTimeInterval(_:)();
        v53(v17, v7);
        v88 = v115;
        char v89 = static Date.> infix(_:_:)();
        v53(v62, v7);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v53)(v88, v7);
        if (v89)
        {
          unint64_t v59 = v110;
          goto LABEL_85;
        }
        ++v64;
        v66 += v114;
        uint64_t v58 = (uint64_t)v108;
        if (v110 == v64)
        {
          unint64_t v59 = v110;
          unint64_t v64 = v110;
LABEL_85:
          v63 = v96;
          uint64_t v60 = (uint64_t)v93;
          uint64_t v61 = v92;
          goto LABEL_47;
        }
      }
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      uint64_t v79 = type metadata accessor for TaskPriority();
      uint64_t v80 = *(void *)(v79 - 8);
      uint64_t v81 = (uint64_t)v97;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56))(v97, 1, 1, v79);
      uint64_t v82 = swift_allocObject();
      *(void *)(v82 + 16) = 0;
      v83 = (void *)(v82 + 16);
      *(void *)(v82 + 24) = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v81, 1, v79) == 1)
      {
        sub_10001DAB4(v81, &qword_10164DBB0);
        if (*v83) {
          goto LABEL_72;
        }
LABEL_76:
        uint64_t v84 = 0;
        uint64_t v86 = 0;
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v81, v79);
        if (!*v83) {
          goto LABEL_76;
        }
LABEL_72:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v84 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v86 = v85;
        swift_unknownObjectRelease();
      }
      uint64_t v7 = v99;
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = &unk_101639458;
      *(void *)(v87 + 24) = v82;
      if (v86 | v84)
      {
        uint64_t v121 = 0;
        uint64_t v122 = 0;
        uint64_t v123 = v84;
        uint64_t v124 = v86;
      }
      int64_t v62 = v106;
      swift_task_create();
      swift_release();
      uint64_t v17 = v101;
      goto LABEL_80;
    }
    unint64_t v64 = v59;
LABEL_47:
    uint64_t v58 = v64;
    if (v64 != v61) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v63;
}

uint64_t sub_100032808(char a1)
{
  *(unsigned char *)(v1 + 96) = a1;
  sub_10000588C((uint64_t *)&unk_10163AC90);
  *(void *)(v1 + 48) = swift_task_alloc();
  *(void *)(v1 + 56) = swift_task_alloc();
  *(void *)(v1 + 64) = swift_task_alloc();
  return _swift_task_switch(sub_1000328B8, 0, 0);
}

uint64_t sub_1000328B8()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170E390;
  *(void *)(v0 + 72) = qword_10170E390;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000329C4;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10001D704, v1, &type metadata for Configuration);
}

uint64_t sub_1000329C4()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100032ADC, 0, 0);
}

uint64_t sub_100032ADC()
{
  uint64_t v35 = v0;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = sub_1010ABB94(v2);
  uint64_t v4 = sub_1010ABBA8(v2);
  swift_bridgeObjectRelease();
  uint64_t v5 = v3 + v4;
  if (__OFADD__(v3, v4))
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *(char **)(v0 + 64);
    uint64_t v1 = sub_10003146C();
    unint64_t v7 = sub_1002A3600();
    uint64_t v8 = sub_100276AE8(v7);
    swift_bridgeObjectRelease();
    sub_1002A1124(v8, v6);
    swift_bridgeObjectRelease();
    if (qword_101636820 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v9 = *(void *)(v0 + 56);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170D690);
  sub_10001D074(v10, v9, (uint64_t *)&unk_10163AC90);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v33 = v13;
    uint64_t v14 = *(void *)(v0 + 48);
    uint64_t v15 = *(void *)(v0 + 56);
    uint64_t v16 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 134219010;
    uint64_t v32 = v1;
    *(void *)(v0 + 24) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2048;
    *(void *)(v0 + 32) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2082;
    sub_10001D074(v15, v14, (uint64_t *)&unk_10163AC90);
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v18 = *(void *)(v17 - 8);
    int v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v14, 1, v17);
    uint64_t v20 = *(void *)(v0 + 48);
    if (v19 == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 48), (uint64_t *)&unk_10163AC90);
      unint64_t v21 = 0xE300000000000000;
      uint64_t v22 = 7104878;
    }
    else
    {
      uint64_t v22 = Date.debugDescription.getter();
      unint64_t v21 = v26;
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v17);
    }
    uint64_t v27 = *(void *)(v0 + 56);
    uint64_t v31 = *(void *)(v0 + 64);
    int v30 = *(unsigned __int8 *)(v0 + 96);
    *(void *)(v0 + 40) = sub_1008FA0F0(v22, v21, &v34);
    uint64_t v1 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v27, (uint64_t *)&unk_10163AC90);
    *(_WORD *)(v16 + 32) = 1024;
    *(_DWORD *)(v0 + 88) = v5 < v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 38) = 1024;
    *(_DWORD *)(v0 + 92) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v33, "Publish limit check: %ld / %ld, finderStartOfDay: %{public}s. Reached maximum: %{BOOL}d, on battery: %{BOOL}d.", (uint8_t *)v16, 0x2Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v25 = v31;
  }
  else
  {
    uint64_t v23 = *(void *)(v0 + 56);
    uint64_t v24 = *(void *)(v0 + 64);

    sub_10001DAB4(v23, (uint64_t *)&unk_10163AC90);
    uint64_t v25 = v24;
  }
  sub_10001DAB4(v25, (uint64_t *)&unk_10163AC90);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v28 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v28(v5 < v1);
}

double sub_100032F1C()
{
  uint64_t v0 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = &v12[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for FindMyNetworkPublishDateProvider();
  swift_allocObject();
  swift_defaultActor_initialize();
  unint64_t v7 = sub_1002A3600();
  uint64_t v8 = sub_100276AE8(v7);
  swift_bridgeObjectRelease();
  sub_100E4CFC0(v8, v2);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    static Date.trustedNow.getter((uint64_t)v6);
    sub_10001DAB4((uint64_t)v2, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(unsigned char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  }
  Date.timeIntervalSinceNow.getter();
  double v10 = v9;
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  return fabs(v10);
}

uint64_t sub_100033104(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 544) = a2;
  sub_10000588C((uint64_t *)&unk_10163AC90);
  *(void *)(v2 + 496) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  *(void *)(v2 + 504) = v4;
  *(void *)(v2 + 512) = *(void *)(v4 - 8);
  *(void *)(v2 + 520) = swift_task_alloc();
  return _swift_task_switch(sub_1000331F8, a1, 0);
}

uint64_t sub_1000331F8()
{
  uint64_t v1 = *(void *)(v0 + 504);
  uint64_t v2 = *(void *)(v0 + 512);
  uint64_t v3 = *(void *)(v0 + 496);
  type metadata accessor for FindMyNetworkPublishDateProvider();
  swift_allocObject();
  swift_defaultActor_initialize();
  sub_1000277F0(v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 496);
    static Date.trustedNow.getter(*(void *)(v0 + 520));
    sub_10001DAB4(v4, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 512) + 32))(*(void *)(v0 + 520), *(void *)(v0 + 496), *(void *)(v0 + 504));
  }
  uint64_t v5 = *(void *)(v0 + 520);
  uint64_t v6 = *(void *)(v0 + 504);
  uint64_t v7 = *(void *)(v0 + 512);
  Date.timeIntervalSinceNow.getter();
  *(void *)(v0 + 528) = v8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  *(double *)(v0 + 536) = sub_100032F1C();
  return _swift_task_switch(sub_100033334, 0, 0);
}

uint64_t sub_100033334()
{
  unint64_t v1 = 0xE800000000000000;
  uint64_t v2 = 0x7265776F50776F6CLL;
  switch(*(unsigned char *)(v0 + 544))
  {
    case 1:
      unint64_t v1 = 0xEB00000000726577;
      uint64_t v2 = 0x6F506D756964656DLL;
      break;
    case 2:
      uint64_t v2 = 0x65776F5068676968;
      unint64_t v1 = 0xE900000000000072;
      break;
    case 3:
      uint64_t v3 = 0x694669576ELL;
      goto LABEL_6;
    case 4:
      uint64_t v3 = 0x6C6C65436ELL;
LABEL_6:
      unint64_t v1 = v3 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      uint64_t v2 = 0x4F7265776F506E6FLL;
      break;
    case 5:
      unint64_t v1 = 0xEF694669576E4F79;
      goto LABEL_9;
    case 6:
      unint64_t v1 = 0xEF6C6C65436E4F79;
LABEL_9:
      uint64_t v2 = 0x7265747461426E6FLL;
      break;
    case 7:
      unint64_t v1 = 0xEF79627261654E6ELL;
      uint64_t v2 = 0x6F696E61706D6F63;
      break;
    case 8:
      unint64_t v1 = 0xEF646E756F466E65;
      uint64_t v2 = 0x6857796669746F6ELL;
      break;
    default:
      break;
  }
  double v4 = *(double *)(v0 + 536);
  double v5 = fabs(*(double *)(v0 + 528));
  uint64_t v6 = sub_10119B528(v4);
  uint64_t v7 = sub_10119B528(v5);
  sub_10000588C(&qword_101639418);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347580;
  *(void *)(inited + 32) = 0x7265747461426E6FLL;
  *(void *)(inited + 40) = 0xE900000000000079;
  uint64_t v9 = sub_1011585AC((uint64_t)&off_10159F3C0);
  uint64_t v10 = sub_10092BE88();
  char v11 = sub_100DC6050(v10, v9);
  swift_bridgeObjectRelease();
  *(unsigned char *)(inited + 48) = v11 & 1;
  *(_WORD *)(inited + 88) = 0;
  *(void *)(inited + 96) = 0x696669576E6FLL;
  *(void *)(inited + 104) = 0xE600000000000000;
  *(unsigned char *)(inited + 112) = sub_100031010() & 1;
  *(_WORD *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0xD000000000000014;
  *(void *)(inited + 168) = 0x80000001013F1D90;
  *(void *)(inited + 200) = &type metadata for Double;
  unint64_t v12 = sub_1000337E4();
  *(void *)(inited + 208) = v12;
  *(double *)(inited + 176) = v4;
  *(_WORD *)(inited + 216) = 3;
  *(void *)(inited + 224) = 0xD000000000000014;
  *(void *)(inited + 232) = 0x80000001013F1DB0;
  *(void *)(inited + 264) = &type metadata for Double;
  *(void *)(inited + 272) = v12;
  *(double *)(inited + 240) = v5;
  *(_WORD *)(inited + 280) = 3;
  *(void *)(inited + 288) = 0xD000000000000016;
  *(void *)(inited + 296) = 0x80000001013F1DD0;
  *(void *)(inited + 328) = &type metadata for String;
  *(void *)(inited + 336) = sub_1000336D4();
  *(void *)(inited + 304) = v2;
  *(void *)(inited + 312) = v1;
  *(_WORD *)(inited + 344) = 1;
  *(void *)(inited + 352) = 0xD000000000000019;
  *(void *)(inited + 360) = 0x80000001013F1DF0;
  *(void *)(inited + 392) = &type metadata for Int;
  unint64_t v13 = sub_100033838();
  *(void *)(inited + 400) = v13;
  *(void *)(inited + 368) = v6;
  *(_WORD *)(inited + 408) = 2;
  *(void *)(inited + 416) = 0xD000000000000019;
  *(void *)(inited + 424) = 0x80000001013F1E10;
  *(void *)(inited + 456) = &type metadata for Int;
  *(void *)(inited + 464) = v13;
  *(void *)(inited + 432) = v7;
  *(_WORD *)(inited + 472) = 2;
  unint64_t v14 = sub_10092D7A8(inited);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v15(v14);
}

unint64_t sub_1000336D4()
{
  unint64_t result = qword_101653D60;
  if (!qword_101653D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101653D60);
  }
  return result;
}

unint64_t sub_100033728()
{
  unint64_t result = qword_101639420;
  if (!qword_101639420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639420);
  }
  return result;
}

uint64_t sub_10003377C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101639428);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000337E4()
{
  unint64_t result = qword_101639438;
  if (!qword_101639438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639438);
  }
  return result;
}

unint64_t sub_100033838()
{
  unint64_t result = qword_101655B80;
  if (!qword_101655B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101655B80);
  }
  return result;
}

double sub_10003388C@<D0>(uint64_t a1@<X8>)
{
  return sub_100F47884(a1);
}

double sub_1000338A8@<D0>(void *a1@<X8>)
{
  return sub_100F47004(a1);
}

void sub_1000338C0()
{
}

uint64_t sub_1000338D8()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100033910()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100F47084();
}

uint64_t sub_1000339BC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  double v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *double v5 = v2;
  v5[1] = sub_10001D2E4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_101639050 + dword_101639050);
  return v6(a1, v4);
}

uint64_t sub_100033A74()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001D2E4;
  return sub_100F47084();
}

uint64_t sub_100033B20(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  double v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *double v5 = v2;
  v5[1] = sub_100033F68;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_101639050 + dword_101639050);
  return v6(a1, v4);
}

uint64_t sub_100033BD8()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100033C10(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  char v8 = *(unsigned char *)(v2 + 16);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_100033F68;
  return sub_100022C84(a1, a2, v8, v6, v7);
}

uint64_t sub_100033CDC()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100033D14(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 24);
  char v7 = *(unsigned char *)(v2 + 16);
  char v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *char v8 = v3;
  v8[1] = sub_100033F68;
  return sub_100023ED0(a1, a2, v7, v6);
}

uint64_t sub_100033DD4(uint64_t a1)
{
  return sub_1008675B8(a1, v1);
}

uint64_t sub_100033DDC(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100033E24(uint64_t a1)
{
  return sub_10002F69C(a1, v1, &qword_1016394E0, (uint64_t)&unk_1015A8000, (uint64_t)sub_100033F40, (uint64_t)&unk_1015A8018);
}

uint64_t sub_100033E6C()
{
  return sub_100033E78(&qword_1016394E0);
}

uint64_t sub_100033E78(uint64_t *a1)
{
  uint64_t v2 = sub_10000588C(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100033F40()
{
  return sub_10002FF58(&qword_1016394E0, 0, (void (*)(uint64_t))type metadata accessor for LeaderCheckService);
}

uint64_t getEnumTagSinglePayload for LostModeStatus(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MaintenanceConnectionPolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003421CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MaintenanceConnectionPolicy()
{
  return &type metadata for MaintenanceConnectionPolicy;
}

uint64_t sub_100034254()
{
  uint64_t v1 = 1684826487;
  if (*v0 != 1) {
    uint64_t v1 = 7105633;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701736302;
  }
}

unint64_t sub_10003429C()
{
  unint64_t result = qword_1016394E8;
  if (!qword_1016394E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016394E8);
  }
  return result;
}

uint64_t *sub_1000342F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    BOOL v7 = (char *)a1 + v6;
    int v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for FMNAccountType();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_retain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_1000343D4(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for FMNAccountType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_10003444C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for FMNAccountType();
  int v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_retain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_1000344E4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  int v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for FMNAccountType();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_100034578(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for FMNAccountType();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_1000345F4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  int v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for FMNAccountType();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_100034680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100034694);
}

uint64_t sub_100034694(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100034744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100034758);
}

void *sub_100034758(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AirPodsPairingLockCheckEndPoint()
{
  uint64_t result = qword_101639548;
  if (!qword_101639548) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10003484C()
{
  uint64_t result = type metadata accessor for FMNAccountType();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1000348E8()
{
  sub_10000588C(&qword_101639580);
  OS_dispatch_queue.sync<A>(execute:)();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  uint64_t v0 = (void (*)(uint64_t *, void))URLComponents.path.modify();
  v1._countAndFlagsBits = 0xD000000000000017;
  v1._object = (void *)0x80000001013F2140;
  String.append(_:)(v1);
  v0(&v7, 0);
  if (qword_101637188 != -1) {
    swift_once();
  }
  int v2 = (void *)qword_10170EE68;
  id v3 = [self sharedInstance];
  unsigned int v4 = [v3 isInternalBuild];

  if (v4)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v2 stringForKey:v5];

    if (v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URLComponents.host.setter();
    }
  }
}

uint64_t sub_100034AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for FMNAccountType();
  id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_100034B44@<X0>(void *a1@<X8>)
{
  return sub_1001E3C6C(v1, a1);
}

uint64_t sub_100034B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100034B74);
}

uint64_t sub_100034B74(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100034C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100034C38);
}

void *sub_100034C38(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryPairingLockCheckEndPoint()
{
  uint64_t result = qword_1016395E0;
  if (!qword_1016395E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100034D2C()
{
  sub_10000588C(&qword_101639580);
  OS_dispatch_queue.sync<A>(execute:)();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  URLComponents.path.setter();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_10170EE68;
  id v1 = [self sharedInstance];
  unsigned int v2 = [v1 isInternalBuild];

  if (v2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    id v4 = [v0 stringForKey:v3];

    if (v4)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URLComponents.host.setter();
    }
  }
}

uint64_t sub_100034EEC(unint64_t a1, unint64_t a2)
{
  unint64_t v20 = a1;
  uint64_t v22 = &_swiftEmptyDictionarySingleton;
  unint64_t v21 = a2;
  sub_1000362FC();
  uint64_t v3 = DataProtocol.intValue.getter();
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170F068);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134349056;
    unint64_t v20 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Number of beacons: %{public}ld", v7, 0xCu);
    swift_slowDealloc();
  }

  if (v3 < 2) {
    return (uint64_t)v22;
  }
  uint64_t result = static MACAddress.length.getter();
  if (__OFADD__(result, 20))
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = result + 21;
  if (__OFADD__(result + 20, 1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  result += 22;
  if (__OFADD__(v9, 1))
  {
LABEL_24:
    __break(1u);
    return result;
  }
  uint64_t v10 = Data.chunked(into:)();
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = (unint64_t *)(v10 + 40);
    while (1)
    {
      uint64_t v13 = *(v12 - 1);
      unint64_t v14 = *v12;
      unint64_t v20 = v13;
      unint64_t v21 = v14;
      sub_1000361E0(v13, v14);
      sub_100035284(&v20, (uint64_t)&v22);
      if (v2) {
        break;
      }
      v12 += 2;
      sub_10001CFB8(v13, v14);
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    sub_10001CFB8(v13, v14);
    swift_bridgeObjectRelease_n();
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t)v22;
    if (v22[2] == v3) {
      return result;
    }
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 134349056;
      swift_beginAccess();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unexpected number of serial numbers: %{public}ld", v17, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v18 = type metadata accessor for BinaryEncodingError();
    sub_100036350((unint64_t *)&qword_101639620, (void (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 104))(v19, enum case for BinaryEncodingError.encodingError(_:), v18);
    swift_willThrow();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100035284(unint64_t *a1, uint64_t a2)
{
  uint64_t v70 = a2;
  uint64_t v4 = sub_10000588C(&qword_101639628);
  __chkstk_darwin(v4 - 8);
  os_log_type_t v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *a1;
  unint64_t v11 = a1[1];
  uint64_t v12 = Data.subdata(in:)();
  unint64_t v14 = v13;
  uint64_t v71 = v12;
  unint64_t v72 = v13;
  sub_1000362FC();
  if ((DataProtocol.isNull.getter() & 1) == 0)
  {
    uint64_t v68 = Data.trimmed.getter();
    unint64_t v69 = v21;
    uint64_t v22 = static MACAddress.length.getter();
    if (__OFADD__(v22, 20))
    {
      __break(1u);
    }
    else if (v22 + 20 >= 20)
    {
      BOOL v65 = v2;
      uint64_t v23 = v12;
      uint64_t v12 = Data.subdata(in:)();
      unint64_t v25 = v24;
      sub_1000361E0(v12, v24);
      uint64_t v63 = v12;
      unint64_t v64 = v25;
      MACAddress.init(data:type:)();
      uint64_t v26 = static MACAddress.length.getter();
      uint64_t v27 = v26 + 20;
      if (!__OFADD__(v26, 20))
      {
        uint64_t v28 = static MACAddress.length.getter();
        if (!__OFADD__(v28, 20))
        {
          if (!__OFADD__(v28 + 20, 1))
          {
            if (v28 + 21 >= v27)
            {
              uint64_t v66 = Data.subdata(in:)();
              unint64_t v67 = v29;
              uint64_t v30 = static MACAddress.length.getter();
              uint64_t v31 = v30 + 20;
              if (!__OFADD__(v30, 20))
              {
                uint64_t v32 = v30 + 21;
                if (!__OFADD__(v31, 1))
                {
                  uint64_t v33 = 0;
                  uint64_t v12 = v23;
                  switch(v11 >> 62)
                  {
                    case 1uLL:
                      if (__OFSUB__(HIDWORD(v10), v10))
                      {
                        __break(1u);
LABEL_43:
                        __break(1u);
                        goto LABEL_44;
                      }
                      uint64_t v33 = HIDWORD(v10) - (int)v10;
LABEL_21:
                      if (v33 < v32) {
                        goto LABEL_40;
                      }
                      unint64_t v62 = v14;
                      unint64_t v14 = (unint64_t)v9;
                      unint64_t v11 = Data.subdata(in:)();
                      unint64_t v10 = v39;
                      uint64_t v71 = v11;
                      unint64_t v72 = v39;
                      uint64_t v40 = DataProtocol.intValue.getter();
                      char v41 = v40 + 1;
                      if ((unint64_t)(v40 + 1) < 3)
                      {
                        uint64_t v71 = v66;
                        unint64_t v72 = v67;
                        sub_1000361E0(v68, v69);
                        unint64_t v42 = DataProtocol.intValue.getter();
                        if ((v42 & 0x8000000000000000) == 0)
                        {
                          char v43 = v42;
                          if (v42 < 0x100)
                          {
                            uint64_t v44 = type metadata accessor for MultipartAccessoryPairingInfo(0);
                            sub_100036178(v14, (uint64_t)&v6[*(int *)(v44 + 24)]);
                            *os_log_type_t v6 = v43;
                            v6[1] = 0;
                            v6[*(int *)(v44 + 28)] = v41;
                            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v6, 0, 1, v44);
                            uint64_t v45 = (uint64_t)v6;
                            uint64_t v47 = v68;
                            unint64_t v46 = v69;
                            sub_10015D1E4(v45, v68, v69);
                            sub_10001CFB8(v66, v67);
                            sub_10001CFB8(v47, v46);
                            sub_10001CFB8(v11, v10);
                            sub_10001CFB8(v63, v64);
                            sub_10001CFB8(v23, v62);
                            uint64_t v48 = v14;
                            return sub_10001DAB4(v48, (uint64_t *)&unk_1016477E0);
                          }
                        }
LABEL_44:
                        _assertionFailure(_:_:file:line:flags:)();
                        __break(1u);
                        JUMPOUT(0x100035B84);
                      }
                      if (qword_101637310 == -1) {
                        goto LABEL_27;
                      }
                      goto LABEL_41;
                    case 2uLL:
                      uint64_t v38 = *(void *)(v10 + 16);
                      uint64_t v37 = *(void *)(v10 + 24);
                      uint64_t v33 = v37 - v38;
                      if (!__OFSUB__(v37, v38)) {
                        goto LABEL_21;
                      }
                      goto LABEL_43;
                    case 3uLL:
                      goto LABEL_21;
                    default:
                      uint64_t v33 = BYTE6(v11);
                      goto LABEL_21;
                  }
                }
LABEL_39:
                __break(1u);
LABEL_40:
                __break(1u);
LABEL_41:
                swift_once();
LABEL_27:
                uint64_t v49 = type metadata accessor for Logger();
                sub_100010324(v49, (uint64_t)qword_10170F068);
                sub_1000361E0(v11, v10);
                sub_1000361E0(v11, v10);
                uint64_t v50 = Logger.logObject.getter();
                os_log_type_t v51 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v50, v51))
                {
                  uint64_t v52 = (uint8_t *)swift_slowAlloc();
                  uint64_t v53 = swift_slowAlloc();
                  uint64_t v70 = v12;
                  uint64_t v71 = v53;
                  *(_DWORD *)uint64_t v52 = 136446210;
                  BOOL v65 = v52 + 4;
                  uint64_t v54 = Data.hexString.getter();
                  uint64_t v73 = sub_1008FA0F0(v54, v55, &v71);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  sub_10001CFB8(v11, v10);
                  sub_10001CFB8(v11, v10);
                  _os_log_impl((void *)&_mh_execute_header, v50, v51, "Invalid pairing type %{public}s!", v52, 0xCu);
                  swift_arrayDestroy();
                  uint64_t v12 = v70;
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {
                  sub_10001CFB8(v11, v10);
                  sub_10001CFB8(v11, v10);
                }

                unint64_t v56 = v14;
                uint64_t v58 = v63;
                unint64_t v57 = v64;
                uint64_t v59 = type metadata accessor for BinaryDecodingError();
                sub_100036350((unint64_t *)&qword_101639630, (void (*)(uint64_t))&type metadata accessor for BinaryDecodingError);
                swift_allocError();
                (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v59 - 8) + 104))(v60, enum case for BinaryDecodingError.decodingError(_:), v59);
                swift_willThrow();
                sub_10001CFB8(v66, v67);
                sub_10001CFB8(v68, v69);
                sub_10001CFB8(v11, v10);
                sub_10001CFB8(v58, v57);
                sub_10001CFB8(v12, v62);
                uint64_t v48 = v56;
                return sub_10001DAB4(v48, (uint64_t *)&unk_1016477E0);
              }
LABEL_38:
              __break(1u);
              goto LABEL_39;
            }
LABEL_37:
            __break(1u);
            goto LABEL_38;
          }
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    __break(1u);
    goto LABEL_34;
  }
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170F068);
  sub_1000361E0(v12, v14);
  sub_1000361E0(v12, v14);
  os_log_type_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v71 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 141558275;
    uint64_t v73 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2081;
    uint64_t v19 = Data.hexString.getter();
    uint64_t v73 = sub_1008FA0F0(v19, v20, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v12, v14);
    sub_10001CFB8(v12, v14);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Invalid serial number %{private,mask.hash}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(v12, v14);
    sub_10001CFB8(v12, v14);
  }

  uint64_t v34 = type metadata accessor for BinaryDecodingError();
  sub_100036350((unint64_t *)&qword_101639630, (void (*)(uint64_t))&type metadata accessor for BinaryDecodingError);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v34 - 8) + 104))(v35, enum case for BinaryDecodingError.decodingError(_:), v34);
  swift_willThrow();
  return sub_10001CFB8(v12, v14);
}

uint64_t sub_100035B94(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v86 = a4;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v83 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v84 = (uint64_t)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v74 - v9;
  uint64_t v11 = sub_10000588C(&qword_101639618);
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v14 = (uint64_t *)((char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __chkstk_darwin(v12);
  os_log_type_t v17 = (char *)&v74 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  unint64_t v20 = (uint64_t *)((char *)&v74 - v19);
  __chkstk_darwin(v18);
  uint64_t v22 = (uint64_t *)((char *)&v74 - v21);
  int64_t v23 = v87;
  uint64_t v24 = sub_100034EEC(a1, a2);
  if (v23) {
    return (uint64_t)v22;
  }
  uint64_t v25 = v24;
  uint64_t v79 = v22;
  uint64_t v80 = v14;
  uint64_t v82 = v17;
  uint64_t v26 = *(void *)(v24 + 64);
  uint64_t v74 = 0;
  uint64_t v75 = v24 + 64;
  uint64_t v27 = 1 << *(unsigned char *)(v24 + 32);
  uint64_t v28 = -1;
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  unint64_t v29 = v28 & v26;
  int64_t v76 = (unint64_t)(v27 + 63) >> 6;
  uint64_t v30 = swift_bridgeObjectRetain();
  int64_t v31 = 0;
  uint64_t v22 = _swiftEmptyDictionarySingleton;
  uint64_t v81 = v10;
  uint64_t v77 = v30;
  uint64_t v78 = v11;
  while (1)
  {
    uint64_t v32 = (uint64_t *)v82;
    if (v29)
    {
      uint64_t v86 = (v29 - 1) & v29;
      int64_t v87 = v31;
      unint64_t v33 = __clz(__rbit64(v29)) | (v31 << 6);
    }
    else
    {
      int64_t v34 = v31 + 1;
      if (__OFADD__(v31, 1)) {
        goto LABEL_38;
      }
      if (v34 >= v76)
      {
LABEL_34:
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v22;
      }
      unint64_t v35 = *(void *)(v75 + 8 * v34);
      int64_t v36 = v31 + 1;
      if (!v35)
      {
        int64_t v36 = v31 + 2;
        if (v31 + 2 >= v76) {
          goto LABEL_34;
        }
        unint64_t v35 = *(void *)(v75 + 8 * v36);
        if (!v35)
        {
          int64_t v36 = v31 + 3;
          if (v31 + 3 >= v76) {
            goto LABEL_34;
          }
          unint64_t v35 = *(void *)(v75 + 8 * v36);
          if (!v35)
          {
            int64_t v36 = v31 + 4;
            if (v31 + 4 >= v76) {
              goto LABEL_34;
            }
            unint64_t v35 = *(void *)(v75 + 8 * v36);
            if (!v35)
            {
              uint64_t v37 = v31 + 5;
              if (v31 + 5 >= v76) {
                goto LABEL_34;
              }
              unint64_t v35 = *(void *)(v75 + 8 * v37);
              if (!v35)
              {
                while (1)
                {
                  int64_t v36 = v37 + 1;
                  if (__OFADD__(v37, 1)) {
                    goto LABEL_39;
                  }
                  if (v36 >= v76) {
                    goto LABEL_34;
                  }
                  unint64_t v35 = *(void *)(v75 + 8 * v36);
                  ++v37;
                  if (v35) {
                    goto LABEL_24;
                  }
                }
              }
              int64_t v36 = v31 + 5;
            }
          }
        }
      }
LABEL_24:
      uint64_t v86 = (v35 - 1) & v35;
      int64_t v87 = v36;
      unint64_t v33 = __clz(__rbit64(v35)) + (v36 << 6);
    }
    uint64_t v38 = *(void *)(v25 + 48);
    uint64_t v39 = *(void *)(v25 + 56);
    uint64_t v40 = (uint64_t *)(v38 + 16 * v33);
    uint64_t v41 = *v40;
    unint64_t v42 = v40[1];
    char v43 = (int *)(type metadata accessor for MultipartAccessoryPairingInfo(0) - 8);
    uint64_t v44 = v39 + *(void *)(*(void *)v43 + 72) * v33;
    uint64_t v45 = v79;
    sub_100036114(v44, (uint64_t)v79 + *(int *)(v11 + 48));
    *uint64_t v45 = v41;
    v45[1] = v42;
    sub_10001D608((uint64_t)v45, (uint64_t)v20, &qword_101639618);
    uint64_t v46 = *(int *)(v11 + 48);
    uint64_t v47 = (uint64_t)v32 + v46;
    uint64_t v48 = v20;
    uint64_t v49 = (uint64_t)v20 + v46;
    uint64_t v50 = v32;
    uint64_t v52 = *v48;
    unint64_t v51 = v48[1];
    uint64_t v53 = v48;
    *uint64_t v50 = *v48;
    v50[1] = v51;
    uint64_t v85 = v47;
    sub_100036114(v49, v47);
    uint64_t v54 = *(int *)(v11 + 48);
    unint64_t v55 = v80;
    uint64_t v56 = (uint64_t)v80 + v54;
    *uint64_t v80 = v52;
    v55[1] = v51;
    sub_100036114(v49, (uint64_t)v55 + v54);
    uint64_t v57 = (uint64_t)v81;
    sub_100036178(v56 + v43[8], (uint64_t)v81);
    sub_1000361E0(v41, v42);
    sub_1000361E0(v52, v51);
    sub_100036238(v56);
    uint64_t v58 = v84;
    sub_10001D608(v57, v84, (uint64_t *)&unk_1016477E0);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v88 = v22;
    unint64_t v61 = sub_1007241A0(v52, v51);
    uint64_t v62 = v22[2];
    BOOL v63 = (v60 & 1) == 0;
    uint64_t v64 = v62 + v63;
    if (__OFADD__(v62, v63)) {
      break;
    }
    char v65 = v60;
    if (v22[3] >= v64)
    {
      unint64_t v20 = v53;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_100E7E7A8();
      }
    }
    else
    {
      sub_100E659A0(v64, isUniquelyReferenced_nonNull_native);
      uint64_t v66 = sub_1007241A0(v52, v51);
      if ((v65 & 1) != (v67 & 1)) {
        goto LABEL_40;
      }
      unint64_t v61 = v66;
      unint64_t v20 = v53;
    }
    uint64_t v68 = v83;
    uint64_t v22 = v88;
    if (v65)
    {
      sub_100036294(v58, v88[7] + *(void *)(v83 + 72) * v61);
    }
    else
    {
      v88[(v61 >> 6) + 8] |= 1 << v61;
      unint64_t v69 = (uint64_t *)(v22[6] + 16 * v61);
      *unint64_t v69 = v52;
      v69[1] = v51;
      sub_10001D608(v58, v22[7] + *(void *)(v68 + 72) * v61, (uint64_t *)&unk_1016477E0);
      uint64_t v70 = v22[2];
      BOOL v71 = __OFADD__(v70, 1);
      uint64_t v72 = v70 + 1;
      if (v71) {
        goto LABEL_37;
      }
      v22[2] = v72;
      sub_1000361E0(v52, v51);
    }
    swift_bridgeObjectRelease();
    sub_10001CFB8(v52, v51);
    sub_100036238(v85);
    sub_10001DAB4((uint64_t)v20, &qword_101639618);
    uint64_t v25 = v77;
    uint64_t v11 = v78;
    unint64_t v29 = v86;
    int64_t v31 = v87;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100036114(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100036178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016477E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000361E0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100036238(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100036294(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016477E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000362FC()
{
  unint64_t result = qword_10163B920;
  if (!qword_10163B920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B920);
  }
  return result;
}

uint64_t sub_100036350(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100036398()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170D6C0);
  sub_100010324(v0, (uint64_t)qword_10170D6C0);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1000364B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  unint64_t v3 = v1[1];
  sub_1000361E0(v2, v3);
  Data.hash(into:)();
  sub_10001CFB8(v2, v3);
  uint64_t v4 = (int *)type metadata accessor for LostModeInfoRecord();
  type metadata accessor for UUID();
  sub_100038D30(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  if (*(uint64_t *)((char *)v1 + v4[7] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(uint64_t *)((char *)v1 + v4[8] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if ((*(uint64_t *)((char *)v1 + v4[9]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(uint64_t *)((char *)v1 + v4[9]);
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((*(uint64_t *)((char *)v1 + v4[10]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = *(uint64_t *)((char *)v1 + v4[10]);
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  uint64_t v7 = (uint64_t *)((char *)v1 + v4[11]);
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_1000361E0(*v7, v9);
  Data.hash(into:)();

  return sub_10001CFB8(v8, v9);
}

unint64_t sub_1000366A4(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0x6D754E656E6F6870;
      break;
    case 4:
      unint64_t result = 0x6567617373656DLL;
      break;
    case 5:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 6:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 7:
      unint64_t result = 0x7369747265766461;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000367C4()
{
  return sub_1000366A4(*v0);
}

uint64_t sub_1000367CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10003899C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000367F4()
{
  return 0;
}

void sub_100036800(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_10003680C(uint64_t a1)
{
  unint64_t v2 = sub_100037A4C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100036848(uint64_t a1)
{
  unint64_t v2 = sub_100037A4C();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100036884()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000368C8()
{
  return Hasher._finalize()();
}

uint64_t sub_100036908(id *a1)
{
  uint64_t v2 = v1;
  [*a1 encryptedValues];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v3 = (int *)type metadata accessor for LostModeInfoRecord();
  uint64_t v4 = UUID.uuidString.getter();
  if (!*(void *)&v22[1])
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  if (*(void *)&v22[0] == v4 && *(void *)&v22[1] == v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
LABEL_9:
    *(void *)&v22[0] = UUID.uuidString.getter();
    v22[1] = v8;
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_11:
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v9 = (double *)(v1 + v3[7]);
  double v11 = *v9;
  double v10 = v9[1];
  if (*(void *)&v22[1])
  {
    if (!*(void *)&v10)
    {
      swift_bridgeObjectRelease();
      *(_OWORD *)uint64_t v22 = 0u;
LABEL_20:
      swift_bridgeObjectRetain();
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_21;
    }
    if (*(_OWORD *)v22 == __PAIR128__(*(unint64_t *)&v10, *(unint64_t *)&v11))
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
LABEL_19:
      v22[0] = v11;
      v22[1] = v10;
      goto LABEL_20;
    }
  }
  else if (*(void *)&v10)
  {
    goto LABEL_19;
  }
LABEL_21:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v13 = (double *)(v2 + v3[8]);
  double v15 = *v13;
  double v14 = v13[1];
  if (!*(void *)&v22[1])
  {
    if (!*(void *)&v14) {
      goto LABEL_31;
    }
LABEL_29:
    v22[0] = v15;
    v22[1] = v14;
    goto LABEL_30;
  }
  if (!*(void *)&v14)
  {
    swift_bridgeObjectRelease();
    *(_OWORD *)uint64_t v22 = 0u;
LABEL_30:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_31;
  }
  if (*(_OWORD *)v22 != __PAIR128__(*(unint64_t *)&v14, *(unint64_t *)&v15))
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_31;
    }
    goto LABEL_29;
  }
  swift_bridgeObjectRelease();
LABEL_31:
  CKRecordKeyValueSetting.subscript.getter();
  if ((LOBYTE(v22[1]) & 1) != 0 || v22[0] != *(double *)(v2 + v3[9]))
  {
    v22[0] = *(double *)(v2 + v3[9]);
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  if ((LOBYTE(v22[1]) & 1) != 0 || v22[0] != *(double *)(v2 + v3[10]))
  {
    v22[0] = *(double *)(v2 + v3[10]);
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  os_log_type_t v17 = (uint64_t *)(v2 + v3[11]);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_1000361E0(*v17, v19);
  if (*(void *)&v22[1] >> 60 == 15)
  {
    sub_100037A24(*(uint64_t *)&v22[0], *(unint64_t *)&v22[1]);
    sub_100037A24(v18, v19);
LABEL_40:
    sub_1000361E0(v18, v19);
    CKRecordKeyValueSetting.subscript.setter();
    return swift_unknownObjectRelease();
  }
  sub_100037A38(*(uint64_t *)&v22[0], *(unint64_t *)&v22[1]);
  char v20 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(uint64_t *)&v22[0], *(unint64_t *)&v22[1], v18, v19);
  sub_10001CFB8(v18, v19);
  sub_100037A24(*(uint64_t *)&v22[0], *(unint64_t *)&v22[1]);
  sub_100037A24(*(uint64_t *)&v22[0], *(unint64_t *)&v22[1]);
  if ((v20 & 1) == 0) {
    goto LABEL_40;
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_100036E54(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101639660);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  double v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100037A4C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v13 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = type metadata accessor for LostModeInfoRecord();
    LOBYTE(v12) = 1;
    type metadata accessor for UUID();
    sub_100038D30(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + *(int *)(v11 + 44));
    char v13 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100037180@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v44 - 8);
  uint64_t v4 = __chkstk_darwin(v44);
  uint64_t v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  double v8 = (char *)v36 - v7;
  uint64_t v9 = sub_10000588C(&qword_101639650);
  uint64_t v39 = *(void *)(v9 - 8);
  uint64_t v40 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v43 = (int *)type metadata accessor for LostModeInfoRecord();
  __chkstk_darwin(v43);
  char v13 = (_OWORD *)((char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = a1[3];
  uint64_t v41 = a1;
  sub_10001CD44(a1, v14);
  sub_100037A4C();
  double v15 = v11;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v41);
  }
  char v16 = v8;
  uint64_t v37 = v6;
  uint64_t v17 = v39;
  char v46 = 0;
  unint64_t v18 = sub_100037AA0();
  uint64_t v19 = v40;
  char v20 = v15;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v36[1] = v18;
  *char v13 = v45;
  LOBYTE(v45) = 1;
  sub_100038D30((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v21 = v44;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = (char *)v13 + v43[5];
  v36[0] = v13;
  int64_t v23 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
  v23(v22, v16, v21);
  LOBYTE(v45) = 2;
  uint64_t v24 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v25 = v43;
  v23((char *)(v36[0] + v43[6]), v24, v21);
  LOBYTE(v45) = 3;
  uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v27 = v36[0];
  uint64_t v28 = (uint64_t *)(v36[0] + v25[7]);
  *uint64_t v28 = v26;
  v28[1] = v29;
  LOBYTE(v45) = 4;
  uint64_t v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int64_t v31 = (uint64_t *)(v27 + v25[8]);
  *int64_t v31 = v30;
  v31[1] = v32;
  LOBYTE(v45) = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)(v27 + v25[9]) = v33;
  LOBYTE(v45) = 6;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)(v27 + v25[10]) = v34;
  char v46 = 7;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v19);
  *(_OWORD *)(v27 + v43[11]) = v45;
  sub_100037AF4(v27, v38);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v41);
  return sub_100037B58(v27);
}

uint64_t DeviceIdentitySignature.signature.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_1000361E0(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t sub_1000377B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_100037824()
{
  if (qword_101636830 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for URL();
  sub_100010324(v0, (uint64_t)qword_10170D6C0);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:isDirectory:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000378CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100037180(a1, a2);
}

uint64_t sub_1000378E4(void *a1)
{
  return sub_100036E54(a1);
}

uint64_t sub_1000378FC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100038D30(&qword_101639638, (void (*)(uint64_t))type metadata accessor for LostModeInfoRecord);
  uint64_t result = sub_100038D30(&qword_101639640, (void (*)(uint64_t))type metadata accessor for LostModeInfoRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for LostModeInfoRecord()
{
  uint64_t result = qword_1016396C0;
  if (!qword_1016396C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000379CC(uint64_t a1)
{
  uint64_t result = sub_100038D30(&qword_101639648, (void (*)(uint64_t))type metadata accessor for LostModeInfoRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100037A24(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10001CFB8(a1, a2);
  }
  return a1;
}

uint64_t sub_100037A38(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000361E0(a1, a2);
  }
  return a1;
}

unint64_t sub_100037A4C()
{
  unint64_t result = qword_101639658;
  if (!qword_101639658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639658);
  }
  return result;
}

unint64_t sub_100037AA0()
{
  unint64_t result = qword_10163ACB0;
  if (!qword_10163ACB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163ACB0);
  }
  return result;
}

uint64_t sub_100037AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LostModeInfoRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100037B58(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LostModeInfoRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100037BB4()
{
  unint64_t result = qword_10163ACD0;
  if (!qword_10163ACD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163ACD0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceEventSource(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LostModeInfoRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100037D64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LostModeInfoRecord.CodingKeys()
{
  return &type metadata for LostModeInfoRecord.CodingKeys;
}

uint64_t *sub_100037D9C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    char v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    char v16 = (uint64_t *)((char *)a1 + v14);
    uint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *char v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = (uint64_t *)((char *)a1 + v15);
    char v20 = (uint64_t *)((char *)a2 + v15);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)a1 + v22) = *(uint64_t *)((char *)a2 + v22);
    uint64_t v23 = a3[11];
    uint64_t v24 = (uint64_t *)((char *)a1 + v23);
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    uint64_t v26 = *v25;
    unint64_t v27 = v25[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v26, v27);
    *uint64_t v24 = v26;
    v24[1] = v27;
  }
  return a1;
}

uint64_t sub_100037F10(uint64_t a1, int *a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID();
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(a1 + a2[11]);
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];

  return sub_10001CFB8(v8, v9);
}

uint64_t *sub_100037FE8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = (uint64_t *)((char *)a1 + v13);
  char v16 = (uint64_t *)((char *)a2 + v13);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = (uint64_t *)((char *)a1 + v14);
  uint64_t v19 = (uint64_t *)((char *)a2 + v14);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
  uint64_t v22 = a3[11];
  uint64_t v23 = (uint64_t *)((char *)a1 + v22);
  uint64_t v24 = (uint64_t *)((char *)a2 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v25, v26);
  *uint64_t v23 = v25;
  v23[1] = v26;
  return a1;
}

uint64_t *sub_10003810C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  uint64_t v15 = a3[7];
  char v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  *char v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  uint64_t v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)((char *)a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  uint64_t v21 = a3[11];
  uint64_t v22 = (uint64_t *)((char *)a1 + v21);
  uint64_t v23 = (uint64_t *)((char *)a2 + v21);
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  sub_1000361E0(*v23, v25);
  uint64_t v26 = *v22;
  unint64_t v27 = v22[1];
  *uint64_t v22 = v24;
  v22[1] = v25;
  sub_10001CFB8(v26, v27);
  return a1;
}

char *sub_10003826C(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  uint64_t v12 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  return a1;
}

uint64_t *sub_100038354(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)&a2[v13];
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  uint64_t v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)&a2[v18];
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(void *)&a2[a3[9]];
  *(uint64_t *)((char *)a1 + v23) = *(void *)&a2[v23];
  uint64_t v24 = a3[11];
  uint64_t v25 = *(uint64_t *)((char *)a1 + v24);
  unint64_t v26 = *(uint64_t *)((char *)a1 + v24 + 8);
  *(_OWORD *)((char *)a1 + v24) = *(_OWORD *)&a2[v24];
  sub_10001CFB8(v25, v26);
  return a1;
}

uint64_t sub_100038478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003848C);
}

uint64_t sub_10003848C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t sub_100038560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100038574);
}

uint64_t sub_100038574(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  }
  return result;
}

uint64_t sub_100038638()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000386F0()
{
  return sub_100038D30(&qword_101639710, (void (*)(uint64_t))type metadata accessor for LostModeInfoRecord);
}

unint64_t sub_10003873C()
{
  unint64_t result = qword_101639718;
  if (!qword_101639718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639718);
  }
  return result;
}

unint64_t sub_100038794()
{
  unint64_t result = qword_101639720;
  if (!qword_101639720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639720);
  }
  return result;
}

unint64_t sub_1000387EC()
{
  unint64_t result = qword_101639728;
  if (!qword_101639728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639728);
  }
  return result;
}

uint64_t sub_100038840(uint64_t a1, uint64_t a2)
{
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)return 0; {
  uint64_t v4 = (int *)type metadata accessor for LostModeInfoRecord();
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0 || (static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = v4[7];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  uint64_t v9 = v8[1];
  if (v7)
  {
    if (!v9) {
      return 0;
    }
    BOOL v10 = *v6 == *v8 && v7 == v9;
    if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  uint64_t v11 = v4[8];
  unint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = *(void *)(a1 + v11 + 8);
  uint64_t v14 = (void *)(a2 + v11);
  uint64_t v15 = v14[1];
  if (!v13)
  {
    if (!v15) {
      goto LABEL_22;
    }
    return 0;
  }
  if (!v15) {
    return 0;
  }
  BOOL v16 = *v12 == *v14 && v13 == v15;
  if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
LABEL_22:
  if (*(double *)(a1 + v4[9]) != *(double *)(a2 + v4[9]) || *(double *)(a1 + v4[10]) != *(double *)(a2 + v4[10])) {
    return 0;
  }
  uint64_t v17 = v4[11];
  uint64_t v18 = *(void *)(a1 + v17);
  unint64_t v19 = *(void *)(a1 + v17 + 8);
  uint64_t v20 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];

  return _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v18, v19, v21, v22);
}

uint64_t sub_10003899C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EEA50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013EE1B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D754E656E6F6870 && a2 == 0xEB00000000726562 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x7369747265766461 && a2 == 0xED0000746E656D65)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_100038D30(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100038D78(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_100038E44(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_100038EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100038F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100038FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10003901C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100039098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000390AC);
}

uint64_t sub_1000390AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100039118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003912C);
}

uint64_t sub_10003912C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for KeyDropBeaconGroupAttributes()
{
  uint64_t result = qword_101639788;
  if (!qword_101639788) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000391E8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100039280(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_1016397C0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100039868();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  sub_10001035C(&qword_10163B040);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for KeyDropBeaconGroupAttributes();
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100039420@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v23 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_1016397D0);
  uint64_t v21 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for KeyDropBeaconGroupAttributes();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100039868();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  unint64_t v19 = v11;
  uint64_t v12 = v21;
  uint64_t v13 = v22;
  char v26 = 0;
  sub_10001035C((unint64_t *)&qword_10163B010);
  uint64_t v14 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v19, v6, v14);
  char v25 = 1;
  char v15 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v24);
  uint64_t v17 = (uint64_t)v19;
  uint64_t v16 = v20;
  v19[*(int *)(v9 + 20)] = v15;
  sub_1000398BC(v17, v16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_100039920(v17);
}

BOOL sub_100039730(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_100039748()
{
  if (*v0) {
    return 0x644974726170;
  }
  else {
    return 0x65644970756F7267;
  }
}

uint64_t sub_10003978C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100039C24(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000397B4(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000397C0(uint64_t a1)
{
  unint64_t v2 = sub_100039868();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000397FC(uint64_t a1)
{
  unint64_t v2 = sub_100039868();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100039838@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100039420(a1, a2);
}

uint64_t sub_100039850(void *a1)
{
  return sub_100039280(a1);
}

unint64_t sub_100039868()
{
  unint64_t result = qword_1016397C8;
  if (!qword_1016397C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016397C8);
  }
  return result;
}

uint64_t sub_1000398BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyDropBeaconGroupAttributes();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100039920(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeyDropBeaconGroupAttributes();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KeyDropBeaconGroupAttributes.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100039AD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_100039B00(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for KeyDropBeaconGroupAttributes.CodingKeys()
{
  return &type metadata for KeyDropBeaconGroupAttributes.CodingKeys;
}

unint64_t sub_100039B20()
{
  unint64_t result = qword_1016397D8;
  if (!qword_1016397D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016397D8);
  }
  return result;
}

unint64_t sub_100039B78()
{
  unint64_t result = qword_1016397E0;
  if (!qword_1016397E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016397E0);
  }
  return result;
}

unint64_t sub_100039BD0()
{
  unint64_t result = qword_1016397E8;
  if (!qword_1016397E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016397E8);
  }
  return result;
}

uint64_t sub_100039C24(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65644970756F7267 && a2 == 0xEF7265696669746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x644974726170 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100039D34()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D6D8);
  sub_100010324(v0, (uint64_t)qword_10170D6D8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100039DBC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_1016397F0);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_1016397F0);
  if (qword_101636838 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170D6D8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100039E84()
{
  if (qword_101636840 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_100010324(v0, (uint64_t)qword_1016397F0);
}

uint64_t sub_100039EE8()
{
  uint64_t result = Data.init(base64Encoded:options:)();
  qword_101639808 = result;
  unk_101639810 = v1;
  return result;
}

unint64_t sub_100039F28()
{
  uint64_t v1 = type metadata accessor for StandaloneBeacon();
  __chkstk_darwin(v1 - 8);
  int v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v4);
  char v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AirPodsLEPairingService.BeaconCreationResult();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100061774(v0, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingService.BeaconCreationResult);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10006170C((uint64_t)v12, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
    unint64_t v24 = 0;
    unint64_t v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    unint64_t v24 = 0xD000000000000014;
    unint64_t v25 = 0x80000001013F25A0;
    type metadata accessor for UUID();
    sub_100062074((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 41;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    unint64_t v15 = v24;
    uint64_t v16 = (uint64_t (*)(void))type metadata accessor for StandaloneBeacon;
    uint64_t v17 = (uint64_t)v3;
  }
  else
  {
    uint64_t v18 = (uint64_t)&v12[*(int *)(sub_10000588C(&qword_101639B90) + 48)];
    sub_10006170C((uint64_t)v12, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    sub_10006170C(v18, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v24 = 0;
    unint64_t v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    unint64_t v24 = 0xD000000000000010;
    unint64_t v25 = 0x80000001013F25C0;
    type metadata accessor for UUID();
    sub_100062074((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0x6E6F63616562202CLL;
    v20._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 41;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    unint64_t v15 = v24;
    sub_1000617DC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v16 = type metadata accessor for OwnedBeaconGroup;
    uint64_t v17 = (uint64_t)v9;
  }
  sub_1000617DC(v17, v16);
  return v15;
}

unint64_t sub_10003A344(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    strcpy((char *)v10, ".underlying(");
    BYTE5(v10[1]) = 0;
    HIWORD(v10[1]) = -5120;
    sub_1000600A8(a1);
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    v4._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 41;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    sub_100060090(a1);
    return v10[0];
  }
  if (a1 >> 62 == 1)
  {
    strcpy((char *)v10, ".response(");
    BYTE3(v10[1]) = 0;
    HIDWORD(v10[1]) = -369098752;
    unint64_t v2 = 0xE800000000000000;
    uint64_t v3 = 0x737365636375732ELL;
    switch((char)a1)
    {
      case 1:
        uint64_t v3 = 0x64696C61766E692ELL;
        unint64_t v2 = 0xED00006574617453;
        break;
      case 2:
        uint64_t v7 = 0x6769666E6F43;
        goto LABEL_10;
      case 3:
        uint64_t v7 = 0x6874676E654CLL;
LABEL_10:
        unint64_t v2 = v7 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
        goto LABEL_12;
      case 4:
        unint64_t v2 = 0xED00006D61726150;
LABEL_12:
        uint64_t v3 = 0x64696C61766E692ELL;
        break;
      case 5:
        uint64_t v3 = 0x64696C61766E692ELL;
        unint64_t v2 = 0xEF646E616D6D6F43;
        break;
      default:
        break;
    }
    unint64_t v8 = v2;
    String.append(_:)(*(Swift::String *)&v3);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 41;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    return v10[0];
  }
  unint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0x8000000000000001:
      unint64_t result = 0x74756F656D69742ELL;
      break;
    case 0x8000000000000002:
      unint64_t result = 0x4E64726F6365722ELL;
      break;
    case 0x8000000000000003:
    case 0x8000000000000008:
    case 0x800000000000000BLL:
      unint64_t result = 0xD000000000000012;
      break;
    case 0x8000000000000004:
      unint64_t result = 0xD000000000000010;
      break;
    case 0x8000000000000005:
      unint64_t result = 0x6F707075736E752ELL;
      break;
    case 0x8000000000000006:
      unint64_t result = 0x64696C61766E692ELL;
      break;
    case 0x8000000000000007:
      unint64_t result = 0xD000000000000011;
      break;
    case 0x8000000000000009:
      unint64_t result = 0x64696C61766E692ELL;
      break;
    case 0x800000000000000ALL:
      unint64_t result = 0xD000000000000016;
      break;
    case 0x800000000000000CLL:
      unint64_t result = 0xD000000000000013;
      break;
    case 0x800000000000000DLL:
      unint64_t result = 0xD000000000000016;
      break;
    case 0x800000000000000ELL:
      unint64_t result = 0x79646165726C612ELL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10003A710()
{
  return sub_10003A344(*v0);
}

uint64_t sub_10003A718(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_defaultActor_initialize();
  *(void *)(v1 + 112) = 0xD000000000000017;
  *(void *)(v1 + 120) = 0x8000000101347C30;
  id v4 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  id v5 = CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, *(uint64_t *)&kCLLocationAccuracyHundredMeters, 0);
  *(_OWORD *)(v1 + 192) = 0u;
  *(void *)(v1 + 144) = v5;
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = 0;
  *(void *)(v1 + 168) = 0xF000000000000000;
  *(unsigned char *)(v1 + 176) = 0;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_WORD *)(v1 + 272) = 0;
  *(unsigned char *)(v1 + 274) = 1;
  uint64_t v6 = static Data.random(bytes:)();
  unint64_t v8 = v7;
  type metadata accessor for AccessoryPairingInfo(0);
  swift_allocObject();
  sub_1000361E0(v6, v8);
  Swift::String v9 = sub_1001C8174(v6, v8);
  if (v9)
  {
    *(void *)(v1 + 184) = v9;
    type metadata accessor for AccessoryPairingValidator();
    uint64_t v10 = swift_allocObject();
    type metadata accessor for DeviceIdentityUtility();
    uint64_t v11 = swift_allocObject();
    swift_retain();
    swift_defaultActor_initialize();
    uint64_t v12 = v11 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    *(void *)(v11 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
    *(void *)(v11 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
    *(unsigned char *)(v11 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 9;
    *(void *)(v10 + 16) = v11;
    *(void *)(v10 + 24) = 0;
    sub_10001CFB8(v6, v8);
    swift_release();
    *(void *)(v1 + 128) = v10;
    *(void *)(v1 + 136) = a1;
  }
  else
  {
    if (qword_101636840 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_1016397F0);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Missing critical information to init pairing ", v17, 2u);
      swift_slowDealloc();

      sub_10001CFB8(v6, v8);
    }
    else
    {
      sub_10001CFB8(v6, v8);
    }
    swift_bridgeObjectRelease();

    swift_release();
    sub_100037A24(*(void *)(v2 + 160), *(void *)(v2 + 168));
    sub_10001DAB4(v2 + 192, &qword_101639A40);
    sub_10001DAB4(v2 + 232, &qword_101639A48);
    type metadata accessor for AirPodsLEPairingService();
    swift_defaultActor_destroy();
    swift_release();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v2;
}

uint64_t sub_10003AA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  *(void *)(v7 + 48) = a4;
  *(void *)(v7 + 56) = v6;
  *(unsigned char *)(v7 + 154) = a6;
  *(unsigned char *)(v7 + 153) = a5;
  *(void *)(v7 + 32) = a2;
  *(void *)(v7 + 40) = a3;
  *(void *)(v7 + 24) = a1;
  uint64_t v8 = type metadata accessor for MACAddress();
  *(void *)(v7 + 64) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v7 + 72) = v9;
  *(void *)(v7 + 80) = *(void *)(v9 + 64);
  *(void *)(v7 + 88) = swift_task_alloc();
  *(void *)(v7 + 96) = swift_task_alloc();
  return _swift_task_switch(sub_10003AB3C, v6, 0);
}

uint64_t sub_10003AB3C()
{
  uint64_t v1 = v0[7];
  if (*(unsigned char *)(v1 + 273))
  {
    sub_10005E370();
    swift_allocError();
    *uint64_t v2 = 0x800000000000000ELL;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    *(unsigned char *)(v1 + 273) = 1;
    type metadata accessor for CentralManager();
    id v5 = (void *)swift_task_alloc();
    v0[13] = v5;
    *id v5 = v0;
    v5[1] = sub_10003AC80;
    return static CentralManager.pairingCentralManager.getter();
  }
}

uint64_t sub_10003AC80(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 112) = a1;
  *(void *)(v4 + 120) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 56);
  if (v1) {
    uint64_t v6 = sub_10003B114;
  }
  else {
    uint64_t v6 = sub_10003ADB4;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10003ADB4()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 64);
  char v23 = *(unsigned char *)(v0 + 153);
  char v24 = *(unsigned char *)(v0 + 154);
  unint64_t v22 = *(void *)(v0 + 48);
  uint64_t v20 = *(void *)(v0 + 112);
  uint64_t v21 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v19 = *(void *)(v0 + 32);
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v8(v2, v6, v5);
  v8(v1, v19, v5);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = (v9 + 32) & ~v9;
  uint64_t v11 = (v4 + v9 + v10) & ~v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v0 + 128) = v12;
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = v20;
  uint64_t v13 = v12 + v10;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  v14(v13, v2, v5);
  v14(v12 + v11, v1, v5);
  unint64_t v15 = v12 + ((v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v15 = v21;
  *(void *)(v15 + 8) = v22;
  *(unsigned char *)(v15 + 16) = v23;
  *(unsigned char *)(v15 + 17) = v24;
  swift_retain();
  sub_100037A38(v21, v22);
  os_log_type_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v16;
  uint64_t v17 = sub_10000588C((uint64_t *)&unk_101638DC0);
  *os_log_type_t v16 = v0;
  v16[1] = sub_10003AFEC;
  return withTimeout<A>(_:block:)(v0 + 152, 0x40AAD21B3B700000, 3, &unk_101639A58, v12, v17);
}

uint64_t sub_10003AFEC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 56);
    uint64_t v4 = sub_10003B3AC;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 56);
    swift_release();
    uint64_t v4 = sub_10003B324;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10003B114()
{
  *(unsigned char *)(v0[7] + 273) = 0;
  if (qword_101636840 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_1016397F0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "AirPodsLEPairingService pairAirPods failed with error: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10003B324()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_release();
  *(unsigned char *)(v1 + 273) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10003B3AC()
{
  swift_release();
  swift_release();
  *(unsigned char *)(v0[7] + 273) = 0;
  if (qword_101636840 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_1016397F0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "AirPodsLEPairingService pairAirPods failed with error: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10003B5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(unsigned char *)(v8 + 121) = v10;
  *(unsigned char *)(v8 + 120) = a8;
  *(void *)(v8 + 80) = a6;
  *(void *)(v8 + 88) = a7;
  *(void *)(v8 + 64) = a4;
  *(void *)(v8 + 72) = a5;
  *(void *)(v8 + 48) = a2;
  *(void *)(v8 + 56) = a3;
  *(void *)(v8 + 40) = a1;
  return _swift_task_switch(sub_10003B60C, 0, 0);
}

uint64_t sub_10003B60C()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 96) = Strong;
  if (Strong)
  {
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, char))((char *)&dword_101639A68
                                                                                          + dword_101639A68);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10003B730;
    char v3 = *(unsigned char *)(v0 + 121);
    char v4 = *(unsigned char *)(v0 + 120);
    uint64_t v5 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v8 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 56);
    return v12(v9, v7, v8, v5, v6, v4, v3);
  }
  else
  {
    **(unsigned char **)(v0 + 40) = 1;
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_10003B730()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10003B878;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10003B84C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10003B84C()
{
  **(unsigned char **)(v0 + 40) = *(void *)(v0 + 96) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003B878()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003B8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  *(void *)(v8 + 5296) = v7;
  *(unsigned char *)(v8 + 6054) = a7;
  *(unsigned char *)(v8 + 6053) = a6;
  *(void *)(v8 + 5288) = a5;
  *(void *)(v8 + 5280) = a4;
  *(void *)(v8 + 5272) = a3;
  *(void *)(v8 + 5264) = a2;
  *(void *)(v8 + 5256) = a1;
  sub_10000588C(&qword_10164DBB0);
  *(void *)(v8 + 5304) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for BinaryDecoder();
  *(void *)(v8 + 5312) = v9;
  *(void *)(v8 + 5320) = *(void *)(v9 - 8);
  *(void *)(v8 + 5328) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for BinaryEncoder();
  *(void *)(v8 + 5336) = v10;
  *(void *)(v8 + 5344) = *(void *)(v10 - 8);
  *(void *)(v8 + 5352) = swift_task_alloc();
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_1016654A0);
  *(void *)(v8 + 5360) = v11;
  *(void *)(v8 + 5368) = *(void *)(v11 - 8);
  *(void *)(v8 + 5376) = swift_task_alloc();
  uint64_t v12 = sub_10000588C(&qword_101639A70);
  *(void *)(v8 + 5384) = v12;
  *(void *)(v8 + 5392) = *(void *)(v12 - 8);
  *(void *)(v8 + 5400) = swift_task_alloc();
  sub_10000588C(&qword_101639A78);
  *(void *)(v8 + 5408) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Peripheral.ConnectionOptions();
  *(void *)(v8 + 5416) = v13;
  *(void *)(v8 + 5424) = *(void *)(v13 - 8);
  *(void *)(v8 + 5432) = swift_task_alloc();
  sub_10000588C(&qword_101639A80);
  *(void *)(v8 + 5440) = swift_task_alloc();
  sub_10000588C(&qword_101639A88);
  *(void *)(v8 + 5448) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for AccessoryProductInfo();
  *(void *)(v8 + 5456) = v14;
  *(void *)(v8 + 5464) = *(void *)(v14 - 8);
  *(void *)(v8 + 5472) = swift_task_alloc();
  *(void *)(v8 + 5480) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for UUID();
  *(void *)(v8 + 5488) = v15;
  *(void *)(v8 + 5496) = *(void *)(v15 - 8);
  *(void *)(v8 + 5504) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10166BFA0);
  *(void *)(v8 + 5512) = swift_task_alloc();
  *(void *)(v8 + 5520) = swift_task_alloc();
  *(void *)(v8 + 5528) = swift_task_alloc();
  *(void *)(v8 + 5536) = swift_task_alloc();
  type metadata accessor for RawAccessoryMetadata(0);
  *(void *)(v8 + 5544) = swift_task_alloc();
  type metadata accessor for AccessoryMetadata(0);
  *(void *)(v8 + 5552) = swift_task_alloc();
  *(void *)(v8 + 5560) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for CentralManager.State();
  *(void *)(v8 + 5568) = v16;
  *(void *)(v8 + 5576) = *(void *)(v16 - 8);
  *(void *)(v8 + 5584) = swift_task_alloc();
  uint64_t v17 = type metadata accessor for MACAddress();
  *(void *)(v8 + 5592) = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  *(void *)(v8 + 5600) = v18;
  *(void *)(v8 + 5608) = *(void *)(v18 + 64);
  *(void *)(v8 + 5616) = swift_task_alloc();
  *(void *)(v8 + 5624) = swift_task_alloc();
  return _swift_task_switch(sub_10003BE50, v7, 0);
}

uint64_t sub_10003BE50()
{
  int64_t v31 = v0;
  uint64_t v1 = (char *)v0 + 6053;
  if (qword_101636840 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[703];
  uint64_t v3 = v0[700];
  uint64_t v4 = v0[699];
  uint64_t v5 = v0[658];
  uint64_t v6 = type metadata accessor for Logger();
  v0[704] = sub_100010324(v6, (uint64_t)qword_1016397F0);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[705] = v7;
  v0[706] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v2, v5, v4);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[703];
  uint64_t v12 = v0[700];
  uint64_t v13 = v0[699];
  if (v10)
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446210;
    sub_100062074((unint64_t *)&qword_101649EE0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[643] = sub_1008FA0F0(v15, v16, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Pairing AirPods LE with MAC address %{public}s", v14, 0xCu);
    swift_arrayDestroy();
    uint64_t v1 = (char *)v0 + 6053;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v12 + 8))(v0[703], v0[699]);
  }

  uint64_t v17 = v0[662];
  char v18 = v1[1];
  *(unsigned char *)(v17 + 272) = *v1;
  *(unsigned char *)(*(void *)(v17 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePair) = v18;
  if (qword_101637310 != -1) {
    swift_once();
  }
  sub_100010324(v6, (uint64_t)qword_10170F068);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Pairing LE using CCCKG2", v21, 2u);
    swift_slowDealloc();
  }
  uint64_t v22 = v0[698];
  uint64_t v23 = v0[697];
  uint64_t v24 = v0[696];

  (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v22, enum case for CentralManager.State.poweredOn(_:), v24);
  uint64_t v25 = type metadata accessor for CentralManager();
  uint64_t v26 = sub_100062074(&qword_101639A90, 255, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  unint64_t v27 = (void *)swift_task_alloc();
  v0[707] = v27;
  *unint64_t v27 = v0;
  v27[1] = sub_10003C280;
  uint64_t v28 = v0[698];
  return dispatch thunk of CentralManagerProtocol.await(state:)(v28, v25, v26);
}

uint64_t sub_10003C280()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 5664) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[698];
  uint64_t v4 = v2[697];
  uint64_t v5 = v2[696];
  uint64_t v6 = v2[662];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = sub_10003C6B8;
  }
  else {
    uint64_t v7 = sub_10003C3FC;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10003C3FC()
{
  uint64_t v1 = *(void *)(v0 + 5616);
  uint64_t v2 = *(void *)(v0 + 5600);
  uint64_t v3 = *(void *)(v0 + 5592);
  uint64_t v4 = *(void *)(v0 + 5296);
  uint64_t v5 = *(void *)(v0 + 5256);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 5640))(v1, *(void *)(v0 + 5264), v3);
  int v6 = *(_DWORD *)(v2 + 80);
  *(_DWORD *)(v0 + 6048) = v6;
  unint64_t v7 = (v6 + 32) & ~(unint64_t)v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 5672) = v8;
  *(void *)(v8 + 16) = v4;
  *(void *)(v8 + 24) = v5;
  uint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32);
  *(void *)(v0 + 5680) = v9;
  *(void *)(v0 + 5688) = (v2 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v9(v8 + v7, v1, v3);
  swift_retain();
  swift_retain();
  BOOL v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 5696) = v10;
  uint64_t v11 = type metadata accessor for Peripheral();
  *(void *)(v0 + 5704) = v11;
  void *v10 = v0;
  v10[1] = sub_10003C590;
  return withTimeout<A>(_:block:)(v0 + 5160, 0x40AAD21B3B700000, 3, &unk_101639AA0, v8, v11);
}

uint64_t sub_10003C590()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 5712) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 5296);
    uint64_t v4 = sub_10003CAA0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 5296);
    swift_release();
    uint64_t v4 = sub_10003C858;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10003C6B8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003C858()
{
  uint64_t v12 = v0;
  uint64_t v1 = v0[645];
  v0[715] = v1;
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[655] = v1;
    sub_100062074(&qword_101639B30, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[656] = sub_1008FA0F0(v5, v6, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Reading AIS from peripheral: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  BOOL v10 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_101641678 + dword_101641678);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[716] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10003CC48;
  uint64_t v8 = v0[693];
  return v10(v8, v1, 2);
}

uint64_t sub_10003CAA0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003CC48()
{
  *(void *)(*(void *)v1 + 5736) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10003CDF4;
  }
  else {
    uint64_t v2 = sub_10003CD5C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10003CD5C()
{
  uint64_t v1 = v0[717];
  sub_1001AA2CC(v0[693], v0[695]);
  v0[718] = v1;
  if (v1)
  {
    v0[719] = v1;
    uint64_t v2 = v0[662];
    uint64_t v3 = sub_10003D8A4;
  }
  else
  {
    uint64_t v2 = v0[662];
    uint64_t v3 = sub_10003CE18;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_10003CDF4()
{
  v0[719] = v0[717];
  return _swift_task_switch(sub_10003D8A4, v0[662], 0);
}

uint64_t sub_10003CE18()
{
  uint64_t v59 = v0;
  sub_100061774(*(void *)(v0 + 5560), *(void *)(v0 + 5552), type metadata accessor for AccessoryMetadata);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 5552);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v58[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    uint64_t v5 = sub_1001A9070();
    *(void *)(v0 + 5232) = sub_1008FA0F0(v5, v6, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000617DC(v3, type metadata accessor for AccessoryMetadata);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "AIS: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000617DC(*(void *)(v0 + 5552), type metadata accessor for AccessoryMetadata);
  }

  if (qword_1016371D8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 5096) = 0x7365547265646E75;
  *(void *)(v0 + 5104) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 6052) == 1)
  {
    uint64_t v7 = *(void *)(v0 + 5528);
    uint64_t v8 = *(void *)(v0 + 5504);
    uint64_t v9 = *(void *)(v0 + 5496);
    uint64_t v10 = *(void *)(v0 + 5488);
    uint64_t v11 = *(void *)(v0 + 5464);
    uint64_t v12 = *(void *)(v0 + 5456);
    type metadata accessor for BeaconStore(0);
    UUID.init()();
    sub_10114615C(v8, 0, v7);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v12);
    uint64_t v13 = *(void *)(v0 + 5744);
    uint64_t v14 = *(void *)(v0 + 5536);
    uint64_t v15 = *(void *)(v0 + 5512);
    uint64_t v16 = *(void *)(v0 + 5464);
    uint64_t v17 = *(void *)(v0 + 5456);
    sub_10001D608(*(void *)(v0 + 5528), v14, (uint64_t *)&unk_10166BFA0);
    sub_10001D074(v14, v15, (uint64_t *)&unk_10166BFA0);
    int v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v15, 1, v17);
    uint64_t v19 = *(void *)(v0 + 5512);
    if (v18 == 1)
    {
      sub_10001DAB4(v19, (uint64_t *)&unk_10166BFA0);
      os_log_type_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Missing product info!", v22, 2u);
        swift_slowDealloc();
      }
      uint64_t v23 = *(void *)(v0 + 5560);
      uint64_t v24 = *(void *)(v0 + 5536);

      sub_10005E370();
      swift_allocError();
      *uint64_t v25 = 0x800000000000000CLL;
      swift_willThrow();
      swift_release();
      goto LABEL_19;
    }
    uint64_t v30 = *(void *)(v0 + 5480);
    uint64_t v31 = *(void *)(v0 + 5472);
    sub_10006170C(v19, v30, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    sub_100061774(v30, v31, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = *(void *)(v0 + 5472);
    if (v34)
    {
      int64_t v36 = (uint8_t *)swift_slowAlloc();
      v58[0] = swift_slowAlloc();
      *(_DWORD *)int64_t v36 = 136446210;
      uint64_t v37 = sub_1011E56F0();
      *(void *)(v0 + 5224) = sub_1008FA0F0(v37, v38, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000617DC(v35, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Product info: %{public}s)", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000617DC(*(void *)(v0 + 5472), (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    }

    sub_1000452C4(*(void *)(v0 + 5560), *(void *)(v0 + 5480));
    if (v13)
    {
      uint64_t v23 = *(void *)(v0 + 5560);
      uint64_t v24 = *(void *)(v0 + 5536);
      uint64_t v39 = *(void *)(v0 + 5480);
      swift_release();
      sub_1000617DC(v39, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
LABEL_19:
      sub_10001DAB4(v24, (uint64_t *)&unk_10166BFA0);
      sub_1000617DC(v23, type metadata accessor for AccessoryMetadata);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
      return v40();
    }
    uint64_t v41 = *(void *)(v0 + 5448);
    uint64_t v42 = *(void *)(v0 + 5440);
    uint64_t v43 = *(void *)(v0 + 5408);
    uint64_t v44 = *(void *)(v0 + 5296);
    unint64_t v45 = *(void *)(v0 + 5288);
    uint64_t v46 = *(void *)(v0 + 5280);
    uint64_t v47 = *(void *)(v44 + 160);
    unint64_t v48 = *(void *)(v44 + 168);
    *(void *)(v44 + 160) = v46;
    *(void *)(v44 + 168) = v45;
    sub_100037A38(v46, v45);
    sub_100037A24(v47, v48);
    uint64_t v49 = type metadata accessor for ConnectUseCase();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v41, 1, 1, v49);
    sub_10000588C(&qword_101639AA8);
    uint64_t v50 = swift_allocObject();
    *(_OWORD *)(v50 + 16) = xmmword_101342130;
    static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
    *(void *)(v0 + 5128) = v50;
    sub_100062074(&qword_101639AB0, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions);
    sub_10000588C(&qword_101639AB8);
    sub_100062734(&qword_101639AC0, &qword_101639AB8);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v51 = type metadata accessor for PeripheralPairingInfo();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v43, 1, 1, v51);
    Peripheral.Options.init(connectionOptions:pairingInfo:)();
    uint64_t v52 = type metadata accessor for Peripheral.Options();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v42, 0, 1, v52);
    uint64_t v53 = sub_100062074(&qword_101639AC8, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    *(void *)(v0 + 5776) = v53;
    uint64_t v54 = (void *)swift_task_alloc();
    *(void *)(v0 + 5784) = v54;
    *uint64_t v54 = v0;
    v54[1] = sub_10003DB78;
    uint64_t v55 = *(void *)(v0 + 5704);
    uint64_t v56 = *(void *)(v0 + 5448);
    uint64_t v57 = *(void *)(v0 + 5440);
    return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(v56, v57, v55, v53);
  }
  else
  {
    type metadata accessor for AccessoryMetadataManager();
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 5760) = v26;
    void *v26 = v0;
    v26[1] = sub_10003DA4C;
    uint64_t v27 = *(void *)(v0 + 5560);
    uint64_t v28 = *(void *)(v0 + 5520);
    return sub_1002F7378(v28, v27, 3);
  }
}

uint64_t sub_10003D8A4()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003DA4C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 5768) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 5296);
  if (v0) {
    uint64_t v4 = sub_100042E28;
  }
  else {
    uint64_t v4 = sub_1000426B0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10003DB78()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 5792) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[681];
  uint64_t v4 = v2[680];
  uint64_t v5 = v2[662];
  sub_10001DAB4(v4, &qword_101639A80);
  sub_10001DAB4(v3, &qword_101639A88);
  if (v0) {
    uint64_t v6 = sub_10003DF54;
  }
  else {
    uint64_t v6 = sub_10003DCEC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10003DCEC()
{
  uint64_t v13 = v0;
  swift_retain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[715];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[651] = v3;
    sub_100062074(&qword_101639B30, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[652] = sub_1008FA0F0(v5, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Connected to peripheral: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  v0[725] = type metadata accessor for Service();
  Identifier.init(stringLiteral:)();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[726] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10003E150;
  uint64_t v8 = v0[722];
  uint64_t v9 = v0[713];
  uint64_t v10 = v0[675];
  return dispatch thunk of PeripheralProtocol.subscript.getter(v10, v9, v8);
}

uint64_t sub_10003DF54()
{
  uint64_t v1 = v0[695];
  uint64_t v2 = v0[692];
  uint64_t v3 = v0[685];
  swift_release();
  sub_1000617DC(v3, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_10001DAB4(v2, (uint64_t *)&unk_10166BFA0);
  sub_1000617DC(v1, type metadata accessor for AccessoryMetadata);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10003E150(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[727] = a1;
  v4[728] = v1;
  swift_task_dealloc();
  uint64_t v5 = v3[675];
  uint64_t v6 = v3[674];
  uint64_t v7 = v3[673];
  uint64_t v8 = v3[662];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v1) {
    uint64_t v9 = sub_10003E588;
  }
  else {
    uint64_t v9 = sub_10003E2D8;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_10003E2D8()
{
  v0[729] = type metadata accessor for Characteristic();
  Identifier.init(stringLiteral:)();
  uint64_t v1 = sub_100062074(&qword_101639AD0, 255, (void (*)(uint64_t))&type metadata accessor for Service);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[730] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10003E3E4;
  uint64_t v3 = v0[725];
  uint64_t v4 = v0[672];
  return dispatch thunk of ServiceProtocol.subscript.getter(v4, v3, v1);
}

uint64_t sub_10003E3E4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[731] = a1;
  v4[732] = v1;
  swift_task_dealloc();
  uint64_t v5 = v3[672];
  uint64_t v6 = v3[671];
  uint64_t v7 = v3[670];
  uint64_t v8 = v3[662];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release();
  if (v1) {
    uint64_t v9 = sub_10003EA2C;
  }
  else {
    uint64_t v9 = sub_10003E784;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_10003E588()
{
  uint64_t v1 = v0[695];
  uint64_t v2 = v0[692];
  uint64_t v3 = v0[685];
  swift_release();
  sub_1000617DC(v3, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_10001DAB4(v2, (uint64_t *)&unk_10166BFA0);
  sub_1000617DC(v1, type metadata accessor for AccessoryMetadata);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10003E784()
{
  uint64_t v16 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Discovered FindMy services and Pairing characteristic.", v3, 2u);
    swift_slowDealloc();
  }

  swift_retain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[715];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    v0[649] = v7;
    sub_100062074(&qword_101639B30, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[650] = sub_1008FA0F0(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Pairing peripheral: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v11 = (void *)swift_task_alloc();
  v0[733] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10003EC28;
  uint64_t v12 = v0[722];
  uint64_t v13 = v0[713];
  return dispatch thunk of PeripheralProtocol.pair()(v13, v12);
}

uint64_t sub_10003EA2C()
{
  uint64_t v1 = v0[695];
  uint64_t v2 = v0[692];
  uint64_t v3 = v0[685];
  swift_release();
  sub_1000617DC(v3, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_10001DAB4(v2, (uint64_t *)&unk_10166BFA0);
  sub_1000617DC(v1, type metadata accessor for AccessoryMetadata);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10003EC28()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 5872) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 5296);
  if (v0) {
    uint64_t v4 = sub_10003F478;
  }
  else {
    uint64_t v4 = sub_10003ED54;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10003ED54()
{
  uint64_t v31 = v0;
  uint64_t v1 = (uint64_t)(v0 + 167);
  uint64_t v2 = (uint64_t)(v0 + 233);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v29 = (uint64_t)(v0 + 233);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = v0[715];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v30[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[647] = v5;
    uint64_t v1 = (uint64_t)(v0 + 167);
    sub_100062074(&qword_101639B30, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[648] = sub_1008FA0F0(v7, v8, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Paired peripheral: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = (uint64_t)(v0 + 233);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  BinaryEncoder.init()();
  BinaryDecoder.init()();
  sub_10005E7B8((uint64_t)(v0 + 200));
  sub_10005E7E8((uint64_t)(v0 + 200), v1);
  SharingCircleWildAdvertisementKey.init(key:)(v1);
  sub_10005E7E8((uint64_t)(v0 + 200), (uint64_t)(v0 + 266));
  sub_10001D608(v1, v2, &qword_101639AD8);
  uint64_t v9 = v0[734];
  sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_1000361E0);
  sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_1000361E0);
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    v30[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    sub_10005E7E8((uint64_t)(v0 + 266), (uint64_t)(v0 + 35));
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_1000361E0);
    uint64_t v13 = String.init<A>(describing:)();
    v0[646] = sub_1008FA0F0(v13, v14, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Sending command: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
  }

  sub_10005E7E8((uint64_t)(v0 + 266), (uint64_t)(v0 + 332));
  v0[735] = sub_10005EC8C();
  v0[736] = BinaryEncoder.encode<A>(_:)();
  v0[737] = v15;
  if (v9)
  {
    uint64_t v16 = (uint64_t)(v0 + 299);
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 138543362;
      swift_errorRetain();
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      v0[639] = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v20 = v21;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Pairing command error: %{public}@", v19, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v16 = (uint64_t)(v0 + 299);
      swift_slowDealloc();

      sub_10005ECE0(v29);
      swift_errorRelease();
    }
    else
    {
      sub_10005ECE0(v29);
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    sub_10005EEC4((uint64_t)(v0 + 365));
    sub_10001D608((uint64_t)(v0 + 365), v16, &qword_101639AD8);
    v0[747] = v9;
    uint64_t v25 = (void *)swift_task_alloc();
    v0[748] = v25;
    *uint64_t v25 = v0;
    v25[1] = sub_1000406D4;
    uint64_t v26 = v0[722];
    uint64_t v27 = v0[713];
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v27, v26);
  }
  else
  {
    uint64_t v22 = sub_100062074(&qword_101639AE8, 255, (void (*)(uint64_t))&type metadata accessor for Characteristic);
    uint64_t v23 = (void *)swift_task_alloc();
    v0[738] = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_10003F680;
    uint64_t v24 = v0[729];
    return dispatch thunk of CharacteristicProtocol.mtu.getter(v24, v22);
  }
}

uint64_t sub_10003F478()
{
  uint64_t v1 = v0[695];
  uint64_t v2 = v0[692];
  uint64_t v3 = v0[685];
  swift_release();
  swift_release();
  sub_1000617DC(v3, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_10001DAB4(v2, (uint64_t *)&unk_10166BFA0);
  sub_1000617DC(v1, type metadata accessor for AccessoryMetadata);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10003F680(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 5912) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 5296);
  if (v1)
  {
    uint64_t v6 = sub_10003F9A4;
  }
  else
  {
    *(void *)(v4 + 5920) = a1;
    uint64_t v6 = sub_10003F7AC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10003F7AC()
{
  uint64_t v1 = fragment(data:mtu:)();
  sub_10005E7E8((uint64_t)(v0 + 266), (uint64_t)(v0 + 431));
  if (sub_10005EF04((uint64_t)(v0 + 431)) == 5)
  {
    uint64_t v2 = v0[731];
    sub_10006242C((uint64_t)(v0 + 431));
    uint64_t v3 = swift_allocObject();
    v0[741] = v3;
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = v1;
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[742] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10003FC18;
    uint64_t v5 = (char *)&type metadata for () + 8;
    uint64_t v6 = &unk_101639B18;
    uint64_t v7 = v3;
  }
  else
  {
    uint64_t v8 = v0[731];
    uint64_t v9 = swift_allocObject();
    v0[744] = v9;
    *(void *)(v9 + 16) = v8;
    *(void *)(v9 + 24) = v1;
    swift_retain();
    unint64_t v10 = (void *)swift_task_alloc();
    v0[745] = v10;
    void *v10 = v0;
    v10[1] = sub_10003FD40;
    uint64_t v5 = (char *)&type metadata for Data;
    uint64_t v6 = &unk_101639AF8;
    uint64_t v4 = v0 + 635;
    uint64_t v7 = v9;
  }
  return withTimeout<A>(_:block:)(v4, 0x40AAD21B3B700000, 3, v6, v7, v5);
}

uint64_t sub_10003F9A4()
{
  sub_10001CFB8(v0[736], v0[737]);
  sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
  uint64_t v1 = v0[739];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[639] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Pairing command error: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10005ECE0((uint64_t)(v0 + 233));
    swift_errorRelease();
  }
  else
  {
    sub_10005ECE0((uint64_t)(v0 + 233));
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10005EEC4((uint64_t)(v0 + 365));
  sub_10001D608((uint64_t)(v0 + 365), (uint64_t)(v0 + 299), &qword_101639AD8);
  v0[747] = v1;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[748] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000406D4;
  uint64_t v8 = v0[722];
  uint64_t v9 = v0[713];
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v9, v8);
}

uint64_t sub_10003FC18()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 5944) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 5296);
    uint64_t v4 = sub_100040450;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 5296);
    swift_release();
    uint64_t v4 = sub_10003FE68;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10003FD40()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 5968) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 5296);
    uint64_t v4 = sub_100041A38;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 5296);
    swift_release();
    uint64_t v4 = sub_1000412D4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10003FE68()
{
  uint64_t v41 = v0;
  uint64_t v1 = v0 + 808;
  sub_10005E7E8(v0 + 2128, v0 + 1072);
  uint64_t v2 = (uint64_t *)sub_10006242C(v0 + 1072);
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  sub_1000361E0(*v2, v4);
  sub_1000361E0(v3, v4);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  uint64_t v39 = v0 + 2128;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_10005E7E8(v0 + 2128, v0 + 544);
    sub_1000361E0(v3, v4);
    uint64_t v8 = String.init<A>(describing:)();
    *(void *)(v0 + 5152) = sub_1008FA0F0(v8, v9, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10005E844(v0 + 2128, (void (*)(void))sub_10001CFB8);
    sub_10005E844(v0 + 2128, (void (*)(void))sub_10001CFB8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Sent final command: %s", v7, 0xCu);
    swift_arrayDestroy();
    uint64_t v1 = v0 + 808;
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10005ECE0(v0 + 1864);
  }
  else
  {
    sub_10005ECE0(v0 + 1864);
    sub_10005E844(v0 + 2128, (void (*)(void))sub_10001CFB8);
    sub_10005E844(v0 + 2128, (void (*)(void))sub_10001CFB8);
  }
  *(unsigned char *)(*(void *)(v0 + 5296) + 176) = 9;
  sub_10005EEC4(v1);
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Pairing completed succesfully!", v12, 2u);
    swift_slowDealloc();
  }
  int v13 = *(unsigned __int8 *)(v0 + 6053);

  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  if (v13 == 1)
  {
    unint64_t v17 = *(void *)(v0 + 5896);
    uint64_t v18 = *(void *)(v0 + 5888);
    if (v16)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Sent pairing complete, skip ackRequest for standalone.", v19, 2u);
      swift_slowDealloc();
      sub_10001CFB8(v18, v17);

      sub_10005E844(v39, (void (*)(void))sub_10001CFB8);
    }
    else
    {
      sub_10005E844(v39, (void (*)(void))sub_10001CFB8);
      sub_10001CFB8(v18, v17);
    }
  }
  else
  {
    if (v16)
    {
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Sent pairing complete, continue with ackRequest.", v20, 2u);
      swift_slowDealloc();
    }
    uint64_t v37 = *(void *)(v0 + 5888);
    unint64_t v38 = *(void *)(v0 + 5896);
    int64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 5680);
    uint64_t v21 = *(unsigned __int8 *)(v0 + 6048);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 5640);
    uint64_t v23 = *(void *)(v0 + 5616);
    uint64_t v24 = *(void *)(v0 + 5592);
    uint64_t v25 = *(void *)(v0 + 5304);
    uint64_t v26 = *(void *)(v0 + 5296);
    uint64_t v27 = *(void *)(v0 + 5272);

    uint64_t v28 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v25, 1, 1, v28);
    v22(v23, v27, v24);
    uint64_t v30 = sub_100062074(&qword_101639A38, v29, (void (*)(uint64_t))type metadata accessor for AirPodsLEPairingService);
    uint64_t v31 = (char *)swift_allocObject();
    *((void *)v31 + 2) = v26;
    *((void *)v31 + 3) = v30;
    *((void *)v31 + 4) = v26;
    v36(&v31[(v21 + 40) & ~v21], v23, v24);
    swift_retain_n();
    sub_1008F5E44(v25, (uint64_t)&unk_101639B28, (uint64_t)v31);
    sub_10005E844(v39, (void (*)(void))sub_10001CFB8);
    swift_release();
    sub_10001CFB8(v37, v38);
    uint64_t v1 = v0 + 808;
  }
  sub_10001D608(v1, v0 + 2392, &qword_101639AD8);
  *(void *)(v0 + 5976) = 0;
  uint64_t v32 = (void *)swift_task_alloc();
  *(void *)(v0 + 5984) = v32;
  void *v32 = v0;
  v32[1] = sub_1000406D4;
  uint64_t v33 = *(void *)(v0 + 5776);
  uint64_t v34 = *(void *)(v0 + 5704);
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v34, v33);
}

uint64_t sub_100040450()
{
  unint64_t v1 = v0[737];
  uint64_t v2 = v0[736];
  sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
  sub_10001CFB8(v2, v1);
  swift_release();
  uint64_t v3 = v0[743];
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v6 = 138543362;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[639] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Pairing command error: %{public}@", v6, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10005ECE0((uint64_t)(v0 + 233));
    swift_errorRelease();
  }
  else
  {
    sub_10005ECE0((uint64_t)(v0 + 233));
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10005EEC4((uint64_t)(v0 + 365));
  sub_10001D608((uint64_t)(v0 + 365), (uint64_t)(v0 + 299), &qword_101639AD8);
  v0[747] = v3;
  unint64_t v9 = (void *)swift_task_alloc();
  v0[748] = v9;
  void *v9 = v0;
  v9[1] = sub_1000406D4;
  uint64_t v10 = v0[722];
  uint64_t v11 = v0[713];
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v11, v10);
}

uint64_t sub_1000406D4()
{
  uint64_t v2 = (void *)*v1;
  v2[749] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[662];
    return _swift_task_switch(sub_10004097C, v3, 0);
  }
  else
  {
    unint64_t v4 = (void *)swift_task_alloc();
    v2[750] = v4;
    *unint64_t v4 = v2;
    v4[1] = sub_100040850;
    uint64_t v5 = v2[722];
    uint64_t v6 = v2[713];
    return dispatch thunk of PeripheralProtocol.unpair()(v6, v5);
  }
}

uint64_t sub_100040850()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 6008) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 5296);
  if (v0) {
    unint64_t v4 = sub_100041064;
  }
  else {
    unint64_t v4 = sub_100040BEC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10004097C()
{
  uint64_t v11 = v0[695];
  uint64_t v9 = v0[685];
  uint64_t v10 = v0[692];
  uint64_t v1 = v0[669];
  uint64_t v2 = v0[668];
  uint64_t v3 = v0[667];
  uint64_t v4 = v0[666];
  uint64_t v5 = v0[665];
  uint64_t v6 = v0[664];
  swift_release();
  swift_release();
  swift_errorRelease();
  sub_10005ECE0((uint64_t)(v0 + 299));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1000617DC(v9, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_10001DAB4(v10, (uint64_t *)&unk_10166BFA0);
  sub_1000617DC(v11, type metadata accessor for AccessoryMetadata);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100040BEC()
{
  if (v0[747])
  {
    uint64_t v19 = v0[692];
    uint64_t v20 = v0[695];
    uint64_t v17 = v0[669];
    uint64_t v18 = v0[685];
    uint64_t v1 = v0[668];
    uint64_t v16 = v0[667];
    uint64_t v2 = v0[666];
    uint64_t v3 = v0[665];
    uint64_t v4 = v0[664];
    swift_errorRetain();
    swift_willThrow();
    swift_release();
    swift_release();
    swift_errorRelease();
    sub_10005ECE0((uint64_t)(v0 + 299));
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v17, v16);
    sub_1000617DC(v18, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    sub_10001DAB4(v19, (uint64_t *)&unk_10166BFA0);
    sub_1000617DC(v20, type metadata accessor for AccessoryMetadata);
  }
  else
  {
    uint64_t v14 = v0[692];
    uint64_t v15 = v0[695];
    uint64_t v13 = v0[685];
    uint64_t v6 = v0[669];
    uint64_t v7 = v0[668];
    uint64_t v8 = v0[667];
    uint64_t v9 = v0[666];
    uint64_t v10 = v0[665];
    uint64_t v11 = v0[664];
    swift_release();
    swift_release();
    sub_10005ECE0((uint64_t)(v0 + 299));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    sub_1000617DC(v13, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    sub_10001DAB4(v14, (uint64_t *)&unk_10166BFA0);
    sub_1000617DC(v15, type metadata accessor for AccessoryMetadata);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100041064()
{
  uint64_t v11 = v0[695];
  uint64_t v9 = v0[685];
  uint64_t v10 = v0[692];
  uint64_t v1 = v0[669];
  uint64_t v2 = v0[668];
  uint64_t v3 = v0[667];
  uint64_t v4 = v0[666];
  uint64_t v5 = v0[665];
  uint64_t v6 = v0[664];
  swift_release();
  swift_release();
  swift_errorRelease();
  sub_10005ECE0((uint64_t)(v0 + 299));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1000617DC(v9, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_10001DAB4(v10, (uint64_t *)&unk_10166BFA0);
  sub_1000617DC(v11, type metadata accessor for AccessoryMetadata);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000412D4()
{
  uint64_t v33 = v0;
  uint64_t v1 = (uint64_t)(v0 + 497);
  uint64_t v2 = v0[635];
  v0[752] = v2;
  unint64_t v3 = v0[636];
  v0[753] = v3;
  sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_1000361E0);
  sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_1000361E0);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v32[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    sub_10005E7E8((uint64_t)(v0 + 266), (uint64_t)(v0 + 398));
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_1000361E0);
    uint64_t v7 = String.init<A>(describing:)();
    v0[640] = sub_1008FA0F0(v7, v8, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
    uint64_t v1 = (uint64_t)(v0 + 497);
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Sent command: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
  }

  uint64_t v9 = v0[746];
  unint64_t v10 = sub_10005EFE0();
  BinaryDecoder.decode<A>(_:from:)();
  if (v9)
  {
    unint64_t v11 = v0[737];
    uint64_t v12 = v0[736];
    sub_10001CFB8(v2, v3);
    sub_10001CFB8(v12, v11);
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138543362;
      swift_errorRetain();
      uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
      v0[639] = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v17;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Pairing command error: %{public}@", v15, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10005ECE0((uint64_t)(v0 + 233));
      swift_errorRelease();
    }
    else
    {
      sub_10005ECE0((uint64_t)(v0 + 233));
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    sub_10005EEC4((uint64_t)(v0 + 365));
    sub_10001D608((uint64_t)(v0 + 365), (uint64_t)(v0 + 299), &qword_101639AD8);
    v0[747] = v9;
    uint64_t v23 = (void *)swift_task_alloc();
    v0[748] = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_1000406D4;
    uint64_t v24 = v0[722];
    uint64_t v25 = v0[713];
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v25, v24);
  }
  else
  {
    sub_10005E7E8(v1, (uint64_t)(v0 + 530));
    sub_10005E844((uint64_t)(v0 + 530), (void (*)(void))sub_1000361E0);
    sub_10005E844((uint64_t)(v0 + 530), (void (*)(void))sub_1000361E0);
    uint64_t v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      v32[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      sub_10005E7E8((uint64_t)(v0 + 530), (uint64_t)(v0 + 464));
      sub_10005E844((uint64_t)(v0 + 530), (void (*)(void))sub_1000361E0);
      uint64_t v21 = String.init<A>(describing:)();
      v0[642] = sub_1008FA0F0(v21, v22, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10005E844((uint64_t)(v0 + 530), (void (*)(void))sub_10001CFB8);
      sub_10005E844((uint64_t)(v0 + 530), (void (*)(void))sub_10001CFB8);
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v19, "Received response: %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10005E844((uint64_t)(v0 + 530), (void (*)(void))sub_10001CFB8);
      sub_10005E844((uint64_t)(v0 + 530), (void (*)(void))sub_10001CFB8);
    }

    uint64_t v26 = v0[735];
    v0[632] = &type metadata for AirPodsSWPairingCommand;
    v0[633] = v10;
    v0[634] = v26;
    uint64_t v27 = swift_allocObject();
    v0[629] = v27;
    sub_10005E7E8((uint64_t)(v0 + 530), v27 + 16);
    sub_10005E844((uint64_t)(v0 + 530), (void (*)(void))sub_1000361E0);
    uint64_t v28 = (void *)swift_task_alloc();
    v0[754] = v28;
    *uint64_t v28 = v0;
    v28[1] = sub_100041CBC;
    uint64_t v29 = v0[715];
    uint64_t v30 = v0[659];
    return sub_100046848((uint64_t)(v0 + 2), v29, (uint64_t)(v0 + 629), v30);
  }
}

uint64_t sub_100041A38()
{
  unint64_t v1 = v0[737];
  uint64_t v2 = v0[736];
  sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
  sub_10001CFB8(v2, v1);
  swift_release();
  uint64_t v3 = v0[746];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[639] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Pairing command error: %{public}@", v6, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10005ECE0((uint64_t)(v0 + 233));
    swift_errorRelease();
  }
  else
  {
    sub_10005ECE0((uint64_t)(v0 + 233));
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10005EEC4((uint64_t)(v0 + 365));
  sub_10001D608((uint64_t)(v0 + 365), (uint64_t)(v0 + 299), &qword_101639AD8);
  v0[747] = v3;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[748] = v9;
  void *v9 = v0;
  v9[1] = sub_1000406D4;
  uint64_t v10 = v0[722];
  uint64_t v11 = v0[713];
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v11, v10);
}

uint64_t sub_100041CBC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 6040) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 5296);
    uint64_t v4 = sub_1000423FC;
  }
  else
  {
    uint64_t v5 = v2 + 16;
    uint64_t v6 = v2 + 5032;
    uint64_t v7 = v2 + 4504;
    uint64_t v8 = *(void *)(v2 + 5296);
    sub_10005E7E8(v5, v7);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6);
    uint64_t v4 = sub_100041DFC;
    uint64_t v3 = v8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100041DFC()
{
  uint64_t v27 = v0;
  unint64_t v1 = v0[753];
  uint64_t v2 = v0[752];
  unint64_t v24 = v0[737];
  uint64_t v3 = v0[736];
  sub_10005ECE0((uint64_t)(v0 + 233));
  sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
  sub_10005E844((uint64_t)(v0 + 530), (void (*)(void))sub_10001CFB8);
  sub_10001CFB8(v2, v1);
  sub_10001CFB8(v3, v24);
  sub_10005E7E8((uint64_t)(v0 + 563), (uint64_t)(v0 + 596));
  SharingCircleWildAdvertisementKey.init(key:)(v0 + 596);
  sub_10005E844((uint64_t)(v0 + 2), (void (*)(void))sub_1000361E0);
  sub_10005E7E8((uint64_t)(v0 + 563), (uint64_t)(v0 + 266));
  uint64_t v25 = (uint64_t)(v0 + 233);
  sub_10001D608((uint64_t)(v0 + 596), (uint64_t)(v0 + 233), &qword_101639AD8);
  uint64_t v4 = v0[755];
  sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_1000361E0);
  sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_1000361E0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_10005E7E8((uint64_t)(v0 + 266), (uint64_t)(v0 + 35));
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_1000361E0);
    uint64_t v8 = String.init<A>(describing:)();
    v0[646] = sub_1008FA0F0(v8, v9, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Sending command: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
  }

  sub_10005E7E8((uint64_t)(v0 + 266), (uint64_t)(v0 + 332));
  v0[735] = sub_10005EC8C();
  v0[736] = BinaryEncoder.encode<A>(_:)();
  v0[737] = v10;
  if (v4)
  {
    uint64_t v11 = (uint64_t)(v0 + 299);
    sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v14 = 138543362;
      swift_errorRetain();
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      v0[639] = v16;
      uint64_t v11 = (uint64_t)(v0 + 299);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = v16;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Pairing command error: %{public}@", v14, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10005ECE0(v25);
      swift_errorRelease();
    }
    else
    {
      sub_10005ECE0(v25);
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    sub_10005EEC4((uint64_t)(v0 + 365));
    sub_10001D608((uint64_t)(v0 + 365), v11, &qword_101639AD8);
    v0[747] = v4;
    uint64_t v20 = (void *)swift_task_alloc();
    v0[748] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_1000406D4;
    uint64_t v21 = v0[722];
    uint64_t v22 = v0[713];
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v22, v21);
  }
  else
  {
    uint64_t v17 = sub_100062074(&qword_101639AE8, 255, (void (*)(uint64_t))&type metadata accessor for Characteristic);
    uint64_t v18 = (void *)swift_task_alloc();
    v0[738] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_10003F680;
    uint64_t v19 = v0[729];
    return dispatch thunk of CharacteristicProtocol.mtu.getter(v19, v17);
  }
}

uint64_t sub_1000423FC()
{
  unint64_t v1 = v0[753];
  uint64_t v2 = v0[752];
  unint64_t v3 = v0[737];
  uint64_t v4 = v0[736];
  sub_10005E844((uint64_t)(v0 + 266), (void (*)(void))sub_10001CFB8);
  sub_10005E844((uint64_t)(v0 + 530), (void (*)(void))sub_10001CFB8);
  sub_10001CFB8(v2, v1);
  sub_10001CFB8(v4, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 629));
  uint64_t v5 = v0[755];
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    unint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138543362;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[639] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Pairing command error: %{public}@", v8, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10005ECE0((uint64_t)(v0 + 233));
    swift_errorRelease();
  }
  else
  {
    sub_10005ECE0((uint64_t)(v0 + 233));
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10005EEC4((uint64_t)(v0 + 365));
  sub_10001D608((uint64_t)(v0 + 365), (uint64_t)(v0 + 299), &qword_101639AD8);
  v0[747] = v5;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[748] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1000406D4;
  uint64_t v12 = v0[722];
  uint64_t v13 = v0[713];
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v13, v12);
}

uint64_t sub_1000426B0()
{
  uint64_t v44 = v0;
  uint64_t v1 = v0[721];
  uint64_t v2 = v0[692];
  uint64_t v3 = v0[689];
  uint64_t v4 = v0[683];
  uint64_t v5 = v0[682];
  sub_10001D608(v0[690], v2, (uint64_t *)&unk_10166BFA0);
  sub_10001D074(v2, v3, (uint64_t *)&unk_10166BFA0);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v5);
  uint64_t v7 = v0[689];
  if (v6 == 1)
  {
    sub_10001DAB4(v7, (uint64_t *)&unk_10166BFA0);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing product info!", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = v0[695];
    uint64_t v12 = v0[692];

    sub_10005E370();
    swift_allocError();
    *uint64_t v13 = 0x800000000000000CLL;
    swift_willThrow();
    swift_release();
    goto LABEL_10;
  }
  uint64_t v14 = v0[685];
  uint64_t v15 = v0[684];
  sub_10006170C(v7, v14, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_100061774(v14, v15, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v19 = v0[684];
  if (v18)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    uint64_t v21 = sub_1011E56F0();
    v0[653] = sub_1008FA0F0(v21, v22, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000617DC(v19, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Product info: %{public}s)", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000617DC(v0[684], (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  }

  sub_1000452C4(v0[695], v0[685]);
  if (v1)
  {
    uint64_t v11 = v0[695];
    uint64_t v12 = v0[692];
    uint64_t v23 = v0[685];
    swift_release();
    sub_1000617DC(v23, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
LABEL_10:
    sub_10001DAB4(v12, (uint64_t *)&unk_10166BFA0);
    sub_1000617DC(v11, type metadata accessor for AccessoryMetadata);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
  uint64_t v26 = v0[681];
  uint64_t v27 = v0[680];
  uint64_t v28 = v0[676];
  uint64_t v29 = v0[662];
  unint64_t v30 = v0[661];
  uint64_t v31 = v0[660];
  uint64_t v32 = *(void *)(v29 + 160);
  unint64_t v33 = *(void *)(v29 + 168);
  *(void *)(v29 + 160) = v31;
  *(void *)(v29 + 168) = v30;
  sub_100037A38(v31, v30);
  sub_100037A24(v32, v33);
  uint64_t v34 = type metadata accessor for ConnectUseCase();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v26, 1, 1, v34);
  sub_10000588C(&qword_101639AA8);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_101342130;
  static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
  v0[641] = v35;
  sub_100062074(&qword_101639AB0, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions);
  sub_10000588C(&qword_101639AB8);
  sub_100062734(&qword_101639AC0, &qword_101639AB8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v36 = type metadata accessor for PeripheralPairingInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v28, 1, 1, v36);
  Peripheral.Options.init(connectionOptions:pairingInfo:)();
  uint64_t v37 = type metadata accessor for Peripheral.Options();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v27, 0, 1, v37);
  uint64_t v38 = sub_100062074(&qword_101639AC8, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  v0[722] = v38;
  uint64_t v39 = (void *)swift_task_alloc();
  v0[723] = v39;
  *uint64_t v39 = v0;
  v39[1] = sub_10003DB78;
  uint64_t v40 = v0[713];
  uint64_t v41 = v0[681];
  uint64_t v42 = v0[680];
  return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(v41, v42, v40, v38);
}

uint64_t sub_100042E28()
{
  uint64_t v1 = *(void *)(v0 + 5560);
  swift_release();
  sub_1000617DC(v1, type metadata accessor for AccessoryMetadata);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100042FF0(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v3[8] = *v2;
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  sub_10000588C(&qword_101665500);
  v3[13] = swift_task_alloc();
  uint64_t v5 = sub_10000588C(&qword_101639C78);
  v3[14] = v5;
  v3[15] = *(void *)(v5 - 8);
  v3[16] = swift_task_alloc();
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016665C0);
  v3[17] = v6;
  v3[18] = *(void *)(v6 - 8);
  v3[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ScanMode();
  v3[20] = v7;
  v3[21] = *(void *)(v7 - 8);
  v3[22] = swift_task_alloc();
  uint64_t v8 = sub_10000588C(&qword_101665490);
  v3[23] = v8;
  v3[24] = *(void *)(v8 - 8);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for CentralManager.State();
  v3[27] = v9;
  v3[28] = *(void *)(v9 - 8);
  v3[29] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for MACAddress();
  v3[30] = v10;
  v3[31] = *(void *)(v10 - 8);
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  return _swift_task_switch(sub_100043374, v2, 0);
}

uint64_t sub_100043374()
{
  uint64_t v23 = v0;
  if (qword_101636840 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[31];
  uint64_t v4 = v0[6];
  uint64_t v5 = type metadata accessor for Logger();
  v0[34] = sub_100010324(v5, (uint64_t)qword_1016397F0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[35] = v6;
  v0[36] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[33];
  uint64_t v11 = v0[30];
  uint64_t v12 = v0[31];
  if (v9)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446210;
    sub_100062074((unint64_t *)&qword_101649EE0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_1008FA0F0(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Starting discovery scan for peripherals matching macAddress: %{public}s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v0[33], v0[30]);
  }

  v0[37] = v16;
  (*(void (**)(void, void, void))(v0[28] + 104))(v0[29], enum case for CentralManager.State.poweredOn(_:), v0[27]);
  uint64_t v17 = type metadata accessor for CentralManager();
  v0[38] = v17;
  uint64_t v18 = sub_100062074(&qword_101639A90, 255, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  v0[39] = v18;
  uint64_t v19 = (void *)swift_task_alloc();
  v0[40] = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_1000436A4;
  uint64_t v20 = v0[29];
  return dispatch thunk of CentralManagerProtocol.await(state:)(v20, v17, v18);
}

uint64_t sub_1000436A4()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[29];
  uint64_t v4 = v2[28];
  uint64_t v5 = v2[27];
  uint64_t v6 = v2[7];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = sub_100043B68;
  }
  else {
    uint64_t v7 = sub_100043820;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100043820()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = (uint64_t *)v0[22];
  uint64_t v3 = v0[20];
  sub_10000588C(&qword_101639C80);
  sub_10000588C(&qword_101639A70);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101347BA0;
  type metadata accessor for Service();
  Identifier.init(stringLiteral:)();
  Identifier.init(stringLiteral:)();
  *uint64_t v1 = v4;
  (*(void (**)(uint64_t *, void, uint64_t))(v2 + 104))(v1, enum case for ScanMode.serviceIdentifiers(_:), v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[42] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000439EC;
  uint64_t v6 = v0[38];
  uint64_t v7 = v0[39];
  uint64_t v8 = v0[26];
  uint64_t v9 = v0[22];
  return dispatch thunk of CentralManagerProtocol.scanForPeripherals(scanMode:garbageCollectInterval:)(v8, v9, 0xD02AB486CEDC0000, 0, v6, v7);
}

uint64_t sub_1000439EC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[22];
  uint64_t v4 = v2[21];
  uint64_t v5 = v2[20];
  uint64_t v6 = v2[7];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = sub_100043E7C;
  }
  else {
    uint64_t v7 = sub_100043C60;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100043B68()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100043C60()
{
  uint64_t v1 = v0[8];
  (*(void (**)(void, void, void))(v0[24] + 16))(v0[25], v0[26], v0[23]);
  *(void *)(swift_allocObject() + 16) = v1;
  v0[44] = type metadata accessor for Peripheral();
  sub_100062734(&qword_101639C98, &qword_101665490);
  AsyncCompactMapSequence.init(_:transform:)();
  AsyncCompactMapSequence.base.getter();
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncCompactMapSequence.transform.getter();
  AsyncCompactMapSequence.Iterator.init(_:transform:)();
  uint64_t v3 = sub_100062074(&qword_101639A38, v2, (void (*)(uint64_t))type metadata accessor for AirPodsLEPairingService);
  v0[45] = v3;
  uint64_t v4 = v0[7];
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016665F0 + dword_1016665F0);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[46] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100043F74;
  return v7(v4, v3);
}

uint64_t sub_100043E7C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100043F74(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 376) = a1;
  *(void *)(v4 + 384) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 56);
  if (v1) {
    uint64_t v6 = sub_1000443A4;
  }
  else {
    uint64_t v6 = sub_1000440A8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000440A8()
{
  if (!v0[47])
  {
LABEL_6:
    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing peripheral after scanning!", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = v0[26];
    uint64_t v8 = v0[23];
    uint64_t v9 = v0[24];
    uint64_t v11 = v0[18];
    uint64_t v10 = v0[19];
    uint64_t v12 = v0[17];

    sub_10005E370();
    swift_allocError();
    *uint64_t v13 = 0x800000000000000BLL;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Task cancelled!", v3, 2u);
      swift_slowDealloc();
    }

    swift_release();
    goto LABEL_6;
  }
  uint64_t v16 = (void *)swift_task_alloc();
  v0[49] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1000446D0;
  uint64_t v17 = v0[38];
  uint64_t v18 = v0[39];
  uint64_t v19 = v0[6];
  return dispatch thunk of CentralManagerProtocol.retrievePeripheral(macAddress:)(v19, v17, v18);
}

uint64_t sub_1000443A4()
{
  (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error during scan: %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing peripheral after scanning!", v8, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[26];
  uint64_t v10 = v0[23];
  uint64_t v11 = v0[24];
  uint64_t v13 = v0[18];
  uint64_t v12 = v0[19];
  uint64_t v14 = v0[17];

  sub_10005E370();
  swift_allocError();
  *unint64_t v15 = 0x800000000000000BLL;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_1000446D0(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 400) = a1;
  *(void *)(v4 + 408) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 56);
  if (v1) {
    uint64_t v6 = sub_100044F90;
  }
  else {
    uint64_t v6 = sub_100044804;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100044804()
{
  uint64_t v47 = v0;
  if (*(void *)(v0 + 400))
  {
    uint64_t v2 = *(void *)(v0 + 88);
    uint64_t v1 = *(void *)(v0 + 96);
    uint64_t v3 = *(void *)(v0 + 72);
    uint64_t v4 = *(void *)(v0 + 80);
    sub_100062074(&qword_101639AC8, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    dispatch thunk of PeripheralProtocol.id.getter();
    dispatch thunk of PeripheralProtocol.id.getter();
    char v5 = static Identifier.== infix(_:_:)();
    swift_release();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v6(v2, v3);
    v6(v1, v3);
    if (v5)
    {
      uint64_t v7 = *(void *)(v0 + 208);
      uint64_t v9 = *(void *)(v0 + 184);
      uint64_t v8 = *(void *)(v0 + 192);
      uint64_t v11 = *(void *)(v0 + 144);
      uint64_t v10 = *(void *)(v0 + 152);
      uint64_t v12 = *(void *)(v0 + 136);
      (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v13 = *(uint64_t (**)(uint64_t))(v0 + 8);
      uint64_t v14 = *(void *)(v0 + 376);
      return v13(v14);
    }
    else
    {
      swift_release();
      uint64_t v24 = *(void *)(v0 + 360);
      uint64_t v25 = *(void *)(v0 + 56);
      uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016665F0 + dword_1016665F0);
      uint64_t v26 = (void *)swift_task_alloc();
      *(void *)(v0 + 368) = v26;
      void *v26 = v0;
      v26[1] = sub_100043F74;
      return v45(v25, v24);
    }
  }
  else
  {
    (*(void (**)(void, void, void))(v0 + 280))(*(void *)(v0 + 256), *(void *)(v0 + 48), *(void *)(v0 + 240));
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(void *)(v0 + 256);
    uint64_t v20 = *(void *)(v0 + 240);
    if (v18)
    {
      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      sub_100062074((unint64_t *)&qword_101649EE0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 24) = sub_1008FA0F0(v22, v23, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v44(v19, v20);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Missing peripheral for %{public}s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v0 + 296))(v19, v20);
    }

    sub_10005E370();
    swift_allocError();
    *uint64_t v27 = 0x800000000000000BLL;
    swift_willThrow();
    swift_release();
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 138543362;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 16) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v31 = v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Error during scan: %{public}@", v30, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Missing peripheral after scanning!", v35, 2u);
      swift_slowDealloc();
    }
    uint64_t v36 = *(void *)(v0 + 208);
    uint64_t v38 = *(void *)(v0 + 184);
    uint64_t v37 = *(void *)(v0 + 192);
    uint64_t v40 = *(void *)(v0 + 144);
    uint64_t v39 = *(void *)(v0 + 152);
    uint64_t v41 = *(void *)(v0 + 136);

    swift_allocError();
    *uint64_t v42 = 0x800000000000000BLL;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v43 = *(uint64_t (**)(void))(v0 + 8);
    return v43();
  }
}

uint64_t sub_100044F90()
{
  swift_release();
  (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error during scan: %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing peripheral after scanning!", v8, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[26];
  uint64_t v10 = v0[23];
  uint64_t v11 = v0[24];
  uint64_t v13 = v0[18];
  uint64_t v12 = v0[19];
  uint64_t v14 = v0[17];

  sub_10005E370();
  swift_allocError();
  *unint64_t v15 = 0x800000000000000BLL;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_1000452C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v80 = a1;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v82 = (uint64_t)&v73 - v11;
  uint64_t v81 = type metadata accessor for AccessoryProductInfo();
  uint64_t v12 = *(int *)(v81 + 92);
  uint64_t v83 = a2;
  uint64_t v13 = (uint64_t *)(a2 + v12);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  if (v15 >> 60 == 15)
  {
    uint64_t v16 = qword_101636848;
    swift_retain();
    if (v16 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_101639808;
    unint64_t v18 = qword_101639810;
    sub_100037A38(qword_101639808, qword_101639810);
  }
  else
  {
    swift_retain();
    uint64_t v17 = v14;
    unint64_t v18 = v15;
  }
  sub_100037A38(v14, v15);
  uint64_t v19 = sub_100F81FEC(v17, v18);
  unint64_t v21 = v20;
  swift_release();
  sub_100037A24(v17, v18);
  if (v21 >> 60 == 15)
  {
    if (qword_101636840 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_1016397F0);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to generate E1 blob.", v25, 2u);
      swift_slowDealloc();
    }

    sub_10005E370();
    swift_allocError();
    void *v26 = 0x8000000000000000;
    return swift_willThrow();
  }
  else
  {
    uint64_t v28 = sub_100F87378();
    if (v29 >> 60 == 15)
    {
      if (qword_101636840 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100010324(v30, (uint64_t)qword_1016397F0);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        unint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Unable to generate FindMyNetworkId.", v33, 2u);
        swift_slowDealloc();
      }

      sub_10005E370();
      swift_allocError();
      *os_log_type_t v34 = 0x8000000000000000;
      swift_willThrow();
      return sub_100037A24(v19, v21);
    }
    else
    {
      uint64_t v35 = v28;
      unint64_t v36 = v29;
      uint64_t v77 = v10;
      if (qword_101636840 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      uint64_t v38 = sub_100010324(v37, (uint64_t)qword_1016397F0);
      sub_1000361E0(v19, v21);
      sub_1000361E0(v19, v21);
      uint64_t v76 = v38;
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.debug.getter();
      BOOL v41 = os_log_type_enabled(v39, v40);
      uint64_t v78 = v5;
      uint64_t v79 = v4;
      if (v41)
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        uint64_t v75 = swift_slowAlloc();
        v84[0] = v75;
        *(_DWORD *)uint64_t v42 = 136315138;
        uint64_t v73 = v42 + 4;
        uint64_t v74 = v42;
        sub_1000361E0(v19, v21);
        uint64_t v43 = v35;
        uint64_t v44 = Data.hexString.getter();
        unint64_t v46 = v45;
        sub_100037A24(v19, v21);
        uint64_t v47 = v44;
        uint64_t v35 = v43;
        uint64_t v85 = sub_1008FA0F0(v47, v46, v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100037A24(v19, v21);
        sub_100037A24(v19, v21);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "E1: %s", v74, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100037A24(v19, v21);
        sub_100037A24(v19, v21);
      }

      sub_1000361E0(v35, v36);
      sub_1000361E0(v35, v36);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = v35;
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        uint64_t v75 = swift_slowAlloc();
        v84[0] = v75;
        *(_DWORD *)uint64_t v51 = 136315138;
        uint64_t v74 = v51 + 4;
        sub_1000361E0(v35, v36);
        uint64_t v52 = Data.hexString.getter();
        uint64_t v76 = v19;
        unint64_t v54 = v53;
        sub_100037A24(v50, v36);
        uint64_t v85 = sub_1008FA0F0(v52, v54, v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v19 = v76;
        swift_bridgeObjectRelease();
        sub_100037A24(v50, v36);
        sub_100037A24(v50, v36);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "findMyNetworkId: %s", v51, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v55 = v78;
      }
      else
      {
        sub_100037A24(v35, v36);
        sub_100037A24(v35, v36);

        uint64_t v55 = v78;
        uint64_t v50 = v35;
      }
      uint64_t v56 = *(void *)(v55 + 184);
      uint64_t v57 = type metadata accessor for AccessoryMetadata(0);
      uint64_t v58 = v80;
      swift_retain();
      *(void *)(v56 + 88) = sub_1009CD110();
      *(void *)(v56 + 96) = v59;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v60 = *(void *)(v55 + 184);
      unint64_t v61 = (uint64_t *)(v58 + *(int *)(v57 + 20));
      uint64_t v62 = *v61;
      unint64_t v63 = v61[1];
      uint64_t v64 = *(void *)(v60 + 104);
      unint64_t v65 = *(void *)(v60 + 112);
      *(void *)(v60 + 104) = *v61;
      *(void *)(v60 + 112) = v63;
      sub_1000361E0(v62, v63);
      sub_100037A24(v64, v65);
      uint64_t v66 = (uint64_t *)(*(void *)(v55 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId);
      uint64_t v67 = *v66;
      unint64_t v68 = v66[1];
      uint64_t *v66 = v50;
      v66[1] = v36;
      sub_1000361E0(v50, v36);
      sub_100037A24(v67, v68);
      uint64_t v69 = *(void *)(v55 + 184);
      uint64_t v70 = v82;
      sub_100061774(v83, v82, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v81 - 8) + 56))(v70, 0, 1);
      uint64_t v71 = (uint64_t)v77;
      sub_10001D608(v70, (uint64_t)v77, (uint64_t *)&unk_10166BFA0);
      uint64_t v72 = v69 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
      swift_beginAccess();
      swift_retain();
      sub_100062604(v71, v72, (uint64_t *)&unk_10166BFA0);
      swift_endAccess();
      swift_release();
      CurrentLocationMonitor.requestLocation()();
      sub_100037A24(v50, v36);
      return sub_100037A24(v19, v21);
    }
  }
}

uint64_t sub_100045B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Characteristic();
  uint64_t v6 = sub_100062074(&qword_101639AE8, 255, (void (*)(uint64_t))&type metadata accessor for Characteristic);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10001D2E4;
  return dispatch thunk of CharacteristicProtocol.writeWithoutResponse(data:)(a3, v5, v6);
}

uint64_t sub_100045C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100033F68;
  return sub_100045CC0(a5);
}

uint64_t sub_100045CC0(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  uint64_t v3 = type metadata accessor for MACAddress();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_100045DA8, v1, 0);
}

uint64_t sub_100045DA8()
{
  unint64_t v23 = v0;
  if (qword_101636840 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[6];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_1016397F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[7];
  uint64_t v9 = v0[8];
  uint64_t v11 = v0[6];
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446210;
    sub_100062074((unint64_t *)&qword_101649EE0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "ackPairing with %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[8], v0[6]);
  }

  uint64_t v15 = v0[4];
  uint64_t v16 = v0[5];
  uint64_t v18 = sub_100062074(&qword_101639A38, v17, (void (*)(uint64_t))type metadata accessor for AirPodsLEPairingService);
  uint64_t v19 = swift_task_alloc();
  v0[9] = v19;
  *(void *)(v19 + 16) = v15;
  *(void *)(v19 + 24) = v16;
  unint64_t v20 = (void *)swift_task_alloc();
  v0[10] = v20;
  *unint64_t v20 = v0;
  v20[1] = sub_1000460D8;
  return withCheckedContinuation<A>(isolation:function:_:)(v20, v15, v18, 0xD00000000000001ELL, 0x80000001013F23B0, sub_10005F31C, v19, (char *)&type metadata for () + 8);
}

uint64_t sub_1000460D8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_100046204, v1, 0);
}

uint64_t sub_100046204()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100046264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  uint64_t v5 = sub_10000588C(&qword_101639C68);
  v3[3] = v5;
  v3[4] = *(void *)(v5 - 8);
  uint64_t v6 = swift_task_alloc();
  v3[5] = v6;
  uint64_t v7 = type metadata accessor for Characteristic();
  uint64_t v8 = sub_100062074(&qword_101639AE8, 255, (void (*)(uint64_t))&type metadata accessor for Characteristic);
  uint64_t v9 = (void *)swift_task_alloc();
  v3[6] = v9;
  void *v9 = v3;
  v9[1] = sub_1000463D0;
  return dispatch thunk of CharacteristicProtocol.write(data:)(v6, a3, v7, v8);
}

uint64_t sub_1000463D0()
{
  uint64_t v2 = (void *)*v1;
  v2[7] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10004670C, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[8] = v3;
    uint64_t v4 = sub_100062734(&qword_101665560, &qword_101639C68);
    *uint64_t v3 = v2;
    v3[1] = sub_100046580;
    uint64_t v5 = v2[3];
    return AsyncSequence<>.reassemble()(v5, v4);
  }
}

uint64_t sub_100046580(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)*v3;
  v6[9] = v2;
  swift_task_dealloc();
  uint64_t v7 = v6[5];
  uint64_t v8 = v6[4];
  uint64_t v9 = v6[3];
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    uint64_t v10 = sub_1000467E4;
  }
  else
  {
    v6[10] = a2;
    v6[11] = a1;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    uint64_t v10 = sub_100046770;
  }
  return _swift_task_switch(v10, 0, 0);
}

uint64_t sub_10004670C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100046770()
{
  *(int8x16_t *)v0[1].i64[0] = vextq_s8(v0[5], v0[5], 8uLL);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0->i64[1];
  return v1();
}

uint64_t sub_1000467E4()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100046848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[678] = v4;
  v5[677] = a4;
  v5[676] = a3;
  v5[675] = a2;
  v5[674] = a1;
  uint64_t v6 = *(void *)(type metadata accessor for StandaloneBeacon() - 8);
  v5[679] = v6;
  v5[680] = *(void *)(v6 + 64);
  v5[681] = swift_task_alloc();
  v5[682] = swift_task_alloc();
  uint64_t v7 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  v5[683] = v7;
  v5[684] = *(void *)(v7 + 64);
  v5[685] = swift_task_alloc();
  v5[686] = swift_task_alloc();
  v5[687] = type metadata accessor for AirPodsLEPairingService.BeaconCreationResult();
  v5[688] = swift_task_alloc();
  v5[689] = swift_task_alloc();
  v5[690] = sub_10000588C(&qword_101639B50);
  v5[691] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0);
  v5[692] = v8;
  v5[693] = *(void *)(v8 - 8);
  v5[694] = swift_task_alloc();
  v5[695] = swift_task_alloc();
  type metadata accessor for String.Encoding();
  v5[696] = swift_task_alloc();
  sub_10000588C(&qword_10163BB20);
  v5[697] = swift_task_alloc();
  v5[698] = swift_task_alloc();
  v5[699] = swift_task_alloc();
  v5[700] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v5[701] = v9;
  v5[702] = *(void *)(v9 - 8);
  v5[703] = swift_task_alloc();
  v5[704] = swift_task_alloc();
  v5[705] = swift_task_alloc();
  v5[706] = swift_task_alloc();
  v5[707] = swift_task_alloc();
  v5[708] = swift_task_alloc();
  v5[709] = swift_task_alloc();
  v5[710] = swift_task_alloc();
  v5[711] = swift_task_alloc();
  v5[712] = swift_task_alloc();
  v5[713] = swift_task_alloc();
  v5[714] = swift_task_alloc();
  v5[715] = swift_task_alloc();
  v5[716] = swift_task_alloc();
  v5[717] = swift_task_alloc();
  v5[718] = swift_task_alloc();
  v5[719] = swift_task_alloc();
  v5[720] = swift_task_alloc();
  v5[721] = swift_task_alloc();
  v5[722] = swift_task_alloc();
  v5[723] = swift_task_alloc();
  v5[724] = swift_task_alloc();
  v5[725] = swift_task_alloc();
  v5[726] = swift_task_alloc();
  v5[727] = swift_task_alloc();
  v5[728] = swift_task_alloc();
  v5[729] = swift_task_alloc();
  v5[730] = swift_task_alloc();
  v5[731] = swift_task_alloc();
  v5[732] = swift_task_alloc();
  v5[733] = swift_task_alloc();
  v5[734] = swift_task_alloc();
  v5[735] = swift_task_alloc();
  v5[736] = swift_task_alloc();
  v5[737] = swift_task_alloc();
  v5[738] = swift_task_alloc();
  v5[739] = swift_task_alloc();
  v5[740] = swift_task_alloc();
  v5[741] = swift_task_alloc();
  v5[742] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016477E0);
  v5[743] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for MACAddress();
  v5[744] = v10;
  v5[745] = *(void *)(v10 - 8);
  v5[746] = swift_task_alloc();
  return _swift_task_switch(sub_100046DC0, v4, 0);
}

uint64_t sub_100046DC0()
{
  uint64_t v1 = swift_retain();
  sub_1000D12D8(v1);
  swift_release();
  sub_10001CD44(v0 + 644, v0[647]);
  uint64_t v4 = (uint64_t (*)(void))((char *)&dword_1016390D8 + dword_1016390D8);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[747] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100046E98;
  return v4();
}

uint64_t sub_100046E98(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 5424);
  *(void *)(*(void *)v1 + 5984) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100046FB0, v2, 0);
}

uint64_t sub_100046FB0()
{
  uint64_t v1 = (uint64_t)(v0 + 644);
  if (v0[748])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = type metadata accessor for Peripheral();
    uint64_t v3 = sub_100062074(&qword_101639AC8, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[749] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100047454;
    uint64_t v5 = v0[743];
    return dispatch thunk of PeripheralProtocol.macAddress.getter(v5, v2, v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v6 = 0xD000000000000010;
    v6[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100047454()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 5424);
  swift_task_dealloc();
  return _swift_task_switch(sub_100047564, v1, 0);
}

uint64_t sub_100047564()
{
  v709 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0[745];
  uint64_t v3 = v0[744];
  uint64_t v4 = v0[743];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) == 1)
  {
    uint64_t v5 = v1[742];
    uint64_t v6 = v1[702];
    uint64_t v7 = v1[701];
    sub_10001DAB4(v4, (uint64_t *)&unk_1016477E0);
    uint64_t v8 = sub_100039E84();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    uint64_t v11 = sub_101020788(0);
    os_log_type_t v12 = v10;
    BOOL v13 = os_log_type_enabled(v9, v10);
    uint64_t v14 = v1[742];
    uint64_t v15 = v1[702];
    uint64_t v16 = v1[701];
    if (v13)
    {
      uint64_t v17 = (uint8_t *)sub_1008F9FAC();
      uint64_t v707 = 0;
      *(void *)&v708[0] = 0;
      *(_WORD *)uint64_t v17 = 0;
      uint64_t v706 = (uint64_t)(v17 + 2);
      sub_100E08120((uint64_t)v11, (uint64_t)&v706, (uint64_t)&v707, (uint64_t)v708);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v12, "Peripheral is missing MAC address!", v17, 2u);
      sub_1008F9FA0();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    sub_10005E370();
    swift_allocError();
    *BOOL v41 = 0x8000000000000008;
    swift_willThrow();
    swift_release();
    goto LABEL_57;
  }
  uint64_t v18 = v1[676];
  (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v1[746], v4, v3);
  sub_10005F6AC(v18, (uint64_t)(v1 + 610));
  sub_10000588C(&qword_101639B58);
  char v19 = swift_dynamicCast();
  uint64_t v20 = v1[702];
  uint64_t v21 = v1[701];
  if ((v19 & 1) == 0)
  {
    uint64_t v42 = v1[740];
    uint64_t v43 = v1[676];
    uint64_t v44 = sub_100039E84();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v42, v44, v21);
    sub_10005F6AC(v43, (uint64_t)(v1 + 616));
    uint64_t v45 = swift_allocObject();
    sub_10005F748((long long *)v1 + 308, (_OWORD *)(v45 + 16));
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    uint64_t v48 = swift_allocObject();
    *(unsigned char *)(v48 + 16) = 34;
    uint64_t v49 = swift_allocObject();
    *(unsigned char *)(v49 + 16) = 8;
    uint64_t v50 = swift_allocObject();
    *(void *)(v50 + 16) = sub_10005F760;
    *(void *)(v50 + 24) = v45;
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = sub_10005F790;
    *(void *)(v51 + 24) = v50;
    sub_10000588C(&qword_101639B60);
    uint64_t v52 = swift_allocObject();
    sub_1004B810C(v52, 3);
    *unint64_t v53 = sub_10005F778;
    v53[1] = v48;
    v53[2] = sub_100065514;
    v53[3] = v49;
    v53[4] = sub_10005F7D0;
    v53[5] = v51;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v46, v47))
    {
      unint64_t v54 = (uint8_t *)sub_1008F9FAC();
      uint64_t v706 = 0;
      uint64_t v707 = swift_slowAlloc();
      *(_WORD *)unint64_t v54 = 258;
      v705 = v54 + 2;
      *(void *)&v708[0] = sub_10005F778;
      *((void *)&v708[0] + 1) = v48;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
      swift_release();
      *(void *)&v708[0] = sub_100065514;
      *((void *)&v708[0] + 1) = v49;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
      swift_release();
      *(void *)&v708[0] = sub_10005F7D0;
      *((void *)&v708[0] + 1) = v51;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
      uint64_t v55 = v1[740];
      uint64_t v56 = v1[702];
      uint64_t v57 = v1[701];
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Invalid command from payload %{public}s", v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    }
    else
    {
      uint64_t v87 = v1[740];
      uint64_t v88 = v1[702];
      uint64_t v89 = v1[701];

      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v89);
    }
    uint64_t v90 = v1[746];
    uint64_t v91 = v1[745];
    uint64_t v92 = v1[744];
    sub_10005E370();
    swift_allocError();
    void *v93 = 0x8000000000000006;
    swift_willThrow();
    swift_release();
    goto LABEL_56;
  }
  uint64_t v22 = (uint64_t)(v1 + 69);
  uint64_t v23 = (uint64_t)(v1 + 432);
  uint64_t v24 = v1[741];
  sub_10005E7E8((uint64_t)(v1 + 366), (uint64_t)(v1 + 69));
  sub_10005E7E8((uint64_t)(v1 + 366), (uint64_t)(v1 + 432));
  uint64_t v25 = sub_100039E84();
  v1[750] = v25;
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  v1[751] = v26;
  v1[752] = (v20 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v700 = v25;
  v702 = v26;
  ((void (*)(uint64_t))v26)(v24);
  uint64_t v27 = swift_allocObject();
  sub_10005E7E8((uint64_t)(v1 + 69), v27 + 16);
  sub_10005E844((uint64_t)(v1 + 69), (void (*)(void))sub_1000361E0);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  uint64_t v30 = swift_allocObject();
  *(unsigned char *)(v30 + 16) = 34;
  uint64_t v31 = swift_allocObject();
  *(unsigned char *)(v31 + 16) = 8;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = sub_10005F870;
  *(void *)(v32 + 24) = v27;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = sub_1000654EC;
  *(void *)(v33 + 24) = v32;
  v1[753] = sub_10000588C(&qword_101639B60);
  uint64_t v34 = swift_allocObject();
  sub_1004B810C(v34, 3);
  *uint64_t v35 = sub_100065514;
  v35[1] = v30;
  v35[2] = sub_100065514;
  v35[3] = v31;
  v35[4] = sub_100065500;
  v35[5] = v33;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v697 = (uint64_t)(v1 + 69);
  if (os_log_type_enabled(v28, v29))
  {
    unint64_t v36 = (uint8_t *)sub_1008F9FAC();
    uint64_t v706 = 0;
    uint64_t v707 = swift_slowAlloc();
    *(_WORD *)unint64_t v36 = 258;
    v705 = v36 + 2;
    *(void *)&v708[0] = sub_100065514;
    *((void *)&v708[0] + 1) = v30;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
    swift_release();
    *(void *)&v708[0] = sub_100065514;
    *((void *)&v708[0] + 1) = v31;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
    swift_release();
    *(void *)&v708[0] = sub_100065500;
    *((void *)&v708[0] + 1) = v33;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
    uint64_t v37 = v1[741];
    uint64_t v38 = v1[702];
    uint64_t v39 = v1[701];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Received command: %{public}s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_1008F9FA0();

    os_log_type_t v40 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v40(v37, v39);
    uint64_t v22 = (uint64_t)(v1 + 69);
  }
  else
  {
    uint64_t v58 = v1[741];
    uint64_t v59 = v1[702];
    uint64_t v60 = v1[701];

    swift_release();
    swift_release();
    swift_release();
    os_log_type_t v40 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v40(v58, v60);
  }
  v1[754] = v40;
  sub_10005E7E8(v22, (uint64_t)(v1 + 333));
  int v61 = sub_10005EF04((uint64_t)(v1 + 333));
  v695 = v40;
  if (v61 != 4)
  {
    if (v61 != 2)
    {
      if (!v61)
      {
        uint64_t v62 = v1[739];
        uint64_t v63 = v1[701];
        uint64_t v64 = (uint64_t *)sub_10006242C((uint64_t)(v1 + 333));
        uint64_t v65 = *v64;
        v1[755] = *v64;
        uint64_t v66 = v64[1];
        v1[756] = v66;
        uint64_t v67 = v64[2];
        v1[757] = v67;
        uint64_t v68 = v64[3];
        v1[758] = v68;
        v702(v62, v700, v63);
        uint64_t v69 = (void *)swift_allocObject();
        uint64_t v683 = v66;
        uint64_t v688 = v65;
        v69[2] = v65;
        v69[3] = v66;
        uint64_t v673 = v68;
        uint64_t v676 = v67;
        v69[4] = v67;
        v69[5] = v68;
        sub_10005E7E8((uint64_t)(v1 + 432), (uint64_t)(v1 + 498));
        uint64_t v70 = (uint64_t *)sub_10006242C((uint64_t)(v1 + 498));
        uint64_t v72 = *v70;
        unint64_t v71 = v70[1];
        uint64_t v73 = v70[2];
        unint64_t v74 = v70[3];
        sub_1000361E0(*v70, v71);
        sub_1000361E0(v73, v74);
        unint64_t v669 = v71;
        sub_1000361E0(v72, v71);
        unint64_t v670 = v74;
        uint64_t v671 = v73;
        sub_1000361E0(v73, v74);
        uint64_t v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.default.getter();
        uint64_t v77 = swift_allocObject();
        *(unsigned char *)(v77 + 16) = 32;
        uint64_t v78 = swift_allocObject();
        *(unsigned char *)(v78 + 16) = 8;
        uint64_t v79 = swift_allocObject();
        *(void *)(v79 + 16) = sub_100061368;
        *(void *)(v79 + 24) = v69;
        uint64_t v80 = swift_allocObject();
        *(void *)(v80 + 16) = sub_1000654EC;
        *(void *)(v80 + 24) = v79;
        uint64_t v81 = swift_allocObject();
        sub_1004B810C(v81, 3);
        *uint64_t v82 = sub_100065514;
        v82[1] = v77;
        v82[2] = sub_100065514;
        v82[3] = v78;
        v82[4] = sub_100065500;
        v82[5] = v80;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v75, v76))
        {
          uint64_t v83 = (uint8_t *)sub_1008F9FAC();
          uint64_t v84 = swift_slowAlloc();
          uint64_t v706 = 0;
          uint64_t v707 = v84;
          *(_WORD *)uint64_t v83 = 258;
          v705 = v83 + 2;
          *(void *)&v708[0] = sub_100065514;
          *((void *)&v708[0] + 1) = v77;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
          swift_release();
          *(void *)&v708[0] = sub_100065514;
          *((void *)&v708[0] + 1) = v78;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
          swift_release();
          *(void *)&v708[0] = sub_100065500;
          *((void *)&v708[0] + 1) = v80;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
          uint64_t v85 = v1[739];
          uint64_t v86 = v1[701];
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "Received beacon group data %s", v83, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          sub_1008F9FA0();

          v695(v85, v86);
        }
        else
        {
          uint64_t v127 = v1[739];
          uint64_t v128 = v1[701];

          swift_release();
          swift_release();
          swift_release();
          v695(v127, v128);
        }
        v702(v1[735], v700, v1[701]);
        uint64_t v129 = (void *)swift_allocObject();
        v129[2] = v688;
        v129[3] = v683;
        v129[4] = v676;
        v129[5] = v673;
        sub_1000361E0(v72, v669);
        sub_1000361E0(v671, v670);
        uint64_t v130 = Logger.logObject.getter();
        os_log_type_t v131 = static os_log_type_t.debug.getter();
        uint64_t v132 = swift_allocObject();
        *(unsigned char *)(v132 + 16) = 32;
        uint64_t v133 = swift_allocObject();
        *(unsigned char *)(v133 + 16) = 8;
        uint64_t v134 = swift_allocObject();
        *(void *)(v134 + 16) = sub_100060D0C;
        *(void *)(v134 + 24) = v129;
        uint64_t v135 = swift_allocObject();
        *(void *)(v135 + 16) = sub_1000654EC;
        *(void *)(v135 + 24) = v134;
        uint64_t v136 = swift_allocObject();
        sub_1004B810C(v136, 3);
        void *v137 = sub_100065514;
        v137[1] = v132;
        v137[2] = sub_100065514;
        v137[3] = v133;
        v137[4] = sub_100065500;
        v137[5] = v135;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v130, v131))
        {
          v138 = (uint8_t *)sub_1008F9FAC();
          uint64_t v139 = swift_slowAlloc();
          uint64_t v706 = 0;
          uint64_t v707 = v139;
          *(_WORD *)v138 = 258;
          v705 = v138 + 2;
          *(void *)&v708[0] = sub_100065514;
          *((void *)&v708[0] + 1) = v132;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
          swift_release();
          *(void *)&v708[0] = sub_100065514;
          *((void *)&v708[0] + 1) = v133;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
          swift_release();
          *(void *)&v708[0] = sub_100065500;
          *((void *)&v708[0] + 1) = v135;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
          uint64_t v140 = v1[735];
          uint64_t v141 = v1[701];
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v130, v131, "numberOfBeacons: %s", v138, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          sub_1008F9FA0();

          v695(v140, v141);
        }
        else
        {
          uint64_t v208 = v1[735];
          uint64_t v209 = v1[701];

          swift_release();
          swift_release();
          swift_release();
          v695(v208, v209);
        }
        v702(v1[734], v700, v1[701]);
        v210 = (void *)swift_allocObject();
        v210[2] = v688;
        v210[3] = v683;
        v210[4] = v676;
        v210[5] = v673;
        sub_1000361E0(v72, v669);
        sub_1000361E0(v671, v670);
        v211 = Logger.logObject.getter();
        os_log_type_t v212 = static os_log_type_t.debug.getter();
        uint64_t v213 = swift_allocObject();
        *(unsigned char *)(v213 + 16) = 32;
        uint64_t v214 = swift_allocObject();
        *(unsigned char *)(v214 + 16) = 8;
        uint64_t v215 = swift_allocObject();
        *(void *)(v215 + 16) = sub_100060B9C;
        *(void *)(v215 + 24) = v210;
        uint64_t v216 = swift_allocObject();
        *(void *)(v216 + 16) = sub_1000654EC;
        *(void *)(v216 + 24) = v215;
        uint64_t v217 = swift_allocObject();
        sub_1004B810C(v217, 3);
        void *v218 = sub_100065514;
        v218[1] = v213;
        v218[2] = sub_100065514;
        v218[3] = v214;
        v218[4] = sub_100065500;
        v218[5] = v216;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v211, v212))
        {
          v219 = (uint8_t *)sub_1008F9FAC();
          uint64_t v220 = swift_slowAlloc();
          uint64_t v706 = 0;
          uint64_t v707 = v220;
          *(_WORD *)v219 = 258;
          v705 = v219 + 2;
          *(void *)&v708[0] = sub_100065514;
          *((void *)&v708[0] + 1) = v213;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
          swift_release();
          *(void *)&v708[0] = sub_100065514;
          *((void *)&v708[0] + 1) = v214;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
          swift_release();
          *(void *)&v708[0] = sub_100065500;
          *((void *)&v708[0] + 1) = v216;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
          uint64_t v221 = v1[734];
          uint64_t v222 = v1[701];
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v211, v212, "beaconGroupData: %s", v219, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          sub_1008F9FA0();

          uint64_t v223 = v221;
          uint64_t v224 = v222;
        }
        else
        {
          uint64_t v264 = v1[734];
          uint64_t v265 = v1[701];

          swift_release();
          swift_release();
          swift_release();
          uint64_t v223 = v264;
          uint64_t v224 = v265;
        }
        v695(v223, v224);
        v1[759] = 0;
        uint64_t v266 = v1[678];
        *(unsigned char *)(v266 + 176) = 2;
        if (*(unsigned char *)(v266 + 272) == 1)
        {
          uint64_t v267 = v1[700];
          (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v1[693] + 56))(v267, 1, 1, v1[692]);
          uint64_t v701 = sub_101144344(v267, 0xFFuLL);
          unint64_t v269 = v268;
          uint64_t v270 = v1[759];
          unint64_t v271 = v1[756];
          unint64_t v272 = v1[755];
          sub_10001DAB4(v1[700], &qword_10163BB20);
          uint64_t v273 = sub_100034EEC(v272, v271);
          unint64_t v699 = v269;
          if (v270)
          {
            ((void (*)(void, void, void))v1[751])(v1[732], v1[750], v1[701]);
            uint64_t v274 = swift_allocObject();
            *(void *)(v274 + 16) = v270;
            swift_errorRetain();
            v275 = Logger.logObject.getter();
            os_log_type_t v276 = static os_log_type_t.error.getter();
            uint64_t v277 = swift_allocObject();
            *(unsigned char *)(v277 + 16) = 66;
            uint64_t v278 = swift_allocObject();
            *(unsigned char *)(v278 + 16) = 8;
            uint64_t v279 = swift_allocObject();
            *(void *)(v279 + 16) = sub_1000613DC;
            *(void *)(v279 + 24) = v274;
            v280 = v1;
            uint64_t v281 = swift_allocObject();
            *(void *)(v281 + 16) = sub_1000654F8;
            *(void *)(v281 + 24) = v279;
            uint64_t v282 = swift_allocObject();
            *(void *)(v282 + 16) = sub_1000654FC;
            *(void *)(v282 + 24) = v281;
            uint64_t v283 = swift_allocObject();
            sub_1004B810C(v283, 3);
            void *v284 = sub_100065514;
            v284[1] = v277;
            v284[2] = sub_100065514;
            v284[3] = v278;
            v284[4] = sub_100065508;
            v284[5] = v282;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(v275, v276))
            {
              v285 = (uint8_t *)sub_1008F9FAC();
              uint64_t v706 = swift_slowAlloc();
              uint64_t v707 = 0;
              *(_WORD *)v285 = 258;
              v705 = v285 + 2;
              *(void *)&v708[0] = sub_100065514;
              *((void *)&v708[0] + 1) = v277;
              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
              swift_release();
              *(void *)&v708[0] = sub_100065514;
              *((void *)&v708[0] + 1) = v278;
              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
              swift_release();
              *(void *)&v708[0] = sub_100065508;
              *((void *)&v708[0] + 1) = v282;
              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
              v703 = (void (*)(uint64_t, uint64_t))v280[754];
              uint64_t v286 = v280[732];
              uint64_t v287 = v280[701];
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, v275, v276, "Unable to parse beacon group info due to %{public}@", v285, 0xCu);
              sub_10000588C((uint64_t *)&unk_101638EA0);
              swift_arrayDestroy();
              swift_slowDealloc();
              sub_1008F9FA0();

              v703(v286, v287);
            }
            else
            {
              v410 = (void (*)(uint64_t, uint64_t))v280[754];
              uint64_t v411 = v280[732];
              uint64_t v412 = v280[701];

              swift_release();
              swift_release();
              swift_release();
              v410(v411, v412);
            }
            sub_100054204(v701, v699, (uint64_t)(v280 + 234));
            uint64_t v698 = v280[746];
            uint64_t v413 = v280[745];
            uint64_t v414 = v280[744];
            v415 = v280;
            sub_10005E7E8((uint64_t)(v280 + 234), (uint64_t)(v280 + 300));
            uint64_t v467 = (uint64_t)(v280 + 300);
            swift_release();
            sub_10005E844(v697, (void (*)(void))sub_10001CFB8);
            swift_errorRelease();
            sub_10005E844(v697, (void (*)(void))sub_10001CFB8);
            sub_10001CFB8(v701, v699);
            (*(void (**)(uint64_t, uint64_t))(v413 + 8))(v698, v414);
          }
          else
          {
            uint64_t v394 = v273;
            ((void (*)(void, void, void))v1[751])(v1[733], v1[750], v1[701]);
            uint64_t v395 = swift_allocObject();
            *(void *)(v395 + 16) = v394;
            uint64_t v396 = swift_allocObject();
            *(void *)(v396 + 16) = sub_100061428;
            *(void *)(v396 + 24) = v395;
            swift_bridgeObjectRetain();
            v397 = Logger.logObject.getter();
            os_log_type_t v398 = static os_log_type_t.default.getter();
            uint64_t v399 = swift_allocObject();
            *(unsigned char *)(v399 + 16) = 32;
            uint64_t v400 = swift_allocObject();
            *(unsigned char *)(v400 + 16) = 8;
            v401 = v1;
            uint64_t v402 = swift_allocObject();
            *(void *)(v402 + 16) = sub_100061434;
            *(void *)(v402 + 24) = v396;
            uint64_t v403 = swift_allocObject();
            *(void *)(v403 + 16) = sub_1000654EC;
            *(void *)(v403 + 24) = v402;
            uint64_t v404 = swift_allocObject();
            sub_1004B810C(v404, 3);
            void *v405 = sub_100065514;
            v405[1] = v399;
            v405[2] = sub_100065514;
            v405[3] = v400;
            v405[4] = sub_100065500;
            v405[5] = v403;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(v397, v398))
            {
              v406 = (uint8_t *)sub_1008F9FAC();
              uint64_t v407 = swift_slowAlloc();
              uint64_t v706 = 0;
              uint64_t v707 = v407;
              *(_WORD *)v406 = 258;
              v705 = v406 + 2;
              *(void *)&v708[0] = sub_100065514;
              *((void *)&v708[0] + 1) = v399;
              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
              swift_release();
              *(void *)&v708[0] = sub_100065514;
              *((void *)&v708[0] + 1) = v400;
              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
              swift_release();
              *(void *)&v708[0] = sub_100065500;
              *((void *)&v708[0] + 1) = v403;
              sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
              v704 = (void (*)(uint64_t, uint64_t))v401[754];
              uint64_t v408 = v401[733];
              uint64_t v409 = v401[701];
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, v397, v398, "beaconGroupInfo: %s", v406, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              sub_1008F9FA0();

              v704(v408, v409);
            }
            else
            {
              v453 = (void (*)(uint64_t, uint64_t))v401[754];
              uint64_t v454 = v401[733];
              uint64_t v455 = v401[701];

              swift_release();
              swift_release();
              swift_release();
              v453(v454, v455);
            }
            *(void *)(*(void *)(v401[678] + 184)
                      + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds) = v394;
            swift_bridgeObjectRelease();
            sub_100054204(v701, v699, (uint64_t)(v401 + 267));
            v415 = v401;
            uint64_t v467 = (uint64_t)(v401 + 36);
            uint64_t v456 = v401[746];
            uint64_t v457 = v401[745];
            uint64_t v458 = v401[744];
            sub_10005E7E8((uint64_t)(v401 + 267), (uint64_t)(v401 + 36));
            swift_release();
            sub_10005E844(v697, (void (*)(void))sub_10001CFB8);
            sub_10005E844(v697, (void (*)(void))sub_10001CFB8);
            sub_10001CFB8(v701, v699);
            (*(void (**)(uint64_t, uint64_t))(v457 + 8))(v456, v458);
          }
          sub_10005E7E8(v467, (uint64_t)(v415 + 465));
          sub_10005E7E8((uint64_t)(v415 + 465), v415[674]);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          v262 = (uint64_t (*)(void))v415[1];
          goto LABEL_58;
        }
        v336 = (void *)swift_task_alloc();
        v1[760] = v336;
        void *v336 = v1;
        v336[1] = sub_10004F428;
        uint64_t v337 = v1[699];
        goto LABEL_76;
      }
      v702(v1[736], v700, v1[701]);
      uint64_t v114 = swift_allocObject();
      sub_10005E7E8(v22, v114 + 16);
      sub_10005E844(v22, (void (*)(void))sub_1000361E0);
      v115 = Logger.logObject.getter();
      os_log_type_t v116 = static os_log_type_t.error.getter();
      uint64_t v117 = swift_allocObject();
      *(unsigned char *)(v117 + 16) = 34;
      uint64_t v118 = swift_allocObject();
      *(unsigned char *)(v118 + 16) = 8;
      uint64_t v119 = swift_allocObject();
      *(void *)(v119 + 16) = sub_100065694;
      *(void *)(v119 + 24) = v114;
      uint64_t v120 = swift_allocObject();
      *(void *)(v120 + 16) = sub_1000654EC;
      *(void *)(v120 + 24) = v119;
      uint64_t v121 = swift_allocObject();
      sub_1004B810C(v121, 3);
      *uint64_t v122 = sub_100065514;
      v122[1] = v117;
      v122[2] = sub_100065514;
      v122[3] = v118;
      v122[4] = sub_100065500;
      v122[5] = v120;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v115, v116))
      {
        uint64_t v123 = (uint8_t *)sub_1008F9FAC();
        uint64_t v124 = swift_slowAlloc();
        uint64_t v706 = 0;
        uint64_t v707 = v124;
        *(_WORD *)uint64_t v123 = 258;
        v705 = v123 + 2;
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v117;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v118;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065500;
        *((void *)&v708[0] + 1) = v120;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        uint64_t v125 = v1[736];
        uint64_t v126 = v1[701];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v115, v116, "Received unexpected command %{public}s", v123, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v695(v125, v126);
        uint64_t v22 = (uint64_t)(v1 + 69);
      }
      else
      {
        uint64_t v168 = v1[736];
        uint64_t v169 = v1[701];

        swift_release();
        swift_release();
        swift_release();
        v695(v168, v169);
      }
      uint64_t v90 = v1[746];
      uint64_t v91 = v1[745];
      uint64_t v92 = v1[744];
      sub_10005E370();
      swift_allocError();
      void *v170 = 0x8000000000000006;
      swift_willThrow();
      swift_release();
      uint64_t v171 = v22;
      goto LABEL_55;
    }
    v690 = v1 + 135;
    v104 = v1 + 634;
    uint64_t v105 = v1[738];
    uint64_t v106 = v1[701];
    sub_10006242C((uint64_t)(v1 + 333));
    v702(v105, v700, v106);
    uint64_t v107 = Logger.logObject.getter();
    os_log_type_t v108 = static os_log_type_t.default.getter();
    unsigned int v109 = sub_101020788(0);
    BOOL v110 = os_log_type_enabled(v107, v108);
    uint64_t v111 = v1[738];
    uint64_t v112 = v1[701];
    if (v110)
    {
      v666 = v1;
      uint64_t v113 = (uint8_t *)sub_1008F9FAC();
      uint64_t v707 = 0;
      *(void *)&v708[0] = 0;
      *(_WORD *)uint64_t v113 = 0;
      uint64_t v706 = (uint64_t)(v113 + 2);
      sub_100E08120((uint64_t)v109, (uint64_t)&v706, (uint64_t)&v707, (uint64_t)v708);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "Received pairing data.", v113, 2u);
      uint64_t v1 = v666;
      sub_1008F9FA0();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v695(v111, v112);
    uint64_t v150 = v697;
    sub_10033A040(v104);
    sub_10000588C(&qword_101639B68);
    int v151 = swift_dynamicCast();
    uint64_t v152 = v1[701];
    if (v151)
    {
      v153 = v1 + 102;
      uint64_t v154 = v1[731];
      memcpy(v1 + 102, v690, 0x108uLL);
      v702(v154, v700, v152);
      uint64_t v155 = swift_allocObject();
      memcpy((void *)(v155 + 16), v1 + 102, 0x108uLL);
      sub_100060EA0(v1 + 102, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v156 = Logger.logObject.getter();
      os_log_type_t v157 = static os_log_type_t.debug.getter();
      uint64_t v158 = swift_allocObject();
      *(unsigned char *)(v158 + 16) = 32;
      uint64_t v159 = swift_allocObject();
      *(unsigned char *)(v159 + 16) = 8;
      uint64_t v160 = swift_allocObject();
      *(void *)(v160 + 16) = sub_1000654E8;
      *(void *)(v160 + 24) = v155;
      uint64_t v161 = swift_allocObject();
      *(void *)(v161 + 16) = sub_1000654EC;
      *(void *)(v161 + 24) = v160;
      uint64_t v162 = swift_allocObject();
      sub_1004B810C(v162, 3);
      void *v163 = sub_100065514;
      v163[1] = v158;
      v163[2] = sub_100065514;
      v163[3] = v159;
      v163[4] = sub_100065500;
      v163[5] = v161;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v156, v157))
      {
        v164 = (uint8_t *)sub_1008F9FAC();
        uint64_t v165 = swift_slowAlloc();
        uint64_t v706 = 0;
        uint64_t v707 = v165;
        *(_WORD *)v164 = 258;
        v705 = v164 + 2;
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v158;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v159;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065500;
        *((void *)&v708[0] + 1) = v161;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        uint64_t v166 = v1[731];
        uint64_t v167 = v1[701];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v156, v157, "SerialNumber: %s", v164, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v695(v166, v167);
      }
      else
      {
        uint64_t v241 = v1[731];
        uint64_t v242 = v1[701];

        swift_release();
        swift_release();
        swift_release();
        v695(v241, v242);
      }
      v702(v1[729], v700, v1[701]);
      uint64_t v243 = swift_allocObject();
      memcpy((void *)(v243 + 16), v1 + 102, 0x108uLL);
      sub_100060EA0(v1 + 102, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v244 = Logger.logObject.getter();
      os_log_type_t v245 = static os_log_type_t.debug.getter();
      uint64_t v246 = swift_allocObject();
      *(unsigned char *)(v246 + 16) = 32;
      uint64_t v247 = swift_allocObject();
      *(unsigned char *)(v247 + 16) = 8;
      uint64_t v248 = swift_allocObject();
      *(void *)(v248 + 16) = sub_100060B70;
      *(void *)(v248 + 24) = v243;
      uint64_t v249 = swift_allocObject();
      *(void *)(v249 + 16) = sub_1000654EC;
      *(void *)(v249 + 24) = v248;
      uint64_t v250 = swift_allocObject();
      sub_1004B810C(v250, 3);
      void *v251 = sub_100065514;
      v251[1] = v246;
      v251[2] = sub_100065514;
      v251[3] = v247;
      v251[4] = sub_100065500;
      v251[5] = v249;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v244, v245))
      {
        v252 = (uint8_t *)sub_1008F9FAC();
        uint64_t v253 = swift_slowAlloc();
        uint64_t v706 = 0;
        uint64_t v707 = v253;
        *(_WORD *)v252 = 258;
        v705 = v252 + 2;
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v246;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v247;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065500;
        *((void *)&v708[0] + 1) = v249;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        uint64_t v254 = v1[729];
        uint64_t v255 = v1[701];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v244, v245, "AltSerialNumber: %s", v252, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v695(v254, v255);
      }
      else
      {
        uint64_t v288 = v1[729];
        uint64_t v289 = v1[701];

        swift_release();
        swift_release();
        swift_release();
        v695(v288, v289);
      }
      v702(v1[728], v700, v1[701]);
      uint64_t v290 = swift_allocObject();
      memcpy((void *)(v290 + 16), v1 + 102, 0x108uLL);
      sub_100060EA0(v1 + 102, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v291 = Logger.logObject.getter();
      os_log_type_t v292 = static os_log_type_t.debug.getter();
      uint64_t v293 = swift_allocObject();
      *(unsigned char *)(v293 + 16) = 32;
      uint64_t v294 = swift_allocObject();
      *(unsigned char *)(v294 + 16) = 8;
      uint64_t v295 = swift_allocObject();
      *(void *)(v295 + 16) = sub_100060B9C;
      *(void *)(v295 + 24) = v290;
      uint64_t v296 = swift_allocObject();
      *(void *)(v296 + 16) = sub_1000654EC;
      *(void *)(v296 + 24) = v295;
      uint64_t v297 = swift_allocObject();
      sub_1004B810C(v297, 3);
      void *v298 = sub_100065514;
      v298[1] = v293;
      v298[2] = sub_100065514;
      v298[3] = v294;
      v298[4] = sub_100065500;
      v298[5] = v296;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v291, v292))
      {
        v299 = (uint8_t *)sub_1008F9FAC();
        uint64_t v300 = swift_slowAlloc();
        uint64_t v706 = 0;
        uint64_t v707 = v300;
        *(_WORD *)v299 = 258;
        v705 = v299 + 2;
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v293;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v294;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065500;
        *((void *)&v708[0] + 1) = v296;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        uint64_t v301 = v1[728];
        uint64_t v302 = v1[701];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v291, v292, "numberOfBeacons: %s", v299, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v695(v301, v302);
      }
      else
      {
        uint64_t v339 = v1[728];
        uint64_t v340 = v1[701];

        swift_release();
        swift_release();
        swift_release();
        v695(v339, v340);
      }
      v702(v1[727], v700, v1[701]);
      uint64_t v341 = swift_allocObject();
      memcpy((void *)(v341 + 16), v1 + 102, 0x108uLL);
      sub_100060EA0(v1 + 102, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v342 = Logger.logObject.getter();
      os_log_type_t v343 = static os_log_type_t.debug.getter();
      uint64_t v344 = swift_allocObject();
      *(unsigned char *)(v344 + 16) = 32;
      uint64_t v345 = swift_allocObject();
      *(unsigned char *)(v345 + 16) = 8;
      uint64_t v346 = swift_allocObject();
      *(void *)(v346 + 16) = sub_100060BC8;
      *(void *)(v346 + 24) = v341;
      uint64_t v347 = swift_allocObject();
      *(void *)(v347 + 16) = sub_1000654EC;
      *(void *)(v347 + 24) = v346;
      uint64_t v348 = swift_allocObject();
      sub_1004B810C(v348, 3);
      void *v349 = sub_100065514;
      v349[1] = v344;
      v349[2] = sub_100065514;
      v349[3] = v345;
      v349[4] = sub_100065500;
      v349[5] = v347;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v342, v343))
      {
        v350 = (uint8_t *)sub_1008F9FAC();
        uint64_t v351 = swift_slowAlloc();
        uint64_t v706 = 0;
        uint64_t v707 = v351;
        *(_WORD *)v350 = 258;
        v705 = v350 + 2;
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v344;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v345;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065500;
        *((void *)&v708[0] + 1) = v347;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        uint64_t v352 = v1[727];
        uint64_t v353 = v1[701];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v342, v343, "otherSerialNumber: %s", v350, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v695(v352, v353);
      }
      else
      {
        uint64_t v379 = v1[727];
        uint64_t v380 = v1[701];

        swift_release();
        swift_release();
        swift_release();
        v695(v379, v380);
      }
      v702(v1[726], v700, v1[701]);
      uint64_t v381 = swift_allocObject();
      memcpy((void *)(v381 + 16), v1 + 102, 0x108uLL);
      sub_100060EA0(v1 + 102, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v382 = Logger.logObject.getter();
      os_log_type_t v383 = static os_log_type_t.debug.getter();
      uint64_t v384 = swift_allocObject();
      *(unsigned char *)(v384 + 16) = 32;
      uint64_t v385 = swift_allocObject();
      *(unsigned char *)(v385 + 16) = 8;
      uint64_t v386 = swift_allocObject();
      *(void *)(v386 + 16) = sub_100060BF4;
      *(void *)(v386 + 24) = v381;
      uint64_t v387 = swift_allocObject();
      *(void *)(v387 + 16) = sub_1000654EC;
      *(void *)(v387 + 24) = v386;
      uint64_t v388 = swift_allocObject();
      sub_1004B810C(v388, 3);
      void *v389 = sub_100065514;
      v389[1] = v384;
      v389[2] = sub_100065514;
      v389[3] = v385;
      v389[4] = sub_100065500;
      v389[5] = v387;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v382, v383))
      {
        v390 = (uint8_t *)sub_1008F9FAC();
        uint64_t v391 = swift_slowAlloc();
        uint64_t v706 = 0;
        uint64_t v707 = v391;
        *(_WORD *)v390 = 258;
        v705 = v390 + 2;
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v384;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v385;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065500;
        *((void *)&v708[0] + 1) = v387;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        uint64_t v392 = v1[726];
        uint64_t v393 = v1[701];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v382, v383, "seed: %s", v390, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v695(v392, v393);
      }
      else
      {
        uint64_t v433 = v1[726];
        uint64_t v434 = v1[701];

        swift_release();
        swift_release();
        swift_release();
        v695(v433, v434);
      }
      v668 = v1;
      v702(v1[725], v700, v1[701]);
      uint64_t v435 = swift_allocObject();
      memcpy((void *)(v435 + 16), v1 + 102, 0x108uLL);
      uint64_t v436 = swift_allocObject();
      memcpy((void *)(v436 + 16), v1 + 102, 0x108uLL);
      sub_100060EA0(v1 + 102, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      sub_100060EA0(v1 + 102, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v686 = Logger.logObject.getter();
      os_log_type_t v679 = static os_log_type_t.debug.getter();
      uint64_t v437 = swift_allocObject();
      *(unsigned char *)(v437 + 16) = 0;
      uint64_t v438 = swift_allocObject();
      *(unsigned char *)(v438 + 16) = 8;
      uint64_t v439 = swift_allocObject();
      *(void *)(v439 + 16) = sub_100060C20;
      *(void *)(v439 + 24) = v435;
      uint64_t v440 = swift_allocObject();
      *(void *)(v440 + 16) = sub_10006569C;
      *(void *)(v440 + 24) = v439;
      uint64_t v441 = swift_allocObject();
      *(unsigned char *)(v441 + 16) = 32;
      uint64_t v442 = swift_allocObject();
      *(unsigned char *)(v442 + 16) = 8;
      uint64_t v443 = swift_allocObject();
      *(void *)(v443 + 16) = sub_100060C2C;
      *(void *)(v443 + 24) = v436;
      uint64_t v444 = swift_allocObject();
      *(void *)(v444 + 16) = sub_1000654EC;
      *(void *)(v444 + 24) = v443;
      uint64_t v445 = swift_allocObject();
      sub_1004B810C(v445, 6);
      void *v446 = sub_100065514;
      v446[1] = v437;
      v446[2] = sub_100065514;
      v446[3] = v438;
      v446[4] = sub_100065504;
      v446[5] = v440;
      v446[6] = sub_100065514;
      v446[7] = v441;
      v446[8] = sub_100065514;
      v446[9] = v442;
      v446[10] = sub_100065500;
      v446[11] = v444;
      uint64_t v692 = v437;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v686, v679))
      {
        uint64_t v447 = v440;
        v448 = v668;
        v449 = (uint8_t *)sub_1008F9FAC();
        uint64_t v450 = swift_slowAlloc();
        uint64_t v706 = 0;
        uint64_t v707 = v450;
        *(_WORD *)v449 = 514;
        v705 = v449 + 2;
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v692;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v438;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065504;
        *((void *)&v708[0] + 1) = v447;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v441;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v442;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065500;
        *((void *)&v708[0] + 1) = v444;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        uint64_t v451 = v668[725];
        uint64_t v452 = v668[701];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v686, v679, "attestation (S1) count %ld: %s", v449, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v695(v451, v452);
      }
      else
      {
        v448 = v668;
        uint64_t v674 = v668[701];
        uint64_t v680 = v668[725];

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v695(v680, v674);
      }
      v702(v448[724], v700, v448[701]);
      uint64_t v468 = swift_allocObject();
      memcpy((void *)(v468 + 16), v153, 0x108uLL);
      uint64_t v469 = swift_allocObject();
      memcpy((void *)(v469 + 16), v153, 0x108uLL);
      sub_100060EA0((uint64_t *)v153, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      sub_100060EA0((uint64_t *)v153, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v687 = Logger.logObject.getter();
      os_log_type_t v681 = static os_log_type_t.debug.getter();
      uint64_t v470 = swift_allocObject();
      *(unsigned char *)(v470 + 16) = 0;
      uint64_t v471 = swift_allocObject();
      *(unsigned char *)(v471 + 16) = 8;
      uint64_t v472 = swift_allocObject();
      *(void *)(v472 + 16) = sub_100060C78;
      *(void *)(v472 + 24) = v468;
      uint64_t v473 = swift_allocObject();
      *(void *)(v473 + 16) = sub_10006569C;
      *(void *)(v473 + 24) = v472;
      uint64_t v474 = swift_allocObject();
      *(unsigned char *)(v474 + 16) = 32;
      uint64_t v475 = swift_allocObject();
      *(unsigned char *)(v475 + 16) = 8;
      uint64_t v476 = swift_allocObject();
      *(void *)(v476 + 16) = sub_100060C84;
      *(void *)(v476 + 24) = v469;
      uint64_t v477 = swift_allocObject();
      *(void *)(v477 + 16) = sub_1000654EC;
      *(void *)(v477 + 24) = v476;
      uint64_t v478 = swift_allocObject();
      sub_1004B810C(v478, 6);
      void *v479 = sub_100065514;
      v479[1] = v470;
      v479[2] = sub_100065514;
      v479[3] = v471;
      v479[4] = sub_100065504;
      v479[5] = v473;
      v479[6] = sub_100065514;
      v479[7] = v474;
      v479[8] = sub_100065514;
      v479[9] = v475;
      v479[10] = sub_100065500;
      v479[11] = v477;
      uint64_t v693 = v470;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v687, v681))
      {
        uint64_t v480 = v473;
        v481 = v668;
        v482 = (uint8_t *)sub_1008F9FAC();
        uint64_t v483 = swift_slowAlloc();
        uint64_t v706 = 0;
        uint64_t v707 = v483;
        *(_WORD *)v482 = 514;
        v705 = v482 + 2;
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v693;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v471;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065504;
        *((void *)&v708[0] + 1) = v480;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v474;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v475;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065500;
        *((void *)&v708[0] + 1) = v477;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        uint64_t v484 = v668[724];
        uint64_t v485 = v668[701];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v687, v681, "BAA signature (S2) count %ld: %s", v482, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v695(v484, v485);
      }
      else
      {
        v481 = v668;
        uint64_t v675 = v668[701];
        uint64_t v682 = v668[724];

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v695(v682, v675);
      }
      v702(v481[723], v700, v481[701]);
      uint64_t v486 = swift_allocObject();
      memcpy((void *)(v486 + 16), v153, 0x108uLL);
      sub_100060EA0((uint64_t *)v153, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v487 = Logger.logObject.getter();
      os_log_type_t v488 = static os_log_type_t.debug.getter();
      v489 = v481;
      uint64_t v490 = swift_allocObject();
      *(unsigned char *)(v490 + 16) = 0;
      uint64_t v491 = swift_allocObject();
      *(unsigned char *)(v491 + 16) = 1;
      uint64_t v492 = swift_allocObject();
      *(void *)(v492 + 16) = sub_100060CD0;
      *(void *)(v492 + 24) = v486;
      uint64_t v493 = swift_allocObject();
      *(void *)(v493 + 16) = sub_100060CF8;
      *(void *)(v493 + 24) = v492;
      uint64_t v494 = swift_allocObject();
      sub_1004B810C(v494, 3);
      void *v495 = sub_100065514;
      v495[1] = v490;
      v495[2] = sub_100065514;
      v495[3] = v491;
      v495[4] = sub_100060D00;
      v495[5] = v493;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v487, v488))
      {
        v496 = (uint8_t *)sub_1008F9FAC();
        uint64_t v706 = 0;
        uint64_t v707 = 0;
        *(_WORD *)v496 = 256;
        v705 = v496 + 2;
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v490;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v491;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100060D00;
        *((void *)&v708[0] + 1) = v493;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        uint64_t v497 = v489[723];
        uint64_t v498 = v489[701];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v487, v488, "beaconPartId: %hhu", v496, 5u);
        sub_1008F9FA0();

        v695(v497, v498);
      }
      else
      {
        uint64_t v513 = v489[723];
        uint64_t v514 = v489[701];

        swift_release();
        swift_release();
        swift_release();
        v695(v513, v514);
      }
      uint64_t v1 = v489;
      v702(v489[722], v700, v489[701]);
      uint64_t v515 = swift_allocObject();
      memcpy((void *)(v515 + 16), v153, 0x108uLL);
      sub_100060EA0((uint64_t *)v153, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v516 = Logger.logObject.getter();
      os_log_type_t v517 = static os_log_type_t.debug.getter();
      uint64_t v518 = swift_allocObject();
      *(unsigned char *)(v518 + 16) = 32;
      uint64_t v519 = swift_allocObject();
      *(unsigned char *)(v519 + 16) = 8;
      uint64_t v520 = swift_allocObject();
      *(void *)(v520 + 16) = sub_100060D0C;
      *(void *)(v520 + 24) = v515;
      uint64_t v521 = swift_allocObject();
      *(void *)(v521 + 16) = sub_1000654EC;
      *(void *)(v521 + 24) = v520;
      uint64_t v522 = swift_allocObject();
      sub_1004B810C(v522, 3);
      void *v523 = sub_100065514;
      v523[1] = v518;
      v523[2] = sub_100065514;
      v523[3] = v519;
      v523[4] = sub_100065500;
      v523[5] = v521;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v516, v517))
      {
        v524 = (uint8_t *)sub_1008F9FAC();
        uint64_t v525 = swift_slowAlloc();
        uint64_t v706 = 0;
        uint64_t v707 = v525;
        *(_WORD *)v524 = 258;
        v705 = v524 + 2;
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v518;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v519;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065500;
        *((void *)&v708[0] + 1) = v521;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        uint64_t v526 = v489[722];
        uint64_t v527 = v489[701];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v516, v517, "C1: %s", v524, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v695(v526, v527);
      }
      else
      {
        uint64_t v534 = v489[722];
        uint64_t v535 = v489[701];

        swift_release();
        swift_release();
        swift_release();
        v695(v534, v535);
      }
      v702(v489[721], v700, v489[701]);
      uint64_t v536 = swift_allocObject();
      memcpy((void *)(v536 + 16), v153, 0x108uLL);
      sub_100060EA0((uint64_t *)v153, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v537 = Logger.logObject.getter();
      os_log_type_t v538 = static os_log_type_t.debug.getter();
      uint64_t v539 = swift_allocObject();
      *(unsigned char *)(v539 + 16) = 32;
      uint64_t v540 = swift_allocObject();
      *(unsigned char *)(v540 + 16) = 8;
      uint64_t v541 = swift_allocObject();
      *(void *)(v541 + 16) = sub_100060D38;
      *(void *)(v541 + 24) = v536;
      uint64_t v542 = swift_allocObject();
      *(void *)(v542 + 16) = sub_1000654EC;
      *(void *)(v542 + 24) = v541;
      uint64_t v543 = swift_allocObject();
      sub_1004B810C(v543, 3);
      void *v544 = sub_100065514;
      v544[1] = v539;
      v544[2] = sub_100065514;
      v544[3] = v540;
      v544[4] = sub_100065500;
      v544[5] = v542;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v537, v538))
      {
        v545 = (uint8_t *)sub_1008F9FAC();
        uint64_t v546 = swift_slowAlloc();
        uint64_t v706 = 0;
        uint64_t v707 = v546;
        *(_WORD *)v545 = 258;
        v705 = v545 + 2;
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v539;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v540;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065500;
        *((void *)&v708[0] + 1) = v542;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        uint64_t v547 = v489[721];
        uint64_t v548 = v489[701];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v537, v538, "Certs: %s", v545, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v695(v547, v548);
      }
      else
      {
        uint64_t v549 = v489[721];
        uint64_t v550 = v489[701];

        swift_release();
        swift_release();
        swift_release();
        v695(v549, v550);
      }
      v702(v489[720], v700, v489[701]);
      uint64_t v551 = swift_allocObject();
      memcpy((void *)(v551 + 16), v153, 0x108uLL);
      sub_100060EA0((uint64_t *)v153, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v552 = Logger.logObject.getter();
      os_log_type_t v553 = static os_log_type_t.debug.getter();
      uint64_t v554 = swift_allocObject();
      *(unsigned char *)(v554 + 16) = 32;
      uint64_t v555 = swift_allocObject();
      *(unsigned char *)(v555 + 16) = 8;
      uint64_t v556 = swift_allocObject();
      *(void *)(v556 + 16) = sub_100060D64;
      *(void *)(v556 + 24) = v551;
      uint64_t v557 = swift_allocObject();
      *(void *)(v557 + 16) = sub_1000654EC;
      *(void *)(v557 + 24) = v556;
      uint64_t v558 = swift_allocObject();
      sub_1004B810C(v558, 3);
      void *v559 = sub_100065514;
      v559[1] = v554;
      v559[2] = sub_100065514;
      v559[3] = v555;
      v559[4] = sub_100065500;
      v559[5] = v557;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v552, v553))
      {
        v560 = (uint8_t *)sub_1008F9FAC();
        uint64_t v561 = swift_slowAlloc();
        uint64_t v706 = 0;
        uint64_t v707 = v561;
        *(_WORD *)v560 = 258;
        v705 = v560 + 2;
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v554;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v555;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065500;
        *((void *)&v708[0] + 1) = v557;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        uint64_t v562 = v489[720];
        uint64_t v563 = v489[701];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v552, v553, "AuthNonce: %s", v560, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v695(v562, v563);
      }
      else
      {
        uint64_t v564 = v489[720];
        uint64_t v565 = v489[701];

        swift_release();
        swift_release();
        swift_release();
        v695(v564, v565);
      }
      v702(v489[719], v700, v489[701]);
      uint64_t v566 = swift_allocObject();
      memcpy((void *)(v566 + 16), v153, 0x108uLL);
      sub_100060EA0((uint64_t *)v153, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v567 = Logger.logObject.getter();
      os_log_type_t v568 = static os_log_type_t.debug.getter();
      uint64_t v569 = swift_allocObject();
      *(unsigned char *)(v569 + 16) = 32;
      uint64_t v570 = swift_allocObject();
      *(unsigned char *)(v570 + 16) = 8;
      uint64_t v571 = swift_allocObject();
      *(void *)(v571 + 16) = sub_100060D90;
      *(void *)(v571 + 24) = v566;
      uint64_t v572 = swift_allocObject();
      *(void *)(v572 + 16) = sub_1000654EC;
      *(void *)(v572 + 24) = v571;
      uint64_t v573 = swift_allocObject();
      sub_1004B810C(v573, 3);
      void *v574 = sub_100065514;
      v574[1] = v569;
      v574[2] = sub_100065514;
      v574[3] = v570;
      v574[4] = sub_100065500;
      v574[5] = v572;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v567, v568))
      {
        v575 = (uint8_t *)sub_1008F9FAC();
        uint64_t v576 = swift_slowAlloc();
        uint64_t v706 = 0;
        uint64_t v707 = v576;
        *(_WORD *)v575 = 258;
        v705 = v575 + 2;
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v569;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v570;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065500;
        *((void *)&v708[0] + 1) = v572;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        uint64_t v577 = v489[719];
        uint64_t v578 = v489[701];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v567, v568, "CSR: %s", v575, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v695(v577, v578);
      }
      else
      {
        uint64_t v579 = v489[719];
        uint64_t v580 = v489[701];

        swift_release();
        swift_release();
        swift_release();
        v695(v579, v580);
      }
      uint64_t v581 = v489[678];
      *(unsigned char *)(v581 + 176) = 3;
      uint64_t v582 = *(void *)(v581 + 184);
      uint64_t v583 = v1[102];
      unint64_t v584 = v1[103];
      swift_retain();
      sub_1000361E0(v583, v584);
      sub_100434DF4(v583, v584, (uint64_t *)v708);
      uint64_t v585 = *(void *)(v582 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1);
      unint64_t v586 = *(void *)(v582 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1 + 8);
      *(_OWORD *)(v582 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1) = v708[0];
      sub_100037A24(v585, v586);
      swift_release();
      uint64_t v587 = v1[106];
      unint64_t v588 = v1[107];
      v589 = (uint64_t *)(*(void *)(v581 + 184)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
      uint64_t v590 = *v589;
      unint64_t v591 = v589[1];
      uint64_t *v589 = v587;
      v589[1] = v588;
      sub_1000361E0(v587, v588);
      sub_100037A24(v590, v591);
      uint64_t v592 = v1[122];
      unint64_t v593 = v1[123];
      v594 = (uint64_t *)(*(void *)(v581 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2);
      uint64_t v595 = *v594;
      unint64_t v596 = v594[1];
      uint64_t *v594 = v592;
      v594[1] = v593;
      sub_1000361E0(v592, v593);
      sub_100037A24(v595, v596);
      uint64_t v597 = v1[112];
      unint64_t v598 = v1[113];
      v599 = (uint64_t *)(*(void *)(v581 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation);
      uint64_t v600 = *v599;
      unint64_t v601 = v599[1];
      uint64_t *v599 = v597;
      v599[1] = v598;
      sub_1000361E0(v597, v598);
      sub_100037A24(v600, v601);
      uint64_t v602 = v1[110];
      unint64_t v603 = v1[111];
      v604 = (uint64_t *)(*(void *)(v581 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1);
      uint64_t v605 = *v604;
      unint64_t v606 = v604[1];
      uint64_t *v604 = v602;
      v604[1] = v603;
      sub_1000361E0(v602, v603);
      sub_100037A24(v605, v606);
      uint64_t v607 = *(void *)(v581 + 184);
      *(_WORD *)(v607 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId) = *((unsigned __int8 *)v1
                                                                                                + 1024);
      *((_OWORD *)v1 + 336) = *((_OWORD *)v1 + 52);
      sub_1000362FC();
      swift_retain();
      *(void *)(v607 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_numBeacons) = DataProtocol.intValue.getter();
      swift_release();
      uint64_t v608 = Data.trimmed.getter();
      unint64_t v610 = v609;
      static String.Encoding.utf8.getter();
      uint64_t v696 = String.init(data:encoding:)();
      uint64_t v612 = v611;
      sub_10001CFB8(v608, v610);
      uint64_t v694 = v612;
      if (!v612)
      {
        uint64_t v613 = Data.trimmed.getter();
        unint64_t v615 = v614;
        uint64_t v616 = Data.hexString.getter();
        uint64_t v694 = v617;
        uint64_t v696 = v616;
        sub_10001CFB8(v613, v615);
      }
      v702(v1[718], v700, v1[701]);
      uint64_t v618 = swift_allocObject();
      *(void *)(v618 + 16) = v696;
      *(void *)(v618 + 24) = v694;
      swift_bridgeObjectRetain();
      v619 = Logger.logObject.getter();
      os_log_type_t v620 = static os_log_type_t.default.getter();
      uint64_t v621 = swift_allocObject();
      *(unsigned char *)(v621 + 16) = 34;
      uint64_t v622 = swift_allocObject();
      *(unsigned char *)(v622 + 16) = 8;
      uint64_t v623 = swift_allocObject();
      *(void *)(v623 + 16) = sub_100060DF0;
      *(void *)(v623 + 24) = v618;
      uint64_t v624 = swift_allocObject();
      *(void *)(v624 + 16) = sub_1000654EC;
      *(void *)(v624 + 24) = v623;
      uint64_t v625 = swift_allocObject();
      sub_1004B810C(v625, 3);
      void *v626 = sub_100065514;
      v626[1] = v621;
      v626[2] = sub_100065514;
      v626[3] = v622;
      v626[4] = sub_100065500;
      v626[5] = v624;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v619, v620))
      {
        v627 = (uint8_t *)sub_1008F9FAC();
        uint64_t v628 = swift_slowAlloc();
        uint64_t v706 = 0;
        uint64_t v707 = v628;
        *(_WORD *)v627 = 258;
        v705 = v627 + 2;
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v621;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065514;
        *((void *)&v708[0] + 1) = v622;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        swift_release();
        *(void *)&v708[0] = sub_100065500;
        *((void *)&v708[0] + 1) = v624;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
        uint64_t v629 = v1[718];
        uint64_t v630 = v1[702];
        uint64_t v631 = v1[701];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v619, v620, "beaconDisplayName: %{public}s", v627, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v632 = *(void (**)(uint64_t, uint64_t))(v630 + 8);
        v632(v629, v631);
      }
      else
      {
        uint64_t v633 = v1[718];
        uint64_t v634 = v1[702];
        uint64_t v635 = v1[701];

        swift_release();
        swift_release();
        swift_release();
        v632 = *(void (**)(uint64_t, uint64_t))(v634 + 8);
        v632(v633, v635);
      }
      v1[761] = v632;
      uint64_t v636 = v1[678];
      v637 = (uint64_t *)(*(void *)(v581 + 184)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryDisplayName);
      uint64_t *v637 = v696;
      v637[1] = v694;
      swift_bridgeObjectRelease();
      uint64_t v638 = v1[131];
      unint64_t v639 = v1[132];
      v640 = (uint64_t *)(*(void *)(v581 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce);
      uint64_t v641 = *v640;
      unint64_t v642 = v640[1];
      uint64_t *v640 = v638;
      v640[1] = v639;
      sub_1000361E0(v638, v639);
      sub_100037A24(v641, v642);
      uint64_t v643 = v1[133];
      unint64_t v644 = v1[134];
      v645 = (uint64_t *)(*(void *)(v581 + 184)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber);
      uint64_t v646 = *v645;
      unint64_t v647 = v645[1];
      uint64_t *v645 = v643;
      v645[1] = v644;
      sub_1000361E0(v643, v644);
      sub_100037A24(v646, v647);
      uint64_t v648 = v1[114];
      unint64_t v649 = v1[115];
      v650 = (uint64_t *)(*(void *)(v581 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts);
      uint64_t v651 = *v650;
      unint64_t v652 = v650[1];
      uint64_t *v650 = v648;
      v650[1] = v649;
      sub_1000361E0(v648, v649);
      sub_100037A24(v651, v652);
      uint64_t v653 = v1[118];
      unint64_t v654 = v1[119];
      v655 = (uint64_t *)(*(void *)(v581 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr);
      uint64_t v656 = *v655;
      unint64_t v657 = v655[1];
      uint64_t *v655 = v653;
      v655[1] = v654;
      sub_1000361E0(v653, v654);
      sub_100037A24(v656, v657);
      sub_10084BCF8();
      uint64_t v658 = Data.chunked(into:)();
      v1[762] = sub_100054D88(v658);
      v1[763] = 0;
      *(void *)(*(void *)(v581 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbers) = v658;
      swift_bridgeObjectRelease();
      if (*(unsigned char *)(v636 + 272) != 1)
      {
        v661 = (void *)swift_task_alloc();
        v1[764] = v661;
        void *v661 = v1;
        v661[1] = sub_100050564;
        uint64_t v337 = v1[697];
LABEL_76:
        uint64_t v338 = v1[677];
        return sub_100E61A6C(v337, v338);
      }
      swift_bridgeObjectRelease();
      uint64_t v659 = *(void *)(v1[678] + 184);
      swift_retain();
      uint64_t v660 = sub_100054EE4();
      v1[765] = 0;
      *(void *)(v659 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndMACAddresses) = v660;
      swift_release();
      swift_bridgeObjectRelease();
      v662 = (void *)swift_task_alloc();
      v1[766] = v662;
      void *v662 = v1;
      v662[1] = sub_100051604;
      uint64_t v663 = v1[746];
      uint64_t v664 = v1[677];
      return sub_1000553A4((uint64_t)(v1 + 2), v663, v664);
    }
    v702(v1[730], v700, v1[701]);
    uint64_t v194 = swift_allocObject();
    sub_10005E7E8(v697, v194 + 16);
    sub_10005E7E8(v23, (uint64_t)(v1 + 168));
    v195 = (uint64_t *)sub_10006242C((uint64_t)(v1 + 168));
    sub_100060EA0(v195, (void (*)(uint64_t, uint64_t))sub_1000361E0);
    v196 = Logger.logObject.getter();
    os_log_type_t v197 = static os_log_type_t.error.getter();
    uint64_t v198 = swift_allocObject();
    *(unsigned char *)(v198 + 16) = 34;
    uint64_t v199 = swift_allocObject();
    *(unsigned char *)(v199 + 16) = 8;
    uint64_t v200 = swift_allocObject();
    *(void *)(v200 + 16) = sub_100065698;
    *(void *)(v200 + 24) = v194;
    uint64_t v201 = swift_allocObject();
    *(void *)(v201 + 16) = sub_1000654EC;
    *(void *)(v201 + 24) = v200;
    uint64_t v202 = swift_allocObject();
    sub_1004B810C(v202, 3);
    void *v203 = sub_100065514;
    v203[1] = v198;
    v203[2] = sub_100065514;
    v203[3] = v199;
    v203[4] = sub_100065500;
    v203[5] = v201;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v196, v197))
    {
      v204 = (uint8_t *)sub_1008F9FAC();
      uint64_t v205 = swift_slowAlloc();
      uint64_t v706 = 0;
      uint64_t v707 = v205;
      *(_WORD *)v204 = 258;
      v705 = v204 + 2;
      *(void *)&v708[0] = sub_100065514;
      *((void *)&v708[0] + 1) = v198;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
      swift_release();
      *(void *)&v708[0] = sub_100065514;
      *((void *)&v708[0] + 1) = v199;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
      swift_release();
      *(void *)&v708[0] = sub_100065500;
      *((void *)&v708[0] + 1) = v201;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
      uint64_t v206 = v1[730];
      uint64_t v207 = v1[701];
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v196, v197, "Invalid sendPairingData payload %{public}s", v204, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      v695(v206, v207);
      uint64_t v150 = v697;
    }
    else
    {
      uint64_t v259 = v1[730];
      uint64_t v260 = v1[701];

      swift_release();
      swift_release();
      swift_release();
      v695(v259, v260);
    }
    uint64_t v90 = v1[746];
    uint64_t v91 = v1[745];
    uint64_t v92 = v1[744];
    sub_10005E370();
    swift_allocError();
    void *v261 = 0x8000000000000007;
    swift_willThrow();
    swift_release();
    uint64_t v171 = v150;
LABEL_55:
    sub_10005E844(v171, (void (*)(void))sub_10001CFB8);
LABEL_56:
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v92);
LABEL_57:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v262 = (uint64_t (*)(void))v1[1];
LABEL_58:
    return v262();
  }
  v94 = v1 + 594;
  v689 = v1 + 649;
  uint64_t v95 = v1[737];
  uint64_t v96 = v1[701];
  sub_10006242C((uint64_t)(v1 + 333));
  v702(v95, v700, v96);
  v97 = Logger.logObject.getter();
  os_log_type_t v98 = static os_log_type_t.default.getter();
  uint64_t v99 = sub_101020788(0);
  BOOL v100 = os_log_type_enabled(v97, v98);
  uint64_t v101 = v1[737];
  uint64_t v102 = v1[701];
  if (v100)
  {
    v665 = v1;
    uint64_t v103 = (uint8_t *)sub_1008F9FAC();
    uint64_t v707 = 0;
    *(void *)&v708[0] = 0;
    *(_WORD *)uint64_t v103 = 0;
    uint64_t v706 = (uint64_t)(v103 + 2);
    sub_100E08120((uint64_t)v99, (uint64_t)&v706, (uint64_t)&v707, (uint64_t)v708);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v97, v98, "Received pairing status.", v103, 2u);
    uint64_t v1 = v665;
    sub_1008F9FA0();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v695(v101, v102);
  *(unsigned char *)(v1[678] + 176) = 5;
  sub_10033A040(v689);
  sub_10000588C(&qword_101639B68);
  if (!swift_dynamicCast())
  {
    v702(v1[712], v700, v1[701]);
    uint64_t v172 = swift_allocObject();
    sub_10005E7E8(v697, v172 + 16);
    sub_10005E7E8(v23, (uint64_t)(v1 + 531));
    v173 = (uint64_t *)sub_10006242C((uint64_t)(v1 + 531));
    uint64_t v174 = v173[2];
    unint64_t v175 = v173[3];
    uint64_t v176 = v173[4];
    unint64_t v177 = v173[5];
    uint64_t v178 = v173[6];
    unint64_t v179 = v173[7];
    sub_1000361E0(*v173, v173[1]);
    sub_1000361E0(v174, v175);
    sub_1000361E0(v176, v177);
    sub_1000361E0(v178, v179);
    v180 = Logger.logObject.getter();
    os_log_type_t v181 = static os_log_type_t.error.getter();
    uint64_t v182 = swift_allocObject();
    *(unsigned char *)(v182 + 16) = 34;
    uint64_t v183 = swift_allocObject();
    *(unsigned char *)(v183 + 16) = 8;
    uint64_t v184 = swift_allocObject();
    *(void *)(v184 + 16) = sub_10005F8D4;
    *(void *)(v184 + 24) = v172;
    uint64_t v185 = swift_allocObject();
    *(void *)(v185 + 16) = sub_1000654EC;
    *(void *)(v185 + 24) = v184;
    uint64_t v186 = swift_allocObject();
    sub_1004B810C(v186, 3);
    void *v187 = sub_100065514;
    v187[1] = v182;
    v187[2] = sub_100065514;
    v187[3] = v183;
    v187[4] = sub_100065500;
    v187[5] = v185;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v180, v181))
    {
      v188 = (uint8_t *)sub_1008F9FAC();
      uint64_t v189 = swift_slowAlloc();
      uint64_t v706 = 0;
      uint64_t v707 = v189;
      *(_WORD *)v188 = 258;
      v705 = v188 + 2;
      *(void *)&v708[0] = sub_100065514;
      *((void *)&v708[0] + 1) = v182;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
      swift_release();
      *(void *)&v708[0] = sub_100065514;
      *((void *)&v708[0] + 1) = v183;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
      swift_release();
      *(void *)&v708[0] = sub_100065500;
      *((void *)&v708[0] + 1) = v185;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
      uint64_t v190 = v1[712];
      uint64_t v191 = v1[701];
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v180, v181, "Invalid sendPairingStatus payload %{public}s", v188, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      uint64_t v192 = v190;
      uint64_t v193 = v191;
    }
    else
    {
      uint64_t v256 = v1[712];
      uint64_t v257 = v1[701];

      swift_release();
      swift_release();
      swift_release();
      uint64_t v192 = v256;
      uint64_t v193 = v257;
    }
    v695(v192, v193);
    uint64_t v90 = v1[746];
    uint64_t v91 = v1[745];
    uint64_t v92 = v1[744];
    sub_10005E370();
    swift_allocError();
    void *v258 = 0x8000000000000007;
    swift_willThrow();
    swift_release();
    uint64_t v171 = v697;
    goto LABEL_55;
  }
  long long v142 = v94[3];
  *((_OWORD *)v1 + 303) = v94[2];
  *((_OWORD *)v1 + 304) = v142;
  long long v143 = v94[1];
  *((_OWORD *)v1 + 301) = *v94;
  *((_OWORD *)v1 + 302) = v143;
  v691 = v1 + 602;
  uint64_t v144 = v1[604];
  unint64_t v145 = v1[605];
  sub_1000361E0(v144, v145);
  char v146 = sub_1008F5DD8(v144, v145);
  if (!static DatabaseCheckpointMode.__derived_enum_equals(_:_:)(v146, 0))
  {
    v702(v1[711], v700, v1[701]);
    uint64_t v225 = swift_allocObject();
    *(unsigned char *)(v225 + 16) = v146;
    uint64_t v226 = swift_allocObject();
    *(void *)(v226 + 16) = sub_10005FE10;
    *(void *)(v226 + 24) = v225;
    v227 = Logger.logObject.getter();
    os_log_type_t v228 = static os_log_type_t.error.getter();
    uint64_t v229 = swift_allocObject();
    *(unsigned char *)(v229 + 16) = 34;
    uint64_t v230 = swift_allocObject();
    *(unsigned char *)(v230 + 16) = 8;
    uint64_t v231 = swift_allocObject();
    *(void *)(v231 + 16) = sub_10005FE1C;
    *(void *)(v231 + 24) = v226;
    uint64_t v232 = swift_allocObject();
    *(void *)(v232 + 16) = sub_1000654EC;
    *(void *)(v232 + 24) = v231;
    uint64_t v233 = swift_allocObject();
    sub_1004B810C(v233, 3);
    void *v234 = sub_100065514;
    v234[1] = v229;
    v234[2] = sub_100065514;
    v234[3] = v230;
    v234[4] = sub_100065500;
    v234[5] = v232;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v227, v228))
    {
      v235 = (uint8_t *)sub_1008F9FAC();
      uint64_t v236 = swift_slowAlloc();
      uint64_t v706 = 0;
      uint64_t v707 = v236;
      *(_WORD *)v235 = 258;
      v705 = v235 + 2;
      *(void *)&v708[0] = sub_100065514;
      *((void *)&v708[0] + 1) = v229;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
      swift_release();
      *(void *)&v708[0] = sub_100065514;
      *((void *)&v708[0] + 1) = v230;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
      swift_release();
      *(void *)&v708[0] = sub_100065500;
      *((void *)&v708[0] + 1) = v232;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
      uint64_t v237 = v1[711];
      uint64_t v238 = v1[701];
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v227, v228, "Pairing failed with status %{public}s", v235, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      uint64_t v239 = v237;
      uint64_t v240 = v238;
    }
    else
    {
      uint64_t v306 = v1[711];
      uint64_t v307 = v1[701];

      swift_release();
      swift_release();
      swift_release();
      uint64_t v239 = v306;
      uint64_t v240 = v307;
    }
    v695(v239, v240);
    uint64_t v90 = v1[746];
    uint64_t v91 = v1[745];
    uint64_t v92 = v1[744];
    sub_10005E370();
    swift_allocError();
    void *v335 = 0x8000000000000009;
    swift_willThrow();
    swift_release();
    sub_10005E844(v697, (void (*)(void))sub_10001CFB8);
    sub_10005FEF0(v691, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    goto LABEL_56;
  }
  v147 = v1 + 664;
  if (*(unsigned char *)(v1[678] + 274))
  {
    v148 = &type metadata for CollaborativeKeyGen.v2.C3;
    unint64_t v149 = sub_100060AD0();
  }
  else
  {
    v148 = &type metadata for CollaborativeKeyGen.v1.C3;
    unint64_t v149 = sub_10005FE44();
  }
  unint64_t v303 = v149;
  uint64_t v304 = v1[602];
  v667 = v1;
  unint64_t v305 = v1[603];
  v667[667] = v148;
  v667[668] = v149;
  sub_10001D958(v147);
  sub_1000361E0(v304, v305);
  KeyRepresentable<>.init(data:)(v304, v305, (uint64_t)v148, *(void *)(v303 + 8));
  uint64_t v684 = v667[701];
  uint64_t v677 = v667[710];
  uint64_t v308 = v667[678];
  sub_10001CEB0((long long *)v147, (uint64_t)(v667 + 659));
  uint64_t v309 = *(void *)(v308 + 184);
  sub_10001D010((uint64_t)(v667 + 659), (uint64_t)(v667 + 639));
  sub_10001D608((uint64_t)(v667 + 639), (uint64_t)(v667 + 654), &qword_101639B78);
  uint64_t v310 = v309 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3;
  swift_beginAccess();
  swift_retain();
  uint64_t v1 = v667;
  sub_100062604((uint64_t)(v667 + 654), v310, &qword_101639B78);
  swift_endAccess();
  swift_release();
  v311 = (uint64_t *)(*(void *)(v308 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
  uint64_t v312 = *v311;
  unint64_t v313 = v311[1];
  uint64_t *v311 = v144;
  v311[1] = v145;
  sub_1000361E0(v144, v145);
  sub_100037A24(v312, v313);
  uint64_t v314 = v667[606];
  unint64_t v315 = v667[607];
  v316 = (uint64_t *)(*(void *)(v308 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4);
  uint64_t v318 = *v316;
  unint64_t v317 = v316[1];
  uint64_t *v316 = v314;
  v316[1] = v315;
  sub_1000361E0(v314, v315);
  sub_100037A24(v318, v317);
  v702(v677, v700, v684);
  uint64_t v319 = swift_allocObject();
  *(unsigned char *)(v319 + 16) = v146;
  uint64_t v320 = swift_allocObject();
  *(void *)(v320 + 16) = sub_100065688;
  *(void *)(v320 + 24) = v319;
  v321 = Logger.logObject.getter();
  os_log_type_t v322 = static os_log_type_t.default.getter();
  uint64_t v323 = swift_allocObject();
  *(unsigned char *)(v323 + 16) = 34;
  uint64_t v324 = swift_allocObject();
  *(unsigned char *)(v324 + 16) = 8;
  uint64_t v325 = swift_allocObject();
  *(void *)(v325 + 16) = sub_1000654F0;
  *(void *)(v325 + 24) = v320;
  uint64_t v326 = swift_allocObject();
  *(void *)(v326 + 16) = sub_1000654EC;
  *(void *)(v326 + 24) = v325;
  uint64_t v327 = swift_allocObject();
  sub_1004B810C(v327, 3);
  void *v328 = sub_100065514;
  v328[1] = v323;
  v328[2] = sub_100065514;
  v328[3] = v324;
  v328[4] = sub_100065500;
  v328[5] = v326;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v321, v322))
  {
    v329 = (uint8_t *)sub_1008F9FAC();
    uint64_t v330 = swift_slowAlloc();
    uint64_t v706 = 0;
    uint64_t v707 = v330;
    *(_WORD *)v329 = 258;
    v705 = v329 + 2;
    *(void *)&v708[0] = sub_100065514;
    *((void *)&v708[0] + 1) = v323;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
    swift_release();
    *(void *)&v708[0] = sub_100065514;
    *((void *)&v708[0] + 1) = v324;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
    swift_release();
    *(void *)&v708[0] = sub_100065500;
    *((void *)&v708[0] + 1) = v326;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
    uint64_t v1 = v667;
    uint64_t v331 = v667[710];
    uint64_t v332 = v667[701];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v321, v322, "status: %{public}s", v329, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_1008F9FA0();

    uint64_t v333 = v331;
    uint64_t v334 = v332;
  }
  else
  {
    uint64_t v354 = v667[710];
    uint64_t v355 = v667[701];

    swift_release();
    swift_release();
    swift_release();
    uint64_t v333 = v354;
    uint64_t v334 = v355;
  }
  v695(v333, v334);
  v702(v1[708], v700, v1[701]);
  v356 = (_OWORD *)swift_allocObject();
  long long v357 = *((_OWORD *)v691 + 1);
  v356[1] = *(_OWORD *)v691;
  v356[2] = v357;
  long long v358 = *((_OWORD *)v691 + 3);
  v356[3] = *((_OWORD *)v691 + 2);
  v356[4] = v358;
  v359 = (_OWORD *)swift_allocObject();
  long long v360 = *((_OWORD *)v691 + 1);
  v359[1] = *(_OWORD *)v691;
  v359[2] = v360;
  long long v361 = *((_OWORD *)v691 + 3);
  v359[3] = *((_OWORD *)v691 + 2);
  v359[4] = v361;
  sub_10005FEF0(v691, (void (*)(uint64_t, uint64_t))sub_1000361E0);
  sub_10005FEF0(v691, (void (*)(uint64_t, uint64_t))sub_1000361E0);
  v672 = Logger.logObject.getter();
  os_log_type_t v678 = static os_log_type_t.debug.getter();
  uint64_t v362 = swift_allocObject();
  *(unsigned char *)(v362 + 16) = 0;
  uint64_t v363 = swift_allocObject();
  *(unsigned char *)(v363 + 16) = 8;
  uint64_t v364 = swift_allocObject();
  *(void *)(v364 + 16) = sub_10005FFD0;
  *(void *)(v364 + 24) = v356;
  uint64_t v365 = swift_allocObject();
  *(void *)(v365 + 16) = sub_100060004;
  *(void *)(v365 + 24) = v364;
  uint64_t v366 = swift_allocObject();
  *(unsigned char *)(v366 + 16) = 32;
  uint64_t v367 = swift_allocObject();
  *(unsigned char *)(v367 + 16) = 8;
  uint64_t v368 = swift_allocObject();
  *(void *)(v368 + 16) = sub_10005FFDC;
  *(void *)(v368 + 24) = v359;
  uint64_t v369 = swift_allocObject();
  *(void *)(v369 + 16) = sub_1000654EC;
  *(void *)(v369 + 24) = v368;
  uint64_t v370 = swift_allocObject();
  sub_1004B810C(v370, 6);
  void *v371 = sub_100065514;
  v371[1] = v362;
  v371[2] = sub_100065514;
  v371[3] = v363;
  v371[4] = sub_10006000C;
  v371[5] = v365;
  v371[6] = sub_100065514;
  v371[7] = v366;
  v371[8] = sub_100065514;
  v371[9] = v367;
  v371[10] = sub_100065500;
  v371[11] = v369;
  uint64_t v685 = v362;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v672, v678))
  {
    v372 = (uint8_t *)sub_1008F9FAC();
    uint64_t v373 = swift_slowAlloc();
    uint64_t v706 = 0;
    uint64_t v707 = v373;
    v374 = v372;
    *(_WORD *)v372 = 514;
    v705 = v372 + 2;
    *(void *)&v708[0] = sub_100065514;
    *((void *)&v708[0] + 1) = v685;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
    swift_release();
    *(void *)&v708[0] = sub_100065514;
    *((void *)&v708[0] + 1) = v363;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
    swift_release();
    *(void *)&v708[0] = sub_10006000C;
    *((void *)&v708[0] + 1) = v365;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
    swift_release();
    *(void *)&v708[0] = sub_100065514;
    *((void *)&v708[0] + 1) = v366;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
    swift_release();
    *(void *)&v708[0] = sub_100065514;
    *((void *)&v708[0] + 1) = v367;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
    swift_release();
    *(void *)&v708[0] = sub_100065500;
    *((void *)&v708[0] + 1) = v369;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
    uint64_t v375 = v667[708];
    uint64_t v376 = v667[701];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v672, v678, "S4 count %ld: %s", v374, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_1008F9FA0();

    uint64_t v377 = v375;
    uint64_t v1 = v667;
    uint64_t v378 = v376;
  }
  else
  {
    uint64_t v416 = v1[708];
    uint64_t v417 = v1[701];

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v377 = v416;
    uint64_t v378 = v417;
  }
  v695(v377, v378);
  v702(v1[707], v700, v1[701]);
  v418 = (_OWORD *)swift_allocObject();
  long long v419 = *((_OWORD *)v691 + 1);
  v418[1] = *(_OWORD *)v691;
  v418[2] = v419;
  long long v420 = *((_OWORD *)v691 + 3);
  v418[3] = *((_OWORD *)v691 + 2);
  v418[4] = v420;
  sub_10005FEF0(v691, (void (*)(uint64_t, uint64_t))sub_1000361E0);
  v421 = Logger.logObject.getter();
  os_log_type_t v422 = static os_log_type_t.debug.getter();
  uint64_t v423 = swift_allocObject();
  *(unsigned char *)(v423 + 16) = 32;
  uint64_t v424 = swift_allocObject();
  *(unsigned char *)(v424 + 16) = 8;
  uint64_t v425 = swift_allocObject();
  *(void *)(v425 + 16) = sub_1000656A0;
  *(void *)(v425 + 24) = v418;
  uint64_t v426 = swift_allocObject();
  *(void *)(v426 + 16) = sub_1000654EC;
  *(void *)(v426 + 24) = v425;
  uint64_t v427 = swift_allocObject();
  sub_1004B810C(v427, 3);
  void *v428 = sub_100065514;
  v428[1] = v423;
  v428[2] = sub_100065514;
  v428[3] = v424;
  v428[4] = sub_100065500;
  v428[5] = v426;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v421, v422))
  {
    v429 = (uint8_t *)sub_1008F9FAC();
    uint64_t v430 = swift_slowAlloc();
    uint64_t v706 = 0;
    uint64_t v707 = v430;
    *(_WORD *)v429 = 258;
    v705 = v429 + 2;
    *(void *)&v708[0] = sub_100065514;
    *((void *)&v708[0] + 1) = v423;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
    swift_release();
    *(void *)&v708[0] = sub_100065514;
    *((void *)&v708[0] + 1) = v424;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
    swift_release();
    *(void *)&v708[0] = sub_100065500;
    *((void *)&v708[0] + 1) = v426;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))v708, (uint64_t)&v705, (uint64_t)&v706, (uint64_t)&v707);
    uint64_t v1 = v667;
    uint64_t v431 = v667[707];
    uint64_t v432 = v667[701];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v421, v422, "C3: %s", v429, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_1008F9FA0();

    v695(v431, v432);
  }
  else
  {
    uint64_t v459 = v1[707];
    uint64_t v460 = v1[701];

    swift_release();
    swift_release();
    swift_release();
    v695(v459, v460);
  }
  uint64_t v461 = v1[662];
  uint64_t v462 = v1[663];
  uint64_t v463 = (uint64_t)(v667 + 659);
  sub_10001CD44(v667 + 659, v461);
  uint64_t v464 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v462 + 8) + 8) + 40))(v461);
  unint64_t v466 = v465;
  sub_100058548(v464, v465, (long long *)v1 + 292);
  v1[767] = 0;
  sub_10001CFB8(v464, v466);
  sub_10001D608((uint64_t)(v1 + 584), (uint64_t)(v1 + 574), &qword_101639B80);
  if (v1[575] >> 60 == 15)
  {
    uint64_t v499 = v1[703];
    uint64_t v500 = v1[701];
    uint64_t v501 = sub_100F7E39C();
    v702(v499, v501, v500);
    v502 = Logger.logObject.getter();
    LOBYTE(v500) = static os_log_type_t.error.getter();
    v503 = sub_101020788(0);
    os_log_type_t v504 = v500;
    BOOL v505 = os_log_type_enabled(v502, (os_log_type_t)v500);
    uint64_t v506 = v1[703];
    uint64_t v507 = v1[701];
    if (v505)
    {
      v508 = (uint8_t *)sub_1008F9FAC();
      uint64_t v707 = 0;
      *(void *)&v708[0] = 0;
      *(_WORD *)v508 = 0;
      uint64_t v706 = (uint64_t)(v508 + 2);
      sub_100E08120((uint64_t)v503, (uint64_t)&v706, (uint64_t)&v707, (uint64_t)v708);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v502, v504, "Unable to generate initial pairing data from owner context and C3!)", v508, 2u);
      uint64_t v463 = (uint64_t)(v667 + 659);
      sub_1008F9FA0();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v695(v506, v507);
    uint64_t v509 = v1[746];
    uint64_t v510 = v1[745];
    uint64_t v511 = v1[744];
    sub_10005E370();
    swift_allocError();
    void *v512 = 0x8000000000000007;
    swift_willThrow();
    swift_release();
    sub_10005E844(v697, (void (*)(void))sub_10001CFB8);
    sub_10005FEF0(v691, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    (*(void (**)(uint64_t, uint64_t))(v510 + 8))(v509, v511);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v463);
    goto LABEL_57;
  }
  long long v528 = *((_OWORD *)v1 + 290);
  *((_OWORD *)v1 + 284) = *((_OWORD *)v1 + 289);
  *((_OWORD *)v1 + 285) = v528;
  *((_OWORD *)v1 + 286) = *((_OWORD *)v1 + 291);
  long long v529 = *((_OWORD *)v1 + 288);
  *((_OWORD *)v1 + 282) = *((_OWORD *)v1 + 287);
  *((_OWORD *)v1 + 283) = v529;
  v530 = (void *)swift_task_alloc();
  v1[768] = v530;
  void *v530 = v1;
  v530[1] = sub_100052438;
  uint64_t v531 = v1[746];
  uint64_t v532 = v1[691];
  uint64_t v533 = v1[677];
  return sub_100058ABC(v532, (uint64_t)(v1 + 564), v531, v533);
}

uint64_t sub_10004F428()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 5424);
  swift_task_dealloc();
  return _swift_task_switch(sub_10004F538, v1, 0);
}

uint64_t sub_10004F538()
{
  uint64_t v65 = v0;
  uint64_t v1 = *(void *)(v0 + 5584);
  uint64_t v2 = *(void *)(v0 + 5544);
  uint64_t v3 = *(void *)(v0 + 5536);
  sub_10001D074(*(void *)(v0 + 5592), v1, &qword_10163BB20);
  uint64_t v57 = v0 + 552;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 5584), &qword_10163BB20);
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 5584);
    unint64_t v5 = sub_1004CC5F4(*(void *)(v0 + 5968));
    sub_1000617DC(v4, type metadata accessor for OwnedBeaconGroup);
    if ((v5 & 0x100) == 0) {
      goto LABEL_5;
    }
  }
  unint64_t v5 = 255;
LABEL_5:
  uint64_t v6 = sub_101144344(*(void *)(v0 + 5592), v5);
  unint64_t v8 = v7;
  uint64_t v9 = *(void *)(v0 + 6072);
  unint64_t v10 = *(void *)(v0 + 6048);
  unint64_t v11 = *(void *)(v0 + 6040);
  sub_10001DAB4(*(void *)(v0 + 5592), &qword_10163BB20);
  uint64_t v12 = sub_100034EEC(v11, v10);
  unint64_t v58 = v8;
  uint64_t v59 = v6;
  if (v9)
  {
    (*(void (**)(void, void, void))(v0 + 6008))(*(void *)(v0 + 5856), *(void *)(v0 + 6000), *(void *)(v0 + 5608));
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v9;
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    uint64_t v16 = swift_allocObject();
    *(unsigned char *)(v16 + 16) = 66;
    uint64_t v17 = swift_allocObject();
    *(unsigned char *)(v17 + 16) = 8;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_1000613DC;
    *(void *)(v18 + 24) = v13;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_1000654F8;
    *(void *)(v19 + 24) = v18;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = sub_1000654FC;
    *(void *)(v20 + 24) = v19;
    uint64_t v21 = swift_allocObject();
    sub_1004B810C(v21, 3);
    *uint64_t v22 = sub_100065514;
    v22[1] = v16;
    v22[2] = sub_100065514;
    double v22[3] = v17;
    v22[4] = sub_100065508;
    v22[5] = v20;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v23 = (uint8_t *)sub_1008F9FAC();
      uint64_t v61 = swift_slowAlloc();
      uint64_t v62 = 0;
      *(_WORD *)uint64_t v23 = 258;
      uint64_t v60 = v23 + 2;
      uint64_t v63 = sub_100065514;
      uint64_t v64 = v16;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v63, (uint64_t)&v60, (uint64_t)&v61, (uint64_t)&v62);
      swift_release();
      uint64_t v63 = sub_100065514;
      uint64_t v64 = v17;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v63, (uint64_t)&v60, (uint64_t)&v61, (uint64_t)&v62);
      swift_release();
      uint64_t v63 = sub_100065508;
      uint64_t v64 = v20;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v63, (uint64_t)&v60, (uint64_t)&v61, (uint64_t)&v62);
      unint64_t v54 = *(void (**)(uint64_t, uint64_t))(v0 + 6032);
      uint64_t v24 = *(void *)(v0 + 5856);
      uint64_t v25 = *(void *)(v0 + 5608);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to parse beacon group info due to %{public}@", v23, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      v54(v24, v25);
    }
    else
    {
      uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v0 + 6032);
      uint64_t v39 = *(void *)(v0 + 5856);
      uint64_t v40 = *(void *)(v0 + 5608);

      swift_release();
      swift_release();
      swift_release();
      v38(v39, v40);
    }
    sub_100054204(v59, v58, v0 + 1872);
    uint64_t v41 = *(void *)(v0 + 5960);
    uint64_t v53 = *(void *)(v0 + 5952);
    uint64_t v55 = *(void *)(v0 + 5968);
    uint64_t v48 = v0 + 2400;
    sub_10005E7E8(v0 + 1872, v0 + 2400);
    swift_release();
    sub_10005E844(v57, (void (*)(void))sub_10001CFB8);
    swift_errorRelease();
    sub_10005E844(v57, (void (*)(void))sub_10001CFB8);
    sub_10001CFB8(v59, v58);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v55, v53);
  }
  else
  {
    uint64_t v26 = v12;
    (*(void (**)(void, void, void))(v0 + 6008))(*(void *)(v0 + 5864), *(void *)(v0 + 6000), *(void *)(v0 + 5608));
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v26;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = sub_100061428;
    *(void *)(v28 + 24) = v27;
    swift_bridgeObjectRetain();
    os_log_type_t v29 = Logger.logObject.getter();
    uint64_t v30 = static os_log_type_t.default.getter();
    uint64_t v31 = swift_allocObject();
    *(unsigned char *)(v31 + 16) = 32;
    uint64_t v32 = swift_allocObject();
    *(unsigned char *)(v32 + 16) = 8;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = sub_100061434;
    *(void *)(v33 + 24) = v28;
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = sub_1000654EC;
    *(void *)(v34 + 24) = v33;
    uint64_t v35 = swift_allocObject();
    sub_1004B810C(v35, 3);
    *unint64_t v36 = sub_100065514;
    v36[1] = v31;
    void v36[2] = sub_100065514;
    v36[3] = v32;
    v36[4] = sub_100065500;
    v36[5] = v34;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v29, (os_log_type_t)v30))
    {
      uint64_t v37 = (uint8_t *)sub_1008F9FAC();
      uint64_t v61 = 0;
      uint64_t v62 = swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 258;
      uint64_t v60 = v37 + 2;
      uint64_t v63 = sub_100065514;
      uint64_t v64 = v31;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v63, (uint64_t)&v60, (uint64_t)&v61, (uint64_t)&v62);
      swift_release();
      uint64_t v63 = sub_100065514;
      uint64_t v64 = v32;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v63, (uint64_t)&v60, (uint64_t)&v61, (uint64_t)&v62);
      swift_release();
      uint64_t v63 = sub_100065500;
      uint64_t v64 = v34;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v63, (uint64_t)&v60, (uint64_t)&v61, (uint64_t)&v62);
      uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v0 + 6032);
      uint64_t v51 = *(void *)(v0 + 5864);
      uint64_t v52 = *(void *)(v0 + 5608);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v30, "beaconGroupInfo: %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      v56(v51, v52);
    }
    else
    {
      uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v0 + 6032);
      uint64_t v43 = *(void *)(v0 + 5864);
      uint64_t v44 = *(void *)(v0 + 5608);

      swift_release();
      swift_release();
      swift_release();
      v42(v43, v44);
    }
    *(void *)(*(void *)(*(void *)(v0 + 5424) + 184)
              + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds) = v26;
    swift_bridgeObjectRelease();
    sub_100054204(v59, v58, v0 + 2136);
    uint64_t v48 = v0 + 288;
    uint64_t v45 = *(void *)(v0 + 5968);
    uint64_t v46 = *(void *)(v0 + 5960);
    uint64_t v47 = *(void *)(v0 + 5952);
    sub_10005E7E8(v0 + 2136, v0 + 288);
    swift_release();
    sub_10005E844(v57, (void (*)(void))sub_10001CFB8);
    sub_10005E844(v57, (void (*)(void))sub_10001CFB8);
    sub_10001CFB8(v59, v58);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
  }
  sub_10005E7E8(v48, v0 + 3720);
  sub_10005E7E8(v0 + 3720, *(void *)(v0 + 5392));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v49 = *(uint64_t (**)(void))(v0 + 8);
  return v49();
}

uint64_t sub_100050564()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 5424);
  swift_task_dealloc();
  return _swift_task_switch(sub_100050674, v1, 0);
}

uint64_t sub_100050674()
{
  uint64_t v76 = v0;
  uint64_t v1 = *(void *)(v0 + 5576);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 5544) + 48))(v1, 1, *(void *)(v0 + 5536)) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10001DAB4(v1, &qword_10163BB20);
    uint64_t v2 = *(void *)(v0 + 6104);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 6104);
    uint64_t v3 = *(void *)(v0 + 6096);
    sub_10006170C(v1, *(void *)(v0 + 5560), type metadata accessor for OwnedBeaconGroup);
    uint64_t v4 = sub_1004CCF10();
    uint64_t v5 = sub_1011586CC(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    LOBYTE(v3) = sub_10005FD50(v3, v5);
    swift_bridgeObjectRelease();
    uint64_t v6 = *(void *)(v0 + 6096);
    if ((v3 & 1) == 0)
    {
      (*(void (**)(void, void, void))(v0 + 6008))(*(void *)(v0 + 5712), *(void *)(v0 + 6000), *(void *)(v0 + 5608));
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = v6;
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 16) = sub_10006568C;
      *(void *)(v30 + 24) = v29;
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = v5;
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = sub_10006568C;
      *(void *)(v32 + 24) = v31;
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.error.getter();
      uint64_t v34 = swift_allocObject();
      *(unsigned char *)(v34 + 16) = 32;
      uint64_t v35 = swift_allocObject();
      *(unsigned char *)(v35 + 16) = 8;
      uint64_t v36 = swift_allocObject();
      *(void *)(v36 + 16) = sub_100061314;
      *(void *)(v36 + 24) = v30;
      uint64_t v37 = v33;
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = sub_1000654EC;
      *(void *)(v38 + 24) = v36;
      uint64_t v39 = swift_allocObject();
      *(unsigned char *)(v39 + 16) = 32;
      uint64_t v40 = swift_allocObject();
      *(unsigned char *)(v40 + 16) = 8;
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = sub_10006131C;
      *(void *)(v41 + 24) = v32;
      uint64_t v42 = swift_allocObject();
      *(void *)(v42 + 16) = sub_1000654EC;
      *(void *)(v42 + 24) = v41;
      uint64_t v43 = swift_allocObject();
      sub_1004B810C(v43, 6);
      *uint64_t v44 = sub_100065514;
      v44[1] = v34;
      v44[2] = sub_100065514;
      v44[3] = v35;
      v44[4] = sub_100065500;
      v44[5] = v38;
      v44[6] = sub_100065514;
      v44[7] = v39;
      v44[8] = sub_100065514;
      v44[9] = v40;
      v44[10] = sub_100065500;
      v44[11] = v42;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v37, v67))
      {
        uint64_t v69 = v40;
        uint64_t v45 = (uint8_t *)sub_1008F9FAC();
        uint64_t v72 = 0;
        uint64_t v73 = swift_slowAlloc();
        *(_WORD *)uint64_t v45 = 514;
        unint64_t v71 = v45 + 2;
        unint64_t v74 = sub_100065514;
        uint64_t v75 = v34;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
        if (v2)
        {
          return swift_errorRelease();
        }
        swift_release();
        unint64_t v74 = sub_100065514;
        uint64_t v75 = v35;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
        swift_release();
        unint64_t v74 = sub_100065500;
        uint64_t v75 = v38;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
        swift_release();
        unint64_t v74 = sub_100065514;
        uint64_t v75 = v39;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
        swift_release();
        unint64_t v74 = sub_100065514;
        uint64_t v75 = v69;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
        swift_release();
        unint64_t v74 = sub_100065500;
        uint64_t v75 = v42;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
        uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v0 + 6088);
        uint64_t v65 = *(void *)(v0 + 5712);
        uint64_t v66 = *(void *)(v0 + 5608);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v37, v67, "Invalid otherSerialNumbers: %s. allSerialNumbers: %s", v45, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v64(v65, v66);
      }
      else
      {
        uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v0 + 6088);
        uint64_t v53 = *(void *)(v0 + 5712);
        uint64_t v54 = *(void *)(v0 + 5608);

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v70(v53, v54);
      }
      uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v0 + 6088);
      uint64_t v56 = *(void *)(v0 + 5968);
      uint64_t v57 = *(void *)(v0 + 5960);
      uint64_t v58 = *(void *)(v0 + 5952);
      uint64_t v59 = *(void *)(v0 + 5704);
      uint64_t v60 = *(void *)(v0 + 5608);
      uint64_t v61 = *(void *)(v0 + 5560);
      (*(void (**)(uint64_t, void, uint64_t))(v0 + 6008))(v59, *(void *)(v0 + 6000), v60);
      sub_1004CCF70(v59);
      v55(v59, v60);
      sub_10005E370();
      swift_allocError();
      *uint64_t v62 = 0x8000000000000007;
      swift_willThrow();
      swift_release();
      sub_10005E844(v0 + 552, (void (*)(void))sub_10001CFB8);
      sub_100060EA0((uint64_t *)(v0 + 816), (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      sub_1000617DC(v61, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
LABEL_25:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v63 = *(uint64_t (**)(void))(v0 + 8);
      return v63();
    }
    sub_1000617DC(*(void *)(v0 + 5560), type metadata accessor for OwnedBeaconGroup);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = *(void *)(*(void *)(v0 + 5424) + 184);
  swift_retain();
  uint64_t v8 = sub_100054EE4();
  *(void *)(v0 + 6120) = v2;
  if (v2)
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 6008);
    uint64_t v10 = *(void *)(v0 + 6000);
    uint64_t v11 = *(void *)(v0 + 5736);
    uint64_t v12 = *(void *)(v0 + 5608);
    swift_release();
    v9(v11, v10, v12);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v2;
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    uint64_t v16 = swift_allocObject();
    *(unsigned char *)(v16 + 16) = 34;
    uint64_t v17 = swift_allocObject();
    *(unsigned char *)(v17 + 16) = 8;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_100060E78;
    *(void *)(v18 + 24) = v13;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_1000654EC;
    *(void *)(v19 + 24) = v18;
    uint64_t v20 = swift_allocObject();
    sub_1004B810C(v20, 3);
    *uint64_t v21 = sub_100065514;
    v21[1] = v16;
    v21[2] = sub_100065514;
    v21[3] = v17;
    v21[4] = sub_100065500;
    v21[5] = v19;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v22 = (uint8_t *)sub_1008F9FAC();
      uint64_t v72 = 0;
      uint64_t v73 = swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 258;
      unint64_t v71 = v22 + 2;
      unint64_t v74 = sub_100065514;
      uint64_t v75 = v16;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
      swift_release();
      unint64_t v74 = sub_100065514;
      uint64_t v75 = v17;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
      swift_release();
      unint64_t v74 = sub_100065500;
      uint64_t v75 = v19;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
      uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v0 + 6088);
      uint64_t v23 = *(void *)(v0 + 5736);
      uint64_t v24 = *(void *)(v0 + 5608);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to parse otherSerialNumbersAndMacAddressesMap due to %{public}s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      v68(v23, v24);
    }
    else
    {
      uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v0 + 6088);
      uint64_t v47 = *(void *)(v0 + 5736);
      uint64_t v48 = *(void *)(v0 + 5608);

      swift_release();
      swift_release();
      swift_release();
      v46(v47, v48);
    }
    uint64_t v49 = *(void *)(v0 + 5968);
    uint64_t v50 = *(void *)(v0 + 5960);
    uint64_t v51 = *(void *)(v0 + 5952);
    sub_10005E370();
    swift_allocError();
    *uint64_t v52 = 0x8000000000000007;
    swift_willThrow();
    swift_release();
    sub_10005E844(v0 + 552, (void (*)(void))sub_10001CFB8);
    swift_errorRelease();
    sub_100060EA0((uint64_t *)(v0 + 816), (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
    goto LABEL_25;
  }
  *(void *)(v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndMACAddresses) = v8;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 6128) = v25;
  *uint64_t v25 = v0;
  v25[1] = sub_100051604;
  uint64_t v26 = *(void *)(v0 + 5968);
  uint64_t v27 = *(void *)(v0 + 5416);
  return sub_1000553A4(v0 + 16, v26, v27);
}

uint64_t sub_100051604()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 5424);
  swift_task_dealloc();
  return _swift_task_switch(sub_100051714, v1, 0);
}

uint64_t sub_100051714()
{
  uint64_t v57 = v0;
  uint64_t v1 = v0 + 16;
  if ((*(unsigned char *)(v0 + 280) & 1) == 0)
  {
    uint64_t v51 = v0 + 3720;
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 6008);
    uint64_t v19 = *(void *)(v0 + 6000);
    uint64_t v20 = *(void *)(v0 + 5728);
    uint64_t v21 = *(void *)(v0 + 5608);
    sub_10005E7E8(v1, v0 + 3192);
    v18(v20, v19, v21);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    uint64_t v24 = sub_101020788(0);
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v48 = *(void *)(v0 + 5968);
      uint64_t v25 = *(void *)(v0 + 5960);
      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v0 + 6088);
      uint64_t v46 = *(void *)(v0 + 5952);
      uint64_t v42 = *(void *)(v0 + 5608);
      uint64_t v43 = *(void *)(v0 + 5728);
      uint64_t v26 = (uint8_t *)sub_1008F9FAC();
      uint64_t v53 = 0;
      *(_WORD *)uint64_t v26 = 0;
      uint64_t v55 = v26 + 2;
      v56[0] = 0;
      sub_100E08120((uint64_t)v24, (uint64_t)&v55, (uint64_t)v56, (uint64_t)&v53);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Successfully generated finalize pairing command.", v26, 2u);
      sub_1008F9FA0();

      swift_release();
      sub_10005E844(v0 + 552, (void (*)(void))sub_10001CFB8);
      sub_100060EA0((uint64_t *)(v0 + 816), (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      v44(v43, v42);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v48, v46);
    }
    else
    {
      uint64_t v49 = *(void *)(v0 + 5968);
      uint64_t v37 = *(void *)(v0 + 5960);
      uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v0 + 6088);
      uint64_t v47 = *(void *)(v0 + 5952);
      uint64_t v38 = *(void *)(v0 + 5728);
      uint64_t v39 = *(void *)(v0 + 5608);

      swift_bridgeObjectRelease();
      swift_release();
      sub_10005E844(v0 + 552, (void (*)(void))sub_10001CFB8);
      sub_100060EA0((uint64_t *)(v0 + 816), (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      v45(v38, v39);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v49, v47);
    }
    sub_10005E7E8(v0 + 3192, v51);
    sub_10005E7E8(v51, *(void *)(v0 + 5392));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_15;
  }
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 6008);
  uint64_t v3 = *(void *)(v0 + 6000);
  uint64_t v4 = *(void *)(v0 + 5720);
  uint64_t v5 = *(void *)(v0 + 5608);
  sub_10006105C(v1, v0 + 5024);
  v2(v4, v3, v5);
  sub_1000610B8(v0 + 5024, v0 + 4976);
  uint64_t v6 = swift_allocObject();
  sub_10006105C(v0 + 4976, v6 + 16);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 16) = 34;
  uint64_t v10 = swift_allocObject();
  *(unsigned char *)(v10 + 16) = 8;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_1000611F0;
  *(void *)(v11 + 24) = v6;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1000654EC;
  *(void *)(v12 + 24) = v11;
  uint64_t v13 = swift_allocObject();
  sub_1004B810C(v13, 3);
  *uint64_t v14 = sub_100065514;
  v14[1] = v9;
  v14[2] = sub_100065514;
  v14[3] = v10;
  v14[4] = sub_100065500;
  uint64_t v14[5] = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v7, v8))
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 6088);
    uint64_t v28 = *(void *)(v0 + 5720);
    uint64_t v29 = *(void *)(v0 + 5608);

    swift_release();
    swift_release();
    swift_release();
    v27(v28, v29);
LABEL_12:
    uint64_t v30 = *(void *)(v0 + 5968);
    uint64_t v31 = *(void *)(v0 + 5960);
    uint64_t v32 = *(void *)(v0 + 5952);
    sub_100061234();
    uint64_t v33 = swift_allocError();
    sub_1000610B8(v0 + 5024, v34);
    sub_10005E370();
    swift_allocError();
    *uint64_t v35 = v33;
    swift_willThrow();
    swift_release();
    sub_10005E844(v0 + 552, (void (*)(void))sub_10001CFB8);
    sub_100060EA0((uint64_t *)(v0 + 816), (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    sub_100061288(v0 + 5024);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
LABEL_15:
    return v36();
  }
  uint64_t v15 = *(void *)(v0 + 6120);
  uint64_t v16 = (uint8_t *)sub_1008F9FAC();
  uint64_t v55 = 0;
  v56[0] = swift_slowAlloc();
  *(_WORD *)uint64_t v16 = 258;
  uint64_t v52 = v16 + 2;
  uint64_t v53 = sub_100065514;
  uint64_t v54 = v9;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v53, (uint64_t)&v52, (uint64_t)&v55, (uint64_t)v56);
  if (!v15)
  {
    swift_release();
    uint64_t v53 = sub_100065514;
    uint64_t v54 = v10;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v53, (uint64_t)&v52, (uint64_t)&v55, (uint64_t)v56);
    swift_release();
    uint64_t v53 = sub_100065500;
    uint64_t v54 = v12;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v53, (uint64_t)&v52, (uint64_t)&v55, (uint64_t)v56);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v0 + 6088);
    uint64_t v40 = *(void *)(v0 + 5720);
    uint64_t v41 = *(void *)(v0 + 5608);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unable to generate finalizeCommand payload due to %{public}s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_1008F9FA0();

    v50(v40, v41);
    goto LABEL_12;
  }
  return swift_errorRelease();
}

uint64_t sub_100052438()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 5424);
  swift_task_dealloc();
  return _swift_task_switch(sub_100052548, v1, 0);
}

uint64_t sub_100052548()
{
  uint64_t v124 = v0;
  uint64_t v1 = *(unint64_t **)(v0 + 5528);
  uint64_t v116 = v0 + 4672;
  uint64_t v117 = v0 + 552;
  uint64_t v118 = (uint64_t *)(v0 + 4816);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v17 = *(void *)(v0 + 5512);
    uint64_t v18 = *(void *)(v0 + 5504);
    sub_10006170C((uint64_t)v1, v17, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingService.BeaconCreationResult);
    sub_100061774(v17, v18, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingService.BeaconCreationResult);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 6008);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = *(void *)(v0 + 5632);
      uint64_t v22 = *(void *)(v0 + 5608);
      uint64_t v23 = *(void *)(v0 + 5456);
      uint64_t v24 = *(void *)(v0 + 5448);
      uint64_t v25 = *(void *)(v0 + 5432);
      sub_10006170C(*(void *)(v0 + 5504), v23, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      uint64_t v26 = sub_100F7E378();
      v20(v21, v26, v22);
      sub_100061774(v23, v24, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      unint64_t v27 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
      uint64_t v28 = swift_allocObject();
      sub_10006170C(v24, v28 + v27, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = sub_1000601E0;
      *(void *)(v29 + 24) = v28;
      sub_100061774(v23, v24, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      uint64_t v30 = swift_allocObject();
      sub_10006170C(v24, v30 + v27, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = sub_100060444;
      *(void *)(v31 + 24) = v30;
      uint64_t v112 = Logger.logObject.getter();
      os_log_type_t v109 = static os_log_type_t.default.getter();
      uint64_t v32 = swift_allocObject();
      *(unsigned char *)(v32 + 16) = 32;
      uint64_t v107 = swift_allocObject();
      *(unsigned char *)(v107 + 16) = 8;
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = sub_100060258;
      *(void *)(v33 + 24) = v29;
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = sub_1000654EC;
      *(void *)(v34 + 24) = v33;
      uint64_t v35 = swift_allocObject();
      *(unsigned char *)(v35 + 16) = 112;
      uint64_t v36 = swift_allocObject();
      *(unsigned char *)(v36 + 16) = 8;
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = 1752392040;
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = sub_100060540;
      *(void *)(v38 + 24) = v37;
      uint64_t v39 = swift_allocObject();
      *(unsigned char *)(v39 + 16) = 33;
      uint64_t v40 = swift_allocObject();
      *(unsigned char *)(v40 + 16) = 8;
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = sub_1000604E8;
      *(void *)(v41 + 24) = v31;
      uint64_t v42 = swift_allocObject();
      *(void *)(v42 + 16) = sub_1000654EC;
      *(void *)(v42 + 24) = v41;
      uint64_t v43 = swift_allocObject();
      sub_1004B810C(v43, 9);
      *uint64_t v44 = sub_100065514;
      v44[1] = v32;
      v44[2] = sub_100065514;
      v44[3] = v107;
      v44[4] = sub_100065500;
      v44[5] = v34;
      v44[6] = sub_100065514;
      v44[7] = v35;
      v44[8] = sub_100065514;
      v44[9] = v36;
      v44[10] = sub_10006000C;
      v44[11] = v38;
      v44[12] = sub_100065514;
      v44[13] = v39;
      v44[14] = sub_100065514;
      v44[15] = v40;
      v44[16] = sub_100065500;
      v44[17] = v42;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v112, v109))
      {
        uint64_t v105 = v38;
        uint64_t v45 = *(void *)(v0 + 6136);
        uint64_t v46 = (uint8_t *)sub_1008F9FAC();
        uint64_t v120 = 0;
        uint64_t v121 = swift_slowAlloc();
        *(_WORD *)uint64_t v46 = 771;
        uint64_t v119 = v46 + 2;
        uint64_t v122 = sub_100065514;
        uint64_t v123 = v32;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        if (v45) {
          goto LABEL_28;
        }
        swift_release();
        uint64_t v122 = sub_100065514;
        uint64_t v123 = v107;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        uint64_t v122 = sub_100065500;
        uint64_t v123 = v34;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        uint64_t v122 = sub_100065514;
        uint64_t v123 = v35;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        uint64_t v122 = sub_100065514;
        uint64_t v123 = v36;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        uint64_t v122 = (uint64_t (*)())sub_10006000C;
        uint64_t v123 = v105;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        uint64_t v122 = sub_100065514;
        uint64_t v123 = v39;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        uint64_t v122 = sub_100065514;
        uint64_t v123 = v40;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        uint64_t v122 = sub_100065500;
        uint64_t v123 = v42;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        uint64_t v47 = *(void *)(v0 + 5632);
        uint64_t v48 = *(void *)(v0 + 5616);
        uint64_t v49 = *(void *)(v0 + 5608);
        uint64_t v50 = *(void *)(v0 + 5512);
        uint64_t v51 = *(void *)(v0 + 5456);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v112, v109, "Created standalone beacon: %s. BeaconId: %{private,mask.hash}s", v46, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
        sub_1000617DC(v51, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
        uint64_t v52 = v50;
      }
      else
      {
        uint64_t v86 = *(void *)(v0 + 5616);
        uint64_t v103 = *(void *)(v0 + 5608);
        uint64_t v104 = *(void *)(v0 + 5632);
        uint64_t v111 = *(void *)(v0 + 5512);
        uint64_t v106 = *(void *)(v0 + 5456);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v104, v103);
        sub_1000617DC(v106, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
        uint64_t v52 = v111;
      }
      sub_1000617DC(v52, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingService.BeaconCreationResult);
      *(unsigned char *)(*(void *)(v0 + 5424) + 176) = 9;
      uint64_t v87 = v0 + 5272;
    }
    else
    {
      uint64_t v61 = *(void *)(v0 + 5640);
      uint64_t v62 = *(void *)(v0 + 5608);
      uint64_t v63 = *(void *)(v0 + 5552);
      uint64_t v64 = *(void *)(v0 + 5504);
      uint64_t v65 = *(void *)(v0 + 5488);
      uint64_t v66 = *(void *)(v0 + 5480);
      uint64_t v108 = *(void *)(v0 + 6000);
      uint64_t v110 = *(void *)(v0 + 5464);
      uint64_t v67 = v64 + *(int *)(sub_10000588C(&qword_101639B90) + 48);
      sub_10006170C(v64, v63, type metadata accessor for OwnedBeaconGroup);
      sub_10006170C(v67, v65, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      v20(v61, v108, v62);
      sub_100061774(v65, v66, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      unint64_t v68 = (*(unsigned __int8 *)(v110 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
      uint64_t v69 = swift_allocObject();
      sub_10006170C(v66, v69 + v68, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v70 = swift_allocObject();
      *(void *)(v70 + 16) = sub_100060A10;
      *(void *)(v70 + 24) = v69;
      unint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.default.getter();
      uint64_t v73 = swift_allocObject();
      *(unsigned char *)(v73 + 16) = 112;
      uint64_t v74 = swift_allocObject();
      *(unsigned char *)(v74 + 16) = 8;
      uint64_t v75 = swift_allocObject();
      *(void *)(v75 + 16) = 1752392040;
      uint64_t v76 = swift_allocObject();
      *(void *)(v76 + 16) = sub_10006550C;
      *(void *)(v76 + 24) = v75;
      uint64_t v77 = swift_allocObject();
      *(unsigned char *)(v77 + 16) = 33;
      uint64_t v78 = swift_allocObject();
      *(unsigned char *)(v78 + 16) = 8;
      uint64_t v79 = swift_allocObject();
      *(void *)(v79 + 16) = sub_1000654F4;
      *(void *)(v79 + 24) = v70;
      uint64_t v80 = swift_allocObject();
      *(void *)(v80 + 16) = sub_1000654EC;
      *(void *)(v80 + 24) = v79;
      uint64_t v81 = swift_allocObject();
      sub_1004B810C(v81, 6);
      *uint64_t v82 = sub_100065514;
      v82[1] = v73;
      v82[2] = sub_100065514;
      v82[3] = v74;
      v82[4] = sub_100065504;
      v82[5] = v76;
      v82[6] = sub_100065514;
      v82[7] = v77;
      v82[8] = sub_100065514;
      v82[9] = v78;
      v82[10] = sub_100065500;
      v82[11] = v80;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v71, v72))
      {
        os_log_type_t v114 = v72;
        uint64_t v83 = *(void *)(v0 + 6136);
        uint64_t v84 = (uint8_t *)sub_1008F9FAC();
        uint64_t v120 = 0;
        uint64_t v121 = swift_slowAlloc();
        *(_WORD *)uint64_t v84 = 515;
        uint64_t v119 = v84 + 2;
        uint64_t v122 = sub_100065514;
        uint64_t v123 = v73;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        if (v83) {
          goto LABEL_28;
        }
        swift_release();
        uint64_t v122 = sub_100065514;
        uint64_t v123 = v74;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        uint64_t v122 = (uint64_t (*)())sub_100065504;
        uint64_t v123 = v76;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        uint64_t v122 = sub_100065514;
        uint64_t v123 = v77;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        uint64_t v122 = sub_100065514;
        uint64_t v123 = v78;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        uint64_t v122 = sub_100065500;
        uint64_t v123 = v80;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        uint64_t v99 = v71;
        BOOL v100 = *(void (**)(uint64_t, uint64_t))(v0 + 6032);
        uint64_t v101 = *(void *)(v0 + 5640);
        uint64_t v102 = *(void *)(v0 + 5608);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v99, v114, "Saved new beacon: %{private,mask.hash}s. Proceed to sending pairing complete.", v84, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v100(v101, v102);
      }
      else
      {
        v115 = *(void (**)(uint64_t, uint64_t))(v0 + 6032);
        uint64_t v88 = *(void *)(v0 + 5640);
        uint64_t v89 = *(void *)(v0 + 5608);

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v115(v88, v89);
      }
      uint64_t v87 = v0 + 5272;
      if (sub_1004CF378()) {
        *(unsigned char *)(*(void *)(v0 + 5424) + 176) = 9;
      }
      uint64_t v90 = *(void *)(v0 + 5552);
      uint64_t v91 = *(void *)(v0 + 5512);
      uint64_t v92 = *(void *)(v0 + 5488);
      sub_100A632C8(v92);
      sub_1000617DC(v92, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_1000617DC(v90, type metadata accessor for OwnedBeaconGroup);
      sub_1000617DC(v91, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingService.BeaconCreationResult);
    }
    uint64_t v93 = *(void *)(v0 + 5968);
    uint64_t v94 = *(void *)(v0 + 5960);
    uint64_t v95 = *(void *)(v0 + 5952);
    *(_DWORD *)(v0 + 284) = sub_10005FAD8();
    sub_100060568();
    uint64_t v96 = FixedWidthInteger.data.getter();
    uint64_t v98 = v97;
    swift_release();
    sub_1000600F0(v116);
    sub_10005E844(v117, (void (*)(void))sub_10001CFB8);
    sub_10005FEF0(v118, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v95);
    *(void *)(v0 + 1608) = v96;
    *(void *)(v0 + 1616) = v98;
    sub_1000605BC(v0 + 1608);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v87);
    sub_10005E7E8(v0 + 1608, v0 + 3720);
    sub_10005E7E8(v0 + 3720, *(void *)(v0 + 5392));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v60 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_38;
  }
  unint64_t v2 = *v1;
  (*(void (**)(void, void, void))(v0 + 6008))(*(void *)(v0 + 5648), *(void *)(v0 + 6000), *(void *)(v0 + 5608));
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  sub_1000600A8(v2);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 16) = 66;
  uint64_t v7 = swift_allocObject();
  *(unsigned char *)(v7 + 16) = 8;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_1000600A0;
  *(void *)(v8 + 24) = v3;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1000600D8;
  *(void *)(v9 + 24) = v8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_1000600E0;
  *(void *)(v10 + 24) = v9;
  uint64_t v11 = swift_allocObject();
  sub_1004B810C(v11, 3);
  *uint64_t v12 = sub_100065514;
  v12[1] = v6;
  v12[2] = sub_100065514;
  v12[3] = v7;
  v12[4] = sub_1000600E8;
  void v12[5] = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v4, v5))
  {
    uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v0 + 6032);
    uint64_t v54 = *(void *)(v0 + 5648);
    uint64_t v55 = *(void *)(v0 + 5608);

    swift_release();
    swift_release();
    swift_release();
    v53(v54, v55);
LABEL_20:
    uint64_t v56 = *(void *)(v0 + 5968);
    uint64_t v57 = *(void *)(v0 + 5960);
    uint64_t v58 = *(void *)(v0 + 5952);
    sub_10005E370();
    swift_allocError();
    *uint64_t v59 = 0x8000000000000007;
    swift_willThrow();
    swift_release();
    sub_1000600F0(v116);
    sub_10005E844(v117, (void (*)(void))sub_10001CFB8);
    sub_100060090(v2);
    sub_10005FEF0(v118, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 5272);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v60 = *(uint64_t (**)(void))(v0 + 8);
LABEL_38:
    return v60();
  }
  uint64_t v13 = *(void *)(v0 + 6136);
  uint64_t v14 = (uint8_t *)sub_1008F9FAC();
  uint64_t v120 = swift_slowAlloc();
  uint64_t v121 = 0;
  *(_WORD *)uint64_t v14 = 258;
  uint64_t v119 = v14 + 2;
  uint64_t v122 = sub_100065514;
  uint64_t v123 = v6;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
  if (!v13)
  {
    swift_release();
    uint64_t v122 = sub_100065514;
    uint64_t v123 = v7;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    uint64_t v122 = (uint64_t (*)())sub_1000600E8;
    uint64_t v123 = v10;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    uint64_t v113 = *(void (**)(uint64_t, uint64_t))(v0 + 6032);
    uint64_t v15 = *(void *)(v0 + 5648);
    uint64_t v16 = *(void *)(v0 + 5608);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to create new beacon. %{public}@", v14, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_1008F9FA0();

    v113(v15, v16);
    goto LABEL_20;
  }
LABEL_28:
  return swift_errorRelease();
}

uint64_t sub_100053FB4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  sub_100037A24(*(void *)(v0 + 160), *(void *)(v0 + 168));
  swift_release();
  sub_10001DAB4(v0 + 192, &qword_101639A40);
  sub_10001DAB4(v0 + 232, &qword_101639A48);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10005402C()
{
  sub_100053FB4();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AirPodsLEPairingService()
{
  return self;
}

uint64_t sub_10005407C()
{
  return _swift_task_switch(sub_100054098, v0, 0);
}

uint64_t sub_100054098()
{
  if (qword_101636840 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_1016397F0);
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "AirPodsLEPairingService: Starting up.", v4, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000541AC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100062074(&qword_101639A38, a2, (void (*)(uint64_t))type metadata accessor for AirPodsLEPairingService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100054204@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(v3 + 184);
  unint64_t v5 = *(void *)(v4 + 48);
  if (v5 >> 60 == 15)
  {
    if (qword_101636840 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_1016397F0);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing E1 blob to generate init pairing.", v9, 2u);
      swift_slowDealloc();
    }

    sub_10005E370();
    swift_allocError();
    void *v10 = 0x8000000000000000;
    return swift_willThrow();
  }
  else
  {
    unint64_t v12 = *(void *)(v4 + 40);
    uint64_t v13 = (unint64_t *)(v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId);
    unint64_t v14 = v13[1];
    if (v14 >> 60 == 15)
    {
      sub_1000361E0(v12, v5);
      if (qword_101636840 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_100010324(v15, (uint64_t)qword_1016397F0);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Missing FindMyNetworkId to generate init pairing.", v18, 2u);
        swift_slowDealloc();
      }

      sub_10005E370();
      swift_allocError();
      *uint64_t v19 = 0x8000000000000000;
      swift_willThrow();
      return sub_100037A24(v12, v5);
    }
    else
    {
      unint64_t v71 = a2;
      unint64_t v21 = *v13;
      if (*(unsigned char *)(v3 + 272) == 1)
      {
        sub_100037A38(v12, v5);
        sub_100037A38(v21, v14);
        unsigned __int8 v22 = 0;
      }
      else
      {
        uint64_t My = type metadata accessor for Feature.FindMy();
        v66.n128_u64[1] = My;
        v67.n128_u64[0] = sub_100062074((unint64_t *)&qword_101653E00, 255, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
        uint64_t v24 = sub_10001D958((uint64_t *)&v65);
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v24, enum case for Feature.FindMy.alphaWasp(_:), My);
        sub_100037A38(v12, v5);
        sub_100037A38(v21, v14);
        LOBYTE(My) = isFeatureEnabled(_:)();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v65);
        unsigned __int8 v22 = My & 1;
      }
      uint64_t v25 = *(void *)(v3 + 184);
      unint64_t v26 = *(void *)(v25 + 16);
      unint64_t v27 = *(void *)(v25 + 24);
      v65.n128_u8[0] = v22;
      sub_100037A38(v12, v5);
      sub_100037A38(v21, v14);
      sub_1000361E0(v26, v27);
      unint64_t v28 = v71;
      sub_1000361E0(a1, v71);
      sub_10006145C();
      unint64_t v29 = FixedWidthInteger.data.getter();
      uint64_t v60 = v21;
      uint64_t v54 = a1;
      sub_1009D57F4(v26, v27, v12, v5, v21, v14, a1, v28, v70, v29, v30);
      __n128 v58 = v70[1];
      __n128 v59 = v70[0];
      __n128 v56 = v70[3];
      __n128 v57 = v70[2];
      __n128 v55 = v70[4];
      if (qword_101636840 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100010324(v31, (uint64_t)qword_1016397F0);
      swift_retain_n();
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      unint64_t v63 = v5;
      unint64_t v61 = v14;
      if (os_log_type_enabled(v32, v33))
      {
        log = v32;
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 136315138;
        v65.n128_u64[0] = v35;
        uint64_t v36 = *(void *)(v3 + 184);
        uint64_t v37 = *(void *)(v36 + 16);
        unint64_t v38 = *(void *)(v36 + 24);
        sub_1000361E0(v37, v38);
        uint64_t v39 = Data.hexString.getter();
        unint64_t v41 = v40;
        sub_10001CFB8(v37, v38);
        sub_1008FA0F0(v39, v41, (uint64_t *)&v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        uint64_t v32 = log;
        _os_log_impl((void *)&_mh_execute_header, log, v33, "sessionNonce: %s", v34, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      unint64_t v42 = v71;
      sub_1000361E0(v54, v71);
      sub_1000361E0(v54, v42);
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        v65.n128_u64[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136315138;
        uint64_t v46 = Data.hexString.getter();
        sub_1008FA0F0(v46, v47, (uint64_t *)&v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001CFB8(v54, v42);
        sub_10001CFB8(v54, v42);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "companionSessionNonce: %s", v45, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10001CFB8(v54, v42);
        sub_10001CFB8(v54, v42);
      }

      __n128 v65 = v59;
      __n128 v66 = v58;
      __n128 v67 = v57;
      __n128 v68 = v56;
      __n128 v69 = v55;
      sub_1000614B0((uint64_t)&v65);
      sub_100037A38(v60, v61);
      sub_100037A38(v60, v61);
      sub_100061580((uint64_t *)v70, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = swift_slowAlloc();
        uint64_t v64 = swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = 141558531;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v50 + 12) = 2081;
        sub_100061628();
        uint64_t v51 = RawRepresentable<>.hexString.getter();
        sub_1008FA0F0(v51, v52, &v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100037A24(v60, v61);
        sub_100037A24(v60, v61);
        *(_WORD *)(v50 + 22) = 256;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "generateInitPairingPayload request success: fmNetworkId: %{private,mask.hash}s, accountHint: %hhu.", (uint8_t *)v50, 0x19u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_100037A24(v12, v63);

        sub_100037A24(v60, v61);
        sub_100061580((uint64_t *)v70, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      }
      else
      {
        sub_100061580((uint64_t *)v70, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        sub_100037A24(v60, v61);
        sub_100037A24(v60, v61);
        sub_10001CFB8(v60, v61);
        sub_100037A24(v12, v63);
      }
      return sub_10005E7E8((uint64_t)&v65, a3);
    }
  }
}

uint64_t sub_100054B80(uint64_t a1)
{
  sub_10005F6AC(a1, (uint64_t)&v2);
  sub_10000588C(&qword_101639B58);
  return String.init<A>(describing:)();
}

uint64_t sub_100054BBC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  return String.init<A>(describing:)();
}

uint64_t sub_100054C10(uint64_t a1)
{
  long long v4 = *(_OWORD *)(a1 + 80);
  sub_1000620BC((uint64_t)&v4, (uint64_t)v5);
  sub_1000620BC((uint64_t)v5, (uint64_t)&v6);
  uint64_t result = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      v7 &= 0x3FFFFFFFFFFFFFFFuLL;
      if (__OFSUB__(HIDWORD(v6), v6))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x100054CBCLL);
      }
      return HIDWORD(v6) - (int)v6;
    case 2uLL:
      v7 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v2 = *(void *)(v6 + 16);
      uint64_t v3 = *(void *)(v6 + 24);
      uint64_t result = v3 - v2;
      if (!__OFSUB__(v3, v2)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(v7);
  }
}

uint64_t sub_100054CCC(uint64_t a1)
{
  long long v4 = *(_OWORD *)(a1 + 160);
  sub_1000620BC((uint64_t)&v4, (uint64_t)v5);
  sub_1000620BC((uint64_t)v5, (uint64_t)&v6);
  uint64_t result = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      v7 &= 0x3FFFFFFFFFFFFFFFuLL;
      if (__OFSUB__(HIDWORD(v6), v6))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x100054D78);
      }
      return HIDWORD(v6) - (int)v6;
    case 2uLL:
      v7 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v2 = *(void *)(v6 + 16);
      uint64_t v3 = *(void *)(v6 + 24);
      uint64_t result = v3 - v2;
      if (!__OFSUB__(v3, v2)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(v7);
  }
}

void *sub_100054D88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
  uint64_t v3 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v4 = *(v2 - 1);
    unint64_t v5 = *v2;
    sub_1000361E0(v4, *v2);
    sub_1000362FC();
    if (DataProtocol.isNull.getter())
    {
      sub_10001CFB8(v4, v5);
    }
    else
    {
      uint64_t v6 = Data.trimmed.getter();
      uint64_t v8 = v7;
      sub_10001CFB8(v4, v5);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_100A6EB48(0, v3[2] + 1, 1, v3);
      }
      unint64_t v10 = v3[2];
      unint64_t v9 = v3[3];
      if (v10 >= v9 >> 1) {
        uint64_t v3 = sub_100A6EB48((void *)(v9 > 1), v10 + 1, 1, v3);
      }
      v3[2] = v10 + 1;
      uint64_t v11 = &v3[2 * v10];
      v11[4] = v6;
      v11[5] = v8;
    }
    v2 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100054EE4()
{
  uint64_t v23 = &_swiftEmptyDictionarySingleton;
  *(_OWORD *)unsigned __int8 v22 = *(_OWORD *)(v0 + 16);
  sub_1000362FC();
  uint64_t v1 = DataProtocol.intValue.getter();
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170F068);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 134349056;
    v22[0] = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Number of beacons: %{public}ld", v5, 0xCu);
    swift_slowDealloc();
  }

  if (v1 < 2) {
    return (uint64_t)v23;
  }
  uint64_t v6 = Data.chunked(into:)();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = (long long *)(v6 + 32);
    do
    {
      long long v9 = *v8++;
      *(_OWORD *)unsigned __int8 v22 = v9;
      sub_10005DD3C();
      --v7;
    }
    while (v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = v23[2];
  uint64_t v11 = Logger.logObject.getter();
  if (v10 == v1 - 1)
  {
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_10000588C((uint64_t *)&unk_1016477E0);
      sub_100061B8C();
      uint64_t v14 = Dictionary.description.getter();
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      sub_1008FA0F0(v14, v16, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "serialNumbersAndMacAddressesMap: %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_beginAccess();
    return (uint64_t)v23;
  }
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 134349056;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v11, v18, "Unexpected number of other serial numbers: %{public}ld", v19, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v20 = type metadata accessor for BinaryEncodingError();
  sub_100062074((unint64_t *)&qword_101639620, 255, (void (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v20 - 8) + 104))(v21, enum case for BinaryEncodingError.encodingError(_:), v20);
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100055368()
{
  return String.init<A>(describing:)();
}

uint64_t sub_1000553A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[306] = v3;
  v4[305] = a3;
  v4[304] = a2;
  v4[303] = a1;
  sub_10000588C(&qword_101638CF0);
  v4[307] = swift_task_alloc();
  v4[308] = swift_task_alloc();
  v4[309] = type metadata accessor for AirPodsSWPairingLockCheckResponse();
  v4[310] = swift_task_alloc();
  v4[311] = swift_task_alloc();
  v4[312] = swift_task_alloc();
  v4[313] = sub_10000588C(&qword_101639BB0);
  v4[314] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v4[315] = v5;
  v4[316] = *(void *)(v5 - 8);
  v4[317] = swift_task_alloc();
  v4[318] = swift_task_alloc();
  v4[319] = sub_10000588C(&qword_101639618);
  v4[320] = swift_task_alloc();
  v4[321] = swift_task_alloc();
  v4[322] = swift_task_alloc();
  v4[323] = swift_task_alloc();
  v4[324] = swift_task_alloc();
  v4[325] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for HashAlgorithm();
  v4[326] = v6;
  v4[327] = *(void *)(v6 - 8);
  v4[328] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MACAddress();
  v4[329] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[330] = v8;
  v4[331] = *(void *)(v8 + 64);
  v4[332] = swift_task_alloc();
  v4[333] = sub_10000588C(&qword_10163BB20);
  v4[334] = swift_task_alloc();
  return _swift_task_switch(sub_1000556A8, v3, 0);
}

uint64_t sub_1000556A8()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 1936, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 1960))
  {
    sub_10001CEB0((long long *)(v0 + 1936), v0 + 2056);
    swift_release();
    sub_10001CD44((void *)(v0 + 2056), *(void *)(v0 + 2080));
    os_log_type_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 2680) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000557F8;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000557F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 2448);
  *(void *)(*(void *)v1 + 2688) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100055910, v2, 0);
}

uint64_t sub_100055910()
{
  uint64_t v40 = v0;
  uint64_t v1 = v0 + 2056;
  if (!*(void *)(v0 + 2688))
  {
    uint64_t v10 = *(void *)(v0 + 2424);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    uint64_t v13 = swift_allocError();
    char v14 = 0;
    *unint64_t v15 = 0xD000000000000010;
    v15[1] = 0x80000001013F23D0;
    *(void *)uint64_t v10 = v13;
LABEL_20:
    *(unsigned char *)(v10 + 40) = v14;
    *(unsigned char *)(v10 + 264) = 1;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
    return v34();
  }
  uint64_t v2 = *(void *)(v0 + 2448);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v3 = (uint64_t *)(*(void *)(v2 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1);
  uint64_t v4 = *v3;
  *(void *)(v0 + 2696) = *v3;
  unint64_t v5 = v3[1];
  *(void *)(v0 + 2704) = v5;
  if (v5 >> 60 == 15)
  {
    if (qword_101636840 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_1016397F0);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      long long v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing C1 from accessory!", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void *)(v0 + 2424);

    swift_release();
    unint64_t v11 = 0xD00000000000001ALL;
    os_log_type_t v12 = "BeaconStoreActor";
LABEL_19:
    *(void *)uint64_t v10 = v11;
    *(void *)(v10 + 8) = (unint64_t)v12 | 0x8000000000000000;
    char v14 = 9;
    goto LABEL_20;
  }
  sub_1000361E0(v4, v5);
  sub_10005B95C(v4, v5, (uint64_t *)(v0 + 1816));
  if (!*(void *)(v0 + 1840))
  {
    sub_10001DAB4(v0 + 1816, &qword_101639BB8);
    if (qword_101636840 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100010324(v30, (uint64_t)qword_1016397F0);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      os_log_type_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "collaborativeKeyC2 generation error.", v33, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void *)(v0 + 2424);

    sub_100037A24(v4, v5);
    swift_release();
    unint64_t v11 = 0xD000000000000026;
    os_log_type_t v12 = "Missing C1 from accessory!";
    goto LABEL_19;
  }
  unint64_t v38 = (void *)(v0 + 1896);
  uint64_t v37 = *(void *)(v0 + 2448);
  sub_10001CEB0((long long *)(v0 + 1816), v0 + 1976);
  sub_10001CEB0((long long *)(v0 + 1856), v0 + 2016);
  uint64_t v16 = *(void *)(v2 + 184);
  sub_10001D010(v0 + 1976, v0 + 2096);
  sub_10001D608(v0 + 2096, v0 + 2136, &qword_101639BC0);
  uint64_t v17 = v16 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2;
  swift_beginAccess();
  swift_retain();
  sub_100062604(v0 + 2136, v17, &qword_101639BC0);
  swift_endAccess();
  swift_release();
  sub_10001D010(v0 + 2016, v0 + 2216);
  sub_10001D608(v0 + 2216, v0 + 2176, &qword_101639A40);
  swift_beginAccess();
  sub_100062604(v0 + 2176, v37 + 192, &qword_101639A40);
  swift_endAccess();
  if (qword_101636840 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  *(void *)(v0 + 2712) = sub_100010324(v18, (uint64_t)qword_1016397F0);
  sub_10001D010(v0 + 1976, (uint64_t)v38);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v22 = *(void *)(v0 + 1920);
    uint64_t v23 = *(void *)(v0 + 1928);
    sub_10001CD44(v38, v22);
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v23 + 8) + 8) + 40))(v22);
    unint64_t v26 = v25;
    uint64_t v27 = Data.hexString.getter();
    unint64_t v29 = v28;
    sub_10001CFB8(v24, v26);
    *(void *)(v0 + 2416) = sub_1008FA0F0(v27, v29, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "C2: %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
  }

  uint64_t v36 = *(void *)(v0 + 2688);
  return _swift_task_switch(sub_100056038, v36, 0);
}

uint64_t sub_100056038()
{
  uint64_t v1 = v0[336];
  uint64_t v2 = v0[332];
  uint64_t v3 = v0[330];
  uint64_t v4 = v0[329];
  uint64_t v5 = v0[305];
  v0[340] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[341] = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100056134, 0, 0);
}

uint64_t sub_100056134()
{
  uint64_t v1 = v0[341];
  uint64_t v2 = v0[340];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[342] = v3;
  v3[2] = v2;
  v3[3] = sub_100061680;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[343] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100056240;
  uint64_t v5 = v0[334];
  uint64_t v6 = v0[333];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100061684, v3, v6);
}

uint64_t sub_100056240()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 2448);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100056390, v1, 0);
}

uint64_t sub_100056390()
{
  uint64_t v105 = v0;
  uint64_t v1 = v0;
  uint64_t v78 = v0 + 247;
  uint64_t v2 = v0[334];
  uint64_t v3 = type metadata accessor for OwnedBeaconGroup(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3) == 1)
  {
    sub_10001DAB4(v2, &qword_10163BB20);
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = *(void **)(v2 + *(int *)(v3 + 40));
    swift_bridgeObjectRetain();
    sub_1000617DC(v2, type metadata accessor for OwnedBeaconGroup);
  }
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v104 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    v1[300] = v4;
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101639BE8);
    uint64_t v8 = String.init<A>(describing:)();
    v1[301] = sub_1008FA0F0(v8, v9, (uint64_t *)&v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Existing beaconMap: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v10 = v1[328];
  uint64_t v11 = v1[327];
  uint64_t v12 = v1[326];
  uint64_t v13 = v1[250];
  uint64_t v14 = v1[251];
  sub_10001CD44(v78, v13);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v14 + 8) + 8) + 40))(v13);
  unint64_t v17 = v16;
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v10, enum case for HashAlgorithm.sha256(_:), v12);
  uint64_t v18 = Data.hash(algorithm:)();
  unint64_t v20 = v19;
  v1[344] = v18;
  v1[345] = v19;
  sub_10001CFB8(v15, v17);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  if (!v4)
  {
    uint64_t v90 = v1[324];
    uint64_t v91 = v1[325];
    uint64_t v88 = v1[322];
    uint64_t v89 = v1[323];
    uint64_t v86 = v1[320];
    uint64_t v87 = v1[321];
    uint64_t v85 = v1[319];
    uint64_t v21 = *(void *)(*(void *)(v1[306] + 184)
                    + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
    uint64_t v22 = *(void *)(v21 + 64);
    uint64_t v79 = v21 + 64;
    uint64_t v82 = v1[316];
    uint64_t v23 = -1;
    uint64_t v24 = -1 << *(unsigned char *)(v21 + 32);
    if (-v24 < 64) {
      uint64_t v23 = ~(-1 << -(char)v24);
    }
    unint64_t v25 = v23 & v22;
    int64_t v80 = (unint64_t)(63 - v24) >> 6;
    uint64_t v92 = *(void *)(*(void *)(v1[306] + 184)
                    + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
    uint64_t result = swift_bridgeObjectRetain_n();
    int64_t v27 = 0;
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    unint64_t v81 = v20;
    uint64_t v83 = v18;
    uint64_t v84 = v1;
    while (1)
    {
      uint64_t v102 = (uint64_t)v4;
      if (v25)
      {
        uint64_t v94 = (v25 - 1) & v25;
        int64_t v95 = v27;
        unint64_t v29 = __clz(__rbit64(v25)) | (v27 << 6);
      }
      else
      {
        int64_t v30 = v27 + 1;
        if (__OFADD__(v27, 1)) {
          goto LABEL_57;
        }
        if (v30 >= v80)
        {
LABEL_42:
          swift_release();
          swift_bridgeObjectRelease();
          break;
        }
        unint64_t v31 = *(void *)(v79 + 8 * v30);
        int64_t v32 = v27 + 1;
        if (!v31)
        {
          int64_t v32 = v27 + 2;
          if (v27 + 2 >= v80) {
            goto LABEL_42;
          }
          unint64_t v31 = *(void *)(v79 + 8 * v32);
          if (!v31)
          {
            int64_t v32 = v27 + 3;
            if (v27 + 3 >= v80) {
              goto LABEL_42;
            }
            unint64_t v31 = *(void *)(v79 + 8 * v32);
            if (!v31)
            {
              int64_t v32 = v27 + 4;
              if (v27 + 4 >= v80) {
                goto LABEL_42;
              }
              unint64_t v31 = *(void *)(v79 + 8 * v32);
              if (!v31)
              {
                uint64_t v33 = v27 + 5;
                if (v27 + 5 >= v80) {
                  goto LABEL_42;
                }
                unint64_t v31 = *(void *)(v79 + 8 * v33);
                if (!v31)
                {
                  while (1)
                  {
                    int64_t v32 = v33 + 1;
                    if (__OFADD__(v33, 1)) {
                      goto LABEL_58;
                    }
                    if (v32 >= v80) {
                      goto LABEL_42;
                    }
                    unint64_t v31 = *(void *)(v79 + 8 * v32);
                    ++v33;
                    if (v31) {
                      goto LABEL_30;
                    }
                  }
                }
                int64_t v32 = v27 + 5;
              }
            }
          }
        }
LABEL_30:
        uint64_t v94 = (v31 - 1) & v31;
        int64_t v95 = v32;
        unint64_t v29 = __clz(__rbit64(v31)) + (v32 << 6);
      }
      uint64_t v34 = (uint64_t *)v1[325];
      uint64_t v35 = (uint64_t *)v1[324];
      uint64_t v36 = (uint64_t *)v1[323];
      uint64_t v97 = (uint64_t *)v1[322];
      uint64_t v99 = (uint64_t *)v1[321];
      BOOL v100 = (uint64_t *)v1[320];
      uint64_t v103 = v1[318];
      uint64_t v101 = v1[317];
      uint64_t v37 = *(void *)(v92 + 56);
      unint64_t v38 = (uint64_t *)(*(void *)(v92 + 48) + 16 * v29);
      uint64_t v40 = *v38;
      unint64_t v39 = v38[1];
      uint64_t v96 = *v38;
      uint64_t v41 = (int *)(type metadata accessor for MultipartAccessoryPairingInfo(0) - 8);
      sub_100061774(v37 + *(void *)(*(void *)v41 + 72) * v29, (uint64_t)v34 + *(int *)(v85 + 48), type metadata accessor for MultipartAccessoryPairingInfo);
      *uint64_t v34 = v40;
      *(void *)(v91 + 8) = v39;
      sub_10001D608((uint64_t)v34, (uint64_t)v35, &qword_101639618);
      uint64_t v42 = *(int *)(v85 + 48);
      uint64_t v43 = (uint64_t)v35 + v42;
      uint64_t v44 = *v35;
      unint64_t v45 = *(void *)(v90 + 8);
      *uint64_t v36 = *v35;
      *(void *)(v89 + 8) = v45;
      uint64_t v93 = (uint64_t)v36 + v42;
      sub_100061774((uint64_t)v35 + v42, (uint64_t)v36 + v42, type metadata accessor for MultipartAccessoryPairingInfo);
      uint64_t v98 = v103 + *(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48);
      uint64_t v46 = (uint64_t)v97 + *(int *)(v85 + 48);
      uint64_t *v97 = v44;
      *(void *)(v88 + 8) = v45;
      sub_100061774(v43, v46, type metadata accessor for MultipartAccessoryPairingInfo);
      sub_10001D074(v46 + v41[8], v103, (uint64_t *)&unk_1016477E0);
      sub_1000361E0(v96, v39);
      sub_1000361E0(v44, v45);
      sub_1000617DC(v46, type metadata accessor for MultipartAccessoryPairingInfo);
      unint64_t v47 = (char *)v99 + *(int *)(v85 + 48);
      uint64_t v48 = *(void *)(v90 + 8);
      *uint64_t v99 = *v35;
      *(void *)(v87 + 8) = v48;
      sub_100061774(v43, (uint64_t)v47, type metadata accessor for MultipartAccessoryPairingInfo);
      LOBYTE(v99) = *v47;
      sub_1000617DC((uint64_t)v47, type metadata accessor for MultipartAccessoryPairingInfo);
      uint64_t v49 = (uint64_t)v100 + *(int *)(v85 + 48);
      uint64_t v50 = *(void *)(v90 + 8);
      *BOOL v100 = *v35;
      *(void *)(v86 + 8) = v50;
      sub_100061774(v43, v49, type metadata accessor for MultipartAccessoryPairingInfo);
      LOBYTE(v41) = *(unsigned char *)(v49 + v41[9]);
      uint64_t v51 = v49;
      uint64_t v52 = v44;
      sub_1000617DC(v51, type metadata accessor for MultipartAccessoryPairingInfo);
      *(_WORD *)uint64_t v98 = v99;
      *(unsigned char *)(v98 + 2) = (_BYTE)v41;
      swift_storeEnumTagMultiPayload();
      sub_10006170C(v103, v101, type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t v4 = (void *)v102;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v104 = (void *)v102;
      unint64_t v55 = sub_1007241A0(v44, v45);
      uint64_t v56 = *(void *)(v102 + 16);
      BOOL v57 = (v54 & 1) == 0;
      uint64_t result = v56 + v57;
      if (__OFADD__(v56, v57))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        return result;
      }
      char v58 = v54;
      if (*(void *)(v102 + 24) >= result)
      {
        uint64_t v18 = v83;
        uint64_t v1 = v84;
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v61 = v84[317];
          if (v54) {
            goto LABEL_11;
          }
        }
        else
        {
          sub_100E7EDD8();
          uint64_t v4 = v104;
          uint64_t v61 = v84[317];
          if (v58) {
            goto LABEL_11;
          }
        }
      }
      else
      {
        sub_100E663C4(result, isUniquelyReferenced_nonNull_native);
        uint64_t v4 = v104;
        uint64_t v59 = sub_1007241A0(v44, v45);
        uint64_t v18 = v83;
        uint64_t v1 = v84;
        if ((v58 & 1) != (v60 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v55 = v59;
        uint64_t v61 = v84[317];
        if (v58)
        {
LABEL_11:
          sub_100061690(v61, v4[7] + *(void *)(v82 + 72) * v55);
          goto LABEL_12;
        }
      }
      v4[(v55 >> 6) + 8] |= 1 << v55;
      uint64_t v62 = (uint64_t *)(v4[6] + 16 * v55);
      *uint64_t v62 = v44;
      v62[1] = v45;
      uint64_t result = sub_10006170C(v61, v4[7] + *(void *)(v82 + 72) * v55, type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t v63 = v4[2];
      BOOL v64 = __OFADD__(v63, 1);
      uint64_t v65 = v63 + 1;
      if (v64) {
        goto LABEL_56;
      }
      v4[2] = v65;
      sub_1000361E0(v44, v45);
LABEL_12:
      uint64_t v28 = v1[324];
      swift_bridgeObjectRelease();
      sub_10001CFB8(v52, v45);
      sub_1000617DC(v93, type metadata accessor for MultipartAccessoryPairingInfo);
      uint64_t result = sub_10001DAB4(v28, &qword_101639618);
      unint64_t v20 = v81;
      unint64_t v25 = v94;
      int64_t v27 = v95;
    }
  }
  uint64_t v66 = v1[306];
  uint64_t v67 = *(void *)(v66 + 160);
  unint64_t v68 = *(void *)(v66 + 168);
  swift_retain();
  sub_100037A38(v67, v68);
  sub_100F82FE0(v18, v20, v67, v68, (uint64_t)v4, (uint64_t)(v1 + 86));
  swift_bridgeObjectRelease();
  sub_100037A24(v67, v68);
  swift_release();
  sub_10001D608((uint64_t)(v1 + 86), (uint64_t)(v1 + 44), &qword_101639BC8);
  if (sub_1000616F4((uint64_t)(v1 + 44)) == 1)
  {
    __n128 v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      unint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Unable to create pairing check data.", v71, 2u);
      swift_slowDealloc();
    }
    unint64_t v72 = v1[338];
    uint64_t v73 = v1[337];
    uint64_t v74 = v1[303];

    sub_10001CFB8(v18, v20);
    sub_100037A24(v73, v72);
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v1 + 252));
    *(void *)uint64_t v74 = 0xD00000000000001ALL;
    *(void *)(v74 + 8) = 0x80000001013F2440;
    *(unsigned char *)(v74 + 40) = 9;
    *(unsigned char *)(v74 + 264) = 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v78);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v75 = (uint64_t (*)(void))v1[1];
    return v75();
  }
  else
  {
    memcpy(v1 + 2, v1 + 44, 0x150uLL);
    uint64_t v76 = (void *)swift_task_alloc();
    v1[346] = v76;
    void *v76 = v1;
    v76[1] = sub_100056F54;
    uint64_t v77 = v1[314];
    return sub_10005A870(v77, (uint64_t)(v1 + 2));
  }
}

uint64_t sub_100056F54()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 2448);
  swift_task_dealloc();
  return _swift_task_switch(sub_100057064, v1, 0);
}

uint64_t sub_100057064()
{
  uint64_t v59 = v0;
  uint64_t v1 = v0 + 247;
  uint64_t v2 = v0 + 297;
  uint64_t v3 = (void **)v0[314];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = (NSObject **)(v0 + 298);
    uint64_t v5 = *v3;
    v0[347] = *v3;
    os_log_type_t v6 = v5;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      buf = v9;
      *(_DWORD *)unint64_t v9 = 138543362;
      uint64_t v11 = v6;
      uint64_t v12 = v6;
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
      v0[299] = v13;
      uint64_t v4 = (NSObject **)(v0 + 298);
      uint64_t v1 = v0 + 247;
      uint64_t v2 = v0 + 297;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v10 = v13;
      os_log_type_t v6 = v12;

      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Pairing lock check failed. Error %{public}@", buf, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v7 = v6;
    }

    *uint64_t v4 = v6;
    type metadata accessor for SPPairingSessionError(0);
    sub_100062074(&qword_101638770, 255, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.code.getter();
    if (*v2 == 18)
    {
      unint64_t v25 = (void *)swift_task_alloc();
      v0[348] = v25;
      *unint64_t v25 = v0;
      v25[1] = sub_100057910;
      uint64_t v26 = v0[304];
      uint64_t v27 = v0[303];
      return sub_10005BAA0(v27, v26);
    }
    else
    {
      unint64_t v30 = v0[345];
      uint64_t v31 = v0[344];
      int64_t v32 = v6;
      unint64_t v33 = v0[338];
      uint64_t v34 = v0[337];
      uint64_t v35 = v0[303];
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 252));
      sub_100061918((uint64_t)(v0 + 86));
      sub_10001CFB8(v31, v30);
      sub_100037A24(v34, v33);
      swift_release();
      *(void *)uint64_t v35 = v32;
      *(unsigned char *)(v35 + 40) = 0;
      *(unsigned char *)(v35 + 264) = 1;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v36 = (uint64_t (*)(void))v0[1];
      return v36();
    }
  }
  else
  {
    uint64_t v14 = v0[312];
    uint64_t v15 = v0[311];
    uint64_t v16 = v0[310];
    sub_10006170C((uint64_t)v3, v14, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
    sub_100061774(v14, v15, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
    sub_100061774(v14, v16, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = v0[311];
    if (v19)
    {
      uint64_t v21 = v0[309];
      uint64_t v22 = swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446723;
      if (*(void *)(v20 + *(int *)(v21 + 40) + 8) >> 60 == 15)
      {
        uint64_t v23 = 0;
        unint64_t v24 = 0xE000000000000000;
      }
      else
      {
        uint64_t v23 = Data.hexString.getter();
        unint64_t v24 = v37;
      }
      uint64_t v38 = v0[311];
      uint64_t v39 = v0[310];
      v0[294] = sub_1008FA0F0(v23, v24, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000617DC(v38, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
      *(_WORD *)(v22 + 12) = 2160;
      v0[295] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 22) = 2081;
      type metadata accessor for UUID();
      sub_100062074((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[296] = sub_1008FA0F0(v40, v41, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000617DC(v39, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Received SeedS and S3 from server. Pairing token: %{public}s.fmnaId: %{private,mask.hash}s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v1 = v0 + 247;
    }
    else
    {
      uint64_t v29 = v0[310];
      sub_1000617DC(v0[311], (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
      sub_1000617DC(v29, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
    }
    uint64_t v42 = v0[308];
    uint64_t v43 = v0[307];
    uint64_t v44 = *(void *)(v0[306] + 184);
    uint64_t v45 = v0[312] + *(int *)(v0[309] + 32);
    uint64_t v46 = type metadata accessor for UUID();
    uint64_t v47 = *(void *)(v46 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v42, v45, v46);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v42, 0, 1, v46);
    sub_10001D608(v42, v43, &qword_101638CF0);
    uint64_t v48 = v44 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
    swift_beginAccess();
    swift_retain();
    sub_100062604(v43, v48, &qword_101638CF0);
    swift_endAccess();
    swift_release();
    uint64_t v49 = v0[250];
    uint64_t v50 = v0[251];
    sub_10001CD44(v1, v49);
    uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v50 + 8) + 8) + 40))(v49);
    uint64_t v53 = v52;
    v0[349] = v51;
    v0[350] = v52;
    char v54 = (void *)swift_task_alloc();
    v0[351] = v54;
    *char v54 = v0;
    v54[1] = sub_100057BCC;
    uint64_t v55 = v0[312];
    uint64_t v56 = v0[305];
    return sub_10005C8A0((uint64_t)(v0 + 161), v55, v51, v53, v56);
  }
}

uint64_t sub_100057910()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 2448);
  swift_task_dealloc();
  return _swift_task_switch(sub_100057A20, v1, 0);
}

uint64_t sub_100057A20()
{
  uint64_t v1 = (void *)v0[347];
  unint64_t v2 = v0[345];
  uint64_t v3 = v0[344];
  unint64_t v4 = v0[338];
  uint64_t v5 = v0[337];
  sub_100061918((uint64_t)(v0 + 86));
  sub_10001CFB8(v3, v2);
  sub_100037A24(v5, v4);
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 252));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 247));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100057BCC()
{
  unint64_t v1 = *(void *)(*(void *)v0 + 2800);
  uint64_t v2 = *(void *)(*(void *)v0 + 2792);
  uint64_t v3 = *(void *)(*(void *)v0 + 2448);
  swift_task_dealloc();
  sub_10001CFB8(v2, v1);
  return _swift_task_switch(sub_100057D18, v3, 0);
}

uint64_t sub_100057D18()
{
  uint64_t v12 = (uint64_t)(v0 + 252);
  sub_10001D608((uint64_t)(v0 + 161), (uint64_t)(v0 + 128), &qword_101639AD8);
  int v1 = sub_10006183C((uint64_t)(v0 + 128));
  int v2 = v1;
  unint64_t v3 = v0[345];
  uint64_t v4 = v0[344];
  unint64_t v5 = v0[338];
  uint64_t v6 = v0[337];
  uint64_t v11 = v0[312];
  uint64_t v7 = v0[303];
  if (v1 == 1)
  {
    sub_100061918((uint64_t)(v0 + 86));
    sub_10001CFB8(v4, v3);
    sub_100037A24(v6, v5);
    swift_release();
    sub_1000617DC(v11, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
    *(void *)uint64_t v7 = 0xD000000000000019;
    *(void *)(v7 + 8) = 0x80000001013F2460;
    *(unsigned char *)(v7 + 40) = 9;
  }
  else
  {
    int v10 = v1;
    sub_10005E7E8((uint64_t)(v0 + 128), (uint64_t)(v0 + 194));
    sub_100061918((uint64_t)(v0 + 86));
    sub_10001CFB8(v4, v3);
    sub_100037A24(v6, v5);
    swift_release();
    sub_1000617DC(v11, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
    int v2 = v10;
    sub_10005E7E8((uint64_t)(v0 + 194), v7);
  }
  *(unsigned char *)(v7 + 264) = v2 == 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 247));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100057FB8(uint64_t a1)
{
  sub_10005E7E8(a1, (uint64_t)v75);
  sub_10005E7E8((uint64_t)v75, (uint64_t)v77);
  sub_10005E7E8(a1, (uint64_t)v76);
  switch(sub_10005EF04((uint64_t)v76))
  {
    case 1u:
      uint64_t v9 = sub_10006242C((uint64_t)v76);
      long long v63 = *(_OWORD *)(v9 + 16);
      long long v67 = *(_OWORD *)v9;
      long long v58 = *(_OWORD *)(v9 + 48);
      long long v60 = *(_OWORD *)(v9 + 32);
      uint64_t v10 = *(void *)(v9 + 64);
      uint64_t v11 = *(void *)(v9 + 72);
      uint64_t v73 = &type metadata for AirPodsLEInitiatePairingCommandPayload;
      unint64_t v74 = sub_100062448();
      uint64_t v12 = swift_allocObject();
      uint64_t v71 = v12;
      *(_OWORD *)(v12 + 16) = v67;
      *(_OWORD *)(v12 + 32) = v63;
      *(_OWORD *)(v12 + 48) = v60;
      *(_OWORD *)(v12 + 64) = v58;
      *(void *)(v12 + 80) = v10;
      *(void *)(v12 + 88) = v11;
      sub_10005E7E8((uint64_t)v77, (uint64_t)v70);
      uint64_t v13 = (uint64_t *)sub_10006242C((uint64_t)v70);
      uint64_t v14 = v13[2];
      unint64_t v15 = v13[3];
      uint64_t v16 = v13[4];
      unint64_t v17 = v13[5];
      uint64_t v18 = v13[6];
      unint64_t v19 = v13[7];
      uint64_t v20 = v13[8];
      unint64_t v21 = v13[9];
      sub_1000361E0(*v13, v13[1]);
      sub_1000361E0(v14, v15);
      sub_1000361E0(v16, v17);
      sub_1000361E0(v18, v19);
      sub_1000361E0(v20, v21);
      break;
    case 2u:
      uint64_t v22 = (const void *)sub_10006242C((uint64_t)v76);
      uint64_t v73 = &type metadata for AirPodsSWSendPairingDataCommandPayload;
      unint64_t v74 = sub_100062324();
      uint64_t v71 = swift_allocObject();
      memmove((void *)(v71 + 16), v22, 0x108uLL);
      sub_10005E7E8((uint64_t)v77, (uint64_t)v70);
      uint64_t v23 = (uint64_t *)sub_10006242C((uint64_t)v70);
      sub_100060EA0(v23, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      break;
    case 3u:
      uint64_t v24 = sub_10006242C((uint64_t)v76);
      long long v64 = *(_OWORD *)(v24 + 16);
      long long v68 = *(_OWORD *)v24;
      long long v59 = *(_OWORD *)(v24 + 48);
      long long v61 = *(_OWORD *)(v24 + 32);
      long long v56 = *(_OWORD *)(v24 + 80);
      long long v57 = *(_OWORD *)(v24 + 64);
      uint64_t v25 = *(void *)(v24 + 96);
      uint64_t v26 = *(void *)(v24 + 104);
      uint64_t v73 = &type metadata for AirPodsSWFinalizePairingCommandPayload;
      unint64_t v74 = sub_100062268();
      uint64_t v27 = swift_allocObject();
      uint64_t v71 = v27;
      *(_OWORD *)(v27 + 16) = v68;
      *(_OWORD *)(v27 + 32) = v64;
      *(_OWORD *)(v27 + 48) = v61;
      *(_OWORD *)(v27 + 64) = v59;
      *(_OWORD *)(v27 + 80) = v57;
      *(_OWORD *)(v27 + 96) = v56;
      *(void *)(v27 + 112) = v25;
      *(void *)(v27 + 120) = v26;
      sub_10005E7E8((uint64_t)v77, (uint64_t)v70);
      uint64_t v28 = (uint64_t *)sub_10006242C((uint64_t)v70);
      uint64_t v29 = v28[2];
      unint64_t v30 = v28[3];
      uint64_t v31 = v28[4];
      unint64_t v32 = v28[5];
      uint64_t v33 = v28[6];
      unint64_t v34 = v28[7];
      uint64_t v35 = v28[8];
      unint64_t v36 = v28[9];
      uint64_t v37 = v28[10];
      unint64_t v38 = v28[11];
      *(void *)&long long v68 = v28[12];
      *(void *)&long long v64 = v28[13];
      sub_1000361E0(*v28, v28[1]);
      sub_1000361E0(v29, v30);
      sub_1000361E0(v31, v32);
      sub_1000361E0(v33, v34);
      sub_1000361E0(v35, v36);
      sub_1000361E0(v37, v38);
      sub_1000361E0(v68, v64);
      break;
    case 4u:
      uint64_t v39 = sub_10006242C((uint64_t)v76);
      long long v65 = *(_OWORD *)(v39 + 16);
      long long v69 = *(_OWORD *)v39;
      long long v62 = *(_OWORD *)(v39 + 32);
      uint64_t v40 = *(void *)(v39 + 48);
      uint64_t v41 = *(void *)(v39 + 56);
      uint64_t v73 = &type metadata for AirPodsSWSendPairingStatusCommandPayload;
      unint64_t v74 = sub_1000621C0();
      uint64_t v42 = swift_allocObject();
      uint64_t v71 = v42;
      *(_OWORD *)(v42 + 16) = v69;
      *(_OWORD *)(v42 + 32) = v65;
      *(_OWORD *)(v42 + 48) = v62;
      *(void *)(v42 + 64) = v40;
      *(void *)(v42 + 72) = v41;
      sub_10005E7E8((uint64_t)v77, (uint64_t)v70);
      uint64_t v43 = (uint64_t *)sub_10006242C((uint64_t)v70);
      uint64_t v44 = v43[2];
      unint64_t v45 = v43[3];
      uint64_t v46 = v43[4];
      unint64_t v47 = v43[5];
      uint64_t v48 = v43[6];
      unint64_t v49 = v43[7];
      sub_1000361E0(*v43, v43[1]);
      sub_1000361E0(v44, v45);
      sub_1000361E0(v46, v47);
      sub_1000361E0(v48, v49);
      break;
    case 5u:
      uint64_t v50 = (uint64_t *)sub_10006242C((uint64_t)v76);
      uint64_t v51 = *v50;
      uint64_t v52 = v50[1];
      uint64_t v73 = &type metadata for AirPodsSWPairingCompleteCommandPayload;
      unint64_t v74 = sub_10006216C();
      uint64_t v71 = v51;
      uint64_t v72 = v52;
      sub_10005E7E8((uint64_t)v77, (uint64_t)v70);
      uint64_t v53 = sub_10006242C((uint64_t)v70);
      sub_1000361E0(*(void *)v53, *(void *)(v53 + 8));
      break;
    case 6u:
      uint64_t v73 = &type metadata for AccessoryGenericPayload;
      unint64_t v54 = sub_10006258C();
      goto LABEL_10;
    case 7u:
      uint64_t v73 = &type metadata for UnpairCommandPayload;
      unint64_t v54 = sub_100062118();
LABEL_10:
      unint64_t v74 = v54;
      break;
    default:
      uint64_t v2 = sub_10006242C((uint64_t)v76);
      long long v66 = *(_OWORD *)v2;
      uint64_t v3 = *(void *)(v2 + 16);
      uint64_t v4 = *(void *)(v2 + 24);
      uint64_t v73 = &type metadata for AirPodsSendBeaconGroupDataCommandPayload;
      unint64_t v74 = sub_1000624F4();
      uint64_t v5 = swift_allocObject();
      uint64_t v71 = v5;
      *(_OWORD *)(v5 + 16) = v66;
      *(void *)(v5 + 32) = v3;
      *(void *)(v5 + 40) = v4;
      sub_10005E7E8((uint64_t)v77, (uint64_t)v70);
      uint64_t v6 = (uint64_t *)sub_10006242C((uint64_t)v70);
      uint64_t v7 = v6[2];
      unint64_t v8 = v6[3];
      sub_1000361E0(*v6, v6[1]);
      sub_1000361E0(v7, v8);
      break;
  }
  sub_10000588C(&qword_101639B68);
  return String.init<A>(describing:)();
}

uint64_t sub_10005848C(uint64_t a1)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  sub_1000620BC((uint64_t)&v4, (uint64_t)v5);
  sub_1000620BC((uint64_t)v5, (uint64_t)&v6);
  uint64_t result = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      v7 &= 0x3FFFFFFFFFFFFFFFuLL;
      if (__OFSUB__(HIDWORD(v6), v6))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x100058538);
      }
      return HIDWORD(v6) - (int)v6;
    case 2uLL:
      v7 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v2 = *(void *)(v6 + 16);
      uint64_t v3 = *(void *)(v6 + 24);
      uint64_t result = v3 - v2;
      if (!__OFSUB__(v3, v2)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(v7);
  }
}

uint64_t sub_100058548@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, long long *a3@<X8>)
{
  uint64_t v5 = v4;
  if (*(unsigned char *)(v3 + 274) == 1)
  {
    swift_beginAccess();
    sub_10001D074(v3 + 192, (uint64_t)&v24, &qword_101639A40);
    if (*((void *)&v25 + 1))
    {
      sub_10000588C(&qword_101639C60);
      type metadata accessor for CollaborativeKeyGen.v2.OwnerContext();
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        uint64_t v10 = v23[0];
        CCCKG2ParamsP224Sha256Version2();
        uint64_t OpeningSize = CCCKG2GetOpeningSize();
        switch(a2 >> 62)
        {
          case 1uLL:
            if (a1 >> 32 < (int)a1)
            {
              __break(1u);
LABEL_33:
              __break(1u);
            }
            swift_retain_n();
            sub_1000361E0(a1, a2);
            sub_100A965D4((int)a1, a1 >> 32, v23[0], OpeningSize, (uint64_t)&v24);
            break;
          case 2uLL:
            uint64_t v15 = *(void *)(a1 + 16);
            uint64_t v14 = *(void *)(a1 + 24);
            swift_retain_n();
            swift_retain();
            swift_retain();
            sub_100A965D4(v15, v14, v23[0], OpeningSize, (uint64_t)&v24);
            if (v5) {
              goto LABEL_14;
            }
            goto LABEL_23;
          case 3uLL:
            memset(v23, 0, 14);
            swift_retain_n();
            goto LABEL_16;
          default:
            v23[0] = a1;
            LOWORD(v23[1]) = a2;
            BYTE2(v23[1]) = BYTE2(a2);
            BYTE3(v23[1]) = BYTE3(a2);
            BYTE4(v23[1]) = BYTE4(a2);
            BYTE5(v23[1]) = BYTE5(a2);
            swift_retain_n();
LABEL_16:
            sub_100A9296C((uint64_t)v23, v10, OpeningSize, (uint64_t)&v24);
            if (!v4) {
              goto LABEL_30;
            }
            goto LABEL_26;
        }
LABEL_20:
        if (v4)
        {
          sub_10001CFB8(a1, a2);
LABEL_26:
          swift_errorRelease();
          uint64_t result = swift_release_n();
          goto LABEL_27;
        }
        sub_10001CFB8(a1, a2);
LABEL_30:
        uint64_t result = swift_release_n();
LABEL_31:
        long long v18 = v24;
        long long v19 = v25;
        long long v20 = v26;
        long long v21 = v27;
        long long v22 = v28;
        goto LABEL_28;
      }
      goto LABEL_27;
    }
LABEL_10:
    uint64_t result = sub_10001DAB4((uint64_t)&v24, &qword_101639A40);
    goto LABEL_27;
  }
  swift_beginAccess();
  sub_10001D074(v3 + 192, (uint64_t)&v24, &qword_101639A40);
  if (!*((void *)&v25 + 1)) {
    goto LABEL_10;
  }
  sub_10000588C(&qword_101639C60);
  type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v12 = v23[0];
    uint64_t v13 = CCCKGGetOpeningSize();
    switch(a2 >> 62)
    {
      case 1uLL:
        if (a1 >> 32 < (int)a1) {
          goto LABEL_33;
        }
        swift_retain_n();
        sub_1000361E0(a1, a2);
        swift_retain();
        sub_100394158((int)a1, a1 >> 32, v23[0], v13, (uint64_t)&v24);
        goto LABEL_20;
      case 2uLL:
        uint64_t v17 = *(void *)(a1 + 16);
        uint64_t v16 = *(void *)(a1 + 24);
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_100394158(v17, v16, v23[0], v13, (uint64_t)&v24);
        if (v5)
        {
LABEL_14:
          swift_release();
          swift_release();
          goto LABEL_26;
        }
LABEL_23:
        swift_release_n();
        swift_release();
        uint64_t result = swift_release();
        break;
      case 3uLL:
        memset(v23, 0, 14);
        swift_retain_n();
        goto LABEL_25;
      default:
        v23[0] = a1;
        LOWORD(v23[1]) = a2;
        BYTE2(v23[1]) = BYTE2(a2);
        BYTE3(v23[1]) = BYTE3(a2);
        BYTE4(v23[1]) = BYTE4(a2);
        BYTE5(v23[1]) = BYTE5(a2);
        swift_retain_n();
LABEL_25:
        sub_100A915E8((uint64_t)v23, v12, v13, (uint64_t)&v24);
        if (v4) {
          goto LABEL_26;
        }
        goto LABEL_30;
    }
    goto LABEL_31;
  }
LABEL_27:
  long long v18 = xmmword_101347BB0;
  long long v19 = 0uLL;
  long long v20 = 0uLL;
  long long v21 = 0uLL;
  long long v22 = 0uLL;
LABEL_28:
  *a3 = v18;
  a3[1] = v19;
  a3[2] = v20;
  a3[3] = v21;
  a3[4] = v22;
  return result;
}

uint64_t sub_100058ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[31] = a4;
  v5[32] = v4;
  v5[29] = a2;
  v5[30] = a3;
  v5[28] = a1;
  type metadata accessor for StandaloneBeacon();
  v5[33] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MACAddress();
  v5[34] = v6;
  v5[35] = *(void *)(v6 - 8);
  v5[36] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v5[37] = v7;
  v5[38] = *(void *)(v7 - 8);
  v5[39] = swift_task_alloc();
  type metadata accessor for OwnedBeaconGroup(0);
  v5[40] = swift_task_alloc();
  v5[41] = type metadata accessor for OwnedBeaconRecord();
  v5[42] = swift_task_alloc();
  type metadata accessor for String.Encoding();
  v5[43] = swift_task_alloc();
  return _swift_task_switch(sub_100058C94, v4, 0);
}

uint64_t sub_100058C94()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 352) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100058DE4;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100058DE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 256);
  *(void *)(*(void *)v1 + 360) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100058EFC, v2, 0);
}

uint64_t sub_100058EFC()
{
  uint64_t v55 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (!v0[45])
  {
    uint64_t v11 = (uint64_t *)v0[28];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    uint64_t v12 = swift_allocError();
    *uint64_t v13 = 0xD000000000000010;
    v13[1] = 0x80000001013F23D0;
    *uint64_t v11 = v12;
LABEL_11:
    sub_10000588C(&qword_101639B50);
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  uint64_t v2 = v0[32];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v3 = (uint64_t *)(*(void *)(v2 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  uint64_t v4 = *v3;
  v0[46] = *v3;
  unint64_t v5 = v3[1];
  v0[47] = v5;
  if (v5 >> 60 == 15)
  {
LABEL_5:
    if (qword_101636840 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_1016397F0);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Invalid serial number.", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = (void *)v0[28];

    swift_release();
    void *v10 = 0x8000000000000007;
    goto LABEL_11;
  }
  v0[18] = v4;
  v0[19] = v5;
  sub_1000361E0(v4, v5);
  sub_1000362FC();
  if (DataProtocol.isNull.getter())
  {
    sub_100037A24(v4, v5);
    goto LABEL_5;
  }
  uint64_t v16 = Data.trimmed.getter();
  unint64_t v18 = v17;
  v0[48] = v16;
  v0[49] = v17;
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100010324(v19, (uint64_t)qword_10170F068);
  sub_1000361E0(v16, v18);
  sub_1000361E0(v16, v18);
  long long v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 141558275;
    v0[26] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 12) = 2081;
    static String.Encoding.utf8.getter();
    uint64_t v23 = String.init(data:encoding:)();
    if (!v24) {
      uint64_t v23 = Data.hexString.getter();
    }
    v0[27] = sub_1008FA0F0(v23, v24, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v16, v18);
    sub_10001CFB8(v16, v18);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Creating beacon for %{private,mask.hash}s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(v16, v18);
    sub_10001CFB8(v16, v18);
  }
  if (*(unsigned char *)(v0[32] + 272))
  {
    if (qword_101636840 != -1) {
      swift_once();
    }
    uint64_t v26 = v0[35];
    uint64_t v25 = v0[36];
    uint64_t v27 = v0[34];
    uint64_t v28 = v0[31];
    v0[56] = sub_100010324(v19, (uint64_t)qword_1016397F0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v28, v27);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v33 = v0[35];
    uint64_t v32 = v0[36];
    uint64_t v34 = v0[34];
    if (v31)
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136446210;
      sub_100062074((unint64_t *)&qword_101649EE0, 255, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[25] = sub_1008FA0F0(v36, v37, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Creating standalone beacon. classicMACAddress %{public}s", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v33 + 8))(v0[36], v0[34]);
    }

    type metadata accessor for __DataStorage();
    swift_allocObject();
    v0[57] = __DataStorage.init(length:)();
    v0[58] = *(void *)(v2 + 184);
    uint64_t v47 = v0[45];
    swift_retain();
    return _swift_task_switch(sub_100059F34, v47, 0);
  }
  else
  {
    uint64_t v38 = *(void *)(*(void *)(v2 + 184)
                    + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
    v0[50] = v38;
    uint64_t v39 = qword_101636840;
    swift_bridgeObjectRetain();
    if (v39 != -1) {
      swift_once();
    }
    v0[51] = sub_100010324(v19, (uint64_t)qword_1016397F0);
    swift_bridgeObjectRetain_n();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136315394;
      type metadata accessor for MultipartAccessoryPairingInfo(0);
      sub_100061B8C();
      swift_bridgeObjectRetain();
      uint64_t v43 = Dictionary.description.getter();
      unint64_t v45 = v44;
      swift_bridgeObjectRelease();
      v0[22] = sub_1008FA0F0(v43, v45, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2048;
      uint64_t v46 = *(void *)(v38 + 16);
      swift_bridgeObjectRelease();
      v0[23] = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "allSerialNumbersAndPartIds: %s. Count %ld", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v48 = *(void *)(v2 + 184);
    v0[52] = v48;
    swift_retain();
    unint64_t v49 = (void *)swift_task_alloc();
    v0[53] = v49;
    *unint64_t v49 = v0;
    v49[1] = sub_10005988C;
    uint64_t v50 = v0[42];
    uint64_t v51 = v0[40];
    uint64_t v52 = v0[31];
    uint64_t v53 = v0[29];
    return sub_100E4DE00(v50, v51, v53, v48, 0, 0xE000000000000000, v52, v38);
  }
}

uint64_t sub_10005988C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 432) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 256);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = sub_10005A240;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100059A0C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100059A0C()
{
  uint64_t v1 = (void **)(*(void *)(v0[32] + 144) + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
  swift_beginAccess();
  uint64_t v2 = *v1;
  v0[55] = *v1;
  if (v2)
  {
    (*(void (**)(void, void, void))(v0[38] + 16))(v0[39], v0[42] + *(int *)(v0[41] + 20), v0[37]);
    uint64_t v3 = v0[45];
    id v4 = v2;
    return _swift_task_switch(sub_100059CBC, v3, 0);
  }
  else
  {
    unint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v9 = v0[48];
    unint64_t v8 = v0[49];
    uint64_t v11 = v0[46];
    unint64_t v10 = v0[47];
    if (v7)
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unable to retrieve current location from CL for pairing", v12, 2u);
      swift_slowDealloc();

      swift_release();
      sub_10001CFB8(v9, v8);
      sub_100037A24(v11, v10);
    }
    else
    {
      sub_100037A24(v0[46], v0[47]);
      sub_10001CFB8(v9, v8);

      swift_release();
    }
    uint64_t v13 = v0[42];
    uint64_t v14 = v0[40];
    uint64_t v15 = v0[28];
    uint64_t v16 = v15 + *(int *)(sub_10000588C(&qword_101639B90) + 48);
    sub_10006170C(v14, v15, type metadata accessor for OwnedBeaconGroup);
    sub_10006170C(v13, v16, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    type metadata accessor for AirPodsLEPairingService.BeaconCreationResult();
    swift_storeEnumTagMultiPayload();
    sub_10000588C(&qword_101639B50);
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_100059CBC()
{
  uint64_t v1 = v0[55];
  uint64_t v3 = v0[38];
  uint64_t v2 = v0[39];
  uint64_t v4 = v0[37];
  uint64_t v5 = v0[32];
  uint64_t v6 = *(void *)(v0[45] + 128);
  type metadata accessor for Transaction();
  uint64_t v7 = swift_task_alloc();
  *(unsigned char *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = v1;
  *(void *)(v7 + 32) = v2;
  *(void *)(v7 + 40) = v6;
  static Transaction.named<A>(_:with:)();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return _swift_task_switch(sub_100059DD0, v5, 0);
}

uint64_t sub_100059DD0()
{
  uint64_t v1 = (void *)v0[55];
  uint64_t v2 = v0[48];
  unint64_t v3 = v0[49];
  sub_100037A24(v0[46], v0[47]);
  sub_10001CFB8(v2, v3);

  swift_release();
  uint64_t v4 = v0[42];
  uint64_t v5 = v0[40];
  uint64_t v6 = v0[28];
  uint64_t v7 = v6 + *(int *)(sub_10000588C(&qword_101639B90) + 48);
  sub_10006170C(v5, v6, type metadata accessor for OwnedBeaconGroup);
  sub_10006170C(v4, v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  type metadata accessor for AirPodsLEPairingService.BeaconCreationResult();
  swift_storeEnumTagMultiPayload();
  sub_10000588C(&qword_101639B50);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100059F34()
{
  uint64_t v1 = v0[57];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[59] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100059FE8;
  uint64_t v3 = v0[58];
  uint64_t v4 = v0[33];
  uint64_t v5 = v0[30];
  uint64_t v6 = v0[31];
  uint64_t v7 = v0[29];
  return sub_100BF5520(v4, v7, v3, v5, v6, 0x6000000000, v1 | 0x4000000000000000);
}

uint64_t sub_100059FE8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 480) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 256);
    uint64_t v4 = sub_10005A4D4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 256);
    swift_release();
    uint64_t v4 = sub_10005A110;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10005A110()
{
  uint64_t v2 = v0[48];
  unint64_t v1 = v0[49];
  uint64_t v3 = v0[33];
  uint64_t v4 = v0[28];
  sub_100037A24(v0[46], v0[47]);
  sub_10001CFB8(v2, v1);
  swift_release();
  swift_release();
  sub_10006170C(v3, v4, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
  type metadata accessor for AirPodsLEPairingService.BeaconCreationResult();
  swift_storeEnumTagMultiPayload();
  sub_10000588C(&qword_101639B50);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10005A240()
{
  uint64_t v17 = v0;
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 432);
    uint64_t v12 = *(void *)(v0 + 384);
    unint64_t v13 = *(void *)(v0 + 392);
    uint64_t v14 = *(void *)(v0 + 368);
    unint64_t v15 = *(void *)(v0 + 376);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    uint64_t v16 = v5;
    *(void *)(v0 + 168) = v3;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v6 = String.init<A>(describing:)();
    *(void *)(v0 + 160) = sub_1008FA0F0(v6, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to generateOwnedBeaconRecordGroup. Error %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    sub_10001CFB8(v12, v13);
    sub_100037A24(v14, v15);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 384);
    unint64_t v8 = *(void *)(v0 + 392);
    sub_100037A24(*(void *)(v0 + 368), *(void *)(v0 + 376));
    sub_10001CFB8(v9, v8);
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
  }
  **(void **)(v0 + 224) = *(void *)(v0 + 432);
  sub_10000588C(&qword_101639B50);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10005A4D4()
{
  swift_release();
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v10 = *(void *)(v0 + 384);
    unint64_t v11 = *(void *)(v0 + 392);
    uint64_t v12 = *(void *)(v0 + 368);
    unint64_t v13 = *(void *)(v0 + 376);
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 192) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to generateStandaloneBeacon. Error %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    sub_10001CFB8(v10, v11);
    sub_100037A24(v12, v13);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 384);
    unint64_t v6 = *(void *)(v0 + 392);
    sub_100037A24(*(void *)(v0 + 368), *(void *)(v0 + 376));
    sub_10001CFB8(v7, v6);
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
  }
  **(void **)(v0 + 224) = *(void *)(v0 + 480);
  sub_10000588C(&qword_101639B50);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10005A748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for OwnedBeaconRecord() + 20);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, v3, v4);
}

uint64_t sub_10005A7C4(unint64_t a1)
{
  sub_10005E370();
  uint64_t v2 = swift_allocError();
  *uint64_t v3 = a1;
  sub_1000600A8(a1);
  return v2;
}

uint64_t sub_10005A814(uint64_t a1)
{
  sub_10005E7E8(a1, (uint64_t)v3);
  sub_10005E844(a1, (void (*)(void))sub_1000361E0);
  return String.init<A>(describing:)();
}

uint64_t sub_10005A870(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Date();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  return _swift_task_switch(sub_10005A934, v2, 0);
}

uint64_t sub_10005A934()
{
  uint64_t v31 = v0;
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 32) = 0x7365547265646E75;
  *(void *)(v0 + 40) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 112) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v2 = *(void *)(v0 + 88);
    uint64_t v27 = *(void *)(v0 + 64);
    uint64_t v28 = *(void *)(v0 + 72);
    uint64_t v4 = *(void *)(v0 + 48);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(*(void *)(v0 + 56) + 120);
    type metadata accessor for __DataStorage();
    swift_allocObject();
    sub_100061E54(v0 + 16);
    sub_100061E54(v0 + 16);
    uint64_t v29 = 0x2000000000;
    uint64_t v30 = __DataStorage.init(length:)();
    sub_10072AF34((int *)&v29, 17);
    uint64_t v25 = v30 | 0x4000000000000000;
    uint64_t v26 = v29;
    swift_allocObject();
    uint64_t v5 = __DataStorage.init(length:)();
    uint64_t v29 = 0x6400000000;
    uint64_t v30 = v5;
    sub_10072AF34((int *)&v29, 34);
    uint64_t v6 = v29;
    uint64_t v7 = v30 | 0x4000000000000000;
    unint64_t v8 = (int *)type metadata accessor for AirPodsSWPairingLockCheckResponse();
    UUID.init()();
    swift_allocObject();
    uint64_t v9 = __DataStorage.init(length:)();
    uint64_t v29 = 0x2000000000;
    uint64_t v30 = v9;
    sub_10072AF34((int *)&v29, 85);
    uint64_t v10 = v29;
    uint64_t v11 = v30 | 0x4000000000000000;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 16);
    *(void *)(v4 + 32) = v26;
    *(void *)(v4 + 40) = v25;
    *(void *)(v4 + 48) = v6;
    *(void *)(v4 + 56) = v7;
    uint64_t v12 = (void *)(v4 + v8[9]);
    *uint64_t v12 = 0xD000000000000011;
    v12[1] = 0x80000001013F24B0;
    unint64_t v13 = (uint64_t *)(v4 + v8[10]);
    *unint64_t v13 = v10;
    v13[1] = v11;
    *(void *)(v4 + v8[11]) = 0;
    uint64_t v14 = *(void *)(v27 + 184);
    swift_retain();
    Date.init()();
    uint64_t v15 = Date.epoch.getter();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v28);
    *(void *)(v14 + 32) = v15;
    swift_release();
    sub_10000588C(&qword_101639BB0);
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 56);
    uint64_t v18 = *(void *)(v0 + 64);
    uint64_t v20 = sub_100062074(&qword_101639A38, v1, (void (*)(uint64_t))type metadata accessor for AirPodsLEPairingService);
    uint64_t v21 = swift_task_alloc();
    *(void *)(v0 + 96) = v21;
    *(void *)(v21 + 16) = v18;
    *(void *)(v21 + 24) = v19;
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v22;
    uint64_t v23 = sub_10000588C(&qword_101639BB0);
    *uint64_t v22 = v0;
    v22[1] = sub_10005AD4C;
    uint64_t v24 = *(void *)(v0 + 48);
    return withCheckedContinuation<A>(isolation:function:_:)(v24, v18, v20, 0xD00000000000002DLL, 0x80000001013F2480, sub_100061E4C, v21, v23);
  }
}

uint64_t sub_10005AD4C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10005AE80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10000588C(&qword_101639C00);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  char v9 = *(unsigned char *)(a2 + 272);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  swift_retain();
  sub_100972FFC(a3, v9, (void (*)(uint64_t))sub_100061F54, v11);
  return swift_release();
}

uint64_t sub_10005AFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AirPodsSWPairingLockCheckResponse();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101639BB0);
  uint64_t v8 = __chkstk_darwin(v7);
  unint64_t v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t *)((char *)&v14 - v11);
  sub_10001D074(a1, (uint64_t)&v14 - v11, &qword_101639BB0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    void *v10 = *v12;
    swift_storeEnumTagMultiPayload();
    sub_10000588C(&qword_101639C00);
    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    sub_10006170C((uint64_t)v12, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
    *(void *)(*(void *)(a2 + 184) + 32) = *(void *)&v6[*(int *)(v4 + 44)];
    sub_100061774((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
    swift_storeEnumTagMultiPayload();
    sub_10000588C(&qword_101639C00);
    CheckedContinuation.resume(returning:)();
    return sub_1000617DC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
  }
}

uint64_t sub_10005B1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000588C(&qword_1016575E0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  swift_retain();
  sub_100F82C4C((uint64_t)v15);
  swift_release();
  sub_10001D608((uint64_t)v15, (uint64_t)v16, &qword_101639B40);
  if (sub_10005F324((uint64_t)v16) == 1)
  {
    if (qword_101636840 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_1016397F0);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unable to generate ack data!", v11, 2u);
      swift_slowDealloc();
    }

    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    v17[10] = v16[10];
    v17[11] = v16[11];
    v17[12] = v16[12];
    v17[13] = v16[13];
    v17[6] = v16[6];
    v17[7] = v16[7];
    v17[8] = v16[8];
    v17[9] = v16[9];
    v17[2] = v16[2];
    v17[3] = v16[3];
    v17[4] = v16[4];
    v17[5] = v16[5];
    v17[0] = v16[0];
    v17[1] = v16[1];
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(&v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v5);
    unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v14 = swift_allocObject();
    (*(void (**)(unint64_t, unsigned char *, uint64_t))(v6 + 32))(v14 + v13, &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
    *(void *)(v14 + ((v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
    sub_1009738B4((uint64_t)v17, (uint64_t)sub_10005F3E8, v14);
    sub_10005F488((uint64_t)v15);
    return swift_release();
  }
}

uint64_t sub_10005B490(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AirPodsSWPairingLockAckResponse();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  os_log_type_t v10 = (char *)v32 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v32 - v11;
  uint64_t v13 = sub_10000588C(&qword_101639B48);
  __chkstk_darwin(v13);
  uint64_t v15 = (void **)((char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v15, &qword_101639B48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = *v15;
    if (qword_101636840 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_1016397F0);
    id v18 = v16;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138543362;
      id v23 = v18;
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v33 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v24;

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Ack register failed with error - %{public}@", v21, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    sub_10006170C((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockAckResponse);
    if (qword_101636840 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_1016397F0);
    sub_100061774((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockAckResponse);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v32[1] = a2;
      *(_DWORD *)uint64_t v28 = 136446210;
      sub_100061774((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockAckResponse);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v32[2] = sub_1008FA0F0(v29, v30, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000617DC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockAckResponse);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Ack register was success. %{public}s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1000617DC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockAckResponse);
    }
    sub_1000617DC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockAckResponse);
  }
  sub_10000588C(&qword_1016575E0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10005B95C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)(v3 + 274) == 1)
  {
    uint64_t v5 = sub_100A8A828(a1, a2);
    unint64_t v7 = v6;
    uint64_t v9 = v8;
    sub_1000361E0(v5, v6);
    sub_100435064(v5, v7, &v19);
    uint64_t v10 = v19;
    uint64_t v11 = v20;
    a3[3] = (uint64_t)&type metadata for CollaborativeKeyGen.v2.C2;
    a3[4] = sub_100062020();
    *a3 = v10;
    a3[1] = v11;
    uint64_t v12 = type metadata accessor for CollaborativeKeyGen.v2.OwnerContext();
    uint64_t v13 = &off_1015E6CE0;
  }
  else
  {
    uint64_t v5 = sub_100A8AEE4(a1, a2);
    unint64_t v7 = v14;
    uint64_t v9 = v15;
    sub_1000361E0(v5, v14);
    sub_100435190(v5, v7, &v19);
    uint64_t v16 = v19;
    uint64_t v17 = v20;
    a3[3] = (uint64_t)&type metadata for CollaborativeKeyGen.v1.C2;
    a3[4] = sub_100061FCC();
    *a3 = v16;
    a3[1] = v17;
    uint64_t v12 = type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
    uint64_t v13 = &off_1015E6CC0;
  }
  a3[8] = v12;
  a3[9] = (uint64_t)v13;
  uint64_t result = sub_10001CFB8(v5, v7);
  a3[5] = v9;
  return result;
}

uint64_t sub_10005BAA0(uint64_t a1, uint64_t a2)
{
  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  type metadata accessor for String.Encoding();
  v3[24] = swift_task_alloc();
  return _swift_task_switch(sub_10005BB34, v2, 0);
}

uint64_t sub_10005BB34()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10005BC84;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10005BC84(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184);
  *(void *)(*(void *)v1 + 208) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10005BD9C, v2, 0);
}

uint64_t sub_10005BD9C()
{
  unint64_t v44 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (!v0[26])
  {
    uint64_t v12 = (uint64_t *)v0[21];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    uint64_t v13 = swift_allocError();
    char v11 = 0;
    *unint64_t v14 = 0xD000000000000010;
    v14[1] = 0x80000001013F23D0;
    *uint64_t v12 = v13;
LABEL_11:
    uint64_t v15 = v0[21];
    *(unsigned char *)(v15 + 40) = v11;
    *(unsigned char *)(v15 + 264) = 1;
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
  uint64_t v2 = v0[23];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v3 = (uint64_t *)(*(void *)(v2 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  uint64_t v4 = *v3;
  v0[27] = *v3;
  unint64_t v5 = v3[1];
  v0[28] = v5;
  if (v5 >> 60 == 15)
  {
LABEL_5:
    if (qword_101636840 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_1016397F0);
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Invalid serial number.", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = v0[21];
    swift_release();

    *(void *)uint64_t v10 = 8;
    *(_OWORD *)(v10 + 8) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    char v11 = 11;
    goto LABEL_11;
  }
  v0[15] = v4;
  v0[16] = v5;
  sub_1000361E0(v4, v5);
  sub_1000362FC();
  if (DataProtocol.isNull.getter())
  {
    sub_100037A24(v4, v5);
    goto LABEL_5;
  }
  uint64_t v18 = Data.trimmed.getter();
  unint64_t v20 = v19;
  v0[29] = v18;
  v0[30] = v19;
  if (qword_101636840 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  v0[31] = sub_100010324(v21, (uint64_t)qword_1016397F0);
  sub_1000361E0(v18, v20);
  sub_1000361E0(v18, v20);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  uint64_t v24 = "Code";
  uint64_t v41 = v18;
  uint64_t v42 = v2;
  if (os_log_type_enabled(v22, v23))
  {
    os_log_type_t v40 = v23;
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136315138;
    sub_1000361E0(v18, v20);
    static String.Encoding.utf8.getter();
    uint64_t v26 = String.init(data:encoding:)();
    if (!v27) {
      uint64_t v26 = Data.hexString.getter();
    }
    uint64_t v28 = v26;
    unint64_t v29 = v27;
    sub_10001CFB8(v18, v20);
    v0[20] = sub_1008FA0F0(v28, v29, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v18, v20);
    sub_10001CFB8(v18, v20);
    _os_log_impl((void *)&_mh_execute_header, v22, v40, "Accessory serial number: %s.", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v2 = v42;
    uint64_t v24 = "Code";
  }
  else
  {
    sub_10001CFB8(v18, v20);
    sub_10001CFB8(v18, v20);
  }
  uint64_t v30 = *(void *)(*(void *)(v2 + 184)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
  v0[32] = v30;
  swift_bridgeObjectRetain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = *((void *)v24 + 159);
    type metadata accessor for MultipartAccessoryPairingInfo(0);
    sub_100061B8C();
    swift_bridgeObjectRetain();
    uint64_t v34 = Dictionary.description.getter();
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    v0[19] = sub_1008FA0F0(v34, v36, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "beaconGroupInfo: %s", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v42;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v37 = *(void *)(v2 + 184);
  v0[33] = v37;
  swift_retain();
  uint64_t v38 = (void *)swift_task_alloc();
  v0[34] = v38;
  *uint64_t v38 = v0;
  v38[1] = sub_10005C3FC;
  uint64_t v39 = v0[22];
  return sub_100E4D854(v41, v20, 0, 0xE000000000000000, v39, v30, v37);
}

uint64_t sub_10005C3FC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 280) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 184);
  if (v0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10005C634;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = sub_10005C57C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10005C57C()
{
  uint64_t v1 = v0[29];
  unint64_t v2 = v0[30];
  sub_100037A24(v0[27], v0[28]);
  sub_10001CFB8(v1, v2);
  swift_release();
  uint64_t v3 = v0[21];
  *(void *)uint64_t v3 = 8;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  uint64_t v4 = v0[21];
  *(unsigned char *)(v4 + 40) = 11;
  *(unsigned char *)(v4 + 264) = 1;
  swift_task_dealloc();
  unint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10005C634()
{
  unint64_t v19 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[35];
    uint64_t v14 = v0[29];
    unint64_t v15 = v0[30];
    uint64_t v16 = v0[27];
    unint64_t v17 = v0[28];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    uint64_t v18 = v5;
    v0[17] = v3;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v6 = String.init<A>(describing:)();
    v0[18] = sub_1008FA0F0(v6, v7, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Unable to persist pairing lock state due to %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_errorRelease();
    sub_10001CFB8(v14, v15);
    sub_100037A24(v16, v17);
  }
  else
  {
    uint64_t v9 = v0[29];
    unint64_t v8 = v0[30];
    sub_100037A24(v0[27], v0[28]);
    sub_10001CFB8(v9, v8);
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = v0[21];
  *(void *)uint64_t v10 = 8;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  uint64_t v11 = v0[21];
  *(unsigned char *)(v11 + 40) = 11;
  *(unsigned char *)(v11 + 264) = 1;
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10005C8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[241] = v5;
  v6[240] = a5;
  v6[239] = a4;
  v6[238] = a3;
  v6[237] = a2;
  v6[236] = a1;
  uint64_t v7 = type metadata accessor for MACAddress();
  v6[242] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[243] = v8;
  v6[244] = *(void *)(v8 + 64);
  v6[245] = swift_task_alloc();
  v6[246] = sub_10000588C(&qword_10163BB20);
  v6[247] = swift_task_alloc();
  v6[248] = swift_task_alloc();
  v6[249] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for String.Encoding();
  v6[250] = v9;
  v6[251] = *(void *)(v9 - 8);
  v6[252] = swift_task_alloc();
  v6[253] = type metadata accessor for AirPodsSWPairingLockCheckResponse();
  v6[254] = swift_task_alloc();
  v6[255] = swift_task_alloc();
  return _swift_task_switch(sub_10005CA68, v5, 0);
}

uint64_t sub_10005CA68()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 1712, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 1736))
  {
    sub_10001CEB0((long long *)(v0 + 1712), v0 + 1752);
    swift_release();
    sub_10001CD44((void *)(v0 + 1752), *(void *)(v0 + 1776));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 2048) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10005CBB8;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10005CBB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1928);
  *(void *)(*(void *)v1 + 2056) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10005CCD0, v2, 0);
}

uint64_t sub_10005CCD0()
{
  uint64_t v83 = v0;
  uint64_t v1 = v0 + 1072;
  uint64_t v2 = v0 + 1752;
  if (!*(void *)(v0 + 2056))
  {
    uint64_t v15 = v0 + 1336;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2);
    sub_10005EEC4(v0 + 1336);
LABEL_23:
    uint64_t v37 = v15;
LABEL_32:
    sub_10001D608(v37, v1, &qword_101639AD8);
    sub_10001D608(v1, *(void *)(v0 + 1888), &qword_101639AD8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v67 = *(uint64_t (**)(void))(v0 + 8);
    return v67();
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2);
  if (qword_101636840 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(v0 + 2040);
  uint64_t v4 = *(void *)(v0 + 2032);
  uint64_t v5 = *(void *)(v0 + 1896);
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_1016397F0);
  sub_100061774(v5, v3, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
  sub_100061774(v5, v4, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 2040);
  if (v9)
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v81 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 134218242;
    uint64_t v12 = *(void *)(v10 + 48);
    unint64_t v13 = *(void *)(v10 + 56);
    uint64_t v14 = 0;
    switch(v13 >> 62)
    {
      case 1uLL:
        BOOL v17 = __OFSUB__(HIDWORD(v12), v12);
        int v18 = HIDWORD(v12) - v12;
        if (v17)
        {
          __break(1u);
LABEL_39:
          __break(1u);
          JUMPOUT(0x10005D690);
        }
        uint64_t v14 = v18;
LABEL_12:
        uint64_t v22 = *(void *)(v0 + 2032);
        sub_1000617DC(*(void *)(v0 + 2040), (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
        *(void *)(v0 + 1872) = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v11 + 12) = 2080;
        uint64_t v23 = Data.hexString.getter();
        *(void *)(v0 + 1880) = sub_1008FA0F0(v23, v24, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000617DC(v22, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "S3 count %ld: %s", (uint8_t *)v11, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v1 = v0 + 1072;
        break;
      case 2uLL:
        uint64_t v21 = v12 + 16;
        uint64_t v19 = *(void *)(v12 + 16);
        uint64_t v20 = *(void *)(v21 + 8);
        uint64_t v14 = v20 - v19;
        if (!__OFSUB__(v20, v19)) {
          goto LABEL_12;
        }
        goto LABEL_39;
      case 3uLL:
        goto LABEL_12;
      default:
        uint64_t v14 = BYTE6(v13);
        goto LABEL_12;
    }
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 2032);
    sub_1000617DC(v10, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
    sub_1000617DC(v16, (uint64_t (*)(void))type metadata accessor for AirPodsSWPairingLockCheckResponse);
  }
  uint64_t v25 = *(void *)(v0 + 1928);
  if (*(unsigned char *)(v25 + 272) == 1)
  {
    uint64_t v26 = v1;
    type metadata accessor for __DataStorage();
    swift_allocObject();
    uint64_t v27 = __DataStorage.init(length:)();
    uint64_t v81 = 0x3C00000000;
    uint64_t v82 = v27;
    sub_10072AF34((int *)&v81, 0);
    uint64_t v28 = v81;
    unint64_t v29 = v82 | 0x4000000000000000;
  }
  else
  {
    if (!*(void *)(*(void *)(v0 + 1896) + *(int *)(*(void *)(v0 + 2024) + 36) + 8)
      || (uint64_t v30 = *(void *)(v0 + 2016),
          uint64_t v31 = *(void *)(v0 + 2008),
          uint64_t v32 = *(void *)(v0 + 2000),
          static String.Encoding.utf8.getter(),
          uint64_t v28 = String.data(using:allowLossyConversion:)(),
          unint64_t v29 = v33,
          (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32),
          v29 >> 60 == 15))
    {
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        unint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Unable to decode masked apple ID", v36, 2u);
        swift_slowDealloc();
      }
      swift_release();

      sub_10005EEC4(v0 + 16);
      uint64_t v37 = v0 + 16;
      goto LABEL_32;
    }
    uint64_t v26 = v1;
  }
  *(void *)(v0 + 2072) = v29;
  *(void *)(v0 + 2064) = v28;
  if (*(unsigned char *)(v25 + 272) == 1)
  {
    uint64_t v38 = *(void *)(v0 + 1992);
    uint64_t v39 = type metadata accessor for OwnedBeaconGroup(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
    uint64_t v74 = sub_10114503C(v38, 255);
    unint64_t v72 = v40;
    unint64_t v78 = *(void *)(v0 + 2072);
    uint64_t v76 = *(void *)(v0 + 2064);
    uint64_t v41 = *(void *)(v0 + 2024);
    unint64_t v42 = *(void *)(v0 + 1912);
    uint64_t v43 = *(void *)(v0 + 1904);
    unint64_t v44 = *(void **)(v0 + 1896);
    sub_10001DAB4(*(void *)(v0 + 1992), &qword_10163BB20);
    uint64_t v45 = v44[4];
    unint64_t v46 = v44[5];
    uint64_t v48 = v44[6];
    unint64_t v47 = v44[7];
    *(void *)(v0 + 1864) = *(void *)((char *)v44 + *(int *)(v41 + 44));
    sub_1000361E0(v43, v42);
    sub_1000361E0(v45, v46);
    sub_1000361E0(v48, v47);
    sub_100061D24();
    uint64_t v49 = FixedWidthInteger.data.getter();
    uint64_t v1 = v0 + 1072;
    sub_1003D7E04(v43, v42, v45, v46, v76, v78, v48, v47, v0 + 1600, v49, v50, v74, v72);
    long long v80 = *(_OWORD *)(v0 + 1600);
    long long v77 = *(_OWORD *)(v0 + 1632);
    long long v79 = *(_OWORD *)(v0 + 1616);
    long long v73 = *(_OWORD *)(v0 + 1664);
    long long v75 = *(_OWORD *)(v0 + 1648);
    long long v71 = *(_OWORD *)(v0 + 1680);
    uint64_t v51 = *(void *)(v0 + 1696);
    uint64_t v52 = *(void *)(v0 + 1704);
    swift_release();
    *(_OWORD *)(v0 + 544) = v80;
    *(_OWORD *)(v0 + 560) = v79;
    *(_OWORD *)(v0 + 576) = v77;
    *(_OWORD *)(v0 + 592) = v75;
    *(_OWORD *)(v0 + 608) = v73;
    *(_OWORD *)(v0 + 624) = v71;
    *(void *)(v0 + 640) = v51;
    *(void *)(v0 + 648) = v52;
    sub_100061D78(v0 + 544);
    uint64_t v15 = v0 + 280;
    sub_10005E7E8(v0 + 544, v0 + 280);
    SharingCircleWildAdvertisementKey.init(key:)(v0 + 280);
    goto LABEL_23;
  }
  uint64_t v53 = *(void *)(v0 + 1928);
  uint64_t v54 = *(void *)(v53 + 184);
  uint64_t v55 = v54 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId;
  *(unsigned char *)(v0 + 2144) = *(unsigned char *)(v54 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId);
  uint64_t v1 = v26;
  if ((*(unsigned char *)(v55 + 1) & 1) != 0
    || (uint64_t v56 = (uint64_t *)(v54 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber),
        uint64_t v57 = *v56,
        *(void *)(v0 + 2080) = *v56,
        unint64_t v58 = v56[1],
        *(void *)(v0 + 2088) = v58,
        v58 >> 60 == 15))
  {
LABEL_28:
    swift_retain_n();
    long long v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = swift_slowAlloc();
      uint64_t v81 = swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 141558275;
      *(void *)(v0 + 1856) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v61 + 12) = 2081;
      long long v62 = (uint64_t *)(*(void *)(v53 + 184)
                      + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
      uint64_t v63 = *v62;
      unint64_t v64 = v62[1];
      *(void *)(v0 + 1816) = *v62;
      *(void *)(v0 + 1824) = v64;
      sub_100037A38(v63, v64);
      sub_10000588C(&qword_101669360);
      uint64_t v65 = String.init<A>(describing:)();
      *(void *)(v0 + 1848) = sub_1008FA0F0(v65, v66, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Invalid serial number %{private,mask.hash}s!", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v1 = v0 + 1072;
      swift_slowDealloc();
      swift_release();

      sub_10001CFB8(v28, v29);
    }
    else
    {
      swift_release();
      swift_release_n();
      sub_10001CFB8(v28, v29);
    }
    sub_10005EEC4(v0 + 808);
    uint64_t v37 = v0 + 808;
    goto LABEL_32;
  }
  *(void *)(v0 + 1832) = v57;
  *(void *)(v0 + 1840) = v58;
  sub_1000361E0(v57, v58);
  sub_1000362FC();
  if (DataProtocol.isNull.getter())
  {
    sub_100037A24(v57, v58);
    goto LABEL_28;
  }
  *(void *)(v0 + 2096) = Data.trimmed.getter();
  *(void *)(v0 + 2104) = v69;
  uint64_t v70 = *(void *)(v0 + 2056);
  return _swift_task_switch(sub_10005D6A0, v70, 0);
}

uint64_t sub_10005D6A0()
{
  uint64_t v1 = v0[257];
  uint64_t v2 = v0[245];
  uint64_t v3 = v0[243];
  uint64_t v4 = v0[242];
  uint64_t v5 = v0[240];
  v0[264] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[265] = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_10005D79C, 0, 0);
}

uint64_t sub_10005D79C()
{
  uint64_t v1 = v0[265];
  uint64_t v2 = v0[264];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[266] = v3;
  v3[2] = v2;
  v3[3] = sub_100061680;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[267] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10005D8A8;
  uint64_t v5 = v0[248];
  uint64_t v6 = v0[246];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100065510, v3, v6);
}

uint64_t sub_10005D8A8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1928);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_10005D9F8, v1, 0);
}

uint64_t sub_10005D9F8()
{
  uint64_t v1 = *(void *)(v0 + 1976);
  sub_10001D074(*(void *)(v0 + 1984), v1, &qword_10163BB20);
  uint64_t v2 = type metadata accessor for OwnedBeaconGroup(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 1976), &qword_10163BB20);
    char v3 = *(unsigned char *)(v0 + 2144);
  }
  else
  {
    char v4 = *(unsigned char *)(v0 + 2144);
    uint64_t v5 = *(void *)(v0 + 1976);
    __int16 v6 = sub_1004CF630(*(void *)(v0 + 2096), *(void *)(v0 + 2104));
    sub_1000617DC(v5, type metadata accessor for OwnedBeaconGroup);
    if ((v6 & 0x100) != 0) {
      char v3 = v4;
    }
    else {
      char v3 = v6;
    }
  }
  unint64_t v7 = *(void *)(v0 + 2104);
  uint64_t v8 = *(void *)(v0 + 2096);
  unint64_t v9 = *(void *)(v0 + 2088);
  uint64_t v10 = *(void *)(v0 + 2080);
  uint64_t v33 = sub_10114503C(*(void *)(v0 + 1984), v3);
  unint64_t v31 = v11;
  sub_10001CFB8(v8, v7);
  sub_100037A24(v10, v9);
  unint64_t v29 = *(void *)(v0 + 2072);
  uint64_t v27 = *(void *)(v0 + 2064);
  uint64_t v12 = *(void *)(v0 + 2024);
  unint64_t v13 = *(void *)(v0 + 1912);
  uint64_t v14 = *(void *)(v0 + 1904);
  uint64_t v15 = *(void **)(v0 + 1896);
  sub_10001DAB4(*(void *)(v0 + 1984), &qword_10163BB20);
  uint64_t v16 = v15[4];
  unint64_t v17 = v15[5];
  uint64_t v18 = v15[6];
  unint64_t v19 = v15[7];
  *(void *)(v0 + 1864) = *(void *)((char *)v15 + *(int *)(v12 + 44));
  sub_1000361E0(v14, v13);
  sub_1000361E0(v16, v17);
  sub_1000361E0(v18, v19);
  sub_100061D24();
  uint64_t v20 = FixedWidthInteger.data.getter();
  sub_1003D7E04(v14, v13, v16, v17, v27, v29, v18, v19, v0 + 1600, v20, v21, v33, v31);
  long long v35 = *(_OWORD *)(v0 + 1600);
  long long v32 = *(_OWORD *)(v0 + 1632);
  long long v34 = *(_OWORD *)(v0 + 1616);
  long long v28 = *(_OWORD *)(v0 + 1664);
  long long v30 = *(_OWORD *)(v0 + 1648);
  long long v26 = *(_OWORD *)(v0 + 1680);
  uint64_t v22 = *(void *)(v0 + 1696);
  uint64_t v23 = *(void *)(v0 + 1704);
  swift_release();
  *(_OWORD *)(v0 + 544) = v35;
  *(_OWORD *)(v0 + 560) = v34;
  *(_OWORD *)(v0 + 576) = v32;
  *(_OWORD *)(v0 + 592) = v30;
  *(_OWORD *)(v0 + 608) = v28;
  *(_OWORD *)(v0 + 624) = v26;
  *(void *)(v0 + 640) = v22;
  *(void *)(v0 + 648) = v23;
  sub_100061D78(v0 + 544);
  sub_10005E7E8(v0 + 544, v0 + 280);
  SharingCircleWildAdvertisementKey.init(key:)(v0 + 280);
  sub_10001D608(v0 + 280, v0 + 1072, &qword_101639AD8);
  sub_10001D608(v0 + 1072, *(void *)(v0 + 1888), &qword_101639AD8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

void sub_10005DD3C()
{
  uint64_t v0 = sub_10000588C(&qword_101639C18);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = Data.subdata(in:)();
  unint64_t v5 = v4;
  v19[0] = v3;
  v19[1] = v4;
  sub_1000362FC();
  if (DataProtocol.isNull.getter())
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F068);
    sub_1000361E0(v3, v5);
    sub_1000361E0(v3, v5);
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      v19[0] = v18;
      *(_DWORD *)uint64_t v9 = 141558275;
      uint64_t v20 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      uint64_t v10 = Data.hexString.getter();
      uint64_t v20 = sub_1008FA0F0(v10, v11, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v3, v5);
      sub_10001CFB8(v3, v5);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Invalid serial number %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10001CFB8(v3, v5);
    }
    else
    {
      sub_10001CFB8(v3, v5);
      sub_10001CFB8(v3, v5);
      sub_10001CFB8(v3, v5);
    }
  }
  else
  {
    uint64_t v12 = Data.trimmed.getter();
    unint64_t v14 = v13;
    uint64_t v15 = type metadata accessor for MACAddress();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v2, 1, 1, v15);
    uint64_t v16 = sub_10000588C((uint64_t *)&unk_1016477E0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v2, 0, 1, v16);
    sub_1000361E0(v12, v14);
    sub_10015D3F8((uint64_t)v2, v12, v14);
    sub_10001CFB8(v3, v5);
    sub_10001CFB8(v12, v14);
  }
}

uint64_t sub_10005E0B8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005E0F0()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  unint64_t v7 = (v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  os_log_type_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v0 + v4, v1);
  v8(v0 + v6, v1);
  unint64_t v9 = *(void *)(v0 + v7 + 8);
  if (v9 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v0 + v7), v9);
  }

  return _swift_deallocObject(v0, v7 + 18, v3 | 7);
}

uint64_t sub_10005E20C(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = (v8 + v6 + v7) & ~v6;
  unint64_t v10 = (v8 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = v1 + v7;
  uint64_t v12 = v1 + v9;
  uint64_t v13 = *(void *)(v1 + v10);
  uint64_t v14 = *(void *)(v1 + v10 + 8);
  char v15 = *(unsigned char *)(v1 + v10 + 16);
  char v16 = *(unsigned char *)(v1 + v10 + 17);
  uint64_t v17 = swift_task_alloc();
  long long v18 = *(_OWORD *)(v1 + 16);
  *(void *)(v3 + 16) = v17;
  *(void *)uint64_t v17 = v3;
  *(void *)(v17 + 8) = sub_10001D2E4;
  *(unsigned char *)(v17 + 121) = v16;
  *(unsigned char *)(v17 + 120) = v15;
  *(void *)(v17 + 80) = v13;
  *(void *)(v17 + 88) = v14;
  *(void *)(v17 + 64) = v11;
  *(void *)(v17 + 72) = v12;
  *(_OWORD *)(v17 + 48) = v18;
  *(void *)(v17 + 40) = a1;
  return _swift_task_switch(sub_10003B60C, 0, 0);
}

unint64_t sub_10005E370()
{
  unint64_t result = qword_101639A60;
  if (!qword_101639A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639A60);
  }
  return result;
}

uint64_t sub_10005E3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_10005E474;
  return sub_100042FF0(a3, a4);
}

uint64_t sub_10005E474(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 32) = a1;
    return _swift_task_switch(sub_10005E5C0, 0, 0);
  }
}

uint64_t sub_10005E5C0()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005E5E4()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10005E6B8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100033F68;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101639A98 + dword_101639A98);
  return v9(a1, v5, v6, v7);
}

double sub_10005E7B8(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 256) = 0x3000000000000000;
  return result;
}

uint64_t sub_10005E7E8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10005E844(uint64_t a1, void (*a2)(void))
{
  long long v4 = *(_OWORD *)(a1 + 224);
  sub_10005E8C4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((uint64_t *)&v4 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    *(void *)(a1 + 256),
    a2);
  return a1;
}

uint64_t sub_10005E8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unint64_t a33,void (*a34)(void))
{
  unint64_t v40 = (uint64_t (*)(void))a34;
  switch((a33 >> 59) & 6 | ((a31 & 0x2000000000000000) != 0))
  {
    case 0uLL:
      unint64_t v42 = a34;
      a34();
      goto LABEL_7;
    case 1uLL:
      unint64_t v42 = a34;
      a34();
      ((void (*)(uint64_t, uint64_t))a34)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a34)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a34)(a7, a8);
      goto LABEL_7;
    case 2uLL:
      unint64_t v42 = a34;
      a34();
      ((void (*)(uint64_t, uint64_t))a34)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a34)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a34)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a34)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a34)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a34)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a34)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a34)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a34)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a34)(a21, a22);
      ((void (*)(uint64_t, uint64_t))a34)(a23, a24);
      ((void (*)(uint64_t, uint64_t))a34)(a25, a26);
      ((void (*)(uint64_t, uint64_t))a34)(a28, a29);
      ((void (*)(uint64_t, unint64_t))a34)(a30, a31 & 0xDFFFFFFFFFFFFFFFLL);
      goto LABEL_7;
    case 3uLL:
      unint64_t v42 = a34;
      a34();
      ((void (*)(uint64_t, uint64_t))a34)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a34)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a34)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a34)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a34)(a11, a12);
      goto LABEL_7;
    case 4uLL:
      unint64_t v42 = a34;
      a34();
      ((void (*)(uint64_t, uint64_t))a34)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a34)(a5, a6);
LABEL_7:
      unint64_t v40 = (uint64_t (*)(void))v42;
      goto LABEL_8;
    case 5uLL:
LABEL_8:
      uint64_t result = v40();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10005EC8C()
{
  unint64_t result = qword_101639AE0;
  if (!qword_101639AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639AE0);
  }
  return result;
}

uint64_t sub_10005ECE0(uint64_t a1)
{
  long long v3 = *(_OWORD *)(a1 + 224);
  sub_10005ED5C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    *(void *)(a1 + 256));
  return a1;
}

uint64_t sub_10005ED5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unint64_t a33)
{
  if ((~(a2 & a4 & a6 & a8 & a10 & a12 & a14 & a16 & a18 & a20 & a22 & a24 & a26) & 0x3000000000000000) != 0
    || (a27 & 0xFFFFFFFFFFFFFF00) != 16128
    || ((a31 | a29 | a33) & 0x3000000000000000) != 0)
  {
    return sub_10005E8C4(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             (void (*)(void))sub_10001CFB8);
  }
  return result;
}

double sub_10005EEC4(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_101347BC0;
  *(_OWORD *)(a1 + 16) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 32) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 48) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 64) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 80) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 96) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 112) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 128) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 144) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 160) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 176) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 192) = xmmword_101347BC0;
  *(void *)(a1 + 208) = 16128;
  double result = 0.0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  return result;
}

uint64_t sub_10005EF04(uint64_t a1)
{
  unsigned int v1 = (*(void *)(a1 + 256) >> 59) & 6 | ((*(void *)(a1 + 240) & 0x2000000000000000) != 0);
  if (v1 <= 5) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t sub_10005EF34(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100033F68;
  return sub_100046264(a1, v5, v4);
}

unint64_t sub_10005EFE0()
{
  unint64_t result = qword_101639B00;
  if (!qword_101639B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101639B00);
  }
  return result;
}

uint64_t sub_10005F03C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005F07C(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100033F68;
  return sub_100045B2C(a1, v5, v4);
}

uint64_t sub_10005F128()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10005F1FC()
{
  uint64_t v2 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10001D2E4;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[2] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100033F68;
  return sub_100045CC0(v3);
}

uint64_t sub_10005F31C(uint64_t a1)
{
  return sub_10005B1E0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10005F324(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10005F348()
{
  uint64_t v1 = sub_10000588C(&qword_1016575E0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10005F3E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10000588C(&qword_1016575E0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10005B490(a1, v4);
}

uint64_t sub_10005F488(uint64_t a1)
{
  sub_10005F4FC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216));
  return a1;
}

void sub_10005F4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unint64_t a28)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a7, a8);
    sub_10001CFB8(a9, a10);
    sub_10001CFB8(a11, a12);
    sub_10001CFB8(a13, a14);
    sub_10001CFB8(a15, a16);
    sub_10001CFB8(a17, a18);
    sub_10001CFB8(a19, a20);
    sub_10001CFB8(a21, a22);
    sub_10001CFB8(a23, a24);
    swift_bridgeObjectRelease();
    sub_100037A24(a27, a28);
  }
}

uint64_t type metadata accessor for AirPodsLEPairingService.BeaconCreationResult()
{
  uint64_t result = qword_101639D18;
  if (!qword_101639D18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005F6AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10005F710()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

_OWORD *sub_10005F748(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_10005F760()
{
  return sub_100054B80(v0 + 16);
}

uint64_t sub_10005F768()
{
  return _swift_deallocObject(v0, 17, 7);
}

unsigned char **sub_10005F778(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return sub_1008FA6E0(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_10005F780()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005F790()
{
  return sub_1008FA050(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10005F798()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005F7D0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_1008FA078(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_10005F7DC()
{
  long long v2 = *(_OWORD *)(v0 + 240);
  long long v3 = *(_OWORD *)(v0 + 256);
  sub_10005E8C4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160),
    *(void *)(v0 + 168),
    *(void *)(v0 + 176),
    *(void *)(v0 + 184),
    *(void *)(v0 + 192),
    *(void *)(v0 + 200),
    *(void *)(v0 + 208),
    *(void *)(v0 + 216),
    *(void *)(v0 + 224),
    *(void *)(v0 + 232),
    v2,
    *((uint64_t *)&v2 + 1),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(v0 + 272),
    (void (*)(void))sub_10001CFB8);

  return _swift_deallocObject(v0, 280, 7);
}

uint64_t sub_10005F870()
{
  return sub_10005A814(v0 + 16);
}

uint64_t sub_10005F88C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005F89C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005F8B0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005F8C0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005F8D4()
{
  return sub_100057FB8(v0 + 16);
}

uint64_t sub_10005F8F0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005F900()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005F910(uint64_t a1, uint64_t *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 24) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_10005F9C8;
  *(unsigned char *)(v5 + 32) = v4;
  *(void *)(v5 + 24) = v3;
  return _swift_task_switch(sub_10006279C, 0, 0);
}

uint64_t sub_10005F9C8(uint64_t a1)
{
  uint64_t v3 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();
  *uint64_t v3 = a1;
  char v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_10005FAD8()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  char v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v12 - v5;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v7 = sub_1010AAFA8(v12[1]);
  swift_bridgeObjectRelease();
  if ((unsigned __int128)(v7 * (__int128)60) >> 64 == (60 * v7) >> 63)
  {
    static Date.trustedNow.getter((uint64_t)v6);
    Date.timeIntervalSinceReferenceDate.getter();
    Date.init(timeIntervalSinceReferenceDate:)();
    Date.timeIntervalSince(_:)();
    static Duration.seconds(_:)();
    unint64_t v8 = Duration.milliseconds.getter();
    if ((v8 & 0x8000000000000000) == 0)
    {
      unint64_t v9 = v8;
      if (!HIDWORD(v8))
      {
        unint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
        v10(v4, v0);
        v10(v6, v0);
        return v9;
      }
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005FD50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      uint64_t v7 = *(v5 - 1);
      unint64_t v6 = *v5;
      sub_1000361E0(v7, *v5);
      char v8 = sub_100DC618C(v7, v6, a2);
      sub_10001CFB8(v7, v6);
      BOOL v10 = v4-- != 0;
      if ((v8 & 1) == 0) {
        break;
      }
      v5 += 2;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = 1;
  }
  return v8 & 1;
}

uint64_t sub_10005FE00()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_10005FE10(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t sub_10005FE1C()
{
  return sub_10012AEB0(*(void (**)(uint64_t *__return_ptr))(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10005FE24()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005FE34()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_10005FE44()
{
  unint64_t result = qword_101639B70;
  if (!qword_101639B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639B70);
  }
  return result;
}

uint64_t sub_10005FE98(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

uint64_t *sub_10005FEF0(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  return a1;
}

uint64_t sub_10005FF7C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005FF8C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005FF9C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005FFAC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005FFBC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005FFD0()
{
  return sub_10005848C(v0 + 16);
}

uint64_t sub_10005FFDC()
{
  return Data.hexString.getter();
}

uint64_t sub_10005FFE4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005FFF4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060004@<X0>(uint64_t *a1@<X8>)
{
  return sub_1002AAED8(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_10006000C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002AAE14(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_100060014()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060024()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060038()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060048()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060058()
{
  sub_100060090(*(void *)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_100060090(unint64_t result)
{
  if (!(result >> 62)) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1000600A0()
{
  return sub_10005A7C4(*(void *)(v0 + 16));
}

unint64_t sub_1000600A8(unint64_t result)
{
  if (!(result >> 62)) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_1000600B8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000600C8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000600D8()
{
  return sub_1008F9FF0(*(void (**)(void))(v0 + 16));
}

uint64_t sub_1000600E0()
{
  return sub_1008FA028(*(uint64_t (**)(void))(v0 + 16));
}

void sub_1000600E8(uint64_t *a1, void **a2, uint64_t a3)
{
  sub_1008FA6F0(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1000600F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006013C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a2 >> 60 != 15)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a5, a6);
    sub_100037A24(a7, a8);
    return sub_100037A24(a9, a10);
  }
  return result;
}

uint64_t sub_1000601E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for StandaloneBeacon() - 8);
  return sub_100061774(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
}

uint64_t sub_100060258()
{
  return sub_10012AEC8(*(uint64_t (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100060264()
{
  uint64_t v1 = (int *)(type metadata accessor for StandaloneBeacon() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v6 + v1[7];
  uint64_t v9 = type metadata accessor for MACAddress();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v6 + v1[8], v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = v6 + v1[10];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v6 + v1[11]), *(void *)(v6 + v1[11] + 8));
  uint64_t v13 = v6 + v1[12];
  sub_10001CFB8(*(void *)v13, *(void *)(v13 + 8));
  sub_10001CFB8(*(void *)(v13 + 16), *(void *)(v13 + 24));
  sub_10001CFB8(*(void *)(v13 + 32), *(void *)(v13 + 40));
  sub_10001CFB8(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100060444@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for StandaloneBeacon() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a1, v4, v5);
}

uint64_t sub_1000604E8()
{
  return sub_10012AB40(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000604F0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060500()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060510()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060520()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060530()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100060540@<X0>(void *a1@<X8>)
{
  return sub_100005D90(*(void *)(v1 + 16), a1);
}

uint64_t sub_100060548()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060558()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100060568()
{
  unint64_t result = qword_101649CE0;
  if (!qword_101649CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649CE0);
  }
  return result;
}

int8x16_t sub_1000605BC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = *(void *)(a1 + 40) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = *(void *)(a1 + 56) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = *(void *)(a1 + 72) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = *(void *)(a1 + 88) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = *(void *)(a1 + 104) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = *(void *)(a1 + 120) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = *(void *)(a1 + 136) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v9 = *(void *)(a1 + 152) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v10 = *(void *)(a1 + 168) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v11 = *(void *)(a1 + 184) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v12 = *(void *)(a1 + 224) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v13 = *(void *)(a1 + 240) & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  unint64_t v14 = *(void *)(a1 + 256) & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  *(void *)(a1 + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 104) = v6;
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 136) = v8;
  *(void *)(a1 + 152) = v9;
  *(void *)(a1 + 168) = v10;
  *(void *)(a1 + 184) = v11;
  int8x16_t result = vandq_s8(*(int8x16_t *)(a1 + 200), (int8x16_t)xmmword_101347BD0);
  *(int8x16_t *)(a1 + 200) = result;
  *(void *)(a1 + 224) = v12;
  *(void *)(a1 + 240) = v13;
  *(void *)(a1 + 256) = v14;
  return result;
}

uint64_t sub_100060690()
{
  uint64_t v1 = v0;
  unint64_t v2 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v20 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v5 = v0 + v4;
  sub_10001CFB8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v2[5];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v0 + v4 + v2[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v9(v10, v7);
      uint64_t v19 = v0;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      uint64_t v19 = v0;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v1 = v19;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v5 + v2[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7)) {
    v9(v11, v7);
  }
  uint64_t v12 = v5 + v2[8];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_10001CFB8(*(void *)(v5 + v2[9]), *(void *)(v5 + v2[9] + 8));
  unint64_t v14 = (uint64_t *)(v5 + v2[10]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_10001CFB8(*v14, v15);
  }
  char v16 = (uint64_t *)(v5 + v2[11]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  sub_10001CFB8(*(void *)(v5 + v2[12]), *(void *)(v5 + v2[12] + 8));
  sub_10001CFB8(*(void *)(v5 + v2[13]), *(void *)(v5 + v2[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, v4 + v20, v3 | 7);
}

uint64_t sub_100060A10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10005A748(v4, a1);
}

uint64_t sub_100060A80()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060A90()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060AA0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100060AB0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060AC0()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100060AD0()
{
  unint64_t result = qword_101639B98;
  if (!qword_101639B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101639B98);
  }
  return result;
}

uint64_t sub_100060B28()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060B38()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060B4C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060B5C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060B70()
{
  return Data.hexString.getter();
}

uint64_t sub_100060B78()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060B88()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060B9C()
{
  return Data.hexString.getter();
}

uint64_t sub_100060BA4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060BB4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060BC8()
{
  return Data.hexString.getter();
}

uint64_t sub_100060BD0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060BE0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060BF4()
{
  return Data.hexString.getter();
}

uint64_t sub_100060BFC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060C0C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060C20()
{
  return sub_100054C10(v0 + 16);
}

uint64_t sub_100060C2C()
{
  return Data.hexString.getter();
}

uint64_t sub_100060C34()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060C44()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060C54()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060C64()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060C78()
{
  return sub_100054CCC(v0 + 16);
}

uint64_t sub_100060C84()
{
  return Data.hexString.getter();
}

uint64_t sub_100060C8C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060C9C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060CAC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060CBC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060CD0()
{
  return *(unsigned __int8 *)(v0 + 224);
}

uint64_t sub_100060CD8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060CE8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060CF8@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000D07C4(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_100060D00(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002AAE18(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

uint64_t sub_100060D0C()
{
  return Data.hexString.getter();
}

uint64_t sub_100060D14()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060D24()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060D38()
{
  return Data.hexString.getter();
}

uint64_t sub_100060D40()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060D50()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060D64()
{
  return Data.hexString.getter();
}

uint64_t sub_100060D6C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060D7C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060D90()
{
  return Data.hexString.getter();
}

uint64_t sub_100060D98()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060DA8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060DB8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100060DF0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100060E20()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060E30()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060E40()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100060E78()
{
  return sub_100055368();
}

uint64_t sub_100060E80()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100060E90()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t *sub_100060EA0(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  uint64_t v11 = a1[9];
  uint64_t v13 = a1[11];
  uint64_t v14 = a1[10];
  uint64_t v15 = a1[13];
  uint64_t v16 = a1[12];
  uint64_t v17 = a1[15];
  uint64_t v18 = a1[14];
  uint64_t v19 = a1[17];
  uint64_t v20 = a1[16];
  uint64_t v21 = a1[19];
  uint64_t v22 = a1[18];
  uint64_t v23 = a1[21];
  uint64_t v24 = a1[20];
  uint64_t v25 = a1[23];
  uint64_t v26 = a1[22];
  uint64_t v27 = a1[25];
  uint64_t v28 = a1[24];
  uint64_t v30 = a1[27];
  uint64_t v29 = a1[28];
  uint64_t v31 = a1[30];
  uint64_t v32 = a1[29];
  uint64_t v33 = a1[32];
  uint64_t v34 = a1[31];
  a2(*a1, a1[1]);
  a2(v4, v6);
  a2(v5, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  a2(v20, v19);
  a2(v22, v21);
  a2(v24, v23);
  a2(v26, v25);
  a2(v28, v27);
  a2(v30, v29);
  a2(v32, v31);
  a2(v34, v33);
  return a1;
}

uint64_t sub_10006105C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000610B8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100061114()
{
  uint64_t v1 = (id *)(v0 + 16);
  switch(*(unsigned char *)(v0 + 56))
  {
    case 0:
    case 7:
    case 0xA:
      goto LABEL_7;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
      break;
    case 2:

      goto LABEL_7;
    case 3:

      break;
    case 4:
    case 5:
    case 6:
      swift_release();
      break;
    case 8:
      swift_release();
LABEL_7:
      swift_errorRelease();
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return _swift_deallocObject(v0, 57, 7);
}

uint64_t sub_1000611F0()
{
  return sub_101321420();
}

uint64_t sub_100061214()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100061224()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100061234()
{
  unint64_t result = qword_101649BA0;
  if (!qword_101649BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649BA0);
  }
  return result;
}

uint64_t sub_100061288(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000612DC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100061314()
{
  return sub_10012AE34(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_10006131C()
{
  return sub_10012AE40(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_100061324()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100061334()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100061344()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100061354()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100061368()
{
  return sub_100054BBC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100061374()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100061384()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100061398()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000613A8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000613BC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000613CC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000613DC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_errorRetain();
  return v1;
}

uint64_t sub_100061408()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100061418()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100061428@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100061434()
{
  return sub_10012ADB4(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_10006143C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10006144C()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_10006145C()
{
  unint64_t result = qword_101649CD0;
  if (!qword_101649CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649CD0);
  }
  return result;
}

int8x16_t sub_1000614B0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = *(void *)(a1 + 40) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = *(void *)(a1 + 56) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = *(void *)(a1 + 72) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = *(void *)(a1 + 88) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = *(void *)(a1 + 104) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = *(void *)(a1 + 120) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = *(void *)(a1 + 136) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v9 = *(void *)(a1 + 152) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v10 = *(void *)(a1 + 168) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v11 = *(void *)(a1 + 184) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v12 = *(void *)(a1 + 224) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v13 = *(void *)(a1 + 256) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v14 = *(void *)(a1 + 240) & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  *(void *)(a1 + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 104) = v6;
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 136) = v8;
  *(void *)(a1 + 152) = v9;
  *(void *)(a1 + 168) = v10;
  *(void *)(a1 + 184) = v11;
  int8x16_t result = vandq_s8(*(int8x16_t *)(a1 + 200), (int8x16_t)xmmword_101347BD0);
  *(int8x16_t *)(a1 + 200) = result;
  *(void *)(a1 + 224) = v12;
  *(void *)(a1 + 240) = v14;
  *(void *)(a1 + 256) = v13;
  return result;
}

uint64_t *sub_100061580(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  uint64_t v11 = a1[9];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  return a1;
}

unint64_t sub_100061628()
{
  unint64_t result = qword_101639BA8;
  if (!qword_101639BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639BA8);
  }
  return result;
}

uint64_t sub_100061684(uint64_t a1)
{
  return sub_100129E6C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100061690(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000616F4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 168);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_10006170C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100061774(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000617DC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10006183C(uint64_t a1)
{
  unsigned int v1 = (*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 3 | *(unsigned char *)(a1 + 47) & 0x30 | (*(void *)(a1 + 56) >> 54) & 0xC0 | (*(void *)(a1 + 72) >> 52) & 0x300 | (*(void *)(a1 + 88) >> 50) & 0xC00 | *(_WORD *)(a1 + 110) & 0x3000 | (*(void *)(a1 + 120) >> 46) & 0xC000 | (*(void *)(a1 + 136) >> 44) & 0x30000 | (*(void *)(a1 + 152) >> 42) & 0xC0000 | (*(void *)(a1 + 168) >> 40) & 0x300000 | (*(void *)(a1 + 184) >> 38) & 0xC00000 | (*(void *)(a1 + 200) >> 36) & 0x3000000 | (*(_DWORD *)(a1 + 208) >> 8 << 26);
  if (v1 > 0x80000000) {
    return -v1;
  }
  else {
    return 0;
  }
}

uint64_t sub_100061918(uint64_t a1)
{
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v8 = *(_OWORD *)(a1 + 304);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 224);
  long long v4 = *(_OWORD *)(a1 + 240);
  sub_1000619A4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((unint64_t *)&v3 + 1),
    v4,
    *((unint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    v7,
    *((unint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    *(void *)(a1 + 320),
    *(void *)(a1 + 328));
  return a1;
}

uint64_t sub_1000619A4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,unint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,unint64_t a36,uint64_t a37,unint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,unint64_t a42)
{
  if (a22)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    sub_100037A24(a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a14, a15);
    sub_10001CFB8(a16, a17);
    sub_10001CFB8(a18, a19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a25, a26);
    sub_10001CFB8(a27, a28);
    sub_10001CFB8(a29, a30);
    sub_10001CFB8(a31, a32);
    sub_10001CFB8(a33, a34);
    sub_10001CFB8(a35, a36);
    sub_10001CFB8(a37, a38);
    swift_bridgeObjectRelease();
    return sub_100037A24(a41, a42);
  }
  return result;
}

unint64_t sub_100061B8C()
{
  unint64_t result = qword_101639BF0;
  if (!qword_101639BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639BF0);
  }
  return result;
}

uint64_t sub_100061BE4()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100061CB0@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for MACAddress();

  return sub_100E61E8C(a1);
}

unint64_t sub_100061D24()
{
  unint64_t result = qword_101639BF8;
  if (!qword_101639BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639BF8);
  }
  return result;
}

int8x16_t sub_100061D78(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = *(void *)(a1 + 40) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = *(void *)(a1 + 56) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = *(void *)(a1 + 72) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = *(void *)(a1 + 88) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = *(void *)(a1 + 104) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = *(void *)(a1 + 120) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = *(void *)(a1 + 136) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v9 = *(void *)(a1 + 152) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v10 = *(void *)(a1 + 168) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v11 = *(void *)(a1 + 184) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v12 = *(void *)(a1 + 224) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v13 = *(void *)(a1 + 240) & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  unint64_t v14 = *(void *)(a1 + 256) & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  *(void *)(a1 + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 104) = v6;
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 136) = v8;
  *(void *)(a1 + 152) = v9;
  *(void *)(a1 + 168) = v10;
  *(void *)(a1 + 184) = v11;
  int8x16_t result = vandq_s8(*(int8x16_t *)(a1 + 200), (int8x16_t)xmmword_101347BD0);
  *(int8x16_t *)(a1 + 200) = result;
  *(void *)(a1 + 224) = v12;
  *(void *)(a1 + 240) = v13;
  *(void *)(a1 + 256) = v14;
  return result;
}

uint64_t sub_100061E4C(uint64_t a1)
{
  return sub_10005AE80(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_100061E54(uint64_t a1)
{
  return a1;
}

uint64_t sub_100061E84()
{
  uint64_t v1 = sub_10000588C(&qword_101639C00);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100061F54(uint64_t a1)
{
  sub_10000588C(&qword_101639C00);
  uint64_t v3 = *(void *)(v1 + 16);

  return sub_10005AFE8(a1, v3);
}

unint64_t sub_100061FCC()
{
  unint64_t result = qword_101639C08;
  if (!qword_101639C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639C08);
  }
  return result;
}

unint64_t sub_100062020()
{
  unint64_t result = qword_101639C10;
  if (!qword_101639C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639C10);
  }
  return result;
}

uint64_t sub_100062074(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000620BC(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_100062118()
{
  unint64_t result = qword_101639C20;
  if (!qword_101639C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639C20);
  }
  return result;
}

unint64_t sub_10006216C()
{
  unint64_t result = qword_101639C28;
  if (!qword_101639C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639C28);
  }
  return result;
}

unint64_t sub_1000621C0()
{
  unint64_t result = qword_101639C30;
  if (!qword_101639C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639C30);
  }
  return result;
}

uint64_t sub_100062218()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));

  return _swift_deallocObject(v0, 80, 7);
}

unint64_t sub_100062268()
{
  unint64_t result = qword_101639C38;
  if (!qword_101639C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639C38);
  }
  return result;
}

uint64_t sub_1000622BC()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));
  sub_10001CFB8(*(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10001CFB8(*(void *)(v0 + 112), *(void *)(v0 + 120));

  return _swift_deallocObject(v0, 128, 7);
}

unint64_t sub_100062324()
{
  unint64_t result = qword_101639C40;
  if (!qword_101639C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639C40);
  }
  return result;
}

uint64_t sub_10006237C()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));
  sub_10001CFB8(*(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10001CFB8(*(void *)(v0 + 112), *(void *)(v0 + 120));
  sub_10001CFB8(*(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10001CFB8(*(void *)(v0 + 144), *(void *)(v0 + 152));
  sub_10001CFB8(*(void *)(v0 + 160), *(void *)(v0 + 168));
  sub_10001CFB8(*(void *)(v0 + 176), *(void *)(v0 + 184));
  sub_10001CFB8(*(void *)(v0 + 192), *(void *)(v0 + 200));
  sub_10001CFB8(*(void *)(v0 + 208), *(void *)(v0 + 216));
  sub_10001CFB8(*(void *)(v0 + 232), *(void *)(v0 + 240));
  sub_10001CFB8(*(void *)(v0 + 248), *(void *)(v0 + 256));
  sub_10001CFB8(*(void *)(v0 + 264), *(void *)(v0 + 272));

  return _swift_deallocObject(v0, 280, 7);
}

uint64_t sub_10006242C(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 256) & 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 240) &= ~0x2000000000000000uLL;
  *(void *)(result + 256) = v1;
  return result;
}

unint64_t sub_100062448()
{
  unint64_t result = qword_101639C48;
  if (!qword_101639C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639C48);
  }
  return result;
}

uint64_t sub_10006249C()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));

  return _swift_deallocObject(v0, 96, 7);
}

unint64_t sub_1000624F4()
{
  unint64_t result = qword_101639C50;
  if (!qword_101639C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639C50);
  }
  return result;
}

uint64_t sub_10006254C()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_10006258C()
{
  unint64_t result = qword_101639C58;
  if (!qword_101639C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639C58);
  }
  return result;
}

uint64_t sub_1000625E0(uint64_t a1)
{
  return sub_1011499E4(a1, *(unsigned char *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100062604(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000588C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100062668()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100062678(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t *))((char *)&dword_101639C88 + dword_101639C88);
  return v6(a1, a2);
}

uint64_t sub_100062734(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100062778(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 32) = a2;
  *(void *)(v2 + 24) = a1;
  return _swift_task_switch(sub_10006279C, 0, 0);
}

uint64_t sub_10006279C()
{
  uint64_t v14 = v0;
  if (*(unsigned char *)(v0 + 32))
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + 24);
    uint64_t v2 = qword_101636840;
    swift_retain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_1016397F0);
    swift_retain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      uint64_t v13 = v7;
      *(void *)(v0 + 16) = v1;
      type metadata accessor for Peripheral();
      sub_100062074(&qword_101639B30, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral);
      uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 16) = sub_1008FA0F0(v8, v9, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Discovered peripheral: %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v10 = *(void *)(v0 + 24);
  }
  unint64_t v11 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v11(v10);
}

unint64_t sub_1000629E8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v41 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v41 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for StandaloneBeacon();
      uint64_t v8 = v7[5];
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      uint64_t v11 = type metadata accessor for MACAddress();
      unint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
      v12(v9, v10, v11);
      v12(a1 + v7[6], a2 + v7[6], v11);
      uint64_t v13 = v7[7];
      uint64_t v14 = (void *)(a1 + v13);
      uint64_t v15 = (void *)(a2 + v13);
      uint64_t v16 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v16;
      uint64_t v17 = v7[8];
      uint64_t v18 = a1 + v17;
      uint64_t v19 = a2 + v17;
      uint64_t v20 = type metadata accessor for Date();
      uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16);
      swift_bridgeObjectRetain();
      v21(v18, v19, v20);
      uint64_t v22 = v7[9];
      uint64_t v23 = (uint64_t *)(a1 + v22);
      uint64_t v24 = (uint64_t *)(a2 + v22);
      uint64_t v25 = *v24;
      unint64_t v26 = v24[1];
      sub_1000361E0(*v24, v26);
      *uint64_t v23 = v25;
      v23[1] = v26;
      uint64_t v27 = v7[10];
      uint64_t v28 = (uint64_t *)(a1 + v27);
      uint64_t v29 = (void *)(a2 + v27);
      uint64_t v30 = *(void *)(a2 + v27);
      unint64_t v31 = *(void *)(a2 + v27 + 8);
      sub_1000361E0(v30, v31);
      *uint64_t v28 = v30;
      v28[1] = v31;
      uint64_t v32 = v29[2];
      unint64_t v33 = v29[3];
      sub_1000361E0(v32, v33);
      v28[2] = v32;
      v28[3] = v33;
      uint64_t v34 = v29[4];
      unint64_t v35 = v29[5];
      sub_1000361E0(v34, v35);
      v28[4] = v34;
      v28[5] = v35;
      uint64_t v36 = v7[11];
      uint64_t v37 = (uint64_t *)(a1 + v36);
      uint64_t v38 = (uint64_t *)(a2 + v36);
      uint64_t v39 = *v38;
      unint64_t v40 = v38[1];
      sub_1000361E0(*v38, v40);
      *uint64_t v37 = v39;
      v37[1] = v40;
    }
    else
    {
      uint64_t v42 = *(void *)a2;
      unint64_t v43 = *(void *)(a2 + 8);
      sub_1000361E0(*(void *)a2, v43);
      *(void *)a1 = v42;
      *(void *)(a1 + 8) = v43;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      unint64_t v44 = (int *)type metadata accessor for OwnedBeaconGroup(0);
      uint64_t v45 = v44[6];
      uint64_t v46 = a1 + v45;
      uint64_t v47 = a2 + v45;
      uint64_t v48 = type metadata accessor for UUID();
      uint64_t v146 = *(void *)(v48 - 8);
      uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 16);
      v49(v46, v47, v48);
      uint64_t v50 = v44[7];
      uint64_t v51 = a1 + v50;
      uint64_t v52 = a2 + v50;
      uint64_t v53 = type metadata accessor for MACAddress();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
      *(unsigned char *)(a1 + v44[8]) = *(unsigned char *)(a2 + v44[8]);
      uint64_t v54 = v44[9];
      uint64_t v55 = (void *)(a1 + v54);
      uint64_t v56 = (void *)(a2 + v54);
      uint64_t v57 = v56[1];
      *uint64_t v55 = *v56;
      v55[1] = v57;
      *(void *)(a1 + v44[10]) = *(void *)(a2 + v44[10]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v58 = *(int *)(sub_10000588C(&qword_101639B90) + 48);
      long long v59 = (uint64_t *)(a1 + v58);
      uint64_t v60 = a2 + v58;
      uint64_t v61 = *(void *)(a2 + v58);
      unint64_t v62 = *(void *)(v60 + 8);
      sub_1000361E0(v61, v62);
      *long long v59 = v61;
      v59[1] = v62;
      uint64_t v63 = (int *)type metadata accessor for OwnedBeaconRecord();
      v49((uint64_t)v59 + v63[5], v60 + v63[5], v48);
      uint64_t v64 = v63[6];
      uint64_t v65 = (uint64_t *)((char *)v59 + v64);
      unint64_t v66 = (void *)(v60 + v64);
      type metadata accessor for StableIdentifier();
      unint64_t v145 = (void (*)(char *, const void *, uint64_t))v49;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v68 = v66[1];
          *uint64_t v65 = *v66;
          v65[1] = v68;
          uint64_t v69 = v66[3];
          uint64_t v65[2] = v66[2];
          v65[3] = v69;
          uint64_t v70 = v66[5];
          v65[4] = v66[4];
          v65[5] = v70;
          goto LABEL_10;
        case 2u:
          v49((uint64_t)v65, (uint64_t)v66, v48);
          long long v71 = (int *)sub_10000588C(&qword_1016555E0);
          uint64_t v72 = v71[12];
          long long v73 = (void *)((char *)v65 + v72);
          uint64_t v74 = (void *)((char *)v66 + v72);
          uint64_t v76 = *v74;
          uint64_t v75 = v74[1];
          void *v73 = v76;
          v73[1] = v75;
          uint64_t v77 = v71[16];
          unint64_t v78 = (void *)((char *)v65 + v77);
          long long v79 = (void *)((char *)v66 + v77);
          uint64_t v143 = v79[1];
          *unint64_t v78 = *v79;
          v78[1] = v143;
          uint64_t v80 = v71[20];
          uint64_t v81 = (void *)((char *)v65 + v80);
          uint64_t v82 = (void *)((char *)v66 + v80);
          uint64_t v142 = v82[1];
          *uint64_t v81 = *v82;
          v81[1] = v142;
          *(_WORD *)((char *)v65 + v71[24]) = *(_WORD *)((char *)v66 + v71[24]);
          uint64_t v83 = v71[28];
          uint64_t v84 = (void *)((char *)v65 + v83);
          uint64_t v85 = (void *)((char *)v66 + v83);
          uint64_t v86 = v85[1];
          *uint64_t v84 = *v85;
          v84[1] = v86;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_11;
        case 3u:
          v49((uint64_t)v65, (uint64_t)v66, v48);
          uint64_t v87 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
          uint64_t v88 = v87[12];
          uint64_t v89 = (void *)((char *)v65 + v88);
          uint64_t v90 = (void *)((char *)v66 + v88);
          uint64_t v92 = *v90;
          uint64_t v91 = v90[1];
          *uint64_t v89 = v92;
          v89[1] = v91;
          uint64_t v93 = v87[16];
          uint64_t v94 = (void *)((char *)v65 + v93);
          int64_t v95 = (void *)((char *)v66 + v93);
          uint64_t v144 = v95[1];
          void *v94 = *v95;
          v94[1] = v144;
          uint64_t v96 = v87[20];
          uint64_t v97 = (void *)((char *)v65 + v96);
          uint64_t v98 = (void *)((char *)v66 + v96);
          uint64_t v99 = v98[1];
          void *v97 = *v98;
          v97[1] = v99;
          *((unsigned char *)v65 + v87[24]) = *((unsigned char *)v66 + v87[24]);
LABEL_10:
          swift_bridgeObjectRetain();
LABEL_11:
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v67 = v66[1];
          *uint64_t v65 = *v66;
          v65[1] = v67;
          break;
      }
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      uint64_t v100 = v63[7];
      uint64_t v101 = (char *)v59 + v100;
      uint64_t v102 = (const void *)(v60 + v100);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48))(v60 + v100, 1, v48))
      {
        uint64_t v103 = sub_10000588C(&qword_101638CF0);
        memcpy(v101, v102, *(void *)(*(void *)(v103 - 8) + 64));
      }
      else
      {
        v145(v101, v102, v48);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v146 + 56))(v101, 0, 1, v48);
      }
      uint64_t v104 = v63[8];
      uint64_t v105 = (char *)v59 + v104;
      uint64_t v106 = v60 + v104;
      uint64_t v107 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v107 - 8) + 16))(v105, v106, v107);
      uint64_t v108 = v63[9];
      os_log_type_t v109 = (uint64_t *)((char *)v59 + v108);
      uint64_t v110 = (uint64_t *)(v60 + v108);
      uint64_t v111 = *v110;
      unint64_t v112 = v110[1];
      sub_1000361E0(*v110, v112);
      *os_log_type_t v109 = v111;
      v109[1] = v112;
      uint64_t v113 = v63[10];
      os_log_type_t v114 = (char *)v59 + v113;
      v115 = (uint64_t *)(v60 + v113);
      unint64_t v116 = v115[1];
      if (v116 >> 60 == 15)
      {
        *(_OWORD *)os_log_type_t v114 = *(_OWORD *)v115;
      }
      else
      {
        uint64_t v117 = *v115;
        sub_1000361E0(*v115, v115[1]);
        *(void *)os_log_type_t v114 = v117;
        *((void *)v114 + 1) = v116;
      }
      uint64_t v118 = v63[11];
      uint64_t v119 = (char *)v59 + v118;
      uint64_t v120 = (uint64_t *)(v60 + v118);
      unint64_t v121 = v120[1];
      if (v121 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v119 = *(_OWORD *)v120;
      }
      else
      {
        uint64_t v122 = *v120;
        sub_1000361E0(*v120, v120[1]);
        *(void *)uint64_t v119 = v122;
        *((void *)v119 + 1) = v121;
      }
      uint64_t v123 = v63[12];
      uint64_t v124 = (uint64_t *)((char *)v59 + v123);
      uint64_t v125 = (uint64_t *)(v60 + v123);
      uint64_t v126 = *v125;
      unint64_t v127 = v125[1];
      sub_1000361E0(*v125, v127);
      *uint64_t v124 = v126;
      v124[1] = v127;
      uint64_t v128 = v63[13];
      uint64_t v129 = (uint64_t *)((char *)v59 + v128);
      uint64_t v130 = (uint64_t *)(v60 + v128);
      uint64_t v131 = *v130;
      unint64_t v132 = v130[1];
      sub_1000361E0(*v130, v132);
      *uint64_t v129 = v131;
      v129[1] = v132;
      uint64_t v133 = v63[14];
      uint64_t v134 = (uint64_t *)((char *)v59 + v133);
      uint64_t v135 = (void *)(v60 + v133);
      uint64_t v136 = v135[1];
      *uint64_t v134 = *v135;
      v134[1] = v136;
      uint64_t v137 = v63[15];
      v138 = (uint64_t *)((char *)v59 + v137);
      uint64_t v139 = (void *)(v60 + v137);
      uint64_t v140 = v139[1];
      void *v138 = *v139;
      v138[1] = v140;
      *(uint64_t *)((char *)v59 + v63[16]) = *(void *)(v60 + v63[16]);
      *(uint64_t *)((char *)v59 + v63[17]) = *(void *)(v60 + v63[17]);
      *((unsigned char *)v59 + v63[18]) = *(unsigned char *)(v60 + v63[18]);
      *((unsigned char *)v59 + v63[19]) = *(unsigned char *)(v60 + v63[19]);
      *((unsigned char *)v59 + v63[20]) = *(unsigned char *)(v60 + v63[20]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000631C4(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
    uint64_t v3 = (int *)type metadata accessor for StandaloneBeacon();
    uint64_t v4 = a1 + v3[5];
    uint64_t v5 = type metadata accessor for MACAddress();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    v6(v4, v5);
    v6(a1 + v3[6], v5);
    swift_bridgeObjectRelease();
    uint64_t v7 = a1 + v3[8];
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    sub_10001CFB8(*(void *)(a1 + v3[9]), *(void *)(a1 + v3[9] + 8));
    uint64_t v9 = a1 + v3[10];
    sub_10001CFB8(*(void *)v9, *(void *)(v9 + 8));
    sub_10001CFB8(*(void *)(v9 + 16), *(void *)(v9 + 24));
    sub_10001CFB8(*(void *)(v9 + 32), *(void *)(v9 + 40));
    uint64_t v10 = (uint64_t *)(a1 + v3[11]);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    return sub_10001CFB8(v11, v12);
  }
  else
  {
    sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
    uint64_t v14 = type metadata accessor for OwnedBeaconGroup(0);
    uint64_t v15 = a1 + *(int *)(v14 + 24);
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v18(v15, v16);
    uint64_t v19 = a1 + *(int *)(v14 + 28);
    uint64_t v20 = type metadata accessor for MACAddress();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v21 = a1 + *(int *)(sub_10000588C(&qword_101639B90) + 48);
    sub_10001CFB8(*(void *)v21, *(void *)(v21 + 8));
    uint64_t v22 = (int *)type metadata accessor for OwnedBeaconRecord();
    v18(v21 + v22[5], v16);
    uint64_t v23 = v21 + v22[6];
    type metadata accessor for StableIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 4u:
        goto LABEL_9;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 2u:
        v18(v23, v16);
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 3u:
        v18(v23, v16);
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v24 = v21 + v22[7];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v24, 1, v16)) {
      v18(v24, v16);
    }
    uint64_t v25 = v21 + v22[8];
    uint64_t v26 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
    sub_10001CFB8(*(void *)(v21 + v22[9]), *(void *)(v21 + v22[9] + 8));
    uint64_t v27 = (uint64_t *)(v21 + v22[10]);
    unint64_t v28 = v27[1];
    if (v28 >> 60 != 15) {
      sub_10001CFB8(*v27, v28);
    }
    uint64_t v29 = (uint64_t *)(v21 + v22[11]);
    unint64_t v30 = v29[1];
    if (v30 >> 60 != 15) {
      sub_10001CFB8(*v29, v30);
    }
    sub_10001CFB8(*(void *)(v21 + v22[12]), *(void *)(v21 + v22[12] + 8));
    sub_10001CFB8(*(void *)(v21 + v22[13]), *(void *)(v21 + v22[13] + 8));
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000636B0(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    uint64_t v5 = (int *)type metadata accessor for StandaloneBeacon();
    uint64_t v6 = v5[5];
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    uint64_t v9 = type metadata accessor for MACAddress();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    v10(v7, v8, v9);
    v10(a1 + v5[6], a2 + v5[6], v9);
    uint64_t v11 = v5[7];
    unint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (void *)(a2 + v11);
    uint64_t v14 = v13[1];
    *unint64_t v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = v5[8];
    uint64_t v16 = a1 + v15;
    uint64_t v17 = a2 + v15;
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
    swift_bridgeObjectRetain();
    v19(v16, v17, v18);
    uint64_t v20 = v5[9];
    uint64_t v21 = (uint64_t *)(a1 + v20);
    uint64_t v22 = (uint64_t *)(a2 + v20);
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    sub_1000361E0(*v22, v24);
    *uint64_t v21 = v23;
    v21[1] = v24;
    uint64_t v25 = v5[10];
    uint64_t v26 = (uint64_t *)(a1 + v25);
    uint64_t v27 = (void *)(a2 + v25);
    uint64_t v28 = *(void *)(a2 + v25);
    unint64_t v29 = *(void *)(a2 + v25 + 8);
    sub_1000361E0(v28, v29);
    uint64_t *v26 = v28;
    v26[1] = v29;
    uint64_t v30 = v27[2];
    unint64_t v31 = v27[3];
    sub_1000361E0(v30, v31);
    v26[2] = v30;
    v26[3] = v31;
    uint64_t v32 = v27[4];
    unint64_t v33 = v27[5];
    sub_1000361E0(v32, v33);
    v26[4] = v32;
    v26[5] = v33;
    uint64_t v34 = v5[11];
    unint64_t v35 = (uint64_t *)(a1 + v34);
    uint64_t v36 = (uint64_t *)(a2 + v34);
    uint64_t v37 = *v36;
    unint64_t v38 = v36[1];
    sub_1000361E0(*v36, v38);
    *unint64_t v35 = v37;
    v35[1] = v38;
  }
  else
  {
    uint64_t v39 = *(void *)a2;
    unint64_t v40 = *(void *)(a2 + 8);
    sub_1000361E0(*(void *)a2, v40);
    *(void *)a1 = v39;
    *(void *)(a1 + 8) = v40;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v41 = (int *)type metadata accessor for OwnedBeaconGroup(0);
    uint64_t v42 = v41[6];
    uint64_t v43 = a1 + v42;
    uint64_t v44 = a2 + v42;
    uint64_t v45 = type metadata accessor for UUID();
    uint64_t v143 = *(void *)(v45 - 8);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v143 + 16);
    v46(v43, v44, v45);
    uint64_t v47 = v41[7];
    uint64_t v48 = a1 + v47;
    uint64_t v49 = a2 + v47;
    uint64_t v50 = type metadata accessor for MACAddress();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
    *(unsigned char *)(a1 + v41[8]) = *(unsigned char *)(a2 + v41[8]);
    uint64_t v51 = v41[9];
    uint64_t v52 = (void *)(a1 + v51);
    uint64_t v53 = (void *)(a2 + v51);
    uint64_t v54 = v53[1];
    *uint64_t v52 = *v53;
    v52[1] = v54;
    *(void *)(a1 + v41[10]) = *(void *)(a2 + v41[10]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v55 = *(int *)(sub_10000588C(&qword_101639B90) + 48);
    uint64_t v56 = (uint64_t *)(a1 + v55);
    uint64_t v57 = a2 + v55;
    uint64_t v58 = *(void *)(a2 + v55);
    unint64_t v59 = *(void *)(v57 + 8);
    sub_1000361E0(v58, v59);
    *uint64_t v56 = v58;
    v56[1] = v59;
    uint64_t v60 = (int *)type metadata accessor for OwnedBeaconRecord();
    v46((uint64_t)v56 + v60[5], v57 + v60[5], v45);
    uint64_t v61 = v60[6];
    unint64_t v62 = (uint64_t *)((char *)v56 + v61);
    uint64_t v63 = (void *)(v57 + v61);
    type metadata accessor for StableIdentifier();
    uint64_t v142 = (void (*)(char *, const void *, uint64_t))v46;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v65 = v63[1];
        *unint64_t v62 = *v63;
        v62[1] = v65;
        uint64_t v66 = v63[3];
        v62[2] = v63[2];
        v62[3] = v66;
        uint64_t v67 = v63[5];
        v62[4] = v63[4];
        v62[5] = v67;
        goto LABEL_8;
      case 2u:
        v46((uint64_t)v62, (uint64_t)v63, v45);
        uint64_t v68 = (int *)sub_10000588C(&qword_1016555E0);
        uint64_t v69 = v68[12];
        uint64_t v70 = (void *)((char *)v62 + v69);
        long long v71 = (void *)((char *)v63 + v69);
        uint64_t v73 = *v71;
        uint64_t v72 = v71[1];
        *uint64_t v70 = v73;
        v70[1] = v72;
        uint64_t v74 = v68[16];
        uint64_t v75 = (void *)((char *)v62 + v74);
        uint64_t v76 = (void *)((char *)v63 + v74);
        uint64_t v141 = v76[1];
        *uint64_t v75 = *v76;
        v75[1] = v141;
        uint64_t v77 = v68[20];
        unint64_t v78 = (void *)((char *)v62 + v77);
        long long v79 = (void *)((char *)v63 + v77);
        uint64_t v80 = v79[1];
        *unint64_t v78 = *v79;
        v78[1] = v80;
        *(_WORD *)((char *)v62 + v68[24]) = *(_WORD *)((char *)v63 + v68[24]);
        uint64_t v81 = v68[28];
        uint64_t v82 = (void *)((char *)v62 + v81);
        uint64_t v83 = (void *)((char *)v63 + v81);
        uint64_t v84 = v83[1];
        *uint64_t v82 = *v83;
        v82[1] = v84;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 3u:
        v46((uint64_t)v62, (uint64_t)v63, v45);
        uint64_t v85 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        uint64_t v86 = v85[12];
        uint64_t v87 = (void *)((char *)v62 + v86);
        uint64_t v88 = (void *)((char *)v63 + v86);
        uint64_t v90 = *v88;
        uint64_t v89 = v88[1];
        *uint64_t v87 = v90;
        v87[1] = v89;
        uint64_t v91 = v85[16];
        uint64_t v92 = (void *)((char *)v62 + v91);
        uint64_t v93 = (void *)((char *)v63 + v91);
        uint64_t v94 = v93[1];
        *uint64_t v92 = *v93;
        v92[1] = v94;
        uint64_t v95 = v85[20];
        uint64_t v96 = (void *)((char *)v62 + v95);
        uint64_t v97 = (void *)((char *)v63 + v95);
        uint64_t v98 = v97[1];
        void *v96 = *v97;
        v96[1] = v98;
        *((unsigned char *)v62 + v85[24]) = *((unsigned char *)v63 + v85[24]);
LABEL_8:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v64 = v63[1];
        *unint64_t v62 = *v63;
        v62[1] = v64;
        break;
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    uint64_t v99 = v60[7];
    uint64_t v100 = (char *)v56 + v99;
    uint64_t v101 = (const void *)(v57 + v99);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v143 + 48))(v57 + v99, 1, v45))
    {
      uint64_t v102 = sub_10000588C(&qword_101638CF0);
      memcpy(v100, v101, *(void *)(*(void *)(v102 - 8) + 64));
    }
    else
    {
      v142(v100, v101, v45);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v100, 0, 1, v45);
    }
    uint64_t v103 = v60[8];
    uint64_t v104 = (char *)v56 + v103;
    uint64_t v105 = v57 + v103;
    uint64_t v106 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v106 - 8) + 16))(v104, v105, v106);
    uint64_t v107 = v60[9];
    uint64_t v108 = (uint64_t *)((char *)v56 + v107);
    os_log_type_t v109 = (uint64_t *)(v57 + v107);
    uint64_t v110 = *v109;
    unint64_t v111 = v109[1];
    sub_1000361E0(*v109, v111);
    uint64_t *v108 = v110;
    v108[1] = v111;
    uint64_t v112 = v60[10];
    uint64_t v113 = (char *)v56 + v112;
    os_log_type_t v114 = (uint64_t *)(v57 + v112);
    unint64_t v115 = v114[1];
    if (v115 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v113 = *(_OWORD *)v114;
    }
    else
    {
      uint64_t v116 = *v114;
      sub_1000361E0(*v114, v114[1]);
      *(void *)uint64_t v113 = v116;
      *((void *)v113 + 1) = v115;
    }
    uint64_t v117 = v60[11];
    uint64_t v118 = (char *)v56 + v117;
    uint64_t v119 = (uint64_t *)(v57 + v117);
    unint64_t v120 = v119[1];
    if (v120 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
    }
    else
    {
      uint64_t v121 = *v119;
      sub_1000361E0(*v119, v119[1]);
      *(void *)uint64_t v118 = v121;
      *((void *)v118 + 1) = v120;
    }
    uint64_t v122 = v60[12];
    uint64_t v123 = (uint64_t *)((char *)v56 + v122);
    uint64_t v124 = (uint64_t *)(v57 + v122);
    uint64_t v125 = *v124;
    unint64_t v126 = v124[1];
    sub_1000361E0(*v124, v126);
    *uint64_t v123 = v125;
    v123[1] = v126;
    uint64_t v127 = v60[13];
    uint64_t v128 = (uint64_t *)((char *)v56 + v127);
    uint64_t v129 = (uint64_t *)(v57 + v127);
    uint64_t v130 = *v129;
    unint64_t v131 = v129[1];
    sub_1000361E0(*v129, v131);
    uint64_t *v128 = v130;
    v128[1] = v131;
    uint64_t v132 = v60[14];
    uint64_t v133 = (uint64_t *)((char *)v56 + v132);
    uint64_t v134 = (void *)(v57 + v132);
    uint64_t v135 = v134[1];
    *uint64_t v133 = *v134;
    v133[1] = v135;
    uint64_t v136 = v60[15];
    uint64_t v137 = (uint64_t *)((char *)v56 + v136);
    v138 = (void *)(v57 + v136);
    uint64_t v139 = v138[1];
    void *v137 = *v138;
    v137[1] = v139;
    *(uint64_t *)((char *)v56 + v60[16]) = *(void *)(v57 + v60[16]);
    *(uint64_t *)((char *)v56 + v60[17]) = *(void *)(v57 + v60[17]);
    *((unsigned char *)v56 + v60[18]) = *(unsigned char *)(v57 + v60[18]);
    *((unsigned char *)v56 + v60[19]) = *(unsigned char *)(v57 + v60[19]);
    *((unsigned char *)v56 + v60[20]) = *(unsigned char *)(v57 + v60[20]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100063E34(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000617DC(a1, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingService.BeaconCreationResult);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      uint64_t v5 = (int *)type metadata accessor for StandaloneBeacon();
      uint64_t v6 = v5[5];
      uint64_t v7 = a1 + v6;
      uint64_t v8 = a2 + v6;
      uint64_t v9 = type metadata accessor for MACAddress();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
      v10(v7, v8, v9);
      v10(a1 + v5[6], a2 + v5[6], v9);
      uint64_t v11 = v5[7];
      unint64_t v12 = (void *)(a1 + v11);
      uint64_t v13 = (void *)(a2 + v11);
      *unint64_t v12 = *v13;
      v12[1] = v13[1];
      uint64_t v14 = v5[8];
      uint64_t v15 = a1 + v14;
      uint64_t v16 = a2 + v14;
      uint64_t v17 = type metadata accessor for Date();
      uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      v18(v15, v16, v17);
      uint64_t v19 = v5[9];
      uint64_t v20 = (uint64_t *)(a1 + v19);
      uint64_t v21 = (uint64_t *)(a2 + v19);
      uint64_t v22 = *v21;
      unint64_t v23 = v21[1];
      sub_1000361E0(*v21, v23);
      *uint64_t v20 = v22;
      v20[1] = v23;
      uint64_t v24 = v5[10];
      uint64_t v25 = (uint64_t *)(a1 + v24);
      uint64_t v26 = (void *)(a2 + v24);
      uint64_t v27 = *(void *)(a2 + v24);
      unint64_t v28 = *(void *)(a2 + v24 + 8);
      sub_1000361E0(v27, v28);
      *uint64_t v25 = v27;
      v25[1] = v28;
      uint64_t v29 = v26[2];
      unint64_t v30 = v26[3];
      sub_1000361E0(v29, v30);
      v25[2] = v29;
      v25[3] = v30;
      uint64_t v31 = v26[4];
      unint64_t v32 = v26[5];
      sub_1000361E0(v31, v32);
      v25[4] = v31;
      v25[5] = v32;
      uint64_t v33 = v5[11];
      uint64_t v34 = (uint64_t *)(a1 + v33);
      unint64_t v35 = (uint64_t *)(a2 + v33);
      uint64_t v36 = *v35;
      unint64_t v37 = v35[1];
      sub_1000361E0(*v35, v37);
      *uint64_t v34 = v36;
      v34[1] = v37;
    }
    else
    {
      uint64_t v38 = *(void *)a2;
      unint64_t v39 = *(void *)(a2 + 8);
      sub_1000361E0(*(void *)a2, v39);
      *(void *)a1 = v38;
      *(void *)(a1 + 8) = v39;
      uint64_t v40 = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 16) = v40;
      uint64_t v41 = (int *)type metadata accessor for OwnedBeaconGroup(0);
      uint64_t v42 = v41[6];
      uint64_t v43 = a1 + v42;
      uint64_t v44 = a2 + v42;
      uint64_t v45 = type metadata accessor for UUID();
      uint64_t v126 = *(void *)(v45 - 8);
      uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 16);
      v46(v43, v44, v45);
      uint64_t v47 = v41[7];
      uint64_t v48 = a1 + v47;
      uint64_t v49 = a2 + v47;
      uint64_t v50 = type metadata accessor for MACAddress();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
      *(unsigned char *)(a1 + v41[8]) = *(unsigned char *)(a2 + v41[8]);
      uint64_t v51 = v41[9];
      uint64_t v52 = (void *)(a1 + v51);
      uint64_t v53 = (void *)(a2 + v51);
      *uint64_t v52 = *v53;
      v52[1] = v53[1];
      *(void *)(a1 + v41[10]) = *(void *)(a2 + v41[10]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v54 = *(int *)(sub_10000588C(&qword_101639B90) + 48);
      uint64_t v55 = (uint64_t *)(a1 + v54);
      uint64_t v56 = a2 + v54;
      uint64_t v57 = *(void *)(a2 + v54);
      unint64_t v58 = *(void *)(v56 + 8);
      sub_1000361E0(v57, v58);
      *uint64_t v55 = v57;
      v55[1] = v58;
      unint64_t v59 = (int *)type metadata accessor for OwnedBeaconRecord();
      v46((uint64_t)v55 + v59[5], v56 + v59[5], v45);
      uint64_t v60 = v59[6];
      uint64_t v61 = (uint64_t *)((char *)v55 + v60);
      unint64_t v62 = (void *)(v56 + v60);
      type metadata accessor for StableIdentifier();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          *uint64_t v61 = *v62;
          v61[1] = v62[1];
          v61[2] = v62[2];
          v61[3] = v62[3];
          v61[4] = v62[4];
          v61[5] = v62[5];
          goto LABEL_9;
        case 2u:
          v46((uint64_t)v61, (uint64_t)v62, v45);
          uint64_t v63 = (int *)sub_10000588C(&qword_1016555E0);
          uint64_t v64 = v63[12];
          uint64_t v65 = (void *)((char *)v61 + v64);
          uint64_t v66 = (void *)((char *)v62 + v64);
          *uint64_t v65 = *v66;
          v65[1] = v66[1];
          uint64_t v67 = v63[16];
          uint64_t v68 = (void *)((char *)v61 + v67);
          uint64_t v69 = (void *)((char *)v62 + v67);
          *uint64_t v68 = *v69;
          v68[1] = v69[1];
          uint64_t v70 = v63[20];
          long long v71 = (void *)((char *)v61 + v70);
          uint64_t v72 = (void *)((char *)v62 + v70);
          *long long v71 = *v72;
          v71[1] = v72[1];
          *(_WORD *)((char *)v61 + v63[24]) = *(_WORD *)((char *)v62 + v63[24]);
          uint64_t v73 = v63[28];
          uint64_t v74 = (void *)((char *)v61 + v73);
          uint64_t v75 = (void *)((char *)v62 + v73);
          *uint64_t v74 = *v75;
          v74[1] = v75[1];
          swift_bridgeObjectRetain();
          goto LABEL_9;
        case 3u:
          v46((uint64_t)v61, (uint64_t)v62, v45);
          uint64_t v76 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
          uint64_t v77 = v76[12];
          unint64_t v78 = (void *)((char *)v61 + v77);
          long long v79 = (void *)((char *)v62 + v77);
          *unint64_t v78 = *v79;
          v78[1] = v79[1];
          uint64_t v80 = v76[16];
          uint64_t v81 = (void *)((char *)v61 + v80);
          uint64_t v82 = (void *)((char *)v62 + v80);
          *uint64_t v81 = *v82;
          v81[1] = v82[1];
          uint64_t v83 = v76[20];
          uint64_t v84 = (void *)((char *)v61 + v83);
          uint64_t v85 = (void *)((char *)v62 + v83);
          *uint64_t v84 = *v85;
          v84[1] = v85[1];
          *((unsigned char *)v61 + v76[24]) = *((unsigned char *)v62 + v76[24]);
LABEL_9:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          *uint64_t v61 = *v62;
          v61[1] = v62[1];
          break;
      }
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      uint64_t v86 = v59[7];
      uint64_t v87 = (char *)v55 + v86;
      uint64_t v88 = (const void *)(v56 + v86);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v56 + v86, 1, v45))
      {
        uint64_t v89 = sub_10000588C(&qword_101638CF0);
        memcpy(v87, v88, *(void *)(*(void *)(v89 - 8) + 64));
      }
      else
      {
        v46((uint64_t)v87, (uint64_t)v88, v45);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56))(v87, 0, 1, v45);
      }
      uint64_t v90 = v59[8];
      uint64_t v91 = (char *)v55 + v90;
      uint64_t v92 = v56 + v90;
      uint64_t v93 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v93 - 8) + 16))(v91, v92, v93);
      uint64_t v94 = v59[9];
      uint64_t v95 = (uint64_t *)((char *)v55 + v94);
      uint64_t v96 = (uint64_t *)(v56 + v94);
      uint64_t v97 = *v96;
      unint64_t v98 = v96[1];
      sub_1000361E0(*v96, v98);
      uint64_t *v95 = v97;
      v95[1] = v98;
      uint64_t v99 = v59[10];
      uint64_t v100 = (char *)v55 + v99;
      uint64_t v101 = (uint64_t *)(v56 + v99);
      unint64_t v102 = v101[1];
      if (v102 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v100 = *(_OWORD *)v101;
      }
      else
      {
        uint64_t v103 = *v101;
        sub_1000361E0(*v101, v101[1]);
        *(void *)uint64_t v100 = v103;
        *((void *)v100 + 1) = v102;
      }
      uint64_t v104 = v59[11];
      uint64_t v105 = (char *)v55 + v104;
      uint64_t v106 = (uint64_t *)(v56 + v104);
      unint64_t v107 = v106[1];
      if (v107 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
      }
      else
      {
        uint64_t v108 = *v106;
        sub_1000361E0(*v106, v106[1]);
        *(void *)uint64_t v105 = v108;
        *((void *)v105 + 1) = v107;
      }
      uint64_t v109 = v59[12];
      uint64_t v110 = (uint64_t *)((char *)v55 + v109);
      unint64_t v111 = (uint64_t *)(v56 + v109);
      uint64_t v112 = *v111;
      unint64_t v113 = v111[1];
      sub_1000361E0(*v111, v113);
      *uint64_t v110 = v112;
      v110[1] = v113;
      uint64_t v114 = v59[13];
      unint64_t v115 = (uint64_t *)((char *)v55 + v114);
      uint64_t v116 = (uint64_t *)(v56 + v114);
      uint64_t v117 = *v116;
      unint64_t v118 = v116[1];
      sub_1000361E0(*v116, v118);
      uint64_t *v115 = v117;
      v115[1] = v118;
      uint64_t v119 = v59[14];
      unint64_t v120 = (uint64_t *)((char *)v55 + v119);
      uint64_t v121 = (void *)(v56 + v119);
      *unint64_t v120 = *v121;
      v120[1] = v121[1];
      uint64_t v122 = v59[15];
      uint64_t v123 = (uint64_t *)((char *)v55 + v122);
      uint64_t v124 = (void *)(v56 + v122);
      *uint64_t v123 = *v124;
      v123[1] = v124[1];
      *(uint64_t *)((char *)v55 + v59[16]) = *(void *)(v56 + v59[16]);
      *(uint64_t *)((char *)v55 + v59[17]) = *(void *)(v56 + v59[17]);
      *((unsigned char *)v55 + v59[18]) = *(unsigned char *)(v56 + v59[18]);
      *((unsigned char *)v55 + v59[19]) = *(unsigned char *)(v56 + v59[19]);
      *((unsigned char *)v55 + v59[20]) = *(unsigned char *)(v56 + v59[20]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100064654(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    uint64_t v5 = (int *)type metadata accessor for StandaloneBeacon();
    uint64_t v6 = v5[5];
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    uint64_t v9 = type metadata accessor for MACAddress();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
    v10(v7, v8, v9);
    v10(a1 + v5[6], a2 + v5[6], v9);
    *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
    uint64_t v11 = v5[8];
    uint64_t v12 = a1 + v11;
    uint64_t v13 = a2 + v11;
    uint64_t v14 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    *(_OWORD *)(a1 + v5[9]) = *(_OWORD *)(a2 + v5[9]);
    uint64_t v15 = v5[10];
    uint64_t v16 = (_OWORD *)(a1 + v15);
    uint64_t v17 = (_OWORD *)(a2 + v15);
    long long v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    _OWORD v16[2] = v17[2];
    *(_OWORD *)(a1 + v5[11]) = *(_OWORD *)(a2 + v5[11]);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v19 = (int *)type metadata accessor for OwnedBeaconGroup(0);
    uint64_t v20 = v19[6];
    uint64_t v21 = a1 + v20;
    uint64_t v22 = a2 + v20;
    uint64_t v23 = type metadata accessor for UUID();
    uint64_t v49 = *(void *)(v23 - 8);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32);
    v24(v21, v22, v23);
    uint64_t v25 = v19[7];
    uint64_t v26 = a1 + v25;
    uint64_t v27 = a2 + v25;
    uint64_t v28 = type metadata accessor for MACAddress();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
    *(unsigned char *)(a1 + v19[8]) = *(unsigned char *)(a2 + v19[8]);
    *(_OWORD *)(a1 + v19[9]) = *(_OWORD *)(a2 + v19[9]);
    *(void *)(a1 + v19[10]) = *(void *)(a2 + v19[10]);
    uint64_t v29 = *(int *)(sub_10000588C(&qword_101639B90) + 48);
    uint64_t v30 = a1 + v29;
    uint64_t v31 = a2 + v29;
    *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
    unint64_t v32 = (int *)type metadata accessor for OwnedBeaconRecord();
    v24(v30 + v32[5], v31 + v32[5], v23);
    uint64_t v33 = v32[6];
    uint64_t v34 = (unsigned char *)(v30 + v33);
    unint64_t v35 = (unsigned char *)(v31 + v33);
    uint64_t v36 = type metadata accessor for StableIdentifier();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v24((uint64_t)v34, (uint64_t)v35, v23);
      unint64_t v39 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
      *(_OWORD *)&v34[v39[12]] = *(_OWORD *)&v35[v39[12]];
      *(_OWORD *)&v34[v39[16]] = *(_OWORD *)&v35[v39[16]];
      *(_OWORD *)&v34[v39[20]] = *(_OWORD *)&v35[v39[20]];
      v34[v39[24]] = v35[v39[24]];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      v24((uint64_t)v34, (uint64_t)v35, v23);
      uint64_t v38 = (int *)sub_10000588C(&qword_1016555E0);
      *(_OWORD *)&v34[v38[12]] = *(_OWORD *)&v35[v38[12]];
      *(_OWORD *)&v34[v38[16]] = *(_OWORD *)&v35[v38[16]];
      *(_OWORD *)&v34[v38[20]] = *(_OWORD *)&v35[v38[20]];
      *(_WORD *)&v34[v38[24]] = *(_WORD *)&v35[v38[24]];
      *(_OWORD *)&v34[v38[28]] = *(_OWORD *)&v35[v38[28]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
    }
    uint64_t v40 = v32[7];
    uint64_t v41 = (void *)(v30 + v40);
    uint64_t v42 = (const void *)(v31 + v40);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v31 + v40, 1, v23))
    {
      uint64_t v43 = sub_10000588C(&qword_101638CF0);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v24((uint64_t)v41, (uint64_t)v42, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v41, 0, 1, v23);
    }
    uint64_t v44 = v32[8];
    uint64_t v45 = v30 + v44;
    uint64_t v46 = v31 + v44;
    uint64_t v47 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 32))(v45, v46, v47);
    *(_OWORD *)(v30 + v32[9]) = *(_OWORD *)(v31 + v32[9]);
    *(_OWORD *)(v30 + v32[10]) = *(_OWORD *)(v31 + v32[10]);
    *(_OWORD *)(v30 + v32[11]) = *(_OWORD *)(v31 + v32[11]);
    *(_OWORD *)(v30 + v32[12]) = *(_OWORD *)(v31 + v32[12]);
    *(_OWORD *)(v30 + v32[13]) = *(_OWORD *)(v31 + v32[13]);
    *(_OWORD *)(v30 + v32[14]) = *(_OWORD *)(v31 + v32[14]);
    *(_OWORD *)(v30 + v32[15]) = *(_OWORD *)(v31 + v32[15]);
    *(void *)(v30 + v32[16]) = *(void *)(v31 + v32[16]);
    *(void *)(v30 + v32[17]) = *(void *)(v31 + v32[17]);
    *(unsigned char *)(v30 + v32[18]) = *(unsigned char *)(v31 + v32[18]);
    *(unsigned char *)(v30 + v32[19]) = *(unsigned char *)(v31 + v32[19]);
    *(unsigned char *)(v30 + v32[20]) = *(unsigned char *)(v31 + v32[20]);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100064BF8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000617DC(a1, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingService.BeaconCreationResult);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
      uint64_t v5 = (int *)type metadata accessor for StandaloneBeacon();
      uint64_t v6 = v5[5];
      uint64_t v7 = a1 + v6;
      uint64_t v8 = a2 + v6;
      uint64_t v9 = type metadata accessor for MACAddress();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
      v10(v7, v8, v9);
      v10(a1 + v5[6], a2 + v5[6], v9);
      *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
      uint64_t v11 = v5[8];
      uint64_t v12 = a1 + v11;
      uint64_t v13 = a2 + v11;
      uint64_t v14 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      *(_OWORD *)(a1 + v5[9]) = *(_OWORD *)(a2 + v5[9]);
      uint64_t v15 = v5[10];
      uint64_t v16 = (_OWORD *)(a1 + v15);
      uint64_t v17 = (_OWORD *)(a2 + v15);
      long long v18 = v17[1];
      *uint64_t v16 = *v17;
      v16[1] = v18;
      _OWORD v16[2] = v17[2];
      *(_OWORD *)(a1 + v5[11]) = *(_OWORD *)(a2 + v5[11]);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      uint64_t v19 = (int *)type metadata accessor for OwnedBeaconGroup(0);
      uint64_t v20 = v19[6];
      uint64_t v21 = a1 + v20;
      uint64_t v22 = a2 + v20;
      uint64_t v23 = type metadata accessor for UUID();
      uint64_t v49 = *(void *)(v23 - 8);
      uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32);
      v24(v21, v22, v23);
      uint64_t v25 = v19[7];
      uint64_t v26 = a1 + v25;
      uint64_t v27 = a2 + v25;
      uint64_t v28 = type metadata accessor for MACAddress();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
      *(unsigned char *)(a1 + v19[8]) = *(unsigned char *)(a2 + v19[8]);
      *(_OWORD *)(a1 + v19[9]) = *(_OWORD *)(a2 + v19[9]);
      *(void *)(a1 + v19[10]) = *(void *)(a2 + v19[10]);
      uint64_t v29 = *(int *)(sub_10000588C(&qword_101639B90) + 48);
      uint64_t v30 = a1 + v29;
      uint64_t v31 = a2 + v29;
      *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
      unint64_t v32 = (int *)type metadata accessor for OwnedBeaconRecord();
      v24(v30 + v32[5], v31 + v32[5], v23);
      uint64_t v33 = v32[6];
      uint64_t v34 = (unsigned char *)(v30 + v33);
      unint64_t v35 = (unsigned char *)(v31 + v33);
      uint64_t v36 = type metadata accessor for StableIdentifier();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        v24((uint64_t)v34, (uint64_t)v35, v23);
        unint64_t v39 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        *(_OWORD *)&v34[v39[12]] = *(_OWORD *)&v35[v39[12]];
        *(_OWORD *)&v34[v39[16]] = *(_OWORD *)&v35[v39[16]];
        *(_OWORD *)&v34[v39[20]] = *(_OWORD *)&v35[v39[20]];
        v34[v39[24]] = v35[v39[24]];
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload == 2)
      {
        v24((uint64_t)v34, (uint64_t)v35, v23);
        uint64_t v38 = (int *)sub_10000588C(&qword_1016555E0);
        *(_OWORD *)&v34[v38[12]] = *(_OWORD *)&v35[v38[12]];
        *(_OWORD *)&v34[v38[16]] = *(_OWORD *)&v35[v38[16]];
        *(_OWORD *)&v34[v38[20]] = *(_OWORD *)&v35[v38[20]];
        *(_WORD *)&v34[v38[24]] = *(_WORD *)&v35[v38[24]];
        *(_OWORD *)&v34[v38[28]] = *(_OWORD *)&v35[v38[28]];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
      }
      uint64_t v40 = v32[7];
      uint64_t v41 = (void *)(v30 + v40);
      uint64_t v42 = (const void *)(v31 + v40);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v31 + v40, 1, v23))
      {
        uint64_t v43 = sub_10000588C(&qword_101638CF0);
        memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        v24((uint64_t)v41, (uint64_t)v42, v23);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v41, 0, 1, v23);
      }
      uint64_t v44 = v32[8];
      uint64_t v45 = v30 + v44;
      uint64_t v46 = v31 + v44;
      uint64_t v47 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 32))(v45, v46, v47);
      *(_OWORD *)(v30 + v32[9]) = *(_OWORD *)(v31 + v32[9]);
      *(_OWORD *)(v30 + v32[10]) = *(_OWORD *)(v31 + v32[10]);
      *(_OWORD *)(v30 + v32[11]) = *(_OWORD *)(v31 + v32[11]);
      *(_OWORD *)(v30 + v32[12]) = *(_OWORD *)(v31 + v32[12]);
      *(_OWORD *)(v30 + v32[13]) = *(_OWORD *)(v31 + v32[13]);
      *(_OWORD *)(v30 + v32[14]) = *(_OWORD *)(v31 + v32[14]);
      *(_OWORD *)(v30 + v32[15]) = *(_OWORD *)(v31 + v32[15]);
      *(void *)(v30 + v32[16]) = *(void *)(v31 + v32[16]);
      *(void *)(v30 + v32[17]) = *(void *)(v31 + v32[17]);
      *(unsigned char *)(v30 + v32[18]) = *(unsigned char *)(v31 + v32[18]);
      *(unsigned char *)(v30 + v32[19]) = *(unsigned char *)(v31 + v32[19]);
      *(unsigned char *)(v30 + v32[20]) = *(unsigned char *)(v31 + v32[20]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedKeysCriteria(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for TimeBasedKeysCriteria(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_100065214()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100065224()
{
  uint64_t result = type metadata accessor for OwnedBeaconGroup(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for OwnedBeaconRecord();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v4[4] = v4;
      uint64_t result = type metadata accessor for StandaloneBeacon();
      if (v3 <= 0x3F)
      {
        v4[5] = *(void *)(result - 8) + 64;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for AirPodsLEPairingService.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1000600A8(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for AirPodsLEPairingService.Error(unint64_t *a1)
{
  return sub_100060090(*a1);
}

unint64_t *assignWithCopy for AirPodsLEPairingService.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1000600A8(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_100060090(v4);
  return a1;
}

void *initializeWithTake for BeaconKeyService.KeyStreamChange(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for AirPodsLEPairingService.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_100060090(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLEPairingService.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xE && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 14);
  }
  unsigned int v3 = (((*(void *)a1 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)a1 >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xD) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingService.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xD)
  {
    *(void *)uint64_t result = a2 - 14;
    if (a3 >= 0xE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

uint64_t sub_100065488(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return *a1 + 2;
  }
}

void *sub_1000654A0(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

void *sub_1000654B0(void *result, uint64_t a2)
{
  if (a2 < 2) {
    *uint64_t result = *result & 0xFFFFFFFFFFFFFFFLL | (a2 << 62);
  }
  else {
    *uint64_t result = (a2 - 2) | 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingService.Error()
{
  return &type metadata for AirPodsLEPairingService.Error;
}

uint64_t sub_1000656A4(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = sub_10000588C((uint64_t *)&unk_10163BA80);
  v2[8] = swift_task_alloc();
  v2[9] = sub_10000588C(&qword_101639E68);
  v2[10] = swift_task_alloc();
  type metadata accessor for OwnerSharingCircle();
  v2[11] = swift_task_alloc();
  type metadata accessor for OwnerPeerTrust();
  v2[12] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for MemberSharingCircle();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B7C0);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[19] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[20] = v5;
  v2[21] = *(void *)(v5 + 64);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  return _swift_task_switch(sub_1000658E8, v1, 0);
}

uint64_t sub_1000658E8()
{
  uint64_t v19 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[20];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[24] = v6;
  v0[25] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[23];
  uint64_t v11 = v0[19];
  uint64_t v12 = v0[20];
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558275;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_1000755D4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_1008FA0F0(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Accept %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v12 + 8))(v0[23], v0[19]);
  }

  uint64_t v16 = *(void *)(v0[6] + 112);
  v0[26] = v16;
  return _swift_task_switch(sub_100065B84, v16, 0);
}

uint64_t sub_100065B84()
{
  *(void *)(v0 + 216) = *(void *)(*(void *)(v0 + 208) + 136);
  swift_retain();
  return _swift_task_switch(sub_100065BF8, 0, 0);
}

uint64_t sub_100065BF8()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[28] = v3;
  v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[29] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  *uint64_t v4 = v0;
  v4[1] = sub_100065D10;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000730E0, v3, v5);
}

uint64_t sub_100065D10()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 240) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_100065E80, v2, 0);
}

uint64_t sub_100065E80()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[14];
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000754A4(v4, v0[15], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      if (static UUID.== infix(_:_:)()) {
        break;
      }
      sub_10007550C(v0[15], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v7 = v0[18];
    uint64_t v8 = v0[15];
    swift_bridgeObjectRelease();
    sub_10007556C(v8, v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v6 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v6 = 1;
  }
  uint64_t v10 = v0[17];
  uint64_t v9 = v0[18];
  uint64_t v11 = v0[13];
  uint64_t v12 = v0[14];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v9, v6, 1, v11);
  swift_bridgeObjectRelease();
  sub_10001D074(v9, v10, (uint64_t *)&unk_10163B7C0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    uint64_t v13 = v0[26];
    sub_10001DAB4(v0[17], (uint64_t *)&unk_10163B7C0);
    return _swift_task_switch(sub_1000662AC, v13, 0);
  }
  else
  {
    sub_10007556C(v0[17], v0[16], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v14 = (void *)swift_task_alloc();
    v0[31] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1000660D4;
    uint64_t v15 = v0[16];
    return sub_100067768(v15);
  }
}

uint64_t sub_1000660D4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 256) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v4 = sub_1000675D4;
  }
  else {
    uint64_t v4 = sub_100066200;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100066200()
{
  sub_10007550C(v0[16], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001DAB4(v0[18], (uint64_t *)&unk_10163B7C0);
  uint64_t v1 = swift_bridgeObjectRetain();
  v0[39] = (uint64_t)sub_10070FD7C(v1);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100066A2C, 0, 0);
}

uint64_t sub_1000662AC()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[24];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[20];
  uint64_t v6 = v0[5];
  v0[33] = *(void *)(v1 + 136);
  v2(v3, v6, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  v0[34] = v8;
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v3, v4);
  swift_retain();
  return _swift_task_switch(sub_100066394, 0, 0);
}

uint64_t sub_100066394()
{
  uint64_t v2 = v0[33];
  uint64_t v1 = v0[34];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[35] = v3;
  v3[2] = v2;
  v3[3] = sub_1000730F0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[36] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100066498;
  uint64_t v6 = v0[7];
  uint64_t v5 = v0[8];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100073108, v3, v6);
}

uint64_t sub_100066498()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000665E8, v1, 0);
}

uint64_t sub_1000665E8()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = sub_10000588C(&qword_10163BA90);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_10163BA80);
    sub_100073114();
    uint64_t v3 = swift_allocError();
    *uint64_t v4 = 0;
    swift_willThrow();
    v0[45] = v3;
    sub_10001DAB4(v0[18], (uint64_t *)&unk_10163B7C0);
    uint64_t v5 = swift_bridgeObjectRetain();
    v0[46] = sub_10070FD7C(v5);
    swift_bridgeObjectRelease();
    swift_errorRetain();
    return _swift_task_switch(sub_100066EF8, 0, 0);
  }
  else
  {
    uint64_t v7 = v0[11];
    uint64_t v6 = v0[12];
    uint64_t v9 = v0[9];
    uint64_t v8 = v0[10];
    uint64_t v10 = v1 + *(int *)(v2 + 48);
    uint64_t v11 = v8 + *(int *)(v9 + 48);
    sub_10007556C(v1, v8, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    sub_10007556C(v10, v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v12 = v8 + *(int *)(v9 + 48);
    sub_10007556C(v8, v6, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    sub_10007556C(v12, v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v13 = (void *)swift_task_alloc();
    v0[37] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_100066838;
    uint64_t v15 = v0[11];
    uint64_t v14 = v0[12];
    return sub_10006BF64(v15, v14);
  }
}

uint64_t sub_100066838()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v4 = sub_100067690;
  }
  else {
    uint64_t v4 = sub_100066964;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100066964()
{
  uint64_t v1 = v0[12];
  sub_10007550C(v0[11], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10007550C(v1, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  sub_10001DAB4(v0[18], (uint64_t *)&unk_10163B7C0);
  uint64_t v2 = swift_bridgeObjectRetain();
  v0[39] = (uint64_t)sub_10070FD7C(v2);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100066A2C, 0, 0);
}

uint64_t sub_100066A2C()
{
  uint64_t v1 = v0[39];
  if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    uint64_t v3 = swift_retain();
    v0[40] = v2;
    if (v2) {
      goto LABEL_4;
    }
LABEL_12:
    uint64_t v10 = v0[6];
    swift_release_n();
    uint64_t v3 = (uint64_t)sub_100066B94;
    uint64_t v4 = v10;
    uint64_t v5 = 0;
    return _swift_task_switch(v3, v4, v5);
  }
  swift_retain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = v3;
  v0[40] = v3;
  if (!v3) {
    goto LABEL_12;
  }
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
    return _swift_task_switch(v3, v4, v5);
  }
  uint64_t v6 = v0[39];
  v0[41] = 0;
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 32);
    swift_retain();
  }
  v0[42] = v7;
  type metadata accessor for AnalyticsPublisher();
  v0[43] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[44] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100066C94;
  return sub_101196838(v7);
}

uint64_t sub_100066B94()
{
  *(void *)(*(void *)(v0 + 48) + 408) = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100066C94()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100066DAC, 0, 0);
}

uint64_t sub_100066DAC()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[40];
  swift_release();
  if (v1 + 1 == v2)
  {
    uint64_t v3 = v0[6];
    swift_release_n();
    return _swift_task_switch(sub_100066B94, v3, 0);
  }
  else
  {
    uint64_t v4 = v0[41] + 1;
    v0[41] = v4;
    uint64_t v5 = v0[39];
    if ((v5 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v6 = *(void *)(v5 + 8 * v4 + 32);
      swift_retain();
    }
    v0[42] = v6;
    type metadata accessor for AnalyticsPublisher();
    v0[43] = swift_allocObject();
    swift_defaultActor_initialize();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[44] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100066C94;
    return sub_101196838(v6);
  }
}

uint64_t sub_100066EF8()
{
  uint64_t v1 = v0[46];
  if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    uint64_t v3 = swift_retain();
    v0[47] = v2;
    if (v2) {
      goto LABEL_4;
    }
LABEL_12:
    uint64_t v11 = v0[6];
    swift_release();
    swift_errorRelease();
    swift_release();
    uint64_t v3 = (uint64_t)sub_100067078;
    uint64_t v4 = v11;
    uint64_t v5 = 0;
    return _swift_task_switch(v3, v4, v5);
  }
  swift_retain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = v3;
  v0[47] = v3;
  if (!v3) {
    goto LABEL_12;
  }
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
    return _swift_task_switch(v3, v4, v5);
  }
  uint64_t v6 = v0[46];
  v0[48] = 0;
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 32);
    swift_retain();
  }
  v0[49] = v7;
  swift_errorRetain();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10166D770 + dword_10166D770);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[50] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100067184;
  uint64_t v9 = v0[45];
  return v12(v7, v9);
}

uint64_t sub_100067078()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_willThrow();
  *(void *)(v1 + 408) = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100067184()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = sub_1000757A8;
  }
  else
  {
    uint64_t v1 = sub_10006729C;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_10006729C()
{
  swift_errorRelease();
  type metadata accessor for AnalyticsPublisher();
  v0[51] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[52] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100067358;
  uint64_t v2 = v0[49];
  return sub_101196838(v2);
}

uint64_t sub_100067358()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100067470, 0, 0);
}

uint64_t sub_100067470()
{
  uint64_t v1 = v0[48];
  uint64_t v2 = v0[47];
  swift_release();
  if (v1 + 1 == v2)
  {
    uint64_t v3 = v0[6];
    swift_release();
    swift_errorRelease();
    swift_release();
    return _swift_task_switch(sub_100067078, v3, 0);
  }
  else
  {
    uint64_t v4 = v0[48] + 1;
    v0[48] = v4;
    uint64_t v5 = v0[46];
    if ((v5 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v6 = *(void *)(v5 + 8 * v4 + 32);
      swift_retain();
    }
    v0[49] = v6;
    swift_errorRetain();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10166D770 + dword_10166D770);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[50] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100067184;
    uint64_t v8 = v0[45];
    return v10(v6, v8);
  }
}

uint64_t sub_1000675D4()
{
  sub_10007550C(v0[16], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  v0[45] = v0[32];
  sub_10001DAB4(v0[18], (uint64_t *)&unk_10163B7C0);
  uint64_t v1 = swift_bridgeObjectRetain();
  v0[46] = (uint64_t)sub_10070FD7C(v1);
  swift_bridgeObjectRelease();
  swift_errorRetain();
  return _swift_task_switch(sub_100066EF8, 0, 0);
}

uint64_t sub_100067690()
{
  uint64_t v1 = v0[12];
  sub_10007550C(v0[11], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10007550C(v1, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  v0[45] = v0[38];
  sub_10001DAB4(v0[18], (uint64_t *)&unk_10163B7C0);
  uint64_t v2 = swift_bridgeObjectRetain();
  v0[46] = (uint64_t)sub_10070FD7C(v2);
  swift_bridgeObjectRelease();
  swift_errorRetain();
  return _swift_task_switch(sub_100066EF8, 0, 0);
}

uint64_t sub_100067768(uint64_t a1)
{
  v2[47] = a1;
  v2[48] = v1;
  uint64_t v3 = type metadata accessor for SharedBeaconRecord(0);
  v2[49] = v3;
  v2[50] = *(void *)(v3 - 8);
  v2[51] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MemberPeerTrust();
  v2[52] = v4;
  v2[53] = *(void *)(v4 - 8);
  v2[54] = swift_task_alloc();
  v2[55] = swift_task_alloc();
  v2[56] = swift_task_alloc();
  v2[57] = sub_10000588C((uint64_t *)&unk_10163B890);
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  v2[60] = sub_10000588C((uint64_t *)&unk_101653D50);
  v2[61] = swift_task_alloc();
  v2[62] = swift_task_alloc();
  v2[63] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v2[64] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[65] = v6;
  v2[66] = *(void *)(v6 + 64);
  v2[67] = swift_task_alloc();
  v2[68] = sub_10000588C((uint64_t *)&unk_10163B7C0);
  v2[69] = swift_task_alloc();
  v2[70] = swift_task_alloc();
  sub_10000588C(&qword_101639E88);
  v2[71] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MemberSharingCircle();
  v2[72] = v7;
  v2[73] = *(void *)(v7 - 8);
  v2[74] = swift_task_alloc();
  v2[75] = swift_task_alloc();
  v2[76] = swift_task_alloc();
  v2[77] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v2[78] = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100067AD8;
  v8[14] = v1;
  return _swift_task_switch(sub_10006FA2C, v1, 0);
}

uint64_t sub_100067AD8()
{
  uint64_t v2 = (void *)*v1;
  v2[79] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v2[1];
    return v3();
  }
  else
  {
    uint64_t v5 = v2[48];
    return _swift_task_switch(sub_100067D14, v5, 0);
  }
}

uint64_t sub_100067D14()
{
  uint64_t v25 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[77];
  uint64_t v2 = v0[47];
  uint64_t v3 = type metadata accessor for Logger();
  v0[80] = sub_100010324(v3, (uint64_t)qword_10170D788);
  sub_1000754A4(v2, v1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[77];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558275;
    v0[45] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    sub_1000755D4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[46] = sub_1008FA0F0(v9, v10, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10007550C(v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Data update on share accept. Update %{private,mask.hash}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10007550C(v0[77], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  }

  uint64_t v11 = v0[79];
  uint64_t v12 = v0[71];
  uint64_t v13 = v0[47];
  *(void *)(swift_task_alloc() + 16) = v13;
  sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_100074F88, v12);
  if (v11)
  {
    swift_task_dealloc();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      v24[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_getErrorValue();
      uint64_t v17 = Error.localizedDescription.getter();
      v0[39] = sub_1008FA0F0(v17, v18, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failure on share accept, iCloud data update: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_100074FA8();
    swift_allocError();
    *uint64_t v21 = 1;
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
  else
  {
    uint64_t v19 = v0[48];
    swift_task_dealloc();
    uint64_t v20 = *(void *)(v19 + 112);
    v0[81] = v20;
    return _swift_task_switch(sub_1000682AC, v20, 0);
  }
}

uint64_t sub_1000682AC()
{
  *(void *)(v0 + 656) = *(void *)(*(void *)(v0 + 648) + 128);
  return _swift_task_switch(sub_1000682D4, 0, 0);
}

uint64_t sub_1000682D4()
{
  uint64_t v1 = v0[82];
  uint64_t v2 = v0[71];
  uint64_t v3 = swift_task_alloc();
  v0[83] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[84] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000683CC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_100074FFC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1000683CC()
{
  *(void *)(*(void *)v1 + 680) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100068A8C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1000684E8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000684E8()
{
  return _swift_task_switch(sub_100068504, *(void *)(v0 + 384), 0);
}

uint64_t sub_100068504()
{
  uint64_t v1 = *(void *)(v0 + 648);
  uint64_t v2 = *(void *)(v0 + 576);
  sub_10001DAB4(*(void *)(v0 + 568), &qword_101639E88);
  *(_DWORD *)(v0 + 100) = *(_DWORD *)(v2 + 20);
  return _swift_task_switch(sub_100068584, v1, 0);
}

uint64_t sub_100068584()
{
  uint64_t v1 = *(void *)(v0 + 648);
  uint64_t v2 = *(void *)(v0 + 536);
  uint64_t v3 = *(void *)(v0 + 520);
  uint64_t v4 = *(void *)(v0 + 512);
  uint64_t v5 = *(void *)(v0 + 376) + *(int *)(v0 + 100);
  *(void *)(v0 + 688) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 696) = v6;
  *(void *)(v0 + 704) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  int v7 = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 856) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 712) = v9;
  *(void *)(v9 + 16) = v1;
  unint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 720) = v10;
  *(void *)(v0 + 728) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_1000686B0, 0, 0);
}

uint64_t sub_1000686B0()
{
  uint64_t v1 = v0[89];
  uint64_t v2 = v0[86];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[92] = v3;
  v3[2] = v2;
  v3[3] = sub_100075008;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[93] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000687BC;
  uint64_t v5 = v0[70];
  uint64_t v6 = v0[68];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075020, v3, v6);
}

uint64_t sub_1000687BC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 384);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_10006890C, v1, 0);
}

uint64_t sub_10006890C()
{
  uint64_t v1 = *(void *)(v0 + 584);
  uint64_t v2 = *(void *)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 552);
  sub_10001D074(*(void *)(v0 + 560), v3, (uint64_t *)&unk_10163B7C0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 552);
    sub_10001DAB4(*(void *)(v0 + 560), (uint64_t *)&unk_10163B7C0);
    sub_10001DAB4(v4, (uint64_t *)&unk_10163B7C0);
    uint64_t v5 = *(void *)(v0 + 648);
    *(_DWORD *)(v0 + 860) = *(_DWORD *)(*(void *)(v0 + 576) + 24);
    return _swift_task_switch(sub_1000691D0, v5, 0);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 384);
    sub_10007556C(*(void *)(v0 + 552), *(void *)(v0 + 608), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001CD44((void *)(v6 + 280), *(void *)(v6 + 304));
    int v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 752) = v7;
    *int v7 = v0;
    v7[1] = sub_100068DE0;
    uint64_t v8 = *(void *)(v0 + 608);
    return sub_1007CEA88(v8);
  }
}

uint64_t sub_100068A8C()
{
  uint64_t v1 = *(void *)(v0 + 384);
  swift_task_dealloc();
  return _swift_task_switch(sub_100068AF8, v1, 0);
}

uint64_t sub_100068AF8()
{
  uint64_t v10 = v0;
  sub_10001DAB4(v0[71], &qword_101639E88);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[39] = sub_1008FA0F0(v4, v5, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure on share accept, iCloud data update: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_100074FA8();
  swift_allocError();
  *uint64_t v6 = 1;
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100068DE0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 760) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 384);
  if (v0) {
    uint64_t v4 = sub_100068FA8;
  }
  else {
    uint64_t v4 = sub_100068F0C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100068F0C()
{
  uint64_t v1 = *(void *)(v0 + 560);
  sub_10007550C(*(void *)(v0 + 608), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001DAB4(v1, (uint64_t *)&unk_10163B7C0);
  uint64_t v2 = *(void *)(v0 + 648);
  *(_DWORD *)(v0 + 860) = *(_DWORD *)(*(void *)(v0 + 576) + 24);
  return _swift_task_switch(sub_1000691D0, v2, 0);
}

uint64_t sub_100068FA8()
{
  uint64_t v10 = v0;
  uint64_t v1 = *(void *)(v0 + 560);
  sub_10007550C(*(void *)(v0 + 608), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001DAB4(v1, (uint64_t *)&unk_10163B7C0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 352) = sub_1008FA0F0(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failure on share accept, sharing keys download failure: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(void *)(v0 + 648);
  *(_DWORD *)(v0 + 860) = *(_DWORD *)(*(void *)(v0 + 576) + 24);
  return _swift_task_switch(sub_1000691D0, v7, 0);
}

uint64_t sub_1000691D0()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 720);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 696);
  uint64_t v3 = *(void *)(v0 + 648);
  uint64_t v4 = *(void *)(v0 + 536);
  uint64_t v5 = *(void *)(v0 + 512);
  uint64_t v6 = *(void *)(v0 + 376) + *(int *)(v0 + 860);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 856) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 856);
  *(void *)(v0 + 768) = *(void *)(v3 + 136);
  v2(v4, v6, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 776) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_1000692D4, 0, 0);
}

uint64_t sub_1000692D4()
{
  uint64_t v1 = v0[97];
  uint64_t v2 = v0[96];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[98] = v3;
  v3[2] = v2;
  v3[3] = sub_100075030;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[99] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000693E0;
  uint64_t v5 = v0[63];
  uint64_t v6 = v0[60];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075048, v3, v6);
}

uint64_t sub_1000693E0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 648);
  uint64_t v3 = *(void *)(*v0 + 576);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(_DWORD *)(v1 + 864) = *(_DWORD *)(v3 + 32);
  return _swift_task_switch(sub_100069554, v2, 0);
}

uint64_t sub_100069554()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 720);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 696);
  uint64_t v3 = *(void *)(v0 + 648);
  uint64_t v4 = *(void *)(v0 + 536);
  uint64_t v5 = *(void *)(v0 + 512);
  uint64_t v6 = *(void *)(v0 + 376) + *(int *)(v0 + 864);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 856) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 856);
  *(void *)(v0 + 800) = *(void *)(v3 + 136);
  v2(v4, v6, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 808) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_100069658, 0, 0);
}

uint64_t sub_100069658()
{
  uint64_t v1 = v0[101];
  uint64_t v2 = v0[100];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[102] = v3;
  v3[2] = v2;
  v3[3] = sub_100075058;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[103] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100069764;
  uint64_t v5 = v0[59];
  uint64_t v6 = v0[57];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000750F8, v3, v6);
}

uint64_t sub_100069764()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 384);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000698B4, v1, 0);
}

uint64_t sub_1000698B4()
{
  uint64_t v66 = v0;
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v3 = *(void *)(v0 + 424);
  sub_10001D074(*(void *)(v0 + 472), v1, (uint64_t *)&unk_10163B890);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 600);
    uint64_t v5 = *(void *)(v0 + 376);
    sub_10001DAB4(*(void *)(v0 + 464), (uint64_t *)&unk_10163B890);
    sub_1000754A4(v5, v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void *)(v0 + 600);
    if (v8)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      sub_1000755D4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 304) = sub_1008FA0F0(v11, v12, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10007550C(v9, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No peerTrustIdentifier for %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10007550C(*(void *)(v0 + 600), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    }

    sub_100073114();
    swift_allocError();
    *uint64_t v25 = 1;
    swift_willThrow();
    sub_10001DAB4(*(void *)(v0 + 472), (uint64_t *)&unk_10163B890);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      swift_getErrorValue();
      uint64_t v29 = Error.localizedDescription.getter();
      *(void *)(v0 + 296) = sub_1008FA0F0(v29, v30, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failure on share accept, can't send acceptance message: %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v31 = *(void *)(v0 + 488);
    uint64_t v32 = *(void *)(v0 + 392);
    uint64_t v33 = *(void *)(v0 + 400);
    sub_10001D074(*(void *)(v0 + 504), v31, (uint64_t *)&unk_101653D50);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
    {
      uint64_t v34 = *(void *)(v0 + 592);
      uint64_t v35 = *(void *)(v0 + 376);
      sub_10001DAB4(*(void *)(v0 + 488), (uint64_t *)&unk_101653D50);
      sub_1000754A4(v35, v34, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      BOOL v38 = os_log_type_enabled(v36, v37);
      uint64_t v39 = *(void *)(v0 + 592);
      if (v38)
      {
        uint64_t v61 = *(void *)(v0 + 504);
        uint64_t v40 = swift_slowAlloc();
        v65[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 141558275;
        *(void *)(v0 + 288) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v40 + 12) = 2081;
        sub_1000755D4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 272) = sub_1008FA0F0(v41, v42, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10007550C(v39, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failure on share accept, can't fetch locations, no shared beacon record for: %{private,mask.hash}s", (uint8_t *)v40, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v43 = v61;
      }
      else
      {
        uint64_t v48 = *(void *)(v0 + 504);

        sub_10007550C(v39, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        uint64_t v43 = v48;
      }
      sub_10001DAB4(v43, (uint64_t *)&unk_101653D50);
    }
    else
    {
      sub_10007556C(*(void *)(v0 + 488), *(void *)(v0 + 408), type metadata accessor for SharedBeaconRecord);
      id v44 = [self mainBundle];
      id v45 = [v44 bundleIdentifier];

      if (v45)
      {
        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v47 = v46;
      }
      else
      {
        uint64_t v62 = 0;
        uint64_t v47 = 0;
      }
      uint64_t v49 = sub_10080D1A8();
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      uint64_t v63 = *(void *)(v0 + 504);
      uint64_t v50 = *(void *)(v0 + 408);
      uint64_t v51 = *(void *)(v0 + 384);
      uint64_t v52 = *(void *)(v0 + 392);
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v53 = sub_1010ABA34(*(void *)(v0 + 264));
      swift_bridgeObjectRelease();
      uint64_t My = type metadata accessor for Feature.FindMy();
      *(void *)(v0 + 176) = My;
      *(void *)(v0 + 184) = sub_1000755D4((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
      uint64_t v55 = sub_10001D958((uint64_t *)(v0 + 152));
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v55, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
      char v56 = isFeatureEnabled(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 152);
      *(void *)(v0 + 16) = v53;
      *(unsigned char *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = &off_10159F9F8;
      *(unsigned char *)(v0 + 40) = 0;
      *(void *)(v0 + 48) = v62;
      *(void *)(v0 + 56) = v47;
      *(void *)(v0 + 64) = v49;
      *(unsigned char *)(v0 + 72) = v56 & 1;
      *(void *)(v0 + 80) = 0;
      *(void *)(v0 + 88) = 0;
      *(unsigned char *)(v0 + 96) = 1;
      uint64_t v57 = sub_10001CD44((void *)(v51 + 368), *(void *)(v51 + 392));
      sub_10000588C((uint64_t *)&unk_101657630);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_101342130;
      *(void *)(v58 + 56) = v52;
      *(void *)(v58 + 64) = sub_1000755D4(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
      unint64_t v59 = sub_10001D958((uint64_t *)(v58 + 32));
      sub_1000754A4(v50, (uint64_t)v59, type metadata accessor for SharedBeaconRecord);
      sub_100073168(v58, v0 + 16, *v57);
      swift_bridgeObjectRelease();
      sub_10007550C(v50, type metadata accessor for SharedBeaconRecord);
      sub_10001DAB4(v63, (uint64_t *)&unk_101653D50);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v60 = *(uint64_t (**)(void))(v0 + 8);
    return v60();
  }
  else
  {
    uint64_t v13 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0 + 696);
    uint64_t v14 = *(void *)(v0 + 576);
    uint64_t v15 = *(void *)(v0 + 512);
    uint64_t v16 = *(void *)(v0 + 448);
    uint64_t v17 = *(void *)(v0 + 416);
    uint64_t v18 = *(void *)(v0 + 376);
    uint64_t v19 = *(void *)(v0 + 384);
    sub_10007556C(*(void *)(v0 + 464), v16, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v20 = v18 + *(int *)(v14 + 28);
    *(void *)(v0 + 128) = type metadata accessor for CircleTrustAcceptEnvelopeV1(0);
    *(void *)(v0 + 136) = sub_1000755D4(&qword_101639EA8, (void (*)(uint64_t))type metadata accessor for CircleTrustAcceptEnvelopeV1);
    *(void *)(v0 + 144) = sub_1000755D4(&qword_101639EB0, (void (*)(uint64_t))type metadata accessor for CircleTrustAcceptEnvelopeV1);
    uint64_t v21 = sub_10001D958((uint64_t *)(v0 + 104));
    v13(v21, v20, v15);
    uint64_t v22 = v16 + *(int *)(v17 + 28);
    uint64_t v64 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_101670A50 + dword_101670A50);
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 832) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_10006A454;
    return v64(v19 + 240, v0 + 104, 3, v22);
  }
}

uint64_t sub_10006A454()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 840) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 384);
    uint64_t v4 = sub_10006AF68;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 384);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 104);
    uint64_t v4 = sub_10006A57C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10006A57C()
{
  uint64_t v57 = v0;
  uint64_t v1 = *(void *)(v0 + 448);
  uint64_t v2 = *(void *)(v0 + 432);
  sub_1000754A4(v1, *(void *)(v0 + 440), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  sub_1000754A4(v1, v2, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 440);
    uint64_t v52 = *(void *)(v0 + 432);
    uint64_t v6 = swift_slowAlloc();
    v56[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    sub_1000755D4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 320) = sub_1008FA0F0(v7, v8, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10007550C(v5, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    *(_WORD *)(v6 + 12) = 2080;
    uint64_t v9 = sub_1009C77D8();
    *(void *)(v0 + 328) = sub_1008FA0F0(v9, v10, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10007550C(v52, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Accepting share from peerTrustIdentifier: %s,\ncommunicationsIdentifier: %s.", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 432);
    sub_10007550C(*(void *)(v0 + 440), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    sub_10007550C(v11, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  }

  uint64_t v12 = *(void *)(v0 + 496);
  uint64_t v13 = *(void *)(v0 + 392);
  uint64_t v14 = *(void *)(v0 + 400);
  sub_10001D074(*(void *)(v0 + 504), v12, (uint64_t *)&unk_101653D50);
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  uint64_t v16 = *(void *)(v0 + 496);
  if (v15 == 1)
  {
    sub_10001DAB4(v16, (uint64_t *)&unk_101653D50);
    uint64_t v17 = *(void *)(v0 + 472);
    sub_10007550C(*(void *)(v0 + 448), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    sub_10001DAB4(v17, (uint64_t *)&unk_10163B890);
    uint64_t v18 = *(void *)(v0 + 488);
    uint64_t v19 = *(void *)(v0 + 392);
    uint64_t v20 = *(void *)(v0 + 400);
    sub_10001D074(*(void *)(v0 + 504), v18, (uint64_t *)&unk_101653D50);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
    {
      uint64_t v21 = *(void *)(v0 + 592);
      uint64_t v22 = *(void *)(v0 + 376);
      sub_10001DAB4(*(void *)(v0 + 488), (uint64_t *)&unk_101653D50);
      sub_1000754A4(v22, v21, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      BOOL v25 = os_log_type_enabled(v23, v24);
      uint64_t v26 = *(void *)(v0 + 592);
      if (v25)
      {
        uint64_t v54 = *(void *)(v0 + 504);
        uint64_t v27 = swift_slowAlloc();
        v56[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 141558275;
        *(void *)(v0 + 288) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v27 + 12) = 2081;
        sub_1000755D4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 272) = sub_1008FA0F0(v28, v29, v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10007550C(v26, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failure on share accept, can't fetch locations, no shared beacon record for: %{private,mask.hash}s", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v30 = v54;
      }
      else
      {
        uint64_t v38 = *(void *)(v0 + 504);

        sub_10007550C(v26, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        uint64_t v30 = v38;
      }
      sub_10001DAB4(v30, (uint64_t *)&unk_101653D50);
    }
    else
    {
      sub_10007556C(*(void *)(v0 + 488), *(void *)(v0 + 408), type metadata accessor for SharedBeaconRecord);
      id v34 = [self mainBundle];
      id v35 = [v34 bundleIdentifier];

      if (v35)
      {
        uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v37 = v36;
      }
      else
      {
        uint64_t v51 = 0;
        uint64_t v37 = 0;
      }
      uint64_t v39 = sub_10080D1A8();
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      uint64_t v53 = *(void *)(v0 + 504);
      uint64_t v40 = *(void *)(v0 + 408);
      uint64_t v41 = *(void *)(v0 + 384);
      uint64_t v42 = *(void *)(v0 + 392);
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v43 = sub_1010ABA34(*(void *)(v0 + 264));
      swift_bridgeObjectRelease();
      uint64_t My = type metadata accessor for Feature.FindMy();
      *(void *)(v0 + 176) = My;
      *(void *)(v0 + 184) = sub_1000755D4((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
      id v45 = sub_10001D958((uint64_t *)(v0 + 152));
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v45, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
      char v46 = isFeatureEnabled(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 152);
      *(void *)(v0 + 16) = v43;
      *(unsigned char *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = &off_10159F9F8;
      *(unsigned char *)(v0 + 40) = 0;
      *(void *)(v0 + 48) = v51;
      *(void *)(v0 + 56) = v37;
      *(void *)(v0 + 64) = v39;
      *(unsigned char *)(v0 + 72) = v46 & 1;
      *(void *)(v0 + 80) = 0;
      *(void *)(v0 + 88) = 0;
      *(unsigned char *)(v0 + 96) = 1;
      uint64_t v47 = sub_10001CD44((void *)(v41 + 368), *(void *)(v41 + 392));
      sub_10000588C((uint64_t *)&unk_101657630);
      uint64_t v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = xmmword_101342130;
      *(void *)(v48 + 56) = v42;
      *(void *)(v48 + 64) = sub_1000755D4(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
      uint64_t v49 = sub_10001D958((uint64_t *)(v48 + 32));
      sub_1000754A4(v40, (uint64_t)v49, type metadata accessor for SharedBeaconRecord);
      sub_100073168(v48, v0 + 16, *v47);
      swift_bridgeObjectRelease();
      sub_10007550C(v40, type metadata accessor for SharedBeaconRecord);
      sub_10001DAB4(v53, (uint64_t *)&unk_101653D50);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v50 = *(uint64_t (**)(void))(v0 + 8);
    return v50();
  }
  else
  {
    int v31 = *(unsigned __int8 *)(v16 + *(int *)(*(void *)(v0 + 392) + 64));
    sub_10007550C(v16, type metadata accessor for SharedBeaconRecord);
    uint64_t v55 = (uint64_t (*)(char, char))((char *)&dword_101662A98 + dword_101662A98);
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 848) = v32;
    void *v32 = v0;
    v32[1] = sub_10006B794;
    return v55(1, v31 == 4);
  }
}

uint64_t sub_10006AF68()
{
  uint64_t v42 = v0;
  uint64_t v1 = *(void *)(v0 + 448);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 104);
  sub_10007550C(v1, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  sub_10001DAB4(*(void *)(v0 + 472), (uint64_t *)&unk_10163B890);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    v41[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 296) = sub_1008FA0F0(v5, v6, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failure on share accept, can't send acceptance message: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(void *)(v0 + 488);
  uint64_t v8 = *(void *)(v0 + 392);
  uint64_t v9 = *(void *)(v0 + 400);
  sub_10001D074(*(void *)(v0 + 504), v7, (uint64_t *)&unk_101653D50);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    uint64_t v10 = *(void *)(v0 + 592);
    uint64_t v11 = *(void *)(v0 + 376);
    sub_10001DAB4(*(void *)(v0 + 488), (uint64_t *)&unk_101653D50);
    sub_1000754A4(v11, v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(void *)(v0 + 592);
    if (v14)
    {
      uint64_t v40 = *(void *)(v0 + 504);
      uint64_t v16 = swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 141558275;
      *(void *)(v0 + 288) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2081;
      sub_1000755D4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 272) = sub_1008FA0F0(v17, v18, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10007550C(v15, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failure on share accept, can't fetch locations, no shared beacon record for: %{private,mask.hash}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v19 = v40;
    }
    else
    {
      uint64_t v24 = *(void *)(v0 + 504);

      sub_10007550C(v15, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v19 = v24;
    }
    sub_10001DAB4(v19, (uint64_t *)&unk_101653D50);
  }
  else
  {
    sub_10007556C(*(void *)(v0 + 488), *(void *)(v0 + 408), type metadata accessor for SharedBeaconRecord);
    id v20 = [self mainBundle];
    id v21 = [v20 bundleIdentifier];

    if (v21)
    {
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;
    }
    else
    {
      uint64_t v38 = 0;
      uint64_t v23 = 0;
    }
    uint64_t v25 = sub_10080D1A8();
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    uint64_t v39 = *(void *)(v0 + 504);
    uint64_t v26 = *(void *)(v0 + 408);
    uint64_t v27 = *(void *)(v0 + 384);
    uint64_t v28 = *(void *)(v0 + 392);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v29 = sub_1010ABA34(*(void *)(v0 + 264));
    swift_bridgeObjectRelease();
    uint64_t My = type metadata accessor for Feature.FindMy();
    *(void *)(v0 + 176) = My;
    *(void *)(v0 + 184) = sub_1000755D4((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    int v31 = sub_10001D958((uint64_t *)(v0 + 152));
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v31, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
    char v32 = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 152);
    *(void *)(v0 + 16) = v29;
    *(unsigned char *)(v0 + 24) = 0;
    *(void *)(v0 + 32) = &off_10159F9F8;
    *(unsigned char *)(v0 + 40) = 0;
    *(void *)(v0 + 48) = v38;
    *(void *)(v0 + 56) = v23;
    *(void *)(v0 + 64) = v25;
    *(unsigned char *)(v0 + 72) = v32 & 1;
    *(void *)(v0 + 80) = 0;
    *(void *)(v0 + 88) = 0;
    *(unsigned char *)(v0 + 96) = 1;
    uint64_t v33 = sub_10001CD44((void *)(v27 + 368), *(void *)(v27 + 392));
    sub_10000588C((uint64_t *)&unk_101657630);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_101342130;
    *(void *)(v34 + 56) = v28;
    *(void *)(v34 + 64) = sub_1000755D4(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
    id v35 = sub_10001D958((uint64_t *)(v34 + 32));
    sub_1000754A4(v26, (uint64_t)v35, type metadata accessor for SharedBeaconRecord);
    sub_100073168(v34, v0 + 16, *v33);
    swift_bridgeObjectRelease();
    sub_10007550C(v26, type metadata accessor for SharedBeaconRecord);
    sub_10001DAB4(v39, (uint64_t *)&unk_101653D50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36();
}

uint64_t sub_10006B794()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 384);
  swift_task_dealloc();
  return _swift_task_switch(sub_10006B8A4, v1, 0);
}

uint64_t sub_10006B8A4()
{
  uint64_t v37 = v0;
  uint64_t v1 = *(void *)(v0 + 472);
  sub_10007550C(*(void *)(v0 + 448), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  sub_10001DAB4(v1, (uint64_t *)&unk_10163B890);
  uint64_t v2 = *(void *)(v0 + 488);
  uint64_t v3 = *(void *)(v0 + 392);
  uint64_t v4 = *(void *)(v0 + 400);
  sub_10001D074(*(void *)(v0 + 504), v2, (uint64_t *)&unk_101653D50);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    uint64_t v5 = *(void *)(v0 + 592);
    uint64_t v6 = *(void *)(v0 + 376);
    sub_10001DAB4(*(void *)(v0 + 488), (uint64_t *)&unk_101653D50);
    sub_1000754A4(v6, v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 592);
    if (v9)
    {
      uint64_t v35 = *(void *)(v0 + 504);
      uint64_t v11 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 141558275;
      *(void *)(v0 + 288) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2081;
      sub_1000755D4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 272) = sub_1008FA0F0(v12, v13, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10007550C(v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failure on share accept, can't fetch locations, no shared beacon record for: %{private,mask.hash}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v14 = v35;
    }
    else
    {
      uint64_t v19 = *(void *)(v0 + 504);

      sub_10007550C(v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v14 = v19;
    }
    sub_10001DAB4(v14, (uint64_t *)&unk_101653D50);
  }
  else
  {
    sub_10007556C(*(void *)(v0 + 488), *(void *)(v0 + 408), type metadata accessor for SharedBeaconRecord);
    id v15 = [self mainBundle];
    id v16 = [v15 bundleIdentifier];

    if (v16)
    {
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v18 = 0;
    }
    uint64_t v20 = sub_10080D1A8();
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    uint64_t v34 = *(void *)(v0 + 504);
    uint64_t v21 = *(void *)(v0 + 408);
    uint64_t v22 = *(void *)(v0 + 384);
    uint64_t v23 = *(void *)(v0 + 392);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v24 = sub_1010ABA34(*(void *)(v0 + 264));
    swift_bridgeObjectRelease();
    uint64_t My = type metadata accessor for Feature.FindMy();
    *(void *)(v0 + 176) = My;
    *(void *)(v0 + 184) = sub_1000755D4((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    uint64_t v26 = sub_10001D958((uint64_t *)(v0 + 152));
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v26, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
    char v27 = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 152);
    *(void *)(v0 + 16) = v24;
    *(unsigned char *)(v0 + 24) = 0;
    *(void *)(v0 + 32) = &off_10159F9F8;
    *(unsigned char *)(v0 + 40) = 0;
    *(void *)(v0 + 48) = v33;
    *(void *)(v0 + 56) = v18;
    *(void *)(v0 + 64) = v20;
    *(unsigned char *)(v0 + 72) = v27 & 1;
    *(void *)(v0 + 80) = 0;
    *(void *)(v0 + 88) = 0;
    *(unsigned char *)(v0 + 96) = 1;
    uint64_t v28 = sub_10001CD44((void *)(v22 + 368), *(void *)(v22 + 392));
    sub_10000588C((uint64_t *)&unk_101657630);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_101342130;
    *(void *)(v29 + 56) = v23;
    *(void *)(v29 + 64) = sub_1000755D4(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
    uint64_t v30 = sub_10001D958((uint64_t *)(v29 + 32));
    sub_1000754A4(v21, (uint64_t)v30, type metadata accessor for SharedBeaconRecord);
    sub_100073168(v29, v0 + 16, *v28);
    swift_bridgeObjectRelease();
    sub_10007550C(v21, type metadata accessor for SharedBeaconRecord);
    sub_10001DAB4(v34, (uint64_t *)&unk_101653D50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_10006BF64(uint64_t a1, uint64_t a2)
{
  v3[35] = a2;
  v3[36] = v2;
  v3[34] = a1;
  sub_10000588C(&qword_101638CF0);
  v3[37] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v3[38] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnerSharingCircle();
  v3[39] = v4;
  v3[40] = *(void *)(v4 - 8);
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  v3[44] = type metadata accessor for OwnerPeerTrust();
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  return _swift_task_switch(sub_10006C0E4, v2, 0);
}

uint64_t sub_10006C0E4()
{
  uint64_t v20 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[46];
  uint64_t v3 = v0[35];
  uint64_t v4 = type metadata accessor for Logger();
  v0[47] = sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_1000754A4(v3, v2, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  sub_1000754A4(v3, v1, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[45];
  uint64_t v9 = v0[46];
  if (v7)
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446723;
    type metadata accessor for UUID();
    sub_1000755D4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[31] = sub_1008FA0F0(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10007550C(v9, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    *(_WORD *)(v10 + 12) = 2160;
    v0[32] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 22) = 2081;
    uint64_t v13 = sub_1009C77D8();
    v0[33] = sub_1008FA0F0(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10007550C(v8, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Accepting share request from peerTrustIdentifier: %{public}s,\ncommunicationsIdentifier: %{private,mask.hash}s.", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10007550C(v0[46], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    sub_10007550C(v8, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  }

  uint64_t v15 = *(void *)(v0[36] + 112);
  v0[48] = v15;
  uint64_t v18 = (uint64_t (*)(char, uint64_t))((char *)&dword_101670AD0 + dword_101670AD0);
  id v16 = (void *)swift_task_alloc();
  v0[49] = v16;
  *id v16 = v0;
  v16[1] = sub_10006C464;
  return v18(2, v15);
}

uint64_t sub_10006C464(__int16 a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 288);
  *(_WORD *)(*(void *)v1 + 680) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10006C57C, v2, 0);
}

uint64_t sub_10006C57C()
{
  uint64_t v12 = v0;
  if ((*(_WORD *)(v0 + 680) & 0x100) != 0)
  {
    sub_1000754A4(*(void *)(v0 + 272), *(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void *)(v0 + 328);
    if (v4)
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 141558275;
      *(void *)(v0 + 232) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2081;
      type metadata accessor for UUID();
      sub_1000755D4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 240) = sub_1008FA0F0(v7, v8, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10007550C(v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Total shared item limit reached %{private,mask.hash}s.", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10007550C(*(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }

    type metadata accessor for SPBeaconSharingError(0);
    *(void *)(v0 + 224) = 7;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1000755D4((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + 384);
    return _swift_task_switch(sub_10006C8DC, v1, 0);
  }
}

uint64_t sub_10006C8DC()
{
  *(void *)(v0 + 400) = *(void *)(*(void *)(v0 + 384) + 136);
  swift_retain();
  return _swift_task_switch(sub_10006C950, 0, 0);
}

uint64_t sub_10006C950()
{
  uint64_t v1 = v0[50];
  uint64_t v2 = v0[48];
  os_log_type_t v3 = (void *)swift_task_alloc();
  v0[51] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  BOOL v4 = (void *)swift_task_alloc();
  v0[52] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *BOOL v4 = v0;
  v4[1] = sub_10006CA6C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 26, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075258, v3, v5);
}

uint64_t sub_10006CA6C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 288);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 424) = *(void *)(v1 + 208);
  return _swift_task_switch(sub_10006CBDC, v2, 0);
}

uint64_t sub_10006CBDC()
{
  uint64_t v29 = v0;
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 280);
  uint64_t v6 = (void *)swift_task_alloc();
  v6[2] = v4;
  v6[3] = v5;
  uint64_t v7 = sub_1000A3E84((uint64_t (*)(char *))sub_100075264, v6, v1);
  swift_task_dealloc();
  uint64_t v8 = *(int *)(v3 + 24);
  *(_DWORD *)(v0 + 664) = v8;
  sub_10000588C(&qword_10163BC50);
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v0 + 432) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v0 + 440) = v10;
  unint64_t v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_101342130;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 16))(v12 + v11, v5 + *(int *)(v2 + 20), v9);
  uint64_t v13 = sub_100DF29F8(v12);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (v13[2])
  {
    uint64_t v14 = sub_1002AD974(v4 + v8, (unint64_t)v13, 3, v7, 0, 2, 1);
    *(void *)(v0 + 448) = v14;
    *(void *)(v0 + 456) = v15;
    uint64_t v16 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v27 = (uint64_t (*)(uint64_t))((char *)&dword_101662A58 + dword_101662A58);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 464) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10006D0E8;
    return v27(v16);
  }
  else
  {
    type metadata accessor for BeaconSharingCircleTransformer.Error();
    sub_1000755D4(&qword_101639EF0, (void (*)(uint64_t))type metadata accessor for BeaconSharingCircleTransformer.Error);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v19, 1, 1, v9);
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      swift_getErrorValue();
      uint64_t v23 = Error.localizedDescription.getter();
      *(void *)(v0 + 176) = sub_1008FA0F0(v23, v24, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failure in share request acceptance, cloud update error %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_100074FA8();
    swift_allocError();
    *uint64_t v25 = 1;
    swift_willThrow();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
}

uint64_t sub_10006D0E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 288);
  *(void *)(*(void *)v1 + 472) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10006D200, v2, 0);
}

uint64_t sub_10006D200()
{
  *(void *)(v0[36] + 408) = v0[59];
  swift_bridgeObjectRelease();
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = sub_10070FD7C(v1);
  v0[60] = v2;
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t (*)(void *))((char *)&dword_101662AB8 + dword_101662AB8);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[61] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10006D2DC;
  return v5(v2);
}

uint64_t sub_10006D2DC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 288);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10006D408, v1, 0);
}

uint64_t sub_10006D408()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[62] = v1;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101660AD0);
  unint64_t v3 = sub_10007533C();
  *uint64_t v1 = v0;
  v1[1] = sub_10006D4D8;
  uint64_t v4 = v0[57];
  uint64_t v5 = v0[39];
  uint64_t v6 = v0[36];
  return Array<A>.asyncFlatMap<A>(_:)(&unk_101639EC8, v6, v4, v5, v2, v3);
}

uint64_t sub_10006D4D8(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 288);
  *(void *)(v3 + 504) = a1;
  *(void *)(v3 + 512) = v1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10006D5F0, v4, 0);
}

uint64_t sub_10006D5F0()
{
  char v27 = v0;
  uint64_t v1 = v0[56];
  uint64_t v2 = _swiftEmptyArrayStorage;
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = v0[40];
    unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v6 = *(void *)(v4 + 72);
    uint64_t v7 = v0[64];
    uint64_t v8 = v0[43];
    swift_bridgeObjectRetain();
    sub_1000754A4(v1 + v5, v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v9 = sub_100614BC0();
    if (v7)
    {
      sub_10007550C(v0[43], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v26 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 136315138;
        swift_getErrorValue();
        uint64_t v13 = Error.localizedDescription.getter();
        v0[22] = sub_1008FA0F0(v13, v14, (uint64_t *)&v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failure in share request acceptance, cloud update error %s", v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      sub_100074FA8();
      swift_allocError();
      *unint64_t v24 = 1;
      swift_willThrow();
      swift_errorRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v25 = (uint64_t (*)(void))v0[1];
      return v25();
    }
    uint64_t v15 = v9;
    sub_10007550C(v0[43], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_100442CF4(v15);
    uint64_t v16 = v3 - 1;
    if (v16)
    {
      uint64_t v17 = v1 + v6 + v5;
      do
      {
        sub_1000754A4(v17, v0[43], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v18 = sub_100614BC0();
        sub_10007550C(v0[43], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        sub_100442CF4(v18);
        v17 += v6;
        --v16;
      }
      while (v16);
    }
    swift_bridgeObjectRelease();
    uint64_t v2 = v26;
  }
  v0[65] = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = (void *)swift_task_alloc();
  v0[66] = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_10006DA8C;
  uint64_t v20 = v0[63];
  uint64_t v22 = v0[56];
  uint64_t v21 = v0[57];
  return sub_100070D28(v22, (uint64_t)v2, v21, v20);
}

uint64_t sub_10006DA8C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 536) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 288);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10006EFC8;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 288);
    uint64_t v4 = sub_10006DBDC;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_10006DBDC()
{
  uint64_t v1 = *(void *)(v0 + 288);
  long long v6 = *(_OWORD *)(v1 + 344);
  uint64_t v2 = *(void *)(v1 + 344);
  uint64_t v3 = sub_10001CD44((void *)(v1 + 320), v2);
  *(_OWORD *)(v0 + 80) = v6;
  uint64_t v4 = sub_10001D958((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(v4, v3, v2);
  return _swift_task_switch(sub_10006DCA8, 0, 0);
}

uint64_t sub_10006DCA8()
{
  uint64_t v1 = *(void *)(v0 + 448);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 544) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 320);
    int v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 668) = v4;
    *(void *)(v0 + 552) = *(void *)(v3 + 72);
    *(void *)(v0 + 568) = 0;
    uint64_t v5 = *(void *)(v0 + 304);
    uint64_t v6 = *(void *)(v0 + 288);
    uint64_t v7 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    swift_bridgeObjectRetain();
    v9(v5, 1, 1, v8);
    unint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101670AC8 + dword_101670AC8);
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 576) = v10;
    void *v10 = v0;
    v10[1] = sub_10006E020;
    uint64_t v11 = *(void *)(v0 + 304);
    return v14(v7, v6 + 160, v0 + 56, v11);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 288);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
    return _swift_task_switch(sub_10006DE6C, v13, 0);
  }
}

uint64_t sub_10006DE6C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 456) + 16);
  *(void *)(v0 + 560) = v1;
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(v0 + 320);
    *(_DWORD *)(v0 + 672) = *(_DWORD *)(v3 + 80);
    *(void *)(v0 + 592) = *(void *)(v3 + 72);
    while (1)
    {
      *(void *)(v0 + 600) = v2;
      uint64_t v4 = *(void *)(v0 + 336);
      uint64_t v5 = *(void *)(v0 + 312);
      sub_1000754A4(*(void *)(v0 + 456)+ ((*(unsigned __int8 *)(v0 + 672) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 672))+ *(void *)(v0 + 592) * v2, v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (*(unsigned char *)(v4 + *(int *)(v5 + 36)) != 2) {
        break;
      }
      sub_10007550C(*(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v2 = *(void *)(v0 + 600) + 1;
      if (v2 == *(void *)(v0 + 560)) {
        goto LABEL_5;
      }
    }
    uint64_t v7 = *(void *)(v0 + 312);
    *(unsigned char *)(v0 + 682) = 0x4000201u >> (8 * *(unsigned char *)(*(void *)(v0 + 272) + *(int *)(v7 + 28)));
    uint64_t v8 = *(void **)(v0 + 288);
    *(_DWORD *)(v0 + 676) = *(_DWORD *)(v7 + 20);
    uint64_t v9 = v8[43];
    uint64_t v10 = v8[45];
    uint64_t v11 = sub_10001CD44(v8 + 40, v9);
    *(void *)(v0 + 40) = v9;
    *(void *)(v0 + 48) = v10;
    uint64_t v12 = sub_10001D958((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v12, v11, v9);
    uint64_t v6 = sub_10006E538;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_10006E980;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10006E020()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 584) = v0;
  swift_task_dealloc();
  sub_10001DAB4(*(void *)(v2 + 304), (uint64_t *)&unk_10163AC90);
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_10006E304;
  }
  else
  {
    uint64_t v3 = sub_10006E160;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10006E160()
{
  uint64_t v1 = *(void *)(v0 + 568) + 1;
  if (v1 == *(void *)(v0 + 544))
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = *(void *)(v0 + 288);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
    return _swift_task_switch(sub_10006DE6C, v2, 0);
  }
  else
  {
    *(void *)(v0 + 568) = v1;
    uint64_t v3 = *(void *)(v0 + 304);
    uint64_t v4 = *(void *)(v0 + 288);
    unint64_t v5 = *(void *)(v0 + 448)
       + ((*(unsigned __int8 *)(v0 + 668) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 668))
       + *(void *)(v0 + 552) * v1;
    uint64_t v6 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
    uint64_t v10 = (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101670AC8
                                                                              + dword_101670AC8);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 576) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_10006E020;
    uint64_t v8 = *(void *)(v0 + 304);
    return v10(v5, v4 + 160, v0 + 56, v8);
  }
}

uint64_t sub_10006E304()
{
  return _swift_task_switch(sub_10006E320, *(void *)(v0 + 288), 0);
}

uint64_t sub_10006E320()
{
  uint64_t v12 = v0;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 7));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[23] = sub_1008FA0F0(v4, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure in share request acceptance, server share create error %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = (void *)swift_task_alloc();
  v0[80] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10006F25C;
  uint64_t v7 = v0[63];
  uint64_t v9 = v0[56];
  uint64_t v8 = v0[57];
  return sub_100073764(v9, v8, v7);
}

uint64_t sub_10006E538()
{
  uint64_t v1 = *(int *)(v0 + 676);
  uint64_t v2 = *(void *)(v0 + 336);
  sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 608) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10006E5F4;
  char v4 = *(unsigned char *)(v0 + 682);
  return sub_1005F63F8(v2 + v1, v4, 0);
}

uint64_t sub_10006E5F4(char a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    *(void *)(v4 + 656) = v1;
    uint64_t v5 = *(void *)(v4 + 288);
    uint64_t v6 = sub_10006F644;
  }
  else
  {
    *(unsigned char *)(v4 + 683) = a1 & 1;
    uint64_t v6 = sub_10006E72C;
    uint64_t v5 = 0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10006E72C()
{
  if (*(unsigned char *)(v0 + 683) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 288);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
    uint64_t v2 = sub_10006E7F4;
    uint64_t v3 = v1;
  }
  else
  {
    sub_100075398();
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = 0;
    swift_willThrow();
    *(void *)(v0 + 656) = v4;
    uint64_t v3 = *(void *)(v0 + 288);
    uint64_t v2 = sub_10006F644;
  }
  return _swift_task_switch(v2, v3, 0);
}

uint64_t sub_10006E7F4()
{
  while (1)
  {
    sub_10007550C(*(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v1 = *(void *)(v0 + 600) + 1;
    if (v1 == *(void *)(v0 + 560)) {
      break;
    }
    *(void *)(v0 + 600) = v1;
    uint64_t v2 = *(void *)(v0 + 336);
    uint64_t v3 = *(void *)(v0 + 312);
    sub_1000754A4(*(void *)(v0 + 456)+ ((*(unsigned __int8 *)(v0 + 672) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 672))+ *(void *)(v0 + 592) * v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (*(unsigned char *)(v2 + *(int *)(v3 + 36)) != 2)
    {
      uint64_t v4 = *(void *)(v0 + 312);
      *(unsigned char *)(v0 + 682) = 0x4000201u >> (8 * *(unsigned char *)(*(void *)(v0 + 272) + *(int *)(v4 + 28)));
      uint64_t v5 = *(void **)(v0 + 288);
      *(_DWORD *)(v0 + 676) = *(_DWORD *)(v4 + 20);
      uint64_t v6 = v5[43];
      uint64_t v7 = v5[45];
      uint64_t v8 = sub_10001CD44(v5 + 40, v6);
      *(void *)(v0 + 40) = v6;
      *(void *)(v0 + 48) = v7;
      uint64_t v9 = sub_10001D958((uint64_t *)(v0 + 16));
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v8, v6);
      uint64_t v10 = sub_10006E538;
      goto LABEL_5;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_10006E980;
LABEL_5:
  return _swift_task_switch(v10, 0, 0);
}

uint64_t sub_10006E980()
{
  uint64_t v1 = v0[36];
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[55] + 56))(v0[37], 1, 1, v0[54]);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101670AB0 + dword_101670AB0);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[77] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10006EA5C;
  uint64_t v3 = v0[56];
  uint64_t v4 = v0[48];
  uint64_t v5 = v0[37];
  return v7(v3, v5, v4, v1 + 120, v1 + 240);
}

uint64_t sub_10006EA5C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 624) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_10001DAB4(*(void *)(v2 + 296), &qword_101638CF0);
    uint64_t v3 = sub_10006EE74;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v6 = v2 + 288;
    uint64_t v5 = *(void *)(v2 + 288);
    sub_10001DAB4(*(void *)(v6 + 8), &qword_101638CF0);
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_10006EBA4;
    uint64_t v4 = v5;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_10006EBA4()
{
  uint64_t v1 = *(int *)(v0 + 664);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v6 = (uint64_t (*)(uint64_t, char))((char *)&dword_101665AD0 + dword_101665AD0);
  char v3 = *(unsigned char *)(v2 + *(int *)(*(void *)(v0 + 312) + 28));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 632) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10006EC6C;
  return v6(v2 + v1, v3);
}

uint64_t sub_10006EC6C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 288);
  swift_task_dealloc();
  return _swift_task_switch(sub_10006ED7C, v1, 0);
}

uint64_t sub_10006ED7C()
{
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006EE74()
{
  uint64_t v1 = *(void *)(v0 + 288);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10006EEE0, v1, 0);
}

uint64_t sub_10006EEE0()
{
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006EFC8()
{
  uint64_t v10 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 176) = sub_1008FA0F0(v4, v5, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure in share request acceptance, cloud update error %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_100074FA8();
  swift_allocError();
  *uint64_t v6 = 1;
  swift_willThrow();
  swift_errorRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10006F25C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 648) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 288);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v4 = sub_10006F550;
  }
  else {
    uint64_t v4 = sub_10006F42C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10006F42C()
{
  sub_100074FA8();
  swift_allocError();
  *uint64_t v1 = 2;
  swift_willThrow();
  swift_errorRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10006F550()
{
  swift_errorRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006F644()
{
  uint64_t v20 = v0;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 336);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v4 + 4) = sub_1008FA0F0(v5, v6, &v19);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure in share request acceptance, server share deletion error %s", (uint8_t *)v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 336);

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  for (uint64_t i = v3; ; uint64_t i = *(void *)(v0 + 336))
  {
    sub_10007550C(i, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v8 = *(void *)(v0 + 600) + 1;
    if (v8 == *(void *)(v0 + 560))
    {
      swift_bridgeObjectRelease();
      uint64_t v11 = sub_10006E980;
      goto LABEL_10;
    }
    *(void *)(v0 + 600) = v8;
    uint64_t v9 = *(void *)(v0 + 336);
    uint64_t v10 = *(void *)(v0 + 312);
    sub_1000754A4(*(void *)(v0 + 456)+ ((*(unsigned __int8 *)(v0 + 672) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 672))+ *(void *)(v0 + 592) * v8, v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (*(unsigned char *)(v9 + *(int *)(v10 + 36)) != 2) {
      break;
    }
  }
  uint64_t v12 = *(void *)(v0 + 312);
  *(unsigned char *)(v0 + 682) = 0x4000201u >> (8 * *(unsigned char *)(*(void *)(v0 + 272) + *(int *)(v12 + 28)));
  uint64_t v13 = *(void **)(v0 + 288);
  *(_DWORD *)(v0 + 676) = *(_DWORD *)(v12 + 20);
  uint64_t v14 = v13[43];
  uint64_t v15 = v13[45];
  uint64_t v16 = sub_10001CD44(v13 + 40, v14);
  *(void *)(v0 + 40) = v14;
  *(void *)(v0 + 48) = v15;
  uint64_t v17 = sub_10001D958((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v17, v16, v14);
  uint64_t v11 = sub_10006E538;
LABEL_10:
  return _swift_task_switch(v11, 0, 0);
}

uint64_t sub_10006F954()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 120);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 160);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 200);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 240);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 280);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 320);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 368);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10006F9BC()
{
  sub_10006F954();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ShareAcceptUseCase()
{
  return self;
}

uint64_t sub_10006FA0C()
{
  *(void *)(v1 + 112) = v0;
  return _swift_task_switch(sub_10006FA2C, v0, 0);
}

uint64_t sub_10006FA2C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 112) + 112);
  *(void *)(v0 + 120) = v1;
  return _swift_task_switch(sub_10006FA50, v1, 0);
}

uint64_t sub_10006FA50()
{
  *(void *)(v0 + 128) = *(void *)(*(void *)(v0 + 120) + 136);
  swift_retain();
  return _swift_task_switch(sub_10006FAC4, 0, 0);
}

uint64_t sub_10006FAC4()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[17] = v3;
  v3[2] = v1;
  v3[3] = sub_100075234;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[18] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10006FBD4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10007523C, v3, &type metadata for Int);
}

uint64_t sub_10006FBD4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 120);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 152) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_10006FD30, v2, 0);
}

uint64_t sub_10006FD30()
{
  *(void *)(v0 + 160) = *(void *)(*(void *)(v0 + 120) + 136);
  swift_retain();
  return _swift_task_switch(sub_10006FDA4, 0, 0);
}

uint64_t sub_10006FDA4()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[15];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[21] = v3;
  v3[2] = v1;
  v3[3] = sub_100075248;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[22] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10006FEB8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 3, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000757AC, v3, &type metadata for Int);
}

uint64_t sub_10006FEB8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 112);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 184) = *(void *)(v1 + 24);
  return _swift_task_switch(sub_100070028, v2, 0);
}

uint64_t sub_100070028()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 192) = qword_10170E390;
  return _swift_task_switch(sub_1000700C4, 0, 0);
}

uint64_t sub_1000700C4()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10007018C;
  uint64_t v2 = *(void *)(v0 + 192);
  return unsafeBlocking<A>(_:)(v0 + 32, sub_10001D704, v2, &type metadata for Configuration);
}

uint64_t sub_10007018C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1000702A4, 0, 0);
}

uint64_t sub_1000702A4()
{
  uint64_t v1 = v0[14];
  v0[26] = v0[4];
  return _swift_task_switch(sub_1000702C8, v1, 0);
}

uint64_t sub_1000702C8()
{
  unint64_t v1 = v0[19];
  unint64_t v2 = sub_1010AAFBC(v0[26]);
  swift_bridgeObjectRelease();
  if ((v1 & 0x8000000000000000) != 0 || v1 < v2)
  {
    v0[27] = qword_10170E390;
    return _swift_task_switch(sub_100070538, 0, 0);
  }
  else
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170D788);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = v0[19];
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 134218240;
      v0[7] = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2048;
      v0[8] = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "        Cannot accept share. acceptedExplicitSharesCount: %ld >= maxAcceptedSharedItems: %lu.", (uint8_t *)v7, 0x16u);
      swift_slowDealloc();
    }

    type metadata accessor for SPBeaconSharingError(0);
    v0[6] = 13;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1000755D4((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100070538()
{
  swift_retain();
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_100070600;
  uint64_t v2 = *(void *)(v0 + 216);
  return unsafeBlocking<A>(_:)(v0 + 72, sub_10001D704, v2, &type metadata for Configuration);
}

uint64_t sub_100070600()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100070718, 0, 0);
}

uint64_t sub_100070718()
{
  uint64_t v1 = v0[14];
  v0[29] = v0[9];
  return _swift_task_switch(sub_10007073C, v1, 0);
}

uint64_t sub_10007073C()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = sub_1010AAFD0(v0[29]);
  swift_bridgeObjectRelease();
  if (v1 >= v2)
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170D788);
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = v0[23];
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 134218240;
      v0[12] = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 12) = 2048;
      v0[13] = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "        Cannot accept share. totalPairedAccessory: %ld >= maxPairEligibleDevices: %ld.", (uint8_t *)v8, 0x16u);
      swift_slowDealloc();
    }

    type metadata accessor for SPBeaconSharingError(0);
    v0[11] = 12;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1000755D4((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(void))v0[1];
  }
  return v3();
}

uint64_t sub_100070968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for OwnerPeerTrust();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OwnerSharingCircle();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = static UUID.== infix(_:_:)();
  sub_1000754A4(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_1000754A4(a3, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  if ((v11 & 1) != 0 && *(void *)(*(void *)&v10[*(int *)(v8 + 32)] + 16))
  {
    uint64_t v12 = (uint64_t)&v7[*(int *)(v5 + 20)];
    swift_bridgeObjectRetain();
    sub_1007240CC(v12);
    char v14 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    char v14 = 0;
  }
  sub_10007550C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  sub_10007550C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  return v14 & 1;
}

uint64_t sub_100070B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_100070B44, a3, 0);
}

uint64_t sub_100070B44()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = v1 + *(int *)(type metadata accessor for OwnerSharingCircle() + 20);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100070BEC;
  return sub_100E5CB14(v2);
}

uint64_t sub_100070BEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100070D04, v2, 0);
}

uint64_t sub_100070D04()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100070D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for OwnerPeerTrust();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MemberPeerTrust();
  v5[13] = v7;
  v5[14] = *(void *)(v7 - 8);
  v5[15] = swift_task_alloc();
  unsigned char v5[16] = swift_task_alloc();
  sub_10000588C(&qword_101639E88);
  v5[17] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OwnerSharingCircle();
  v5[18] = v8;
  v5[19] = *(void *)(v8 - 8);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  return _swift_task_switch(sub_100070F08, v4, 0);
}

uint64_t sub_100070F08()
{
  uint64_t v40 = v0;
  uint64_t v1 = v0[4];
  uint64_t v2 = *(const char **)(v1 + 16);
  uint64_t v3 = "Code";
  if (!v2) {
    goto LABEL_10;
  }
  uint64_t v4 = v0[19];
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = qword_101636888;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v7 = 0;
    unint64_t v36 = v1 + v5;
    int v34 = *((void *)v3 + 77);
    uint64_t v33 = v4;
    do
    {
      uint64_t v3 = (const char *)(v7 + 1);
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_24;
      }
      uint64_t v8 = v0[21];
      uint64_t v9 = v36 + *(void *)(v4 + 72) * v7;
      uint64_t v10 = type metadata accessor for Logger();
      uint64_t v11 = sub_100010324(v10, (uint64_t)qword_10170D788);
      sub_1000754A4(v9, v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v1 = v11;
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      BOOL v14 = os_log_type_enabled(v12, v13);
      unint64_t v5 = v0[21];
      if (v14)
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = v34;
        *(void *)(v15 + 4) = 1752392040;
        *(_WORD *)(v15 + 12) = 2081;
        type metadata accessor for UUID();
        sub_1000755D4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v3 = (const char *)(v7 + 1);
        uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v1 = v17;
        *(void *)(v15 + 14) = sub_1008FA0F0(v16, v17, &v39);
        swift_bridgeObjectRelease();
        sub_10007550C(v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Data update on share request acceptance. Create %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v4 = v33;
        uint64_t v0 = v38;
        swift_slowDealloc();
      }
      else
      {
        sub_10007550C(v0[21], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }

      ++v7;
    }
    while (v3 != v2);
    swift_bridgeObjectRelease();
LABEL_10:
    uint64_t v1 = v0[6];
    uint64_t v2 = *(const char **)(v1 + 16);
    if (!v2) {
      break;
    }
    uint64_t v18 = v0[19];
    unint64_t v5 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    uint64_t v19 = qword_101636888;
    swift_bridgeObjectRetain();
    if (v19 != -1)
    {
      swift_once();
      uint64_t v18 = v0[19];
    }
    uint64_t v20 = 0;
    unint64_t v37 = v1 + v5;
    uint64_t v35 = v18;
    while (1)
    {
      uint64_t v3 = (const char *)(v20 + 1);
      if (__OFADD__(v20, 1)) {
        break;
      }
      uint64_t v21 = v0[20];
      uint64_t v22 = v37 + *(void *)(v18 + 72) * v20;
      uint64_t v23 = type metadata accessor for Logger();
      uint64_t v24 = sub_100010324(v23, (uint64_t)qword_10170D788);
      sub_1000754A4(v22, v21, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v1 = v24;
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      BOOL v27 = os_log_type_enabled(v25, v26);
      unint64_t v5 = v0[20];
      if (v27)
      {
        uint64_t v28 = swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 141558275;
        *(void *)(v28 + 4) = 1752392040;
        *(_WORD *)(v28 + 12) = 2081;
        type metadata accessor for UUID();
        sub_1000755D4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v1 = v30;
        *(void *)(v28 + 14) = sub_1008FA0F0(v29, v30, &v39);
        swift_bridgeObjectRelease();
        sub_10007550C(v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Data update on share request acceptance. Delete %{private,mask.hash}s", (uint8_t *)v28, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v18 = v35;
        uint64_t v0 = v38;
        swift_slowDealloc();
      }
      else
      {
        sub_10007550C(v0[20], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }

      ++v20;
      if (v3 == v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
LABEL_24:
    __break(1u);
LABEL_25:
    swift_once();
    uint64_t v4 = v0[19];
  }
LABEL_20:
  uint64_t v31 = *(void *)(v0[8] + 112);
  v0[22] = v31;
  return _swift_task_switch(sub_100071480, v31, 0);
}

uint64_t sub_100071480()
{
  *(void *)(v0 + 184) = *(void *)(*(void *)(v0 + 176) + 128);
  return _swift_task_switch(sub_1000714A8, 0, 0);
}

uint64_t sub_1000714A8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100071584;
  uint64_t v2 = *(void *)(v0 + 184);
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_10007561C, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_100071584()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100071680, 0, 0);
}

uint64_t sub_100071680()
{
  return _swift_task_switch(sub_10007169C, *(void *)(v0 + 176), 0);
}

uint64_t sub_10007169C()
{
  *(void *)(v0 + 200) = *(void *)(*(void *)(v0 + 176) + 136);
  swift_retain();
  return _swift_task_switch(sub_100071710, 0, 0);
}

uint64_t sub_100071710()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[22];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[26] = v3;
  v3[2] = v1;
  v3[3] = sub_100075624;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[27] = v4;
  uint64_t v5 = sub_10000588C(&qword_101639F10);
  *uint64_t v4 = v0;
  v4[1] = sub_10007182C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10007562C, v3, v5);
}

uint64_t sub_10007182C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 176);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 224) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_100071988, v2, 0);
}

uint64_t sub_100071988()
{
  *(void *)(v0 + 232) = *(void *)(*(void *)(v0 + 176) + 136);
  swift_retain();
  return _swift_task_switch(sub_1000719FC, 0, 0);
}

uint64_t sub_1000719FC()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[22];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[30] = v3;
  v3[2] = v1;
  v3[3] = sub_100075638;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[31] = v4;
  uint64_t v5 = sub_10000588C(&qword_101639F18);
  *uint64_t v4 = v0;
  v4[1] = sub_100071B18;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 3, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075640, v3, v5);
}

uint64_t sub_100071B18()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 256) = *(void *)(v1 + 24);
  return _swift_task_switch(sub_100071C88, v2, 0);
}

uint64_t sub_100071C88()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[17];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v7 = v0[4];
  uint64_t v6 = v0[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100EDEC94(v7, v6, v5, v4, v2, v1, v3);
  uint64_t v8 = v0[22];
  return _swift_task_switch(sub_100071E04, v8, 0);
}

uint64_t sub_100071E04()
{
  *(void *)(v0 + 264) = *(void *)(*(void *)(v0 + 176) + 128);
  return _swift_task_switch(sub_100071E2C, 0, 0);
}

uint64_t sub_100071E2C()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[17];
  uint64_t v3 = swift_task_alloc();
  v0[34] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[35] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100071F24;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_1000757B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100071F24()
{
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100072650;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100072040;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100072040()
{
  return _swift_task_switch(sub_10007205C, *(void *)(v0 + 64), 0);
}

uint64_t sub_10007205C()
{
  uint64_t v39 = v0;
  uint64_t v1 = v0[28];
  uint64_t v2 = *(void *)(v1 + 16);
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  uint64_t v4 = "Code";
  if (v2)
  {
    uint64_t v5 = v0[14];
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v7 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    uint64_t v36 = v7;
    do
    {
      sub_1000754A4(v6, v0[16], (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      if (*((void *)p_ivar_base_size + 273) != -1) {
        swift_once();
      }
      uint64_t v9 = v0[15];
      uint64_t v8 = v0[16];
      uint64_t v10 = type metadata accessor for Logger();
      sub_100010324(v10, (uint64_t)qword_10170D788);
      sub_1000754A4(v8, v9, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      BOOL v13 = os_log_type_enabled(v11, v12);
      uint64_t v14 = v0[15];
      if (v13)
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v38 = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 141558275;
        *(void *)(v15 + 4) = 1752392040;
        *(_WORD *)(v15 + 12) = 2081;
        type metadata accessor for UUID();
        sub_1000755D4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
        uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v15 + 14) = sub_1008FA0F0(v16, v17, &v38);
        swift_bridgeObjectRelease();
        sub_10007550C(v14, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Orphaned Member Peer Trust to Cleanup %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        uint64_t v4 = "Code";
        swift_slowDealloc();
        uint64_t v7 = v36;
        swift_slowDealloc();
      }
      else
      {
        sub_10007550C(v0[15], (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      }

      sub_10007550C(v0[16], (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      v6 += v7;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = v0[32];
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v20 = v0[10];
    uint64_t v21 = v18 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    uint64_t v22 = *(void *)(v20 + 72);
    swift_bridgeObjectRetain();
    int v35 = *((void *)v4 + 77);
    uint64_t v37 = v22;
    do
    {
      sub_1000754A4(v21, v0[12], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      if (*((void *)p_ivar_base_size + 273) != -1) {
        swift_once();
      }
      uint64_t v24 = v0[11];
      uint64_t v23 = v0[12];
      uint64_t v25 = type metadata accessor for Logger();
      sub_100010324(v25, (uint64_t)qword_10170D788);
      sub_1000754A4(v23, v24, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      os_log_type_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v29 = v0[11];
      if (v28)
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v38 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = v35;
        *(void *)(v30 + 4) = 1752392040;
        *(_WORD *)(v30 + 12) = 2081;
        type metadata accessor for UUID();
        sub_1000755D4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
        uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v30 + 14) = sub_1008FA0F0(v31, v32, &v38);
        swift_bridgeObjectRelease();
        sub_10007550C(v29, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Orphaned Owner Peer Trust to Cleanup %{private,mask.hash}s", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v22 = v37;
        swift_slowDealloc();
      }
      else
      {
        sub_10007550C(v0[11], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      }

      sub_10007550C(v0[12], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      v21 += v22;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
  }
  sub_10001DAB4(v0[17], &qword_101639E88);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = (uint64_t (*)(void))v0[1];
  return v33();
}

uint64_t sub_100072650()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000726BC, v1, 0);
}

uint64_t sub_1000726BC()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100072734, v1, 0);
}

uint64_t sub_100072734()
{
  sub_10001DAB4(*(void *)(v0 + 136), &qword_101639E88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000727FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v10 = a8;
  uint64_t v11 = a7;
  uint64_t v13 = a3;
  uint64_t v14 = *(void *)(a5 + 16);
  if (v14)
  {
    uint64_t v18 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
    uint64_t v19 = (uint64_t *)(a5 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80)));
    uint64_t v20 = *(void *)(v18 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE5C08(v19);
      if (v8) {
        goto LABEL_18;
      }
      uint64_t v19 = (uint64_t *)((char *)v19 + v20);
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        uint64_t v13 = a3;
        uint64_t v10 = a8;
        uint64_t v11 = a7;
        break;
      }
    }
  }
  uint64_t v21 = *(void *)(a6 + 16);
  if (v21)
  {
    uint64_t v22 = *(void *)(type metadata accessor for SharingCircleSecret() - 8);
    uint64_t v23 = (uint64_t *)(a6 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)));
    uint64_t v24 = *(void *)(v22 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE5828(v23);
      if (v8) {
        goto LABEL_18;
      }
      uint64_t v23 = (uint64_t *)((char *)v23 + v24);
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v25 = *(void *)(v11 + 16);
  if (v25)
  {
    uint64_t v26 = *(void *)(type metadata accessor for MemberPeerTrust() - 8);
    os_log_type_t v27 = (uint64_t *)(v11 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80)));
    uint64_t v28 = *(void *)(v26 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE5448(v27);
      if (v8) {
        break;
      }
      os_log_type_t v27 = (uint64_t *)((char *)v27 + v28);
      if (!--v25)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    swift_errorRelease();
    uint64_t v9 = 0;
    uint64_t v29 = *(void *)(v10 + 16);
    if (v29)
    {
LABEL_21:
      uint64_t v30 = *(void *)(type metadata accessor for OwnerPeerTrust() - 8);
      uint64_t v31 = (uint64_t *)(v10
                      + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80)));
      uint64_t v32 = *(void *)(v30 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_100EE5068(v31);
        if (v9) {
          break;
        }
        uint64_t v31 = (uint64_t *)((char *)v31 + v32);
        if (!--v29)
        {
          swift_bridgeObjectRelease();
          goto LABEL_25;
        }
      }
      swift_bridgeObjectRelease();
      swift_errorRelease();
      uint64_t v9 = 0;
      uint64_t v33 = *(void *)(a4 + 16);
      if (v33) {
        goto LABEL_29;
      }
      goto LABEL_26;
    }
  }
  else
  {
LABEL_16:
    uint64_t v29 = *(void *)(v10 + 16);
    if (v29) {
      goto LABEL_21;
    }
  }
LABEL_25:
  uint64_t v33 = *(void *)(a4 + 16);
  if (v33)
  {
LABEL_29:
    uint64_t v35 = *(void *)(type metadata accessor for SharingCircleSecret() - 8);
    uint64_t v36 = (uint64_t *)(a4 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80)));
    uint64_t v37 = *(void *)(v35 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE1F84(v36);
      if (v9) {
        goto LABEL_18;
      }
      uint64_t v36 = (uint64_t *)((char *)v36 + v37);
      if (!--v33)
      {
        swift_bridgeObjectRelease();
        uint64_t v34 = *(void *)(v13 + 16);
        if (!v34) {
          return;
        }
        goto LABEL_33;
      }
    }
  }
LABEL_26:
  uint64_t v34 = *(void *)(v13 + 16);
  if (v34)
  {
LABEL_33:
    uint64_t v38 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
    uint64_t v39 = (uint64_t *)(v13 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80)));
    uint64_t v40 = *(void *)(v38 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_100EE1FB0(v39);
      if (v9) {
        break;
      }
      uint64_t v39 = (uint64_t *)((char *)v39 + v40);
      --v34;
    }
    while (v34);
LABEL_18:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100072C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_100072C60, a3, 0);
}

uint64_t sub_100072C60()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = v1 + *(int *)(type metadata accessor for OwnerSharingCircle() + 20);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100072D08;
  return sub_100E5CB14(v2);
}

uint64_t sub_100072D08(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000757B4, v2, 0);
}

void sub_100072E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v12 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
    uint64_t v13 = (uint64_t *)(a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)));
    uint64_t v14 = *(void *)(v12 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE5C08(v13);
      if (v6) {
        break;
      }
      uint64_t v13 = (uint64_t *)((char *)v13 + v14);
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v15 = *(void *)(a4 + 16);
    if (v15)
    {
      uint64_t v16 = *(void *)(type metadata accessor for SharingCircleSecret() - 8);
      unint64_t v17 = (uint64_t *)(a4
                      + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)));
      uint64_t v18 = *(void *)(v16 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_100EE5828(v17);
        if (v6) {
          break;
        }
        unint64_t v17 = (uint64_t *)((char *)v17 + v18);
        if (!--v15)
        {
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      uint64_t v19 = *(void *)(a5 + 16);
      if (v19)
      {
        uint64_t v20 = *(void *)(type metadata accessor for SharingCircleSecret() - 8);
        uint64_t v21 = (uint64_t *)(a5
                        + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80)));
        uint64_t v22 = *(void *)(v20 + 72);
        swift_bridgeObjectRetain();
        while (1)
        {
          sub_100EE1F84(v21);
          if (v6) {
            break;
          }
          uint64_t v21 = (uint64_t *)((char *)v21 + v22);
          if (!--v19)
          {
            swift_bridgeObjectRelease();
            goto LABEL_16;
          }
        }
      }
      else
      {
LABEL_16:
        uint64_t v23 = *(void *)(a6 + 16);
        if (!v23) {
          return;
        }
        uint64_t v24 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
        uint64_t v25 = (uint64_t *)(a6
                        + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)));
        uint64_t v26 = *(void *)(v24 + 72);
        swift_bridgeObjectRetain();
        do
        {
          sub_100EE1FB0(v25);
          if (v6) {
            break;
          }
          uint64_t v25 = (uint64_t *)((char *)v25 + v26);
          --v23;
        }
        while (v23);
      }
    }
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_1000730D8@<X0>(size_t *a1@<X8>)
{
  return sub_100E59A6C(v1, a1);
}

uint64_t sub_1000730E0(uint64_t a1)
{
  return sub_100129E9C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000730F0()
{
  return sub_100075070((uint64_t (*)(uint64_t, uint64_t))sub_100E5DC5C);
}

uint64_t sub_100073108(uint64_t a1)
{
  return sub_10012A01C(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_100073114()
{
  unint64_t result = qword_101639E70;
  if (!qword_101639E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101639E70);
  }
  return result;
}

uint64_t sub_100073168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocationFetcher();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[3] = &_s13DefaultPolicyVN;
  v19[4] = sub_100075104();
  uint64_t v9 = swift_allocObject();
  v19[0] = v9;
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v9 + 64) = v10;
  *(_OWORD *)(v9 + 80) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(v9 + 96) = *(unsigned char *)(a2 + 80);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 32) = v11;
  uint64_t v12 = *(void *)(a3 + 280);
  sub_10001D010((uint64_t)v19, (uint64_t)v18);
  sub_1000751A0(a2);
  uint64_t v13 = qword_101636CB8;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_10170E330;
  swift_retain();
  unint64_t v15 = sub_10092DC10((uint64_t)_swiftEmptyArrayStorage);
  sub_1005A2BA4(v12, v18, v14, v15, v8);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1005A3050(a1, (uint64_t)sub_10007522C, v16);
  swift_release();
  sub_10007550C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
}

void *sub_100073334(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for OwnerSharingCircle();
  uint64_t v9 = __chkstk_darwin(v32);
  uint64_t v31 = (uint64_t)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v37 = (uint64_t)v28 - v12;
  unint64_t result = _swiftEmptyArrayStorage;
  uint64_t v41 = _swiftEmptyArrayStorage;
  uint64_t v34 = *(void *)(a1 + 16);
  if (v34)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
    v28[1] = v2;
    uint64_t v29 = (v15 + 32) & ~v15;
    uint64_t v33 = a1 + v29;
    uint64_t v35 = *(void *)(v11 + 72);
    uint64_t v38 = v6 + 16;
    uint64_t v39 = a2 + 56;
    uint64_t v30 = v6;
    uint64_t v16 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v17 = a2;
    uint64_t v40 = a2;
    do
    {
      uint64_t v36 = v14;
      sub_1000754A4(v33 + v35 * v14, v37, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (*(void *)(v17 + 16)
        && (sub_1000755D4(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID),
            uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v17 = v40,
            uint64_t v19 = -1 << *(unsigned char *)(v40 + 32),
            unint64_t v20 = v18 & ~v19,
            ((*(void *)(v39 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) != 0))
      {
        uint64_t v21 = ~v19;
        uint64_t v22 = *(void *)(v30 + 72);
        uint64_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
        while (1)
        {
          v23(v8, *(void *)(v17 + 48) + v22 * v20, v5);
          sub_1000755D4((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v16)(v8, v5);
          if (v24) {
            break;
          }
          unint64_t v20 = (v20 + 1) & v21;
          uint64_t v17 = v40;
          if (((*(void *)(v39 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
            goto LABEL_3;
          }
        }
        sub_10007556C(v37, v31, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v25 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B721C(0, v25[2] + 1, 1);
          uint64_t v25 = v41;
        }
        unint64_t v27 = v25[2];
        unint64_t v26 = v25[3];
        if (v27 >= v26 >> 1)
        {
          sub_1000B721C(v26 > 1, v27 + 1, 1);
          uint64_t v25 = v41;
        }
        v25[2] = v27 + 1;
        sub_10007556C(v31, (uint64_t)v25 + v29 + v27 * v35, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v17 = v40;
      }
      else
      {
LABEL_3:
        sub_10007550C(v37, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      uint64_t v14 = v36 + 1;
    }
    while (v36 + 1 != v34);
    return v41;
  }
  return result;
}

uint64_t sub_100073764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  void v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  sub_10000588C(&qword_101639EF8);
  v4[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SharingCircleSecretValue();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SharingCircleSecret();
  v4[12] = v6;
  v4[13] = *(void *)(v6 - 8);
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  sub_10000588C(&qword_101639E88);
  v4[18] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnerSharingCircle();
  v4[19] = v7;
  v4[20] = *(void *)(v7 - 8);
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v4[23] = v8;
  v4[24] = *(void *)(v8 - 8);
  v4[25] = swift_task_alloc();
  v4[26] = swift_task_alloc();
  v4[27] = swift_task_alloc();
  return _swift_task_switch(sub_100073A00, v3, 0);
}

uint64_t sub_100073A00()
{
  uint64_t v1 = v0[3];
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v4 = v0[24];
    uint64_t v5 = v0[20];
    uint64_t v18 = v0[19];
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v2, 0);
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v17 = *(void *)(v5 + 72);
    uint64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v7 = v0[27];
      uint64_t v9 = v0[22];
      uint64_t v8 = v0[23];
      sub_1000754A4(v6, v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, v9 + *(int *)(v18 + 20), v8);
      sub_10007550C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v3[2] + 1, 1);
        uint64_t v3 = v19;
      }
      unint64_t v11 = v3[2];
      unint64_t v10 = v3[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7034(v10 > 1, v11 + 1, 1);
        uint64_t v3 = v19;
      }
      uint64_t v12 = v0[27];
      uint64_t v13 = v0[23];
      v3[2] = v11 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))((unint64_t)v3+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v11, v12, v13);
      uint64_t v19 = v3;
      v6 += v17;
      --v2;
    }
    while (v2);
  }
  uint64_t v14 = v0[6];
  v0[28] = sub_101158244((uint64_t)v3);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v14 + 112);
  v0[29] = v15;
  return _swift_task_switch(sub_100073C00, v15, 0);
}

uint64_t sub_100073C00()
{
  *(void *)(v0 + 240) = *(void *)(*(void *)(v0 + 232) + 136);
  swift_retain();
  return _swift_task_switch(sub_100073C74, 0, 0);
}

uint64_t sub_100073C74()
{
  uint64_t v2 = v0[29];
  uint64_t v1 = v0[30];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[31] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[32] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_100073D8C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000757B0, v3, v5);
}

uint64_t sub_100073D8C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 264) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_100073EFC, v2, 0);
}

uint64_t sub_100073EFC()
{
  uint64_t v1 = sub_100073334(v0[33], v0[28]);
  v0[34] = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[35] = v2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_101660AD0);
  unint64_t v4 = sub_10007533C();
  *uint64_t v2 = v0;
  v2[1] = sub_100074004;
  uint64_t v5 = v0[19];
  uint64_t v6 = v0[6];
  return Array<A>.asyncFlatMap<A>(_:)(&unk_101639F08, v6, v1, v5, v3, v4);
}

uint64_t sub_100074004(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 48);
  *(void *)(v3 + 288) = a1;
  *(void *)(v3 + 296) = v1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10007411C, v4, 0);
}

uint64_t sub_10007411C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 192);
    uint64_t v4 = *(void *)(v0 + 160);
    uint64_t v95 = *(void *)(v0 + 168);
    uint64_t v5 = *(int **)(v0 + 152);
    sub_1000B721C(0, v2, 0);
    unint64_t v93 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v6 = v1 + v93;
    uint64_t v91 = *(void *)(v4 + 72);
    uint64_t v7 = (void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      uint64_t v9 = *(void *)(v0 + 176);
      uint64_t v8 = *(void *)(v0 + 184);
      unint64_t v10 = *(char **)(v0 + 168);
      sub_1000754A4(v6, v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      unint64_t v11 = *v7;
      (*v7)(&v10[v5[5]], v9 + v5[5], v8);
      v11(&v10[v5[6]], v9 + v5[6], v8);
      char v12 = *(unsigned char *)(v9 + v5[7]);
      uint64_t v13 = *(void *)(v9 + v5[8]);
      char v14 = *(unsigned char *)(v9 + v5[9]);
      *(void *)unint64_t v10 = 0;
      *(void *)(v95 + 8) = 0xC000000000000000;
      v10[v5[7]] = v12;
      *(void *)&v10[v5[8]] = v13;
      v10[v5[9]] = v14;
      swift_bridgeObjectRetain();
      sub_10007550C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B721C(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v16 = _swiftEmptyArrayStorage[2];
      unint64_t v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1) {
        sub_1000B721C(v15 > 1, v16 + 1, 1);
      }
      uint64_t v17 = *(void *)(v0 + 168);
      _swiftEmptyArrayStorage[2] = v16 + 1;
      sub_10007556C(v17, (uint64_t)_swiftEmptyArrayStorage + v93 + v16 * v91, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      v6 += v91;
      --v2;
    }
    while (v2);
  }
  uint64_t v18 = *(void *)(v0 + 40);
  int64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v20 = *(void *)(v0 + 192);
    uint64_t v21 = *(void *)(v0 + 104);
    uint64_t v88 = *(void *)(v0 + 112);
    uint64_t v22 = *(int **)(v0 + 96);
    uint64_t v23 = *(void *)(v0 + 72);
    uint64_t v81 = *(void *)(v0 + 88);
    uint64_t v82 = *(void *)(v0 + 80);
    sub_1000B732C(0, v19, 0);
    unint64_t v87 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    uint64_t v24 = v18 + v87;
    uint64_t v94 = (void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    uint64_t v25 = *(void *)(v21 + 72);
    unint64_t v26 = v22;
    uint64_t v85 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
    uint64_t v86 = v25;
    uint64_t v83 = (void (**)(uint64_t, uint64_t))(v20 + 8);
    uint64_t v84 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
    uint64_t v27 = *(void *)(v0 + 296);
    uint64_t v96 = v22;
    do
    {
      int64_t v92 = v19;
      uint64_t v29 = *(void *)(v0 + 200);
      uint64_t v28 = *(void *)(v0 + 208);
      uint64_t v30 = *(void *)(v0 + 184);
      uint64_t v31 = *(void *)(v0 + 128);
      uint64_t v32 = *(_OWORD **)(v0 + 56);
      uint64_t v90 = v24;
      sub_1000754A4(v24, v31, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      uint64_t v33 = *v94;
      (*v94)(v28, v31 + v26[5], v30);
      v33(v29, v31 + v26[6], v30);
      uint64_t v34 = v26[7];
      uint64_t v35 = (uint64_t *)(v31 + v26[8]);
      uint64_t v36 = *v35;
      unint64_t v37 = v35[1];
      uint64_t v38 = *(void *)(v31 + v34);
      uint64_t v39 = *(void **)(v31 + v34 + 8);
      sub_1000361E0(*v35, v37);
      swift_bridgeObjectRetain();
      sub_10131CEC8(v36, v37, v38, v39, v32);
      if (v27)
      {
        swift_errorRelease();
        uint64_t v40 = 1;
      }
      else
      {
        uint64_t v40 = 0;
      }
      uint64_t v42 = *(void *)(v0 + 120);
      uint64_t v41 = *(void *)(v0 + 128);
      uint64_t v44 = *(void *)(v0 + 56);
      uint64_t v43 = *(void *)(v0 + 64);
      (*v85)(v44, v40, 1, v43);
      sub_1000754A4(v41, v42, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      int v45 = (*v84)(v44, 1, v43);
      uint64_t v46 = *(void *)(v0 + 120);
      uint64_t v47 = *(uint64_t **)(v0 + 88);
      if (v45 == 1)
      {
        uint64_t v48 = *(void *)(v0 + 56);
        uint64_t v49 = (uint64_t *)(v46 + v26[8]);
        uint64_t v50 = *v49;
        unint64_t v51 = v49[1];
        sub_1000361E0(*v49, v51);
        sub_10007550C(v46, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
        *uint64_t v47 = v50;
        *(void *)(v81 + 8) = v51;
        swift_storeEnumTagMultiPayload();
        sub_10001DAB4(v48, &qword_101639EF8);
      }
      else
      {
        uint64_t v52 = *(void *)(v0 + 56);
        sub_10007550C(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
        sub_10007556C(v52, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      }
      uint64_t v53 = v26;
      uint64_t v55 = *(void *)(v0 + 200);
      uint64_t v54 = *(void *)(v0 + 208);
      uint64_t v56 = *(void *)(v0 + 184);
      uint64_t v57 = *(void **)(v0 + 112);
      uint64_t v59 = *(void *)(v0 + 80);
      uint64_t v58 = *(void *)(v0 + 88);
      *uint64_t v57 = 0;
      *(void *)(v88 + 8) = 0xC000000000000000;
      v33((uint64_t)v57 + v53[5], v54, v56);
      v33((uint64_t)v57 + v53[6], v55, v56);
      uint64_t v60 = sub_10131C9DC();
      uint64_t v61 = (void *)((char *)v57 + v53[8]);
      *uint64_t v61 = v60;
      v61[1] = v62;
      sub_1000754A4(v58, v59, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_10001CFB8(**(void **)(v0 + 80), *(void *)(v82 + 8));
          unint64_t v63 = 0xD000000000000012;
          uint64_t v64 = "ude";
          goto LABEL_23;
        case 2u:
          sub_10001CFB8(**(void **)(v0 + 80), *(void *)(v82 + 8));
          unint64_t v63 = 0xD000000000000011;
          uint64_t v64 = "circleSharedSecret";
          goto LABEL_23;
        case 3u:
          sub_10001CFB8(**(void **)(v0 + 80), *(void *)(v82 + 8));
          uint64_t v65 = "circleWildRootKey";
          goto LABEL_25;
        case 4u:
          sub_10007550C(*(void *)(v0 + 80), (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
          unint64_t v89 = 0xE90000000000006ELL;
          unint64_t v63 = 0x656B6F546E696F6ALL;
          break;
        case 5u:
          sub_10007550C(*(void *)(v0 + 80), (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
          unint64_t v63 = 0xD000000000000013;
          uint64_t v64 = "nearOwnerLocationKey";
LABEL_23:
          unint64_t v89 = (unint64_t)v64 | 0x8000000000000000;
          break;
        case 6u:
          sub_10001CFB8(**(void **)(v0 + 80), *(void *)(v82 + 8));
          uint64_t v65 = "delegatedSharingKey";
LABEL_25:
          unint64_t v89 = (unint64_t)v65 | 0x8000000000000000;
          unint64_t v63 = 0xD000000000000014;
          break;
        default:
          sub_10001CFB8(**(void **)(v0 + 80), *(void *)(v82 + 8));
          unint64_t v89 = 0xE700000000000000;
          unint64_t v63 = 0x6E776F6E6B6E75;
          break;
      }
      uint64_t v67 = *(void *)(v0 + 200);
      uint64_t v66 = *(void *)(v0 + 208);
      uint64_t v68 = *(void *)(v0 + 184);
      uint64_t v70 = *(void *)(v0 + 128);
      uint64_t v69 = *(void *)(v0 + 136);
      uint64_t v71 = *(void *)(v0 + 112);
      sub_10007550C(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      uint64_t v72 = *v83;
      (*v83)(v67, v68);
      v72(v66, v68);
      uint64_t v73 = (unint64_t *)(v71 + v96[7]);
      unint64_t *v73 = v63;
      v73[1] = v89;
      sub_10007556C(v71, v69, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      sub_10007550C(v70, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B732C(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v75 = _swiftEmptyArrayStorage[2];
      unint64_t v74 = _swiftEmptyArrayStorage[3];
      unint64_t v26 = v96;
      if (v75 >= v74 >> 1) {
        sub_1000B732C(v74 > 1, v75 + 1, 1);
      }
      uint64_t v76 = *(void *)(v0 + 136);
      _swiftEmptyArrayStorage[2] = v75 + 1;
      sub_10007556C(v76, (uint64_t)_swiftEmptyArrayStorage + v87 + v75 * v86, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      uint64_t v27 = 0;
      uint64_t v24 = v90 + v86;
      int64_t v19 = v92 - 1;
    }
    while (v92 != 1);
    uint64_t v77 = 0;
  }
  else
  {
    uint64_t v77 = *(void *)(v0 + 296);
  }
  sub_100EDEF60(*(void *)(v0 + 272), *(void *)(v0 + 288), (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, *(void *)(v0 + 144));
  if (v77)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v78 = *(uint64_t (**)(void))(v0 + 8);
    return v78();
  }
  else
  {
    uint64_t v80 = *(void *)(v0 + 232);
    return _swift_task_switch(sub_100074A84, v80, 0);
  }
}

uint64_t sub_100074A84()
{
  *(void *)(v0 + 304) = *(void *)(*(void *)(v0 + 232) + 128);
  return _swift_task_switch(sub_100074AAC, 0, 0);
}

uint64_t sub_100074AAC()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = v0[18];
  uint64_t v3 = swift_task_alloc();
  v0[39] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[40] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100074BA4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_1000757B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100074BA4()
{
  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100074DFC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100074CC0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100074CC0()
{
  return _swift_task_switch(sub_100074CDC, *(void *)(v0 + 48), 0);
}

uint64_t sub_100074CDC()
{
  sub_10001DAB4(*(void *)(v0 + 144), &qword_101639E88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100074DFC()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc();
  return _swift_task_switch(sub_100074E68, v1, 0);
}

uint64_t sub_100074E68()
{
  sub_10001DAB4(*(void *)(v0 + 144), &qword_101639E88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100074F88(uint64_t a1)
{
  sub_100EE2390(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_100074FA8()
{
  unint64_t result = qword_101639E98;
  if (!qword_101639E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639E98);
  }
  return result;
}

uint64_t sub_100074FFC(uint64_t a1)
{
  return sub_100ABADA4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100075008()
{
  return sub_100075070((uint64_t (*)(uint64_t, uint64_t))sub_100E5ABA8);
}

uint64_t sub_100075020(uint64_t a1)
{
  return sub_100129EFC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100075030()
{
  return sub_100075070((uint64_t (*)(uint64_t, uint64_t))sub_100E5F4A8);
}

uint64_t sub_100075048(uint64_t a1)
{
  return sub_100129F2C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100075058()
{
  return sub_100075070((uint64_t (*)(uint64_t, uint64_t))sub_100E591C4);
}

uint64_t sub_100075070(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_1000750F8(uint64_t a1)
{
  return sub_100129FBC(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_100075104()
{
  unint64_t result = qword_101639EB8;
  if (!qword_101639EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101639EB8);
  }
  return result;
}

uint64_t sub_100075158()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 97, 7);
}

uint64_t sub_1000751A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000751EC()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007522C()
{
  return sub_100470C38(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100075234@<X0>(uint64_t *a1@<X8>)
{
  return sub_100E58208(a1);
}

uint64_t sub_10007523C(uint64_t a1)
{
  return sub_100129ECC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100075248@<X0>(uint64_t *a1@<X8>)
{
  return sub_100E58234(a1);
}

uint64_t sub_100075250@<X0>(size_t *a1@<X8>)
{
  return sub_100E593F4(v1, a1);
}

uint64_t sub_100075258(uint64_t a1)
{
  return sub_100129CEC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100075264(uint64_t a1)
{
  return sub_100070968(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_100075284(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[3] = a2;
  v6[4] = v2;
  v6[1] = sub_10001D2E4;
  v6[2] = a1;
  return _swift_task_switch(sub_100070B44, v2, 0);
}

unint64_t sub_10007533C()
{
  unint64_t result = qword_101639ED0;
  if (!qword_101639ED0)
  {
    sub_10000592C((uint64_t *)&unk_101660AD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101639ED0);
  }
  return result;
}

unint64_t sub_100075398()
{
  unint64_t result = qword_101639EE8;
  if (!qword_101639EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639EE8);
  }
  return result;
}

uint64_t sub_1000753EC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[3] = a2;
  v6[4] = v2;
  v6[1] = sub_100033F68;
  v6[2] = a1;
  return _swift_task_switch(sub_100072C60, v2, 0);
}

uint64_t sub_1000754A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10007550C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10007556C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000755D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007561C(uint64_t a1)
{
  return sub_100AE0674(a1, v1);
}

uint64_t sub_100075624@<X0>(uint64_t *a1@<X8>)
{
  return sub_100E591F0(a1);
}

uint64_t sub_10007562C(uint64_t a1)
{
  return sub_10012A04C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100075638@<X0>(uint64_t *a1@<X8>)
{
  return sub_100E5921C(a1);
}

uint64_t sub_100075640(uint64_t a1)
{
  return sub_10012A07C(a1, v1[2], v1[3], v1[4]);
}

unsigned char *storeEnumTagSinglePayload for ShareAcceptUseCaseError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100075718);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareAcceptUseCaseError()
{
  return &type metadata for ShareAcceptUseCaseError;
}

unint64_t sub_100075754()
{
  unint64_t result = qword_101639F20;
  if (!qword_101639F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639F20);
  }
  return result;
}

void *sub_1000757BC(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_1000B6F10(0, v2, 0);
    unint64_t result = _swiftEmptyArrayStorage;
    unsigned int v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v6 = *v4;
      v4 += 9;
      uint64_t v5 = v6;
      uint64_t v9 = result;
      unint64_t v8 = result[2];
      unint64_t v7 = result[3];
      if (v8 >= v7 >> 1)
      {
        sub_1000B6F10(v7 > 1, v8 + 1, 1);
        unint64_t result = v9;
      }
      result[2] = v8 + 1;
      result[v8 + 4] = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

Swift::Int sub_10007587C()
{
  return Hasher._finalize()();
}

void sub_1000758C0()
{
}

Swift::Int sub_1000758E8()
{
  return Hasher._finalize()();
}

uint64_t sub_100075928()
{
  *(void *)(v1 + 120) = v0;
  swift_defaultActor_initialize();
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v1 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v1 + 80))
  {
    sub_10001CEB0((long long *)(v1 + 56), v1 + 16);
    sub_10001CD44((void *)(v1 + 16), *(void *)(v1 + 40));
    unsigned int v4 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    int v3 = (void *)swift_task_alloc();
    *(void *)(v1 + 128) = v3;
    *int v3 = v1;
    v3[1] = sub_100075A70;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100075A70(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 16;
  uint64_t v5 = *v1;
  *(void *)(*v1 + 136) = a1;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v3 + 120);
  if (a1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4);
    *(void *)(v6 + 112) = a1;
    type metadata accessor for SharingCircleKeyManager();
    uint64_t v7 = swift_allocObject();
    swift_retain_n();
    swift_defaultActor_initialize();
    type metadata accessor for KeyDropInterface();
    uint64_t v8 = swift_allocObject();
    swift_defaultActor_initialize();
    *(void *)(v8 + 112) = 0;
    *(void *)(v8 + 120) = 0;
    *(void *)(v7 + 112) = v8;
    *(void *)(v7 + 120) = a1;
    *(void *)(v6 + 120) = v7;
    return _swift_task_switch(sub_100075C90, v6, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4);
    sub_10008DDA4();
    swift_allocError();
    swift_willThrow();
    type metadata accessor for CheckDataIntegrityUseCase();
    swift_defaultActor_destroy();
    swift_deallocPartialClassInstance();
    uint64_t v9 = *(uint64_t (**)(void))(v5 + 8);
    return v9();
  }
}

uint64_t sub_100075C90()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 120);
  return v1(v2);
}

uint64_t sub_100075CF8()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for MemberSharingCircle();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v1[10] = v3;
  v1[11] = *(void *)(v3 - 8);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnerSharingCircle();
  v1[14] = v4;
  v1[15] = *(void *)(v4 - 8);
  v1[16] = swift_task_alloc();
  return _swift_task_switch(sub_100075E80, v0, 0);
}

uint64_t sub_100075E80()
{
  uint64_t v1 = v0[6];
  v0[2] = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v1 + 112);
  v0[17] = v2;
  return _swift_task_switch(sub_100075EB0, v2, 0);
}

uint64_t sub_100075EB0()
{
  *(void *)(v0 + 144) = *(void *)(*(void *)(v0 + 136) + 136);
  swift_retain();
  return _swift_task_switch(sub_100075F24, 0, 0);
}

uint64_t sub_100075F24()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[19] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[20] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_10007603C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 3, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000757B0, v3, v5);
}

uint64_t sub_10007603C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 168) = *(void *)(v1 + 24);
  return _swift_task_switch(sub_1000761AC, v2, 0);
}

uint64_t sub_1000761AC()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 176) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 120);
    uint64_t v4 = *(void *)(v0 + 128);
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v6 = *(int *)(*(void *)(v0 + 112) + 20);
    *(_DWORD *)(v0 + 320) = v6;
    int v7 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 324) = v7;
    *(void *)(v0 + 184) = *(void *)(v3 + 72);
    *(void *)(v0 + 192) = 0;
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v9 = *(void *)(v0 + 88);
    uint64_t v10 = v4 + v6;
    sub_100090D88(v1 + ((v7 + 32) & ~(unint64_t)v7), v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v5, v10, v8);
    sub_100090EA0(v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100076340;
    uint64_t v12 = *(void *)(v0 + 104);
    return sub_10007802C(v12);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void *)(v0 + 136);
    *(void *)(v0 + 32) = _swiftEmptyArrayStorage;
    return _swift_task_switch(sub_100076B80, v14, 0);
  }
}

uint64_t sub_100076340(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 208) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100076458, v2, 0);
}

uint64_t sub_100076458()
{
  uint64_t v1 = *(void **)(v0 + 208);
  if (v1)
  {
    sub_10000588C(&qword_10166BD20);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101347EF0;
    *(void *)(v2 + 32) = v1;
    specialized Array._endMutation()();
    id v3 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
    sub_10001D4B0(0, &qword_10163A098);
    id v4 = v1;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = [v3 initWithOwnedCircles:isa memberCircles:0];

    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 80));
    id v7 = [v6 ownedCircles];

    if (v7)
    {
      unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100442D20(v8);
    }
    uint64_t v9 = *(void *)(v0 + 192) + 1;
    if (v9 == *(void *)(v0 + 176))
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(v0 + 136);
      *(void *)(v0 + 32) = _swiftEmptyArrayStorage;
      return _swift_task_switch(sub_100076B80, v10, 0);
    }
    else
    {
      *(void *)(v0 + 192) = v9;
      uint64_t v13 = *(void *)(v0 + 128);
      uint64_t v14 = *(void *)(v0 + 104);
      uint64_t v15 = *(void *)(v0 + 80);
      uint64_t v16 = *(void *)(v0 + 88);
      uint64_t v17 = v13 + *(int *)(v0 + 320);
      sub_100090D88(*(void *)(v0 + 168)+ ((*(unsigned __int8 *)(v0 + 324) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 324))+ *(void *)(v0 + 184) * v9, v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, v17, v15);
      sub_100090EA0(v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 200) = v18;
      *uint64_t v18 = v0;
      v18[1] = sub_100076340;
      uint64_t v19 = *(void *)(v0 + 104);
      return sub_10007802C(v19);
    }
  }
  else
  {
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100076784;
    uint64_t v12 = *(void *)(v0 + 104);
    return sub_1000793F8(v12);
  }
}

uint64_t sub_100076784(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10007689C, v2, 0);
}

uint64_t sub_10007689C()
{
  uint64_t v1 = *(void **)(v0 + 224);
  if (v1)
  {
    sub_10000588C(&qword_10166BD20);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101347EF0;
    *(void *)(v2 + 32) = v1;
    uint64_t v19 = v2;
    specialized Array._endMutation()();
    id v3 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
    sub_10001D4B0(0, &qword_10163A090);
    id v4 = v1;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = [v3 initWithOwnedCircles:0 isa:v19 memberCircles:v19];
  }
  else
  {
    id v6 = [objc_allocWithZone((Class)SPItemSharingDataIntegrity) initWithOwnedCircles:0 memberCircles:0];
  }
  (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 80));
  id v7 = [v6 ownedCircles];

  if (v7)
  {
    sub_10001D4B0(0, &qword_10163A098);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100442D20(v8);
  }
  uint64_t v9 = *(void *)(v0 + 192) + 1;
  if (v9 == *(void *)(v0 + 176))
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void *)(v0 + 136);
    *(void *)(v0 + 32) = _swiftEmptyArrayStorage;
    return _swift_task_switch(sub_100076B80, v10, 0);
  }
  else
  {
    *(void *)(v0 + 192) = v9;
    uint64_t v11 = *(void *)(v0 + 128);
    uint64_t v12 = *(void *)(v0 + 104);
    uint64_t v13 = *(void *)(v0 + 80);
    uint64_t v14 = *(void *)(v0 + 88);
    uint64_t v15 = v11 + *(int *)(v0 + 320);
    sub_100090D88(*(void *)(v0 + 168)+ ((*(unsigned __int8 *)(v0 + 324) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 324))+ *(void *)(v0 + 184) * v9, v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v15, v13);
    sub_100090EA0(v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_100076340;
    uint64_t v17 = *(void *)(v0 + 104);
    return sub_10007802C(v17);
  }
}

uint64_t sub_100076B80()
{
  *(void *)(v0 + 232) = *(void *)(*(void *)(v0 + 136) + 136);
  swift_retain();
  return _swift_task_switch(sub_100076BF4, 0, 0);
}

uint64_t sub_100076BF4()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[17];
  id v3 = (void *)swift_task_alloc();
  v0[30] = v3;
  v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  id v4 = (void *)swift_task_alloc();
  v0[31] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  *id v4 = v0;
  v4[1] = sub_100076D10;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100091088, v3, v5);
}

uint64_t sub_100076D10()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 256) = *(void *)(v1 + 40);
  return _swift_task_switch(sub_100076E80, v2, 0);
}

uint64_t sub_100076E80()
{
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 264) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 64);
    uint64_t v4 = *(int *)(*(void *)(v0 + 56) + 20);
    *(_DWORD *)(v0 + 328) = v4;
    int v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 332) = v5;
    *(void *)(v0 + 272) = *(void *)(v3 + 72);
    *(void *)(v0 + 280) = 0;
    uint64_t v7 = *(void *)(v0 + 88);
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 72);
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v10 = v8 + v4;
    sub_100090D88(v1 + ((v5 + 32) & ~(unint64_t)v5), v8, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v9);
    sub_100090EA0(v8, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 288) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1000770D8;
    uint64_t v12 = *(void *)(v0 + 96);
    return sub_10007802C(v12);
  }
  else
  {
    swift_bridgeObjectRelease();
    id v14 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
    sub_10001D4B0(0, &qword_10163A098);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_10001D4B0(0, &qword_10163A090);
    Class v16 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v17 = [v14 initWithOwnedCircles:isa memberCircles:v16];

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(id))(v0 + 8);
    return v18(v17);
  }
}

uint64_t sub_1000770D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 296) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000771F0, v2, 0);
}

uint64_t sub_1000771F0()
{
  uint64_t v1 = *(void **)(v0 + 296);
  if (v1)
  {
    sub_10000588C(&qword_10166BD20);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101347EF0;
    *(void *)(v2 + 32) = v1;
    uint64_t v25 = v2;
    specialized Array._endMutation()();
    id v3 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
    sub_10001D4B0(0, &qword_10163A098);
    id v4 = v1;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = [v3 initWithOwnedCircles:isa, 0, v25];

    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 80));
    id v7 = [v6 memberCircles];

    if (v7)
    {
      sub_10001D4B0(0, &qword_10163A090);
      unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100442D38(v8);
    }
    uint64_t v9 = *(void *)(v0 + 280) + 1;
    if (v9 == *(void *)(v0 + 264))
    {
      swift_bridgeObjectRelease();
      id v10 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
      Class v11 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_10001D4B0(0, &qword_10163A090);
      Class v12 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v13 = [v10 initWithOwnedCircles:v11 memberCircles:v12];

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      id v14 = *(uint64_t (**)(id))(v0 + 8);
      return v14(v13);
    }
    else
    {
      *(void *)(v0 + 280) = v9;
      uint64_t v19 = *(void *)(v0 + 88);
      uint64_t v18 = *(void *)(v0 + 96);
      uint64_t v21 = *(void *)(v0 + 72);
      uint64_t v20 = *(void *)(v0 + 80);
      uint64_t v22 = v21 + *(int *)(v0 + 328);
      sub_100090D88(*(void *)(v0 + 256)+ ((*(unsigned __int8 *)(v0 + 332) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 332))+ *(void *)(v0 + 272) * v9, v21, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v22, v20);
      sub_100090EA0(v21, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v23 = (void *)swift_task_alloc();
      *(void *)(v0 + 288) = v23;
      *uint64_t v23 = v0;
      v23[1] = sub_1000770D8;
      uint64_t v24 = *(void *)(v0 + 96);
      return sub_10007802C(v24);
    }
  }
  else
  {
    Class v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v16;
    *Class v16 = v0;
    v16[1] = sub_1000775D8;
    uint64_t v17 = *(void *)(v0 + 96);
    return sub_1000793F8(v17);
  }
}

uint64_t sub_1000775D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000776F0, v2, 0);
}

uint64_t sub_1000776F0()
{
  uint64_t v1 = *(void **)(v0 + 312);
  if (v1)
  {
    sub_10000588C(&qword_10166BD20);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101347EF0;
    *(void *)(v2 + 32) = v1;
    uint64_t v23 = v2;
    specialized Array._endMutation()();
    id v3 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
    sub_10001D4B0(0, &qword_10163A090);
    id v4 = v1;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = [v3 initWithOwnedCircles:0 isa:v23 memberCircles:v23];
  }
  else
  {
    id v6 = [objc_allocWithZone((Class)SPItemSharingDataIntegrity) initWithOwnedCircles:0 memberCircles:0];
  }
  (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 80));
  id v7 = [v6 memberCircles];

  if (v7)
  {
    sub_10001D4B0(0, &qword_10163A090);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100442D38(v8);
  }
  uint64_t v9 = *(void *)(v0 + 280) + 1;
  if (v9 == *(void *)(v0 + 264))
  {
    swift_bridgeObjectRelease();
    id v10 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
    sub_10001D4B0(0, &qword_10163A098);
    Class v11 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_10001D4B0(0, &qword_10163A090);
    Class v12 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v13 = [v10 initWithOwnedCircles:v11 memberCircles:v12];

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v14 = *(uint64_t (**)(id))(v0 + 8);
    return v14(v13);
  }
  else
  {
    *(void *)(v0 + 280) = v9;
    uint64_t v17 = *(void *)(v0 + 88);
    uint64_t v16 = *(void *)(v0 + 96);
    uint64_t v19 = *(void *)(v0 + 72);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v20 = v19 + *(int *)(v0 + 328);
    sub_100090D88(*(void *)(v0 + 256)+ ((*(unsigned __int8 *)(v0 + 332) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 332))+ *(void *)(v0 + 272) * v9, v19, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v20, v18);
    sub_100090EA0(v19, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 288) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_1000770D8;
    uint64_t v22 = *(void *)(v0 + 96);
    return sub_10007802C(v22);
  }
}

uint64_t sub_100077A90(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  id v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *id v4 = v2;
  v4[1] = sub_100077B28;
  return sub_10007802C(a1);
}

uint64_t sub_100077B28(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 40) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100077C40, v2, 0);
}

uint64_t sub_100077C40()
{
  uint64_t v1 = (void *)v0[5];
  if (v1)
  {
    sub_10000588C(&qword_10166BD20);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101347EF0;
    *(void *)(v2 + 32) = v1;
    specialized Array._endMutation()();
    id v3 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
    sub_10001D4B0(0, &qword_10163A098);
    id v4 = v1;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = [v3 initWithOwnedCircles:isa memberCircles:0];

    id v7 = (uint64_t (*)(id))v0[1];
    return v7(v6);
  }
  else
  {
    uint64_t v9 = (void *)swift_task_alloc();
    v0[6] = v9;
    void *v9 = v0;
    v9[1] = sub_100077DD0;
    uint64_t v10 = v0[2];
    return sub_1000793F8(v10);
  }
}

uint64_t sub_100077DD0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100077EE8, v2, 0);
}

uint64_t sub_100077EE8()
{
  uint64_t v1 = *(void **)(v0 + 56);
  if (v1)
  {
    sub_10000588C(&qword_10166BD20);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101347EF0;
    *(void *)(v2 + 32) = v1;
    specialized Array._endMutation()();
    id v3 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
    sub_10001D4B0(0, &qword_10163A090);
    id v4 = v1;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = [v3 initWithOwnedCircles:0 memberCircles:isa];
  }
  else
  {
    id v6 = [objc_allocWithZone((Class)SPItemSharingDataIntegrity) initWithOwnedCircles:0 memberCircles:0];
  }
  id v7 = *(uint64_t (**)(id))(v0 + 8);
  return v7(v6);
}

uint64_t sub_10007802C(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = *(void *)(v4 + 64);
  v2[9] = swift_task_alloc();
  v2[10] = sub_10000588C((uint64_t *)&unk_101638D10);
  v2[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_100078184, v1, 0);
}

uint64_t sub_100078184()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 112);
  *(void *)(v0 + 120) = v1;
  return _swift_task_switch(sub_1000781A8, v1, 0);
}

uint64_t sub_1000781A8()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[4];
  v0[16] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  v0[17] = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_10007829C, 0, 0);
}

uint64_t sub_10007829C()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[18] = v3;
  v3[2] = v2;
  v3[3] = sub_100090CFC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[19] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000783A0;
  uint64_t v6 = v0[10];
  uint64_t v5 = v0[11];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090D14, v3, v6);
}

uint64_t sub_1000783A0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000784F0, v1, 0);
}

uint64_t sub_1000784F0()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 104) + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, (uint64_t *)&unk_101638D10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3(0);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 112);
    sub_100090D20(v2, v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _StringGuts.grow(_:)(22);
    *(void *)(v0 + 16) = 0;
    *(void *)(v0 + 24) = 0xE000000000000000;
    *(unsigned char *)(v0 + 288) = *(unsigned char *)(v5 + *(int *)(v1 + 28));
    _print_unlocked<A, B>(_:_:)();
    v6._countAndFlagsBits = 8250;
    v6._object = (void *)0xE200000000000000;
    String.append(_:)(v6);
    sub_1000909F0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 8236;
    v8._object = (void *)0xE200000000000000;
    String.append(_:)(v8);
    uint64_t v9 = *(int *)(v1 + 36);
    unint64_t v10 = 0xEB00000000646574;
    unint64_t v11 = 0x70656363616E752ELL;
    switch(*(unsigned char *)(v5 + v9))
    {
      case 1:
        unint64_t v10 = 0xE900000000000064;
        unint64_t v11 = 0x657470656363612ELL;
        break;
      case 2:
        unint64_t v10 = 0xEA00000000006465;
        unint64_t v11 = 0x747365757165722ELL;
        break;
      case 3:
        unint64_t v10 = 0xE500000000000000;
        unint64_t v11 = 0x746E65732ELL;
        break;
      case 4:
        unint64_t v10 = 0x80000001013F2860;
        unint64_t v11 = 0xD000000000000013;
        break;
      case 5:
        unint64_t v10 = 0xE700000000000000;
        unint64_t v11 = 0x64656C6961662ELL;
        break;
      default:
        break;
    }
    uint64_t v12 = *(void *)(v0 + 96);
    unint64_t v13 = v10;
    String.append(_:)(*(Swift::String *)&v11);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0x6E6F63616562202CLL;
    v14._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v14);
    *(_DWORD *)(v0 + 280) = *(_DWORD *)(v12 + 24);
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    id v16 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 160) = [v16 initWithValue:v17 severity:0];

    v18._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    id v19 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 168) = [v19 initWithValue:v20 severity:0];

    *(_DWORD *)(v0 + 284) = *(_DWORD *)(v12 + 32);
    uint64_t v21 = swift_bridgeObjectRetain();
    uint64_t v22 = sub_10070FB1C(v21);
    *(void *)(v0 + 176) = v22;
    swift_bridgeObjectRelease();
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_100078970;
    return sub_100083F1C(v22);
  }
}

uint64_t sub_100078970(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100078AA4, v2, 0);
}

uint64_t sub_100078AA4()
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(v0 + 112) + *(int *)(v0 + 284)) + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100078B50;
  uint64_t v3 = *(void *)(v0 + 112);
  return sub_10008550C(v3, v1);
}

uint64_t sub_100078B50(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(*v1 + 280);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v7 = *v1;
  *(void *)(v2 + 208) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 216) = v5;
  *uint64_t v5 = v7;
  v5[1] = sub_100078CC4;
  return sub_100081BE8(v4 + v3);
}

uint64_t sub_100078CC4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(*v1 + 280);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v7 = *v1;
  *(void *)(v2 + 224) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 232) = v5;
  *uint64_t v5 = v7;
  v5[1] = sub_100078E38;
  return sub_100082CCC(v4 + v3);
}

uint64_t sub_100078E38(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v7 = *v1;
  *(void *)(v3 + 240) = a1;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 248) = v4;
  *uint64_t v4 = v7;
  v4[1] = sub_100078F9C;
  uint64_t v5 = *(void *)(v2 + 112);
  return sub_100086490(v5);
}

uint64_t sub_100078F9C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(*v1 + 280);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v7 = *v1;
  *(void *)(v2 + 256) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 264) = v5;
  *uint64_t v5 = v7;
  v5[1] = sub_100079110;
  return sub_100083968(v4 + v3);
}

uint64_t sub_100079110(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 272) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100079228, v2, 0);
}

uint64_t sub_100079228()
{
  uint64_t v1 = (void *)v0[28];
  uint64_t v2 = (void *)v0[26];
  uint64_t v3 = (void *)v0[21];
  uint64_t v12 = (void *)v0[20];
  uint64_t v13 = v0[14];
  id v11 = objc_allocWithZone((Class)SPOwnedCircleDataIntegrity);
  sub_10001D4B0(0, &qword_10163A0E8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10001D4B0(0, &qword_10163A0F0);
  Class v5 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v6 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v7 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = [v11 initWithCircleRecord:v12 beaconRecord:v3 peerTrusts:isa sharedSecrets:v2 keySyncRecord:v1 observations:v5 itemSharingKey:v6 estimatedLocations:v7];

  sub_100090EA0(v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(id))v0[1];
  return v9(v8);
}

uint64_t sub_1000793F8(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = sub_10000588C((uint64_t *)&unk_101653D50);
  v2[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = *(void *)(v4 + 64);
  v2[9] = swift_task_alloc();
  v2[10] = sub_10000588C((uint64_t *)&unk_10163B7C0);
  v2[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MemberSharingCircle();
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_100079584, v1, 0);
}

uint64_t sub_100079584()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112);
  *(void *)(v0 + 120) = v1;
  return _swift_task_switch(sub_1000795A8, v1, 0);
}

uint64_t sub_1000795A8()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 16);
  *(void *)(v0 + 128) = *(void *)(v1 + 136);
  Class v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 136) = v6;
  *(void *)(v0 + 144) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v3);
  int v7 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 384) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 152) = v9;
  *(void *)(v9 + 16) = v1;
  unint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 160) = v10;
  *(void *)(v0 + 168) = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_1000796BC, 0, 0);
}

uint64_t sub_1000796BC()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[16];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[22] = v3;
  v3[2] = v2;
  v3[3] = sub_1000909BC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[23] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000797C4;
  uint64_t v6 = v0[10];
  uint64_t v5 = v0[11];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075020, v3, v6);
}

uint64_t sub_1000797C4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100079914, v1, 0);
}

uint64_t sub_100079914()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 104) + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, (uint64_t *)&unk_10163B7C0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3(0);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 112);
    sub_100090D20(v2, v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    UUID.uuidString.getter();
    v6._countAndFlagsBits = 2108704;
    v6._object = (void *)0xE300000000000000;
    String.append(_:)(v6);
    uint64_t v7 = *(int *)(v1 + 40);
    unint64_t v8 = 0xEB00000000646574;
    unint64_t v9 = 0x70656363616E752ELL;
    switch(*(unsigned char *)(v5 + v7))
    {
      case 1:
        unint64_t v8 = 0xE900000000000064;
        unint64_t v9 = 0x657470656363612ELL;
        break;
      case 2:
        unint64_t v8 = 0xEA00000000006465;
        unint64_t v9 = 0x747365757165722ELL;
        break;
      case 3:
        unint64_t v8 = 0xE500000000000000;
        unint64_t v9 = 0x746E65732ELL;
        break;
      case 4:
        unint64_t v8 = 0x80000001013F2860;
        unint64_t v9 = 0xD000000000000013;
        break;
      case 5:
        unint64_t v8 = 0xE700000000000000;
        unint64_t v9 = 0x64656C6961662ELL;
        break;
      default:
        break;
    }
    uint64_t v10 = *(void *)(v0 + 112);
    uint64_t v11 = *(void *)(v0 + 96);
    unint64_t v12 = v8;
    String.append(_:)(*(Swift::String *)&v9);
    swift_bridgeObjectRelease();
    id v13 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 192) = [v13 initWithValue:v14 severity:0];

    uint64_t v15 = *(int *)(v11 + 24);
    *(_DWORD *)(v0 + 388) = v15;
    uint64_t v16 = v10 + v15;
    NSString v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v17;
    *NSString v17 = v0;
    v17[1] = sub_100079BEC;
    return sub_100088ACC(v16);
  }
}

uint64_t sub_100079BEC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(*v1 + 388);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v7 = *v1;
  *(void *)(v2 + 208) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 216) = v5;
  *uint64_t v5 = v7;
  v5[1] = sub_100079D60;
  return sub_100089298(v4 + v3);
}

uint64_t sub_100079D60(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(*v1 + 388);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v7 = *v1;
  *(void *)(v2 + 224) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 232) = v5;
  *uint64_t v5 = v7;
  v5[1] = sub_100079ED4;
  return sub_1000899F8(v4 + v3);
}

uint64_t sub_100079ED4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100079FEC, v2, 0);
}

uint64_t sub_100079FEC()
{
  *(_DWORD *)(v0 + 392) = *(_DWORD *)(*(void *)(v0 + 96) + 36);
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = sub_10070FB1C(v1);
  *(void *)(v0 + 248) = v2;
  swift_bridgeObjectRelease();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10007A0B0;
  return sub_10008A3C8(v2);
}

uint64_t sub_10007A0B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 264) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10007A1E4, v2, 0);
}

uint64_t sub_10007A1E4()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 160);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 112) + *(int *)(v0 + 388);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 384) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 384);
  *(void *)(v0 + 272) = *(void *)(v3 + 136);
  v2(v4, v6, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 280) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_10007A2D8, 0, 0);
}

uint64_t sub_10007A2D8()
{
  uint64_t v2 = v0[34];
  uint64_t v1 = v0[35];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[36] = v3;
  v3[2] = v2;
  v3[3] = sub_1000909D8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[37] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10007A3DC;
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075048, v3, v6);
}

uint64_t sub_10007A3DC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_10007A52C, v1, 0);
}

uint64_t sub_10007A52C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = type metadata accessor for SharedBeaconRecord(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_101653D50);
    char v3 = 2;
  }
  else
  {
    char v3 = *(unsigned char *)(v1 + *(int *)(v2 + 64));
    sub_100090EA0(v1, type metadata accessor for SharedBeaconRecord);
  }
  *(unsigned char *)(v0 + 396) = v3;
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = v4 + *(int *)(*(void *)(v0 + 96) + 28);
  uint64_t v6 = *(void *)(*(void *)(v4 + *(int *)(v0 + 392)) + 16);
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_10007A678;
  return sub_10008B7F4(v5, v6, v3);
}

uint64_t sub_10007A678(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(*v1 + 388);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v7 = *v1;
  *(void *)(v2 + 312) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 320) = v5;
  *uint64_t v5 = v7;
  v5[1] = sub_10007A7EC;
  return sub_100081BE8(v4 + v3);
}

uint64_t sub_10007A7EC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(*v1 + 388);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v7 = *v1;
  *(void *)(v2 + 328) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 336) = v5;
  *uint64_t v5 = v7;
  v5[1] = sub_10007A960;
  return sub_100082CCC(v4 + v3);
}

uint64_t sub_10007A960(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(*v1 + 388);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v8 = *v1;
  *(void *)(v2 + 344) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 352) = v5;
  *uint64_t v5 = v8;
  v5[1] = sub_10007AAD8;
  char v6 = *(unsigned char *)(v2 + 396);
  return sub_10008C5E8(v4 + v3, v6);
}

uint64_t sub_10007AAD8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(int *)(*v1 + 388);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v7 = *v1;
  *(void *)(v2 + 360) = a1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 368) = v5;
  *uint64_t v5 = v7;
  v5[1] = sub_10007AC4C;
  return sub_100083968(v4 + v3);
}

uint64_t sub_10007AC4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 376) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10007AD64, v2, 0);
}

uint64_t sub_10007AD64()
{
  uint64_t v1 = (void *)v0[41];
  uint64_t v2 = (void *)v0[39];
  uint64_t v3 = v0[33];
  uint64_t v4 = (void *)v0[30];
  uint64_t v5 = (void *)v0[28];
  char v6 = (void *)v0[26];
  uint64_t v7 = (void *)v0[24];
  uint64_t v11 = v0[14];
  sub_10001D4B0(0, &qword_10163A090);
  id v8 = sub_10008DB84(v7, v6, v5, v4, v3, v2, v1);
  sub_100090EA0(v11, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(id))v0[1];
  return v9(v8);
}

uint64_t sub_10007AEA4()
{
  v1[37] = v0;
  v1[38] = sub_10000588C((uint64_t *)&unk_10163AC90);
  v1[39] = swift_task_alloc();
  uint64_t v2 = sub_10000588C(&qword_10163A030);
  v1[40] = v2;
  v1[41] = *(void *)(v2 - 8);
  v1[42] = swift_task_alloc();
  v1[43] = swift_task_alloc();
  uint64_t v3 = sub_10000588C(&qword_10163A050);
  v1[44] = v3;
  v1[45] = *(void *)(v3 - 8);
  v1[46] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_10163A058);
  v1[47] = v4;
  v1[48] = *(void *)(v4 - 8);
  v1[49] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for BeaconNamingRecord();
  v1[50] = v5;
  v1[51] = *(void *)(v5 - 8);
  v1[52] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0);
  v1[53] = v6;
  v1[54] = *(void *)(v6 - 8);
  v1[55] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for SharingCircleSecret();
  v1[56] = v7;
  v1[57] = *(void *)(v7 - 8);
  v1[58] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for MemberPeerTrust();
  v1[59] = v8;
  v1[60] = *(void *)(v8 - 8);
  v1[61] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OwnerPeerTrust();
  v1[62] = v9;
  v1[63] = *(void *)(v9 - 8);
  v1[64] = swift_task_alloc();
  v1[36] = _swiftEmptyArrayStorage;
  uint64_t v10 = (void *)swift_task_alloc();
  v1[65] = v10;
  void *v10 = v1;
  v10[1] = sub_10007B288;
  return sub_10007CE54((uint64_t)(v1 + 11));
}

uint64_t sub_10007B288()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  *(void *)(v3 + 528) = v0;
  *(_OWORD *)(v3 + 536) = *(_OWORD *)(v3 + 88);
  *(_OWORD *)(v3 + 552) = *(_OWORD *)(v3 + 104);
  *(_OWORD *)(v3 + 568) = *(_OWORD *)(v3 + 120);
  *(_OWORD *)(v3 + 584) = *(_OWORD *)(v3 + 136);
  *(void *)(v3 + 600) = *(void *)(v2 + 152);
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v2 + 296);
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10007CD68;
  }
  else
  {
    uint64_t v5 = sub_10007B40C;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10007B40C()
{
  uint64_t v1 = (void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 536);
  if (*(void *)(v2 + 16))
  {
    *(void *)(v0 + 232) = *(void *)(v0 + 496);
    sub_10000588C(&qword_1016607E0);
    String.init<A>(describing:)();
    int64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      uint64_t v4 = *(void *)(v0 + 536);
      uint64_t v5 = *(void *)(v0 + 504);
      sub_1000B6ED0(0, v3, 0);
      uint64_t v6 = v4 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      uint64_t v7 = *(void *)(v5 + 72);
      do
      {
        uint64_t v8 = *(void *)(v0 + 512);
        sub_100090D88(v6, v8, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        uint64_t v9 = UUID.uuidString.getter();
        uint64_t v11 = v10;
        sub_100090EA0(v8, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B6ED0(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v13 = _swiftEmptyArrayStorage[2];
        unint64_t v12 = _swiftEmptyArrayStorage[3];
        if (v13 >= v12 >> 1) {
          sub_1000B6ED0(v12 > 1, v13 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v13 + 1;
        NSString v14 = &_swiftEmptyArrayStorage[2 * v13];
        v14[4] = v9;
        uint64_t v14[5] = v11;
        v6 += v7;
        --v3;
      }
      while (v3);
      uint64_t v1 = (void *)(v0 + 288);
    }
    id v15 = objc_allocWithZone((Class)SPOrphanedRecords);
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v15 initWithRecordType:v16 records:isa];

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v18 = *(void *)(v0 + 544);
  if (*(void *)(v18 + 16))
  {
    *(void *)(v0 + 240) = *(void *)(v0 + 472);
    sub_10000588C(&qword_10163A060);
    String.init<A>(describing:)();
    int64_t v19 = *(void *)(v18 + 16);
    if (v19)
    {
      uint64_t v20 = *(void *)(v0 + 544);
      uint64_t v21 = *(void *)(v0 + 480);
      sub_1000B6ED0(0, v19, 0);
      uint64_t v22 = v20 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
      uint64_t v23 = *(void *)(v21 + 72);
      do
      {
        uint64_t v24 = *(void *)(v0 + 488);
        sub_100090D88(v22, v24, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        uint64_t v25 = UUID.uuidString.getter();
        uint64_t v27 = v26;
        sub_100090EA0(v24, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B6ED0(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v29 = _swiftEmptyArrayStorage[2];
        unint64_t v28 = _swiftEmptyArrayStorage[3];
        if (v29 >= v28 >> 1) {
          sub_1000B6ED0(v28 > 1, v29 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v29 + 1;
        uint64_t v30 = &_swiftEmptyArrayStorage[2 * v29];
        v30[4] = v25;
        v30[5] = v27;
        v22 += v23;
        --v19;
      }
      while (v19);
      uint64_t v1 = (void *)(v0 + 288);
    }
    id v31 = objc_allocWithZone((Class)SPOrphanedRecords);
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class v33 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v31 initWithRecordType:v32 records:v33];

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v34 = *(void *)(v0 + 552);
  if (*(void *)(v34 + 16))
  {
    *(void *)(v0 + 264) = *(void *)(v0 + 448);
    sub_10000588C(&qword_10163A068);
    String.init<A>(describing:)();
    int64_t v35 = *(void *)(v34 + 16);
    if (v35)
    {
      uint64_t v36 = *(void *)(v0 + 552);
      uint64_t v37 = *(void *)(v0 + 456);
      sub_1000B6ED0(0, v35, 0);
      uint64_t v38 = v36 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
      uint64_t v39 = *(void *)(v37 + 72);
      do
      {
        uint64_t v40 = *(void *)(v0 + 464);
        sub_100090D88(v38, v40, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
        type metadata accessor for UUID();
        sub_1000909F0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v173 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v178 = v41;
        v42._countAndFlagsBits = 0x29656C6372696328;
        v42._object = (void *)0xEA0000000000203ALL;
        String.append(_:)(v42);
        v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v43);
        swift_bridgeObjectRelease();
        sub_100090EA0(v40, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B6ED0(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v45 = _swiftEmptyArrayStorage[2];
        unint64_t v44 = _swiftEmptyArrayStorage[3];
        if (v45 >= v44 >> 1) {
          sub_1000B6ED0(v44 > 1, v45 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v45 + 1;
        uint64_t v46 = &_swiftEmptyArrayStorage[2 * v45];
        v46[4] = v173;
        v46[5] = v178;
        v38 += v39;
        --v35;
      }
      while (v35);
      uint64_t v1 = (void *)(v0 + 288);
    }
    id v47 = objc_allocWithZone((Class)SPOrphanedRecords);
    NSString v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class v49 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v47 initWithRecordType:v48 records:v49];

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v50 = *(void *)(v0 + 560);
  if (*(void *)(v50 + 16))
  {
    *(void *)(v0 + 208) = *(void *)(v0 + 424);
    sub_10000588C(&qword_101660D90);
    String.init<A>(describing:)();
    int64_t v51 = *(void *)(v50 + 16);
    if (v51)
    {
      uint64_t v52 = *(void *)(v0 + 560);
      uint64_t v53 = *(void *)(v0 + 432);
      sub_1000B6ED0(0, v51, 0);
      uint64_t v54 = v52 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
      uint64_t v55 = *(void *)(v53 + 72);
      do
      {
        uint64_t v56 = *(void *)(v0 + 440);
        sub_100090D88(v54, v56, type metadata accessor for SharedBeaconRecord);
        uint64_t v57 = UUID.uuidString.getter();
        uint64_t v59 = v58;
        sub_100090EA0(v56, type metadata accessor for SharedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B6ED0(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v61 = _swiftEmptyArrayStorage[2];
        unint64_t v60 = _swiftEmptyArrayStorage[3];
        if (v61 >= v60 >> 1) {
          sub_1000B6ED0(v60 > 1, v61 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v61 + 1;
        uint64_t v62 = &_swiftEmptyArrayStorage[2 * v61];
        v62[4] = v57;
        v62[5] = v59;
        v54 += v55;
        --v51;
      }
      while (v51);
      uint64_t v1 = (void *)(v0 + 288);
    }
    id v63 = objc_allocWithZone((Class)SPOrphanedRecords);
    NSString v64 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class v65 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v63 initWithRecordType:v64 records:v65];

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v66 = *(void *)(v0 + 568);
  if (*(void *)(v66 + 16))
  {
    *(void *)(v0 + 216) = *(void *)(v0 + 400);
    sub_10000588C(&qword_10163A070);
    String.init<A>(describing:)();
    int64_t v67 = *(void *)(v66 + 16);
    if (v67)
    {
      uint64_t v68 = *(void *)(v0 + 568);
      uint64_t v69 = *(void *)(v0 + 408);
      sub_1000B6ED0(0, v67, 0);
      uint64_t v70 = v68 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
      uint64_t v71 = *(void *)(v69 + 72);
      do
      {
        uint64_t v72 = *(void *)(v0 + 416);
        sub_100090D88(v70, v72, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
        type metadata accessor for UUID();
        sub_1000909F0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v174 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v179 = v73;
        v74._countAndFlagsBits = 0x296E6F6361656228;
        v74._object = (void *)0xEA0000000000203ALL;
        String.append(_:)(v74);
        v75._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v75);
        swift_bridgeObjectRelease();
        sub_100090EA0(v72, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B6ED0(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v77 = _swiftEmptyArrayStorage[2];
        unint64_t v76 = _swiftEmptyArrayStorage[3];
        if (v77 >= v76 >> 1) {
          sub_1000B6ED0(v76 > 1, v77 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v77 + 1;
        unint64_t v78 = &_swiftEmptyArrayStorage[2 * v77];
        v78[4] = v174;
        v78[5] = v179;
        v70 += v71;
        --v67;
      }
      while (v67);
      uint64_t v1 = (void *)(v0 + 288);
    }
    id v79 = objc_allocWithZone((Class)SPOrphanedRecords);
    NSString v80 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class v81 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v79 initWithRecordType:v80 records:v81];

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v82 = *(void *)(v0 + 576);
  if (*(void *)(v82 + 16))
  {
    *(void *)(v0 + 224) = &type metadata for KeyDropBeaconAttributes;
    sub_10000588C(&qword_10163A078);
    String.init<A>(describing:)();
    int64_t v83 = *(void *)(v82 + 16);
    if (v83)
    {
      uint64_t v84 = *(void *)(v0 + 576);
      uint64_t v85 = *(void *)(v0 + 384);
      uint64_t v170 = *(void *)(v0 + 376);
      sub_1000B6ED0(0, v83, 0);
      uint64_t v86 = v84 + ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80));
      uint64_t v166 = *(void *)(v85 + 72);
      do
      {
        uint64_t v87 = *(void *)(v0 + 392);
        sub_10001D074(v86, v87, &qword_10163A058);
        *(void *)(v0 + 176) = 0;
        *(void *)(v0 + 184) = 0xE000000000000000;
        type metadata accessor for UUID();
        sub_1000909F0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        v88._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v88);
        swift_bridgeObjectRelease();
        v89._countAndFlagsBits = 0x296E6F6361656228;
        v89._object = (void *)0xEA0000000000203ALL;
        String.append(_:)(v89);
        uint64_t v90 = v87 + *(int *)(v170 + 48);
        uint64_t v91 = *(void *)(v90 + 8);
        uint64_t v92 = *(void *)(v90 + 48);
        long long v93 = *(_OWORD *)(v90 + 16);
        long long v94 = *(_OWORD *)(v90 + 32);
        long long v95 = *(_OWORD *)(v90 + 56);
        *(void *)(v0 + 16) = *(void *)v90;
        *(void *)(v0 + 24) = v91;
        *(_OWORD *)(v0 + 32) = v93;
        *(_OWORD *)(v0 + 48) = v94;
        *(void *)(v0 + 64) = v92;
        *(_OWORD *)(v0 + 72) = v95;
        _print_unlocked<A, B>(_:_:)();
        uint64_t v96 = *(void *)(v0 + 176);
        uint64_t v97 = *(void *)(v0 + 184);
        sub_10001DAB4(v87, &qword_10163A058);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B6ED0(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v99 = _swiftEmptyArrayStorage[2];
        unint64_t v98 = _swiftEmptyArrayStorage[3];
        if (v99 >= v98 >> 1) {
          sub_1000B6ED0(v98 > 1, v99 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v99 + 1;
        uint64_t v100 = &_swiftEmptyArrayStorage[2 * v99];
        v100[4] = v96;
        v100[5] = v97;
        v86 += v166;
        --v83;
      }
      while (v83);
      uint64_t v1 = (void *)(v0 + 288);
    }
    id v101 = objc_allocWithZone((Class)SPOrphanedRecords);
    NSString v102 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class v103 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v101 initWithRecordType:v102 records:v103];

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v104 = *(void *)(v0 + 592);
  int64_t v105 = *(void *)(v104 + 16);
  if (v105)
  {
    uint64_t v106 = *(void *)(v0 + 360);
    uint64_t v167 = *(void *)(v0 + 352);
    sub_1000B6ED0(0, v105, 0);
    uint64_t v107 = v104 + ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80));
    uint64_t v164 = *(void *)(v106 + 72);
    do
    {
      uint64_t v108 = *(void *)(v0 + 368);
      sub_10001D074(v107, v108, &qword_10163A050);
      type metadata accessor for UUID();
      sub_1000909F0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v175 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v180 = v109;
      v110._countAndFlagsBits = 0x296E6F6361656228;
      v110._object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v110);
      *(_OWORD *)(v0 + 248) = *(_OWORD *)(v108 + *(int *)(v167 + 48));
      *(void *)(v0 + 192) = 0;
      *(void *)(v0 + 200) = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)();
      v111._countAndFlagsBits = 3026478;
      v111._object = (void *)0xE300000000000000;
      String.append(_:)(v111);
      _print_unlocked<A, B>(_:_:)();
      String.append(_:)(*(Swift::String *)(v0 + 192));
      swift_bridgeObjectRelease();
      sub_10001DAB4(v108, &qword_10163A050);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B6ED0(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v113 = _swiftEmptyArrayStorage[2];
      unint64_t v112 = _swiftEmptyArrayStorage[3];
      if (v113 >= v112 >> 1) {
        sub_1000B6ED0(v112 > 1, v113 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v113 + 1;
      uint64_t v114 = &_swiftEmptyArrayStorage[2 * v113];
      v114[4] = v175;
      v114[5] = v180;
      v107 += v164;
      --v105;
    }
    while (v105);
    id v115 = objc_allocWithZone((Class)SPOrphanedRecords);
    NSString v116 = String._bridgeToObjectiveC()();
    Class v117 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v115 initWithRecordType:v116 records:v117];

    uint64_t v1 = (void *)(v0 + 288);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v0 + 288) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 288) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (*(void *)(*(void *)(v0 + 600) + 16))
  {
    int64_t v118 = *(void *)(v104 + 16);
    if (v118)
    {
      uint64_t v119 = *(void *)(v0 + 592);
      uint64_t v120 = *(void *)(v0 + 360);
      uint64_t v168 = *(void *)(v0 + 352);
      sub_1000B6ED0(0, v118, 0);
      uint64_t v121 = v119 + ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80));
      uint64_t v165 = *(void *)(v120 + 72);
      do
      {
        uint64_t v122 = *(void *)(v0 + 368);
        sub_10001D074(v121, v122, &qword_10163A050);
        type metadata accessor for UUID();
        sub_1000909F0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v176 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v181 = v123;
        v124._countAndFlagsBits = 0x296E6F6361656228;
        v124._object = (void *)0xEA0000000000203ALL;
        String.append(_:)(v124);
        *(_OWORD *)(v0 + 272) = *(_OWORD *)(v122 + *(int *)(v168 + 48));
        *(void *)(v0 + 160) = 0;
        *(void *)(v0 + 168) = 0xE000000000000000;
        _print_unlocked<A, B>(_:_:)();
        v125._countAndFlagsBits = 3026478;
        v125._object = (void *)0xE300000000000000;
        String.append(_:)(v125);
        _print_unlocked<A, B>(_:_:)();
        String.append(_:)(*(Swift::String *)(v0 + 160));
        swift_bridgeObjectRelease();
        sub_10001DAB4(v122, &qword_10163A050);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B6ED0(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v127 = _swiftEmptyArrayStorage[2];
        unint64_t v126 = _swiftEmptyArrayStorage[3];
        if (v127 >= v126 >> 1) {
          sub_1000B6ED0(v126 > 1, v127 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v127 + 1;
        uint64_t v128 = &_swiftEmptyArrayStorage[2 * v127];
        v128[4] = v176;
        v128[5] = v181;
        v121 += v165;
        --v118;
      }
      while (v118);
      uint64_t v1 = (void *)(v0 + 288);
    }
    id v129 = objc_allocWithZone((Class)SPOrphanedRecords);
    NSString v130 = String._bridgeToObjectiveC()();
    Class v131 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v129 initWithRecordType:v130 records:v131];

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v132 = *(void *)(v0 + 584);
  uint64_t v133 = (void *)v0;
  int64_t v134 = *(void *)(v132 + 16);
  if (v134)
  {
    uint64_t v135 = v133[41];
    uint64_t v171 = v133[40];
    uint64_t v172 = v133;
    sub_1000B6ED0(0, v134, 0);
    uint64_t v136 = v132 + ((*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80));
    uint64_t v169 = *(void *)(v135 + 72);
    do
    {
      uint64_t v138 = v172[42];
      uint64_t v137 = v172[43];
      uint64_t v139 = v172[39];
      sub_10001D074(v136, v137, &qword_10163A030);
      uint64_t v140 = type metadata accessor for UUID();
      sub_1000909F0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v177 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v182 = v141;
      v142._countAndFlagsBits = 0x6449657261687328;
      v142._object = (void *)0xEB00000000203A29;
      String.append(_:)(v142);
      uint64_t v143 = *(int *)(v171 + 48);
      uint64_t v144 = v138 + v143;
      uint64_t v145 = v137 + v143;
      uint64_t v146 = *(void *)(v140 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 16))(v138, v137, v140);
      sub_100090D88(v145, v144, type metadata accessor for DelegatedBeaconMetadata);
      uint64_t v147 = type metadata accessor for DelegatedBeaconMetadata(0);
      sub_10001D074(v144 + *(int *)(v147 + 24), v139, (uint64_t *)&unk_10163AC90);
      sub_100090EA0(v144, type metadata accessor for DelegatedBeaconMetadata);
      uint64_t v148 = String.init<A>(describing:)();
      uint64_t v150 = v149;
      (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v138, v140);
      v151._countAndFlagsBits = v148;
      v151._object = v150;
      String.append(_:)(v151);
      swift_bridgeObjectRelease();
      sub_10001DAB4(v137, &qword_10163A030);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B6ED0(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v153 = _swiftEmptyArrayStorage[2];
      unint64_t v152 = _swiftEmptyArrayStorage[3];
      if (v153 >= v152 >> 1) {
        sub_1000B6ED0(v152 > 1, v153 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v153 + 1;
      uint64_t v154 = &_swiftEmptyArrayStorage[2 * v153];
      v154[4] = v177;
      v154[5] = v182;
      v136 += v169;
      --v134;
    }
    while (v134);
    uint64_t v155 = v172;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v156 = objc_allocWithZone((Class)SPOrphanedRecords);
    NSString v157 = String._bridgeToObjectiveC()();
    Class v158 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v156 initWithRecordType:v157 records:v158];

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v172[36] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v172[36] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v155 = v133;
  }
  sub_100A9A604(v155[36]);
  swift_bridgeObjectRelease();
  id v159 = objc_allocWithZone((Class)SPOrphanedRecordsResult);
  Class v160 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v161 = [v159 initWithRecordsInfo:v160];

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v162 = (uint64_t (*)(id))v155[1];
  return v162(v161);
}

uint64_t sub_10007CD68()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007CE54(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = sub_10000588C(&qword_10163A030);
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[15] = *(void *)(type metadata accessor for DelegatedBeaconMetadata(0) - 8);
  v2[16] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[17] = v4;
  v2[18] = *(void *)(v4 - 8);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v2[22] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10007D014;
  return sub_10007FE54();
}

uint64_t sub_10007D014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 88);
  v4[23] = a1;
  v4[24] = a2;
  v4[25] = a3;
  swift_task_dealloc();
  return _swift_task_switch(sub_10007D130, v5, 0);
}

uint64_t sub_10007D130()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 88) + 112);
  *(void *)(v0 + 208) = v1;
  return _swift_task_switch(sub_10007D154, v1, 0);
}

uint64_t sub_10007D154()
{
  *(void *)(v0 + 216) = *(void *)(*(void *)(v0 + 208) + 136);
  swift_retain();
  return _swift_task_switch(sub_10007D1C8, 0, 0);
}

uint64_t sub_10007D1C8()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[28] = v3;
  v3[2] = v1;
  v3[3] = sub_10008DDF8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[29] = v4;
  uint64_t v5 = sub_10000588C(&qword_101639F18);
  *uint64_t v4 = v0;
  v4[1] = sub_10007D2E0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075640, v3, v5);
}

uint64_t sub_10007D2E0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 240) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_10007D450, v2, 0);
}

uint64_t sub_10007D450()
{
  uint64_t v1 = v0[30];
  uint64_t v3 = v0[25];
  uint64_t v2 = v0[26];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[31] = sub_10008F0BC(v1, v3);
  v0[32] = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007D520, v2, 0);
}

uint64_t sub_10007D520()
{
  *(void *)(v0 + 264) = *(void *)(*(void *)(v0 + 208) + 136);
  swift_retain();
  return _swift_task_switch(sub_10007D594, 0, 0);
}

uint64_t sub_10007D594()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[26];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[34] = v3;
  v3[2] = v1;
  v3[3] = sub_10008F4E0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[35] = v4;
  uint64_t v5 = sub_10000588C(&qword_101639F10);
  *uint64_t v4 = v0;
  v4[1] = sub_10007D6B0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 3, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10007562C, v3, v5);
}

uint64_t sub_10007D6B0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 288) = *(void *)(v1 + 24);
  return _swift_task_switch(sub_10007D820, v2, 0);
}

uint64_t sub_10007D820()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[32];
  uint64_t v4 = v0[25];
  uint64_t v3 = v0[26];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[37] = sub_10008F4E8(v1, v4);
  v0[38] = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007D8F0, v3, 0);
}

uint64_t sub_10007D8F0()
{
  *(void *)(v0 + 312) = *(void *)(*(void *)(v0 + 208) + 136);
  swift_retain();
  return _swift_task_switch(sub_10007D964, 0, 0);
}

uint64_t sub_10007D964()
{
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[26];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[40] = v3;
  v3[2] = v1;
  v3[3] = sub_10008F90C;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[41] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AD0);
  *uint64_t v4 = v0;
  v4[1] = sub_10007DA80;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 4, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10008F914, v3, v5);
}

uint64_t sub_10007DA80()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 336) = *(void *)(v1 + 32);
  return _swift_task_switch(sub_10007DBF0, v2, 0);
}

uint64_t sub_10007DBF0()
{
  uint64_t v1 = v0[42];
  uint64_t v2 = v0[38];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[43] = sub_10008F920(v1, v4);
  v0[44] = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007DCC0, v3, 0);
}

uint64_t sub_10007DCC0()
{
  *(void *)(v0 + 360) = *(void *)(*(void *)(v0 + 208) + 136);
  swift_retain();
  return _swift_task_switch(sub_10007DD34, 0, 0);
}

uint64_t sub_10007DD34()
{
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[26];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[46] = v3;
  v3[2] = v1;
  v3[3] = sub_10008FD44;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[47] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163A040);
  *uint64_t v4 = v0;
  v4[1] = sub_10007DE50;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10008FD4C, v3, v5);
}

uint64_t sub_10007DE50()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 384) = *(void *)(v1 + 40);
  return _swift_task_switch(sub_10007DFC0, v2, 0);
}

uint64_t sub_10007DFC0()
{
  uint64_t v1 = v0[48];
  uint64_t v2 = v0[44];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[49] = sub_10008FD58(v1, v4);
  v0[50] = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007E090, v3, 0);
}

uint64_t sub_10007E090()
{
  *(void *)(v0 + 408) = *(void *)(*(void *)(v0 + 208) + 136);
  swift_retain();
  return _swift_task_switch(sub_10007E104, 0, 0);
}

uint64_t sub_10007E104()
{
  uint64_t v1 = v0[51];
  uint64_t v2 = v0[26];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[52] = v3;
  v3[2] = v1;
  v3[3] = sub_10009017C;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[53] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163A048);
  *uint64_t v4 = v0;
  v4[1] = sub_10007E220;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090184, v3, v5);
}

uint64_t sub_10007E220()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 432) = *(void *)(v1 + 48);
  return _swift_task_switch(sub_10007E390, v2, 0);
}

uint64_t sub_10007E390()
{
  uint64_t v1 = v0[54];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[55] = sub_100090190(v1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007E460, v2, 0);
}

uint64_t sub_10007E460()
{
  *(void *)(v0 + 448) = *(void *)(*(void *)(v0 + 208) + 136);
  swift_retain();
  return _swift_task_switch(sub_10007E4D4, 0, 0);
}

uint64_t sub_10007E4D4()
{
  uint64_t v1 = v0[56];
  uint64_t v2 = v0[26];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[57] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[58] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  v0[59] = v5;
  *uint64_t v4 = v0;
  v4[1] = sub_10007E5F0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DAA8, v3, v5);
}

uint64_t sub_10007E5F0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 480) = *(void *)(v1 + 56);
  return _swift_task_switch(sub_10007E760, v2, 0);
}

uint64_t sub_10007E760()
{
  uid_t v0 = getuid();
  sub_100DC5FC0(v0);
  return _swift_task_switch(sub_10007E7D0, 0, 0);
}

uint64_t sub_10007E7D0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 488) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10007E878;
  uint64_t v2 = *(void *)(v0 + 168);
  return sub_10064BE48(v2);
}

uint64_t sub_10007E878(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 496) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10007EFD0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = v4[21];
    uint64_t v8 = v4[17];
    uint64_t v9 = v4[18];
    uint64_t v10 = v4[11];
    v4[63] = a1;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v4[64] = v11;
    v4[65] = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v11(v7, v8);
    swift_release();
    uint64_t v5 = sub_10007E9DC;
    uint64_t v6 = v10;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_10007E9DC()
{
  uint64_t v1 = v0[63];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[66] = sub_1000905B4(v1, v3, &qword_10163A058, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B7398);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007EAC4, v2, 0);
}

uint64_t sub_10007EAC4()
{
  *(void *)(v0 + 536) = *(void *)(*(void *)(v0 + 208) + 136);
  swift_retain();
  return _swift_task_switch(sub_10007EB38, 0, 0);
}

uint64_t sub_10007EB38()
{
  uint64_t v1 = v0[67];
  uint64_t v2 = v0[26];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[68] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[69] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10007EC48;
  uint64_t v5 = v0[59];
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 8, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_10007EC48()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 560) = *(void *)(v1 + 64);
  return _swift_task_switch(sub_10007EDA4, 0, 0);
}

uint64_t sub_10007EDA4()
{
  uid_t v1 = getuid();
  sub_100DC5FC0(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 568) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10007EE5C;
  uint64_t v3 = *(void *)(v0 + 160);
  return sub_100645C34(v3);
}

uint64_t sub_10007EE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 576) = v2;
  swift_task_dealloc();
  if (v2)
  {
    (*(void (**)(void, void))(v6 + 512))(*(void *)(v6 + 160), *(void *)(v6 + 136));
    uint64_t v7 = sub_10007F774;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 512);
    uint64_t v10 = *(void *)(v6 + 160);
    uint64_t v11 = *(void *)(v6 + 136);
    uint64_t v12 = *(void *)(v6 + 88);
    *(void *)(v6 + 584) = a2;
    *(void *)(v6 + 592) = a1;
    v9(v10, v11);
    swift_release();
    uint64_t v7 = sub_10007F178;
    uint64_t v8 = v12;
  }
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_10007EFD0()
{
  uint64_t v2 = v0[11];
  (*(void (**)(void, void))(v0[18] + 8))(v0[21], v0[17]);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007F0D8, v2, 0);
}

uint64_t sub_10007F0D8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uid_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007F178()
{
  uint64_t v1 = v0[74];
  uint64_t v2 = v0[73];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[75] = sub_1000905B4(v1, v4, &qword_10163A050, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B7368);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[76] = sub_1000905B4(v2, v4, &qword_10163A050, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B7368);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007F2C8, v3, 0);
}

uint64_t sub_10007F2C8()
{
  *(void *)(v0 + 616) = *(void *)(*(void *)(v0 + 208) + 136);
  swift_retain();
  return _swift_task_switch(sub_10007F33C, 0, 0);
}

uint64_t sub_10007F33C()
{
  uint64_t v1 = v0[77];
  uint64_t v2 = v0[26];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[78] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[79] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10007F44C;
  uint64_t v5 = v0[59];
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 9, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_10007F44C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 640) = *(void *)(v1 + 72);
  return _swift_task_switch(sub_10007F5A8, 0, 0);
}

uint64_t sub_10007F5A8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 648) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10007F648;
  return sub_10064F4F8();
}

uint64_t sub_10007F648(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[82] = a1;
  v3[83] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[11];
    uint64_t v5 = sub_10007FD18;
  }
  else
  {
    uint64_t v6 = v3[11];
    swift_release();
    uint64_t v5 = sub_10007F8B0;
    uint64_t v4 = v6;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10007F774()
{
  return _swift_task_switch(sub_10007F790, *(void *)(v0 + 88), 0);
}

uint64_t sub_10007F790()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10007F8B0()
{
  uint64_t v1 = *(void *)(v0 + 656);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = *(void *)(v0 + 192);
    uint64_t v35 = *(void *)(v0 + 120);
    uint64_t v33 = v1 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    uint64_t v37 = v4 + 56;
    uint64_t v5 = _swiftEmptyArrayStorage;
    uint64_t v30 = *(void *)(v0 + 96);
    uint64_t v31 = *(void *)(v0 + 104);
    uint64_t v26 = *(void *)(v0 + 144);
    uint64_t v27 = *(void *)(v1 + 16);
    uint64_t v6 = (void (**)(void))(v26 + 16);
    uint64_t v28 = *(void *)(v0 + 656);
    uint64_t v39 = v4;
    while (v3 < *(void *)(v1 + 16))
    {
      sub_100090D88(v33 + *(void *)(v35 + 72) * v3, *(void *)(v0 + 128), type metadata accessor for DelegatedBeaconMetadata);
      if (*(void *)(v4 + 16))
      {
        sub_1000909F0(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v6 = (void (**)(void))(v26 + 16);
        uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v8 = -1 << *(unsigned char *)(v4 + 32);
        unint64_t v9 = v7 & ~v8;
        uint64_t v10 = *(void (**)(void))(v26 + 16);
        if ((*(void *)(v37 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
        {
          unint64_t v29 = v3;
          uint64_t v11 = ~v8;
          uint64_t v12 = *(void *)(v26 + 72);
          do
          {
            uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
            uint64_t v14 = *(void *)(v0 + 152);
            uint64_t v15 = *(void *)(v0 + 136);
            ((void (*)(uint64_t, unint64_t, uint64_t))v10)(v14, *(void *)(v39 + 48) + v9 * v12, v15);
            sub_1000909F0((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
            char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
            v13(v14, v15);
            if (v16)
            {
              uint64_t v2 = v27;
              uint64_t v1 = v28;
              unint64_t v3 = v29;
              uint64_t v4 = v39;
              uint64_t v6 = (void (**)(void))(v26 + 16);
              goto LABEL_4;
            }
            unint64_t v9 = (v9 + 1) & v11;
          }
          while (((*(void *)(v37 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
          uint64_t v2 = v27;
          uint64_t v1 = v28;
          unint64_t v3 = v29;
          uint64_t v4 = v39;
          uint64_t v6 = (void (**)(void))(v26 + 16);
        }
        else
        {
          uint64_t v4 = v39;
        }
      }
      else
      {
        uint64_t v10 = *v6;
      }
      uint64_t v17 = *(void *)(v0 + 128);
      uint64_t v18 = *(void *)(v0 + 112) + *(int *)(v30 + 48);
      v10();
      sub_100090D88(v17, v18, type metadata accessor for DelegatedBeaconMetadata);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = (void *)sub_100A6F6B0(0, v5[2] + 1, 1, (unint64_t)v5);
      }
      unint64_t v20 = v5[2];
      unint64_t v19 = v5[3];
      if (v20 >= v19 >> 1) {
        uint64_t v5 = (void *)sub_100A6F6B0(v19 > 1, v20 + 1, 1, (unint64_t)v5);
      }
      uint64_t v21 = *(void *)(v0 + 112);
      void v5[2] = v20 + 1;
      sub_10001D608(v21, (uint64_t)v5+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v20, &qword_10163A030);
LABEL_4:
      ++v3;
      sub_100090EA0(*(void *)(v0 + 128), type metadata accessor for DelegatedBeaconMetadata);
      if (v3 == v2)
      {
        swift_bridgeObjectRelease();
        NSString v32 = v5;
        goto LABEL_21;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    NSString v32 = _swiftEmptyArrayStorage;
LABEL_21:
    swift_bridgeObjectRelease();
    uint64_t v40 = *(void *)(v0 + 440);
    uint64_t v41 = *(void *)(v0 + 528);
    uint64_t v36 = *(void *)(v0 + 344);
    uint64_t v38 = *(void *)(v0 + 392);
    uint64_t v22 = *(void *)(v0 + 296);
    uint64_t v23 = *(void *)(v0 + 248);
    uint64_t v24 = *(void *)(v0 + 80);
    long long v34 = *(_OWORD *)(v0 + 600);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    *(void *)uint64_t v24 = v23;
    *(void *)(v24 + 8) = v22;
    *(void *)(v24 + 16) = v36;
    *(void *)(v24 + 24) = v38;
    *(void *)(v24 + 32) = v40;
    *(void *)(v24 + 40) = v41;
    *(void *)(v24 + 48) = v32;
    *(_OWORD *)(v24 + 56) = v34;
    uint64_t v25 = *(void (**)(void))(v0 + 8);
    v25();
  }
}

uint64_t sub_10007FD18()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10007FE54()
{
  v1[8] = v0;
  uint64_t v2 = type metadata accessor for SharedBeaconRecord(0);
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord();
  v1[13] = v3;
  v1[14] = *(void *)(v3 - 8);
  v1[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MemberSharingCircle();
  v1[16] = v4;
  v1[17] = *(void *)(v4 - 8);
  v1[18] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v1[21] = v5;
  v1[22] = *(void *)(v5 - 8);
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  v1[26] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OwnerSharingCircle();
  v1[27] = v6;
  v1[28] = *(void *)(v6 - 8);
  v1[29] = swift_task_alloc();
  return _swift_task_switch(sub_1000800FC, v0, 0);
}

uint64_t sub_1000800FC()
{
  uint64_t v1 = v0[8];
  v0[2] = &_swiftEmptySetSingleton;
  v0[3] = &_swiftEmptySetSingleton;
  uint64_t v2 = *(void *)(v1 + 112);
  v0[30] = v2;
  return _swift_task_switch(sub_10008012C, v2, 0);
}

uint64_t sub_10008012C()
{
  *(void *)(v0 + 248) = *(void *)(*(void *)(v0 + 240) + 136);
  swift_retain();
  return _swift_task_switch(sub_1000801A0, 0, 0);
}

uint64_t sub_1000801A0()
{
  uint64_t v2 = v0[30];
  uint64_t v1 = v0[31];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[32] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[33] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_1000802B8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 4, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075258, v3, v5);
}

uint64_t sub_1000802B8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 272) = *(void *)(v1 + 32);
  return _swift_task_switch(sub_100080428, v2, 0);
}

uint64_t sub_100080428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3[34];
  uint64_t v41 = *(void *)(v4 + 16);
  if (v41)
  {
    unint64_t v5 = 0;
    uint64_t v43 = v3[27];
    uint64_t v6 = v3[22];
    uint64_t v40 = v3[28];
    uint64_t v39 = v4 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
    uint64_t v53 = (void (**)(uint64_t, uint64_t))(v6 + 8);
    uint64_t v54 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    unint64_t v45 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t v37 = v6;
    unint64_t v44 = (void (**)(void, void, void))(v6 + 32);
    uint64_t v38 = v3[34];
    Class v49 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    while (v5 < *(void *)(v4 + 16))
    {
      uint64_t v9 = v3[29];
      uint64_t v11 = (char *)v3[25];
      uint64_t v10 = v3[26];
      uint64_t v12 = v3[21];
      uint64_t v51 = v12;
      unint64_t v42 = v5;
      sub_100090D88(v39 + *(void *)(v40 + 72) * v5, v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v13 = *v54;
      (*v54)(v11, v9 + *(int *)(v43 + 20), v12);
      uint64_t v14 = v10;
      sub_100DC8CB8(v10, v11);
      uint64_t v15 = *v53;
      (*v53)(v14, v51);
      char v16 = v13;
      v13(v11, v9 + *(int *)(v43 + 24), v51);
      sub_100DC8CB8(v14, v11);
      uint64_t v17 = v51;
      uint64_t v52 = v15;
      v15(v14, v17);
      uint64_t v18 = v49;
      uint64_t v19 = swift_bridgeObjectRetain();
      uint64_t v20 = sub_10070FB1C(v19);
      swift_bridgeObjectRelease();
      uint64_t v48 = *(void *)(v20 + 16);
      if (v48)
      {
        uint64_t v21 = 0;
        unint64_t v47 = v20 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
        uint64_t v22 = *(void *)(v37 + 72);
        do
        {
          uint64_t v28 = (char *)v3[20];
          uint64_t v27 = v3[21];
          v16(v28, v47 + v21 * v22, v27);
          uint64_t v46 = *v18;
          (*v18)((uint64_t)v28, 0, 1, v27);
          if ((*v45)((uint64_t)v28, 1, v27) == 1)
          {
            uint64_t v4 = v38;
            unint64_t v7 = v42;
            goto LABEL_4;
          }
          (*v44)(v3[24], v3[20], v3[21]);
          sub_1000909F0(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
          swift_bridgeObjectRetain();
          uint64_t v29 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v30 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
          unint64_t v31 = v29 & ~v30;
          uint64_t v50 = v21;
          if ((*(void *)((char *)&_swiftEmptySetSingleton + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v31))
          {
            uint64_t v32 = ~v30;
            while (1)
            {
              uint64_t v33 = (char *)v3[26];
              uint64_t v34 = v3[21];
              v16(v33, *((void *)&_swiftEmptySetSingleton + 6) + v31 * v22, v34);
              sub_1000909F0((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
              char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
              v52((uint64_t)v33, v34);
              if (v35) {
                break;
              }
              unint64_t v31 = (v31 + 1) & v32;
              if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v31) & 1) == 0) {
                goto LABEL_8;
              }
            }
          }
          else
          {
LABEL_8:
            uint64_t v23 = v3[26];
            uint64_t v24 = v3[24];
            uint64_t v25 = v3[21];
            swift_bridgeObjectRelease();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v16((char *)v23, v24, v25);
            sub_100DDDE60(v23, v31, isUniquelyReferenced_nonNull_native);
          }
          swift_bridgeObjectRelease();
          uint64_t v18 = v49;
          uint64_t v21 = v50 + 1;
          v52(v3[24], v3[21]);
        }
        while (v50 + 1 != v48);
        uint64_t v4 = v38;
        unint64_t v7 = v42;
        v46(v3[20], 1, 1, v3[21]);
      }
      else
      {
        unint64_t v7 = v42;
        uint64_t v4 = v38;
        (*v49)(v3[20], 1, 1, v3[21]);
      }
LABEL_4:
      unint64_t v5 = v7 + 1;
      uint64_t v8 = v3[29];
      swift_release();
      a1 = sub_100090EA0(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (v5 == v41) {
        goto LABEL_19;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_19:
    swift_bridgeObjectRelease();
    v3[35] = &_swiftEmptySetSingleton;
    a2 = v3[30];
    a1 = (uint64_t)sub_100080978;
    a3 = 0;
  }
  return _swift_task_switch(a1, a2, a3);
}

uint64_t sub_100080978()
{
  *(void *)(v0 + 288) = *(void *)(*(void *)(v0 + 240) + 136);
  swift_retain();
  return _swift_task_switch(sub_1000809EC, 0, 0);
}

uint64_t sub_1000809EC()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[30];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[37] = v3;
  v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[38] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  *uint64_t v4 = v0;
  v4[1] = sub_100080B08;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000730E0, v3, v5);
}

uint64_t sub_100080B08()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 312) = *(void *)(v1 + 40);
  return _swift_task_switch(sub_100080C78, v2, 0);
}

uint64_t sub_100080C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3[39];
  uint64_t v41 = *(void *)(v4 + 16);
  if (v41)
  {
    unint64_t v5 = 0;
    uint64_t v6 = v3[22];
    uint64_t v43 = v3[16];
    uint64_t v40 = v3[17];
    uint64_t v39 = v4 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
    uint64_t v53 = (void (**)(uint64_t, uint64_t))(v6 + 8);
    uint64_t v54 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v37 = v6;
    unint64_t v44 = (void (**)(void, void, void))(v6 + 32);
    unint64_t v45 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t v7 = v3[35];
    uint64_t v38 = v3[39];
    Class v49 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    while (v5 < *(void *)(v4 + 16))
    {
      uint64_t v11 = (char *)v3[25];
      uint64_t v10 = v3[26];
      uint64_t v12 = v3[21];
      uint64_t v51 = v12;
      uint64_t v13 = v3[18];
      unint64_t v42 = v5;
      sub_100090D88(v39 + *(void *)(v40 + 72) * v5, v13, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v14 = *v54;
      (*v54)(v11, v13 + *(int *)(v43 + 28), v12);
      sub_100DC8CB8(v10, v11);
      uint64_t v15 = *v53;
      (*v53)(v10, v51);
      char v16 = v14;
      v14(v11, v13 + *(int *)(v43 + 24), v51);
      sub_100DC8CB8(v10, v11);
      uint64_t v17 = v49;
      uint64_t v18 = v51;
      uint64_t v52 = v15;
      v15(v10, v18);
      uint64_t v19 = swift_bridgeObjectRetain();
      uint64_t v20 = sub_10070FB1C(v19);
      swift_bridgeObjectRelease();
      uint64_t v48 = *(void *)(v20 + 16);
      if (v48)
      {
        uint64_t v21 = 0;
        unint64_t v47 = v20 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
        uint64_t v22 = *(void *)(v37 + 72);
        do
        {
          uint64_t v27 = v3[21];
          uint64_t v28 = (char *)v3[19];
          v16(v28, v47 + v21 * v22, v27);
          uint64_t v46 = *v17;
          (*v17)((uint64_t)v28, 0, 1, v27);
          if ((*v45)((uint64_t)v28, 1, v27) == 1)
          {
            uint64_t v4 = v38;
            unint64_t v8 = v42;
            goto LABEL_4;
          }
          (*v44)(v3[23], v3[19], v3[21]);
          sub_1000909F0(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
          swift_bridgeObjectRetain();
          uint64_t v29 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v30 = -1 << *(unsigned char *)(v7 + 32);
          unint64_t v31 = v29 & ~v30;
          uint64_t v50 = v21;
          if ((*(void *)(v7 + 56 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31))
          {
            uint64_t v32 = ~v30;
            while (1)
            {
              uint64_t v33 = (char *)v3[26];
              uint64_t v34 = v3[21];
              v16(v33, *(void *)(v7 + 48) + v31 * v22, v34);
              sub_1000909F0((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
              char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
              v52((uint64_t)v33, v34);
              if (v35) {
                break;
              }
              unint64_t v31 = (v31 + 1) & v32;
              if (((*(void *)(v7 + 56 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) == 0) {
                goto LABEL_8;
              }
            }
          }
          else
          {
LABEL_8:
            uint64_t v23 = v3[26];
            uint64_t v24 = v3[23];
            uint64_t v25 = v3[21];
            swift_bridgeObjectRelease();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v16((char *)v23, v24, v25);
            sub_100DDDE60(v23, v31, isUniquelyReferenced_nonNull_native);
          }
          swift_bridgeObjectRelease();
          uint64_t v17 = v49;
          uint64_t v21 = v50 + 1;
          v52(v3[23], v3[21]);
        }
        while (v50 + 1 != v48);
        uint64_t v4 = v38;
        unint64_t v8 = v42;
        v46(v3[19], 1, 1, v3[21]);
      }
      else
      {
        unint64_t v8 = v42;
        uint64_t v4 = v38;
        (*v49)(v3[19], 1, 1, v3[21]);
      }
LABEL_4:
      unint64_t v5 = v8 + 1;
      uint64_t v9 = v3[18];
      swift_release();
      a1 = sub_100090EA0(v9, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      if (v5 == v41)
      {
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = v3[35];
LABEL_22:
    v3[40] = v7;
    a2 = v3[30];
    a1 = (uint64_t)sub_1000811C8;
    a3 = 0;
  }
  return _swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000811C8()
{
  *(void *)(v0 + 328) = *(void *)(*(void *)(v0 + 240) + 136);
  swift_retain();
  return _swift_task_switch(sub_10008123C, 0, 0);
}

uint64_t sub_10008123C()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[30];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[42] = v3;
  v3[2] = v1;
  v3[3] = sub_1000909A4;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[43] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AA0);
  *uint64_t v4 = v0;
  v4[1] = sub_100081358;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000909AC, v3, v5);
}

uint64_t sub_100081358()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 352) = *(void *)(v1 + 48);
  return _swift_task_switch(sub_1000814C8, v2, 0);
}

uint64_t sub_1000814C8()
{
  uint64_t v1 = v0[44];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[22];
    uint64_t v4 = v0[14];
    uint64_t v15 = v0[15] + *(int *)(v0[13] + 20);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v14 = *(void *)(v4 + 72);
    uint64_t v6 = (void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v7 = (void (**)(uint64_t, uint64_t))(v3 + 8);
    do
    {
      uint64_t v9 = (char *)v0[25];
      uint64_t v8 = v0[26];
      uint64_t v10 = v0[21];
      uint64_t v11 = v0[15];
      sub_100090D88(v5, v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      (*v6)(v9, v15, v10);
      sub_100090EA0(v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100DC8CB8(v8, v9);
      (*v7)(v8, v10);
      v5 += v14;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = v0[30];
  return _swift_task_switch(sub_100081630, v12, 0);
}

uint64_t sub_100081630()
{
  *(void *)(v0 + 360) = *(void *)(*(void *)(v0 + 240) + 136);
  swift_retain();
  return _swift_task_switch(sub_1000816A4, 0, 0);
}

uint64_t sub_1000816A4()
{
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[30];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[46] = v3;
  v3[2] = v1;
  v3[3] = sub_10008FD44;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[47] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163A040);
  *uint64_t v4 = v0;
  v4[1] = sub_1000817C0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100091080, v3, v5);
}

uint64_t sub_1000817C0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 384) = *(void *)(v1 + 56);
  return _swift_task_switch(sub_100081930, v2, 0);
}

uint64_t sub_100081930()
{
  uint64_t v1 = v0[48];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[22];
    uint64_t v5 = (int *)v0[9];
    uint64_t v4 = v0[10];
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v19 = (void (**)(char *, void, uint64_t))(v3 + 16);
    uint64_t v21 = *(void *)(v4 + 72);
    uint64_t v7 = (void (**)(uint64_t, uint64_t))(v3 + 8);
    do
    {
      uint64_t v12 = v0[11];
      uint64_t v11 = v0[12];
      sub_100090D88(v6, v11, type metadata accessor for SharedBeaconRecord);
      uint64_t v13 = *(void *)(v11 + v5[11]);
      sub_100090D88(v11, v12, type metadata accessor for SharedBeaconRecord);
      uint64_t v14 = v0[11];
      if (v13 == -1)
      {
        sub_100090EA0(v14, type metadata accessor for SharedBeaconRecord);
      }
      else
      {
        uint64_t v15 = *(void *)(v14 + v5[12]);
        sub_100090EA0(v14, type metadata accessor for SharedBeaconRecord);
        if (v15 != -1) {
          goto LABEL_5;
        }
      }
      uint64_t v9 = (char *)v0[25];
      uint64_t v8 = v0[26];
      uint64_t v10 = v0[21];
      (*v19)(v9, v0[12] + v5[5], v10);
      sub_100DC8CB8(v8, v9);
      (*v7)(v8, v10);
LABEL_5:
      sub_100090EA0(v0[12], type metadata accessor for SharedBeaconRecord);
      v6 += v21;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  uint64_t v22 = v0[3];
  uint64_t v20 = v0[2];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v17 = v0[40];
  return v16(v22, v20, v17);
}

uint64_t sub_100081B84()
{
  swift_release();
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for CheckDataIntegrityUseCase()
{
  return self;
}

uint64_t sub_100081BE8(uint64_t a1)
{
  v2[25] = a1;
  v2[26] = v1;
  v2[27] = type metadata accessor for KeySyncMetadataDisplay();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for KeySyncMetadata();
  v2[30] = v3;
  v2[31] = *(void *)(v3 - 8);
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[35] = v4;
  v2[36] = *(void *)(v4 - 8);
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  return _swift_task_switch(sub_100081D70, v1, 0);
}

uint64_t sub_100081D70()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100081EAC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100081EAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 208);
  *(void *)(*(void *)v1 + 320) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100081FC4, v2, 0);
}

uint64_t sub_100081FC4()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[40])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[41] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10008217C;
    uint64_t v3 = v0[25];
    return sub_1011039A0(v3, (uint64_t)&off_10159FC10);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    id v5 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 initWithValue:v6 severity:1];

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(id))v0[1];
    return v8(v7);
  }
}

uint64_t sub_10008217C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(*v2 + 336) = a1;
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v3 + 208);
  if (v1)
  {
    swift_errorRelease();
    id v5 = sub_100082BB8;
  }
  else
  {
    id v5 = sub_1000822BC;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000822BC()
{
  uint64_t v1 = v0[42];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[36];
    id v5 = (int *)v0[30];
    uint64_t v4 = v0[31];
    uint64_t v59 = (int *)v0[27];
    sub_1000B6ED0(0, v2, 0);
    uint64_t v62 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    id v63 = v0;
    uint64_t v57 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    uint64_t v58 = *(void *)(v4 + 72);
    uint64_t v56 = v1;
    uint64_t v55 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = v55;
    unint64_t v60 = v5;
    do
    {
      uint64_t v68 = v6;
      int64_t v69 = v2;
      uint64_t v7 = v0[37];
      uint64_t v8 = v0[35];
      uint64_t v10 = v0[32];
      uint64_t v9 = v0[33];
      sub_100090D88(v6, v9, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      sub_100090D88(v9, v10, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      unint64_t v61 = *v62;
      (*v62)(v7, v10, v8);
      unint64_t v11 = 0xE800000000000000;
      unint64_t v12 = 0x6E776F6E6B6E752ELL;
      switch(*(unsigned char *)(v10 + v5[5]))
      {
        case 1:
          unint64_t v11 = 0xEA00000000007265;
          unint64_t v12 = 0x6E774F7261656E2ELL;
          break;
        case 2:
          unint64_t v11 = 0xEF64657461726170;
          unint64_t v12 = 0x6553686374616C2ELL;
          break;
        case 3:
          unint64_t v12 = 0xD00000000000001CLL;
          unint64_t v11 = 0x80000001013F2A30;
          break;
        case 4:
          unint64_t v12 = 0xD000000000000018;
          unint64_t v11 = 0x80000001013F2A10;
          break;
        case 5:
          unint64_t v11 = 0xEC0000007972616DLL;
          unint64_t v12 = 0x697250646C69772ELL;
          break;
        case 6:
          unint64_t v11 = 0xEE00797261646E6FLL;
          unint64_t v12 = 0x636553646C69772ELL;
          break;
        case 7:
          unint64_t v12 = 0x736142746E69682ELL;
          unint64_t v11 = 0xEA00000000006465;
          break;
        case 8:
          unint64_t v11 = 0xED0000746E656D6ELL;
          unint64_t v12 = 0x67696C4179656B2ELL;
          break;
        default:
          break;
      }
      unint64_t v66 = v12;
      unint64_t v67 = v11;
      uint64_t v13 = (void *)(v0[32] + v5[6]);
      sub_10001CD44(v13, v13[3]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v65 = v0[23];
      uint64_t v14 = v13[3];
      uint64_t v15 = v13[4];
      sub_10001CD44(v13, v14);
      int v16 = sub_100EB7B8C(v14, v15);
      if (v16)
      {
        if (v16 == 1)
        {
          unint64_t v17 = 0xEA00000000007972;
          unint64_t v18 = 0x61646E6F6365732ELL;
        }
        else
        {
          unint64_t v17 = 0x80000001013F28C0;
          unint64_t v18 = 0xD000000000000010;
        }
      }
      else
      {
        unint64_t v17 = 0xE800000000000000;
        unint64_t v18 = 0x7972616D6972702ELL;
      }
      uint64_t v19 = v0[37];
      uint64_t v20 = v0[35];
      uint64_t v21 = v0[32];
      uint64_t v64 = v0[33];
      uint64_t v23 = v0[28];
      uint64_t v22 = v0[29];
      uint64_t v24 = v21 + v5[7];
      uint64_t v25 = v23 + v59[8];
      uint64_t v26 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v25, v24, v26);
      (*v57)(v23, v19, v20);
      uint64_t v27 = (unint64_t *)(v23 + v59[5]);
      *uint64_t v27 = v66;
      v27[1] = v67;
      *(void *)(v23 + v59[6]) = v65;
      uint64_t v28 = (unint64_t *)(v23 + v59[7]);
      *uint64_t v28 = v18;
      v28[1] = v17;
      sub_100090EA0(v21, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      sub_100090D20(v23, v22, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      uint64_t v29 = sub_1006569A4();
      uint64_t v31 = v30;
      sub_100090EA0(v22, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      sub_100090EA0(v64, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B6ED0(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v33 = _swiftEmptyArrayStorage[2];
      unint64_t v32 = _swiftEmptyArrayStorage[3];
      uint64_t v0 = v63;
      id v5 = v60;
      if (v33 >= v32 >> 1) {
        sub_1000B6ED0(v32 > 1, v33 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v33 + 1;
      uint64_t v34 = &_swiftEmptyArrayStorage[2 * v33];
      v34[4] = v29;
      v34[5] = v31;
      uint64_t v6 = v68 + v58;
      int64_t v2 = v69 - 1;
    }
    while (v69 != 1);
    v63[24] = _swiftEmptyArrayStorage;
    sub_10000588C(&qword_101654A30);
    sub_100090B54();
    uint64_t v35 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v37 = v36;
    swift_release();
    v63[17] = v35;
    v63[18] = v37;
    if (!*(void *)(v56 + 16))
    {
      __break(1u);
      JUMPOUT(0x100082B94);
    }
    uint64_t v38 = v63[38];
    uint64_t v40 = v63[35];
    uint64_t v39 = v63[36];
    uint64_t v41 = v63[34];
    v61(v38, v55, v40);
    sub_1000909F0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v71 = v42;
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v43(v38, v40);
    v44._countAndFlagsBits = 8250;
    v44._object = (void *)0xE200000000000000;
    String.append(_:)(v44);
    v63[19] = v70;
    v63[20] = v71;
    v63[21] = 0;
    v63[22] = 0xE000000000000000;
    unint64_t v54 = sub_1000336D4();
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    sub_100090D88(v55, v41, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    swift_bridgeObjectRelease();
    v61(v38, v41, v40);
    sub_100090EA0(v41, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v43(v38, v40);
    uint64_t v0 = v63;
    v46._countAndFlagsBits = 151587386;
    v46._object = (void *)0xE400000000000000;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v63[15] = 0xD000000000000015;
    v63[16] = 0x80000001013F29F0;
    sub_100090BB0();
    String.insert<A>(contentsOf:at:)();
    swift_bridgeObjectRelease();
    id v47 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v49 = [v47 initWithValue:v48 severity:0 type metadata for String, v54, v54, v54];
  }
  else
  {
    swift_bridgeObjectRelease();
    id v50 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v51 = String._bridgeToObjectiveC()();
    id v49 = [v50 initWithValue:v51 severity:2];
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v52 = (uint64_t (*)(id))v0[1];
  return v52(v49);
}

uint64_t sub_100082BB8()
{
  id v1 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 initWithValue:v2 severity:2];

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(id))(v0 + 8);
  return v4(v3);
}

uint64_t sub_100082CCC(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for BeaconObservation();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[11] = v5;
  v2[12] = *(void *)(v5 + 64);
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_100082DF0, v1, 0);
}

uint64_t sub_100082DF0()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[5];
  v0[2] = _swiftEmptyArrayStorage;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  v0[14] = v6;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v6 + v5, v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[15] = v7;
  uint64_t v8 = sub_10000588C(&qword_10163A0F8);
  *uint64_t v7 = v0;
  v7[1] = sub_100082F3C;
  return unsafeBlocking<A>(_:)(v0 + 3, sub_100090AC8, v6, v8);
}

uint64_t sub_100082F3C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100083068, v1, 0);
}

void sub_100083068()
{
  int64_t v1 = 0;
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[3];
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  uint64_t v33 = v4;
  uint64_t v6 = -1;
  uint64_t v7 = -1 << *(unsigned char *)(v33 + 32);
  if (-v7 < 64) {
    uint64_t v6 = ~(-1 << -(char)v7);
  }
  unint64_t v8 = v6 & v5;
  int64_t v32 = (unint64_t)(63 - v7) >> 6;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v1 << 6);
LABEL_20:
    uint64_t v14 = *(void *)(*(void *)(v33 + 56) + 8 * v10);
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v16 = v0[9];
      sub_100090D88(v14+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * (v15 - 1), v16, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      LOBYTE(v16) = *(unsigned char *)(v16 + *(int *)(v3 + 24));
      swift_bridgeObjectRetain();
      sub_10096A84C(v16);
      v17._countAndFlagsBits = 8250;
      v17._object = (void *)0xE200000000000000;
      String.append(_:)(v17);
      unint64_t v18 = *(void *)(v14 + 16);
      swift_bridgeObjectRelease();
      if (v18 < 2)
      {
        uint64_t v21 = 0;
        unint64_t v22 = 0xE000000000000000;
      }
      else
      {
        v0[4] = v18;
        uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v35 = v19;
        v20._countAndFlagsBits = 0x7364726F63657220;
        v20._object = (void *)0xE800000000000000;
        String.append(_:)(v20);
        uint64_t v21 = v34;
        unint64_t v22 = v35;
      }
      unint64_t v23 = v22;
      String.append(_:)(*(Swift::String *)&v21);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 0x207473614C202ELL;
      v24._object = (void *)0xE700000000000000;
      String.append(_:)(v24);
      type metadata accessor for Date();
      sub_1000909F0((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      id v26 = objc_allocWithZone((Class)SPDataIntegrityCheck);
      NSString v27 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v26 initWithValue:v27 severity:0];

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      uint64_t v28 = v0[9];
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_100090EA0(v28, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    }
  }
  int64_t v11 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
LABEL_31:
    __break(1u);
    return;
  }
  if (v11 >= v32) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)(v31 + 8 * v11);
  ++v1;
  if (v12) {
    goto LABEL_19;
  }
  int64_t v1 = v11 + 1;
  if (v11 + 1 >= v32) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)(v31 + 8 * v1);
  if (v12) {
    goto LABEL_19;
  }
  int64_t v1 = v11 + 2;
  if (v11 + 2 >= v32) {
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)(v31 + 8 * v1);
  if (v12)
  {
LABEL_19:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v1 << 6);
    goto LABEL_20;
  }
  int64_t v13 = v11 + 3;
  if (v13 < v32)
  {
    unint64_t v12 = *(void *)(v31 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v1 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_31;
        }
        if (v1 >= v32) {
          goto LABEL_27;
        }
        unint64_t v12 = *(void *)(v31 + 8 * v1);
        ++v13;
        if (v12) {
          goto LABEL_19;
        }
      }
    }
    int64_t v1 = v13;
    goto LABEL_19;
  }
LABEL_27:
  swift_release();
  uint64_t v29 = v0[2];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = (void (*)(uint64_t))v0[1];
  v30(v29);
}

uint64_t sub_10008346C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v3 = type metadata accessor for BeaconObservation();
  uint64_t v47 = *(void *)(v3 - 8);
  uint64_t v48 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v46 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t)&v39 - v6;
  uint64_t v42 = 44;
  uint64_t v39 = a2;
  if (qword_101636CB8 != -1) {
LABEL_38:
  }
    swift_once();
  uint64_t v8 = 0;
  unint64_t v9 = _swiftEmptyDictionarySingleton;
  uint64_t v45 = v7;
  while (1)
  {
    if (__OFADD__(v8, 1)) {
      goto LABEL_35;
    }
    uint64_t v43 = v8 + 1;
    Swift::String v44 = v9;
    uint64_t v12 = *((char *)&off_10159FC68 + v8 + 32);
    uint64_t v7 = qword_10170E330;
    sub_10000588C(&qword_101655540);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v14 = v49;
    if (!v49[2]) {
      goto LABEL_19;
    }
    unint64_t v15 = sub_1007240CC(v41);
    if (v16)
    {
      uint64_t v7 = *(void *)(v14[7] + 8 * v15);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      Swift::String v17 = sub_1007100C0(v7);
      swift_bridgeObjectRelease();
      size_t v18 = sub_100B752E8((uint64_t)v17);
      swift_release();
      unint64_t v19 = _swiftEmptyArrayStorage;
      id v49 = _swiftEmptyArrayStorage;
      uint64_t v20 = *(void *)(v18 + 16);
      if (v20)
      {
        uint64_t v40 = v13;
        unint64_t v21 = 0;
        uint64_t v7 = v45;
        while (v21 < *(void *)(v18 + 16))
        {
          unint64_t v22 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
          uint64_t v23 = *(void *)(v47 + 72);
          sub_100090D88(v18 + v22 + v23 * v21, v7, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          if (qword_101348020[*(char *)(v7 + *(int *)(v48 + 24))] == qword_101348020[v12])
          {
            sub_100090D20(v7, v46, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_1000B77F0(0, v19[2] + 1, 1);
            }
            unint64_t v19 = v49;
            unint64_t v25 = v49[2];
            unint64_t v24 = v49[3];
            if (v25 >= v24 >> 1)
            {
              sub_1000B77F0(v24 > 1, v25 + 1, 1);
              unint64_t v19 = v49;
            }
            uint64_t v19[2] = v25 + 1;
            sub_100090D20(v46, (uint64_t)v19 + v22 + v25 * v23, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
            uint64_t v7 = v45;
          }
          else
          {
            sub_100090EA0(v7, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          }
          if (v20 == ++v21)
          {
            unint64_t v19 = v49;
            int64_t v13 = v40;
            goto LABEL_21;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
LABEL_21:
      swift_release();
    }
    else
    {
LABEL_19:
      swift_bridgeObjectRelease();
      unint64_t v19 = _swiftEmptyArrayStorage;
    }
    id v49 = v19;
    swift_bridgeObjectRetain();
    sub_10008DCFC(&v49);
    swift_bridgeObjectRelease();
    id v26 = v49;
    NSString v27 = v44;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v49 = v27;
    unint64_t v30 = sub_1007243A4(v12);
    uint64_t v31 = v27[2];
    BOOL v32 = (v29 & 1) == 0;
    uint64_t v33 = v31 + v32;
    if (__OFADD__(v31, v32)) {
      goto LABEL_36;
    }
    uint64_t v7 = v29;
    if (v27[3] < v33) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      unint64_t v9 = v49;
      if (v29) {
        goto LABEL_3;
      }
    }
    else
    {
      sub_100E7F960();
      unint64_t v9 = v49;
      if (v7)
      {
LABEL_3:
        uint64_t v10 = v9[7];
        uint64_t v7 = (uint64_t)v9;
        swift_bridgeObjectRelease();
        *(void *)(v10 + 8 * v30) = v26;
        goto LABEL_4;
      }
    }
LABEL_29:
    v9[(v30 >> 6) + 8] |= 1 << v30;
    *(unsigned char *)(v9[6] + v30) = v12;
    *(void *)(v9[7] + 8 * v30) = v26;
    uint64_t v36 = v9[2];
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37) {
      goto LABEL_37;
    }
    _OWORD v9[2] = v38;
LABEL_4:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v8 = v43;
    if (v43 == v42)
    {
      *uint64_t v39 = v9;
      return result;
    }
  }
  sub_100E67D24(v33, isUniquelyReferenced_nonNull_native);
  unint64_t v34 = sub_1007243A4(v12);
  if ((v7 & 1) == (v35 & 1))
  {
    unint64_t v30 = v34;
    unint64_t v9 = v49;
    if (v7) {
      goto LABEL_3;
    }
    goto LABEL_29;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100083968(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for BeaconEstimatedLocation();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_100083A28, v1, 0);
}

uint64_t sub_100083A28()
{
  v0[2] = _swiftEmptyArrayStorage;
  uint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100083AD0;
  uint64_t v2 = v0[3];
  return sub_100E62DA0(v2);
}

uint64_t sub_100083AD0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 72) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100083BE8, v2, 0);
}

uint64_t sub_100083BE8()
{
  char v16 = v0;
  uint64_t v14 = (void *)v0[9];
  swift_bridgeObjectRetain();
  sub_1004747A8(&v14);
  swift_bridgeObjectRelease();
  uint64_t v1 = v14[2];
  if (v1)
  {
    uint64_t v2 = v0[6];
    uint64_t v3 = (char *)v14 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v4 = *(void *)(v2 + 72);
    do
    {
      sub_100090D88((uint64_t)v3, v0[7], (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      uint64_t v14 = 0;
      unint64_t v15 = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      uint64_t v14 = (void *)0xD000000000000019;
      unint64_t v15 = 0x80000001013F2880;
      type metadata accessor for UUID();
      sub_1000909F0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v6._countAndFlagsBits = 32;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      type metadata accessor for Date();
      sub_1000909F0((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      id v8 = objc_allocWithZone((Class)SPDataIntegrityCheck);
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v8 initWithValue:v9 severity:0];

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      uint64_t v10 = v0[7];
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_100090EA0(v10, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      v3 += v4;
      --v1;
    }
    while (v1);
    swift_release();
    int64_t v11 = (void *)v0[2];
  }
  else
  {
    swift_release();
    int64_t v11 = _swiftEmptyArrayStorage;
  }
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void *))v0[1];
  return v12(v11);
}

uint64_t sub_100083F1C(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  v2[9] = type metadata accessor for PeerCommunicationIdentifier();
  v2[10] = swift_task_alloc();
  v2[11] = sub_10000588C((uint64_t *)&unk_1016607D0);
  v2[12] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OwnerPeerTrust();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[16] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[17] = v5;
  v2[18] = *(void *)(v5 + 64);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[21] = swift_task_alloc();
  return _swift_task_switch(sub_1000840E4, v1, 0);
}

uint64_t sub_1000840E4()
{
  *(void *)(v0 + 48) = _swiftEmptyArrayStorage;
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 176) = v2;
  uint64_t v3 = *(void *)(v0 + 136);
  if (v2)
  {
    int v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 296) = v4;
    *(void *)(v0 + 184) = *(void *)(v3 + 72);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    *(void *)(v0 + 192) = v5;
    *(void *)(v0 + 200) = 0;
    uint64_t v6 = *(void *)(v0 + 168);
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v8 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    *(void *)(v0 + 208) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    swift_bridgeObjectRetain();
    v5(v6, v8, v7);
    NSString v9 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56);
    *(void *)(v0 + 216) = v9;
    v9(v6, 0, 1, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v7) != 1)
    {
      uint64_t v10 = *(void *)(v0 + 160);
      uint64_t v11 = *(void *)(v0 + 168);
      uint64_t v12 = *(void *)(v0 + 128);
      uint64_t v13 = *(void *)(v0 + 136);
      uint64_t v14 = *(void *)(v0 + 64);
      unint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
      *(void *)(v0 + 224) = v15;
      *(void *)(v0 + 232) = (v13 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v15(v10, v11, v12);
      uint64_t v16 = *(void *)(v14 + 112);
      *(void *)(v0 + 240) = v16;
      return _swift_task_switch(sub_100084310, v16, 0);
    }
  }
  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    uint64_t v18 = *(void *)(v0 + 168);
    uint64_t v19 = *(void *)(v0 + 128);
    swift_bridgeObjectRetain();
    v17(v18, 1, 1, v19);
  }
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v0 + 48);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v21(v20);
}

uint64_t sub_100084310()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 224);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 128);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 296) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 296);
  *(void *)(v0 + 248) = *(void *)(v1 + 136);
  v3(v5, v4, v6);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 256) = v8;
  *(void *)(v8 + 16) = v1;
  v2(v8 + v7, v5, v6);
  swift_retain();
  return _swift_task_switch(sub_100084404, 0, 0);
}

uint64_t sub_100084404()
{
  uint64_t v2 = v0[31];
  uint64_t v1 = v0[32];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[33] = v3;
  v3[2] = v2;
  v3[3] = sub_100090DF4;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[34] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100084508;
  uint64_t v6 = v0[11];
  uint64_t v5 = v0[12];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090E94, v3, v6);
}

uint64_t sub_100084508()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100084658, v1, 0);
}

uint64_t sub_100084658()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 96);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 112) + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, (uint64_t *)&unk_1016607D0);
    *(void *)(v0 + 16) = 0xD000000000000010;
    *(void *)(v0 + 24) = 0x80000001013F2A90;
    v3._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    id v4 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v6 = [v4 initWithValue:v5 severity:2];

    id v7 = [objc_allocWithZone((Class)SPPeerTrustDataIntegrity) initWithPeerTrustRecord:v6 messagingDestination:0];
    id v8 = v7;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 48) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v9 = *(void *)(v0 + 176);
    uint64_t v10 = *(void *)(v0 + 160);
    uint64_t v11 = *(void *)(v0 + 128);
    uint64_t v12 = *(void *)(v0 + 136);
    uint64_t v13 = *(void *)(v0 + 200) + 1;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    if (v13 == v9)
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 216))(*(void *)(v0 + 168), 1, 1, *(void *)(v0 + 128));
LABEL_10:
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(v0 + 48);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      NSString v27 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v27(v26);
    }
    uint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 192);
    uint64_t v20 = *(void *)(v0 + 200) + 1;
    uint64_t v21 = *(void *)(v0 + 168);
    uint64_t v22 = *(void *)(v0 + 128);
    uint64_t v23 = *(void *)(v0 + 136);
    unint64_t v24 = *(void *)(v0 + 56)
        + ((*(unsigned __int8 *)(v0 + 296) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 296))
        + *(void *)(v0 + 184) * v20;
    *(void *)(v0 + 200) = v20;
    *(void *)(v0 + 208) = (v23 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v19(v21, v24, v22);
    unint64_t v25 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56);
    *(void *)(v0 + 216) = v25;
    v25(v21, 0, 1, v22);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1) {
      goto LABEL_10;
    }
    uint64_t v28 = *(void *)(v0 + 160);
    uint64_t v29 = *(void *)(v0 + 168);
    uint64_t v30 = *(void *)(v0 + 128);
    uint64_t v31 = *(void *)(v0 + 136);
    uint64_t v32 = *(void *)(v0 + 64);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32);
    *(void *)(v0 + 224) = v33;
    *(void *)(v0 + 232) = (v31 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v33(v28, v29, v30);
    uint64_t v34 = *(void *)(v32 + 112);
    *(void *)(v0 + 240) = v34;
    return _swift_task_switch(sub_100084310, v34, 0);
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 120);
    sub_100090D20(v2, v14, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v15 = *(int *)(v1 + 28);
    *(_DWORD *)(v0 + 300) = v15;
    uint64_t v16 = v14 + v15;
    char v35 = (uint64_t (*)(uint64_t))((char *)&dword_101661678 + dword_101661678);
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_100084A98;
    return v35(v16);
  }
}

uint64_t sub_100084A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v4;
  *(void *)(*v4 + 288) = a3;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v5 + 64);
  if (v3)
  {
    swift_errorRelease();
    id v7 = sub_1000850A0;
  }
  else
  {
    id v7 = sub_100084BD0;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100084BD0()
{
  if (*(void *)(v0 + 288))
  {
    swift_bridgeObjectRelease();
    sub_1009C77D8();
    id v1 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v3 = [v1 initWithValue:v2 severity:0];
  }
  else
  {
    *(void *)(v0 + 32) = 0xD00000000000001DLL;
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v5 = *(void *)(v0 + 120) + *(int *)(v0 + 300);
    *(void *)(v0 + 40) = 0x80000001013F2AB0;
    v6._countAndFlagsBits = sub_1009C77D8();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    id v7 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v3 = [v7 initWithValue:v8 severity:2];

    swift_storeEnumTagMultiPayload();
    LOBYTE(v8) = sub_1009CA754(v5, v4);
    sub_100090EA0(v4, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    if ((v8 & 1) == 0) {
      goto LABEL_6;
    }
    sub_1009C77D8();
    id v9 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v10 = [v9 initWithValue:v2 severity:0];

    id v3 = v10;
  }

LABEL_6:
  uint64_t v11 = *(void *)(v0 + 120);
  UUID.uuidString.getter();
  id v12 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v12 initWithValue:v13 severity:0];

  id v15 = [objc_allocWithZone((Class)SPPeerTrustDataIntegrity) initWithPeerTrustRecord:v14 messagingDestination:v3];
  sub_100090EA0(v11, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  id v16 = v15;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 48) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v17 = *(void *)(v0 + 176);
  uint64_t v18 = *(void *)(v0 + 160);
  uint64_t v19 = *(void *)(v0 + 128);
  uint64_t v20 = *(void *)(v0 + 136);
  uint64_t v21 = *(void *)(v0 + 200) + 1;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  if (v21 == v17)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 216))(*(void *)(v0 + 168), 1, 1, *(void *)(v0 + 128));
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void *)(v0 + 48);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v30 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v30(v29);
  }
  uint64_t v22 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 192);
  uint64_t v23 = *(void *)(v0 + 200) + 1;
  uint64_t v24 = *(void *)(v0 + 168);
  uint64_t v25 = *(void *)(v0 + 128);
  uint64_t v26 = *(void *)(v0 + 136);
  unint64_t v27 = *(void *)(v0 + 56)
      + ((*(unsigned __int8 *)(v0 + 296) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 296))
      + *(void *)(v0 + 184) * v23;
  *(void *)(v0 + 200) = v23;
  *(void *)(v0 + 208) = (v26 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v22(v24, v27, v25);
  uint64_t v28 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56);
  *(void *)(v0 + 216) = v28;
  v28(v24, 0, 1, v25);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1) {
    goto LABEL_11;
  }
  uint64_t v32 = *(void *)(v0 + 160);
  uint64_t v33 = *(void *)(v0 + 168);
  uint64_t v34 = *(void *)(v0 + 128);
  uint64_t v35 = *(void *)(v0 + 136);
  uint64_t v36 = *(void *)(v0 + 64);
  BOOL v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32);
  *(void *)(v0 + 224) = v37;
  *(void *)(v0 + 232) = (v35 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v37(v32, v33, v34);
  uint64_t v38 = *(void *)(v36 + 112);
  *(void *)(v0 + 240) = v38;
  return _swift_task_switch(sub_100084310, v38, 0);
}

uint64_t sub_1000850A0()
{
  *(void *)(v0 + 32) = 0xD00000000000001DLL;
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 120) + *(int *)(v0 + 300);
  *(void *)(v0 + 40) = 0x80000001013F2AB0;
  v3._countAndFlagsBits = sub_1009C77D8();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  id v4 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithValue:v5 severity:2];

  swift_storeEnumTagMultiPayload();
  LOBYTE(v5) = sub_1009CA754(v2, v1);
  sub_100090EA0(v1, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  if (v5)
  {
    sub_1009C77D8();
    id v7 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v9 = [v7 initWithValue:v8 severity:0];

    id v6 = v9;
  }
  uint64_t v10 = *(void *)(v0 + 120);
  UUID.uuidString.getter();
  id v11 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v11 initWithValue:v12 severity:0];

  id v14 = [objc_allocWithZone((Class)SPPeerTrustDataIntegrity) initWithPeerTrustRecord:v13 messagingDestination:v6];
  sub_100090EA0(v10, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  id v15 = v14;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 48) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v16 = *(void *)(v0 + 176);
  uint64_t v17 = *(void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 128);
  uint64_t v19 = *(void *)(v0 + 136);
  uint64_t v20 = *(void *)(v0 + 200) + 1;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  if (v20 == v16)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 216))(*(void *)(v0 + 168), 1, 1, *(void *)(v0 + 128));
LABEL_8:
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void *)(v0 + 48);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v29(v28);
  }
  uint64_t v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 192);
  uint64_t v22 = *(void *)(v0 + 200) + 1;
  uint64_t v23 = *(void *)(v0 + 168);
  uint64_t v24 = *(void *)(v0 + 128);
  uint64_t v25 = *(void *)(v0 + 136);
  unint64_t v26 = *(void *)(v0 + 56)
      + ((*(unsigned __int8 *)(v0 + 296) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 296))
      + *(void *)(v0 + 184) * v22;
  *(void *)(v0 + 200) = v22;
  *(void *)(v0 + 208) = (v25 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v21(v23, v26, v24);
  unint64_t v27 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56);
  *(void *)(v0 + 216) = v27;
  v27(v23, 0, 1, v24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1) {
    goto LABEL_8;
  }
  uint64_t v31 = *(void *)(v0 + 160);
  uint64_t v32 = *(void *)(v0 + 168);
  uint64_t v33 = *(void *)(v0 + 128);
  uint64_t v34 = *(void *)(v0 + 136);
  uint64_t v35 = *(void *)(v0 + 64);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32);
  *(void *)(v0 + 224) = v36;
  *(void *)(v0 + 232) = (v34 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v36(v31, v32, v33);
  uint64_t v37 = *(void *)(v35 + 112);
  *(void *)(v0 + 240) = v37;
  return _swift_task_switch(sub_100084310, v37, 0);
}

uint64_t sub_10008550C(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  sub_10000588C(&qword_101639EF8);
  v3[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SharingCircleSecretValue();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SharingCircleSecret();
  v3[15] = v5;
  v3[16] = *(void *)(v5 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  return _swift_task_switch(sub_100085694, v2, 0);
}

uint64_t sub_100085694()
{
  uint64_t v1 = v0[5];
  v0[2] = _swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for OwnerSharingCircle();
  v0[19] = v2;
  uint64_t v3 = v1 + *(int *)(v2 + 20);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[20] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100085750;
  return sub_100E5CB14(v3);
}

uint64_t sub_100085750(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 168) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100085868, v2, 0);
}

uint64_t sub_100085868()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v101 = 0;
    uint64_t v102 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v97 = 0;
    uint64_t v100 = 0;
    uint64_t v3 = v0 + 2;
    uint64_t v5 = v0[15];
    uint64_t v4 = v0[16];
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v104 = v0[11];
    uint64_t v7 = v0[10];
    uint64_t v108 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v109 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v103 = v0[13];
    uint64_t v105 = v0[12];
    uint64_t v107 = *(void *)(v4 + 72);
    uint64_t v96 = "delegatedSharingKey";
    while (1)
    {
      uint64_t v10 = v0[18];
      id v11 = (_OWORD *)v0[8];
      sub_100090D88(v6, v10, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      NSString v12 = (uint64_t *)(v10 + *(int *)(v5 + 32));
      uint64_t v13 = *v12;
      unint64_t v14 = v12[1];
      id v15 = (uint64_t *)(v10 + *(int *)(v5 + 28));
      uint64_t v16 = *v15;
      uint64_t v17 = (void *)v15[1];
      sub_1000361E0(v13, v14);
      swift_bridgeObjectRetain();
      sub_10131CEC8(v13, v14, v16, v17, v11);
      uint64_t v19 = v0[17];
      uint64_t v18 = v0[18];
      uint64_t v21 = v0[8];
      uint64_t v20 = v0[9];
      (*v109)(v21, 0, 1, v20);
      sub_100090D88(v18, v19, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      int v22 = (*v108)(v21, 1, v20);
      uint64_t v23 = v0[17];
      uint64_t v24 = (uint64_t *)v0[13];
      if (v22 == 1)
      {
        uint64_t v106 = v0[8];
        uint64_t v25 = (uint64_t *)(v23 + *(int *)(v5 + 32));
        uint64_t v26 = v6;
        uint64_t v27 = v2;
        uint64_t v28 = v5;
        uint64_t v29 = v3;
        uint64_t v30 = *v25;
        unint64_t v31 = v25[1];
        sub_1000361E0(*v25, v31);
        sub_100090EA0(v23, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
        *uint64_t v24 = v30;
        *(void *)(v103 + 8) = v31;
        uint64_t v3 = v29;
        uint64_t v5 = v28;
        uint64_t v2 = v27;
        uint64_t v6 = v26;
        swift_storeEnumTagMultiPayload();
        sub_10001DAB4(v106, &qword_101639EF8);
      }
      else
      {
        uint64_t v32 = v0[8];
        sub_100090EA0(v0[17], (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
        sub_100090D20(v32, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      }
      uint64_t v33 = v0[14];
      uint64_t v34 = v0[12];
      sub_100090D20(v0[13], v33, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      sub_100090D88(v33, v34, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_10001CFB8(*(void *)v0[12], *(void *)(v105 + 8));
          if (__OFADD__(v97, 1))
          {
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
            goto LABEL_88;
          }
          ++v97;
LABEL_21:
          sub_100090D88(v0[14], v0[11], (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              sub_10001CFB8(*(void *)v0[11], *(void *)(v104 + 8));
              unint64_t v36 = 0x80000001013EE1F0;
              unint64_t v37 = 0xD000000000000012;
              break;
            case 2u:
              sub_10001CFB8(*(void *)v0[11], *(void *)(v104 + 8));
              unint64_t v37 = 0xD000000000000011;
              uint64_t v38 = "circleSharedSecret";
              goto LABEL_29;
            case 3u:
              sub_10001CFB8(*(void *)v0[11], *(void *)(v104 + 8));
              unint64_t v37 = 0xD000000000000014;
              uint64_t v38 = "circleWildRootKey";
              goto LABEL_29;
            case 4u:
              sub_100090EA0(v0[11], (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
              unint64_t v36 = 0xE90000000000006ELL;
              unint64_t v37 = 0x656B6F546E696F6ALL;
              break;
            case 5u:
              sub_100090EA0(v0[11], (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
              unint64_t v37 = 0xD000000000000013;
              uint64_t v38 = "nearOwnerLocationKey";
              goto LABEL_29;
            case 6u:
              sub_10001CFB8(*(void *)v0[11], *(void *)(v104 + 8));
              unint64_t v37 = 0xD000000000000014;
              uint64_t v38 = "delegatedSharingKey";
LABEL_29:
              unint64_t v36 = (unint64_t)v38 | 0x8000000000000000;
              break;
            default:
              sub_10001CFB8(*(void *)v0[11], *(void *)(v104 + 8));
              unint64_t v36 = 0xE700000000000000;
              unint64_t v37 = 0x6E776F6E6B6E75;
              break;
          }
          unint64_t v39 = v36;
          String.append(_:)(*(Swift::String *)&v37);
          swift_bridgeObjectRelease();
          v40._countAndFlagsBits = 40;
          v40._object = (void *)0xE100000000000000;
          String.append(_:)(v40);
          v41._countAndFlagsBits = UUID.uuidString.getter();
          String.append(_:)(v41);
          swift_bridgeObjectRelease();
          v42._countAndFlagsBits = 41;
          v42._object = (void *)0xE100000000000000;
          String.append(_:)(v42);
          id v43 = objc_allocWithZone((Class)SPDataIntegrityCheck);
          NSString v44 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v43 initWithValue:v44 severity:0];

          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          uint64_t v45 = v0[18];
          uint64_t v46 = v0[14];
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          sub_100090EA0(v46, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
          sub_100090EA0(v45, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
LABEL_4:
          v6 += v107;
          if (!--v2)
          {
            swift_bridgeObjectRelease();
            uint64_t v48 = v98;
            uint64_t v47 = v99;
            uint64_t v49 = v97;
            uint64_t v50 = v100;
            goto LABEL_35;
          }
          break;
        case 2u:
          sub_10001CFB8(*(void *)v0[12], *(void *)(v105 + 8));
          if (__OFADD__(v98, 1)) {
            goto LABEL_83;
          }
          ++v98;
          goto LABEL_21;
        case 3u:
          sub_10001CFB8(*(void *)v0[12], *(void *)(v105 + 8));
          if (__OFADD__(v99, 1)) {
            goto LABEL_84;
          }
          ++v99;
          goto LABEL_21;
        case 4u:
          BOOL v35 = __OFADD__(v100++, 1);
          if (!v35) {
            goto LABEL_19;
          }
          goto LABEL_85;
        case 5u:
          BOOL v35 = __OFADD__(v101++, 1);
          if (v35) {
            goto LABEL_86;
          }
LABEL_19:
          sub_100090EA0(v0[12], (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
          goto LABEL_21;
        case 6u:
          sub_10001CFB8(*(void *)v0[12], *(void *)(v105 + 8));
          BOOL v35 = __OFADD__(v102++, 1);
          if (!v35) {
            goto LABEL_21;
          }
          goto LABEL_87;
        default:
          uint64_t v8 = v0[18];
          id v9 = (uint64_t *)v0[12];
          sub_100090EA0(v0[14], (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
          sub_100090EA0(v8, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
          sub_10001CFB8(*v9, *(void *)(v105 + 8));
          goto LABEL_4;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
LABEL_35:
  uint64_t v51 = v0[6];
  uint64_t v52 = v51 + 1;
  if (__OFADD__(v51, 1))
  {
LABEL_88:
    __break(1u);
    JUMPOUT(0x100086458);
  }
  if (v50 == v52 && v49 == 1 && v48 == 1 && v47 == 1)
  {
    id v77 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v75 = String._bridgeToObjectiveC()();
    id v76 = [v77 initWithValue:v75 severity:0];
  }
  else
  {
    uint64_t v56 = v49;
    _StringGuts.grow(_:)(81);
    v57._countAndFlagsBits = 0xD00000000000001BLL;
    v57._object = (void *)0x80000001013F2BC0;
    String.append(_:)(v57);
    if (v50 == v52) {
      uint64_t v58 = 1702195828;
    }
    else {
      uint64_t v58 = 0x65736C6166;
    }
    if (v50 == v52) {
      unint64_t v59 = 0xE400000000000000;
    }
    else {
      unint64_t v59 = 0xE500000000000000;
    }
    unint64_t v60 = v59;
    String.append(_:)(*(Swift::String *)&v58);
    swift_bridgeObjectRelease();
    v61._object = (void *)0x80000001013F2A70;
    v61._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v61);
    if (v56 == 1) {
      uint64_t v62 = 1702195828;
    }
    else {
      uint64_t v62 = 0x65736C6166;
    }
    if (v56 == 1) {
      unint64_t v63 = 0xE400000000000000;
    }
    else {
      unint64_t v63 = 0xE500000000000000;
    }
    unint64_t v64 = v63;
    String.append(_:)(*(Swift::String *)&v62);
    swift_bridgeObjectRelease();
    v65._countAndFlagsBits = 0x52646C6977202C29;
    v65._object = (void *)0xED00002820746F6FLL;
    String.append(_:)(v65);
    if (v48 == 1) {
      uint64_t v66 = 1702195828;
    }
    else {
      uint64_t v66 = 0x65736C6166;
    }
    if (v48 == 1) {
      unint64_t v67 = 0xE400000000000000;
    }
    else {
      unint64_t v67 = 0xE500000000000000;
    }
    unint64_t v68 = v67;
    String.append(_:)(*(Swift::String *)&v66);
    swift_bridgeObjectRelease();
    v69._countAndFlagsBits = 0x4F7261656E202C29;
    v69._object = (void *)0xEE00282072656E77;
    String.append(_:)(v69);
    if (v47 == 1) {
      uint64_t v70 = 1702195828;
    }
    else {
      uint64_t v70 = 0x65736C6166;
    }
    if (v47 == 1) {
      unint64_t v71 = 0xE400000000000000;
    }
    else {
      unint64_t v71 = 0xE500000000000000;
    }
    unint64_t v72 = v71;
    String.append(_:)(*(Swift::String *)&v70);
    swift_bridgeObjectRelease();
    v73._countAndFlagsBits = 41;
    v73._object = (void *)0xE100000000000000;
    String.append(_:)(v73);
    id v74 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v75 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v76 = [v74 initWithValue:v75 severity:1];
  }
  unint64_t v78 = v76;
  uint64_t v79 = v0[19];
  uint64_t v80 = v0[5];

  if (*(unsigned char *)(v80 + *(int *)(v79 + 28)) == 3)
  {
    if (v101 == 1 && v102 == 1)
    {
      id v81 = objc_allocWithZone((Class)SPDataIntegrityCheck);
      NSString v82 = String._bridgeToObjectiveC()();
      id v83 = [v81 initWithValue:v82 severity:0];
    }
    else
    {
      _StringGuts.grow(_:)(76);
      v85._countAndFlagsBits = 0xD000000000000029;
      v85._object = (void *)0x80000001013F2BE0;
      String.append(_:)(v85);
      v0[3] = v101;
      v86._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v86);
      swift_bridgeObjectRelease();
      v87._countAndFlagsBits = 0xD00000000000001ELL;
      v87._object = (void *)0x80000001013F2C10;
      String.append(_:)(v87);
      v0[4] = v102;
      v88._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v88);
      swift_bridgeObjectRelease();
      v89._countAndFlagsBits = 41;
      v89._object = (void *)0xE100000000000000;
      String.append(_:)(v89);
      id v90 = objc_allocWithZone((Class)SPDataIntegrityCheck);
      NSString v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v83 = [v90 initWithValue:v82 severity:1];
    }
    uint64_t v84 = v83;
  }
  else
  {
    uint64_t v84 = v78;
  }
  id v91 = objc_allocWithZone((Class)SPSharedSecretsDataCheck);
  sub_10001D4B0(0, &qword_10163A0F0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v93 = [v91 initWithCompleteness:v84 secrets:isa];

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v94 = (uint64_t (*)(id))v0[1];
  return v94(v93);
}

uint64_t sub_100086490(uint64_t a1)
{
  v2[15] = a1;
  v2[16] = v1;
  uint64_t v3 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  v2[17] = v3;
  v2[18] = *(void *)(v3 - 8);
  v2[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[20] = v4;
  v2[21] = *(void *)(v4 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v2[28] = swift_task_alloc();
  return _swift_task_switch(sub_100086610, v1, 0);
}

uint64_t sub_100086610()
{
  uint64_t v1 = *(void *)(v0 + 120);
  *(void *)(v0 + 104) = _swiftEmptyArrayStorage;
  uint64_t v2 = (int *)type metadata accessor for OwnerSharingCircle();
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v24 = sub_100DF214C((uint64_t)off_1015AAAF8[*(char *)(v1 + v2[7])]);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(v3, v1 + v2[5], v5);
  uint64_t v8 = v2[6];
  *(_DWORD *)(v0 + 416) = v8;
  v7(v4, v1 + v8, v5);
  if (qword_101636950 != -1) {
    swift_once();
  }
  id v9 = *(int **)(v0 + 216);
  uint64_t v10 = *(void *)(v0 + 224);
  uint64_t v11 = *(void *)(v0 + 208);
  uint64_t v22 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 160);
  uint64_t v13 = *(void *)(v0 + 168);
  uint64_t v14 = sub_100010324(v12, (uint64_t)qword_10170DAA0);
  unint64_t v23 = sub_10092DA1C((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  id v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  v15(v10 + v9[5], v11, v12);
  v15(v10 + v9[6], v22, v12);
  v7(v10 + v9[7], v14, v12);
  *(void *)(v10 + v9[8]) = v24;
  uint64_t v16 = v9[9];
  *(unsigned char *)(v10 + v16) = 0;
  *(unsigned char *)(v10 + v9[10]) = 1;
  *(void *)(v10 + v9[11]) = v23;
  static Date.trustedNow.getter(v10 + v9[12]);
  if (*(unsigned char *)(v10 + v16) == 4)
  {
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_1000868DC;
    uint64_t v18 = *(void *)(v0 + 224);
    return sub_100C58AF4(v18);
  }
  else
  {
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100086A20;
    uint64_t v21 = *(void *)(v0 + 224);
    return sub_100C5DDC0(v21, 0);
  }
}

uint64_t sub_1000868DC(uint64_t a1)
{
  uint64_t v5 = *v2;
  uint64_t v4 = *v2;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v4 + 128);
  if (v1)
  {
    swift_errorRelease();
    uint64_t v7 = sub_100087098;
  }
  else
  {
    *(void *)(v5 + 248) = a1;
    uint64_t v7 = sub_100086B64;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100086A20(uint64_t a1)
{
  uint64_t v5 = *v2;
  uint64_t v4 = *v2;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v4 + 128);
  if (v1)
  {
    swift_errorRelease();
    uint64_t v7 = sub_100087098;
  }
  else
  {
    *(void *)(v5 + 248) = a1;
    uint64_t v7 = sub_100086B64;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100086B64()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 128) + 112);
  *(void *)(v0 + 256) = v1;
  return _swift_task_switch(sub_100086B88, v1, 0);
}

uint64_t sub_100086B88()
{
  *(void *)(v0 + 264) = *(void *)(*(void *)(v0 + 256) + 136);
  swift_retain();
  return _swift_task_switch(sub_100086BFC, 0, 0);
}

uint64_t sub_100086BFC()
{
  uint64_t v2 = v0[32];
  uint64_t v1 = v0[33];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[34] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[35] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  v0[36] = v5;
  *uint64_t v4 = v0;
  v4[1] = sub_100086D14;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 9, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_100086D14()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 296) = *(void *)(v1 + 72);
  return _swift_task_switch(sub_100086E70, 0, 0);
}

uint64_t sub_100086E70()
{
  uint64_t v1 = *(int *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 120);
  uid_t v3 = getuid();
  sub_100DC5FC0(v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100086F40;
  uint64_t v5 = *(void *)(v0 + 192);
  return sub_100647ED8(v5, v2 + v1, 0);
}

uint64_t sub_100086F40()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[21] + 8))(v2[24], v2[20]);
  if (v0)
  {
    uid_t v3 = sub_100087184;
    uint64_t v4 = 0;
  }
  else
  {
    swift_release();
    uint64_t v4 = v2[32];
    uid_t v3 = sub_1000871F8;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_100087098()
{
  swift_bridgeObjectRelease();
  sub_100090EA0(*(void *)(v0 + 224), type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void *))(v0 + 8);
  return v1(_swiftEmptyArrayStorage);
}

uint64_t sub_100087184()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 256);
  return _swift_task_switch(sub_1000871F8, v1, 0);
}

uint64_t sub_1000871F8()
{
  *(void *)(v0 + 320) = *(void *)(*(void *)(v0 + 256) + 136);
  swift_retain();
  return _swift_task_switch(sub_10008726C, 0, 0);
}

uint64_t sub_10008726C()
{
  uint64_t v1 = v0[40];
  uint64_t v2 = v0[32];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[41] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[42] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10008737C;
  uint64_t v5 = v0[36];
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_10008737C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 344) = *(void *)(v1 + 48);
  return _swift_task_switch(sub_1000874D8, 0, 0);
}

uint64_t sub_1000874D8()
{
  uint64_t v1 = *(int *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 120);
  uid_t v3 = getuid();
  sub_100DC5FC0(v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000875A8;
  uint64_t v5 = *(void *)(v0 + 184);
  return sub_100647ED8(v5, v2 + v1, 1);
}

uint64_t sub_1000875A8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 360) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[21] + 8))(v2[23], v2[20]);
  if (v0)
  {
    uid_t v3 = sub_100087700;
    uint64_t v4 = 0;
  }
  else
  {
    swift_release();
    uint64_t v4 = v2[32];
    uid_t v3 = sub_100087774;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_100087700()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 256);
  return _swift_task_switch(sub_100087774, v1, 0);
}

uint64_t sub_100087774()
{
  *(void *)(v0 + 368) = *(void *)(*(void *)(v0 + 256) + 136);
  swift_retain();
  return _swift_task_switch(sub_1000877E8, 0, 0);
}

uint64_t sub_1000877E8()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[32];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[47] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[48] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000878F8;
  uint64_t v5 = v0[36];
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_1000878F8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 392) = *(void *)(v1 + 56);
  return _swift_task_switch(sub_100087A54, 0, 0);
}

uint64_t sub_100087A54()
{
  uint64_t v1 = *(int *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 120);
  uid_t v3 = getuid();
  sub_100DC5FC0(v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 400) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100087B20;
  uint64_t v5 = *(void *)(v0 + 176);
  return sub_10064ACB8(v5, v2 + v1);
}

uint64_t sub_100087B20()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[21] + 8))(v2[22], v2[20]);
    uid_t v3 = sub_100088368;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v6 = v2[21];
    uint64_t v5 = v2[22];
    uint64_t v7 = v2[20];
    uint64_t v8 = v2[16];
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_release();
    uid_t v3 = sub_100087C7C;
    uint64_t v4 = v8;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_100087C7C()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v82 = *(void *)(v1 + 16);
  if (v82)
  {
    uint64_t v2 = 0;
    uint64_t v79 = v0 + 420;
    uint64_t v3 = *(void *)(v0 + 144);
    uint64_t v80 = *(void *)(v3 + 72);
    uint64_t v81 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    while (1)
    {
      sub_100090D88(v81 + v2 * v80, *(void *)(v0 + 152), type metadata accessor for KeyDropInterface.KeyPackage);
      uint64_t v4 = swift_bridgeObjectRetain();
      uint64_t v5 = sub_1000757BC(v4);
      swift_bridgeObjectRelease();
      unint64_t v6 = v5[2];
      if (!v6)
      {
        uint64_t v10 = *(unsigned char **)(v0 + 152);
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0xE000000000000000;
        v11._countAndFlagsBits = 0x636572726F636E49;
        v11._object = (void *)0xEF65756C61762074;
        String.append(_:)(v11);
        v12._countAndFlagsBits = 8250;
        v12._object = (void *)0xE200000000000000;
        String.append(_:)(v12);
        *(unsigned char *)(v0 + 420) = *v10;
        _print_unlocked<A, B>(_:_:)();
        v13._countAndFlagsBits = 8250;
        v13._object = (void *)0xE200000000000000;
        String.append(_:)(v13);
        unint64_t v14 = v5[2];
        if (v14)
        {
          unint64_t v15 = v5[4];
          unint64_t v16 = v14 - 1;
          if (v14 != 1)
          {
            if (v14 >= 5)
            {
              unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFFCLL | 1;
              int8x16_t v47 = (int8x16_t)vdupq_n_s64(v15);
              uint64_t v48 = (uint64x2_t *)(v5 + 7);
              unint64_t v49 = v16 & 0xFFFFFFFFFFFFFFFCLL;
              int8x16_t v50 = v47;
              do
              {
                int8x16_t v47 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v47, v48[-1]), (int8x16_t)v48[-1], v47);
                int8x16_t v50 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v50, *v48), *(int8x16_t *)v48, v50);
                v48 += 2;
                v49 -= 4;
              }
              while (v49);
              int8x16_t v51 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v50, (uint64x2_t)v47), v47, v50);
              unint64_t v52 = vextq_s8(v51, v51, 8uLL).u64[0];
              unint64_t v15 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v52, v51.u64[0]), *(int8x8_t *)v51.i8, (int8x8_t)v52);
              if (v16 != (v16 & 0xFFFFFFFFFFFFFFFCLL)) {
                goto LABEL_33;
              }
            }
            else
            {
              unint64_t v17 = 1;
LABEL_33:
              unint64_t v53 = v14 - v17;
              unint64_t v54 = &v5[v17 + 4];
              do
              {
                unint64_t v56 = *v54++;
                unint64_t v55 = v56;
                if (v56 < v15) {
                  unint64_t v15 = v55;
                }
                --v53;
              }
              while (v53);
            }
          }
        }
        else
        {
          unint64_t v15 = 0;
        }
        *(void *)(v0 + 112) = v15;
        v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        v58._countAndFlagsBits = 3026478;
        v58._object = (void *)0xE300000000000000;
        String.append(_:)(v58);
        unint64_t v59 = v5[2];
        if (v59)
        {
          unint64_t v60 = v5[4];
          unint64_t v61 = v59 - 1;
          if (v59 != 1)
          {
            if (v59 >= 5)
            {
              unint64_t v62 = v61 & 0xFFFFFFFFFFFFFFFCLL | 1;
              int8x16_t v63 = (int8x16_t)vdupq_n_s64(v60);
              unint64_t v64 = (uint64x2_t *)(v5 + 7);
              unint64_t v65 = v61 & 0xFFFFFFFFFFFFFFFCLL;
              int8x16_t v66 = v63;
              do
              {
                int8x16_t v63 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v63, v64[-1]), v63, (int8x16_t)v64[-1]);
                int8x16_t v66 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v66, *v64), v66, *(int8x16_t *)v64);
                v64 += 2;
                v65 -= 4;
              }
              while (v65);
              int8x16_t v67 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v63, (uint64x2_t)v66), v63, v66);
              unint64_t v68 = vextq_s8(v67, v67, 8uLL).u64[0];
              unint64_t v60 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v67.u64[0], v68), *(int8x8_t *)v67.i8, (int8x8_t)v68);
              if (v61 != (v61 & 0xFFFFFFFFFFFFFFFCLL)) {
                goto LABEL_45;
              }
            }
            else
            {
              unint64_t v62 = 1;
LABEL_45:
              unint64_t v69 = v59 - v62;
              uint64_t v70 = &v5[v62 + 4];
              do
              {
                unint64_t v72 = *v70++;
                unint64_t v71 = v72;
                if (v60 <= v72) {
                  unint64_t v60 = v71;
                }
                --v69;
              }
              while (v69);
            }
          }
        }
        else
        {
          unint64_t v60 = 0;
        }
        swift_bridgeObjectRelease();
        *(void *)(v0 + 80) = v60;
        v73._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v73);
        swift_bridgeObjectRelease();
        id v74 = objc_allocWithZone((Class)SPDataIntegrityCheck);
        NSString v46 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v74 initWithValue:v46 severity:1, v79];
        goto LABEL_50;
      }
      unint64_t v7 = v5[4];
      unint64_t v8 = v6 - 1;
      if (v6 == 1)
      {
        int8x8_t v9 = (int8x8_t)v5[4];
        goto LABEL_28;
      }
      if (v6 < 5) {
        break;
      }
      int8x16_t v19 = (int8x16_t)vdupq_n_s64(v7);
      unint64_t v18 = v8 & 0xFFFFFFFFFFFFFFFCLL | 1;
      uint64_t v20 = (uint64x2_t *)(v5 + 7);
      unint64_t v21 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      int8x16_t v22 = v19;
      do
      {
        int8x16_t v19 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v19, v20[-1]), (int8x16_t)v20[-1], v19);
        int8x16_t v22 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v22, *v20), *(int8x16_t *)v20, v22);
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      int8x16_t v23 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v22, (uint64x2_t)v19), v19, v22);
      unint64_t v24 = vextq_s8(v23, v23, 8uLL).u64[0];
      int8x8_t v9 = vbsl_s8((int8x8_t)vcgtd_u64(v24, v23.u64[0]), *(int8x8_t *)v23.i8, (int8x8_t)v24);
      if (v8 != (v8 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_15;
      }
LABEL_19:
      if (v6 < 5)
      {
        unint64_t v29 = 1;
LABEL_24:
        unint64_t v36 = v6 - v29;
        unint64_t v37 = &v5[v29 + 4];
        do
        {
          unint64_t v39 = *v37++;
          unint64_t v38 = v39;
          if (v7 <= v39) {
            unint64_t v7 = v38;
          }
          --v36;
        }
        while (v36);
        goto LABEL_28;
      }
      unint64_t v29 = v8 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int8x16_t v30 = (int8x16_t)vdupq_n_s64(v7);
      unint64_t v31 = (uint64x2_t *)(v5 + 7);
      unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      int8x16_t v33 = v30;
      do
      {
        int8x16_t v30 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v30, v31[-1]), v30, (int8x16_t)v31[-1]);
        int8x16_t v33 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v33, *v31), v33, *(int8x16_t *)v31);
        v31 += 2;
        v32 -= 4;
      }
      while (v32);
      int8x16_t v34 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v30, (uint64x2_t)v33), v30, v33);
      unint64_t v35 = vextq_s8(v34, v34, 8uLL).u64[0];
      unint64_t v7 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v34.u64[0], v35), *(int8x8_t *)v34.i8, (int8x8_t)v35);
      if (v8 != (v8 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_24;
      }
LABEL_28:
      Swift::String v40 = *(unsigned char **)(v0 + 152);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 32) = 0;
      *(void *)(v0 + 40) = 0xE000000000000000;
      *(unsigned char *)(v0 + 421) = *v40;
      _print_unlocked<A, B>(_:_:)();
      v41._countAndFlagsBits = 8250;
      v41._object = (void *)0xE200000000000000;
      String.append(_:)(v41);
      *(int8x8_t *)(v0 + 88) = v9;
      v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43._countAndFlagsBits = 3026478;
      v43._object = (void *)0xE300000000000000;
      String.append(_:)(v43);
      *(void *)(v0 + 96) = v7;
      v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      id v45 = objc_allocWithZone((Class)SPDataIntegrityCheck);
      NSString v46 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v45 initWithValue:v46 severity:0];
LABEL_50:

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)(v0 + 104) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 104) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      ++v2;
      uint64_t v75 = *(void *)(v0 + 152);
      specialized Array._endMutation()();
      sub_100090EA0(v75, type metadata accessor for KeyDropInterface.KeyPackage);
      if (v2 == v82) {
        goto LABEL_53;
      }
    }
    int8x8_t v9 = (int8x8_t)v5[4];
    unint64_t v18 = 1;
LABEL_15:
    unint64_t v25 = v6 - v18;
    uint64_t v26 = (int8x8_t *)&v5[v18 + 4];
    do
    {
      int8x8_t v28 = *v26++;
      int8x8_t v27 = v28;
      if (*(void *)&v28 < *(void *)&v9) {
        int8x8_t v9 = v27;
      }
      --v25;
    }
    while (v25);
    goto LABEL_19;
  }
LABEL_53:
  swift_bridgeObjectRelease();
  uint64_t v76 = *(void *)(v0 + 104);
  sub_100090EA0(*(void *)(v0 + 224), type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v77 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v77(v76);
}

uint64_t sub_100088368()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_release();
  swift_errorRelease();
  return _swift_task_switch(sub_1000883E0, v1, 0);
}

uint64_t sub_1000883E0()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v82 = *(void *)(v1 + 16);
  if (v82)
  {
    uint64_t v2 = 0;
    uint64_t v79 = v0 + 420;
    uint64_t v3 = *(void *)(v0 + 144);
    uint64_t v80 = *(void *)(v3 + 72);
    uint64_t v81 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    while (1)
    {
      sub_100090D88(v81 + v2 * v80, *(void *)(v0 + 152), type metadata accessor for KeyDropInterface.KeyPackage);
      uint64_t v4 = swift_bridgeObjectRetain();
      uint64_t v5 = sub_1000757BC(v4);
      swift_bridgeObjectRelease();
      unint64_t v6 = v5[2];
      if (!v6)
      {
        uint64_t v10 = *(unsigned char **)(v0 + 152);
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0xE000000000000000;
        v11._countAndFlagsBits = 0x636572726F636E49;
        v11._object = (void *)0xEF65756C61762074;
        String.append(_:)(v11);
        v12._countAndFlagsBits = 8250;
        v12._object = (void *)0xE200000000000000;
        String.append(_:)(v12);
        *(unsigned char *)(v0 + 420) = *v10;
        _print_unlocked<A, B>(_:_:)();
        v13._countAndFlagsBits = 8250;
        v13._object = (void *)0xE200000000000000;
        String.append(_:)(v13);
        unint64_t v14 = v5[2];
        if (v14)
        {
          unint64_t v15 = v5[4];
          unint64_t v16 = v14 - 1;
          if (v14 != 1)
          {
            if (v14 >= 5)
            {
              unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFFCLL | 1;
              int8x16_t v47 = (int8x16_t)vdupq_n_s64(v15);
              uint64_t v48 = (uint64x2_t *)(v5 + 7);
              unint64_t v49 = v16 & 0xFFFFFFFFFFFFFFFCLL;
              int8x16_t v50 = v47;
              do
              {
                int8x16_t v47 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v47, v48[-1]), (int8x16_t)v48[-1], v47);
                int8x16_t v50 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v50, *v48), *(int8x16_t *)v48, v50);
                v48 += 2;
                v49 -= 4;
              }
              while (v49);
              int8x16_t v51 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v50, (uint64x2_t)v47), v47, v50);
              unint64_t v52 = vextq_s8(v51, v51, 8uLL).u64[0];
              unint64_t v15 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v52, v51.u64[0]), *(int8x8_t *)v51.i8, (int8x8_t)v52);
              if (v16 != (v16 & 0xFFFFFFFFFFFFFFFCLL)) {
                goto LABEL_33;
              }
            }
            else
            {
              unint64_t v17 = 1;
LABEL_33:
              unint64_t v53 = v14 - v17;
              unint64_t v54 = &v5[v17 + 4];
              do
              {
                unint64_t v56 = *v54++;
                unint64_t v55 = v56;
                if (v56 < v15) {
                  unint64_t v15 = v55;
                }
                --v53;
              }
              while (v53);
            }
          }
        }
        else
        {
          unint64_t v15 = 0;
        }
        *(void *)(v0 + 112) = v15;
        v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        v58._countAndFlagsBits = 3026478;
        v58._object = (void *)0xE300000000000000;
        String.append(_:)(v58);
        unint64_t v59 = v5[2];
        if (v59)
        {
          unint64_t v60 = v5[4];
          unint64_t v61 = v59 - 1;
          if (v59 != 1)
          {
            if (v59 >= 5)
            {
              unint64_t v62 = v61 & 0xFFFFFFFFFFFFFFFCLL | 1;
              int8x16_t v63 = (int8x16_t)vdupq_n_s64(v60);
              unint64_t v64 = (uint64x2_t *)(v5 + 7);
              unint64_t v65 = v61 & 0xFFFFFFFFFFFFFFFCLL;
              int8x16_t v66 = v63;
              do
              {
                int8x16_t v63 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v63, v64[-1]), v63, (int8x16_t)v64[-1]);
                int8x16_t v66 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v66, *v64), v66, *(int8x16_t *)v64);
                v64 += 2;
                v65 -= 4;
              }
              while (v65);
              int8x16_t v67 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v63, (uint64x2_t)v66), v63, v66);
              unint64_t v68 = vextq_s8(v67, v67, 8uLL).u64[0];
              unint64_t v60 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v67.u64[0], v68), *(int8x8_t *)v67.i8, (int8x8_t)v68);
              if (v61 != (v61 & 0xFFFFFFFFFFFFFFFCLL)) {
                goto LABEL_45;
              }
            }
            else
            {
              unint64_t v62 = 1;
LABEL_45:
              unint64_t v69 = v59 - v62;
              uint64_t v70 = &v5[v62 + 4];
              do
              {
                unint64_t v72 = *v70++;
                unint64_t v71 = v72;
                if (v60 <= v72) {
                  unint64_t v60 = v71;
                }
                --v69;
              }
              while (v69);
            }
          }
        }
        else
        {
          unint64_t v60 = 0;
        }
        swift_bridgeObjectRelease();
        *(void *)(v0 + 80) = v60;
        v73._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v73);
        swift_bridgeObjectRelease();
        id v74 = objc_allocWithZone((Class)SPDataIntegrityCheck);
        NSString v46 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v74 initWithValue:v46 severity:1, v79];
        goto LABEL_50;
      }
      unint64_t v7 = v5[4];
      unint64_t v8 = v6 - 1;
      if (v6 == 1)
      {
        int8x8_t v9 = (int8x8_t)v5[4];
        goto LABEL_28;
      }
      if (v6 < 5) {
        break;
      }
      int8x16_t v19 = (int8x16_t)vdupq_n_s64(v7);
      unint64_t v18 = v8 & 0xFFFFFFFFFFFFFFFCLL | 1;
      uint64_t v20 = (uint64x2_t *)(v5 + 7);
      unint64_t v21 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      int8x16_t v22 = v19;
      do
      {
        int8x16_t v19 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v19, v20[-1]), (int8x16_t)v20[-1], v19);
        int8x16_t v22 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v22, *v20), *(int8x16_t *)v20, v22);
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      int8x16_t v23 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v22, (uint64x2_t)v19), v19, v22);
      unint64_t v24 = vextq_s8(v23, v23, 8uLL).u64[0];
      int8x8_t v9 = vbsl_s8((int8x8_t)vcgtd_u64(v24, v23.u64[0]), *(int8x8_t *)v23.i8, (int8x8_t)v24);
      if (v8 != (v8 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_15;
      }
LABEL_19:
      if (v6 < 5)
      {
        unint64_t v29 = 1;
LABEL_24:
        unint64_t v36 = v6 - v29;
        unint64_t v37 = &v5[v29 + 4];
        do
        {
          unint64_t v39 = *v37++;
          unint64_t v38 = v39;
          if (v7 <= v39) {
            unint64_t v7 = v38;
          }
          --v36;
        }
        while (v36);
        goto LABEL_28;
      }
      unint64_t v29 = v8 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int8x16_t v30 = (int8x16_t)vdupq_n_s64(v7);
      unint64_t v31 = (uint64x2_t *)(v5 + 7);
      unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      int8x16_t v33 = v30;
      do
      {
        int8x16_t v30 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v30, v31[-1]), v30, (int8x16_t)v31[-1]);
        int8x16_t v33 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v33, *v31), v33, *(int8x16_t *)v31);
        v31 += 2;
        v32 -= 4;
      }
      while (v32);
      int8x16_t v34 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v30, (uint64x2_t)v33), v30, v33);
      unint64_t v35 = vextq_s8(v34, v34, 8uLL).u64[0];
      unint64_t v7 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v34.u64[0], v35), *(int8x8_t *)v34.i8, (int8x8_t)v35);
      if (v8 != (v8 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_24;
      }
LABEL_28:
      Swift::String v40 = *(unsigned char **)(v0 + 152);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 32) = 0;
      *(void *)(v0 + 40) = 0xE000000000000000;
      *(unsigned char *)(v0 + 421) = *v40;
      _print_unlocked<A, B>(_:_:)();
      v41._countAndFlagsBits = 8250;
      v41._object = (void *)0xE200000000000000;
      String.append(_:)(v41);
      *(int8x8_t *)(v0 + 88) = v9;
      v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43._countAndFlagsBits = 3026478;
      v43._object = (void *)0xE300000000000000;
      String.append(_:)(v43);
      *(void *)(v0 + 96) = v7;
      v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      id v45 = objc_allocWithZone((Class)SPDataIntegrityCheck);
      NSString v46 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v45 initWithValue:v46 severity:0];
LABEL_50:

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)(v0 + 104) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 104) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      ++v2;
      uint64_t v75 = *(void *)(v0 + 152);
      specialized Array._endMutation()();
      sub_100090EA0(v75, type metadata accessor for KeyDropInterface.KeyPackage);
      if (v2 == v82) {
        goto LABEL_53;
      }
    }
    int8x8_t v9 = (int8x8_t)v5[4];
    unint64_t v18 = 1;
LABEL_15:
    unint64_t v25 = v6 - v18;
    uint64_t v26 = (int8x8_t *)&v5[v18 + 4];
    do
    {
      int8x8_t v28 = *v26++;
      int8x8_t v27 = v28;
      if (*(void *)&v28 < *(void *)&v9) {
        int8x8_t v9 = v27;
      }
      --v25;
    }
    while (v25);
    goto LABEL_19;
  }
LABEL_53:
  swift_bridgeObjectRelease();
  uint64_t v76 = *(void *)(v0 + 104);
  sub_100090EA0(*(void *)(v0 + 224), type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v77 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v77(v76);
}

uint64_t sub_100088ACC(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = *(void *)(v4 + 64);
  v2[7] = swift_task_alloc();
  v2[8] = sub_10000588C((uint64_t *)&unk_101653D50);
  v2[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SharedBeaconRecord(0);
  v2[10] = v5;
  v2[11] = *(void *)(v5 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_100088C24, v1, 0);
}

uint64_t sub_100088C24()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112);
  *(void *)(v0 + 104) = v1;
  return _swift_task_switch(sub_100088C48, v1, 0);
}

uint64_t sub_100088C48()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[2];
  v0[14] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  v0[15] = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_100088D3C, 0, 0);
}

uint64_t sub_100088D3C()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[16] = v3;
  v3[2] = v2;
  v3[3] = sub_1000909D8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[17] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100088E40;
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100091084, v3, v6);
}

uint64_t sub_100088E40()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100088F90, v1, 0);
}

uint64_t sub_100088F90()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[9];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[11] + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, (uint64_t *)&unk_101653D50);
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    sub_1000909F0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    id v4 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v6 = [v4 initWithValue:v5 severity:2];
  }
  else
  {
    uint64_t v7 = v0[12];
    sub_100090D20(v2, v7, type metadata accessor for SharedBeaconRecord);
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = sub_1008F4D3C(*(unsigned char *)(v7 + *(int *)(v1 + 64)));
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 32;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    sub_1000909F0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    id v11 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v6 = [v11 initWithValue:v12 severity:0];

    sub_100090EA0(v7, type metadata accessor for SharedBeaconRecord);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v13 = (uint64_t (*)(id))v0[1];
  return v13(v6);
}

uint64_t sub_100089298(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = *(void *)(v4 + 64);
  v2[7] = swift_task_alloc();
  v2[8] = sub_10000588C(&qword_10163B9E0);
  v2[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for BeaconNamingRecord();
  v2[10] = v5;
  v2[11] = *(void *)(v5 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_1000893F0, v1, 0);
}

uint64_t sub_1000893F0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112);
  *(void *)(v0 + 104) = v1;
  return _swift_task_switch(sub_100089414, v1, 0);
}

uint64_t sub_100089414()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[2];
  v0[14] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  v0[15] = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_100089508, 0, 0);
}

uint64_t sub_100089508()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[16] = v3;
  v3[2] = v2;
  v3[3] = sub_100090CD0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[17] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10008960C;
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090CE8, v3, v6);
}

uint64_t sub_10008960C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_10008975C, v1, 0);
}

uint64_t sub_10008975C()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[9];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[11] + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, &qword_10163B9E0);
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    id v3 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v4 = String._bridgeToObjectiveC()();
    id v5 = [v3 initWithValue:v4 severity:0];
  }
  else
  {
    uint64_t v6 = v0[12];
    sub_100090D20(v2, v6, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    uint64_t v7 = (uint64_t *)(v6 + *(int *)(v1 + 32));
    uint64_t v8 = *v7;
    uint64_t v9 = (void *)v7[1];
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = v8;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 32;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    sub_1000909F0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    id v13 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v5 = [v13 initWithValue:v14 severity:0xD000000000000014];

    sub_100090EA0(v6, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(id))v0[1];
  return v15(v5);
}

uint64_t sub_1000899F8(uint64_t a1)
{
  v2[21] = a1;
  v2[22] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[23] = v3;
  v2[24] = *(void *)(v3 - 8);
  v2[25] = swift_task_alloc();
  return _swift_task_switch(sub_100089AB8, v1, 0);
}

uint64_t sub_100089AB8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 176) + 112);
  *(void *)(v0 + 208) = v1;
  return _swift_task_switch(sub_100089ADC, v1, 0);
}

uint64_t sub_100089ADC()
{
  *(void *)(v0 + 216) = *(void *)(*(void *)(v0 + 208) + 136);
  swift_retain();
  return _swift_task_switch(sub_100089B50, 0, 0);
}

uint64_t sub_100089B50()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[28] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  NSString v4 = (void *)swift_task_alloc();
  v0[29] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *NSString v4 = v0;
  v4[1] = sub_100089C64;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 20, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_100089C64()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 176);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 240) = *(void *)(v1 + 160);
  return _swift_task_switch(sub_100089DD4, v2, 0);
}

uint64_t sub_100089DD4()
{
  uid_t v0 = getuid();
  sub_100DC5FC0(v0);
  return _swift_task_switch(sub_100089E44, 0, 0);
}

uint64_t sub_100089E44()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[31] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100089EF8;
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[21];
  return sub_10064B6F4((uint64_t)(v0 + 11), v3, v2);
}

uint64_t sub_100089EF8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10008A248;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v6 = v2[24];
    uint64_t v5 = v2[25];
    uint64_t v8 = v2 + 22;
    uint64_t v7 = v2[22];
    (*(void (**)(uint64_t, void))(v6 + 8))(v5, v8[1]);
    swift_release();
    uint64_t v3 = sub_10008A038;
    uint64_t v4 = v7;
  }
  return _swift_task_switch(v3, v4, 0);
}

uint64_t sub_10008A038()
{
  sub_10001D608((uint64_t)(v0 + 11), (uint64_t)(v0 + 2), &qword_10163A110);
  uint64_t v1 = (void *)v0[3];
  if (v1)
  {
    uint64_t v2 = v0[2];
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v3._countAndFlagsBits = v2;
    v3._object = v1;
    String.append(_:)(v3);
    sub_100090C20(v0 + 11);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 32;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    sub_1000909F0((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    id v6 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v8 = 0;
  }
  else
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    id v6 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v7 = String._bridgeToObjectiveC()();
    uint64_t v8 = 2;
  }
  id v9 = [v6 initWithValue:v7 severity:v8];

  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(id))v0[1];
  return v10(v9);
}

uint64_t sub_10008A248()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  swift_release();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_10008A2EC, v4, 0);
}

uint64_t sub_10008A2EC()
{
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  id v1 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 initWithValue:v2 severity:2];

  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(id))(v0 + 8);
  return v4(v3);
}

uint64_t sub_10008A3C8(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  v2[9] = sub_10000588C((uint64_t *)&unk_10163B890);
  v2[10] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for MemberPeerTrust();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[14] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[15] = v5;
  v2[16] = *(void *)(v5 + 64);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[19] = swift_task_alloc();
  return _swift_task_switch(sub_10008A560, v1, 0);
}

uint64_t sub_10008A560()
{
  *(void *)(v0 + 48) = _swiftEmptyArrayStorage;
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 160) = v2;
  uint64_t v3 = *(void *)(v0 + 120);
  if (v2)
  {
    int v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 280) = v4;
    *(void *)(v0 + 168) = *(void *)(v3 + 72);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    *(void *)(v0 + 176) = v5;
    *(void *)(v0 + 184) = 0;
    uint64_t v6 = *(void *)(v0 + 152);
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v8 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    *(void *)(v0 + 192) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    swift_bridgeObjectRetain();
    v5(v6, v8, v7);
    id v9 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56);
    *(void *)(v0 + 200) = v9;
    v9(v6, 0, 1, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v7) != 1)
    {
      uint64_t v10 = *(void *)(v0 + 144);
      uint64_t v11 = *(void *)(v0 + 152);
      uint64_t v12 = *(void *)(v0 + 112);
      uint64_t v13 = *(void *)(v0 + 120);
      uint64_t v14 = *(void *)(v0 + 64);
      uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
      *(void *)(v0 + 208) = v15;
      *(void *)(v0 + 216) = (v13 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v15(v10, v11, v12);
      uint64_t v16 = *(void *)(v14 + 112);
      *(void *)(v0 + 224) = v16;
      return _swift_task_switch(sub_10008A774, v16, 0);
    }
  }
  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    uint64_t v18 = *(void *)(v0 + 152);
    uint64_t v19 = *(void *)(v0 + 112);
    swift_bridgeObjectRetain();
    v17(v18, 1, 1, v19);
  }
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v0 + 48);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v21(v20);
}

uint64_t sub_10008A774()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 208);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 112);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 280) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 280);
  *(void *)(v0 + 232) = *(void *)(v1 + 136);
  v3(v5, v4, v6);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 240) = v8;
  *(void *)(v8 + 16) = v1;
  v2(v8 + v7, v5, v6);
  swift_retain();
  return _swift_task_switch(sub_10008A868, 0, 0);
}

uint64_t sub_10008A868()
{
  uint64_t v2 = v0[29];
  uint64_t v1 = v0[30];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[31] = v3;
  v3[2] = v2;
  v3[3] = sub_100090C08;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[32] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10008A96C;
  uint64_t v6 = v0[9];
  uint64_t v5 = v0[10];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000750F8, v3, v6);
}

uint64_t sub_10008A96C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_10008AABC, v1, 0);
}

uint64_t sub_10008AABC()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 96) + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, (uint64_t *)&unk_10163B890);
    *(void *)(v0 + 16) = 0xD000000000000010;
    *(void *)(v0 + 24) = 0x80000001013F2A90;
    v3._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    id v4 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v6 = [v4 initWithValue:v5 severity:2];

    id v7 = [objc_allocWithZone((Class)SPPeerTrustDataIntegrity) initWithPeerTrustRecord:v6 messagingDestination:0];
    id v8 = v7;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 48) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v9 = *(void *)(v0 + 160);
    uint64_t v10 = *(void *)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 112);
    uint64_t v12 = *(void *)(v0 + 120);
    uint64_t v13 = *(void *)(v0 + 184) + 1;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    if (v13 == v9)
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 200))(*(void *)(v0 + 152), 1, 1, *(void *)(v0 + 112));
LABEL_10:
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(v0 + 48);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      int8x8_t v27 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v27(v26);
    }
    uint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 176);
    uint64_t v20 = *(void *)(v0 + 184) + 1;
    uint64_t v21 = *(void *)(v0 + 152);
    uint64_t v22 = *(void *)(v0 + 112);
    uint64_t v23 = *(void *)(v0 + 120);
    unint64_t v24 = *(void *)(v0 + 56)
        + ((*(unsigned __int8 *)(v0 + 280) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 280))
        + *(void *)(v0 + 168) * v20;
    *(void *)(v0 + 184) = v20;
    *(void *)(v0 + 192) = (v23 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v19(v21, v24, v22);
    unint64_t v25 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56);
    *(void *)(v0 + 200) = v25;
    v25(v21, 0, 1, v22);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1) {
      goto LABEL_10;
    }
    uint64_t v28 = *(void *)(v0 + 144);
    uint64_t v29 = *(void *)(v0 + 152);
    uint64_t v30 = *(void *)(v0 + 112);
    uint64_t v31 = *(void *)(v0 + 120);
    uint64_t v32 = *(void *)(v0 + 64);
    int8x16_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32);
    *(void *)(v0 + 208) = v33;
    *(void *)(v0 + 216) = (v31 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v33(v28, v29, v30);
    uint64_t v34 = *(void *)(v32 + 112);
    *(void *)(v0 + 224) = v34;
    return _swift_task_switch(sub_10008A774, v34, 0);
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 104);
    sub_100090D20(v2, v14, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v15 = *(int *)(v1 + 28);
    *(_DWORD *)(v0 + 284) = v15;
    uint64_t v16 = v14 + v15;
    unint64_t v35 = (uint64_t (*)(uint64_t))((char *)&dword_101661678 + dword_101661678);
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10008AEF0;
    return v35(v16);
  }
}

uint64_t sub_10008AEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v4;
  *(void *)(*v4 + 272) = a3;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v5 + 64);
  if (v3)
  {
    swift_errorRelease();
    id v7 = sub_10008B43C;
  }
  else
  {
    id v7 = sub_10008B028;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10008B028()
{
  if (*(void *)(v0 + 272))
  {
    swift_bridgeObjectRelease();
    sub_1009C77D8();
    id v1 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v3 = [v1 initWithValue:v2 severity:0];
  }
  else
  {
    *(void *)(v0 + 32) = 0xD00000000000001DLL;
    *(void *)(v0 + 40) = 0x80000001013F2AB0;
    v4._countAndFlagsBits = sub_1009C77D8();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    id v5 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v3 = [v5 initWithValue:v2 severity:2];
  }
  uint64_t v6 = v3;
  uint64_t v7 = *(void *)(v0 + 104);

  UUID.uuidString.getter();
  id v8 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v8 initWithValue:v9 severity:0];

  id v11 = [objc_allocWithZone((Class)SPPeerTrustDataIntegrity) initWithPeerTrustRecord:v10 messagingDestination:v6];
  sub_100090EA0(v7, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  id v12 = v11;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 48) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v13 = *(void *)(v0 + 160);
  uint64_t v14 = *(void *)(v0 + 144);
  uint64_t v15 = *(void *)(v0 + 112);
  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t v17 = *(void *)(v0 + 184) + 1;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  if (v17 == v13)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 200))(*(void *)(v0 + 152), 1, 1, *(void *)(v0 + 112));
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void *)(v0 + 48);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v26(v25);
  }
  uint64_t v18 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 176);
  uint64_t v19 = *(void *)(v0 + 184) + 1;
  uint64_t v20 = *(void *)(v0 + 152);
  uint64_t v21 = *(void *)(v0 + 112);
  uint64_t v22 = *(void *)(v0 + 120);
  unint64_t v23 = *(void *)(v0 + 56)
      + ((*(unsigned __int8 *)(v0 + 280) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 280))
      + *(void *)(v0 + 168) * v19;
  *(void *)(v0 + 184) = v19;
  *(void *)(v0 + 192) = (v22 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v18(v20, v23, v21);
  unint64_t v24 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56);
  *(void *)(v0 + 200) = v24;
  v24(v20, 0, 1, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1) {
    goto LABEL_9;
  }
  uint64_t v28 = *(void *)(v0 + 144);
  uint64_t v29 = *(void *)(v0 + 152);
  uint64_t v30 = *(void *)(v0 + 112);
  uint64_t v31 = *(void *)(v0 + 120);
  uint64_t v32 = *(void *)(v0 + 64);
  int8x16_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32);
  *(void *)(v0 + 208) = v33;
  *(void *)(v0 + 216) = (v31 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v33(v28, v29, v30);
  uint64_t v34 = *(void *)(v32 + 112);
  *(void *)(v0 + 224) = v34;
  return _swift_task_switch(sub_10008A774, v34, 0);
}

uint64_t sub_10008B43C()
{
  *(void *)(v0 + 32) = 0xD00000000000001DLL;
  *(void *)(v0 + 40) = 0x80000001013F2AB0;
  v1._countAndFlagsBits = sub_1009C77D8();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  id v2 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithValue:v3 severity:2];
  uint64_t v5 = *(void *)(v0 + 104);

  UUID.uuidString.getter();
  id v6 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v6 initWithValue:v7 severity:0];

  id v9 = [objc_allocWithZone((Class)SPPeerTrustDataIntegrity) initWithPeerTrustRecord:v8 messagingDestination:v4];
  sub_100090EA0(v5, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  id v10 = v9;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 48) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t v11 = *(void *)(v0 + 160);
  uint64_t v12 = *(void *)(v0 + 144);
  uint64_t v13 = *(void *)(v0 + 112);
  uint64_t v14 = *(void *)(v0 + 120);
  uint64_t v15 = *(void *)(v0 + 184) + 1;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  if (v15 == v11)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 200))(*(void *)(v0 + 152), 1, 1, *(void *)(v0 + 112));
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void *)(v0 + 48);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v24 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v24(v23);
  }
  uint64_t v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 176);
  uint64_t v17 = *(void *)(v0 + 184) + 1;
  uint64_t v18 = *(void *)(v0 + 152);
  uint64_t v19 = *(void *)(v0 + 112);
  uint64_t v20 = *(void *)(v0 + 120);
  unint64_t v21 = *(void *)(v0 + 56)
      + ((*(unsigned __int8 *)(v0 + 280) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 280))
      + *(void *)(v0 + 168) * v17;
  *(void *)(v0 + 184) = v17;
  *(void *)(v0 + 192) = (v20 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v16(v18, v21, v19);
  uint64_t v22 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56);
  *(void *)(v0 + 200) = v22;
  v22(v18, 0, 1, v19);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1) {
    goto LABEL_6;
  }
  uint64_t v26 = *(void *)(v0 + 144);
  uint64_t v27 = *(void *)(v0 + 152);
  uint64_t v28 = *(void *)(v0 + 112);
  uint64_t v29 = *(void *)(v0 + 120);
  uint64_t v30 = *(void *)(v0 + 64);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32);
  *(void *)(v0 + 208) = v31;
  *(void *)(v0 + 216) = (v29 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v31(v26, v27, v28);
  uint64_t v32 = *(void *)(v30 + 112);
  *(void *)(v0 + 224) = v32;
  return _swift_task_switch(sub_10008A774, v32, 0);
}

uint64_t sub_10008B7F4(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 32) = a2;
  *(void *)(v4 + 40) = v3;
  *(unsigned char *)(v4 + 152) = a3;
  *(void *)(v4 + 24) = a1;
  sub_10000588C(&qword_101639EF8);
  *(void *)(v4 + 48) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SharingCircleSecretValue();
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 64) = *(void *)(v5 - 8);
  *(void *)(v4 + 72) = swift_task_alloc();
  *(void *)(v4 + 80) = swift_task_alloc();
  *(void *)(v4 + 88) = swift_task_alloc();
  *(void *)(v4 + 96) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SharingCircleSecret();
  *(void *)(v4 + 104) = v6;
  *(void *)(v4 + 112) = *(void *)(v6 - 8);
  *(void *)(v4 + 120) = swift_task_alloc();
  *(void *)(v4 + 128) = swift_task_alloc();
  return _swift_task_switch(sub_10008B980, v3, 0);
}

uint64_t sub_10008B980()
{
  v0[2] = _swiftEmptyArrayStorage;
  Swift::String v1 = (void *)swift_task_alloc();
  v0[17] = v1;
  *Swift::String v1 = v0;
  v1[1] = sub_10008BA28;
  uint64_t v2 = v0[3];
  return sub_100E5CB14(v2);
}

uint64_t sub_10008BA28(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10008BB40, v2, 0);
}

uint64_t sub_10008BB40()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    uint64_t v3 = v0 + 16;
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v4 = *(void *)(v0 + 112);
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v90 = *(void *)(v0 + 72);
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v96 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v91 = *(void *)(v0 + 88);
    uint64_t v92 = *(void *)(v0 + 80);
    uint64_t v94 = *(void *)(v4 + 72);
    long long v95 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    Swift::String v85 = "delegatedSharingKey";
    do
    {
      uint64_t v10 = *(void *)(v0 + 128);
      uint64_t v11 = *(_OWORD **)(v0 + 48);
      sub_100090D88(v6, v10, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      uint64_t v12 = (uint64_t *)(v10 + *(int *)(v5 + 32));
      uint64_t v13 = *v12;
      unint64_t v14 = v12[1];
      uint64_t v15 = (uint64_t *)(v10 + *(int *)(v5 + 28));
      uint64_t v16 = *v15;
      uint64_t v17 = (void *)v15[1];
      sub_1000361E0(v13, v14);
      swift_bridgeObjectRetain();
      sub_10131CEC8(v13, v14, v16, v17, v11);
      uint64_t v19 = *(void *)(v0 + 120);
      uint64_t v18 = *(void *)(v0 + 128);
      uint64_t v21 = *(void *)(v0 + 48);
      uint64_t v20 = *(void *)(v0 + 56);
      (*v96)(v21, 0, 1, v20);
      sub_100090D88(v18, v19, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      int v22 = (*v95)(v21, 1, v20);
      uint64_t v23 = *(void *)(v0 + 120);
      unint64_t v24 = *(uint64_t **)(v0 + 88);
      if (v22 == 1)
      {
        uint64_t v93 = *(void *)(v0 + 48);
        uint64_t v25 = (uint64_t *)(v23 + *(int *)(v5 + 32));
        uint64_t v26 = v6;
        uint64_t v27 = v2;
        uint64_t v28 = v5;
        uint64_t v29 = v3;
        uint64_t v30 = *v25;
        unint64_t v31 = v25[1];
        sub_1000361E0(*v25, v31);
        sub_100090EA0(v23, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
        *unint64_t v24 = v30;
        *(void *)(v91 + 8) = v31;
        uint64_t v3 = v29;
        uint64_t v5 = v28;
        uint64_t v2 = v27;
        uint64_t v6 = v26;
        swift_storeEnumTagMultiPayload();
        sub_10001DAB4(v93, &qword_101639EF8);
      }
      else
      {
        uint64_t v32 = *(void *)(v0 + 48);
        sub_100090EA0(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
        sub_100090D20(v32, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      }
      uint64_t v33 = *(void *)(v0 + 96);
      uint64_t v34 = *(void *)(v0 + 80);
      sub_100090D20(*(void *)(v0 + 88), v33, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      sub_100090D88(v33, v34, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_10001CFB8(**(void **)(v0 + 80), *(void *)(v92 + 8));
          if (__OFADD__(v88, 1))
          {
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
            JUMPOUT(0x10008C5B0);
          }
          ++v88;
          break;
        case 2u:
          sub_10001CFB8(**(void **)(v0 + 80), *(void *)(v92 + 8));
          if (__OFADD__(v86, 1)) {
            goto LABEL_82;
          }
          ++v86;
          break;
        case 3u:
          sub_10001CFB8(**(void **)(v0 + 80), *(void *)(v92 + 8));
          if (__OFADD__(v87, 1)) {
            goto LABEL_83;
          }
          ++v87;
          break;
        case 4u:
          if (__OFADD__(v89++, 1)) {
            goto LABEL_84;
          }
          sub_100090EA0(*(void *)(v0 + 80), (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
          break;
        case 5u:
          uint64_t v38 = *(void *)(v0 + 128);
          uint64_t v39 = *(void *)(v0 + 80);
          sub_100090EA0(*(void *)(v0 + 96), (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
          sub_100090EA0(v38, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
          sub_100090EA0(v39, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
          goto LABEL_4;
        default:
          uint64_t v8 = *(void *)(v0 + 128);
          id v9 = *(uint64_t **)(v0 + 80);
          sub_100090EA0(*(void *)(v0 + 96), (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
          sub_100090EA0(v8, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
          sub_10001CFB8(*v9, *(void *)(v92 + 8));
          goto LABEL_4;
      }
      sub_100090D88(*(void *)(v0 + 96), *(void *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_10001CFB8(**(void **)(v0 + 72), *(void *)(v90 + 8));
          unint64_t v36 = 0x80000001013EE1F0;
          unint64_t v37 = 0xD000000000000012;
          break;
        case 2u:
          sub_10001CFB8(**(void **)(v0 + 72), *(void *)(v90 + 8));
          unint64_t v37 = 0xD000000000000011;
          Swift::String v40 = "circleSharedSecret";
          goto LABEL_26;
        case 3u:
          sub_10001CFB8(**(void **)(v0 + 72), *(void *)(v90 + 8));
          unint64_t v37 = 0xD000000000000014;
          Swift::String v40 = "circleWildRootKey";
          goto LABEL_26;
        case 4u:
          sub_100090EA0(*(void *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
          unint64_t v36 = 0xE90000000000006ELL;
          unint64_t v37 = 0x656B6F546E696F6ALL;
          break;
        case 5u:
          sub_100090EA0(*(void *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
          unint64_t v37 = 0xD000000000000013;
          Swift::String v40 = "nearOwnerLocationKey";
          goto LABEL_26;
        case 6u:
          sub_10001CFB8(**(void **)(v0 + 72), *(void *)(v90 + 8));
          unint64_t v37 = 0xD000000000000014;
          Swift::String v40 = "delegatedSharingKey";
LABEL_26:
          unint64_t v36 = (unint64_t)v40 | 0x8000000000000000;
          break;
        default:
          sub_10001CFB8(**(void **)(v0 + 72), *(void *)(v90 + 8));
          unint64_t v36 = 0xE700000000000000;
          unint64_t v37 = 0x6E776F6E6B6E75;
          break;
      }
      unint64_t v41 = v36;
      String.append(_:)(*(Swift::String *)&v37);
      swift_bridgeObjectRelease();
      v42._countAndFlagsBits = 40;
      v42._object = (void *)0xE100000000000000;
      String.append(_:)(v42);
      v43._countAndFlagsBits = UUID.uuidString.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      v44._countAndFlagsBits = 41;
      v44._object = (void *)0xE100000000000000;
      String.append(_:)(v44);
      id v45 = objc_allocWithZone((Class)SPDataIntegrityCheck);
      NSString v46 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v45 initWithValue:v46 severity:0];

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)(v0 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v47 = *(void *)(v0 + 128);
      uint64_t v48 = *(void *)(v0 + 96);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_100090EA0(v48, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      sub_100090EA0(v47, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
LABEL_4:
      v6 += v94;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    uint64_t v49 = v88;
    uint64_t v2 = v89;
    uint64_t v51 = v86;
    uint64_t v50 = v87;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v49 = 0;
  }
  uint64_t v52 = *(void *)(v0 + 32);
  if (*(unsigned char *)(v0 + 152) == 2)
  {
    BOOL v54 = v2 != v52 || v49 != 1;
    BOOL v55 = v51 == 1;
    if (v51 != 1) {
      BOOL v54 = 1;
    }
    int v56 = v50 == 1 && v54;
    if (v54 || v50 != 1) {
      goto LABEL_52;
    }
  }
  else if (v2 != v52 || v49 != 1)
  {
    int v56 = 1;
    BOOL v55 = 1;
LABEL_52:
    uint64_t v58 = v49;
    _StringGuts.grow(_:)(82);
    v59._countAndFlagsBits = 0xD00000000000001CLL;
    v59._object = (void *)0x80000001013F2A50;
    String.append(_:)(v59);
    if (v2 == v52) {
      uint64_t v60 = 1702195828;
    }
    else {
      uint64_t v60 = 0x65736C6166;
    }
    if (v2 == v52) {
      unint64_t v61 = 0xE400000000000000;
    }
    else {
      unint64_t v61 = 0xE500000000000000;
    }
    unint64_t v62 = v61;
    String.append(_:)(*(Swift::String *)&v60);
    swift_bridgeObjectRelease();
    v63._object = (void *)0x80000001013F2A70;
    v63._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v63);
    if (v58 == 1) {
      uint64_t v64 = 1702195828;
    }
    else {
      uint64_t v64 = 0x65736C6166;
    }
    if (v58 == 1) {
      unint64_t v65 = 0xE400000000000000;
    }
    else {
      unint64_t v65 = 0xE500000000000000;
    }
    unint64_t v66 = v65;
    String.append(_:)(*(Swift::String *)&v64);
    swift_bridgeObjectRelease();
    v67._countAndFlagsBits = 0x52646C6977202C29;
    v67._object = (void *)0xED00002820746F6FLL;
    String.append(_:)(v67);
    if (v55) {
      uint64_t v68 = 1702195828;
    }
    else {
      uint64_t v68 = 0x65736C6166;
    }
    if (v55) {
      unint64_t v69 = 0xE400000000000000;
    }
    else {
      unint64_t v69 = 0xE500000000000000;
    }
    unint64_t v70 = v69;
    String.append(_:)(*(Swift::String *)&v68);
    swift_bridgeObjectRelease();
    v71._countAndFlagsBits = 0x4F7261656E202C29;
    v71._object = (void *)0xEE00282072656E77;
    String.append(_:)(v71);
    if (v56) {
      uint64_t v72 = 1702195828;
    }
    else {
      uint64_t v72 = 0x65736C6166;
    }
    if (v56) {
      unint64_t v73 = 0xE400000000000000;
    }
    else {
      unint64_t v73 = 0xE500000000000000;
    }
    unint64_t v74 = v73;
    String.append(_:)(*(Swift::String *)&v72);
    swift_bridgeObjectRelease();
    v75._countAndFlagsBits = 41;
    v75._object = (void *)0xE100000000000000;
    String.append(_:)(v75);
    id v76 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v77 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v78 = 1;
    goto LABEL_78;
  }
  id v76 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  NSString v77 = String._bridgeToObjectiveC()();
  uint64_t v78 = 0;
LABEL_78:
  id v79 = [v76 initWithValue:v77 severity:v78];

  id v80 = objc_allocWithZone((Class)SPSharedSecretsDataCheck);
  sub_10001D4B0(0, &qword_10163A0F0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v82 = [v80 initWithCompleteness:v79 secrets:isa];

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v83 = *(uint64_t (**)(id))(v0 + 8);
  return v83(v82);
}

uint64_t sub_10008C5E8(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 312) = a2;
  *(void *)(v3 + 120) = a1;
  *(void *)(v3 + 128) = v2;
  uint64_t v4 = type metadata accessor for UUID();
  *(void *)(v3 + 136) = v4;
  *(void *)(v3 + 144) = *(void *)(v4 - 8);
  *(void *)(v3 + 152) = swift_task_alloc();
  *(void *)(v3 + 160) = swift_task_alloc();
  return _swift_task_switch(sub_10008C6BC, v2, 0);
}

uint64_t sub_10008C6BC()
{
  uint64_t v1 = *(void *)(v0 + 128);
  *(void *)(v0 + 96) = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v1 + 112);
  *(void *)(v0 + 168) = v2;
  *(unsigned char *)(v0 + 313) = 0;
  *(unsigned char *)(v0 + 314) = 0;
  return _swift_task_switch(sub_10008C6FC, v2, 0);
}

uint64_t sub_10008C6FC()
{
  *(void *)(v0 + 176) = *(void *)(*(void *)(v0 + 168) + 136);
  swift_retain();
  return _swift_task_switch(sub_10008C770, 0, 0);
}

uint64_t sub_10008C770()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[23] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[24] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  v0[25] = v5;
  *uint64_t v4 = v0;
  v4[1] = sub_10008C888;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 11, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_10008C888()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 208) = *(void *)(v1 + 88);
  return _swift_task_switch(sub_10008C9E4, 0, 0);
}

uint64_t sub_10008C9E4()
{
  uid_t v1 = getuid();
  sub_100DC5FC0(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10008CAA4;
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 120);
  char v5 = *(unsigned char *)(v0 + 314);
  return sub_100647ED8(v3, v4, v5);
}

uint64_t sub_10008CAA4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = *v4;
  *(void *)(v6 + 224) = a1;
  *(void *)(v6 + 232) = a2;
  *(void *)(v6 + 240) = v3;
  swift_task_dealloc();
  if (v3)
  {
    (*(void (**)(void, void))(*(void *)(v6 + 144) + 8))(*(void *)(v6 + 160), *(void *)(v6 + 136));
    uint64_t v7 = sub_10008CFC4;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = *(void *)(v6 + 160);
    uint64_t v10 = *(void *)(v6 + 136);
    uint64_t v11 = *(void *)(v6 + 144);
    uint64_t v12 = *(void *)(v6 + 128);
    *(unsigned char *)(v6 + 315) = a3;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    swift_release();
    uint64_t v7 = sub_10008CC14;
    uint64_t v8 = v12;
  }
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_10008CC14()
{
  if (*(unsigned char *)(v0 + 315))
  {
    unint64_t v15 = 0xD000000000000010;
    int v16 = *(unsigned __int8 *)(v0 + 314);
    *(void *)(v0 + 48) = 0xD000000000000019;
    *(void *)(v0 + 56) = 0x80000001013F28A0;
    if (v16 == 1)
    {
      unint64_t v15 = 0x61646E6F6365732ELL;
      unint64_t v17 = 0xEA00000000007972;
    }
    else
    {
      unint64_t v17 = 0x80000001013F28C0;
    }
    if (v16) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = 0x7972616D6972702ELL;
    }
    if (v16) {
      unint64_t v19 = v17;
    }
    else {
      unint64_t v19 = 0xE800000000000000;
    }
    unint64_t v20 = v19;
    String.append(_:)(*(Swift::String *)&v18);
    swift_bridgeObjectRelease();
    id v21 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v21 initWithValue:v14 severity:1];
  }
  else
  {
    *(void *)(v0 + 16) = 0;
    int v1 = *(unsigned __int8 *)(v0 + 314);
    *(void *)(v0 + 24) = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 32) = 0x656E774F7261656ELL;
    *(void *)(v0 + 40) = 0xE900000000000072;
    unint64_t v2 = 0x61646E6F6365732ELL;
    unint64_t v3 = 0xEA00000000007972;
    if (v1 != 1)
    {
      unint64_t v2 = 0xD000000000000010;
      unint64_t v3 = 0x80000001013F28C0;
    }
    if (v1) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = 0x7972616D6972702ELL;
    }
    if (v1) {
      unint64_t v5 = v3;
    }
    else {
      unint64_t v5 = 0xE800000000000000;
    }
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 232);
    unint64_t v8 = v5;
    String.append(_:)(*(Swift::String *)&v4);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 8250;
    v9._object = (void *)0xE200000000000000;
    String.append(_:)(v9);
    *(void *)(v0 + 104) = v6;
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 3026478;
    v11._object = (void *)0xE300000000000000;
    String.append(_:)(v11);
    *(void *)(v0 + 112) = v7;
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    id v13 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v13 initWithValue:v14 severity:0];
  }

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 96) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  char v22 = *(unsigned char *)(v0 + 313);
  specialized Array._endMutation()();
  if ((v22 & 1) == 0)
  {
    *(unsigned char *)(v0 + 313) = 1;
    uint64_t v23 = *(void *)(v0 + 168);
    *(unsigned char *)(v0 + 314) = 1;
    unint64_t v24 = sub_10008C6FC;
    goto LABEL_27;
  }
  if (*(unsigned char *)(v0 + 312) == 2)
  {
    uint64_t v23 = *(void *)(v0 + 168);
    unint64_t v24 = sub_10008D264;
LABEL_27:
    return _swift_task_switch(v24, v23, 0);
  }
  uint64_t v25 = *(void *)(v0 + 96);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v26(v25);
}

uint64_t sub_10008CFC4()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_release();
  swift_errorRelease();
  return _swift_task_switch(sub_10008D03C, v1, 0);
}

uint64_t sub_10008D03C()
{
  unint64_t v1 = 0xD000000000000010;
  *(void *)(v0 + 48) = 0xD000000000000019;
  int v2 = *(unsigned __int8 *)(v0 + 314);
  *(void *)(v0 + 56) = 0x80000001013F28A0;
  unint64_t v3 = 0xEA00000000007972;
  if (v2 == 1) {
    unint64_t v1 = 0x61646E6F6365732ELL;
  }
  else {
    unint64_t v3 = 0x80000001013F28C0;
  }
  if (v2) {
    uint64_t v4 = v1;
  }
  else {
    uint64_t v4 = 0x7972616D6972702ELL;
  }
  if (v2) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = 0xE800000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  id v7 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 initWithValue:v8 severity:1];

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 96) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  int v9 = *(unsigned __int8 *)(v0 + 313);
  specialized Array._endMutation()();
  if (v9 != 1)
  {
    *(unsigned char *)(v0 + 313) = 1;
    uint64_t v10 = *(void *)(v0 + 168);
    *(unsigned char *)(v0 + 314) = 1;
    Swift::String v11 = sub_10008C6FC;
    goto LABEL_16;
  }
  if (*(unsigned char *)(v0 + 312) == 2)
  {
    uint64_t v10 = *(void *)(v0 + 168);
    Swift::String v11 = sub_10008D264;
LABEL_16:
    return _swift_task_switch(v11, v10, 0);
  }
  uint64_t v12 = *(void *)(v0 + 96);
  swift_task_dealloc();
  swift_task_dealloc();
  id v13 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v13(v12);
}

uint64_t sub_10008D264()
{
  *(void *)(v0 + 248) = *(void *)(*(void *)(v0 + 168) + 136);
  swift_retain();
  return _swift_task_switch(sub_10008D2D8, 0, 0);
}

uint64_t sub_10008D2D8()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[21];
  unint64_t v3 = (void *)swift_task_alloc();
  v0[32] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[33] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10008D3E8;
  uint64_t v5 = v0[25];
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 8, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_10008D3E8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 272) = *(void *)(v1 + 64);
  return _swift_task_switch(sub_10008D544, 0, 0);
}

uint64_t sub_10008D544()
{
  uid_t v1 = getuid();
  sub_100DC5FC0(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[35] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10008D600;
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[15];
  return sub_10064ACB8(v3, v4);
}

uint64_t sub_10008D600(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = *v4;
  *(void *)(v6 + 288) = a1;
  *(void *)(v6 + 296) = a2;
  *(void *)(v6 + 304) = v3;
  swift_task_dealloc();
  if (v3)
  {
    (*(void (**)(void, void))(*(void *)(v6 + 144) + 8))(*(void *)(v6 + 152), *(void *)(v6 + 136));
    uint64_t v7 = sub_10008D9D0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v10 = *(void *)(v6 + 144);
    uint64_t v9 = *(void *)(v6 + 152);
    uint64_t v12 = *(void *)(v6 + 128);
    uint64_t v11 = *(void *)(v6 + 136);
    *(unsigned char *)(v6 + 316) = a3;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_release();
    uint64_t v7 = sub_10008D76C;
    uint64_t v8 = v12;
  }
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_10008D76C()
{
  if (*(unsigned char *)(v0 + 316))
  {
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    id v8 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v9 = String._bridgeToObjectiveC()();
    [v8 initWithValue:v9 severity:1];
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + 288);
    uint64_t v2 = *(void *)(v0 + 296);
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 72) = v1;
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 3026478;
    v4._object = (void *)0xE300000000000000;
    String.append(_:)(v4);
    *(void *)(v0 + 80) = v2;
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    id v6 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v6 initWithValue:v7 severity:0x697463656E6E6F63, 0xEF203A79654B6E6FLL];
  }
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 96) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v10 = *(void *)(v0 + 96);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v11(v10);
}

uint64_t sub_10008D9D0()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_release();
  swift_errorRelease();
  return _swift_task_switch(sub_10008DA48, v1, 0);
}

uint64_t sub_10008DA48()
{
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  id v1 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 initWithValue:v2 severity:1];

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 96) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v3 = *(void *)(v0 + 96);
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

id sub_10008DB84(void *a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7)
{
  id v10 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_10001D4B0(0, &qword_10163A0E8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10001D4B0(0, &qword_10163A0F0);
  Class v12 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v13 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v14 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v16 = [v10 initWithCircleRecord:a1 sharedBeaconRecord:a2 sharedBeaconNameRecord:a3 sharedBeaconOwnerName:a4 peerTrusts:isa sharedSecrets:a6 keySyncRecord:a7 observations:v12 itemSharingKey:v13 estimatedLocations:v14];

  return v16;
}

Swift::Int sub_10008DCFC(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for BeaconObservation() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_100B73638(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_10008DE00(v6);
  *a1 = v3;
  return result;
}

unint64_t sub_10008DDA4()
{
  unint64_t result = qword_10163A028;
  if (!qword_10163A028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A028);
  }
  return result;
}

uint64_t sub_10008DDF8@<X0>(size_t *a1@<X8>)
{
  return sub_100E58260(v1, a1);
}

Swift::Int sub_10008DE00(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v141 = type metadata accessor for BeaconObservation();
  uint64_t v134 = *(void *)(v141 - 8);
  uint64_t v4 = __chkstk_darwin(v141);
  uint64_t v131 = (uint64_t)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v142 = (uint64_t)&v125 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v138 = (uint64_t)&v125 - v9;
  __chkstk_darwin(v8);
  uint64_t v137 = (uint64_t)&v125 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_142;
    }
    if (v11) {
      return sub_10008E8DC(0, v11, 1, a1);
    }
    return result;
  }
  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_150;
  }
  Swift::Int v127 = result;
  if (v11 < 2)
  {
    unint64_t v17 = _swiftEmptyArrayStorage;
    unint64_t v133 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
    if (v11 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      unint64_t v19 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      unint64_t v126 = v17;
      if (v20 >= 2)
      {
        Swift::Int v117 = *a1;
        do
        {
          unint64_t v118 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_137;
          }
          if (!v117) {
            goto LABEL_149;
          }
          uint64_t v119 = v19;
          uint64_t v120 = v19 + 32;
          uint64_t v121 = *(void *)&v19[16 * v118 + 32];
          uint64_t v122 = *(void *)&v19[16 * v20 + 24];
          sub_10008EBA0(v117 + *(void *)(v134 + 72) * v121, v117 + *(void *)(v134 + 72) * *(void *)&v120[16 * v20 - 16], v117 + *(void *)(v134 + 72) * v122, v133);
          if (v2) {
            break;
          }
          if (v122 < v121) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v119 = sub_100B73584((uint64_t)v119);
          }
          if (v118 >= *((void *)v119 + 2)) {
            goto LABEL_139;
          }
          uint64_t v123 = &v119[16 * v118 + 32];
          *(void *)uint64_t v123 = v121;
          *((void *)v123 + 1) = v122;
          unint64_t v124 = *((void *)v119 + 2);
          if (v20 > v124) {
            goto LABEL_140;
          }
          unint64_t v19 = v119;
          memmove(&v119[16 * v20 + 16], &v119[16 * v20 + 32], 16 * (v124 - v20));
          *((void *)v119 + 2) = v124 - 1;
          unint64_t v20 = v124 - 1;
        }
        while (v124 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      v126[2] = 0;
      return swift_bridgeObjectRelease();
    }
    unint64_t v126 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v134 + 80);
    unint64_t v126 = (void *)v15;
    unint64_t v133 = v15 + ((v16 + 32) & ~v16);
  }
  Swift::Int v18 = 0;
  unint64_t v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v140 = a1;
  while (1)
  {
    Swift::Int v21 = v18;
    Swift::Int v22 = v18 + 1;
    Swift::Int v132 = v18;
    if (v18 + 1 >= v11)
    {
      Swift::Int v39 = v18 + 1;
      goto LABEL_59;
    }
    uint64_t v129 = v2;
    Swift::Int v23 = *(void *)(v134 + 72);
    uint64_t v24 = *a1 + v23 * v22;
    Swift::Int v136 = *a1;
    Swift::Int v25 = v136;
    uint64_t v26 = v137;
    sub_100090D88(v24, v137, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v27 = v25 + v23 * v21;
    uint64_t v28 = v138;
    sub_100090D88(v27, v138, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    LODWORD(v139) = static Date.< infix(_:_:)();
    sub_100090EA0(v28, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v29 = v26;
    Swift::Int v30 = v136;
    sub_100090EA0(v29, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    Swift::Int v143 = v23;
    if (v21 + 2 >= v11)
    {
      Swift::Int v33 = v21 + 2;
    }
    else
    {
      Swift::Int v31 = v23;
      uint64_t v128 = v19;
      uint64_t v32 = v23 * v22;
      Swift::Int v33 = v21 + 2;
      uint64_t v34 = v31 * (v21 + 2);
      while (1)
      {
        Swift::Int v35 = v11;
        uint64_t v36 = v137;
        sub_100090D88(v30 + v34, v137, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v37 = v138;
        sub_100090D88(v30 + v32, v138, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        int v38 = static Date.< infix(_:_:)();
        sub_100090EA0(v37, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        sub_100090EA0(v36, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if ((v139 ^ v38)) {
          break;
        }
        v30 += v143;
        ++v33;
        Swift::Int v11 = v35;
        if (v35 == v33)
        {
          Swift::Int v33 = v35;
          unint64_t v19 = v128;
          Swift::Int v21 = v132;
          goto LABEL_25;
        }
      }
      unint64_t v19 = v128;
      Swift::Int v21 = v132;
      Swift::Int v11 = v35;
    }
LABEL_25:
    a1 = v140;
    if ((v139 & 1) == 0)
    {
      Swift::Int v39 = v33;
      goto LABEL_39;
    }
    if (v33 < v21) {
      goto LABEL_143;
    }
    Swift::Int v39 = v33;
    if (v21 < v33) {
      break;
    }
LABEL_39:
    uint64_t v2 = v129;
    if (v39 < v11) {
      goto LABEL_42;
    }
LABEL_59:
    if (v39 < v21) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v139 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v19 = sub_100B729CC(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v66 = *((void *)v19 + 2);
    unint64_t v65 = *((void *)v19 + 3);
    unint64_t v20 = v66 + 1;
    if (v66 >= v65 >> 1) {
      unint64_t v19 = sub_100B729CC((char *)(v65 > 1), v66 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v20;
    Swift::String v67 = v19 + 32;
    uint64_t v68 = &v19[16 * v66 + 32];
    Swift::Int v69 = v139;
    *(void *)uint64_t v68 = v21;
    *((void *)v68 + 1) = v69;
    if (v66)
    {
      while (1)
      {
        unint64_t v70 = v20 - 1;
        if (v20 >= 4)
        {
          Swift::String v75 = &v67[16 * v20];
          uint64_t v76 = *((void *)v75 - 8);
          uint64_t v77 = *((void *)v75 - 7);
          BOOL v81 = __OFSUB__(v77, v76);
          uint64_t v78 = v77 - v76;
          if (v81) {
            goto LABEL_125;
          }
          uint64_t v80 = *((void *)v75 - 6);
          uint64_t v79 = *((void *)v75 - 5);
          BOOL v81 = __OFSUB__(v79, v80);
          uint64_t v73 = v79 - v80;
          char v74 = v81;
          if (v81) {
            goto LABEL_126;
          }
          unint64_t v82 = v20 - 2;
          uint64_t v83 = &v67[16 * v20 - 32];
          uint64_t v85 = *(void *)v83;
          uint64_t v84 = *((void *)v83 + 1);
          BOOL v81 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v81) {
            goto LABEL_128;
          }
          BOOL v81 = __OFADD__(v73, v86);
          uint64_t v87 = v73 + v86;
          if (v81) {
            goto LABEL_131;
          }
          if (v87 >= v78)
          {
            uint64_t v105 = &v67[16 * v70];
            uint64_t v107 = *(void *)v105;
            uint64_t v106 = *((void *)v105 + 1);
            BOOL v81 = __OFSUB__(v106, v107);
            uint64_t v108 = v106 - v107;
            if (v81) {
              goto LABEL_135;
            }
            BOOL v98 = v73 < v108;
            goto LABEL_96;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v99 = *((void *)v19 + 4);
            uint64_t v100 = *((void *)v19 + 5);
            BOOL v81 = __OFSUB__(v100, v99);
            uint64_t v92 = v100 - v99;
            char v93 = v81;
            goto LABEL_90;
          }
          uint64_t v72 = *((void *)v19 + 4);
          uint64_t v71 = *((void *)v19 + 5);
          BOOL v81 = __OFSUB__(v71, v72);
          uint64_t v73 = v71 - v72;
          char v74 = v81;
        }
        if (v74) {
          goto LABEL_127;
        }
        unint64_t v82 = v20 - 2;
        uint64_t v88 = &v67[16 * v20 - 32];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v91 = __OFSUB__(v89, v90);
        uint64_t v92 = v89 - v90;
        char v93 = v91;
        if (v91) {
          goto LABEL_130;
        }
        uint64_t v94 = &v67[16 * v70];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v81 = __OFSUB__(v95, v96);
        uint64_t v97 = v95 - v96;
        if (v81) {
          goto LABEL_133;
        }
        if (__OFADD__(v92, v97)) {
          goto LABEL_134;
        }
        if (v92 + v97 >= v73)
        {
          BOOL v98 = v73 < v97;
LABEL_96:
          if (v98) {
            unint64_t v70 = v82;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v93) {
          goto LABEL_129;
        }
        uint64_t v101 = &v67[16 * v70];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v81 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v81) {
          goto LABEL_132;
        }
        if (v104 < v92) {
          goto LABEL_15;
        }
LABEL_98:
        unint64_t v109 = v70 - 1;
        if (v70 - 1 >= v20)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        Swift::Int v110 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        Swift::String v111 = v19;
        unint64_t v112 = &v67[16 * v109];
        uint64_t v113 = *(void *)v112;
        uint64_t v114 = &v67[16 * v70];
        uint64_t v115 = *((void *)v114 + 1);
        sub_10008EBA0(v110 + *(void *)(v134 + 72) * *(void *)v112, v110 + *(void *)(v134 + 72) * *(void *)v114, v110 + *(void *)(v134 + 72) * v115, v133);
        if (v2) {
          goto LABEL_118;
        }
        if (v115 < v113) {
          goto LABEL_122;
        }
        if (v70 > *((void *)v111 + 2)) {
          goto LABEL_123;
        }
        *(void *)unint64_t v112 = v113;
        *(void *)&v67[16 * v109 + 8] = v115;
        unint64_t v116 = *((void *)v111 + 2);
        if (v70 >= v116) {
          goto LABEL_124;
        }
        unint64_t v19 = v111;
        unint64_t v20 = v116 - 1;
        memmove(&v67[16 * v70], v114 + 16, 16 * (v116 - 1 - v70));
        *((void *)v111 + 2) = v116 - 1;
        a1 = v140;
        if (v116 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_15:
    Swift::Int v11 = a1[1];
    Swift::Int v18 = v139;
    if (v139 >= v11)
    {
      unint64_t v17 = v126;
      goto LABEL_107;
    }
  }
  Swift::Int v139 = v11;
  uint64_t v128 = v19;
  uint64_t v40 = 0;
  Swift::Int v41 = v143;
  uint64_t v42 = v143 * (v33 - 1);
  Swift::Int v43 = v33 * v143;
  Swift::Int v44 = v21;
  uint64_t v45 = v21 * v143;
  do
  {
    if (v44 != v39 + v40 - 1)
    {
      Swift::Int v46 = v136;
      if (!v136) {
        goto LABEL_148;
      }
      unint64_t v47 = v136 + v45;
      uint64_t v48 = v136 + v42;
      sub_100090D20(v136 + v45, v131, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (v45 < v42 || v47 >= v46 + v43)
      {
        swift_arrayInitWithTakeFrontToBack();
        Swift::Int v41 = v143;
      }
      else
      {
        Swift::Int v41 = v143;
        if (v45 != v42) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      sub_100090D20(v131, v48, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      a1 = v140;
      Swift::Int v39 = v33;
    }
    ++v44;
    --v40;
    v42 -= v41;
    v43 -= v41;
    v45 += v41;
  }
  while (v44 < v39 + v40);
  unint64_t v19 = v128;
  uint64_t v2 = v129;
  Swift::Int v21 = v132;
  Swift::Int v11 = v139;
  if (v39 >= v139) {
    goto LABEL_59;
  }
LABEL_42:
  if (__OFSUB__(v39, v21)) {
    goto LABEL_141;
  }
  if (v39 - v21 >= v127) {
    goto LABEL_59;
  }
  if (__OFADD__(v21, v127)) {
    goto LABEL_144;
  }
  if (v21 + v127 >= v11) {
    Swift::Int v49 = v11;
  }
  else {
    Swift::Int v49 = v21 + v127;
  }
  if (v49 >= v21)
  {
    if (v39 != v49)
    {
      uint64_t v128 = v19;
      uint64_t v129 = v2;
      uint64_t v50 = *(void *)(v134 + 72);
      uint64_t v51 = v50 * (v39 - 1);
      uint64_t v135 = v50;
      Swift::Int v52 = v39 * v50;
      Swift::Int v130 = v49;
      do
      {
        uint64_t v54 = 0;
        Swift::Int v139 = v39;
        Swift::Int v136 = v52;
        while (1)
        {
          Swift::Int v143 = v21;
          Swift::Int v55 = *a1;
          uint64_t v56 = v137;
          sub_100090D88(v52 + v54 + *a1, v137, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          uint64_t v57 = v51;
          uint64_t v58 = v51 + v54 + v55;
          Swift::String v59 = a1;
          uint64_t v60 = v138;
          sub_100090D88(v58, v138, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          char v61 = static Date.< infix(_:_:)();
          sub_100090EA0(v60, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          sub_100090EA0(v56, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          if ((v61 & 1) == 0) {
            break;
          }
          uint64_t v62 = *v59;
          if (!*v59) {
            goto LABEL_146;
          }
          Swift::Int v52 = v136;
          uint64_t v51 = v57;
          uint64_t v63 = v62 + v57 + v54;
          sub_100090D20(v62 + v136 + v54, v142, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          swift_arrayInitWithTakeFrontToBack();
          sub_100090D20(v142, v63, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          v54 -= v135;
          Swift::Int v21 = v143 + 1;
          Swift::Int v53 = v139;
          a1 = v140;
          if (v139 == v143 + 1) {
            goto LABEL_52;
          }
        }
        Swift::Int v53 = v139;
        a1 = v59;
        uint64_t v51 = v57;
        Swift::Int v52 = v136;
LABEL_52:
        Swift::Int v39 = v53 + 1;
        v51 += v135;
        v52 += v135;
        Swift::Int v21 = v132;
      }
      while (v39 != v130);
      Swift::Int v39 = v130;
      unint64_t v19 = v128;
      uint64_t v2 = v129;
    }
    goto LABEL_59;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008E8DC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t v29 = type metadata accessor for BeaconObservation();
  uint64_t v7 = __chkstk_darwin(v29);
  uint64_t v30 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  Swift::Int v11 = (char *)&v24 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v32 = v16 * (v28 - 1);
    uint64_t v27 = v16;
    uint64_t v31 = v16 * v28;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v26;
    while (1)
    {
      unint64_t v19 = a4;
      uint64_t v20 = *a4;
      sub_100090D88(v31 + v17 + v20, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      sub_100090D88(v32 + v17 + v20, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      char v21 = static Date.< infix(_:_:)();
      sub_100090EA0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      a4 = v19;
      uint64_t result = sub_100090EA0((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if ((v21 & 1) == 0)
      {
LABEL_4:
        v32 += v27;
        v31 += v27;
        if (++v28 == v25) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v22 = *v19;
      if (!*v19) {
        break;
      }
      uint64_t v23 = v22 + v32 + v17;
      sub_100090D20(v22 + v31 + v17, v30, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_100090D20(v30, v23, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      v17 -= v27;
      ++v18;
      a4 = v19;
      if (v28 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10008EBA0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v44 = type metadata accessor for BeaconObservation();
  uint64_t v8 = __chkstk_darwin(v44);
  uint64_t v43 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  Swift::Int v11 = (char *)&v40 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_61;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_62;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v47 = a1;
  unint64_t v46 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v26 = a4 + v18;
      unint64_t v45 = a4 + v18;
      unint64_t v47 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        unint64_t v41 = a4;
        unint64_t v42 = a1;
        do
        {
          unint64_t v28 = a3 - v13;
          sub_100090D88(v26 - v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          unint64_t v29 = a2 - v13;
          unint64_t v30 = a3;
          uint64_t v31 = (uint64_t)v11;
          uint64_t v32 = v43;
          sub_100090D88(a2 - v13, v43, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          char v33 = static Date.< infix(_:_:)();
          uint64_t v34 = v32;
          Swift::Int v11 = (char *)v31;
          sub_100090EA0(v34, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          sub_100090EA0(v31, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          if (v33)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              BOOL v35 = v30 == a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v47 -= v13;
          }
          else
          {
            unint64_t v38 = v45;
            v45 -= v13;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v29 = a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              unint64_t v37 = v42;
              if (v30 != v38) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v29 = a2;
              unint64_t v36 = v41;
            }
          }
          unint64_t v26 = v45;
          if (v45 <= v36) {
            break;
          }
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v37);
      }
      goto LABEL_59;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v19 = a4 + v17;
    unint64_t v45 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_100090D88(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v21 = v43;
        sub_100090D88(a4, v43, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        char v22 = static Date.< infix(_:_:)();
        sub_100090EA0(v21, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        sub_100090EA0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        unint64_t v23 = v47;
        if (v22)
        {
          unint64_t v24 = a2 + v13;
          if (v47 < a2 || v47 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 == a2)
          {
            unint64_t v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v25 = v46 + v13;
          if (v47 < v46 || v47 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 != v46)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v46 = v25;
          unint64_t v24 = a2;
        }
        unint64_t v47 = v23 + v13;
        a4 = v46;
        if (v46 >= v19) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_59:
    sub_100B72CBC(&v47, &v46, (uint64_t *)&v45);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10008F0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for OwnerPeerTrust();
  uint64_t v9 = __chkstk_darwin(v29);
  uint64_t v33 = (uint64_t)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v36 = (uint64_t)v27 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v32 = *(void *)(a1 + 16);
  if (v32)
  {
    v27[1] = v2;
    uint64_t v28 = v6;
    uint64_t v14 = 0;
    unint64_t v30 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v31 = a1 + v30;
    uint64_t v34 = *(void *)(v11 + 72);
    uint64_t v37 = v6 + 16;
    uint64_t v38 = a2 + 56;
    uint64_t v15 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v39 = a2;
    do
    {
      uint64_t v35 = v14;
      sub_100090D88(v31 + v34 * v14, v36, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      if (*(void *)(a2 + 16)
        && (sub_1000909F0(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID),
            uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v17 = v39,
            uint64_t v18 = -1 << *(unsigned char *)(v39 + 32),
            unint64_t v19 = v16 & ~v18,
            ((*(void *)(v38 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) != 0))
      {
        uint64_t v20 = ~v18;
        uint64_t v21 = *(void *)(v28 + 72);
        char v22 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
        while (1)
        {
          v22(v8, *(void *)(v17 + 48) + v21 * v19, v5);
          sub_1000909F0((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v15)(v8, v5);
          if (v23) {
            break;
          }
          unint64_t v19 = (v19 + 1) & v20;
          uint64_t v17 = v39;
          if (((*(void *)(v38 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
            goto LABEL_10;
          }
        }
        sub_100090EA0(v36, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      }
      else
      {
LABEL_10:
        sub_100090D20(v36, v33, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        unint64_t v24 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B747C(0, v24[2] + 1, 1);
          unint64_t v24 = v40;
        }
        unint64_t v26 = v24[2];
        unint64_t v25 = v24[3];
        if (v26 >= v25 >> 1)
        {
          sub_1000B747C(v25 > 1, v26 + 1, 1);
          unint64_t v24 = v40;
        }
        uint64_t v24[2] = v26 + 1;
        sub_100090D20(v33, (uint64_t)v24 + v30 + v26 * v34, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      }
      uint64_t v14 = v35 + 1;
      a2 = v39;
    }
    while (v35 + 1 != v32);
    return v40;
  }
  return result;
}

uint64_t sub_10008F4E0@<X0>(size_t *a1@<X8>)
{
  return sub_100E5872C(v1, a1);
}

void *sub_10008F4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for MemberPeerTrust();
  uint64_t v9 = __chkstk_darwin(v29);
  uint64_t v33 = (uint64_t)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v36 = (uint64_t)v27 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v32 = *(void *)(a1 + 16);
  if (v32)
  {
    v27[1] = v2;
    uint64_t v28 = v6;
    uint64_t v14 = 0;
    unint64_t v30 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v31 = a1 + v30;
    uint64_t v34 = *(void *)(v11 + 72);
    uint64_t v37 = v6 + 16;
    uint64_t v38 = a2 + 56;
    uint64_t v15 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v39 = a2;
    do
    {
      uint64_t v35 = v14;
      sub_100090D88(v31 + v34 * v14, v36, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      if (*(void *)(a2 + 16)
        && (sub_1000909F0(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID),
            uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v17 = v39,
            uint64_t v18 = -1 << *(unsigned char *)(v39 + 32),
            unint64_t v19 = v16 & ~v18,
            ((*(void *)(v38 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) != 0))
      {
        uint64_t v20 = ~v18;
        uint64_t v21 = *(void *)(v28 + 72);
        char v22 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
        while (1)
        {
          v22(v8, *(void *)(v17 + 48) + v21 * v19, v5);
          sub_1000909F0((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v15)(v8, v5);
          if (v23) {
            break;
          }
          unint64_t v19 = (v19 + 1) & v20;
          uint64_t v17 = v39;
          if (((*(void *)(v38 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
            goto LABEL_10;
          }
        }
        sub_100090EA0(v36, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      }
      else
      {
LABEL_10:
        sub_100090D20(v36, v33, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        unint64_t v24 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7440(0, v24[2] + 1, 1);
          unint64_t v24 = v40;
        }
        unint64_t v26 = v24[2];
        unint64_t v25 = v24[3];
        if (v26 >= v25 >> 1)
        {
          sub_1000B7440(v25 > 1, v26 + 1, 1);
          unint64_t v24 = v40;
        }
        uint64_t v24[2] = v26 + 1;
        sub_100090D20(v33, (uint64_t)v24 + v30 + v26 * v34, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      }
      uint64_t v14 = v35 + 1;
      a2 = v39;
    }
    while (v35 + 1 != v32);
    return v40;
  }
  return result;
}

void *sub_10008F90C@<X0>(void *a1@<X8>)
{
  return sub_100E5DC2C(a1);
}

uint64_t sub_10008F914(uint64_t a1)
{
  return sub_100129F5C(a1, v1[2], v1[3], v1[4]);
}

void *sub_10008F920(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for SharingCircleSecret();
  uint64_t v9 = __chkstk_darwin(v29);
  uint64_t v33 = (uint64_t)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v36 = (uint64_t)v27 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v32 = *(void *)(a1 + 16);
  if (v32)
  {
    v27[1] = v2;
    uint64_t v28 = v6;
    uint64_t v14 = 0;
    unint64_t v30 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v31 = a1 + v30;
    uint64_t v34 = *(void *)(v11 + 72);
    uint64_t v37 = v6 + 16;
    uint64_t v38 = a2 + 56;
    uint64_t v15 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v39 = a2;
    do
    {
      uint64_t v35 = v14;
      sub_100090D88(v31 + v34 * v14, v36, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      if (*(void *)(a2 + 16)
        && (sub_1000909F0(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID),
            uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v17 = v39,
            uint64_t v18 = -1 << *(unsigned char *)(v39 + 32),
            unint64_t v19 = v16 & ~v18,
            ((*(void *)(v38 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) != 0))
      {
        uint64_t v20 = ~v18;
        uint64_t v21 = *(void *)(v28 + 72);
        char v22 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
        while (1)
        {
          v22(v8, *(void *)(v17 + 48) + v21 * v19, v5);
          sub_1000909F0((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v15)(v8, v5);
          if (v23) {
            break;
          }
          unint64_t v19 = (v19 + 1) & v20;
          uint64_t v17 = v39;
          if (((*(void *)(v38 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
            goto LABEL_10;
          }
        }
        sub_100090EA0(v36, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      }
      else
      {
LABEL_10:
        sub_100090D20(v36, v33, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
        unint64_t v24 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B732C(0, v24[2] + 1, 1);
          unint64_t v24 = v40;
        }
        unint64_t v26 = v24[2];
        unint64_t v25 = v24[3];
        if (v26 >= v25 >> 1)
        {
          sub_1000B732C(v25 > 1, v26 + 1, 1);
          unint64_t v24 = v40;
        }
        uint64_t v24[2] = v26 + 1;
        sub_100090D20(v33, (uint64_t)v24 + v30 + v26 * v34, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      }
      uint64_t v14 = v35 + 1;
      a2 = v39;
    }
    while (v35 + 1 != v32);
    return v40;
  }
  return result;
}

char *sub_10008FD44@<X0>(char **a1@<X8>)
{
  return sub_100E5EB30(a1);
}

uint64_t sub_10008FD4C(uint64_t a1)
{
  return sub_10012A16C(a1, v1[2], v1[3], v1[4]);
}

void *sub_10008FD58(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v9 = __chkstk_darwin(v29);
  uint64_t v33 = (uint64_t)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v36 = (uint64_t)v27 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v32 = *(void *)(a1 + 16);
  if (v32)
  {
    v27[1] = v2;
    uint64_t v28 = v6;
    uint64_t v14 = 0;
    unint64_t v30 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v31 = a1 + v30;
    uint64_t v34 = *(void *)(v11 + 72);
    uint64_t v37 = v6 + 16;
    uint64_t v38 = a2 + 56;
    uint64_t v15 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v39 = a2;
    do
    {
      uint64_t v35 = v14;
      sub_100090D88(v31 + v34 * v14, v36, type metadata accessor for SharedBeaconRecord);
      if (*(void *)(a2 + 16)
        && (sub_1000909F0(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID),
            uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v17 = v39,
            uint64_t v18 = -1 << *(unsigned char *)(v39 + 32),
            unint64_t v19 = v16 & ~v18,
            ((*(void *)(v38 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) != 0))
      {
        uint64_t v20 = ~v18;
        uint64_t v21 = *(void *)(v28 + 72);
        char v22 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
        while (1)
        {
          v22(v8, *(void *)(v17 + 48) + v21 * v19, v5);
          sub_1000909F0((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v15)(v8, v5);
          if (v23) {
            break;
          }
          unint64_t v19 = (v19 + 1) & v20;
          uint64_t v17 = v39;
          if (((*(void *)(v38 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
            goto LABEL_10;
          }
        }
        sub_100090EA0(v36, type metadata accessor for SharedBeaconRecord);
      }
      else
      {
LABEL_10:
        sub_100090D20(v36, v33, type metadata accessor for SharedBeaconRecord);
        unint64_t v24 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7404(0, v24[2] + 1, 1);
          unint64_t v24 = v40;
        }
        unint64_t v26 = v24[2];
        unint64_t v25 = v24[3];
        if (v26 >= v25 >> 1)
        {
          sub_1000B7404(v25 > 1, v26 + 1, 1);
          unint64_t v24 = v40;
        }
        uint64_t v24[2] = v26 + 1;
        sub_100090D20(v33, (uint64_t)v24 + v30 + v26 * v34, type metadata accessor for SharedBeaconRecord);
      }
      uint64_t v14 = v35 + 1;
      a2 = v39;
    }
    while (v35 + 1 != v32);
    return v40;
  }
  return result;
}

void *sub_10009017C@<X0>(void *a1@<X8>)
{
  return sub_100E5F508(a1);
}

uint64_t sub_100090184(uint64_t a1)
{
  return sub_10012A19C(a1, v1[2], v1[3], v1[4]);
}

void *sub_100090190(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for BeaconNamingRecord();
  uint64_t v9 = __chkstk_darwin(v29);
  uint64_t v33 = (uint64_t)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v36 = (uint64_t)v27 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v32 = *(void *)(a1 + 16);
  if (v32)
  {
    v27[1] = v2;
    uint64_t v28 = v6;
    uint64_t v14 = 0;
    unint64_t v30 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v31 = a1 + v30;
    uint64_t v34 = *(void *)(v11 + 72);
    uint64_t v37 = v6 + 16;
    uint64_t v38 = a2 + 56;
    uint64_t v15 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v39 = a2;
    do
    {
      uint64_t v35 = v14;
      sub_100090D88(v31 + v34 * v14, v36, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      if (*(void *)(a2 + 16)
        && (sub_1000909F0(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID),
            uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v17 = v39,
            uint64_t v18 = -1 << *(unsigned char *)(v39 + 32),
            unint64_t v19 = v16 & ~v18,
            ((*(void *)(v38 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) != 0))
      {
        uint64_t v20 = ~v18;
        uint64_t v21 = *(void *)(v28 + 72);
        char v22 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
        while (1)
        {
          v22(v8, *(void *)(v17 + 48) + v21 * v19, v5);
          sub_1000909F0((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v15)(v8, v5);
          if (v23) {
            break;
          }
          unint64_t v19 = (v19 + 1) & v20;
          uint64_t v17 = v39;
          if (((*(void *)(v38 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
            goto LABEL_10;
          }
        }
        sub_100090EA0(v36, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      }
      else
      {
LABEL_10:
        sub_100090D20(v36, v33, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
        unint64_t v24 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B73C8(0, v24[2] + 1, 1);
          unint64_t v24 = v40;
        }
        unint64_t v26 = v24[2];
        unint64_t v25 = v24[3];
        if (v26 >= v25 >> 1)
        {
          sub_1000B73C8(v25 > 1, v26 + 1, 1);
          unint64_t v24 = v40;
        }
        uint64_t v24[2] = v26 + 1;
        sub_100090D20(v33, (uint64_t)v24 + v30 + v26 * v34, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      }
      uint64_t v14 = v35 + 1;
      a2 = v39;
    }
    while (v35 + 1 != v32);
    return v40;
  }
  return result;
}

void *sub_1000905B4(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(BOOL, uint64_t, uint64_t))
{
  uint64_t v34 = a4;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(a3) - 8;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v39 = (uint64_t)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v44 = (uint64_t)v32 - v16;
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v45 = _swiftEmptyArrayStorage;
  uint64_t v38 = *(void *)(a1 + 16);
  if (v38)
  {
    v32[1] = v4;
    uint64_t v33 = v9;
    uint64_t v18 = 0;
    unint64_t v35 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v36 = a1 + v35;
    uint64_t v37 = a3;
    uint64_t v40 = *(void *)(v15 + 72);
    uint64_t v42 = v9 + 16;
    uint64_t v43 = a2 + 56;
    unint64_t v19 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v20 = a2;
    do
    {
      uint64_t v41 = v18;
      sub_10001D074(v36 + v40 * v18, v44, a3);
      if (*(void *)(a2 + 16)
        && (sub_1000909F0(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID),
            uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v22 = -1 << *(unsigned char *)(v20 + 32),
            unint64_t v23 = v21 & ~v22,
            ((*(void *)(v43 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) != 0))
      {
        uint64_t v24 = v20;
        uint64_t v25 = ~v22;
        uint64_t v26 = *(void *)(v33 + 72);
        uint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
        while (1)
        {
          v27(v11, *(void *)(v24 + 48) + v26 * v23, v8);
          sub_1000909F0((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v19)(v11, v8);
          if (v28) {
            break;
          }
          unint64_t v23 = (v23 + 1) & v25;
          uint64_t v24 = v20;
          if (((*(void *)(v43 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
            goto LABEL_10;
          }
        }
        a3 = v37;
        sub_10001DAB4(v44, v37);
      }
      else
      {
LABEL_10:
        a3 = v37;
        sub_10001D608(v44, v39, v37);
        uint64_t v29 = v45;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v34(0, v29[2] + 1, 1);
          uint64_t v29 = v45;
        }
        unint64_t v31 = v29[2];
        unint64_t v30 = v29[3];
        if (v31 >= v30 >> 1)
        {
          v34(v30 > 1, v31 + 1, 1);
          uint64_t v29 = v45;
        }
        v29[2] = v31 + 1;
        sub_10001D608(v39, (uint64_t)v29 + v35 + v31 * v40, a3);
      }
      uint64_t v18 = v41 + 1;
      a2 = v20;
    }
    while (v41 + 1 != v38);
    return v45;
  }
  return result;
}

char *sub_1000909A4@<X0>(char **a1@<X8>)
{
  return sub_100E5E92C(a1);
}

uint64_t sub_1000909AC(uint64_t a1)
{
  return sub_100129D1C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000909BC()
{
  return sub_100090E0C((uint64_t (*)(uint64_t, uint64_t))sub_100E5ABA8);
}

uint64_t sub_1000909D8()
{
  return sub_100090E0C((uint64_t (*)(uint64_t, uint64_t))sub_100E5F4A8);
}

uint64_t sub_1000909F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100090A38()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100090AC8@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10008346C(v4, a1);
}

void sub_100090B38(void *a1@<X8>)
{
  sub_1007B4AA8(v1, a1);
}

unint64_t sub_100090B54()
{
  unint64_t result = qword_10163A100;
  if (!qword_10163A100)
  {
    sub_10000592C(&qword_101654A30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A100);
  }
  return result;
}

unint64_t sub_100090BB0()
{
  unint64_t result = qword_10163A108;
  if (!qword_10163A108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A108);
  }
  return result;
}

uint64_t sub_100090C08()
{
  return sub_100090E0C((uint64_t (*)(uint64_t, uint64_t))sub_100E591C4);
}

uint64_t *sub_100090C20(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100090C68(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100090CD0()
{
  return sub_100090E0C(sub_100E5F4E8);
}

uint64_t sub_100090CE8(uint64_t a1)
{
  return sub_100129F8C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100090CFC()
{
  return sub_100090E0C((uint64_t (*)(uint64_t, uint64_t))sub_100E5AB7C);
}

uint64_t sub_100090D14(uint64_t a1)
{
  return sub_100129E0C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100090D20(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100090D88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100090DF4()
{
  return sub_100090E0C((uint64_t (*)(uint64_t, uint64_t))sub_100E58EC8);
}

uint64_t sub_100090E0C(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_100090E94(uint64_t a1)
{
  return sub_10012A13C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100090EA0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s15KnownRecordTypeOwet(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for DataIntegrityError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100090FF0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DataIntegrityError()
{
  return &type metadata for DataIntegrityError;
}

unint64_t sub_10009102C()
{
  unint64_t result = qword_10163A130;
  if (!qword_10163A130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A130);
  }
  return result;
}

uint64_t sub_10009108C@<X0>(long long *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v79 = a3;
  uint64_t v78 = a1;
  uint64_t v85 = a4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v82 = *(void *)(v8 - 8);
  uint64_t v83 = v8;
  __chkstk_darwin(v8);
  uint64_t v81 = (uint64_t)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for StableIdentifier();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v80 = (uint64_t)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v64 - v13;
  uint64_t v15 = type metadata accessor for Endianness();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = sub_10000588C(&qword_101638CF0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v84 = (uint64_t)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v64 - v19;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v64 - v26;
  uint64_t v28 = a2[12];
  if (!v28 || (unint64_t v29 = a2[14], v29 >> 60 == 15) || (v30 = a2[16]) == 0)
  {
LABEL_6:
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
LABEL_9:
    uint64_t v33 = type metadata accessor for OwnedBeaconRecord();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v85, 1, 1, v33);
  }
  uint64_t v71 = v7;
  unint64_t v76 = v29;
  uint64_t v73 = v28;
  uint64_t v72 = a2[11];
  uint64_t v75 = a2[13];
  uint64_t v74 = a2[15];
  uint64_t v31 = (uint64_t)a2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
  uint64_t v32 = v25;
  swift_beginAccess();
  sub_10001D074(v31, (uint64_t)v20, &qword_101638CF0);
  uint64_t v77 = v32;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v20, 1, v21) == 1)
  {
    sub_10001DAB4((uint64_t)v20, &qword_101638CF0);
    goto LABEL_6;
  }
  uint64_t v35 = v77 + 32;
  unint64_t v70 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
  v70(v27, v20, v21);
  uint64_t v36 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0) {
    uint64_t v36 = v74 & 0xFFFFFFFFFFFFLL;
  }
  if (!v36)
  {
    uint64_t v55 = v77;
    uint64_t v56 = v75;
    unint64_t v57 = v76;
    sub_1000361E0(v75, v76);
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_100037A24(v56, v57);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v27, v21);
    goto LABEL_9;
  }
  uint64_t v68 = v35;
  swift_bridgeObjectRetain();
  uint64_t v37 = v75;
  unint64_t v38 = v76;
  sub_100037A38(v75, v76);
  swift_bridgeObjectRetain();
  uint64_t v69 = sub_1002AA484(v37, v38);
  sub_1002AA5D4(v37, v38);
  static Endianness.current.getter();
  sub_100091A80();
  FixedWidthInteger.init(data:ofEndianness:)();
  uint64_t v39 = (int)v90;
  if (BYTE4(v90)) {
    uint64_t v39 = 0;
  }
  uint64_t v67 = v39;
  uint64_t v40 = (int *)sub_10000588C(&qword_1016555E0);
  uint64_t v41 = &v14[v40[12]];
  uint64_t v42 = &v14[v40[16]];
  uint64_t v43 = &v14[v40[20]];
  uint64_t v66 = v40[24];
  unint64_t v65 = &v14[v40[28]];
  uint64_t v44 = v77;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v14, v27, v21);
  *(void *)uint64_t v41 = 0;
  *((void *)v41 + 1) = 0;
  *(void *)uint64_t v42 = 0;
  *((void *)v42 + 1) = 0;
  *(void *)uint64_t v43 = v74;
  *((void *)v43 + 1) = v30;
  *(_WORD *)&v14[v66] = 256;
  unint64_t v45 = v65;
  *(void *)unint64_t v65 = 0;
  *((void *)v45 + 1) = 0;
  swift_storeEnumTagMultiPayload();
  UUID.init()();
  uint64_t v46 = v80;
  sub_100091AD4((uint64_t)v14, v80);
  uint64_t v47 = v44;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v84, 1, 1, v21);
  uint64_t v48 = v81;
  sub_100A9E43C(v81);
  Swift::Int v49 = v78;
  long long v90 = v78[2];
  sub_10001D608((uint64_t)(v78 + 3), (uint64_t)v89, &qword_10163A138);
  sub_10001D608((uint64_t)(v49 + 4), (uint64_t)v88, &qword_10163A138);
  long long v50 = *v49;
  long long v86 = v49[1];
  long long v87 = v50;
  uint64_t v51 = (uint64_t)v71;
  sub_10001D074(v79, (uint64_t)v71, (uint64_t *)&unk_10166BFA0);
  uint64_t v52 = type metadata accessor for AccessoryProductInfo();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48))(v51, 1, v52) == 1)
  {
    sub_100061E54((uint64_t)&v90);
    sub_100091B38((uint64_t)v89);
    sub_100091B38((uint64_t)v88);
    sub_100061E54((uint64_t)&v87);
    sub_100061E54((uint64_t)&v86);
    sub_10001DAB4(v51, (uint64_t *)&unk_10166BFA0);
    uint64_t v53 = 0;
    unint64_t v54 = 0xE000000000000000;
  }
  else
  {
    uint64_t v58 = (uint64_t *)(v51 + *(int *)(v52 + 48));
    uint64_t v53 = *v58;
    unint64_t v54 = v58[1];
    sub_100061E54((uint64_t)&v90);
    sub_100091B38((uint64_t)v89);
    sub_100091B38((uint64_t)v88);
    sub_100061E54((uint64_t)&v87);
    sub_100061E54((uint64_t)&v86);
    swift_bridgeObjectRetain();
    sub_100091BCC(v51, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  }
  sub_100037A24(v75, v76);
  sub_100091BCC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v27, v21);
  Swift::String v59 = v85;
  *(_OWORD *)uint64_t v85 = xmmword_101348180;
  uint64_t v60 = (int *)type metadata accessor for OwnedBeaconRecord();
  v70(&v59[v60[5]], v24, v21);
  sub_100091B68(v46, (uint64_t)&v59[v60[6]]);
  sub_10001D608(v84, (uint64_t)&v59[v60[7]], &qword_101638CF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(&v59[v60[8]], v48, v83);
  *(_OWORD *)&v59[v60[9]] = v90;
  sub_10001D608((uint64_t)v89, (uint64_t)&v59[v60[10]], &qword_10163A138);
  sub_10001D608((uint64_t)v88, (uint64_t)&v59[v60[11]], &qword_10163A138);
  *(_OWORD *)&v59[v60[12]] = v87;
  *(_OWORD *)&v59[v60[13]] = v86;
  char v61 = &v59[v60[14]];
  *(void *)char v61 = v53;
  *((void *)v61 + 1) = v54;
  uint64_t v62 = &v59[v60[15]];
  uint64_t v63 = v73;
  *(void *)uint64_t v62 = v72;
  *((void *)v62 + 1) = v63;
  *(void *)&v59[v60[16]] = v69;
  *(void *)&v59[v60[17]] = v67;
  v59[v60[18]] = 3;
  v59[v60[19]] = 0;
  v59[v60[20]] = 0;
  return (*(uint64_t (**)(char *, void, uint64_t, int *))(*((void *)v60 - 1) + 56))(v59, 0, 1, v60);
}

unint64_t sub_100091A80()
{
  unint64_t result = qword_101649DD0;
  if (!qword_101649DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101649DD0);
  }
  return result;
}

uint64_t sub_100091AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StableIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100091B38(uint64_t a1)
{
  return a1;
}

uint64_t sub_100091B68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StableIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100091BCC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100091C2C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D6F0);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170D6F0);
  if (qword_101636858 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170D708);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100091CF4()
{
  v1[17] = v0;
  v1[18] = type metadata accessor for StableIdentifier();
  v1[19] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  v1[20] = v2;
  v1[21] = *(void *)(v2 - 8);
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  return _swift_task_switch(sub_100091DF4, v0, 0);
}

uint64_t sub_100091DF4()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100091F3C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100091F3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  *(void *)(*(void *)v1 + 200) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100092054, v2, 0);
}

uint64_t sub_100092054()
{
  uint64_t v1 = v0[25];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[26] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100092190;
    return sub_100092A40();
  }
  else
  {
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v4 = 0xD000000000000010;
    v4[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_100092190(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[27] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[17];
  if (v1)
  {
    uint64_t v6 = sub_1000929B8;
  }
  else
  {
    v4[28] = a1;
    uint64_t v6 = sub_1000922CC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000922CC()
{
  uint64_t v1 = sub_101158244(v0[28]);
  v0[29] = v1;
  swift_bridgeObjectRelease();
  if (qword_101636850 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170D6F0);
  swift_bridgeObjectRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    v0[16] = *(void *)(v1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "FMIP server has %ld self-beaconing devices registered.", v5, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v6 = v0[25];
  return _swift_task_switch(sub_100092454, v6, 0);
}

uint64_t sub_100092454()
{
  *(void *)(v0 + 240) = *(void *)(*(void *)(v0 + 200) + 136);
  swift_retain();
  return _swift_task_switch(sub_1000924C8, 0, 0);
}

uint64_t sub_1000924C8()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[25];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[31] = v3;
  v3[2] = v1;
  v3[3] = sub_1000909A4;
  v3[4] = v2;
  os_log_type_t v4 = (void *)swift_task_alloc();
  v0[32] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AA0);
  *os_log_type_t v4 = v0;
  v4[1] = sub_1000925E4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 15, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000909AC, v3, v5);
}

uint64_t sub_1000925E4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 136);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 264) = *(void *)(v1 + 120);
  return _swift_task_switch(sub_100092754, v2, 0);
}

uint64_t sub_100092754()
{
  uint64_t result = v0[33];
  uint64_t v17 = *(void *)(result + 16);
  if (v17)
  {
    unint64_t v2 = 0;
    uint64_t v3 = v0[21];
    uint64_t v16 = v0[20];
    while (v2 < *(void *)(result + 16))
    {
      uint64_t v4 = result;
      uint64_t v5 = v0[23];
      uint64_t v6 = v0[19];
      unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      uint64_t v8 = *(void *)(v3 + 72);
      sub_100098978(v0[33] + v7 + v8 * v2, v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100098978(v5 + *(int *)(v16 + 24), v6, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      LODWORD(v5) = swift_getEnumCaseMultiPayload();
      sub_100098874(v6, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v9 = v0[23];
      if (v5)
      {
        sub_100098874(v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }
      else
      {
        sub_100098810(v9, v0[22]);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B74D8(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v11 = _swiftEmptyArrayStorage[2];
        unint64_t v10 = _swiftEmptyArrayStorage[3];
        if (v11 >= v10 >> 1) {
          sub_1000B74D8(v10 > 1, v11 + 1, 1);
        }
        uint64_t v12 = v0[22];
        _swiftEmptyArrayStorage[2] = v11 + 1;
        sub_100098810(v12, (uint64_t)_swiftEmptyArrayStorage + v7 + v11 * v8);
      }
      ++v2;
      uint64_t result = v4;
      if (v17 == v2) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    uint64_t v13 = v0[29];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_100097EC8((uint64_t)_swiftEmptyArrayStorage, v13);
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void *))v0[1];
    return v15(v14);
  }
  return result;
}

uint64_t sub_1000929B8()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100092A40()
{
  v1[43] = v0;
  sub_10000588C(&qword_101638CF0);
  v1[44] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for UUID();
  v1[45] = v2;
  v1[46] = *(void *)(v2 - 8);
  v1[47] = swift_task_alloc();
  v1[48] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for AnyAnalyticsEvent();
  v1[49] = v3;
  v1[50] = *(void *)(v3 - 8);
  v1[51] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v1[52] = v4;
  v1[53] = *(void *)(v4 - 8);
  v1[54] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v1[55] = v5;
  v1[56] = *(void *)(v5 - 8);
  v1[57] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Response();
  v1[58] = v6;
  v1[59] = *(void *)(v6 - 8);
  v1[60] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ContinuousClock.Instant();
  v1[61] = v7;
  v1[62] = *(void *)(v7 - 8);
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  v1[65] = swift_task_alloc();
  v1[66] = type metadata accessor for FetchDevicesEndpoint();
  v1[67] = swift_task_alloc();
  type metadata accessor for SearchpartyAccount();
  v1[68] = swift_task_alloc();
  v1[69] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ContinuousClock();
  v1[70] = v8;
  v1[71] = *(void *)(v8 - 8);
  v1[72] = swift_task_alloc();
  v1[73] = swift_task_alloc();
  return _swift_task_switch(sub_100092E00, v0, 0);
}

uint64_t sub_100092E00()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 136);
  if (*(void *)(v0 + 160))
  {
    sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
    swift_release();
    sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639340 + dword_101639340);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 592) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100092F48;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100092F48(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 344);
  *(void *)(*(void *)v1 + 600) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100093060, v2, 0);
}

uint64_t sub_100093060()
{
  uint64_t v1 = (uint64_t)(v0 + 12);
  if (v0[75])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    ContinuousClock.init()();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[76] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100093280;
    return sub_10028BA48((uint64_t)(v0 + 2));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    strcpy(v4, "AccountService");
    v4[15] = -18;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_100093280()
{
  uint64_t v2 = (void *)*v1;
  v2[77] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[43];
    return _swift_task_switch(sub_10009496C, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[78] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_1000933F4;
    uint64_t v5 = v2[69];
    return sub_10028C83C(v5);
  }
}

uint64_t sub_1000933F4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 632) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 344);
    sub_10009782C(v2 + 16);
    uint64_t v4 = sub_100094AD0;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 344);
    uint64_t v4 = sub_10009351C;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_10009351C()
{
  uint64_t v1 = v0[79];
  uint64_t v2 = v0[69];
  uint64_t v3 = (void *)v0[68];
  URLComponents.init()();
  URLComponents.scheme.setter();
  swift_bridgeObjectRetain();
  URLComponents.host.setter();
  sub_10009782C((uint64_t)(v0 + 2));
  URLComponents.path.setter();
  sub_100098978(v2, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SearchpartyAccount);
  v0[80] = v3[2];
  v0[81] = v3[3];
  v0[82] = v3[4];
  v0[83] = v3[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100098874((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SearchpartyAccount);
  v0[84] = sub_100F7F6CC();
  v0[85] = v4;
  if (v1)
  {
    uint64_t v5 = v0[73];
    uint64_t v6 = v0[71];
    uint64_t v7 = v0[70];
    uint64_t v8 = v0[69];
    uint64_t v9 = v0[67];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_100098874(v9, (uint64_t (*)(void))type metadata accessor for FetchDevicesEndpoint);
    sub_100098874(v8, (uint64_t (*)(void))type metadata accessor for SearchpartyAccount);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    type metadata accessor for ServerInteractionController();
    v0[86] = ServerInteractionController.__allocating_init(bundleIdentifier:)();
    sub_10000588C(&qword_10163A258);
    v0[87] = AnalyticsEvent.__allocating_init(name:)();
    ContinuousClock.now.getter();
    sub_1000988D4();
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
    v0[88] = v13;
    v0[89] = v12;
    return _swift_task_switch(sub_100093888, v13, v12);
  }
}

uint64_t sub_100093888()
{
  uint64_t v1 = *(void *)(v0 + 344);
  dispatch thunk of AnalyticsEvent.startTiming()();
  return _swift_task_switch(sub_1000938F4, v1, 0);
}

uint64_t sub_1000938F4()
{
  unint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 672);
  uint64_t v3 = *(void *)(v0 + 664);
  uint64_t v4 = *(void *)(v0 + 656);
  long long v11 = *(_OWORD *)(v0 + 640);
  uint64_t v5 = *(void *)(v0 + 536);
  *(void *)(v0 + 200) = *(void *)(v0 + 528);
  *(void *)(v0 + 208) = sub_100098930(&qword_10163A268, 255, (void (*)(uint64_t))type metadata accessor for FetchDevicesEndpoint);
  uint64_t v6 = sub_10001D958((uint64_t *)(v0 + 176));
  sub_100098978(v5, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for FetchDevicesEndpoint);
  *(void *)(v0 + 240) = &type metadata for FetchDevicesRequest;
  *(void *)(v0 + 248) = sub_1000989E0();
  *(void *)(v0 + 216) = v2;
  *(void *)(v0 + 224) = v1;
  *(void *)(v0 + 280) = &type metadata for SearchpartyCredential;
  *(void *)(v0 + 288) = sub_100098728();
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 256) = v7;
  *(_OWORD *)(v7 + 16) = v11;
  *(void *)(v7 + 32) = v4;
  *(void *)(v7 + 40) = v3;
  sub_100037A38(v2, v1);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:)
                                                                   + async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 720) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100093AB8;
  uint64_t v9 = *(void *)(v0 + 480);
  return v12(v9, v0 + 176, v0 + 216, v0 + 256);
}

uint64_t sub_100093AB8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 728) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 344);
    uint64_t v4 = sub_100094C34;
  }
  else
  {
    uint64_t v5 = v2 + 256;
    uint64_t v6 = v2 + 216;
    uint64_t v7 = v2 + 176;
    uint64_t v8 = *(void *)(v2 + 344);
    sub_10001DAB4(v5, &qword_10163A238);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
    uint64_t v4 = sub_100093C08;
    uint64_t v3 = v8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100093C08()
{
  uint64_t v101 = v0;
  if (qword_101636850 != -1) {
    swift_once();
  }
  uint64_t v96 = v0[73];
  uint64_t v92 = v0[72];
  uint64_t v1 = v0[71];
  uint64_t v2 = v0[70];
  uint64_t v3 = v0[65];
  uint64_t v4 = v0[64];
  uint64_t v6 = v0[61];
  uint64_t v5 = v0[62];
  uint64_t v7 = v0[56];
  uint64_t v8 = v0[57];
  uint64_t v9 = v0[55];
  uint64_t v10 = sub_100010324(v9, (uint64_t)qword_10170D6F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v10, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v92, v96, v2);
  long long v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = v0[72];
  uint64_t v15 = v0[71];
  uint64_t v97 = v0[70];
  if (v13)
  {
    uint64_t v16 = (uint8_t *)v0[63];
    uint64_t v69 = v0[61];
    uint64_t v87 = v0[56];
    uint64_t v17 = v0[54];
    uint64_t v90 = v0[55];
    uint64_t v93 = v0[57];
    uint64_t v18 = v0[53];
    uint64_t v74 = v0[52];
    uint64_t v76 = v0[62];
    os_log_type_t type = v12;
    uint64_t v19 = (uint8_t *)v0[64];
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v99 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    ContinuousClock.now.getter();
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
    sub_100098930(&qword_101653DE0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    uint64_t v21 = static Duration.description<A>(_:_:units:)();
    log = v11;
    unint64_t v23 = v22;
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v74);
    uint64_t v24 = *(void (**)(uint8_t *, uint64_t))(v76 + 8);
    v24(v16, v69);
    v0[42] = sub_1008FA0F0(v21, v23, &v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v24(v19, v69);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v25(v14, v97);
    _os_log_impl((void *)&_mh_execute_header, log, type, "fetchDevices duration: %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v93, v90);
  }
  else
  {
    uint64_t v27 = v0[56];
    uint64_t v26 = v0[57];
    uint64_t v28 = v0[55];
    uint64_t v24 = *(void (**)(uint8_t *, uint64_t))(v0[62] + 8);
    v24((uint8_t *)v0[64], v0[61]);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v25(v14, v97);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
  }
  v0[93] = v24;
  v0[92] = v25;
  unint64_t v29 = (void *)Response.response.getter();
  id v30 = [v29 statusCode];

  if (v30 != (id)200)
  {
    uint64_t v73 = v0[84];
    unint64_t v75 = v0[85];
    uint64_t v91 = v0[73];
    uint64_t v89 = v0[70];
    uint64_t v83 = v0[67];
    uint64_t v84 = v0[69];
    uint64_t v39 = v0[60];
    uint64_t v79 = v0[61];
    bufa = (uint8_t *)v0[65];
    uint64_t v40 = v0[59];
    uint64_t v71 = v0[58];
    uint64_t v41 = type metadata accessor for GenericError();
    sub_100098930((unint64_t *)&qword_10163A240, 255, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    uint64_t v43 = v42;
    uint64_t v99 = 0;
    unint64_t v100 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    uint64_t v99 = 0xD000000000000013;
    unint64_t v100 = 0x80000001013F2D20;
    uint64_t v44 = (void *)Response.response.getter();
    id v45 = [v44 statusCode];

    v0[40] = v45;
    v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    unint64_t v47 = v100;
    *uint64_t v43 = v99;
    v43[1] = v47;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v41 - 8) + 104))(v43, enum case for GenericError.error(_:), v41);
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    sub_100037A24(v73, v75);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v71);
    v24(bufa, v79);
    sub_100098874(v83, (uint64_t (*)(void))type metadata accessor for FetchDevicesEndpoint);
    sub_100098874(v84, (uint64_t (*)(void))type metadata accessor for SearchpartyAccount);
    v25(v91, v89);
    goto LABEL_10;
  }
  uint64_t v31 = v0 + 41;
  uint64_t v32 = v0[91];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v33 = Response.body.getter();
  unint64_t v35 = v34;
  sub_100098A34();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v32)
  {
    uint64_t v70 = v0[84];
    unint64_t v72 = v0[85];
    *(void *)typea = v0[70];
    uint64_t v88 = v0[73];
    uint64_t v82 = v0[69];
    uint64_t v78 = v0[65];
    buf = (uint8_t *)v0[67];
    uint64_t v36 = v0[60];
    uint64_t v77 = v0[61];
    uint64_t v94 = (void (*)(uint64_t, uint64_t))v24;
    uint64_t v38 = v0[58];
    uint64_t v37 = v0[59];
    sub_10001CFB8(v33, v35);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100037A24(v70, v72);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    v94(v78, v77);
    sub_100098874((uint64_t)buf, (uint64_t (*)(void))type metadata accessor for FetchDevicesEndpoint);
    sub_100098874(v82, (uint64_t (*)(void))type metadata accessor for SearchpartyAccount);
    v25(v88, *(void *)typea);
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v48 = (uint64_t (*)(void))v0[1];
    return v48();
  }
  sub_10001CFB8(v33, v35);
  swift_release();
  uint64_t v50 = *v31;
  uint64_t v51 = *(void *)(*v31 + 16);
  if (v51)
  {
    uint64_t v52 = v0[46];
    BOOL v98 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
    uint64_t v95 = v52;
    uint64_t v53 = (void (**)(char *, char *, uint64_t))(v52 + 32);
    swift_bridgeObjectRetain();
    uint64_t v54 = v50 + 56;
    uint64_t v55 = (char *)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v57 = v0[44];
      uint64_t v56 = v0[45];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((*v98)(v57, 1, v56) == 1)
      {
        sub_10001DAB4(v0[44], &qword_101638CF0);
      }
      else
      {
        Swift::String v59 = (char *)v0[47];
        uint64_t v58 = (char *)v0[48];
        uint64_t v60 = v0[45];
        char v61 = *v53;
        (*v53)(v58, (char *)v0[44], v60);
        v61(v59, v58, v60);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v55 = (char *)sub_100A6F668(0, *((void *)v55 + 2) + 1, 1, (unint64_t)v55);
        }
        unint64_t v63 = *((void *)v55 + 2);
        unint64_t v62 = *((void *)v55 + 3);
        if (v63 >= v62 >> 1) {
          uint64_t v55 = (char *)sub_100A6F668(v62 > 1, v63 + 1, 1, (unint64_t)v55);
        }
        uint64_t v64 = (char *)v0[47];
        uint64_t v65 = v0[45];
        *((void *)v55 + 2) = v63 + 1;
        v61(&v55[((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80))+ *(void *)(v95 + 72) * v63], v64, v65);
      }
      v54 += 32;
      --v51;
    }
    while (v51);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v55 = (char *)_swiftEmptyArrayStorage;
  }
  v0[94] = v55;
  swift_bridgeObjectRelease();
  uint64_t v66 = v0[89];
  uint64_t v67 = v0[88];
  return _swift_task_switch(sub_100094680, v67, v66);
}

uint64_t sub_100094680()
{
  uint64_t v1 = *(void *)(v0 + 344);
  dispatch thunk of AnalyticsEvent.stopTiming()();
  dispatch thunk of AnalyticsEvent.anyAnalyticsEvent.getter();
  return _swift_task_switch(sub_100094700, v1, 0);
}

uint64_t sub_100094700()
{
  uint64_t v10 = v0[84];
  unint64_t v11 = v0[85];
  uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[92];
  uint64_t v17 = v0[70];
  uint64_t v18 = v0[73];
  uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[93];
  uint64_t v16 = v0[69];
  uint64_t v13 = v0[65];
  uint64_t v14 = v0[67];
  uint64_t v1 = v0[60];
  uint64_t v12 = v0[61];
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[59];
  uint64_t v5 = v0[50];
  uint64_t v4 = v0[51];
  uint64_t v6 = v0[49];
  static AnalyticsPublisher.publish(event:)();
  swift_release();
  swift_release();
  swift_release();
  sub_100037A24(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v15(v13, v12);
  sub_100098874(v14, (uint64_t (*)(void))type metadata accessor for FetchDevicesEndpoint);
  sub_100098874(v16, (uint64_t (*)(void))type metadata accessor for SearchpartyAccount);
  v19(v18, v17);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v8 = v0[94];
  return v7(v8);
}

uint64_t sub_10009496C()
{
  uint64_t v1 = v0[73];
  uint64_t v2 = v0[71];
  uint64_t v3 = v0[70];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100094AD0()
{
  uint64_t v1 = v0[73];
  uint64_t v2 = v0[71];
  uint64_t v3 = v0[70];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100094C34()
{
  unint64_t v1 = v0[85];
  uint64_t v2 = v0[84];
  uint64_t v12 = v0[73];
  uint64_t v3 = v0[71];
  uint64_t v10 = v0[69];
  uint64_t v11 = v0[70];
  uint64_t v4 = v0[67];
  uint64_t v5 = v0[65];
  uint64_t v7 = v0[61];
  uint64_t v6 = v0[62];
  swift_release();
  swift_release();
  swift_release();
  sub_100037A24(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  sub_100098874(v4, (uint64_t (*)(void))type metadata accessor for FetchDevicesEndpoint);
  sub_100098874(v10, (uint64_t (*)(void))type metadata accessor for SearchpartyAccount);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v12, v11);
  sub_10001DAB4((uint64_t)(v0 + 32), &qword_10163A238);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 27));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 22));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100094E58(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  v2[9] = type metadata accessor for StableIdentifier();
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return _swift_task_switch(sub_100094FD0, v1, 0);
}

uint64_t sub_100094FD0()
{
  uint64_t v1 = _swiftEmptyArrayStorage;
  int64_t v2 = *(void *)(v0[3] + 16);
  uint64_t v3 = swift_bridgeObjectRetain();
  int64_t v41 = v2;
  if (v2)
  {
    uint64_t v5 = v0[11];
    uint64_t v4 = v0[12];
    uint64_t v6 = *(void *)(v4 + 72);
    unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v8 = v3 + v7;
    do
    {
      uint64_t v9 = v0[15];
      uint64_t v10 = v0[10];
      sub_100098978(v8, v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100098978(v9 + *(int *)(v5 + 24), v10, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      LODWORD(v9) = swift_getEnumCaseMultiPayload();
      sub_100098874(v10, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v11 = v0[15];
      if (v9)
      {
        sub_100098810(v11, v0[14]);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B74D8(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v13 = _swiftEmptyArrayStorage[2];
        unint64_t v12 = _swiftEmptyArrayStorage[3];
        if (v13 >= v12 >> 1) {
          sub_1000B74D8(v12 > 1, v13 + 1, 1);
        }
        uint64_t v14 = v0[14];
        _swiftEmptyArrayStorage[2] = v13 + 1;
        sub_100098810(v14, (uint64_t)_swiftEmptyArrayStorage + v7 + v13 * v6);
      }
      else
      {
        sub_100098874(v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }
      v8 += v6;
      --v2;
    }
    while (v2);
    uint64_t v1 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  int64_t v15 = _swiftEmptyArrayStorage[2];
  if (v15)
  {
    uint64_t v16 = v0[12];
    uint64_t v44 = v0[11];
    Swift::String v46 = _swiftEmptyArrayStorage;
    uint64_t v17 = v0[6];
    sub_1000B7034(0, v15, 0);
    uint64_t v18 = (char *)_swiftEmptyArrayStorage
        + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    uint64_t v42 = *(void *)(v16 + 72);
    uint64_t v1 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v19 = v0[13];
      uint64_t v20 = v0[8];
      uint64_t v21 = v0[5];
      sub_100098978((uint64_t)v18, v19, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v20, v19 + *(int *)(v44 + 20), v21);
      sub_100098874(v19, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v1[2] + 1, 1);
        uint64_t v1 = v46;
      }
      unint64_t v23 = v1[2];
      unint64_t v22 = v1[3];
      if (v23 >= v22 >> 1)
      {
        sub_1000B7034(v22 > 1, v23 + 1, 1);
        uint64_t v1 = v46;
      }
      uint64_t v24 = v0[8];
      uint64_t v25 = v0[5];
      v1[2] = v23 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))((unint64_t)v1+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(void *)(v17 + 72) * v23, v24, v25);
      Swift::String v46 = v1;
      v18 += v42;
      --v15;
    }
    while (v15);
  }
  swift_release();
  v0[16] = v1;
  uint64_t v26 = _swiftEmptyArrayStorage;
  if (v41)
  {
    uint64_t v27 = v0[12];
    uint64_t v45 = v0[11];
    unint64_t v47 = _swiftEmptyArrayStorage;
    uint64_t v28 = v0[6];
    uint64_t v29 = v0[3];
    int64_t v30 = v41;
    sub_1000B7034(0, v41, 0);
    uint64_t v31 = v29 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    uint64_t v43 = *(void *)(v27 + 72);
    uint64_t v26 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v32 = v0[13];
      uint64_t v33 = v0[7];
      uint64_t v34 = v0[5];
      sub_100098978(v31, v32, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v33, v32 + *(int *)(v45 + 20), v34);
      sub_100098874(v32, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v26[2] + 1, 1);
        uint64_t v26 = v47;
      }
      unint64_t v36 = v26[2];
      unint64_t v35 = v26[3];
      if (v36 >= v35 >> 1)
      {
        sub_1000B7034(v35 > 1, v36 + 1, 1);
        uint64_t v26 = v47;
      }
      uint64_t v37 = v0[7];
      uint64_t v38 = v0[5];
      v26[2] = v36 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v28 + 32))((unint64_t)v26+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v36, v37, v38);
      unint64_t v47 = v26;
      v31 += v43;
      --v30;
    }
    while (v30);
  }
  v0[17] = sub_101158244((uint64_t)v26);
  swift_bridgeObjectRelease();
  uint64_t v39 = (void *)swift_task_alloc();
  v0[18] = v39;
  *uint64_t v39 = v0;
  v39[1] = sub_1000954EC;
  return sub_100092A40();
}

uint64_t sub_1000954EC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 152) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_100095750;
    uint64_t v7 = v5;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 32);
    *(void *)(v4 + 160) = a1;
    uint64_t v6 = sub_10009562C;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_10009562C()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = sub_100097898(v0[20], v0[17]);
  swift_bridgeObjectRelease();
  v0[2] = v2;
  sub_101020BCC(v1);
  swift_bridgeObjectRelease();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000982B0(v3, v0 + 2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void *))v0[1];
  return v5(v4);
}

uint64_t sub_100095750()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000957F8(uint64_t a1)
{
  v2[42] = a1;
  v2[43] = v1;
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v2[44] = v3;
  v2[45] = *(void *)(v3 - 8);
  v2[46] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[47] = v4;
  v2[48] = *(void *)(v4 - 8);
  v2[49] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Response();
  v2[50] = v5;
  v2[51] = *(void *)(v5 - 8);
  v2[52] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  v2[53] = v6;
  v2[54] = *(void *)(v6 - 8);
  v2[55] = swift_task_alloc();
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  v2[58] = type metadata accessor for MetricsEndpoint();
  v2[59] = swift_task_alloc();
  type metadata accessor for SearchpartyAccount();
  v2[60] = swift_task_alloc();
  v2[61] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ContinuousClock();
  v2[62] = v7;
  v2[63] = *(void *)(v7 - 8);
  v2[64] = swift_task_alloc();
  v2[65] = swift_task_alloc();
  return _swift_task_switch(sub_100095AC0, v1, 0);
}

uint64_t sub_100095AC0()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 136);
  if (*(void *)(v0 + 160))
  {
    sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
    swift_release();
    sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639340 + dword_101639340);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 528) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100095C08;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100095C08(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 344);
  *(void *)(*(void *)v1 + 536) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100095D20, v2, 0);
}

uint64_t sub_100095D20()
{
  uint64_t v1 = (uint64_t)(v0 + 12);
  if (v0[67])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    ContinuousClock.init()();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[68] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100095F00;
    return sub_10028BA48((uint64_t)(v0 + 2));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    strcpy(v4, "AccountService");
    v4[15] = -18;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_100095F00()
{
  uint64_t v2 = (void *)*v1;
  v2[69] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[43];
    return _swift_task_switch(sub_100097074, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[70] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_100096074;
    uint64_t v5 = v2[61];
    return sub_10028C83C(v5);
  }
}

uint64_t sub_100096074()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 568) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 344);
    sub_10009782C(v2 + 16);
    uint64_t v4 = sub_100097198;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 344);
    uint64_t v4 = sub_10009619C;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_10009619C()
{
  uint64_t v1 = v0[71];
  uint64_t v3 = (void *)v0[60];
  uint64_t v2 = v0[61];
  uint64_t v4 = (long long *)v0[42];
  URLComponents.init()();
  URLComponents.scheme.setter();
  swift_bridgeObjectRetain();
  URLComponents.host.setter();
  sub_10009782C((uint64_t)(v0 + 2));
  URLComponents.path.setter();
  sub_100098978(v2, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SearchpartyAccount);
  uint64_t v5 = v3[2];
  uint64_t v6 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v7 = v3[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100098874((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SearchpartyAccount);
  uint64_t v9 = sub_100A3327C(v4);
  v0[72] = v9;
  v0[73] = v10;
  if (v1)
  {
    uint64_t v11 = v0[65];
    uint64_t v12 = v0[62];
    uint64_t v13 = v0[63];
    uint64_t v14 = v0[61];
    uint64_t v15 = v0[59];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_100098874(v15, (uint64_t (*)(void))type metadata accessor for MetricsEndpoint);
    sub_100098874(v14, (uint64_t (*)(void))type metadata accessor for SearchpartyAccount);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
  else
  {
    uint64_t v18 = v9;
    unint64_t v19 = v10;
    uint64_t v25 = v0[59];
    uint64_t v26 = v8;
    uint64_t v20 = v0[58];
    type metadata accessor for ServerInteractionController();
    v0[74] = ServerInteractionController.__allocating_init(bundleIdentifier:)();
    ContinuousClock.now.getter();
    v0[25] = v20;
    v0[26] = sub_100098930(&qword_10163A220, 255, (void (*)(uint64_t))type metadata accessor for MetricsEndpoint);
    uint64_t v21 = sub_10001D958(v0 + 22);
    sub_100098978(v25, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for MetricsEndpoint);
    v0[30] = &type metadata for MetricsRequest;
    v0[31] = sub_1000986D4();
    v0[27] = v18;
    v0[28] = v19;
    v0[35] = &type metadata for SearchpartyCredential;
    v0[36] = sub_100098728();
    unint64_t v22 = (void *)swift_allocObject();
    v0[32] = v22;
    v22[2] = v5;
    double v22[3] = v6;
    uint64_t v22[4] = v26;
    v22[5] = v7;
    sub_100037A38(v18, v19);
    uint64_t v27 = (char *)&async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:)
        + async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:);
    unint64_t v23 = (void *)swift_task_alloc();
    v0[75] = v23;
    *unint64_t v23 = v0;
    v23[1] = sub_1000965BC;
    uint64_t v24 = v0[52];
    return ((uint64_t (*)(uint64_t, void *, void *, void *))v27)(v24, v0 + 22, v0 + 27, v0 + 32);
  }
}

uint64_t sub_1000965BC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 608) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 344);
    uint64_t v4 = sub_1000972BC;
  }
  else
  {
    uint64_t v5 = v2 + 256;
    uint64_t v6 = v2 + 216;
    uint64_t v7 = v2 + 176;
    uint64_t v8 = *(void *)(v2 + 344);
    sub_10001DAB4(v5, &qword_10163A238);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
    uint64_t v4 = sub_10009670C;
    uint64_t v3 = v8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10009670C()
{
  uint64_t v91 = v0;
  if (qword_101636850 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[63];
  uint64_t v85 = v0[64];
  uint64_t v87 = v0[65];
  uint64_t v2 = v0[62];
  uint64_t v4 = v0[56];
  uint64_t v3 = v0[57];
  uint64_t v6 = v0[53];
  uint64_t v5 = v0[54];
  uint64_t v7 = v0[48];
  uint64_t v8 = v0[49];
  uint64_t v9 = v0[47];
  uint64_t v10 = sub_100010324(v9, (uint64_t)qword_10170D6F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v10, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v85, v87, v2);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = v0[63];
  uint64_t v15 = v0[64];
  uint64_t v16 = v0[62];
  if (v13)
  {
    uint64_t v17 = v0[55];
    uint64_t v64 = v0[54];
    uint64_t v18 = v0[53];
    uint64_t v86 = v0[49];
    uint64_t v81 = v0[48];
    uint64_t v83 = v0[47];
    uint64_t v73 = v0[62];
    loga = v11;
    uint64_t v19 = v0[45];
    uint64_t v20 = v0[46];
    uint64_t v61 = v0[44];
    os_log_type_t typea = v12;
    uint64_t v21 = v0[56];
    unint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v89 = swift_slowAlloc();
    buf = v22;
    *(_DWORD *)unint64_t v22 = 136315138;
    ContinuousClock.now.getter();
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
    sub_100098930(&qword_101653DE0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    uint64_t v23 = static Duration.description<A>(_:_:units:)();
    unint64_t v25 = v24;
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v61);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
    v26(v17, v18);
    v0[41] = sub_1008FA0F0(v23, v25, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v88 = (void (*)(uint8_t *, uint64_t))v26;
    v26(v21, v18);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v27(v15, v73);
    _os_log_impl((void *)&_mh_execute_header, loga, typea, "metrics duration: %s", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v86, v83);
  }
  else
  {
    uint64_t v29 = v0[48];
    uint64_t v28 = v0[49];
    uint64_t v30 = v0[47];
    uint64_t v88 = *(void (**)(uint8_t *, uint64_t))(v0[54] + 8);
    v88((uint8_t *)v0[56], v0[53]);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v27(v15, v16);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
  }
  uint64_t v31 = (void *)Response.response.getter();
  id v32 = [v31 statusCode];

  if (v32 != (id)200)
  {
    uint64_t v59 = v0[72];
    unint64_t v63 = v0[73];
    os_log_t logb = (os_log_t)v0[62];
    uint64_t v82 = v0[65];
    uint64_t v75 = v0[61];
    bufb = (uint8_t *)v0[57];
    uint64_t v72 = v0[59];
    uint64_t v68 = v0[53];
    uint64_t v84 = (void (*)(uint64_t, os_log_t))v27;
    uint64_t v41 = v0[51];
    uint64_t v42 = v0[52];
    uint64_t v57 = v0[50];
    uint64_t v43 = type metadata accessor for GenericError();
    sub_100098930((unint64_t *)&qword_10163A240, 255, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    uint64_t v45 = v44;
    uint64_t v89 = 0;
    unint64_t v90 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    uint64_t v89 = 0xD000000000000013;
    unint64_t v90 = 0x80000001013F2D20;
    Swift::String v46 = (void *)Response.response.getter();
    id v47 = [v46 statusCode];

    v0[40] = v47;
    v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    unint64_t v49 = v90;
    *uint64_t v45 = v89;
    v45[1] = v49;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v43 - 8) + 104))(v45, enum case for GenericError.error(_:), v43);
    swift_willThrow();
    swift_release();
    swift_release();
    sub_100037A24(v59, v63);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v57);
    v88(bufb, v68);
    sub_100098874(v72, (uint64_t (*)(void))type metadata accessor for MetricsEndpoint);
    sub_100098874(v75, (uint64_t (*)(void))type metadata accessor for SearchpartyAccount);
    os_log_t v40 = logb;
    goto LABEL_10;
  }
  uint64_t v33 = v0[76];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v34 = Response.body.getter();
  unint64_t v36 = v35;
  sub_1000987BC();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t type = v0[72];
  os_log_t log = (os_log_t)v0[73];
  uint64_t v82 = v0[65];
  if (v33)
  {
    uint64_t v74 = v0[62];
    uint64_t v67 = v0[59];
    bufa = (uint8_t *)v0[61];
    uint64_t v84 = (void (*)(uint64_t, os_log_t))v27;
    uint64_t v62 = v0[53];
    uint64_t v65 = (uint8_t *)v0[57];
    uint64_t v37 = v0[51];
    uint64_t v38 = v0[52];
    uint64_t v39 = v0[50];
    sub_10001CFB8(v34, v36);
    swift_release();
    swift_release();
    swift_release();
    sub_100037A24(type, (unint64_t)log);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
    v88(v65, v62);
    sub_100098874(v67, (uint64_t (*)(void))type metadata accessor for MetricsEndpoint);
    sub_100098874((uint64_t)bufa, (uint64_t (*)(void))type metadata accessor for SearchpartyAccount);
    os_log_t v40 = v74;
LABEL_10:
    v84(v82, v40);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v50 = (uint64_t (*)(void))v0[1];
    goto LABEL_11;
  }
  uint64_t v66 = v0[62];
  uint64_t v60 = v0[61];
  uint64_t v56 = (uint8_t *)v0[57];
  uint64_t v58 = v0[59];
  uint64_t v52 = v0[52];
  uint64_t v55 = v0[53];
  uint64_t v53 = v0[50];
  uint64_t v54 = v0[51];
  sub_10001CFB8(v34, v36);
  swift_release();
  swift_release();
  swift_release();
  sub_100037A24(type, (unint64_t)log);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
  v88(v56, v55);
  sub_100098874(v58, (uint64_t (*)(void))type metadata accessor for MetricsEndpoint);
  sub_100098874(v60, (uint64_t (*)(void))type metadata accessor for SearchpartyAccount);
  v27(v82, v66);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v50 = (uint64_t (*)(void))v0[1];
LABEL_11:
  return v50();
}

uint64_t sub_100097074()
{
  uint64_t v1 = v0[65];
  uint64_t v2 = v0[62];
  uint64_t v3 = v0[63];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100097198()
{
  uint64_t v1 = v0[65];
  uint64_t v2 = v0[62];
  uint64_t v3 = v0[63];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000972BC()
{
  unint64_t v1 = v0[73];
  uint64_t v2 = v0[72];
  uint64_t v12 = v0[65];
  uint64_t v3 = v0[63];
  uint64_t v11 = v0[62];
  uint64_t v4 = v0[61];
  uint64_t v5 = v0[59];
  uint64_t v6 = v0[57];
  uint64_t v7 = v0[53];
  uint64_t v8 = v0[54];
  swift_release();
  swift_release();
  sub_100037A24(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  sub_100098874(v5, (uint64_t (*)(void))type metadata accessor for MetricsEndpoint);
  sub_100098874(v4, (uint64_t (*)(void))type metadata accessor for SearchpartyAccount);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v12, v11);
  sub_10001DAB4((uint64_t)(v0 + 32), &qword_10163A238);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 27));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 22));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100097494()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FMIPService()
{
  return self;
}

uint64_t sub_1000974F0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100098930(&qword_10163A218, a2, (void (*)(uint64_t))type metadata accessor for FMIPService);
  *(void *)(a1 + 8) = result;
  return result;
}

Swift::Int sub_100097548()
{
  return sub_1000975E8();
}

uint64_t sub_100097564()
{
  return String.hash(into:)();
}

Swift::Int sub_100097580()
{
  return sub_100097678();
}

uint64_t sub_10009759C@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_10159FCB8;
  return sub_1000976D0(v2, a1, a2);
}

void sub_1000975A8(void *a1@<X8>)
{
  *a1 = 0xD000000000000036;
  a1[1] = 0x80000001013EE290;
}

Swift::Int sub_1000975C8()
{
  return sub_1000975E8();
}

Swift::Int sub_1000975E8()
{
  return Hasher._finalize()();
}

uint64_t sub_100097638()
{
  return String.hash(into:)();
}

Swift::Int sub_100097658()
{
  return sub_100097678();
}

Swift::Int sub_100097678()
{
  return Hasher._finalize()();
}

uint64_t sub_1000976C4@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_10159FCF0;
  return sub_1000976D0(v2, a1, a2);
}

uint64_t sub_1000976D0@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4 != 0;
  return result;
}

void sub_100097720(void *a1@<X8>)
{
  *a1 = 0x6F43656369766564;
  a1[1] = 0xEB00000000746E75;
}

uint64_t sub_100097744()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D708);
  sub_100010324(v0, (uint64_t)qword_10170D708);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000977C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101638D30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009782C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100097898(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = sub_100097A20((unint64_t *)((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v3, a2);
    swift_release();
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v7 = sub_100097A20((unint64_t *)v8, v5, v3, a2);
    swift_release();
    swift_slowDealloc();
  }
  return v7;
}

uint64_t sub_100097A20(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a1;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v54 = (char *)&v36 - v13;
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = *(void *)(a3 + 16);
  uint64_t v39 = a3;
  if (v49)
  {
    uint64_t v37 = a2;
    uint64_t v38 = v4;
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v17 = v9 + 16;
    uint64_t v48 = a3 + ((*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64));
    uint64_t v52 = *(void *)(v17 + 56);
    uint64_t v53 = v18;
    uint64_t v45 = (void (**)(char *, char *, uint64_t))(v17 + 16);
    Swift::String v46 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 32);
    uint64_t v51 = a4 + 56;
    uint64_t v19 = (void (**)(char *, uint64_t))(v17 - 8);
    swift_bridgeObjectRetain();
    uint64_t v40 = 0;
    uint64_t v20 = 0;
    id v47 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 40);
    unint64_t v36 = (v17 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v42 = v16;
    while (1)
    {
      v53(v16, v48 + v52 * v20, v8);
      uint64_t v44 = *v47;
      v44(v16, 0, 1, v8);
      if ((*v46)(v16, 1, v8) == 1)
      {
        a2 = v37;
        uint64_t v35 = v40;
        goto LABEL_21;
      }
      uint64_t v50 = v20;
      (*v45)(v54, v16, v8);
      sub_100098930(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v22 = -1 << *(unsigned char *)(a4 + 32);
      unint64_t v23 = v21 & ~v22;
      if (((*(void *)(v51 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
        break;
      }
      uint64_t v43 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v24 = v17;
      uint64_t v25 = a4;
      uint64_t v26 = ~v22;
      while (1)
      {
        v53(v12, *(void *)(v25 + 48) + v23 * v52, v8);
        sub_100098930((unint64_t *)&qword_10163B8F0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v28 = *v19;
        (*v19)(v12, v8);
        if (v27) {
          break;
        }
        unint64_t v23 = (v23 + 1) & v26;
        if (((*(void *)(v51 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
        {
          a4 = v25;
          uint64_t v17 = v24;
          uint64_t v16 = v42;
          goto LABEL_10;
        }
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v54, v8);
      uint64_t v30 = (v23 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v31 = *(unint64_t *)((char *)v41 + v30);
      *(unint64_t *)((char *)v41 + v30) = v31 | (1 << v23);
      if ((v31 & (1 << v23)) != 0)
      {
        a4 = v25;
        uint64_t v17 = v24;
        uint64_t v16 = v42;
LABEL_13:
        uint64_t v32 = v50;
        goto LABEL_14;
      }
      BOOL v33 = __OFADD__(v40++, 1);
      uint64_t v32 = v50;
      if (v33)
      {
        __break(1u);
        return result;
      }
      a4 = v25;
      uint64_t v17 = v24;
      uint64_t v16 = v42;
LABEL_14:
      uint64_t v20 = v32 + 1;
      if (v20 == v49)
      {
        a2 = v37;
        uint64_t v35 = v40;
        v44(v16, 1, 1, v8);
        goto LABEL_21;
      }
    }
    uint64_t v28 = *v19;
LABEL_10:
    v28(v54, v8);
    goto LABEL_13;
  }
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  swift_bridgeObjectRetain();
  uint64_t v35 = 0;
  v34(v16, 1, 1, v8);
LABEL_21:
  swift_bridgeObjectRelease();
  swift_retain();
  return sub_100B2838C(v41, a2, v35, a4);
}

void *sub_100097EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v31 = (uint64_t)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)(a1 + 16);
  if (!v30) {
    return _swiftEmptyArrayStorage;
  }
  v25[1] = v2;
  uint64_t v26 = v8;
  unint64_t v28 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v29 = a1 + v28;
  uint64_t v33 = *(void *)(v5 + 72);
  uint64_t v36 = v8 + 16;
  uint64_t v37 = a2 + 56;
  uint64_t v11 = (void (**)(char *, uint64_t))(v8 + 8);
  v25[0] = a1;
  swift_bridgeObjectRetain();
  uint64_t v12 = 0;
  uint64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v38 = a2;
  do
  {
    uint64_t v34 = v12;
    uint64_t v35 = v29 + v33 * v12;
    if (*(void *)(a2 + 16)
      && (sub_100098930(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID),
          uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)(),
          uint64_t v14 = v38,
          uint64_t v15 = -1 << *(unsigned char *)(v38 + 32),
          unint64_t v16 = v13 & ~v15,
          ((*(void *)(v37 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) != 0))
    {
      uint64_t v17 = ~v15;
      uint64_t v18 = *(void *)(v26 + 72);
      uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v26 + 16);
      while (1)
      {
        v19(v10, *(void *)(v14 + 48) + v18 * v16, v7);
        sub_100098930((unint64_t *)&qword_10163B8F0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*v11)(v10, v7);
        if (v20) {
          break;
        }
        unint64_t v16 = (v16 + 1) & v17;
        uint64_t v14 = v38;
        if (((*(void *)(v37 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
          goto LABEL_10;
        }
      }
    }
    else
    {
LABEL_10:
      sub_100098978(v35, v31, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      unint64_t v21 = (unint64_t)v32;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v21 = sub_100A6F6C4(0, *(void *)(v21 + 16) + 1, 1, v21);
      }
      unint64_t v23 = *(void *)(v21 + 16);
      unint64_t v22 = *(void *)(v21 + 24);
      if (v23 >= v22 >> 1) {
        unint64_t v21 = sub_100A6F6C4(v22 > 1, v23 + 1, 1, v21);
      }
      *(void *)(v21 + 16) = v23 + 1;
      uint64_t v32 = (void *)v21;
      sub_100098810(v31, v21 + v28 + v23 * v33);
    }
    uint64_t v12 = v34 + 1;
    a2 = v38;
  }
  while (v34 + 1 != v30);
  swift_bridgeObjectRelease();
  return v32;
}

void *sub_1000982B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v40 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = __chkstk_darwin(v32);
  uint64_t v30 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v42 = _swiftEmptyArrayStorage;
  uint64_t v34 = *(void *)(a1 + 16);
  if (v34)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v36 = *(void *)(v8 + 72);
    uint64_t v28 = (v13 + 32) & ~v13;
    uint64_t v29 = v4;
    uint64_t v33 = a1 + v28;
    uint64_t v38 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v39 = v4 + 16;
    uint64_t v31 = (char *)&v27 - v9;
    uint64_t v14 = v40;
    while (1)
    {
      sub_100098978(v33 + v36 * v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v15 = *v35;
      if (*(void *)(*v35 + 16))
      {
        uint64_t v37 = v12;
        unint64_t v16 = &v10[*(int *)(v32 + 20)];
        sub_100098930(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        swift_bridgeObjectRetain();
        uint64_t v41 = v16;
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v18 = -1 << *(unsigned char *)(v15 + 32);
        unint64_t v19 = v17 & ~v18;
        if ((*(void *)(v15 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
        {
          uint64_t v20 = ~v18;
          uint64_t v21 = *(void *)(v29 + 72);
          unint64_t v22 = *(void (**)(char *, unint64_t, uint64_t))(v29 + 16);
          while (1)
          {
            v22(v14, *(void *)(v15 + 48) + v21 * v19, v3);
            sub_100098930((unint64_t *)&qword_10163B8F0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
            char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
            (*v38)(v14, v3);
            if (v23) {
              break;
            }
            unint64_t v19 = (v19 + 1) & v20;
            if (((*(void *)(v15 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
              goto LABEL_3;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v10 = v31;
          sub_100098810((uint64_t)v31, v30);
          uint64_t v24 = v42;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B74D8(0, v24[2] + 1, 1);
            uint64_t v24 = v42;
          }
          uint64_t v12 = v37;
          unint64_t v26 = v24[2];
          unint64_t v25 = v24[3];
          if (v26 >= v25 >> 1)
          {
            sub_1000B74D8(v25 > 1, v26 + 1, 1);
            uint64_t v24 = v42;
          }
          uint64_t v24[2] = v26 + 1;
          sub_100098810(v30, (uint64_t)v24 + v28 + v26 * v36);
          goto LABEL_5;
        }
LABEL_3:
        swift_bridgeObjectRelease();
        uint64_t v10 = v31;
        uint64_t v12 = v37;
      }
      sub_100098874((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_5:
      if (++v12 == v34) {
        return v42;
      }
    }
  }
  return result;
}

unint64_t sub_1000986D4()
{
  unint64_t result = qword_10163A228;
  if (!qword_10163A228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A228);
  }
  return result;
}

unint64_t sub_100098728()
{
  unint64_t result = qword_10163A230;
  if (!qword_10163A230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A230);
  }
  return result;
}

uint64_t sub_10009877C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_1000987BC()
{
  unint64_t result = qword_10163A248;
  if (!qword_10163A248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10163A248);
  }
  return result;
}

uint64_t sub_100098810(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100098874(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1000988D4()
{
  unint64_t result = qword_10163A260;
  if (!qword_10163A260)
  {
    sub_10000592C(&qword_10163A258);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A260);
  }
  return result;
}

uint64_t sub_100098930(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100098978(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000989E0()
{
  unint64_t result = qword_10163A270;
  if (!qword_10163A270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A270);
  }
  return result;
}

unint64_t sub_100098A34()
{
  unint64_t result = qword_10163A278;
  if (!qword_10163A278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A278);
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPService.AnalyticsKey()
{
  return &type metadata for FMIPService.AnalyticsKey;
}

unsigned char *_s12searchpartyd11FMIPServiceC12AnalyticsKeyOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100098B3CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPService.AnalyticsEvent()
{
  return &type metadata for FMIPService.AnalyticsEvent;
}

unint64_t sub_100098B78()
{
  unint64_t result = qword_10163A280;
  if (!qword_10163A280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A280);
  }
  return result;
}

unint64_t sub_100098BD0()
{
  unint64_t result = qword_10163A288;
  if (!qword_10163A288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A288);
  }
  return result;
}

unint64_t sub_100098C28()
{
  unint64_t result = qword_10163A290;
  if (!qword_10163A290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A290);
  }
  return result;
}

unint64_t sub_100098C80()
{
  unint64_t result = qword_10163A298;
  if (!qword_10163A298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A298);
  }
  return result;
}

unint64_t sub_100098CD8()
{
  unint64_t result = qword_10163A2A0;
  if (!qword_10163A2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A2A0);
  }
  return result;
}

unint64_t sub_100098D30()
{
  unint64_t result = qword_10163A2A8;
  if (!qword_10163A2A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A2A8);
  }
  return result;
}

void DeviceInformationProviderFactory.provider()(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for SystemInfo;
  *(void *)(a1 + 32) = &off_1015AACF0;
}

ValueMetadata *type metadata accessor for DeviceInformationProviderFactory()
{
  return &type metadata for DeviceInformationProviderFactory;
}

uint64_t sub_100098DAC(void *a1)
{
  uint64_t v2 = v1;
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170E9E8);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    type metadata accessor for CloudKitCoordinator();
    swift_retain();
    uint64_t v8 = String.init<A>(describing:)();
    sub_1008FA0F0(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "CloudKitCoordinator was reset: %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_retain();
  uint64_t v10 = swift_retain();
  sub_100B38DFC(v10, a1, v2);
  swift_release();
  return swift_release();
}

void sub_100098FA4(uint64_t a1, void *a2, uint64_t a3)
{
}

uint64_t sub_100098FB0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170E9E8);
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "CloudKitCoordinator requested flushCache", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *(uint64_t **)(v2 + 160);
  uint64_t v13 = (void *)v12[2];
  *uint64_t v7 = v13;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.notOnQueue(_:), v4);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v13)
  {
    unint64_t v16 = dispatch_group_create();
    dispatch_group_enter(v16);
    swift_retain();
    uint64_t v17 = v16;
    sub_101021028(0, a1, v12, v17);
    swift_release();

    QueueSynchronizer.conditionalSync<A>(_:)();
    return sub_100A9E7EC(6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100099208(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v244 = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v5 - 8);
  uint64_t v233 = (char *)&v208 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v243 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v230 = *(void *)(v243 - 8);
  uint64_t v7 = __chkstk_darwin(v243);
  uint64_t v236 = (uint64_t)&v208 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v220 = (uint64_t)&v208 - v9;
  uint64_t v226 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v226);
  uint64_t v227 = (uint64_t)&v208 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v11 - 8);
  uint64_t v223 = (uint64_t)&v208 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v222 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v221 = *(void *)(v222 - 8);
  __chkstk_darwin(v222);
  uint64_t v219 = (uint64_t)&v208 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void (***)(uint64_t, uint64_t))(v14 - 8);
  uint64_t v240 = v14;
  uint64_t v241 = v15;
  __chkstk_darwin(v14);
  uint64_t v239 = (uint64_t)&v208 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_101638CF0);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v217 = (uint64_t)&v208 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  v218 = (char *)&v208 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  os_log_type_t v228 = (char *)&v208 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v224 = (uint64_t)&v208 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v225 = (char *)&v208 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v234 = (char *)&v208 - v29;
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v208 - v30;
  uint64_t v32 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v237 = (char *)&v208 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v229 = (char *)&v208 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v232 = (char *)&v208 - v39;
  __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v208 - v40;
  id v42 = [a1 recordName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  if (v43((uint64_t)v31, 1, v32) != 1)
  {
    uint64_t v213 = v43;
    uint64_t v214 = v33 + 48;
    uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 32);
    uint64_t v216 = v33 + 32;
    uint64_t v215 = v51;
    v51(v41, (uint64_t)v31, v32);
    v235 = v41;
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    uint64_t v53 = sub_100010324(v52, (uint64_t)qword_10170E9E8);
    id v54 = a1;
    unint64_t v55 = a3;
    swift_bridgeObjectRetain_n();
    id v56 = v54;
    uint64_t v212 = v53;
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.default.getter();
    BOOL v59 = os_log_type_enabled(v57, v58);
    uint64_t v231 = v32;
    uint64_t v238 = v33;
    uint64_t v60 = v244;
    id v211 = v56;
    if (v59)
    {
      uint64_t v61 = v56;
      uint64_t v62 = swift_slowAlloc();
      unint64_t v63 = v55;
      uint64_t v64 = swift_slowAlloc();
      uint64_t v210 = swift_slowAlloc();
      *(void *)&v251[0] = v210;
      *(_DWORD *)uint64_t v62 = 138412546;
      *(void *)&long long v248 = v61;
      id v65 = v61;
      os_log_t v209 = v57;
      id v66 = v65;
      uint64_t v33 = v238;
      unint64_t v67 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v68 = (void *)v64;
      unint64_t v55 = v67;
      *uint64_t v68 = v61;

      *(_WORD *)(v62 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)&long long v248 = sub_1008FA0F0(v60, v67, (uint64_t *)v251);
      uint64_t v69 = v231;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_t v70 = v209;
      _os_log_impl((void *)&_mh_execute_header, v209, v58, "Process CloudKit delete recordID: %@ recordType: %{public}s", (uint8_t *)v62, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v69 = v32;

      swift_bridgeObjectRelease_n();
    }
    uint64_t v72 = v243;
    unsigned __int8 v73 = sub_100905B58(v60, v55);
    if (v73 == 17)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v74 = Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v76 = (uint8_t *)swift_slowAlloc();
        *(void *)&v251[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v76 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&long long v248 = sub_1008FA0F0(v60, v55, (uint64_t *)v251);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "Ignoring record delete for unknown record type: %{public}s", v76, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v33 + 8))(v235, v69);
LABEL_82:
        swift_bridgeObjectRetain();
        return v60;
      }
      swift_bridgeObjectRelease_n();

LABEL_81:
      (*(void (**)(char *, uint64_t))(v33 + 8))(v235, v69);
      goto LABEL_82;
    }
    unsigned __int8 v77 = v73;
    id v78 = [v211 recordName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v79 = (uint64_t)v234;
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    if (v213(v79, 1, v69) == 1)
    {
      sub_10001DAB4(v79, &qword_101638CF0);
    }
    else
    {
      uint64_t v80 = (uint64_t)v232;
      v215(v232, v79, v69);
      char v81 = sub_100905B58(v60, v55);
      if (v81 != 17)
      {
        uint64_t v83 = v239;
        sub_100905ED0(v81, v239);
        sub_100B69EFC(v80, v83);
        v241[1](v83, v240);
        uint64_t v84 = v246;
        if (v246)
        {
          uint64_t v85 = v69;
          uint64_t v86 = v80;
          uint64_t v87 = v247;
          uint64_t v88 = sub_10001CD44(&v245, v246);
          *((void *)&v249 + 1) = v84;
          uint64_t v250 = *(void *)(v87 + 8);
          uint64_t v89 = sub_10001D958((uint64_t *)&v248);
          (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v84 - 8) + 16))(v89, v88, v84);
          uint64_t v90 = v86;
          uint64_t v69 = v85;
          (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v90, v85);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v245);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v80, v69);
          sub_10001DAB4((uint64_t)&v245, (uint64_t *)&unk_10163BBE0);
          long long v248 = 0u;
          long long v249 = 0u;
          uint64_t v250 = 0;
        }
        uint64_t v82 = (uint64_t)v233;
        sub_10001D608((uint64_t)&v248, (uint64_t)v251, &qword_10163A2B0);
        goto LABEL_26;
      }
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v80, v69);
    }
    uint64_t v82 = (uint64_t)v233;
    uint64_t v252 = 0;
    memset(v251, 0, sizeof(v251));
LABEL_26:
    uint64_t v91 = v77;
    unint64_t v92 = v242;
    switch(v91)
    {
      case 1:
        sub_100ACEADC((uint64_t)v235, v82);
        int v95 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v230 + 48))(v82, 1, v72);
        unint64_t v208 = v55;
        if (v95 == 1)
        {
          sub_10001DAB4(v82, (uint64_t *)&unk_101653D50);
        }
        else
        {
          uint64_t v167 = v82;
          uint64_t v168 = v220;
          sub_1000A0A30(v167, v220, type metadata accessor for SharedBeaconRecord);
          *((void *)&v249 + 1) = v72;
          uint64_t v250 = sub_10009FE28(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
          uint64_t v169 = sub_10001D958((uint64_t *)&v248);
          uint64_t v170 = v168;
          sub_1000A1454(v168, (uint64_t)v169, type metadata accessor for SharedBeaconRecord);
          uint64_t v171 = *((void *)&v249 + 1);
          uint64_t v172 = v250;
          sub_10001CD44(&v248, *((uint64_t *)&v249 + 1));
          uint64_t v173 = v229;
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v172 + 8) + 8) + 32))(v171);
          uint64_t v174 = type metadata accessor for Transaction();
          __chkstk_darwin(v174);
          *(&v208 - 4) = (unint64_t)v173;
          *(&v208 - 3) = v92;
          *(&v208 - 2) = (unint64_t)&v248;
          *((_WORD *)&v208 - 4) = 257;
          static Transaction.named<A>(_:with:)();
          (*(void (**)(char *, uint64_t))(v33 + 8))(v173, v69);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v248);
          sub_1000A0BF4(v170, type metadata accessor for SharedBeaconRecord);
        }
        if (qword_1016375F0 != -1) {
          swift_once();
        }
        uint64_t v175 = v240;
        uint64_t v176 = sub_100010324(v240, (uint64_t)qword_10170F760);
        uint64_t v177 = v241;
        uint64_t v178 = v239;
        uint64_t v179 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v176, v175);
        __chkstk_darwin(v179);
        uint64_t v180 = (uint64_t)v235;
        *(&v208 - 2) = v178;
        *(&v208 - 1) = v180;
        OS_dispatch_queue.sync<A>(execute:)();
        int v144 = v248;
        v177[1](v178, v175);
        uint64_t v181 = sub_100B6BE48();
        int64_t v182 = v181[2];
        if (!v182)
        {
          swift_bridgeObjectRelease();
          uint64_t v60 = v244;
          goto LABEL_77;
        }
        *(void *)&long long v248 = _swiftEmptyArrayStorage;
        sub_1000B7034(0, v182, 0);
        uint64_t v183 = v69;
        uint64_t v184 = (uint64_t)v181
             + ((*(unsigned __int8 *)(v230 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v230 + 80));
        uint64_t v185 = *(void *)(v230 + 72);
        uint64_t v186 = (void (**)(char *, uint64_t, uint64_t))(v238 + 16);
        uint64_t v187 = v243;
        v188 = v237;
        do
        {
          uint64_t v189 = v236;
          sub_1000A1454(v184, v236, type metadata accessor for SharedBeaconRecord);
          (*v186)(v188, v189 + *(int *)(v187 + 20), v183);
          sub_1000A0BF4(v189, type metadata accessor for SharedBeaconRecord);
          uint64_t v190 = v248;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B7034(0, *(void *)(v190 + 16) + 1, 1);
            uint64_t v190 = v248;
          }
          unint64_t v192 = *(void *)(v190 + 16);
          unint64_t v191 = *(void *)(v190 + 24);
          if (v192 >= v191 >> 1)
          {
            sub_1000B7034(v191 > 1, v192 + 1, 1);
            uint64_t v190 = v248;
          }
          *(void *)(v190 + 16) = v192 + 1;
          unint64_t v193 = v190
               + ((*(unsigned __int8 *)(v238 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v238 + 80))
               + *(void *)(v238 + 72) * v192;
          v188 = v237;
          uint64_t v183 = v231;
          v215((char *)v193, (uint64_t)v237, v231);
          *(void *)&long long v248 = v190;
          v184 += v185;
          --v182;
        }
        while (v182);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v60 = v244;
        uint64_t v69 = v183;
        uint64_t v33 = v238;
        goto LABEL_78;
      case 2:
        if (qword_101636B50 != -1) {
          swift_once();
        }
        uint64_t v96 = v240;
        uint64_t v97 = sub_100010324(v240, (uint64_t)qword_10170DF88);
        BOOL v98 = v241;
        uint64_t v99 = v239;
        uint64_t v100 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v97, v96);
        __chkstk_darwin(v100);
        uint64_t v101 = (uint64_t)v235;
        *(&v208 - 2) = v99;
        *(&v208 - 1) = v101;
        goto LABEL_76;
      case 3:
        if (qword_101636878 != -1) {
          swift_once();
        }
        uint64_t v96 = v240;
        uint64_t v102 = sub_100010324(v240, (uint64_t)qword_10170D758);
        BOOL v98 = v241;
        uint64_t v99 = v239;
        uint64_t v103 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v102, v96);
        __chkstk_darwin(v103);
        uint64_t v104 = (uint64_t)v235;
        *(&v208 - 2) = v99;
        *(&v208 - 1) = v104;
        goto LABEL_76;
      case 4:
        if (qword_1016370E8 != -1) {
          swift_once();
        }
        uint64_t v96 = v240;
        uint64_t v105 = sub_100010324(v240, (uint64_t)qword_10170ED10);
        BOOL v98 = v241;
        uint64_t v99 = v239;
        uint64_t v106 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v105, v96);
        __chkstk_darwin(v106);
        uint64_t v107 = (uint64_t)v235;
        *(&v208 - 2) = v99;
        *(&v208 - 1) = v107;
        goto LABEL_76;
      case 5:
        if (qword_101636B38 != -1) {
          swift_once();
        }
        uint64_t v96 = v240;
        uint64_t v108 = sub_100010324(v240, (uint64_t)qword_10170DF58);
        BOOL v98 = v241;
        uint64_t v99 = v239;
        uint64_t v109 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v108, v96);
        __chkstk_darwin(v109);
        uint64_t v110 = (uint64_t)v235;
        *(&v208 - 2) = v99;
        *(&v208 - 1) = v110;
        goto LABEL_76;
      case 6:
        if (qword_101637030 != -1) {
          swift_once();
        }
        uint64_t v96 = v240;
        uint64_t v111 = sub_100010324(v240, (uint64_t)qword_10170EB70);
        BOOL v98 = v241;
        uint64_t v99 = v239;
        uint64_t v112 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v111, v96);
        __chkstk_darwin(v112);
        uint64_t v113 = (uint64_t)v235;
        *(&v208 - 2) = v99;
        *(&v208 - 1) = v113;
        goto LABEL_76;
      case 7:
        if (qword_101637620 != -1) {
          swift_once();
        }
        uint64_t v96 = v240;
        uint64_t v114 = sub_100010324(v240, (uint64_t)qword_10170F7B0);
        BOOL v98 = v241;
        uint64_t v99 = v239;
        uint64_t v115 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v114, v96);
        __chkstk_darwin(v115);
        uint64_t v116 = (uint64_t)v235;
        *(&v208 - 2) = v99;
        *(&v208 - 1) = v116;
        goto LABEL_76;
      case 8:
        if (qword_1016371B8 != -1) {
          swift_once();
        }
        uint64_t v96 = v240;
        uint64_t v117 = sub_100010324(v240, (uint64_t)qword_10170EEB8);
        BOOL v98 = v241;
        uint64_t v99 = v239;
        uint64_t v118 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v117, v96);
        __chkstk_darwin(v118);
        uint64_t v119 = (uint64_t)v235;
        *(&v208 - 2) = v99;
        *(&v208 - 1) = v119;
        goto LABEL_76;
      case 9:
        if (qword_101637130 != -1) {
          swift_once();
        }
        uint64_t v96 = v240;
        uint64_t v120 = sub_100010324(v240, (uint64_t)qword_10170ED90);
        BOOL v98 = v241;
        uint64_t v99 = v239;
        uint64_t v121 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v120, v96);
        __chkstk_darwin(v121);
        uint64_t v122 = (uint64_t)v235;
        *(&v208 - 2) = v99;
        *(&v208 - 1) = v122;
        goto LABEL_76;
      case 10:
        if (qword_101636870 != -1) {
          swift_once();
        }
        uint64_t v96 = v240;
        uint64_t v123 = sub_100010324(v240, (uint64_t)qword_10170D740);
        BOOL v98 = v241;
        uint64_t v99 = v239;
        uint64_t v124 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v123, v96);
        __chkstk_darwin(v124);
        uint64_t v125 = (uint64_t)v235;
        *(&v208 - 2) = v99;
        *(&v208 - 1) = v125;
        goto LABEL_76;
      case 11:
        if (qword_1016374B0 != -1) {
          swift_once();
        }
        uint64_t v96 = v240;
        uint64_t v126 = sub_100010324(v240, (uint64_t)qword_10170F308);
        BOOL v98 = v241;
        uint64_t v99 = v239;
        uint64_t v127 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v126, v96);
        __chkstk_darwin(v127);
        uint64_t v128 = (uint64_t)v235;
        *(&v208 - 2) = v99;
        *(&v208 - 1) = v128;
        goto LABEL_76;
      case 12:
        if (qword_101636958 != -1) {
          swift_once();
        }
        uint64_t v96 = v240;
        uint64_t v129 = sub_100010324(v240, (uint64_t)qword_10170DAB8);
        BOOL v98 = v241;
        uint64_t v99 = v239;
        uint64_t v130 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v129, v96);
        __chkstk_darwin(v130);
        uint64_t v131 = (uint64_t)v235;
        *(&v208 - 2) = v99;
        *(&v208 - 1) = v131;
        goto LABEL_76;
      case 13:
        if (qword_101637160 != -1) {
          swift_once();
        }
        uint64_t v96 = v240;
        uint64_t v132 = sub_100010324(v240, (uint64_t)qword_10170EE20);
        BOOL v98 = v241;
        uint64_t v99 = v239;
        uint64_t v133 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v132, v96);
        __chkstk_darwin(v133);
        uint64_t v134 = (uint64_t)v235;
        *(&v208 - 2) = v99;
        *(&v208 - 1) = v134;
        goto LABEL_76;
      case 14:
        if (qword_1016370F0 != -1) {
          swift_once();
        }
        uint64_t v96 = v240;
        uint64_t v135 = sub_100010324(v240, (uint64_t)qword_10170ED28);
        BOOL v98 = v241;
        uint64_t v99 = v239;
        uint64_t v136 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v135, v96);
        __chkstk_darwin(v136);
        uint64_t v137 = (uint64_t)v235;
        *(&v208 - 2) = v99;
        *(&v208 - 1) = v137;
        goto LABEL_76;
      case 15:
        if (qword_101636A48 != -1) {
          swift_once();
        }
        uint64_t v96 = v240;
        uint64_t v138 = sub_100010324(v240, (uint64_t)qword_10170DD78);
        BOOL v98 = v241;
        uint64_t v99 = v239;
        uint64_t v139 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v138, v96);
        __chkstk_darwin(v139);
        uint64_t v140 = (uint64_t)v235;
        *(&v208 - 2) = v99;
        *(&v208 - 1) = v140;
        goto LABEL_76;
      case 16:
        if (qword_1016370C8 != -1) {
          swift_once();
        }
        uint64_t v96 = v240;
        uint64_t v141 = sub_100010324(v240, (uint64_t)qword_10170ECE0);
        BOOL v98 = v241;
        uint64_t v99 = v239;
        uint64_t v142 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v141, v96);
        __chkstk_darwin(v142);
        uint64_t v143 = (uint64_t)v235;
        *(&v208 - 2) = v99;
        *(&v208 - 1) = v143;
LABEL_76:
        OS_dispatch_queue.sync<A>(execute:)();
        int v144 = v248;
        v98[1](v99, v96);
LABEL_77:
        uint64_t v33 = v238;
        goto LABEL_78;
      default:
        uint64_t v93 = v223;
        sub_100ACD178(v223);
        uint64_t v94 = v222;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v221 + 48))(v93, 1, v222) == 1)
        {
          sub_10001DAB4(v93, &qword_10163B9F0);
        }
        else
        {
          uint64_t v147 = v219;
          sub_1000A0A30(v93, v219, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          *((void *)&v249 + 1) = v94;
          uint64_t v250 = sub_10009FE28(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
          uint64_t v148 = sub_10001D958((uint64_t *)&v248);
          sub_1000A1454(v147, (uint64_t)v148, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v149 = *((void *)&v249 + 1);
          uint64_t v150 = v250;
          sub_10001CD44(&v248, *((uint64_t *)&v249 + 1));
          Swift::String v151 = v229;
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v150 + 8) + 8) + 32))(v149);
          uint64_t v152 = type metadata accessor for Transaction();
          __chkstk_darwin(v152);
          *(&v208 - 4) = (unint64_t)v151;
          *(&v208 - 3) = v92;
          *(&v208 - 2) = (unint64_t)&v248;
          *((_WORD *)&v208 - 4) = 256;
          static Transaction.named<A>(_:with:)();
          (*(void (**)(char *, uint64_t))(v33 + 8))(v151, v69);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v248);
          sub_1000A0BF4(v147, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        }
        if (qword_1016370B0 != -1) {
          swift_once();
        }
        uint64_t v153 = v240;
        uint64_t v154 = sub_100010324(v240, (uint64_t)qword_10170ECC0);
        uint64_t v155 = v241;
        uint64_t v156 = v239;
        uint64_t v157 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v241[2])(v239, v154, v153);
        __chkstk_darwin(v157);
        uint64_t v158 = (uint64_t)v235;
        *(&v208 - 2) = v156;
        *(&v208 - 1) = v158;
        OS_dispatch_queue.sync<A>(execute:)();
        int v144 = v248;
        v155[1](v156, v153);
        uint64_t v33 = v238;
        uint64_t v159 = (uint64_t)v225;
        (*(void (**)(char *, uint64_t, uint64_t))(v238 + 16))(v225, v158, v69);
        uint64_t v160 = v69;
        id v161 = *(void (***)(uint64_t, uint64_t))(v33 + 56);
        uint64_t v243 = v33 + 56;
        uint64_t v241 = v161;
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v161)(v159, 0, 1, v69);
        if (qword_101636CD8 != -1) {
          swift_once();
        }
        OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v162 = v248;
        swift_getKeyPath();
        uint64_t v163 = v224;
        sub_1010AD23C(v162, v224);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v164 = v227;
        uint64_t v165 = v227 + *(int *)(v226 + 48);
        sub_10001D074(v159, v227, &qword_101638CF0);
        sub_10001D074(v163, v165, &qword_101638CF0);
        uint64_t v166 = v213;
        if (v213(v164, 1, v69) == 1)
        {
          sub_10001DAB4(v163, &qword_101638CF0);
          sub_10001DAB4(v159, &qword_101638CF0);
          if (v166(v165, 1, v69) == 1)
          {
            sub_10001DAB4(v164, &qword_101638CF0);
            goto LABEL_110;
          }
        }
        else
        {
          sub_10001D074(v164, (uint64_t)v228, &qword_101638CF0);
          if (v166(v165, 1, v69) != 1)
          {
            uint64_t v194 = v159;
            v195 = v229;
            v215(v229, v165, v160);
            sub_10009FE28((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
            LODWORD(v240) = dispatch thunk of static Equatable.== infix(_:_:)();
            v196 = *(void (**)(char *, uint64_t))(v33 + 8);
            v196(v195, v160);
            sub_10001DAB4(v163, &qword_101638CF0);
            sub_10001DAB4(v194, &qword_101638CF0);
            v196(v228, v160);
            sub_10001DAB4(v164, &qword_101638CF0);
            if ((v240 & 1) == 0)
            {
              uint64_t v69 = v231;
              uint64_t v33 = v238;
              uint64_t v60 = v244;
              goto LABEL_78;
            }
LABEL_110:
            os_log_type_t v197 = v211;
            uint64_t v198 = Logger.logObject.getter();
            os_log_type_t v199 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v198, v199))
            {
              uint64_t v200 = (uint8_t *)swift_slowAlloc();
              uint64_t v201 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v200 = 138412290;
              *(void *)&long long v248 = v197;
              uint64_t v202 = v197;
              unint64_t v208 = v55;
              v203 = v202;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v201 = v197;

              _os_log_impl((void *)&_mh_execute_header, v198, v199, "Deleted current self-beacon OwnedBeaconRecord %@", v200, 0xCu);
              sub_10000588C((uint64_t *)&unk_101638EA0);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              uint64_t v198 = v197;
            }
            uint64_t v33 = v238;
            v204 = v241;

            uint64_t v205 = (uint64_t)v218;
            uint64_t v206 = v231;
            ((void (*)(char *, uint64_t, uint64_t, uint64_t))v204)(v218, 1, 1, v231);
            uint64_t v69 = v206;
            sub_1000A5940();
            uint64_t v207 = v217;
            sub_10001D074(v205, v217, &qword_101638CF0);
            sub_100F175B0(v207);
            swift_release();
            sub_10001DAB4(v205, &qword_101638CF0);
            uint64_t v60 = v244;
LABEL_78:
            sub_100A9EE98();
            sub_10001D074((uint64_t)v251, (uint64_t)&v245, &qword_10163A2B0);
            if (v246)
            {
              sub_10001CEB0(&v245, (uint64_t)&v248);
              PassthroughSubject.send(_:)();
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v248);
              if (v144)
              {
LABEL_80:
                sub_10001DAB4((uint64_t)v251, &qword_10163A2B0);
                goto LABEL_81;
              }
            }
            else
            {
              sub_10001DAB4((uint64_t)&v245, &qword_10163A2B0);
              if (v144) {
                goto LABEL_80;
              }
            }
            sub_10009FD9C();
            uint64_t v60 = swift_allocError();
            *uint64_t v145 = 11;
            sub_10001DAB4((uint64_t)v251, &qword_10163A2B0);
            (*(void (**)(char *, uint64_t))(v33 + 8))(v235, v69);
            return v60;
          }
          sub_10001DAB4(v163, &qword_101638CF0);
          sub_10001DAB4(v159, &qword_101638CF0);
          (*(void (**)(char *, uint64_t))(v33 + 8))(v228, v69);
        }
        sub_10001DAB4(v164, (uint64_t *)&unk_10166EAF0);
        uint64_t v69 = v231;
        uint64_t v60 = v244;
        goto LABEL_78;
    }
  }
  sub_10001DAB4((uint64_t)v31, &qword_101638CF0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  sub_100010324(v44, (uint64_t)qword_10170E9E8);
  uint64_t v45 = a1;
  Swift::String v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    uint64_t v49 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v48 = 138543362;
    *(void *)&v251[0] = v45;
    uint64_t v50 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v49 = v45;

    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Invalid record identifier beaconRecord: %{public}@", v48, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    Swift::String v46 = v45;
  }

  sub_10009FD9C();
  uint64_t v60 = swift_allocError();
  *uint64_t v71 = 12;
  return v60;
}

void sub_10009B97C(void *a1)
{
  id v2 = [a1 recordID];
  id v3 = [v2 zoneID];

  if (qword_101636F68 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_10170EA30;
  sub_10001D4B0(0, (unint64_t *)&unk_10165F040);
  id v5 = v4;
  char v6 = static NSObject.== infix(_:_:)();

  if (v6)
  {
    uint64_t v7 = sub_10009BC1C(a1);
    if (v9)
    {
      sub_10009FD8C(v7, v8, 1);
    }
    else
    {
      sub_100DC979C((Swift::Int *)&v16, v7, v8);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170E9E8);
    id v11 = a1;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138543362;
      id v16 = [v11 recordID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = v16;

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Ignoring changed record from unknown zone: %{public}@", v14, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_10009BC1C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SharingCircleSecret();
  __chkstk_darwin(v4 - 8);
  uint64_t v171 = (void *)((char *)v133 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163B7C0);
  uint64_t v154 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v156 = (uint64_t)v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (void *)((char *)v133 - v9);
  uint64_t v146 = type metadata accessor for MemberSharingCircle();
  uint64_t v151 = *(void *)(v146 - 8);
  uint64_t v11 = __chkstk_darwin(v146);
  uint64_t v153 = (uint64_t)v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (void *)((char *)v133 - v13);
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_101638D10);
  uint64_t v148 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v150 = (uint64_t)v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v133 - v18;
  uint64_t v143 = type metadata accessor for OwnerSharingCircle();
  uint64_t v144 = *(void *)(v143 - 8);
  uint64_t v20 = __chkstk_darwin(v143);
  uint64_t v147 = (uint64_t)v133 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = v21;
  __chkstk_darwin(v20);
  uint64_t v175 = (uint64_t (*)(uint64_t))((char *)v133 - v22);
  uint64_t v23 = type metadata accessor for MemberPeerTrust();
  __chkstk_darwin(v23 - 8);
  uint64_t v170 = (void *)((char *)v133 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = type metadata accessor for OwnerPeerTrust();
  __chkstk_darwin(v25 - 8);
  uint64_t v169 = (void *)((char *)v133 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = type metadata accessor for OwnedDeviceKeyRecord();
  __chkstk_darwin(v27 - 8);
  uint64_t v168 = (void *)((char *)v133 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v29 = type metadata accessor for KeyAlignmentRecord();
  __chkstk_darwin(v29 - 8);
  uint64_t v167 = (void *)((char *)v133 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = type metadata accessor for LostModeRecord();
  __chkstk_darwin(v31 - 8);
  uint64_t v166 = (void *)((char *)v133 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v33 = type metadata accessor for SafeLocation();
  __chkstk_darwin(v33 - 8);
  uint64_t v165 = (void *)((char *)v133 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = type metadata accessor for LeashRecord();
  __chkstk_darwin(v35 - 8);
  uint64_t v164 = (void *)((char *)v133 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord();
  __chkstk_darwin(found - 8);
  uint64_t v163 = (void *)((char *)v133 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v39 = type metadata accessor for BeaconNamingRecord();
  __chkstk_darwin(v39 - 8);
  uint64_t v162 = (void *)((char *)v133 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = type metadata accessor for ShareRecord();
  __chkstk_darwin(v41 - 8);
  id v161 = (void *)((char *)v133 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v43 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v43 - 8);
  uint64_t v160 = (void *)((char *)v133 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v45 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v45 - 8);
  uint64_t v172 = (char *)v133 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000588C((uint64_t *)&unk_101653D50);
  uint64_t v140 = *(void *)(v47 - 8);
  uint64_t v48 = __chkstk_darwin(v47 - 8);
  uint64_t v142 = (uint64_t)v133 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = v49;
  __chkstk_darwin(v48);
  uint64_t v51 = (char *)v133 - v50;
  uint64_t v136 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v137 = *(void *)(v136 - 8);
  uint64_t v52 = __chkstk_darwin(v136);
  uint64_t v139 = (uint64_t)v133 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = v53;
  __chkstk_darwin(v52);
  uint64_t v174 = (void *)((char *)v133 - v54);
  uint64_t v55 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v55 - 8);
  uint64_t v159 = (void *)((char *)v133 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v57 = type metadata accessor for Logger();
  uint64_t v58 = sub_100010324(v57, (uint64_t)qword_10170E9E8);
  id v59 = a1;
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.default.getter();
  BOOL v62 = os_log_type_enabled(v60, v61);
  uint64_t v157 = v51;
  if (v62)
  {
    uint64_t v63 = swift_slowAlloc();
    uint64_t v173 = v58;
    uint64_t v64 = (uint8_t *)v63;
    uint64_t v65 = swift_slowAlloc();
    uint64_t v135 = v2;
    v133[1] = v65;
    uint64_t v177 = v65;
    *(_DWORD *)uint64_t v64 = 136315138;
    v133[0] = v64 + 4;
    id v66 = v59;
    uint64_t v158 = v19;
    id v67 = v66;
    id v68 = [v66 description];
    uint64_t v69 = v10;
    id v70 = v59;
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v134 = v14;
    unint64_t v73 = v72;

    uint64_t v74 = v71;
    id v59 = v70;
    uint64_t v10 = v69;
    uint64_t v176 = sub_1008FA0F0(v74, v73, &v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v19 = v158;
    uint64_t v14 = v134;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "processBeaconZoneRecordUpdate: %s", v64, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v135;
    swift_slowDealloc();
    uint64_t v58 = v173;
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v75 = CKRecord.recordType.getter();
  char v77 = sub_100905B58(v75, v76);
  swift_bridgeObjectRelease();
  switch(v77)
  {
    case 1:
      id v80 = v59;
      char v81 = v174;
      sub_10120C214(v80, v174);
      uint64_t v82 = (uint64_t)v157;
      sub_100ACEADC((uint64_t)v81 + *(int *)(v136 + 20), (uint64_t)v157);
      uint64_t v83 = type metadata accessor for TaskPriority();
      uint64_t v84 = (uint64_t)v172;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v172, 1, 1, v83);
      uint64_t v85 = v142;
      sub_10001D074(v82, v142, (uint64_t *)&unk_101653D50);
      uint64_t v175 = type metadata accessor for SharedBeaconRecord;
      uint64_t v86 = v139;
      sub_1000A1454((uint64_t)v81, v139, type metadata accessor for SharedBeaconRecord);
      unint64_t v87 = (*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80);
      unint64_t v88 = (v141 + *(unsigned __int8 *)(v137 + 80) + v87) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80);
      uint64_t v89 = swift_allocObject();
      *(void *)(v89 + 16) = 0;
      *(void *)(v89 + 24) = 0;
      sub_10001D608(v85, v89 + v87, (uint64_t *)&unk_101653D50);
      sub_1000A0A30(v86, v89 + v88, type metadata accessor for SharedBeaconRecord);
      uint64_t v79 = v174;
      sub_1008F5E44(v84, (uint64_t)&unk_10163A2E0, v89);
      swift_release();
      sub_10009DB04(*(void *)(v2 + 160), type metadata accessor for SharedBeaconRecord, (uint64_t)sub_1000A12B0, v175, type metadata accessor for SharedBeaconRecord);
      sub_10001DAB4((uint64_t)v157, (uint64_t *)&unk_101653D50);
      uint64_t v131 = type metadata accessor for SharedBeaconRecord;
      goto LABEL_29;
    case 2:
      id v90 = v59;
      uint64_t v79 = v160;
      sub_1004CFDAC(v90, (uint64_t)v160);
      sub_10009DB04(*(void *)(v2 + 160), type metadata accessor for OwnedBeaconGroup, (uint64_t)sub_1000A12CC, type metadata accessor for OwnedBeaconGroup, type metadata accessor for OwnedBeaconGroup);
      uint64_t v131 = type metadata accessor for OwnedBeaconGroup;
      goto LABEL_29;
    case 3:
      id v91 = v59;
      uint64_t v79 = v161;
      sub_1000C3DBC(v91, v161);
      sub_10009DB04(*(void *)(v2 + 160), (uint64_t (*)(void))type metadata accessor for ShareRecord, (uint64_t)sub_1000A12E8, (uint64_t (*)(void))type metadata accessor for ShareRecord, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      uint64_t v131 = (uint64_t (*)(void))type metadata accessor for ShareRecord;
      goto LABEL_29;
    case 4:
      id v92 = v59;
      uint64_t v79 = v162;
      sub_100DBEB18(v92, v162);
      sub_10009DB04(*(void *)(v2 + 160), (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t)sub_1000A1304, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      uint64_t v131 = (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord;
      goto LABEL_29;
    case 5:
      id v93 = v59;
      uint64_t v79 = v163;
      sub_10048EE30(v93, v163);
      sub_10009DB04(*(void *)(v2 + 160), (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord, (uint64_t)sub_1000A1320, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
      uint64_t v131 = (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord;
      goto LABEL_29;
    case 6:
      uint64_t v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v94, v95))
      {
        uint64_t v96 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v96 = 0;
        _os_log_impl((void *)&_mh_execute_header, v94, v95, "Ignoring BeaconEstimatedLocation record change.", v96, 2u);
        swift_slowDealloc();
      }

      goto LABEL_30;
    case 7:
      id v97 = v59;
      uint64_t v79 = v164;
      sub_10126128C(v97, v164);
      sub_10009DB04(*(void *)(v2 + 160), (uint64_t (*)(void))type metadata accessor for LeashRecord, (uint64_t)sub_1000A133C, (uint64_t (*)(void))type metadata accessor for LeashRecord, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      uint64_t v131 = (uint64_t (*)(void))type metadata accessor for LeashRecord;
      goto LABEL_29;
    case 8:
      id v98 = v59;
      uint64_t v79 = v165;
      sub_100F1047C(v98, v165);
      sub_10009DB04(*(void *)(v2 + 160), (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t)sub_1000A1358, (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      uint64_t v131 = (uint64_t (*)(void))type metadata accessor for SafeLocation;
      goto LABEL_29;
    case 9:
      id v99 = v59;
      uint64_t v79 = v166;
      sub_100E92AFC(v99, v166);
      sub_10009DB04(*(void *)(v2 + 160), (uint64_t (*)(void))type metadata accessor for LostModeRecord, (uint64_t)sub_1000A1374, (uint64_t (*)(void))type metadata accessor for LostModeRecord, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      uint64_t v131 = (uint64_t (*)(void))type metadata accessor for LostModeRecord;
      goto LABEL_29;
    case 10:
      id v100 = v59;
      uint64_t v79 = v167;
      sub_1000BFAD8(v100, v167);
      sub_10009DB04(*(void *)(v2 + 160), (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord, (uint64_t)sub_1000A1390, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      uint64_t v131 = (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord;
      goto LABEL_29;
    case 11:
      id v101 = v59;
      uint64_t v79 = v168;
      sub_1011370FC(v101, v168);
      sub_10009DB04(*(void *)(v2 + 160), (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord, (uint64_t)sub_1000A13AC, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v131 = (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord;
      goto LABEL_29;
    case 12:
      id v102 = v59;
      uint64_t v79 = v169;
      sub_1002A67C0(v102, v169);
      sub_10009DB04(*(void *)(v2 + 160), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust, (uint64_t)sub_1000A13C8, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      uint64_t v131 = (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust;
      goto LABEL_29;
    case 13:
      id v103 = v59;
      uint64_t v79 = v170;
      sub_100EB4244(v103, v170);
      sub_10009DB04(*(void *)(v2 + 160), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust, (uint64_t)sub_1000A13E4, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      uint64_t v131 = (uint64_t (*)(void))type metadata accessor for MemberPeerTrust;
      goto LABEL_29;
    case 14:
      id v104 = v59;
      uint64_t v105 = v175;
      sub_100DF469C(v104, (uint64_t *)v175);
      uint64_t v173 = v58;
      uint64_t v174 = (uint64_t *)v59;
      uint64_t v106 = *(void *)(v2 + 160);
      sub_100B6CF00((uint64_t)v105 + *(int *)(v143 + 20), (uint64_t)v19);
      uint64_t v107 = type metadata accessor for TaskPriority();
      uint64_t v108 = (uint64_t)v172;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56))(v172, 1, 1, v107);
      uint64_t v109 = v150;
      sub_10001D074((uint64_t)v19, v150, (uint64_t *)&unk_101638D10);
      uint64_t v110 = v147;
      sub_1000A1454((uint64_t)v175, v147, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v111 = *(unsigned __int8 *)(v148 + 80);
      uint64_t v158 = v19;
      uint64_t v112 = (v111 + 32) & ~v111;
      unint64_t v113 = (v149 + *(unsigned __int8 *)(v144 + 80) + v112) & ~(unint64_t)*(unsigned __int8 *)(v144 + 80);
      uint64_t v114 = swift_allocObject();
      *(void *)(v114 + 16) = 0;
      *(void *)(v114 + 24) = 0;
      uint64_t v115 = v109;
      uint64_t v79 = (uint64_t *)v175;
      sub_10001D608(v115, v114 + v112, (uint64_t *)&unk_101638D10);
      sub_1000A0A30(v110, v114 + v113, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_1008F5E44(v108, (uint64_t)&unk_10163A2D0, v114);
      swift_release();
      sub_10009DB04(v106, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, (uint64_t)sub_1000A1400, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_10001DAB4((uint64_t)v158, (uint64_t *)&unk_101638D10);
      uint64_t v131 = (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle;
      goto LABEL_29;
    case 15:
      sub_1002C302C(v59, v14);
      uint64_t v173 = v58;
      uint64_t v174 = (uint64_t *)v59;
      uint64_t v116 = (uint64_t)v14 + *(int *)(v146 + 20);
      uint64_t v175 = *(uint64_t (**)(uint64_t))(v2 + 160);
      sub_100B6D110(v116, (uint64_t)v10);
      uint64_t v117 = type metadata accessor for TaskPriority();
      uint64_t v118 = (uint64_t)v172;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v117 - 8) + 56))(v172, 1, 1, v117);
      uint64_t v79 = v14;
      uint64_t v119 = v156;
      sub_10001D074((uint64_t)v10, v156, (uint64_t *)&unk_10163B7C0);
      uint64_t v120 = v153;
      sub_1000A1454((uint64_t)v79, v153, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      unint64_t v121 = (*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80);
      unint64_t v122 = (v155 + *(unsigned __int8 *)(v151 + 80) + v121) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80);
      uint64_t v123 = swift_allocObject();
      uint64_t v171 = v10;
      uint64_t v124 = v123;
      *(void *)(v123 + 16) = 0;
      *(void *)(v123 + 24) = 0;
      sub_10001D608(v119, v123 + v121, (uint64_t *)&unk_10163B7C0);
      sub_1000A0A30(v120, v124 + v122, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      sub_1008F5E44(v118, (uint64_t)&unk_10163A2C0, v124);
      swift_release();
      sub_10009DB04((uint64_t)v175, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (uint64_t)sub_1000A141C, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      sub_10001DAB4((uint64_t)v171, (uint64_t *)&unk_10163B7C0);
      uint64_t v131 = (uint64_t (*)(void))type metadata accessor for MemberSharingCircle;
      goto LABEL_29;
    case 16:
      id v125 = v59;
      uint64_t v79 = v171;
      sub_100D26BC4(v125, v171);
      sub_10009DB04(*(void *)(v2 + 160), (uint64_t (*)(void))type metadata accessor for SharingCircleSecret, (uint64_t)sub_1000A1438, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      uint64_t v131 = (uint64_t (*)(void))type metadata accessor for SharingCircleSecret;
      goto LABEL_29;
    case 17:
      static os_log_type_t.fault.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v126 = swift_allocObject();
      *(_OWORD *)(v126 + 16) = xmmword_101347BA0;
      uint64_t v127 = CKRecord.recordType.getter();
      uint64_t v129 = v128;
      *(void *)(v126 + 56) = &type metadata for String;
      *(void *)(v126 + 64) = sub_10000B4CC();
      *(void *)(v126 + 32) = v127;
      *(void *)(v126 + 40) = v129;
      *(void *)(v126 + 96) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      *(void *)(v126 + 104) = sub_1000A038C();
      *(void *)(v126 + 72) = v59;
      id v130 = v59;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      return CKRecord.recordType.getter();
    default:
      id v78 = v59;
      uint64_t v79 = v159;
      sub_100D19D5C(v78, v159);
      sub_10009DB04(*(void *)(v2 + 160), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t)sub_1000A1294, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v131 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
LABEL_29:
      sub_1000A0BF4((uint64_t)v79, v131);
LABEL_30:
      sub_100A9EE98();
      return CKRecord.recordType.getter();
  }
}

uint64_t sub_10009D8A0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170E9E8);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Cloud data purged, attempting to clear local data", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = *(uint64_t **)(v3 + 160);
  uint64_t v15 = (void *)v14[2];
  void *v9 = v15;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.notOnQueue(_:), v6);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v15)
  {
    uint64_t v18 = dispatch_group_create();
    dispatch_group_enter(v18);
    swift_retain();
    uint64_t v19 = v18;
    sub_101021028(a2 & 1, a1, v14, v19);
    swift_release();

    QueueSynchronizer.conditionalSync<A>(_:)();
    return sub_100A9E7EC(6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10009DB04(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v24 = a5;
  uint64_t v9 = a2(0);
  uint64_t v10 = __chkstk_darwin(v9);
  os_log_type_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v23 - v13;
  uint64_t v25 = a1;
  uint64_t v26 = v5;
  OS_dispatch_queue.sync<A>(execute:)();
  if (!v6)
  {
    uint64_t v23[2] = v9;
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170E9E8);
    id v16 = a4;
    sub_1000A1454(v5, (uint64_t)v14, a4);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint64_t)v12;
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      v23[1] = v20 + 4;
      sub_1000A1454((uint64_t)v14, v19, v16);
      uint64_t v21 = String.init<A>(describing:)();
      uint64_t v27 = sub_1008FA0F0(v21, v22, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000A0BF4((uint64_t)v14, v24);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "New record: %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000A0BF4((uint64_t)v14, v24);
    }
  }
}

void sub_10009DD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  sub_100B6F358();
  if (!v3)
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170E9E8);
    os_log_type_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, v2, a2);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v20 = v12;
      id v16 = (uint8_t *)v15;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v25 = v23;
      unint64_t v22 = v16;
      *(_DWORD *)id v16 = 136315138;
      uint64_t v21 = v16 + 4;
      v20(v8, v10, a2);
      uint64_t v17 = String.init<A>(describing:)();
      uint64_t v24 = sub_1008FA0F0(v17, v18, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, a2);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "New record: %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, a2);
    }
  }
}

uint64_t sub_10009E044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[21] = a4;
  v5[22] = a5;
  sub_10000588C((uint64_t *)&unk_101655520);
  v5[23] = swift_task_alloc();
  v5[24] = sub_10000588C(&qword_1016578F0);
  v5[25] = swift_task_alloc();
  return _swift_task_switch(sub_10009E10C, 0, 0);
}

uint64_t sub_10009E10C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016391F8 + dword_1016391F8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10009E248;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10009E248(uint64_t a1)
{
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10009E348, 0, 0);
}

uint64_t sub_10009E348()
{
  uint64_t v1 = *(void *)(v0 + 216);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 216);
    return _swift_task_switch(sub_10009E4BC, v2, 0);
  }
  else
  {
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170EA60);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No ItemSharingNotificationsService available!", v6, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_10009E4BC()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[22];
  uint64_t v4 = v2 + *(int *)(v0[24] + 48);
  sub_10001D074(v0[21], v2, (uint64_t *)&unk_10163B7C0);
  sub_1000A1454(v3, v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  swift_beginAccess();
  unint64_t v5 = *(void *)(*(void *)(v1 + 208) + 16);
  uint64_t v6 = (uint64_t (*)())swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 208) + 16) < v5)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = v0[23];
    sub_10001D608(v0[25], v9, &qword_1016578F0);
    sub_100A256D0(v5, v5, v9);
    swift_endAccess();
    uint64_t v6 = sub_1000A1544;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10009E5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[21] = a4;
  v5[22] = a5;
  sub_10000588C((uint64_t *)&unk_101655510);
  v5[23] = swift_task_alloc();
  v5[24] = sub_10000588C(&qword_1016578E0);
  v5[25] = swift_task_alloc();
  return _swift_task_switch(sub_10009E6B4, 0, 0);
}

uint64_t sub_10009E6B4()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016391F8 + dword_1016391F8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10009E7F0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10009E7F0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10009E8F0, 0, 0);
}

uint64_t sub_10009E8F0()
{
  uint64_t v1 = *(void *)(v0 + 216);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 216);
    return _swift_task_switch(sub_10009EA64, v2, 0);
  }
  else
  {
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170EA60);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No ItemSharingNotificationsService available!", v6, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_10009EA64()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[22];
  uint64_t v4 = v2 + *(int *)(v0[24] + 48);
  sub_10001D074(v0[21], v2, (uint64_t *)&unk_101638D10);
  sub_1000A1454(v3, v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_beginAccess();
  unint64_t v5 = *(void *)(*(void *)(v1 + 224) + 16);
  uint64_t v6 = (uint64_t (*)())swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 224) + 16) < v5)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = v0[23];
    sub_10001D608(v0[25], v9, &qword_1016578E0);
    sub_100A256F8(v5, v5, v9);
    swift_endAccess();
    uint64_t v6 = sub_1000A1544;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10009EB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[21] = a4;
  v5[22] = a5;
  sub_10000588C((uint64_t *)&unk_101655500);
  v5[23] = swift_task_alloc();
  v5[24] = sub_10000588C(&qword_1016578D0);
  v5[25] = swift_task_alloc();
  return _swift_task_switch(sub_10009EC5C, 0, 0);
}

uint64_t sub_10009EC5C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016391F8 + dword_1016391F8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10009ED98;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10009ED98(uint64_t a1)
{
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10009EE98, 0, 0);
}

uint64_t sub_10009EE98()
{
  uint64_t v1 = *(void *)(v0 + 216);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 216);
    return _swift_task_switch(sub_10009F00C, v2, 0);
  }
  else
  {
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170EA60);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No ItemSharingNotificationsService available!", v6, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_10009F00C()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[22];
  uint64_t v4 = v2 + *(int *)(v0[24] + 48);
  sub_10001D074(v0[21], v2, (uint64_t *)&unk_101653D50);
  sub_1000A1454(v3, v4, type metadata accessor for SharedBeaconRecord);
  swift_beginAccess();
  unint64_t v5 = *(void *)(*(void *)(v1 + 216) + 16);
  uint64_t v6 = swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 216) + 16) < v5)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = v0[23];
    sub_10001D608(v0[25], v9, &qword_1016578D0);
    sub_100A2593C(v5, v5, v9);
    swift_endAccess();
    uint64_t v6 = (uint64_t)sub_10009F13C;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10009F13C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10009F1B0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  uint64_t v37 = v9;
  __chkstk_darwin(v8);
  uint64_t v35 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v34 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v33 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170E9E8);
  swift_retain_n();
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v32 = v4;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v30 = v11;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v38 = a1;
    aBlock[0] = v18;
    *(_DWORD *)uint64_t v17 = 136446210;
    type metadata accessor for CloudKitCoordinator();
    uint64_t v31 = v7;
    swift_retain();
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v38 = (void *)sub_1008FA0F0(v19, v20, aBlock);
    uint64_t v4 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v7 = v31;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "CloudKitCoordinator available again after reset: %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v11 = v30;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v21 = *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler);
  if (v21)
  {
    uint64_t v22 = *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler + 8);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v24 = v33;
    uint64_t v23 = v34;
    (*(void (**)(char *, void, uint64_t))(v34 + 104))(v33, enum case for DispatchQoS.QoSClass.default(_:), v11);
    swift_retain();
    uint64_t v25 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v11);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v21;
    *(void *)(v26 + 24) = v22;
    aBlock[4] = (uint64_t)sub_1000A14F4;
    aBlock[5] = v26;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1004B5480;
    aBlock[3] = (uint64_t)&unk_1015AAE00;
    uint64_t v27 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v28 = v35;
    static DispatchQoS.unspecified.getter();
    uint64_t v38 = _swiftEmptyArrayStorage;
    sub_10009FE28((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_10002FE84();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v27);

    sub_1000A1534(v21);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v36);
    swift_release();
  }
}

uint64_t sub_10009F710()
{
  return sub_100AF1EAC(v0);
}

uint64_t sub_10009F72C(uint64_t a1)
{
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170E9E8);
  swift_bridgeObjectRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    Swift::Int v33 = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "databaseUpdated recordsDeleted: %ld.", v5, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v6 = &_swiftEmptySetSingleton;
  uint64_t v34 = &_swiftEmptySetSingleton;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    sub_10001D4B0(0, (unint64_t *)&unk_10165F040);
    swift_bridgeObjectRetain();
    uint64_t v8 = (unint64_t *)(a1 + 48);
    uint64_t v9 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
    do
    {
      uint64_t v10 = *(v8 - 1);
      unint64_t v11 = *v8;
      id v12 = (id)*(v8 - 2);
      swift_bridgeObjectRetain();
      id v13 = [v12 v9[73]];
      if (qword_101636F68 != -1) {
        swift_once();
      }
      id v14 = (id)qword_10170EA30;
      char v15 = static NSObject.== infix(_:_:)();

      if (v15)
      {
        uint64_t v16 = sub_100099208(v12, v10, v11);
        if (v18)
        {
          sub_10009FD8C(v16, v17, 1);
        }
        else
        {
          sub_100DC979C(&v33, v16, v17);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        id v19 = v12;
        unint64_t v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = swift_slowAlloc();
          uint64_t v23 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v22 = 138543362;
          *(void *)(v22 + 4) = v19;
          *uint64_t v23 = v19;
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "Ignoring delete record from unknown zone: %{public}@", (uint8_t *)v22, 0xCu);
          sub_10000588C((uint64_t *)&unk_101638EA0);
          swift_arrayDestroy();
          uint64_t v9 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
      v8 += 3;
      swift_bridgeObjectRelease();

      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    QueueSynchronizer.conditionalSync<A>(_:)();
    sub_100A9E7EC(7);
    uint64_t v6 = v34;
  }
  swift_bridgeObjectRetain();
  char v24 = sub_100DC6054(0x61636F4C65666153, 0xEC0000006E6F6974, (uint64_t)v6);
  swift_bridgeObjectRelease();
  if (v24)
  {
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
    type metadata accessor for Transaction();
    static Transaction.asyncTask(name:block:)();
    sub_100A9EAD8();
  }
  else
  {
    swift_bridgeObjectRetain();
    char v25 = sub_100DC6054(0x636552687361654CLL, 0xEB0000000064726FLL, (uint64_t)v6);
    swift_bridgeObjectRelease();
    if (v25)
    {
      dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
      type metadata accessor for Transaction();
      static Transaction.asyncTask(name:block:)();
    }
  }
  uint64_t v26 = qword_1016370A8;
  swift_bridgeObjectRetain();
  if (v26 != -1) {
    swift_once();
  }
  uint64_t v27 = qword_10170ECB0;
  uint64_t v28 = *(void *)algn_10170ECB8;
  swift_bridgeObjectRetain();
  LOBYTE(v27) = sub_100DC6054(v27, v28, (uint64_t)v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0
    || (swift_bridgeObjectRetain(),
        char v29 = sub_100DC6054(0xD000000000000012, 0x80000001013F2D70, (uint64_t)v6),
        swift_bridgeObjectRelease(),
        (v29 & 1) != 0)
    || (swift_bridgeObjectRetain(),
        char v30 = sub_100DC6054(0xD000000000000012, 0x80000001013F2D90, (uint64_t)v6),
        swift_bridgeObjectRelease(),
        (v30 & 1) != 0))
  {
    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10009FD70(uint64_t a1)
{
  return sub_100AF282C(a1, v1);
}

uint64_t sub_10009FD8C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRelease();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

unint64_t sub_10009FD9C()
{
  unint64_t result = qword_1016554D0;
  if (!qword_1016554D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016554D0);
  }
  return result;
}

uint64_t sub_10009FDF0@<X0>(unsigned char *a1@<X8>)
{
  return sub_100B695A4(*(void *)(v1 + 24), a1);
}

uint64_t sub_10009FE0C(uint64_t a1)
{
  return sub_10009FE70(a1);
}

uint64_t sub_10009FE28(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009FE70(uint64_t a1)
{
  return sub_100B0BAC8(a1, *(uint64_t (**)(void))(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(unsigned __int8 *)(v1 + 41));
}

uint64_t sub_10009FE98(unint64_t a1)
{
  if (qword_101636F50 != -1) {
    goto LABEL_30;
  }
  while (1)
  {
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170E9E8);
    swift_bridgeObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    unint64_t v5 = a1 >> 62;
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 134217984;
      if (v5)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "databaseUpdated recordsChanged: processed %ld change records.", v6, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    if (!v7) {
      break;
    }
    uint64_t v8 = 4;
    while (1)
    {
      id v9 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v8);
      uint64_t v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      sub_10009B97C(v10);

      ++v8;
      if (v11 == v7)
      {
        swift_bridgeObjectRelease();
        QueueSynchronizer.conditionalSync<A>(_:)();
        sub_100A9E7EC(7);
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_30:
    swift_once();
  }
  swift_bridgeObjectRelease();
LABEL_18:
  swift_bridgeObjectRetain();
  char v13 = sub_100DC6054(0x61636F4C65666153, 0xEC0000006E6F6974, (uint64_t)&_swiftEmptySetSingleton);
  swift_bridgeObjectRelease();
  if (v13)
  {
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
    type metadata accessor for Transaction();
    static Transaction.asyncTask(name:block:)();
    sub_100A9EAD8();
  }
  else
  {
    swift_bridgeObjectRetain();
    char v14 = sub_100DC6054(0x636552687361654CLL, 0xEB0000000064726FLL, (uint64_t)&_swiftEmptySetSingleton);
    swift_bridgeObjectRelease();
    if (v14)
    {
      dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
      type metadata accessor for Transaction();
      static Transaction.asyncTask(name:block:)();
    }
  }
  uint64_t v15 = qword_1016370A8;
  swift_bridgeObjectRetain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_10170ECB0;
  uint64_t v17 = *(void *)algn_10170ECB8;
  swift_bridgeObjectRetain();
  LOBYTE(v16) = sub_100DC6054(v16, v17, (uint64_t)&_swiftEmptySetSingleton);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0
    || (swift_bridgeObjectRetain(),
        char v18 = sub_100DC6054(0xD000000000000012, 0x80000001013F2D70, (uint64_t)&_swiftEmptySetSingleton),
        swift_bridgeObjectRelease(),
        (v18 & 1) != 0)
    || (swift_bridgeObjectRetain(),
        char v19 = sub_100DC6054(0xD000000000000012, 0x80000001013F2D90, (uint64_t)&_swiftEmptySetSingleton),
        swift_bridgeObjectRelease(),
        (v19 & 1) != 0))
  {
    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)();
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_1000A038C()
{
  unint64_t result = qword_10163AD10;
  if (!qword_10163AD10)
  {
    sub_10001D4B0(255, (unint64_t *)&qword_10163AE60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AD10);
  }
  return result;
}

uint64_t sub_1000A03F4()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_10163B7C0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  unint64_t v5 = (int *)type metadata accessor for MemberSharingCircle();
  uint64_t v6 = *((void *)v5 - 1);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  swift_unknownObjectRelease();
  uint64_t v9 = v0 + v3;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(v6 + 48))(v0 + v3, 1, v5))
  {
    sub_10001CFB8(*(void *)v9, *(void *)(v9 + 8));
    uint64_t v10 = v9 + v5[5];
    uint64_t v22 = v8;
    uint64_t v23 = v4;
    uint64_t v11 = type metadata accessor for UUID();
    id v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    v12(v10, v11);
    v12(v9 + v5[6], v11);
    v12(v9 + v5[7], v11);
    uint64_t v13 = v11;
    uint64_t v4 = v23;
    v12(v9 + v5[8], v13);
    uint64_t v8 = v22;
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = v2 | v7 | 7;
  uint64_t v15 = (v3 + v4 + v7) & ~v7;
  uint64_t v16 = v15 + v8;
  uint64_t v17 = v0 + v15;
  sub_10001CFB8(*(void *)(v0 + v15), *(void *)(v0 + v15 + 8));
  uint64_t v18 = v17 + v5[5];
  uint64_t v19 = type metadata accessor for UUID();
  unint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  v20(v18, v19);
  v20(v17 + v5[6], v19);
  v20(v17 + v5[7], v19);
  v20(v17 + v5[8], v19);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v16, v14);
}

uint64_t sub_1000A0694(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(sub_10000588C((uint64_t *)&unk_10163B7C0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for MemberSharingCircle() - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = v1 + (v9 & ~v8);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v14;
  *uint64_t v14 = v3;
  v14[1] = sub_100033F68;
  return sub_10009E044(a1, v10, v11, v12, v13);
}

uint64_t sub_1000A07F0()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_101638D10) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  swift_unknownObjectRelease();
  uint64_t v9 = v0 + v3;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
  {
    sub_10001CFB8(*(void *)v9, *(void *)(v9 + 8));
    uint64_t v21 = v9 + *(int *)(v5 + 20);
    uint64_t v22 = v4;
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    v11(v21, v10);
    uint64_t v12 = v10;
    uint64_t v4 = v22;
    v11(v9 + *(int *)(v5 + 24), v12);
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = v2 | v7 | 7;
  uint64_t v14 = (v3 + v4 + v7) & ~v7;
  uint64_t v15 = v14 + v8;
  uint64_t v16 = v0 + v14;
  sub_10001CFB8(*(void *)(v0 + v14), *(void *)(v0 + v14 + 8));
  uint64_t v17 = v16 + *(int *)(v5 + 20);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
  v19(v17, v18);
  v19(v16 + *(int *)(v5 + 24), v18);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v15, v13);
}

uint64_t sub_1000A0A30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A0A98(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(sub_10000588C((uint64_t *)&unk_101638D10) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnerSharingCircle() - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = v1 + (v9 & ~v8);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v14;
  *uint64_t v14 = v3;
  v14[1] = sub_100033F68;
  return sub_10009E5EC(a1, v10, v11, v12, v13);
}

uint64_t sub_1000A0BF4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000A0C54()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_101653D50) - 8);
  uint64_t v36 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v2 = (v36 + 32) & ~v36;
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v5 = *((void *)v4 - 1);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v2 + v3 + v6) & ~v6;
  uint64_t v33 = *(void *)(v5 + 64);
  swift_unknownObjectRelease();
  uint64_t v8 = v0 + v2;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(v5 + 48))(v0 + v2, 1, v4))
  {
    sub_10001CFB8(*(void *)v8, *(void *)(v8 + 8));
    uint64_t v9 = v8 + v4[5];
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v12(v9, v10);
    uint64_t v34 = v12;
    v12(v8 + v4[6], v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v8 + v4[18];
    uint64_t v14 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
    uint64_t v15 = v8 + v4[19];
    uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    if (!v16(v15, 1, v10)) {
      v34(v15, v10);
    }
    uint64_t v17 = v8 + v4[20];
    uint64_t v18 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18))
    {
      uint64_t v19 = v17 + *(int *)(v18 + 20);
      if (!v16(v19, 1, v10)) {
        v34(v19, v10);
      }
    }
  }
  uint64_t v35 = v7;
  uint64_t v20 = v0 + v7;
  sub_10001CFB8(*(void *)(v0 + v7), *(void *)(v0 + v7 + 8));
  uint64_t v21 = v0 + v7 + v4[5];
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  char v24 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v24(v21, v22);
  v24(v0 + v7 + v4[6], v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = v0 + v7 + v4[18];
  uint64_t v26 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
  uint64_t v27 = v0 + v7 + v4[19];
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  if (!v28(v20 + v4[19], 1, v22)) {
    v24(v27, v22);
  }
  uint64_t v29 = v20 + v4[20];
  uint64_t v30 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v29, 1, v30))
  {
    uint64_t v31 = v29 + *(int *)(v30 + 20);
    if (!v28(v31, 1, v22)) {
      v24(v31, v22);
    }
  }

  return _swift_deallocObject(v0, v35 + v33, v36 | v6 | 7);
}

uint64_t sub_1000A1138(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(sub_10000588C((uint64_t *)&unk_101653D50) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SharedBeaconRecord(0) - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = v1 + (v9 & ~v8);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v14;
  *uint64_t v14 = v3;
  v14[1] = sub_10001D2E4;
  return sub_10009EB94(a1, v10, v11, v12, v13);
}

void sub_1000A1294()
{
  sub_100D41590(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000A12B0()
{
  sub_100D40990(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000A12CC()
{
  sub_100D3FD90(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000A12E8()
{
  sub_100D3F120(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000A1304()
{
  sub_100D3E4B4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000A1320()
{
  sub_100D3D844(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000A133C()
{
  sub_100D3CC44(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000A1358()
{
  sub_100D3C044(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000A1374()
{
  sub_100D3B3D4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000A1390()
{
  sub_100D3A734(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000A13AC()
{
  sub_100D39AB4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000A13C8()
{
  sub_100D38EB4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000A13E4()
{
  sub_100D382B4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000A1400()
{
  sub_100D376B4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000A141C()
{
  sub_100D36AB4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000A1438()
{
  sub_100D35E34(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000A1454(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A14BC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A14F4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000A151C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000A152C()
{
  return swift_release();
}

uint64_t sub_1000A1534(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000A1548@<X0>(unsigned char *a1@<X8>)
{
  return sub_10009FDF0(a1);
}

unint64_t sub_1000A1560(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 2:
      unint64_t result = 0x726F707075736E75;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0x6544654D41746F6ELL;
      break;
    case 5:
      unint64_t result = 0x6F4E656369766564;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_1000A1644()
{
  return sub_10072BFF8();
}

uint64_t sub_1000A164C()
{
  return sub_10071F424();
}

Swift::Int sub_1000A1654()
{
  return sub_100720AFC();
}

unint64_t sub_1000A165C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000A2574(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000A168C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000A1560(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000A16B8(unsigned __int8 *a1, char *a2)
{
  return sub_10071A710(*a1, *a2);
}

uint64_t sub_1000A16C4(unsigned __int8 a1)
{
  int v1 = a1;
  if (a1 == 7) {
    return 0x64656C62616E65;
  }
  unint64_t v3 = 0xD000000000000011;
  unint64_t v4 = 0x80000001013EE2E0;
  switch(v1)
  {
    case 0:
      goto LABEL_12;
    case 1:
      uint64_t v5 = "unsupportedDevice";
      goto LABEL_9;
    case 2:
      unint64_t v4 = 0xEE00554B53646574;
      unint64_t v3 = 0x726F707075736E75;
      goto LABEL_12;
    case 3:
      unint64_t v3 = 0xD00000000000001CLL;
      uint64_t v5 = "unauthorizedLocationServices";
LABEL_9:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      goto LABEL_12;
    case 4:
      unint64_t v4 = 0xEC00000065636976;
      unint64_t v3 = 0x6544654D41746F6ELL;
      goto LABEL_12;
    case 5:
      unint64_t v4 = 0xEE006573556E4974;
      unint64_t v3 = 0x6F4E656369766564;
LABEL_12:
      unint64_t v6 = v4;
      String.append(_:)(*(Swift::String *)&v3);
      swift_bridgeObjectRelease();
      uint64_t result = 0x64656C6261736964;
      break;
    default:
      uint64_t result = 1701736302;
      break;
  }
  return result;
}

uint64_t sub_1000A183C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 7) {
    return v3 == 7;
  }
  if (v2 == 6) {
    return v3 == 6;
  }
  if ((v3 & 0xFE) == 6) {
    return 0;
  }
  return sub_10071A710(v2, v3);
}

uint64_t sub_1000A1888()
{
  return sub_1000A16C4(*v0);
}

uint64_t sub_1000A1890()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(ObjectType, v1);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 24);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000A1914()
{
  sub_1000A1890();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SeparationMonitoringStateDecider()
{
  return self;
}

uint64_t sub_1000A196C()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1);
}

void sub_1000A19B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  CurrentValueSubject.send(_:)();
}

uint64_t sub_1000A1A00(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_1000A2A14(a3);
}

uint64_t sub_1000A1A08()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10163A4E0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163A4E8);
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163A4F0);
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10163A4F8);
  uint64_t v33 = *(void *)(v12 - 8);
  uint64_t v34 = v12;
  __chkstk_darwin(v12);
  uint64_t v32 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v0[9];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v14 + 48))(ObjectType, v14);
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170E7C8);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Starting Separation Monitoring support observer.", v19, 2u);
    swift_slowDealloc();
  }

  uint64_t v35 = v1[13];
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_1000A2BDC;
  *(void *)(v20 + 24) = v1;
  swift_retain();
  swift_retain();
  sub_10000588C(&qword_10163A500);
  sub_100062734((unint64_t *)&unk_101656730, &qword_10163A500);
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  sub_100062734(&qword_10163A508, &qword_10163A4E0);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v35 = v1[2];
  uint64_t v36 = v1[10];
  sub_10000588C((uint64_t *)&unk_1016569C0);
  sub_10000588C((uint64_t *)&unk_101656920);
  sub_100062734(&qword_10163A510, &qword_10163A4E8);
  sub_100062734((unint64_t *)&qword_10163A518, (uint64_t *)&unk_1016569C0);
  sub_100062734(&qword_10163A520, (uint64_t *)&unk_101656920);
  uint64_t v21 = v29;
  Publisher.combineLatest<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v21);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_1000A2C4C;
  *(void *)(v22 + 24) = v1;
  sub_100062734(&qword_10163A528, &qword_10163A4F0);
  swift_retain();
  uint64_t v23 = v31;
  char v24 = v32;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v23);
  sub_10000588C(&qword_1016568A0);
  sub_100062734(&qword_10163A530, &qword_10163A4F8);
  sub_100062734(&qword_10163A538, &qword_1016568A0);
  uint64_t v25 = v34;
  Publisher.subscribe<A>(_:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v25);
  swift_beginAccess();
  sub_10000588C(&qword_10163A540);
  sub_100062734(&qword_10163A548, &qword_10163A540);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000A20E8()
{
  return swift_release();
}

uint64_t sub_1000A20F0()
{
  sub_1000A1890();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SeparationMonitoringStateDecider.iOS()
{
  return self;
}

uint64_t getEnumTagSinglePayload for SeparationMonitoringStateDecider.SeparationMonitoringPolicy(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9)
  {
    unsigned int v2 = a2 + 7;
    if (a2 + 7 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 7;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 7;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000A2200);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 7;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 6) {
    unsigned int v8 = v7 - 5;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 3) {
    return v8 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for SeparationMonitoringStateDecider.SeparationMonitoringPolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 7;
  if (a3 + 7 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xF9) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v7 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1000A22E8);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t sub_1000A2310(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 6) {
    return v1 - 5;
  }
  else {
    return 0;
  }
}

unsigned char *sub_1000A2324(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 5;
  }
  return result;
}

ValueMetadata *type metadata accessor for SeparationMonitoringStateDecider.SeparationMonitoringPolicy()
{
  return &type metadata for SeparationMonitoringStateDecider.SeparationMonitoringPolicy;
}

void *initializeBufferWithCopyOfBuffer for SeparationMonitoringStateDecider.CurrentLocationState(void *a1, void **a2)
{
  unsigned int v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for SeparationMonitoringStateDecider.CurrentLocationState(void **a1)
{
  unsigned int v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for SeparationMonitoringStateDecider.CurrentLocationState(void **a1, void **a2)
{
  unsigned int v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    id v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  id v5 = v4;

  return a1;
}

void **assignWithTake for SeparationMonitoringStateDecider.CurrentLocationState(void **a1, unint64_t *a2)
{
  unsigned int v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for SeparationMonitoringStateDecider.CurrentLocationState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SeparationMonitoringStateDecider.CurrentLocationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_1000A252C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000A2544(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SeparationMonitoringStateDecider.CurrentLocationState()
{
  return &type metadata for SeparationMonitoringStateDecider.CurrentLocationState;
}

unint64_t sub_1000A2574(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10159FD60, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000A25C0()
{
  uint64_t v0 = 0;
  sub_1000336D4();
  char v1 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if ((v1 & 1) == 0)
  {
    uint64_t v0 = 1;
    char v2 = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      uint64_t v0 = 2;
      char v3 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0)
      {
        uint64_t v0 = 3;
        char v4 = StringProtocol.contains<A>(_:)();
        swift_bridgeObjectRelease();
        if ((v4 & 1) == 0)
        {
          char v5 = StringProtocol.contains<A>(_:)();
          swift_bridgeObjectRelease();
          if (v5) {
            return 4;
          }
          else {
            return 5;
          }
        }
      }
    }
  }
  return v0;
}

uint64_t sub_1000A2A14(unsigned int a1)
{
  if (a1 < 3)
  {
LABEL_9:
    uint64_t v8 = 2;
    return CurrentValueSubject.send(_:)();
  }
  if (a1 - 3 > 1)
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10170E7C8);
    char v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      char v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)char v4 = 136315138;
      type metadata accessor for CLAuthorizationStatus(0);
      uint64_t v5 = String.init<A>(describing:)();
      sub_1008FA0F0(v5, v6, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unknown CLAuthorizationStatus value detected: %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    goto LABEL_9;
  }
  uint64_t v8 = 0;
  return CurrentValueSubject.send(_:)();
}

uint64_t sub_1000A2BE0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A2C18@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A2C50@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(v2 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_1000A2C90(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101648A20);
  __chkstk_darwin(v2 - 8);
  char v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SystemVersionNumber();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v48 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v42 - v9;
  unint64_t v11 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v11)
  {
    unint64_t v12 = 0;
    uint64_t v13 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v51 = (void (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v50 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v14 = a1 + 32;
    unint64_t v43 = v11 - 1;
    uint64_t v15 = _swiftEmptyArrayStorage;
    uint64_t v45 = a1;
    unint64_t v47 = v11;
    uint64_t v44 = a1 + 32;
LABEL_3:
    uint64_t v46 = v15;
    if (v12 <= v11) {
      unint64_t v16 = v11;
    }
    else {
      unint64_t v16 = v12;
    }
    uint64_t v17 = (long long *)(v14 + 160 * v12);
    unint64_t v18 = v12;
    do
    {
      if (v16 == v18)
      {
        __break(1u);
        JUMPOUT(0x1000A3114);
      }
      long long v19 = v17[7];
      long long v58 = v17[6];
      long long v59 = v19;
      long long v20 = v17[9];
      long long v60 = v17[8];
      long long v61 = v20;
      long long v21 = v17[3];
      long long v54 = v17[2];
      long long v55 = v21;
      long long v22 = v17[5];
      long long v56 = v17[4];
      long long v57 = v22;
      long long v23 = v17[1];
      long long v52 = *v17;
      long long v53 = v23;
      sub_1000A3AA8((uint64_t)&v52);
      swift_bridgeObjectRetain();
      SystemVersionNumber.init(string:)();
      if ((*v13)(v4, 1, v5) != 1)
      {
        (*v51)(v10, v4, v5);
        swift_bridgeObjectRetain();
        char v24 = sub_1000A25C0();
        swift_bridgeObjectRelease();
        switch(v24)
        {
          case 1:
          case 2:
          case 4:
            uint64_t v25 = v10;
            uint64_t v26 = v48;
            SystemVersionNumber.init(stringLiteral:)();
            sub_1000A3C60();
            int v49 = dispatch thunk of static Comparable.< infix(_:_:)();
            uint64_t v27 = *v50;
            uint64_t v28 = v26;
            uint64_t v10 = v25;
            unint64_t v11 = v47;
            (*v50)(v28, v5);
            v27(v10, v5);
            if (v49) {
              goto LABEL_8;
            }
            uint64_t v15 = v46;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            BOOL v62 = v15;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1000B7514(0, v15[2] + 1, 1);
              uint64_t v15 = v62;
            }
            unint64_t v31 = v15[2];
            unint64_t v30 = v15[3];
            if (v31 >= v30 >> 1)
            {
              sub_1000B7514(v30 > 1, v31 + 1, 1);
              uint64_t v15 = v62;
            }
            unint64_t v12 = v18 + 1;
            v15[2] = v31 + 1;
            uint64_t v32 = &v15[20 * v31];
            long long v33 = v53;
            void v32[2] = v52;
            void v32[3] = v33;
            long long v34 = v54;
            long long v35 = v55;
            long long v36 = v57;
            v32[6] = v56;
            v32[7] = v36;
            v32[4] = v34;
            v32[5] = v35;
            long long v37 = v58;
            long long v38 = v59;
            long long v39 = v61;
            v32[10] = v60;
            v32[11] = v39;
            v32[8] = v37;
            v32[9] = v38;
            uint64_t v14 = v44;
            if (v43 == v18) {
              goto LABEL_22;
            }
            goto LABEL_3;
          default:
            (*v50)(v10, v5);
            goto LABEL_8;
        }
      }
      sub_1000A3B54((uint64_t)v4);
LABEL_8:
      ++v18;
      sub_1000A3BB4((uint64_t)&v52);
      v17 += 10;
    }
    while (v11 != v18);
    uint64_t v15 = v46;
  }
  else
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  uint64_t v40 = v15[2];
  swift_release();
  return v40;
}

uint64_t sub_1000A312C(uint64_t a1, char a2, void *a3)
{
  uint64_t result = (uint64_t)(id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v6 = (void *)result;
    id v7 = (id)MobileGestalt_copy_productType_obj();

    if (v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    char v8 = sub_1000A25C0();
    swift_bridgeObjectRelease();
    if (v8 == 5)
    {
      BOOL v9 = 0;
      if ((sub_100F2C7E4() & 1) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      BOOL v9 = v8 == 3 || v8 == 0;
      if ((sub_100F2C7E4() & 1) == 0)
      {
LABEL_6:
        if (a3)
        {
          if (a3 == (void *)1)
          {
            if (qword_101636EE0 != -1) {
              swift_once();
            }
            uint64_t v19 = type metadata accessor for Logger();
            sub_100010324(v19, (uint64_t)qword_10170E7C8);
            long long v20 = Logger.logObject.getter();
            os_log_type_t v21 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v20, v21))
            {
              long long v22 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)long long v22 = 0;
              _os_log_impl((void *)&_mh_execute_header, v20, v21, "No location has been provided, most likely due to being in unsupported region.", v22, 2u);
              swift_slowDealloc();
            }
            goto LABEL_47;
          }
          if (a3 == (void *)2)
          {
            if (qword_101636EE0 != -1) {
              swift_once();
            }
            uint64_t v10 = type metadata accessor for Logger();
            sub_100010324(v10, (uint64_t)qword_10170E7C8);
            unint64_t v11 = Logger.logObject.getter();
            os_log_type_t v12 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v11, v12))
            {
              uint64_t v13 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v13 = 0;
              _os_log_impl((void *)&_mh_execute_header, v11, v12, "SearchpartyD has no access to location data.", v13, 2u);
              swift_slowDealloc();
            }

            return 3;
          }
          id v28 = a3;
          if (sub_100FC022C())
          {
            if (qword_101636EE0 != -1) {
              swift_once();
            }
            uint64_t v29 = type metadata accessor for Logger();
            sub_100010324(v29, (uint64_t)qword_10170E7C8);
            long long v20 = Logger.logObject.getter();
            os_log_type_t v30 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v20, v30))
            {
              unint64_t v31 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v31 = 0;
              _os_log_impl((void *)&_mh_execute_header, v20, v30, "Provided location is within unsupported region.", v31, 2u);
              swift_slowDealloc();

              sub_1000A3A98(a3);
              return 0;
            }
            sub_1000A3A98(a3);
LABEL_47:

            return 0;
          }
          sub_1000A3A98(a3);
          if (a2)
          {
            if (a2 == 3)
            {
              if (v9)
              {
                if (qword_101636EE0 != -1) {
                  swift_once();
                }
                uint64_t v38 = type metadata accessor for Logger();
                sub_100010324(v38, (uint64_t)qword_10170E7C8);
                long long v33 = Logger.logObject.getter();
                os_log_type_t v34 = static os_log_type_t.default.getter();
                if (!os_log_type_enabled(v33, v34)) {
                  goto LABEL_60;
                }
                long long v35 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)long long v35 = 0;
                goto LABEL_59;
              }
            }
            else if (a2 == 1 && v9)
            {
              if (qword_101636EE0 != -1) {
                swift_once();
              }
              uint64_t v32 = type metadata accessor for Logger();
              sub_100010324(v32, (uint64_t)qword_10170E7C8);
              long long v33 = Logger.logObject.getter();
              os_log_type_t v34 = static os_log_type_t.default.getter();
              if (!os_log_type_enabled(v33, v34)) {
                goto LABEL_60;
              }
              long long v35 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)long long v35 = 0;
LABEL_59:
              _os_log_impl((void *)&_mh_execute_header, v33, v34, v36, v35, 2u);
              swift_slowDealloc();
LABEL_60:

              return 7;
            }
            uint64_t v53 = 0;
            unint64_t v54 = 0xE000000000000000;
            _StringGuts.grow(_:)(76);
            v39._countAndFlagsBits = 0x656369766544656DLL;
            v39._object = (void *)0xEF203A6574617453;
            String.append(_:)(v39);
            v40._countAndFlagsBits = String.init<A>(describing:)();
            String.append(_:)(v40);
            swift_bridgeObjectRelease();
            v41._object = (void *)0x80000001013F2FA0;
            v41._countAndFlagsBits = 0xD000000000000029;
            String.append(_:)(v41);
            if (v9) {
              uint64_t v42 = 1702195828;
            }
            else {
              uint64_t v42 = 0x65736C6166;
            }
            if (v9) {
              unint64_t v43 = 0xE400000000000000;
            }
            else {
              unint64_t v43 = 0xE500000000000000;
            }
            unint64_t v44 = v43;
            String.append(_:)(*(Swift::String *)&v42);
            swift_bridgeObjectRelease();
            v45._countAndFlagsBits = 0x436563697665640ALL;
            v45._object = (void *)0xEE00203A746E756FLL;
            String.append(_:)(v45);
            v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v46);
            swift_bridgeObjectRelease();
            uint64_t v48 = v53;
            unint64_t v47 = v54;
            if (qword_101636EE0 != -1) {
              swift_once();
            }
            uint64_t v49 = type metadata accessor for Logger();
            sub_100010324(v49, (uint64_t)qword_10170E7C8);
            swift_bridgeObjectRetain();
            uint64_t v50 = Logger.logObject.getter();
            os_log_type_t v51 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v50, v51))
            {
              long long v52 = (uint8_t *)swift_slowAlloc();
              uint64_t v53 = swift_slowAlloc();
              *(_DWORD *)long long v52 = 136315138;
              swift_bridgeObjectRetain();
              sub_1008FA0F0(v48, v47, &v53);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v50, v51, "This device does not support Separation Monitoring \n%s", v52, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            if (v9) {
              return 4;
            }
            else {
              return 1;
            }
          }
          if (qword_101636EE0 != -1) {
            swift_once();
          }
          uint64_t v37 = type metadata accessor for Logger();
          sub_100010324(v37, (uint64_t)qword_10170E7C8);
          char v24 = Logger.logObject.getter();
          os_log_type_t v25 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v24, v25))
          {
LABEL_32:

            return 6;
          }
          uint64_t v26 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v26 = 0;
          uint64_t v27 = "Unknown me device state, can't decide yet.";
        }
        else
        {
          if (qword_101636EE0 != -1) {
            swift_once();
          }
          uint64_t v23 = type metadata accessor for Logger();
          sub_100010324(v23, (uint64_t)qword_10170E7C8);
          char v24 = Logger.logObject.getter();
          os_log_type_t v25 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v24, v25)) {
            goto LABEL_32;
          }
          uint64_t v26 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v26 = 0;
          uint64_t v27 = "Location has not been yet acquired, can't decide state yet.";
        }
        _os_log_impl((void *)&_mh_execute_header, v24, v25, v27, v26, 2u);
        swift_slowDealloc();
        goto LABEL_32;
      }
    }
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170E7C8);
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v14 = 2;
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "SearchpartyD is running on Korean SKU, separation alerts will be disabled.", v18, 2u);
      swift_slowDealloc();
    }
    else
    {

      return 2;
    }
    return v14;
  }
  __break(1u);
  return result;
}

void sub_1000A3A98(id a1)
{
  if ((unint64_t)a1 >= 3) {
}
  }

uint64_t sub_1000A3AA8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000A3B54(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101648A20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A3BB4(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000A3C60()
{
  unint64_t result = qword_10163A550;
  if (!qword_10163A550)
  {
    type metadata accessor for SystemVersionNumber();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A550);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SeparationMonitoringStateDecider.SeparationMonitoringPolicy.DisableReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A3D84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SeparationMonitoringStateDecider.SeparationMonitoringPolicy.DisableReason()
{
  return &type metadata for SeparationMonitoringStateDecider.SeparationMonitoringPolicy.DisableReason;
}

unint64_t sub_1000A3DC0()
{
  unint64_t result = qword_10163A558;
  if (!qword_10163A558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A558);
  }
  return result;
}

uint64_t sub_1000A3E1C(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B71E0);
}

uint64_t sub_1000A3E84(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B721C);
}

uint64_t sub_1000A3EEC(uint64_t (*a1)(char *), void *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void), void (*a7)(BOOL, uint64_t, uint64_t))
{
  os_log_type_t v25 = a7;
  os_log_type_t v30 = a6;
  uint64_t v32 = a1;
  long long v33 = a2;
  uint64_t v10 = a4(0);
  uint64_t v31 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v29 = (uint64_t)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v24 - v14;
  unint64_t v16 = _swiftEmptyArrayStorage;
  os_log_type_t v34 = _swiftEmptyArrayStorage;
  uint64_t v28 = *(void *)(a3 + 16);
  if (v28)
  {
    unint64_t v17 = 0;
    unint64_t v18 = _swiftEmptyArrayStorage;
    uint64_t v26 = a5;
    uint64_t v27 = a3;
    while (v17 < *(void *)(a3 + 16))
    {
      unint64_t v19 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
      uint64_t v20 = *(void *)(v31 + 72);
      sub_1000BF5F8(a3 + v19 + v20 * v17, (uint64_t)v15, a5);
      unint64_t v16 = v33;
      char v21 = v32(v15);
      if (v7)
      {
        sub_1000BF694((uint64_t)v15, a5);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v16;
      }
      if (v21)
      {
        sub_1000BD0F8((uint64_t)v15, v29, v30);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v25(0, v18[2] + 1, 1);
        }
        unint64_t v18 = v34;
        unint64_t v23 = v34[2];
        unint64_t v22 = v34[3];
        if (v23 >= v22 >> 1)
        {
          v25(v22 > 1, v23 + 1, 1);
          unint64_t v18 = v34;
        }
        v18[2] = v23 + 1;
        uint64_t result = sub_1000BD0F8(v29, (uint64_t)v18 + v19 + v23 * v20, v30);
        a5 = v26;
        a3 = v27;
      }
      else
      {
        uint64_t result = sub_1000BF694((uint64_t)v15, a5);
      }
      if (v28 == ++v17)
      {
        unint64_t v16 = v34;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v16;
  }
  return result;
}

uint64_t sub_1000A4144(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for TimeBasedKey, (uint64_t (*)(void))type metadata accessor for TimeBasedKey, (uint64_t (*)(void))type metadata accessor for TimeBasedKey, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B7258);
}

uint64_t sub_1000A41AC(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, type metadata accessor for KeyDropJoinToken, type metadata accessor for KeyDropJoinToken, type metadata accessor for KeyDropJoinToken, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B7294);
}

uint64_t sub_1000A4214(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B747C);
}

uint64_t sub_1000A427C(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, type metadata accessor for SharedBeaconRecord, type metadata accessor for SharedBeaconRecord, type metadata accessor for SharedBeaconRecord, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B7404);
}

uint64_t sub_1000A42E4(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B74D8);
}

uint64_t sub_1000A434C(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B7534);
}

uint64_t sub_1000A43B4(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for BeaconObservation, (uint64_t (*)(void))type metadata accessor for BeaconObservation, (uint64_t (*)(void))type metadata accessor for BeaconObservation, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B77F0);
}

uint64_t sub_1000A441C(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    char v8 = (uint64_t (*)(long long *))result;
    unint64_t v9 = 0;
    uint64_t v10 = a3 + 32;
    unint64_t v23 = (uint64_t (*)(long long *))result;
    uint64_t v24 = a3;
    uint64_t v22 = v6;
    while (v9 < *(void *)(v4 + 16))
    {
      sub_10001D010(v10, (uint64_t)v28);
      uint64_t v5 = a2;
      char v11 = v8(v28);
      if (v3)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
        swift_bridgeObjectRelease();
        swift_release();
        return (uint64_t)v5;
      }
      if (v11)
      {
        sub_10001CEB0(v28, (uint64_t)v25);
        uint64_t v12 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v12[2] + 1, 1);
          uint64_t v12 = v29;
        }
        unint64_t v14 = v12[2];
        unint64_t v13 = v12[3];
        if (v14 >= v13 >> 1) {
          sub_1000B7570(v13 > 1, v14 + 1, 1);
        }
        uint64_t v15 = v26;
        uint64_t v16 = v27;
        uint64_t v17 = sub_1000BD078((uint64_t)v25, v26);
        __chkstk_darwin(v17);
        unint64_t v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v20 + 16))(v19);
        sub_1006985B0(v14, (uint64_t)v19, (uint64_t *)&v29, v15, v16);
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
        char v8 = v23;
        uint64_t v4 = v24;
        uint64_t v6 = v22;
      }
      else
      {
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
      }
      ++v9;
      v10 += 40;
      if (v6 == v9)
      {
        uint64_t v5 = v29;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_1000A4650(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A4B78(a1, a2, a3, &qword_10163A790, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B7980);
}

uint64_t sub_1000A4684(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t (*)(void))type metadata accessor for SafeLocation, (uint64_t (*)(void))type metadata accessor for SafeLocation, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B79B0);
}

uint64_t sub_1000A46EC(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, type metadata accessor for OwnedBeaconGroup, type metadata accessor for OwnedBeaconGroup, type metadata accessor for OwnedBeaconGroup, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B7A9C);
}

uint64_t sub_1000A4754(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v17 = *(void *)(a3 + 16);
  if (v17)
  {
    uint64_t v5 = (uint64_t (*)(void *))result;
    unint64_t v6 = 0;
    uint64_t v7 = (unint64_t *)(a3 + 40);
    char v8 = _swiftEmptyArrayStorage;
    uint64_t v15 = (uint64_t (*)(void *))result;
    while (v6 < *(void *)(v4 + 16))
    {
      uint64_t v10 = *(v7 - 1);
      unint64_t v9 = *v7;
      v18[0] = v10;
      v18[1] = v9;
      sub_1000361E0(v10, v9);
      char v11 = v5(v18);
      if (v3)
      {
        sub_10001CFB8(v10, v9);
        swift_release();
        goto LABEL_15;
      }
      if (v11)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v19 = v8;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1000B765C(0, v8[2] + 1, 1);
          char v8 = v19;
        }
        unint64_t v13 = v8[2];
        unint64_t v12 = v8[3];
        if (v13 >= v12 >> 1)
        {
          uint64_t result = sub_1000B765C(v12 > 1, v13 + 1, 1);
          char v8 = v19;
        }
        v8[2] = v13 + 1;
        unint64_t v14 = &v8[2 * v13];
        v14[4] = v10;
        uint64_t v14[5] = v9;
        uint64_t v4 = a3;
        uint64_t v5 = v15;
      }
      else
      {
        uint64_t result = sub_10001CFB8(v10, v9);
      }
      ++v6;
      v7 += 2;
      if (v17 == v6) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
    char v8 = _swiftEmptyArrayStorage;
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v8;
  }
  return result;
}

uint64_t sub_1000A48D4(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B7B88);
}

uint64_t sub_1000A493C(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, type metadata accessor for WildModeAssociationRecord, type metadata accessor for WildModeAssociationRecord, type metadata accessor for WildModeAssociationRecord, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B7CB0);
}

uint64_t sub_1000A49A4(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  return sub_1000A5414(a1, a2, a3, &qword_101657CA0, (void (*)(BOOL, unint64_t, uint64_t))sub_1000B7D28);
}

uint64_t sub_1000A49D8(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for ShareRecord, (uint64_t (*)(void))type metadata accessor for ShareRecord, (uint64_t (*)(void))type metadata accessor for ShareRecord, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B7DF0);
}

uint64_t sub_1000A4A40(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, type metadata accessor for FetchRequestBeacon, type metadata accessor for FetchRequestBeacon, type metadata accessor for FetchRequestBeacon, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B7EF8);
}

uint64_t sub_1000A4AA8(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for RawSearchResult, (uint64_t (*)(void))type metadata accessor for RawSearchResult, (uint64_t (*)(void))type metadata accessor for RawSearchResult, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B7F90);
}

uint64_t sub_1000A4B10(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  return sub_1000A5414(a1, a2, a3, &qword_10163A798, (void (*)(BOOL, unint64_t, uint64_t))sub_1000B80D4);
}

uint64_t sub_1000A4B44(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A4B78(a1, a2, a3, (uint64_t *)&unk_10164E7D0, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B81AC);
}

uint64_t sub_1000A4B78(uint64_t (*a1)(char *), void *a2, uint64_t a3, uint64_t *a4, void (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v22 = a5;
  unint64_t v6 = a4;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v8 = sub_10000588C(a4);
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v26 = (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v22 - v12;
  unint64_t v14 = _swiftEmptyArrayStorage;
  os_log_type_t v30 = _swiftEmptyArrayStorage;
  uint64_t v25 = *(void *)(a3 + 16);
  if (v25)
  {
    unint64_t v15 = 0;
    uint64_t v16 = _swiftEmptyArrayStorage;
    unint64_t v23 = v6;
    uint64_t v24 = a3;
    while (v15 < *(void *)(a3 + 16))
    {
      unint64_t v17 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
      uint64_t v18 = *(void *)(v27 + 72);
      sub_10001D074(a3 + v17 + v18 * v15, (uint64_t)v13, v6);
      unint64_t v14 = v29;
      char v19 = v28(v13);
      if (v5)
      {
        sub_10001DAB4((uint64_t)v13, v6);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v14;
      }
      if (v19)
      {
        sub_10001D608((uint64_t)v13, v26, v6);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v22(0, v16[2] + 1, 1);
        }
        uint64_t v16 = v30;
        unint64_t v21 = v30[2];
        unint64_t v20 = v30[3];
        if (v21 >= v20 >> 1)
        {
          v22(v20 > 1, v21 + 1, 1);
          uint64_t v16 = v30;
        }
        _OWORD v16[2] = v21 + 1;
        unint64_t v6 = v23;
        uint64_t result = sub_10001D608(v26, (uint64_t)v16 + v17 + v21 * v18, v23);
        a3 = v24;
      }
      else
      {
        uint64_t result = sub_10001DAB4((uint64_t)v13, v6);
      }
      if (v25 == ++v15)
      {
        unint64_t v14 = v30;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v14;
  }
  return result;
}

uint64_t sub_1000A4DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A4E3C(a1, a2, a3, &qword_10163AAB8, (uint64_t (*)(BOOL, uint64_t, uint64_t))sub_1000B817C);
}

uint64_t sub_1000A4E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A4E3C(a1, a2, a3, &qword_10163AA60, (uint64_t (*)(BOOL, uint64_t, uint64_t))sub_1000B820C);
}

uint64_t sub_1000A4E3C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v7 = _swiftEmptyArrayStorage;
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v8 = *(void *)(a3 + 16);
  if (v8)
  {
    uint64_t v9 = a4;
    uint64_t v10 = (uint64_t (*)(_OWORD *))result;
    unint64_t v11 = 0;
    uint64_t v12 = a3 + 32;
    char v19 = (uint64_t (*)(_OWORD *))result;
    uint64_t v18 = *(void *)(a3 + 16);
    while (v11 < *(void *)(a3 + 16))
    {
      sub_10001D074(v12, (uint64_t)v25, v9);
      char v13 = v10(v25);
      if (v5)
      {
        sub_10001DAB4((uint64_t)v25, v9);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v7;
      }
      if (v13)
      {
        long long v21 = v25[0];
        long long v22 = v25[1];
        long long v23 = v25[2];
        uint64_t v24 = v26;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0) {
          uint64_t result = a5(0, v7[2] + 1, 1);
        }
        uint64_t v7 = v27;
        unint64_t v15 = v27[2];
        unint64_t v14 = v27[3];
        if (v15 >= v14 >> 1)
        {
          uint64_t result = a5(v14 > 1, v15 + 1, 1);
          uint64_t v7 = v27;
        }
        v7[2] = v15 + 1;
        uint64_t v16 = &v7[7 * v15];
        *((_OWORD *)v16 + 2) = v21;
        *((_OWORD *)v16 + 3) = v22;
        *((_OWORD *)v16 + 4) = v23;
        v16[10] = v24;
        uint64_t v10 = v19;
        uint64_t v9 = a4;
        uint64_t v8 = v18;
      }
      else
      {
        uint64_t result = sub_10001DAB4((uint64_t)v25, v9);
      }
      ++v11;
      v12 += 56;
      if (v8 == v11) {
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_1000A500C(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  return sub_1000A5414(a1, a2, a3, (uint64_t *)&unk_101657850, (void (*)(BOOL, unint64_t, uint64_t))sub_1000B8398);
}

void *sub_1000A5040(uint64_t (*a1)(id *), void *a2, unint64_t a3)
{
  unint64_t v4 = a3;
  char v19 = _swiftEmptyArrayStorage;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      uint64_t v16 = v4 & 0xFFFFFFFFFFFFFF8;
      unint64_t v17 = v4 & 0xC000000000000001;
      unint64_t v15 = v4;
      while (v17)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        id v18 = v9;
        uint64_t v12 = a2;
        char v13 = a1(&v18);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return v12;
        }
        if (v13)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v4 = v15;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v8;
        if (v11 == v7)
        {
          uint64_t v12 = v19;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)(v16 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_19;
      }
    }
    id v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_19:
  uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1000A51EC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = _swiftEmptyArrayStorage;
  unint64_t v17 = _swiftEmptyArrayStorage;
  unint64_t v6 = *(void **)(a3 + 16);
  if (v6)
  {
    uint64_t v7 = (uint64_t (*)(long long *))result;
    uint64_t v5 = 0;
    uint64_t v8 = a3 + 32;
    id v9 = _swiftEmptyArrayStorage;
    char v13 = *(void **)(a3 + 16);
    unint64_t v14 = (uint64_t (*)(long long *))result;
    while ((unint64_t)v5 < *(void *)(a3 + 16))
    {
      sub_10001D010(v8, (uint64_t)v16);
      char v10 = v7(v16);
      if (v3)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v16);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v5;
      }
      if (v10)
      {
        sub_10001CEB0(v16, (uint64_t)v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B846C(0, v9[2] + 1, 1);
        }
        id v9 = v17;
        unint64_t v12 = v17[2];
        unint64_t v11 = v17[3];
        if (v12 >= v11 >> 1)
        {
          sub_1000B846C(v11 > 1, v12 + 1, 1);
          id v9 = v17;
        }
        _OWORD v9[2] = v12 + 1;
        uint64_t result = sub_10001CEB0(v15, (uint64_t)&v9[5 * v12 + 4]);
        unint64_t v6 = v13;
        uint64_t v7 = v14;
      }
      else
      {
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v16);
      }
      uint64_t v5 = (void *)((char *)v5 + 1);
      v8 += 40;
      if (v6 == v5)
      {
        uint64_t v5 = v17;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_1000A5378(uint64_t (*a1)(char *), void *a2, uint64_t a3)
{
  return sub_1000A3EEC(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for LocationProvider, (uint64_t (*)(void))type metadata accessor for LocationProvider, (uint64_t (*)(void))type metadata accessor for LocationProvider, (void (*)(BOOL, uint64_t, uint64_t))sub_1000B84CC);
}

uint64_t sub_1000A53E0(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  return sub_1000A5414(a1, a2, a3, &qword_10163A9E8, (void (*)(BOOL, unint64_t, uint64_t))sub_1000B8528);
}

uint64_t sub_1000A5414(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(BOOL, unint64_t, uint64_t))
{
  uint64_t v28 = a5;
  uint64_t v37 = a1;
  uint64_t v8 = sub_10000588C(a4);
  uint64_t v9 = ((uint64_t (*)(void))__chkstk_darwin)();
  long long v36 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v38 = (char *)&v28 - v13;
  unint64_t v14 = (char *)&_swiftEmptyArrayStorage;
  Swift::String v40 = (unint64_t *)&_swiftEmptyArrayStorage;
  uint64_t v35 = *(void *)(a3 + 16);
  if (v35)
  {
    uint64_t v39 = v5;
    unint64_t v15 = 0;
    uint64_t v32 = (void (**)(char *, uint64_t))(v12 + 8);
    long long v33 = (void (**)(char *, char *, uint64_t))(v12 + 32);
    uint64_t v34 = v12 + 16;
    uint64_t v16 = (unint64_t *)&_swiftEmptyArrayStorage;
    uint64_t v30 = a2;
    uint64_t v31 = a3;
    uint64_t v29 = v8;
    while (v15 < *(void *)(a3 + 16))
    {
      unint64_t v14 = (char *)((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
      uint64_t v17 = *(void *)(v12 + 72);
      uint64_t v18 = a3;
      char v19 = &v14[a3 + v17 * v15];
      uint64_t v20 = v12;
      long long v21 = v38;
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v38, v19, v8);
      uint64_t v22 = v39;
      char v23 = v37(v21);
      uint64_t v39 = v22;
      if (v22)
      {
        (*v32)(v38, v8);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v14;
      }
      if (v23)
      {
        uint64_t v24 = *v33;
        (*v33)(v36, v38, v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v28(0, v16[2] + 1, 1);
        }
        uint64_t v16 = v40;
        unint64_t v26 = v40[2];
        unint64_t v25 = v40[3];
        if (v26 >= v25 >> 1)
        {
          v28(v25 > 1, v26 + 1, 1);
          uint64_t v16 = v40;
        }
        long long v16[2] = v26 + 1;
        uint64_t v27 = &v14[(void)v16 + v26 * v17];
        uint64_t v8 = v29;
        uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v24)(v27, v36, v29);
        a3 = v31;
      }
      else
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v32)(v38, v8);
        a3 = v18;
      }
      ++v15;
      uint64_t v12 = v20;
      if (v35 == v15)
      {
        unint64_t v14 = (char *)v40;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v14;
  }
  return result;
}

uint64_t sub_1000A56FC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D720);
  sub_100010324(v0, (uint64_t)qword_10170D720);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000A5780()
{
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t sub_1000A57E0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 56);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000A5800()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_1000A5858()
{
  if (*(void *)(v0 + 64))
  {
    uint64_t v1 = *(void *)(v0 + 64);
  }
  else
  {
    uint64_t v2 = v0;
    type metadata accessor for ServerConfigurationProvider();
    swift_allocObject();
    uint64_t v1 = sub_1009968C8();
    *(void *)(v2 + 64) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1000A58CC()
{
  if (*(void *)(v0 + 72))
  {
    uint64_t v1 = *(void *)(v0 + 72);
  }
  else
  {
    uint64_t v2 = v0;
    type metadata accessor for UserDefaultsConfigurationProvider();
    swift_allocObject();
    uint64_t v1 = sub_101207B40();
    *(void *)(v2 + 72) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_1000A5940()
{
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = *(void **)(v0 + 80);
  }
  else
  {
    uint64_t v2 = v0;
    type metadata accessor for ServiceStateProvider();
    swift_allocObject();
    uint64_t v1 = sub_100F16490();
    *(void *)(v2 + 80) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void sub_1000A59B4()
{
  qword_10170D738 = (uint64_t)&off_1015A0160;
}

uint64_t sub_1000A59C8(unsigned __int8 *a1, char *a2)
{
  return sub_10071BB44(*a1, *a2);
}

unint64_t sub_1000A59D4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000BF954(*a1);
  *a2 = result;
  return result;
}

void sub_1000A5A04(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x746C7561666564;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x726576726573;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x73656C6F72;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    case 3:
      strcpy((char *)a1, "userDefaults");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 4:
      *(void *)a1 = 0x5365636976726573;
      *(void *)(a1 + 8) = 0xEF73676E69747465;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

Swift::Int sub_1000A5ACC()
{
  return Hasher._finalize()();
}

uint64_t sub_1000A5BD0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000A5CBC()
{
  return Hasher._finalize()();
}

uint64_t sub_1000A5DBC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000A5E1C()
{
  return RawRepresentable<>.encode(to:)();
}

void *sub_1000A5E6C(uint64_t a1)
{
  uint64_t v34 = a1;
  *(void *)&long long v33 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v33);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v30 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = _swiftEmptyArrayStorage;
  unint64_t v6 = v1;
  uint64_t v32 = v1;
  id v7 = [objc_allocWithZone((Class)FMStateCapture) init];
  aBlock[4] = sub_100655848;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000B6B9C;
  aBlock[3] = &unk_1015AB190;
  uint64_t v8 = _Block_copy(aBlock);
  swift_release();
  [v7 setStateCaptureBlock:v8];
  _Block_release(v8);
  v6[3] = v7;
  sub_10000584C();
  unsigned int v28 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v9 = *(void (**)(void))(v3 + 104);
  uint64_t v29 = v3 + 104;
  uint64_t v31 = v9;
  v9(v5);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000BEEAC((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v10 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  unint64_t v11 = (void (*)(char *, void, uint64_t))v31;
  uint64_t v12 = v32;
  v32[4] = v10;
  v11(v5, v28, v30);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  void v12[5] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_10000588C(&qword_10163A760);
  uint64_t v13 = *(void *)(type metadata accessor for DefaultConfigurationLayer() - 8);
  unint64_t v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = swift_allocObject();
  long long v33 = xmmword_101342130;
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  sub_100931050(v15 + v14);
  v12[7] = v15;
  v12[8] = 0;
  v12[9] = 0;
  v12[10] = 0;
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = v33;
  uint64_t v17 = type metadata accessor for URL();
  sub_1000BEEAC((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v18 = v34;
  uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v21 = v20;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_10000B4CC();
  *(void *)(v16 + 32) = v19;
  *(void *)(v16 + 40) = v21;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(v17 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))((uint64_t)v12 + OBJC_IVAR____TtC12searchpartyd24ConfigurationCoordinator_rootURL, v18, v17);
  char v23 = (void *)v12[5];
  type metadata accessor for QueueSynchronizer();
  swift_allocObject();
  id v24 = v23;
  uint64_t v25 = QueueSynchronizer.init(queue:)();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v18, v17);
  v12[6] = v25;
  return v12;
}

uint64_t sub_1000A645C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v58 = a3;
  uint64_t v50 = a2;
  uint64_t v57 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v62 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  Swift::String v46 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for DispatchQoS();
  uint64_t v48 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  long long v59 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_10000588C(&qword_101657CA0);
  uint64_t v55 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v54 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for ServiceStateConfigurationLayer();
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_101657850);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A74C0(0);
  sub_1000A58CC();
  uint64_t v15 = type metadata accessor for ConfigurationCoordinator();
  uint64_t v71 = (ValueMetadata *)v15;
  unint64_t v72 = (uint64_t (*)())&off_1015AB068;
  aBlock[0] = v3;
  swift_retain();
  sub_101208090((uint64_t)aBlock, (uint64_t)v14);
  swift_release();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v12 + 8);
  v16(v14, v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  sub_1000A58CC();
  swift_release();
  uint64_t v71 = &type metadata for UserDefaultsConfigurationLayer;
  unint64_t v72 = (uint64_t (*)())&off_10160CE10;
  uint64_t v17 = *(void *)(v3 + 48);
  char v63 = 3;
  uint64_t v64 = v4;
  uint64_t v65 = aBlock;
  char v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v44 = (char *)&type metadata for () + 8;
  uint64_t v45 = v17;
  QueueSynchronizer.conditionalSync<A>(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  sub_1000A5940();
  uint64_t v71 = (ValueMetadata *)v15;
  unint64_t v72 = (uint64_t (*)())&off_1015AB068;
  uint64_t v53 = (ValueMetadata *)v15;
  aBlock[0] = v4;
  swift_retain();
  sub_100F188F0((uint64_t)aBlock, (uint64_t)v14);
  swift_release();
  uint64_t v49 = v14;
  uint64_t v52 = v11;
  uint64_t v51 = v12 + 8;
  unint64_t v47 = (void (*)(uint64_t, uint64_t))v16;
  v16(v14, v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  sub_1000A5940();
  id v18 = sub_100F16154();
  id v19 = [v18 stringForKey:SPSettingsServiceStateKey];

  if (!v19)
  {
    if (qword_101636E28 != -1) {
      swift_once();
    }
    id v19 = (id)qword_10170E680;
  }
  uint64_t v43 = 0;
  uint64_t v42 = sub_100F16E78();
  sub_100F17324((uint64_t)v10 + v8[6]);
  sub_100F17C4C((uint64_t)v10 + v8[7]);
  uint64_t v20 = sub_100F17C78();
  char v22 = v21;
  sub_100F17F8C((uint64_t)v10 + v8[9]);
  id v23 = sub_100F16154();
  NSString v24 = String._bridgeToObjectiveC()();
  unsigned __int8 v25 = [v23 BOOLForKey:v24];
  swift_release();

  unint64_t v26 = v42;
  void *v10 = v19;
  v10[1] = v26;
  uint64_t v27 = (char *)v10 + v8[8];
  *(void *)uint64_t v27 = v20;
  v27[8] = v22 & 1;
  *((unsigned char *)v10 + v8[10]) = v25;
  uint64_t v71 = (ValueMetadata *)v8;
  unint64_t v72 = (uint64_t (*)())&off_1015FCDD0;
  unsigned int v28 = sub_10001D958(aBlock);
  uint64_t v29 = sub_1000BF5F8((uint64_t)v10, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for ServiceStateConfigurationLayer);
  __chkstk_darwin(v29);
  *((unsigned char *)&v41 - 48) = 4;
  *(&v41 - 5) = v4;
  *(&v41 - 4) = (uint64_t)aBlock;
  *((unsigned char *)&v41 - 24) = 0;
  *(&v41 - 2) = 0;
  *(&v41 - 1) = 0;
  QueueSynchronizer.conditionalSync<A>(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  sub_1000A5858();
  uint64_t v30 = v53;
  uint64_t v71 = v53;
  unint64_t v72 = (uint64_t (*)())&off_1015AB068;
  aBlock[0] = v4;
  swift_retain();
  uint64_t v31 = (uint64_t)v49;
  sub_100998E00((uint64_t)aBlock, (uint64_t)v49);
  swift_release();
  v47(v31, v52);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  uint64_t v71 = v30;
  unint64_t v72 = (uint64_t (*)())&off_1015AB040;
  aBlock[0] = v4;
  swift_retain();
  uint64_t v32 = v54;
  sub_100497078((uint64_t)aBlock, v54);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v32, v56);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)aBlock);
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = v50;
  uint64_t v35 = v58;
  *(void *)(v33 + 16) = v50;
  *(void *)(v33 + 24) = v35;
  unint64_t v72 = sub_1000BF68C;
  uint64_t v73 = v33;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1004B5480;
  uint64_t v71 = (ValueMetadata *)&unk_1015AB898;
  long long v36 = _Block_copy(aBlock);
  sub_1000BD0E8(v34);
  uint64_t v37 = v59;
  static DispatchQoS.unspecified.getter();
  uint64_t v69 = _swiftEmptyArrayStorage;
  sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v38 = v46;
  uint64_t v39 = v60;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v36);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v38, v39);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v61);
  sub_1000BF694((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ServiceStateConfigurationLayer);
  return swift_release();
}

uint64_t sub_1000A6CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  uint64_t v13 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v18;
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = v15;
  aBlock[4] = sub_1000BD0E4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  uint64_t aBlock[3] = &unk_1015AB8E8;
  uint64_t v16 = _Block_copy(aBlock);
  sub_1000BD0E8(a1);
  static DispatchQoS.unspecified.getter();
  char v21 = _swiftEmptyArrayStorage;
  sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v19);
  return swift_release();
}

uint64_t sub_1000A7088(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000A70B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1000A70D8()
{
  uint64_t v0 = (void *)swift_bridgeObjectRetain();
  uint64_t v1 = sub_1010AB00C(v0);
  swift_bridgeObjectRelease();
  sub_1000A71A0((uint64_t)v1, 0);
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  return os_log(_:dso:log:_:_:)();
}

uint64_t sub_1000A71A0(uint64_t a1, int a2)
{
  int v13 = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v7 = *(void *)(v2 + 56);
  *(void *)(v2 + 56) = a1;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  PropertyListEncoder.init()();
  uint64_t v14 = a1;
  sub_1000BF5A4();
  uint64_t v8 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v10 = v9;
  swift_release();
  URL.appendingPathComponent(_:isDirectory:)();
  Data.write(to:excludeFromBackup:options:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v6, v4);
  sub_10001CFB8(v8, v10);
  if (sub_100338690(v7, a1) & 1) == 0 && (v13) {
    sub_1000A7BB0(v7, a1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A74C0(char a1)
{
  uint64_t v2 = type metadata accessor for DispatchQoS();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(unsigned char *)(v11 + 24) = a1;
  aBlock[4] = sub_1000BF544;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  uint64_t aBlock[3] = &unk_1015AB848;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  return swift_release();
}

uint64_t sub_1000A771C(uint64_t a1, int a2)
{
  uint64_t v3 = type metadata accessor for DefaultConfigurationLayer();
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    int v20 = a2;
    static os_log_type_t.default.getter();
    if (qword_1016372C8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    URL.appendingPathComponent(_:isDirectory:)();
    uint64_t v11 = Data.init(contentsOf:options:)();
    unint64_t v13 = v12;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_1000BF550();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    swift_release();
    uint64_t v14 = v21;
    sub_100931050((uint64_t)v5);
    uint64_t v15 = sub_1010AB3DC((uint64_t)v5, v14);
    swift_bridgeObjectRelease();
    sub_1000BF694((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer);
    if (v20)
    {
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v17 = *(void *)(Strong + 56);
        swift_bridgeObjectRetain();
        swift_release();
        swift_beginAccess();
        if (swift_weakLoadStrong())
        {
          sub_1000A7BB0(v17, (uint64_t)v15);
          swift_release();
        }
        swift_bridgeObjectRelease();
      }
    }
    swift_beginAccess();
    uint64_t v18 = swift_weakLoadStrong();
    sub_10001CFB8(v11, v13);
    if (v18)
    {
      swift_release();
      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
      *(void *)(v18 + 56) = v15;
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  return result;
}

uint64_t sub_1000A7BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v590 = type metadata accessor for Date();
  uint64_t v588 = *(void *)(v590 - 8);
  __chkstk_darwin(v590);
  v574 = (char *)&v570 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v587 = sub_10000588C((uint64_t *)&unk_10165C700);
  uint64_t v7 = __chkstk_darwin(v587);
  uint64_t v577 = (char *)&v570 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v578 = (uint64_t)&v570 - v9;
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v573 = (uint64_t)&v570 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v586 = (uint64_t)&v570 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v579 = (uint64_t)&v570 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v572 = (uint64_t)&v570 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v584 = (uint64_t)&v570 - v20;
  __chkstk_darwin(v19);
  uint64_t v585 = (uint64_t)&v570 - v21;
  uint64_t v576 = type metadata accessor for UUID();
  uint64_t v582 = *(void *)(v576 - 8);
  __chkstk_darwin(v576);
  uint64_t v570 = (char *)&v570 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v575 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v575);
  uint64_t v583 = (char *)&v570 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_101638CF0);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v27 = (char *)&v570 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v580 = (uint64_t)&v570 - v29;
  __chkstk_darwin(v28);
  uint64_t v581 = (uint64_t)&v570 - v30;
  uint64_t v31 = type metadata accessor for Mirror();
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v570 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v3 + 40));
  static os_log_type_t.default.getter();
  sub_100F7E7D0();
  sub_101020748(0);
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v35 = swift_allocObject();
  v592[3] = type metadata accessor for DefaultConfigurationLayer();
  long long v36 = sub_10001D958(v592);
  sub_100931050((uint64_t)v36);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
  uint64_t v37 = dispatch thunk of _AnyCollectionBox._count.getter();
  uint64_t result = swift_release();
  if (__OFSUB__(v37, 1))
  {
    __break(1u);
    return result;
  }
  *(void *)(v35 + 16) = v37 - 1;
  uint64_t v39 = sub_1010AB5A0(a1);
  unint64_t v41 = v40;
  uint64_t v42 = sub_1010AB5A0(a2);
  unint64_t v44 = v43;
  char v45 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v39, v41, v42, v43);
  sub_10001CFB8(v42, v44);
  sub_10001CFB8(v39, v41);
  if ((v45 & 1) == 0)
  {
    uint64_t KeyPath = swift_getKeyPath();
    sub_1000AC29C(a2, KeyPath);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v47 = sub_1010AB5F0(a1);
  if (v47 != sub_1010AB5F0(a2))
  {
    uint64_t v48 = swift_getKeyPath();
    sub_1000ACA54(a2, v48);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AAF9C(a1);
  double v50 = v49;
  sub_1010AAF9C(a2);
  uint64_t v51 = v580;
  if (v50 != v52)
  {
    uint64_t v53 = swift_getKeyPath();
    sub_1000AD20C(a2, v53);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AB604(a1);
  double v55 = v54;
  sub_1010AB604(a2);
  if (v55 != v56)
  {
    uint64_t v57 = swift_getKeyPath();
    sub_1000AD20C(a2, v57);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v58 = sub_1010AB610(a1) & 1;
  if (v58 != (sub_1010AB610(a2) & 1))
  {
    uint64_t v59 = swift_getKeyPath();
    sub_1000AD9C4(a2, v59);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v60 = (void *)sub_1010AB61C(a1);
  uint64_t v61 = (void *)sub_1010AB61C(a2);
  char v62 = sub_100335B90(v60, v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v62 & 1) == 0)
  {
    uint64_t v63 = swift_getKeyPath();
    sub_1000AE17C(a2, v63);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v64 = sub_1010AB630(a1) & 1;
  if (v64 != (sub_1010AB630(a2) & 1))
  {
    uint64_t v65 = swift_getKeyPath();
    sub_1000AD9C4(a2, v65);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v66 = sub_1010AB63C(a1);
  uint64_t v68 = v67;
  uint64_t v69 = sub_1010AB63C(a2);
  uint64_t v571 = v27;
  if (v66 == v69 && v68 == v70)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v71 & 1) == 0)
    {
      uint64_t v72 = swift_getKeyPath();
      sub_1000AE934(a2, v72);
      swift_release();
    }
  }
  sub_1000AC0A0(v35);
  uint64_t v73 = sub_1010AB648(a1);
  uint64_t v74 = sub_1010AB648(a2);
  uint64_t v75 = (uint64_t)v583;
  if (v73 != v74)
  {
    uint64_t v76 = swift_getKeyPath();
    sub_1000AF0EC(a2, v76);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v77 = sub_1010AB65C(a1) & 1;
  if (v77 != (sub_1010AB65C(a2) & 1))
  {
    uint64_t v78 = swift_getKeyPath();
    sub_1000AD9C4(a2, v78);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v79 = sub_1010AB668(a1) & 1;
  if (v79 != (sub_1010AB668(a2) & 1))
  {
    uint64_t v80 = swift_getKeyPath();
    sub_1000AD9C4(a2, v80);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v81 = sub_1010AB674(a1);
  if (v81 != sub_1010AB674(a2))
  {
    uint64_t v82 = swift_getKeyPath();
    sub_1000AF0EC(a2, v82);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v83 = sub_1010AAFA8(a1);
  if (v83 != sub_1010AAFA8(a2))
  {
    uint64_t v84 = swift_getKeyPath();
    sub_1000AF0EC(a2, v84);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v85 = sub_1010AB688(a1);
  if (v85 != sub_1010AB688(a2))
  {
    uint64_t v86 = swift_getKeyPath();
    sub_1000AF0EC(a2, v86);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v87 = sub_1010AB69C(a1);
  if (v87 != sub_1010AB69C(a2))
  {
    uint64_t v88 = swift_getKeyPath();
    sub_1000AF0EC(a2, v88);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v89 = sub_1010AB6B0(a1);
  if (v89 != sub_1010AB6B0(a2))
  {
    uint64_t v90 = swift_getKeyPath();
    sub_1000AF0EC(a2, v90);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AB6C4(a1);
  double v92 = v91;
  sub_1010AB6C4(a2);
  if (v92 != v93)
  {
    uint64_t v94 = swift_getKeyPath();
    sub_1000AD20C(a2, v94);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v95 = sub_1010AB6D0(a1);
  if (v95 != sub_1010AB6D0(a2))
  {
    uint64_t v96 = swift_getKeyPath();
    sub_1000AF0EC(a2, v96);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v97 = sub_1010AB6E4(a1);
  if (v97 != sub_1010AB6E4(a2))
  {
    uint64_t v98 = swift_getKeyPath();
    sub_1000AF0EC(a2, v98);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v99 = sub_1010AB6F8(a1);
  if (v99 != sub_1010AB6F8(a2))
  {
    uint64_t v100 = swift_getKeyPath();
    sub_1000ACA54(a2, v100);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AB70C(a1);
  double v102 = v101;
  sub_1010AB70C(a2);
  if (v102 != v103)
  {
    uint64_t v104 = swift_getKeyPath();
    sub_1000AD20C(a2, v104);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v105 = sub_1010AB718(a1);
  if (v105 != sub_1010AB718(a2))
  {
    uint64_t v106 = swift_getKeyPath();
    sub_1000AF0EC(a2, v106);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v107 = sub_1010AB72C(a1);
  if (v107 != sub_1010AB72C(a2))
  {
    uint64_t v108 = swift_getKeyPath();
    sub_1000AF0EC(a2, v108);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v109 = sub_1010AB740(a1);
  if (v109 != sub_1010AB740(a2))
  {
    uint64_t v110 = swift_getKeyPath();
    sub_1000AF0EC(a2, v110);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v111 = sub_1010AB754(a1);
  uint64_t v112 = sub_1010AB754(a2);
  char v113 = sub_1003369DC(v111, v112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v113 & 1) == 0)
  {
    uint64_t v114 = swift_getKeyPath();
    sub_1000AF8A4(a2, v114);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v115 = sub_1010AB768(a1) & 1;
  if (v115 != (sub_1010AB768(a2) & 1))
  {
    uint64_t v116 = swift_getKeyPath();
    sub_1000AD9C4(a2, v116);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v117 = sub_1010AB774(a1);
  uint64_t v118 = sub_1010AB774(a2);
  char v119 = sub_100DF5444(v117, v118);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v119 & 1) == 0)
  {
    uint64_t v120 = swift_getKeyPath();
    sub_1000B005C(a2, v120);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v121 = sub_1010AB788(a1);
  if (v121 != sub_1010AB788(a2))
  {
    uint64_t v122 = swift_getKeyPath();
    sub_1000AF0EC(a2, v122);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v123 = sub_1010AB79C(a1);
  if (v123 != sub_1010AB79C(a2))
  {
    uint64_t v124 = swift_getKeyPath();
    sub_1000AF0EC(a2, v124);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v125 = sub_1010AB7B0(a1);
  if (v125 != sub_1010AB7B0(a2))
  {
    uint64_t v126 = swift_getKeyPath();
    sub_1000AF0EC(a2, v126);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v127 = sub_1010AB7C4(a1);
  if (v127 != sub_1010AB7C4(a2))
  {
    uint64_t v128 = swift_getKeyPath();
    sub_1000AF0EC(a2, v128);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v129 = sub_1010AB7D8(a1);
  if (v129 != sub_1010AB7D8(a2))
  {
    uint64_t v130 = swift_getKeyPath();
    sub_1000AF0EC(a2, v130);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v131 = sub_1010AB7EC(a1);
  if (v131 != sub_1010AB7EC(a2))
  {
    uint64_t v132 = swift_getKeyPath();
    sub_1000AF0EC(a2, v132);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v133 = sub_1010AB800(a1);
  if (v133 != sub_1010AB800(a2))
  {
    uint64_t v134 = swift_getKeyPath();
    sub_1000AF0EC(a2, v134);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v135 = sub_1010AB814(a1);
  if (v135 != sub_1010AB814(a2))
  {
    uint64_t v136 = swift_getKeyPath();
    sub_1000AF0EC(a2, v136);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v137 = sub_1010AB828(a1);
  if (v137 != sub_1010AB828(a2))
  {
    uint64_t v138 = swift_getKeyPath();
    sub_1000AF0EC(a2, v138);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v139 = sub_1010AB83C(a1);
  if (v139 != sub_1010AB83C(a2))
  {
    uint64_t v140 = swift_getKeyPath();
    sub_1000AF0EC(a2, v140);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v141 = sub_1010AB850(a1) & 1;
  if (v141 != (sub_1010AB850(a2) & 1))
  {
    uint64_t v142 = swift_getKeyPath();
    sub_1000AD9C4(a2, v142);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v143 = sub_1010AB85C(a1);
  if (v143 != sub_1010AB85C(a2))
  {
    uint64_t v144 = swift_getKeyPath();
    sub_1000AF0EC(a2, v144);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v145 = sub_1010AB870(a1);
  if (v145 != sub_1010AB870(a2))
  {
    uint64_t v146 = swift_getKeyPath();
    sub_1000AF0EC(a2, v146);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v147 = sub_1010AB884(a1);
  if (v147 != sub_1010AB884(a2))
  {
    uint64_t v148 = swift_getKeyPath();
    sub_1000AF0EC(a2, v148);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v149 = sub_1010AB898(a1);
  if (v149 != sub_1010AB898(a2))
  {
    uint64_t v150 = swift_getKeyPath();
    sub_1000AF0EC(a2, v150);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v151 = sub_1010AB8AC(a1);
  if (v151 != sub_1010AB8AC(a2))
  {
    uint64_t v152 = swift_getKeyPath();
    sub_1000AF0EC(a2, v152);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v153 = sub_1010AB8C0(a1);
  if (v153 != sub_1010AB8C0(a2))
  {
    uint64_t v154 = swift_getKeyPath();
    sub_1000AF0EC(a2, v154);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v155 = sub_1010AB8D4(a1);
  if (v155 != sub_1010AB8D4(a2))
  {
    uint64_t v156 = swift_getKeyPath();
    sub_1000AF0EC(a2, v156);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AB8E8(a1);
  double v158 = v157;
  sub_1010AB8E8(a2);
  if (v158 != v159)
  {
    uint64_t v160 = swift_getKeyPath();
    sub_1000AD20C(a2, v160);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AB8F4(a1);
  double v162 = v161;
  sub_1010AB8F4(a2);
  if (v162 != v163)
  {
    uint64_t v164 = swift_getKeyPath();
    sub_1000AD20C(a2, v164);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v165 = (void *)sub_1010AB900(a1);
  uint64_t v166 = (void *)sub_1010AB900(a2);
  char v167 = sub_10071BAB8();

  if ((v167 & 1) == 0)
  {
    uint64_t v168 = swift_getKeyPath();
    sub_1000B0814(a2, v168);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v169 = sub_1010AB9F8(a1);
  uint64_t v170 = sub_1010AB9F8(a2);
  char v171 = sub_100336B4C(v169, v170);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v171 & 1) == 0)
  {
    uint64_t v172 = swift_getKeyPath();
    sub_1000B0FCC(a2, v172);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v173 = sub_1010ABA0C(a1);
  if (v173 != sub_1010ABA0C(a2))
  {
    uint64_t v174 = swift_getKeyPath();
    sub_1000AF0EC(a2, v174);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v175 = sub_1010ABA20(a1);
  uint64_t v176 = sub_1010ABA20(a2);
  uint64_t v177 = v581;
  if (v175 != v176)
  {
    uint64_t v178 = swift_getKeyPath();
    sub_1000AF0EC(a2, v178);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v179 = sub_1010ABA34(a1);
  if (v179 != sub_1010ABA34(a2))
  {
    uint64_t v180 = swift_getKeyPath();
    sub_1000AF0EC(a2, v180);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v181 = sub_1010ABA48(a1);
  if (v181 != sub_1010ABA48(a2))
  {
    uint64_t v182 = swift_getKeyPath();
    sub_1000AF0EC(a2, v182);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v183 = sub_1010ABA5C(a1);
  if (v183 != sub_1010ABA5C(a2))
  {
    uint64_t v184 = swift_getKeyPath();
    sub_1000AF0EC(a2, v184);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v185 = sub_1010ABA70(a1) & 1;
  if (v185 != (sub_1010ABA70(a2) & 1))
  {
    uint64_t v186 = swift_getKeyPath();
    sub_1000AD9C4(a2, v186);
    swift_release();
  }
  uint64_t v589 = v3;
  sub_1000AC0A0(v35);
  sub_1010AAFE4(a1, v177);
  sub_1010AAFE4(a2, v51);
  uint64_t v187 = v75 + *(int *)(v575 + 48);
  sub_10001D074(v177, v75, &qword_101638CF0);
  sub_10001D074(v51, v187, &qword_101638CF0);
  uint64_t v188 = v51;
  uint64_t v189 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v582 + 48);
  uint64_t v190 = v576;
  if (v189(v75, 1, v576) == 1)
  {
    sub_10001DAB4(v188, &qword_101638CF0);
    uint64_t v75 = (uint64_t)v583;
    sub_10001DAB4(v177, &qword_101638CF0);
    int v191 = v189(v187, 1, v190);
    uint64_t v192 = v584;
    uint64_t v193 = v578;
    if (v191 == 1)
    {
      sub_10001DAB4(v75, &qword_101638CF0);
      goto LABEL_122;
    }
    goto LABEL_120;
  }
  uint64_t v194 = (uint64_t)v571;
  sub_10001D074(v75, (uint64_t)v571, &qword_101638CF0);
  if (v189(v187, 1, v190) == 1)
  {
    sub_10001DAB4(v580, &qword_101638CF0);
    sub_10001DAB4(v581, &qword_101638CF0);
    (*(void (**)(uint64_t, uint64_t))(v582 + 8))(v194, v190);
    uint64_t v192 = v584;
    uint64_t v193 = v578;
LABEL_120:
    sub_10001DAB4(v75, (uint64_t *)&unk_10166EAF0);
LABEL_121:
    uint64_t v195 = swift_getKeyPath();
    sub_1000B1784(a2, v195);
    swift_release();
    goto LABEL_122;
  }
  uint64_t v558 = v582;
  v559 = v570;
  (*(void (**)(char *, uint64_t, uint64_t))(v582 + 32))(v570, v187, v190);
  sub_1000BEEAC((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  LODWORD(v575) = dispatch thunk of static Equatable.== infix(_:_:)();
  v560 = *(void (**)(char *, uint64_t))(v558 + 8);
  v560(v559, v190);
  sub_10001DAB4(v580, &qword_101638CF0);
  sub_10001DAB4(v581, &qword_101638CF0);
  v560((char *)v194, v190);
  sub_10001DAB4(v75, &qword_101638CF0);
  uint64_t v192 = v584;
  uint64_t v193 = v578;
  if ((v575 & 1) == 0) {
    goto LABEL_121;
  }
LABEL_122:
  sub_1000AC0A0(v35);
  uint64_t v196 = v585;
  sub_1010ABA7C(a1, v585);
  sub_1010ABA7C(a2, v192);
  uint64_t v197 = v193 + *(int *)(v587 + 48);
  sub_10001D074(v196, v193, (uint64_t *)&unk_10163AC90);
  sub_10001D074(v192, v197, (uint64_t *)&unk_10163AC90);
  uint64_t v198 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v588 + 48);
  if (v198(v193, 1, v590) == 1)
  {
    sub_10001DAB4(v192, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4(v196, (uint64_t *)&unk_10163AC90);
    int v199 = v198(v197, 1, v590);
    uint64_t v200 = (uint64_t)v577;
    if (v199 == 1)
    {
      sub_10001DAB4(v193, (uint64_t *)&unk_10163AC90);
      uint64_t v201 = v579;
      goto LABEL_129;
    }
    goto LABEL_127;
  }
  uint64_t v202 = v572;
  sub_10001D074(v193, v572, (uint64_t *)&unk_10163AC90);
  if (v198(v197, 1, v590) == 1)
  {
    sub_10001DAB4(v584, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4(v585, (uint64_t *)&unk_10163AC90);
    (*(void (**)(uint64_t, uint64_t))(v588 + 8))(v202, v590);
    uint64_t v200 = (uint64_t)v577;
LABEL_127:
    sub_10001DAB4(v193, (uint64_t *)&unk_10165C700);
    uint64_t v201 = v579;
LABEL_128:
    uint64_t v203 = swift_getKeyPath();
    sub_1000B1F3C(a2, v203);
    swift_release();
    goto LABEL_129;
  }
  uint64_t v561 = v588;
  uint64_t v562 = v574;
  uint64_t v563 = v590;
  (*(void (**)(char *, uint64_t, uint64_t))(v588 + 32))(v574, v197, v590);
  sub_1000BEEAC(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
  LODWORD(v583) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v564 = *(void (**)(char *, uint64_t))(v561 + 8);
  v564(v562, v563);
  sub_10001DAB4(v584, (uint64_t *)&unk_10163AC90);
  sub_10001DAB4(v585, (uint64_t *)&unk_10163AC90);
  v564((char *)v202, v563);
  uint64_t v201 = v579;
  uint64_t v200 = (uint64_t)v577;
  sub_10001DAB4(v578, (uint64_t *)&unk_10163AC90);
  if ((v583 & 1) == 0) {
    goto LABEL_128;
  }
LABEL_129:
  sub_1000AC0A0(v35);
  uint64_t v204 = sub_1010ABAA4(a1);
  char v206 = v205;
  uint64_t v207 = sub_1010ABAA4(a2);
  if (v206)
  {
    if (v208) {
      goto LABEL_135;
    }
    goto LABEL_134;
  }
  if ((v208 & 1) != 0 || v204 != v207)
  {
LABEL_134:
    uint64_t v209 = swift_getKeyPath();
    sub_1000B26F4(a2, v209);
    swift_release();
  }
LABEL_135:
  sub_1000AC0A0(v35);
  sub_1010ABAFC(a1, v201);
  uint64_t v210 = v586;
  sub_1010ABAFC(a2, v586);
  uint64_t v211 = v200 + *(int *)(v587 + 48);
  sub_10001D074(v201, v200, (uint64_t *)&unk_10163AC90);
  sub_10001D074(v210, v211, (uint64_t *)&unk_10163AC90);
  if (v198(v200, 1, v590) != 1)
  {
    uint64_t v212 = v573;
    sub_10001D074(v200, v573, (uint64_t *)&unk_10163AC90);
    if (v198(v211, 1, v590) != 1)
    {
      uint64_t v565 = v588;
      uint64_t v566 = v574;
      uint64_t v567 = v590;
      (*(void (**)(char *, uint64_t, uint64_t))(v588 + 32))(v574, v211, v590);
      sub_1000BEEAC(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
      char v568 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v569 = *(void (**)(char *, uint64_t))(v565 + 8);
      v569(v566, v567);
      sub_10001DAB4(v586, (uint64_t *)&unk_10163AC90);
      sub_10001DAB4(v579, (uint64_t *)&unk_10163AC90);
      v569((char *)v212, v567);
      sub_10001DAB4(v200, (uint64_t *)&unk_10163AC90);
      if (v568) {
        goto LABEL_142;
      }
      goto LABEL_141;
    }
    sub_10001DAB4(v586, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4(v201, (uint64_t *)&unk_10163AC90);
    (*(void (**)(uint64_t, uint64_t))(v588 + 8))(v212, v590);
LABEL_140:
    sub_10001DAB4(v200, (uint64_t *)&unk_10165C700);
LABEL_141:
    uint64_t v213 = swift_getKeyPath();
    sub_1000B1F3C(a2, v213);
    swift_release();
    goto LABEL_142;
  }
  sub_10001DAB4(v210, (uint64_t *)&unk_10163AC90);
  sub_10001DAB4(v201, (uint64_t *)&unk_10163AC90);
  if (v198(v211, 1, v590) != 1) {
    goto LABEL_140;
  }
  sub_10001DAB4(v200, (uint64_t *)&unk_10163AC90);
LABEL_142:
  sub_1000AC0A0(v35);
  uint64_t v214 = sub_1010ABB94(a1);
  if (v214 != sub_1010ABB94(a2))
  {
    uint64_t v215 = swift_getKeyPath();
    sub_1000AF0EC(a2, v215);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v216 = sub_1010ABBA8(a1);
  if (v216 != sub_1010ABBA8(a2))
  {
    uint64_t v217 = swift_getKeyPath();
    sub_1000AF0EC(a2, v217);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABBBC(a1);
  double v219 = v218;
  sub_1010ABBBC(a2);
  if (v219 != v220)
  {
    uint64_t v221 = swift_getKeyPath();
    sub_1000AD20C(a2, v221);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABBC8(a1);
  double v223 = v222;
  sub_1010ABBC8(a2);
  if (v223 != v224)
  {
    uint64_t v225 = swift_getKeyPath();
    sub_1000AD20C(a2, v225);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABBD4(a1);
  double v227 = v226;
  sub_1010ABBD4(a2);
  if (v227 != v228)
  {
    uint64_t v229 = swift_getKeyPath();
    sub_1000AD20C(a2, v229);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABBE0(a1);
  double v231 = v230;
  sub_1010ABBE0(a2);
  if (v231 != v232)
  {
    uint64_t v233 = swift_getKeyPath();
    sub_1000AD20C(a2, v233);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABBEC(a1, (uint64_t)v591);
  sub_1010ABBEC(a2, (uint64_t)v592);
  char v234 = _s12searchpartyd19AllMacBeaconConfigsV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v591, (uint64_t)v592);
  sub_1000BDB58((uint64_t)v592);
  sub_1000BDB58((uint64_t)v591);
  if ((v234 & 1) == 0)
  {
    uint64_t v235 = swift_getKeyPath();
    sub_1000B2EAC(a2, v235);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v236 = sub_1010ABC7C(a1) & 1;
  if (v236 != (sub_1010ABC7C(a2) & 1))
  {
    uint64_t v237 = swift_getKeyPath();
    sub_1000AD9C4(a2, v237);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v238 = sub_1010ABC88(a1) & 1;
  if (v238 != (sub_1010ABC88(a2) & 1))
  {
    uint64_t v239 = swift_getKeyPath();
    sub_1000AD9C4(a2, v239);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v240 = sub_1010ABC94(a1) & 1;
  if (v240 != (sub_1010ABC94(a2) & 1))
  {
    uint64_t v241 = swift_getKeyPath();
    sub_1000AD9C4(a2, v241);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABCA0(a1);
  double v243 = v242;
  sub_1010ABCA0(a2);
  if (v243 != v244)
  {
    uint64_t v245 = swift_getKeyPath();
    sub_1000AD20C(a2, v245);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABCAC(a1);
  double v247 = v246;
  sub_1010ABCAC(a2);
  if (v247 != v248)
  {
    uint64_t v249 = swift_getKeyPath();
    sub_1000AD20C(a2, v249);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABCB8(a1);
  double v251 = v250;
  sub_1010ABCB8(a2);
  if (v251 != v252)
  {
    uint64_t v253 = swift_getKeyPath();
    sub_1000AD20C(a2, v253);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABCC4(a1);
  double v255 = v254;
  sub_1010ABCC4(a2);
  if (v255 != v256)
  {
    uint64_t v257 = swift_getKeyPath();
    sub_1000AD20C(a2, v257);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABCD0(a1);
  double v259 = v258;
  sub_1010ABCD0(a2);
  if (v259 != v260)
  {
    uint64_t v261 = swift_getKeyPath();
    sub_1000AD20C(a2, v261);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABCDC(a1);
  double v263 = v262;
  sub_1010ABCDC(a2);
  if (v263 != v264)
  {
    uint64_t v265 = swift_getKeyPath();
    sub_1000AD20C(a2, v265);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABCE8(a1);
  double v267 = v266;
  sub_1010ABCE8(a2);
  if (v267 != v268)
  {
    uint64_t v269 = swift_getKeyPath();
    sub_1000AD20C(a2, v269);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABCF4(a1);
  double v271 = v270;
  sub_1010ABCF4(a2);
  if (v271 != v272)
  {
    uint64_t v273 = swift_getKeyPath();
    sub_1000AD20C(a2, v273);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v274 = sub_1010ABD00(a1);
  uint64_t v276 = v275;
  if (v274 == sub_1010ABD00(a2) && v276 == v277)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v278 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v278 & 1) == 0)
    {
      uint64_t v279 = swift_getKeyPath();
      sub_1000AE934(a2, v279);
      swift_release();
    }
  }
  sub_1000AC0A0(v35);
  uint64_t v280 = sub_1010ABD0C(a1);
  if (v280 != sub_1010ABD0C(a2))
  {
    uint64_t v281 = swift_getKeyPath();
    sub_1000AF0EC(a2, v281);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v282 = sub_1010ABD20(a1);
  uint64_t v284 = v283;
  if (v282 == sub_1010ABD20(a2) && v284 == v285)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v286 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v286 & 1) == 0)
    {
      uint64_t v287 = swift_getKeyPath();
      sub_1000AE934(a2, v287);
      swift_release();
    }
  }
  sub_1000AC0A0(v35);
  uint64_t v288 = sub_1010ABD2C(a1);
  if (v288 != sub_1010ABD2C(a2))
  {
    uint64_t v289 = swift_getKeyPath();
    sub_1000AF0EC(a2, v289);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v290 = (void *)sub_1010ABD40(a1);
  v291 = (void *)sub_1010ABD40(a2);
  BOOL v292 = sub_100336C24(v290, v291);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v292)
  {
    uint64_t v293 = swift_getKeyPath();
    sub_1000B3664(a2, v293);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v294 = sub_1010ABD54(a1);
  uint64_t v296 = v295;
  if (v294 == sub_1010ABD54(a2) && v296 == v297)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v298 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v298 & 1) == 0)
    {
      uint64_t v299 = swift_getKeyPath();
      sub_1000AE934(a2, v299);
      swift_release();
    }
  }
  sub_1000AC0A0(v35);
  sub_1010ABD60(a1);
  double v301 = v300;
  sub_1010ABD60(a2);
  if (v301 != v302)
  {
    uint64_t v303 = swift_getKeyPath();
    sub_1000AD20C(a2, v303);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v304 = sub_1010ABD6C(a1) & 1;
  if (v304 != (sub_1010ABD6C(a2) & 1))
  {
    uint64_t v305 = swift_getKeyPath();
    sub_1000AD9C4(a2, v305);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v306 = sub_1010ABD78(a1) & 1;
  if (v306 != (sub_1010ABD78(a2) & 1))
  {
    uint64_t v307 = swift_getKeyPath();
    sub_1000AD9C4(a2, v307);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v308 = sub_1010ABD84(a1) & 1;
  if (v308 != (sub_1010ABD84(a2) & 1))
  {
    uint64_t v309 = swift_getKeyPath();
    sub_1000AD9C4(a2, v309);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v310 = sub_1010ABD90(a1) & 1;
  if (v310 != (sub_1010ABD90(a2) & 1))
  {
    uint64_t v311 = swift_getKeyPath();
    sub_1000AD9C4(a2, v311);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v312 = sub_1010ABD9C(a1);
  if (v312 != sub_1010ABD9C(a2))
  {
    uint64_t v313 = swift_getKeyPath();
    sub_1000AF0EC(a2, v313);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v314 = sub_1010ABDB0(a1);
  if (v314 != sub_1010ABDB0(a2))
  {
    uint64_t v315 = swift_getKeyPath();
    sub_1000AF0EC(a2, v315);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v316 = sub_1010ABDC4(a1);
  if (v316 != sub_1010ABDC4(a2))
  {
    uint64_t v317 = swift_getKeyPath();
    sub_1000AF0EC(a2, v317);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v318 = sub_1010ABDD8(a1);
  if (v318 != sub_1010ABDD8(a2))
  {
    uint64_t v319 = swift_getKeyPath();
    sub_1000AF0EC(a2, v319);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v320 = sub_1010ABDEC(a1);
  if (v320 != sub_1010ABDEC(a2))
  {
    uint64_t v321 = swift_getKeyPath();
    sub_1000AF0EC(a2, v321);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABE00(a1);
  double v323 = v322;
  sub_1010ABE00(a2);
  if (v323 != v324)
  {
    uint64_t v325 = swift_getKeyPath();
    sub_1000AD20C(a2, v325);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABE0C(a1);
  double v327 = v326;
  sub_1010ABE0C(a2);
  if (v327 != v328)
  {
    uint64_t v329 = swift_getKeyPath();
    sub_1000AD20C(a2, v329);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABE18(a1);
  double v331 = v330;
  sub_1010ABE18(a2);
  if (v331 != v332)
  {
    uint64_t v333 = swift_getKeyPath();
    sub_1000AD20C(a2, v333);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v334 = sub_1010AAFD0(a1);
  if (v334 != sub_1010AAFD0(a2))
  {
    uint64_t v335 = swift_getKeyPath();
    sub_1000AF0EC(a2, v335);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v336 = sub_1010ABE24(a1);
  if (v336 != sub_1010ABE24(a2))
  {
    uint64_t v337 = swift_getKeyPath();
    sub_1000AF0EC(a2, v337);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v338 = sub_1010ABE38(a1);
  if (v338 != sub_1010ABE38(a2))
  {
    uint64_t v339 = swift_getKeyPath();
    sub_1000AF0EC(a2, v339);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v340 = sub_1010ABE4C(a1);
  if (v340 != sub_1010ABE4C(a2))
  {
    uint64_t v341 = swift_getKeyPath();
    sub_1000AF0EC(a2, v341);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABE60(a1);
  double v343 = v342;
  sub_1010ABE60(a2);
  if (v343 != v344)
  {
    uint64_t v345 = swift_getKeyPath();
    sub_1000AD20C(a2, v345);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABE6C(a1);
  double v347 = v346;
  sub_1010ABE6C(a2);
  if (v347 != v348)
  {
    uint64_t v349 = swift_getKeyPath();
    sub_1000AD20C(a2, v349);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v350 = sub_1010ABE78(a1);
  if (v350 != sub_1010ABE78(a2))
  {
    uint64_t v351 = swift_getKeyPath();
    sub_1000AF0EC(a2, v351);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v352 = sub_1010ABE8C(a1);
  if (v352 != sub_1010ABE8C(a2))
  {
    uint64_t v353 = swift_getKeyPath();
    sub_1000AF0EC(a2, v353);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v354 = sub_1010ABEA0(a1);
  if (v354 != sub_1010ABEA0(a2))
  {
    uint64_t v355 = swift_getKeyPath();
    sub_1000AF0EC(a2, v355);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v356 = sub_1010ABEB4(a1);
  if (v356 != sub_1010ABEB4(a2))
  {
    uint64_t v357 = swift_getKeyPath();
    sub_1000AF0EC(a2, v357);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v358 = sub_1010ABEC8(a1);
  if (v358 != sub_1010ABEC8(a2))
  {
    uint64_t v359 = swift_getKeyPath();
    sub_1000AF0EC(a2, v359);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v360 = sub_1010ABEDC(a1);
  if (v360 != sub_1010ABEDC(a2))
  {
    uint64_t v361 = swift_getKeyPath();
    sub_1000AF0EC(a2, v361);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v362 = sub_1010ABEF0(a1);
  if (v362 != sub_1010ABEF0(a2))
  {
    uint64_t v363 = swift_getKeyPath();
    sub_1000AF0EC(a2, v363);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v364 = sub_1010ABF04(a1);
  if (v364 != sub_1010ABF04(a2))
  {
    uint64_t v365 = swift_getKeyPath();
    sub_1000AF0EC(a2, v365);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABF18(a1);
  double v367 = v366;
  sub_1010ABF18(a2);
  if (v367 != v368)
  {
    uint64_t v369 = swift_getKeyPath();
    sub_1000AD20C(a2, v369);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v370 = sub_1010ABF24(a1) & 1;
  if (v370 != (sub_1010ABF24(a2) & 1))
  {
    uint64_t v371 = swift_getKeyPath();
    sub_1000AD9C4(a2, v371);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABF30(a1);
  double v373 = v372;
  sub_1010ABF30(a2);
  if (v373 != v374)
  {
    uint64_t v375 = swift_getKeyPath();
    sub_1000AD20C(a2, v375);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABF3C(a1);
  double v377 = v376;
  sub_1010ABF3C(a2);
  if (v377 != v378)
  {
    uint64_t v379 = swift_getKeyPath();
    sub_1000AD20C(a2, v379);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v380 = sub_1010ABF48(a1);
  if (v380 != sub_1010ABF48(a2))
  {
    uint64_t v381 = swift_getKeyPath();
    sub_1000AF0EC(a2, v381);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v382 = sub_1010ABF5C(a1) & 1;
  if (v382 != (sub_1010ABF5C(a2) & 1))
  {
    uint64_t v383 = swift_getKeyPath();
    sub_1000AD9C4(a2, v383);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v384 = sub_1010ABF68(a1) & 1;
  if (v384 != (sub_1010ABF68(a2) & 1))
  {
    uint64_t v385 = swift_getKeyPath();
    sub_1000AD9C4(a2, v385);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v386 = sub_1010ABF74(a1) & 1;
  if (v386 != (sub_1010ABF74(a2) & 1))
  {
    uint64_t v387 = swift_getKeyPath();
    sub_1000AD9C4(a2, v387);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v388 = sub_1010ABF80(a1);
  if (v388 != sub_1010ABF80(a2))
  {
    uint64_t v389 = swift_getKeyPath();
    sub_1000AF0EC(a2, v389);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABF94(a1);
  double v391 = v390;
  sub_1010ABF94(a2);
  if (v391 != v392)
  {
    uint64_t v393 = swift_getKeyPath();
    sub_1000AD20C(a2, v393);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABFA0(a1);
  double v395 = v394;
  sub_1010ABFA0(a2);
  if (v395 != v396)
  {
    uint64_t v397 = swift_getKeyPath();
    sub_1000AD20C(a2, v397);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v398 = sub_1010ABFAC(a1);
  if (v398 != sub_1010ABFAC(a2))
  {
    uint64_t v399 = swift_getKeyPath();
    sub_1000B3E1C(a2, v399);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v400 = sub_1010ABFC0(a1);
  if (v400 != sub_1010ABFC0(a2))
  {
    uint64_t v401 = swift_getKeyPath();
    sub_1000B3E1C(a2, v401);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v402 = sub_1010ABFD4(a1);
  if (v402 != sub_1010ABFD4(a2))
  {
    uint64_t v403 = swift_getKeyPath();
    sub_1000B3E1C(a2, v403);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v404 = sub_1010ABFE8(a1);
  if (v404 != sub_1010ABFE8(a2))
  {
    uint64_t v405 = swift_getKeyPath();
    sub_1000B3E1C(a2, v405);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010ABFFC(a1);
  double v407 = v406;
  sub_1010ABFFC(a2);
  if (v407 != v408)
  {
    uint64_t v409 = swift_getKeyPath();
    sub_1000AD20C(a2, v409);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v410 = sub_1010AC008(a1) & 1;
  if (v410 != (sub_1010AC008(a2) & 1))
  {
    uint64_t v411 = swift_getKeyPath();
    sub_1000AD9C4(a2, v411);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC014(a1);
  double v413 = v412;
  sub_1010AC014(a2);
  if (v413 != v414)
  {
    uint64_t v415 = swift_getKeyPath();
    sub_1000AD20C(a2, v415);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC020(a1);
  double v417 = v416;
  sub_1010AC020(a2);
  if (v417 != v418)
  {
    uint64_t v419 = swift_getKeyPath();
    sub_1000AD20C(a2, v419);
    swift_release();
  }
  sub_1000AC0A0(v35);
  long long v420 = (void *)sub_1010AC02C(a1);
  v421 = (void *)sub_1010AC02C(a2);
  BOOL v422 = sub_100336C24(v420, v421);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v422)
  {
    uint64_t v423 = swift_getKeyPath();
    sub_1000B3664(a2, v423);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v424 = sub_1010AC040(a1) & 1;
  if (v424 != (sub_1010AC040(a2) & 1))
  {
    uint64_t v425 = swift_getKeyPath();
    sub_1000AD9C4(a2, v425);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v426 = sub_1010AC04C(a1) & 1;
  if (v426 != (sub_1010AC04C(a2) & 1))
  {
    uint64_t v427 = swift_getKeyPath();
    sub_1000AD9C4(a2, v427);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v428 = sub_1010AC058(a1);
  uint64_t v429 = sub_1010AC058(a2);
  char v430 = sub_100DF5A28(v428, v429);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v430 & 1) == 0)
  {
    uint64_t v431 = swift_getKeyPath();
    sub_1000B45D4(a2, v431);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC168(a1);
  double v433 = v432;
  sub_1010AC168(a2);
  if (v433 != v434)
  {
    uint64_t v435 = swift_getKeyPath();
    sub_1000AD20C(a2, v435);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC174(a1);
  double v437 = v436;
  sub_1010AC174(a2);
  if (v437 != v438)
  {
    uint64_t v439 = swift_getKeyPath();
    sub_1000AD20C(a2, v439);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v440 = sub_1010AC180(a1) & 1;
  if (v440 != (sub_1010AC180(a2) & 1))
  {
    uint64_t v441 = swift_getKeyPath();
    sub_1000AD9C4(a2, v441);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v442 = sub_1010AC18C(a1) & 1;
  if (v442 != (sub_1010AC18C(a2) & 1))
  {
    uint64_t v443 = swift_getKeyPath();
    sub_1000AD9C4(a2, v443);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v444 = sub_1010AC198(a1);
  if (v444 != sub_1010AC198(a2))
  {
    uint64_t v445 = swift_getKeyPath();
    sub_1000ACA54(a2, v445);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v446 = sub_1010AC1AC(a1);
  if (v446 != sub_1010AC1AC(a2))
  {
    uint64_t v447 = swift_getKeyPath();
    sub_1000ACA54(a2, v447);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v448 = sub_1010AC1C0(a1);
  if (v448 != sub_1010AC1C0(a2))
  {
    uint64_t v449 = swift_getKeyPath();
    sub_1000ACA54(a2, v449);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v450 = sub_1010AC1D4(a1);
  if (v450 != sub_1010AC1D4(a2))
  {
    uint64_t v451 = swift_getKeyPath();
    sub_1000ACA54(a2, v451);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v452 = sub_1010AAFBC(a1);
  if (v452 != sub_1010AAFBC(a2))
  {
    uint64_t v453 = swift_getKeyPath();
    sub_1000ACA54(a2, v453);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v454 = sub_1010AC1E8(a1);
  if (v454 != sub_1010AC1E8(a2))
  {
    uint64_t v455 = swift_getKeyPath();
    sub_1000ACA54(a2, v455);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v456 = sub_1010AC1FC(a1);
  if (v456 != sub_1010AC1FC(a2))
  {
    uint64_t v457 = swift_getKeyPath();
    sub_1000ACA54(a2, v457);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v458 = sub_1010AC210(a1);
  if (v458 != sub_1010AC210(a2))
  {
    uint64_t v459 = swift_getKeyPath();
    sub_1000ACA54(a2, v459);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v460 = sub_1010AC224(a1);
  if (v460 != sub_1010AC224(a2))
  {
    uint64_t v461 = swift_getKeyPath();
    sub_1000ACA54(a2, v461);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v462 = sub_1010AC238(a1);
  if (v462 != sub_1010AC238(a2))
  {
    uint64_t v463 = swift_getKeyPath();
    sub_1000ACA54(a2, v463);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v464 = sub_1010AC24C(a1);
  if (v464 != sub_1010AC24C(a2))
  {
    uint64_t v465 = swift_getKeyPath();
    sub_1000ACA54(a2, v465);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v466 = sub_1010AC260(a1);
  if (v466 != sub_1010AC260(a2))
  {
    uint64_t v467 = swift_getKeyPath();
    sub_1000ACA54(a2, v467);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v468 = sub_1010AC274(a1);
  if (v468 != sub_1010AC274(a2))
  {
    uint64_t v469 = swift_getKeyPath();
    sub_1000ACA54(a2, v469);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v470 = sub_1010AC288(a1);
  if (v470 != sub_1010AC288(a2))
  {
    uint64_t v471 = swift_getKeyPath();
    sub_1000ACA54(a2, v471);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v472 = sub_1010AC29C(a1);
  if (v472 != sub_1010AC29C(a2))
  {
    uint64_t v473 = swift_getKeyPath();
    sub_1000ACA54(a2, v473);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v474 = sub_1010AC2B0(a1);
  if (v474 != sub_1010AC2B0(a2))
  {
    uint64_t v475 = swift_getKeyPath();
    sub_1000ACA54(a2, v475);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC2C4(a1);
  double v477 = v476;
  sub_1010AC2C4(a2);
  if (v477 != v478)
  {
    uint64_t v479 = swift_getKeyPath();
    sub_1000AD20C(a2, v479);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC2D0(a1);
  double v481 = v480;
  sub_1010AC2D0(a2);
  if (v481 != v482)
  {
    uint64_t v483 = swift_getKeyPath();
    sub_1000AD20C(a2, v483);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v484 = sub_1010AC2DC(a1) & 1;
  if (v484 != (sub_1010AC2DC(a2) & 1))
  {
    uint64_t v485 = swift_getKeyPath();
    sub_1000AD9C4(a2, v485);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC2E8(a1);
  double v487 = v486;
  sub_1010AC2E8(a2);
  if (v487 != v488)
  {
    uint64_t v489 = swift_getKeyPath();
    sub_1000AD20C(a2, v489);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AAF84(a1);
  double v491 = v490;
  sub_1010AAF84(a2);
  if (v491 != v492)
  {
    uint64_t v493 = swift_getKeyPath();
    sub_1000AD20C(a2, v493);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC2F4(a1);
  double v495 = v494;
  sub_1010AC2F4(a2);
  if (v495 != v496)
  {
    uint64_t v497 = swift_getKeyPath();
    sub_1000AD20C(a2, v497);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v498 = sub_1010AC300(a1);
  uint64_t v500 = v499;
  if (v498 == sub_1010AC300(a2) && v500 == v501)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v502 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v502 & 1) == 0)
    {
      uint64_t v503 = swift_getKeyPath();
      sub_1000AE934(a2, v503);
      swift_release();
    }
  }
  sub_1000AC0A0(v35);
  uint64_t v504 = sub_1010AC410(a1);
  if (v504 != sub_1010AC410(a2))
  {
    uint64_t v505 = swift_getKeyPath();
    sub_1000ACA54(a2, v505);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v506 = sub_1010AAF90(a1) & 1;
  if (v506 != (sub_1010AAF90(a2) & 1))
  {
    uint64_t v507 = swift_getKeyPath();
    sub_1000AD9C4(a2, v507);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC424(a1);
  double v509 = v508;
  sub_1010AC424(a2);
  if (v509 != v510)
  {
    uint64_t v511 = swift_getKeyPath();
    sub_1000AD20C(a2, v511);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC430(a1);
  double v513 = v512;
  sub_1010AC430(a2);
  if (v513 != v514)
  {
    uint64_t v515 = swift_getKeyPath();
    sub_1000AD20C(a2, v515);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v516 = sub_1010AC43C(a1) & 1;
  if (v516 != (sub_1010AC43C(a2) & 1))
  {
    uint64_t v517 = swift_getKeyPath();
    sub_1000AD9C4(a2, v517);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v518 = sub_1010AC448(a1) & 1;
  if (v518 != (sub_1010AC448(a2) & 1))
  {
    uint64_t v519 = swift_getKeyPath();
    sub_1000AD9C4(a2, v519);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v520 = sub_1010AC454(a1);
  if (v520 != sub_1010AC454(a2))
  {
    uint64_t v521 = swift_getKeyPath();
    sub_1000B4D8C(a2, v521);
    swift_release();
  }
  sub_1000AC0A0(v35);
  uint64_t v522 = sub_1010AC54C(a1);
  if (v522 != sub_1010AC54C(a2))
  {
    uint64_t v523 = swift_getKeyPath();
    sub_1000AF0EC(a2, v523);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC65C(a1);
  double v525 = v524;
  sub_1010AC65C(a2);
  if (v525 != v526)
  {
    uint64_t v527 = swift_getKeyPath();
    sub_1000AD20C(a2, v527);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC668(a1);
  double v529 = v528;
  sub_1010AC668(a2);
  if (v529 != v530)
  {
    uint64_t v531 = swift_getKeyPath();
    sub_1000AD20C(a2, v531);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC674(a1);
  double v533 = v532;
  sub_1010AC674(a2);
  if (v533 != v534)
  {
    uint64_t v535 = swift_getKeyPath();
    sub_1000AD20C(a2, v535);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC680(a1);
  double v537 = v536;
  sub_1010AC680(a2);
  if (v537 != v538)
  {
    uint64_t v539 = swift_getKeyPath();
    sub_1000AD20C(a2, v539);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC68C(a1);
  double v541 = v540;
  sub_1010AC68C(a2);
  if (v541 != v542)
  {
    uint64_t v543 = swift_getKeyPath();
    sub_1000AD20C(a2, v543);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC698(a1);
  double v545 = v544;
  sub_1010AC698(a2);
  if (v545 != v546)
  {
    uint64_t v547 = swift_getKeyPath();
    sub_1000AD20C(a2, v547);
    swift_release();
  }
  sub_1000AC0A0(v35);
  int v548 = sub_1010AC6A4(a1) & 1;
  if (v548 != (sub_1010AC6A4(a2) & 1))
  {
    uint64_t v549 = swift_getKeyPath();
    sub_1000AD9C4(a2, v549);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC7AC(a1);
  double v551 = v550;
  sub_1010AC7AC(a2);
  if (v551 != v552)
  {
    uint64_t v553 = swift_getKeyPath();
    sub_1000AD20C(a2, v553);
    swift_release();
  }
  sub_1000AC0A0(v35);
  sub_1010AC7B8(a1);
  double v555 = v554;
  sub_1010AC7B8(a2);
  if (v555 != v556)
  {
    uint64_t v557 = swift_getKeyPath();
    sub_1000AD20C(a2, v557);
    swift_release();
  }
  sub_1000AC0A0(v35);
  return swift_release();
}

uint64_t sub_1000AC0A0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 16);
  BOOL v5 = __OFSUB__(v4, 1);
  uint64_t v6 = v4 - 1;
  if (v5) {
    __break(1u);
  }
  else {
    *uint64_t v2 = v6;
  }
  return result;
}

double sub_1000AC0F4@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t KeyPath = swift_getKeyPath();
  sub_100FCBD58(KeyPath, v3, &v6);
  swift_release();
  double result = *(double *)&v6;
  *a2 = v6;
  return result;
}

uint64_t sub_1000AC154@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  uint64_t v2 = sub_1010ACB14();
  char v4 = v3;
  uint64_t result = swift_release();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1000AC1B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_1010AD4B8(v3, a2);

  return swift_release();
}

__n128 sub_1000AC20C@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t KeyPath = swift_getKeyPath();
  sub_100FCC0B4(KeyPath, v3, (uint64_t)v12);
  swift_release();
  uint64_t v5 = v13;
  uint64_t v6 = v17;
  __n128 result = v14;
  long long v8 = v15;
  long long v9 = v16;
  long long v10 = v12[1];
  long long v11 = v12[2];
  *(_OWORD *)a2 = v12[0];
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 48) = v5;
  *(__n128 *)(a2 + 56) = result;
  *(_OWORD *)(a2 + 72) = v8;
  *(_OWORD *)(a2 + 88) = v9;
  *(void *)(a2 + 104) = v6;
  return result;
}

uint64_t sub_1000AC29C(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163AC20);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF4E8;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB7F8;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000ACA54(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163AC18);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF3B4;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB7A8;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AD20C(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163AC10);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF390;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB758;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AD9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163AC08);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF36C;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB708;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AE17C(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163AC00);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF348;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB6B8;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AE934(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163ABF8);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF324;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB668;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AF0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163ABF0);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF300;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB618;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AF8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163ABE0);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF2DC;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB5C8;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B005C(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163ABD0);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF2B8;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB578;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B0814(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163ABC8);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF218;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB528;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B0FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163ABB8);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF1F4;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB4D8;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B1784(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163ABB0);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF1D0;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB488;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B1F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163ABA8);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF154;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB438;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B26F4(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163AB98);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF0D0;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB3E8;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B2EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163AB90);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF050;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB398;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B3664(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163AB80);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF02C;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB348;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B3E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163AB78);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BF008;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB2F8;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B45D4(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163AB68);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BEF34;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB2A8;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B4D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = a1;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags();
  char v45 = *(void (***)(char *, uint64_t))(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  unint64_t v44 = *(void (***)(char *, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v65 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  char v62 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v67 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v61 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = v12;
  __chkstk_darwin(v11);
  int v64 = (char *)v40 - v13;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  sub_10000588C(&qword_10163AB58);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = aBlock[0];
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  aBlock[0] = a2;
  swift_retain();
  sub_10000588C(&qword_10163AB60);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v14 + 16);
  if (v19)
  {
    unint64_t v20 = sub_10000584C();
    uint64_t v21 = v66 + 16;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    unint64_t v58 = v20;
    uint64_t v22 = *(unsigned __int8 *)(v66 + 80);
    v40[1] = v14;
    uint64_t v23 = (char *)(v14 + ((v22 + 32) & ~v22));
    uint64_t v56 = *(void *)(v66 + 72);
    double v55 = (void (**)(char *, void, uint64_t))(v8 + 104);
    double v54 = (void (**)(char *, uint64_t))(v8 + 8);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v51 = v22 | 7;
    uint64_t v53 = (v22 + 16) & ~v22;
    unint64_t v50 = (v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = v49 + 8;
    uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v66 + 32);
    Swift::String v46 = v70;
    ++v45;
    ++v44;
    unint64_t v43 = v5;
    uint64_t v42 = v6;
    unint64_t v41 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v24 = v64;
    uint64_t v25 = v67;
    do
    {
      uint64_t v26 = v25;
      uint64_t v27 = v57;
      v57(v24, v23, v26);
      uint64_t v29 = v62;
      uint64_t v28 = v63;
      (*v55)(v62, v52, v63);
      uint64_t v66 = static OS_dispatch_queue.global(qos:)();
      (*v54)(v29, v28);
      uint64_t v30 = v61;
      v27(v61, v24, v67);
      uint64_t v31 = swift_allocObject();
      (*v47)(v31 + v53, v30, v67);
      *(void *)(v31 + v50) = v59;
      *(void *)(v31 + v49) = a2;
      v70[2] = sub_1000BEF10;
      v70[3] = v31;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v70[0] = sub_1004B5480;
      v70[1] = &unk_1015AB258;
      uint64_t v32 = v21;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v68 = _swiftEmptyArrayStorage;
      sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v43;
      uint64_t v35 = v60;
      long long v36 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v37 = (void *)v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      uint64_t v25 = v67;
      uint64_t v38 = v33;
      uint64_t v21 = v32;
      uint64_t v24 = v64;
      _Block_release(v38);

      (*v45)(v34, v35);
      (*v44)(v36, v42);
      (*v41)(v24, v25);
      swift_release();
      v23 += v56;
      --v19;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B5544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000588C((uint64_t *)&unk_1016488F0);
  Subscription.subscriber.getter();
  uint64_t v5 = v11;
  uint64_t v6 = v12;
  sub_10001CD44(v10, v11);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8);
  type metadata accessor for SPServiceState(0);
  v7(a2, a3, v8, v5, v6);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v10);
}

uint64_t sub_1000B55EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_10000588C((uint64_t *)&unk_1016488F0);
  Subscription.subscriber.getter();
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  sub_10001CD44(v12, v13);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8);
  uint64_t v10 = sub_10000588C(a4);
  v9(a2, a3, v10, v7, v8);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v12);
}

uint64_t sub_1000B5698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10000588C((uint64_t *)&unk_1016488F0);
  Subscription.subscriber.getter();
  uint64_t v7 = v11;
  uint64_t v8 = v12;
  sub_10001CD44(v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8))(a2, a3, a4, v7, v8);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v10);
}

uint64_t sub_1000B5734(char a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  int v36 = a4;
  uint64_t v34 = a3;
  uint64_t v37 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  __chkstk_darwin(v7);
  unint64_t v43 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v9 - 8);
  uint64_t v42 = v9;
  __chkstk_darwin(v9);
  unint64_t v40 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DefaultConfigurationLayer();
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  LOBYTE(aBlock[0]) = a1;
  uint64_t v18 = String.init<A>(describing:)();
  uint64_t v20 = v19;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_10000B4CC();
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v20;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v37 + 56);
  sub_10001D010(v34, (uint64_t)aBlock);
  swift_bridgeObjectRetain();
  sub_100931F64(aBlock, a1, (uint64_t)v16);
  uint64_t v22 = sub_1010AB3DC((uint64_t)v16, v21);
  swift_bridgeObjectRelease();
  sub_1000BF694((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer);
  sub_1000A71A0((uint64_t)v22, v36 & 1);
  swift_bridgeObjectRelease();
  sub_10000584C();
  uint64_t v23 = v35;
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v35);
  uint64_t v24 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v23);
  uint64_t v25 = swift_allocObject();
  uint64_t v27 = v38;
  uint64_t v26 = v39;
  *(void *)(v25 + 16) = v38;
  *(void *)(v25 + 24) = v26;
  aBlock[4] = sub_1000BD0E4;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  uint64_t aBlock[3] = &unk_1015AB1E0;
  uint64_t v28 = _Block_copy(aBlock);
  sub_1000BD0E8(v27);
  uint64_t v29 = v40;
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_1000BEEAC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v30 = v43;
  uint64_t v31 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v42);
  return swift_release();
}

id *sub_1000B5C7C()
{
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC12searchpartyd24ConfigurationCoordinator_rootURL;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1000B5D28()
{
  sub_1000B5C7C();

  return swift_deallocClassInstance();
}

uint64_t sub_1000B5D80()
{
  return type metadata accessor for ConfigurationCoordinator();
}

uint64_t type metadata accessor for ConfigurationCoordinator()
{
  uint64_t result = qword_10163A590;
  if (!qword_10163A590) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000B5DD4()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000B5EA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  sub_10001D010(a1, (uint64_t)aBlock);
  swift_allocObject();
  swift_weakInit();
  sub_10000588C(&qword_10163A748);
  Subscription.init(subscriber:unsubscribeBlock:)();
  uint64_t v8 = *(NSObject **)(v2 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v5);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v2;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_1000B6B5C;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_1000A14F4;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000A70B0;
  uint64_t aBlock[3] = &unk_1015AB0F0;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v12);
  _Block_release(v12);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B6134(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000B61B0(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000B61B0(uint64_t a1)
{
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = *(NSObject **)(v1 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1000B6E0C;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_1000BFA0C;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1000A70B0;
  uint64_t aBlock[3] = &unk_1015AB168;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v10);
  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B63E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v8 = a1 + 16;
  swift_beginAccess();
  unint64_t v9 = *(void *)(a1 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a1 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = sub_100A6F804(0, *(void *)(v9 + 16) + 1, 1, v9);
    *(void *)uint64_t v8 = v9;
  }
  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = sub_100A6F804(v11 > 1, v12 + 1, 1, v9);
    *(void *)uint64_t v8 = v9;
  }
  *(void *)(v9 + 16) = v12 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v12, v7, v4);
  swift_endAccess();
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  uint64_t v14 = *(void *)(*(void *)v8 + 16);
  *(void *)(v13 + 56) = &type metadata for Int;
  *(void *)(v13 + 64) = &protocol witness table for Int;
  *(void *)(v13 + 32) = v14;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B6638(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 16;
  swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 16);
  _OWORD v9[2] = a2;
  swift_bridgeObjectRetain();
  *(void *)(a1 + 16) = sub_1000A5414((uint64_t (*)(char *))sub_1000B6EB0, (uint64_t)v9, v5, (uint64_t *)&unk_1016488F0, (void (*)(BOOL, unint64_t, uint64_t))sub_1000B75A0);
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101342130;
  uint64_t v7 = *(void *)(*(void *)v4 + 16);
  *(void *)(v6 + 56) = &type metadata for Int;
  *(void *)(v6 + 64) = &protocol witness table for Int;
  *(void *)(v6 + 32) = v7;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

BOOL sub_1000B679C()
{
  return (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0;
}

uint64_t sub_1000B6830()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000B6874(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  *(void *)(v3 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000B68C0())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000B691C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B5EA4(a1, a2);
}

uint64_t sub_1000B6940(char a1)
{
  static os_log_type_t.default.getter();
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101342130;
  *(void *)(v2 + 56) = &type metadata for Bool;
  *(void *)(v2 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v2 + 32) = a1 & 1;
  os_log(_:dso:log:_:_:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_1000A5940();
    sub_100F16A44();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000B6A88(char a1)
{
  return sub_1000B6940(a1);
}

uint64_t sub_1000B6AAC(uint64_t a1)
{
  uint64_t result = sub_1000BEEAC(&qword_10163A740, (void (*)(uint64_t))type metadata accessor for ConfigurationCoordinator);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000B6B04()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B6B3C(uint64_t a1)
{
  return sub_1000B6134(a1);
}

uint64_t sub_1000B6B5C()
{
  return sub_1000B6E24(sub_1000B63E0);
}

uint64_t sub_1000B6B74()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B6B84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B6B94()
{
  return swift_release();
}

Class sub_1000B6B9C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

uint64_t sub_1000B6C28(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_10001CD44(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 456))(v1, v2);
}

uint64_t sub_1000B6C80@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 464))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1000B6CE0(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_10001CD44(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 472))(v1, v2);
}

uint64_t sub_1000B6D3C()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000B6E0C()
{
  return sub_1000B6E24(sub_1000B6638);
}

uint64_t sub_1000B6E24(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(sub_10000588C((uint64_t *)&unk_1016488F0) - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_1000B6EA0()
{
  return _swift_deallocObject(v0, 32, 7);
}

BOOL sub_1000B6EB0()
{
  return sub_1000B679C();
}

uint64_t sub_1000B6ED0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B8728(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B6EF0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B8894(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B6F10(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B8BAC(a1, a2, a3, *v3, &qword_101657670);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B6F38(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B8BAC(a1, a2, a3, *v3, (uint64_t *)&unk_101657C90);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B6F60(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163A7C8, (uint64_t *)&unk_1016654A0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B6F90(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B8D28(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B6FB0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B8E94(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B6FD0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A780, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B700C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BC01C(a1, a2, a3, *v3, &qword_10163A788);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B7034(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163BC50, (uint64_t (*)(void))&type metadata accessor for UUID);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7070(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B9000(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B7090(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BA1A0(a1, a2, a3, *v3, &qword_10163A998);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B70C0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B91B4(a1, a2, a3, (void *)*v3, &qword_10163A9A0, &qword_10163A9A8);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B70F0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BA1A0(a1, a2, a3, *v3, &qword_10163A9B0);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B7120(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B91B4(a1, a2, a3, (void *)*v3, &qword_10163A9B8, &qword_10163A9C0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7150(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B91B4(a1, a2, a3, (void *)*v3, &qword_10163A9C8, &qword_10163A9D0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7180(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB03C(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_10163AD00, &qword_10163A9F0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B71B0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163AAC8, &qword_10163AAD0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B71E0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_101657970, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B721C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_101657700, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7258(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_101657930, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7294(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A9D8, type metadata accessor for KeyDropJoinToken);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B72D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B938C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B72F0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163AA98, (uint64_t (*)(void))type metadata accessor for OwnSubmitLocationInfo);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B732C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A878, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7368(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_101657C60, &qword_10163A050);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7398(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163AC38, &qword_10163A058);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B73C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_101657810, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7404(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A7E0, type metadata accessor for SharedBeaconRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7440(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A9F8, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B747C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_101657800, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B74B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B9538(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B74D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_101657640, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7514(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B96E8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B7534(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A760, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7570(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB03C(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_101657630, (uint64_t *)&unk_10164DBF0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B75A0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163A750, (uint64_t *)&unk_1016488F0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B75D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB03C(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1016576F0, &qword_10163BCC0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7600(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A980, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B763C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B98A4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B765C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B9A00(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B767C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB03C(a1, a2, a3, (void *)*v3, &qword_10163AAE0, &qword_10163AAE8);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B76AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB03C(a1, a2, a3, (void *)*v3, &qword_10163A8B0, &qword_10163A8B8);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B76DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B9B6C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B76FC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B9CD4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B771C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B9E58(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B773C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A7D0, type metadata accessor for ObservedAdvertisement);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7778(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A830, type metadata accessor for ObservedAdvertisement.Location);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B77B4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_101657A40, type metadata accessor for DeviceEvent);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B77F0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A778, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B782C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_101657A30, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7868(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BA040(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B7888(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB03C(a1, a2, a3, (void *)*v3, &qword_10163AB30, &qword_10163AB38);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B78B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163AB40, (uint64_t (*)(void))type metadata accessor for SPCachedAdvertisement);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B78F4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A7B8, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7930(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BA1A0(a1, a2, a3, *v3, &qword_10163AA28);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B7960(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BA310(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B7980(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_101657620, &qword_10163A790);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B79B0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_1016579E0, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B79EC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1016577C0, &qword_10163A888);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7A1C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BA4C8(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7A3C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BA654(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7A5C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BA7FC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B7A7C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BA984(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B7A9C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163AA00, type metadata accessor for OwnedBeaconGroup);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7AD8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB56C(a1, a2, a3, *v3, (uint64_t *)&unk_101657D50);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B7B08(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163AB10, &qword_10163AB18);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7B38(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BAB4C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B7B58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB03C(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_10164E7A0, (uint64_t *)&unk_101657B00);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7B88(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_1016576B0, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7BC4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB03C(a1, a2, a3, (void *)*v3, &qword_10163A928, (uint64_t *)&unk_101657950);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7BF4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163A910, &qword_10163A918);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7C24(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BACEC(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7C44(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_101657960, &qword_10163A958);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7C74(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A960, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7CB0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_101657A70, type metadata accessor for WildModeAssociationRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7CEC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A8A0, type metadata accessor for WildModeTrackingLocation);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7D28(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163AB00, &qword_101657CA0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7D58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BAE94(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B7D78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A908, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV2);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7DB4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A900, (uint64_t (*)(void))type metadata accessor for FamilyCryptoKeysV1);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7DF0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_101657920, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7E2C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A8F8, (uint64_t (*)(void))type metadata accessor for CryptoKeys);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7E68(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB03C(a1, a2, a3, (void *)*v3, &qword_10163A8D8, &qword_10163A8E0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7E98(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB03C(a1, a2, a3, (void *)*v3, &qword_10163A8E8, &qword_10163A8F0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7EC8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163AA48, &qword_10163AA50);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7EF8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_101657B50, type metadata accessor for FetchRequestBeacon);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7F34(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_101657D40, (uint64_t (*)(void))type metadata accessor for FetchResponse.SearchResult);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7F70(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB3AC(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7F90(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163AA18, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7FCC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163A8A8, &qword_101649BF0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B7FFC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163AA80, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B8038(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163A948, &qword_10163A950);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B8068(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A940, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B80A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB03C(a1, a2, a3, (void *)*v3, &qword_10163A8C0, &qword_10163A8C8);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B80D4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_101657650, &qword_10163A798);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B8104(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BC01C(a1, a2, a3, *v3, &qword_101657BC0);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B812C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB880(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B814C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163AAB0, &qword_101657C20);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B817C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB9FC(a1, a2, a3, (void *)*v3, &qword_10163AAC0, &qword_10163AAB8);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B81AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163AA68, (uint64_t *)&unk_10164E7D0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B81DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163AA58, (uint64_t *)&unk_10164E820);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B820C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB9FC(a1, a2, a3, (void *)*v3, &qword_10164E7E0, &qword_10163AA60);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B823C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163AAA8, (uint64_t (*)(void))&type metadata accessor for Date);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B8278(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB03C(a1, a2, a3, (void *)*v3, &qword_10163AA90, &qword_101657C00);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B82A8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_101657680, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B82E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BBBCC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B8304(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163A8D0, &qword_101657910);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B8334(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BC01C(a1, a2, a3, *v3, &qword_10163A880);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B835C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163AAF0, type metadata accessor for ShareState);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B8398(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163A898, (uint64_t *)&unk_101657850);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B83C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BBD38(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B83E8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A7E8, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B8424(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BBEBC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B8444(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BC01C(a1, a2, a3, *v3, &qword_10163A978);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B846C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB03C(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_101657830, &qword_10163A890);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B849C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163AA70, &qword_101655620);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B84CC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A970, (uint64_t (*)(void))type metadata accessor for LocationProvider);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B8508(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BC328(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B8528(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1016576E0, &qword_10163A9E8);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B8558(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BC4A4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B8578(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A810, (uint64_t (*)(void))&type metadata accessor for CloudKitCoordinator.Deletion);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B85B4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BC624(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B85D4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCAA8(a1, a2, a3, (void *)*v3, &qword_10163A818, &qword_10163A820);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B8604(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BC7B0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B8624(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BB03C(a1, a2, a3, (void *)*v3, &qword_10163AC40, &qword_10163AC48);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B8654(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BC90C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1000B8674(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_101657600, (uint64_t (*)(void))&type metadata accessor for URL);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B86B0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_101657770, type metadata accessor for BeaconKeyManager.KeyIndexMapInfo);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B86EC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000BCD48(a1, a2, a3, (void *)*v3, &qword_10163A870, type metadata accessor for BeaconKeyManager.KeyMapInfo);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1000B8728(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_1016552B0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B8894(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A800);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    void v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_10000588C(&qword_10163A808);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B8A20(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1000B8BAC(a1, a2, a3, a4, &qword_101657670);
}

uint64_t sub_1000B8A2C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A840);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B8B8C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_10163BC50, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_1000B8BAC(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_10000588C(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B8D08(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_10163AB28, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
}

uint64_t sub_1000B8D28(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A7C0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 95;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 7);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[128 * v8]) {
      memmove(v13, v14, v8 << 7);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[128 * v8] || v13 >= &v14[128 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B8E94(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A7F0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B9000(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_101657A00);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[72 * v8] || v12 >= &v13[72 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B918C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000B91B4(a1, a2, a3, a4, &qword_10163A9A0, &qword_10163A9A8);
}

uint64_t sub_1000B91A0(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000B91B4(a1, a2, a3, a4, &qword_10163A9B8, &qword_10163A9C0);
}

uint64_t sub_1000B91B4(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_10000588C(a5);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    void v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 24 * v11) {
      memmove(v13 + 4, a4 + 4, 24 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 24 * v11 || v15 >= v16 + 24 * v11)
  {
    sub_10000588C(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B9360(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_101657700, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
}

uint64_t sub_1000B9380(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1000BC01C(a1, a2, a3, a4, &qword_10163A988);
}

uint64_t sub_1000B938C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163AAA0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B9518(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_1016576B0, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_1000B9538(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A828);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B96A8(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_10163A778, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
}

uint64_t sub_1000B96C8(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, (uint64_t *)&unk_101657640, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_1000B96E8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A7F8);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 160);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[160 * v8]) {
      memmove(v12, v13, 160 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[160 * v8] || v12 >= &v13[160 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B986C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_10163A760, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer);
}

uint64_t sub_1000B988C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BB03C(a1, a2, a3, a4, (uint64_t *)&unk_101657630, (uint64_t *)&unk_10164DBF0);
}

uint64_t sub_1000B98A4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A990);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    int64_t v12 = v11 - 32;
    if (v11 < 32) {
      int64_t v12 = v11 - 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8]) {
      memmove(v13, v14, 2 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[2 * v8] || v13 >= &v14[2 * v8])
  {
    memcpy(v13, v14, 2 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B9A00(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_101657710);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B9B6C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163AA08);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  size_t v15 = v8 << 6;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B9CD4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C((uint64_t *)&unk_1016575F0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B9E58(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A848);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    void v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_10000588C(&qword_10163A850);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BA000(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_10163AB50, type metadata accessor for PairingErrorRecord);
}

uint64_t sub_1000BA020(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_10163AB48, (uint64_t (*)(void))type metadata accessor for UpdateDeviceState);
}

uint64_t sub_1000BA040(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_101657AC0);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BA1A0(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_10000588C(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BA310(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163AA20);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BA494(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, (uint64_t *)&unk_101657780, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
}

uint64_t sub_1000BA4B4(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1000BB56C(a1, a2, a3, a4, (uint64_t *)&unk_101657D50);
}

uint64_t sub_1000BA4C8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A968);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    void v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_10000588C(&qword_101638D40);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BA654(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A930);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    void v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_10000588C(&qword_10163A938);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BA7FC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163BAB0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BA984(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A7A8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BAB0C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_10163AA00, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_1000BAB2C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_10163AB20, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
}

uint64_t sub_1000BAB4C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163AB08);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BACB8(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BB03C(a1, a2, a3, a4, (uint64_t *)&unk_10164E7A0, (uint64_t *)&unk_101657B00);
}

uint64_t sub_1000BACCC(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_10163A920, type metadata accessor for BeaconStatus);
}

uint64_t sub_1000BACEC(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C((uint64_t *)&unk_101657940);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    void v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    type metadata accessor for SPBeaconTaskName(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BAE74(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_10163A8A0, type metadata accessor for WildModeTrackingLocation);
}

uint64_t sub_1000BAE94(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163AA10);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BB01C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, (uint64_t *)&unk_101657920, (uint64_t (*)(void))type metadata accessor for ShareRecord);
}

uint64_t sub_1000BB03C(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_10000588C(a5);
    unint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    void v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11) {
      memmove(v13 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    sub_10000588C(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BB1E4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C((uint64_t *)&unk_101657B60);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    void v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_10000588C(&qword_10163AA40);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BB38C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_101657B50, type metadata accessor for FetchRequestBeacon);
}

uint64_t sub_1000BB3AC(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163AA38);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v8;
    void v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    sub_10000588C((uint64_t *)&unk_101657790);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BB538(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_10163AA18, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
}

uint64_t sub_1000BB558(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1000BB56C(a1, a2, a3, a4, &qword_10163AAD8);
}

uint64_t sub_1000BB56C(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_10000588C(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  size_t v16 = 32 * v9;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BB6D8(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_10163A940, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
}

uint64_t sub_1000BB6F8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_101657A80);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8]) {
      memmove(v12, v13, 88 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[88 * v8] || v12 >= &v13[88 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BB880(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A7A0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 96 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BB9FC(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_10000588C(a5);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    void v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 56);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 56 * v11) {
      memmove(v13 + 4, a4 + 4, 56 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 56 * v11 || v15 >= v16 + 56 * v11)
  {
    sub_10000588C(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BBBAC(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, (uint64_t *)&unk_101657680, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
}

uint64_t sub_1000BBBCC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A7B0);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BBD2C(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1000BC01C(a1, a2, a3, a4, &qword_10163AAF8);
}

uint64_t sub_1000BBD38(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163AA88);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BBEBC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A7D8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BC01C(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  int64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = v8;
  }
  if (v10)
  {
    sub_10000588C(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v11 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v9]) {
      memmove(v13, v14, v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v9] || v13 >= &v14[v9])
  {
    memcpy(v13, v14, v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BC168(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCAA8(a1, a2, a3, a4, &qword_10163AA70, &qword_101655620);
}

uint64_t sub_1000BC17C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A768);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v8;
    void v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    sub_10000588C(&qword_10163A770);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BC308@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 56);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000BC328(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163AC58);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 24 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BC4A4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A9E0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 72 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BC624(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163A858);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    void v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_10000588C(&qword_10163A860);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}