uint64_t sub_1000BC7B0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    v6 = *((void *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        v7 = a2;
      }
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    v9 = *((void *)a4 + 2);
  }
  else {
    v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163AA30);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32) {
      v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 16 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BC90C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000588C(&qword_10163AA78);
    v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)_swiftEmptyArrayStorage;
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BCA94(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCAA8(a1, a2, a3, a4, (uint64_t *)&unk_101657740, &qword_10163A838);
}

uint64_t sub_1000BCAA8(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000588C(a5);
  uint64_t v13 = *(void *)(sub_10000588C(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(sub_10000588C(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BCCE8(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_10163A868, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
}

uint64_t sub_1000BCD08(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, (uint64_t *)&unk_101657770, type metadata accessor for BeaconKeyManager.KeyIndexMapInfo);
}

uint64_t sub_1000BCD28(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1000BCD48(a1, a2, a3, a4, &qword_10163A870, type metadata accessor for BeaconKeyManager.KeyMapInfo);
}

uint64_t sub_1000BCD48(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10000588C(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BCF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v12[3] = a7;
  v12[4] = a8;
  int64_t v10 = sub_10001D958(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16))(v10, a1, a7);
  QueueSynchronizer.conditionalSync<A>(_:)();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v12);
}

uint64_t sub_1000BD078(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1000BD0C8()
{
  return sub_1000BF660();
}

uint64_t sub_1000BD0E8(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000BD0F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000BD160()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BD174@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB5F0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD1A0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AAF9C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BD1CC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AB604(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BD1F8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AB610(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BD228@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB61C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD258@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB63C(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000BD288@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AB65C(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BD2BC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB674(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD2E8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AAFA8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD314@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB688(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD340@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB69C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD36C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB6B0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD398@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AB6C4(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BD3C4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB6D0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD3F0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB6E4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD41C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB6F8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD448@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AB70C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BD474@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB718(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD4A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB72C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD4CC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB740(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD4F8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB754(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD524@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AB768(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BD554@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB774(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD580@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB788(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD5AC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB79C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD5D8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB7B0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD604@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB7C4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD630@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB7D8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD65C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB7EC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD688@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB800(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD6B4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB814(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD6E0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB828(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD70C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB83C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD738@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AB850(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BD768@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB85C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD794@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB870(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD7C0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB884(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD7EC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB898(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD818@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB8AC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD844@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB8C0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD870@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AB8D4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD89C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AB8E8(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BD8C8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AB8F4(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BD8FC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABA0C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD928@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABA20(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD954@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABA34(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD980@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABA48(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD9AC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABA5C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BD9D8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010ABA70(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BDA0C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000AC1B4(a1, a2);
}

uint64_t sub_1000BDA30@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000AC1B4(a1, a2);
}

uint64_t sub_1000BDA50@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABB94(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BDA7C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABBA8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BDAA8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABBBC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BDAD4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABBC8(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BDB00@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABBD4(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BDB2C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABBE0(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BDB58(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BDB94@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010ABC7C(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BDBC4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010ABC88(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BDBF4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010ABC94(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BDC24@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABCA0(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BDC50@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABCAC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BDC7C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABCB8(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BDCA8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABCC4(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BDCD4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABCD0(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BDD00@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABCDC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BDD2C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABCE8(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BDD58@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABCF4(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BDD84@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABD00(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000BDDB0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABD0C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BDDDC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABD20(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000BDE08@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABD2C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BDE34@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABD40(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BDE60@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABD54(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000BDE8C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABD60(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BDEB8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010ABD6C(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BDEE8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010ABD78(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BDF18@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010ABD84(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BDF48@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010ABD90(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BDF80@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABDC4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BDFAC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABDD8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BDFD8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABDEC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE004@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABE00(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BE030@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABE0C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BE05C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABE18(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BE088@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AAFD0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE0B4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABE24(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE0E0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABE38(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE10C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABE4C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE138@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABE60(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BE164@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABE6C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BE190@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABE78(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE1BC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABE8C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE1E8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABEA0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE214@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABEB4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE240@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABEC8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE26C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABEDC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE298@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABEF0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE2C4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABF04(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE2F0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABF18(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BE31C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010ABF24(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BE34C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABF30(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BE378@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABF3C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BE3A4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABF48(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE3D0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010ABF5C(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BE400@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010ABF68(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BE430@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010ABF74(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BE460@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABF80(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE48C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABF94(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BE4B8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABFA0(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BE4E4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABFAC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE510@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABFC0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE53C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABFD4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE568@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010ABFE8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE594@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010ABFFC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BE5C0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AC008(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BE5F0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC014(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BE61C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC020(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BE648@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC02C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE674@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AC040(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BE6A4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AC04C(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BE6D4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC058(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE700@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC168(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BE72C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC174(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BE758@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AC180(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BE788@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AC18C(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BE7B8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC198(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE7E4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC1AC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE810@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC1C0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE83C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC1D4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE868@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AAFBC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE894@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC1E8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE8C0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC1FC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE8EC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC210(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE918@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC224(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE944@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC238(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE970@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC24C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE99C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC260(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE9C8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC274(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE9F4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC288(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BEA20@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC29C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BEA4C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC2B0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BEA78@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC2C4(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BEAA4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC2D0(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BEAD0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AC2DC(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BEB00@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC2E8(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BEB2C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AAF84(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BEB58@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC2F4(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BEB84@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC300(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000BEBB0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC410(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BEBDC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AAF90(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BEC0C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC424(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BEC38@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC430(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BEC64@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AC43C(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BEC94@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AC448(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BECC4@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_1010AC454(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BECF0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1010AC54C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BED1C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC65C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BED48@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC668(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BED74@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC674(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BEDA0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC680(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BEDCC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC68C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BEDF8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC698(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BEE24@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1010AC6A4(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000BEE54@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC7AC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BEE80@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1010AC7B8(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000BEEAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BEEF4@<X0>(void *a1@<X8>)
{
  return sub_1000BF3D4(a1);
}

uint64_t sub_1000BEF10()
{
  return sub_1000BEF54((uint64_t)&type metadata for UInt32, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B5698);
}

uint64_t sub_1000BEF34()
{
  return sub_1000BEF54((uint64_t)&unk_10163AB70, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B55EC);
}

uint64_t sub_1000BEF54(uint64_t a1, uint64_t (*a2)(unint64_t, void, void, uint64_t))
{
  uint64_t v5 = *(void *)(sub_10000588C((uint64_t *)&unk_1016488F0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a2(v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), a1);
}

uint64_t sub_1000BF008()
{
  return sub_1000BEF54((uint64_t)&type metadata for UInt64, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B5698);
}

uint64_t sub_1000BF02C()
{
  return sub_1000BEF54((uint64_t)&unk_10163AB88, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B55EC);
}

uint64_t sub_1000BF050()
{
  return sub_1000BEF54((uint64_t)&type metadata for AllMacBeaconConfigs, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B5698);
}

uint64_t sub_1000BF074(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_10001CD44(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 472))(v1, v2);
}

uint64_t sub_1000BF0D0()
{
  return sub_1000BEF54((uint64_t)&unk_10163ABA0, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B55EC);
}

uint64_t sub_1000BF0F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 464))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1000BF154()
{
  return sub_1000BEF54((uint64_t)&unk_10163AC90, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B55EC);
}

uint64_t sub_1000BF174(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_10001CD44(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 456))(v1, v2);
}

uint64_t sub_1000BF1D0()
{
  return sub_1000BEF54((uint64_t)&qword_101638CF0, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B55EC);
}

uint64_t sub_1000BF1F4()
{
  return sub_1000BEF54((uint64_t)&unk_10163ABC0, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B55EC);
}

uint64_t sub_1000BF218()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_1016488F0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + v3);
  uint64_t v5 = *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000B5544(v0 + v2, v4, v5);
}

uint64_t sub_1000BF2B8()
{
  return sub_1000BEF54((uint64_t)&unk_10163ABD8, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B55EC);
}

uint64_t sub_1000BF2DC()
{
  return sub_1000BEF54((uint64_t)&unk_10163ABE8, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B55EC);
}

uint64_t sub_1000BF300()
{
  return sub_1000BEF54((uint64_t)&type metadata for Int, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B5698);
}

uint64_t sub_1000BF324()
{
  return sub_1000BEF54((uint64_t)&type metadata for String, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B5698);
}

uint64_t sub_1000BF348()
{
  return sub_1000BEF54((uint64_t)&qword_101654A30, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B55EC);
}

uint64_t sub_1000BF36C()
{
  return sub_1000BEF54((uint64_t)&type metadata for Bool, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B5698);
}

uint64_t sub_1000BF390()
{
  return sub_1000BEF54((uint64_t)&type metadata for Double, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B5698);
}

uint64_t sub_1000BF3B4()
{
  return sub_1000BEF54((uint64_t)&type metadata for UInt, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B5698);
}

uint64_t sub_1000BF3D4@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000BF428()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_1016488F0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000BF4E8()
{
  return sub_1000BEF54((uint64_t)&type metadata for Data, (uint64_t (*)(unint64_t, void, void, uint64_t))sub_1000B5698);
}

uint64_t sub_1000BF50C()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000BF544()
{
  return sub_1000A771C(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

unint64_t sub_1000BF550()
{
  unint64_t result = qword_10163AC28;
  if (!qword_10163AC28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AC28);
  }
  return result;
}

unint64_t sub_1000BF5A4()
{
  unint64_t result = qword_10163AC30;
  if (!qword_10163AC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AC30);
  }
  return result;
}

uint64_t sub_1000BF5F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000BF660()
{
  return sub_1000B5734(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1000BF68C()
{
  return sub_1000A6CEC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000BF694(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000BF6F8()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BF738()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ShareType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConfigurationCoordinator.ConfigurationSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BF8C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationCoordinator.ConfigurationSource()
{
  return &type metadata for ConfigurationCoordinator.ConfigurationSource;
}

unint64_t sub_1000BF900()
{
  unint64_t result = qword_10163AC50;
  if (!qword_10163AC50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AC50);
  }
  return result;
}

unint64_t sub_1000BF954(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A0188, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t sub_1000BF9A0()
{
  unint64_t result = qword_10163AC60;
  if (!qword_10163AC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AC60);
  }
  return result;
}

uint64_t sub_1000BF9F4@<X0>(void *a1@<X8>)
{
  return sub_1000BC308(a1);
}

void sub_1000BFAD8(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v5 - 8);
  v75 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v76 = *(void *)(v7 - 8);
  uint64_t v77 = v7;
  __chkstk_darwin(v7);
  v74 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  v78 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v66 - v12;
  uint64_t v14 = type metadata accessor for UUID();
  unint64_t v15 = *(void **)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v79 = (char *)&v66 - v19;
  if (CKRecord.recordType.getter() == 0xD000000000000012 && v20 == 0x800000010134A520)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
      sub_1000C2010();
      swift_allocError();
      unsigned char *v47 = 0;
      swift_willThrow();

      return;
    }
  }
  uint64_t v72 = v2;
  v73 = v18;
  id v22 = [a1 recordID];
  id v23 = [v22 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v80 = v15;
  uint64_t v81 = v14;
  v24 = a1;

  UUID.init(uuidString:)();
  v26 = v80;
  uint64_t v25 = v81;
  swift_bridgeObjectRelease();
  v27 = (unsigned int (*)(char *, uint64_t, uint64_t))v26[6];
  if (v27(v13, 1, v25) == 1)
  {
    sub_10001DAB4((uint64_t)v13, &qword_101638CF0);
    sub_1000C2010();
    swift_allocError();
    unsigned char *v28 = 2;
    swift_willThrow();

    return;
  }
  v68 = (void (*)(char *, char *, uint64_t))v26[4];
  v69 = v26 + 4;
  v68(v79, v13, v25);
  uint64_t v67 = type metadata accessor for KeyAlignmentRecord();
  v29 = (void (*)(void))v26[2];
  v70 = (char *)a2 + *(int *)(v67 + 20);
  v29();
  id v31 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [v24 encodeSystemFieldsWithCoder:v31];
  [v31 finishEncoding];
  id v32 = [v31 encodedData];
  uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v34 = a2;
  uint64_t v36 = v35;

  uint64_t *v34 = v33;
  v34[1] = v36;
  v71 = v34;
  v37 = v24;
  v38 = (char *)[v24 encryptedValues];
  NSString v39 = String._bridgeToObjectiveC()();
  id v40 = [v38 objectForKeyedSubscript:v39];

  if (!v40 || (uint64_t v83 = (uint64_t)v40, sub_10000588C((uint64_t *)&unk_10163AE50), (swift_dynamicCast() & 1) == 0))
  {
    sub_1000C2010();
    swift_allocError();
    unsigned char *v45 = 3;
    swift_willThrow();
    swift_unknownObjectRelease();

    v44 = (void (*)(char *, uint64_t))v80[1];
    uint64_t v42 = v81;
    v44(v79, v81);
    goto LABEL_12;
  }
  uint64_t v41 = (uint64_t)v78;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v42 = v81;
  if (v27((char *)v41, 1, v81) == 1)
  {
    sub_10001DAB4(v41, &qword_101638CF0);
    sub_1000C2010();
    swift_allocError();
    unsigned char *v43 = 4;
    swift_willThrow();
    swift_unknownObjectRelease();

    v44 = (void (*)(char *, uint64_t))v80[1];
    v44(v79, v42);
LABEL_12:
    v46 = v70;
    sub_10001CFB8(*v71, v71[1]);
    v44(v46, v42);
    return;
  }
  v68(v73, (char *)v41, v42);
  NSString v48 = String._bridgeToObjectiveC()();
  v78 = v38;
  id v49 = [v38 objectForKeyedSubscript:v48];

  if (!v49 || (id v82 = v49, (swift_dynamicCast() & 1) == 0))
  {
LABEL_21:
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = xmmword_101342130;
    *(void *)(v62 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    *(void *)(v62 + 64) = sub_1000A038C();
    *(void *)(v62 + 32) = v37;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v63 = v37;
    v64 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    sub_1000C2010();
    swift_allocError();
    unsigned char *v65 = 5;
    swift_willThrow();
    swift_unknownObjectRelease();

    uint64_t v42 = v81;
    v44 = (void (*)(char *, uint64_t))v80[1];
    v44(v73, v81);
    v44(v79, v42);
    goto LABEL_12;
  }
  uint64_t v50 = v83;
  NSString v51 = String._bridgeToObjectiveC()();
  id v52 = [v78 objectForKeyedSubscript:v51];

  if (!v52)
  {
    uint64_t v53 = (uint64_t)v75;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56))(v75, 1, 1, v77);
    goto LABEL_20;
  }
  id v82 = v52;
  uint64_t v53 = (uint64_t)v75;
  uint64_t v54 = v77;
  int v55 = swift_dynamicCast();
  uint64_t v56 = v76;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v76 + 56))(v53, v55 ^ 1u, 1, v54);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v53, 1, v54) == 1)
  {
LABEL_20:
    sub_10001DAB4(v53, (uint64_t *)&unk_10163AC90);
    goto LABEL_21;
  }
  swift_unknownObjectRelease();

  uint64_t v57 = v81;
  ((void (*)(char *, uint64_t))v80[1])(v79, v81);
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 32);
  v59 = v74;
  v58(v74, v53, v54);
  uint64_t v60 = v67;
  v61 = v71;
  v68((char *)v71 + *(int *)(v67 + 24), v73, v57);
  *(uint64_t *)((char *)v61 + *(int *)(v60 + 28)) = v50;
  v58((char *)v61 + *(int *)(v60 + 32), (uint64_t)v59, v54);
}

uint64_t sub_1000C045C()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  unsigned int v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170D740);
  sub_100010324(v0, (uint64_t)qword_10170D740);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

unint64_t sub_1000C0578(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000C0624()
{
  return sub_1000C0578(*v0);
}

uint64_t sub_1000C062C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000C15F4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000C0654(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1000C0660(uint64_t a1)
{
  unint64_t v2 = sub_1000C1FBC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C069C(uint64_t a1)
{
  unint64_t v2 = sub_1000C1FBC();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1000C06D8(uint64_t a1)
{
  Hasher.init(_seed:)();
  Data.hash(into:)();
  type metadata accessor for UUID();
  sub_1000C149C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(a1 + 28)));
  type metadata accessor for Date();
  sub_1000C149C((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1000C0810(uint64_t a1, uint64_t a2)
{
  Data.hash(into:)();
  type metadata accessor for UUID();
  sub_1000C149C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 28)));
  type metadata accessor for Date();
  sub_1000C149C((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_1000C092C(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Data.hash(into:)();
  type metadata accessor for UUID();
  sub_1000C149C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 28)));
  type metadata accessor for Date();
  sub_1000C149C((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1000C0A64(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163ACC8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1000C1FBC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v10 = *v3;
  char v11 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for KeyAlignmentRecord();
    LOBYTE(v10) = 1;
    type metadata accessor for UUID();
    sub_1000C149C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10) = 4;
    type metadata accessor for Date();
    sub_1000C149C((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000C0D1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v31 = type metadata accessor for Date();
  uint64_t v29 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  id v32 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  uint64_t v34 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  long long v10 = (char *)&v25 - v9;
  uint64_t v11 = sub_10000588C(&qword_10163ACA0);
  uint64_t v35 = *(void *)(v11 - 8);
  uint64_t v36 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (int *)type metadata accessor for KeyAlignmentRecord();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1000C1FBC();
  v37 = v13;
  uint64_t v17 = (uint64_t)v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  v28 = v8;
  v38 = a1;
  char v40 = 0;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)uint64_t v16 = v39;
  LOBYTE(v39) = 1;
  sub_1000C149C((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v18 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = &v16[v14[5]];
  v26 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
  v26(v19, v10, v18);
  LOBYTE(v39) = 2;
  uint64_t v20 = v28;
  uint64_t v27 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v26(&v16[v14[6]], v20, v18);
  LOBYTE(v39) = 3;
  uint64_t v21 = v36;
  *(void *)&v16[v14[7]] = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v39) = 4;
  sub_1000C149C(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v22 = v31;
  id v23 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v21);
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v16[v14[8]], v23, v22);
  sub_1000C1EFC((uint64_t)v16, v30);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
  return sub_1000C1F60((uint64_t)v16);
}

void sub_1000C12E4()
{
  if (qword_101636870 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for URL();
  sub_100010324(v1, (uint64_t)qword_10170D740);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
}

uint64_t sub_1000C139C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C0D1C(a1, a2);
}

uint64_t sub_1000C13B4(void *a1)
{
  return sub_1000C0A64(a1);
}

uint64_t sub_1000C13CC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000C149C(&qword_10163AC70, (void (*)(uint64_t))type metadata accessor for KeyAlignmentRecord);
  uint64_t result = sub_1000C149C(&qword_10163AC78, (void (*)(uint64_t))type metadata accessor for KeyAlignmentRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for KeyAlignmentRecord()
{
  uint64_t result = qword_10163AD78;
  if (!qword_10163AD78) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000C149C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C14E4(uint64_t a1)
{
  uint64_t result = sub_1000C149C((unint64_t *)&unk_10163AC80, (void (*)(uint64_t))type metadata accessor for KeyAlignmentRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000C153C(uint64_t a1, uint64_t a2)
{
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)return 0; {
  uint64_t v4 = type metadata accessor for KeyAlignmentRecord();
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0
    || (static UUID.== infix(_:_:)() & 1) == 0
    || *(void *)(a1 + *(int *)(v4 + 28)) != *(void *)(a2 + *(int *)(v4 + 28)))
  {
    return 0;
  }

  return static Date.== infix(_:_:)();
}

uint64_t sub_1000C15F4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EEA50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013EE1B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F35B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001013F35D0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1000C17FC(uint64_t a1, id *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v56 = (void *)v4;
  __chkstk_darwin(v4);
  v47 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_10000588C((uint64_t *)&unk_10165C700);
  __chkstk_darwin(v49);
  uint64_t v52 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v48 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v50 = (uint64_t)&v47 - v11;
  __chkstk_darwin(v10);
  uint64_t v51 = (uint64_t)&v47 - v12;
  uint64_t v13 = type metadata accessor for KeyAlignmentRecord();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  [*a2 encryptedValues];
  swift_getObjectType();
  uint64_t v54 = v13;
  uint64_t v57 = a1;
  uint64_t v16 = UUID.uuidString.getter();
  uint64_t v18 = v17;
  CKRecordKeyValueSetting.subscript.getter();
  if (!v59)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    uint64_t v20 = UUID.uuidString.getter();
    uint64_t v60 = &type metadata for String;
    v61 = &protocol witness table for String;
    uint64_t v58 = v20;
    uint64_t v59 = v21;
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_8;
  }
  if (v16 == v58 && v59 == v18)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v22 = v54;
  uint64_t v23 = *(int *)(v54 + 28);
  uint64_t v24 = v57;
  uint64_t v25 = *(void *)(v57 + v23);
  uint64_t v53 = "ot save config %{public}@";
  CKRecordKeyValueSetting.subscript.getter();
  if (v59)
  {
    sub_1000C1EFC(v24, (uint64_t)v15);
LABEL_14:
    sub_1000C1F60((uint64_t)v15);
LABEL_15:
    uint64_t v35 = v57;
    uint64_t v36 = *(void *)(v57 + v23);
    v61 = &protocol witness table for UInt64;
    uint64_t v60 = &type metadata for UInt64;
    uint64_t v58 = v36;
    CKRecordKeyValueSetting.subscript.setter();
    uint64_t v37 = v35 + *(int *)(v22 + 32);
    v38 = v56;
    uint64_t v60 = v56;
    v61 = &protocol witness table for Date;
    long long v39 = sub_10001D958(&v58);
    (*(void (**)(uint64_t *, uint64_t, void *))(v55 + 16))(v39, v37, v38);
    CKRecordKeyValueSetting.subscript.setter();
    return swift_unknownObjectRelease();
  }
  uint64_t v26 = v58;
  sub_1000C1EFC(v24, (uint64_t)v15);
  if (v25 != v26) {
    goto LABEL_14;
  }
  uint64_t v27 = &v15[*(int *)(v22 + 32)];
  uint64_t v29 = v55;
  v28 = v56;
  uint64_t v30 = v51;
  (*(void (**)(uint64_t, char *, void *))(v55 + 16))(v51, v27, v56);
  (*(void (**)(uint64_t, void, uint64_t, void *))(v29 + 56))(v30, 0, 1, v28);
  uint64_t v31 = v50;
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v32 = v52;
  uint64_t v33 = v52 + *(int *)(v49 + 48);
  sub_10001E2BC(v30, v52);
  uint64_t v49 = v33;
  sub_10001E2BC(v31, v33);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, void *))(v29 + 48);
  if (v34(v32, 1, v28) != 1)
  {
    uint64_t v41 = v52;
    uint64_t v42 = v48;
    sub_10001E2BC(v52, v48);
    uint64_t v43 = v49;
    if (v34(v49, 1, v28) != 1)
    {
      uint64_t v44 = v55;
      v45 = v47;
      (*(void (**)(char *, uint64_t, void *))(v55 + 32))(v47, v43, v28);
      sub_1000C149C(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
      LODWORD(v49) = dispatch thunk of static Equatable.== infix(_:_:)();
      v46 = *(void (**)(char *, void *))(v44 + 8);
      v46(v45, v28);
      sub_10001DAB4(v50, (uint64_t *)&unk_10163AC90);
      sub_10001DAB4(v51, (uint64_t *)&unk_10163AC90);
      sub_1000C1F60((uint64_t)v15);
      v46((char *)v42, v28);
      sub_10001DAB4(v41, (uint64_t *)&unk_10163AC90);
      uint64_t v22 = v54;
      if (v49) {
        return swift_unknownObjectRelease();
      }
      goto LABEL_15;
    }
    sub_10001DAB4(v50, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4(v51, (uint64_t *)&unk_10163AC90);
    sub_1000C1F60((uint64_t)v15);
    (*(void (**)(uint64_t, void *))(v55 + 8))(v42, v56);
    goto LABEL_19;
  }
  sub_10001DAB4(v31, (uint64_t *)&unk_10163AC90);
  sub_10001DAB4(v30, (uint64_t *)&unk_10163AC90);
  sub_1000C1F60((uint64_t)v15);
  if (v34(v49, 1, v56) != 1)
  {
LABEL_19:
    sub_10001DAB4(v52, (uint64_t *)&unk_10165C700);
    uint64_t v22 = v54;
    goto LABEL_15;
  }
  sub_10001DAB4(v52, (uint64_t *)&unk_10163AC90);
  return swift_unknownObjectRelease();
}

uint64_t sub_1000C1EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyAlignmentRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C1F60(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeyAlignmentRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000C1FBC()
{
  unint64_t result = qword_10163ACA8;
  if (!qword_10163ACA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163ACA8);
  }
  return result;
}

unint64_t sub_1000C2010()
{
  unint64_t result = qword_10163ACF0;
  if (!qword_10163ACF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163ACF0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for KeyAlignmentRecord.KeyAlignmentRecordConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C2130);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyAlignmentRecord.KeyAlignmentRecordConversionError()
{
  return &type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError;
}

unsigned char *storeEnumTagSinglePayload for KeyAlignmentRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C2234);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyAlignmentRecord.CodingKeys()
{
  return &type metadata for KeyAlignmentRecord.CodingKeys;
}

uint64_t *sub_1000C226C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    uint64_t v14 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return a1;
}

uint64_t sub_1000C23CC(uint64_t a1, int *a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID();
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  uint64_t v7 = a1 + a2[8];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);

  return v9(v7, v8);
}

uint64_t *sub_1000C24B4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  uint64_t v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

uint64_t *sub_1000C25C4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  uint64_t v15 = a3[8];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

char *sub_1000C26E0(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t *sub_1000C27E4(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  uint64_t v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(void *)&a2[a3[7]];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t sub_1000C28F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C2908);
}

uint64_t sub_1000C2908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for Date();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1000C2A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C2A54);
}

void *sub_1000C2A54(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *unint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for Date();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 32);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_1000C2B88()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000C2C6C()
{
  return sub_1000C149C(&qword_10163ADC0, (void (*)(uint64_t))type metadata accessor for KeyAlignmentRecord);
}

unint64_t sub_1000C2CB8()
{
  unint64_t result = qword_10163ADC8;
  if (!qword_10163ADC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163ADC8);
  }
  return result;
}

unint64_t sub_1000C2D10()
{
  unint64_t result = qword_10163ADD0;
  if (!qword_10163ADD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163ADD0);
  }
  return result;
}

unint64_t sub_1000C2D68()
{
  unint64_t result = qword_10163ADD8;
  if (!qword_10163ADD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163ADD8);
  }
  return result;
}

unint64_t sub_1000C2DC0()
{
  unint64_t result = qword_10163ADE0;
  if (!qword_10163ADE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163ADE0);
  }
  return result;
}

uint64_t sub_1000C2E24(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10071CDEC(*a1, *a2);
}

Swift::Int sub_1000C2E30()
{
  return Hasher._finalize()();
}

uint64_t sub_1000C2EC4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000C2F44()
{
  return Hasher._finalize()();
}

unint64_t sub_1000C2FD4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000C38CC(*a1);
  *a2 = result;
  return result;
}

void sub_1000C3004(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  unint64_t v4 = 0xE600000000000000;
  uint64_t v5 = 0x646572616873;
  if (v2 != 1)
  {
    uint64_t v5 = 6448503;
    unint64_t v4 = 0xE300000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x72656E776FLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1000C3054()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000C30B4()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int sub_1000C3104()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000C314C()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000C3178()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000C31BC@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000C3918(*a1);
  *a2 = result;
  return result;
}

void sub_1000C31E8(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000C31F4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000C3254()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000C32A4(unsigned __int8 *a1, char *a2)
{
  return sub_10071CC38(*a1, *a2);
}

Swift::Int sub_1000C32B0()
{
  return Hasher._finalize()();
}

uint64_t sub_1000C339C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000C3470()
{
  return Hasher._finalize()();
}

unint64_t sub_1000C3558@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000C392C(*a1);
  *a2 = result;
  return result;
}

void sub_1000C3588(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1835365481;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 1936094325;
      goto LABEL_3;
    case 2:
      *a1 = 0x63616542666C6573;
      a1[1] = 0xEA00000000006E6FLL;
      break;
    case 3:
      *a1 = 0x6F4C657275636573;
      a1[1] = 0xEF736E6F69746163;
      break;
    case 4:
      *a1 = 6448503;
      a1[1] = 0xE300000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE400000000000000;
      break;
  }
}

ValueMetadata *type metadata accessor for OwnSubmitPayloadTypes()
{
  return &type metadata for OwnSubmitPayloadTypes;
}

unsigned char *storeEnumTagSinglePayload for OwnSubmitPayloadTypes.ShareType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C3714);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitPayloadTypes.ShareType()
{
  return &type metadata for OwnSubmitPayloadTypes.ShareType;
}

unint64_t sub_1000C3750()
{
  unint64_t result = qword_10163AE00;
  if (!qword_10163AE00)
  {
    sub_10000592C(&qword_10163AE08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AE00);
  }
  return result;
}

uint64_t sub_1000C37AC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000C380C()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_1000C385C(void *a1@<X8>)
{
  *a1 = &off_1015A0320;
}

unint64_t sub_1000C3870()
{
  unint64_t result = qword_10163AE10;
  if (!qword_10163AE10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AE10);
  }
  return result;
}

uint64_t sub_1000C38C4()
{
  return 5;
}

unint64_t sub_1000C38CC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A0220, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000C3918(uint64_t result)
{
  if ((result & 0xFC) != 0) {
    return 4;
  }
  else {
    return result;
  }
}

unint64_t sub_1000C392C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A0288, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t sub_1000C3978()
{
  unint64_t result = qword_10163AE18;
  if (!qword_10163AE18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AE18);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OwnSubmitPayloadTypes.Mode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C3A98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitPayloadTypes.Mode()
{
  return &type metadata for OwnSubmitPayloadTypes.Mode;
}

uint64_t getEnumTagSinglePayload for OwnSubmitPayloadTypes.KeyType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for OwnSubmitPayloadTypes.KeyType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C3C2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitPayloadTypes.KeyType()
{
  return &type metadata for OwnSubmitPayloadTypes.KeyType;
}

unint64_t sub_1000C3C68()
{
  unint64_t result = qword_10163AE20;
  if (!qword_10163AE20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AE20);
  }
  return result;
}

unint64_t sub_1000C3CC0()
{
  unint64_t result = qword_10163AE28;
  if (!qword_10163AE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AE28);
  }
  return result;
}

unint64_t sub_1000C3D14()
{
  unint64_t result = qword_10163AE30;
  if (!qword_10163AE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AE30);
  }
  return result;
}

unint64_t sub_1000C3D68()
{
  unint64_t result = qword_10163AE38;
  if (!qword_10163AE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AE38);
  }
  return result;
}

void sub_1000C3DBC(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_10163AE40);
  __chkstk_darwin(v4 - 8);
  v120 = (char *)v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v118 = *(void *)(v6 - 8);
  uint64_t v119 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  v116 = (char *)v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v117 = (uint64_t)v106 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v106 - v11;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v13 - 8);
  uint64_t v122 = v13;
  v123 = v14;
  __chkstk_darwin(v13);
  v121 = (char *)v106 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101638CF0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  char v19 = (char *)v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)v106 - v20;
  uint64_t v22 = type metadata accessor for UUID();
  unint64_t v126 = *(void *)(v22 - 8);
  uint64_t v127 = v22;
  uint64_t v23 = __chkstk_darwin(v22);
  v124 = (char *)v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v125 = (char *)v106 - v25;
  if (CKRecord.recordType.getter() == 0x6365526572616853 && v26 == 0xEB0000000064726FLL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      sub_1000C6468();
      swift_allocError();
      *uint64_t v42 = 0;
      swift_willThrow();

      return;
    }
  }
  v115 = a2;
  id v28 = [a1 recordID];
  id v29 = [v28 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  unint64_t v31 = v126;
  uint64_t v30 = v127;
  uint64_t v32 = a1;
  uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48);
  if (v33(v21, 1, v127) == 1)
  {
    sub_10001DAB4((uint64_t)v21, &qword_101638CF0);
    sub_1000C6468();
    swift_allocError();
    unsigned char *v34 = 2;
    swift_willThrow();

    return;
  }
  v113 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
  unint64_t v114 = v31 + 32;
  v113(v125, v21, v30);
  uint64_t v35 = v32;
  id v36 = [v32 encryptedValues];
  uint64_t ObjectType = swift_getObjectType();
  NSString v37 = String._bridgeToObjectiveC()();
  v38 = (void (**)(char *, uint64_t, uint64_t, uint64_t))[v36 objectForKeyedSubscript:v37];

  if (!v38 || (v130 = v38, sub_10000588C((uint64_t *)&unk_10163AE50), (swift_dynamicCast() & 1) == 0))
  {
    sub_1000C6468();
    swift_allocError();
    *uint64_t v41 = 3;
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v126 + 8))(v125, v127);
    return;
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v39 = v127;
  if (v33(v19, 1, v127) == 1)
  {
    sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
    sub_1000C6468();
    swift_allocError();
    *char v40 = 4;
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v126 + 8))(v125, v39);
    return;
  }
  uint64_t v43 = v36;
  uint64_t v44 = v124;
  v113(v124, v19, v39);
  NSString v45 = String._bridgeToObjectiveC()();
  v46 = v43;
  v47 = (void (**)(char *, uint64_t, uint64_t, uint64_t))[v43 objectForKeyedSubscript:v45];

  if (!v47
    || (v130 = v47, (swift_dynamicCast() & 1) == 0)
    || (uint64_t v48 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(), !v50))
  {
    sub_1000C6468();
    swift_allocError();
    *uint64_t v72 = 5;
    swift_willThrow();
    swift_unknownObjectRelease();

    uint64_t v73 = v127;
    v74 = *(void (**)(char *, uint64_t))(v126 + 8);
    v74(v44, v127);
    v74(v125, v73);
    return;
  }
  uint64_t v109 = v49;
  uint64_t v110 = v48;
  uint64_t v111 = v50;
  NSString v51 = String._bridgeToObjectiveC()();
  id v52 = [v43 objectForKeyedSubscript:v51];

  if (!v52)
  {
    v123[7](v12, 1, 1, v122);
    goto LABEL_24;
  }
  unint64_t v128 = (unint64_t)v52;
  uint64_t v53 = v122;
  int v54 = swift_dynamicCast();
  uint64_t v55 = v123;
  uint64_t v56 = v123[7];
  v108 = v123 + 7;
  v107 = v56;
  v56(v12, v54 ^ 1u, 1, v53);
  uint64_t v57 = v55[6];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v57)(v12, 1, v53) == 1)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v12, (uint64_t *)&unk_10163AC90);
    uint64_t v67 = v35;
    v70 = v124;
LABEL_25:
    unint64_t v75 = v126;
LABEL_26:
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v76 = swift_allocObject();
    *(_OWORD *)(v76 + 16) = xmmword_101342130;
    *(void *)(v76 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    *(void *)(v76 + 64) = sub_1000A038C();
    *(void *)(v76 + 32) = v67;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v77 = v67;
    v78 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    sub_1000C6468();
    swift_allocError();
    unsigned char *v79 = 6;
    swift_willThrow();
    swift_unknownObjectRelease();

    v80 = *(void (**)(char *, uint64_t))(v75 + 8);
    uint64_t v81 = v127;
    v80(v70, v127);
    v80(v125, v81);
    return;
  }
  uint64_t v58 = v55[4];
  v106[1] = v55 + 4;
  v106[0] = v58;
  ((void (*)(char *, char *, uint64_t))v58)(v121, v12, v53);
  uint64_t v59 = v53;
  NSString v60 = String._bridgeToObjectiveC()();
  id v61 = [v43 objectForKeyedSubscript:v60];

  if (!v61)
  {
    uint64_t v71 = (uint64_t)v120;
    v107(v120, 1, 1, v59);
    uint64_t v67 = v35;
    v70 = v124;
    goto LABEL_28;
  }
  unint64_t v128 = (unint64_t)v61;
  uint64_t v62 = v116;
  uint64_t v63 = v59;
  if ((swift_dynamicCast() & 1) == 0)
  {
    v107(v62, 1, 1, v59);
    uint64_t v67 = v35;
    uint64_t v68 = (uint64_t)v62;
    v69 = v123;
    v70 = v124;
    goto LABEL_35;
  }
  uint64_t v64 = v59;
  v65 = v107;
  v107(v62, 0, 1, v64);
  unsigned int v66 = ((uint64_t (*)(char *, uint64_t, uint64_t))v57)(v62, 1, v63);
  uint64_t v67 = v35;
  uint64_t v68 = (uint64_t)v62;
  v69 = v123;
  v70 = v124;
  if (v66 == 1)
  {
LABEL_35:
    sub_10001DAB4(v68, (uint64_t *)&unk_10163AC90);
    uint64_t v88 = (uint64_t)v120;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 56))(v120, 1, 1, v119);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v69[1])(v121, v63);
    sub_10001DAB4(v88, &qword_10163AE40);
    goto LABEL_25;
  }
  uint64_t v71 = (uint64_t)v120;
  ((void (*)(char *, uint64_t, uint64_t))v106[0])(v120, v68, v63);
  v65((char *)v71, 0, 1, v63);
LABEL_28:
  unint64_t v75 = v126;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v118 + 56))(v71, 0, 1, v119);
  uint64_t v82 = v117;
  sub_1000C69AC(v71, v117);
  NSString v83 = String._bridgeToObjectiveC()();
  v84 = (void (**)(char *, uint64_t, uint64_t, uint64_t))[v46 objectForKeyedSubscript:v83];

  if (!v84 || (v130 = v84, (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v87 = v122;
    sub_10001DAB4(v82, (uint64_t *)&unk_10163AC90);
    ((void (*)(char *, uint64_t))v123[1])(v121, v87);
    goto LABEL_26;
  }
  unint64_t v126 = v128;
  v124 = v129;
  NSString v85 = String._bridgeToObjectiveC()();
  id v86 = [v46 objectForKeyedSubscript:v85];

  if (v86)
  {
    unint64_t v128 = (unint64_t)v86;
    if (swift_dynamicCast()) {
      v123 = v130;
    }
    else {
      v123 = 0;
    }
  }
  else
  {
    v123 = 0;
  }
  CKRecordKeyValueSetting.subscript.getter();
  if ((_BYTE)v129) {
    unint64_t v89 = 1;
  }
  else {
    unint64_t v89 = v128;
  }
  int v90 = sub_10029EF24(v89);
  if (v90 == 5) {
    int v91 = 1;
  }
  else {
    int v91 = v90;
  }
  LODWORD(v120) = v91;
  id v93 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [v67 encodeSystemFieldsWithCoder:v93];
  [v93 finishEncoding];
  id v94 = [v93 encodedData];
  uint64_t v95 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v97 = v96;

  swift_unknownObjectRelease();

  v98 = v115;
  uint64_t *v115 = v95;
  v98[1] = v97;
  v99 = (int *)type metadata accessor for ShareRecord();
  uint64_t v100 = v127;
  v101 = v113;
  v113((char *)v98 + v99[5], v125, v127);
  v101((char *)v98 + v99[6], v70, v100);
  ((void (*)(char *, char *, uint64_t))v106[0])((char *)v98 + v99[7], v121, v122);
  sub_1000C69AC(v117, (uint64_t)v98 + v99[8]);
  v102 = (char *)v98 + v99[9];
  char *v102 = v110;
  uint64_t v103 = v111;
  *((void *)v102 + 1) = v109;
  *((void *)v102 + 2) = v103;
  v104 = (unint64_t *)((char *)v98 + v99[10]);
  v105 = v124;
  unint64_t *v104 = v126;
  v104[1] = (unint64_t)v105;
  *(uint64_t *)((char *)v98 + v99[11]) = (uint64_t)v123;
  *((unsigned char *)v98 + v99[12]) = (_BYTE)v120;
}

uint64_t sub_1000C4CA4()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170D758);
  sub_100010324(v0, (uint64_t)qword_10170D758);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_1000C4DC4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v0;
  unint64_t v10 = v1[1];
  sub_1000361E0(v9, v10);
  Data.hash(into:)();
  sub_10001CFB8(v9, v10);
  uint64_t v11 = (int *)type metadata accessor for ShareRecord();
  type metadata accessor for UUID();
  sub_1000C7E20(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  sub_1000C7E20((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  sub_10001E2BC((uint64_t)v1 + v11[8], (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  Hasher._combine(_:)(*((unsigned __int8 *)v1 + v11[9]));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(uint64_t *)((char *)v1 + v11[11]));
  Hasher._combine(_:)(*((unsigned __int8 *)v1 + v11[12]));
}

unint64_t sub_1000C50EC(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0x7461446572616873;
      break;
    case 4:
      unint64_t result = 0x6974617269707865;
      break;
    case 5:
      unint64_t result = 0x6148656572616873;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
      unint64_t result = 0x7079546572616873;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000C5210(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163AF60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1000C7F9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v15 = *v3;
  char v17 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for ShareRecord();
    LOBYTE(v15) = 1;
    type metadata accessor for UUID();
    sub_1000C7E20(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v15) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v15) = 3;
    type metadata accessor for Date();
    sub_1000C7E20((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v15) = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    unint64_t v10 = (char *)v3 + *(int *)(v9 + 36);
    char v11 = *v10;
    uint64_t v13 = *((void *)v10 + 1);
    uint64_t v12 = *((void *)v10 + 2);
    LOBYTE(v15) = v11;
    *((void *)&v15 + 1) = v13;
    uint64_t v16 = v12;
    char v17 = 5;
    sub_1000C7FF0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v15) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v15) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v15) = *((unsigned char *)v3 + *(int *)(v9 + 48));
    char v17 = 8;
    sub_1000C8044();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000C55C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v3 - 8);
  uint64_t v44 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for UUID();
  uint64_t v53 = *(void *)(v49 - 8);
  uint64_t v8 = __chkstk_darwin(v49);
  unint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v40 - v11;
  uint64_t v48 = sub_10000588C((uint64_t *)&unk_10163AF78);
  uint64_t v45 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for ShareRecord();
  __chkstk_darwin(v52);
  uint64_t v16 = (_OWORD *)((char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = a1[3];
  uint64_t v50 = a1;
  sub_10001CD44(a1, v17);
  sub_1000C7F9C();
  uint64_t v18 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v50);
  }
  NSString v51 = v10;
  uint64_t v42 = v7;
  uint64_t v19 = v45;
  char v56 = 0;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v20 = (uint64_t)v16;
  _OWORD *v16 = v54;
  LOBYTE(v54) = 1;
  sub_1000C7E20((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v21 = v12;
  uint64_t v22 = v49;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v23 = v19;
  uint64_t v24 = (int *)v52;
  uint64_t v25 = v20 + *(int *)(v52 + 20);
  uint64_t v41 = *(void (**)(uint64_t, char *, uint64_t))(v53 + 32);
  v41(v25, v21, v22);
  LOBYTE(v54) = 2;
  uint64_t v26 = v51;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v27 = v22;
  id v28 = v24;
  v41(v20 + v24[6], v26, v27);
  LOBYTE(v54) = 3;
  sub_1000C7E20(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  id v29 = v42;
  uint64_t v30 = v47;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v20 + v28[7], v29, v30);
  LOBYTE(v54) = 4;
  uint64_t v31 = (uint64_t)v44;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_1000C69AC(v31, v20 + v28[8]);
  char v56 = 5;
  sub_1000C8098();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v32 = *((void *)&v54 + 1);
  uint64_t v33 = v55;
  uint64_t v34 = v20 + v28[9];
  *(unsigned char *)uint64_t v34 = v54;
  *(void *)(v34 + 8) = v32;
  *(void *)(v34 + 16) = v33;
  LOBYTE(v54) = 6;
  uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v36 = (uint64_t)v50;
  NSString v37 = (uint64_t *)(v20 + v28[10]);
  uint64_t *v37 = v35;
  v37[1] = v38;
  LOBYTE(v54) = 7;
  *(void *)(v20 + v28[11]) = KeyedDecodingContainer.decode(_:forKey:)();
  char v56 = 8;
  sub_1000C80EC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v48);
  *(unsigned char *)(v20 + v28[12]) = v54;
  sub_1000C8140(v20, v43);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v36);
  return sub_1000C81A4(v20);
}

unint64_t sub_1000C5E5C()
{
  return sub_1000C50EC(*v0);
}

uint64_t sub_1000C5E64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000C849C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000C5E8C(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1000C5E98(uint64_t a1)
{
  unint64_t v2 = sub_1000C7F9C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C5ED4(uint64_t a1)
{
  unint64_t v2 = sub_1000C7F9C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C5F10(void **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  [v7 encryptedValues];
  swift_getObjectType();
  static os_log_type_t.debug.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101342130;
  id v9 = v7;
  id v10 = [v9 description];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_10000B4CC();
  *(void *)(v8 + 32) = v11;
  *(void *)(v8 + 40) = v13;
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v14 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  uint64_t v15 = (int *)type metadata accessor for ShareRecord();
  uint64_t v16 = UUID.uuidString.getter();
  *((void *)&v33 + 1) = &type metadata for String;
  uint64_t v34 = &protocol witness table for String;
  *(void *)&long long v32 = v16;
  *((void *)&v32 + 1) = v17;
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v18 = v2 + v15[7];
  uint64_t v19 = type metadata accessor for Date();
  *((void *)&v33 + 1) = v19;
  uint64_t v34 = &protocol witness table for Date;
  uint64_t v20 = sub_10001D958((uint64_t *)&v32);
  uint64_t v21 = *(void *)(v19 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v21 + 16))(v20, v18, v19);
  CKRecordKeyValueSetting.subscript.setter();
  sub_10001E2BC(v2 + v15[8], (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v6, 1, v19) == 1)
  {
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_10163AC90);
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v34 = 0;
  }
  else
  {
    *((void *)&v33 + 1) = v19;
    uint64_t v34 = &protocol witness table for Date;
    uint64_t v22 = sub_10001D958((uint64_t *)&v32);
    (*(void (**)(uint64_t *, char *, uint64_t))(v21 + 32))(v22, v6, v19);
  }
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v23 = v2 + v15[9];
  uint64_t v25 = *(void *)(v23 + 8);
  uint64_t v24 = *(void *)(v23 + 16);
  *((void *)&v33 + 1) = &type metadata for String;
  uint64_t v34 = &protocol witness table for String;
  *(void *)&long long v32 = v25;
  *((void *)&v32 + 1) = v24;
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v26 = (uint64_t *)(v2 + v15[10]);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *((void *)&v33 + 1) = &type metadata for String;
  uint64_t v34 = &protocol witness table for String;
  *(void *)&long long v32 = v28;
  *((void *)&v32 + 1) = v27;
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v29 = *(void *)(v2 + v15[11]);
  *((void *)&v33 + 1) = &type metadata for UInt64;
  uint64_t v34 = &protocol witness table for UInt64;
  *(void *)&long long v32 = v29;
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v30 = *(unsigned __int8 *)(v2 + v15[12]);
  *((void *)&v33 + 1) = &type metadata for Int;
  uint64_t v34 = &protocol witness table for Int;
  *(void *)&long long v32 = v30;
  CKRecordKeyValueSetting.subscript.setter();
  return swift_unknownObjectRelease();
}

Swift::Int sub_1000C6340()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000C6384()
{
  return Hasher._finalize()();
}

uint64_t sub_1000C63C0()
{
  if (qword_101636878 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for URL();
  sub_100010324(v0, (uint64_t)qword_10170D758);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:isDirectory:)();

  return swift_bridgeObjectRelease();
}

unint64_t sub_1000C6468()
{
  unint64_t result = qword_10163AE48;
  if (!qword_10163AE48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AE48);
  }
  return result;
}

uint64_t sub_1000C64C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C55C4(a1, a2);
}

uint64_t sub_1000C64D8(void *a1)
{
  return sub_1000C5210(a1);
}

BOOL sub_1000C64F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10165C700);
  __chkstk_darwin(v8);
  id v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v35 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v35 - v18;
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)return 0; {
  uint64_t v38 = v5;
  }
  uint64_t v20 = (int *)type metadata accessor for ShareRecord();
  if ((static UUID.== infix(_:_:)() & 1) == 0
    || (static UUID.== infix(_:_:)() & 1) == 0
    || (static Date.== infix(_:_:)() & 1) == 0)
  {
    return 0;
  }
  sub_10001E2BC(a1 + v20[8], (uint64_t)v19);
  sub_10001E2BC(a2 + v20[8], (uint64_t)v17);
  uint64_t v21 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10001E2BC((uint64_t)v19, (uint64_t)v10);
  uint64_t v37 = v21;
  sub_10001E2BC((uint64_t)v17, v21);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  if (v36((uint64_t)v10, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4((uint64_t)v19, (uint64_t *)&unk_10163AC90);
    if (v36(v37, 1, v4) == 1)
    {
      sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10163AC90);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  sub_10001E2BC((uint64_t)v10, (uint64_t)v14);
  if (v36(v37, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4((uint64_t)v19, (uint64_t *)&unk_10163AC90);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v4);
LABEL_10:
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10165C700);
    return 0;
  }
  uint64_t v22 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v7, v37, v4);
  sub_1000C7E20(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
  LODWORD(v37) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v22 + 8);
  v23(v7, v4);
  sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_10163AC90);
  sub_10001DAB4((uint64_t)v19, (uint64_t *)&unk_10163AC90);
  v23(v14, v4);
  sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10163AC90);
  if ((v37 & 1) == 0) {
    return 0;
  }
LABEL_12:
  uint64_t v24 = v20[9];
  uint64_t v25 = a1 + v24;
  int v26 = *(unsigned __int8 *)(a1 + v24);
  uint64_t v27 = (unsigned __int8 *)(a2 + v24);
  if (v26 != *v27) {
    return 0;
  }
  if (*(void *)(v25 + 8) == *((void *)v27 + 1) && *(void *)(v25 + 16) == *((void *)v27 + 2)
    || (v28 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v28 & 1) != 0))
  {
    if ((uint64_t v30 = v20[10],
          uint64_t v31 = *(void *)(a1 + v30),
          uint64_t v32 = *(void *)(a1 + v30 + 8),
          long long v33 = (void *)(a2 + v30),
          v31 == *v33)
      && v32 == v33[1]
      || (v34 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v34 & 1) != 0))
    {
      if (*(void *)(a1 + v20[11]) == *(void *)(a2 + v20[11])) {
        return *(unsigned __int8 *)(a1 + v20[12]) == *(unsigned __int8 *)(a2 + v20[12]);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000C69AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ShareRecord()
{
  uint64_t result = qword_10163AED8;
  if (!qword_10163AED8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for XPCActivity.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ShareRecord.ShareRecordConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C6BBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareRecord.ShareRecordConversionError()
{
  return &type metadata for ShareRecord.ShareRecordConversionError;
}

uint64_t *sub_1000C6BF4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    id v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    v19(v15, v16, v17);
    uint64_t v20 = a3[8];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))((char *)a2 + v20, 1, v17))
    {
      uint64_t v23 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      v19(v21, v22, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v17);
    }
    uint64_t v25 = a3[9];
    uint64_t v26 = a3[10];
    uint64_t v27 = (char *)a1 + v25;
    char v28 = (char *)a2 + v25;
    *uint64_t v27 = *v28;
    uint64_t v29 = *((void *)v28 + 2);
    *((void *)v27 + 1) = *((void *)v28 + 1);
    *((void *)v27 + 2) = v29;
    uint64_t v30 = (uint64_t *)((char *)a1 + v26);
    uint64_t v31 = (uint64_t *)((char *)a2 + v26);
    uint64_t v32 = v31[1];
    void *v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = a3[12];
    *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *((unsigned char *)a1 + v33) = *((unsigned char *)a2 + v33);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000C6E54(uint64_t a1, int *a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID();
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  uint64_t v7 = a1 + a2[7];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  id v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = a1 + a2[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *sub_1000C6FBC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  id v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v18(v14, v15, v16);
  uint64_t v19 = a3[8];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))((char *)a2 + v19, 1, v16))
  {
    uint64_t v22 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v18(v20, v21, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v16);
  }
  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  uint64_t v25 = (char *)a1 + v23;
  uint64_t v26 = (char *)a2 + v23;
  *uint64_t v25 = *v26;
  uint64_t v27 = *((void *)v26 + 2);
  *((void *)v25 + 1) = *((void *)v26 + 1);
  *((void *)v25 + 2) = v27;
  char v28 = (uint64_t *)((char *)a1 + v24);
  uint64_t v29 = (uint64_t *)((char *)a2 + v24);
  uint64_t v30 = v29[1];
  void *v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = a3[12];
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  *((unsigned char *)a1 + v31) = *((unsigned char *)a2 + v31);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_1000C71CC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v19 + 24);
  v33(v16, v17, v18);
  uint64_t v20 = a3[8];
  uint64_t v21 = (char *)a2 + v20;
  uint64_t v22 = *(uint64_t (**)(void))(v19 + 48);
  char v34 = (char *)a1 + v20;
  LODWORD(v14) = v22();
  int v23 = ((uint64_t (*)(char *, uint64_t, uint64_t))v22)(v21, 1, v18);
  if (v14)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v34, v21, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v34, 0, 1, v18);
      goto LABEL_9;
    }
    size_t v24 = *(void *)(*(void *)(sub_10000588C((uint64_t *)&unk_10163AC90) - 8) + 64);
    uint64_t v25 = v34;
  }
  else
  {
    if (!v23)
    {
      v33(v34, v21, v18);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v34, v18);
    size_t v24 = *(void *)(*(void *)(sub_10000588C((uint64_t *)&unk_10163AC90) - 8) + 64);
    uint64_t v25 = v34;
  }
  memcpy(v25, v21, v24);
LABEL_9:
  uint64_t v26 = a3[9];
  uint64_t v27 = (char *)a1 + v26;
  char v28 = (char *)a2 + v26;
  *uint64_t v27 = *v28;
  *((void *)v27 + 1) = *((void *)v28 + 1);
  *((void *)v27 + 2) = *((void *)v28 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[10];
  uint64_t v30 = (uint64_t *)((char *)a1 + v29);
  uint64_t v31 = (uint64_t *)((char *)a2 + v29);
  void *v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  return a1;
}

char *sub_1000C74B0(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v16(v12, v13, v14);
  uint64_t v17 = a3[8];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(&a2[v17], 1, v14))
  {
    uint64_t v20 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    v16(v18, v19, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
  }
  uint64_t v21 = a3[9];
  uint64_t v22 = a3[10];
  int v23 = &a1[v21];
  size_t v24 = &a2[v21];
  long long v25 = *(_OWORD *)v24;
  *((void *)v23 + 2) = *((void *)v24 + 2);
  *(_OWORD *)int v23 = v25;
  *(_OWORD *)&a1[v22] = *(_OWORD *)&a2[v22];
  uint64_t v26 = a3[12];
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  a1[v26] = a2[v26];
  return a1;
}

uint64_t *sub_1000C76A0(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v17 + 40);
  v36(v14, v15, v16);
  uint64_t v18 = a3[8];
  uint64_t v19 = &a2[v18];
  uint64_t v20 = *(uint64_t (**)(void))(v17 + 48);
  uint64_t v37 = (char *)a1 + v18;
  LODWORD(v12) = v20();
  int v21 = ((uint64_t (*)(char *, uint64_t, uint64_t))v20)(v19, 1, v16);
  if (v12)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v37, v19, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v37, 0, 1, v16);
      goto LABEL_9;
    }
    size_t v22 = *(void *)(*(void *)(sub_10000588C((uint64_t *)&unk_10163AC90) - 8) + 64);
    int v23 = v37;
  }
  else
  {
    if (!v21)
    {
      v36(v37, v19, v16);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v37, v16);
    size_t v22 = *(void *)(*(void *)(sub_10000588C((uint64_t *)&unk_10163AC90) - 8) + 64);
    int v23 = v37;
  }
  memcpy(v23, v19, v22);
LABEL_9:
  uint64_t v24 = a3[9];
  long long v25 = (char *)a1 + v24;
  uint64_t v26 = &a2[v24];
  *long long v25 = *v26;
  uint64_t v28 = *((void *)v26 + 1);
  uint64_t v27 = *((void *)v26 + 2);
  *((void *)v25 + 1) = v28;
  *((void *)v25 + 2) = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[10];
  uint64_t v30 = (uint64_t *)((char *)a1 + v29);
  uint64_t v31 = (uint64_t *)&a2[v29];
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  void *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[12];
  *(uint64_t *)((char *)a1 + a3[11]) = *(void *)&a2[a3[11]];
  *((unsigned char *)a1 + v34) = a2[v34];
  return a1;
}

uint64_t sub_1000C7958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C796C);
}

uint64_t sub_1000C796C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_7:
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v12(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[7];
    goto LABEL_7;
  }
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v7 = v11;
    uint64_t v8 = *(void *)(v11 - 8);
    uint64_t v9 = a3[8];
    goto LABEL_7;
  }
  unint64_t v14 = *(void *)(a1 + a3[9] + 16);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1000C7AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C7AE4);
}

uint64_t sub_1000C7AE4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t v12 = type metadata accessor for Date();
    if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
    {
      uint64_t v9 = v12;
      uint64_t v10 = *(void *)(v12 - 8);
      uint64_t v11 = a4[7];
    }
    else
    {
      uint64_t result = sub_10000588C((uint64_t *)&unk_10163AC90);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[9] + 16) = (a2 - 1);
        return result;
      }
      uint64_t v9 = result;
      uint64_t v10 = *(void *)(result - 8);
      uint64_t v11 = a4[8];
    }
  }
  unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v14(a1 + v11, a2, a2, v9);
}

void sub_1000C7C44()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F)
    {
      sub_1000C7D80();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1000C7D80()
{
  if (!qword_10165C690)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10165C690);
    }
  }
}

uint64_t sub_1000C7DD8()
{
  return sub_1000C7E20(&qword_10163AF38, (void (*)(uint64_t))type metadata accessor for ShareRecord);
}

uint64_t sub_1000C7E20(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000C7E6C()
{
  unint64_t result = qword_10163AF40;
  if (!qword_10163AF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AF40);
  }
  return result;
}

uint64_t sub_1000C7EC0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000C7E20(&qword_101660C00, (void (*)(uint64_t))type metadata accessor for ShareRecord);
  uint64_t result = sub_1000C7E20(&qword_10163AF50, (void (*)(uint64_t))type metadata accessor for ShareRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000C7F44(uint64_t a1)
{
  uint64_t result = sub_1000C7E20(&qword_10163AF58, (void (*)(uint64_t))type metadata accessor for ShareRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C7F9C()
{
  unint64_t result = qword_10163AF68;
  if (!qword_10163AF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AF68);
  }
  return result;
}

unint64_t sub_1000C7FF0()
{
  unint64_t result = qword_10166EB20;
  if (!qword_10166EB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166EB20);
  }
  return result;
}

unint64_t sub_1000C8044()
{
  unint64_t result = qword_10163AF70;
  if (!qword_10163AF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AF70);
  }
  return result;
}

unint64_t sub_1000C8098()
{
  unint64_t result = qword_10163AF88;
  if (!qword_10163AF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AF88);
  }
  return result;
}

unint64_t sub_1000C80EC()
{
  unint64_t result = qword_10163AF90;
  if (!qword_10163AF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AF90);
  }
  return result;
}

uint64_t sub_1000C8140(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C81A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ShareRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for PublishingPolicy(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ShareRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C835CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareRecord.CodingKeys()
{
  return &type metadata for ShareRecord.CodingKeys;
}

unint64_t sub_1000C8398()
{
  unint64_t result = qword_10163AFA8;
  if (!qword_10163AFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AFA8);
  }
  return result;
}

unint64_t sub_1000C83F0()
{
  unint64_t result = qword_10163AFB0;
  if (!qword_10163AFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AFB0);
  }
  return result;
}

unint64_t sub_1000C8448()
{
  unint64_t result = qword_10163AFB8;
  if (!qword_10163AFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163AFB8);
  }
  return result;
}

uint64_t sub_1000C849C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EEA50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013EE1B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7461446572616873 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6974617269707865 && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6148656572616873 && a2 == 0xEC000000656C646ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013EE400 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F3650 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7079546572616873 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t sub_1000C8860(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163B1C0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1000CFC68();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = a2;
  v11[1] = a3;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000C89B0()
{
  return 0x65756C6156776172;
}

uint64_t sub_1000C89C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_1000C8A60(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000C8A6C(uint64_t a1)
{
  unint64_t v2 = sub_1000CFC68();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C8AA8(uint64_t a1)
{
  unint64_t v2 = sub_1000CFC68();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C8AE4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  sub_1000362FC();
  if (DataProtocol.isNull.getter())
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0xF000000000000000;
  }
  else
  {
    uint64_t v5 = Data.trimmed.getter();
    unint64_t v6 = v7;
  }
  uint64_t result = sub_10001CFB8(v3, v4);
  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t sub_1000C8B70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_1000361E0(v2, v3);
}

void *sub_1000C8B7C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000CF5F4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1000C8BA8(void *a1)
{
  return sub_1000C8860(a1, *v1, v1[1]);
}

Swift::Int sub_1000C8BC4()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  sub_1000361E0(v1, v2);
  Data.hash(into:)();
  sub_10001CFB8(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000C8C28()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  sub_1000361E0(v2, v1);
  Data.hash(into:)();

  return sub_10001CFB8(v2, v1);
}

Swift::Int sub_1000C8C88()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  sub_1000361E0(v1, v2);
  Data.hash(into:)();
  sub_10001CFB8(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000C8CE8()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v0 - 8);
  static String.Encoding.utf8.getter();
  uint64_t result = String.init(data:encoding:)();
  if (!v2) {
    return Data.hexString.getter();
  }
  return result;
}

uint64_t sub_1000C8D80(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a1, v3);
  sub_1000361E0(v4, v5);
  char v6 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v2, v3, v4, v5);
  sub_10001CFB8(v4, v5);
  sub_10001CFB8(v2, v3);
  return v6 & 1;
}

uint64_t sub_1000C8E00()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v1 - 8);
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  sub_1000CFD24((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x203A4E5320;
  v3._object = (void *)0xE500000000000000;
  String.append(_:)(v3);
  uint64_t v4 = type metadata accessor for LocalFindableAccessoryRecord();
  unint64_t v5 = (uint64_t *)(v0 + *(int *)(v4 + 28));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  sub_1000361E0(*v5, v7);
  static String.Encoding.utf8.getter();
  uint64_t v8 = String.init(data:encoding:)();
  if (!v9) {
    uint64_t v8 = Data.hexString.getter();
  }
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v6, v7);
  v10._countAndFlagsBits = 0x203A4E53746C4120;
  v10._object = (void *)0xE800000000000000;
  String.append(_:)(v10);
  sub_100037A38(*(void *)(v0 + *(int *)(v4 + 32)), *(void *)(v0 + *(int *)(v4 + 32) + 8));
  sub_10000588C(&qword_10163B068);
  v11._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 0x203A64693CLL;
}

unint64_t sub_1000C8FF0(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6C65646F6DLL;
      break;
    case 2:
      unint64_t result = 0x65566D6574737973;
      break;
    case 3:
    case 4:
      unint64_t result = 0xD000000000000015;
      break;
    case 5:
      unint64_t result = 0x64496E6D66;
      break;
    case 6:
      unint64_t result = 0x6449726F646E6576;
      break;
    case 7:
      unint64_t result = 0x49746375646F7270;
      break;
    case 8:
      unint64_t result = 0x45676E6972696170;
      break;
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    case 10:
      unint64_t result = 0x4B65746176697270;
      break;
    case 11:
      unint64_t result = 0x697274656D6D7973;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000C9174()
{
  return sub_1000C8FF0(*v0);
}

uint64_t sub_1000C917C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000CF764(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000C91A4(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_1000C91B0(uint64_t a1)
{
  unint64_t v2 = sub_1000CDA2C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C91EC(uint64_t a1)
{
  unint64_t v2 = sub_1000CDA2C();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000C922C()
{
  return 0xD00000000000001CLL;
}

unint64_t sub_1000C9248()
{
  return 0xD000000000000016;
}

uint64_t sub_1000C926C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10001D2E4;
  return CloudBacked.creationDate(store:)(a1, a2, a3, a4);
}

uint64_t sub_1000C9330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_100033F68;
  return CloudBacked.modificationDate(store:)(a1, a2, a3, a4);
}

uint64_t sub_1000C93F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *unint64_t v7 = v3;
  v7[1] = sub_1000C94A4;
  return CloudBacked.recordChangeTag(store:)(a1, a2, a3);
}

uint64_t sub_1000C94A4(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *v3;
  uint64_t v6 = swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }
  return v8(v6, v7);
}

void sub_1000C95B4(void *a1@<X0>, char *a2@<X8>)
{
}

void sub_1000C95CC(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_10163B070);
  __chkstk_darwin(v4 - 8);
  uint64_t v149 = (uint64_t)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SymmetricKey256();
  uint64_t v147 = *(void *)(v6 - 8);
  uint64_t v148 = v6;
  __chkstk_darwin(v6);
  v146 = (char *)&v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163B078);
  __chkstk_darwin(v8 - 8);
  uint64_t v151 = (uint64_t)&v130 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for P256PrivateKey();
  uint64_t v155 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  v150 = (char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = type metadata accessor for PeripheralConnectionMaterial(0);
  __chkstk_darwin(v152);
  uint64_t v154 = (uint64_t)&v130 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101638CF0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v130 - v17;
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v158 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  size_t v22 = (char *)&v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v156 = (char *)&v130 - v23;
  if (CKRecord.recordType.getter() == 0xD00000000000001CLL && v24 == 0x800000010134AF60)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      sub_1000CDB88();
      swift_allocError();
      unsigned char *v65 = 0;
      goto LABEL_17;
    }
  }
  v142 = v22;
  uint64_t v144 = v10;
  id v26 = [a1 recordID];
  id v27 = [v26 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v157 = v19;

  UUID.init(uuidString:)();
  uint64_t v28 = v157;
  swift_bridgeObjectRelease();
  uint64_t v29 = v158;
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48);
  if (v30(v18, 1, v28) == 1)
  {
    sub_10001DAB4((uint64_t)v18, &qword_101638CF0);
    sub_1000CDB88();
    swift_allocError();
    *uint64_t v31 = 1;
LABEL_17:
    swift_willThrow();

    return;
  }
  v141 = v30;
  uint64_t v32 = v156;
  v140 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  v140(v156, v18, v28);
  id v143 = a1;
  id v33 = [a1 encryptedValues];
  uint64_t v34 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 16);
  v145 = a2;
  v34((uint64_t)a2, v32, v28);
  NSString v35 = String._bridgeToObjectiveC()();
  id v36 = [v33 objectForKeyedSubscript:v35];

  if (!v36 || (v138 = v34, v161 = v36, uint64_t v37 = sub_10000588C((uint64_t *)&unk_10163AE50), (swift_dynamicCast() & 1) == 0))
  {
    sub_1000CDB88();
    swift_allocError();
    *uint64_t v63 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();

    uint64_t v43 = v157;
    uint64_t v64 = v158;
LABEL_19:
    uint64_t v67 = *(void (**)(char *, uint64_t))(v64 + 8);
    v67(v156, v43);
    v67(v145, v43);
    return;
  }
  uint64_t v137 = v37;
  uint64_t v38 = v33;
  uint64_t v39 = v159;
  unint64_t v40 = v160;
  NSString v41 = String._bridgeToObjectiveC()();
  id v139 = v38;
  id v42 = [v38 objectForKeyedSubscript:v41];

  uint64_t v43 = v157;
  id v44 = v143;
  if (!v42 || (id v161 = v42, (swift_dynamicCast() & 1) == 0))
  {
    sub_1000CDB88();
    swift_allocError();
    *unsigned int v66 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();

    sub_10001CFB8(v39, v40);
    uint64_t v64 = v158;
    goto LABEL_19;
  }
  uint64_t v135 = v39;
  uint64_t v45 = v159;
  unint64_t v46 = v160;
  uint64_t v47 = (int *)type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v48 = (uint64_t *)&v145[v47[5]];
  *uint64_t v48 = v45;
  v48[1] = v46;
  NSString v49 = String._bridgeToObjectiveC()();
  id v50 = [v139 objectForKeyedSubscript:v49];

  uint64_t v51 = v157;
  v136 = v47;
  if (!v50 || (id v161 = v50, (swift_dynamicCast() & 1) == 0))
  {
    sub_1000CDB88();
    swift_allocError();
    *uint64_t v68 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();

    sub_10001CFB8(v135, v40);
    uint64_t v58 = *(void (**)(char *, uint64_t))(v158 + 8);
    v58(v156, v51);
    uint64_t v57 = v51;
    int v62 = 0;
    int v59 = 0;
    int v60 = 0;
    int v61 = 0;
    LODWORD(v158) = 0;
    goto LABEL_22;
  }
  unint64_t v52 = v160;
  uint64_t v53 = v145;
  long long v54 = (uint64_t *)&v145[v47[6]];
  *long long v54 = v159;
  v54[1] = v52;
  uint64_t v55 = v135;
  uint64_t v159 = v135;
  unint64_t v160 = v40;
  sub_1000361E0(v135, v40);
  unint64_t v134 = sub_1000362FC();
  if (DataProtocol.isNull.getter())
  {
    sub_10001CFB8(v55, v40);
    sub_1000CDB88();
    swift_allocError();
    *char v56 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();

    sub_10001CFB8(v55, v40);
    uint64_t v57 = v157;
    uint64_t v58 = *(void (**)(char *, uint64_t))(v158 + 8);
    v58(v156, v157);
    int v59 = 0;
    int v60 = 0;
    int v61 = 0;
    LODWORD(v158) = 0;
    int v62 = 1;
    goto LABEL_22;
  }
  uint64_t v72 = Data.trimmed.getter();
  uint64_t v73 = v55;
  unint64_t v75 = v74;
  sub_10001CFB8(v73, v40);
  uint64_t v76 = (uint64_t *)&v53[v47[7]];
  *uint64_t v76 = v72;
  v76[1] = v75;
  uint64_t v133 = v72;
  sub_1000361E0(v72, v75);
  NSString v77 = String._bridgeToObjectiveC()();
  id v78 = [v139 objectForKeyedSubscript:v77];

  if (v78)
  {
    id v161 = v78;
    if (swift_dynamicCast())
    {
      uint64_t v79 = v159;
      unint64_t v132 = v160;
      if ((DataProtocol.isNull.getter() & 1) == 0)
      {
        id v78 = (id)Data.trimmed.getter();
        uint64_t v88 = v79;
        unint64_t v80 = v89;
        sub_10001CFB8(v88, v132);
        goto LABEL_39;
      }
      sub_10001CFB8(v79, v132);
    }
    id v78 = 0;
  }
  unint64_t v80 = 0xF000000000000000;
LABEL_39:
  uint64_t v81 = &v145[v47[8]];
  *(void *)uint64_t v81 = v78;
  *((void *)v81 + 1) = v80;
  NSString v82 = String._bridgeToObjectiveC()();
  id v83 = [v139 objectForKeyedSubscript:v82];

  uint64_t v84 = v157;
  if (!v83) {
    goto LABEL_43;
  }
  id v161 = v83;
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_43;
  }
  unint64_t v132 = v75;
  uint64_t v85 = v159;
  unint64_t v86 = v160;
  sub_1000361E0(v159, v160);
  unint64_t v134 = v85;
  UUID.init(data:)();
  if (v141(v16, 1, v84) == 1)
  {
    sub_10001CFB8(v134, v86);
    sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
    unint64_t v75 = v132;
LABEL_43:
    sub_1000CDB88();
    swift_allocError();
    *uint64_t v87 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();

    sub_10001CFB8(v133, v75);
    sub_10001CFB8(v135, v40);
    uint64_t v58 = *(void (**)(char *, uint64_t))(v158 + 8);
    v58(v156, v84);
    int v60 = 0;
    int v61 = 0;
    LODWORD(v158) = 0;
    uint64_t v57 = v84;
    int v62 = 1;
    int v59 = 1;
    goto LABEL_22;
  }
  unint64_t v131 = v86;
  v141 = (unsigned int (*)(char *, uint64_t, uint64_t))v40;
  int v90 = v142;
  v140(v142, v16, v84);
  int v91 = v145;
  v138((uint64_t)&v145[v47[9]], v90, v84);
  NSString v92 = String._bridgeToObjectiveC()();
  id v93 = [v139 objectForKeyedSubscript:v92];

  uint64_t v94 = v158;
  uint64_t v95 = v134;
  if (!v93 || (uint64_t v159 = (uint64_t)v93, (swift_dynamicCast() & 1) == 0))
  {
    sub_1000CDB88();
    swift_allocError();
    unsigned char *v107 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();

    sub_10001CFB8(v95, v131);
    sub_10001CFB8(v133, v132);
    sub_10001CFB8(v135, (unint64_t)v141);
    uint64_t v58 = *(void (**)(char *, uint64_t))(v94 + 8);
    uint64_t v99 = v157;
    v58(v90, v157);
LABEL_59:
    v58(v156, v99);
    int v61 = 0;
    LODWORD(v158) = 0;
    uint64_t v57 = v99;
LABEL_60:
    int v62 = 1;
    int v59 = 1;
    int v60 = 1;
    goto LABEL_22;
  }
  *(void *)&v91[v47[10]] = (unsigned __int16)v161;
  NSString v96 = String._bridgeToObjectiveC()();
  id v97 = [v139 objectForKeyedSubscript:v96];

  unint64_t v98 = (unint64_t)v141;
  uint64_t v99 = v157;
  if (!v97
    || (uint64_t v159 = (uint64_t)v97, (swift_dynamicCast() & 1) == 0)
    || (*(void *)&v91[v47[12]] = v161,
        NSString v100 = String._bridgeToObjectiveC()(),
        id v101 = [v139 objectForKeyedSubscript:v100],
        v100,
        !v101))
  {
LABEL_58:
    sub_1000CDB88();
    swift_allocError();
    unsigned char *v108 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();

    sub_10001CFB8(v134, v131);
    sub_10001CFB8(v133, v132);
    sub_10001CFB8(v135, v98);
    uint64_t v58 = *(void (**)(char *, uint64_t))(v94 + 8);
    v58(v142, v99);
    goto LABEL_59;
  }
  uint64_t v159 = (uint64_t)v101;
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v99 = v157;
    uint64_t v94 = v158;
    unint64_t v98 = (unint64_t)v141;
    goto LABEL_58;
  }
  *(void *)&v145[v136[11]] = (unsigned __int16)v161;
  NSString v102 = String._bridgeToObjectiveC()();
  id v103 = [v139 objectForKeyedSubscript:v102];

  if (!v103 || (id v161 = v103, (swift_dynamicCast() & 1) == 0))
  {
    sub_1000CDB88();
    swift_allocError();
    *uint64_t v109 = 0;
    swift_willThrow();
    goto LABEL_62;
  }
  uint64_t v104 = v159;
  unint64_t v105 = v160;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1000CFD24(&qword_10163B020, (void (*)(uint64_t))type metadata accessor for PeripheralConnectionMaterial);
  uint64_t v106 = v153;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v106)
  {
    swift_release();
    sub_10001CFB8(v104, v105);
LABEL_62:
    swift_unknownObjectRelease();

    sub_10001CFB8(v134, v131);
    sub_10001CFB8(v133, v132);
    sub_10001CFB8(v135, (unint64_t)v141);
    uint64_t v57 = v157;
    uint64_t v58 = *(void (**)(char *, uint64_t))(v158 + 8);
    v58(v142, v157);
    v58(v156, v57);
    int v61 = 0;
    LODWORD(v158) = 0;
    goto LABEL_60;
  }
  swift_release();
  sub_1000CDBDC(v154, (uint64_t)&v145[v136[13]], type metadata accessor for PeripheralConnectionMaterial);
  NSString v110 = String._bridgeToObjectiveC()();
  id v111 = [v139 objectForKeyedSubscript:v110];

  if (!v111) {
    goto LABEL_67;
  }
  id v161 = v111;
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_67;
  }
  uint64_t v113 = v159;
  unint64_t v112 = v160;
  sub_1000361E0(v159, v160);
  sub_1000CFD24(&qword_10163AFF0, (void (*)(uint64_t))&type metadata accessor for P256PrivateKey);
  uint64_t v114 = v151;
  uint64_t v115 = v144;
  KeyRepresenting.init(rawValue:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48))(v114, 1, v115) == 1)
  {
    sub_10001CFB8(v113, v112);
    sub_10001DAB4(v151, (uint64_t *)&unk_10163B078);
LABEL_67:
    sub_1000CDB88();
    swift_allocError();
    unsigned char *v116 = 0;
    swift_willThrow();
    sub_10001CFB8(v104, v105);
    swift_unknownObjectRelease();

    sub_10001CFB8(v134, v131);
    sub_10001CFB8(v133, v132);
    sub_10001CFB8(v135, (unint64_t)v141);
    sub_1000CDAD4(v154, type metadata accessor for PeripheralConnectionMaterial);
    uint64_t v57 = v157;
    uint64_t v58 = *(void (**)(char *, uint64_t))(v158 + 8);
    v58(v142, v157);
    v58(v156, v57);
    LODWORD(v158) = 0;
    int v62 = 1;
    int v59 = 1;
    int v60 = 1;
    int v61 = 1;
    goto LABEL_22;
  }
  uint64_t v117 = v155;
  uint64_t v118 = v150;
  uint64_t v119 = v144;
  (*(void (**)(char *, uint64_t, uint64_t))(v155 + 32))(v150, v151, v144);
  (*(void (**)(char *, char *, uint64_t))(v117 + 16))(&v145[v136[14]], v118, v119);
  NSString v120 = String._bridgeToObjectiveC()();
  id v121 = [v139 objectForKeyedSubscript:v120];

  if (v121)
  {
    id v161 = v121;
    if (swift_dynamicCast())
    {
      sub_1000CFD24(&qword_10163AFF8, (void (*)(uint64_t))&type metadata accessor for SymmetricKey256);
      uint64_t v122 = v149;
      uint64_t v123 = v148;
      KeyRepresenting.init(rawValue:)();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v122, 1, v123) != 1)
      {
        sub_10001CFB8(v104, v105);
        swift_unknownObjectRelease();

        sub_10001CFB8(v113, v112);
        sub_10001CFB8(v134, v131);
        sub_10001CFB8(v133, v132);
        sub_10001CFB8(v135, (unint64_t)v141);
        (*(void (**)(char *, uint64_t))(v155 + 8))(v150, v144);
        sub_1000CDAD4(v154, type metadata accessor for PeripheralConnectionMaterial);
        uint64_t v125 = v157;
        unint64_t v126 = *(void (**)(char *, uint64_t))(v158 + 8);
        v126(v142, v157);
        v126(v156, v125);
        uint64_t v127 = v146;
        unint64_t v128 = *(void (**)(char *, uint64_t, uint64_t))(v147 + 32);
        uint64_t v129 = v148;
        v128(v146, v149, v148);
        v128(&v145[v136[15]], (uint64_t)v127, v129);
        return;
      }
      sub_10001DAB4(v149, &qword_10163B070);
    }
  }
  sub_1000CDB88();
  swift_allocError();
  unsigned char *v124 = 0;
  swift_willThrow();
  sub_10001CFB8(v104, v105);
  swift_unknownObjectRelease();

  sub_10001CFB8(v113, v112);
  sub_10001CFB8(v134, v131);
  sub_10001CFB8(v133, v132);
  sub_10001CFB8(v135, (unint64_t)v141);
  (*(void (**)(char *, uint64_t))(v155 + 8))(v150, v144);
  sub_1000CDAD4(v154, type metadata accessor for PeripheralConnectionMaterial);
  uint64_t v57 = v157;
  uint64_t v58 = *(void (**)(char *, uint64_t))(v158 + 8);
  v58(v142, v157);
  v58(v156, v57);
  int v62 = 1;
  int v59 = 1;
  int v60 = 1;
  int v61 = 1;
  LODWORD(v158) = 1;
LABEL_22:
  v58(v145, v57);
  swift_bridgeObjectRelease();
  if (v62)
  {
    swift_bridgeObjectRelease();
    if ((v59 & 1) == 0) {
      goto LABEL_24;
    }
  }
  else if (!v59)
  {
LABEL_24:
    uint64_t v69 = v144;
    v70 = v136;
    if (v60) {
      goto LABEL_25;
    }
    goto LABEL_30;
  }
  v70 = v136;
  uint64_t v71 = v145;
  sub_10001CFB8(*(void *)&v145[v136[7]], *(void *)&v145[v136[7] + 8]);
  sub_100037A24(*(void *)&v71[v70[8]], *(void *)&v71[v70[8] + 8]);
  uint64_t v69 = v144;
  if (v60)
  {
LABEL_25:
    v58(&v145[v70[9]], v157);
    if ((v61 & 1) == 0) {
      goto LABEL_26;
    }
    goto LABEL_31;
  }
LABEL_30:
  if (!v61)
  {
LABEL_26:
    if (v158) {
      goto LABEL_32;
    }
    return;
  }
LABEL_31:
  sub_1000CDAD4((uint64_t)&v145[v70[13]], type metadata accessor for PeripheralConnectionMaterial);
  if (v158) {
LABEL_32:
  }
    (*(void (**)(char *, uint64_t))(v155 + 8))(&v145[v70[14]], v69);
}

uint64_t sub_1000CADC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10001C878;
  return CloudBacked.ckRecord(store:)(a1, a2, a3);
}

uint64_t sub_1000CAE74(id *a1)
{
  id v2 = [*a1 encryptedValues];
  swift_getObjectType();
  uint64_t v3 = type metadata accessor for LocalFindableAccessoryRecord();
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();
  sub_1000361E0(*(void *)(v1 + *(int *)(v3 + 28)), *(void *)(v1 + *(int *)(v3 + 28) + 8));
  CKRecordKeyValueSetting.subscript.setter();
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(v3 + 32));
  unint64_t v5 = v4[1];
  if (v5 >> 60 == 15)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    [v2 setObject:0 forKeyedSubscript:v6];
  }
  else
  {
    uint64_t v7 = *v4;
    sub_1000361E0(*v4, v5);
    sub_1000361E0(v7, v5);
    CKRecordKeyValueSetting.subscript.setter();
    sub_100037A24(v7, v5);
  }
  UUID.data.getter();
  CKRecordKeyValueSetting.subscript.setter();
  CKRecordKeyValueSetting.subscript.setter();
  CKRecordKeyValueSetting.subscript.setter();
  CKRecordKeyValueSetting.subscript.setter();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for PeripheralConnectionMaterial(0);
  sub_1000CFD24((unint64_t *)&unk_10163AFE0, (void (*)(uint64_t))type metadata accessor for PeripheralConnectionMaterial);
  dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  CKRecordKeyValueSetting.subscript.setter();
  type metadata accessor for P256PrivateKey();
  sub_1000CFD24(&qword_10163AFF0, (void (*)(uint64_t))&type metadata accessor for P256PrivateKey);
  KeyRepresenting.rawValue.getter();
  CKRecordKeyValueSetting.subscript.setter();
  type metadata accessor for SymmetricKey256();
  sub_1000CFD24(&qword_10163AFF8, (void (*)(uint64_t))&type metadata accessor for SymmetricKey256);
  KeyRepresenting.rawValue.getter();
  CKRecordKeyValueSetting.subscript.setter();
  return swift_unknownObjectRelease();
}

uint64_t sub_1000CB508(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SymmetricKey256();
  uint64_t v107 = *(void *)(v8 - 8);
  uint64_t v108 = v8;
  __chkstk_darwin(v8);
  uint64_t v106 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for P256PrivateKey();
  uint64_t v104 = *(void *)(v10 - 8);
  uint64_t v105 = v10;
  __chkstk_darwin(v10);
  id v103 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for PeripheralConnectionMaterial(0);
  __chkstk_darwin(v102);
  id v101 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v99 = *(void *)(v13 - 8);
  uint64_t v100 = v13;
  __chkstk_darwin(v13);
  unint64_t v98 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_10163B1D0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a3 - 8);
  __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v22 = (int *)type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v23 = *((void *)v22 - 1);
  __chkstk_darwin(v22);
  char v25 = (char *)&v97 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a2, a3);
  int v26 = swift_dynamicCast();
  id v27 = *(void (**)(char *, uint64_t, uint64_t, int *))(v23 + 56);
  if (v26)
  {
    v27(v18, 0, 1, v22);
    sub_1000CFCBC((uint64_t)v18, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    id v28 = [*a1 encryptedValues];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v30 = v22[5];
    uint64_t v31 = *(void *)&v25[v30];
    uint64_t v32 = *(void *)&v25[v30 + 8];
    id v33 = (uint64_t *)(v4 + v30);
    uint64_t v35 = *v33;
    unint64_t v34 = v33[1];
    if ((v31 != *v33 || v32 != v34) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v114 = &type metadata for String;
      uint64_t v115 = &protocol witness table for String;
      uint64_t v112 = v35;
      unint64_t v113 = v34;
      swift_bridgeObjectRetain();
      CKRecordKeyValueSetting.subscript.setter();
    }
    uint64_t v36 = v22[6];
    uint64_t v37 = *(void *)&v25[v36];
    uint64_t v38 = *(void *)&v25[v36 + 8];
    uint64_t v39 = (uint64_t *)(v4 + v36);
    uint64_t v41 = *v39;
    unint64_t v40 = v39[1];
    if ((v37 != *v39 || v38 != v40) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v114 = &type metadata for String;
      uint64_t v115 = &protocol witness table for String;
      uint64_t v112 = v41;
      unint64_t v113 = v40;
      swift_bridgeObjectRetain();
      CKRecordKeyValueSetting.subscript.setter();
    }
    uint64_t v110 = ObjectType;
    uint64_t v111 = v4;
    uint64_t v42 = v22[7];
    uint64_t v43 = *(void *)&v25[v42];
    unint64_t v44 = *(void *)&v25[v42 + 8];
    uint64_t v45 = (uint64_t *)(v4 + v42);
    uint64_t v46 = *v45;
    unint64_t v47 = v45[1];
    sub_1000361E0(v43, v44);
    sub_1000361E0(v46, v47);
    char v48 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v43, v44, v46, v47);
    sub_10001CFB8(v46, v47);
    sub_10001CFB8(v43, v44);
    if ((v48 & 1) == 0)
    {
      uint64_t v114 = &type metadata for Data;
      uint64_t v115 = &protocol witness table for Data;
      uint64_t v112 = v46;
      unint64_t v113 = v47;
      sub_1000361E0(v46, v47);
      CKRecordKeyValueSetting.subscript.setter();
    }
    uint64_t v49 = v22[8];
    id v50 = (uint64_t *)&v25[v49];
    unint64_t v51 = *(void *)&v25[v49 + 8];
    uint64_t v52 = v111;
    uint64_t v53 = v111 + v49;
    if (v51 >> 60 == 15)
    {
      unint64_t v54 = *(void *)(v53 + 8);
      if (v54 >> 60 != 15)
      {
        uint64_t v55 = *(void *)v53;
        uint64_t v114 = &type metadata for Data;
        uint64_t v115 = &protocol witness table for Data;
        uint64_t v112 = v55;
        unint64_t v113 = v54;
        sub_1000361E0(v55, v54);
        sub_1000361E0(v55, v54);
        CKRecordKeyValueSetting.subscript.setter();
        sub_100037A24(v55, v54);
      }
    }
    else
    {
      uint64_t v56 = *v50;
      unint64_t v57 = *(void *)(v53 + 8);
      if (v57 >> 60 == 15)
      {
        sub_1000361E0(v56, v51);
        NSString v58 = String._bridgeToObjectiveC()();
        [v28 setObject:0 forKeyedSubscript:v58];

        sub_100037A24(v56, v51);
      }
      else
      {
        uint64_t v59 = *(void *)v53;
        sub_100037A38(*(void *)v53, *(void *)(v53 + 8));
        sub_100037A38(v59, v57);
        sub_100037A38(v56, v51);
        char v60 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v56, v51, v59, v57);
        sub_100037A24(v59, v57);
        if ((v60 & 1) == 0)
        {
          uint64_t v114 = &type metadata for Data;
          uint64_t v115 = &protocol witness table for Data;
          uint64_t v112 = v59;
          unint64_t v113 = v57;
          sub_1000361E0(v59, v57);
          CKRecordKeyValueSetting.subscript.setter();
        }
        sub_100037A24(v56, v51);
        sub_100037A24(v59, v57);
        uint64_t v52 = v111;
      }
    }
    uint64_t v62 = v99;
    uint64_t v61 = v100;
    uint64_t v63 = v98;
    (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v98, v52 + v22[9], v100);
    sub_1000CFD24((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v64 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v61);
    uint64_t v65 = (uint64_t)v101;
    if ((v64 & 1) == 0)
    {
      uint64_t v66 = UUID.data.getter();
      uint64_t v114 = &type metadata for Data;
      uint64_t v115 = &protocol witness table for Data;
      uint64_t v112 = v66;
      unint64_t v113 = v67;
      CKRecordKeyValueSetting.subscript.setter();
    }
    uint64_t v68 = v22[10];
    uint64_t v69 = *(void *)&v25[v68];
    uint64_t v70 = v111;
    uint64_t v71 = *(void *)(v111 + v68);
    if (v69 != v71)
    {
      uint64_t v114 = &type metadata for Int;
      uint64_t v115 = &protocol witness table for Int;
      uint64_t v112 = v71;
      CKRecordKeyValueSetting.subscript.setter();
    }
    uint64_t v72 = v22[11];
    uint64_t v73 = *(void *)&v25[v72];
    uint64_t v74 = *(void *)(v70 + v72);
    if (v73 != v74)
    {
      uint64_t v114 = &type metadata for Int;
      uint64_t v115 = &protocol witness table for Int;
      uint64_t v112 = v74;
      CKRecordKeyValueSetting.subscript.setter();
    }
    uint64_t v75 = v22[12];
    uint64_t v76 = *(void *)&v25[v75];
    uint64_t v77 = *(void *)(v70 + v75);
    if (v76 != v77)
    {
      uint64_t v114 = &type metadata for Int64;
      uint64_t v115 = &protocol witness table for Int64;
      uint64_t v112 = v77;
      CKRecordKeyValueSetting.subscript.setter();
    }
    uint64_t v78 = v22[13];
    uint64_t v79 = &v25[v78];
    sub_1000CDBDC(v70 + v78, v65, type metadata accessor for PeripheralConnectionMaterial);
    char v80 = static MACAddress.== infix(_:_:)();
    id v109 = v28;
    if ((v80 & 1) != 0
      && (_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)&v79[*(int *)(v102 + 20)], *(void *)&v79[*(int *)(v102 + 20) + 8], *(void *)(v65 + *(int *)(v102 + 20)), *(void *)(v65 + *(int *)(v102 + 20) + 8)) & 1) != 0)
    {
      sub_1000CDAD4(v65, type metadata accessor for PeripheralConnectionMaterial);
    }
    else
    {
      sub_1000CDAD4(v65, type metadata accessor for PeripheralConnectionMaterial);
      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      PropertyListEncoder.init()();
      sub_1000CFD24((unint64_t *)&unk_10163AFE0, (void (*)(uint64_t))type metadata accessor for PeripheralConnectionMaterial);
      uint64_t v81 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      unint64_t v83 = v82;
      swift_release();
      uint64_t v114 = &type metadata for Data;
      uint64_t v115 = &protocol witness table for Data;
      uint64_t v112 = v81;
      unint64_t v113 = v83;
      CKRecordKeyValueSetting.subscript.setter();
    }
    uint64_t v85 = v103;
    uint64_t v84 = v104;
    uint64_t v86 = v105;
    (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v103, v70 + v22[14], v105);
    sub_1000CFD24(&qword_10163B1E0, (void (*)(uint64_t))&type metadata accessor for P256PrivateKey);
    char v87 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v86);
    if ((v87 & 1) == 0)
    {
      uint64_t v88 = P256PrivateKey.data.getter();
      uint64_t v114 = &type metadata for Data;
      uint64_t v115 = &protocol witness table for Data;
      uint64_t v112 = v88;
      unint64_t v113 = v89;
      CKRecordKeyValueSetting.subscript.setter();
    }
    int v91 = v106;
    uint64_t v90 = v107;
    uint64_t v92 = v108;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v106, v70 + v22[15], v108);
    sub_1000CFD24(&qword_10163B1E8, (void (*)(uint64_t))&type metadata accessor for SymmetricKey256);
    char v93 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v92);
    if (v93)
    {
      sub_1000CDAD4((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      return swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v95 = SymmetricKey256.data.getter();
      uint64_t v114 = &type metadata for Data;
      uint64_t v115 = &protocol witness table for Data;
      uint64_t v112 = v95;
      unint64_t v113 = v96;
      CKRecordKeyValueSetting.subscript.setter();
      swift_unknownObjectRelease();
      return sub_1000CDAD4((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    }
  }
  else
  {
    v27(v18, 1, 1, v22);
    sub_10001DAB4((uint64_t)v18, (uint64_t *)&unk_10163B1D0);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CC3FC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10163B038);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1000CDA2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  type metadata accessor for UUID();
  sub_1000CFD24(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for LocalFindableAccessoryRecord();
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v9 + 28));
    char v13 = 3;
    v11[1] = sub_1000CDB34();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v9 + 32));
    char v13 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 9;
    type metadata accessor for PeripheralConnectionMaterial(0);
    sub_1000CFD24((unint64_t *)&unk_10163AFE0, (void (*)(uint64_t))type metadata accessor for PeripheralConnectionMaterial);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 10;
    type metadata accessor for P256PrivateKey();
    sub_1000CFD24(&qword_10163B050, (void (*)(uint64_t))&type metadata accessor for P256PrivateKey);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 11;
    type metadata accessor for SymmetricKey256();
    sub_1000CFD24((unint64_t *)&unk_10163B058, (void (*)(uint64_t))&type metadata accessor for SymmetricKey256);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000CC89C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v44 = type metadata accessor for SymmetricKey256();
  uint64_t v41 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v43 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for P256PrivateKey();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  __chkstk_darwin(v4);
  uint64_t v45 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PeripheralConnectionMaterial(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  long long v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t v15 = sub_10000588C(&qword_10163B000);
  uint64_t v46 = *(void *)(v15 - 8);
  uint64_t v47 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = (int *)type metadata accessor for LocalFindableAccessoryRecord();
  __chkstk_darwin(v55);
  uint64_t v53 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a1[3];
  unint64_t v51 = a1;
  sub_10001CD44(a1, v19);
  sub_1000CDA2C();
  id v50 = v17;
  uint64_t v20 = (uint64_t)v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v54 = v9;
  if (v20) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v51);
  }
  uint64_t v21 = v12;
  uint64_t v40 = v6;
  uint64_t v52 = v8;
  uint64_t v22 = v46;
  LOBYTE(v57) = 0;
  uint64_t v23 = sub_1000CFD24((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v39 = v23;
  uint64_t v24 = v53;
  char v25 = v14;
  int v26 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
  v26(v53, v25, v9);
  LOBYTE(v57) = 1;
  uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)();
  id v28 = v55;
  uint64_t v29 = (uint64_t *)&v24[v55[5]];
  *uint64_t v29 = v27;
  v29[1] = v30;
  LOBYTE(v57) = 2;
  uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v38 = v26;
  uint64_t v32 = (uint64_t *)&v24[v28[6]];
  *uint64_t v32 = v31;
  v32[1] = v33;
  char v58 = 3;
  sub_1000CDA80();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)&v24[v28[7]] = v57;
  char v58 = 4;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(_OWORD *)&v24[v28[8]] = v57;
  LOBYTE(v57) = 5;
  uint64_t v34 = v54;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v38(&v24[v28[9]], v21, v34);
  LOBYTE(v57) = 6;
  *(void *)&v24[v28[10]] = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v57) = 7;
  *(void *)&v24[v55[11]] = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v57) = 8;
  *(void *)&v24[v55[12]] = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v57) = 9;
  sub_1000CFD24(&qword_10163B020, (void (*)(uint64_t))type metadata accessor for PeripheralConnectionMaterial);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_1000CFCBC((uint64_t)v52, (uint64_t)&v53[v55[13]], type metadata accessor for PeripheralConnectionMaterial);
  LOBYTE(v57) = 10;
  sub_1000CFD24(&qword_10163B028, (void (*)(uint64_t))&type metadata accessor for P256PrivateKey);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(&v53[v55[14]], v45, v49);
  LOBYTE(v57) = 11;
  sub_1000CFD24(&qword_10163B030, (void (*)(uint64_t))&type metadata accessor for SymmetricKey256);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v50, v47);
  uint64_t v35 = (uint64_t)v53;
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v53[v55[15]], v43, v44);
  sub_1000CDBDC(v35, v42, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v51);
  return sub_1000CDAD4(v35, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
}

uint64_t sub_1000CD370(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1000CD3A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1000CD3E0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 40));
}

uint64_t sub_1000CD3EC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 44));
}

uint64_t sub_1000CD3F8(uint64_t a1)
{
  return sub_1002AAF08(*(void *)(v1 + *(int *)(a1 + 40)), *(void *)(v1 + *(int *)(a1 + 44)));
}

id sub_1000CD408()
{
  return SPBeaconTypeLocalFindable;
}

uint64_t sub_1000CD418()
{
  return Date.init(timeIntervalSince1970:)();
}

uint64_t sub_1000CD438@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_1000CD4A4()
{
  return 0;
}

uint64_t sub_1000CD4B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CC89C(a1, a2);
}

uint64_t sub_1000CD4C8(void *a1)
{
  return sub_1000CC3FC(a1);
}

uint64_t sub_1000CD4E0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000CFD24(&qword_10163AFC0, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
  uint64_t result = sub_1000CFD24(&qword_10163AFC8, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for LocalFindableAccessoryRecord()
{
  uint64_t result = qword_10163B0E8;
  if (!qword_10163B0E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000CD5B0(uint64_t a1)
{
  uint64_t result = sub_1000CFD24(&qword_10163AFD0, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CD608(uint64_t a1)
{
  uint64_t result = sub_1000CFD24(&qword_10163AFD8, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000CD660(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    goto LABEL_27;
  }
  uint64_t v4 = (int *)type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (char v10 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v11 = v4[6];
    uint64_t v12 = *(void *)(a1 + v11);
    uint64_t v13 = *(void *)(a1 + v11 + 8);
    uint64_t v14 = (void *)(a2 + v11);
    BOOL v15 = v12 == *v14 && v13 == v14[1];
    if (v15 || (char v10 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t v16 = v4[7];
      uint64_t v17 = *(void *)(a1 + v16);
      unint64_t v18 = *(void *)(a1 + v16 + 8);
      uint64_t v19 = (uint64_t *)(a2 + v16);
      uint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      sub_1000361E0(v17, v18);
      sub_1000361E0(v20, v21);
      char v22 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v17, v18, v20, v21);
      sub_10001CFB8(v20, v21);
      sub_10001CFB8(v17, v18);
      if ((v22 & 1) == 0) {
        goto LABEL_27;
      }
      uint64_t v23 = v4[8];
      uint64_t v24 = *(void *)(a1 + v23);
      unint64_t v25 = *(void *)(a1 + v23 + 8);
      int v26 = (uint64_t *)(a2 + v23);
      uint64_t v27 = *v26;
      unint64_t v28 = v26[1];
      if (v25 >> 60 == 15)
      {
        if (v28 >> 60 == 15)
        {
LABEL_19:
          if ((static UUID.== infix(_:_:)() & 1) != 0
            && *(void *)(a1 + v4[10]) == *(void *)(a2 + v4[10])
            && *(void *)(a1 + v4[11]) == *(void *)(a2 + v4[11])
            && *(void *)(a1 + v4[12]) == *(void *)(a2 + v4[12]))
          {
            uint64_t v30 = v4[13];
            uint64_t v31 = a1 + v30;
            uint64_t v32 = a2 + v30;
            if (static MACAddress.== infix(_:_:)())
            {
              uint64_t v33 = type metadata accessor for PeripheralConnectionMaterial(0);
              if (_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)(v31 + *(int *)(v33 + 20)), *(void *)(v31 + *(int *)(v33 + 20) + 8), *(void *)(v32 + *(int *)(v33 + 20)), *(void *)(v32 + *(int *)(v33 + 20) + 8)))
              {
                type metadata accessor for P256PrivateKey();
                sub_1000CFD24(&qword_10163B1F0, (void (*)(uint64_t))&type metadata accessor for P256PrivateKey);
                dispatch thunk of RawRepresentable.rawValue.getter();
                dispatch thunk of RawRepresentable.rawValue.getter();
                char v34 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v38, v39, v36, v37);
                sub_10001CFB8(v36, v37);
                sub_10001CFB8(v38, v39);
                if (v34)
                {
                  type metadata accessor for SymmetricKey256();
                  sub_1000CFD24(&qword_10163B1F8, (void (*)(uint64_t))&type metadata accessor for SymmetricKey256);
                  dispatch thunk of RawRepresentable.rawValue.getter();
                  dispatch thunk of RawRepresentable.rawValue.getter();
                  char v10 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v38, v39, v36, v37);
                  sub_10001CFB8(v36, v37);
                  sub_10001CFB8(v38, v39);
                  return v10 & 1;
                }
              }
            }
          }
LABEL_27:
          char v10 = 0;
          return v10 & 1;
        }
      }
      else if (v28 >> 60 != 15)
      {
        sub_100037A38(v24, v25);
        sub_100037A38(v27, v28);
        char v29 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v24, v25, v27, v28);
        sub_100037A24(v27, v28);
        sub_100037A24(v24, v25);
        if ((v29 & 1) == 0) {
          goto LABEL_27;
        }
        goto LABEL_19;
      }
      sub_100037A38(v24, v25);
      sub_100037A38(v27, v28);
      sub_100037A24(v24, v25);
      sub_100037A24(v27, v28);
      goto LABEL_27;
    }
  }
  return v10 & 1;
}

unint64_t sub_1000CDA2C()
{
  unint64_t result = qword_10163B008;
  if (!qword_10163B008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B008);
  }
  return result;
}

unint64_t sub_1000CDA80()
{
  unint64_t result = qword_10163B018;
  if (!qword_10163B018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B018);
  }
  return result;
}

uint64_t sub_1000CDAD4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1000CDB34()
{
  unint64_t result = qword_10163B048;
  if (!qword_10163B048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B048);
  }
  return result;
}

unint64_t sub_1000CDB88()
{
  unint64_t result = qword_10163B088;
  if (!qword_10163B088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B088);
  }
  return result;
}

uint64_t sub_1000CDBDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for ConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000CDD10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversionError()
{
  return &type metadata for ConversionError;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessoryProductData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1000361E0(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for AccessoryProductData(uint64_t a1)
{
  return sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for AccessoryProductData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1000361E0(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_10001CFB8(v5, v6);
  return a1;
}

uint64_t *assignWithTake for AccessoryProductData(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryProductData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessoryProductData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalFindableAccessoryRecord.SerialNumber()
{
  return &type metadata for LocalFindableAccessoryRecord.SerialNumber;
}

uint64_t getEnumTagSinglePayload for IdentitySigningType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LocalFindableAccessoryRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000CE024);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalFindableAccessoryRecord.CodingKeys()
{
  return &type metadata for LocalFindableAccessoryRecord.CodingKeys;
}

uint64_t *sub_1000CE05C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    int v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (uint64_t *)((char *)a1 + v9);
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    uint64_t v14 = (uint64_t *)((char *)a1 + v10);
    BOOL v15 = (uint64_t *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = a3[7];
    unint64_t v18 = (uint64_t *)((char *)a1 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v20, v21);
    uint64_t *v18 = v20;
    v18[1] = v21;
    uint64_t v22 = a3[8];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    unint64_t v25 = *((void *)v24 + 1);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    }
    else
    {
      uint64_t v27 = *(void *)v24;
      sub_1000361E0(*(void *)v24, *((void *)v24 + 1));
      *(void *)uint64_t v23 = v27;
      *((void *)v23 + 1) = v25;
    }
    v8((uint64_t *)((char *)a1 + a3[9]), (uint64_t *)((char *)a2 + a3[9]), v7);
    uint64_t v28 = a3[11];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *(uint64_t *)((char *)a1 + v28) = *(uint64_t *)((char *)a2 + v28);
    uint64_t v29 = a3[13];
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    uint64_t v30 = (char *)a1 + v29;
    uint64_t v31 = (char *)a2 + v29;
    uint64_t v32 = type metadata accessor for MACAddress();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
    uint64_t v33 = *(int *)(type metadata accessor for PeripheralConnectionMaterial(0) + 20);
    char v34 = (uint64_t *)&v30[v33];
    uint64_t v35 = (uint64_t *)&v31[v33];
    uint64_t v36 = *v35;
    unint64_t v37 = v35[1];
    sub_1000361E0(*v35, v37);
    uint64_t *v34 = v36;
    v34[1] = v37;
    uint64_t v38 = a3[14];
    unint64_t v39 = (char *)a1 + v38;
    uint64_t v40 = (char *)a2 + v38;
    uint64_t v41 = type metadata accessor for P256PrivateKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v39, v40, v41);
    uint64_t v42 = a3[15];
    uint64_t v43 = (char *)a1 + v42;
    uint64_t v44 = (char *)a2 + v42;
    uint64_t v45 = type metadata accessor for SymmetricKey256();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v43, v44, v45);
  }
  return a1;
}

uint64_t sub_1000CE2FC(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  unsigned int v6 = (uint64_t *)(a1 + a2[8]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10001CFB8(*v6, v7);
  }
  v5(a1 + a2[9], v4);
  uint64_t v8 = a1 + a2[13];
  uint64_t v9 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = type metadata accessor for PeripheralConnectionMaterial(0);
  sub_10001CFB8(*(void *)(v8 + *(int *)(v10 + 20)), *(void *)(v8 + *(int *)(v10 + 20) + 8));
  uint64_t v11 = a1 + a2[14];
  uint64_t v12 = type metadata accessor for P256PrivateKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = a1 + a2[15];
  uint64_t v14 = type metadata accessor for SymmetricKey256();
  BOOL v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);

  return v15(v13, v14);
}

uint64_t sub_1000CE4B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v8);
  uint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  void *v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = (void *)(a1 + v9);
  uint64_t v14 = (void *)(a2 + v9);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a3[7];
  uint64_t v17 = (uint64_t *)(a1 + v16);
  unint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v19, v20);
  *uint64_t v17 = v19;
  v17[1] = v20;
  uint64_t v21 = a3[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (uint64_t *)(a2 + v21);
  unint64_t v24 = v23[1];
  if (v24 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  }
  else
  {
    uint64_t v25 = *v23;
    sub_1000361E0(*v23, v23[1]);
    *(void *)uint64_t v22 = v25;
    *(void *)(v22 + 8) = v24;
  }
  v7(a1 + a3[9], a2 + a3[9], v6);
  uint64_t v26 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + v26) = *(void *)(a2 + v26);
  uint64_t v27 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  uint64_t v30 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
  uint64_t v31 = *(int *)(type metadata accessor for PeripheralConnectionMaterial(0) + 20);
  uint64_t v32 = (uint64_t *)(v28 + v31);
  uint64_t v33 = (uint64_t *)(v29 + v31);
  uint64_t v34 = *v33;
  unint64_t v35 = v33[1];
  sub_1000361E0(*v33, v35);
  *uint64_t v32 = v34;
  v32[1] = v35;
  uint64_t v36 = a3[14];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = a2 + v36;
  uint64_t v39 = type metadata accessor for P256PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
  uint64_t v40 = a3[15];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = a2 + v40;
  uint64_t v43 = type metadata accessor for SymmetricKey256();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
  return a1;
}

uint64_t sub_1000CE708(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  void *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = (uint64_t *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  sub_1000361E0(*v16, v18);
  uint64_t v19 = *v15;
  unint64_t v20 = v15[1];
  *uint64_t v15 = v17;
  v15[1] = v18;
  sub_10001CFB8(v19, v20);
  uint64_t v21 = a3[8];
  uint64_t v22 = (uint64_t *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  unint64_t v24 = *(void *)(a2 + v21 + 8);
  if (*(void *)(a1 + v21 + 8) >> 60 != 15)
  {
    if (v24 >> 60 != 15)
    {
      uint64_t v26 = *v23;
      sub_1000361E0(v26, v24);
      uint64_t v27 = *v22;
      unint64_t v28 = v22[1];
      uint64_t *v22 = v26;
      v22[1] = v24;
      sub_10001CFB8(v27, v28);
      goto LABEL_8;
    }
    sub_1000CE9DC((uint64_t)v22);
    goto LABEL_6;
  }
  if (v24 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    goto LABEL_8;
  }
  uint64_t v25 = *v23;
  sub_1000361E0(v25, v24);
  uint64_t *v22 = v25;
  v22[1] = v24;
LABEL_8:
  v7(a1 + a3[9], a2 + a3[9], v6);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  uint64_t v29 = a3[13];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  uint64_t v32 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 24))(v30, v31, v32);
  uint64_t v33 = *(int *)(type metadata accessor for PeripheralConnectionMaterial(0) + 20);
  uint64_t v34 = (uint64_t *)(v30 + v33);
  unint64_t v35 = (uint64_t *)(v31 + v33);
  uint64_t v36 = *v35;
  unint64_t v37 = v35[1];
  sub_1000361E0(*v35, v37);
  uint64_t v38 = *v34;
  unint64_t v39 = v34[1];
  uint64_t *v34 = v36;
  v34[1] = v37;
  sub_10001CFB8(v38, v39);
  uint64_t v40 = a3[14];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = a2 + v40;
  uint64_t v43 = type metadata accessor for P256PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 24))(v41, v42, v43);
  uint64_t v44 = a3[15];
  uint64_t v45 = a1 + v44;
  uint64_t v46 = a2 + v44;
  uint64_t v47 = type metadata accessor for SymmetricKey256();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 24))(v45, v46, v47);
  return a1;
}

uint64_t sub_1000CE9DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000CEA0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v7(a1 + a3[9], a2 + a3[9], v6);
  uint64_t v10 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = type metadata accessor for PeripheralConnectionMaterial(0);
  *(_OWORD *)(v12 + *(int *)(v15 + 20)) = *(_OWORD *)(v13 + *(int *)(v15 + 20));
  uint64_t v16 = a3[14];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for P256PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  uint64_t v20 = a3[15];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = type metadata accessor for SymmetricKey256();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  return a1;
}

uint64_t sub_1000CEBD4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  uint64_t v19 = *(void *)(a1 + v18);
  unint64_t v20 = *(void *)(a1 + v18 + 8);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  sub_10001CFB8(v19, v20);
  uint64_t v21 = a3[8];
  uint64_t v22 = (uint64_t *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  unint64_t v24 = *(void *)(a1 + v21 + 8);
  if (v24 >> 60 != 15)
  {
    unint64_t v25 = v23[1];
    if (v25 >> 60 != 15)
    {
      uint64_t v26 = *v22;
      uint64_t *v22 = *v23;
      v22[1] = v25;
      sub_10001CFB8(v26, v24);
      goto LABEL_6;
    }
    sub_1000CE9DC((uint64_t)v22);
  }
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
LABEL_6:
  v7(a1 + a3[9], a2 + a3[9], v6);
  uint64_t v27 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + v27) = *(void *)(a2 + v27);
  uint64_t v28 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 40))(v29, v30, v31);
  uint64_t v32 = *(int *)(type metadata accessor for PeripheralConnectionMaterial(0) + 20);
  uint64_t v33 = *(void *)(v29 + v32);
  unint64_t v34 = *(void *)(v29 + v32 + 8);
  *(_OWORD *)(v29 + v32) = *(_OWORD *)(v30 + v32);
  sub_10001CFB8(v33, v34);
  uint64_t v35 = a3[14];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  uint64_t v38 = type metadata accessor for P256PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 40))(v36, v37, v38);
  uint64_t v39 = a3[15];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  uint64_t v42 = type metadata accessor for SymmetricKey256();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 40))(v40, v41, v42);
  return a1;
}

uint64_t sub_1000CEE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CEE3C);
}

uint64_t sub_1000CEE3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_12:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[5] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  uint64_t v13 = type metadata accessor for PeripheralConnectionMaterial(0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v8 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a3[13];
LABEL_11:
    uint64_t v10 = a1 + v15;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_12;
  }
  uint64_t v16 = type metadata accessor for P256PrivateKey();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a3[14];
    goto LABEL_11;
  }
  uint64_t v17 = type metadata accessor for SymmetricKey256();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a3[15];

  return v18(v20, a2, v19);
}

uint64_t sub_1000CF00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CF020);
}

uint64_t sub_1000CF020(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_10:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[5] + 8) = (a2 - 1);
    return result;
  }
  uint64_t v13 = type metadata accessor for PeripheralConnectionMaterial(0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[13];
LABEL_9:
    uint64_t v12 = a1 + v15;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  uint64_t v16 = type metadata accessor for P256PrivateKey();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[14];
    goto LABEL_9;
  }
  uint64_t v17 = type metadata accessor for SymmetricKey256();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a4[15];

  return v18(v20, a2, a2, v19);
}

uint64_t sub_1000CF1F0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PeripheralConnectionMaterial(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for P256PrivateKey();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for SymmetricKey256();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000CF364()
{
  return sub_1000CFD24(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
}

unint64_t sub_1000CF3B0()
{
  unint64_t result = qword_10163B150;
  if (!qword_10163B150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B150);
  }
  return result;
}

unint64_t sub_1000CF408()
{
  unint64_t result = qword_10163B158;
  if (!qword_10163B158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B158);
  }
  return result;
}

unint64_t sub_1000CF460()
{
  unint64_t result = qword_10163B160;
  if (!qword_10163B160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B160);
  }
  return result;
}

uint64_t sub_1000CF4B4()
{
  return sub_1000CFD24(&qword_10163B168, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
}

uint64_t sub_1000CF4FC()
{
  return sub_1000CFD24(qword_10163B170, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
}

unint64_t sub_1000CF548()
{
  unint64_t result = qword_10163B198;
  if (!qword_10163B198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B198);
  }
  return result;
}

unint64_t sub_1000CF5A0()
{
  unint64_t result = qword_10163B1A0;
  if (!qword_10163B1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B1A0);
  }
  return result;
}

void *sub_1000CF5F4(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10163B1A8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001CD44(a1, a1[3]);
  sub_1000CFC68();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100037AA0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = v9;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_1000CF764(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65566D6574737973 && a2 == 0xED00006E6F697372 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013F3690 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013F36B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x64496E6D66 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x45676E6972696170 && a2 == 0xEC00000068636F70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001013F36D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x4B65746176697270 && a2 == 0xEA00000000007965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x697274656D6D7973 && a2 == 0xEC00000079654B63)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

unint64_t sub_1000CFC68()
{
  unint64_t result = qword_10163B1B0;
  if (!qword_10163B1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B1B0);
  }
  return result;
}

uint64_t sub_1000CFCBC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000CFD24(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LocalFindableAccessoryRecord.SerialNumber.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000CFE08);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalFindableAccessoryRecord.SerialNumber.CodingKeys()
{
  return &type metadata for LocalFindableAccessoryRecord.SerialNumber.CodingKeys;
}

unint64_t sub_1000CFE44()
{
  unint64_t result = qword_10163B200;
  if (!qword_10163B200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B200);
  }
  return result;
}

unint64_t sub_1000CFE9C()
{
  unint64_t result = qword_10163B208;
  if (!qword_10163B208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B208);
  }
  return result;
}

unint64_t sub_1000CFEF4()
{
  unint64_t result = qword_10163B210;
  if (!qword_10163B210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B210);
  }
  return result;
}

uint64_t sub_1000CFF4C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D770);
  sub_100010324(v0, (uint64_t)qword_10170D770);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000CFFD8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000D0038()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000D0088()
{
  uint64_t result = 0x656C707061;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E6169727564;
      break;
    case 2:
      uint64_t result = 0x6579656B776168;
      break;
    case 3:
      uint64_t result = 1701602664;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000D0108()
{
  Bool.intValue.getter();
  uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
  Bool.intValue.getter();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  Bool.intValue.getter();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1000D01DC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000D023C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000D028C@<X0>(unsigned __int8 *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_1000D07F4(*a1);
  *a2 = result & 0x10101FF;
  return result;
}

uint64_t sub_1000D02C4()
{
  return sub_1000D0108();
}

uint64_t sub_1000D0308(unsigned __int8 a1)
{
  return a1 >> 6;
}

uint64_t sub_1000D0310(unsigned int a1)
{
  _StringGuts.grow(_:)(53);
  v2._countAndFlagsBits = 0x203A657079747BLL;
  v2._object = (void *)0xE700000000000000;
  String.append(_:)(v2);
  int v3 = (a1 >> 4) & 3;
  uint64_t v4 = 0x6579656B776168;
  unint64_t v5 = 0xE400000000000000;
  uint64_t v6 = 1701602664;
  if (v3 != 3)
  {
    uint64_t v6 = 0x656C707061;
    unint64_t v5 = 0xE500000000000000;
  }
  if (v3 == 2) {
    unint64_t v5 = 0xE700000000000000;
  }
  else {
    uint64_t v4 = v6;
  }
  if (v3 == 1) {
    uint64_t v7 = 0x6E6169727564;
  }
  else {
    uint64_t v7 = v4;
  }
  if (v3 == 1) {
    unint64_t v8 = 0xE600000000000000;
  }
  else {
    unint64_t v8 = v5;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x726574746162202CLL;
  v10._object = (void *)0xEB00000000203A79;
  String.append(_:)(v10);
  int v11 = a1 >> 6;
  unint64_t v12 = 0xE300000000000000;
  uint64_t v13 = 7827308;
  unint64_t v14 = 0xE800000000000000;
  uint64_t v15 = 0x6C61636974697263;
  if (v11 == 1)
  {
    uint64_t v15 = 0x6D756964656DLL;
    unint64_t v14 = 0xE600000000000000;
  }
  if (v11 != 2)
  {
    uint64_t v13 = v15;
    unint64_t v12 = v14;
  }
  if (a1 >> 6) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = 1751607656;
  }
  if (a1 >> 6) {
    unint64_t v17 = v12;
  }
  else {
    unint64_t v17 = 0xE400000000000000;
  }
  unint64_t v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x61746E69616D202CLL;
  v19._object = (void *)0xEE00203A64656E69;
  String.append(_:)(v19);
  sub_10006145C();
  char v20 = FixedWidthInteger.BOOLValue.getter();
  BOOL v21 = (v20 & 1) == 0;
  if (v20) {
    uint64_t v22 = 1702195828;
  }
  else {
    uint64_t v22 = 0x65736C6166;
  }
  if (v21) {
    unint64_t v23 = 0xE500000000000000;
  }
  else {
    unint64_t v23 = 0xE400000000000000;
  }
  unint64_t v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0x617069746C756D20;
  v25._object = (void *)0xEC000000203A7472;
  String.append(_:)(v25);
  sub_1000D07F4(a1 & 0xB);
  v26._countAndFlagsBits = sub_1000D0108();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 125;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  return 0;
}

unsigned __int8 *sub_1000D057C@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000D058C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000D05EC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000D063C()
{
  return sub_1000D0310(*v0);
}

uint64_t SPBeaconGroupStatus.description.getter()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_1000D0704()
{
  uint64_t result = 0x6574617261706573;
  switch(*v0)
  {
    case 1:
    case 4:
      return result;
    case 2:
      uint64_t result = 0x646570756F7267;
      break;
    case 3:
      uint64_t result = 0x49646570756F7267;
      break;
    default:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t sub_1000D07C4@<X0>(uint64_t (*a1)(void)@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1000D07F4(int a1)
{
  uint64_t v2 = type metadata accessor for Bit();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  unint64_t v8 = &v18[-v7];
  char v35 = a1;
  sub_10006145C();
  uint64_t result = FixedWidthInteger.bits()();
  uint64_t v28 = result;
  if (!*(void *)(result + 16))
  {
    __break(1u);
    goto LABEL_6;
  }
  int v23 = a1;
  Swift::String v10 = *(void (**)(void))(v3 + 16);
  unint64_t v24 = v28 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  Swift::String v27 = (void (*)(unsigned char *, unint64_t, uint64_t))v10;
  v10(v8);
  int v11 = *(void (**)(void))(v3 + 104);
  unsigned int v26 = enum case for Bit.one(_:);
  Swift::String v25 = (void (*)(unsigned char *, void, uint64_t))v11;
  v11(v6);
  sub_1000D0E58();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v12 = v34;
  int v22 = v33;
  uint64_t v13 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v13)(v8, v2);
  if (*(void *)(v28 + 16) < 2uLL)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  int v21 = v12;
  uint64_t v20 = *(void *)(v3 + 72);
  v27(v8, v24 + v20, v2);
  v25(v6, v26, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v14 = v32;
  int v15 = v31;
  v13(v6, v2);
  uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v13)(v8, v2);
  if (*(void *)(v28 + 16) >= 4uLL)
  {
    int v19 = v14 == v15;
    int v16 = v21 == v22;
    v27(v8, v24 + 3 * v20, v2);
    swift_bridgeObjectRelease();
    v25(v6, v26, v2);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    int v17 = v30 == v29;
    v13(v6, v2);
    v13(v8, v2);
    return v23 & 0xB | (v16 << 8) | (v19 << 16) | (v17 << 24);
  }
LABEL_7:
  __break(1u);
  return result;
}

void *sub_1000D0B80(unsigned __int8 a1, char a2, char a3, char a4)
{
  int v14 = &_swiftEmptySetSingleton;
  if (a1 > 3u)
  {
    if (qword_101636880 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170D770);
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      Swift::String v10 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)Swift::String v10 = 16777472;
      unsigned __int8 v13 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "illegal selfPart: %hhu!", v10, 5u);
      swift_slowDealloc();
    }

    return &_swiftEmptySetSingleton;
  }
  else
  {
    switch(a1)
    {
      case 0u:
        if (a2)
        {
          sub_100DCA6E0(&v13, 1);
          if ((a3 & 1) == 0)
          {
LABEL_5:
            if ((a4 & 1) == 0) {
              goto LABEL_37;
            }
            goto LABEL_29;
          }
        }
        else if ((a3 & 1) == 0)
        {
          goto LABEL_5;
        }
        sub_100DCA6E0(&v13, 2);
        if ((a4 & 1) == 0) {
          goto LABEL_37;
        }
LABEL_29:
        uint64_t v12 = 3;
        goto LABEL_36;
      case 1u:
        if (a2)
        {
          sub_100DCA6E0(&v13, 2);
          if ((a3 & 1) == 0)
          {
LABEL_22:
            if ((a4 & 1) == 0) {
              goto LABEL_37;
            }
            goto LABEL_35;
          }
        }
        else if ((a3 & 1) == 0)
        {
          goto LABEL_22;
        }
        sub_100DCA6E0(&v13, 3);
        if ((a4 & 1) == 0) {
          goto LABEL_37;
        }
LABEL_35:
        uint64_t v12 = 0;
        goto LABEL_36;
      case 2u:
        if (a2)
        {
          sub_100DCA6E0(&v13, 3);
          if ((a3 & 1) == 0)
          {
LABEL_14:
            if ((a4 & 1) == 0) {
              goto LABEL_37;
            }
            goto LABEL_26;
          }
        }
        else if ((a3 & 1) == 0)
        {
          goto LABEL_14;
        }
        sub_100DCA6E0(&v13, 0);
        if ((a4 & 1) == 0) {
          goto LABEL_37;
        }
LABEL_26:
        uint64_t v12 = 1;
        goto LABEL_36;
      case 3u:
        if (a2)
        {
          sub_100DCA6E0(&v13, 0);
          if ((a3 & 1) == 0)
          {
LABEL_18:
            if ((a4 & 1) == 0) {
              goto LABEL_37;
            }
            goto LABEL_32;
          }
        }
        else if ((a3 & 1) == 0)
        {
          goto LABEL_18;
        }
        sub_100DCA6E0(&v13, 1);
        if ((a4 & 1) == 0) {
          goto LABEL_37;
        }
LABEL_32:
        uint64_t v12 = 2;
LABEL_36:
        sub_100DCA6E0(&v13, v12);
LABEL_37:
        uint64_t result = v14;
        break;
      default:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1000D0E48);
    }
  }
  return result;
}

unint64_t sub_1000D0E58()
{
  unint64_t result = qword_10163B220;
  if (!qword_10163B220)
  {
    type metadata accessor for Bit();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B220);
  }
  return result;
}

uint64_t sub_1000D0EB0(char a1, char a2, char a3, uint64_t a4)
{
  uint64_t v4 = 2;
  if (a1) {
    uint64_t v4 = 3;
  }
  uint64_t v5 = 4;
  if ((a1 & 1) == 0) {
    uint64_t v5 = 1;
  }
  if ((a3 & 1) == 0) {
    uint64_t v4 = v5;
  }
  uint64_t v6 = 2;
  if (a2) {
    uint64_t v6 = 3;
  }
  uint64_t v7 = 4;
  if ((a2 & 1) == 0) {
    uint64_t v7 = 1;
  }
  if ((a1 & 1) == 0) {
    uint64_t v6 = v7;
  }
  if (a4) {
    uint64_t v6 = 0;
  }
  if (a4 == 1) {
    return v4;
  }
  else {
    return v6;
  }
}

unsigned char *storeEnumTagSinglePayload for Type18Status.DeviceType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D0FC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Type18Status.DeviceType()
{
  return &type metadata for Type18Status.DeviceType;
}

ValueMetadata *type metadata accessor for Type18Status()
{
  return &type metadata for Type18Status;
}

unint64_t sub_1000D1014()
{
  unint64_t result = qword_10163B228;
  if (!qword_10163B228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B228);
  }
  return result;
}

unint64_t sub_1000D106C()
{
  unint64_t result = qword_10163B230;
  if (!qword_10163B230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B230);
  }
  return result;
}

unint64_t sub_1000D10C0()
{
  unint64_t result = qword_10163B238;
  if (!qword_10163B238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B238);
  }
  return result;
}

unint64_t sub_1000D1114()
{
  unint64_t result = qword_10163B240;
  if (!qword_10163B240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B240);
  }
  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for Type18Status.Multipart(_DWORD *result, _DWORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Type18Status.Multipart(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Type18Status.Multipart(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 4) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 4) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 1) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Type18Status.Multipart()
{
  return &type metadata for Type18Status.Multipart;
}

unint64_t sub_1000D121C()
{
  unint64_t result = qword_10163B248;
  if (!qword_10163B248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B248);
  }
  return result;
}

unint64_t sub_1000D1270()
{
  unint64_t result = qword_10163B250;
  if (!qword_10163B250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B250);
  }
  return result;
}

uint64_t sub_1000D12D0(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1000D12DC@<X0>(uint64_t a1@<X8>)
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)&v3, (uint64_t *)&unk_101638D30);
  if (v4) {
    return sub_10001CEB0(&v3, a1);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D137C(uint64_t a1, void (*a2)(uint64_t *, char *), uint64_t a3, uint64_t a4)
{
  return sub_1000D1394(a1, a2, a3, a4);
}

uint64_t sub_1000D1394(uint64_t a1, void (*a2)(uint64_t *, char *), uint64_t a3, uint64_t a4)
{
  Swift::String v27 = a2;
  uint64_t v28 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v11 - 8);
  unsigned __int8 v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = a1;
  uint64_t v14 = *(void *)(a4 + 16);
  if (v14)
  {
    int v16 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v15 = v8 + 16;
    unsigned int v26 = v16;
    uint64_t v17 = a4 + ((*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64));
    uint64_t v21 = *(void *)(v15 + 56);
    int v22 = (void (**)(char *, char *, uint64_t))(v15 + 16);
    int v23 = (void (**)(char *, uint64_t))(v15 - 8);
    unint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 32);
    v20[1] = a4;
    swift_bridgeObjectRetain();
    Swift::String v25 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 40);
    v20[0] = (v15 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    while (1)
    {
      v26(v13, v17, v7);
      unint64_t v18 = *v25;
      (*v25)(v13, 0, 1, v7);
      if ((*v24)(v13, 1, v7) == 1) {
        break;
      }
      (*v22)(v10, v13, v7);
      v27(&v29, v10);
      if (v4)
      {
        swift_bridgeObjectRelease();
        (*v23)(v10, v7);
        return swift_bridgeObjectRelease();
      }
      (*v23)(v10, v7);
      v17 += v21;
      if (!--v14) {
        goto LABEL_8;
      }
    }
  }
  else
  {
    unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    swift_bridgeObjectRetain();
LABEL_8:
    v18(v13, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t sub_1000D1650(uint64_t a1, void (*a2)(uint64_t *, void *), uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a1;
  uint64_t v7 = a4 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a4 + 64);
  int64_t v21 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    unint64_t v18 = (uint64_t *)(*(void *)(a4 + 48) + 16 * i);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    v22[0] = v19;
    v22[1] = v20;
    sub_1000361E0(v19, v20);
    a2(&v23, v22);
    if (v4)
    {
      swift_bridgeObjectRelease();
      sub_10001CFB8(v19, v20);
      return swift_release();
    }
    uint64_t result = sub_10001CFB8(v19, v20);
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v21) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v12);
    if (!v16) {
      break;
    }
LABEL_17:
    unint64_t v10 = (v16 - 1) & v16;
  }
  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v21) {
    goto LABEL_26;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v21) {
    goto LABEL_26;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v21) {
    goto LABEL_26;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v21)
  {
LABEL_26:
    swift_release();
    return v23;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
LABEL_16:
    int64_t v12 = v17;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v21) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000D183C(uint64_t a1, void (*a2)(uint64_t *, char *), uint64_t a3, uint64_t a4, uint64_t (*a5)(char *), uint64_t a6)
{
  uint64_t v52 = a5;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v43 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v51 = (char *)v42 - v13;
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  long long v57 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v46 = (char *)v42 - v17;
  uint64_t v18 = *(void *)(a4 + 56);
  uint64_t v48 = a4 + 56;
  uint64_t v19 = -1;
  uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
  v42[1] = ~v20;
  uint64_t v62 = a1;
  if (-v20 < 64) {
    uint64_t v19 = ~(-1 << -(char)v20);
  }
  unint64_t v21 = v19 & v18;
  int64_t v47 = (unint64_t)(63 - v20) >> 6;
  uint64_t v53 = v10;
  uint64_t v54 = v10 + 16;
  uint64_t v60 = v10 + 48;
  uint64_t v61 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  int v22 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  id v50 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v59 = a4;
  swift_bridgeObjectRetain();
  uint64_t v58 = a6;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  while (1)
  {
    unint64_t v56 = v21;
    if (v21)
    {
      uint64_t v26 = (v21 - 1) & v21;
      unint64_t v27 = __clz(__rbit64(v21)) | (v24 << 6);
      int64_t v28 = v24;
      uint64_t v29 = v57;
      goto LABEL_23;
    }
    int64_t v28 = v24 + 1;
    uint64_t v29 = v57;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v28 >= v47) {
      goto LABEL_33;
    }
    unint64_t v30 = *(void *)(v48 + 8 * v28);
    if (!v30) {
      break;
    }
LABEL_22:
    uint64_t v26 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v28 << 6);
LABEL_23:
    uint64_t v32 = v53;
    (*(void (**)(char *, unint64_t, uint64_t))(v53 + 16))(v29, *(void *)(v59 + 48) + *(void *)(v53 + 72) * v27, v9);
    unsigned __int8 v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
    v33(v29, 0, 1, v9);
    unsigned __int8 v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    if (v34(v29, 1, v9) == 1)
    {
      uint64_t v41 = (uint64_t)v29;
LABEL_34:
      sub_10001DAB4(v41, &qword_101638CF0);
      v33(v46, 1, 1, v9);
LABEL_35:
      sub_100132C20();
      swift_release();
      return v62;
    }
    int64_t v49 = v24;
    char v35 = *v22;
    uint64_t v36 = v22;
    uint64_t v37 = v51;
    v35(v51, v29, v9);
    if (v52(v37))
    {
      uint64_t v38 = v46;
      v35(v46, v37, v9);
      v33(v38, 0, 1, v9);
      if (v34(v38, 1, v9) == 1) {
        goto LABEL_35;
      }
      int v22 = v36;
      uint64_t v39 = v43;
      v35(v43, v38, v9);
      uint64_t v40 = v55;
      v44(&v62, v39);
      uint64_t v55 = v40;
      if (v40)
      {
        swift_bridgeObjectRelease();
        (*v50)(v39, v9);
        sub_100132C20();
        return swift_release();
      }
      Swift::String v25 = v39;
    }
    else
    {
      Swift::String v25 = v37;
      int v22 = v36;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v50)(v25, v9);
    int64_t v24 = v28;
    unint64_t v21 = v26;
  }
  int64_t v31 = v24 + 2;
  if (v24 + 2 >= v47) {
    goto LABEL_33;
  }
  unint64_t v30 = *(void *)(v48 + 8 * v31);
  if (v30) {
    goto LABEL_21;
  }
  int64_t v31 = v24 + 3;
  if (v24 + 3 >= v47) {
    goto LABEL_33;
  }
  unint64_t v30 = *(void *)(v48 + 8 * v31);
  if (v30) {
    goto LABEL_21;
  }
  int64_t v31 = v24 + 4;
  if (v24 + 4 >= v47) {
    goto LABEL_33;
  }
  unint64_t v30 = *(void *)(v48 + 8 * v31);
  if (v30) {
    goto LABEL_21;
  }
  int64_t v31 = v24 + 5;
  if (v24 + 5 >= v47) {
    goto LABEL_33;
  }
  unint64_t v30 = *(void *)(v48 + 8 * v31);
  if (v30) {
    goto LABEL_21;
  }
  int64_t v31 = v24 + 6;
  if (v24 + 6 >= v47)
  {
LABEL_33:
    unsigned __int8 v33 = *v61;
    uint64_t v41 = (uint64_t)v57;
    (*v61)(v57, 1, 1, v9);
    unint64_t v56 = 0;
    goto LABEL_34;
  }
  unint64_t v30 = *(void *)(v48 + 8 * v31);
  if (v30)
  {
LABEL_21:
    int64_t v28 = v31;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v28 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v28 >= v47) {
      goto LABEL_33;
    }
    unint64_t v30 = *(void *)(v48 + 8 * v28);
    ++v31;
    if (v30) {
      goto LABEL_22;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1000D1DD8()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_100010324(v0, (uint64_t)qword_10170D788);
}

uint64_t sub_1000D1E40()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D788);
  sub_100010324(v0, (uint64_t)qword_10170D788);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000D1EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a8;
  v8[10] = v12;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  uint64_t v9 = type metadata accessor for UUID();
  v8[11] = v9;
  v8[12] = *(void *)(v9 - 8);
  v8[13] = swift_task_alloc();
  return _swift_task_switch(sub_1000D1F94, 0, 0);
}

uint64_t sub_1000D1F94()
{
  unsigned __int8 v34 = v0;
  uint64_t v1 = v0[5];
  if (v1 == 2)
  {
    sub_10001CD44((void *)(v0[6] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[6] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
    unsigned int v6 = (void *)swift_task_alloc();
    v0[16] = v6;
    *unsigned int v6 = v0;
    v6[1] = sub_1000D29F4;
    uint64_t v8 = v0[7];
    uint64_t v7 = v0[8];
    return sub_1000F864C(v8, v7);
  }
  else if (v1 == 1)
  {
    sub_10001CD44((void *)(v0[6] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[6] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
    uint64_t v2 = (void *)swift_task_alloc();
    v0[14] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000D24B0;
    uint64_t v4 = v0[7];
    uint64_t v3 = v0[8];
    return sub_1000F7AA4(v4, v3);
  }
  else
  {
    sub_100075398();
    uint64_t v9 = swift_allocError();
    unsigned char *v10 = 2;
    swift_willThrow();
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v12 = v0[12];
    uint64_t v11 = v0[13];
    uint64_t v13 = v0[11];
    uint64_t v14 = v0[7];
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170D788);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v14, v13);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v20 = v0[12];
    uint64_t v19 = v0[13];
    uint64_t v21 = v0[11];
    if (v18)
    {
      log = v16;
      os_log_type_t type = v17;
      uint64_t v22 = swift_slowAlloc();
      unint64_t v30 = (void *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 141558531;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2081;
      sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = sub_1008FA0F0(v23, v24, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
      *(_WORD *)(v22 + 22) = 2114;
      swift_errorRetain();
      uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
      v0[4] = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v30 = v25;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to share beacon: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v22, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v20 + 8))(v0[13], v0[11]);
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v26 = (void (*)(void, uint64_t))v0[9];
    uint64_t v27 = v0[8];
    swift_errorRetain();
    uint64_t v28 = sub_10012B494(_swiftEmptyDictionarySingleton, v27, v9);
    swift_errorRelease();
    v26(0, v28);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v29 = (uint64_t (*)(void))v0[1];
    return v29();
  }
}

uint64_t sub_1000D24B0()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000D2658;
  }
  else {
    uint64_t v2 = sub_1000D25C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D25C4()
{
  uint64_t v1 = *(void (**)(uint64_t, unint64_t))(v0 + 72);
  unint64_t v2 = sub_10092DF30((uint64_t)_swiftEmptyArrayStorage);
  v1(1, v2);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1000D2658()
{
  uint64_t v25 = v0;
  uint64_t v1 = v0[15];
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v3 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[7];
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v11 = v0[12];
  uint64_t v10 = v0[13];
  uint64_t v12 = v0[11];
  if (v9)
  {
    log = v7;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v22 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    *(_WORD *)(v13 + 22) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v22 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v8, "Failed to share beacon: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v13, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(v0[13], v0[11]);
    swift_errorRelease();
    swift_errorRelease();
  }
  os_log_type_t v17 = (void (*)(void, uint64_t))v0[9];
  uint64_t v18 = v0[8];
  swift_errorRetain();
  uint64_t v19 = sub_10012B494(_swiftEmptyDictionarySingleton, v18, v1);
  swift_errorRelease();
  v17(0, v19);
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_1000D29F4()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000D2B08;
  }
  else {
    uint64_t v2 = sub_10013400C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D2B08()
{
  uint64_t v25 = v0;
  uint64_t v1 = v0[17];
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v3 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[7];
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v11 = v0[12];
  uint64_t v10 = v0[13];
  uint64_t v12 = v0[11];
  if (v9)
  {
    log = v7;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v22 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    *(_WORD *)(v13 + 22) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v22 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v8, "Failed to share beacon: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v13, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(v0[13], v0[11]);
    swift_errorRelease();
    swift_errorRelease();
  }
  os_log_type_t v17 = (void (*)(void, uint64_t))v0[9];
  uint64_t v18 = v0[8];
  swift_errorRetain();
  uint64_t v19 = sub_10012B494(_swiftEmptyDictionarySingleton, v18, v1);
  swift_errorRelease();
  v17(0, v19);
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

void sub_1000D31B8(char a1, uint64_t a2, uint64_t a3)
{
  sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
  sub_10000588C(&qword_101638D40);
  sub_10012E2E4(&qword_10163C0A0, (unint64_t *)&qword_10163B900);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, void, objc_class *))(a3 + 16))(a3, a1 & 1, isa);
}

uint64_t sub_1000D328C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[9] = v8;
  v7[10] = *(void *)(v8 - 8);
  v7[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000D3350, 0, 0);
}

uint64_t sub_1000D3350()
{
  sub_10001CD44((void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D3400;
  uint64_t v2 = v0[6];
  return sub_1000FFEB8(v2);
}

uint64_t sub_1000D3400()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000D3514;
  }
  else {
    uint64_t v2 = sub_1001343AC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D3514()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[11];
  uint64_t v11 = v0[9];
  if (v8)
  {
    log = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Failed to remove share: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[11], v0[9]);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v16 = v0[13];
  os_log_type_t v17 = (void (*)(void, uint64_t))v0[7];
  swift_errorRetain();
  v17(0, v16);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1000D3B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[13] = v8;
  v7[14] = *(void *)(v8 - 8);
  v7[15] = swift_task_alloc();
  return _swift_task_switch(sub_1000D3BE0, 0, 0);
}

uint64_t sub_1000D3BE0()
{
  sub_10001CD44((void *)(v0[9] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[9] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[16] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D3C90;
  uint64_t v2 = v0[10];
  return sub_100100BEC(v2);
}

uint64_t sub_1000D3C90()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000D3E18;
  }
  else {
    uint64_t v2 = sub_1000D3DA4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D3DA4()
{
  (*(void (**)(uint64_t, void))(v0 + 88))(1, 0);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000D3E18()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[10];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[14];
  uint64_t v9 = v0[15];
  uint64_t v11 = v0[13];
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v15 = Error.localizedDescription.getter();
    v0[8] = sub_1008FA0F0(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Failed to revoke share: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[15], v0[13]);
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v17 = v0[17];
  uint64_t v18 = (void (*)(void, uint64_t))v0[11];
  swift_errorRetain();
  v18(0, v17);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_1000D43FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[9] = v8;
  v7[10] = *(void *)(v8 - 8);
  v7[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000D44C0, 0, 0);
}

uint64_t sub_1000D44C0()
{
  uint64_t v1 = *sub_10001CD44((void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[12] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000D4588;
  v2[7] = v0[6];
  v2[8] = v1;
  return _swift_task_switch(sub_1001051DC, v1, 0);
}

uint64_t sub_1000D4588()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000D469C;
  }
  else {
    uint64_t v2 = sub_1001343AC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D469C()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[11];
  uint64_t v11 = v0[9];
  if (v8)
  {
    log = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Failed to accept share: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[11], v0[9]);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v16 = v0[13];
  uint64_t v17 = (void (*)(void, uint64_t))v0[7];
  swift_errorRetain();
  v17(0, v16);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1000D4CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[9] = v8;
  v7[10] = *(void *)(v8 - 8);
  v7[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000D4D68, 0, 0);
}

uint64_t sub_1000D4D68()
{
  v0[12] = *sub_10001CD44((void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v4 = (uint64_t (*)(uint64_t, char))((char *)&dword_101641E80 + dword_101641E80);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[13] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D4E34;
  uint64_t v2 = v0[6];
  return v4(v2, 0);
}

uint64_t sub_1000D4E34()
{
  uint64_t v2 = (void *)*v1;
  v2[14] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000D520C, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[15] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_1000D4FA8;
    uint64_t v4 = v2[6];
    return sub_1000EFE88(v4);
  }
}

uint64_t sub_1000D4FA8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000D50B8, v1, 0);
}

uint64_t sub_1000D50B8()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  return _swift_task_switch(sub_1000D5198, 0, 0);
}

uint64_t sub_1000D5198()
{
  (*(void (**)(uint64_t, void))(v0 + 56))(1, 0);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000D520C()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[11];
  uint64_t v11 = v0[9];
  if (v8)
  {
    log = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Failed to decline share: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[11], v0[9]);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v16 = v0[14];
  uint64_t v17 = (void (*)(void, uint64_t))v0[7];
  swift_errorRetain();
  v17(0, v16);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1000D5814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[9] = v8;
  v7[10] = *(void *)(v8 - 8);
  v7[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000D58D8, 0, 0);
}

uint64_t sub_1000D58D8()
{
  sub_10001CD44((void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D5988;
  uint64_t v2 = v0[6];
  return sub_100106A8C(v2);
}

uint64_t sub_1000D5988()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000D5A9C;
  }
  else {
    uint64_t v2 = sub_1000D5198;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D5A9C()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[11];
  uint64_t v11 = v0[9];
  if (v8)
  {
    log = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Failed to Stop share with beaconIdentifier: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[11], v0[9]);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v16 = v0[13];
  uint64_t v17 = (void (*)(void, uint64_t))v0[7];
  swift_errorRetain();
  v17(0, v16);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1000D60A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  return _swift_task_switch(sub_1000D60C8, 0, 0);
}

uint64_t sub_1000D60C8()
{
  sub_10001CD44((void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[9] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D6178;
  uint64_t v2 = v0[6];
  return sub_100108740(v2);
}

uint64_t sub_1000D6178()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000D62F8;
  }
  else {
    uint64_t v2 = sub_1000D628C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D628C()
{
  (*(void (**)(uint64_t, void))(v0 + 56))(1, 0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000D62F8()
{
  uint64_t v15 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[6];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    v0[2] = v4;
    type metadata accessor for SPShareType(0);
    uint64_t v7 = String.init<A>(describing:)();
    v0[3] = sub_1008FA0F0(v7, v8, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to force break all shares of types: %{public}s, error: %{public}@.", (uint8_t *)v5, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v10 = v0[10];
  uint64_t v11 = (void (*)(void, uint64_t))v0[7];
  swift_errorRetain();
  v11(0, v10);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1000D6710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  return _swift_task_switch(sub_1000D6734, 0, 0);
}

uint64_t sub_1000D6734()
{
  sub_10001CD44((void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[9] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D67E4;
  uint64_t v2 = v0[6];
  return sub_10010B9E0(v2);
}

uint64_t sub_1000D67E4()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000D68F8;
  }
  else {
    uint64_t v2 = sub_1000D628C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D68F8()
{
  uint64_t v22 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[6];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170D788);
  id v3 = v1;
  swift_errorRetain();
  id v4 = v3;
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  unint64_t v8 = (void *)v0[6];
  if (v7)
  {
    os_log_type_t type = v6;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    id v10 = [v8 destination];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    v0[3] = sub_1008FA0F0(v11, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v9 + 22) = 2114;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Failed to force break all shares with user: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v9, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v15 = v0[10];
  uint64_t v16 = (void (*)(void, uint64_t))v0[7];
  swift_errorRetain();
  v16(0, v15);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_1000D6D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[9] = v8;
  v7[10] = *(void *)(v8 - 8);
  v7[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000D6E54, 0, 0);
}

uint64_t sub_1000D6E54()
{
  sub_10001CD44((void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D6F04;
  uint64_t v2 = v0[6];
  return sub_10010F250(v2);
}

uint64_t sub_1000D6F04()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000D7018;
  }
  else {
    uint64_t v2 = sub_1001343AC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D7018()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[11];
  uint64_t v11 = v0[9];
  if (v8)
  {
    log = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Failed to force decline shareIdentifier: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[11], v0[9]);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v16 = v0[13];
  uint64_t v17 = (void (*)(void, uint64_t))v0[7];
  swift_errorRetain();
  v17(0, v16);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1000D7620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  return _swift_task_switch(sub_1000D7644, 0, 0);
}

uint64_t sub_1000D7644()
{
  uint64_t v1 = *sub_10001CD44((void *)(*(void *)(v0 + 32) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(*(void *)(v0 + 32) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  return _swift_task_switch(sub_1000D76BC, v1, 0);
}

uint64_t sub_1000D76BC()
{
  uint64_t v1 = v0[5];
  if (v1 == 1)
  {
    uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_101642118 + dword_101642118);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[9] = v2;
    *uint64_t v2 = v0;
    uint64_t v3 = sub_1000D7918;
    goto LABEL_5;
  }
  if (!v1)
  {
    uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_101642110 + dword_101642110);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[8] = v2;
    *uint64_t v2 = v0;
    uint64_t v3 = sub_1000D77F8;
LABEL_5:
    v2[1] = v3;
    return v5();
  }
  type metadata accessor for SPRecordsTypeToDelete(0);
  v0[2] = v1;
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t sub_1000D77F8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    *(void *)(v2 + 80) = v0;
    uint64_t v3 = sub_1000D7AA4;
  }
  else
  {
    uint64_t v3 = sub_1000D7A38;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D7918()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    *(void *)(v2 + 80) = v0;
    uint64_t v3 = sub_1000D7AA4;
  }
  else
  {
    uint64_t v3 = sub_1000D7A38;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D7A38()
{
  (*(void (**)(uint64_t, void))(v0 + 48))(1, 0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000D7AA4()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to cleanupAll(recordsType:completion:), error: %{public}@.", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = v0[10];
  BOOL v8 = (void (*)(void, uint64_t))v0[6];
  swift_errorRetain();
  v8(0, v7);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000D7E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[9] = v8;
  v7[10] = *(void *)(v8 - 8);
  v7[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000D7EEC, 0, 0);
}

uint64_t sub_1000D7EEC()
{
  sub_10001CD44((void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D7F9C;
  uint64_t v2 = v0[6];
  return sub_10010F7F4(v2);
}

uint64_t sub_1000D7F9C()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000D80B0;
  }
  else {
    uint64_t v2 = sub_1001343AC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D80B0()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[11];
  uint64_t v11 = v0[9];
  if (v8)
  {
    log = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "                        Failed to force stop sharing beaconIdentifier: %{private,mask.hash}s,\n                        error: %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[11], v0[9]);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v16 = v0[13];
  uint64_t v17 = (void (*)(void, uint64_t))v0[7];
  swift_errorRetain();
  v17(0, v16);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1000D86B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return _swift_task_switch(sub_1000D86DC, 0, 0);
}

uint64_t sub_1000D86DC()
{
  sub_10001CD44((void *)(*(void *)(v0 + 32) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(*(void *)(v0 + 32) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D8788;
  return sub_100111D9C(0);
}

uint64_t sub_1000D8788(uint64_t a1)
{
  *(void *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001343B8, 0, 0);
}

void sub_1000D89E0(uint64_t a1, uint64_t a2)
{
  sub_10001D4B0(0, &qword_10163B870);
  sub_10012E2E4(&qword_10163B878, &qword_10163B870);
  isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

uint64_t sub_1000D8A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return _swift_task_switch(sub_1000D8AB4, 0, 0);
}

uint64_t sub_1000D8AB4()
{
  sub_10001CD44((void *)(*(void *)(v0 + 32) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(*(void *)(v0 + 32) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D8B60;
  return sub_100111D9C(1);
}

uint64_t sub_1000D8B60(uint64_t a1)
{
  *(void *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000D8C60, 0, 0);
}

uint64_t sub_1000D8C60()
{
  (*(void (**)(void))(v0 + 16))(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000D8E5C(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);
}

uint64_t sub_1000D8ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[9] = v8;
  v7[10] = *(void *)(v8 - 8);
  v7[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000D8F9C, 0, 0);
}

uint64_t sub_1000D8F9C()
{
  sub_10001CD44((void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D904C;
  uint64_t v2 = v0[6];
  return sub_100104160(v2);
}

uint64_t sub_1000D904C()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000D9160;
  }
  else {
    uint64_t v2 = sub_1001343AC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D9160()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[11];
  uint64_t v11 = v0[9];
  if (v8)
  {
    log = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Failed to request unknown beacon: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[11], v0[9]);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v16 = v0[13];
  uint64_t v17 = (void (*)(void, uint64_t))v0[7];
  swift_errorRetain();
  v17(0, v16);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1000D9768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  return _swift_task_switch(sub_1000D978C, 0, 0);
}

uint64_t sub_1000D978C()
{
  uint64_t v1 = *sub_10001CD44((void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[9] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000D9854;
  v2[16] = v0[6];
  v2[17] = v1;
  return _swift_task_switch(sub_1000F30C0, 0, 0);
}

uint64_t sub_1000D9854()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000D9968;
  }
  else {
    uint64_t v2 = sub_100134088;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000D9968()
{
  uint64_t v15 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2081;
    type metadata accessor for UUID();
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    v0[3] = sub_1008FA0F0(v5, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v4 + 22) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v13 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to update circle identifiers: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v4, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v9 = v0[10];
  uint64_t v10 = (void (*)(void, uint64_t))v0[7];
  swift_errorRetain();
  v10(0, v9);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1000D9E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 80) = a7;
  *(void *)(v8 + 88) = a8;
  *(unsigned char *)(v8 + 137) = a6;
  *(void *)(v8 + 64) = a4;
  *(void *)(v8 + 72) = a5;
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v8 + 96) = v9;
  *(void *)(v8 + 104) = *(void *)(v9 - 8);
  *(void *)(v8 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_1000D9EE8, 0, 0);
}

uint64_t sub_1000D9EE8()
{
  sub_10001CD44((void *)(*(void *)(v0 + 64) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(*(void *)(v0 + 64) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D9F9C;
  char v2 = *(unsigned char *)(v0 + 137);
  uint64_t v3 = *(void *)(v0 + 72);
  return sub_1000FB758(v3, v2);
}

uint64_t sub_1000D9F9C()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    char v2 = sub_1000DA124;
  }
  else {
    char v2 = sub_1000DA0B0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000DA0B0()
{
  (*(void (**)(uint64_t, void))(v0 + 80))(1, 0);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000DA124()
{
  uint64_t v27 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = (uint64_t *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v11 = *(void *)(v0 + 104);
  uint64_t v10 = *(void *)(v0 + 112);
  uint64_t v12 = *(void *)(v0 + 96);
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558531;
    *(void *)(v0 + 48) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 56) = sub_1008FA0F0(v14, v15, &v26);
    uint64_t v1 = (uint64_t *)(v0 + 32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    *(_WORD *)(v13 + 22) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to upload keys for circle identifier: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v13, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
    swift_errorRelease();
    swift_errorRelease();
  }
  *(void *)(v0 + 16) = *(void *)(v0 + 128);
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  char v17 = swift_dynamicCast();
  uint64_t v18 = *(void (**)(void, uint64_t))(v0 + 80);
  if (v17)
  {
    char v19 = *(unsigned char *)(v0 + 136);
    sub_100130078();
    uint64_t v20 = swift_allocError();
    unsigned char *v21 = v19;
    v18(0, v20);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    type metadata accessor for SPBeaconSharingError(0);
    *(void *)(v0 + 40) = 3;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10012B44C((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v22 = (void *)*v1;
    v18(0, *v1);
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_1000DA854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = a8;
  *(unsigned char *)(v8 + 112) = a6;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = a5;
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v8 + 72) = v9;
  *(void *)(v8 + 80) = *(void *)(v9 - 8);
  *(void *)(v8 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_1000DA91C, 0, 0);
}

uint64_t sub_1000DA91C()
{
  sub_10001CD44((void *)(*(void *)(v0 + 40) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(*(void *)(v0 + 40) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000DA9D0;
  char v2 = *(unsigned char *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 48);
  return sub_1000FC638(v3, v2);
}

uint64_t sub_1000DA9D0()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    char v2 = sub_1000DAAE4;
  }
  else {
    char v2 = sub_1000D5198;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000DAAE4()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[11];
  uint64_t v11 = v0[9];
  if (v8)
  {
    log = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Failed to download keys for circle identifier: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[11], v0[9]);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v16 = v0[13];
  char v17 = (void (*)(void, uint64_t))v0[7];
  swift_errorRetain();
  v17(0, v16);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1000DB0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[3] = a6;
  v7[4] = a7;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&dword_101642068 + dword_101642068);
  uint64_t v9 = (void *)swift_task_alloc();
  v7[5] = v9;
  *uint64_t v9 = v7;
  v9[1] = sub_1000DB1A8;
  return v11(a5);
}

uint64_t sub_1000DB1A8(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 48) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000DB35C;
  }
  else
  {
    *(void *)(v4 + 56) = a1;
    uint64_t v5 = sub_1000DB2D0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000DB2D0()
{
  uint64_t v1 = (void *)v0[7];
  uint64_t v2 = (void (*)(uint64_t, void *, void))v0[3];
  id v3 = v1;
  v2(1, v1, 0);

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000DB35C()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to check data integrity, error: %{public}@.", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = v0[6];
  BOOL v8 = (void (*)(void, void, uint64_t))v0[3];
  swift_errorRetain();
  v8(0, 0, v7);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void sub_1000DB85C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    uint64_t v7 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = (id)v7;
  (*(void (**)(uint64_t, void, uint64_t))(a4 + 16))(a4, a1 & 1, a2);
}

uint64_t sub_1000DB8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  type metadata accessor for CheckDataIntegrityUseCase();
  swift_allocObject();
  uint64_t v7 = (void *)swift_task_alloc();
  v6[5] = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_1000DB984;
  return sub_100075928();
}

uint64_t sub_1000DB984(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(*v2 + 48) = a1;
  swift_task_dealloc();
  if (v1)
  {
    *(void *)(v3 + 80) = v1;
    return _swift_task_switch(sub_1000DBD20, 0, 0);
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v3 + 56) = v5;
    *uint64_t v5 = v4;
    v5[1] = sub_1000DBB08;
    return sub_10007AEA4();
  }
}

uint64_t sub_1000DBB08(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000DBCB0;
  }
  else
  {
    swift_release();
    *(void *)(v4 + 72) = a1;
    uint64_t v5 = sub_1000DBC38;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000DBC38()
{
  uint64_t v1 = *(void **)(v0 + 72);
  (*(void (**)(uint64_t, void *, void))(v0 + 24))(1, v1, 0);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000DBCB0()
{
  swift_release();
  *(void *)(v0 + 80) = *(void *)(v0 + 64);
  return _swift_task_switch(sub_1000DBD20, 0, 0);
}

uint64_t sub_1000DBD20()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to look for orphaned records, error: %{public}@.", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = v0[10];
  id v8 = (void (*)(void, id, uint64_t))v0[3];
  id v9 = objc_allocWithZone((Class)SPOrphanedRecordsResult);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v11 = [v9 initWithRecordsInfo:isa];

  swift_errorRetain();
  v8(0, v11, v7);
  swift_errorRelease();

  swift_errorRelease();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1000DC0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return _swift_task_switch(sub_1000DC10C, 0, 0);
}

uint64_t sub_1000DC10C()
{
  uint64_t v1 = *sub_10001CD44((void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000DC1D0;
  v2[8] = v1;
  return _swift_task_switch(sub_1000E9E14, v1, 0);
}

uint64_t sub_1000DC1D0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000DC2CC, 0, 0);
}

uint64_t sub_1000DC2CC()
{
  (*(void (**)(uint64_t, void))(v0 + 24))(1, 0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000DC490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = a5;
  return _swift_task_switch(sub_1000DC4B0, 0, 0);
}

uint64_t sub_1000DC4B0()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170E390;
  *(void *)(v0 + 40) = qword_10170E390;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000DC5BC;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10001D704, v1, &type metadata for Configuration);
}

uint64_t sub_1000DC5BC()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1000DC6D4, 0, 0);
}

uint64_t sub_1000DC6D4()
{
  uint64_t v1 = v0[2];
  uint64_t result = sub_1010AC198(v1);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = result;
  uint64_t v4 = sub_1010AC410(v1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 < 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = (void (*)(void))v0[3];
  id v6 = [objc_allocWithZone((Class)SPBeaconSharingLimits) initWithMaxCircleMembers:v3 maxDelegatedShares:v4];
  v5();

  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000DC828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[13] = v8;
  v7[14] = *(void *)(v8 - 8);
  v7[15] = swift_task_alloc();
  return _swift_task_switch(sub_1000DC8EC, 0, 0);
}

uint64_t sub_1000DC8EC()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  sub_10001CD44((void *)(v0[9] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[9] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v3 = swift_allocObject();
  v0[16] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[17] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000DC9F0;
  uint64_t v5 = v0[10];
  return sub_1000F9D0C(v5, (uint64_t)sub_100131860, v3);
}

uint64_t sub_1000DC9F0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000DCB34, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1000DCB34()
{
  uint64_t v23 = v0;
  swift_release();
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170D788);
  id v3 = v1;
  swift_errorRetain();
  id v4 = v3;
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v8 = v0[14];
    uint64_t v7 = v0[15];
    uint64_t v9 = v0[13];
    uint64_t v10 = (void *)v0[10];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141558531;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    id v12 = [v10 beaconIdentifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v0[6] = sub_1008FA0F0(v13, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v16 = Error.localizedDescription.getter();
    v0[8] = sub_1008FA0F0(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Failed to create delegation for beacon: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v18 = (void *)v0[10];
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  char v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_1000DD014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[13] = v8;
  v7[14] = *(void *)(v8 - 8);
  v7[15] = swift_task_alloc();
  return _swift_task_switch(sub_1000DD0D8, 0, 0);
}

uint64_t sub_1000DD0D8()
{
  sub_10001CD44((void *)(v0[9] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[9] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[16] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000DD18C;
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[10];
  return sub_1000FA434(v4, v2, v3);
}

uint64_t sub_1000DD18C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000DD2C8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1000DD2C8()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170D788);
  id v3 = v1;
  swift_errorRetain();
  id v4 = v3;
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v8 = v0[14];
    uint64_t v7 = v0[15];
    uint64_t v9 = v0[13];
    uint64_t v10 = (void *)v0[10];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141558531;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    id v12 = [v10 beaconIdentifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v0[6] = sub_1008FA0F0(v13, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v16 = Error.localizedDescription.getter();
    v0[8] = sub_1008FA0F0(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Failed to get status of the delegation for beacon: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v18 = (void *)v0[10];
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  char v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_1000DD7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[13] = v8;
  v7[14] = *(void *)(v8 - 8);
  v7[15] = swift_task_alloc();
  sub_10000588C(&qword_101649E40);
  v7[16] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL();
  v7[17] = v9;
  v7[18] = *(void *)(v9 - 8);
  v7[19] = swift_task_alloc();
  return _swift_task_switch(sub_1000DD8F0, 0, 0);
}

uint64_t sub_1000DD8F0()
{
  sub_10001CD44((void *)(v0[9] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[9] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[20] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000DD9A4;
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[10];
  return sub_1000FAA48(v2, v3);
}

uint64_t sub_1000DD9A4()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000DDBC4;
  }
  else {
    uint64_t v2 = sub_1000DDAB8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000DDAB8()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v4 = v0[16];
  uint64_t v3 = v0[17];
  uint64_t v5 = (void (*)(uint64_t, void))v0[11];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v1, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v4, 0, 1, v3);
  v5(v4, 0);
  sub_10001DAB4(v4, &qword_101649E40);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000DDBC4()
{
  uint64_t v26 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170D788);
  id v3 = v1;
  swift_errorRetain();
  id v4 = v3;
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v8 = v0[14];
    uint64_t v7 = v0[15];
    uint64_t v9 = v0[13];
    uint64_t v10 = (void *)v0[10];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141558531;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    id v12 = [v10 beaconIdentifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v0[6] = sub_1008FA0F0(v13, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v16 = Error.localizedDescription.getter();
    v0[8] = sub_1008FA0F0(v16, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Failed to get status of the delegation for beacon: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v18 = (void *)v0[10];

    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v19 = v0[21];
  uint64_t v20 = v0[16];
  uint64_t v21 = (void (*)(uint64_t, uint64_t))v0[11];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[18] + 56))(v20, 1, 1, v0[17]);
  swift_errorRetain();
  v21(v20, v19);
  swift_errorRelease();
  swift_errorRelease();
  sub_10001DAB4(v20, &qword_101649E40);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

void sub_1000DE100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v8, &qword_101649E40);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  id v12 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    URL._bridgeToObjectiveC()(v11);
    id v12 = v13;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  if (a2) {
    unint64_t v14 = (void *)_convertErrorToNSError(_:)();
  }
  else {
    unint64_t v14 = 0;
  }
  (*(void (**)(uint64_t, void *, void *))(a3 + 16))(a3, v12, v14);
}

uint64_t sub_1000DE254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[13] = v8;
  v7[14] = *(void *)(v8 - 8);
  v7[15] = swift_task_alloc();
  return _swift_task_switch(sub_1000DE318, 0, 0);
}

uint64_t sub_1000DE318()
{
  sub_10001CD44((void *)(v0[9] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(v0[9] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[16] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000DE3C8;
  uint64_t v2 = v0[10];
  return sub_1000FB03C(v2);
}

uint64_t sub_1000DE3C8()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000DE4DC;
  }
  else {
    uint64_t v2 = sub_1000D3DA4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000DE4DC()
{
  uint64_t v25 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170D788);
  id v3 = v1;
  swift_errorRetain();
  id v4 = v3;
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v8 = v0[14];
    uint64_t v7 = v0[15];
    uint64_t v9 = v0[13];
    uint64_t v10 = (void *)v0[10];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141558531;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    id v12 = [v10 beaconIdentifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v0[6] = sub_1008FA0F0(v13, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v16 = Error.localizedDescription.getter();
    v0[8] = sub_1008FA0F0(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Failed to stop location share for beacon: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v18 = (void *)v0[10];

    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v19 = v0[17];
  uint64_t v20 = (void (*)(void, uint64_t))v0[11];
  swift_errorRetain();
  v20(0, v19);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

id sub_1000DEA00()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t type metadata accessor for BeaconSharingTrampoline()
{
  return self;
}

Swift::Int sub_1000DEA6C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000DEAC4()
{
  return String.hash(into:)();
}

Swift::Int sub_1000DEAE0()
{
  return Hasher._finalize()();
}

uint64_t sub_1000DEB34@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A0400, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_1000DEB88(void *a1@<X8>)
{
  *a1 = 0xD000000000000032;
  a1[1] = 0x80000001013EE460;
}

uint64_t sub_1000DEBA8()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BeaconSharingServiceConnections(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163B320);
}

uint64_t sub_1000DEC10()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000DEC48()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170D7A0);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170D7A0);
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170D788);
  Swift::Int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000DED10(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v4 = type metadata accessor for UUID();
  v2[4] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[5] = v5;
  v2[6] = *(void *)(v5 + 64);
  v2[7] = swift_task_alloc();
  v2[8] = sub_10000588C((uint64_t *)&unk_101638D10);
  v2[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OwnerSharingCircle();
  v2[10] = v6;
  v2[11] = *(void *)(v6 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_1000DEE6C, a2, 0);
}

uint64_t sub_1000DEE6C()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  v0[13] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[14] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_1000DEF5C, 0, 0);
}

uint64_t sub_1000DEF5C()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[15] = v3;
  v3[2] = v2;
  v3[3] = sub_10012AADC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[16] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000DF060;
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340A4, v3, v6);
}

uint64_t sub_1000DF060()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000DF194, 0, 0);
}

uint64_t sub_1000DF194()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[9];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v1 + 48))(v2, 1, v0[10]) == 1)
  {
    sub_10001DAB4(v2, (uint64_t *)&unk_101638D10);
    uint64_t v10 = (uint64_t (*)(uint64_t))((char *)&dword_101641FE0 + dword_101641FE0);
    uint64_t v3 = (void *)swift_task_alloc();
    v0[17] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000DF35C;
    uint64_t v4 = v0[2];
  }
  else
  {
    uint64_t v5 = v0[12];
    sub_10012EC2C(v2, v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10000588C(&qword_101657700);
    unint64_t v6 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    uint64_t v7 = swift_allocObject();
    v0[18] = v7;
    *(_OWORD *)(v7 + 16) = xmmword_101342130;
    sub_100130CA8(v5, v7 + v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v10 = (uint64_t (*)(uint64_t))((char *)&dword_101641FC8 + dword_101641FC8);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[19] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1000DF4AC;
    uint64_t v4 = v7;
  }
  return v10(v4);
}

uint64_t sub_1000DF35C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000DF4AC()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1000DF674;
  }
  else {
    uint64_t v2 = sub_1000DF5DC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000DF5DC()
{
  sub_10012C39C(*(void *)(v0 + 96), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000DF674()
{
  sub_10012C39C(*(void *)(v0 + 96), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000DF714()
{
  v1[4] = v0;
  uint64_t v2 = sub_10000588C(&qword_10163BCF8);
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  uint64_t v3 = sub_10000588C(&qword_10163BD00);
  v1[8] = v3;
  v1[9] = *(void *)(v3 - 8);
  v1[10] = swift_task_alloc();
  sub_10000588C(&qword_10164DBB0);
  v1[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000DF868, v0, 0);
}

uint64_t sub_1000DF868()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "BeaconSharingService: Starting up.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[4];

  sub_1000F0338();
  uint64_t v7 = *(void *)(v6 + 192);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 1, 1, v8);
  uint64_t v9 = sub_10012B44C(&qword_10163B7A8, (void (*)(uint64_t))type metadata accessor for BeaconSharingService);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v6;
  v10[3] = v9;
  v10[4] = v7;
  v10[5] = v6;
  swift_retain_n();
  swift_retain();
  sub_1008F5E44(v5, (uint64_t)&unk_10163BD10, (uint64_t)v10);
  swift_release();
  uint64_t v11 = *(void *)(v6 + 136);
  v0[12] = v11;
  return _swift_task_switch(sub_1000DFA70, v11, 0);
}

uint64_t sub_1000DFA70()
{
  uint64_t v1 = *(void *)(v0 + 32);
  *(void *)(v0 + 104) = sub_100AB2C40();
  return _swift_task_switch(sub_1000DFAE4, v1, 0);
}

uint64_t sub_1000DFAE4()
{
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[4];
  v0[2] = v0[13];
  sub_10000588C((uint64_t *)&unk_101653E90);
  sub_100062734(&qword_10163BD20, (uint64_t *)&unk_101653E90);
  Publisher.filter(_:)();
  swift_release();
  sub_100062734(&qword_10163BD28, &qword_10163BD00);
  swift_retain();
  uint64_t v6 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  *(void *)(v5 + 224) = v6;
  swift_release();
  return _swift_task_switch(sub_1000DFC70, v1, 0);
}

uint64_t sub_1000DFC70()
{
  uint64_t v1 = v0[4];
  v0[14] = *(void *)(*(void *)(v0[12] + 128) + OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedPublisher);
  swift_retain();
  return _swift_task_switch(sub_1000DFCF8, v1, 0);
}

uint64_t sub_1000DFCF8()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  v0[3] = v0[14];
  sub_10000588C((uint64_t *)&unk_10163BD30);
  sub_100062734(&qword_101656740, (uint64_t *)&unk_10163BD30);
  Publisher.filter(_:)();
  swift_release();
  sub_100062734(&qword_10163BD40, &qword_10163BCF8);
  swift_retain();
  uint64_t v5 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  *(void *)(v3 + 232) = v5;
  swift_release();
  type metadata accessor for StateCapture();
  swift_allocObject();
  swift_retain();
  *(void *)(v3 + 264) = StateCapture.init(_:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000DFEE4(uint64_t a1)
{
  uint64_t v19 = type metadata accessor for LostModeRecord();
  __chkstk_darwin(v19);
  uint64_t v18 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OwnerSharingCircle();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SharingCircleSecret();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MemberSharingCircle();
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D010(a1, (uint64_t)v24);
  sub_10000588C(&qword_10163BCC8);
  if (swift_dynamicCast())
  {
    sub_10012C39C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001D010(a1, (uint64_t)v24);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
LABEL_5:
    sub_10001D010(a1, (uint64_t)v23);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
LABEL_6:
    sub_10001D010(a1, (uint64_t)v22);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
LABEL_7:
    sub_10001D010(a1, (uint64_t)v21);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v21);
    return 1;
  }
  sub_10001D010(a1, (uint64_t)v24);
  sub_10001CEB0(v24, (uint64_t)v23);
  if (swift_dynamicCast())
  {
    sub_10012C39C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
    goto LABEL_5;
  }
  sub_10001D010(a1, (uint64_t)v23);
  sub_10001CEB0(v23, (uint64_t)v22);
  if (swift_dynamicCast())
  {
    sub_10012C39C((uint64_t)v8, type metadata accessor for SharedBeaconRecord);
    goto LABEL_6;
  }
  sub_10001D010(a1, (uint64_t)v22);
  sub_10001CEB0(v22, (uint64_t)v21);
  if (swift_dynamicCast())
  {
    sub_10012C39C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    goto LABEL_7;
  }
  sub_10001D010(a1, (uint64_t)v21);
  sub_10001CEB0(v21, (uint64_t)v20);
  uint64_t v17 = (uint64_t)v18;
  uint64_t v15 = swift_dynamicCast();
  if (v15) {
    sub_10012C39C(v17, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  }
  return v15;
}

uint64_t sub_1000E02C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100033F68;
  return sub_1000E0F80(a2);
}

uint64_t sub_1000E035C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LostModeRecord();
  __chkstk_darwin(v2);
  uint64_t v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  __chkstk_darwin(v5);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001D010(a1, (uint64_t)v11);
  sub_10000588C(&qword_10163BCC0);
  if (swift_dynamicCast())
  {
    sub_10012C39C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10001D010(a1, (uint64_t)v11);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
    return 1;
  }
  else
  {
    sub_10001D010(a1, (uint64_t)v11);
    sub_10001CEB0(v11, (uint64_t)v10);
    uint64_t v8 = swift_dynamicCast();
    if (v8) {
      sub_10012C39C((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    }
  }
  return v8;
}

uint64_t sub_1000E04F4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  type metadata accessor for Transaction();
  sub_10001D010(a1, (uint64_t)v9);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  a4(v9, v7 + 24);
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_1000E05B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100033F68;
  return sub_1000E67B0(a2);
}

uint64_t sub_1000E0650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v5 = type metadata accessor for StateCaptureDateType();
  v3[6] = v5;
  v3[7] = *(void *)(v5 - 8);
  v3[8] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v3[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for StateCaptureHintAPI();
  v3[10] = v6;
  v3[11] = *(void *)(v6 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  return _swift_task_switch(sub_1000E07E8, a3, 0);
}

uint64_t sub_1000E07E8()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  StateCaptureHint.api.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for StateCaptureHintAPI.request(_:), v3);
  sub_10012B44C((unint64_t *)&unk_1016566F0, (void (*)(uint64_t))&type metadata accessor for StateCaptureHintAPI);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v6 = *(_DWORD *)(v0 + 136);
  int v5 = *(_DWORD *)(v0 + 140);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  if (v6 == v5)
  {
    uint64_t v8 = *(void *)(v0 + 72);
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    uint64_t v10 = dword_101642068;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1000E0ABC;
    uint64_t v12 = *(void *)(v0 + 72);
    return ((uint64_t (*)(uint64_t))((char *)&dword_101642068 + v10))(v12);
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 24);
    uint64_t v15 = type metadata accessor for StateCaptureStateData();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
}

uint64_t sub_1000E0ABC(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 120) = a1;
  *(void *)(v4 + 128) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 72);
  uint64_t v6 = *(void *)(v3 + 40);
  sub_10001DAB4(v5, &qword_101638CF0);
  if (v1) {
    uint64_t v7 = sub_1000E0EC4;
  }
  else {
    uint64_t v7 = sub_1000E0C40;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000E0C40()
{
  uint64_t v1 = self;
  sub_100C04330();
  sub_10000588C(&qword_10163BD60);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = 0;
  id v3 = [v1 dataWithPropertyList:isa format:200 options:0 error:v0 + 16];

  id v4 = *(id *)(v0 + 16);
  uint64_t v5 = *(void **)(v0 + 120);
  if (v3)
  {
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v6 = *(void *)(v0 + 64);
    uint64_t v8 = *(void *)(v0 + 48);
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for StateCaptureDateType.serialized(_:), v8);
    StateCaptureStateData.init(type:title:data:)();

    uint64_t v9 = *(void *)(v0 + 24);
    uint64_t v10 = type metadata accessor for StateCaptureStateData();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  }
  else
  {
    uint64_t v12 = v4;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_1000E0EC4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000E0F80(uint64_t a1)
{
  v2[38] = a1;
  v2[39] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[40] = v3;
  v2[41] = *(void *)(v3 - 8);
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  v2[44] = type metadata accessor for OwnerSharingCircle();
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  v2[47] = swift_task_alloc();
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SharedBeaconRecord(0);
  v2[53] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[54] = v5;
  v2[55] = *(void *)(v5 + 64);
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v2[59] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[60] = v7;
  v2[61] = *(void *)(v7 + 64);
  v2[62] = swift_task_alloc();
  v2[63] = swift_task_alloc();
  v2[64] = sub_10000588C((uint64_t *)&unk_10163B7C0);
  v2[65] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SharingCircleSecret();
  v2[66] = v8;
  v2[67] = *(void *)(v8 - 8);
  v2[68] = swift_task_alloc();
  v2[69] = swift_task_alloc();
  v2[70] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for MemberSharingCircle();
  v2[71] = v9;
  v2[72] = *(void *)(v9 - 8);
  v2[73] = swift_task_alloc();
  v2[74] = swift_task_alloc();
  v2[75] = swift_task_alloc();
  v2[76] = type metadata accessor for MemberPeerTrust();
  v2[77] = swift_task_alloc();
  v2[78] = type metadata accessor for OwnerPeerTrust();
  v2[79] = swift_task_alloc();
  v2[80] = type metadata accessor for LostModeRecord();
  v2[81] = swift_task_alloc();
  v2[82] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[83] = swift_task_alloc();
  v2[84] = swift_task_alloc();
  v2[85] = swift_task_alloc();
  return _swift_task_switch(sub_1000E13DC, v1, 0);
}

uint64_t sub_1000E13DC()
{
  sub_10001D010(*(void *)(v0 + 304), v0 + 16);
  sub_10000588C(&qword_10163BCC8);
  if (swift_dynamicCast())
  {
    uint64_t v1 = *(void *)(v0 + 648);
    uint64_t v2 = *(void *)(v0 + 640);
    sub_10012EC2C(*(void *)(v0 + 656), v1, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v3 = v1 + *(int *)(v2 + 24);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 688) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1000E1CFC;
    return sub_1000F1DC4(v3);
  }
  if (swift_dynamicCast())
  {
    uint64_t v6 = *(void *)(v0 + 632);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 480) + 56))(*(void *)(v0 + 680), 1, 1, *(void *)(v0 + 472));
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release_n();
    uint64_t v7 = type metadata accessor for OwnerPeerTrust;
LABEL_9:
    sub_10012C39C(v6, (uint64_t (*)(void))v7);
    uint64_t v8 = *(void *)(v0 + 680);
    uint64_t v9 = *(void *)(v0 + 664);
    uint64_t v10 = *(void *)(v0 + 472);
    uint64_t v11 = *(void *)(v0 + 480);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
    sub_10001D074(v8, v9, &qword_101638CF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      uint64_t v12 = *(void *)(v0 + 664);
      sub_10001DAB4(*(void *)(v0 + 680), &qword_101638CF0);
      sub_10001DAB4(v12, &qword_101638CF0);
LABEL_11:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
      return v13();
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 480) + 32))(*(void *)(v0 + 496), *(void *)(v0 + 664), *(void *)(v0 + 472));
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 912) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1000E6454;
    uint64_t v15 = *(void *)(v0 + 496);
    return sub_1000E84B8(v15);
  }
  if (swift_dynamicCast())
  {
    uint64_t v6 = *(void *)(v0 + 616);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 480) + 56))(*(void *)(v0 + 680), 1, 1, *(void *)(v0 + 472));
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release_n();
    uint64_t v7 = type metadata accessor for MemberPeerTrust;
    goto LABEL_9;
  }
  if (swift_dynamicCast())
  {
    uint64_t v16 = *(void *)(v0 + 592);
    uint64_t v17 = *(void *)(v0 + 568);
    sub_10012EC2C(*(void *)(v0 + 600), v16, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v18 = v16 + *(int *)(v17 + 28);
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 696) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_1000E2158;
    return sub_100E5CB14(v18);
  }
  if (swift_dynamicCast())
  {
    uint64_t v20 = *(void *)(v0 + 528);
    uint64_t v21 = *(void *)(v0 + 312);
    sub_10012EC2C(*(void *)(v0 + 560), *(void *)(v0 + 552), (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
    *(_DWORD *)(v0 + 920) = *(_DWORD *)(v20 + 24);
    uint64_t v22 = *(void *)(v21 + 136);
    *(void *)(v0 + 712) = v22;
    uint64_t v23 = (uint64_t)sub_1000E2694;
    uint64_t v24 = 0;
    return _swift_task_switch(v23, v22, v24);
  }
  if (swift_dynamicCast())
  {
    sub_10012EC2C(*(void *)(v0 + 464), *(void *)(v0 + 456), type metadata accessor for SharedBeaconRecord);
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v23 = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 96);
      sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v28 = (uint64_t (*)(void))((char *)&dword_101639108 + dword_101639108);
      uint64_t v25 = (void *)swift_task_alloc();
      *(void *)(v0 + 792) = v25;
      *uint64_t v25 = v0;
      v25[1] = sub_1000E36A0;
      return v28();
    }
    __break(1u);
    return _swift_task_switch(v23, v22, v24);
  }
  if (!swift_dynamicCast())
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
    goto LABEL_11;
  }
  sub_10012EC2C(*(void *)(v0 + 416), *(void *)(v0 + 408), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v29 = (uint64_t (*)(uint64_t))((char *)&dword_101641FB8 + dword_101641FB8);
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 824) = v26;
  void *v26 = v0;
  v26[1] = sub_1000E3D9C;
  uint64_t v27 = *(void *)(v0 + 408);
  return v29(v27);
}

uint64_t sub_1000E1CFC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 312);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E1E0C, v1, 0);
}

uint64_t sub_1000E1E0C()
{
  uint64_t v1 = v0[85];
  uint64_t v2 = v0[59];
  uint64_t v3 = v0[60];
  sub_10012C39C(v0[81], (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v1, 1, 1, v2);
  uint64_t v4 = v0[85];
  uint64_t v5 = v0[83];
  uint64_t v6 = v0[59];
  uint64_t v7 = v0[60];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  sub_10001D074(v4, v5, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    uint64_t v8 = v0[83];
    sub_10001DAB4(v0[85], &qword_101638CF0);
    sub_10001DAB4(v8, &qword_101638CF0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[60] + 32))(v0[62], v0[83], v0[59]);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[114] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1000E6454;
    uint64_t v12 = v0[62];
    return sub_1000E84B8(v12);
  }
}

uint64_t sub_1000E2158(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 312);
  *(void *)(*(void *)v1 + 704) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E2270, v2, 0);
}

uint64_t sub_1000E2270()
{
  uint64_t v1 = *(void *)(v0[88] + 16);
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_10012C39C(v0[74], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
    goto LABEL_5;
  }
  uint64_t v2 = v0[85];
  uint64_t v3 = v0[74];
  uint64_t v4 = v0[59];
  uint64_t v5 = v0[60];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3 + *(int *)(v0[71] + 24), v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v4);
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  sub_10012C39C(v3, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v6 = v0[85];
  uint64_t v7 = v0[83];
  uint64_t v8 = v0[59];
  uint64_t v9 = v0[60];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  sub_10001D074(v6, v7, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    uint64_t v10 = v0[83];
    sub_10001DAB4(v0[85], &qword_101638CF0);
    sub_10001DAB4(v10, &qword_101638CF0);
LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  (*(void (**)(void, void, void))(v0[60] + 32))(v0[62], v0[83], v0[59]);
  uint64_t v13 = (void *)swift_task_alloc();
  v0[114] = v13;
  void *v13 = v0;
  v13[1] = sub_1000E6454;
  uint64_t v14 = v0[62];
  return sub_1000E84B8(v14);
}

uint64_t sub_1000E2694()
{
  uint64_t v1 = *(void *)(v0 + 712);
  uint64_t v2 = *(void *)(v0 + 504);
  uint64_t v3 = *(void *)(v0 + 480);
  uint64_t v4 = *(void *)(v0 + 472);
  uint64_t v5 = *(void *)(v0 + 552) + *(int *)(v0 + 920);
  *(void *)(v0 + 720) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 728) = v6;
  *(void *)(v0 + 736) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 744) = v8;
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_1000E27A4, 0, 0);
}

uint64_t sub_1000E27A4()
{
  uint64_t v1 = v0[93];
  uint64_t v2 = v0[90];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[94] = v3;
  v3[2] = v2;
  v3[3] = sub_10012AA74;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[95] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000E28B0;
  uint64_t v5 = v0[65];
  uint64_t v6 = v0[64];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340A8, v3, v6);
}

uint64_t sub_1000E28B0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 312);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E2A00, v1, 0);
}

uint64_t sub_1000E2A00()
{
  uint64_t v1 = v0[71];
  uint64_t v2 = v0[65];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[72] + 48))(v2, 1, v1) == 1)
  {
    uint64_t v3 = v0[85];
    uint64_t v4 = v0[59];
    uint64_t v5 = v0[60];
    sub_10001DAB4(v2, (uint64_t *)&unk_10163B7C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t))v0[91];
    uint64_t v7 = v0[85];
    uint64_t v8 = v0[84];
    uint64_t v9 = v0[73];
    uint64_t v10 = v0[59];
    uint64_t v11 = v0[60];
    sub_10012EC2C(v2, v9, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    v6(v8, v9 + *(int *)(v1 + 24), v10);
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    sub_10001D608(v8, v7, &qword_101638CF0);
  }
  uint64_t v12 = v0[69];
  uint64_t v13 = v0[67];
  sub_10000588C(&qword_10163A878);
  unint64_t v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = swift_allocObject();
  v0[96] = v15;
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  sub_100130CA8(v12, v15 + v14, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
  uint64_t v18 = (uint64_t (*)(uint64_t))((char *)&dword_101642050 + dword_101642050);
  uint64_t v16 = (void *)swift_task_alloc();
  v0[97] = v16;
  void *v16 = v0;
  v16[1] = sub_1000E2C30;
  return v18(v15);
}

uint64_t sub_1000E2C30()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 784) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 312);
    uint64_t v4 = sub_1000E307C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 312);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000E2D58;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000E2D58()
{
  sub_10012C39C(v0[69], (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
  uint64_t v1 = v0[85];
  uint64_t v2 = v0[83];
  uint64_t v3 = v0[59];
  uint64_t v4 = v0[60];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  sub_10001D074(v1, v2, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    uint64_t v5 = v0[83];
    sub_10001DAB4(v0[85], &qword_101638CF0);
    sub_10001DAB4(v5, &qword_101638CF0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[60] + 32))(v0[62], v0[83], v0[59]);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[114] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1000E6454;
    uint64_t v9 = v0[62];
    return sub_1000E84B8(v9);
  }
}

uint64_t sub_1000E307C()
{
  uint64_t v27 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  swift_bridgeObjectRelease();
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[69];
  uint64_t v3 = v0[68];
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_100130CA8(v2, v3, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[69];
  uint64_t v9 = v0[68];
  if (v7)
  {
    uint64_t v25 = v0[69];
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 141558531;
    v0[36] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[37] = sub_1008FA0F0(v12, v13, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
    *(_WORD *)(v10 + 22) = 2114;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[35] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to backup sharing circle secrets for: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v10, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (uint64_t)(v0 + 2);
    swift_slowDealloc();

    swift_errorRelease();
    uint64_t v15 = v25;
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
    swift_errorRelease();
    uint64_t v15 = v8;
  }
  sub_10012C39C(v15, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
  uint64_t v16 = v0[85];
  uint64_t v17 = v0[83];
  uint64_t v18 = v0[59];
  uint64_t v19 = v0[60];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  sub_10001D074(v16, v17, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    uint64_t v20 = v0[83];
    sub_10001DAB4(v0[85], &qword_101638CF0);
    sub_10001DAB4(v20, &qword_101638CF0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[60] + 32))(v0[62], v0[83], v0[59]);
    uint64_t v23 = (void *)swift_task_alloc();
    v0[114] = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_1000E6454;
    uint64_t v24 = v0[62];
    return sub_1000E84B8(v24);
  }
}

uint64_t sub_1000E36A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 312);
  *(void *)(*(void *)v1 + 800) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E37B8, v2, 0);
}

uint64_t sub_1000E37B8()
{
  uint64_t v1 = v0[100];
  uint64_t v3 = v0[56];
  uint64_t v2 = v0[57];
  uint64_t v4 = v0[54];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
  sub_100130CA8(v2, v3, type metadata accessor for SharedBeaconRecord);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = swift_allocObject();
  v0[101] = v6;
  *(void *)(v6 + 16) = v1;
  sub_10012EC2C(v3, v6 + v5, type metadata accessor for SharedBeaconRecord);
  swift_retain();
  BOOL v7 = (void *)swift_task_alloc();
  v0[102] = v7;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101638DC0);
  *BOOL v7 = v0;
  v7[1] = sub_1000E3918;
  return unsafeBlocking<A>(_:)((char *)v0 + 932, sub_100130C24, v6, v8);
}

uint64_t sub_1000E3918()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 312);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1000E3A44, v1, 0);
}

uint64_t sub_1000E3A44()
{
  uint64_t v1 = v0[85];
  uint64_t v2 = v0[59];
  uint64_t v3 = v0[60];
  uint64_t v4 = v0[57];
  swift_release();
  sub_10012C39C(v4, type metadata accessor for SharedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v1, 1, 1, v2);
  uint64_t v5 = v0[85];
  uint64_t v6 = v0[83];
  uint64_t v7 = v0[59];
  uint64_t v8 = v0[60];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  sub_10001D074(v5, v6, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    uint64_t v9 = v0[83];
    sub_10001DAB4(v0[85], &qword_101638CF0);
    sub_10001DAB4(v9, &qword_101638CF0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[60] + 32))(v0[62], v0[83], v0[59]);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[114] = v12;
    void *v12 = v0;
    v12[1] = sub_1000E6454;
    uint64_t v13 = v0[62];
    return sub_1000E84B8(v13);
  }
}

uint64_t sub_1000E3D9C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 832) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 312);
  if (v0) {
    uint64_t v4 = sub_1000E42D8;
  }
  else {
    uint64_t v4 = sub_1000E3EC8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000E3EC8()
{
  *(void *)(v0 + 840) = *(void *)(v0 + 832);
  uint64_t v1 = *(uint64_t **)(v0 + 408);
  int v2 = *((unsigned __int8 *)v1 + *(int *)(*(void *)(v0 + 352) + 28));
  type metadata accessor for DelegatedShareUseCase();
  char v3 = sub_1005753E8(v1);
  uint64_t v4 = *(void *)(v0 + 408);
  if (v2 != 3) {
    goto LABEL_9;
  }
  uint64_t v5 = *(void *)(v0 + 352);
  int v6 = *(unsigned __int8 *)(v4 + *(int *)(v5 + 36));
  if (v3)
  {
    if (v6 == 4)
    {
      uint64_t v7 = *(int *)(v5 + 20);
      *(_DWORD *)(v0 + 924) = v7;
      uint64_t v8 = v4 + v7;
      uint64_t v14 = (uint64_t (*)(uint64_t))((char *)&dword_101642038 + dword_101642038);
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 848) = v9;
      *uint64_t v9 = v0;
      v9[1] = sub_1000E4AA0;
      return v14(v8);
    }
    goto LABEL_9;
  }
  if (v6 == 4)
  {
LABEL_9:
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release_n();
    sub_10012C39C(v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  uint64_t v12 = v4 + *(int *)(v5 + 20);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 880) = v13;
  void *v13 = v0;
  v13[1] = sub_1000E5BCC;
  return sub_100E5CB14(v12);
}

uint64_t sub_1000E42D8()
{
  uint64_t v33 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 392);
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_100130CA8(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100130CA8(v1, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 400);
    uint64_t v29 = *(void *)(v0 + 392);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v30 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141559043;
    *(void *)(v0 + 216) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 224) = sub_1008FA0F0(v9, v10, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v8 + 22) = 2160;
    *(void *)(v0 + 232) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 32) = 2081;
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 240) = sub_1008FA0F0(v11, v12, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v29, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v8 + 42) = 2114;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 248) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v30 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to retry apns registration for: %{private,mask.hash}s, beacon: %{private,mask.hash}s error: %{public}@.", (uint8_t *)v8, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 392);
    uint64_t v14 = *(void *)(v0 + 400);
    swift_errorRelease();
    sub_10012C39C(v14, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10012C39C(v15, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
    swift_errorRelease();
  }
  *(void *)(v0 + 840) = 0;
  uint64_t v16 = *(uint64_t **)(v0 + 408);
  int v17 = *((unsigned __int8 *)v16 + *(int *)(*(void *)(v0 + 352) + 28));
  type metadata accessor for DelegatedShareUseCase();
  char v18 = sub_1005753E8(v16);
  uint64_t v19 = *(void *)(v0 + 408);
  if (v17 != 3) {
    goto LABEL_14;
  }
  uint64_t v20 = *(void *)(v0 + 352);
  int v21 = *(unsigned __int8 *)(v19 + *(int *)(v20 + 36));
  if (v18)
  {
    if (v21 == 4)
    {
      uint64_t v22 = *(int *)(v20 + 20);
      *(_DWORD *)(v0 + 924) = v22;
      uint64_t v23 = v19 + v22;
      int64_t v31 = (uint64_t (*)(uint64_t))((char *)&dword_101642038 + dword_101642038);
      uint64_t v24 = (void *)swift_task_alloc();
      *(void *)(v0 + 848) = v24;
      void *v24 = v0;
      v24[1] = sub_1000E4AA0;
      return v31(v23);
    }
    goto LABEL_14;
  }
  if (v21 == 4)
  {
LABEL_14:
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release_n();
    sub_10012C39C(v19, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  uint64_t v27 = v19 + *(int *)(v20 + 20);
  uint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 880) = v28;
  void *v28 = v0;
  v28[1] = sub_1000E5BCC;
  return sub_100E5CB14(v27);
}

uint64_t sub_1000E4AA0(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 312);
  *(unsigned char *)(*(void *)v1 + 933) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E4BB8, v2, 0);
}

void sub_1000E4BB8()
{
  if (*(unsigned char *)(v0 + 933) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 840);
    uint64_t v2 = *(uint64_t **)(v0 + 408);
    uint64_t v3 = *(void *)(v0 + 336);
    static Date.trustedNow.getter(*(void *)(v0 + 344));
    sub_100CB3358(v2, v3);
    if (!v1)
    {
      uint64_t v7 = *(void *)(v0 + 336);
      uint64_t v8 = *(void *)(v0 + 344);
      uint64_t v9 = *(void *)(v0 + 320);
      uint64_t v10 = *(void *)(v0 + 328);
      Date.timeIntervalSince(_:)();
      double v12 = v11;
      uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v13(v7, v9);
      v13(v8, v9);
      if (v12 <= 86400.0)
      {
        uint64_t v20 = (char *)&dword_101642020 + dword_101642020;
        int v17 = (void *)swift_task_alloc();
        *(void *)(v0 + 856) = v17;
        *int v17 = v0;
        v17[1] = sub_1000E504C;
        uint64_t v18 = *(void *)(v0 + 408);
        ((void (*)(uint64_t, void, void, uint64_t))v20)(v18, 0, 0, 2);
      }
      else
      {
        uint64_t v14 = *(int *)(v0 + 924);
        uint64_t v15 = *(void *)(v0 + 408);
        uint64_t v19 = (void (*)(uint64_t))((char *)&dword_101642008 + dword_101642008);
        uint64_t v16 = (void *)swift_task_alloc();
        *(void *)(v0 + 864) = v16;
        void *v16 = v0;
        v16[1] = sub_1000E51AC;
        v19(v15 + v14);
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 408);
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release_n();
    sub_10012C39C(v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v6 = *(void (**)(void))(v0 + 8);
    v6();
  }
}

uint64_t sub_1000E504C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = *(int *)(v1 + 924);
  uint64_t v4 = *(void *)(v1 + 408);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)&dword_101642008 + dword_101642008);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 864) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000E51AC;
  return v7(v4 + v3);
}

uint64_t sub_1000E51AC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 872) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 312);
  if (v0) {
    uint64_t v4 = sub_1000E5574;
  }
  else {
    uint64_t v4 = sub_1000E52D8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000E52D8()
{
  uint64_t v1 = *(void *)(v0 + 408);
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000E5574()
{
  uint64_t v22 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[51];
  uint64_t v3 = v0[47];
  uint64_t v2 = v0[48];
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_100130CA8(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100130CA8(v1, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[48];
    uint64_t v19 = v0[47];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141559043;
    v0[22] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[23] = sub_1008FA0F0(v9, v10, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v8 + 22) = 2160;
    v0[24] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 32) = 2081;
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[25] = sub_1008FA0F0(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v19, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v8 + 42) = 2114;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[26] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to expire delegated circle for: %{private,mask.hash}s, beacon: %{private,mask.hash}s error: %{public}@.", (uint8_t *)v8, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v15 = v0[47];
    uint64_t v14 = v0[48];
    swift_errorRelease();
    sub_10012C39C(v14, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10012C39C(v15, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v16 = v0[51];
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  sub_10012C39C(v16, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_1000E5BCC(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v7 = *v1;
  *(void *)(v3 + 888) = a1;
  swift_task_dealloc();
  os_log_type_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_101642050 + dword_101642050);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 896) = v4;
  *uint64_t v4 = v7;
  v4[1] = sub_1000E5D18;
  return v6(a1);
}

uint64_t sub_1000E5D18()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 904) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 312);
  if (v0) {
    uint64_t v4 = sub_1000E5EB8;
  }
  else {
    uint64_t v4 = sub_1000E5E44;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000E5E44()
{
  swift_bridgeObjectRelease();
  *(_DWORD *)(v0 + 928) = *(_DWORD *)(*(void *)(v0 + 352) + 24);
  return _swift_task_switch(sub_1000E62FC, 0, 0);
}

uint64_t sub_1000E5EB8()
{
  uint64_t v20 = v0;
  swift_bridgeObjectRelease();
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 368);
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_100130CA8(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100130CA8(v1, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 368);
    uint64_t v17 = *(void *)(v0 + 360);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141559043;
    *(void *)(v0 + 272) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 264) = sub_1008FA0F0(v9, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v8 + 22) = 2160;
    *(void *)(v0 + 256) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 32) = 2081;
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 160) = sub_1008FA0F0(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v17, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v8 + 42) = 2114;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 168) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v18 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to backup sharing circle secrets for: %{private,mask.hash}s, beacon: %{private,mask.hash}s error: %{public}@.", (uint8_t *)v8, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 360);
    uint64_t v14 = *(void *)(v0 + 368);
    swift_errorRelease();
    sub_10012C39C(v14, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10012C39C(v15, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
    swift_errorRelease();
  }
  *(_DWORD *)(v0 + 928) = *(_DWORD *)(*(void *)(v0 + 352) + 24);
  return _swift_task_switch(sub_1000E62FC, 0, 0);
}

uint64_t sub_1000E62FC()
{
  if (qword_101636A80 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 504);
  uint64_t v2 = *(void *)(v0 + 480);
  uint64_t v3 = *(void *)(v0 + 472);
  uint64_t v4 = *(void *)(v0 + 312);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, *(void *)(v0 + 408) + *(int *)(v0 + 928), v3);
  unint64_t v5 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v6 + v5, v1, v3);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_1001343B0, v4, 0);
}

uint64_t sub_1000E6454()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 312);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_100134084;
  }
  else
  {
    uint64_t v4 = sub_1000E658C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000E658C()
{
  uint64_t v1 = v0[85];
  (*(void (**)(void, void))(v0[60] + 8))(v0[62], v0[59]);
  sub_10001DAB4(v1, &qword_101638CF0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1000E67B0(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  v2[14] = type metadata accessor for LostModeRecord();
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  v2[17] = type metadata accessor for OwnerSharingCircle();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return _swift_task_switch(sub_1000E68AC, v1, 0);
}

uint64_t sub_1000E68AC()
{
  sub_10001D010(v0[12], (uint64_t)(v0 + 2));
  sub_10000588C(&qword_10163BCC0);
  if (swift_dynamicCast())
  {
    uint64_t v1 = v0[20];
    uint64_t v2 = v0[17];
    sub_10012EC2C(v0[21], v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v3 = v1 + *(int *)(v2 + 20);
    uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&dword_101642008 + dword_101642008);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[22] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1000E6B18;
    return v11(v3);
  }
  else if (swift_dynamicCast())
  {
    uint64_t v6 = v0[15];
    uint64_t v7 = v0[14];
    sub_10012EC2C(v0[16], v6, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v8 = v6 + *(int *)(v7 + 24);
    uint64_t v9 = (void *)swift_task_alloc();
    v0[24] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1000E71BC;
    return sub_1000F39D8(v8);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_1000E6B18()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v4 = sub_1000E6D18;
  }
  else {
    uint64_t v4 = sub_1000E6C44;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000E6C44()
{
  sub_10012C39C(*(void *)(v0 + 160), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000E6D18()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_100130CA8(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100130CA8(v1, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v9 = v0[19];
  uint64_t v8 = v0[20];
  uint64_t v10 = v0[18];
  if (v7)
  {
    uint64_t v19 = v0[18];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v21 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141559043;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    os_log_type_t type = v6;
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_1008FA0F0(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 22) = 2160;
    v0[9] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 32) = 2081;
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[10] = sub_1008FA0F0(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v19, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 42) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[11] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v21 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Failed to remove local circle data for: %{private,mask.hash}s, beacon: %{private,mask.hash}s error: %{public}@.", (uint8_t *)v11, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    sub_10012C39C(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
  }
  sub_10012C39C(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_1000E71BC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 104);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E72CC, v1, 0);
}

uint64_t sub_1000E72CC()
{
  sub_10012C39C(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000E73A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  sub_10000588C(&qword_10164DBB0);
  v5[4] = swift_task_alloc();
  return _swift_task_switch(sub_1000E7438, a4, 0);
}

uint64_t sub_1000E7438()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  swift_retain();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_1000E74E8, v1, 0);
}

uint64_t sub_1000E74E8()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  unint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v3;
  v5[5] = v1;
  swift_retain();
  swift_retain();
  sub_1000212B0(v2, (uint64_t)&unk_10163BD98, (uint64_t)v5);
  swift_release();
  sub_10001DAB4(v2, &qword_10164DBB0);
  swift_task_dealloc();
  os_log_type_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000E75FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  uint64_t v7 = sub_10000588C(&qword_10163BDA0);
  v5[5] = v7;
  v5[6] = *(void *)(v7 - 8);
  v5[7] = swift_task_alloc();
  v5[8] = swift_task_alloc();
  uint64_t v8 = sub_10000588C(&qword_10163BDA8);
  v5[9] = v8;
  v5[10] = *(void *)(v8 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v9 = sub_10000588C(&qword_10163BDB0);
  v5[12] = v9;
  v5[13] = *(void *)(v9 - 8);
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000E7794, a4, 0);
}

uint64_t sub_1000E7794()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  type metadata accessor for Transaction();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v1, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  return _swift_task_switch(sub_1000E78B4, 0, 0);
}

uint64_t sub_1000E78B4()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[15] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000E7994;
  uint64_t v5 = v0[12];
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v5);
}

uint64_t sub_1000E7994()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E7A90, 0, 0);
}

uint64_t sub_1000E7A90()
{
  uint64_t v1 = v0[2];
  v0[16] = v1;
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[17] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000E7BC0;
    uint64_t v3 = v0[4];
    v2[8] = v3;
    return _swift_task_switch(sub_1000E9E14, v3, 0);
  }
  else
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1000E7BC0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 144) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000E7D18;
  uint64_t v4 = *(void *)(v1 + 32);
  v3[3] = v4;
  return _swift_task_switch(sub_1000EA3E8, v4, 0);
}

uint64_t sub_1000E7D18()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  *(void *)(v1 + 152) = v3;
  *uint64_t v3 = v4;
  v3[1] = sub_1000E7EB4;
  v3[3] = *(void *)(v1 + 32);
  uint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_101642070 + dword_101642070);
  uint64_t v6 = (void *)swift_task_alloc();
  v5[4] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_1000EAA1C;
  return v8();
}

uint64_t sub_1000E7EB4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 160) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000E7FF4;
  return sub_1000EAD54();
}

uint64_t sub_1000E7FF4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 168) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000E8134;
  return sub_1000EDB5C();
}

uint64_t sub_1000E8134()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 176) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000E828C;
  uint64_t v4 = *(void *)(v1 + 32);
  v3[4] = v4;
  return _swift_task_switch(sub_1000EF3A4, v4, 0);
}

uint64_t sub_1000E828C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E839C, v1, 0);
}

uint64_t sub_1000E839C()
{
  Transaction.capture()();
  return _swift_task_switch(sub_1000E8404, 0, 0);
}

uint64_t sub_1000E8404()
{
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000E7994;
  uint64_t v2 = *(void *)(v0 + 96);
  return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0, 0, v2);
}

uint64_t sub_1000E84B8(uint64_t a1)
{
  v2[46] = a1;
  v2[47] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[48] = v3;
  v2[49] = *(void *)(v3 - 8);
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MemberSharingCircle();
  v2[52] = v4;
  v2[53] = *(void *)(v4 - 8);
  v2[54] = swift_task_alloc();
  v2[55] = swift_task_alloc();
  v2[56] = swift_task_alloc();
  return _swift_task_switch(sub_1000E8600, v1, 0);
}

uint64_t sub_1000E8600()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 456) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000E869C;
  uint64_t v2 = *(void *)(v0 + 368);
  return sub_100E5B3AC(v2);
}

uint64_t sub_1000E869C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 376);
  *(void *)(*(void *)v1 + 464) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E87B4, v2, 0);
}

uint64_t sub_1000E87B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t (**)())(v3 + 464);
  uint64_t v5 = *((void *)v4 + 2);
  *(void *)(v3 + 472) = v5;
  if (v5)
  {
    uint64_t v6 = *(void *)(v3 + 424);
    uint64_t v7 = *(void *)(*(void *)(v3 + 376) + 200);
    *(void *)(v3 + 480) = v7;
    int v8 = *(_DWORD *)(v6 + 80);
    *(_DWORD *)(v3 + 560) = v8;
    *(unsigned char *)(v3 + 565) = 0;
    *(void *)(v3 + 488) = 0;
    if (*((void *)v4 + 2))
    {
      sub_100130CA8((uint64_t)v4 + ((v8 + 32) & ~(unint64_t)v8), *(void *)(v3 + 448), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v9 = type metadata accessor for MemberCircleRevokeManager();
      *(void *)(v3 + 496) = v9;
      *(void *)(v3 + 40) = v9;
      *(void *)(v3 + 48) = &off_101607480;
      *(void *)(v3 + 16) = v7;
      swift_retain();
      uint64_t v4 = sub_1000E8964;
      a2 = 0;
      a3 = 0;
    }
    else
    {
      __break(1u);
    }
    return _swift_task_switch(v4, a2, a3);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10012F634();
    swift_allocError();
    unsigned char *v10 = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v3 + 8);
    return v11();
  }
}

uint64_t sub_1000E8964()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 160))
  {
    sub_10001CEB0((long long *)(v0 + 136), v0 + 56);
    sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 504) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000E8AA0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E8AA0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 512) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000E8BA0, 0, 0);
}

uint64_t sub_1000E8BA0()
{
  uint64_t v1 = v0 + 56;
  uint64_t v2 = *(void *)(v0 + 512);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 496);
    uint64_t v30 = v3;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = type metadata accessor for SharingCircleKeyManager();
    uint64_t v5 = swift_allocObject();
    *(void *)(v0 + 520) = v5;
    swift_retain();
    swift_defaultActor_initialize();
    type metadata accessor for KeyDropInterface();
    uint64_t v6 = swift_allocObject();
    swift_defaultActor_initialize();
    *(void *)(v6 + 112) = 0;
    *(void *)(v6 + 120) = 0;
    *(void *)(v5 + 112) = v6;
    *(void *)(v5 + 120) = v2;
    sub_10001D010(v0 + 16, v0 + 256);
    uint64_t v7 = *(void *)(v0 + 280);
    sub_1000BD078(v0 + 256, v7);
    uint64_t v8 = *(void *)(v7 - 8);
    int64_t v31 = (uint64_t *)swift_task_alloc();
    (*(void (**)(void))(v8 + 16))();
    uint64_t v9 = *v31;
    *(void *)(v0 + 320) = v4;
    *(void *)(v0 + 328) = &off_1015EE080;
    *(void *)(v0 + 296) = v5;
    *(void *)(v0 + 200) = v3;
    *(void *)(v0 + 208) = &off_101607480;
    *(void *)(v0 + 176) = v9;
    type metadata accessor for ShareKeysDownloadUseCase();
    uint64_t v10 = swift_allocObject();
    *(void *)(v0 + 528) = v10;
    uint64_t v11 = sub_1000BD078(v0 + 296, v4);
    uint64_t v12 = *(void *)(v4 - 8);
    uint64_t v29 = (void *)swift_task_alloc();
    (*(void (**)(void *, uint64_t, uint64_t))(v12 + 16))(v29, v11, v4);
    uint64_t v13 = *(void *)(v0 + 200);
    uint64_t v14 = sub_1000BD078(v0 + 176, v13);
    uint64_t v15 = v2;
    uint64_t v16 = *(void *)(v13 - 8);
    uint64_t v17 = (uint64_t *)swift_task_alloc();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(v17, v14, v13);
    uint64_t v18 = *v17;
    *(void *)(v0 + 96) = *v29;
    *(void *)(v0 + 120) = v4;
    *(void *)(v0 + 128) = &off_1015EE080;
    *(void *)(v0 + 240) = v30;
    *(void *)(v0 + 248) = &off_101607480;
    *(void *)(v0 + 216) = v18;
    swift_retain();
    swift_retain();
    swift_defaultActor_initialize();
    sub_10001CEB0((long long *)(v0 + 96), v10 + 112);
    *(void *)(v10 + 152) = v15;
    sub_10001CEB0((long long *)(v0 + 216), v10 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 176);
    swift_task_dealloc();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 296);
    swift_task_dealloc();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 256);
    swift_task_dealloc();
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 536) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_1000E9094;
    uint64_t v20 = *(void *)(v0 + 448);
    return sub_1007CFA54(v20);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170D788);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "No BeaconStoreActor available!", v25, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    uint64_t v26 = swift_allocError();
    *uint64_t v27 = 0xD000000000000010;
    v27[1] = 0x80000001013F23D0;
    swift_willThrow();
    *(void *)(v0 + 552) = v26;
    uint64_t v28 = *(void *)(v0 + 376);
    return _swift_task_switch(sub_1000E94D4, v28, 0);
  }
}

uint64_t sub_1000E9094()
{
  *(void *)(*(void *)v1 + 544) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000E944C;
  }
  else {
    uint64_t v2 = sub_1000E91A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E91A8()
{
  uint64_t v1 = *(void *)(v0 + 376);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  return _swift_task_switch(sub_1000E9240, v1, 0);
}

uint64_t sub_1000E9240()
{
  uint64_t v1 = *(void *)(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 488) + 1;
  uint64_t v3 = (uint64_t (*)())sub_10012C39C(*(void *)(v0 + 448), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  else
  {
    unint64_t v8 = *(void *)(v0 + 488) + 1;
    *(unsigned char *)(v0 + 565) = 1;
    *(void *)(v0 + 488) = v8;
    uint64_t v9 = *(void *)(v0 + 464);
    if (v8 >= *(void *)(v9 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v10 = *(void *)(v0 + 480);
      sub_100130CA8(v9+ ((*(unsigned __int8 *)(v0 + 560) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 560))+ *(void *)(*(void *)(v0 + 424) + 72) * v8, *(void *)(v0 + 448), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v11 = type metadata accessor for MemberCircleRevokeManager();
      *(void *)(v0 + 496) = v11;
      *(void *)(v0 + 40) = v11;
      *(void *)(v0 + 48) = &off_101607480;
      *(void *)(v0 + 16) = v10;
      swift_retain();
      uint64_t v3 = sub_1000E8964;
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }
    return _swift_task_switch(v3, v4, v5);
  }
}

uint64_t sub_1000E944C()
{
  swift_release();
  swift_release();
  swift_release();
  v0[69] = v0[68];
  uint64_t v1 = v0[47];
  return _swift_task_switch(sub_1000E94D4, v1, 0);
}

uint64_t sub_1000E94D4()
{
  uint64_t v65 = v0;
  uint64_t v1 = (unsigned char *)(v0 + 564);
  uint64_t v2 = *(void *)(v0 + 552);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  *(void *)(v0 + 360) = v2;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if ((swift_dynamicCast() & 1) != 0 && (*v1 & 1) == 0)
  {
    if (qword_101636888 == -1) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(v0 + 448);
  uint64_t v4 = *(void *)(v0 + 432);
  uint64_t v6 = *(void *)(v0 + 392);
  uint64_t v5 = *(void *)(v0 + 400);
  uint64_t v7 = *(void *)(v0 + 384);
  uint64_t v8 = *(void *)(v0 + 368);
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  sub_100130CA8(v3, v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = *(void *)(v0 + 448);
  uint64_t v14 = *(void *)(v0 + 432);
  if (v12)
  {
    os_log_type_t type = v11;
    uint64_t v63 = *(void *)(v0 + 448);
    uint64_t v16 = *(void *)(v0 + 392);
    uint64_t v15 = *(void *)(v0 + 400);
    uint64_t v17 = *(void *)(v0 + 384);
    uint64_t v18 = swift_slowAlloc();
    uint64_t v60 = (void *)swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 141559043;
    *(void *)(v18 + 4) = 1752392040;
    *(_WORD *)(v18 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v18 + 14) = sub_1008FA0F0(v19, v20, &v64);
    uint64_t v1 = (unsigned char *)(v0 + 564);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    *(_WORD *)(v18 + 22) = 2160;
    *(void *)(v18 + 24) = 1752392040;
    *(_WORD *)(v18 + 32) = 2081;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v18 + 34) = sub_1008FA0F0(v21, v22, &v64);
    swift_bridgeObjectRelease();
    sub_10012C39C(v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v18 + 42) = 2112;
    swift_errorRetain();
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v18 + 44) = v23;
    *uint64_t v60 = v23;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, type, "Failed to download keys for beaconIdentifier %{private,mask.hash}s,\nshare-id: %{private,mask.hash}s, error: %@.", (uint8_t *)v18, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    uint64_t v24 = v63;
  }
  else
  {
    uint64_t v26 = *(void *)(v0 + 392);
    uint64_t v25 = *(void *)(v0 + 400);
    uint64_t v27 = *(void *)(v0 + 384);

    swift_errorRelease();
    swift_errorRelease();
    sub_10012C39C(v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    swift_errorRelease();
    uint64_t v24 = v13;
  }
  while (1)
  {
    sub_10012C39C(v24, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    unint64_t v52 = *(void *)(v0 + 488) + 1;
    if (v52 == *(void *)(v0 + 472))
    {
      int v53 = v1[1];
      swift_bridgeObjectRelease();
      if (v53 == 1)
      {
        type metadata accessor for Transaction();
        swift_allocObject();
        swift_weakInit();
        swift_retain();
        static Transaction.asyncTask(name:block:)();
        swift_release_n();
      }
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v54 = *(uint64_t (**)(void))(v0 + 8);
      return v54();
    }
    *(void *)(v0 + 488) = v52;
    uint64_t v56 = *(void *)(v0 + 464);
    if (v52 < *(void *)(v56 + 16)) {
      break;
    }
    __break(1u);
LABEL_24:
    swift_once();
LABEL_9:
    uint64_t v28 = *(void *)(v0 + 440);
    uint64_t v29 = *(void *)(v0 + 448);
    uint64_t v30 = *(void *)(v0 + 408);
    uint64_t v31 = *(void *)(v0 + 384);
    uint64_t v32 = *(void *)(v0 + 392);
    uint64_t v33 = *(void *)(v0 + 368);
    uint64_t v34 = type metadata accessor for Logger();
    sub_100010324(v34, (uint64_t)qword_10170D788);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v30, v33, v31);
    sub_100130CA8(v29, v28, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.info.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v38 = *(void *)(v0 + 440);
    uint64_t v39 = *(void *)(v0 + 448);
    uint64_t v40 = *(void *)(v0 + 408);
    if (v37)
    {
      uint64_t v62 = v1;
      uint64_t v41 = *(void *)(v0 + 384);
      uint64_t v42 = *(void *)(v0 + 392);
      uint64_t v43 = swift_slowAlloc();
      uint64_t v59 = (void *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 141559043;
      *(void *)(v43 + 4) = 1752392040;
      *(_WORD *)(v43 + 12) = 2081;
      sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v43 + 14) = sub_1008FA0F0(v44, v45, &v64);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
      uint64_t v1 = v62;
      *(_WORD *)(v43 + 22) = 2160;
      *(void *)(v43 + 24) = 1752392040;
      *(_WORD *)(v43 + 32) = 2081;
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v43 + 34) = sub_1008FA0F0(v46, v47, &v64);
      swift_bridgeObjectRelease();
      sub_10012C39C(v38, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v43 + 42) = 2112;
      sub_1001307C4();
      swift_allocError();
      *uint64_t v48 = 0;
      uint64_t v49 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v43 + 44) = v49;
      void *v59 = v49;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Throttled key download for beaconIdentifier %{private,mask.hash}s,\nshare-id: %{private,mask.hash}s, error: %@.", (uint8_t *)v43, 0x34u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v50 = *(void *)(v0 + 384);
      uint64_t v51 = *(void *)(v0 + 392);

      sub_10012C39C(v38, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v40, v50);
    }
    swift_errorRelease();
    uint64_t v24 = v39;
  }
  uint64_t v57 = *(void *)(v0 + 480);
  sub_100130CA8(v56+ ((*(unsigned __int8 *)(v0 + 560) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 560))+ *(void *)(*(void *)(v0 + 424) + 72) * v52, *(void *)(v0 + 448), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v58 = type metadata accessor for MemberCircleRevokeManager();
  *(void *)(v0 + 496) = v58;
  *(void *)(v0 + 40) = v58;
  *(void *)(v0 + 48) = &off_101607480;
  *(void *)(v0 + 16) = v57;
  swift_retain();
  return _swift_task_switch(sub_1000E8964, 0, 0);
}

uint64_t sub_1000E9DF4()
{
  *(void *)(v1 + 64) = v0;
  return _swift_task_switch(sub_1000E9E14, v0, 0);
}

uint64_t sub_1000E9E14()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[9] = sub_100010324(v1, (uint64_t)qword_10170D788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Looking for expired records...", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[8];

  uint64_t v6 = *(void *)(v5 + 200);
  v0[5] = type metadata accessor for MemberCircleRevokeManager();
  v0[6] = &off_101607480;
  v0[2] = v6;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[10] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000E9F94;
  return sub_1003457E4((uint64_t)(v0 + 2));
}

uint64_t sub_1000E9F94()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = sub_1000EA194;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 64);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_1000EA0BC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000EA0BC()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EA194()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 56) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Expired share cleanup failed due to error: %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1000EA3C8()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_1000EA3E8, v0, 0);
}

uint64_t sub_1000EA3E8()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 32) = sub_100010324(v1, (uint64_t)qword_10170D788);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Looking for tentatively revoked delegated records...", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v7 = (uint64_t (__cdecl *)())((char *)&dword_101642088 + dword_101642088);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000EA548;
  return v7();
}

uint64_t sub_1000EA548()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 48) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0) {
    uint64_t v4 = sub_1000EA74C;
  }
  else {
    uint64_t v4 = sub_1000EA674;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000EA674()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EA74C()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Tentatively revoked delegated share cleanup due to error: %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1000EA978()
{
  *(void *)(v1 + 24) = v0;
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101642070 + dword_101642070);
  os_log_type_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 32) = v2;
  *os_log_type_t v2 = v1;
  v2[1] = sub_1000EAA1C;
  return v4();
}

uint64_t sub_1000EAA1C()
{
  os_log_type_t v2 = (void *)*v1;
  v2[5] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[3];
    return _swift_task_switch(sub_1000EAB50, v3, 0);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_1000EAB50()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Orphaned sharing circles cleanup failed due to error: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1000EAD54()
{
  v1[90] = v0;
  uint64_t v2 = type metadata accessor for MemberSharingCircle();
  v1[91] = v2;
  v1[92] = *(void *)(v2 - 8);
  v1[93] = swift_task_alloc();
  v1[94] = swift_task_alloc();
  v1[95] = swift_task_alloc();
  v1[96] = swift_task_alloc();
  v1[97] = swift_task_alloc();
  return _swift_task_switch(sub_1000EAE48, v0, 0);
}

uint64_t sub_1000EAE48()
{
  id v1 = [self sharedInstance];
  unsigned int v2 = [v1 isInternalBuild];

  if (v2)
  {
    id v3 = [self standardUserDefaults];
    NSString v4 = String._bridgeToObjectiveC()();
    id v5 = [v3 integerForKey:v4];

    BOOL v6 = v5 != (id)2;
  }
  else
  {
    BOOL v6 = 0;
  }
  *(unsigned char *)(v0 + 973) = v6;
  uint64_t v7 = *(void *)(*(void *)(v0 + 720) + 136);
  *(void *)(v0 + 784) = v7;
  return _swift_task_switch(sub_1000EAF6C, v7, 0);
}

uint64_t sub_1000EAF6C()
{
  *(void *)(v0 + 792) = *(void *)(*(void *)(v0 + 784) + 136);
  swift_retain();
  return _swift_task_switch(sub_1000EAFE0, 0, 0);
}

uint64_t sub_1000EAFE0()
{
  uint64_t v1 = v0[99];
  uint64_t v2 = v0[98];
  id v3 = (void *)swift_task_alloc();
  v0[100] = v3;
  v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  NSString v4 = (void *)swift_task_alloc();
  v0[101] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  *NSString v4 = v0;
  v4[1] = sub_1000EB0FC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 89, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340B4, v3, v5);
}

uint64_t sub_1000EB0FC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 720);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 816) = *(void *)(v1 + 712);
  return _swift_task_switch(sub_1000EB26C, v2, 0);
}

uint64_t sub_1000EB26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (unsigned char *)(v3 + 973);
  uint64_t v5 = *(uint64_t (**)())(v3 + 816);
  uint64_t v6 = *((void *)v5 + 2);
  *(void *)(v3 + 824) = v6;
  if (v6)
  {
    int v7 = *v4;
    int v8 = *(_DWORD *)(*(void *)(v3 + 736) + 80);
    *(_DWORD *)(v3 + 968) = v8;
    *(unsigned char *)(v3 + 974) = 0;
    *(void *)(v3 + 832) = 0;
    if (*((void *)v5 + 2))
    {
      sub_100130CA8((uint64_t)v5 + ((v8 + 32) & ~(unint64_t)v8), *(void *)(v3 + 776), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v9 = *(void *)(v3 + 720);
      if (v7)
      {
        uint64_t v10 = *(void *)(v9 + 200);
        uint64_t v11 = type metadata accessor for MemberCircleRevokeManager();
        *(void *)(v3 + 840) = v11;
        *(void *)(v3 + 520) = v11;
        *(void *)(v3 + 528) = &off_101607480;
        *(void *)(v3 + 496) = v10;
        BOOL v12 = sub_1000EB47C;
      }
      else
      {
        uint64_t v17 = *(void *)(v9 + 200);
        uint64_t v18 = type metadata accessor for MemberCircleRevokeManager();
        *(void *)(v3 + 904) = v18;
        *(void *)(v3 + 80) = v18;
        *(void *)(v3 + 88) = &off_101607480;
        *(void *)(v3 + 56) = v17;
        BOOL v12 = sub_1000EC954;
      }
      uint64_t v19 = v12;
      swift_retain();
      uint64_t v5 = v19;
      a2 = 0;
      a3 = 0;
    }
    else
    {
      __break(1u);
    }
    return _swift_task_switch(v5, a2, a3);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (*v4)
    {
      id v13 = [self standardUserDefaults];
      NSString v14 = String._bridgeToObjectiveC()();
      [v13 setInteger:2 forKey:v14];
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v3 + 8);
    return v15();
  }
}

uint64_t sub_1000EB47C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 616, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 640))
  {
    sub_10001CEB0((long long *)(v0 + 616), v0 + 536);
    sub_10001CD44((void *)(v0 + 536), *(void *)(v0 + 560));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 848) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000EB5B8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000EB5B8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 856) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000EB6B8, 0, 0);
}

uint64_t sub_1000EB6B8()
{
  uint64_t v1 = v0 + 536;
  uint64_t v2 = *(void *)(v0 + 856);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 840);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = type metadata accessor for SharingCircleKeyManager();
    uint64_t v5 = swift_allocObject();
    *(void *)(v0 + 864) = v5;
    swift_retain();
    swift_defaultActor_initialize();
    type metadata accessor for KeyDropInterface();
    uint64_t v6 = swift_allocObject();
    swift_defaultActor_initialize();
    *(void *)(v6 + 112) = 0;
    *(void *)(v6 + 120) = 0;
    *(void *)(v5 + 112) = v6;
    *(void *)(v5 + 120) = v2;
    sub_10001D010(v0 + 496, v0 + 576);
    uint64_t v7 = *(void *)(v0 + 600);
    sub_1000BD078(v0 + 576, v7);
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v31 = (uint64_t *)swift_task_alloc();
    (*(void (**)(void))(v8 + 16))();
    uint64_t v9 = *v31;
    *(void *)(v0 + 280) = v4;
    *(void *)(v0 + 288) = &off_1015EE080;
    *(void *)(v0 + 248) = &off_101607480;
    *(void *)(v0 + 256) = v5;
    *(void *)(v0 + 240) = v3;
    *(void *)(v0 + 216) = v9;
    type metadata accessor for ShareKeysDownloadUseCase();
    uint64_t v10 = swift_allocObject();
    *(void *)(v0 + 872) = v10;
    uint64_t v11 = sub_1000BD078(v0 + 256, v4);
    uint64_t v12 = *(void *)(v4 - 8);
    uint64_t v30 = (uint64_t *)swift_task_alloc();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(v30, v11, v4);
    uint64_t v13 = *(void *)(v0 + 240);
    uint64_t v14 = sub_1000BD078(v0 + 216, v13);
    uint64_t v15 = v2;
    uint64_t v16 = *(void *)(v13 - 8);
    uint64_t v17 = (uint64_t *)swift_task_alloc();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(v17, v14, v13);
    uint64_t v18 = *v30;
    uint64_t v19 = *v17;
    *(void *)(v0 + 160) = v4;
    *(void *)(v0 + 168) = &off_1015EE080;
    *(void *)(v0 + 136) = v18;
    *(void *)(v0 + 440) = v3;
    *(void *)(v0 + 448) = &off_101607480;
    *(void *)(v0 + 416) = v19;
    swift_retain();
    swift_retain();
    swift_defaultActor_initialize();
    sub_10001CEB0((long long *)(v0 + 136), v10 + 112);
    *(void *)(v10 + 152) = v15;
    sub_10001CEB0((long long *)(v0 + 416), v10 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 216);
    swift_task_dealloc();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 256);
    swift_task_dealloc();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 576);
    swift_task_dealloc();
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 880) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_1000EBBB0;
    uint64_t v21 = *(void *)(v0 + 776);
    return sub_1007DB09C(v21);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10170D788);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "No BeaconStoreActor available!", v26, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    uint64_t v27 = swift_allocError();
    void *v28 = 0xD000000000000010;
    v28[1] = 0x80000001013F23D0;
    swift_willThrow();
    *(void *)(v0 + 896) = v27;
    uint64_t v29 = *(void *)(v0 + 720);
    return _swift_task_switch(sub_1000EC0AC, v29, 0);
  }
}

uint64_t sub_1000EBBB0()
{
  *(void *)(*(void *)v1 + 888) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000EC024;
  }
  else {
    uint64_t v2 = sub_1000EBCC4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000EBCC4()
{
  uint64_t v1 = *(void *)(v0 + 720);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 496);
  return _swift_task_switch(sub_1000EBD5C, v1, 0);
}

uint64_t sub_1000EBD5C()
{
  uint64_t v1 = (unsigned char *)(v0 + 973);
  uint64_t v2 = *(void *)(v0 + 824);
  uint64_t v3 = *(void *)(v0 + 832) + 1;
  uint64_t v4 = sub_10012C39C(*(void *)(v0 + 776), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  if (v3 == v2)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release_n();
    if (*v1 == 1)
    {
      id v7 = [self standardUserDefaults];
      NSString v8 = String._bridgeToObjectiveC()();
      [v7 setInteger:2 forKey:v8];
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  else
  {
    unint64_t v11 = *(void *)(v0 + 832) + 1;
    *(unsigned char *)(v0 + 974) = 1;
    *(void *)(v0 + 832) = v11;
    uint64_t v12 = *(void *)(v0 + 816);
    if (v11 >= *(void *)(v12 + 16))
    {
      __break(1u);
    }
    else
    {
      int v13 = *v1;
      sub_100130CA8(v12+ ((*(unsigned __int8 *)(v0 + 968) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 968))+ *(void *)(*(void *)(v0 + 736) + 72) * v11, *(void *)(v0 + 776), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v14 = *(void *)(v0 + 720);
      if (v13 == 1)
      {
        uint64_t v15 = *(void *)(v14 + 200);
        uint64_t v16 = type metadata accessor for MemberCircleRevokeManager();
        *(void *)(v0 + 840) = v16;
        *(void *)(v0 + 520) = v16;
        *(void *)(v0 + 528) = &off_101607480;
        *(void *)(v0 + 496) = v15;
        uint64_t v17 = sub_1000EB47C;
      }
      else
      {
        uint64_t v18 = *(void *)(v14 + 200);
        uint64_t v19 = type metadata accessor for MemberCircleRevokeManager();
        *(void *)(v0 + 904) = v19;
        *(void *)(v0 + 80) = v19;
        *(void *)(v0 + 88) = &off_101607480;
        *(void *)(v0 + 56) = v18;
        uint64_t v17 = sub_1000EC954;
      }
      uint64_t v20 = v17;
      swift_retain();
      uint64_t v4 = (uint64_t)v20;
      uint64_t v5 = 0;
      uint64_t v6 = 0;
    }
    return _swift_task_switch(v4, v5, v6);
  }
}

uint64_t sub_1000EC024()
{
  swift_release();
  swift_release();
  swift_release();
  v0[112] = v0[111];
  uint64_t v1 = v0[90];
  return _swift_task_switch(sub_1000EC0AC, v1, 0);
}

uint64_t sub_1000EC0AC()
{
  uint64_t v53 = v0;
  uint64_t v1 = (unsigned char *)(v0 + 972);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 496);
  *(void *)(v0 + 704) = *(void *)(v0 + 896);
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if ((swift_dynamicCast() & 1) != 0 && (*v1 & 1) == 0)
  {
    if (qword_101636888 != -1) {
      goto LABEL_29;
    }
    goto LABEL_9;
  }
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 776);
  uint64_t v3 = *(void *)(v0 + 752);
  uint64_t v4 = *(void *)(v0 + 744);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  sub_100130CA8(v2, v3, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_100130CA8(v2, v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v6, v7))
  {
    uint64_t v15 = *(void *)(v0 + 776);
    uint64_t v16 = *(void *)(v0 + 752);
    uint64_t v17 = *(void *)(v0 + 744);

    uint64_t v18 = v17;
    goto LABEL_12;
  }
  int v48 = *(unsigned __int8 *)(v0 + 973);
  uint64_t v49 = *(void *)(v0 + 776);
  uint64_t v8 = *(void *)(v0 + 752);
  uint64_t v46 = *(void *)(v0 + 744);
  uint64_t v9 = swift_slowAlloc();
  uint64_t v52 = swift_slowAlloc();
  *(_DWORD *)uint64_t v9 = 141559043;
  *(void *)(v9 + 4) = 1752392040;
  *(_WORD *)(v9 + 12) = 2081;
  type metadata accessor for UUID();
  sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v9 + 14) = sub_1008FA0F0(v10, v11, &v52);
  swift_bridgeObjectRelease();
  sub_10012C39C(v8, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  *(_WORD *)(v9 + 22) = 2160;
  *(void *)(v9 + 24) = 1752392040;
  *(_WORD *)(v9 + 32) = 2081;
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v9 + 34) = sub_1008FA0F0(v12, v13, &v52);
  swift_bridgeObjectRelease();
  sub_10012C39C(v46, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  *(_WORD *)(v9 + 42) = 1024;
  *(_DWORD *)(v9 + 44) = v48;
  _os_log_impl((void *)&_mh_execute_header, v6, v7, "\"Failed to download keys on schedule for\nmemberCircle: %{private,mask.hash}s,\nbeacon: %{private,mask.hash}s,\nrestoreAllKeys: %{BOOL}d.", (uint8_t *)v9, 0x30u);
  swift_arrayDestroy();
  uint64_t v1 = (unsigned char *)(v0 + 972);
  swift_slowDealloc();
  swift_slowDealloc();

  swift_errorRelease();
  uint64_t v14 = v49;
  while (1)
  {
    sub_10012C39C(v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    unint64_t v32 = *(void *)(v0 + 832) + 1;
    if (v32 == *(void *)(v0 + 824))
    {
      int v33 = v1[2];
      swift_bridgeObjectRelease();
      if (v33 == 1)
      {
        type metadata accessor for Transaction();
        swift_allocObject();
        swift_weakInit();
        swift_retain();
        static Transaction.asyncTask(name:block:)();
        swift_release_n();
      }
      if (v1[1] == 1)
      {
        id v34 = [self standardUserDefaults];
        NSString v35 = String._bridgeToObjectiveC()();
        [v34 setInteger:2 forKey:v35];
      }
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      os_log_type_t v36 = *(uint64_t (**)(void))(v0 + 8);
      return v36();
    }
    *(void *)(v0 + 832) = v32;
    uint64_t v38 = *(void *)(v0 + 816);
    if (v32 < *(void *)(v38 + 16)) {
      break;
    }
    __break(1u);
LABEL_29:
    swift_once();
LABEL_9:
    uint64_t v19 = *(void *)(v0 + 776);
    uint64_t v20 = *(void *)(v0 + 768);
    uint64_t v21 = *(void *)(v0 + 760);
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170D788);
    sub_100130CA8(v19, v20, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_100130CA8(v19, v21, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      int v50 = v1[1];
      uint64_t v51 = *(void *)(v0 + 776);
      uint64_t v25 = *(void *)(v0 + 768);
      uint64_t v47 = *(void *)(v0 + 760);
      uint64_t v26 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 141559043;
      *(void *)(v26 + 4) = 1752392040;
      *(_WORD *)(v26 + 12) = 2081;
      type metadata accessor for UUID();
      sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v26 + 14) = sub_1008FA0F0(v27, v28, &v52);
      swift_bridgeObjectRelease();
      sub_10012C39C(v25, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v26 + 22) = 2160;
      *(void *)(v26 + 24) = 1752392040;
      *(_WORD *)(v26 + 32) = 2081;
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v26 + 34) = sub_1008FA0F0(v29, v30, &v52);
      swift_bridgeObjectRelease();
      sub_10012C39C(v47, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v26 + 42) = 1024;
      *(_DWORD *)(v26 + 44) = v50;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "\"Throttled key download on schedule for\nmemberCircle: %{private,mask.hash}s,\nbeacon: %{private,mask.hash}s,\nrestoreAllKeys: %{BOOL}d.", (uint8_t *)v26, 0x30u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      uint64_t v14 = v51;
    }
    else
    {
      uint64_t v15 = *(void *)(v0 + 776);
      uint64_t v16 = *(void *)(v0 + 768);
      uint64_t v31 = *(void *)(v0 + 760);

      uint64_t v18 = v31;
LABEL_12:
      sub_10012C39C(v18, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      sub_10012C39C(v16, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      swift_errorRelease();
      uint64_t v14 = v15;
    }
  }
  int v39 = v1[1];
  sub_100130CA8(v38+ ((*(unsigned __int8 *)(v0 + 968) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 968))+ *(void *)(*(void *)(v0 + 736) + 72) * v32, *(void *)(v0 + 776), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  if (v39 == 1)
  {
    uint64_t v40 = *(void *)(*(void *)(v0 + 720) + 200);
    uint64_t v41 = type metadata accessor for MemberCircleRevokeManager();
    *(void *)(v0 + 840) = v41;
    *(void *)(v0 + 520) = v41;
    *(void *)(v0 + 528) = &off_101607480;
    *(void *)(v0 + 496) = v40;
    uint64_t v42 = sub_1000EB47C;
  }
  else
  {
    uint64_t v43 = *(void *)(*(void *)(v0 + 720) + 200);
    uint64_t v44 = type metadata accessor for MemberCircleRevokeManager();
    *(void *)(v0 + 904) = v44;
    *(void *)(v0 + 80) = v44;
    *(void *)(v0 + 88) = &off_101607480;
    *(void *)(v0 + 56) = v43;
    uint64_t v42 = sub_1000EC954;
  }
  unint64_t v45 = v42;
  swift_retain();
  return _swift_task_switch(v45, 0, 0);
}

uint64_t sub_1000EC954()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 176, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 200))
  {
    sub_10001CEB0((long long *)(v0 + 176), v0 + 96);
    sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 912) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000ECA90;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000ECA90(uint64_t a1)
{
  *(void *)(*(void *)v1 + 920) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000ECB90, 0, 0);
}

uint64_t sub_1000ECB90()
{
  uint64_t v1 = v0 + 96;
  uint64_t v2 = *(void *)(v0 + 920);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 904);
    uint64_t v30 = v3;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = type metadata accessor for SharingCircleKeyManager();
    uint64_t v5 = swift_allocObject();
    *(void *)(v0 + 928) = v5;
    swift_retain();
    swift_defaultActor_initialize();
    type metadata accessor for KeyDropInterface();
    uint64_t v6 = swift_allocObject();
    swift_defaultActor_initialize();
    *(void *)(v6 + 112) = 0;
    *(void *)(v6 + 120) = 0;
    *(void *)(v5 + 112) = v6;
    *(void *)(v5 + 120) = v2;
    sub_10001D010(v0 + 56, v0 + 296);
    uint64_t v7 = *(void *)(v0 + 320);
    sub_1000BD078(v0 + 296, v7);
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v31 = (uint64_t *)swift_task_alloc();
    (*(void (**)(void))(v8 + 16))();
    uint64_t v9 = *v31;
    *(void *)(v0 + 360) = v4;
    *(void *)(v0 + 368) = &off_1015EE080;
    *(void *)(v0 + 336) = v5;
    *(void *)(v0 + 400) = v3;
    *(void *)(v0 + 408) = &off_101607480;
    *(void *)(v0 + 376) = v9;
    type metadata accessor for ShareKeysDownloadUseCase();
    uint64_t v10 = swift_allocObject();
    *(void *)(v0 + 936) = v10;
    uint64_t v11 = sub_1000BD078(v0 + 336, v4);
    uint64_t v12 = *(void *)(v4 - 8);
    unint64_t v13 = (uint64_t *)swift_task_alloc();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(v13, v11, v4);
    uint64_t v14 = *(void *)(v0 + 400);
    uint64_t v15 = sub_1000BD078(v0 + 376, v14);
    uint64_t v16 = *(void *)(v14 - 8);
    uint64_t v17 = (uint64_t *)swift_task_alloc();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(v17, v15, v14);
    uint64_t v18 = *v13;
    uint64_t v19 = *v17;
    *(void *)(v0 + 40) = v4;
    *(void *)(v0 + 48) = &off_1015EE080;
    *(void *)(v0 + 16) = v18;
    *(void *)(v0 + 480) = v30;
    *(void *)(v0 + 488) = &off_101607480;
    *(void *)(v0 + 456) = v19;
    swift_retain();
    swift_retain();
    swift_defaultActor_initialize();
    sub_10001CEB0((long long *)(v0 + 16), v10 + 112);
    *(void *)(v10 + 152) = v2;
    sub_10001CEB0((long long *)(v0 + 456), v10 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 376);
    swift_task_dealloc();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 336);
    swift_task_dealloc();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 296);
    swift_task_dealloc();
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 944) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_1000ED080;
    uint64_t v21 = *(void *)(v0 + 776);
    return sub_1007CFA54(v21);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10170D788);
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "No BeaconStoreActor available!", v26, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    uint64_t v27 = swift_allocError();
    void *v28 = 0xD000000000000010;
    v28[1] = 0x80000001013F23D0;
    swift_willThrow();
    *(void *)(v0 + 960) = v27;
    uint64_t v29 = *(void *)(v0 + 720);
    return _swift_task_switch(sub_1000ED2B4, v29, 0);
  }
}

uint64_t sub_1000ED080()
{
  *(void *)(*(void *)v1 + 952) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000ED22C;
  }
  else {
    uint64_t v2 = sub_1000ED194;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000ED194()
{
  uint64_t v1 = *(void *)(v0 + 720);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
  return _swift_task_switch(sub_10013408C, v1, 0);
}

uint64_t sub_1000ED22C()
{
  swift_release();
  swift_release();
  swift_release();
  v0[120] = v0[119];
  uint64_t v1 = v0[90];
  return _swift_task_switch(sub_1000ED2B4, v1, 0);
}

uint64_t sub_1000ED2B4()
{
  uint64_t v53 = v0;
  uint64_t v1 = (unsigned char *)(v0 + 972);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
  *(void *)(v0 + 704) = *(void *)(v0 + 960);
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if ((swift_dynamicCast() & 1) != 0 && (*v1 & 1) == 0)
  {
    if (qword_101636888 != -1) {
      goto LABEL_29;
    }
    goto LABEL_9;
  }
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 776);
  uint64_t v3 = *(void *)(v0 + 752);
  uint64_t v4 = *(void *)(v0 + 744);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  sub_100130CA8(v2, v3, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_100130CA8(v2, v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v6, v7))
  {
    uint64_t v15 = *(void *)(v0 + 776);
    uint64_t v16 = *(void *)(v0 + 752);
    uint64_t v17 = *(void *)(v0 + 744);

    uint64_t v18 = v17;
    goto LABEL_12;
  }
  int v48 = *(unsigned __int8 *)(v0 + 973);
  uint64_t v49 = *(void *)(v0 + 776);
  uint64_t v8 = *(void *)(v0 + 752);
  uint64_t v46 = *(void *)(v0 + 744);
  uint64_t v9 = swift_slowAlloc();
  uint64_t v52 = swift_slowAlloc();
  *(_DWORD *)uint64_t v9 = 141559043;
  *(void *)(v9 + 4) = 1752392040;
  *(_WORD *)(v9 + 12) = 2081;
  type metadata accessor for UUID();
  sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v9 + 14) = sub_1008FA0F0(v10, v11, &v52);
  swift_bridgeObjectRelease();
  sub_10012C39C(v8, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  *(_WORD *)(v9 + 22) = 2160;
  *(void *)(v9 + 24) = 1752392040;
  *(_WORD *)(v9 + 32) = 2081;
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v9 + 34) = sub_1008FA0F0(v12, v13, &v52);
  swift_bridgeObjectRelease();
  sub_10012C39C(v46, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  *(_WORD *)(v9 + 42) = 1024;
  *(_DWORD *)(v9 + 44) = v48;
  _os_log_impl((void *)&_mh_execute_header, v6, v7, "\"Failed to download keys on schedule for\nmemberCircle: %{private,mask.hash}s,\nbeacon: %{private,mask.hash}s,\nrestoreAllKeys: %{BOOL}d.", (uint8_t *)v9, 0x30u);
  swift_arrayDestroy();
  uint64_t v1 = (unsigned char *)(v0 + 972);
  swift_slowDealloc();
  swift_slowDealloc();

  swift_errorRelease();
  uint64_t v14 = v49;
  while (1)
  {
    sub_10012C39C(v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    unint64_t v32 = *(void *)(v0 + 832) + 1;
    if (v32 == *(void *)(v0 + 824))
    {
      int v33 = v1[2];
      swift_bridgeObjectRelease();
      if (v33 == 1)
      {
        type metadata accessor for Transaction();
        swift_allocObject();
        swift_weakInit();
        swift_retain();
        static Transaction.asyncTask(name:block:)();
        swift_release_n();
      }
      if (v1[1] == 1)
      {
        id v34 = [self standardUserDefaults];
        NSString v35 = String._bridgeToObjectiveC()();
        [v34 setInteger:2 forKey:v35];
      }
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      os_log_type_t v36 = *(uint64_t (**)(void))(v0 + 8);
      return v36();
    }
    *(void *)(v0 + 832) = v32;
    uint64_t v38 = *(void *)(v0 + 816);
    if (v32 < *(void *)(v38 + 16)) {
      break;
    }
    __break(1u);
LABEL_29:
    swift_once();
LABEL_9:
    uint64_t v19 = *(void *)(v0 + 776);
    uint64_t v20 = *(void *)(v0 + 768);
    uint64_t v21 = *(void *)(v0 + 760);
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170D788);
    sub_100130CA8(v19, v20, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_100130CA8(v19, v21, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      int v50 = v1[1];
      uint64_t v51 = *(void *)(v0 + 776);
      uint64_t v25 = *(void *)(v0 + 768);
      uint64_t v47 = *(void *)(v0 + 760);
      uint64_t v26 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 141559043;
      *(void *)(v26 + 4) = 1752392040;
      *(_WORD *)(v26 + 12) = 2081;
      type metadata accessor for UUID();
      sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v26 + 14) = sub_1008FA0F0(v27, v28, &v52);
      swift_bridgeObjectRelease();
      sub_10012C39C(v25, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v26 + 22) = 2160;
      *(void *)(v26 + 24) = 1752392040;
      *(_WORD *)(v26 + 32) = 2081;
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v26 + 34) = sub_1008FA0F0(v29, v30, &v52);
      swift_bridgeObjectRelease();
      sub_10012C39C(v47, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v26 + 42) = 1024;
      *(_DWORD *)(v26 + 44) = v50;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "\"Throttled key download on schedule for\nmemberCircle: %{private,mask.hash}s,\nbeacon: %{private,mask.hash}s,\nrestoreAllKeys: %{BOOL}d.", (uint8_t *)v26, 0x30u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      uint64_t v14 = v51;
    }
    else
    {
      uint64_t v15 = *(void *)(v0 + 776);
      uint64_t v16 = *(void *)(v0 + 768);
      uint64_t v31 = *(void *)(v0 + 760);

      uint64_t v18 = v31;
LABEL_12:
      sub_10012C39C(v18, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      sub_10012C39C(v16, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      swift_errorRelease();
      uint64_t v14 = v15;
    }
  }
  int v39 = v1[1];
  sub_100130CA8(v38+ ((*(unsigned __int8 *)(v0 + 968) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 968))+ *(void *)(*(void *)(v0 + 736) + 72) * v32, *(void *)(v0 + 776), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  if (v39 == 1)
  {
    uint64_t v40 = *(void *)(*(void *)(v0 + 720) + 200);
    uint64_t v41 = type metadata accessor for MemberCircleRevokeManager();
    *(void *)(v0 + 840) = v41;
    *(void *)(v0 + 520) = v41;
    *(void *)(v0 + 528) = &off_101607480;
    *(void *)(v0 + 496) = v40;
    uint64_t v42 = sub_1000EB47C;
  }
  else
  {
    uint64_t v43 = *(void *)(*(void *)(v0 + 720) + 200);
    uint64_t v44 = type metadata accessor for MemberCircleRevokeManager();
    *(void *)(v0 + 904) = v44;
    *(void *)(v0 + 80) = v44;
    *(void *)(v0 + 88) = &off_101607480;
    *(void *)(v0 + 56) = v43;
    uint64_t v42 = sub_1000EC954;
  }
  unint64_t v45 = v42;
  swift_retain();
  return _swift_task_switch(v45, 0, 0);
}

uint64_t sub_1000EDB5C()
{
  v1[13] = v0;
  uint64_t v2 = type metadata accessor for OwnerSharingCircle();
  v1[14] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[15] = v3;
  v1[16] = *(void *)(v3 + 64);
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  return _swift_task_switch(sub_1000EDC64, v0, 0);
}

uint64_t sub_1000EDC64()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 104) + 136);
  *(void *)(v0 + 184) = v1;
  return _swift_task_switch(sub_1000EDC88, v1, 0);
}

uint64_t sub_1000EDC88()
{
  *(void *)(v0 + 192) = *(void *)(*(void *)(v0 + 184) + 136);
  swift_retain();
  return _swift_task_switch(sub_1000EDCFC, 0, 0);
}

uint64_t sub_1000EDCFC()
{
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[25] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[26] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_1000EDE14;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 9, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340B0, v3, v5);
}

uint64_t sub_1000EDE14()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 104);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 216) = *(void *)(v1 + 72);
  return _swift_task_switch(sub_1000EDF84, v2, 0);
}

uint64_t sub_1000EDF84()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 216) + 16);
  *(void *)(v0 + 224) = v1;
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(v0 + 120);
    *(_DWORD *)(v0 + 288) = *(_DWORD *)(v3 + 80);
    *(void *)(v0 + 232) = *(void *)(v3 + 72);
    while (1)
    {
      *(void *)(v0 + 240) = v2;
      uint64_t v4 = *(void *)(v0 + 176);
      uint64_t v5 = *(void *)(v0 + 112);
      sub_100130CA8(*(void *)(v0 + 216)+ ((*(unsigned __int8 *)(v0 + 288) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 288))+ *(void *)(v0 + 232) * v2, v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v6 = *(void *)(v0 + 176);
      if (*(unsigned char *)(v4 + *(int *)(v5 + 36)) == 1) {
        break;
      }
      sub_10012C39C(v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v2 = *(void *)(v0 + 240) + 1;
      if (v2 == *(void *)(v0 + 224)) {
        goto LABEL_5;
      }
    }
    if (*(unsigned char *)(v6 + *(int *)(*(void *)(v0 + 112) + 28)) == 3)
    {
      return _swift_task_switch(sub_1000EE2D4, 0, 0);
    }
    else
    {
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 248) = v9;
      *uint64_t v9 = v0;
      v9[1] = sub_1000EE1A8;
      uint64_t v10 = *(void *)(v0 + 176);
      return sub_1000FC070(v10, 0);
    }
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_1000EE1A8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 256) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v4 = sub_1000EED80;
  }
  else {
    uint64_t v4 = sub_1001343A8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000EE2D4()
{
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000EE378;
  return sub_1003508DC(v0 + 16);
}

uint64_t sub_1000EE378(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2 + 16;
  *(void *)(v3 + 272) = a1;
  *(void *)(v3 + 280) = v1;
  swift_task_dealloc();
  sub_10001DAB4(v4, &qword_10163BDE0);
  if (v1) {
    uint64_t v5 = sub_1000EE80C;
  }
  else {
    uint64_t v5 = sub_1000EE4A0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000EE4A0()
{
  if (qword_101636A80 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 104);
  unint64_t v4 = (*(unsigned __int8 *)(v0 + 288) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 288);
  sub_100130CA8(*(void *)(v0 + 176), v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v1;
  sub_10012EC2C(v2, v5 + v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_retain();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_1000EE60C, v3, 0);
}

uint64_t sub_1000EE60C()
{
  uint64_t v1 = *(void *)(v0 + 176);
  while (1)
  {
    sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v2 = *(void *)(v0 + 240) + 1;
    if (v2 == *(void *)(v0 + 224)) {
      break;
    }
    *(void *)(v0 + 240) = v2;
    uint64_t v3 = *(void *)(v0 + 176);
    uint64_t v4 = *(void *)(v0 + 112);
    sub_100130CA8(*(void *)(v0 + 216)+ ((*(unsigned __int8 *)(v0 + 288) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 288))+ *(void *)(v0 + 232) * v2, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v1 = *(void *)(v0 + 176);
    if (*(unsigned char *)(v3 + *(int *)(v4 + 36)) == 1)
    {
      if (*(unsigned char *)(v1 + *(int *)(*(void *)(v0 + 112) + 28)) == 3)
      {
        return _swift_task_switch(sub_1000EE2D4, 0, 0);
      }
      else
      {
        uint64_t v6 = (void *)swift_task_alloc();
        *(void *)(v0 + 248) = v6;
        *uint64_t v6 = v0;
        v6[1] = sub_1000EE1A8;
        uint64_t v7 = *(void *)(v0 + 176);
        return sub_1000FC070(v7, 0);
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000EE80C()
{
  return _swift_task_switch(sub_1000EE828, *(void *)(v0 + 104), 0);
}

uint64_t sub_1000EE828()
{
  uint64_t v27 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_100130CA8(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100130CA8(v1, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 176);
  uint64_t v10 = *(void *)(v0 + 152);
  uint64_t v9 = *(void *)(v0 + 160);
  if (v7)
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141559043;
    *(void *)(v11 + 4) = 1752392040;
    *(_WORD *)(v11 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v11 + 14) = sub_1008FA0F0(v12, v13, &v26);
    swift_bridgeObjectRelease();
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 22) = 2160;
    *(void *)(v11 + 24) = 1752392040;
    *(_WORD *)(v11 + 32) = 2081;
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v11 + 34) = sub_1008FA0F0(v14, v15, &v26);
    swift_bridgeObjectRelease();
    sub_10012C39C(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 42) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v11 + 44) = v16;
    *uint64_t v25 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to retry apns registration for: %{private,mask.hash}s, beacon: %{private,mask.hash}s error: %{public}@.", (uint8_t *)v11, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    sub_10012C39C(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
  }
  uint64_t v17 = v8;
  do
  {
    sub_10012C39C(v17, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v20 = *(void *)(v0 + 240) + 1;
    if (v20 == *(void *)(v0 + 224))
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
      return v21();
    }
    *(void *)(v0 + 240) = v20;
    uint64_t v18 = *(void *)(v0 + 176);
    uint64_t v19 = *(void *)(v0 + 112);
    sub_100130CA8(*(void *)(v0 + 216)+ ((*(unsigned __int8 *)(v0 + 288) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 288))+ *(void *)(v0 + 232) * v20, v18, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v17 = *(void *)(v0 + 176);
  }
  while (*(unsigned char *)(v18 + *(int *)(v19 + 36)) != 1);
  if (*(unsigned char *)(v17 + *(int *)(*(void *)(v0 + 112) + 28)) == 3)
  {
    return _swift_task_switch(sub_1000EE2D4, 0, 0);
  }
  else
  {
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_1000EE1A8;
    uint64_t v24 = *(void *)(v0 + 176);
    return sub_1000FC070(v24, 0);
  }
}

uint64_t sub_1000EED80()
{
  uint64_t v29 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_100130CA8(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100130CA8(v1, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 176);
  uint64_t v9 = *(void *)(v0 + 136);
  uint64_t v10 = *(void *)(v0 + 144);
  if (v7)
  {
    uint64_t v25 = *(void *)(v0 + 136);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v27 = (void *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141559043;
    *(void *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    os_log_type_t type = v6;
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = sub_1008FA0F0(v12, v13, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 22) = 2160;
    *(void *)(v0 + 96) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 32) = 2081;
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 80) = sub_1008FA0F0(v14, v15, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v25, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 42) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 88) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v27 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Failed to upload keys for circle: %{private,mask.hash}s, beacon: %{private,mask.hash}s error: %{public}@.", (uint8_t *)v11, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10012C39C(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
  }
  uint64_t v17 = v8;
  do
  {
    sub_10012C39C(v17, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v20 = *(void *)(v0 + 240) + 1;
    if (v20 == *(void *)(v0 + 224))
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
      return v21();
    }
    *(void *)(v0 + 240) = v20;
    uint64_t v18 = *(void *)(v0 + 176);
    uint64_t v19 = *(void *)(v0 + 112);
    sub_100130CA8(*(void *)(v0 + 216)+ ((*(unsigned __int8 *)(v0 + 288) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 288))+ *(void *)(v0 + 232) * v20, v18, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v17 = *(void *)(v0 + 176);
  }
  while (*(unsigned char *)(v18 + *(int *)(v19 + 36)) != 1);
  if (*(unsigned char *)(v17 + *(int *)(*(void *)(v0 + 112) + 28)) == 3)
  {
    return _swift_task_switch(sub_1000EE2D4, 0, 0);
  }
  else
  {
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_1000EE1A8;
    uint64_t v24 = *(void *)(v0 + 176);
    return sub_1000FC070(v24, 0);
  }
}

uint64_t sub_1000EF384()
{
  *(void *)(v1 + 32) = v0;
  return _swift_task_switch(sub_1000EF3A4, v0, 0);
}

uint64_t sub_1000EF3A4()
{
  uint64_t v1 = v0[4];
  v0[5] = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconSharingService_dailySharesCountAnalyticsThrottle);
  uint64_t v2 = *(void *)(v1 + 120);
  v0[2] = *(void *)(v1 + 112);
  v0[3] = v2;
  v0[6] = swift_allocObject();
  swift_weakInit();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000588C(&qword_101654000);
  sub_100062734((unint64_t *)&unk_10163BCA0, &qword_101654000);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000EF4AC, v4, v3);
}

uint64_t sub_1000EF4AC()
{
  dispatch thunk of AsyncKeyedThrottle.throttle(key:block:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EF540(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  return _swift_task_switch(sub_1000EF560, 0, 0);
}

uint64_t sub_1000EF560()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[8] = Strong;
  if (Strong)
  {
    uint64_t v2 = *(void *)(Strong + 136);
    v0[9] = v2;
    return _swift_task_switch(sub_1000EF620, v2, 0);
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
}

uint64_t sub_1000EF620()
{
  *(void *)(v0 + 80) = *(void *)(*(void *)(v0 + 72) + 136);
  swift_retain();
  return _swift_task_switch(sub_1000EF694, 0, 0);
}

uint64_t sub_1000EF694()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_1000EF7AC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340B0, v3, v5);
}

uint64_t sub_1000EF7AC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 104) = *(void *)(v1 + 40);
  return _swift_task_switch(sub_1000EF908, 0, 0);
}

uint64_t sub_1000EF908()
{
  uint64_t v1 = v0[8];
  v0[14] = *(void *)(v0[13] + 16);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 136);
  v0[15] = v2;
  return _swift_task_switch(sub_1000EF980, v2, 0);
}

uint64_t sub_1000EF980()
{
  *(void *)(v0 + 128) = *(void *)(*(void *)(v0 + 120) + 136);
  swift_retain();
  return _swift_task_switch(sub_1000EF9F4, 0, 0);
}

uint64_t sub_1000EF9F4()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[17] = v3;
  v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[18] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  *uint64_t v4 = v0;
  v4[1] = sub_1000EFB0C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100130778, v3, v5);
}

uint64_t sub_1000EFB0C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 152) = *(void *)(v1 + 48);
  return _swift_task_switch(sub_1000EFC68, 0, 0);
}

uint64_t sub_1000EFC68()
{
  uint64_t v1 = *(void *)(v0[19] + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101662AA8 + dword_101662AA8);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[20] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000EFD20;
  uint64_t v3 = v0[14];
  return v5(v3, v1);
}

uint64_t sub_1000EFD20()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000EFE1C, 0, 0);
}

uint64_t sub_1000EFE1C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(BOOL))(v0 + 8);
  BOOL v2 = *(void *)(v0 + 64) != 0;
  return v1(v2);
}

uint64_t sub_1000EFE88(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  sub_10000588C(&qword_1016556D0);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000EFF1C, v1, 0);
}

uint64_t sub_1000EFF1C()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[9];
  swift_beginAccess();
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v1, v2, v3);
  sub_100A25964(0, 0, v1);
  swift_endAccess();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  v0[12] = qword_10170E390;
  return _swift_task_switch(sub_1000F003C, 0, 0);
}

uint64_t sub_1000F003C()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000F0104;
  uint64_t v2 = *(void *)(v0 + 96);
  return unsafeBlocking<A>(_:)(v0 + 64, sub_10001D704, v2, &type metadata for Configuration);
}

uint64_t sub_1000F0104()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1000F021C, 0, 0);
}

uint64_t sub_1000F021C()
{
  uint64_t v1 = v0[10];
  v0[14] = v0[8];
  return _swift_task_switch(sub_1000F0240, v1, 0);
}

uint64_t sub_1000F0240()
{
  uint64_t v1 = v0[10];
  unint64_t v2 = sub_1010AC210(v0[14]);
  swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(*(void *)(v1 + 240) + 16);
  if (v3) {
    BOOL v4 = v3 > v2;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    unint64_t v5 = v3 - v2;
    swift_beginAccess();
    sub_1000F0310(v5);
    swift_endAccess();
  }
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

unint64_t sub_1000F0310(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v2 = *(void *)(*(void *)v1 + 16);
      BOOL v3 = v2 >= result;
      uint64_t result = v2 - result;
      if (v3) {
        return sub_100A29BAC(result, v2);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F0338()
{
  uint64_t v1 = type metadata accessor for XPCServiceDescription();
  uint64_t v36 = *(void *)(v1 - 8);
  uint64_t v37 = v1;
  __chkstk_darwin(v1);
  int v33 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for MachServiceName();
  uint64_t v38 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v33 - v7;
  MachServiceName.init(_:)();
  uint64_t v9 = type metadata accessor for BeaconSharingService(0);
  uint64_t v42 = v9;
  uint64_t v43 = &off_1015AC390;
  v41[0] = v0;
  uint64_t v10 = (objc_class *)type metadata accessor for BeaconSharingTrampoline();
  id v11 = objc_allocWithZone(v10);
  uint64_t v12 = sub_1000BD078((uint64_t)v41, v42);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  uint64_t v16 = *v14;
  v40[3] = v9;
  v40[4] = &off_1015AC390;
  v40[0] = v16;
  sub_10001D010((uint64_t)v40, (uint64_t)v11 + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation);
  v39.receiver = v11;
  v39.super_class = v10;
  swift_retain();
  id v17 = [super init];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v40);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v41);
  uint64_t v18 = *(void **)(v0 + 176);
  *(void *)(v0 + 176) = v17;
  id v19 = v17;

  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  uint64_t v34 = v3;
  NSString v35 = v8;
  v20(v6, v8, v3);
  uint64_t v21 = qword_101636898;
  id v22 = v19;
  if (v21 != -1) {
    swift_once();
  }
  uint64_t v23 = (void *)qword_10163B260;
  uint64_t v24 = self;
  id v25 = v23;
  id v26 = [v24 interfaceWithProtocol:&OBJC_PROTOCOL___SPBeaconSharingClientXPCProtocol];
  swift_retain();
  uint64_t v27 = v33;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  XPCSessionManager.register(service:)();
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_100010324(v28, (uint64_t)qword_10170D788);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "BeaconSharingService: Successfully registered XPC services.", v31, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v35, v34);
}

id sub_1000F07C4()
{
  id result = sub_1000F07E4();
  qword_10163B260 = (uint64_t)result;
  return result;
}

id sub_1000F07E4()
{
  id v0 = [self interfaceWithProtocol:&OBJC_PROTOCOL___SPBeaconSharingXPCProtocol];
  sub_100A59298();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101347BA0;
  *(void *)(v1 + 32) = sub_10001D4B0(0, (unint64_t *)&unk_10163BC70);
  *(void *)(v1 + 40) = sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  sub_100A59298();
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101347BA0;
  *(void *)(v2 + 32) = sub_10001D4B0(0, &qword_10163EAD0);
  *(void *)(v2 + 40) = sub_10001D4B0(0, (unint64_t *)&qword_10163BC80);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000F094C(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  return _swift_task_switch(sub_1000F096C, 0, 0);
}

uint64_t sub_1000F096C()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[8] = Strong;
  if (Strong)
  {
    uint64_t v2 = Strong;
    v0[5] = 0x6470556572616853;
    v0[6] = 0xEB00000000657461;
    uint64_t v6 = (char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
       + async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[9] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000F0AEC;
    return ((uint64_t (*)(void *, void *, uint64_t, uint64_t (*)(void), void))v6)(v0 + 5, &unk_10163B848, v2, SharingCircleWildAdvertisementKey.init(key:), 0);
  }
  else
  {
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_1000F0AEC()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    swift_errorRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return _swift_task_switch(sub_1000F0C28, 0, 0);
}

uint64_t sub_1000F0C28()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F0C88(uint64_t a1)
{
  *(void *)(v1 + 104) = a1;
  return _swift_task_switch(sub_1000F0CA8, 0, 0);
}

uint64_t sub_1000F0CA8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 104) + 192);
  *(void *)(v0 + 112) = v1;
  return _swift_task_switch(sub_1000F0CCC, v1, 0);
}

uint64_t sub_1000F0CCC()
{
  swift_retain();
  swift_retain();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_1000F0D74, 0, 0);
}

uint64_t sub_1000F0D74()
{
  uint64_t v1 = *(void *)(v0[13] + 184);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 32);
  v0[15] = v2;
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    if (__CocoaSet.count.getter())
    {
LABEL_3:
      uint64_t v3 = (void *)swift_task_alloc();
      v0[16] = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_1000F0F68;
      return sub_100111D9C(0);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 16);
    swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170D788);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "BeaconSharingService: no sessions to notify for share updates.", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
  return v10(1);
}

uint64_t sub_1000F0F68(uint64_t a1)
{
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000F1068, 0, 0);
}

uint64_t sub_1000F1068()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "BeaconSharingService: Forwarding share updates to listeners.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 104);

  uint64_t v6 = *(void *)(v5 + 136);
  *(void *)(v0 + 144) = v6;
  return _swift_task_switch(sub_1000F118C, v6, 0);
}

uint64_t sub_1000F118C()
{
  uint64_t v1 = v0[18];
  v0[19] = *(void *)(v1 + 136);
  uint64_t v2 = swift_allocObject();
  v0[20] = v2;
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 24) = 7;
  swift_retain();
  return _swift_task_switch(sub_1000F1228, 0, 0);
}

uint64_t sub_1000F1228()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  os_log_type_t v3 = (void *)swift_task_alloc();
  v0[21] = v3;
  v3[2] = v2;
  v3[3] = sub_10012E28C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[22] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000F1330;
  return withCheckedContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10012E298, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1000F1330()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000F1480, v1, 0);
}

uint64_t sub_1000F1480()
{
  return _swift_task_switch(sub_1000F149C, 0, 0);
}

uint64_t sub_1000F149C(uint64_t a1, void (*a2)(), uint64_t a3)
{
  uint64_t v4 = v3[15];
  if ((v4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10000588C((uint64_t *)&unk_10163B860);
    sub_100062734(&qword_10165F6F0, (uint64_t *)&unk_10163B860);
    a1 = Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v3[2];
    uint64_t v5 = v3[3];
    uint64_t v6 = v3[4];
    uint64_t v7 = v3[5];
    unint64_t v8 = v3[6];
    v3[24] = v5;
    v3[25] = v6;
    v3[23] = v4;
    if (v4 < 0)
    {
      uint64_t v23 = __CocoaSet.Iterator.next()();
      if (!v23) {
        goto LABEL_30;
      }
      v3[12] = v23;
      swift_unknownObjectRetain();
      sub_10000588C((uint64_t *)&unk_10163B860);
      swift_dynamicCast();
      uint64_t v12 = v3[11];
      swift_unknownObjectRelease();
      uint64_t v11 = v7;
      uint64_t v9 = v8;
      goto LABEL_6;
    }
    if (v8) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v14 = -1;
    uint64_t v15 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v6 = ~v15;
    uint64_t v5 = v4 + 56;
    uint64_t v16 = *(void *)(v4 + 56);
    uint64_t v17 = -v15;
    BOOL v18 = v17 < 64;
    uint64_t v19 = -1 << v17;
    v3[24] = v4 + 56;
    v3[25] = v6;
    if (v18) {
      uint64_t v14 = ~v19;
    }
    unint64_t v8 = v14 & v16;
    v3[23] = v4;
    if ((v14 & v16) != 0)
    {
LABEL_4:
      uint64_t v9 = (v8 - 1) & v8;
      unint64_t v10 = __clz(__rbit64(v8)) | (v7 << 6);
      uint64_t v11 = v7;
LABEL_5:
      uint64_t v12 = *(void *)(*(void *)(v4 + 48) + 8 * v10);
      swift_retain();
LABEL_6:
      v3[27] = v11;
      v3[28] = v9;
      v3[26] = v12;
      if (v12)
      {
        uint64_t v13 = (void *)swift_task_alloc();
        v3[29] = v13;
        void *v13 = v3;
        v13[1] = sub_1000F17C0;
        a2 = sub_1000F1BE8;
        a1 = (uint64_t)(v3 + 10);
        a3 = 0;
        return XPCSession.proxy(errorHandler:)(a1, a2, a3);
      }
      goto LABEL_30;
    }
  }
  int64_t v20 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    return XPCSession.proxy(errorHandler:)(a1, a2, a3);
  }
  int64_t v21 = (unint64_t)(v6 + 64) >> 6;
  if (v20 < v21)
  {
    unint64_t v22 = *(void *)(v5 + 8 * v20);
    uint64_t v11 = v7 + 1;
    if (!v22)
    {
      uint64_t v11 = v7 + 2;
      if (v7 + 2 >= v21) {
        goto LABEL_30;
      }
      unint64_t v22 = *(void *)(v5 + 8 * v11);
      if (!v22)
      {
        uint64_t v11 = v7 + 3;
        if (v7 + 3 >= v21) {
          goto LABEL_30;
        }
        unint64_t v22 = *(void *)(v5 + 8 * v11);
        if (!v22)
        {
          uint64_t v11 = v7 + 4;
          if (v7 + 4 >= v21) {
            goto LABEL_30;
          }
          unint64_t v22 = *(void *)(v5 + 8 * v11);
          if (!v22)
          {
            uint64_t v24 = v7 + 5;
            while (v21 != v24)
            {
              unint64_t v22 = *(void *)(v5 + 8 * v24++);
              if (v22)
              {
                uint64_t v11 = v24 - 1;
                goto LABEL_17;
              }
            }
            goto LABEL_30;
          }
        }
      }
    }
LABEL_17:
    uint64_t v9 = (v22 - 1) & v22;
    unint64_t v10 = __clz(__rbit64(v22)) + (v11 << 6);
    goto LABEL_5;
  }
LABEL_30:
  sub_100132C20();
  swift_bridgeObjectRelease();
  id v25 = (uint64_t (*)(uint64_t))v3[1];
  return v25(1);
}

uint64_t sub_1000F17C0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1000F18BC, 0, 0);
}

uint64_t sub_1000F18BC()
{
  uint64_t v1 = (void *)v0[10];
  if (v1)
  {
    sub_10001D4B0(0, &qword_10163B870);
    sub_10012E2E4(&qword_10163B878, &qword_10163B870);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v1 receivedUpdatedShares:isa];
    swift_unknownObjectRelease_n();
    swift_release();
  }
  else
  {
    uint64_t v3 = swift_release();
  }
  uint64_t v6 = v0[27];
  unint64_t v7 = v0[28];
  uint64_t v8 = v0[23];
  if (v8 < 0)
  {
    uint64_t v13 = __CocoaSet.Iterator.next()();
    if (!v13) {
      goto LABEL_28;
    }
    v0[12] = v13;
    swift_unknownObjectRetain();
    sub_10000588C((uint64_t *)&unk_10163B860);
    swift_dynamicCast();
    uint64_t v12 = v0[11];
    swift_unknownObjectRelease();
    uint64_t v11 = v6;
    uint64_t v9 = v7;
    goto LABEL_10;
  }
  if (v7)
  {
    uint64_t v9 = (v7 - 1) & v7;
    unint64_t v10 = __clz(__rbit64(v7)) | (v6 << 6);
    uint64_t v11 = v0[27];
LABEL_7:
    uint64_t v12 = *(void *)(*(void *)(v8 + 48) + 8 * v10);
    swift_retain();
LABEL_10:
    v0[27] = v11;
    v0[28] = v9;
    v0[26] = v12;
    if (v12)
    {
      uint64_t v14 = (void *)swift_task_alloc();
      v0[29] = v14;
      *uint64_t v14 = v0;
      v14[1] = sub_1000F17C0;
      uint64_t v4 = sub_1000F1BE8;
      uint64_t v3 = (uint64_t)(v0 + 10);
      uint64_t v5 = 0;
      return XPCSession.proxy(errorHandler:)(v3, v4, v5);
    }
    goto LABEL_28;
  }
  int64_t v15 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    return XPCSession.proxy(errorHandler:)(v3, v4, v5);
  }
  int64_t v16 = (unint64_t)(v0[25] + 64) >> 6;
  if (v15 < v16)
  {
    uint64_t v17 = v0[24];
    unint64_t v18 = *(void *)(v17 + 8 * v15);
    uint64_t v11 = v6 + 1;
    if (!v18)
    {
      uint64_t v11 = v6 + 2;
      if (v6 + 2 >= v16) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v17 + 8 * v11);
      if (!v18)
      {
        uint64_t v11 = v6 + 3;
        if (v6 + 3 >= v16) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v17 + 8 * v11);
        if (!v18)
        {
          uint64_t v11 = v6 + 4;
          if (v6 + 4 >= v16) {
            goto LABEL_28;
          }
          unint64_t v18 = *(void *)(v17 + 8 * v11);
          if (!v18)
          {
            uint64_t v19 = v6 + 5;
            while (v16 != v19)
            {
              unint64_t v18 = *(void *)(v17 + 8 * v19++);
              if (v18)
              {
                uint64_t v11 = v19 - 1;
                goto LABEL_17;
              }
            }
            goto LABEL_28;
          }
        }
      }
    }
LABEL_17:
    uint64_t v9 = (v18 - 1) & v18;
    unint64_t v10 = __clz(__rbit64(v18)) + (v11 << 6);
    goto LABEL_7;
  }
LABEL_28:
  sub_100132C20();
  swift_bridgeObjectRelease();
  int64_t v20 = (uint64_t (*)(uint64_t))v0[1];
  return v20(1);
}

void sub_1000F1BE8()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v3 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v3 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "BeaconSharingService: failed to create reverse-proxy to forward shares %@.", v2, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_1000F1DC4(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  sub_10000588C((uint64_t *)&unk_101638D10);
  v2[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OwnerSharingCircle();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000F1ED0, v1, 0);
}

uint64_t sub_1000F1ED0()
{
  Swift::Int v1 = sub_100DF2D10((uint64_t)&off_1015A0438);
  v0[15] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[16] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000F1F84;
  uint64_t v3 = v0[7];
  return sub_100E59F38(v3, v1);
}

uint64_t sub_1000F1F84(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000F20B8, v2, 0);
}

uint64_t sub_1000F20B8()
{
  uint64_t v1 = v0[17];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(v0[11] + 80);
    sub_100130CA8(v1 + ((v2 + 32) & ~v2), v0[9], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[9];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
  {
    sub_10001DAB4(v0[9], (uint64_t *)&unk_101638D10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v0[8];
    sub_10012EC2C(v0[9], v0[14], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v10 = *(void *)(v9 + 200);
    uint64_t v13 = (char *)&dword_101641FA0 + dword_101641FA0;
    uint64_t v11 = (void *)swift_task_alloc();
    v0[18] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1000F22A8;
    uint64_t v12 = v0[14];
    return ((uint64_t (*)(uint64_t, void, uint64_t))v13)(v12, 0, v10);
  }
}

uint64_t sub_1000F22A8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = sub_1000F26B8;
  }
  else {
    uint64_t v4 = sub_1000F23D4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000F23D4()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 80);
  sub_10000588C(&qword_10163BC50);
  uint64_t v3 = type metadata accessor for UUID();
  *(void *)(v0 + 160) = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 192) = v5;
  unint64_t v6 = (v5 + 32) & ~(unint64_t)v5;
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 168) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_101342130;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 16))(v7 + v6, v1 + *(int *)(v2 + 20), v3);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000F2554;
  uint64_t v9 = *(void *)(v0 + 64);
  v8[16] = v7;
  v8[17] = v9;
  return _swift_task_switch(sub_1000F30C0, 0, 0);
}

uint64_t sub_1000F2554()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = sub_1000F2BE0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 64);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v4 = sub_1000F2B3C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000F26B8()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_100130CA8(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100130CA8(v1, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v9 = v0[13];
  uint64_t v8 = v0[14];
  uint64_t v10 = v0[12];
  if (v7)
  {
    uint64_t v19 = v0[12];
    uint64_t v11 = swift_slowAlloc();
    int64_t v21 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141559043;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    os_log_type_t type = v6;
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 22) = 2160;
    v0[4] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 32) = 2081;
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_1008FA0F0(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v19, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 42) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v21 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Failed to enable lost mode on key drop for circle: %{private,mask.hash}s, beacon: %{private,mask.hash}s error: %{public}@.", (uint8_t *)v11, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    sub_10012C39C(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
  }
  sub_10012C39C(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_1000F2B3C()
{
  sub_10012C39C(*(void *)(v0 + 112), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F2BE0()
{
  uint64_t v23 = v0;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_100130CA8(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100130CA8(v1, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v9 = v0[13];
  uint64_t v8 = v0[14];
  uint64_t v10 = v0[12];
  if (v7)
  {
    uint64_t v19 = v0[12];
    uint64_t v11 = swift_slowAlloc();
    int64_t v21 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141559043;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    os_log_type_t type = v6;
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 22) = 2160;
    v0[4] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 32) = 2081;
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_1008FA0F0(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v19, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 42) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v21 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Failed to enable lost mode on key drop for circle: %{private,mask.hash}s, beacon: %{private,mask.hash}s error: %{public}@.", (uint8_t *)v11, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    sub_10012C39C(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
  }
  sub_10012C39C(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_1000F30A0(uint64_t a1)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = v1;
  return _swift_task_switch(sub_1000F30C0, 0, 0);
}

uint64_t sub_1000F30C0()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016392D0 + dword_1016392D0);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000F3210;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F3210(uint64_t a1)
{
  *(void *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000F3310, 0, 0);
}

uint64_t sub_1000F3310()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[19])
  {
    uint64_t v2 = v0[17];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = swift_bridgeObjectRetain();
    v0[20] = sub_101158244(v3);
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v2 + 136);
    v0[21] = v4;
    return _swift_task_switch(sub_1000F3424, v4, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v5 = 0xD000000000000012;
    v5[1] = 0x80000001013F3C60;
    swift_willThrow();
    os_log_type_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_1000F3424()
{
  *(void *)(v0 + 176) = *(void *)(*(void *)(v0 + 168) + 136);
  swift_retain();
  return _swift_task_switch(sub_1000F3498, 0, 0);
}

uint64_t sub_1000F3498()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[23] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[24] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_1000F35B0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 15, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100130530, v3, v5);
}

uint64_t sub_1000F35B0()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 200) = *(void *)(v1 + 120);
  return _swift_task_switch(sub_1000F370C, 0, 0);
}

uint64_t sub_1000F370C()
{
  uint64_t v1 = sub_10012BAAC(v0[25], v0[20]);
  v0[26] = (uint64_t)v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[27] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000F37DC;
  return sub_100CD8354((uint64_t)v1);
}

uint64_t sub_1000F37DC()
{
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1000F3974;
  }
  else {
    uint64_t v2 = sub_1000F3910;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F3910()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F3974()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F39D8(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  sub_10000588C((uint64_t *)&unk_101638D10);
  v2[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OwnerSharingCircle();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000F3AE4, v1, 0);
}

uint64_t sub_1000F3AE4()
{
  Swift::Int v1 = sub_100DF2D10((uint64_t)&off_1015A0460);
  v0[15] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[16] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000F3B98;
  uint64_t v3 = v0[7];
  return sub_100E59F38(v3, v1);
}

uint64_t sub_1000F3B98(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000F3CCC, v2, 0);
}

uint64_t sub_1000F3CCC()
{
  uint64_t v1 = v0[17];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(v0[11] + 80);
    sub_100130CA8(v1 + ((v2 + 32) & ~v2), v0[9], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[9];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
  {
    sub_10001DAB4(v0[9], (uint64_t *)&unk_101638D10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v0[8];
    sub_10012EC2C(v0[9], v0[14], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v10 = *(void *)(v9 + 200);
    unint64_t v13 = (char *)&dword_101642000 + dword_101642000;
    uint64_t v11 = (void *)swift_task_alloc();
    v0[18] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1000F3EBC;
    uint64_t v12 = v0[14];
    return ((uint64_t (*)(uint64_t, void, uint64_t))v13)(v12, 0, v10);
  }
}

uint64_t sub_1000F3EBC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = sub_1000F42CC;
  }
  else {
    uint64_t v4 = sub_1000F3FE8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000F3FE8()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 80);
  sub_10000588C(&qword_10163BC50);
  uint64_t v3 = type metadata accessor for UUID();
  *(void *)(v0 + 160) = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 192) = v5;
  unint64_t v6 = (v5 + 32) & ~(unint64_t)v5;
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 168) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_101342130;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 16))(v7 + v6, v1 + *(int *)(v2 + 20), v3);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000F4168;
  uint64_t v9 = *(void *)(v0 + 64);
  v8[16] = v7;
  v8[17] = v9;
  return _swift_task_switch(sub_1000F30C0, 0, 0);
}

uint64_t sub_1000F4168()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = sub_1000F4750;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 64);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v4 = sub_100134098;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000F42CC()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_100130CA8(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100130CA8(v1, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v9 = v0[13];
  uint64_t v8 = v0[14];
  uint64_t v10 = v0[12];
  if (v7)
  {
    uint64_t v19 = v0[12];
    uint64_t v11 = swift_slowAlloc();
    int64_t v21 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141559043;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    os_log_type_t type = v6;
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 22) = 2160;
    v0[4] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 32) = 2081;
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_1008FA0F0(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v19, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 42) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v21 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Failed to disable lost mode on key drop for circle: %{private,mask.hash}s, beacon: %{private,mask.hash}s error: %{public}@.", (uint8_t *)v11, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    sub_10012C39C(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
  }
  sub_10012C39C(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_1000F4750()
{
  uint64_t v23 = v0;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_100130CA8(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100130CA8(v1, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v9 = v0[13];
  uint64_t v8 = v0[14];
  uint64_t v10 = v0[12];
  if (v7)
  {
    uint64_t v19 = v0[12];
    uint64_t v11 = swift_slowAlloc();
    int64_t v21 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141559043;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    os_log_type_t type = v6;
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 22) = 2160;
    v0[4] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 32) = 2081;
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_1008FA0F0(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v19, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 42) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v21 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Failed to disable lost mode on key drop for circle: %{private,mask.hash}s, beacon: %{private,mask.hash}s error: %{public}@.", (uint8_t *)v11, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    sub_10012C39C(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
  }
  sub_10012C39C(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_1000F4C10()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconSharingService_pendingExpirationTask, (uint64_t *)&unk_10163B880);
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000F4CE8()
{
  sub_1000F4C10();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000F4D14()
{
  return type metadata accessor for BeaconSharingService(0);
}

uint64_t type metadata accessor for BeaconSharingService(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_10163B458);
}

void sub_1000F4D3C()
{
  sub_1000F4E2C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000F4E2C()
{
  if (!qword_10163B4A8)
  {
    type metadata accessor for BeaconSharingService.PendingExpirationTask(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10163B4A8);
    }
  }
}

uint64_t type metadata accessor for BeaconSharingService.PendingExpirationTask(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10163B760);
}

uint64_t sub_1000F4EA4(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_1000F4EDC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000F4FA8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t sub_1000F501C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t sub_1000F509C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000F5128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000F51A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_1000F5228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F523C);
}

uint64_t sub_1000F523C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000F52FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F5310);
}

uint64_t sub_1000F5310(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000F53CC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000F5464()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_1000DF714();
}

uint64_t sub_1000F54F0()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_1000F5580();
}

uint64_t sub_1000F5580()
{
  v1[15] = v0;
  uint64_t v2 = type metadata accessor for OwnerSharingCircle();
  v1[16] = v2;
  v1[17] = *(void *)(v2 - 8);
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v1[20] = swift_task_alloc();
  return _swift_task_switch(sub_1000F5680, v0, 0);
}

uint64_t sub_1000F5680()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639210 + dword_101639210);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000F57D0;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F57D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000F58E8, v2, 0);
}

uint64_t sub_1000F58E8()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[22])
  {
    uint64_t v2 = v0[20];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = type metadata accessor for UUID();
    v0[23] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[24] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1000F5AF0;
    uint64_t v5 = v0[20];
    return sub_100E5C1B8(v5, 1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170DED0);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing service: DelegatedShareMetadataService", v10, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_1000F5AF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160);
  uint64_t v3 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 200) = a1;
  swift_task_dealloc();
  sub_10001DAB4(v2, &qword_101638CF0);
  return _swift_task_switch(sub_1000F5C2C, v3, 0);
}

uint64_t sub_1000F5C2C()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 208) = v2;
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 128);
    uint64_t v3 = *(void *)(v0 + 136);
    int v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 248) = v5;
    *(void *)(v0 + 216) = *(void *)(v3 + 72);
    *(void *)(v0 + 224) = 0;
    uint64_t v6 = *(void *)(v0 + 152);
    sub_100130CA8(v1 + ((v5 + 32) & ~(unint64_t)v5), v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v7 = v6 + *(int *)(v4 + 20);
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1000F5DFC;
    return sub_1007B9098(v7);
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_release_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

uint64_t sub_1000F5DFC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 120);
  if (v0) {
    uint64_t v4 = sub_1000F611C;
  }
  else {
    uint64_t v4 = sub_1000F5F28;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000F5F28()
{
  sub_10012C39C(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v1 = *(void *)(v0 + 224) + 1;
  if (v1 == *(void *)(v0 + 208))
  {
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_release_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    *(void *)(v0 + 224) = v1;
    uint64_t v4 = *(void *)(v0 + 152);
    uint64_t v5 = *(void *)(v0 + 128);
    sub_100130CA8(*(void *)(v0 + 200)+ ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))+ *(void *)(v0 + 216) * v1, v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v6 = v4 + *(int *)(v5 + 20);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1000F5DFC;
    return sub_1007B9098(v6);
  }
}

uint64_t sub_1000F611C()
{
  uint64_t v22 = v0;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170DED0);
  sub_100130CA8(v2, v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v6 = *(void *)(v0 + 152);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558275;
    *(void *)(v8 + 4) = 1752392040;
    *(_WORD *)(v8 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v8 + 14) = sub_1008FA0F0(v9, v10, &v21);
    swift_bridgeObjectRelease();
    sub_10012C39C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error fetching delegated share metadata for %{private,mask.hash}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();

    uint64_t v11 = v6;
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 144);
    uint64_t v12 = *(void *)(v0 + 152);
    swift_errorRelease();

    sub_10012C39C(v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v11 = v12;
  }
  sub_10012C39C(v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v14 = *(void *)(v0 + 224) + 1;
  if (v14 == *(void *)(v0 + 208))
  {
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_release_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  else
  {
    *(void *)(v0 + 224) = v14;
    uint64_t v17 = *(void *)(v0 + 152);
    uint64_t v18 = *(void *)(v0 + 128);
    sub_100130CA8(*(void *)(v0 + 200)+ ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))+ *(void *)(v0 + 216) * v14, v17, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v19 = v17 + *(int *)(v18 + 20);
    int64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v20;
    *int64_t v20 = v0;
    v20[1] = sub_1000F5DFC;
    return sub_1007B9098(v19);
  }
}

uint64_t sub_1000F652C(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 176) = a3;
  *(void *)(v4 + 184) = v3;
  *(void *)(v4 + 168) = a2;
  *(unsigned char *)(v4 + 256) = a1;
  return _swift_task_switch(sub_1000F6554, v3, 0);
}

uint64_t sub_1000F6554()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 168);
  char v3 = *(unsigned char *)(v0 + 256);
  *(void *)(v0 + 192) = sub_10000588C(&qword_10163BAB0);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 200) = inited;
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(unsigned char *)(inited + 32) = v3;
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = v1;
  swift_bridgeObjectRetain();
  os_log_type_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v5;
  *os_log_type_t v5 = v0;
  v5[1] = sub_1000F6648;
  return sub_10127A7C8(inited);
}

uint64_t sub_1000F6648(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(*v2 + 216) = a1;
  swift_task_dealloc();
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v4 = *(void *)(v3 + 184);
  if (v1)
  {
    swift_errorRelease();
    os_log_type_t v5 = sub_1000F7138;
  }
  else
  {
    os_log_type_t v5 = sub_1000F67C4;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000F67C4()
{
  if (*(void *)(*(void *)(v0 + 216) + 16))
  {
    uint64_t v2 = *(void *)(v0 + 168);
    uint64_t v1 = *(void *)(v0 + 176);
    unsigned __int8 v3 = *(unsigned char *)(v0 + 256);
    swift_bridgeObjectRetain();
    unint64_t v4 = sub_100724500(v3, v2, v1);
    if (v5)
    {
      unint64_t v6 = *(void *)(*(void *)(*(void *)(v0 + 216) + 56) + 8 * v4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v7) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v7)
        {
LABEL_5:
          uint64_t result = sub_1000B765C(0, v7 & ~(v7 >> 63), 0);
          if (v7 < 0)
          {
            __break(1u);
            return result;
          }
          uint64_t v9 = 0;
          do
          {
            if ((v6 & 0xC000000000000001) != 0) {
              id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v10 = *(id *)(v6 + 8 * v9 + 32);
            }
            uint64_t v11 = v10;
            id v12 = [v10 pushToken:_swiftEmptyArrayStorage];
            uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v15 = v14;

            unint64_t v17 = _swiftEmptyArrayStorage[2];
            unint64_t v16 = _swiftEmptyArrayStorage[3];
            if (v17 >= v16 >> 1) {
              sub_1000B765C(v16 > 1, v17 + 1, 1);
            }
            ++v9;
            _swiftEmptyArrayStorage[2] = v17 + 1;
            uint64_t v18 = &_swiftEmptyArrayStorage[2 * v17];
            unsigned char v18[4] = v13;
            v18[5] = v15;
          }
          while (v7 != v9);
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v19 = (void *)sub_101158BCC((uint64_t)_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = &_swiftEmptySetSingleton;
LABEL_18:
  *(void *)(v0 + 224) = v19;
  uint64_t v21 = *(void *)(v0 + 168);
  uint64_t v20 = *(void *)(v0 + 176);
  char v22 = *(unsigned char *)(v0 + 256);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 232) = inited;
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(unsigned char *)(inited + 32) = v22;
  *(void *)(inited + 40) = v21;
  *(void *)(inited + 48) = v20;
  swift_bridgeObjectRetain();
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v24;
  void *v24 = v0;
  v24[1] = sub_1000F6A70;
  return sub_10127A7C8(inited);
}

uint64_t sub_1000F6A70(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(*v2 + 248) = a1;
  swift_task_dealloc();
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v4 = *(void *)(v3 + 184);
  if (v1)
  {
    swift_errorRelease();
    char v5 = sub_1000F7224;
  }
  else
  {
    char v5 = sub_1000F6BEC;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000F6BEC()
{
  uint64_t v39 = v0;
  if (*(void *)(*(void *)(v0 + 248) + 16))
  {
    uint64_t v2 = *(void *)(v0 + 168);
    uint64_t v1 = *(void *)(v0 + 176);
    unsigned __int8 v3 = *(unsigned char *)(v0 + 256);
    swift_bridgeObjectRetain();
    unint64_t v4 = sub_100724500(v3, v2, v1);
    if (v5)
    {
      unint64_t v6 = *(void *)(*(void *)(*(void *)(v0 + 248) + 56) + 8 * v4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v7) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v7)
        {
LABEL_5:
          uint64_t v38 = _swiftEmptyArrayStorage;
          uint64_t result = sub_1000B765C(0, v7 & ~(v7 >> 63), 0);
          if (v7 < 0)
          {
            __break(1u);
            return result;
          }
          uint64_t v9 = 0;
          id v10 = v38;
          do
          {
            if ((v6 & 0xC000000000000001) != 0) {
              id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v11 = *(id *)(v6 + 8 * v9 + 32);
            }
            id v12 = v11;
            id v13 = [v11 pushToken];
            uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v16 = v15;

            uint64_t v38 = v10;
            unint64_t v18 = v10[2];
            unint64_t v17 = v10[3];
            if (v18 >= v17 >> 1)
            {
              sub_1000B765C(v17 > 1, v18 + 1, 1);
              id v10 = v38;
            }
            ++v9;
            v10[2] = v18 + 1;
            uint64_t v19 = &v10[2 * v18];
            v19[4] = v14;
            v19[5] = v16;
          }
          while (v7 != v9);
          swift_bridgeObjectRelease();
          goto LABEL_18;
        }
      }
      swift_bridgeObjectRelease();
      id v10 = _swiftEmptyArrayStorage;
LABEL_18:
      uint64_t v20 = (void *)sub_101158BCC((uint64_t)v10);
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v20 = &_swiftEmptySetSingleton;
LABEL_19:
  uint64_t v21 = *(void *)(v0 + 224);
  if (v20[2] <= *(void *)(v21 + 16) >> 3)
  {
    uint64_t v38 = *(void **)(v0 + 224);
    swift_bridgeObjectRetain();
    sub_10089E84C((uint64_t)v20);
    char v22 = v38;
  }
  else
  {
    swift_bridgeObjectRetain();
    char v22 = sub_1008A0844((uint64_t)v20, v21);
  }
  uint64_t v23 = v22[2];
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100010324(v24, (uint64_t)qword_10170D788);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  unint64_t v28 = *(void *)(v0 + 176);
  if (v27)
  {
    uint64_t v35 = v23;
    uint64_t v29 = v0 + 168;
    uint64_t v36 = *(void *)(v0 + 168);
    uint64_t v30 = swift_slowAlloc();
    uint64_t v38 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 141559043;
    *(void *)(v0 + 128) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 12) = 2081;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 136) = sub_1008FA0F0(v36, v28, (uint64_t *)&v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v37 = v0;
    *(_WORD *)(v30 + 22) = 2048;
    uint64_t v31 = *(void *)(v21 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 144) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 32) = 2048;
    uint64_t v32 = v20[2];
    swift_bridgeObjectRelease();
    *(void *)(v0 + 152) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 42) = 2048;
    uint64_t v33 = v22[2];
    swift_bridgeObjectRelease();
    *(void *)(v29 - 8) = v33;
    uint64_t v23 = v35;
    uint64_t v0 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "                Destination: %{private,mask.hash}s reported legacy endpoints: %ld, endpoints: %ld, remaining Legacy Endpoints: %ld.", (uint8_t *)v30, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v34 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v34(v23 != 0);
}

uint64_t sub_1000F7138()
{
  *(void *)(v0 + 224) = &_swiftEmptySetSingleton;
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  char v3 = *(unsigned char *)(v0 + 256);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 232) = inited;
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(unsigned char *)(inited + 32) = v3;
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = v1;
  swift_bridgeObjectRetain();
  char v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v5;
  *char v5 = v0;
  v5[1] = sub_1000F6A70;
  return sub_10127A7C8(inited);
}

uint64_t sub_1000F7224()
{
  uint64_t v19 = v0;
  uint64_t v1 = v0[28];
  if (*((void *)&_swiftEmptySetSingleton + 2) <= *(void *)(v1 + 16) >> 3)
  {
    unint64_t v18 = (void *)v0[28];
    swift_bridgeObjectRetain();
    sub_10089E84C((uint64_t)&_swiftEmptySetSingleton);
    uint64_t v2 = v18;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1008A0844((uint64_t)&_swiftEmptySetSingleton, v1);
  }
  uint64_t v3 = v2[2];
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  unint64_t v8 = v0[22];
  if (v7)
  {
    os_log_type_t type = v6;
    uint64_t v15 = v0[21];
    uint64_t v17 = v3;
    uint64_t v9 = swift_slowAlloc();
    unint64_t v18 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141559043;
    v0[16] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    swift_bridgeObjectRetain();
    v0[17] = sub_1008FA0F0(v15, v8, (uint64_t *)&v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 22) = 2048;
    uint64_t v10 = *(void *)(v1 + 16);
    swift_bridgeObjectRelease();
    v0[18] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 32) = 2048;
    uint64_t v11 = *((void *)&_swiftEmptySetSingleton + 2);
    swift_bridgeObjectRelease();
    v0[19] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 42) = 2048;
    uint64_t v12 = v2[2];
    swift_bridgeObjectRelease();
    v0[20] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "                Destination: %{private,mask.hash}s reported legacy endpoints: %ld, endpoints: %ld, remaining Legacy Endpoints: %ld.", (uint8_t *)v9, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = v17;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  id v13 = (uint64_t (*)(BOOL))v0[1];
  return v13(v3 != 0);
}

uint64_t sub_1000F75C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (uint64_t v6 = sub_1007241A0(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)(a3 + 56);
    uint64_t v10 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
    uint64_t v17 = *(void *)(v10 - 8);
    sub_100130CA8(v9 + *(void *)(v17 + 72) * v8, a4, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
    uint64_t v12 = a4;
    uint64_t v13 = 0;
    uint64_t v14 = v10;
  }
  else
  {
    uint64_t v15 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v14 = v15;
    uint64_t v12 = a4;
    uint64_t v13 = 1;
  }

  return v11(v12, v13, 1, v14);
}

double sub_1000F76EC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (uint64_t v6 = sub_100723FF4(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    sub_10012F428(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t sub_1000F7750@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_100724268(a1), (v6 & 1) != 0))
  {
    unint64_t v7 = v5;
    uint64_t v8 = *(void *)(a2 + 56);
    uint64_t v9 = type metadata accessor for BookmarkMetaData();
    uint64_t v16 = *(void *)(v9 - 8);
    sub_100130CA8(v8 + *(void *)(v16 + 72) * v7, a3, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    uint64_t v11 = a3;
    uint64_t v12 = 0;
    uint64_t v13 = v9;
  }
  else
  {
    uint64_t v14 = type metadata accessor for BookmarkMetaData();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v13 = v14;
    uint64_t v11 = a3;
    uint64_t v12 = 1;
  }

  return v10(v11, v12, 1, v13);
}

double sub_1000F7878@<D0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_100724268(a1), (v6 & 1) != 0))
  {
    unint64_t v7 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v5);
    uint64_t v8 = *v7;
    unint64_t v9 = v7[1];
    *a3 = *v7;
    a3[1] = v9;
    sub_1000361E0(v8, v9);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a3 = xmmword_101347BB0;
  }
  return result;
}

void *sub_1000F78E4(void *a1, uint64_t a2)
{
  return sub_1000F79BC(a1, a2, (uint64_t (*)(void))sub_100724354, (unint64_t *)&qword_10163AE60);
}

uint64_t sub_1000F790C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_1007240CC(a1), (v2 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t sub_1000F7950(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_1007240CC(a1), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

void *sub_1000F7994(void *a1, uint64_t a2)
{
  return sub_1000F79BC(a1, a2, (uint64_t (*)(void))sub_10072543C, &qword_10163BA40);
}

void *sub_1000F79BC(void *a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t v9 = a3();
      if (v10)
      {
        uint64_t v8 = *(void **)(*(void *)(a2 + 56) + 8 * v9);
        id v11 = v8;
        return v8;
      }
    }
    return 0;
  }
  id v6 = a1;
  uint64_t v7 = __CocoaDictionary.lookup(_:)();

  if (!v7) {
    return 0;
  }
  sub_10001D4B0(0, a4);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v8 = v13;
  swift_unknownObjectRelease();
  return v8;
}

uint64_t sub_1000F7AA4(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[12] = v4;
  v3[13] = *(void *)(v4 - 8);
  v3[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000F7B68, v2, 0);
}

uint64_t sub_1000F7B68()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v4 = v0[12];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[13];
  uint64_t v9 = v0[14];
  uint64_t v11 = v0[12];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558275;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Create automatic share (UT only) for %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[14], v0[12]);
  }

  uint64_t v15 = *(void *)(v0[11] + 200);
  uint64_t v16 = type metadata accessor for MemberCircleRevokeManager();
  v0[2] = v15;
  v0[5] = v16;
  v0[6] = &off_101607480;
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_101641F70 + dword_101641F70);
  swift_retain();
  uint64_t v17 = (void *)swift_task_alloc();
  v0[15] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_1000F7E70;
  uint64_t v19 = v0[9];
  uint64_t v18 = v0[10];
  return v21(v19, v18, 0, (uint64_t)(v0 + 2));
}

uint64_t sub_1000F7E70()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 88);
    uint64_t v4 = sub_10013409C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 88);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_1000F7F98;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000F7F98()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F8080(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_1000F8144, v2, 0);
}

uint64_t sub_1000F8144()
{
  uint64_t v21 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[7];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[8];
  uint64_t v9 = v0[9];
  uint64_t v11 = v0[7];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558275;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Create automatic (self beaconing) share for %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[9], v0[7]);
  }

  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_101641F88 + dword_101641F88);
  uint64_t v15 = (void *)swift_task_alloc();
  v0[10] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_1000F8418;
  uint64_t v17 = v0[4];
  uint64_t v16 = v0[5];
  return v19(v17, v16, 1);
}

uint64_t sub_1000F8418()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 48);
    return _swift_task_switch(sub_1000F8564, v6, 0);
  }
}

uint64_t sub_1000F8564()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F864C(uint64_t a1, uint64_t a2)
{
  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[12] = v4;
  v3[13] = *(void *)(v4 - 8);
  v3[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000F8710, v2, 0);
}

uint64_t sub_1000F8710()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v4 = v0[12];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[13];
  uint64_t v9 = v0[14];
  uint64_t v11 = v0[12];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558275;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Create explicit share for %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[14], v0[12]);
  }

  uint64_t v15 = *(void *)(v0[11] + 200);
  uint64_t v16 = type metadata accessor for MemberCircleRevokeManager();
  v0[2] = v15;
  v0[5] = v16;
  v0[6] = &off_101607480;
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_101641F70 + dword_101641F70);
  swift_retain();
  uint64_t v17 = (void *)swift_task_alloc();
  v0[15] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_1000F8A18;
  uint64_t v19 = v0[9];
  uint64_t v18 = v0[10];
  return v21(v19, v18, 2, (uint64_t)(v0 + 2));
}

uint64_t sub_1000F8A18()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 88);
    uint64_t v4 = sub_1000F8C28;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 88);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_1000F8B40;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000F8B40()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F8C28()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F8C98(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 176) = v50;
  *(void *)(v9 + 184) = v8;
  *(void *)(v9 + 160) = v48;
  *(void *)(v9 + 168) = v49;
  *(_DWORD *)(v9 + 308) = v47;
  *(_DWORD *)(v9 + 304) = v46;
  *(void *)(v9 + 144) = v44;
  *(void *)(v9 + 152) = v45;
  *(void *)(v9 + 128) = v42;
  *(void *)(v9 + 136) = v43;
  *(void *)(v9 + 112) = v40;
  *(void *)(v9 + 120) = v41;
  *(void *)(v9 + 96) = v36;
  *(void *)(v9 + 104) = v37;
  *(void *)(v9 + 80) = a7;
  *(void *)(v9 + 88) = a8;
  *(void *)(v9 + 64) = a5;
  *(void *)(v9 + 72) = a6;
  *(void *)(v9 + 56) = a4;
  *(unsigned char *)(v9 + 321) = a3;
  *(unsigned char *)(v9 + 320) = a2;
  uint64_t v12 = (int *)sub_10000588C(&qword_10163B938);
  *(void *)(v9 + 192) = v12;
  *(void *)(v9 + 200) = swift_task_alloc();
  uint64_t v13 = swift_task_alloc();
  *(void *)(v9 + 208) = v13;
  unint64_t v14 = (int *)sub_10000588C(&qword_10163B940);
  *(void *)(v9 + 216) = v14;
  *(void *)(v9 + 224) = swift_task_alloc();
  uint64_t v15 = swift_task_alloc();
  *(void *)(v9 + 232) = v15;
  uint64_t v16 = type metadata accessor for UUID();
  *(void *)(v9 + 240) = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  *(void *)(v9 + 248) = v17;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  *(void *)(v9 + 256) = v18;
  *(void *)(v9 + 264) = (v17 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v18(v15, a1, v16);
  *(unsigned char *)(v15 + v14[12]) = a2;
  uint64_t v19 = v15 + v14[16];
  *(unsigned char *)uint64_t v19 = a3;
  *(void *)(v19 + 8) = a4;
  *(void *)(v19 + 16) = a5;
  uint64_t v20 = (void *)(v15 + v14[20]);
  *uint64_t v20 = a6;
  v20[1] = a7;
  *(void *)(v15 + v14[24]) = a8;
  uint64_t v21 = (uint64_t *)(v15 + v14[28]);
  uint64_t *v21 = v36;
  v21[1] = v37;
  uint64_t v22 = v12[12];
  *(_DWORD *)(v9 + 312) = v22;
  uint64_t v23 = v13 + v22;
  v18(v13, v38, v16);
  sub_10001D074(v39, v23, &qword_101638CF0);
  uint64_t v24 = (void *)(v13 + v12[16]);
  void *v24 = v40;
  v24[1] = v41;
  uint64_t v25 = (void *)(v13 + v12[20]);
  *uint64_t v25 = v42;
  v25[1] = v43;
  os_log_type_t v26 = (void *)(v13 + v12[24]);
  void *v26 = v44;
  v26[1] = v45;
  *(_DWORD *)(v13 + v12[28]) = v46;
  *(_DWORD *)(v13 + v12[32]) = v47;
  *(void *)(v13 + v12[36]) = v48;
  BOOL v27 = (void *)(v13 + v12[40]);
  *BOOL v27 = v49;
  v27[1] = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v36, v37);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return ((uint64_t (*)(void (*)(), void))_swift_task_switch)(sub_1000F901C, 0);
}

void sub_1000F901C()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Handle incoming share suggestion", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v34 = *(int *)(v0 + 312);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v46 = *(void *)(v0 + 232);
  uint64_t v47 = *(void *)(v0 + 240);
  uint64_t v7 = *(void *)(v0 + 208);
  uint64_t v6 = *(int **)(v0 + 216);
  uint64_t v33 = v7;
  uint64_t v9 = *(int **)(v0 + 192);
  uint64_t v8 = *(void *)(v0 + 200);
  uint64_t v44 = *(void *)(v0 + 176);
  uint64_t v45 = *(void *)(v0 + 184);
  uint64_t v43 = *(void *)(v0 + 168);
  int v42 = *(_DWORD *)(v0 + 308);
  int v40 = *(_DWORD *)(v0 + 304);
  uint64_t v41 = *(void *)(v0 + 160);
  uint64_t v52 = *(void *)(v0 + 152);
  uint64_t v39 = *(void *)(v0 + 144);
  uint64_t v54 = *(void *)(v0 + 136);
  uint64_t v37 = *(void *)(v0 + 120);
  uint64_t v38 = *(void *)(v0 + 128);
  uint64_t v36 = *(void *)(v0 + 112);
  uint64_t v10 = *(void *)(v0 + 88);
  unint64_t v49 = *(void *)(v0 + 104);
  uint64_t v50 = *(void *)(v0 + 96);
  uint64_t v11 = *(void *)(v0 + 80);
  uint64_t v12 = *(void *)(v0 + 64);
  uint64_t v31 = *(void *)(v0 + 56);
  uint64_t v32 = *(void *)(v0 + 72);
  char v29 = *(unsigned char *)(v0 + 320);
  char v30 = *(unsigned char *)(v0 + 321);

  uint64_t v35 = v7 + v34;
  uint64_t v13 = v5 + v6[16];
  unint64_t v14 = (void *)(v5 + v6[20]);
  uint64_t v27 = v6[12];
  uint64_t v28 = v6[24];
  uint64_t v15 = (uint64_t *)(v5 + v6[28]);
  v48(v5, v46, v47);
  *(unsigned char *)(v5 + v27) = v29;
  *(unsigned char *)uint64_t v13 = v30;
  *(void *)(v13 + 8) = v31;
  *(void *)(v13 + 16) = v12;
  *unint64_t v14 = v32;
  v14[1] = v11;
  *(void *)(v5 + v28) = v10;
  *uint64_t v15 = v50;
  v15[1] = v49;
  uint64_t v16 = v9[12];
  *(_DWORD *)(v0 + 316) = v16;
  uint64_t v17 = v8 + v16;
  uint64_t v18 = (void *)(v8 + v9[16]);
  uint64_t v19 = (void *)(v8 + v9[20]);
  uint64_t v20 = (void *)(v8 + v9[24]);
  uint64_t v21 = v9[28];
  uint64_t v22 = v9[32];
  uint64_t v23 = v9[36];
  uint64_t v24 = (void *)(v8 + v9[40]);
  v48(v8, v33, v47);
  sub_10001D074(v35, v17, &qword_101638CF0);
  void *v18 = v36;
  v18[1] = v37;
  *uint64_t v19 = v38;
  v19[1] = v54;
  *uint64_t v20 = v39;
  v20[1] = v52;
  *(_DWORD *)(v8 + v21) = v40;
  *(_DWORD *)(v8 + v22) = v42;
  *(void *)(v8 + v23) = v41;
  void *v24 = v43;
  v24[1] = v44;
  uint64_t v25 = *(void *)(v45 + 200);
  *(void *)(v0 + 40) = type metadata accessor for MemberCircleRevokeManager();
  *(void *)(v0 + 48) = &off_101607480;
  *(void *)(v0 + 16) = v25;
  *(void *)(v0 + 272) = swift_allocObject();
  swift_weakInit();
  *(void *)(v0 + 280) = swift_allocObject();
  swift_weakInit();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v50, v49);
  uint64_t v51 = (char *)&dword_101641EF8 + dword_101641EF8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  os_log_type_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v26;
  void *v26 = v0;
  v26[1] = sub_1000F94B4;
  __asm { BR              X8 }
}

uint64_t sub_1000F94B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 184);
    uint64_t v5 = *(void *)(v2 + 96);
    unint64_t v4 = *(void *)(v2 + 104);
    swift_release();
    swift_release();
    sub_10001CFB8(v5, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_1000F97FC;
    uint64_t v7 = v3;
  }
  else
  {
    uint64_t v9 = *(void *)(v2 + 240);
    uint64_t v8 = *(void *)(v2 + 248);
    uint64_t v14 = *(void *)(v2 + 224);
    uint64_t v10 = *(void *)(v2 + 200);
    uint64_t v15 = *(void *)(v2 + 184);
    uint64_t v11 = v10 + *(int *)(v2 + 316);
    sub_10001CFB8(*(void *)(v2 + 96), *(void *)(v2 + 104));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_release_n();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    sub_10001DAB4(v11, &qword_101638CF0);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v12(v10, v9);
    v12(v14, v9);
    uint64_t v6 = sub_1000F9750;
    uint64_t v7 = v15;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_1000F9750()
{
  uint64_t v1 = v0[29];
  sub_10001DAB4(v0[26], &qword_10163B938);
  sub_10001DAB4(v1, &qword_10163B940);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1000F97FC()
{
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v6 = v5 + *(int *)(v0 + 316);
  sub_10001DAB4(*(void *)(v0 + 208), &qword_10163B938);
  sub_10001DAB4(v3, &qword_10163B940);
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  sub_10001DAB4(v6, &qword_101638CF0);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v7(v5, v2);
  v7(v4, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1000F992C(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return _swift_task_switch(sub_1000F994C, 0, 0);
}

uint64_t sub_1000F994C()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 48) = Strong;
  if (Strong)
  {
    return _swift_task_switch(sub_1000F9A08, Strong, 0);
  }
  else
  {
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
}

uint64_t sub_1000F9A08()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F9AE4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return _swift_task_switch(sub_1000F9B04, 0, 0);
}

uint64_t sub_1000F9B04()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[7] = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[8] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000F9BF8;
    uint64_t v3 = v0[5];
    return sub_1000E84B8(v3);
  }
  else
  {
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_1000F9BF8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  swift_release();
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
  return v3();
}

uint64_t sub_1000F9D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[13] = v5;
  v4[14] = *(void *)(v5 - 8);
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  return _swift_task_switch(sub_1000F9DE0, v3, 0);
}

uint64_t sub_1000F9DE0()
{
  uint64_t v29 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170D788);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  uint64_t v6 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t type = v5;
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v8 = *(void *)(v0 + 104);
    uint64_t v9 = *(void *)(v0 + 112);
    id v25 = *(id *)(v0 + 72);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 141558275;
    *(void *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2081;
    id v11 = [v25 beaconIdentifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    *(void *)(v0 + 64) = sub_1008FA0F0(v12, v14, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v6 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, type, "Create delegated share for %{private,mask.hash}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void **)(v0 + 72);
  }
  uint64_t v16 = *(void *)(v0 + 96);
  id v17 = [*(id *)(v0 + 72) v6[90]];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = *(void *)(v16 + 200);
  uint64_t v19 = type metadata accessor for MemberCircleRevokeManager();
  *(void *)(v0 + 16) = v18;
  *(void *)(v0 + 40) = v19;
  *(void *)(v0 + 48) = &off_101607480;
  uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1016420E0 + dword_1016420E0);
  swift_retain();
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_1000FA138;
  uint64_t v21 = *(void *)(v0 + 120);
  uint64_t v22 = *(void *)(v0 + 80);
  uint64_t v23 = *(void *)(v0 + 88);
  return v27(v21, v0 + 16, v22, v23);
}

uint64_t sub_1000FA138()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 120);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v5 = *(void *)(*v1 + 104);
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    uint64_t v6 = *(void *)(v2 + 96);
    uint64_t v7 = sub_1000FA3BC;
  }
  else
  {
    uint64_t v8 = *(void *)(v2 + 96);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v7 = sub_1000FA2C4;
    uint64_t v6 = v8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000FA2C4()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FA3BC()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FA434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000FA508, v3, 0);
}

uint64_t sub_1000FA508()
{
  uint64_t v27 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = (id *)(v0 + 32);
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170D788);
  id v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  uint64_t v7 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v9 = *(void *)(v0 + 64);
    uint64_t v10 = *(void *)(v0 + 72);
    id v23 = *(id *)(v0 + 32);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141558275;
    *(void *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    id v12 = [v23 beaconIdentifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    *(void *)(v0 + 24) = sub_1008FA0F0(v13, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v7 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v5, type, "Check web share status for %{private,mask.hash}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    id v16 = *v2;
  }
  id v17 = [*(id *)(v0 + 32) v7[90]];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1016420D8 + dword_1016420D8);
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v18;
  void *v18 = v0;
  v18[1] = sub_1000FA828;
  uint64_t v19 = *(void *)(v0 + 80);
  uint64_t v20 = *(void *)(v0 + 40);
  uint64_t v21 = *(void *)(v0 + 48);
  return v25(v19, v20, v21);
}

uint64_t sub_1000FA828()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 72);
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = *(void **)v1;
  v5[13] = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    uint64_t v6 = v5[7];
    return _swift_task_switch(sub_1000FA9DC, v6, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v5[1];
    return v7();
  }
}

uint64_t sub_1000FA9DC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FAA48(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_1000FAB1C, v2, 0);
}

uint64_t sub_1000FAB1C()
{
  uint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170D788);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  uint64_t v6 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    uint64_t v21 = *(void *)(v0 + 56);
    uint64_t v9 = *(void **)(v0 + 40);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 141558275;
    *(void *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2081;
    id v11 = [v9 beaconIdentifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v21);
    *(void *)(v0 + 24) = sub_1008FA0F0(v12, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v6 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Check web share status for %{private,mask.hash}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v15 = *(void **)(v0 + 40);
  }
  id v16 = [*(id *)(v0 + 40) v6[90]];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v17;
  *id v17 = v0;
  v17[1] = sub_1000FAE1C;
  uint64_t v18 = *(void *)(v0 + 72);
  uint64_t v19 = *(void *)(v0 + 32);
  return sub_100344D8C(v19, v18);
}

uint64_t sub_1000FAE1C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = *(void *)(*(void *)v1 + 56);
  os_log_type_t v5 = *(void **)v1;
  v5[12] = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    uint64_t v6 = v5[6];
    return _swift_task_switch(sub_1000FAFD0, v6, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v5[1];
    return v7();
  }
}

uint64_t sub_1000FAFD0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FB03C(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000FB10C, v1, 0);
}

uint64_t sub_1000FB10C()
{
  uint64_t v27 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170D788);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  uint64_t v6 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t type = v5;
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v9 = *(void *)(v0 + 96);
    id v23 = *(id *)(v0 + 72);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 141558275;
    *(void *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2081;
    id v11 = [v23 beaconIdentifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    *(void *)(v0 + 64) = sub_1008FA0F0(v12, v14, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v6 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, type, "Stops temporary location share for %{private,mask.hash}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v15 = *(void **)(v0 + 72);
  }
  uint64_t v16 = *(void *)(v0 + 80);
  id v17 = [*(id *)(v0 + 72) v6[90]];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = *(void *)(v16 + 200);
  uint64_t v19 = type metadata accessor for MemberCircleRevokeManager();
  *(void *)(v0 + 16) = v18;
  *(void *)(v0 + 40) = v19;
  *(void *)(v0 + 48) = &off_101607480;
  id v25 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016420C0 + dword_1016420C0);
  swift_retain();
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_1000FB45C;
  uint64_t v21 = *(void *)(v0 + 104);
  return v25(v21, v0 + 16);
}

uint64_t sub_1000FB45C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 104);
  uint64_t v4 = *(void *)(*v1 + 96);
  uint64_t v5 = *(void *)(*v1 + 88);
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    uint64_t v6 = *(void *)(v2 + 80);
    uint64_t v7 = sub_1000FB6E0;
  }
  else
  {
    uint64_t v8 = *(void *)(v2 + 80);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v7 = sub_1000FB5E8;
    uint64_t v6 = v8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000FB5E8()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FB6E0()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FB758(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 176) = a2;
  *(void *)(v3 + 32) = a1;
  *(void *)(v3 + 40) = v2;
  uint64_t v4 = type metadata accessor for UUID();
  *(void *)(v3 + 48) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 56) = v5;
  *(void *)(v3 + 64) = *(void *)(v5 + 64);
  *(void *)(v3 + 72) = swift_task_alloc();
  *(void *)(v3 + 80) = sub_10000588C((uint64_t *)&unk_101638D10);
  *(void *)(v3 + 88) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OwnerSharingCircle();
  *(void *)(v3 + 96) = v6;
  *(void *)(v3 + 104) = *(void *)(v6 - 8);
  *(void *)(v3 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_1000FB8B4, v2, 0);
}

uint64_t sub_1000FB8B4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 136);
  *(void *)(v0 + 120) = v1;
  return _swift_task_switch(sub_1000FB8D8, v1, 0);
}

uint64_t sub_1000FB8D8()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[4];
  v0[16] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  v0[17] = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_1000FB9CC, 0, 0);
}

uint64_t sub_1000FB9CC()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[18] = v3;
  v3[2] = v2;
  v3[3] = sub_10012AADC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[19] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000FBAD0;
  uint64_t v6 = v0[10];
  uint64_t v5 = v0[11];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340A4, v3, v6);
}

uint64_t sub_1000FBAD0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000FBC20, v1, 0);
}

uint64_t sub_1000FBC20()
{
  uint64_t v1 = *(void *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 104) + 48))(v1, 1, *(void *)(v0 + 96)) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_101638D10);
    type metadata accessor for SPBeaconSharingError(0);
    *(void *)(v0 + 24) = 5;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10012B44C((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    sub_10012EC2C(v1, *(void *)(v0 + 112), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1000FBE00;
    uint64_t v5 = *(void *)(v0 + 112);
    char v6 = *(unsigned char *)(v0 + 176);
    return sub_1000FC070(v5, v6);
  }
}

uint64_t sub_1000FBE00()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v4 = sub_1000FBFD0;
  }
  else {
    uint64_t v4 = sub_1000FBF2C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000FBF2C()
{
  sub_10012C39C(*(void *)(v0 + 112), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FBFD0()
{
  sub_10012C39C(*(void *)(v0 + 112), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FC070(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 72) = a2;
  *(void *)(v3 + 32) = a1;
  *(void *)(v3 + 40) = v2;
  *(void *)(v3 + 48) = type metadata accessor for OwnerSharingCircle();
  *(void *)(v3 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_1000FC108, v2, 0);
}

uint64_t sub_1000FC108()
{
  uint64_t v18 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170D788);
  sub_100130CA8(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 56);
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558275;
    *(void *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 24) = sub_1008FA0F0(v9, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Upload keys for %{private,mask.hash}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10012C39C(*(void *)(v0 + 56), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }

  uint64_t v11 = *(void *)(*(void *)(v0 + 40) + 200);
  uint64_t v16 = (uint64_t (*)(uint64_t, char, uint64_t))((char *)&dword_101641FA0 + dword_101641FA0);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v12;
  void *v12 = v0;
  v12[1] = sub_1000FC404;
  char v13 = *(unsigned char *)(v0 + 72);
  uint64_t v14 = *(void *)(v0 + 32);
  return v16(v14, v13, v11);
}

uint64_t sub_1000FC404()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 40);
    return _swift_task_switch(sub_1000FC550, v6, 0);
  }
}

uint64_t sub_1000FC550()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FC638(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 304) = a2;
  *(void *)(v3 + 112) = a1;
  *(void *)(v3 + 120) = v2;
  uint64_t v4 = type metadata accessor for MemberSharingCircle();
  *(void *)(v3 + 128) = v4;
  *(void *)(v3 + 136) = *(void *)(v4 - 8);
  *(void *)(v3 + 144) = swift_task_alloc();
  *(void *)(v3 + 152) = sub_10000588C((uint64_t *)&unk_10163B7C0);
  *(void *)(v3 + 160) = swift_task_alloc();
  *(void *)(v3 + 168) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  *(void *)(v3 + 176) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v3 + 184) = v6;
  *(void *)(v3 + 192) = *(void *)(v6 + 64);
  *(void *)(v3 + 200) = swift_task_alloc();
  *(void *)(v3 + 208) = swift_task_alloc();
  return _swift_task_switch(sub_1000FC7B4, v2, 0);
}

uint64_t sub_1000FC7B4()
{
  uint64_t v19 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[23];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[27] = v6;
  v0[28] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[26];
  uint64_t v11 = v0[22];
  uint64_t v12 = v0[23];
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558275;
    v0[12] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[13] = sub_1008FA0F0(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Download keys for %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v12 + 8))(v0[26], v0[22]);
  }

  uint64_t v16 = *(void *)(v0[15] + 136);
  v0[29] = v16;
  return _swift_task_switch(sub_1000FCA50, v16, 0);
}

uint64_t sub_1000FCA50()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[14];
  v0[30] = *(void *)(v1 + 136);
  v2(v3, v6, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  v0[31] = v8;
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v3, v4);
  swift_retain();
  return _swift_task_switch(sub_1000FCB38, 0, 0);
}

uint64_t sub_1000FCB38()
{
  uint64_t v2 = v0[30];
  uint64_t v1 = v0[31];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[32] = v3;
  v3[2] = v2;
  v3[3] = sub_10012F61C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[33] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000FCC40;
  uint64_t v5 = v0[21];
  uint64_t v6 = v0[19];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340A8, v3, v6);
}

uint64_t sub_1000FCC40()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000FCD90, v1, 0);
}

uint64_t sub_1000FCD90()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 136);
  sub_10001D074(*(void *)(v0 + 168), v1, (uint64_t *)&unk_10163B7C0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 168);
    sub_10001DAB4(*(void *)(v0 + 160), (uint64_t *)&unk_10163B7C0);
    sub_10012F634();
    swift_allocError();
    *uint64_t v5 = 3;
    swift_willThrow();
    sub_10001DAB4(v4, (uint64_t *)&unk_10163B7C0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 120);
    int v9 = *(unsigned __int8 *)(v0 + 304);
    sub_10012EC2C(*(void *)(v0 + 160), *(void *)(v0 + 144), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v10 = *(void *)(v8 + 200);
    uint64_t v11 = type metadata accessor for MemberCircleRevokeManager();
    if (v9 == 1)
    {
      *(void *)(v0 + 56) = v10;
      uint64_t v12 = v0 + 56;
      *(void *)(v0 + 80) = v11;
      *(void *)(v0 + 88) = &off_101607480;
      uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101641F40 + dword_101641F40);
      swift_retain();
      uint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 272) = v13;
      void *v13 = v0;
      uint64_t v14 = sub_1000FD01C;
    }
    else
    {
      *(void *)(v0 + 16) = v10;
      uint64_t v12 = v0 + 16;
      *(void *)(v0 + 40) = v11;
      *(void *)(v0 + 48) = &off_101607480;
      uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101641F48 + dword_101641F48);
      swift_retain();
      uint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 288) = v13;
      void *v13 = v0;
      uint64_t v14 = sub_1000FD368;
    }
    v13[1] = v14;
    uint64_t v15 = *(void *)(v0 + 144);
    return v16(v15, v12);
  }
}

uint64_t sub_1000FD01C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 280) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 120);
    uint64_t v4 = sub_1000FD290;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 56);
    uint64_t v4 = sub_1000FD144;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000FD144()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[18];
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  sub_10012C39C(v2, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001DAB4(v1, (uint64_t *)&unk_10163B7C0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000FD290()
{
  uint64_t v1 = v0[21];
  sub_10012C39C(v0[18], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001DAB4(v1, (uint64_t *)&unk_10163B7C0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 7));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1000FD368()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 120);
    uint64_t v4 = sub_1000FD490;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_1001343B4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000FD490()
{
  uint64_t v1 = v0[21];
  sub_10012C39C(v0[18], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001DAB4(v1, (uint64_t *)&unk_10163B7C0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1000FD568(uint64_t a1)
{
  v2[28] = a1;
  v2[29] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[30] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[31] = v4;
  v2[32] = *(void *)(v4 + 64);
  v2[33] = swift_task_alloc();
  v2[34] = sub_10000588C((uint64_t *)&unk_101653D50);
  v2[35] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SharedBeaconRecord(0);
  v2[36] = v5;
  v2[37] = *(void *)(v5 - 8);
  v2[38] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MemberSharingCircle();
  v2[39] = v6;
  v2[40] = *(void *)(v6 - 8);
  v2[41] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10163BBC0);
  v2[42] = v7;
  v2[43] = *(void *)(v7 - 8);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  v2[47] = swift_task_alloc();
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OwnerSharingCircle();
  v2[50] = v8;
  v2[51] = *(void *)(v8 - 8);
  v2[52] = swift_task_alloc();
  return _swift_task_switch(sub_1000FD818, v1, 0);
}

uint64_t sub_1000FD818()
{
  v0[53] = *(void *)(v0[29] + 136);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[54] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000FD8B8;
  uint64_t v2 = v0[28];
  return sub_100E5B3AC(v2);
}

uint64_t sub_1000FD8B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232);
  *(void *)(*(void *)v1 + 440) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000FD9D0, v2, 0);
}

uint64_t sub_1000FD9D0()
{
  Swift::Int v1 = sub_100DF2D10((uint64_t)&off_1015A0488);
  v0[56] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[57] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000FDA80;
  uint64_t v3 = v0[28];
  return sub_100E59F38(v3, v1);
}

uint64_t sub_1000FDA80(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232);
  *(void *)(*(void *)v1 + 464) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1000FDBB4, v2, 0);
}

uint64_t sub_1000FDBB4()
{
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 472) = v2;
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 400);
    uint64_t v3 = *(void *)(v0 + 408);
    *(void *)(v0 + 480) = *(void *)(*(void *)(v0 + 232) + 128);
    int v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 712) = v5;
    uint64_t v6 = *(void *)(v3 + 72);
    *(void *)(v0 + 496) = 0;
    *(void *)(v0 + 504) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 488) = v6;
    uint64_t v7 = *(void *)(v0 + 416);
    sub_100130CA8(v1 + ((v5 + 32) & ~(unint64_t)v5), v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v8 = *(int *)(v4 + 20);
    *(_DWORD *)(v0 + 716) = v8;
    uint64_t v9 = v7 + v8;
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 512) = v10;
    void *v10 = v0;
    v10[1] = sub_1000FDE6C;
    return sub_100C32EB4(v0 + 16, v9);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v0 + 440);
    uint64_t v13 = *(void *)(v12 + 16);
    *(void *)(v0 + 552) = v13;
    if (v13)
    {
      uint64_t v14 = *(void *)(v0 + 424);
      uint64_t v16 = *(void *)(v0 + 312);
      uint64_t v15 = *(void *)(v0 + 320);
      int v17 = *(_DWORD *)(v15 + 80);
      *(_DWORD *)(v0 + 720) = v17;
      *(void *)(v0 + 560) = *(void *)(v15 + 72);
      *(void *)(v0 + 576) = _swiftEmptyArrayStorage;
      *(void *)(v0 + 568) = 0;
      sub_100130CA8(v12 + ((v17 + 32) & ~(unint64_t)v17), *(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      *(_DWORD *)(v0 + 724) = *(_DWORD *)(v16 + 24);
      return _swift_task_switch(sub_1000FEAA8, v14, 0);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v18 = *(uint64_t (**)(void *))(v0 + 8);
      return v18(_swiftEmptyArrayStorage);
    }
  }
}

uint64_t sub_1000FDE6C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 520) = v0;
  swift_task_dealloc();
  if (v0)
  {
    v2[68] = v0;
    uint64_t v3 = v2[29];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000FE994;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = v2[60];
    uint64_t v4 = sub_1000FDFB8;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1000FDFB8()
{
  unint64_t v1 = v0[8];
  if (v1 >> 60 != 15)
  {
    uint64_t v7 = v0[7];
    sub_1000361E0(v7, v0[8]);
    sub_1000361E0(v7, v1);
    sub_100435A9C(57, v7, v1, v0 + 20);
    uint64_t v8 = v0[20];
    unint64_t v9 = v0[21];
    switch(v9 >> 62)
    {
      case 1uLL:
        LODWORD(v10) = HIDWORD(v8) - v8;
        if (__OFSUB__(HIDWORD(v8), v8))
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
        }
        else
        {
          uint64_t v10 = (int)v10;
LABEL_11:
          if (v10 != 57)
          {
LABEL_18:
            sub_10001CFB8(v0[20], v0[21]);
            return _assertionFailure(_:_:file:line:flags:)();
          }
          uint64_t v14 = v0[65];
          sub_1000361E0(v8, v9);
          uint64_t v15 = sub_100A948F8(v8, v9);
          if (v14)
          {
            static os_log_type_t.error.getter();
            if (qword_101636F48 != -1) {
              swift_once();
            }
            sub_10000588C((uint64_t *)&unk_10163AD00);
            uint64_t v19 = swift_allocObject();
            *(_OWORD *)(v19 + 16) = xmmword_101342130;
            v0[25] = v14;
            swift_errorRetain();
            sub_10000588C(&qword_101638D40);
            uint64_t v20 = String.init<A>(describing:)();
            uint64_t v22 = v21;
            *(void *)(v19 + 56) = &type metadata for String;
            *(void *)(v19 + 64) = sub_10000B4CC();
            *(void *)(v19 + 32) = v20;
            *(void *)(v19 + 40) = v22;
            os_log(_:dso:log:_:_:)();
            swift_bridgeObjectRelease();
            sub_100130148();
            uint64_t v23 = swift_allocError();
            unsigned char *v24 = 0;
            swift_willThrow();
            swift_errorRelease();
            unint64_t v25 = v9;
            uint64_t v26 = v8;
            goto LABEL_17;
          }
          uint64_t v16 = sub_100A90C58(v15, 0);
          uint64_t v17 = 0;
          v0[66] = v16;
          v0[67] = v18;
          uint64_t v28 = v16;
          unint64_t v29 = v18;
          CCECCryptorRelease();
          sub_10001CFB8(v8, v9);
          unint64_t v30 = v29 >> 62;
          switch(v29 >> 62)
          {
            case 1uLL:
              uint64_t v32 = v28;
              LODWORD(v31) = HIDWORD(v28) - v28;
              if (__OFSUB__(HIDWORD(v28), v28)) {
                goto LABEL_37;
              }
              uint64_t v31 = (int)v31;
              break;
            case 2uLL:
              uint64_t v34 = *(void *)(v28 + 16);
              uint64_t v33 = *(void *)(v28 + 24);
              BOOL v13 = __OFSUB__(v33, v34);
              uint64_t v31 = v33 - v34;
              if (!v13) {
                goto LABEL_25;
              }
              goto LABEL_38;
            case 3uLL:
              goto LABEL_34;
            default:
              uint64_t v31 = BYTE6(v29);
LABEL_25:
              uint64_t v32 = v28;
              break;
          }
          if (v31 == 28)
          {
            uint64_t v35 = v0[29];
            sub_10001CFB8(v8, v9);
            sub_100037A24(v7, v1);
            sub_1001300CC(v0 + 2);
            uint64_t v5 = sub_1000FE52C;
            uint64_t v6 = v35;
            goto LABEL_3;
          }
          if (!v30)
          {
            uint64_t v17 = BYTE6(v29);
            goto LABEL_34;
          }
          if (v30 != 1)
          {
            uint64_t v37 = *(void *)(v32 + 16);
            uint64_t v36 = *(void *)(v32 + 24);
            uint64_t v17 = v36 - v37;
            if (!__OFSUB__(v36, v37)) {
              goto LABEL_34;
            }
LABEL_40:
            __break(1u);
            JUMPOUT(0x1000FE50CLL);
          }
          if (!__OFSUB__(HIDWORD(v32), v32))
          {
            uint64_t v17 = HIDWORD(v32) - (int)v32;
LABEL_34:
            sub_10013019C();
            uint64_t v23 = swift_allocError();
            *(void *)uint64_t v38 = 28;
            *(void *)(v38 + 8) = v17;
            *(unsigned char *)(v38 + 16) = 0;
            swift_willThrow();
            unint64_t v25 = v29;
            uint64_t v26 = v28;
LABEL_17:
            sub_10001CFB8(v26, v25);
            _StringGuts.grow(_:)(35);
            v0[22] = 0;
            v0[23] = 0xE000000000000000;
            v27._countAndFlagsBits = 0xD000000000000021;
            v27._object = (void *)0x80000001013F3B70;
            String.append(_:)(v27);
            v0[24] = v23;
            sub_10000588C(&qword_101638D40);
            _print_unlocked<A, B>(_:_:)();
            return _assertionFailure(_:_:file:line:flags:)();
          }
        }
        __break(1u);
        goto LABEL_40;
      case 2uLL:
        uint64_t v12 = *(void *)(v8 + 16);
        uint64_t v11 = *(void *)(v8 + 24);
        BOOL v13 = __OFSUB__(v11, v12);
        uint64_t v10 = v11 - v12;
        if (!v13) {
          goto LABEL_11;
        }
        goto LABEL_36;
      case 3uLL:
        goto LABEL_18;
      default:
        uint64_t v10 = BYTE6(v9);
        goto LABEL_11;
    }
  }
  sub_100130078();
  uint64_t v2 = swift_allocError();
  *uint64_t v3 = 12;
  swift_willThrow();
  sub_1001300CC(v0 + 2);
  v0[68] = v2;
  uint64_t v4 = v0[29];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_1000FE994;
  uint64_t v6 = v4;
LABEL_3:
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_1000FE52C()
{
  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v2 = *(_OWORD **)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v46 = (char *)v2 + *(int *)(*(void *)(v0 + 336) + 48);
  *uint64_t v2 = *(_OWORD *)(v0 + 528);
  uint64_t v5 = *(void (**)(void))(v4 + 16);
  v5();
  unsigned int v6 = 0x4000201u >> (8 * *(unsigned char *)(v1 + *(int *)(v3 + 28)));
  unint64_t v7 = *(void *)(v0 + 536);
  uint64_t v8 = *(void *)(v0 + 528);
  unint64_t v9 = *(uint64_t **)(v0 + 384);
  uint64_t v10 = *(uint64_t **)(v0 + 376);
  uint64_t v11 = *(void *)(v0 + 336);
  uint64_t v12 = *(void *)(v0 + 240);
  uint64_t v13 = *(void *)(v0 + 248);
  *(unsigned char *)(*(void *)(v0 + 392) + *(int *)(v11 + 64)) = v6;
  uint64_t v14 = (char *)v9 + *(int *)(v11 + 48);
  uint64_t v44 = *(int *)(v11 + 64);
  uint64_t v45 = v12;
  *unint64_t v9 = v8;
  v9[1] = v7;
  ((void (*)(char *, char *))v5)(v14, v46);
  *((unsigned char *)v9 + v44) = v6;
  uint64_t v15 = (char *)v10 + *(int *)(v11 + 48);
  uint64_t v16 = *(int *)(v11 + 64);
  uint64_t *v10 = v8;
  v10[1] = v7;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v14, v45);
  *((unsigned char *)v10 + v16) = v6;
  sub_1000361E0(v8, v7);
  sub_1000361E0(v8, v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v18 = *(void *)(v0 + 504);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v18 = sub_100A6FA38(0, *(void *)(v18 + 16) + 1, 1, *(void *)(v0 + 504));
  }
  unint64_t v20 = *(void *)(v18 + 16);
  unint64_t v19 = *(void *)(v18 + 24);
  if (v20 >= v19 >> 1) {
    unint64_t v18 = sub_100A6FA38(v19 > 1, v20 + 1, 1, v18);
  }
  unint64_t v21 = *(void *)(v0 + 536);
  uint64_t v22 = *(void *)(v0 + 528);
  uint64_t v23 = *(void *)(v0 + 472);
  uint64_t v24 = *(void *)(v0 + 416);
  uint64_t v25 = *(void *)(v0 + 392);
  uint64_t v26 = *(void *)(v0 + 376);
  uint64_t v27 = *(void *)(v0 + 344);
  uint64_t v28 = *(void *)(v0 + 496) + 1;
  *(void *)(v18 + 16) = v20 + 1;
  sub_10001D608(v26, v18+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v20, &qword_10163BBC0);
  sub_10001CFB8(v22, v21);
  sub_10001DAB4(v25, &qword_10163BBC0);
  sub_10012C39C(v24, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  if (v28 == v23)
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void *)(v0 + 440);
    uint64_t v30 = *(void *)(v29 + 16);
    *(void *)(v0 + 552) = v30;
    if (v30)
    {
      uint64_t v31 = *(void *)(v0 + 424);
      uint64_t v33 = *(void *)(v0 + 312);
      uint64_t v32 = *(void *)(v0 + 320);
      int v34 = *(_DWORD *)(v32 + 80);
      *(_DWORD *)(v0 + 720) = v34;
      *(void *)(v0 + 560) = *(void *)(v32 + 72);
      *(void *)(v0 + 576) = v18;
      *(void *)(v0 + 568) = 0;
      sub_100130CA8(v29 + ((v34 + 32) & ~(unint64_t)v34), *(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      *(_DWORD *)(v0 + 724) = *(_DWORD *)(v33 + 24);
      return _swift_task_switch(sub_1000FEAA8, v31, 0);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      int v42 = *(uint64_t (**)(unint64_t))(v0 + 8);
      return v42(v18);
    }
  }
  else
  {
    uint64_t v35 = *(void *)(v0 + 488);
    uint64_t v36 = *(void *)(v0 + 496) + 1;
    *(void *)(v0 + 496) = v36;
    *(void *)(v0 + 504) = v18;
    uint64_t v37 = *(void *)(v0 + 416);
    uint64_t v38 = *(void *)(v0 + 400);
    sub_100130CA8(*(void *)(v0 + 464)+ ((*(unsigned __int8 *)(v0 + 712) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 712))+ v35 * v36, v37, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v39 = *(int *)(v38 + 20);
    *(_DWORD *)(v0 + 716) = v39;
    uint64_t v40 = v37 + v39;
    uint64_t v41 = (void *)swift_task_alloc();
    *(void *)(v0 + 512) = v41;
    *uint64_t v41 = v0;
    v41[1] = sub_1000FDE6C;
    return sub_100C32EB4(v0 + 16, v40);
  }
}

uint64_t sub_1000FE994()
{
  sub_10012C39C(*(void *)(v0 + 416), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FEAA8()
{
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 328) + *(int *)(v0 + 724);
  *(void *)(v0 + 584) = *(void *)(v1 + 136);
  unsigned int v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 592) = v6;
  *(void *)(v0 + 600) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v3);
  int v7 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 728) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 608) = v9;
  *(void *)(v9 + 16) = v1;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 616) = v10;
  *(void *)(v0 + 624) = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_1000FEBCC, 0, 0);
}

uint64_t sub_1000FEBCC()
{
  uint64_t v1 = v0[76];
  uint64_t v2 = v0[73];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[79] = v3;
  v3[2] = v2;
  v3[3] = sub_10012E338;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[80] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000FECD4;
  uint64_t v6 = v0[34];
  uint64_t v5 = v0[35];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340AC, v3, v6);
}

uint64_t sub_1000FECD4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 232);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000FEE24, v1, 0);
}

uint64_t sub_1000FEE24()
{
  uint64_t v1 = *(void *)(v0 + 280);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 296) + 48))(v1, 1, *(void *)(v0 + 288)) == 1)
  {
    sub_10012C39C(*(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001DAB4(v1, (uint64_t *)&unk_101653D50);
    uint64_t v2 = *(void *)(v0 + 568) + 1;
    if (v2 == *(void *)(v0 + 552))
    {
      uint64_t v10 = *(void *)(v0 + 576);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v3(v10);
    }
    *(void *)(v0 + 568) = v2;
    uint64_t v8 = *(void *)(v0 + 424);
    uint64_t v9 = *(void *)(v0 + 312);
    sub_100130CA8(*(void *)(v0 + 440)+ ((*(unsigned __int8 *)(v0 + 720) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 720))+ *(void *)(v0 + 560) * v2, *(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 724) = *(_DWORD *)(v9 + 24);
    uint64_t v6 = sub_1000FEAA8;
    uint64_t v7 = v8;
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 424);
    sub_10012EC2C(v1, *(void *)(v0 + 304), type metadata accessor for SharedBeaconRecord);
    uint64_t v6 = sub_1000FF064;
    uint64_t v7 = v5;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_1000FF064()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 616);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 240);
  unint64_t v6 = (*(unsigned __int8 *)(v0 + 728) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 728);
  uint64_t v7 = *(void *)(v0 + 328) + *(int *)(v0 + 724);
  *(void *)(v0 + 648) = *(void *)(v3 + 136);
  v2(v4, v7, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 656) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v6, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_1000FF164, 0, 0);
}

uint64_t sub_1000FF164()
{
  uint64_t v1 = v0[82];
  uint64_t v2 = v0[81];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[83] = v3;
  v3[2] = v2;
  v3[3] = sub_10001CDDC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[84] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163BBE0);
  *uint64_t v4 = v0;
  v4[1] = sub_1000FF280;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 10, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001301F8, v3, v5);
}

uint64_t sub_1000FF280()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 232);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000FF3D0, v1, 0);
}

uint64_t sub_1000FF3D0()
{
  uint64_t v1 = *(void *)(v0 + 328);
  if (*(void *)(v0 + 104))
  {
    uint64_t v2 = *(void *)(v0 + 312);
    sub_10001CEB0((long long *)(v0 + 80), v0 + 120);
    uint64_t v3 = v1 + *(int *)(v2 + 20);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 680) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1000FF670;
    return sub_100CA81A4(v3);
  }
  else
  {
    sub_10012C39C(*(void *)(v0 + 304), type metadata accessor for SharedBeaconRecord);
    sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001DAB4(v0 + 80, (uint64_t *)&unk_10163BBE0);
    uint64_t v6 = *(void *)(v0 + 568) + 1;
    if (v6 == *(void *)(v0 + 552))
    {
      uint64_t v10 = *(void *)(v0 + 576);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v7(v10);
    }
    else
    {
      *(void *)(v0 + 568) = v6;
      uint64_t v8 = *(void *)(v0 + 424);
      uint64_t v9 = *(void *)(v0 + 312);
      sub_100130CA8(*(void *)(v0 + 440)+ ((*(unsigned __int8 *)(v0 + 720) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 720))+ *(void *)(v0 + 560) * v6, *(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      *(_DWORD *)(v0 + 724) = *(_DWORD *)(v9 + 24);
      return _swift_task_switch(sub_1000FEAA8, v8, 0);
    }
  }
}

uint64_t sub_1000FF670(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[86] = a1;
  v4[87] = a2;
  v4[88] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = v4[29];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_1000FFD78;
    uint64_t v7 = v5;
  }
  else
  {
    uint64_t v7 = v4[29];
    uint64_t v6 = sub_1000FF7AC;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_1000FF7AC()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(v0 + 304) + *(int *)(*(void *)(v0 + 288) + 64));
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 152);
  sub_10001CD44((void *)(v0 + 120), v2);
  char v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v3);
  switch(v1)
  {
    case 1:
    case 4:
      if (v4) {
        LOBYTE(v1) = 2;
      }
      else {
        LOBYTE(v1) = 1;
      }
      goto LABEL_9;
    case 2:
      LOBYTE(v1) = 0;
      goto LABEL_9;
    case 3:
LABEL_9:
      unint64_t v11 = *(void *)(v0 + 696);
      uint64_t v12 = *(void *)(v0 + 688);
      char v40 = v1;
      uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v0 + 616);
      uint64_t v13 = *(void (**)(void))(v0 + 592);
      uint64_t v14 = *(uint64_t **)(v0 + 360);
      uint64_t v15 = *(uint64_t **)(v0 + 368);
      uint64_t v16 = *(uint64_t **)(v0 + 352);
      uint64_t v17 = *(void *)(v0 + 336);
      uint64_t v18 = *(void *)(v0 + 240);
      uint64_t v37 = *(int *)(v17 + 64);
      uint64_t v39 = (char *)v15 + *(int *)(v17 + 48);
      *uint64_t v15 = v12;
      v15[1] = v11;
      v13();
      *((unsigned char *)v15 + v37) = v40;
      unint64_t v19 = (char *)v14 + *(int *)(v17 + 48);
      uint64_t v38 = *(int *)(v17 + 64);
      *uint64_t v14 = v12;
      v14[1] = v11;
      ((void (*)(char *, char *, uint64_t))v13)(v19, v39, v18);
      *((unsigned char *)v14 + v38) = v40;
      unint64_t v20 = (char *)v16 + *(int *)(v17 + 48);
      uint64_t v21 = *(int *)(v17 + 64);
      uint64_t *v16 = v12;
      v16[1] = v11;
      v41(v20, v19, v18);
      *((unsigned char *)v16 + v21) = v40;
      sub_1000361E0(v12, v11);
      sub_1000361E0(v12, v11);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v23 = *(void *)(v0 + 576);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        unint64_t v23 = sub_100A6FA38(0, *(void *)(v23 + 16) + 1, 1, *(void *)(v0 + 576));
      }
      unint64_t v25 = *(void *)(v23 + 16);
      unint64_t v24 = *(void *)(v23 + 24);
      if (v25 >= v24 >> 1) {
        unint64_t v23 = sub_100A6FA38(v24 > 1, v25 + 1, 1, v23);
      }
      unint64_t v26 = *(void *)(v0 + 696);
      uint64_t v27 = *(void *)(v0 + 688);
      uint64_t v28 = *(void *)(v0 + 368);
      uint64_t v30 = *(void *)(v0 + 344);
      uint64_t v29 = *(void *)(v0 + 352);
      uint64_t v31 = *(void *)(v0 + 328);
      uint64_t v32 = *(void *)(v0 + 304);
      *(void *)(v23 + 16) = v25 + 1;
      sub_10001D608(v29, v23+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v25, &qword_10163BBC0);
      sub_10001CFB8(v27, v26);
      sub_10001DAB4(v28, &qword_10163BBC0);
      sub_10012C39C(v32, type metadata accessor for SharedBeaconRecord);
      sub_10012C39C(v31, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 120);
      uint64_t v33 = *(void *)(v0 + 568) + 1;
      if (v33 == *(void *)(v0 + 552))
      {
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        int v34 = *(uint64_t (**)(unint64_t))(v0 + 8);
        uint64_t result = v34(v23);
      }
      else
      {
        *(void *)(v0 + 576) = v23;
        *(void *)(v0 + 568) = v33;
        uint64_t v35 = *(void *)(v0 + 424);
        uint64_t v36 = *(void *)(v0 + 312);
        sub_100130CA8(*(void *)(v0 + 440)+ ((*(unsigned __int8 *)(v0 + 720) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 720))+ *(void *)(v0 + 560) * v33, *(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        *(_DWORD *)(v0 + 724) = *(_DWORD *)(v36 + 24);
        uint64_t result = _swift_task_switch(sub_1000FEAA8, v35, 0);
      }
      break;
    default:
      unint64_t v5 = *(void *)(v0 + 696);
      uint64_t v6 = *(void *)(v0 + 688);
      uint64_t v7 = *(void *)(v0 + 328);
      uint64_t v8 = *(void *)(v0 + 304);
      type metadata accessor for SPBeaconSharingError(0);
      *(void *)(v0 + 216) = 2;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_10012B44C((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      sub_10001CFB8(v6, v5);
      sub_10012C39C(v8, type metadata accessor for SharedBeaconRecord);
      sub_10012C39C(v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 120);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
      uint64_t result = v9();
      break;
  }
  return result;
}

uint64_t sub_1000FFD78()
{
  uint64_t v1 = v0[41];
  sub_10012C39C(v0[38], type metadata accessor for SharedBeaconRecord);
  sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 15));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1000FFEB8(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = *(void *)(v4 + 64);
  v2[7] = swift_task_alloc();
  v2[8] = sub_10000588C((uint64_t *)&unk_10163BA80);
  v2[9] = swift_task_alloc();
  v2[10] = sub_10000588C(&qword_101639E68);
  v2[11] = swift_task_alloc();
  type metadata accessor for OwnerSharingCircle();
  v2[12] = swift_task_alloc();
  type metadata accessor for OwnerPeerTrust();
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_100100040, v1, 0);
}

uint64_t sub_100100040()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 136);
  *(void *)(v0 + 112) = v1;
  return _swift_task_switch(sub_100100064, v1, 0);
}

uint64_t sub_100100064()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[2];
  v0[15] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  v0[16] = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_100100158, 0, 0);
}

uint64_t sub_100100158()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[17] = v3;
  v3[2] = v2;
  v3[3] = sub_10012F8AC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[18] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10010025C;
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10012F8C4, v3, v6);
}

uint64_t sub_10010025C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001003AC, v1, 0);
}

uint64_t sub_1001003AC()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = sub_10000588C(&qword_10163BA90);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_10163BA80);
    uint64_t v16 = (char *)&dword_101641E80 + dword_101641E80;
    uint64_t v3 = (void *)swift_task_alloc();
    v0[21] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10010094C;
    uint64_t v4 = v0[2];
    return ((uint64_t (*)(uint64_t, void))v16)(v4, 0);
  }
  else
  {
    uint64_t v7 = v0[12];
    uint64_t v6 = v0[13];
    uint64_t v9 = v0[10];
    uint64_t v8 = v0[11];
    uint64_t v10 = v1 + *(int *)(v2 + 48);
    uint64_t v11 = v8 + *(int *)(v9 + 48);
    sub_10012EC2C(v1, v8, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    sub_10012EC2C(v10, v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v12 = v8 + *(int *)(v9 + 48);
    sub_10012EC2C(v8, v6, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    sub_10012EC2C(v12, v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v17 = (char *)&dword_101641F10 + dword_101641F10;
    uint64_t v13 = (void *)swift_task_alloc();
    v0[19] = v13;
    void *v13 = v0;
    v13[1] = sub_1001005EC;
    uint64_t v14 = v0[12];
    uint64_t v15 = v0[13];
    return ((uint64_t (*)(uint64_t, uint64_t, void))v17)(v15, v14, 0);
  }
}

uint64_t sub_1001005EC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0) {
    uint64_t v4 = sub_100100874;
  }
  else {
    uint64_t v4 = sub_100100718;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100100718()
{
  uint64_t v1 = v0[13];
  sub_10012C39C(v0[12], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100100874()
{
  uint64_t v1 = v0[13];
  sub_10012C39C(v0[12], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_10010094C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 24);
    return _swift_task_switch(sub_100100AC8, v6, 0);
  }
}

uint64_t sub_100100AC8()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100100BEC(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = *(void *)(v4 + 64);
  v2[7] = swift_task_alloc();
  v2[8] = sub_10000588C((uint64_t *)&unk_10163B7C0);
  v2[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MemberSharingCircle();
  v2[10] = v5;
  v2[11] = *(void *)(v5 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_100100D44, v1, 0);
}

uint64_t sub_100100D44()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 136);
  *(void *)(v0 + 104) = v1;
  return _swift_task_switch(sub_100100D68, v1, 0);
}

uint64_t sub_100100D68()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[2];
  v0[14] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  v0[15] = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_100100E5C, 0, 0);
}

uint64_t sub_100100E5C()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[16] = v3;
  v3[2] = v2;
  v3[3] = sub_10012F61C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[17] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100100F60;
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340A8, v3, v6);
}

uint64_t sub_100100F60()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001010B0, v1, 0);
}

uint64_t sub_1001010B0()
{
  uint64_t v1 = v0[9];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[11] + 48))(v1, 1, v0[10]) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B7C0);
    sub_10012F634();
    swift_allocError();
    *uint64_t v2 = 3;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    sub_10012EC2C(v1, v0[12], (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[18] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100101240;
    uint64_t v6 = v0[12];
    return sub_1010BCDFC(v6);
  }
}

uint64_t sub_100101240()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  return _swift_task_switch(sub_100101350, v1, 0);
}

uint64_t sub_100101350()
{
  uint64_t v1 = *(void *)(v0 + 96);
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100101474(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 264) = a4;
  *(void *)(v5 + 272) = v4;
  *(unsigned char *)(v5 + 684) = a2;
  *(void *)(v5 + 248) = a1;
  *(void *)(v5 + 256) = a3;
  *(void *)(v5 + 280) = sub_10000588C((uint64_t *)&unk_10163B7C0);
  *(void *)(v5 + 288) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MemberSharingCircle();
  *(void *)(v5 + 296) = v6;
  *(void *)(v5 + 304) = *(void *)(v6 - 8);
  *(void *)(v5 + 312) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016607D0);
  *(void *)(v5 + 320) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnerPeerTrust();
  *(void *)(v5 + 328) = v7;
  *(void *)(v5 + 336) = *(void *)(v7 - 8);
  *(void *)(v5 + 344) = swift_task_alloc();
  *(void *)(v5 + 352) = sub_10000588C((uint64_t *)&unk_101638D10);
  *(void *)(v5 + 360) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OwnerSharingCircle();
  *(void *)(v5 + 368) = v8;
  *(void *)(v5 + 376) = *(void *)(v8 - 8);
  *(void *)(v5 + 384) = swift_task_alloc();
  *(void *)(v5 + 392) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v5 + 400) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v5 + 408) = v10;
  *(void *)(v5 + 416) = *(void *)(v10 + 64);
  *(void *)(v5 + 424) = swift_task_alloc();
  *(void *)(v5 + 432) = swift_task_alloc();
  *(void *)(v5 + 440) = swift_task_alloc();
  return _swift_task_switch(sub_10010171C, v4, 0);
}

uint64_t sub_10010171C()
{
  unint64_t v23 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = (long long *)(v0 + 7);
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[55];
  uint64_t v5 = v0[50];
  uint64_t v4 = v0[51];
  uint64_t v6 = type metadata accessor for Logger();
  v0[56] = v6;
  sub_100010324(v6, (uint64_t)qword_10170D788);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[57] = v7;
  v0[58] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v3, v2, v5);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[55];
  uint64_t v12 = v0[50];
  uint64_t v13 = v0[51];
  if (v10)
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 141558275;
    v0[29] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[30] = sub_1008FA0F0(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v17(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Handle decline %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (long long *)(v0 + 7);
    swift_slowDealloc();
  }
  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v17(v0[55], v0[50]);
  }

  v0[59] = v17;
  uint64_t v18 = qword_1016375E8;
  swift_retain();
  if (v18 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v1, (uint64_t *)&unk_101638D30);
  if (v0[10])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001CD44(v0 + 2, v0[5]);
    uint64_t v21 = (uint64_t (__cdecl *)())((char *)&dword_1016390F0 + dword_1016390F0);
    unint64_t v20 = (void *)swift_task_alloc();
    v0[60] = v20;
    *unint64_t v20 = v0;
    v20[1] = sub_100101AB0;
    return v21();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100101AB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 272);
  *(void *)(*(void *)v1 + 488) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100101BC8, v2, 0);
}

uint64_t sub_100101BC8()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[61])
  {
    uint64_t v2 = v0[34];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(void *)(v2 + 136);
    v0[62] = v3;
    return _swift_task_switch(sub_100101E08, v3, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636890 != -1) {
      swift_once();
    }
    sub_100010324(v0[56], (uint64_t)qword_10170D7A0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconStore available!", v6, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v7 = 0x74536E6F63616542;
    v7[1] = 0xEB0000000065726FLL;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100101E08()
{
  uint64_t v1 = *(void *)(v0 + 496);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
  uint64_t v3 = *(void *)(v0 + 432);
  uint64_t v4 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 400);
  uint64_t v6 = *(void *)(v0 + 248);
  *(void *)(v0 + 504) = *(void *)(v1 + 136);
  v2(v3, v6, v5);
  int v7 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 680) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 512) = v9;
  *(void *)(v9 + 16) = v1;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 520) = v10;
  *(void *)(v0 + 528) = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v3, v5);
  swift_retain();
  return _swift_task_switch(sub_100101F0C, 0, 0);
}

uint64_t sub_100101F0C()
{
  uint64_t v2 = v0[63];
  uint64_t v1 = v0[64];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[67] = v3;
  v3[2] = v2;
  v3[3] = sub_10012AADC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[68] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100102010;
  uint64_t v6 = v0[44];
  uint64_t v5 = v0[45];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340A4, v3, v6);
}

uint64_t sub_100102010()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 272);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100102160, v1, 0);
}

uint64_t sub_100102160()
{
  uint64_t v1 = *(void *)(v0 + 360);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 376) + 48))(v1, 1, *(void *)(v0 + 368)) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_101638D10);
    uint64_t v2 = *(void *)(v0 + 496);
    return _swift_task_switch(sub_100103464, v2, 0);
  }
  else
  {
    sub_10012EC2C(v1, *(void *)(v0 + 392), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 552) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10010228C;
    uint64_t v4 = *(void *)(v0 + 256);
    uint64_t v5 = *(void *)(v0 + 264);
    uint64_t v6 = *(unsigned __int8 *)(v0 + 684);
    return sub_100EA2DF0(v6, v4, v5);
  }
}

uint64_t sub_10010228C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 560) = a1;
  *(void *)(v4 + 568) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 272);
  if (v1) {
    uint64_t v6 = sub_10010404C;
  }
  else {
    uint64_t v6 = sub_1001023C4;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001023C4()
{
  uint64_t v1 = *(void *)(v0 + 560);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(*(void *)(v0 + 336) + 80);
    sub_100130CA8(v1 + ((v2 + 32) & ~v2), *(void *)(v0 + 320), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v6 = *(void *)(v0 + 320);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  uint64_t v8 = *(void *)(v0 + 320);
  if (v7 == 1)
  {
    sub_10012C39C(*(void *)(v0 + 392), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10001DAB4(v8, (uint64_t *)&unk_1016607D0);
    uint64_t v9 = *(void *)(v0 + 496);
    uint64_t v10 = (uint64_t)sub_100103464;
    uint64_t v11 = 0;
    return _swift_task_switch(v10, v9, v11);
  }
  sub_10012EC2C(*(void *)(v0 + 320), *(void *)(v0 + 344), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  uint64_t v10 = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (!*(void *)(v0 + 120))
  {
    __break(1u);
    return _swift_task_switch(v10, v9, v11);
  }
  sub_10001CEB0((long long *)(v0 + 96), v0 + 136);
  sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
  uint64_t v14 = (uint64_t (*)(void))((char *)&dword_1016390A8 + dword_1016390A8);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 576) = v12;
  void *v12 = v0;
  v12[1] = sub_1001025E8;
  return v14();
}

uint64_t sub_1001025E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 272);
  *(void *)(*(void *)v1 + 584) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100102700, v2, 0);
}

uint64_t sub_100102700()
{
  uint64_t v1 = v0 + 136;
  if (*(void *)(v0 + 584))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v13 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10165CF98 + dword_10165CF98);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 592) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100102988;
    uint64_t v3 = *(void *)(v0 + 256);
    uint64_t v4 = *(void *)(v0 + 264);
    char v5 = *(unsigned char *)(v0 + 684);
    return v13(v5, v3, v4);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636890 != -1) {
      swift_once();
    }
    sub_100010324(*(void *)(v0 + 448), (uint64_t)qword_10170D7A0);
    int v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No FamilyCircleService available!", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void *)(v0 + 392);
    uint64_t v11 = *(void *)(v0 + 344);

    swift_release();
    sub_10012C39C(v11, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    sub_10012C39C(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
}

uint64_t sub_100102988(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[75] = a2;
  v4[76] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = v4[34];
    uint64_t v6 = sub_100102C10;
  }
  else
  {
    uint64_t v5 = v4[73];
    uint64_t v6 = sub_100102AA4;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100102AA4()
{
  uint64_t v1 = *(void *)(v0 + 272);
  if (*(void *)(v0 + 600))
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100102B24;
  }
  else
  {
    uint64_t v2 = sub_100102D50;
  }
  return _swift_task_switch(v2, v1, 0);
}

uint64_t sub_100102B24()
{
  uint64_t v1 = v0[48];
  sub_100130CA8(v0[49], v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_101641F10 + dword_101641F10);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[77] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100103044;
  uint64_t v3 = v0[49];
  uint64_t v4 = v0[43];
  return v6(v4, v3, 1);
}

uint64_t sub_100102C10()
{
  uint64_t v1 = v0[49];
  uint64_t v2 = v0[43];
  swift_release();
  swift_release();
  sub_10012C39C(v2, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100102D50()
{
  uint64_t v1 = v0[48];
  uint64_t v2 = v0[46];
  sub_100130CA8(v0[49], v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v3 = sub_101158C68((uint64_t)&off_1015A04B0);
  LOBYTE(v2) = sub_100DC6050(*(unsigned __int8 *)(v1 + *(int *)(v2 + 28)), v3);
  swift_bridgeObjectRelease();
  sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  if (v2)
  {
    if (qword_101636890 != -1) {
      swift_once();
    }
    sub_100010324(v0[56], (uint64_t)qword_10170D7A0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Ignoring incoming UTFS message from non-family member", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = v0[49];
    uint64_t v8 = v0[43];

    swift_release();
    swift_release();
    sub_10012C39C(v8, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    sub_10012C39C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_101641F10 + dword_101641F10);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[77] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100103044;
    uint64_t v12 = v0[49];
    uint64_t v13 = v0[43];
    return v14(v13, v12, 1);
  }
}

uint64_t sub_100103044()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 624) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 272);
  if (v0) {
    uint64_t v4 = sub_100103324;
  }
  else {
    uint64_t v4 = sub_100103170;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100103170()
{
  uint64_t v1 = v0[49];
  uint64_t v2 = v0[43];
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_release();
  swift_release();
  sub_10012C39C(v2, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100103324()
{
  uint64_t v1 = v0[49];
  uint64_t v2 = v0[43];
  swift_release();
  swift_release();
  sub_10012C39C(v2, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100103464()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 520);
  uint64_t v2 = *(void *)(v0 + 496);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
  uint64_t v4 = *(void *)(v0 + 432);
  uint64_t v5 = *(void *)(v0 + 400);
  uint64_t v6 = *(void *)(v0 + 248);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 680) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 680);
  *(void *)(v0 + 632) = *(void *)(v2 + 136);
  v3(v4, v6, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 640) = v8;
  *(void *)(v8 + 16) = v2;
  v1(v8 + v7, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_10010355C, 0, 0);
}

uint64_t sub_10010355C()
{
  uint64_t v1 = v0[80];
  uint64_t v2 = v0[79];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[81] = v3;
  v3[2] = v2;
  v3[3] = sub_10012AA74;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[82] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100103664;
  uint64_t v6 = v0[35];
  uint64_t v5 = v0[36];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340A8, v3, v6);
}

uint64_t sub_100103664()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 272);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001037B4, v1, 0);
}

uint64_t sub_1001037B4()
{
  uint64_t v27 = v0;
  uint64_t v1 = v0[37];
  uint64_t v2 = v0[36];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[38] + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, (uint64_t *)&unk_10163B7C0);
    type metadata accessor for SPBeaconSharingError(0);
    v0[27] = 4;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10012B44C((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
LABEL_13:
    return v3();
  }
  uint64_t v4 = v0[39];
  sub_10012EC2C(v2, v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  if (*(unsigned char *)(v4 + *(int *)(v1 + 40)) != 2)
  {
    if (qword_101636890 != -1) {
      swift_once();
    }
    uint64_t v8 = (void (*)(uint64_t, uint64_t, uint64_t))v0[57];
    uint64_t v9 = v0[53];
    uint64_t v10 = v0[50];
    uint64_t v11 = v0[31];
    sub_100010324(v0[56], (uint64_t)qword_10170D7A0);
    v8(v9, v11, v10);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[59];
    uint64_t v16 = v0[53];
    uint64_t v17 = v0[50];
    uint64_t v18 = v0[39];
    if (v14)
    {
      uint64_t v25 = v0[39];
      unint64_t v23 = (void (*)(uint64_t, uint64_t))v0[59];
      uint64_t v19 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 141558275;
      v0[25] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2081;
      sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[26] = sub_1008FA0F0(v20, v21, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v23(v16, v17);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Received decline for not requested member share %{private,mask.hash}s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      uint64_t v22 = v25;
    }
    else
    {

      swift_release();
      v15(v16, v17);
      uint64_t v22 = v18;
    }
    sub_10012C39C(v22, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    goto LABEL_13;
  }
  uint64_t v24 = (uint64_t (*)(uint64_t))((char *)&dword_101641F28 + dword_101641F28);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[83] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100103D00;
  uint64_t v6 = v0[39];
  return v24(v6);
}

uint64_t sub_100103D00()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 672) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 272);
  if (v0) {
    uint64_t v4 = sub_100103F38;
  }
  else {
    uint64_t v4 = sub_100103E2C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100103E2C()
{
  uint64_t v1 = *(void *)(v0 + 312);
  swift_release();
  sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100103F38()
{
  uint64_t v1 = *(void *)(v0 + 312);
  swift_release();
  sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10010404C()
{
  uint64_t v1 = *(void *)(v0 + 392);
  swift_release();
  sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100104160(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  sub_10000588C((uint64_t *)&unk_10163BF10);
  v2[8] = swift_task_alloc();
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_101657AD0);
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = type metadata accessor for WildModeAssociationRecord(0);
  v2[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[14] = v4;
  v2[15] = *(void *)(v4 - 8);
  v2[16] = swift_task_alloc();
  return _swift_task_switch(sub_1001042E0, v1, 0);
}

uint64_t sub_1001042E0()
{
  uint64_t v20 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[14];
  uint64_t v5 = type metadata accessor for Logger();
  v0[17] = sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[15];
  uint64_t v9 = v0[16];
  uint64_t v11 = v0[14];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558275;
    v0[4] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_1008FA0F0(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Request unknown beacon %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[16], v0[14]);
  }

  v0[18] = *(void *)(v0[7] + 136);
  uint64_t v15 = (void *)swift_task_alloc();
  v0[19] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_1001045B0;
  uint64_t v16 = v0[13];
  uint64_t v17 = v0[6];
  return sub_100E5FB50(v16, v17);
}

uint64_t sub_1001045B0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0) {
    uint64_t v4 = sub_100105080;
  }
  else {
    uint64_t v4 = sub_1001046DC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001046DC()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v1 + *(int *)(v2 + 48);
  uint64_t v4 = *(void *)(v3 + 16);
  v0[21] = v4;
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    uint64_t v6 = v1 + *(int *)(v2 + 28);
    char v7 = *(unsigned char *)v3;
    swift_bridgeObjectRetain();
    BOOL v8 = (void *)swift_task_alloc();
    v0[22] = v8;
    *BOOL v8 = v0;
    v8[1] = sub_100104950;
    uint64_t v9 = v0[8];
    uint64_t v10 = v0[6];
    return sub_100E5BB78(v9, v10, v7, v5, v4, v6);
  }
  else
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failure in share requesting, can't find beacon.", v14, 2u);
      swift_slowDealloc();
    }
    uint64_t v15 = v0[13];

    type metadata accessor for SPBeaconSharingError(0);
    v0[3] = 4;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10012B44C((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    sub_10012C39C(v15, type metadata accessor for WildModeAssociationRecord);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t sub_100104950()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v4 = sub_100105110;
  }
  else {
    uint64_t v4 = sub_100104A98;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100104A98()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[10] + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, (uint64_t *)&unk_10163BF10);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure in share requesting, can't find beacon.", v5, 2u);
      swift_slowDealloc();
    }
    uint64_t v6 = v0[13];

    type metadata accessor for SPBeaconSharingError(0);
    v0[3] = 4;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10012B44C((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    sub_10012C39C(v6, type metadata accessor for WildModeAssociationRecord);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v0[11];
    uint64_t v10 = *(int *)(v1 + 48);
    uint64_t v11 = v9 + v10;
    uint64_t v12 = v2 + v10;
    sub_10012EC2C(v2, v9, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    sub_10012EC2C(v12, v11, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016420F8 + dword_1016420F8);
    os_log_type_t v13 = (void *)swift_task_alloc();
    v0[24] = v13;
    void *v13 = v0;
    v13[1] = sub_100104D50;
    uint64_t v14 = v0[11];
    return v15(v11, v14);
  }
}

uint64_t sub_100104D50()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0) {
    os_log_type_t v4 = sub_100104FC0;
  }
  else {
    os_log_type_t v4 = sub_100104E7C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100104E7C()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[11];
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  sub_10001DAB4(v2, (uint64_t *)&unk_101657AD0);
  sub_10012C39C(v1, type metadata accessor for WildModeAssociationRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100104FC0()
{
  uint64_t v1 = v0[13];
  sub_10001DAB4(v0[11], (uint64_t *)&unk_101657AD0);
  sub_10012C39C(v1, type metadata accessor for WildModeAssociationRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100105080()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100105110()
{
  sub_10012C39C(*(void *)(v0 + 104), type metadata accessor for WildModeAssociationRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001051BC(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return _swift_task_switch(sub_1001051DC, v1, 0);
}

uint64_t sub_1001051DC()
{
  uint64_t v1 = *(void *)(v0[8] + 200);
  uint64_t v2 = type metadata accessor for MemberCircleRevokeManager();
  v0[2] = v1;
  v0[5] = v2;
  v0[6] = &off_101607480;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101642150 + dword_101642150);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[9] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001052C0;
  uint64_t v4 = v0[7];
  return v6(v4, (uint64_t)(v0 + 2));
}

uint64_t sub_1001052C0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = sub_1001054C4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 64);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_1001053E8;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001053E8()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001054C4()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100105528(uint64_t a1)
{
  v2[60] = a1;
  v2[61] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[62] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[63] = v4;
  v2[64] = *(void *)(v4 + 64);
  v2[65] = swift_task_alloc();
  v2[66] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[67] = swift_task_alloc();
  return _swift_task_switch(sub_100105630, v1, 0);
}

uint64_t sub_100105630()
{
  uint64_t v1 = *(void *)(v0 + 480);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 544) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 496);
    uint64_t v4 = *(void *)(v0 + 504);
    int v5 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 688) = v5;
    *(void *)(v0 + 552) = *(void *)(v4 + 72);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    *(void *)(v0 + 560) = v6;
    *(void *)(v0 + 568) = 0;
    uint64_t v7 = *(void *)(v0 + 536);
    uint64_t v8 = v1 + ((v5 + 32) & ~(unint64_t)v5);
    *(void *)(v0 + 576) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    swift_bridgeObjectRetain();
    v6(v7, v8, v3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v7, 0, 1, v3);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v7, 1, v3) != 1)
    {
      uint64_t v9 = *(void *)(v0 + 536);
      uint64_t v10 = *(void *)(v0 + 528);
      uint64_t v11 = *(void *)(v0 + 496);
      uint64_t v12 = *(void *)(v0 + 504);
      os_log_type_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
      *(void *)(v0 + 584) = v13;
      *(void *)(v0 + 592) = (v12 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v13(v10, v9, v11);
      return _swift_task_switch(sub_10010588C, 0, 0);
    }
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 536);
    uint64_t v15 = *(void *)(v0 + 496);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 504) + 56);
    swift_bridgeObjectRetain();
    v16(v14, 1, 1, v15);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_10010588C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 120))
  {
    sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 600) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1001059C8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001059C8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 608) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100105AC8, 0, 0);
}

uint64_t sub_100105AC8()
{
  uint64_t v1 = v0 + 16;
  if (!*(void *)(v0 + 608))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170D788);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No BeaconStoreActor available!", v10, 2u);
      swift_slowDealloc();
    }

    uint64_t v3 = *(void *)(v0 + 488);
    uint64_t v2 = (uint64_t)sub_100134224;
    uint64_t v4 = 0;
    return _swift_task_switch(v2, v3, v4);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v2 = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 216, (uint64_t *)&unk_101638D30);
  if (!*(void *)(v0 + 240))
  {
    __break(1u);
    return _swift_task_switch(v2, v3, v4);
  }
  sub_10001CEB0((long long *)(v0 + 216), v0 + 176);
  sub_10001CD44((void *)(v0 + 176), *(void *)(v0 + 200));
  uint64_t v11 = (uint64_t (__cdecl *)())((char *)&dword_1016390C0 + dword_1016390C0);
  int v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 616) = v5;
  *int v5 = v0;
  v5[1] = sub_100105CBC;
  return v11();
}

uint64_t sub_100105CBC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 624) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100105DBC, 0, 0);
}

uint64_t sub_100105DBC()
{
  uint64_t v1 = v0 + 176;
  uint64_t v2 = *(void *)(v0 + 624);
  if (!v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170D788);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No IDSTransportService_ItemSharingCrossAccount available!", v12, 2u);
      swift_slowDealloc();
    }

    swift_release();
    uint64_t v5 = *(void *)(v0 + 488);
    uint64_t v4 = (uint64_t)sub_100134224;
    uint64_t v6 = 0;
    return _swift_task_switch(v4, v5, v6);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v3 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  *(void *)(v0 + 632) = v3;
  *(void *)(v0 + 160) = v3;
  *(void *)(v0 + 168) = &off_1015F0C30;
  *(void *)(v0 + 136) = v2;
  uint64_t v4 = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 296, (uint64_t *)&unk_101638D30);
  if (!*(void *)(v0 + 320))
  {
    __break(1u);
    return _swift_task_switch(v4, v5, v6);
  }
  sub_10001CEB0((long long *)(v0 + 296), v0 + 256);
  sub_10001CD44((void *)(v0 + 256), *(void *)(v0 + 280));
  os_log_type_t v13 = (uint64_t (__cdecl *)())((char *)&dword_1016390A8 + dword_1016390A8);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 640) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100105FD8;
  return v13();
}

uint64_t sub_100105FD8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 648) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001060D8, 0, 0);
}

uint64_t sub_1001060D8()
{
  uint64_t v1 = v0 + 256;
  uint64_t v2 = *(void *)(v0 + 648);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 632);
    uint64_t v32 = *(void *)(v0 + 608);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = *(void *)(v0 + 160);
    sub_1000BD078(v0 + 136, v4);
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v30 = (uint64_t *)swift_task_alloc();
    (*(void (**)(void))(v5 + 16))();
    uint64_t v6 = *v30;
    *(void *)(v0 + 360) = v3;
    *(void *)(v0 + 368) = &off_1015F0C30;
    *(void *)(v0 + 336) = v6;
    uint64_t v7 = type metadata accessor for FamilyCircleService();
    *(void *)(v0 + 400) = v7;
    *(void *)(v0 + 408) = &off_1015F13C8;
    *(void *)(v0 + 376) = v2;
    type metadata accessor for ShareDeclineUseCase();
    uint64_t v8 = swift_allocObject();
    *(void *)(v0 + 656) = v8;
    uint64_t v9 = sub_1000BD078(v0 + 336, v3);
    uint64_t v10 = *(void *)(v3 - 8);
    os_log_type_t v11 = (uint64_t *)swift_task_alloc();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16))(v11, v9, v3);
    uint64_t v12 = *(void *)(v0 + 400);
    uint64_t v13 = sub_1000BD078(v0 + 376, v12);
    uint64_t v14 = *(void *)(v12 - 8);
    uint64_t v15 = (void *)swift_task_alloc();
    (*(void (**)(void *, uint64_t, uint64_t))(v14 + 16))(v15, v13, v12);
    uint64_t v16 = *v11;
    *(void *)(v0 + 56) = *v15;
    *(void *)(v0 + 440) = v3;
    *(void *)(v0 + 448) = &off_1015F0C30;
    *(void *)(v0 + 416) = v16;
    *(void *)(v0 + 80) = v7;
    *(void *)(v0 + 88) = &off_1015F13C8;
    swift_defaultActor_initialize();
    *(void *)(v8 + 112) = v32;
    sub_10001CEB0((long long *)(v0 + 416), v8 + 120);
    sub_10001CEB0((long long *)(v0 + 56), v8 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 376);
    swift_task_dealloc();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 336);
    swift_task_dealloc();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 136);
    swift_task_dealloc();
    if (qword_101636A80 != -1) {
      swift_once();
    }
    uint64_t v17 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 584);
    uint64_t v18 = *(void *)(v0 + 520);
    uint64_t v19 = *(void *)(v0 + 496);
    unint64_t v20 = (*(unsigned __int8 *)(v0 + 688) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 688);
    unint64_t v21 = v20 + *(void *)(v0 + 512);
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 560))(v18, *(void *)(v0 + 528), v19);
    uint64_t v22 = swift_allocObject();
    *(void *)(v0 + 664) = v22;
    *(void *)(v22 + 16) = v8;
    v17(v22 + v20, v18, v19);
    *(unsigned char *)(v22 + v21) = 1;
    uint64_t v31 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                  + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
    swift_retain();
    unint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 672) = v23;
    *unint64_t v23 = v0;
    v23[1] = sub_100106614;
    return v31(&unk_10163B9D0, v22);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_10170D788);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "No FamilyCircleService available!", v28, 2u);
      swift_slowDealloc();
    }

    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 136);
    uint64_t v29 = *(void *)(v0 + 488);
    return _swift_task_switch(sub_100134224, v29, 0);
  }
}

uint64_t sub_100106614()
{
  *(void *)(*(void *)v1 + 680) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_100106A18;
  }
  else {
    uint64_t v2 = sub_100106744;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100106744()
{
  uint64_t v1 = *(void *)(v0 + 488);
  swift_release();
  return _swift_task_switch(sub_1001067B0, v1, 0);
}

uint64_t sub_1001067B0()
{
  uint64_t v1 = *(void *)(v0 + 544);
  uint64_t v2 = *(void *)(v0 + 568) + 1;
  (*(void (**)(void, void))(*(void *)(v0 + 504) + 8))(*(void *)(v0 + 528), *(void *)(v0 + 496));
  if (v2 == v1)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 504) + 56))(*(void *)(v0 + 536), 1, 1, *(void *)(v0 + 496));
LABEL_4:
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  uint64_t v3 = *(void *)(v0 + 568) + 1;
  *(void *)(v0 + 568) = v3;
  uint64_t v4 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 560);
  uint64_t v5 = *(void *)(v0 + 536);
  uint64_t v6 = *(void *)(v0 + 496);
  uint64_t v7 = *(void *)(v0 + 504);
  unint64_t v8 = *(void *)(v0 + 480)
     + ((*(unsigned __int8 *)(v0 + 688) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 688))
     + *(void *)(v0 + 552) * v3;
  *(void *)(v0 + 576) = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v4(v5, v8, v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1) {
    goto LABEL_4;
  }
  uint64_t v11 = *(void *)(v0 + 536);
  uint64_t v12 = *(void *)(v0 + 528);
  uint64_t v13 = *(void *)(v0 + 496);
  uint64_t v14 = *(void *)(v0 + 504);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
  *(void *)(v0 + 584) = v15;
  *(void *)(v0 + 592) = (v14 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v15(v12, v11, v13);
  return _swift_task_switch(sub_10010588C, 0, 0);
}

uint64_t sub_100106A18()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 488);
  return _swift_task_switch(sub_100134224, v1, 0);
}

uint64_t sub_100106A8C(uint64_t a1)
{
  v2[30] = a1;
  v2[31] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[32] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[33] = v4;
  v2[34] = *(void *)(v4 + 64);
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MemberSharingCircle();
  v2[38] = v5;
  v2[39] = *(void *)(v5 - 8);
  v2[40] = swift_task_alloc();
  return _swift_task_switch(sub_100106BCC, v1, 0);
}

uint64_t sub_100106BCC()
{
  v0[41] = *(void *)(v0[31] + 136);
  Swift::Int v1 = sub_100DF2D10((uint64_t)&off_1015A0348);
  v0[42] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[43] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100106C84;
  uint64_t v3 = v0[30];
  return sub_100E59F38(v3, v1);
}

uint64_t sub_100106C84(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 248);
  *(void *)(*(void *)v1 + 352) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100106DB8, v2, 0);
}

uint64_t sub_100106DB8()
{
  uint64_t v22 = v0;
  if (*(void *)(v0[44] + 16))
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v1 = v0[35];
    uint64_t v2 = v0[32];
    uint64_t v3 = v0[33];
    uint64_t v4 = v0[30];
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170D788);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[35];
    uint64_t v10 = v0[32];
    uint64_t v11 = v0[33];
    if (v8)
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 141558275;
      v0[27] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2081;
      sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[28] = sub_1008FA0F0(v13, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Stop sharing of %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v11 + 8))(v0[35], v0[32]);
    }

    unint64_t v20 = (uint64_t (*)(uint64_t))((char *)&dword_101642138 + dword_101642138);
    uint64_t v18 = (void *)swift_task_alloc();
    v0[66] = v18;
    void *v18 = v0;
    v18[1] = sub_10010846C;
    uint64_t v19 = v0[44];
    return v20(v19);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = (void *)swift_task_alloc();
    v0[45] = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_100107114;
    uint64_t v16 = v0[30];
    return sub_100E5B3AC(v16);
  }
}

uint64_t sub_100107114(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 248);
  *(void *)(*(void *)v1 + 368) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10010722C, v2, 0);
}

uint64_t sub_10010722C()
{
  uint64_t v1 = *(void *)(v0 + 368);
  unint64_t v2 = *(void *)(v1 + 16);
  if (v2 >= 2)
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170D788);
    swift_bridgeObjectRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 134217984;
      *(void *)(v0 + 232) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Too much circles to decline on sharing stop! There is %ld circles.", v6, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    unint64_t v2 = *(void *)(v1 + 16);
    uint64_t v1 = *(void *)(v0 + 368);
  }
  *(void *)(v0 + 376) = v2;
  if (v2)
  {
    uint64_t v8 = *(void *)(v0 + 312);
    uint64_t v7 = *(void *)(v0 + 320);
    *(_DWORD *)(v0 + 544) = *(_DWORD *)(*(void *)(v0 + 304) + 28);
    int v9 = *(_DWORD *)(v8 + 80);
    *(_DWORD *)(v0 + 548) = v9;
    *(void *)(v0 + 384) = *(void *)(v8 + 72);
    sub_100130CA8(v1 + ((v9 + 32) & ~(unint64_t)v9), v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(void *)(v0 + 392) = 1;
    uint64_t v10 = *(void *)(v0 + 320);
    uint64_t v11 = *(void *)(v0 + 296);
    uint64_t v12 = *(void *)(v0 + 256);
    uint64_t v13 = *(void *)(v0 + 264);
    uint64_t v14 = v10 + *(int *)(v0 + 544);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    *(void *)(v0 + 400) = v15;
    *(void *)(v0 + 408) = (v13 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v15(v11, v14, v12);
    sub_10012C39C(v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 416) = v16;
    void *v16 = v0;
    v16[1] = sub_100107580;
    return sub_1002703D0();
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
}

uint64_t sub_100107580(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[53] = a1;
  swift_task_dealloc();
  if (v1)
  {
    v3[65] = v1;
    uint64_t v4 = v3[31];
    (*(void (**)(void, void))(v3[33] + 8))(v3[37], v3[32]);
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_1001083E0, v4, 0);
  }
  else
  {
    os_log_type_t v5 = (void *)swift_task_alloc();
    v3[54] = v5;
    *os_log_type_t v5 = v3;
    v5[1] = sub_100107714;
    return sub_1003504DC();
  }
}

uint64_t sub_100107714(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 440) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_release();
    os_log_type_t v5 = sub_100107A20;
  }
  else
  {
    *(void *)(v4 + 448) = a1;
    os_log_type_t v5 = sub_100107844;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100107844()
{
  uint64_t v1 = v0[56];
  uint64_t v2 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[57] = v2;
  v0[15] = v2;
  v0[16] = &off_1015F0C30;
  v0[12] = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[58] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001078F0;
  return sub_1002708BC();
}

uint64_t sub_1001078F0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 472) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_release();
    uint64_t v5 = sub_100107FE8;
  }
  else
  {
    *(void *)(v4 + 480) = a1;
    uint64_t v5 = sub_100107AB0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100107A20()
{
  v0[65] = v0[55];
  uint64_t v1 = v0[31];
  (*(void (**)(void, void))(v0[33] + 8))(v0[37], v0[32]);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001083E0, v1, 0);
}

uint64_t sub_100107AB0()
{
  uint64_t v1 = *(void *)(v0 + 480);
  uint64_t v2 = *(void *)(v0 + 456);
  uint64_t v25 = *(void *)(v0 + 424);
  uint64_t v3 = *(void *)(v0 + 120);
  sub_1000BD078(v0 + 96, v3);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v26 = (uint64_t *)swift_task_alloc();
  (*(void (**)(void))(v4 + 16))();
  uint64_t v5 = *v26;
  *(void *)(v0 + 160) = v2;
  *(void *)(v0 + 168) = &off_1015F0C30;
  *(void *)(v0 + 136) = v5;
  uint64_t v24 = type metadata accessor for FamilyCircleService();
  *(void *)(v0 + 40) = v24;
  *(void *)(v0 + 48) = &off_1015F13C8;
  *(void *)(v0 + 16) = v1;
  type metadata accessor for ShareDeclineUseCase();
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 488) = v6;
  uint64_t v7 = sub_1000BD078(v0 + 136, v2);
  uint64_t v8 = *(void *)(v2 - 8);
  int v9 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(v9, v7, v2);
  uint64_t v10 = *(void *)(v0 + 40);
  uint64_t v11 = sub_1000BD078(v0 + 16, v10);
  uint64_t v12 = *(void *)(v10 - 8);
  uint64_t v13 = (void *)swift_task_alloc();
  (*(void (**)(void *, uint64_t, uint64_t))(v12 + 16))(v13, v11, v10);
  uint64_t v14 = *v9;
  *(void *)(v0 + 56) = *v13;
  *(void *)(v0 + 200) = v2;
  *(void *)(v0 + 208) = &off_1015F0C30;
  *(void *)(v0 + 176) = v14;
  *(void *)(v0 + 80) = v24;
  *(void *)(v0 + 88) = &off_1015F13C8;
  swift_defaultActor_initialize();
  *(void *)(v6 + 112) = v25;
  sub_10001CEB0((long long *)(v0 + 176), v6 + 120);
  sub_10001CEB0((long long *)(v0 + 56), v6 + 160);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 136);
  swift_task_dealloc();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 96);
  swift_task_dealloc();
  if (qword_101636A80 != -1) {
    swift_once();
  }
  uint64_t v15 = *(void *)(v0 + 288);
  uint64_t v17 = *(void *)(v0 + 264);
  uint64_t v16 = *(void *)(v0 + 272);
  uint64_t v18 = *(void *)(v0 + 256);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 400))(v15, *(void *)(v0 + 296), v18);
  unint64_t v19 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = v19 + v16;
  uint64_t v21 = swift_allocObject();
  *(void *)(v0 + 496) = v21;
  *(void *)(v21 + 16) = v6;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))(v21 + v19, v15, v18);
  *(unsigned char *)(v21 + v20) = 0;
  os_log_type_t v27 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v22;
  void *v22 = v0;
  v22[1] = sub_100107EB4;
  return v27(&unk_10163C030, v21);
}

uint64_t sub_100107EB4()
{
  *(void *)(*(void *)v1 + 512) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_100108348;
  }
  else {
    uint64_t v2 = sub_100108080;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100107FE8()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
  v0[65] = v0[59];
  uint64_t v1 = v0[31];
  (*(void (**)(void, void))(v0[33] + 8))(v0[37], v0[32]);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001083E0, v1, 0);
}

uint64_t sub_100108080()
{
  uint64_t v1 = v0[37];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[33];
  uint64_t v4 = v0[31];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return _swift_task_switch(sub_100108114, v4, 0);
}

uint64_t sub_100108114()
{
  uint64_t v1 = *(void *)(v0 + 392);
  if (v1 == *(void *)(v0 + 376))
  {
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    uint64_t result = sub_100130CA8(*(void *)(v0 + 368)+ ((*(unsigned __int8 *)(v0 + 548) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 548))+ *(void *)(v0 + 384) * v1, *(void *)(v0 + 320), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(void *)(v0 + 392) = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *(void *)(v0 + 320);
      uint64_t v5 = *(void *)(v0 + 296);
      uint64_t v6 = *(void *)(v0 + 256);
      uint64_t v7 = *(void *)(v0 + 264);
      uint64_t v8 = v4 + *(int *)(v0 + 544);
      int v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      *(void *)(v0 + 400) = v9;
      *(void *)(v0 + 408) = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v9(v5, v8, v6);
      sub_10012C39C(v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v0 + 416) = v10;
      void *v10 = v0;
      v10[1] = sub_100107580;
      return sub_1002703D0();
    }
  }
  return result;
}

uint64_t sub_100108348()
{
  swift_release();
  v0[65] = v0[64];
  uint64_t v1 = v0[31];
  (*(void (**)(void, void))(v0[33] + 8))(v0[37], v0[32]);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001083E0, v1, 0);
}

uint64_t sub_1001083E0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010846C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 536) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 248);
    uint64_t v4 = sub_1001086AC;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 248);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100108594;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100108594()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001086AC()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100108740(uint64_t a1)
{
  v2[66] = v1;
  v2[65] = a1;
  v2[67] = sub_10000588C((uint64_t *)&unk_101653D50);
  v2[68] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for SharedBeaconRecord(0);
  v2[69] = v3;
  v2[70] = *(void *)(v3 - 8);
  v2[71] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MemberSharingCircle();
  v2[72] = v4;
  v2[73] = *(void *)(v4 - 8);
  v2[74] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v2[75] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[76] = v6;
  v2[77] = *(void *)(v6 + 64);
  v2[78] = swift_task_alloc();
  v2[79] = swift_task_alloc();
  v2[80] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  v2[81] = v7;
  v2[82] = *(void *)(v7 - 8);
  v2[83] = swift_task_alloc();
  return _swift_task_switch(sub_100108970, v1, 0);
}

uint64_t sub_100108970()
{
  uint64_t v14 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[84] = sub_100010324(v1, (uint64_t)qword_10170D788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[65];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    v0[63] = v4;
    type metadata accessor for SPShareType(0);
    uint64_t v6 = String.init<A>(describing:)();
    v0[64] = sub_1008FA0F0(v6, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "forceBreakAllShares of %s type", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v8 = v0[65];
  if (v8)
  {
    uint64_t v11 = *(void *)(v0[66] + 136);
    v0[85] = v11;
    uint64_t v12 = sub_100108C94;
  }
  else
  {
    if ((v8 & 2) == 0)
    {
      type metadata accessor for Transaction();
      swift_allocObject();
      swift_weakInit();
      swift_retain();
      static Transaction.asyncTask(name:block:)();
      swift_release_n();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v9 = (uint64_t (*)(void))v0[1];
      return v9();
    }
    uint64_t v11 = *(void *)(v0[66] + 136);
    v0[102] = v11;
    uint64_t v12 = sub_100109D70;
  }
  return _swift_task_switch(v12, v11, 0);
}

uint64_t sub_100108C94()
{
  *(void *)(v0 + 688) = *(void *)(*(void *)(v0 + 680) + 136);
  swift_retain();
  return _swift_task_switch(sub_100108D08, 0, 0);
}

uint64_t sub_100108D08()
{
  uint64_t v1 = v0[86];
  uint64_t v2 = v0[85];
  os_log_type_t v3 = (void *)swift_task_alloc();
  v0[87] = v3;
  v3[2] = v1;
  v3[3] = sub_1000909A4;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[88] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AA0);
  *uint64_t v4 = v0;
  v4[1] = sub_100108E24;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 61, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100132D38, v3, v5);
}

uint64_t sub_100108E24()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 528);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 712) = *(void *)(v1 + 488);
  return _swift_task_switch(sub_100108F94, v2, 0);
}

uint64_t sub_100108F94()
{
  uint64_t v1 = *(void *)(v0 + 712);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 720) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 664);
    uint64_t v4 = *(void *)(v0 + 656);
    uint64_t v5 = *(void *)(v0 + 608);
    uint64_t v6 = *(int *)(*(void *)(v0 + 648) + 20);
    *(_DWORD *)(v0 + 1032) = v6;
    int v7 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 1036) = v7;
    *(void *)(v0 + 728) = *(void *)(v4 + 72);
    *(void *)(v0 + 736) = 0;
    uint64_t v8 = *(void *)(v0 + 680);
    uint64_t v9 = *(void *)(v0 + 640);
    uint64_t v10 = *(void *)(v0 + 600);
    uint64_t v11 = v3 + v6;
    sub_100130CA8(v1 + ((v7 + 32) & ~(unint64_t)v7), v3, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    *(void *)(v0 + 744) = v12;
    *(void *)(v0 + 752) = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v12(v9, v11, v10);
    sub_10012C39C(v3, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    *(void *)(v0 + 760) = sub_100DF2D10((uint64_t)&off_1015A0370);
    uint64_t v13 = sub_100109224;
    uint64_t v14 = v8;
LABEL_8:
    return _swift_task_switch(v13, v14, 0);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v0 + 520) & 2) != 0)
  {
    uint64_t v14 = *(void *)(*(void *)(v0 + 528) + 136);
    *(void *)(v0 + 816) = v14;
    uint64_t v13 = sub_100109D70;
    goto LABEL_8;
  }
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_100109224()
{
  uint64_t v1 = v0[95];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[93];
  uint64_t v3 = v0[85];
  uint64_t v4 = v0[80];
  uint64_t v5 = v0[79];
  uint64_t v6 = v0[77];
  uint64_t v7 = v0[76];
  uint64_t v8 = v0[75];
  v0[96] = *(void *)(v3 + 136);
  v2(v5, v4, v8);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v10 = (v6 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = swift_allocObject();
  v0[97] = v11;
  *(void *)(v11 + 16) = v3;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v11 + v9, v5, v8);
  *(void *)(v11 + v10) = v1;
  swift_retain();
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100109340, 0, 0);
}

uint64_t sub_100109340()
{
  uint64_t v1 = v0[97];
  uint64_t v2 = v0[96];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[98] = v3;
  v3[2] = v2;
  v3[3] = sub_100132E6C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[99] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_10010945C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 62, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340B0, v3, v5);
}

uint64_t sub_10010945C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 680);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 800) = *(void *)(v1 + 496);
  return _swift_task_switch(sub_1001095CC, v2, 0);
}

uint64_t sub_1001095CC()
{
  uint64_t v1 = v0[80];
  uint64_t v2 = v0[76];
  uint64_t v3 = v0[75];
  uint64_t v4 = v0[66];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100109664, v4, 0);
}

uint64_t sub_100109664()
{
  if (*(void *)(*(void *)(v0 + 800) + 16))
  {
    uint64_t v15 = (uint64_t (*)(uint64_t))((char *)&dword_101641FC8 + dword_101641FC8);
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 808) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10010998C;
    uint64_t v2 = *(void *)(v0 + 800);
    return v15(v2);
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v0 + 736) + 1;
  if (v4 == *(void *)(v0 + 720))
  {
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(v0 + 520) & 2) == 0)
    {
      type metadata accessor for Transaction();
      swift_allocObject();
      swift_weakInit();
      swift_retain();
      static Transaction.asyncTask(name:block:)();
      swift_release_n();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
      return v5();
    }
    uint64_t v14 = *(void *)(*(void *)(v0 + 528) + 136);
    *(void *)(v0 + 816) = v14;
    uint64_t v13 = sub_100109D70;
  }
  else
  {
    *(void *)(v0 + 736) = v4;
    uint64_t v6 = *(void *)(v0 + 680);
    uint64_t v7 = *(void *)(v0 + 664);
    uint64_t v8 = *(void *)(v0 + 640);
    uint64_t v9 = *(void *)(v0 + 608);
    uint64_t v10 = *(void *)(v0 + 600);
    uint64_t v11 = v7 + *(int *)(v0 + 1032);
    sub_100130CA8(*(void *)(v0 + 712)+ ((*(unsigned __int8 *)(v0 + 1036) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1036))+ *(void *)(v0 + 728) * v4, v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    *(void *)(v0 + 744) = v12;
    *(void *)(v0 + 752) = (v9 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v12(v8, v11, v10);
    sub_10012C39C(v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    *(void *)(v0 + 760) = sub_100DF2D10((uint64_t)&off_1015A0370);
    uint64_t v13 = sub_100109224;
    uint64_t v14 = v6;
  }
  return _swift_task_switch(v13, v14, 0);
}

uint64_t sub_10010998C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 528);
  if (v0)
  {
    swift_errorRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1001342E8;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100109AE8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100109AE8()
{
  uint64_t v1 = *(void *)(v0 + 736) + 1;
  if (v1 == *(void *)(v0 + 720))
  {
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(v0 + 520) & 2) == 0)
    {
      type metadata accessor for Transaction();
      swift_allocObject();
      swift_weakInit();
      swift_retain();
      static Transaction.asyncTask(name:block:)();
      swift_release_n();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
      return v2();
    }
    uint64_t v12 = *(void *)(*(void *)(v0 + 528) + 136);
    *(void *)(v0 + 816) = v12;
    uint64_t v11 = sub_100109D70;
  }
  else
  {
    *(void *)(v0 + 736) = v1;
    uint64_t v4 = *(void *)(v0 + 680);
    uint64_t v5 = *(void *)(v0 + 664);
    uint64_t v6 = *(void *)(v0 + 640);
    uint64_t v7 = *(void *)(v0 + 608);
    uint64_t v8 = *(void *)(v0 + 600);
    uint64_t v9 = v5 + *(int *)(v0 + 1032);
    sub_100130CA8(*(void *)(v0 + 712)+ ((*(unsigned __int8 *)(v0 + 1036) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1036))+ *(void *)(v0 + 728) * v1, v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    *(void *)(v0 + 744) = v10;
    *(void *)(v0 + 752) = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v10(v6, v9, v8);
    sub_10012C39C(v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    *(void *)(v0 + 760) = sub_100DF2D10((uint64_t)&off_1015A0370);
    uint64_t v11 = sub_100109224;
    uint64_t v12 = v4;
  }
  return _swift_task_switch(v11, v12, 0);
}

uint64_t sub_100109D70()
{
  *(void *)(v0 + 824) = *(void *)(*(void *)(v0 + 816) + 136);
  swift_retain();
  return _swift_task_switch(sub_100109DE4, 0, 0);
}

uint64_t sub_100109DE4()
{
  uint64_t v1 = v0[103];
  uint64_t v2 = v0[102];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[104] = v3;
  v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[105] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  *uint64_t v4 = v0;
  v4[1] = sub_100109F00;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 60, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340B4, v3, v5);
}

uint64_t sub_100109F00()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 528);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 848) = *(void *)(v1 + 480);
  return _swift_task_switch(sub_10010A070, v2, 0);
}

uint64_t sub_10010A070()
{
  uint64_t v1 = *(void *)(v0 + 848);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 856) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 584);
    uint64_t v4 = *(void *)(v0 + 576);
    int v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 1040) = v5;
    *(void *)(v0 + 864) = *(void *)(v3 + 72);
    *(void *)(v0 + 872) = 0;
    uint64_t v6 = *(void *)(v0 + 816);
    sub_100130CA8(v1 + ((v5 + 32) & ~(unint64_t)v5), *(void *)(v0 + 592), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 1044) = *(_DWORD *)(v4 + 24);
    return _swift_task_switch(sub_10010A26C, v6, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_10010A26C()
{
  uint64_t v1 = *(void *)(v0 + 816);
  uint64_t v2 = *(void *)(v0 + 640);
  uint64_t v3 = *(void *)(v0 + 608);
  uint64_t v4 = *(void *)(v0 + 600);
  uint64_t v5 = *(void *)(v0 + 592) + *(int *)(v0 + 1044);
  *(void *)(v0 + 880) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 888) = v6;
  *(void *)(v0 + 896) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  int v7 = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 1048) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 904) = v9;
  *(void *)(v9 + 16) = v1;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 912) = v10;
  *(void *)(v0 + 920) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_10010A398, 0, 0);
}

uint64_t sub_10010A398()
{
  uint64_t v1 = v0[113];
  uint64_t v2 = v0[110];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[116] = v3;
  v3[2] = v2;
  v3[3] = sub_10012E338;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[117] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10010A4A4;
  uint64_t v5 = v0[68];
  uint64_t v6 = v0[67];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340AC, v3, v6);
}

uint64_t sub_10010A4A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 528);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_10010A5F4, v1, 0);
}

uint64_t sub_10010A5F4()
{
  uint64_t v1 = *(void *)(v0 + 552);
  uint64_t v2 = *(void *)(v0 + 544);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 560) + 48))(v2, 1, v1) == 1)
  {
    sub_10012C39C(*(void *)(v0 + 592), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    sub_10001DAB4(v2, (uint64_t *)&unk_101653D50);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 568);
    sub_10012EC2C(v2, v3, type metadata accessor for SharedBeaconRecord);
    if (*(unsigned char *)(v3 + *(int *)(v1 + 64)) == 2)
    {
      *(_DWORD *)(v0 + 1052) = *(_DWORD *)(*(void *)(v0 + 576) + 28);
      uint64_t v4 = sub_10010A8E4;
      uint64_t v5 = 0;
      goto LABEL_11;
    }
    uint64_t v6 = *(void *)(v0 + 592);
    sub_10012C39C(*(void *)(v0 + 568), type metadata accessor for SharedBeaconRecord);
    sub_10012C39C(v6, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  }
  uint64_t v7 = *(void *)(v0 + 872) + 1;
  if (v7 == *(void *)(v0 + 856))
  {
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  *(void *)(v0 + 872) = v7;
  uint64_t v10 = *(void *)(v0 + 816);
  uint64_t v11 = *(void *)(v0 + 576);
  sub_100130CA8(*(void *)(v0 + 848)+ ((*(unsigned __int8 *)(v0 + 1040) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1040))+ *(void *)(v0 + 864) * v7, *(void *)(v0 + 592), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  *(_DWORD *)(v0 + 1044) = *(_DWORD *)(v11 + 24);
  uint64_t v4 = sub_10010A26C;
  uint64_t v5 = v10;
LABEL_11:
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_10010A8E4()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 160))
  {
    sub_10001CEB0((long long *)(v0 + 136), v0 + 56);
    sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 944) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10010AA20;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10010AA20(uint64_t a1)
{
  *(void *)(*(void *)v1 + 952) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10010AB20, 0, 0);
}

uint64_t sub_10010AB20()
{
  uint64_t v1 = v0 + 56;
  if (!*(void *)(v0 + 952))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No BeaconStoreActor available!", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t v3 = *(void *)(v0 + 528);
    uint64_t v2 = (uint64_t)sub_1001340B8;
    uint64_t v4 = 0;
    return _swift_task_switch(v2, v3, v4);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v2 = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 256, (uint64_t *)&unk_101638D30);
  if (!*(void *)(v0 + 280))
  {
    __break(1u);
    return _swift_task_switch(v2, v3, v4);
  }
  sub_10001CEB0((long long *)(v0 + 256), v0 + 216);
  sub_10001CD44((void *)(v0 + 216), *(void *)(v0 + 240));
  uint64_t v10 = (uint64_t (__cdecl *)())((char *)&dword_1016390C0 + dword_1016390C0);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 960) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10010ACD0;
  return v10();
}

uint64_t sub_10010ACD0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 968) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10010ADD0, 0, 0);
}

uint64_t sub_10010ADD0()
{
  uint64_t v1 = v0 + 216;
  uint64_t v2 = *(void *)(v0 + 968);
  if (!v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, (os_log_type_t)v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, (os_log_type_t)v10, "No IDSTransportService_ItemSharingCrossAccount available!", v11, 2u);
      swift_slowDealloc();
    }

    swift_release();
    uint64_t v5 = *(void *)(v0 + 528);
    uint64_t v4 = (uint64_t)sub_1001340B8;
    uint64_t v6 = 0;
    return _swift_task_switch(v4, v5, v6);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v3 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  *(void *)(v0 + 976) = v3;
  *(void *)(v0 + 200) = v3;
  *(void *)(v0 + 208) = &off_1015F0C30;
  *(void *)(v0 + 176) = v2;
  uint64_t v4 = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 16, (uint64_t *)&unk_101638D30);
  if (!*(void *)(v0 + 40))
  {
    __break(1u);
    return _swift_task_switch(v4, v5, v6);
  }
  sub_10001CEB0((long long *)(v0 + 16), v0 + 296);
  sub_10001CD44((void *)(v0 + 296), *(void *)(v0 + 320));
  uint64_t v12 = (uint64_t (__cdecl *)())((char *)&dword_1016390A8 + dword_1016390A8);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 984) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10010AFA8;
  return v12();
}

uint64_t sub_10010AFA8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 992) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10010B0A8, 0, 0);
}

uint64_t sub_10010B0A8()
{
  uint64_t v1 = v0 + 296;
  uint64_t v2 = *(void *)(v0 + 992);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 976);
    uint64_t v29 = *(void *)(v0 + 952);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = *(void *)(v0 + 200);
    sub_1000BD078(v0 + 176, v4);
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v28 = (uint64_t *)swift_task_alloc();
    (*(void (**)(void))(v5 + 16))();
    uint64_t v6 = *v28;
    *(void *)(v0 + 400) = v3;
    *(void *)(v0 + 408) = &off_1015F0C30;
    *(void *)(v0 + 376) = v6;
    uint64_t v7 = type metadata accessor for FamilyCircleService();
    *(void *)(v0 + 440) = v7;
    *(void *)(v0 + 448) = &off_1015F13C8;
    *(void *)(v0 + 416) = v2;
    type metadata accessor for ShareDeclineUseCase();
    uint64_t v8 = swift_allocObject();
    *(void *)(v0 + 1000) = v8;
    uint64_t v9 = sub_1000BD078(v0 + 376, v3);
    uint64_t v10 = *(void *)(v3 - 8);
    uint64_t v11 = (void *)swift_task_alloc();
    (*(void (**)(void *, uint64_t, uint64_t))(v10 + 16))(v11, v9, v3);
    uint64_t v12 = *(void *)(v0 + 440);
    uint64_t v13 = sub_1000BD078(v0 + 416, v12);
    uint64_t v14 = *(void *)(v12 - 8);
    uint64_t v15 = (uint64_t *)swift_task_alloc();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(v15, v13, v12);
    uint64_t v16 = *v15;
    *(void *)(v0 + 96) = *v11;
    *(void *)(v0 + 120) = v3;
    *(void *)(v0 + 128) = &off_1015F0C30;
    *(void *)(v0 + 360) = v7;
    *(void *)(v0 + 368) = &off_1015F13C8;
    *(void *)(v0 + 336) = v16;
    swift_defaultActor_initialize();
    *(void *)(v8 + 112) = v29;
    sub_10001CEB0((long long *)(v0 + 96), v8 + 120);
    sub_10001CEB0((long long *)(v0 + 336), v8 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 416);
    swift_task_dealloc();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 376);
    swift_task_dealloc();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 176);
    swift_task_dealloc();
    if (qword_101636A80 != -1) {
      swift_once();
    }
    uint64_t v17 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 912);
    uint64_t v18 = *(void *)(v0 + 624);
    uint64_t v19 = *(void *)(v0 + 600);
    unint64_t v20 = (*(unsigned __int8 *)(v0 + 1048) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1048);
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 888))(v18, *(void *)(v0 + 592) + *(int *)(v0 + 1052), v19);
    uint64_t v21 = swift_allocObject();
    *(void *)(v0 + 1008) = v21;
    *(void *)(v21 + 16) = v8;
    v17(v21 + v20, v18, v19);
    uint64_t v30 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                  + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
    swift_retain();
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 1016) = v22;
    void *v22 = v0;
    v22[1] = sub_10010B598;
    return v30(&unk_10163C000, v21);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "No FamilyCircleService available!", v26, 2u);
      swift_slowDealloc();
    }

    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 176);
    uint64_t v27 = *(void *)(v0 + 528);
    return _swift_task_switch(sub_1001340B8, v27, 0);
  }
}

uint64_t sub_10010B598()
{
  *(void *)(*(void *)v1 + 1024) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_10010B96C;
  }
  else {
    uint64_t v2 = sub_10010B6C8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10010B6C8()
{
  uint64_t v1 = *(void *)(v0 + 528);
  swift_release();
  return _swift_task_switch(sub_10010B734, v1, 0);
}

uint64_t sub_10010B734()
{
  uint64_t v1 = *(void *)(v0 + 592);
  sub_10012C39C(*(void *)(v0 + 568), type metadata accessor for SharedBeaconRecord);
  sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v2 = *(void *)(v0 + 872) + 1;
  if (v2 == *(void *)(v0 + 856))
  {
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    *(void *)(v0 + 872) = v2;
    uint64_t v5 = *(void *)(v0 + 816);
    uint64_t v6 = *(void *)(v0 + 576);
    sub_100130CA8(*(void *)(v0 + 848)+ ((*(unsigned __int8 *)(v0 + 1040) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1040))+ *(void *)(v0 + 864) * v2, *(void *)(v0 + 592), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 1044) = *(_DWORD *)(v6 + 24);
    return _swift_task_switch(sub_10010A26C, v5, 0);
  }
}

uint64_t sub_10010B96C()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 528);
  return _swift_task_switch(sub_1001340B8, v1, 0);
}

uint64_t sub_10010B9E0(uint64_t a1)
{
  v2[28] = a1;
  v2[29] = v1;
  uint64_t v3 = type metadata accessor for MemberSharingCircle();
  v2[30] = v3;
  v2[31] = *(void *)(v3 - 8);
  v2[32] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnerPeerTrust();
  v2[35] = v4;
  v2[36] = *(void *)(v4 - 8);
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  v2[40] = v5;
  v2[41] = *(void *)(v5 - 8);
  v2[42] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MemberPeerTrust();
  v2[43] = v6;
  v2[44] = *(void *)(v6 - 8);
  v2[45] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v2[46] = v7;
  v2[47] = *(void *)(v7 - 8);
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  return _swift_task_switch(sub_10010BCC8, v1, 0);
}

uint64_t sub_10010BCC8()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 224);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 416) = v2;
  *(void *)(v0 + 424) = sub_100010324(v2, (uint64_t)qword_10170D788);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void **)(v0 + 224);
  if (v6)
  {
    log = v4;
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v0 + 216) = v7;
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v7;

    uint64_t v4 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v5, "forceBreakAllShares for %@ user", v8, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v10 = qword_1016375E8;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  swift_beginAccess();
  sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (!*(void *)(v0 + 120)) {
    __break(1u);
  }
  sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
  swift_release();
  sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v11 = dword_1016390F0;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 432) = v12;
  void *v12 = v0;
  v12[1] = sub_10010BFC8;
  return ((uint64_t (__cdecl *)())((char *)&dword_1016390F0 + v11))();
}

uint64_t sub_10010BFC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232);
  *(void *)(*(void *)v1 + 440) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10010C10C, v2, 0);
}

uint64_t sub_10010C10C()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[55])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_100ECF654();
    uint64_t v3 = v2;
    uint64_t v5 = v4;
    uint64_t v7 = v6;
    v0[56] = v6;
    uint64_t v8 = (void *)swift_task_alloc();
    v0[57] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10010C3F4;
    return sub_100EA2DF0(v3, v5, v7);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636890 != -1) {
      swift_once();
    }
    sub_100010324(v0[52], (uint64_t)qword_10170D7A0);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No BeaconStore available!", v12, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    void *v13 = 0x74536E6F63616542;
    v13[1] = 0xEB0000000065726FLL;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_10010C3F4(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 464) = a1;
  *(void *)(v4 + 472) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 232);
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v6 = sub_10010EFE0;
  }
  else {
    uint64_t v6 = sub_10010C570;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10010C570()
{
  sub_100ECF654();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  *(void *)(v0 + 480) = v5;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 488) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10010C664;
  return sub_100EA6B18(v2, v4, v6);
}

uint64_t sub_10010C664(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[62] = a1;
  v3[63] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[29];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10010F118;
  }
  else
  {
    uint64_t v4 = v3[29];
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10010C7F0;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10010C7F0()
{
  uint64_t v1 = v0[62];
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[47];
    uint64_t v4 = v0[44];
    uint64_t v24 = v0[43];
    os_log_type_t v25 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v2, 0);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v23 = *(void *)(v4 + 72);
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v7 = v0[51];
      uint64_t v9 = v0[45];
      uint64_t v8 = v0[46];
      sub_100130CA8(v5, v9, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v9 + *(int *)(v24 + 20), v8);
      sub_10012C39C(v9, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v6[2] + 1, 1);
        uint64_t v6 = v25;
      }
      unint64_t v11 = v6[2];
      unint64_t v10 = v6[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7034(v10 > 1, v11 + 1, 1);
        uint64_t v6 = v25;
      }
      uint64_t v12 = v0[51];
      uint64_t v13 = v0[46];
      v6[2] = v11 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v6+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v11, v12, v13);
      os_log_type_t v25 = v6;
      v5 += v23;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  uint64_t v14 = v0[58];
  uint64_t v15 = sub_101158244((uint64_t)v6);
  v0[64] = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(v14 + 16);
  v0[65] = v16;
  if (v16 || *(void *)(v15 + 16))
  {
    uint64_t v17 = *(void *)(v0[29] + 136);
    v0[66] = v17;
    return _swift_task_switch(sub_10010CBC4, v17, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Can't forceBreakAllShares, missing peer trust record.", v20, 2u);
      swift_slowDealloc();
    }

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
}

uint64_t sub_10010CBC4()
{
  *(void *)(v0 + 536) = *(void *)(*(void *)(v0 + 528) + 136);
  swift_retain();
  return _swift_task_switch(sub_10010CC64, 0, 0);
}

uint64_t sub_10010CC64()
{
  uint64_t v1 = v0[67];
  uint64_t v2 = v0[66];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[68] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[69] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_10010CDA8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 25, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340B0, v3, v5);
}

uint64_t sub_10010CDA8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 232);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 560) = *(void *)(v1 + 200);
  return _swift_task_switch(sub_10010CF4C, v2, 0);
}

uint64_t sub_10010CF4C()
{
  uint64_t v1 = *(void *)(v0 + 560);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 568) = v2;
  if (!v2)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v41 = *(void *)(v0 + 528);
    return _swift_task_switch(sub_10010DB9C, v41, 0);
  }
  *(_DWORD *)(v0 + 648) = *(_DWORD *)(*(void *)(v0 + 328) + 80);
  *(void *)(v0 + 576) = 0;
  if (*(void *)(v1 + 16))
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(v0 + 520);
      sub_100130CA8(v1+ ((*(unsigned __int8 *)(v0 + 648) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 648))+ *(void *)(*(void *)(v0 + 328) + 72) * v3, *(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (v4)
      {
        uint64_t v5 = *(void *)(v0 + 288);
        uint64_t v44 = *(int *)(*(void *)(v0 + 320) + 32);
        uint64_t v45 = *(void *)(v0 + 336);
        unint64_t v43 = *(void *)(v0 + 464)
            + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
        swift_bridgeObjectRetain();
        uint64_t v6 = 0;
        uint64_t v42 = *(void *)(v5 + 72);
        do
        {
          sub_100130CA8(v43 + v6 * v42, *(void *)(v0 + 296), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
          uint64_t v7 = *(void *)(v45 + v44);
          uint64_t v8 = *(void *)(v7 + 16);
          uint64_t v46 = v6;
          if (v8)
          {
            uint64_t v9 = *(void *)(v0 + 376);
            sub_10000588C(&qword_10163BC50);
            uint64_t v10 = *(void *)(v9 + 72);
            unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
            uint64_t v12 = (void *)swift_allocObject();
            size_t v13 = j__malloc_size(v12);
            if (!v10)
            {
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
            }
            if (v13 - v11 == 0x8000000000000000 && v10 == -1) {
              goto LABEL_36;
            }
            v12[2] = v8;
            v12[3] = 2 * ((uint64_t)(v13 - v11) / v10);
            swift_bridgeObjectRetain_n();
            uint64_t v15 = sub_100711B04(v0 + 136, (char *)v12 + v11, v8, v7);
            sub_100132C20();
            if (v15 != v8) {
              goto LABEL_35;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v12 = _swiftEmptyArrayStorage;
          }
          uint64_t v16 = v12[2];
          uint64_t v17 = *(void *)(v0 + 376);
          if (v16)
          {
            uint64_t v18 = (char *)v12
                + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
            swift_retain();
            uint64_t v19 = *(void *)(v17 + 72);
            unint64_t v20 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 16);
            while (1)
            {
              uint64_t v21 = *(void *)(v0 + 368);
              uint64_t v22 = *(void *)(v0 + 376);
              uint64_t v23 = *(void *)(v0 + 272);
              v20(v23, v18, v21);
              uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
              v24(v23, 0, 1, v21);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v23, 1, v21) == 1) {
                break;
              }
              uint64_t v25 = *(void *)(v0 + 400);
              uint64_t v26 = *(void *)(v0 + 368);
              uint64_t v27 = *(void *)(v0 + 376);
              (*(void (**)(uint64_t, void, uint64_t))(v27 + 32))(v25, *(void *)(v0 + 272), v26);
              sub_10012B44C((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
              char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
              if (v28) {
                goto LABEL_28;
              }
              v18 += v19;
              if (!--v16) {
                goto LABEL_22;
              }
            }
          }
          else
          {
            swift_retain();
            uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
LABEL_22:
            v24(*(void *)(v0 + 272), 1, 1, *(void *)(v0 + 368));
          }
          uint64_t v6 = v46 + 1;
          uint64_t v29 = *(void *)(v0 + 520);
          uint64_t v30 = *(void *)(v0 + 296);
          swift_release_n();
          sub_10012C39C(v30, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        }
        while (v46 + 1 != v29);
        swift_bridgeObjectRelease();
      }
      uint64_t v31 = *(void *)(v0 + 568);
      uint64_t v32 = *(void *)(v0 + 576) + 1;
      sub_10012C39C(*(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (v32 == v31) {
        goto LABEL_31;
      }
      unint64_t v3 = *(void *)(v0 + 576) + 1;
      *(void *)(v0 + 576) = v3;
      uint64_t v1 = *(void *)(v0 + 560);
    }
    while (v3 < *(void *)(v1 + 16));
  }
  __break(1u);
LABEL_28:
  uint64_t v33 = *(void *)(v0 + 304);
  uint64_t v34 = *(void *)(v0 + 312);
  uint64_t v35 = *(void *)(v0 + 296);
  swift_bridgeObjectRelease();
  swift_release_n();
  sub_10012EC2C(v35, v33, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  sub_10012EC2C(v33, v34, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  uint64_t v36 = dword_101642120;
  uint64_t v37 = (void *)swift_task_alloc();
  *(void *)(v0 + 584) = v37;
  void *v37 = v0;
  v37[1] = sub_10010D4B0;
  uint64_t v38 = *(void *)(v0 + 336);
  uint64_t v39 = *(void *)(v0 + 312);
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101642120 + v36))(v39, v38);
}

uint64_t sub_10010D4B0()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 232);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_100133F90;
  }
  else
  {
    uint64_t v4 = sub_10010D614;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10010D614()
{
  sub_10012C39C(*(void *)(v0 + 312), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  uint64_t v1 = *(void *)(v0 + 568);
  uint64_t v2 = *(void *)(v0 + 576) + 1;
  sub_10012C39C(*(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  if (v2 == v1) {
    goto LABEL_2;
  }
LABEL_5:
  unint64_t v4 = *(void *)(v0 + 576) + 1;
  *(void *)(v0 + 576) = v4;
  uint64_t v5 = *(void *)(v0 + 560);
  if (v4 >= *(void *)(v5 + 16)) {
    goto LABEL_34;
  }
  uint64_t v6 = *(void *)(v0 + 520);
  sub_100130CA8(v5+ ((*(unsigned __int8 *)(v0 + 648) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 648))+ *(void *)(*(void *)(v0 + 328) + 72) * v4, *(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  if (!v6) {
    goto LABEL_27;
  }
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v45 = *(int *)(*(void *)(v0 + 320) + 32);
  uint64_t v46 = *(void *)(v0 + 336);
  unint64_t v44 = *(void *)(v0 + 464)
      + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  uint64_t v43 = *(void *)(v7 + 72);
  while (1)
  {
    sub_100130CA8(v44 + v8 * v43, *(void *)(v0 + 296), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v9 = *(void *)(v46 + v45);
    uint64_t v10 = *(void *)(v9 + 16);
    uint64_t v47 = v8;
    if (v10)
    {
      uint64_t v11 = *(void *)(v0 + 376);
      sub_10000588C(&qword_10163BC50);
      uint64_t v12 = *(void *)(v11 + 72);
      unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      uint64_t v14 = (void *)swift_allocObject();
      size_t v15 = j__malloc_size(v14);
      if (!v12)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
      }
      if (v15 - v13 == 0x8000000000000000 && v12 == -1) {
        goto LABEL_35;
      }
      v14[2] = v10;
      v14[3] = 2 * ((uint64_t)(v15 - v13) / v12);
      swift_bridgeObjectRetain_n();
      uint64_t v17 = sub_100711B04(v0 + 136, (char *)v14 + v13, v10, v9);
      sub_100132C20();
      if (v17 != v10) {
        goto LABEL_33;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = _swiftEmptyArrayStorage;
    }
    uint64_t v18 = v14[2];
    uint64_t v19 = *(void *)(v0 + 376);
    if (v18) {
      break;
    }
    swift_retain();
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
LABEL_24:
    v26(*(void *)(v0 + 272), 1, 1, *(void *)(v0 + 368));
LABEL_25:
    uint64_t v8 = v47 + 1;
    uint64_t v31 = *(void *)(v0 + 520);
    uint64_t v32 = *(void *)(v0 + 296);
    swift_release_n();
    sub_10012C39C(v32, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    if (v47 + 1 == v31)
    {
      swift_bridgeObjectRelease();
LABEL_27:
      uint64_t v33 = *(void *)(v0 + 568);
      uint64_t v34 = *(void *)(v0 + 576) + 1;
      sub_10012C39C(*(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (v34 == v33)
      {
LABEL_2:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = *(void *)(v0 + 528);
        return _swift_task_switch(sub_10010DB9C, v3, 0);
      }
      goto LABEL_5;
    }
  }
  unint64_t v20 = (char *)v14 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  swift_retain();
  uint64_t v21 = *(void *)(v19 + 72);
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 16);
  while (1)
  {
    uint64_t v23 = *(void *)(v0 + 368);
    uint64_t v24 = *(void *)(v0 + 376);
    uint64_t v25 = *(void *)(v0 + 272);
    v22(v25, v20, v23);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
    v26(v25, 0, 1, v23);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v25, 1, v23) == 1) {
      goto LABEL_25;
    }
    uint64_t v27 = *(void *)(v0 + 400);
    uint64_t v28 = *(void *)(v0 + 368);
    uint64_t v29 = *(void *)(v0 + 376);
    (*(void (**)(uint64_t, void, uint64_t))(v29 + 32))(v27, *(void *)(v0 + 272), v28);
    sub_10012B44C((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    if (v30) {
      break;
    }
    v20 += v21;
    if (!--v18) {
      goto LABEL_24;
    }
  }
  uint64_t v35 = *(void *)(v0 + 304);
  uint64_t v36 = *(void *)(v0 + 312);
  uint64_t v37 = *(void *)(v0 + 296);
  swift_bridgeObjectRelease();
  swift_release_n();
  sub_10012EC2C(v37, v35, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  sub_10012EC2C(v35, v36, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  uint64_t v38 = dword_101642120;
  uint64_t v39 = (void *)swift_task_alloc();
  *(void *)(v0 + 584) = v39;
  *uint64_t v39 = v0;
  v39[1] = sub_10010D4B0;
  uint64_t v40 = *(void *)(v0 + 336);
  uint64_t v41 = *(void *)(v0 + 312);
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101642120 + v38))(v41, v40);
}

uint64_t sub_10010DB9C()
{
  *(void *)(v0 + 592) = *(void *)(*(void *)(v0 + 528) + 136);
  swift_retain();
  return _swift_task_switch(sub_10010DC3C, 0, 0);
}

uint64_t sub_10010DC3C()
{
  uint64_t v1 = v0[74];
  uint64_t v2 = v0[66];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[75] = v3;
  v3[2] = v1;
  v3[3] = sub_1000730D8;
  v3[4] = v2;
  unint64_t v4 = (void *)swift_task_alloc();
  v0[76] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  *unint64_t v4 = v0;
  v4[1] = sub_10010DD80;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 26, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001340B4, v3, v5);
}

uint64_t sub_10010DD80()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 232);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 616) = *(void *)(v1 + 208);
  return _swift_task_switch(sub_10010DF24, v2, 0);
}

uint64_t sub_10010DF24()
{
  uint64_t v1 = *(void *)(v0 + 616);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 624) = v2;
  if (v2)
  {
    *(_DWORD *)(v0 + 652) = *(_DWORD *)(*(void *)(v0 + 248) + 80);
    *(void *)(v0 + 632) = 0;
    if (*(void *)(v1 + 16))
    {
      unint64_t v3 = 0;
      while (1)
      {
        uint64_t v4 = *(void *)(v0 + 376);
        uint64_t v5 = *(void *)(v0 + 256);
        uint64_t v6 = *(void *)(v0 + 240);
        sub_100130CA8(v1+ ((*(unsigned __int8 *)(v0 + 652) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 652))+ *(void *)(*(void *)(v0 + 248) + 72) * v3, v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        uint64_t v7 = *(void *)(v5 + *(int *)(v6 + 36));
        uint64_t v8 = *(void *)(v7 + 16);
        uint64_t v9 = *(void *)(v4 + 72);
        uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
        if (v8)
        {
          sub_10000588C(&qword_10163BC50);
          unint64_t v11 = (v10 + 32) & ~(unint64_t)v10;
          uint64_t v12 = (void *)swift_allocObject();
          size_t v13 = j__malloc_size(v12);
          if (!v9)
          {
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
          }
          if (v13 - v11 == 0x8000000000000000 && v9 == -1) {
            goto LABEL_39;
          }
          v12[2] = v8;
          v12[3] = 2 * ((uint64_t)(v13 - v11) / v9);
          swift_bridgeObjectRetain_n();
          uint64_t v15 = sub_100711B04(v0 + 56, (char *)v12 + v11, v8, v7);
          sub_100132C20();
          if (v15 != v8) {
            goto LABEL_38;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v11 = (v10 + 32) & ~v10;
          uint64_t v12 = _swiftEmptyArrayStorage;
        }
        uint64_t v17 = *(void *)(v0 + 368);
        uint64_t v16 = *(void *)(v0 + 376);
        uint64_t v18 = *(void *)(v0 + 256);
        uint64_t v19 = *(void *)(v0 + 240);
        sub_10000588C(&qword_10163BC50);
        uint64_t v20 = swift_allocObject();
        uint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 16);
        *(_OWORD *)(v20 + 16) = xmmword_101342130;
        uint64_t v56 = v21;
        v21(v20 + v11, (char *)(v18 + *(int *)(v19 + 32)), v17);
        sub_100442D9C(v20);
        sub_10012B44C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v57 = Set.init(minimumCapacity:)();
        uint64_t v54 = v12[2];
        if (v54)
        {
          uint64_t v22 = 0;
          uint64_t v53 = (char *)v12 + v11;
          while (1)
          {
            uint64_t v29 = *(void *)(v0 + 368);
            uint64_t v28 = *(void *)(v0 + 376);
            uint64_t v30 = *(void *)(v0 + 264);
            v56(v30, &v53[v22 * v9], v29);
            uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
            v52(v30, 0, 1, v29);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v30, 1, v29) == 1) {
              break;
            }
            uint64_t v55 = v22;
            (*(void (**)(void, void, void))(*(void *)(v0 + 376) + 32))(*(void *)(v0 + 392), *(void *)(v0 + 264), *(void *)(v0 + 368));
            swift_bridgeObjectRetain();
            uint64_t v31 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v32 = -1 << *(unsigned char *)(v57 + 32);
            unint64_t v33 = v31 & ~v32;
            if ((*(void *)(v57 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33))
            {
              uint64_t v34 = ~v32;
              while (1)
              {
                uint64_t v35 = *(void *)(v0 + 384);
                uint64_t v36 = *(void *)(v0 + 368);
                uint64_t v37 = *(void *)(v0 + 376);
                uint64_t v38 = v9;
                v56(v35, (char *)(*(void *)(v57 + 48) + v33 * v9), v36);
                sub_10012B44C((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
                char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
                v40(v35, v36);
                if (v39) {
                  break;
                }
                unint64_t v33 = (v33 + 1) & v34;
                uint64_t v9 = v38;
                if (((*(void *)(v57 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v33) & 1) == 0) {
                  goto LABEL_15;
                }
              }
              uint64_t v41 = *(void *)(v0 + 392);
              uint64_t v42 = *(void *)(v0 + 368);
              swift_bridgeObjectRelease();
              v40(v41, v42);
              uint64_t v9 = v38;
            }
            else
            {
LABEL_15:
              uint64_t v23 = *(void *)(v0 + 384);
              uint64_t v24 = *(char **)(v0 + 392);
              uint64_t v25 = *(void *)(v0 + 368);
              uint64_t v26 = *(void *)(v0 + 376);
              swift_bridgeObjectRelease();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v56(v23, v24, v25);
              sub_100DDDE60(v23, v33, isUniquelyReferenced_nonNull_native);
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v25);
            }
            uint64_t v22 = v55 + 1;
            if (v55 + 1 == v54)
            {
              v52(*(void *)(v0 + 264), 1, 1, *(void *)(v0 + 368));
              break;
            }
          }
        }
        else
        {
          (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 376) + 56))(*(void *)(v0 + 264), 1, 1, *(void *)(v0 + 368));
        }
        uint64_t v43 = *(void *)(v0 + 512);
        swift_bridgeObjectRelease();
        LOBYTE(v43) = sub_1002AB654(v43, v57);
        swift_bridgeObjectRelease();
        if ((v43 & 1) == 0) {
          break;
        }
        uint64_t v44 = *(void *)(v0 + 624);
        uint64_t v45 = *(void *)(v0 + 632) + 1;
        sub_10012C39C(*(void *)(v0 + 256), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        if (v45 == v44) {
          goto LABEL_34;
        }
        unint64_t v3 = *(void *)(v0 + 632) + 1;
        *(void *)(v0 + 632) = v3;
        uint64_t v1 = *(void *)(v0 + 616);
        if (v3 >= *(void *)(v1 + 16)) {
          goto LABEL_30;
        }
      }
    }
    else
    {
LABEL_30:
      __break(1u);
    }
    uint64_t v46 = *(void *)(v0 + 256);
    uint64_t v47 = *(int *)(*(void *)(v0 + 240) + 28);
    uint64_t v48 = dword_101641FE0;
    unint64_t v49 = (void *)swift_task_alloc();
    *(void *)(v0 + 640) = v49;
    *unint64_t v49 = v0;
    v49[1] = sub_10010E6E4;
    return ((uint64_t (*)(uint64_t))((char *)&dword_101641FE0 + v48))(v46 + v47);
  }
  else
  {
LABEL_34:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_release_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v51 = *(uint64_t (**)(void))(v0 + 8);
    return v51();
  }
}

uint64_t sub_10010E6E4()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 232);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_100134010;
  }
  else
  {
    uint64_t v4 = sub_10010E848;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10010E848()
{
  while (1)
  {
    uint64_t v2 = *(void *)(v0 + 624);
    uint64_t v3 = *(void *)(v0 + 632) + 1;
    sub_10012C39C(*(void *)(v0 + 256), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    if (v3 == v2) {
      break;
    }
    unint64_t v4 = *(void *)(v0 + 632) + 1;
    *(void *)(v0 + 632) = v4;
    uint64_t v5 = *(void *)(v0 + 616);
    if (v4 >= *(void *)(v5 + 16))
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
    }
    uint64_t v6 = *(void *)(v0 + 376);
    uint64_t v7 = *(void *)(v0 + 256);
    uint64_t v8 = *(void *)(v0 + 240);
    sub_100130CA8(v5+ ((*(unsigned __int8 *)(v0 + 652) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 652))+ *(void *)(*(void *)(v0 + 248) + 72) * v4, v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v9 = *(void *)(v7 + *(int *)(v8 + 36));
    uint64_t v10 = *(void *)(v9 + 16);
    uint64_t v11 = *(void *)(v6 + 72);
    uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
    if (v10)
    {
      sub_10000588C(&qword_10163BC50);
      unint64_t v13 = (v12 + 32) & ~(unint64_t)v12;
      uint64_t v14 = (void *)swift_allocObject();
      size_t v15 = j__malloc_size(v14);
      if (!v11) {
        goto LABEL_34;
      }
      if (v15 - v13 == 0x8000000000000000 && v11 == -1) {
        goto LABEL_36;
      }
      v14[2] = v10;
      v14[3] = 2 * ((uint64_t)(v15 - v13) / v11);
      swift_bridgeObjectRetain_n();
      uint64_t v17 = sub_100711B04(v0 + 56, (char *)v14 + v13, v10, v9);
      sub_100132C20();
      if (v17 != v10) {
        goto LABEL_35;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v13 = (v12 + 32) & ~v12;
      uint64_t v14 = _swiftEmptyArrayStorage;
    }
    uint64_t v19 = *(void *)(v0 + 368);
    uint64_t v18 = *(void *)(v0 + 376);
    uint64_t v20 = *(void *)(v0 + 256);
    uint64_t v21 = *(void *)(v0 + 240);
    sub_10000588C(&qword_10163BC50);
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t))(v18 + 16);
    *(_OWORD *)(v22 + 16) = xmmword_101342130;
    uint64_t v55 = v23;
    v23(v22 + v13, (char *)(v20 + *(int *)(v21 + 32)), v19);
    sub_100442D9C(v22);
    sub_10012B44C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v56 = Set.init(minimumCapacity:)();
    uint64_t v53 = v14[2];
    if (v53)
    {
      uint64_t v24 = 0;
      uint64_t v52 = (char *)v14 + v13;
      while (1)
      {
        uint64_t v31 = *(void *)(v0 + 368);
        uint64_t v30 = *(void *)(v0 + 376);
        uint64_t v32 = *(void *)(v0 + 264);
        v55(v32, &v52[v24 * v11], v31);
        uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56);
        v51(v32, 0, 1, v31);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v32, 1, v31) == 1) {
          break;
        }
        uint64_t v54 = v24;
        (*(void (**)(void, void, void))(*(void *)(v0 + 376) + 32))(*(void *)(v0 + 392), *(void *)(v0 + 264), *(void *)(v0 + 368));
        swift_bridgeObjectRetain();
        uint64_t v33 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v34 = -1 << *(unsigned char *)(v56 + 32);
        unint64_t v35 = v33 & ~v34;
        if ((*(void *)(v56 + 56 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35))
        {
          uint64_t v36 = ~v34;
          while (1)
          {
            uint64_t v37 = *(void *)(v0 + 384);
            uint64_t v38 = *(void *)(v0 + 368);
            uint64_t v39 = *(void *)(v0 + 376);
            uint64_t v40 = v11;
            v55(v37, (char *)(*(void *)(v56 + 48) + v35 * v11), v38);
            sub_10012B44C((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
            char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
            v42(v37, v38);
            if (v41) {
              break;
            }
            unint64_t v35 = (v35 + 1) & v36;
            uint64_t v11 = v40;
            if (((*(void *)(v56 + 56 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35) & 1) == 0) {
              goto LABEL_16;
            }
          }
          uint64_t v43 = *(void *)(v0 + 392);
          uint64_t v44 = *(void *)(v0 + 368);
          swift_bridgeObjectRelease();
          v42(v43, v44);
          uint64_t v11 = v40;
        }
        else
        {
LABEL_16:
          uint64_t v25 = *(void *)(v0 + 384);
          uint64_t v26 = *(char **)(v0 + 392);
          uint64_t v27 = *(void *)(v0 + 368);
          uint64_t v28 = *(void *)(v0 + 376);
          swift_bridgeObjectRelease();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v55(v25, v26, v27);
          sub_100DDDE60(v25, v35, isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v27);
        }
        uint64_t v24 = v54 + 1;
        if (v54 + 1 == v53)
        {
          v51(*(void *)(v0 + 264), 1, 1, *(void *)(v0 + 368));
          break;
        }
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 376) + 56))(*(void *)(v0 + 264), 1, 1, *(void *)(v0 + 368));
    }
    uint64_t v1 = *(void *)(v0 + 512);
    swift_bridgeObjectRelease();
    LOBYTE(v1) = sub_1002AB654(v1, v56);
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0)
    {
      uint64_t v47 = *(void *)(v0 + 256);
      uint64_t v48 = *(int *)(*(void *)(v0 + 240) + 28);
      uint64_t v49 = dword_101641FE0;
      uint64_t v50 = (void *)swift_task_alloc();
      *(void *)(v0 + 640) = v50;
      *uint64_t v50 = v0;
      v50[1] = sub_10010E6E4;
      return ((uint64_t (*)(uint64_t))((char *)&dword_101641FE0 + v49))(v47 + v48);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
  return v45();
}

uint64_t sub_10010EFE0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010F118()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010F250(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_10010F310, v1, 0);
}

uint64_t sub_10010F310()
{
  uint64_t v20 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[6];
  uint64_t v9 = v0[7];
  uint64_t v11 = v0[5];
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_1008FA0F0(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "forceDecline shareIdentifier %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[7], v0[5]);
  }

  uint64_t v18 = (uint64_t (*)(uint64_t))((char *)&dword_101641FE0 + dword_101641FE0);
  size_t v15 = (void *)swift_task_alloc();
  v0[8] = v15;
  *size_t v15 = v0;
  v15[1] = sub_10010F5C0;
  uint64_t v16 = v0[3];
  return v18(v16);
}

uint64_t sub_10010F5C0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 32);
    return _swift_task_switch(sub_10010F70C, v6, 0);
  }
}

uint64_t sub_10010F70C()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010F7F4(uint64_t a1)
{
  v2[31] = a1;
  v2[32] = v1;
  uint64_t v3 = type metadata accessor for MemberSharingCircle();
  v2[33] = v3;
  v2[34] = *(void *)(v3 - 8);
  v2[35] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[36] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[37] = v5;
  v2[38] = *(void *)(v5 + 64);
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  return _swift_task_switch(sub_10010F940, v1, 0);
}

uint64_t sub_10010F940()
{
  uint64_t v22 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[42];
  uint64_t v3 = v0[36];
  uint64_t v4 = v0[37];
  uint64_t v5 = type metadata accessor for Logger();
  v0[43] = sub_100010324(v5, (uint64_t)qword_10170D788);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[44] = v6;
  v0[45] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[42];
  uint64_t v11 = v0[36];
  uint64_t v12 = v0[37];
  if (v9)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[30] = sub_1008FA0F0(v14, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "forceStopSharing beaconIdentifier %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
  }

  v0[46] = v16;
  v0[47] = *(void *)(v0[32] + 136);
  Swift::Int v17 = sub_100DF2D10((uint64_t)&off_1015A0398);
  v0[48] = v17;
  uint64_t v18 = (void *)swift_task_alloc();
  v0[49] = v18;
  void *v18 = v0;
  v18[1] = sub_10010FC14;
  uint64_t v19 = v0[31];
  return sub_100E59F38(v19, v17);
}

uint64_t sub_10010FC14(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 256);
  *(void *)(*(void *)v1 + 400) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10010FD48, v2, 0);
}

uint64_t sub_10010FD48()
{
  uint64_t v17 = v0;
  if (*(void *)(*(void *)(v0 + 400) + 16))
  {
    (*(void (**)(void, void, void))(v0 + 352))(*(void *)(v0 + 312), *(void *)(v0 + 248), *(void *)(v0 + 288));
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    BOOL v3 = os_log_type_enabled(v1, v2);
    uint64_t v4 = *(void *)(v0 + 312);
    uint64_t v5 = *(void *)(v0 + 288);
    if (v3)
    {
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
      uint64_t v6 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 141558275;
      *(void *)(v0 + 216) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2081;
      sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 224) = sub_1008FA0F0(v7, v8, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v14(v4, v5);
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Stop sharing of %{private,mask.hash}s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 312), *(void *)(v0 + 288));
    }

    unint64_t v15 = (uint64_t (*)(uint64_t))((char *)&dword_101641FC8 + dword_101641FC8);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 576) = v12;
    void *v12 = v0;
    v12[1] = sub_100111364;
    uint64_t v13 = *(void *)(v0 + 400);
    return v15(v13);
  }
  else
  {
    swift_bridgeObjectRelease();
    BOOL v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 408) = v9;
    *BOOL v9 = v0;
    v9[1] = sub_100110050;
    uint64_t v10 = *(void *)(v0 + 248);
    return sub_100E5B3AC(v10);
  }
}

uint64_t sub_100110050(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 256);
  *(void *)(*(void *)v1 + 416) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100110168, v2, 0);
}

uint64_t sub_100110168()
{
  uint64_t v1 = *(void *)(v0 + 416);
  unint64_t v2 = *(void *)(v1 + 16);
  if (v2 >= 2)
  {
    swift_bridgeObjectRetain();
    BOOL v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 134217984;
      *(void *)(v0 + 232) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Too much circles to decline on sharing stop! There is %ld circles.", v5, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    unint64_t v2 = *(void *)(v1 + 16);
    uint64_t v1 = *(void *)(v0 + 416);
  }
  *(void *)(v0 + 424) = v2;
  if (v2)
  {
    uint64_t v7 = *(void *)(v0 + 272);
    uint64_t v6 = *(void *)(v0 + 280);
    *(_DWORD *)(v0 + 592) = *(_DWORD *)(*(void *)(v0 + 264) + 28);
    int v8 = *(_DWORD *)(v7 + 80);
    *(_DWORD *)(v0 + 596) = v8;
    uint64_t v9 = *(void *)(v0 + 368);
    *(void *)(v0 + 432) = *(void *)(v7 + 72);
    *(void *)(v0 + 440) = v9;
    sub_100130CA8(v1 + ((v8 + 32) & ~(unint64_t)v8), v6, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(void *)(v0 + 448) = 1;
    uint64_t v10 = *(void *)(v0 + 280);
    (*(void (**)(void, uint64_t, void))(v0 + 352))(*(void *)(v0 + 328), v10 + *(int *)(v0 + 592), *(void *)(v0 + 288));
    sub_10012C39C(v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100110460;
    return sub_1002703D0();
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

uint64_t sub_100110460(uint64_t a1)
{
  BOOL v3 = (void *)*v2;
  v3[58] = a1;
  swift_task_dealloc();
  if (v1)
  {
    os_log_type_t v4 = (void (*)(void, void))v3[55];
    v3[71] = v1;
    uint64_t v5 = v3[32];
    v4(v3[41], v3[36]);
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_1001112C8, v5, 0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v3[59] = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_1001105F8;
    return sub_1003504DC();
  }
}

uint64_t sub_1001105F8(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 480) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_release();
    uint64_t v5 = sub_100110904;
  }
  else
  {
    *(void *)(v4 + 488) = a1;
    uint64_t v5 = sub_100110728;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100110728()
{
  uint64_t v1 = v0[61];
  uint64_t v2 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[62] = v2;
  v0[15] = v2;
  v0[16] = &off_1015F0C30;
  v0[12] = v1;
  BOOL v3 = (void *)swift_task_alloc();
  v0[63] = v3;
  *BOOL v3 = v0;
  v3[1] = sub_1001107D4;
  return sub_1002708BC();
}

uint64_t sub_1001107D4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 512) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_release();
    uint64_t v5 = sub_100110EC8;
  }
  else
  {
    *(void *)(v4 + 520) = a1;
    uint64_t v5 = sub_100110998;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100110904()
{
  uint64_t v1 = (void (*)(void, void))v0[55];
  v0[71] = v0[60];
  uint64_t v2 = v0[32];
  v1(v0[41], v0[36]);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001112C8, v2, 0);
}

uint64_t sub_100110998()
{
  uint64_t v1 = *(void *)(v0 + 520);
  uint64_t v2 = *(void *)(v0 + 496);
  uint64_t v23 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 120);
  sub_1000BD078(v0 + 96, v3);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v24 = (uint64_t *)swift_task_alloc();
  (*(void (**)(void))(v4 + 16))();
  uint64_t v5 = *v24;
  *(void *)(v0 + 160) = v2;
  *(void *)(v0 + 168) = &off_1015F0C30;
  *(void *)(v0 + 136) = v5;
  uint64_t v22 = type metadata accessor for FamilyCircleService();
  *(void *)(v0 + 40) = v22;
  *(void *)(v0 + 48) = &off_1015F13C8;
  *(void *)(v0 + 16) = v1;
  type metadata accessor for ShareDeclineUseCase();
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 528) = v6;
  uint64_t v7 = sub_1000BD078(v0 + 136, v2);
  uint64_t v8 = *(void *)(v2 - 8);
  uint64_t v9 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(v9, v7, v2);
  uint64_t v10 = *(void *)(v0 + 40);
  uint64_t v11 = sub_1000BD078(v0 + 16, v10);
  uint64_t v12 = *(void *)(v10 - 8);
  uint64_t v13 = (void *)swift_task_alloc();
  (*(void (**)(void *, uint64_t, uint64_t))(v12 + 16))(v13, v11, v10);
  uint64_t v14 = *v9;
  *(void *)(v0 + 56) = *v13;
  *(void *)(v0 + 200) = v2;
  *(void *)(v0 + 208) = &off_1015F0C30;
  *(void *)(v0 + 176) = v14;
  *(void *)(v0 + 80) = v22;
  *(void *)(v0 + 88) = &off_1015F13C8;
  swift_defaultActor_initialize();
  *(void *)(v6 + 112) = v23;
  sub_10001CEB0((long long *)(v0 + 176), v6 + 120);
  sub_10001CEB0((long long *)(v0 + 56), v6 + 160);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 136);
  swift_task_dealloc();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 96);
  swift_task_dealloc();
  if (qword_101636A80 != -1) {
    swift_once();
  }
  uint64_t v15 = *(void *)(v0 + 320);
  uint64_t v16 = *(void *)(v0 + 296);
  uint64_t v17 = *(void *)(v0 + 288);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 352))(v15, *(void *)(v0 + 328), v17);
  unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v0 + 536) = v19;
  *(void *)(v19 + 16) = v6;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32))(v19 + v18, v15, v17);
  uint64_t v25 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 544) = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_100110D94;
  return v25(&unk_10163BF88, v19);
}

uint64_t sub_100110D94()
{
  *(void *)(*(void *)v1 + 552) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_100111228;
  }
  else {
    uint64_t v2 = sub_100110F64;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100110EC8()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
  uint64_t v1 = (void (*)(void, void))v0[55];
  v0[71] = v0[64];
  uint64_t v2 = v0[32];
  v1(v0[41], v0[36]);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001112C8, v2, 0);
}

uint64_t sub_100110F64()
{
  uint64_t v1 = v0[41];
  uint64_t v2 = v0[36];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[32];
  swift_release();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[70] = v5;
  v5(v1, v2);
  return _swift_task_switch(sub_100110FFC, v4, 0);
}

uint64_t sub_100110FFC()
{
  uint64_t v1 = *(void *)(v0 + 448);
  if (v1 == *(void *)(v0 + 424))
  {
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    *(void *)(v0 + 440) = *(void *)(v0 + 560);
    uint64_t result = sub_100130CA8(*(void *)(v0 + 416)+ ((*(unsigned __int8 *)(v0 + 596) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 596))+ *(void *)(v0 + 432) * v1, *(void *)(v0 + 280), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(void *)(v0 + 448) = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *(void *)(v0 + 280);
      (*(void (**)(void, uint64_t, void))(v0 + 352))(*(void *)(v0 + 328), v4 + *(int *)(v0 + 592), *(void *)(v0 + 288));
      sub_10012C39C(v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 456) = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_100110460;
      return sub_1002703D0();
    }
  }
  return result;
}

uint64_t sub_100111228()
{
  uint64_t v1 = v0[37];
  swift_release();
  uint64_t v2 = *(void (**)(void, void))(v1 + 8);
  v0[71] = v0[69];
  uint64_t v3 = v0[32];
  v2(v0[41], v0[36]);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001112C8, v3, 0);
}

uint64_t sub_1001112C8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100111364()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 584) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 256);
    uint64_t v4 = sub_1001115AC;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 256);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10011148C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10011148C()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001115AC()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100111650(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  v2[6] = type metadata accessor for OwnedBeaconRecord();
  v2[7] = swift_task_alloc();
  return _swift_task_switch(sub_1001116E4, v1, 0);
}

uint64_t sub_1001116E4()
{
  uint64_t v15 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[7];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170D788);
  sub_100130CA8(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[7];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558275;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    type metadata accessor for UUID();
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012C39C(v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "forceStopSharingAfterUnpairing ownedBeacon %{private,mask.hash}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10012C39C(v0[7], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }

  uint64_t v11 = v0[4] + *(int *)(v0[6] + 20);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[8] = v12;
  void *v12 = v0;
  v12[1] = sub_1001119D0;
  return sub_100E59F38(v11, 0);
}

uint64_t sub_1001119D0(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v7 = *v1;
  *(void *)(v3 + 72) = a1;
  swift_task_dealloc();
  BOOL v6 = (uint64_t (*)(uint64_t))((char *)&dword_101641EE0 + dword_101641EE0);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 80) = v4;
  *uint64_t v4 = v7;
  v4[1] = sub_100111B1C;
  return v6(a1);
}

uint64_t sub_100111B1C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = sub_100111D2C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 40);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100111C44;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100111C44()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100111D2C()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100111D9C(char a1)
{
  *(void *)(v2 + 1016) = v1;
  *(unsigned char *)(v2 + 569) = a1;
  sub_10000588C(&qword_10164DBB0);
  *(void *)(v2 + 1024) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B880);
  *(void *)(v2 + 1032) = swift_task_alloc();
  *(void *)(v2 + 1040) = swift_task_alloc();
  *(void *)(v2 + 1048) = swift_task_alloc();
  *(void *)(v2 + 1056) = swift_task_alloc();
  uint64_t v3 = type metadata accessor for BeaconSharingService.PendingExpirationTask(0);
  *(void *)(v2 + 1064) = v3;
  *(void *)(v2 + 1072) = *(void *)(v3 - 8);
  *(void *)(v2 + 1080) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ContinuousClock();
  *(void *)(v2 + 1088) = v4;
  *(void *)(v2 + 1096) = *(void *)(v4 - 8);
  *(void *)(v2 + 1104) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v2 + 1112) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v2 + 1120) = v6;
  *(void *)(v2 + 1128) = *(void *)(v6 + 64);
  *(void *)(v2 + 1136) = swift_task_alloc();
  *(void *)(v2 + 1144) = swift_task_alloc();
  *(void *)(v2 + 1152) = type metadata accessor for DelegatedShareMeta();
  *(void *)(v2 + 1160) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  *(void *)(v2 + 1168) = v7;
  *(void *)(v2 + 1176) = *(void *)(v7 - 8);
  *(void *)(v2 + 1184) = swift_task_alloc();
  *(void *)(v2 + 1192) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016607D0);
  *(void *)(v2 + 1200) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OwnerPeerTrust();
  *(void *)(v2 + 1208) = v8;
  *(void *)(v2 + 1216) = *(void *)(v8 - 8);
  *(void *)(v2 + 1224) = swift_task_alloc();
  *(void *)(v2 + 1232) = swift_task_alloc();
  *(void *)(v2 + 1240) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OwnerSharingCircle();
  *(void *)(v2 + 1248) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v2 + 1256) = v10;
  *(void *)(v2 + 1264) = *(void *)(v10 + 64);
  *(void *)(v2 + 1272) = swift_task_alloc();
  *(void *)(v2 + 1280) = swift_task_alloc();
  *(void *)(v2 + 1288) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B890);
  *(void *)(v2 + 1296) = swift_task_alloc();
  *(void *)(v2 + 1304) = swift_task_alloc();
  *(void *)(v2 + 1312) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for MemberPeerTrust();
  *(void *)(v2 + 1320) = v11;
  *(void *)(v2 + 1328) = *(void *)(v11 - 8);
  *(void *)(v2 + 1336) = swift_task_alloc();
  *(void *)(v2 + 1344) = swift_task_alloc();
  *(void *)(v2 + 1352) = swift_task_alloc();
  *(void *)(v2 + 1360) = swift_task_alloc();
  *(void *)(v2 + 1368) = swift_task_alloc();
  uint64_t v12 = sub_10000588C(&qword_101661010);
  *(void *)(v2 + 1376) = v12;
  *(void *)(v2 + 1384) = *(void *)(v12 - 8);
  *(void *)(v2 + 1392) = swift_task_alloc();
  *(void *)(v2 + 1400) = swift_task_alloc();
  *(void *)(v2 + 1408) = swift_task_alloc();
  *(void *)(v2 + 1416) = swift_task_alloc();
  *(void *)(v2 + 1424) = swift_task_alloc();
  sub_10000588C(&qword_10163B8A0);
  *(void *)(v2 + 1432) = swift_task_alloc();
  *(void *)(v2 + 1440) = swift_task_alloc();
  sub_10000588C(&qword_10163B8A8);
  *(void *)(v2 + 1448) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  *(void *)(v2 + 1456) = swift_task_alloc();
  *(void *)(v2 + 1464) = swift_task_alloc();
  *(void *)(v2 + 1472) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Date();
  *(void *)(v2 + 1480) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v2 + 1488) = v14;
  *(void *)(v2 + 1496) = *(void *)(v14 + 64);
  *(void *)(v2 + 1504) = swift_task_alloc();
  *(void *)(v2 + 1512) = swift_task_alloc();
  *(void *)(v2 + 1520) = swift_task_alloc();
  *(void *)(v2 + 1528) = swift_task_alloc();
  *(void *)(v2 + 1536) = swift_task_alloc();
  *(void *)(v2 + 1544) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for Logger();
  *(void *)(v2 + 1552) = v15;
  *(void *)(v2 + 1560) = *(void *)(v15 - 8);
  *(void *)(v2 + 1568) = swift_task_alloc();
  *(void *)(v2 + 1576) = swift_task_alloc();
  *(void *)(v2 + 1584) = swift_task_alloc();
  *(void *)(v2 + 1592) = swift_task_alloc();
  *(void *)(v2 + 1600) = swift_task_alloc();
  *(void *)(v2 + 1608) = swift_task_alloc();
  *(void *)(v2 + 1616) = swift_task_alloc();
  *(void *)(v2 + 1624) = swift_task_alloc();
  *(void *)(v2 + 1632) = swift_task_alloc();
  *(void *)(v2 + 1640) = swift_task_alloc();
  *(void *)(v2 + 1648) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for UUID();
  *(void *)(v2 + 1656) = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  *(void *)(v2 + 1664) = v17;
  *(void *)(v2 + 1672) = *(void *)(v17 + 64);
  *(void *)(v2 + 1680) = swift_task_alloc();
  *(void *)(v2 + 1688) = swift_task_alloc();
  *(void *)(v2 + 1696) = swift_task_alloc();
  *(void *)(v2 + 1704) = swift_task_alloc();
  *(void *)(v2 + 1712) = swift_task_alloc();
  *(void *)(v2 + 1720) = swift_task_alloc();
  *(void *)(v2 + 1728) = swift_task_alloc();
  *(void *)(v2 + 1736) = sub_10000588C((uint64_t *)&unk_101653D50);
  *(void *)(v2 + 1744) = swift_task_alloc();
  uint64_t v18 = type metadata accessor for SharedBeaconRecord(0);
  *(void *)(v2 + 1752) = v18;
  *(void *)(v2 + 1760) = *(void *)(v18 - 8);
  *(void *)(v2 + 1768) = swift_task_alloc();
  *(void *)(v2 + 1776) = swift_task_alloc();
  uint64_t v19 = type metadata accessor for MemberSharingCircle();
  *(void *)(v2 + 1784) = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  *(void *)(v2 + 1792) = v20;
  *(void *)(v2 + 1800) = *(void *)(v20 + 64);
  *(void *)(v2 + 1808) = swift_task_alloc();
  *(void *)(v2 + 1816) = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  *(void *)(v2 + 1824) = swift_task_alloc();
  *(void *)(v2 + 1832) = swift_task_alloc();
  *(void *)(v2 + 1840) = swift_task_alloc();
  return _swift_task_switch(sub_100112734, v1, 0);
}

uint64_t sub_100112734()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  sub_100010324(v0[194], (uint64_t)qword_10170D788);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BeaconSharingService: Returning all shares.", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[230];
  uint64_t v5 = v0[208];
  uint64_t v6 = v0[207];
  uint64_t v7 = v0[127];

  v0[101] = &_swiftEmptySetSingleton;
  v0[122] = &_swiftEmptySetSingleton;
  v0[231] = swift_allocBox();
  v0[232] = v8;
  static Date.distantFuture.getter();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v0[233] = v9;
  v0[234] = (v5 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v9(v4, 1, 1, v6);
  v0[235] = *(void *)(v7 + 136);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[236] = v10;
  void *v10 = v0;
  v10[1] = sub_1001128F4;
  return sub_100E598C0();
}

uint64_t sub_1001128F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1016);
  *(void *)(*(void *)v1 + 1896) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100112A0C, v2, 0);
}

uint64_t sub_100112A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t (**)())(v3 + 1896);
  uint64_t v5 = *((void *)v4 + 2);
  *(void *)(v3 + 1904) = v5;
  if (v5)
  {
    uint64_t v6 = *(void *)(v3 + 1880);
    uint64_t v7 = *(void *)(v3 + 1784);
    int v8 = *(_DWORD *)(*(void *)(v3 + 1792) + 80);
    *(_DWORD *)(v3 + 572) = v8;
    *(_DWORD *)(v3 + 596) = enum case for Feature.FindMy.itemSharing(_:);
    *(_OWORD *)(v3 + 1912) = 0u;
    if (*((void *)v4 + 2))
    {
      sub_100130CA8((uint64_t)v4 + ((v8 + 32) & ~(unint64_t)v8), *(void *)(v3 + 1816), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      *(_DWORD *)(v3 + 2424) = *(_DWORD *)(v7 + 24);
      uint64_t v4 = sub_100112BCC;
      a2 = v6;
      a3 = 0;
    }
    else
    {
      __break(1u);
    }
    return _swift_task_switch(v4, a2, a3);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v3 + 2120) = 0;
    if (*(unsigned char *)(v3 + 569))
    {
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v3 + 2128) = v9;
      *uint64_t v9 = v3;
      v9[1] = sub_1001181D4;
      return sub_100E59248();
    }
    else
    {
      uint64_t v11 = (void *)swift_task_alloc();
      *(void *)(v3 + 2144) = v11;
      *uint64_t v11 = v3;
      v11[1] = sub_1001188D4;
      return sub_100E5E634();
    }
  }
}

uint64_t sub_100112BCC()
{
  uint64_t v1 = *(void *)(v0 + 1880);
  uint64_t v2 = *(void *)(v0 + 1728);
  uint64_t v3 = *(void *)(v0 + 1664);
  uint64_t v4 = *(void *)(v0 + 1656);
  uint64_t v5 = *(void *)(v0 + 1816) + *(int *)(v0 + 2424);
  *(void *)(v0 + 1928) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 1936) = v6;
  *(void *)(v0 + 1944) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 1952) = v8;
  *(void *)(v8 + 16) = v1;
  uint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 1960) = v9;
  *(void *)(v0 + 1968) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v9(v8 + v7, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100112CF0, 0, 0);
}

uint64_t sub_100112CF0()
{
  uint64_t v1 = v0[244];
  uint64_t v2 = v0[241];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[247] = v3;
  v3[2] = v2;
  v3[3] = sub_10012E338;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[248] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100112DFC;
  uint64_t v5 = v0[218];
  uint64_t v6 = v0[217];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10012E350, v3, v6);
}

uint64_t sub_100112DFC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1016);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100112F4C, v1, 0);
}

uint64_t sub_100112F4C()
{
  uint64_t v1 = *(void *)(v0 + 1744);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 1760) + 48))(v1, 1, *(void *)(v0 + 1752)) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_101653D50);
LABEL_27:
    uint64_t v45 = *(int *)(v0 + 2424);
    uint64_t v46 = *(void *)(v0 + 1816);
    uint64_t v47 = (void *)swift_task_alloc();
    *(void *)(v0 + 1992) = v47;
    void *v47 = v0;
    v47[1] = sub_1001139BC;
    return sub_100E5B3AC(v46 + v45);
  }
  uint64_t v2 = *(unsigned int *)(v0 + 596);
  sub_10012EC2C(v1, *(void *)(v0 + 1776), type metadata accessor for SharedBeaconRecord);
  uint64_t My = type metadata accessor for Feature.FindMy();
  *(void *)(v0 + 464) = My;
  *(void *)(v0 + 472) = sub_10012B44C((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v4 = sub_10001D958((uint64_t *)(v0 + 440));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(My - 8) + 104))(v4, v2, My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 440);
  if (My)
  {
    uint64_t v5 = *(void *)(v0 + 1776);
    int v6 = *(unsigned __int8 *)(v5 + *(int *)(*(void *)(v0 + 1752) + 64));
    sub_100130CA8(v5, *(void *)(v0 + 1768), type metadata accessor for SharedBeaconRecord);
    uint64_t v7 = *(void *)(v0 + 1768);
    if (v6 == 4)
    {
      char v8 = *(unsigned char *)(v0 + 569);
      sub_10012C39C(v7, type metadata accessor for SharedBeaconRecord);
      if ((v8 & 1) == 0) {
        goto LABEL_6;
      }
LABEL_26:
      sub_10012C39C(*(void *)(v0 + 1776), type metadata accessor for SharedBeaconRecord);
      goto LABEL_27;
    }
    int v42 = *(unsigned __int8 *)(v0 + 569);
    int v43 = *(unsigned __int8 *)(v7 + *(int *)(*(void *)(v0 + 1752) + 64));
    sub_10012C39C(v7, type metadata accessor for SharedBeaconRecord);
    if (v43 != 1 || v42 != 0) {
      goto LABEL_26;
    }
  }
LABEL_6:
  uint64_t v9 = *(void *)(v0 + 1816);
  uint64_t v10 = *(void *)(v0 + 1808);
  uint64_t v11 = *(void *)(v0 + 1648);
  uint64_t v12 = *(void *)(v0 + 1560);
  uint64_t v13 = *(void *)(v0 + 1552);
  unint64_t v14 = (*(unsigned __int8 *)(v0 + 572) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 572);
  uint64_t v15 = sub_1000D1DD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v15, v13);
  sub_100130CA8(v9, v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v16 = swift_allocObject();
  sub_10012EC2C(v10, v16 + v14, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_10012E3A0;
  *(void *)(v17 + 24) = v16;
  os_log_t oslog = (os_log_t)Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  uint64_t v19 = swift_allocObject();
  *(unsigned char *)(v19 + 16) = 112;
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = 8;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = 1752392040;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_100134228;
  *(void *)(v22 + 24) = v21;
  uint64_t v23 = swift_allocObject();
  *(unsigned char *)(v23 + 16) = 33;
  uint64_t v24 = swift_allocObject();
  *(unsigned char *)(v24 + 16) = 8;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_100134090;
  *(void *)(v25 + 24) = v17;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = sub_1000654EC;
  *(void *)(v26 + 24) = v25;
  sub_10000588C(&qword_101639B60);
  uint64_t v27 = swift_allocObject();
  sub_1004B810C(v27, 6);
  void *v28 = sub_100065514;
  v28[1] = v19;
  v28[2] = sub_100065514;
  v28[3] = v20;
  v28[4] = sub_100065504;
  v28[5] = v22;
  v28[6] = sub_100065514;
  v28[7] = v23;
  v28[8] = sub_100065514;
  v28[9] = v24;
  v28[10] = sub_100065500;
  v28[11] = v26;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  os_log_type_t v61 = v18;
  if (!os_log_type_enabled(oslog, v18))
  {
    uint64_t v33 = *(void *)(v0 + 1816);
    uint64_t v60 = *(void *)(v0 + 1648);
    uint64_t v62 = *(void *)(v0 + 1776);
    uint64_t v34 = *(void *)(v0 + 1560);
    uint64_t v35 = *(void *)(v0 + 1552);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v60, v35);
    sub_10012C39C(v62, type metadata accessor for SharedBeaconRecord);
    uint64_t v36 = (uint64_t (*)())sub_10012C39C(v33, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v39 = *(void *)(v0 + 1912);
    goto LABEL_17;
  }
  uint64_t v58 = v26;
  uint64_t v59 = v24;
  uint64_t v29 = *(void *)(v0 + 1912);
  uint64_t v30 = (uint8_t *)sub_1008F9FAC();
  uint64_t v31 = swift_slowAlloc();
  *(void *)(v0 + 992) = 0;
  uint64_t v57 = v30;
  *(void *)(v0 + 1000) = v31;
  *(_WORD *)uint64_t v30 = 515;
  *(void *)(v0 + 984) = v30 + 2;
  *(void *)(v0 + 728) = sub_100065514;
  *(void *)(v0 + 736) = v19;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 728), v0 + 984, v0 + 992, v0 + 1000);
  if (!v29)
  {
    swift_release();
    *(void *)(v0 + 728) = sub_100065514;
    *(void *)(v0 + 736) = v20;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 728), v0 + 984, v0 + 992, v0 + 1000);
    swift_release();
    *(void *)(v0 + 728) = sub_100065504;
    *(void *)(v0 + 736) = v22;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 728), v0 + 984, v0 + 992, v0 + 1000);
    swift_release();
    *(void *)(v0 + 728) = sub_100065514;
    *(void *)(v0 + 736) = v23;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 728), v0 + 984, v0 + 992, v0 + 1000);
    swift_release();
    *(void *)(v0 + 728) = sub_100065514;
    *(void *)(v0 + 736) = v59;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 728), v0 + 984, v0 + 992, v0 + 1000);
    swift_release();
    *(void *)(v0 + 728) = sub_100065500;
    *(void *)(v0 + 736) = v58;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 728), v0 + 984, v0 + 992, v0 + 1000);
    uint64_t v52 = *(void *)(v0 + 1816);
    uint64_t v53 = *(void *)(v0 + 1776);
    uint64_t v54 = *(void *)(v0 + 1648);
    uint64_t v55 = *(void *)(v0 + 1560);
    uint64_t v56 = *(void *)(v0 + 1552);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslog, v61, "Filtering beacon %{private,mask.hash}s", v57, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_1008F9FA0();

    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
    sub_10012C39C(v53, type metadata accessor for SharedBeaconRecord);
    uint64_t v36 = (uint64_t (*)())sub_10012C39C(v52, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v39 = 0;
LABEL_17:
    unint64_t v40 = *(void *)(v0 + 1920) + 1;
    if (v40 == *(void *)(v0 + 1904))
    {
      swift_bridgeObjectRelease();
      *(void *)(v0 + 2120) = v39;
      if (*(unsigned char *)(v0 + 569))
      {
        char v41 = (void *)swift_task_alloc();
        *(void *)(v0 + 2128) = v41;
        *char v41 = v0;
        v41[1] = sub_1001181D4;
        return sub_100E59248();
      }
      else
      {
        uint64_t v51 = (void *)swift_task_alloc();
        *(void *)(v0 + 2144) = v51;
        *uint64_t v51 = v0;
        v51[1] = sub_1001188D4;
        return sub_100E5E634();
      }
    }
    else
    {
      *(void *)(v0 + 1920) = v40;
      *(void *)(v0 + 1912) = v39;
      uint64_t v48 = *(void *)(v0 + 1896);
      if (*(void *)(v48 + 16) <= v40)
      {
        __break(1u);
      }
      else
      {
        uint64_t v49 = *(void *)(v0 + 1880);
        uint64_t v50 = *(void *)(v0 + 1784);
        sub_100130CA8(v48+ ((*(unsigned __int8 *)(v0 + 572) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 572))+ *(void *)(*(void *)(v0 + 1792) + 72) * v40, *(void *)(v0 + 1816), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        *(_DWORD *)(v0 + 2424) = *(_DWORD *)(v50 + 24);
        uint64_t v36 = sub_100112BCC;
        uint64_t v37 = v49;
        uint64_t v38 = 0;
      }
      return _swift_task_switch(v36, v37, v38);
    }
  }
  return swift_errorRelease();
}

uint64_t sub_1001139BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1016);
  *(void *)(*(void *)v1 + 2000) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100113AD4, v2, 0);
}

uint64_t sub_100113AD4()
{
  if ((*(unsigned char *)(v0 + 569) & 1) == 0
    && (v1 = static DatabaseCheckpointMode.__derived_enum_equals(_:_:)(*(unsigned char *)(*(void *)(v0 + 1816) + *(int *)(*(void *)(v0 + 1784) + 40)), 4), uint64_t v2 = *(void *)(v0 + 2000), v1)&& *(void *)(v2 + 16) >= 2uLL&& (v3 = *(void *)(v0 + 1912), v4 = sub_100126CB8(v2), v5 = *(void *)(v0 + 2000), v4))
  {
    uint64_t v6 = *(void *)(v0 + 1640);
    uint64_t v7 = *(void *)(v0 + 1560);
    uint64_t v8 = *(void *)(v0 + 1552);
    uint64_t v9 = sub_1000D1DD8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v5;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    uint64_t v13 = swift_allocObject();
    *(unsigned char *)(v13 + 16) = 0;
    uint64_t v14 = swift_allocObject();
    *(unsigned char *)(v14 + 16) = 8;
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = sub_10012F13C;
    *(void *)(v15 + 24) = v10;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_100060004;
    *(void *)(v16 + 24) = v15;
    sub_10000588C(&qword_101639B60);
    uint64_t inited = swift_initStackObject();
    sub_1004B810C(inited, 3);
    void *v18 = sub_100065514;
    v18[1] = v13;
    v18[2] = sub_100065514;
    v18[3] = v14;
    unsigned char v18[4] = sub_10006000C;
    v18[5] = v16;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled(v11, v12))
    {
      uint64_t v22 = *(void *)(v0 + 1816);
      uint64_t v23 = *(void *)(v0 + 1640);
      uint64_t v24 = *(void *)(v0 + 1560);
      uint64_t v25 = *(void *)(v0 + 1552);
      swift_release();
      swift_release();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
      uint64_t v36 = (uint64_t (*)())sub_10012C39C(v22, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
LABEL_15:
      unint64_t v26 = *(void *)(v0 + 1920) + 1;
      if (v26 == *(void *)(v0 + 1904))
      {
        swift_bridgeObjectRelease();
        *(void *)(v0 + 2120) = v3;
        if (*(unsigned char *)(v0 + 569))
        {
          uint64_t v27 = (void *)swift_task_alloc();
          *(void *)(v0 + 2128) = v27;
          *uint64_t v27 = v0;
          v27[1] = sub_1001181D4;
          return sub_100E59248();
        }
        else
        {
          uint64_t v31 = (void *)swift_task_alloc();
          *(void *)(v0 + 2144) = v31;
          *uint64_t v31 = v0;
          v31[1] = sub_1001188D4;
          return sub_100E5E634();
        }
      }
      else
      {
        *(void *)(v0 + 1920) = v26;
        *(void *)(v0 + 1912) = v3;
        uint64_t v28 = *(void *)(v0 + 1896);
        if (*(void *)(v28 + 16) <= v26)
        {
          __break(1u);
        }
        else
        {
          uint64_t v29 = *(void *)(v0 + 1880);
          uint64_t v30 = *(void *)(v0 + 1784);
          sub_100130CA8(v28+ ((*(unsigned __int8 *)(v0 + 572) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 572))+ *(void *)(*(void *)(v0 + 1792) + 72) * v26, *(void *)(v0 + 1816), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
          *(_DWORD *)(v0 + 2424) = *(_DWORD *)(v30 + 24);
          uint64_t v36 = sub_100112BCC;
          uint64_t v37 = v29;
          uint64_t v38 = 0;
        }
        return _swift_task_switch(v36, v37, v38);
      }
    }
    uint64_t v19 = (uint8_t *)sub_1008F9FAC();
    *(void *)(v0 + 952) = 0;
    *(void *)(v0 + 960) = 0;
    buf = v19;
    *(_WORD *)uint64_t v19 = 256;
    *(void *)(v0 + 944) = v19 + 2;
    *(void *)(v0 + 648) = sub_100065514;
    *(void *)(v0 + 656) = v13;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 648), v0 + 944, v0 + 952, v0 + 960);
    if (!v3)
    {
      swift_release();
      *(void *)(v0 + 648) = sub_100065514;
      *(void *)(v0 + 656) = v14;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 648), v0 + 944, v0 + 952, v0 + 960);
      swift_release();
      *(void *)(v0 + 648) = sub_10006000C;
      *(void *)(v0 + 656) = v16;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 648), v0 + 944, v0 + 952, v0 + 960);
      uint64_t v32 = *(void *)(v0 + 1816);
      uint64_t v33 = *(void *)(v0 + 1640);
      uint64_t v34 = *(void *)(v0 + 1560);
      uint64_t v35 = *(void *)(v0 + 1552);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Filtering out tentativelyRevoked share that has %ld other member circle(s).", buf, 0xCu);
      sub_1008F9FA0();

      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      uint64_t v36 = (uint64_t (*)())sub_10012C39C(v32, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v3 = 0;
      goto LABEL_15;
    }
    return swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 2008) = v21;
    void *v21 = v0;
    v21[1] = sub_100114118;
    return sub_100E57788();
  }
}

uint64_t sub_100114118(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1016);
  *(void *)(*(void *)v1 + 2016) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100114230, v2, 0);
}

uint64_t sub_100114230()
{
  uint64_t v1 = *(int *)(v0 + 2424);
  uint64_t v2 = *(void *)(v0 + 1816);
  sub_1006D8A30();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 2024) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001142E0;
  uint64_t v4 = *(void *)(v0 + 1720);
  uint64_t v5 = *(void *)(v0 + 1448);
  return sub_1012E07AC(v5, v2 + v1, v4);
}

uint64_t sub_1001142E0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 2032) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[215];
  uint64_t v4 = v2[208];
  uint64_t v5 = v2[207];
  uint64_t v6 = v2[127];
  if (v0)
  {
    swift_release();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v7 = sub_1001217C4;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    swift_release();
    uint64_t v7 = sub_1001144B8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1001144B8()
{
  uint64_t v1 = *(void *)(v0 + 1448);
  uint64_t v2 = type metadata accessor for KeyDropLostItemDates(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, &qword_10163B8A8);
    uint64_t v93 = *(void *)(v0 + 2032);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 1488) + 56))(*(void *)(v0 + 1472), 1, 1, *(void *)(v0 + 1480));
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 1488);
    uint64_t v4 = *(void *)(v0 + 1480);
    uint64_t v5 = *(void *)(v0 + 1472);
    sub_10001D074(v1, v5, (uint64_t *)&unk_10163AC90);
    sub_10012C39C(v1, type metadata accessor for KeyDropLostItemDates);
    uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
    if (v6(v5, 1, v4) != 1)
    {
      uint64_t v30 = *(void *)(v0 + 1480);
      uint64_t v31 = *(void *)(v0 + 1464);
      uint64_t v32 = *(void (**)(void, void, uint64_t))(*(void *)(v0 + 1488) + 32);
      v32(*(void *)(v0 + 1544), *(void *)(v0 + 1472), v30);
      type metadata accessor for DelegatedShareUseCase();
      sub_100575B34();
      if (v6(v31, 1, v30) == 1)
      {
        uint64_t v33 = *(void *)(v0 + 1464);
        static Date.distantFuture.getter();
        sub_10001DAB4(v33, (uint64_t *)&unk_10163AC90);
      }
      else
      {
        v32(*(void *)(v0 + 1536), *(void *)(v0 + 1464), *(void *)(v0 + 1480));
      }
      uint64_t v34 = *(void *)(v0 + 1528);
      uint64_t v35 = *(void *)(v0 + 1488);
      uint64_t v36 = *(void *)(v0 + 1480);
      (*(void (**)(uint64_t, void, uint64_t))(v35 + 16))(v34, *(void *)(v0 + 1856), v36);
      char v37 = static Date.< infix(_:_:)();
      uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v38(v34, v36);
      if (v37)
      {
        uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1936);
        bufa = *(uint8_t **)(v0 + 1864);
        uint64_t v94 = *(void *)(v0 + 1856);
        uint64_t v40 = *(void *)(v0 + 1840);
        uint64_t v41 = *(void *)(v0 + 1816);
        uint64_t v42 = *(void *)(v0 + 1784);
        uint64_t v43 = *(void *)(v0 + 1656);
        uint64_t v44 = *(void *)(v0 + 1488);
        uint64_t v89 = *(void *)(v0 + 1480);
        uint64_t v90 = *(void *)(v0 + 1536);
        sub_10001DAB4(v40, &qword_101638CF0);
        v39(v40, v41 + *(int *)(v42 + 28), v43);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))bufa)(v40, 0, 1, v43);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 24))(v94, v90, v89);
      }
      uint64_t v45 = *(void *)(v0 + 1544);
      uint64_t v46 = *(void *)(v0 + 1536);
      uint64_t v47 = *(void *)(v0 + 1528);
      uint64_t v48 = *(void *)(v0 + 1480);
      static Date.trustedNow.getter(v47);
      Date.timeIntervalSince(_:)();
      double v50 = v49;
      v38(v47, v48);
      v38(v46, v48);
      v38(v45, v48);
      BOOL v82 = v50 > 0.0;
      uint64_t v81 = *(void *)(v0 + 2032);
LABEL_18:
      *(unsigned char *)(v0 + 570) = v82;
      uint64_t v51 = sub_100126DF4();
      uint64_t v52 = v51;
      *(void *)(v0 + 2040) = v51;
      char v53 = *(unsigned char *)(v51 + 32);
      *(unsigned char *)(v0 + 571) = v53;
      uint64_t v54 = -1;
      uint64_t v55 = -1 << v53;
      uint64_t v56 = *(void *)(v51 + 64);
      if (-v55 < 64) {
        uint64_t v54 = ~(-1 << -(char)v55);
      }
      *(void *)(v0 + 2048) = v81;
      unint64_t v57 = v54 & v56;
      if (v57)
      {
        uint64_t v58 = 0;
        unint64_t v59 = __clz(__rbit64(v57));
        uint64_t v60 = (v57 - 1) & v57;
        goto LABEL_22;
      }
      unint64_t v76 = 63 - v55;
      if (v76 > 0x7F)
      {
        unint64_t v77 = *(void *)(v51 + 72);
        if (v77)
        {
          uint64_t v58 = 1;
LABEL_27:
          uint64_t v60 = (v77 - 1) & v77;
          unint64_t v59 = __clz(__rbit64(v77)) + (v58 << 6);
LABEL_22:
          *(void *)(v0 + 2064) = v60;
          *(void *)(v0 + 2056) = v58;
          os_log_type_t v61 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1936);
          uint64_t v62 = *(void *)(v0 + 1656);
          uint64_t v63 = *(void *)(v0 + 1440);
          uint64_t v64 = *(void *)(v0 + 1384);
          uint64_t v65 = *(void *)(v0 + 1376);
          unint64_t v66 = *(void *)(*(void *)(v0 + 1664) + 72) * v59;
          v61(v63, *(void *)(v51 + 48) + v66, v62);
          v61(v63 + *(int *)(v65 + 48), *(void *)(v52 + 56) + v66, v62);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v63, 0, 1, v65);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v63, 1, v65) != 1)
          {
            unint64_t v67 = *(void (**)(void))(v0 + 1960);
            uint64_t v68 = *(void *)(v0 + 1656);
            uint64_t v69 = *(void *)(v0 + 1440);
            uint64_t v70 = *(void *)(v0 + 1424);
            uint64_t v71 = *(int *)(*(void *)(v0 + 1376) + 48);
            *(_DWORD *)(v0 + 2428) = v71;
            uint64_t v72 = v70 + v71;
            uint64_t v73 = v69 + v71;
            v67();
            ((void (*)(uint64_t, uint64_t, uint64_t))v67)(v72, v73, v68);
            uint64_t v74 = (void *)swift_task_alloc();
            *(void *)(v0 + 2072) = v74;
            void *v74 = v0;
            v74[1] = sub_100114F20;
            uint64_t v75 = *(void *)(v0 + 1312);
LABEL_45:
            return sub_100E58EF4(v75, v72);
          }
LABEL_44:
          swift_release();
          uint64_t v86 = *(void *)(v0 + 1816);
          uint64_t v87 = *(void *)(v0 + 1784);
          *(void *)(v0 + 2104) = qword_10134BD98[*(char *)(v86 + *(int *)(v87 + 40))];
          uint64_t v72 = v86 + *(int *)(v87 + 32);
          uint64_t v88 = (void *)swift_task_alloc();
          *(void *)(v0 + 2112) = v88;
          *uint64_t v88 = v0;
          v88[1] = sub_100117230;
          uint64_t v75 = *(void *)(v0 + 1296);
          goto LABEL_45;
        }
        if (v76 >= 0xC0)
        {
          unint64_t v77 = *(void *)(v51 + 80);
          if (v77)
          {
            uint64_t v58 = 2;
            goto LABEL_27;
          }
          if (v76 >= 0x100)
          {
            unint64_t v77 = *(void *)(v51 + 88);
            if (v77)
            {
              uint64_t v58 = 3;
              goto LABEL_27;
            }
            if (v76 >= 0x140)
            {
              unint64_t v77 = *(void *)(v51 + 96);
              if (v77)
              {
                uint64_t v58 = 4;
                goto LABEL_27;
              }
              uint64_t v83 = 0;
              uint64_t v84 = v76 >> 6;
              if (v84 <= 5) {
                uint64_t v84 = 5;
              }
              uint64_t v85 = v84 - 5;
              while (v85 != v83)
              {
                unint64_t v77 = *(void *)(v51 + 104 + 8 * v83++);
                if (v77)
                {
                  uint64_t v58 = v83 + 4;
                  goto LABEL_27;
                }
              }
            }
          }
        }
      }
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 1384) + 56))(*(void *)(v0 + 1440), 1, 1, *(void *)(v0 + 1376));
      goto LABEL_44;
    }
    uint64_t v93 = *(void *)(v0 + 2032);
  }
  uint64_t v7 = *(void *)(v0 + 1816);
  uint64_t v8 = *(void *)(v0 + 1808);
  uint64_t v9 = *(void *)(v0 + 1632);
  uint64_t v10 = *(void *)(v0 + 1560);
  uint64_t v11 = *(void *)(v0 + 1552);
  unint64_t v12 = (*(unsigned __int8 *)(v0 + 572) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 572);
  sub_10001DAB4(*(void *)(v0 + 1472), (uint64_t *)&unk_10163AC90);
  uint64_t v13 = sub_1000D1DD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v13, v11);
  sub_100130CA8(v7, v8, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v14 = swift_allocObject();
  sub_10012EC2C(v8, v14 + v12, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_10012E3A0;
  *(void *)(v15 + 24) = v14;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  uint64_t v18 = swift_allocObject();
  *(unsigned char *)(v18 + 16) = 32;
  uint64_t v19 = swift_allocObject();
  *(unsigned char *)(v19 + 16) = 8;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_10012E3CC;
  *(void *)(v20 + 24) = v15;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_10005F790;
  *(void *)(v21 + 24) = v20;
  sub_10000588C(&qword_101639B60);
  uint64_t inited = swift_initStackObject();
  sub_1004B810C(inited, 3);
  *uint64_t v23 = sub_10005F778;
  v23[1] = v18;
  long long v23[2] = sub_100065514;
  v23[3] = v19;
  v23[4] = sub_10005F7D0;
  v23[5] = v21;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v16, v17))
  {
    uint64_t v27 = *(void *)(v0 + 1632);
    uint64_t v28 = *(void *)(v0 + 1560);
    uint64_t v29 = *(void *)(v0 + 1552);

    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    BOOL v82 = 0;
    uint64_t v81 = v93;
    goto LABEL_18;
  }
  uint64_t v24 = (uint8_t *)sub_1008F9FAC();
  uint64_t v25 = swift_slowAlloc();
  *(void *)(v0 + 912) = 0;
  buf = v24;
  *(void *)(v0 + 920) = v25;
  *(_WORD *)uint64_t v24 = 258;
  *(void *)(v0 + 904) = v24 + 2;
  *(void *)(v0 + 616) = sub_10005F778;
  *(void *)(v0 + 624) = v18;
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 616), v0 + 904, v0 + 912, v0 + 920);
  if (!v93)
  {
    swift_release();
    *(void *)(v0 + 616) = sub_100065514;
    *(void *)(v0 + 624) = v19;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 616), v0 + 904, v0 + 912, v0 + 920);
    swift_release();
    *(void *)(v0 + 616) = sub_10005F7D0;
    *(void *)(v0 + 624) = v21;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 616), v0 + 904, v0 + 912, v0 + 920);
    uint64_t v78 = *(void *)(v0 + 1632);
    uint64_t v79 = *(void *)(v0 + 1560);
    uint64_t v80 = *(void *)(v0 + 1552);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Beacon %s is not delegated.", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_1008F9FA0();

    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
    uint64_t v81 = 0;
    BOOL v82 = 0;
    goto LABEL_18;
  }
  return swift_errorRelease();
}

uint64_t sub_100114F20()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1016);
  swift_task_dealloc();
  return _swift_task_switch(sub_100115030, v1, 0);
}

uint64_t sub_100115030()
{
  uint64_t v1 = *(void *)(v0 + 1328);
  uint64_t v2 = *(void *)(v0 + 1320);
  uint64_t v3 = *(void *)(v0 + 1312);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  *(void *)(v0 + 2080) = v4;
  *(void *)(v0 + 2088) = (v1 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v3, 1, v2) == 1)
  {
    uint64_t v5 = *(void *)(v0 + 1816);
    uint64_t v6 = *(void *)(v0 + 1808);
    uint64_t v7 = *(void *)(v0 + 1616);
    uint64_t v8 = *(void *)(v0 + 1560);
    uint64_t v9 = *(void *)(v0 + 1552);
    unint64_t v10 = (*(unsigned __int8 *)(v0 + 572) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 572);
    sub_10001DAB4(v3, (uint64_t *)&unk_10163B890);
    uint64_t v11 = sub_1000D1DD8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v11, v9);
    sub_100130CA8(v5, v6, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v12 = swift_allocObject();
    sub_10012EC2C(v6, v12 + v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = sub_10012E450;
    *(void *)(v13 + 24) = v12;
    sub_100130CA8(v5, v6, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v14 = swift_allocObject();
    sub_10012EC2C(v6, v14 + v10, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = sub_10012E4FC;
    *(void *)(v15 + 24) = v14;
    os_log_t oslog = (os_log_t)Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.error.getter();
    uint64_t v100 = swift_allocObject();
    *(unsigned char *)(v100 + 16) = 112;
    uint64_t v16 = swift_allocObject();
    *(unsigned char *)(v16 + 16) = 8;
    uint64_t v17 = v16;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = 1752392040;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_100134228;
    *(void *)(v19 + 24) = v18;
    uint64_t v20 = v19;
    uint64_t v21 = swift_allocObject();
    *(unsigned char *)(v21 + 16) = 33;
    uint64_t v99 = swift_allocObject();
    *(unsigned char *)(v99 + 16) = 8;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = sub_100134090;
    *(void *)(v22 + 24) = v13;
    uint64_t v95 = swift_allocObject();
    *(void *)(v95 + 16) = sub_1000654EC;
    *(void *)(v95 + 24) = v22;
    uint64_t v94 = swift_allocObject();
    *(unsigned char *)(v94 + 16) = 112;
    uint64_t v98 = swift_allocObject();
    *(unsigned char *)(v98 + 16) = 8;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = 1752392040;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = sub_100134228;
    *(void *)(v24 + 24) = v23;
    uint64_t v25 = swift_allocObject();
    *(unsigned char *)(v25 + 16) = 33;
    uint64_t v97 = swift_allocObject();
    *(unsigned char *)(v97 + 16) = 8;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = sub_100134090;
    *(void *)(v26 + 24) = v15;
    uint64_t v92 = v0;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = sub_1000654EC;
    *(void *)(v27 + 24) = v26;
    uint64_t v28 = v25;
    sub_10000588C(&qword_101639B60);
    uint64_t v29 = swift_allocObject();
    sub_1004B810C(v29, 12);
    void *v30 = sub_100065514;
    v30[1] = v100;
    v30[2] = sub_100065514;
    v30[3] = v17;
    uint64_t v31 = v17;
    v30[4] = sub_100065504;
    v30[5] = v20;
    uint64_t v32 = v20;
    v30[6] = sub_100065514;
    v30[7] = v21;
    v30[8] = sub_100065514;
    v30[9] = v99;
    v30[10] = sub_100065500;
    v30[11] = v95;
    v30[12] = sub_100065514;
    v30[13] = v94;
    v30[14] = sub_100065514;
    v30[15] = v98;
    v30[16] = sub_100065504;
    v30[17] = v24;
    v30[18] = sub_100065514;
    v30[19] = v28;
    v30[20] = sub_100065514;
    v30[21] = v97;
    v30[22] = sub_100065500;
    v30[23] = v27;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v91 = v21;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v90 = v28;
    swift_retain();
    swift_retain();
    uint64_t v89 = v27;
    swift_retain();
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled(oslog, v93))
    {
      uint64_t v33 = v92;
      uint64_t v53 = *(void *)(v92 + 1616);
      uint64_t v54 = *(void *)(v92 + 1560);
      uint64_t v55 = *(void *)(v92 + 1552);
      uint64_t v56 = *(void *)(v92 + 1424);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
      uint64_t result = sub_10001DAB4(v56, &qword_101661010);
      uint64_t v57 = *(void *)(v92 + 2048);
      goto LABEL_16;
    }
    uint64_t v33 = v92;
    uint64_t v34 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v92 + 664);
    uint64_t v35 = v92 + 832;
    uint64_t v36 = v92 + 840;
    uint64_t v37 = v92 + 848;
    uint64_t v38 = *(void *)(v92 + 2048);
    uint64_t v39 = (uint8_t *)sub_1008F9FAC();
    uint64_t v40 = swift_slowAlloc();
    *(void *)(v92 + 840) = 0;
    buf = v39;
    *(void *)(v92 + 848) = v40;
    *(_WORD *)uint64_t v39 = 1027;
    *(void *)(v92 + 832) = v39 + 2;
    *(void *)(v92 + 664) = sub_100065514;
    *(void *)(v92 + 672) = v100;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v92 + 664), v92 + 832, v92 + 840, v92 + 848);
    if (v38)
    {
      return swift_errorRelease();
    }
    else
    {
      swift_release();
      *(void *)(v92 + 664) = sub_100065514;
      *(void *)(v92 + 672) = v31;
      sub_1008F9FB4(v34, v35, v36, v37);
      swift_release();
      *(void *)(v92 + 664) = sub_100065504;
      *(void *)(v92 + 672) = v32;
      sub_1008F9FB4(v34, v35, v36, v37);
      swift_release();
      *(void *)(v92 + 664) = sub_100065514;
      *(void *)(v92 + 672) = v91;
      sub_1008F9FB4(v34, v35, v36, v37);
      swift_release();
      *(void *)(v92 + 664) = sub_100065514;
      *(void *)(v92 + 672) = v99;
      sub_1008F9FB4(v34, v35, v36, v37);
      swift_release();
      *(void *)(v92 + 664) = sub_100065500;
      *(void *)(v92 + 672) = v95;
      sub_1008F9FB4(v34, v35, v36, v37);
      swift_release();
      *(void *)(v92 + 664) = sub_100065514;
      *(void *)(v92 + 672) = v94;
      sub_1008F9FB4(v34, v35, v36, v37);
      swift_release();
      *(void *)(v92 + 664) = sub_100065514;
      *(void *)(v92 + 672) = v98;
      sub_1008F9FB4(v34, v35, v36, v37);
      swift_release();
      *(void *)(v92 + 664) = sub_100065504;
      *(void *)(v92 + 672) = v24;
      sub_1008F9FB4(v34, v35, v36, v37);
      swift_release();
      *(void *)(v92 + 664) = sub_100065514;
      *(void *)(v92 + 672) = v90;
      sub_1008F9FB4(v34, v35, v36, v37);
      swift_release();
      *(void *)(v92 + 664) = sub_100065514;
      *(void *)(v92 + 672) = v97;
      sub_1008F9FB4(v34, v35, v36, v37);
      swift_release();
      *(void *)(v92 + 664) = sub_100065500;
      *(void *)(v92 + 672) = v89;
      sub_1008F9FB4(v34, v35, v36, v37);
      while (1)
      {
        uint64_t v84 = *(void *)(v33 + 1616);
        uint64_t v85 = *(void *)(v33 + 1560);
        uint64_t v86 = *(void *)(v33 + 1552);
        uint64_t v87 = *(void *)(v33 + 1424);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, oslog, v93, "Missing member peer trust for member in member circle: %{private,mask.hash}s,\n owner: %{private,mask.hash}s.", buf, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
        uint64_t result = sub_10001DAB4(v87, &qword_101661010);
        uint64_t v57 = 0;
LABEL_16:
        unint64_t v58 = *(void *)(v33 + 2064);
        int64_t v59 = *(void *)(v33 + 2056);
        *(void *)(v33 + 2048) = v57;
        if (v58)
        {
          uint64_t v60 = (v58 - 1) & v58;
          unint64_t v61 = __clz(__rbit64(v58)) | (v59 << 6);
          uint64_t v62 = *(void *)(v33 + 2040);
          goto LABEL_18;
        }
        int64_t v76 = v59 + 1;
        if (!__OFADD__(v59, 1)) {
          break;
        }
        __break(1u);
      }
      int64_t v77 = (unint64_t)((1 << *(unsigned char *)(v33 + 571)) + 63) >> 6;
      uint64_t v62 = *(void *)(v33 + 2040);
      if (v76 >= v77) {
        goto LABEL_34;
      }
      uint64_t v78 = v62 + 64;
      unint64_t v79 = *(void *)(v62 + 64 + 8 * v76);
      ++v59;
      if (v79) {
        goto LABEL_23;
      }
      int64_t v59 = v76 + 1;
      if (v76 + 1 >= v77) {
        goto LABEL_34;
      }
      unint64_t v79 = *(void *)(v78 + 8 * v59);
      if (v79) {
        goto LABEL_23;
      }
      int64_t v59 = v76 + 2;
      if (v76 + 2 >= v77) {
        goto LABEL_34;
      }
      unint64_t v79 = *(void *)(v78 + 8 * v59);
      if (v79) {
        goto LABEL_23;
      }
      int64_t v80 = v76 + 3;
      if (v80 >= v77)
      {
LABEL_34:
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v33 + 1384) + 56))(*(void *)(v33 + 1440), 1, 1, *(void *)(v33 + 1376));
        goto LABEL_35;
      }
      unint64_t v79 = *(void *)(v78 + 8 * v80);
      if (v79)
      {
        int64_t v59 = v80;
LABEL_23:
        uint64_t v60 = (v79 - 1) & v79;
        unint64_t v61 = __clz(__rbit64(v79)) + (v59 << 6);
LABEL_18:
        *(void *)(v33 + 2064) = v60;
        *(void *)(v33 + 2056) = v59;
        uint64_t v63 = *(void (**)(uint64_t, unint64_t, uint64_t))(v33 + 1936);
        uint64_t v64 = *(void *)(v33 + 1656);
        uint64_t v65 = *(void *)(v33 + 1440);
        uint64_t v66 = *(void *)(v33 + 1384);
        uint64_t v67 = *(void *)(v33 + 1376);
        unint64_t v68 = *(void *)(*(void *)(v33 + 1664) + 72) * v61;
        v63(v65, *(void *)(v62 + 48) + v68, v64);
        v63(v65 + *(int *)(v67 + 48), *(void *)(v62 + 56) + v68, v64);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v65, 0, 1, v67);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v65, 1, v67) != 1)
        {
          uint64_t v69 = *(void (**)(void))(v33 + 1960);
          uint64_t v70 = *(void *)(v33 + 1656);
          uint64_t v71 = *(void *)(v33 + 1440);
          uint64_t v72 = *(void *)(v33 + 1424);
          uint64_t v73 = *(int *)(*(void *)(v33 + 1376) + 48);
          *(_DWORD *)(v33 + 2428) = v73;
          uint64_t v50 = v72 + v73;
          uint64_t v74 = v71 + v73;
          v69();
          ((void (*)(uint64_t, uint64_t, uint64_t))v69)(v50, v74, v70);
          uint64_t v75 = (void *)swift_task_alloc();
          *(void *)(v33 + 2072) = v75;
          void *v75 = v33;
          v75[1] = sub_100114F20;
          uint64_t v52 = *(void *)(v33 + 1312);
          goto LABEL_36;
        }
LABEL_35:
        swift_release();
        uint64_t v81 = *(void *)(v33 + 1816);
        uint64_t v82 = *(void *)(v33 + 1784);
        *(void *)(v33 + 2104) = qword_10134BD98[*(char *)(v81 + *(int *)(v82 + 40))];
        uint64_t v50 = v81 + *(int *)(v82 + 32);
        uint64_t v83 = (void *)swift_task_alloc();
        *(void *)(v33 + 2112) = v83;
        *uint64_t v83 = v33;
        v83[1] = sub_100117230;
        uint64_t v52 = *(void *)(v33 + 1296);
        goto LABEL_36;
      }
      while (1)
      {
        int64_t v59 = v80 + 1;
        if (__OFADD__(v80, 1)) {
          break;
        }
        if (v59 >= v77) {
          goto LABEL_34;
        }
        unint64_t v79 = *(void *)(v78 + 8 * v59);
        ++v80;
        if (v79) {
          goto LABEL_23;
        }
      }
      __break(1u);
    }
  }
  else
  {
    uint64_t v42 = *(void *)(v0 + 1368);
    uint64_t v43 = *(_OWORD **)(v0 + 1360);
    sub_10012EC2C(v3, v42, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    sub_100A6227C(v42, v43);
    uint64_t v44 = *(int *)(v2 + 32);
    *(_DWORD *)(v0 + 2432) = v44;
    uint64_t v45 = (char *)v43 + v44;
    Swift::Int v47 = *(void *)((char *)v43 + v44);
    uint64_t v46 = *((void *)v45 + 1);
    uint64_t v48 = (void *)(v42 + v44);
    BOOL v49 = v47 == *v48 && v46 == v48[1];
    if (!v49 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      swift_bridgeObjectRetain();
      sub_100DCB3D0(v0 + 552, v47, v46, 1);
      swift_bridgeObjectRelease();
    }
    uint64_t v50 = *(void *)(v0 + 1816) + *(int *)(*(void *)(v0 + 1784) + 32);
    uint64_t v51 = (void *)swift_task_alloc();
    *(void *)(v0 + 2096) = v51;
    *uint64_t v51 = v0;
    v51[1] = sub_100115EA0;
    uint64_t v52 = *(void *)(v0 + 1304);
LABEL_36:
    return sub_100E58EF4(v52, v50);
  }
  return result;
}

uint64_t sub_100115EA0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1016);
  swift_task_dealloc();
  return _swift_task_switch(sub_100115FB0, v1, 0);
}

uint64_t sub_100115FB0()
{
  uint64_t v136 = v0;
  uint64_t v1 = *(void *)(v0 + 1304);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0 + 2080))(v1, 1, *(void *)(v0 + 1320)) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B890);
    goto LABEL_12;
  }
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 1936);
  uint64_t v3 = *(void *)(v134 + 1816);
  uint64_t v4 = *(void *)(v134 + 1784);
  uint64_t v5 = *(void *)(v134 + 1656);
  uint64_t v6 = *(void *)(v134 + 1424);
  uint64_t v7 = *(void *)(v134 + 1416);
  uint64_t v8 = *(void *)(v134 + 1376);
  uint64_t v9 = v6 + *(int *)(v134 + 2428);
  sub_10012EC2C(v1, *(void *)(v134 + 1352), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  uint64_t v10 = *(void *)(v3 + *(int *)(v4 + 36));
  uint64_t v11 = v7 + *(int *)(v8 + 48);
  v2(v7, v6, v5);
  v2(v11, v9, v5);
  uint64_t v12 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  if (!v12 || (unint64_t v13 = sub_1007240CC(v11), (v14 & 1) == 0))
  {
    uint64_t v34 = *(void *)(v134 + 1664);
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    goto LABEL_10;
  }
  uint64_t v15 = *(void *)(v134 + 1664);
  int v16 = *(unsigned __int8 *)(*(void *)(v10 + 56) + v13);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  if (v16 == 6)
  {
LABEL_10:
    uint64_t v35 = *(void *)(v134 + 1656);
    uint64_t v36 = *(void *)(v134 + 1416);
    uint64_t v37 = *(void *)(v134 + 1352);
    v17(v11, v35);
    v17(v36, v35);
    uint64_t v38 = v37;
LABEL_11:
    sub_10012C39C(v38, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    goto LABEL_12;
  }
  uint64_t v18 = *(void *)(v134 + 1656);
  uint64_t v19 = *(void *)(v134 + 1416);
  v17(v11, v18);
  v17(v19, v18);
  sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
  swift_bridgeObjectRetain();
  id v20 = sub_100126F1C();
  if (!v20)
  {
    uint64_t v38 = *(void *)(v134 + 1352);
    goto LABEL_11;
  }
  uint64_t v21 = v20;
  swift_bridgeObjectRetain();
  id v22 = sub_100126F1C();
  if (v22)
  {
    os_log_type_t v122 = v134 + 40;
    char v120 = *(unsigned char *)(v134 + 570);
    uint64_t v23 = *(void (**)(void))(v134 + 1936);
    uint64_t v24 = *(void *)(v134 + 1816);
    unint64_t v132 = *(uint64_t **)(v134 + 1808);
    uint64_t v113 = *(void *)(v134 + 1784);
    uint64_t v130 = *(void *)(v134 + 1728);
    uint64_t v114 = *(void *)(v134 + 1712);
    uint64_t v25 = *(void *)(v134 + 1656);
    uint64_t v26 = *(uint8_t **)(v134 + 1424);
    uint64_t v127 = *(NSObject **)(v134 + 1400);
    uint64_t v128 = *(void *)(v134 + 1408);
    uint64_t v27 = *(void *)(v134 + 1376);
    uint64_t v123 = *(void *)(v134 + 1368);
    uint64_t v125 = *(void *)(v134 + 1360);
    uint64_t v111 = &v26[*(int *)(v134 + 2428)];
    uint64_t v112 = v24 + *(int *)(v134 + 2424);
    uint64_t v116 = *(void *)(v134 + 1344);
    uint64_t v117 = *(void *)(v134 + 1352);
    uint64_t v118 = v22;
    sub_10001D4B0(0, &qword_10163B870);
    uint64_t v28 = v128 + *(int *)(v27 + 48);
    uint64_t v115 = v26;
    v23();
    ((void (*)(uint64_t, uint8_t *, uint64_t))v23)(v28, v111, v25);
    sub_100130CA8(v24, (uint64_t)v132, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    ((void (*)(uint64_t, uint64_t, uint64_t))v23)(v130, v112, v25);
    ((void (*)(uint64_t, uint64_t, uint64_t))v23)(v114, v24 + *(int *)(v113 + 28), v25);
    uint64_t v29 = (uint64_t)v127 + *(int *)(v27 + 48);
    v23();
    ((void (*)(uint64_t, uint8_t *, uint64_t))v23)(v29, v111, v25);
    sub_100130CA8(v117, v116, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    id v30 = v21;
    id v31 = sub_10012C3FC(v128, v132, v130, v114, v29, (uint64_t)v30, (uint64_t)v118, v16, v116, v120);

    v17((uint64_t)v127, v25);
    v17(v28, v25);
    sub_100DCB5BC(v135, v31);

    sub_10012C39C(v117, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    sub_10012C39C(v123, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    sub_10001DAB4((uint64_t)v115, &qword_101661010);
    uint64_t result = sub_10012C39C(v125, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v33 = *(void *)(v134 + 2048);
    goto LABEL_20;
  }
  sub_10012C39C(*(void *)(v134 + 1352), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);

LABEL_12:
  uint64_t v39 = *(void *)(v134 + 1816);
  uint64_t v40 = *(void *)(v134 + 1808);
  uint64_t v41 = *(void *)(v134 + 1624);
  uint64_t v42 = *(void *)(v134 + 1560);
  uint64_t v43 = *(void *)(v134 + 1552);
  unint64_t v44 = (*(unsigned __int8 *)(v134 + 572) + 16) & ~(unint64_t)*(unsigned __int8 *)(v134 + 572);
  uint64_t v45 = sub_1000D1DD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v41, v45, v43);
  sub_100130CA8(v39, v40, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v46 = swift_allocObject();
  sub_10012EC2C(v40, v46 + v44, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = sub_10012E450;
  *(void *)(v47 + 24) = v46;
  sub_100130CA8(v39, v40, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v48 = swift_allocObject();
  sub_10012EC2C(v40, v48 + v44, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = sub_10012E4FC;
  *(void *)(v49 + 24) = v48;
  uint64_t v127 = Logger.logObject.getter();
  os_log_type_t v122 = static os_log_type_t.error.getter();
  uint64_t v133 = swift_allocObject();
  *(unsigned char *)(v133 + 16) = 112;
  uint64_t v50 = swift_allocObject();
  *(unsigned char *)(v50 + 16) = 8;
  uint64_t v51 = v50;
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = 1752392040;
  uint64_t v53 = swift_allocObject();
  *(void *)(v53 + 16) = sub_100134228;
  *(void *)(v53 + 24) = v52;
  uint64_t v54 = v53;
  uint64_t v55 = swift_allocObject();
  *(unsigned char *)(v55 + 16) = 33;
  uint64_t v56 = v55;
  uint64_t v126 = swift_allocObject();
  *(unsigned char *)(v126 + 16) = 8;
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = sub_100134090;
  *(void *)(v57 + 24) = v47;
  uint64_t v58 = swift_allocObject();
  *(void *)(v58 + 16) = sub_1000654EC;
  *(void *)(v58 + 24) = v57;
  uint64_t v59 = v58;
  uint64_t v131 = v58;
  uint64_t v129 = swift_allocObject();
  *(unsigned char *)(v129 + 16) = 112;
  uint64_t v124 = swift_allocObject();
  *(unsigned char *)(v124 + 16) = 8;
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = 1752392040;
  uint64_t v61 = swift_allocObject();
  *(void *)(v61 + 16) = sub_100134228;
  *(void *)(v61 + 24) = v60;
  uint64_t v62 = swift_allocObject();
  *(unsigned char *)(v62 + 16) = 33;
  uint64_t v63 = swift_allocObject();
  *(unsigned char *)(v63 + 16) = 8;
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = sub_100134090;
  *(void *)(v64 + 24) = v49;
  uint64_t v65 = swift_allocObject();
  *(void *)(v65 + 16) = sub_1000654EC;
  *(void *)(v65 + 24) = v64;
  sub_10000588C(&qword_101639B60);
  uint64_t v66 = swift_allocObject();
  sub_1004B810C(v66, 12);
  *uint64_t v67 = sub_100065514;
  v67[1] = v133;
  v67[2] = sub_100065514;
  v67[3] = v51;
  uint64_t v68 = v51;
  v67[4] = sub_100065504;
  v67[5] = v54;
  uint64_t v69 = v54;
  v67[6] = sub_100065514;
  v67[7] = v56;
  v67[8] = sub_100065514;
  v67[9] = v126;
  v67[10] = sub_100065500;
  v67[11] = v59;
  v67[12] = sub_100065514;
  v67[13] = v129;
  v67[14] = sub_100065514;
  v67[15] = v124;
  v67[16] = sub_100065504;
  v67[17] = v61;
  v67[18] = sub_100065514;
  v67[19] = v62;
  v67[20] = sub_100065514;
  v67[21] = v63;
  v67[22] = sub_100065500;
  v67[23] = v65;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v119 = v62;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v127, v122))
  {
    uint64_t v73 = *(void *)(v134 + 1624);
    uint64_t v74 = *(void *)(v134 + 1560);
    uint64_t v75 = *(void *)(v134 + 1552);
    uint64_t v76 = *(void *)(v134 + 1424);
    uint64_t v77 = *(void *)(v134 + 1368);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
    sub_10012C39C(v77, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    sub_10001DAB4(v76, &qword_101661010);
    uint64_t v33 = *(void *)(v134 + 2048);
    goto LABEL_19;
  }
  uint64_t v70 = *(void *)(v134 + 2048);
  uint64_t v71 = (uint8_t *)sub_1008F9FAC();
  uint64_t v72 = swift_slowAlloc();
  *(void *)(v134 + 880) = 0;
  uint64_t v115 = v71;
  *(void *)(v134 + 888) = v72;
  *(_WORD *)uint64_t v71 = 1027;
  *(void *)(v134 + 872) = v71 + 2;
  *(void *)(v134 + 632) = sub_100065514;
  *(void *)(v134 + 640) = v133;
  id v121 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v134 + 632);
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v134 + 632), v134 + 872, v134 + 880, v134 + 888);
  if (v70)
  {
    return swift_errorRelease();
  }
  else
  {
    swift_release();
    *(void *)(v134 + 632) = sub_100065514;
    *(void *)(v134 + 640) = v68;
    sub_1008F9FB4(v121, v134 + 872, v134 + 880, v134 + 888);
    swift_release();
    *(void *)(v134 + 632) = sub_100065504;
    *(void *)(v134 + 640) = v69;
    sub_1008F9FB4(v121, v134 + 872, v134 + 880, v134 + 888);
    swift_release();
    *(void *)(v134 + 632) = sub_100065514;
    *(void *)(v134 + 640) = v56;
    sub_1008F9FB4(v121, v134 + 872, v134 + 880, v134 + 888);
    swift_release();
    *(void *)(v134 + 632) = sub_100065514;
    *(void *)(v134 + 640) = v126;
    sub_1008F9FB4(v121, v134 + 872, v134 + 880, v134 + 888);
    swift_release();
    *(void *)(v134 + 632) = sub_100065500;
    *(void *)(v134 + 640) = v131;
    sub_1008F9FB4(v121, v134 + 872, v134 + 880, v134 + 888);
    swift_release();
    *(void *)(v134 + 632) = sub_100065514;
    *(void *)(v134 + 640) = v129;
    sub_1008F9FB4(v121, v134 + 872, v134 + 880, v134 + 888);
    swift_release();
    *(void *)(v134 + 632) = sub_100065514;
    *(void *)(v134 + 640) = v124;
    sub_1008F9FB4(v121, v134 + 872, v134 + 880, v134 + 888);
    swift_release();
    *(void *)(v134 + 632) = sub_100065504;
    *(void *)(v134 + 640) = v61;
    sub_1008F9FB4(v121, v134 + 872, v134 + 880, v134 + 888);
    swift_release();
    *(void *)(v134 + 632) = sub_100065514;
    *(void *)(v134 + 640) = v119;
    sub_1008F9FB4(v121, v134 + 872, v134 + 880, v134 + 888);
    swift_release();
    *(void *)(v134 + 632) = sub_100065514;
    *(void *)(v134 + 640) = v63;
    sub_1008F9FB4(v121, v134 + 872, v134 + 880, v134 + 888);
    swift_release();
    *(void *)(v134 + 632) = sub_100065500;
    *(void *)(v134 + 640) = v65;
    sub_1008F9FB4(v121, v134 + 872, v134 + 880, v134 + 888);
    while (1)
    {
      uint64_t v106 = *(void *)(v134 + 1624);
      uint64_t v107 = *(void *)(v134 + 1560);
      uint64_t v108 = *(void *)(v134 + 1552);
      uint64_t v109 = *(void *)(v134 + 1424);
      uint64_t v110 = *(void *)(v134 + 1368);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v127, v122, "Missing member peer trust for owner in member circle: %{private,mask.hash}s,\n owner: %{private,mask.hash}s.", v115, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v106, v108);
      sub_10012C39C(v110, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      sub_10001DAB4(v109, &qword_101661010);
      uint64_t v33 = 0;
LABEL_19:
      uint64_t result = sub_10012C39C(*(void *)(v134 + 1360), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
LABEL_20:
      unint64_t v78 = *(void *)(v134 + 2064);
      int64_t v79 = *(void *)(v134 + 2056);
      *(void *)(v134 + 2048) = v33;
      if (v78)
      {
        uint64_t v80 = (v78 - 1) & v78;
        unint64_t v81 = __clz(__rbit64(v78)) | (v79 << 6);
        uint64_t v82 = *(void *)(v134 + 2040);
        goto LABEL_22;
      }
      int64_t v98 = v79 + 1;
      if (!__OFADD__(v79, 1)) {
        break;
      }
      __break(1u);
    }
    int64_t v99 = (unint64_t)((1 << *(unsigned char *)(v134 + 571)) + 63) >> 6;
    uint64_t v82 = *(void *)(v134 + 2040);
    if (v98 >= v99) {
      goto LABEL_40;
    }
    uint64_t v100 = v82 + 64;
    unint64_t v101 = *(void *)(v82 + 64 + 8 * v98);
    ++v79;
    if (v101) {
      goto LABEL_27;
    }
    int64_t v79 = v98 + 1;
    if (v98 + 1 >= v99) {
      goto LABEL_40;
    }
    unint64_t v101 = *(void *)(v100 + 8 * v79);
    if (v101) {
      goto LABEL_27;
    }
    int64_t v79 = v98 + 2;
    if (v98 + 2 >= v99) {
      goto LABEL_40;
    }
    unint64_t v101 = *(void *)(v100 + 8 * v79);
    if (v101) {
      goto LABEL_27;
    }
    int64_t v102 = v98 + 3;
    if (v102 >= v99)
    {
LABEL_40:
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v134 + 1384) + 56))(*(void *)(v134 + 1440), 1, 1, *(void *)(v134 + 1376));
      goto LABEL_41;
    }
    unint64_t v101 = *(void *)(v100 + 8 * v102);
    if (v101)
    {
      int64_t v79 = v102;
LABEL_27:
      uint64_t v80 = (v101 - 1) & v101;
      unint64_t v81 = __clz(__rbit64(v101)) + (v79 << 6);
LABEL_22:
      *(void *)(v134 + 2064) = v80;
      *(void *)(v134 + 2056) = v79;
      uint64_t v83 = *(void (**)(uint64_t, unint64_t, uint64_t))(v134 + 1936);
      uint64_t v84 = *(void *)(v134 + 1656);
      uint64_t v85 = *(void *)(v134 + 1440);
      uint64_t v86 = *(void *)(v134 + 1384);
      uint64_t v87 = *(void *)(v134 + 1376);
      unint64_t v88 = *(void *)(*(void *)(v134 + 1664) + 72) * v81;
      v83(v85, *(void *)(v82 + 48) + v88, v84);
      v83(v85 + *(int *)(v87 + 48), *(void *)(v82 + 56) + v88, v84);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v86 + 56))(v85, 0, 1, v87);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v85, 1, v87) != 1)
      {
        uint64_t v89 = *(void (**)(void))(v134 + 1960);
        uint64_t v90 = *(void *)(v134 + 1656);
        uint64_t v91 = *(void *)(v134 + 1440);
        uint64_t v92 = *(void *)(v134 + 1424);
        uint64_t v93 = *(int *)(*(void *)(v134 + 1376) + 48);
        *(_DWORD *)(v134 + 2428) = v93;
        uint64_t v94 = v92 + v93;
        uint64_t v95 = v91 + v93;
        v89();
        ((void (*)(uint64_t, uint64_t, uint64_t))v89)(v94, v95, v90);
        unint64_t v96 = (void *)swift_task_alloc();
        *(void *)(v134 + 2072) = v96;
        *unint64_t v96 = v134;
        v96[1] = sub_100114F20;
        uint64_t v97 = *(void *)(v134 + 1312);
LABEL_42:
        return sub_100E58EF4(v97, v94);
      }
LABEL_41:
      swift_release();
      uint64_t v103 = *(void *)(v134 + 1816);
      uint64_t v104 = *(void *)(v134 + 1784);
      *(void *)(v134 + 2104) = qword_10134BD98[*(char *)(v103 + *(int *)(v104 + 40))];
      uint64_t v94 = v103 + *(int *)(v104 + 32);
      uint64_t v105 = (void *)swift_task_alloc();
      *(void *)(v134 + 2112) = v105;
      void *v105 = v134;
      v105[1] = sub_100117230;
      uint64_t v97 = *(void *)(v134 + 1296);
      goto LABEL_42;
    }
    while (1)
    {
      int64_t v79 = v102 + 1;
      if (__OFADD__(v102, 1)) {
        break;
      }
      if (v79 >= v99) {
        goto LABEL_40;
      }
      unint64_t v101 = *(void *)(v100 + 8 * v79);
      ++v102;
      if (v101) {
        goto LABEL_27;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100117230()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1016);
  swift_task_dealloc();
  return _swift_task_switch(sub_100117340, v1, 0);
}

uint64_t sub_100117340()
{
  uint64_t v85 = v0;
  uint64_t v74 = (unsigned char *)(v0 + 569);
  uint64_t v1 = *(void *)(v0 + 1296);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 1328) + 48))(v1, 1, *(void *)(v0 + 1320)) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B890);
  }
  else
  {
    sub_10012EC2C(v1, *(void *)(v0 + 1336), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
    swift_bridgeObjectRetain();
    id v2 = sub_100126F1C();
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v79 = *(void *)(v0 + 2104);
      char v77 = *(unsigned char *)(v0 + 570);
      uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1936);
      uint64_t v5 = *(void *)(v0 + 1816);
      uint64_t v6 = *(void *)(v0 + 1784);
      uint64_t v7 = *(void *)(v0 + 1728);
      uint64_t v8 = *(void *)(v0 + 1712);
      uint64_t v66 = *(void *)(v0 + 1704);
      uint64_t v68 = *(void *)(v0 + 1696);
      uint64_t v9 = *(void *)(v0 + 1656);
      uint64_t v73 = *(void *)(v0 + 1528);
      os_log_t oslog = *(os_log_t *)(v0 + 1520);
      uint64_t v10 = v5 + *(int *)(v0 + 2424);
      uint64_t v70 = v5;
      uint64_t v81 = *(void *)(v0 + 1336);
      sub_10001D4B0(0, &qword_10163B870);
      uint64_t v11 = v5 + *(int *)(v6 + 20);
      v4(v7, v11, v9);
      v4(v8, v10, v9);
      v4(v66, v11, v9);
      UUID.init()();
      id v12 = v3;
      id v13 = sub_100D1B2B4();
      char v14 = (uint8_t *)v73;
      sub_100127078((void (*)(uint64_t))sub_100B23648);
      static Date.distantFuture.getter();
      id v15 = sub_10012C700(v7, v8, v66, v68, (uint64_t)v12, (uint64_t)v13, v79, v73, (uint64_t)oslog, v77);

      sub_100DCB5BC(v84, v15);
      sub_10012C39C(v81, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      uint64_t v16 = v70;
LABEL_23:
      sub_10012C39C(v16, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v52 = *(void *)(v0 + 2048);
      goto LABEL_24;
    }
    sub_10012C39C(*(void *)(v0 + 1336), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  }
  uint64_t v17 = *(void *)(v0 + 1816);
  uint64_t v18 = *(void *)(v0 + 1808);
  uint64_t v19 = *(void *)(v0 + 1608);
  uint64_t v20 = *(void *)(v0 + 1560);
  uint64_t v21 = *(void *)(v0 + 1552);
  unint64_t v22 = (*(unsigned __int8 *)(v0 + 572) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 572);
  uint64_t v23 = sub_1000D1DD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v23, v21);
  sub_100130CA8(v17, v18, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v24 = swift_allocObject();
  sub_10012EC2C(v18, v24 + v22, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_10012E450;
  *(void *)(v25 + 24) = v24;
  sub_100130CA8(v17, v18, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v26 = swift_allocObject();
  sub_10012EC2C(v18, v26 + v22, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = sub_10012E4FC;
  *(void *)(v27 + 24) = v26;
  os_log_t oslog = (os_log_t)Logger.logObject.getter();
  LOBYTE(v70) = static os_log_type_t.error.getter();
  uint64_t v28 = swift_allocObject();
  *(unsigned char *)(v28 + 16) = 112;
  uint64_t v29 = v28;
  uint64_t v69 = swift_allocObject();
  *(unsigned char *)(v69 + 16) = 8;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = 1752392040;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = sub_10012E558;
  *(void *)(v31 + 24) = v30;
  uint64_t v32 = v31;
  uint64_t v83 = swift_allocObject();
  *(unsigned char *)(v83 + 16) = 33;
  uint64_t v82 = swift_allocObject();
  *(unsigned char *)(v82 + 16) = 8;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = sub_100134090;
  *(void *)(v33 + 24) = v25;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = sub_1000654EC;
  *(void *)(v34 + 24) = v33;
  uint64_t v35 = v34;
  uint64_t v80 = v34;
  uint64_t v72 = swift_allocObject();
  *(unsigned char *)(v72 + 16) = 112;
  uint64_t v78 = swift_allocObject();
  *(unsigned char *)(v78 + 16) = 8;
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = 1752392040;
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = sub_100134228;
  *(void *)(v37 + 24) = v36;
  uint64_t v71 = swift_allocObject();
  *(unsigned char *)(v71 + 16) = 33;
  uint64_t v76 = swift_allocObject();
  *(unsigned char *)(v76 + 16) = 8;
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = sub_100134090;
  *(void *)(v38 + 24) = v27;
  uint64_t v64 = v0;
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = sub_1000654EC;
  *(void *)(v39 + 24) = v38;
  sub_10000588C(&qword_101639B60);
  uint64_t inited = swift_initStackObject();
  sub_1004B810C(inited, 12);
  *uint64_t v41 = sub_100065514;
  v41[1] = v29;
  v41[2] = sub_100065514;
  void v41[3] = v69;
  v41[4] = sub_10006000C;
  v41[5] = v32;
  v41[6] = sub_100065514;
  v41[7] = v83;
  v41[8] = sub_100065514;
  v41[9] = v82;
  v41[10] = sub_100065500;
  v41[11] = v35;
  v41[12] = sub_100065514;
  v41[13] = v72;
  v41[14] = sub_100065514;
  v41[15] = v78;
  v41[16] = sub_100065504;
  v41[17] = v37;
  v41[18] = sub_100065514;
  v41[19] = v71;
  v41[20] = sub_100065514;
  v41[21] = v76;
  v41[22] = sub_100065500;
  v41[23] = v39;
  swift_retain();
  swift_retain();
  uint64_t v65 = v32;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v42 = v39;
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(oslog, (os_log_type_t)v70))
  {
    uint64_t v0 = v64;
    char v14 = *(uint8_t **)(v64 + 1816);
    uint64_t v49 = *(void *)(v64 + 1608);
    uint64_t v50 = *(void *)(v64 + 1560);
    uint64_t v51 = *(void *)(v64 + 1552);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
    uint64_t v16 = (uint64_t)v14;
    goto LABEL_23;
  }
  uint64_t v0 = v64;
  uint64_t v63 = v37;
  uint64_t v43 = v64 + 800;
  uint64_t v44 = v64 + 816;
  uint64_t v45 = v64 + 1008;
  uint64_t v46 = *(void *)(v64 + 2048);
  char v14 = (uint8_t *)sub_1008F9FAC();
  uint64_t v47 = swift_slowAlloc();
  *(void *)(v64 + 1008) = 0;
  *(void *)(v64 + 816) = v47;
  *(_WORD *)char v14 = 1027;
  *(void *)(v64 + 800) = v14 + 2;
  *(void *)(v64 + 696) = sub_100065514;
  *(void *)(v64 + 704) = v29;
  uint64_t v67 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 696);
  sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 696), v64 + 800, v64 + 1008, v64 + 816);
  if (v46)
  {
    return swift_errorRelease();
  }
  else
  {
    swift_release();
    *(void *)(v64 + 696) = sub_100065514;
    *(void *)(v64 + 704) = v69;
    sub_1008F9FB4(v67, v43, v45, v44);
    swift_release();
    *(void *)(v64 + 696) = sub_10006000C;
    *(void *)(v64 + 704) = v65;
    sub_1008F9FB4(v67, v43, v45, v44);
    swift_release();
    *(void *)(v64 + 696) = sub_100065514;
    *(void *)(v64 + 704) = v83;
    sub_1008F9FB4(v67, v43, v45, v44);
    swift_release();
    *(void *)(v64 + 696) = sub_100065514;
    *(void *)(v64 + 704) = v82;
    sub_1008F9FB4(v67, v43, v45, v44);
    swift_release();
    *(void *)(v64 + 696) = sub_100065500;
    *(void *)(v64 + 704) = v80;
    sub_1008F9FB4(v67, v43, v45, v44);
    swift_release();
    *(void *)(v64 + 696) = sub_100065514;
    *(void *)(v64 + 704) = v72;
    sub_1008F9FB4(v67, v43, v45, v44);
    swift_release();
    *(void *)(v64 + 696) = sub_100065514;
    *(void *)(v64 + 704) = v78;
    sub_1008F9FB4(v67, v43, v45, v44);
    swift_release();
    *(void *)(v64 + 696) = sub_100065504;
    *(void *)(v64 + 704) = v63;
    sub_1008F9FB4(v67, v43, v45, v44);
    swift_release();
    *(void *)(v64 + 696) = sub_100065514;
    *(void *)(v64 + 704) = v71;
    sub_1008F9FB4(v67, v43, v45, v44);
    swift_release();
    *(void *)(v64 + 696) = sub_100065514;
    *(void *)(v64 + 704) = v76;
    sub_1008F9FB4(v67, v43, v45, v44);
    swift_release();
    *(void *)(v64 + 696) = sub_100065500;
    *(void *)(v64 + 704) = v42;
    sub_1008F9FB4(v67, v43, v45, v44);
    while (1)
    {
      uint64_t v59 = *(void *)(v0 + 1816);
      uint64_t v60 = *(void *)(v0 + 1608);
      uint64_t v61 = *(void *)(v0 + 1560);
      uint64_t v62 = *(void *)(v0 + 1552);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, oslog, (os_log_type_t)v70, "Missing ownerTrust for member circle: %{private,mask.hash}s,\n owner: %{private,mask.hash}s.", v14, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
      sub_10012C39C(v59, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v52 = 0;
LABEL_24:
      unint64_t v53 = *(void *)(v0 + 1920) + 1;
      if (v53 == *(void *)(v0 + 1904))
      {
        swift_bridgeObjectRelease();
        *(void *)(v0 + 2120) = v52;
        if (*v74)
        {
          uint64_t v54 = (void *)swift_task_alloc();
          *(void *)(v0 + 2128) = v54;
          *uint64_t v54 = v0;
          v54[1] = sub_1001181D4;
          return sub_100E59248();
        }
        else
        {
          uint64_t v58 = (void *)swift_task_alloc();
          *(void *)(v0 + 2144) = v58;
          *uint64_t v58 = v0;
          v58[1] = sub_1001188D4;
          return sub_100E5E634();
        }
      }
      *(void *)(v0 + 1920) = v53;
      *(void *)(v0 + 1912) = v52;
      uint64_t v55 = *(void *)(v0 + 1896);
      if (*(void *)(v55 + 16) > v53) {
        break;
      }
      __break(1u);
    }
    uint64_t v56 = *(void *)(v0 + 1880);
    uint64_t v57 = *(void *)(v0 + 1784);
    sub_100130CA8(v55+ ((*(unsigned __int8 *)(v0 + 572) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 572))+ *(void *)(*(void *)(v0 + 1792) + 72) * v53, *(void *)(v0 + 1816), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 2424) = *(_DWORD *)(v57 + 24);
    return _swift_task_switch(sub_100112BCC, v56, 0);
  }
}

uint64_t sub_1001181D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1016);
  *(void *)(*(void *)v1 + 2136) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001182EC, v2, 0);
}

uint64_t sub_1001182EC()
{
  uint64_t v61 = v0;
  uint64_t v1 = *(void *)(v0 + 2136);
  uint64_t v54 = *(void *)(v0 + 2120);
  *(void *)(v0 + 2184) = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 2192) = v2;
  if (!v2)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    *(void *)(v0 + 2264) = v54;
    char v40 = *(unsigned char *)(v0 + 569);
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 1864))(*(void *)(v0 + 1832), 1, 1, *(void *)(v0 + 1656));
    uint64_t v41 = (void *)swift_task_alloc();
    *(void *)(v0 + 2272) = v41;
    *uint64_t v41 = v0;
    v41[1] = sub_10011A75C;
    uint64_t v42 = *(void *)(v0 + 1832);
    return sub_100E5C1B8(v42, (v40 & 1) == 0);
  }
  *(_DWORD *)(v0 + 2436) = *(_DWORD *)(*(void *)(v0 + 1256) + 80);
  *(void *)(v0 + 2200) = 0;
  if (!*(void *)(v1 + 16))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v3 = 0;
  while (1)
  {
    sub_100130CA8(v1+ ((*(unsigned __int8 *)(v0 + 2436) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2436))+ *(void *)(*(void *)(v0 + 1256) + 72) * v3, *(void *)(v0 + 1288), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v4 = sub_100126E88();
    uint64_t v5 = v4;
    *(void *)(v0 + 2208) = v4;
    char v6 = *(unsigned char *)(v4 + 32);
    *(unsigned char *)(v0 + 593) = v6;
    uint64_t v7 = -1 << v6;
    uint64_t v8 = *(void *)(v4 + 64);
    if (-v7 < 64) {
      uint64_t v9 = ~(-1 << -(char)v7);
    }
    else {
      uint64_t v9 = -1;
    }
    *(void *)(v0 + 2216) = v54;
    unint64_t v10 = v9 & v8;
    if (v10)
    {
      uint64_t v11 = 0;
      unint64_t v12 = __clz(__rbit64(v10));
      uint64_t v13 = (v10 - 1) & v10;
      goto LABEL_9;
    }
    unint64_t v22 = 63 - v7;
    if ((unint64_t)(63 - v7) > 0x7F)
    {
      unint64_t v23 = *(void *)(v4 + 72);
      if (v23)
      {
        uint64_t v11 = 1;
        goto LABEL_14;
      }
      if (v22 >= 0xC0)
      {
        unint64_t v23 = *(void *)(v4 + 80);
        if (v23)
        {
          uint64_t v11 = 2;
          goto LABEL_14;
        }
        if (v22 >= 0x100)
        {
          unint64_t v23 = *(void *)(v4 + 88);
          if (v23)
          {
            uint64_t v11 = 3;
            goto LABEL_14;
          }
          if (v22 >= 0x140) {
            break;
          }
        }
      }
    }
LABEL_30:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 1384) + 56))(*(void *)(v0 + 1432), 1, 1, *(void *)(v0 + 1376));
LABEL_31:
    swift_release();
    uint64_t v27 = *(void *)(v0 + 1728);
    uint64_t v28 = *(void *)(v0 + 1712);
    uint64_t v29 = *(void *)(v0 + 1704);
    uint64_t v55 = *(void *)(v0 + 1696);
    uint64_t v30 = *(void *)(v0 + 1664);
    uint64_t v31 = *(void *)(v0 + 1656);
    uint64_t v56 = *(void *)(v0 + 1528);
    uint64_t v57 = *(void *)(v0 + 1520);
    uint64_t v32 = *(void *)(v0 + 1288);
    uint64_t v58 = *(void *)(v0 + 2200) + 1;
    uint64_t v59 = *(void *)(v0 + 2192);
    uint64_t v33 = *(void *)(v0 + 1248);
    sub_10001D4B0(0, &qword_10163B870);
    uint64_t v34 = v32 + *(int *)(v33 + 20);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
    v35(v27, v34, v31);
    v35(v28, v32 + *(int *)(v33 + 24), v31);
    v35(v29, v34, v31);
    UUID.init()();
    uint64_t v36 = sub_1002A71AC();
    uint64_t v37 = (void *)sub_100ECF4F0(*v36, *((void *)v36 + 1), *((void **)v36 + 2));
    uint64_t v38 = (void *)sub_100ECF4F0(*v36, *((void *)v36 + 1), *((void **)v36 + 2));
    sub_100127078((void (*)(uint64_t))sub_100B23648);
    static Date.distantFuture.getter();
    id v39 = sub_10012C8E4(v27, v28, v29, v55, (uint64_t)v37, (uint64_t)v38, 5, v56, v57);

    sub_100DCB5BC(&v60, v39);
    sub_10012C39C(v32, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v58 == v59) {
      goto LABEL_34;
    }
    unint64_t v3 = *(void *)(v0 + 2200) + 1;
    *(void *)(v0 + 2200) = v3;
    uint64_t v1 = *(void *)(v0 + 2184);
    if (*(void *)(v1 + 16) <= v3) {
      goto LABEL_33;
    }
  }
  unint64_t v23 = *(void *)(v4 + 96);
  if (!v23)
  {
    uint64_t v24 = 0;
    uint64_t v25 = v22 >> 6;
    if (v22 >> 6 <= 5) {
      uint64_t v25 = 5;
    }
    uint64_t v26 = v25 - 5;
    while (v26 != v24)
    {
      unint64_t v23 = *(void *)(v4 + 104 + 8 * v24++);
      if (v23)
      {
        uint64_t v11 = v24 + 4;
        goto LABEL_14;
      }
    }
    goto LABEL_30;
  }
  uint64_t v11 = 4;
LABEL_14:
  uint64_t v13 = (v23 - 1) & v23;
  unint64_t v12 = __clz(__rbit64(v23)) + (v11 << 6);
LABEL_9:
  *(void *)(v0 + 2232) = v13;
  *(void *)(v0 + 2224) = v11;
  uint64_t v14 = *(void *)(v0 + 1664);
  uint64_t v15 = *(void *)(v0 + 1656);
  uint64_t v16 = *(void *)(v0 + 1432);
  uint64_t v17 = *(void *)(v0 + 1384);
  uint64_t v18 = *(void *)(v0 + 1376);
  uint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16);
  v14 += 16;
  unint64_t v20 = *(void *)(v14 + 56) * v12;
  unint64_t v21 = *(void *)(v4 + 48) + v20;
  *(void *)(v0 + 2240) = v19;
  *(void *)(v0 + 2248) = v14 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v19(v16, v21, v15);
  v19(v16 + *(int *)(v18 + 48), *(void *)(v5 + 56) + v20, v15);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v16, 1, v18) == 1) {
    goto LABEL_31;
  }
  uint64_t v44 = *(void *)(v0 + 1664);
  uint64_t v45 = *(void *)(v0 + 1656);
  uint64_t v46 = *(void *)(v0 + 1432);
  uint64_t v47 = *(void *)(v0 + 1392);
  uint64_t v48 = *(int *)(*(void *)(v0 + 1376) + 48);
  *(_DWORD *)(v0 + 2440) = v48;
  uint64_t v49 = v47 + v48;
  uint64_t v50 = v46 + v48;
  uint64_t v51 = *(void (**)(void))(v44 + 32);
  v51();
  ((void (*)(uint64_t, uint64_t, uint64_t))v51)(v49, v50, v45);
  uint64_t v52 = (void *)swift_task_alloc();
  *(void *)(v0 + 2256) = v52;
  *uint64_t v52 = v0;
  v52[1] = sub_10011921C;
  uint64_t v53 = *(void *)(v0 + 1200);
  return sub_100E58BF8(v53, v49);
}

uint64_t sub_1001188D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1016);
  *(void *)(*(void *)v1 + 2152) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001189EC, v2, 0);
}

uint64_t sub_1001189EC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[270] = v1;
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v3 = sub_10000588C(&qword_10163B8C0);
  uint64_t v4 = sub_100062734(&qword_10163B8C8, &qword_10163B8C0);
  *uint64_t v1 = v0;
  v1[1] = sub_100118AF4;
  uint64_t v5 = v0[269];
  uint64_t v6 = v0[127];
  return Array<A>.asyncFlatMap<A>(_:)(&unk_10163B8B8, v6, v5, v2, v3, v4);
}

uint64_t sub_100118AF4(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 1016);
  *(void *)(v3 + 2168) = a1;
  *(void *)(v3 + 2176) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100118C34, v4, 0);
}

uint64_t sub_100118C34()
{
  uint64_t v61 = v0;
  uint64_t v54 = *(void *)(v0 + 2176);
  uint64_t v1 = *(void *)(v0 + 2168);
  *(void *)(v0 + 2184) = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 2192) = v2;
  if (!v2)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    *(void *)(v0 + 2264) = v54;
    char v40 = *(unsigned char *)(v0 + 569);
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 1864))(*(void *)(v0 + 1832), 1, 1, *(void *)(v0 + 1656));
    uint64_t v41 = (void *)swift_task_alloc();
    *(void *)(v0 + 2272) = v41;
    *uint64_t v41 = v0;
    v41[1] = sub_10011A75C;
    uint64_t v42 = *(void *)(v0 + 1832);
    return sub_100E5C1B8(v42, (v40 & 1) == 0);
  }
  *(_DWORD *)(v0 + 2436) = *(_DWORD *)(*(void *)(v0 + 1256) + 80);
  *(void *)(v0 + 2200) = 0;
  if (!*(void *)(v1 + 16))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v3 = 0;
  while (1)
  {
    sub_100130CA8(v1+ ((*(unsigned __int8 *)(v0 + 2436) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2436))+ *(void *)(*(void *)(v0 + 1256) + 72) * v3, *(void *)(v0 + 1288), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v4 = sub_100126E88();
    uint64_t v5 = v4;
    *(void *)(v0 + 2208) = v4;
    char v6 = *(unsigned char *)(v4 + 32);
    *(unsigned char *)(v0 + 593) = v6;
    uint64_t v7 = -1 << v6;
    uint64_t v8 = *(void *)(v4 + 64);
    if (-v7 < 64) {
      uint64_t v9 = ~(-1 << -(char)v7);
    }
    else {
      uint64_t v9 = -1;
    }
    *(void *)(v0 + 2216) = v54;
    unint64_t v10 = v9 & v8;
    if (v10)
    {
      uint64_t v11 = 0;
      unint64_t v12 = __clz(__rbit64(v10));
      uint64_t v13 = (v10 - 1) & v10;
      goto LABEL_9;
    }
    unint64_t v22 = 63 - v7;
    if ((unint64_t)(63 - v7) > 0x7F)
    {
      unint64_t v23 = *(void *)(v4 + 72);
      if (v23)
      {
        uint64_t v11 = 1;
        goto LABEL_14;
      }
      if (v22 >= 0xC0)
      {
        unint64_t v23 = *(void *)(v4 + 80);
        if (v23)
        {
          uint64_t v11 = 2;
          goto LABEL_14;
        }
        if (v22 >= 0x100)
        {
          unint64_t v23 = *(void *)(v4 + 88);
          if (v23)
          {
            uint64_t v11 = 3;
            goto LABEL_14;
          }
          if (v22 >= 0x140) {
            break;
          }
        }
      }
    }
LABEL_30:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 1384) + 56))(*(void *)(v0 + 1432), 1, 1, *(void *)(v0 + 1376));
LABEL_31:
    swift_release();
    uint64_t v27 = *(void *)(v0 + 1728);
    uint64_t v28 = *(void *)(v0 + 1712);
    uint64_t v29 = *(void *)(v0 + 1704);
    uint64_t v55 = *(void *)(v0 + 1696);
    uint64_t v30 = *(void *)(v0 + 1664);
    uint64_t v31 = *(void *)(v0 + 1656);
    uint64_t v56 = *(void *)(v0 + 1528);
    uint64_t v57 = *(void *)(v0 + 1520);
    uint64_t v32 = *(void *)(v0 + 1288);
    uint64_t v58 = *(void *)(v0 + 2200) + 1;
    uint64_t v59 = *(void *)(v0 + 2192);
    uint64_t v33 = *(void *)(v0 + 1248);
    sub_10001D4B0(0, &qword_10163B870);
    uint64_t v34 = v32 + *(int *)(v33 + 20);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
    v35(v27, v34, v31);
    v35(v28, v32 + *(int *)(v33 + 24), v31);
    v35(v29, v34, v31);
    UUID.init()();
    uint64_t v36 = sub_1002A71AC();
    uint64_t v37 = (void *)sub_100ECF4F0(*v36, *((void *)v36 + 1), *((void **)v36 + 2));
    uint64_t v38 = (void *)sub_100ECF4F0(*v36, *((void *)v36 + 1), *((void **)v36 + 2));
    sub_100127078((void (*)(uint64_t))sub_100B23648);
    static Date.distantFuture.getter();
    id v39 = sub_10012C8E4(v27, v28, v29, v55, (uint64_t)v37, (uint64_t)v38, 5, v56, v57);

    sub_100DCB5BC(&v60, v39);
    sub_10012C39C(v32, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v58 == v59) {
      goto LABEL_34;
    }
    unint64_t v3 = *(void *)(v0 + 2200) + 1;
    *(void *)(v0 + 2200) = v3;
    uint64_t v1 = *(void *)(v0 + 2184);
    if (*(void *)(v1 + 16) <= v3) {
      goto LABEL_33;
    }
  }
  unint64_t v23 = *(void *)(v4 + 96);
  if (!v23)
  {
    uint64_t v24 = 0;
    uint64_t v25 = v22 >> 6;
    if (v22 >> 6 <= 5) {
      uint64_t v25 = 5;
    }
    uint64_t v26 = v25 - 5;
    while (v26 != v24)
    {
      unint64_t v23 = *(void *)(v4 + 104 + 8 * v24++);
      if (v23)
      {
        uint64_t v11 = v24 + 4;
        goto LABEL_14;
      }
    }
    goto LABEL_30;
  }
  uint64_t v11 = 4;
LABEL_14:
  uint64_t v13 = (v23 - 1) & v23;
  unint64_t v12 = __clz(__rbit64(v23)) + (v11 << 6);
LABEL_9:
  *(void *)(v0 + 2232) = v13;
  *(void *)(v0 + 2224) = v11;
  uint64_t v14 = *(void *)(v0 + 1664);
  uint64_t v15 = *(void *)(v0 + 1656);
  uint64_t v16 = *(void *)(v0 + 1432);
  uint64_t v17 = *(void *)(v0 + 1384);
  uint64_t v18 = *(void *)(v0 + 1376);
  uint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16);
  v14 += 16;
  unint64_t v20 = *(void *)(v14 + 56) * v12;
  unint64_t v21 = *(void *)(v4 + 48) + v20;
  *(void *)(v0 + 2240) = v19;
  *(void *)(v0 + 2248) = v14 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v19(v16, v21, v15);
  v19(v16 + *(int *)(v18 + 48), *(void *)(v5 + 56) + v20, v15);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v16, 1, v18) == 1) {
    goto LABEL_31;
  }
  uint64_t v44 = *(void *)(v0 + 1664);
  uint64_t v45 = *(void *)(v0 + 1656);
  uint64_t v46 = *(void *)(v0 + 1432);
  uint64_t v47 = *(void *)(v0 + 1392);
  uint64_t v48 = *(int *)(*(void *)(v0 + 1376) + 48);
  *(_DWORD *)(v0 + 2440) = v48;
  uint64_t v49 = v47 + v48;
  uint64_t v50 = v46 + v48;
  uint64_t v51 = *(void (**)(void))(v44 + 32);
  v51();
  ((void (*)(uint64_t, uint64_t, uint64_t))v51)(v49, v50, v45);
  uint64_t v52 = (void *)swift_task_alloc();
  *(void *)(v0 + 2256) = v52;
  *uint64_t v52 = v0;
  v52[1] = sub_10011921C;
  uint64_t v53 = *(void *)(v0 + 1200);
  return sub_100E58BF8(v53, v49);
}

uint64_t sub_10011921C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1016);
  swift_task_dealloc();
  return _swift_task_switch(sub_10011932C, v1, 0);
}

uint64_t sub_10011932C()
{
  uint64_t v163 = v0;
  uint64_t v1 = *(void *)(v0 + 1208);
  uint64_t v2 = *(void *)(v0 + 1200);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1216) + 48))(v2, 1, v1) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 1592);
    uint64_t v4 = *(void *)(v0 + 1560);
    uint64_t v5 = *(void *)(v0 + 1552);
    uint64_t v6 = *(void *)(v0 + 1288);
    uint64_t v7 = *(void *)(v0 + 1280);
    uint64_t v158 = v0;
    unint64_t v8 = (*(unsigned __int8 *)(v0 + 2436) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2436);
    sub_10001DAB4(v2, (uint64_t *)&unk_1016607D0);
    uint64_t v9 = sub_1000D1DD8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v9, v5);
    sub_100130CA8(v6, v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v10 = swift_allocObject();
    sub_10012EC2C(v7, v10 + v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = sub_10012EC98;
    *(void *)(v11 + 24) = v10;
    os_log_t oslog = Logger.logObject.getter();
    LOBYTE(v10) = static os_log_type_t.error.getter();
    uint64_t v12 = swift_allocObject();
    *(unsigned char *)(v12 + 16) = 112;
    uint64_t v13 = swift_allocObject();
    *(unsigned char *)(v13 + 16) = 8;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = 1752392040;
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = sub_100134228;
    *(void *)(v15 + 24) = v14;
    uint64_t v16 = swift_allocObject();
    *(unsigned char *)(v16 + 16) = 33;
    uint64_t v17 = swift_allocObject();
    *(unsigned char *)(v17 + 16) = 8;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_100134090;
    *(void *)(v18 + 24) = v11;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_1000654EC;
    *(void *)(v19 + 24) = v18;
    sub_10000588C(&qword_101639B60);
    uint64_t v20 = swift_allocObject();
    sub_1004B810C(v20, 6);
    void *v21 = sub_100065514;
    v21[1] = v12;
    long long v21[2] = sub_100065514;
    v21[3] = v13;
    v21[4] = sub_100065504;
    v21[5] = v15;
    v21[6] = sub_100065514;
    v21[7] = v16;
    v21[8] = sub_100065514;
    v21[9] = v17;
    v21[10] = sub_100065500;
    v21[11] = v19;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v157 = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    os_log_type_t v152 = v10;
    if (os_log_type_enabled(oslog, (os_log_type_t)v10))
    {
      uint64_t v148 = (uint8_t *)v19;
      uint64_t v149 = v16;
      unint64_t v22 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 744);
      uint64_t v23 = v0 + 760;
      uint64_t v24 = v0 + 792;
      uint64_t v25 = v0 + 824;
      uint64_t v26 = *(void *)(v0 + 2216);
      uint64_t v27 = (uint8_t *)sub_1008F9FAC();
      uint64_t v28 = swift_slowAlloc();
      *(void *)(v0 + 792) = 0;
      buf = v27;
      *(void *)(v0 + 760) = v28;
      *(_WORD *)uint64_t v27 = 515;
      *(void *)(v0 + 824) = v27 + 2;
      *(void *)(v0 + 744) = sub_100065514;
      *(void *)(v0 + 752) = v12;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 744), v0 + 824, v0 + 792, v0 + 760);
      if (!v26)
      {
        swift_release();
        *(void *)(v0 + 744) = sub_100065514;
        *(void *)(v0 + 752) = v13;
        sub_1008F9FB4(v22, v25, v24, v23);
        swift_release();
        *(void *)(v0 + 744) = sub_100065504;
        *(void *)(v0 + 752) = v15;
        sub_1008F9FB4(v22, v25, v24, v23);
        swift_release();
        *(void *)(v0 + 744) = sub_100065514;
        *(void *)(v0 + 752) = v149;
        sub_1008F9FB4(v22, v25, v24, v23);
        swift_release();
        *(void *)(v0 + 744) = sub_100065514;
        *(void *)(v0 + 752) = v157;
        sub_1008F9FB4(v22, v25, v24, v23);
        swift_release();
        *(void *)(v0 + 744) = sub_100065500;
        *(void *)(v0 + 752) = v148;
        sub_1008F9FB4(v22, v25, v24, v23);
        uint64_t v29 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v0;
        uint64_t v30 = *(void *)(v0 + 1592);
        uint64_t v31 = *(void *)(v0 + 1560);
        Class isa = v158[194].isa;
        Class v33 = v158[174].isa;
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, oslog, v152, "Missing ownerPeerTrust for owner circle: %{private,mask.hash}s.", buf, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        (*(void (**)(uint64_t, Class))(v31 + 8))(v30, isa);
        uint64_t v34 = (uint64_t)v33;
LABEL_58:
        uint64_t result = sub_10001DAB4(v34, &qword_101661010);
        uint64_t v147 = 0;
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    uint64_t v29 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v0;
    uint64_t v57 = *(void *)(v0 + 1592);
    uint64_t v58 = *(void *)(v0 + 1560);
    Class v59 = v158[194].isa;
    uint64_t v60 = (uint64_t)v158[174].isa;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, Class))(v58 + 8))(v57, v59);
LABEL_21:
    uint64_t result = sub_10001DAB4(v60, &qword_101661010);
    uint64_t v147 = v29[277];
    goto LABEL_22;
  }
  uint64_t v35 = *(void *)(v0 + 1240);
  uint64_t v36 = *(_OWORD **)(v0 + 1232);
  sub_10012EC2C(v2, v35, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  sub_100A62380(v35, v36);
  uint64_t v37 = *(int *)(v1 + 32);
  uint64_t v38 = (char *)v36 + v37;
  Swift::Int v40 = *(void *)((char *)v36 + v37);
  uint64_t v39 = *((void *)v38 + 1);
  uint64_t v41 = (void *)(v35 + v37);
  BOOL v42 = v40 == *v41 && v39 == v41[1];
  if (!v42 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRetain();
    sub_100DCB3D0(v0 + 576, v40, v39, 0);
    swift_bridgeObjectRelease();
  }
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2240);
  uint64_t v44 = *(void *)(v0 + 1664);
  uint64_t v45 = *(void *)(v0 + 1656);
  uint64_t v46 = *(void *)(v0 + 1408);
  uint64_t v47 = *(void *)(v0 + 1392);
  uint64_t v48 = *(void *)(v0 + 1376);
  uint64_t v153 = *(uint64_t **)(v0 + 1280);
  uint64_t v157 = *(void *)(v0 + 1288);
  os_log_t osloga = *(os_log_t *)(v0 + 1232);
  uint64_t v49 = v47 + *(int *)(v0 + 2440);
  uint64_t v50 = *(void *)(v0 + 1224);
  uint64_t v158 = sub_10001D4B0(0, &qword_10163B870);
  uint64_t v51 = v46 + *(int *)(v48 + 48);
  v43(v46, v47, v45);
  v43(v51, v49, v45);
  sub_100130CA8(v157, (uint64_t)v153, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100130CA8((uint64_t)osloga, v50, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  id v52 = sub_100127320(v46, v153, v50);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v51, v45);
  if (!v52)
  {
    uint64_t v61 = *(unsigned __int8 *)(v0 + 2436);
    uint64_t v62 = *(void *)(v0 + 1600);
    uint64_t v63 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v0;
    uint64_t v64 = *(void *)(v0 + 1560);
    uint64_t v65 = v63[194];
    uint64_t v66 = (uint64_t)v63[161];
    uint64_t v67 = (uint64_t)v63[160];
    uint64_t v29 = v63;
    uint64_t v68 = (v61 + 16) & ~v61;
    uint64_t v69 = sub_1000D1DD8();
    (*(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(v64 + 16))(v62, v69, v65);
    sub_100130CA8(v66, v67, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v70 = swift_allocObject();
    sub_10012EC2C(v67, v70 + v68, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v71 = swift_allocObject();
    *(void *)(v71 + 16) = sub_10012EC98;
    *(void *)(v71 + 24) = v70;
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    uint64_t v74 = swift_allocObject();
    *(unsigned char *)(v74 + 16) = 112;
    uint64_t v75 = swift_allocObject();
    *(unsigned char *)(v75 + 16) = 8;
    uint64_t v76 = swift_allocObject();
    *(void *)(v76 + 16) = 1752392040;
    uint64_t v77 = swift_allocObject();
    *(void *)(v77 + 16) = sub_100134228;
    *(void *)(v77 + 24) = v76;
    uint64_t v78 = swift_allocObject();
    *(unsigned char *)(v78 + 16) = 33;
    uint64_t v79 = swift_allocObject();
    *(unsigned char *)(v79 + 16) = 8;
    uint64_t v80 = v79;
    uint64_t v81 = swift_allocObject();
    *(void *)(v81 + 16) = sub_100134090;
    *(void *)(v81 + 24) = v71;
    uint64_t v82 = swift_allocObject();
    *(void *)(v82 + 16) = sub_1000654EC;
    *(void *)(v82 + 24) = v81;
    sub_10000588C(&qword_101639B60);
    uint64_t v83 = swift_allocObject();
    sub_1004B810C(v83, 6);
    *uint64_t v84 = sub_100065514;
    v84[1] = v74;
    id v84[2] = sub_100065514;
    v84[3] = v75;
    v84[4] = sub_100065504;
    v84[5] = v77;
    v84[6] = sub_100065514;
    v84[7] = v78;
    v84[8] = sub_100065514;
    v84[9] = v80;
    v84[10] = sub_100065500;
    v84[11] = v82;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LOBYTE(v157) = v73;
    uint64_t v158 = v72;
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v150 = v82;
      uint64_t v154 = v78;
      uint64_t v85 = v29[277];
      uint64_t v86 = (uint8_t *)sub_1008F9FAC();
      uint64_t v87 = swift_slowAlloc();
      v29[97] = 0;
      v29[98] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v87;
      uint64_t v148 = v86;
      *(_WORD *)uint64_t v86 = 515;
      v29[96] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v86 + 2);
      v29[89] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100065514;
      v29[90] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v74;
      sub_1008F9FB4(v29 + 89, (uint64_t)(v29 + 96), (uint64_t)(v29 + 97), (uint64_t)(v29 + 98));
      if (!v85)
      {
        swift_release();
        v29[89] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100065514;
        v29[90] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v75;
        sub_1008F9FB4(v29 + 89, (uint64_t)(v29 + 96), (uint64_t)(v29 + 97), (uint64_t)(v29 + 98));
        swift_release();
        v29[89] = sub_100065504;
        v29[90] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v77;
        sub_1008F9FB4(v29 + 89, (uint64_t)(v29 + 96), (uint64_t)(v29 + 97), (uint64_t)(v29 + 98));
        swift_release();
        v29[89] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100065514;
        v29[90] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v154;
        sub_1008F9FB4(v29 + 89, (uint64_t)(v29 + 96), (uint64_t)(v29 + 97), (uint64_t)(v29 + 98));
        swift_release();
        v29[89] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100065514;
        v29[90] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v80;
        sub_1008F9FB4(v29 + 89, (uint64_t)(v29 + 96), (uint64_t)(v29 + 97), (uint64_t)(v29 + 98));
        swift_release();
        v29[89] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100065500;
        v29[90] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v150;
        sub_1008F9FB4(v29 + 89, (uint64_t)(v29 + 96), (uint64_t)(v29 + 97), (uint64_t)(v29 + 98));
LABEL_57:
        v140 = v29[200];
        v141 = v29[195];
        v142 = v29[194];
        uint64_t v143 = (uint64_t)v29[174];
        uint64_t v144 = (uint64_t)v29[155];
        uint64_t v145 = (uint64_t)v29[154];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v158, (os_log_type_t)v157, "Cannot create client beacon share for owner circle: %{private,mask.hash}s.", v148, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))v141
         + 1))(v140, v142);
        sub_10012C39C(v145, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        sub_10012C39C(v144, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        uint64_t v34 = v143;
        goto LABEL_58;
      }
LABEL_17:
      return swift_errorRelease();
    }
    unint64_t v88 = v29[195];
    uint64_t v89 = v29[194];
    uint64_t v60 = (uint64_t)v29[174];
    uint64_t v90 = (uint64_t)v29[155];
    uint64_t v155 = v29[200];
    uint64_t v157 = (uint64_t)v29[154];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))v88
     + 1))(v155, v89);
    sub_10012C39C(v157, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    sub_10012C39C(v90, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    goto LABEL_21;
  }
  uint64_t v53 = *(void *)(v0 + 1392);
  uint64_t v54 = *(void *)(v0 + 1240);
  uint64_t v55 = *(void *)(v0 + 1232);
  sub_100DCB5BC(v162, v52);

  sub_10012C39C(v55, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  sub_10012C39C(v54, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  uint64_t result = sub_10001DAB4(v53, &qword_101661010);
  uint64_t v147 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 2216);
  uint64_t v29 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v0;
LABEL_22:
  unint64_t v91 = (unint64_t)v29[279];
  int64_t v92 = (int64_t)v29[278];
  while (1)
  {
    v29[277] = v147;
    if (v91)
    {
      uint64_t v93 = (v91 - 1) & v91;
      unint64_t v94 = __clz(__rbit64(v91)) | (v92 << 6);
      uint64_t v95 = v29[276];
      goto LABEL_25;
    }
    if (__OFADD__(v92++, 1)) {
      goto LABEL_56;
    }
    int64_t v105 = (unint64_t)((1 << *((unsigned char *)v29 + 593)) + 63) >> 6;
    uint64_t v95 = v29[276];
    if (v92 >= v105)
    {
LABEL_42:
      (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))v29[173]
       + 7))(v29[179], 1, 1, v29[172]);
      goto LABEL_43;
    }
    uint64_t v106 = (uint64_t)v95 + 64;
    unint64_t v107 = *((void *)v95 + v92 + 8);
    if (!v107) {
      break;
    }
LABEL_30:
    uint64_t v93 = (v107 - 1) & v107;
    unint64_t v94 = __clz(__rbit64(v107)) + (v92 << 6);
LABEL_25:
    v29[279] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v93;
    v29[278] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v92;
    unint64_t v96 = v29[208];
    uint64_t v97 = v29[207];
    int64_t v98 = v29[179];
    int64_t v99 = v29[173];
    uint64_t v100 = v29[172];
    unint64_t v101 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((void *)v96 + 2);
    unint64_t v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v96 + 16);
    unint64_t v102 = *((void *)v96 + 7) * v94;
    unint64_t v103 = *((void *)v95 + 6) + v102;
    v29[280] = v101;
    v29[281] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((unint64_t)v96 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000);
    v101((uint64_t)v98, v103, (uint64_t)v97);
    v101((uint64_t)v98 + *((int *)v100 + 12), *((void *)v95 + 7) + v102, (uint64_t)v97);
    (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), void, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))v99
     + 7))(v98, 0, 1, v100);
    if ((*((unsigned int (**)(void, uint64_t, void))v99 + 6))(v98, 1, v100) != 1)
    {
      uint64_t v130 = v29[208];
      uint64_t v131 = v29[207];
      unint64_t v132 = v29[179];
      uint64_t v133 = v29[174];
      uint64_t v134 = *((int *)v29[172] + 12);
      *((_DWORD *)v29 + 610) = v134;
      uint64_t v135 = (uint64_t)v133 + v134;
      uint64_t v136 = (uint64_t)v132 + v134;
      uint64_t v137 = (void (*)(void))*((void *)v130 + 4);
      v137();
      ((void (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))v137)(v135, v136, v131);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_task_alloc();
      v29[282] = v138;
      *(void *)v138 = v29;
      *((void *)v138 + 1) = sub_10011921C;
      uint64_t v139 = (uint64_t)v29[150];
      return sub_100E58BF8(v139, v135);
    }
LABEL_43:
    swift_release();
    uint64_t v109 = (uint64_t)v29[216];
    uint64_t v110 = (uint64_t)v29[214];
    uint64_t v111 = (uint64_t)v29[213];
    uint64_t v112 = v29[208];
    uint64_t v113 = v29[207];
    uint64_t v148 = (uint8_t *)v29[212];
    uint64_t v151 = (uint64_t)v29[191];
    uint64_t v156 = (uint64_t)v29[190];
    uint64_t v114 = (uint64_t)v29[161];
    uint64_t v158 = ((char *)v29[275] + 1);
    os_log_t oslogb = (os_log_t)v29[274];
    uint64_t v115 = v29[156];
    LOBYTE(v157) = sub_10001D4B0(0, &qword_10163B870);
    uint64_t v116 = v114 + *((int *)v115 + 5);
    uint64_t v117 = (void (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))*((void *)v112 + 2);
    v117(v109, v116, v113);
    v117(v110, v114 + *((int *)v115 + 6), v113);
    v117(v111, v116, v113);
    UUID.init()();
    uint64_t v118 = sub_1002A71AC();
    uint64_t v119 = (void *)sub_100ECF4F0(*v118, *((void *)v118 + 1), *((void **)v118 + 2));
    char v120 = (void *)sub_100ECF4F0(*v118, *((void *)v118 + 1), *((void **)v118 + 2));
    sub_100127078((void (*)(uint64_t))sub_100B23648);
    static Date.distantFuture.getter();
    id v121 = sub_10012C8E4(v109, v110, v111, (uint64_t)v148, (uint64_t)v119, (uint64_t)v120, 5, v151, v156);

    sub_100DCB5BC(v162, v121);
    sub_10012C39C(v114, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v158 == oslogb)
    {
      swift_bridgeObjectRelease();
      v29[283] = v147;
      char v127 = *((unsigned char *)v29 + 569);
      ((void (*)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))v29[233])(v29[229], 1, 1, v29[207]);
      uint64_t v128 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_task_alloc();
      v29[284] = v128;
      *(void *)uint64_t v128 = v29;
      *((void *)v128 + 1) = sub_10011A75C;
      uint64_t v129 = (uint64_t)v29[229];
      return sub_100E5C1B8(v129, (v127 & 1) == 0);
    }
    unint64_t v122 = (unint64_t)v29[275] + 1;
    v29[275] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v122;
    uint64_t v123 = v29[273];
    if (*((void *)v123 + 2) <= v122)
    {
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    sub_100130CA8((uint64_t)v123+ ((*((unsigned __int8 *)v29 + 2436) + 32) & ~(unint64_t)*((unsigned __int8 *)v29 + 2436))+ *((void *)v29[157] + 9) * v122, (uint64_t)v29[161], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t result = sub_100126E88();
    int64_t v92 = 0;
    v29[276] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))result;
    char v124 = *(unsigned char *)(result + 32);
    *((unsigned char *)v29 + 593) = v124;
    uint64_t v125 = 1 << v124;
    if (v125 < 64) {
      uint64_t v126 = ~(-1 << v125);
    }
    else {
      uint64_t v126 = -1;
    }
    unint64_t v91 = v126 & *(void *)(result + 64);
  }
  int64_t v108 = v92 + 1;
  if (v92 + 1 >= v105) {
    goto LABEL_42;
  }
  unint64_t v107 = *(void *)(v106 + 8 * v108);
  if (v107) {
    goto LABEL_33;
  }
  int64_t v108 = v92 + 2;
  if (v92 + 2 >= v105) {
    goto LABEL_42;
  }
  unint64_t v107 = *(void *)(v106 + 8 * v108);
  if (v107) {
    goto LABEL_33;
  }
  int64_t v108 = v92 + 3;
  if (v92 + 3 >= v105) {
    goto LABEL_42;
  }
  unint64_t v107 = *(void *)(v106 + 8 * v108);
  if (v107)
  {
LABEL_33:
    int64_t v92 = v108;
    goto LABEL_30;
  }
  while (1)
  {
    int64_t v92 = v108 + 1;
    if (__OFADD__(v108, 1)) {
      break;
    }
    if (v92 >= v105) {
      goto LABEL_42;
    }
    unint64_t v107 = *(void *)(v106 + 8 * v92);
    ++v108;
    if (v107) {
      goto LABEL_30;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10011A75C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1832);
  uint64_t v3 = *(void *)(*(void *)v1 + 1016);
  *(void *)(*(void *)v1 + 2280) = a1;
  swift_task_dealloc();
  sub_10001DAB4(v2, &qword_101638CF0);
  return _swift_task_switch(sub_10011A898, v3, 0);
}

uint64_t sub_10011A898()
{
  uint64_t v229 = v0;
  uint64_t v1 = *(void *)(v0 + 2280);
  static Date.now.getter();
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 2288) = v2;
  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v196 = *(void *)(v0 + 2264);
LABEL_21:
    uint64_t v57 = *(void *)(v0 + 1856);
    uint64_t v58 = *(void *)(v0 + 1840);
    uint64_t v59 = *(void *)(v0 + 1824);
    uint64_t v60 = (void *)v0;
    uint64_t v61 = *(void *)(v0 + 1664);
    uint64_t v62 = v60[207];
    uint64_t v63 = v60[191];
    uint64_t v64 = v60[190];
    uint64_t v65 = v60[186];
    uint64_t v66 = v60[185];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v63, v57, v66);
    static Date.now.getter();
    Date.timeIntervalSince(_:)();
    uint64_t v68 = v67;
    uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    v69(v64, v66);
    v216 = v69;
    v69(v63, v66);
    sub_10001D074(v58, v59, &qword_101638CF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v59, 1, v62) == 1)
    {
      sub_10001DAB4(v60[228], &qword_101638CF0);
      uint64_t v70 = v60;
    }
    else
    {
      uint64_t v221 = v60[231];
      uint64_t v71 = v60[216];
      unint64_t v72 = v60[210];
      uint64_t v73 = v60[208];
      uint64_t v74 = v60[207];
      uint64_t v75 = v60[197];
      uint64_t v76 = v60[195];
      uint64_t v77 = v60[194];
      uint64_t v78 = *(void (**)(unint64_t, uint64_t, uint64_t))(v73 + 32);
      v78(v72, v60[228], v74);
      uint64_t v79 = sub_10044A110();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v75, v79, v77);
      v170 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16);
      v170(v71, v72, v74);
      unint64_t v80 = (*(unsigned __int8 *)(v73 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
      uint64_t v171 = *(unsigned __int8 *)(v73 + 80);
      uint64_t v81 = swift_allocObject();
      v173 = v78;
      v78(v81 + v80, v71, v74);
      uint64_t v82 = swift_allocObject();
      *(void *)(v82 + 16) = sub_10012E6A4;
      *(void *)(v82 + 24) = v81;
      uint64_t v83 = swift_allocObject();
      *(void *)(v83 + 16) = sub_10012E77C;
      *(void *)(v83 + 24) = v221;
      uint64_t v84 = swift_allocObject();
      *(void *)(v84 + 16) = v68;
      swift_retain();
      v203 = Logger.logObject.getter();
      os_log_type_t v199 = static os_log_type_t.default.getter();
      uint64_t v213 = swift_allocObject();
      *(unsigned char *)(v213 + 16) = 112;
      uint64_t v209 = swift_allocObject();
      *(unsigned char *)(v209 + 16) = 8;
      uint64_t v85 = swift_allocObject();
      *(void *)(v85 + 16) = 1752392040;
      uint64_t v86 = swift_allocObject();
      *(void *)(v86 + 16) = sub_100134228;
      *(void *)(v86 + 24) = v85;
      uint64_t v87 = swift_allocObject();
      *(unsigned char *)(v87 + 16) = 32;
      uint64_t v204 = swift_allocObject();
      *(unsigned char *)(v204 + 16) = 8;
      uint64_t v88 = swift_allocObject();
      *(void *)(v88 + 16) = sub_100134090;
      *(void *)(v88 + 24) = v82;
      uint64_t v89 = swift_allocObject();
      *(void *)(v89 + 16) = sub_1000654EC;
      *(void *)(v89 + 24) = v88;
      uint64_t v90 = v89;
      uint64_t v182 = v89;
      uint64_t v194 = swift_allocObject();
      *(unsigned char *)(v194 + 16) = 34;
      uint64_t v191 = swift_allocObject();
      *(unsigned char *)(v191 + 16) = 8;
      uint64_t v91 = swift_allocObject();
      *(void *)(v91 + 16) = sub_10012E784;
      *(void *)(v91 + 24) = v83;
      uint64_t v92 = swift_allocObject();
      *(void *)(v92 + 16) = sub_1000654EC;
      *(void *)(v92 + 24) = v91;
      uint64_t v93 = v92;
      uint64_t v179 = v92;
      uint64_t v188 = swift_allocObject();
      *(unsigned char *)(v188 + 16) = 0;
      uint64_t v185 = swift_allocObject();
      *(unsigned char *)(v185 + 16) = 8;
      uint64_t v94 = swift_allocObject();
      *(void *)(v94 + 16) = MacBeaconConfig.fastRollAdvertisementInterval.getter;
      *(void *)(v94 + 24) = v84;
      uint64_t v95 = swift_allocObject();
      *(void *)(v95 + 16) = sub_10012E88C;
      *(void *)(v95 + 24) = v94;
      sub_10000588C(&qword_101639B60);
      uint64_t v96 = swift_allocObject();
      sub_1004B810C(v96, 12);
      *uint64_t v97 = sub_100065514;
      v97[1] = v213;
      v97[2] = sub_100065514;
      v97[3] = v209;
      v97[4] = sub_100065504;
      v97[5] = v86;
      v97[6] = sub_100065514;
      v97[7] = v87;
      v97[8] = sub_100065514;
      v97[9] = v204;
      v97[10] = sub_100065500;
      v97[11] = v90;
      v97[12] = sub_100065514;
      v97[13] = v194;
      v97[14] = sub_100065514;
      v97[15] = v191;
      v97[16] = sub_100065500;
      v97[17] = v93;
      v97[18] = sub_100065514;
      v97[19] = v188;
      v97[20] = sub_100065514;
      v97[21] = v185;
      v97[22] = sub_10012E894;
      v97[23] = v95;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      v222 = v60;
      if (os_log_type_enabled(v203, v199))
      {
        uint64_t v168 = v95;
        int64_t v98 = (uint8_t *)sub_1008F9FAC();
        uint64_t v225 = 0;
        uint64_t v226 = swift_slowAlloc();
        *(_WORD *)int64_t v98 = 1026;
        v224 = v98 + 2;
        v227 = sub_100065514;
        uint64_t v228 = v213;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v227, (uint64_t)&v224, (uint64_t)&v225, (uint64_t)&v226);
        if (v196)
        {
LABEL_36:
          return swift_errorRelease();
        }
        swift_release();
        v227 = sub_100065514;
        uint64_t v228 = v209;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v227, (uint64_t)&v224, (uint64_t)&v225, (uint64_t)&v226);
        swift_release();
        v227 = (uint64_t (*)())sub_100065504;
        uint64_t v228 = v86;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v227, (uint64_t)&v224, (uint64_t)&v225, (uint64_t)&v226);
        swift_release();
        v227 = sub_100065514;
        uint64_t v228 = v87;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v227, (uint64_t)&v224, (uint64_t)&v225, (uint64_t)&v226);
        swift_release();
        v227 = sub_100065514;
        uint64_t v228 = v204;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v227, (uint64_t)&v224, (uint64_t)&v225, (uint64_t)&v226);
        swift_release();
        v227 = sub_100065500;
        uint64_t v228 = v182;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v227, (uint64_t)&v224, (uint64_t)&v225, (uint64_t)&v226);
        swift_release();
        v227 = sub_100065514;
        uint64_t v228 = v194;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v227, (uint64_t)&v224, (uint64_t)&v225, (uint64_t)&v226);
        swift_release();
        v227 = sub_100065514;
        uint64_t v228 = v191;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v227, (uint64_t)&v224, (uint64_t)&v225, (uint64_t)&v226);
        swift_release();
        v227 = sub_100065500;
        uint64_t v228 = v179;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v227, (uint64_t)&v224, (uint64_t)&v225, (uint64_t)&v226);
        swift_release();
        v227 = sub_100065514;
        uint64_t v228 = v188;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v227, (uint64_t)&v224, (uint64_t)&v225, (uint64_t)&v226);
        swift_release();
        v227 = sub_100065514;
        uint64_t v228 = v185;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v227, (uint64_t)&v224, (uint64_t)&v225, (uint64_t)&v226);
        swift_release();
        v227 = (uint64_t (*)())sub_10012E894;
        uint64_t v228 = v168;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v227, (uint64_t)&v224, (uint64_t)&v225, (uint64_t)&v226);
        unint64_t v102 = v60;
        uint64_t v165 = v60[197];
        uint64_t v166 = v60[195];
        uint64_t v167 = v60[194];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v203, v199, "Will expire next delegation: %{mask.hash}s at %{public}s [in %f seconds]", v98, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v165, v167);
      }
      else
      {
        uint64_t v100 = v60[197];
        uint64_t v101 = v60[195];
        uint64_t v200 = v60[194];

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v200);
        unint64_t v102 = v60;
      }
      uint64_t v103 = v102[142];
      uint64_t v104 = v102[140];
      uint64_t v105 = v102[139];
      uint64_t v106 = v102[138];
      uint64_t v107 = v102[137];
      uint64_t v108 = v102[136];
      uint64_t v201 = v102[134];
      uint64_t v205 = v102[133];
      uint64_t v109 = v102[132];
      uint64_t v110 = v102[127];
      ContinuousClock.init()();
      ContinuousClock.now.getter();
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v106, v108);
      static Duration.seconds(_:)();
      ContinuousClock.Instant.advanced(by:)();
      v210 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
      v210(v103, v105);
      uint64_t v111 = v110 + OBJC_IVAR____TtC12searchpartyd20BeaconSharingService_pendingExpirationTask;
      swift_beginAccess();
      sub_10001D074(v111, v109, (uint64_t *)&unk_10163B880);
      uint64_t v112 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v201 + 48);
      if (v112(v109, 1, v205) == 1)
      {
        sub_10001DAB4(v102[132], (uint64_t *)&unk_10163B880);
        uint64_t v113 = v102;
      }
      else
      {
        sub_10012EC2C(v102[132], v102[135], type metadata accessor for BeaconSharingService.PendingExpirationTask);
        sub_10012B44C((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v133 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v134 = v102[135];
        uint64_t v113 = v102;
        if (v133)
        {
          sub_10012C39C(v102[135], type metadata accessor for BeaconSharingService.PendingExpirationTask);
        }
        else
        {
          uint64_t v135 = v222[134];
          uint64_t v136 = v222[133];
          uint64_t v137 = v222[131];
          swift_retain();
          sub_10000588C(&qword_101638D40);
          Task.cancel()();
          swift_release();
          sub_10012C39C(v134, type metadata accessor for BeaconSharingService.PendingExpirationTask);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 56))(v137, 1, 1, v136);
          uint64_t v113 = v222;
          swift_beginAccess();
          sub_10012EBC4(v137, v111);
          swift_endAccess();
        }
      }
      uint64_t v138 = v113[133];
      uint64_t v139 = v113[130];
      sub_10001D074(v111, v139, (uint64_t *)&unk_10163B880);
      LODWORD(v138) = v112(v139, 1, v138);
      sub_10001DAB4(v139, (uint64_t *)&unk_10163B880);
      if (v138 == 1)
      {
        uint64_t v189 = v113[231];
        uint64_t v140 = v113[216];
        uint64_t v141 = v113[210];
        uint64_t v186 = v141;
        uint64_t v177 = v113[209];
        uint64_t v142 = v113[207];
        uint64_t v143 = v113[143];
        uint64_t v183 = v143;
        uint64_t v144 = v113[142];
        uint64_t v169 = v144;
        uint64_t v145 = v222[141];
        uint64_t v146 = v222[140];
        uint64_t v147 = v222[139];
        uint64_t v195 = v222[134];
        uint64_t v197 = v222[133];
        uint64_t v192 = v222[131];
        uint64_t v202 = v222[129];
        uint64_t v148 = v222[128];
        uint64_t v180 = v222[127];
        uint64_t v149 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v149 - 8) + 56))(v148, 1, 1, v149);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 16))(v144, v143, v147);
        uint64_t v150 = v142;
        v170(v140, v141, v142);
        unint64_t v151 = (*(unsigned __int8 *)(v146 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80);
        unint64_t v152 = (v145 + v171 + v151) & ~v171;
        unint64_t v153 = (v177 + v152 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v154 = swift_allocObject();
        *(void *)(v154 + 16) = 0;
        *(void *)(v154 + 24) = 0;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v146 + 32))(v154 + v151, v169, v147);
        unint64_t v155 = v154 + v152;
        uint64_t v70 = v222;
        v173(v155, v140, v150);
        *(void *)(v154 + v153) = v189;
        *(void *)(v154 + ((v153 + 15) & 0xFFFFFFFFFFFFFFF8)) = v180;
        swift_retain();
        swift_retain();
        uint64_t v156 = sub_100128234(v148, (uint64_t)&unk_10163B8E8, v154);
        sub_10001DAB4(v148, &qword_10164DBB0);
        v210(v183, v147);
        v173(v140, v186, v150);
        sub_100128404(v140, v156, v192);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v195 + 56))(v192, 0, 1, v197);
        sub_10001D608(v192, v202, (uint64_t *)&unk_10163B880);
        swift_beginAccess();
        sub_10012EBC4(v202, v111);
        swift_endAccess();
      }
      else
      {
        uint64_t v157 = v113[210];
        uint64_t v158 = v222[208];
        uint64_t v159 = v222[207];
        v210(v222[143], v222[139]);
        (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v157, v159);
        uint64_t v70 = v222;
      }
    }
    uint64_t v160 = v70[230];
    uint64_t v161 = v70[189];
    uint64_t v162 = v70[185];
    sub_100A62490(v70[122]);
    swift_bridgeObjectRelease();
    v216(v161, v162);
    sub_10001DAB4(v160, &qword_101638CF0);
    swift_release();
    uint64_t v163 = v70[101];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v164 = (uint64_t (*)(uint64_t))v70[1];
    return v164(v163);
  }
  uint64_t v175 = v0 + 856;
  v176 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 680);
  uint64_t v172 = v0 + 896;
  uint64_t v174 = v0 + 864;
  uint64_t v3 = *(void *)(v0 + 1256);
  uint64_t v4 = type metadata accessor for DelegatedShareUseCase();
  uint64_t v5 = 0;
  *(void *)(v0 + 2296) = v4;
  *(_DWORD *)(v0 + 2444) = *(_DWORD *)(v3 + 80);
  *(void *)(v0 + 2304) = *(void *)(v3 + 72);
  uint64_t v196 = *(void *)(v0 + 2264);
  while (1)
  {
    *(void *)(v0 + 2312) = v5;
    uint64_t v8 = *(void *)(v0 + 1688);
    uint64_t v9 = *(void *)(v0 + 1664);
    uint64_t v10 = *(void *)(v0 + 1656);
    uint64_t v11 = *(void *)(v0 + 1528);
    uint64_t v12 = *(void *)(v0 + 1488);
    uint64_t v13 = *(void *)(v0 + 1480);
    uint64_t v14 = *(void *)(v0 + 1456);
    uint64_t v15 = *(void *)(v0 + 1272);
    uint64_t v16 = *(void *)(v0 + 1248);
    sub_100130CA8(*(void *)(v0 + 2280)+ ((*(unsigned __int8 *)(v0 + 2444) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2444))+ *(void *)(v0 + 2304) * v5, v15, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v17 = v15 + *(int *)(v16 + 24);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    *(void *)(v0 + 2320) = v18;
    *(void *)(v0 + 2328) = (v9 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v19 = v10;
    uint64_t v20 = v18;
    v18(v8, v17, v19);
    sub_100127078((void (*)(uint64_t))sub_100B23648);
    sub_100575B34();
    unint64_t v21 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    *(void *)(v0 + 2336) = v21;
    *(void *)(v0 + 2344) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v21(v11, v13);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v13) == 1)
    {
      uint64_t v22 = *(void *)(v0 + 1456);
      static Date.distantFuture.getter();
      sub_10001DAB4(v22, (uint64_t *)&unk_10163AC90);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 1488) + 32))(*(void *)(v0 + 1504), *(void *)(v0 + 1456), *(void *)(v0 + 1480));
    }
    if ((static Date.> infix(_:_:)() & 1) == 0) {
      break;
    }
    v198 = v21;
    uint64_t v23 = *(void *)(v0 + 1584);
    uint64_t v24 = *(void *)(v0 + 1560);
    uint64_t v25 = *(void *)(v0 + 1552);
    uint64_t v211 = *(void *)(v0 + 1528);
    uint64_t v214 = *(void *)(v0 + 1504);
    uint64_t v26 = *(void *)(v0 + 1488);
    uint64_t v206 = *(void *)(v0 + 1480);
    uint64_t v27 = *(void *)(v0 + 1280);
    uint64_t v28 = *(void *)(v0 + 1272);
    unint64_t v29 = (*(unsigned __int8 *)(v0 + 2444) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2444);
    uint64_t v30 = sub_10044A110();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v30, v25);
    sub_100130CA8(v28, v27, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v31 = swift_allocObject();
    sub_10012EC2C(v27, v31 + v29, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = sub_10012EC98;
    *(void *)(v32 + 24) = v31;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v211, v214, v206);
    unint64_t v33 = (*(unsigned __int8 *)(v26 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    uint64_t v34 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32))(v34 + v33, v211, v206);
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = sub_10012ECDC;
    *(void *)(v35 + 24) = v34;
    v220 = Logger.logObject.getter();
    os_log_type_t v219 = static os_log_type_t.default.getter();
    uint64_t v36 = swift_allocObject();
    *(unsigned char *)(v36 + 16) = 112;
    uint64_t v37 = swift_allocObject();
    *(unsigned char *)(v37 + 16) = 8;
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = 1752392040;
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = sub_100134228;
    *(void *)(v39 + 24) = v38;
    uint64_t v207 = swift_allocObject();
    *(unsigned char *)(v207 + 16) = 33;
    uint64_t v40 = swift_allocObject();
    *(unsigned char *)(v40 + 16) = 8;
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = sub_100134090;
    *(void *)(v41 + 24) = v32;
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = sub_1000654EC;
    *(void *)(v42 + 24) = v41;
    uint64_t v43 = swift_allocObject();
    *(unsigned char *)(v43 + 16) = 34;
    uint64_t v44 = swift_allocObject();
    *(unsigned char *)(v44 + 16) = 8;
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = sub_100134094;
    *(void *)(v45 + 24) = v35;
    uint64_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = sub_1000654EC;
    *(void *)(v46 + 24) = v45;
    sub_10000588C(&qword_101639B60);
    uint64_t v47 = swift_allocObject();
    sub_1004B810C(v47, 9);
    *uint64_t v48 = sub_100065514;
    v48[1] = v36;
    v48[2] = sub_100065514;
    v48[3] = v37;
    v48[4] = sub_100065504;
    v48[5] = v39;
    v48[6] = sub_100065514;
    v48[7] = v207;
    v48[8] = sub_100065514;
    v48[9] = v40;
    v48[10] = sub_100065500;
    v48[11] = v42;
    v48[12] = sub_100065514;
    v48[13] = v43;
    v48[14] = sub_100065514;
    v48[15] = v44;
    v48[16] = sub_100065500;
    v48[17] = v46;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v220, v219))
    {
      uint64_t v49 = (uint8_t *)sub_1008F9FAC();
      uint64_t v50 = swift_slowAlloc();
      *(void *)(v0 + 864) = 0;
      *(void *)(v0 + 856) = v50;
      *(_WORD *)uint64_t v49 = 771;
      *(void *)(v0 + 896) = v49 + 2;
      *(void *)(v0 + 680) = sub_100065514;
      *(void *)(v0 + 688) = v36;
      sub_1008F9FB4(v176, v172, v174, v175);
      if (v196) {
        goto LABEL_36;
      }
      swift_release();
      *(void *)(v0 + 680) = sub_100065514;
      *(void *)(v0 + 688) = v37;
      sub_1008F9FB4(v176, v172, v174, v175);
      swift_release();
      *(void *)(v0 + 680) = sub_100065504;
      *(void *)(v0 + 688) = v39;
      sub_1008F9FB4(v176, v172, v174, v175);
      swift_release();
      *(void *)(v0 + 680) = sub_100065514;
      *(void *)(v0 + 688) = v207;
      sub_1008F9FB4(v176, v172, v174, v175);
      swift_release();
      *(void *)(v0 + 680) = sub_100065514;
      *(void *)(v0 + 688) = v40;
      sub_1008F9FB4(v176, v172, v174, v175);
      swift_release();
      *(void *)(v0 + 680) = sub_100065500;
      *(void *)(v0 + 688) = v42;
      sub_1008F9FB4(v176, v172, v174, v175);
      swift_release();
      *(void *)(v0 + 680) = sub_100065514;
      *(void *)(v0 + 688) = v43;
      sub_1008F9FB4(v176, v172, v174, v175);
      swift_release();
      *(void *)(v0 + 680) = sub_100065514;
      *(void *)(v0 + 688) = v44;
      sub_1008F9FB4(v176, v172, v174, v175);
      swift_release();
      *(void *)(v0 + 680) = sub_100065500;
      *(void *)(v0 + 688) = v46;
      sub_1008F9FB4(v176, v172, v174, v175);
      uint64_t v51 = *(void *)(v0 + 1664);
      uint64_t v212 = *(void *)(v0 + 1656);
      uint64_t v215 = *(void *)(v0 + 1688);
      uint64_t v52 = *(void *)(v0 + 1584);
      uint64_t v53 = *(void *)(v0 + 1560);
      uint64_t v54 = *(void *)(v0 + 1552);
      uint64_t v55 = *(void *)(v0 + 1504);
      uint64_t v56 = *(void *)(v0 + 1480);
      uint64_t v208 = *(void *)(v0 + 1272);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v220, v219, "Ignoring expired share: %{private,mask.hash}s Expired: %{public}s", v49, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
      v198(v55, v56);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v215, v212);
      sub_10012C39C(v208, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v196 = 0;
    }
    else
    {
      uint64_t v218 = *(void *)(v0 + 1688);
      uint64_t v6 = *(void *)(v0 + 1664);
      uint64_t v7 = *(void *)(v0 + 1560);
      uint64_t v178 = *(void *)(v0 + 1552);
      uint64_t v181 = *(void *)(v0 + 1584);
      uint64_t v184 = *(void *)(v0 + 1480);
      uint64_t v187 = *(void *)(v0 + 1504);
      uint64_t v190 = *(void *)(v0 + 1272);
      uint64_t v193 = *(void *)(v0 + 1656);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v181, v178);
      v198(v187, v184);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v218, v193);
      sub_10012C39C(v190, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }
    uint64_t v5 = *(void *)(v0 + 2312) + 1;
    if (v5 == *(void *)(v0 + 2288))
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
  }
  uint64_t v114 = *(void *)(v0 + 1856);
  uint64_t v115 = *(void *)(v0 + 1528);
  uint64_t v116 = *(void *)(v0 + 1488);
  uint64_t v117 = *(void *)(v0 + 1480);
  Date.timeIntervalSince(_:)();
  uint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 16);
  *(void *)(v0 + 2352) = v118;
  *(void *)(v0 + 2360) = (v116 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v118(v115, v114, v117);
  char v119 = static Date.< infix(_:_:)();
  v21(v115, v117);
  if (v119)
  {
    char v120 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1864);
    uint64_t v223 = *(void *)(v0 + 1856);
    uint64_t v121 = *(void *)(v0 + 1840);
    uint64_t v122 = *(void *)(v0 + 1656);
    uint64_t v217 = *(void *)(v0 + 1504);
    uint64_t v123 = *(void *)(v0 + 1488);
    uint64_t v124 = *(void *)(v0 + 1480);
    uint64_t v125 = *(void *)(v0 + 1272);
    uint64_t v126 = *(void *)(v0 + 1248);
    sub_10001DAB4(v121, &qword_101638CF0);
    v20(v121, v125 + *(int *)(v126 + 20), v122);
    v120(v121, 0, 1, v122);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 24))(v223, v217, v124);
  }
  uint64_t v127 = *(void *)(v0 + 1728);
  uint64_t v128 = *(void *)(v0 + 1688);
  uint64_t v129 = *(void *)(v0 + 1656);
  sub_10001D4B0(0, &qword_10163B8D0);
  v20(v127, v128, v129);
  id v130 = sub_100127724(v127);
  *(void *)(v0 + 2368) = v130;
  uint64_t v131 = (void *)swift_task_alloc();
  *(void *)(v0 + 2376) = v131;
  *uint64_t v131 = v0;
  v131[1] = sub_10011CA50;
  uint64_t v132 = *(void *)(v0 + 1184);
  return sub_1000FAA48(v132, (uint64_t)v130);
}

uint64_t sub_10011CA50()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2384) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 1016);
    uint64_t v4 = sub_100121F44;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 1016);

    uint64_t v4 = sub_10011CB78;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10011CB78()
{
  (*(void (**)(void, void, void))(v0[147] + 32))(v0[149], v0[148], v0[146]);
  swift_retain();
  sub_1000D12DC((uint64_t)(v0 + 50));
  swift_release();
  sub_10001CD44(v0 + 50, v0[53]);
  uint64_t v3 = (uint64_t (*)(void))((char *)&dword_101639210 + dword_101639210);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[299] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10011CC6C;
  return v3();
}

uint64_t sub_10011CC6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1016);
  *(void *)(*(void *)v1 + 2400) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10011CD84, v2, 0);
}

uint64_t sub_10011CD84()
{
  v266 = v0;
  uint64_t v1 = (uint64_t)(v0 + 50);
  if (v0[300])
  {
    uint64_t v2 = v0[159];
    uint64_t v3 = v0[156];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = v2 + *(int *)(v3 + 20);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[301] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10011F26C;
    uint64_t v6 = v0[145];
    return sub_1007B8494(v6, v4);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v202 = v0[298];
  uint64_t v221 = (void (*)(uint64_t, uint64_t, uint64_t))v0[294];
  v253 = (void (*)(uint64_t, uint64_t))v0[292];
  uint64_t v8 = (void (*)(uint64_t, uint64_t, uint64_t))v0[290];
  uint64_t v9 = v0[216];
  uint64_t v10 = v0[214];
  uint64_t v193 = v0[213];
  uint64_t v11 = v0[212];
  uint64_t v12 = v0[211];
  uint64_t v248 = v0[208];
  v260 = v0;
  uint64_t v13 = v0[207];
  uint64_t v205 = v0[191];
  uint64_t v209 = v0[190];
  uint64_t v213 = v0[185];
  uint64_t v217 = v0[188];
  uint64_t v196 = v0[159];
  uint64_t v14 = v0[156];
  uint64_t v198 = v0[149];
  uint64_t v229 = v0[147];
  uint64_t v237 = v0[146];
  sub_10001D4B0(0, &qword_10163B870);
  uint64_t v15 = v196 + *(int *)(v14 + 20);
  v8(v9, v15, v13);
  v8(v10, v12, v13);
  v8(v193, v15, v13);
  UUID.init()();
  uint64_t v16 = sub_1002A71AC();
  uint64_t v17 = (void *)sub_100ECF4F0(*v16, *((void *)v16 + 1), *((void **)v16 + 2));
  sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
  URL.absoluteString.getter();
  id v18 = sub_1001277C0();
  sub_100127078((void (*)(uint64_t))sub_100B23648);
  v221(v209, v217, v213);
  id v19 = sub_10012BEDC(v9, v10, v193, v11, (uint64_t)v17, (uint64_t)v18, 5, v205, v209, 0, 1);

  sub_100DCB5BC(&v264, v19);
  (*(void (**)(uint64_t, uint64_t))(v229 + 8))(v198, v237);
  v253(v217, v213);
  uint64_t v20 = v13;
  unint64_t v21 = v260;
  (*(void (**)(uint64_t, uint64_t))(v248 + 8))(v12, v20);
  sub_10012C39C(v196, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v22 = v260[289] + 1;
  if (v22 == v260[286])
  {
LABEL_6:
    uint64_t v23 = v202;
LABEL_7:
    uint64_t v234 = v23;
    swift_bridgeObjectRelease();
    uint64_t v24 = v21[232];
    uint64_t v25 = v21[230];
    uint64_t v26 = v21[228];
    uint64_t v27 = v21[208];
    uint64_t v28 = v21[207];
    uint64_t v29 = v21[191];
    uint64_t v30 = v21[190];
    uint64_t v31 = v21[186];
    uint64_t v32 = v21;
    uint64_t v33 = v21[185];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v29, v24, v33);
    static Date.now.getter();
    Date.timeIntervalSince(_:)();
    uint64_t v35 = v34;
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v36(v30, v33);
    v254 = v36;
    v36(v29, v33);
    sub_10001D074(v25, v26, &qword_101638CF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v26, 1, v28) == 1)
    {
      sub_10001DAB4(v32[228], &qword_101638CF0);
      uint64_t v37 = v32;
LABEL_58:
      uint64_t v181 = v37[230];
      uint64_t v182 = v37;
      uint64_t v183 = v37[189];
      uint64_t v184 = v37[185];
      sub_100A62490(v182[122]);
      swift_bridgeObjectRelease();
      v254(v183, v184);
      sub_10001DAB4(v181, &qword_101638CF0);
      swift_release();
      uint64_t v185 = v182[101];
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v186 = (uint64_t (*)(uint64_t))v182[1];
      return v186(v185);
    }
    uint64_t v250 = v32[231];
    uint64_t v92 = v32[228];
    uint64_t v93 = v32[216];
    uint64_t v94 = v32[210];
    uint64_t v95 = v32[208];
    uint64_t v96 = v32[207];
    uint64_t v97 = v32[197];
    uint64_t v98 = v32[195];
    uint64_t v99 = v32[194];
    uint64_t v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 32);
    v100(v94, v92, v96);
    uint64_t v101 = sub_10044A110();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 16))(v97, v101, v99);
    unint64_t v102 = *(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16);
    v95 += 16;
    uint64_t v192 = v102;
    v102(v93, v94, v96);
    unint64_t v103 = (*(unsigned __int8 *)(v95 + 64) + 16) & ~(unint64_t)*(unsigned __int8 *)(v95 + 64);
    uint64_t v195 = *(unsigned __int8 *)(v95 + 64);
    uint64_t v104 = swift_allocObject();
    uint64_t v200 = (void (*)(unint64_t, uint64_t, uint64_t))v100;
    v100(v104 + v103, v93, v96);
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_10012E6A4;
    *(void *)(v105 + 24) = v104;
    uint64_t v106 = swift_allocObject();
    *(void *)(v106 + 16) = sub_10012E77C;
    *(void *)(v106 + 24) = v250;
    uint64_t v107 = swift_allocObject();
    *(void *)(v107 + 16) = v35;
    swift_retain();
    v241 = Logger.logObject.getter();
    os_log_type_t v226 = static os_log_type_t.default.getter();
    uint64_t v251 = swift_allocObject();
    *(unsigned char *)(v251 + 16) = 112;
    uint64_t v246 = swift_allocObject();
    *(unsigned char *)(v246 + 16) = 8;
    uint64_t v108 = swift_allocObject();
    *(void *)(v108 + 16) = 1752392040;
    uint64_t v109 = swift_allocObject();
    *(void *)(v109 + 16) = sub_100134228;
    *(void *)(v109 + 24) = v108;
    uint64_t v110 = swift_allocObject();
    *(unsigned char *)(v110 + 16) = 32;
    uint64_t v111 = v110;
    uint64_t v232 = swift_allocObject();
    *(unsigned char *)(v232 + 16) = 8;
    uint64_t v112 = swift_allocObject();
    *(void *)(v112 + 16) = sub_100134090;
    *(void *)(v112 + 24) = v105;
    uint64_t v113 = swift_allocObject();
    *(void *)(v113 + 16) = sub_1000654EC;
    *(void *)(v113 + 24) = v112;
    uint64_t v223 = swift_allocObject();
    *(unsigned char *)(v223 + 16) = 34;
    uint64_t v219 = swift_allocObject();
    *(unsigned char *)(v219 + 16) = 8;
    uint64_t v114 = swift_allocObject();
    *(void *)(v114 + 16) = sub_10012E784;
    *(void *)(v114 + 24) = v106;
    uint64_t v115 = swift_allocObject();
    *(void *)(v115 + 16) = sub_1000654EC;
    *(void *)(v115 + 24) = v114;
    uint64_t v116 = v115;
    uint64_t v207 = v115;
    uint64_t v215 = swift_allocObject();
    *(unsigned char *)(v215 + 16) = 0;
    uint64_t v211 = swift_allocObject();
    *(unsigned char *)(v211 + 16) = 8;
    uint64_t v117 = swift_allocObject();
    *(void *)(v117 + 16) = MacBeaconConfig.fastRollAdvertisementInterval.getter;
    *(void *)(v117 + 24) = v107;
    uint64_t v118 = swift_allocObject();
    *(void *)(v118 + 16) = sub_10012E88C;
    *(void *)(v118 + 24) = v117;
    sub_10000588C(&qword_101639B60);
    uint64_t v119 = swift_allocObject();
    sub_1004B810C(v119, 12);
    void *v120 = sub_100065514;
    v120[1] = v251;
    v120[2] = sub_100065514;
    v120[3] = v246;
    v120[4] = sub_100065504;
    v120[5] = v109;
    v120[6] = sub_100065514;
    v120[7] = v111;
    v120[8] = sub_100065514;
    v120[9] = v232;
    v120[10] = sub_100065500;
    v120[11] = v113;
    v120[12] = sub_100065514;
    v120[13] = v223;
    v120[14] = sub_100065514;
    v120[15] = v219;
    v120[16] = sub_100065500;
    v120[17] = v116;
    v120[18] = sub_100065514;
    v120[19] = v215;
    v120[20] = sub_100065514;
    v120[21] = v211;
    v120[22] = sub_10012E894;
    v120[23] = v118;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled(v241, v226))
    {
      uint64_t v142 = v260;
      uint64_t v236 = v260[197];
      uint64_t v143 = v260[195];
      uint64_t v227 = v260[194];

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v236, v227);
      goto LABEL_50;
    }
    uint64_t v190 = v118;
    uint64_t v121 = (uint8_t *)sub_1008F9FAC();
    uint64_t v122 = swift_slowAlloc();
    uint64_t v262 = 0;
    uint64_t v263 = v122;
    *(_WORD *)uint64_t v121 = 1026;
    v261 = v121 + 2;
    v264 = sub_100065514;
    uint64_t v265 = v251;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v264, (uint64_t)&v261, (uint64_t)&v262, (uint64_t)&v263);
    if (!v234)
    {
      swift_release();
      v264 = sub_100065514;
      uint64_t v265 = v246;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v264, (uint64_t)&v261, (uint64_t)&v262, (uint64_t)&v263);
      swift_release();
      v264 = (uint64_t (*)())sub_100065504;
      uint64_t v265 = v109;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v264, (uint64_t)&v261, (uint64_t)&v262, (uint64_t)&v263);
      swift_release();
      v264 = sub_100065514;
      uint64_t v265 = v111;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v264, (uint64_t)&v261, (uint64_t)&v262, (uint64_t)&v263);
      swift_release();
      v264 = sub_100065514;
      uint64_t v265 = v232;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v264, (uint64_t)&v261, (uint64_t)&v262, (uint64_t)&v263);
      swift_release();
      v264 = sub_100065500;
      uint64_t v265 = v113;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v264, (uint64_t)&v261, (uint64_t)&v262, (uint64_t)&v263);
      swift_release();
      v264 = sub_100065514;
      uint64_t v265 = v223;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v264, (uint64_t)&v261, (uint64_t)&v262, (uint64_t)&v263);
      swift_release();
      v264 = sub_100065514;
      uint64_t v265 = v219;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v264, (uint64_t)&v261, (uint64_t)&v262, (uint64_t)&v263);
      swift_release();
      v264 = sub_100065500;
      uint64_t v265 = v207;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v264, (uint64_t)&v261, (uint64_t)&v262, (uint64_t)&v263);
      swift_release();
      v264 = sub_100065514;
      uint64_t v265 = v215;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v264, (uint64_t)&v261, (uint64_t)&v262, (uint64_t)&v263);
      swift_release();
      v264 = sub_100065514;
      uint64_t v265 = v211;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v264, (uint64_t)&v261, (uint64_t)&v262, (uint64_t)&v263);
      swift_release();
      v264 = (uint64_t (*)())sub_10012E894;
      uint64_t v265 = v190;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v264, (uint64_t)&v261, (uint64_t)&v262, (uint64_t)&v263);
      uint64_t v142 = v260;
      uint64_t v187 = v260[197];
      uint64_t v188 = v260[195];
      uint64_t v189 = v260[194];
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v241, v226, "Will expire next delegation: %{mask.hash}s at %{public}s [in %f seconds]", v121, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      (*(void (**)(uint64_t, uint64_t))(v188 + 8))(v187, v189);
LABEL_50:
      uint64_t v144 = v142[142];
      uint64_t v145 = v142[140];
      uint64_t v252 = v142[139];
      uint64_t v146 = v142[138];
      uint64_t v147 = v142[137];
      uint64_t v148 = v142[136];
      uint64_t v149 = v142[134];
      uint64_t v242 = v142[133];
      uint64_t v150 = v142[132];
      uint64_t v151 = v142[127];
      ContinuousClock.init()();
      ContinuousClock.now.getter();
      (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v146, v148);
      static Duration.seconds(_:)();
      ContinuousClock.Instant.advanced(by:)();
      v247 = *(void (**)(uint64_t, uint64_t))(v145 + 8);
      v247(v144, v252);
      uint64_t v152 = v151 + OBJC_IVAR____TtC12searchpartyd20BeaconSharingService_pendingExpirationTask;
      swift_beginAccess();
      sub_10001D074(v152, v150, (uint64_t *)&unk_10163B880);
      unint64_t v153 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
      if (v153(v150, 1, v242) == 1)
      {
        sub_10001DAB4(v142[132], (uint64_t *)&unk_10163B880);
        uint64_t v37 = v142;
      }
      else
      {
        sub_10012EC2C(v142[132], v142[135], type metadata accessor for BeaconSharingService.PendingExpirationTask);
        sub_10012B44C((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v154 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v155 = v142[135];
        uint64_t v37 = v142;
        if (v154)
        {
          sub_10012C39C(v142[135], type metadata accessor for BeaconSharingService.PendingExpirationTask);
        }
        else
        {
          uint64_t v156 = v142[134];
          uint64_t v157 = v142[133];
          uint64_t v158 = v142[131];
          swift_retain();
          sub_10000588C(&qword_101638D40);
          Task.cancel()();
          uint64_t v37 = v260;
          swift_release();
          sub_10012C39C(v155, type metadata accessor for BeaconSharingService.PendingExpirationTask);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v156 + 56))(v158, 1, 1, v157);
          swift_beginAccess();
          sub_10012EBC4(v158, v152);
          swift_endAccess();
        }
      }
      uint64_t v159 = v37[133];
      uint64_t v160 = v37[130];
      sub_10001D074(v152, v160, (uint64_t *)&unk_10163B880);
      LODWORD(v159) = v153(v160, 1, v159);
      sub_10001DAB4(v160, (uint64_t *)&unk_10163B880);
      if (v159 == 1)
      {
        uint64_t v218 = v37[231];
        uint64_t v161 = v37[216];
        uint64_t v162 = v37[210];
        uint64_t v216 = v162;
        uint64_t v204 = v37[209];
        uint64_t v163 = v37[207];
        uint64_t v164 = v37[143];
        uint64_t v212 = v164;
        uint64_t v165 = v37[142];
        uint64_t v191 = v165;
        uint64_t v166 = v37[141];
        uint64_t v167 = v37[140];
        uint64_t v168 = v260[139];
        uint64_t v224 = v260[134];
        uint64_t v228 = v260[133];
        uint64_t v220 = v260[131];
        uint64_t v233 = v260[129];
        uint64_t v169 = v260[128];
        uint64_t v208 = v260[127];
        uint64_t v170 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v170 - 8) + 56))(v169, 1, 1, v170);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 16))(v165, v164, v168);
        uint64_t v171 = v163;
        v192(v161, v162, v163);
        unint64_t v172 = (*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80);
        unint64_t v173 = (v166 + v195 + v172) & ~v195;
        unint64_t v174 = (v204 + v173 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v175 = swift_allocObject();
        *(void *)(v175 + 16) = 0;
        *(void *)(v175 + 24) = 0;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v167 + 32))(v175 + v172, v191, v168);
        v200(v175 + v173, v161, v171);
        *(void *)(v175 + v174) = v218;
        *(void *)(v175 + ((v174 + 15) & 0xFFFFFFFFFFFFFFF8)) = v208;
        swift_retain();
        swift_retain();
        uint64_t v176 = sub_100128234(v169, (uint64_t)&unk_10163B8E8, v175);
        sub_10001DAB4(v169, &qword_10164DBB0);
        uint64_t v177 = v168;
        uint64_t v37 = v260;
        v247(v212, v177);
        v200(v161, v216, v171);
        sub_100128404(v161, v176, v220);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v224 + 56))(v220, 0, 1, v228);
        sub_10001D608(v220, v233, (uint64_t *)&unk_10163B880);
        swift_beginAccess();
        sub_10012EBC4(v233, v152);
        swift_endAccess();
      }
      else
      {
        uint64_t v178 = v37[210];
        uint64_t v179 = v37[208];
        uint64_t v180 = v37[207];
        v247(v37[143], v37[139]);
        (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v178, v180);
      }
      goto LABEL_58;
    }
LABEL_41:
    return swift_errorRelease();
  }
  else
  {
    uint64_t v197 = (uint64_t)(v260 + 108);
    uint64_t v199 = (uint64_t)(v260 + 107);
    uint64_t v194 = (uint64_t)(v260 + 112);
    uint64_t v201 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v260 + 85);
    while (1)
    {
      v21[289] = v22;
      uint64_t v38 = v21[288];
      uint64_t v39 = *((unsigned __int8 *)v21 + 2444);
      uint64_t v40 = v21[285];
      uint64_t v41 = v21[211];
      uint64_t v42 = v21[208];
      uint64_t v43 = v21[207];
      uint64_t v44 = v260[191];
      uint64_t v45 = v260[186];
      uint64_t v46 = v260[185];
      uint64_t v47 = v260[182];
      uint64_t v48 = v260[159];
      uint64_t v49 = v260[156];
      sub_100130CA8(v40 + ((v39 + 32) & ~v39) + v38 * v22, v48, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v50 = v48 + *(int *)(v49 + 24);
      uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
      v260[290] = v51;
      v260[291] = (v42 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v51(v41, v50, v43);
      sub_100127078((void (*)(uint64_t))sub_100B23648);
      sub_100575B34();
      uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
      v260[292] = v52;
      v260[293] = (v45 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v53 = v44;
      uint64_t v54 = v260;
      v52(v53, v46);
      v249 = v52;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v47, 1, v46) == 1)
      {
        uint64_t v55 = v260[182];
        static Date.distantFuture.getter();
        sub_10001DAB4(v55, (uint64_t *)&unk_10163AC90);
      }
      else
      {
        (*(void (**)(void, void, void))(v260[186] + 32))(v260[188], v260[182], v260[185]);
      }
      if ((static Date.> infix(_:_:)() & 1) == 0) {
        break;
      }
      uint64_t v56 = v260[198];
      uint64_t v57 = v260[195];
      uint64_t v58 = v260[194];
      uint64_t v238 = v260[191];
      uint64_t v243 = v260[188];
      uint64_t v59 = v260[186];
      uint64_t v235 = v260[185];
      uint64_t v60 = v260[160];
      uint64_t v61 = v260[159];
      unint64_t v62 = (*((unsigned __int8 *)v260 + 2444) + 16) & ~(unint64_t)*((unsigned __int8 *)v260 + 2444);
      uint64_t v63 = sub_10044A110();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v56, v63, v58);
      sub_100130CA8(v61, v60, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v64 = swift_allocObject();
      sub_10012EC2C(v60, v64 + v62, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v65 = swift_allocObject();
      *(void *)(v65 + 16) = sub_10012EC98;
      *(void *)(v65 + 24) = v64;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v238, v243, v235);
      unint64_t v66 = (*(unsigned __int8 *)(v59 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
      uint64_t v67 = swift_allocObject();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v59 + 32))(v67 + v66, v238, v235);
      uint64_t v68 = swift_allocObject();
      *(void *)(v68 + 16) = sub_10012ECDC;
      *(void *)(v68 + 24) = v67;
      v255 = Logger.logObject.getter();
      os_log_type_t v230 = static os_log_type_t.default.getter();
      uint64_t v257 = swift_allocObject();
      *(unsigned char *)(v257 + 16) = 112;
      uint64_t v244 = swift_allocObject();
      *(unsigned char *)(v244 + 16) = 8;
      uint64_t v69 = swift_allocObject();
      *(void *)(v69 + 16) = 1752392040;
      uint64_t v70 = swift_allocObject();
      *(void *)(v70 + 16) = sub_100134228;
      *(void *)(v70 + 24) = v69;
      uint64_t v239 = swift_allocObject();
      *(unsigned char *)(v239 + 16) = 33;
      uint64_t v71 = swift_allocObject();
      *(unsigned char *)(v71 + 16) = 8;
      uint64_t v72 = swift_allocObject();
      *(void *)(v72 + 16) = sub_100134090;
      *(void *)(v72 + 24) = v65;
      uint64_t v73 = swift_allocObject();
      *(void *)(v73 + 16) = sub_1000654EC;
      *(void *)(v73 + 24) = v72;
      uint64_t v74 = swift_allocObject();
      *(unsigned char *)(v74 + 16) = 34;
      uint64_t v75 = swift_allocObject();
      *(unsigned char *)(v75 + 16) = 8;
      uint64_t v76 = swift_allocObject();
      *(void *)(v76 + 16) = sub_100134094;
      *(void *)(v76 + 24) = v68;
      uint64_t v77 = swift_allocObject();
      *(void *)(v77 + 16) = sub_1000654EC;
      *(void *)(v77 + 24) = v76;
      sub_10000588C(&qword_101639B60);
      uint64_t v78 = swift_allocObject();
      sub_1004B810C(v78, 9);
      void *v79 = sub_100065514;
      v79[1] = v257;
      v79[2] = sub_100065514;
      v79[3] = v244;
      v79[4] = sub_100065504;
      v79[5] = v70;
      v79[6] = sub_100065514;
      v79[7] = v239;
      v79[8] = sub_100065514;
      v79[9] = v71;
      v79[10] = sub_100065500;
      v79[11] = v73;
      v79[12] = sub_100065514;
      v79[13] = v74;
      v79[14] = sub_100065514;
      v79[15] = v75;
      v79[16] = sub_100065500;
      v79[17] = v77;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v225 = v77;
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v255, v230))
      {
        uint64_t v83 = (uint8_t *)sub_1008F9FAC();
        uint64_t v84 = swift_slowAlloc();
        v260[108] = 0;
        v260[107] = v84;
        *(_WORD *)uint64_t v83 = 771;
        v260[112] = v83 + 2;
        v260[85] = sub_100065514;
        v260[86] = v257;
        sub_1008F9FB4(v201, v194, v197, v199);
        if (v202) {
          goto LABEL_41;
        }
        swift_release();
        v260[85] = sub_100065514;
        v260[86] = v244;
        sub_1008F9FB4(v201, v194, v197, v199);
        swift_release();
        v260[85] = sub_100065504;
        v260[86] = v70;
        sub_1008F9FB4(v201, v194, v197, v199);
        swift_release();
        v260[85] = sub_100065514;
        v260[86] = v239;
        sub_1008F9FB4(v201, v194, v197, v199);
        swift_release();
        v260[85] = sub_100065514;
        v260[86] = v71;
        sub_1008F9FB4(v201, v194, v197, v199);
        swift_release();
        v260[85] = sub_100065500;
        v260[86] = v73;
        sub_1008F9FB4(v201, v194, v197, v199);
        swift_release();
        v260[85] = sub_100065514;
        v260[86] = v74;
        sub_1008F9FB4(v201, v194, v197, v199);
        swift_release();
        v260[85] = sub_100065514;
        v260[86] = v75;
        sub_1008F9FB4(v201, v194, v197, v199);
        swift_release();
        v260[85] = sub_100065500;
        v260[86] = v225;
        sub_1008F9FB4(v201, v194, v197, v199);
        uint64_t v258 = v260[211];
        uint64_t v85 = v260[208];
        uint64_t v86 = v260[198];
        uint64_t v87 = v260[195];
        uint64_t v88 = v260[194];
        uint64_t v89 = v260[188];
        uint64_t v90 = v260[185];
        uint64_t v240 = v260[159];
        uint64_t v245 = v260[207];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v255, v230, "Ignoring expired share: %{private,mask.hash}s Expired: %{public}s", v83, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v88);
        uint64_t v91 = v90;
        unint64_t v21 = v260;
        v249(v89, v91);
        (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v258, v245);
        sub_10012C39C(v240, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v202 = 0;
        uint64_t v23 = 0;
        uint64_t v22 = v260[289] + 1;
        if (v22 == v260[286]) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v231 = v260[211];
        uint64_t v80 = v260[208];
        uint64_t v81 = v260[207];
        uint64_t v206 = v260[198];
        uint64_t v82 = v260[195];
        uint64_t v203 = v260[194];
        uint64_t v210 = v260[185];
        uint64_t v214 = v260[188];
        uint64_t v222 = v260[159];
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v206, v203);
        v249(v214, v210);
        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v231, v81);
        sub_10012C39C(v222, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v22 = v260[289] + 1;
        unint64_t v21 = v260;
        if (v22 == v260[286]) {
          goto LABEL_6;
        }
      }
    }
    uint64_t v123 = v260[232];
    uint64_t v124 = v260[191];
    uint64_t v125 = v260[186];
    uint64_t v126 = v260[185];
    Date.timeIntervalSince(_:)();
    uint64_t v127 = *(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 16);
    v260[294] = v127;
    v260[295] = (v125 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v127(v124, v123, v126);
    char v128 = static Date.< infix(_:_:)();
    v249(v124, v126);
    if (v128)
    {
      uint64_t v129 = (void (*)(uint64_t, void, uint64_t, uint64_t))v260[233];
      uint64_t v130 = v260[230];
      uint64_t v131 = v260[207];
      uint64_t v256 = v260[188];
      uint64_t v259 = v260[232];
      uint64_t v132 = v260[186];
      uint64_t v133 = v260[185];
      uint64_t v134 = v260[159];
      uint64_t v135 = v260[156];
      sub_10001DAB4(v130, &qword_101638CF0);
      v51(v130, v134 + *(int *)(v135 + 20), v131);
      v129(v130, 0, 1, v131);
      uint64_t v54 = v260;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 24))(v259, v256, v133);
    }
    uint64_t v136 = v54[216];
    uint64_t v137 = v54[211];
    uint64_t v138 = v54[207];
    sub_10001D4B0(0, &qword_10163B8D0);
    v51(v136, v137, v138);
    id v139 = sub_100127724(v136);
    v54[296] = v139;
    uint64_t v140 = (void *)swift_task_alloc();
    v54[297] = v140;
    *uint64_t v140 = v54;
    v140[1] = sub_10011CA50;
    uint64_t v141 = v54[148];
    return sub_1000FAA48(v141, (uint64_t)v139);
  }
}

uint64_t sub_10011F26C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2416) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 1016);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_100124960;
  }
  else
  {
    uint64_t v4 = sub_10011F3A4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10011F3A4()
{
  uint64_t v259 = v0;
  uint64_t v1 = v0[145];
  uint64_t v2 = v0[144];
  swift_release();
  uint64_t v225 = *(void *)(v1 + *(int *)(v2 + 20));
  sub_10012C39C(v1, (uint64_t (*)(void))type metadata accessor for DelegatedShareMeta);
  uint64_t v199 = v0[302];
  uint64_t v210 = (void (*)(uint64_t, uint64_t, uint64_t))v0[294];
  uint64_t v240 = (void (*)(uint64_t, uint64_t))v0[292];
  uint64_t v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[290];
  uint64_t v4 = v0[216];
  uint64_t v5 = v0[214];
  uint64_t v186 = v0[213];
  uint64_t v187 = v0[212];
  uint64_t v6 = v0[211];
  uint64_t v234 = v0[208];
  uint64_t v7 = v0[207];
  uint64_t v194 = v0[191];
  uint64_t v197 = v0[190];
  uint64_t v201 = v0[185];
  uint64_t v204 = v0[188];
  uint64_t v8 = v0[159];
  uint64_t v9 = v0[156];
  uint64_t v189 = v0[149];
  uint64_t v219 = v0[147];
  uint64_t v229 = v0[146];
  sub_10001D4B0(0, &qword_10163B870);
  uint64_t v10 = v8 + *(int *)(v9 + 20);
  v3(v4, v10, v7);
  v3(v5, v6, v7);
  v3(v186, v10, v7);
  UUID.init()();
  uint64_t v11 = sub_1002A71AC();
  uint64_t v12 = (void *)sub_100ECF4F0(*v11, *((void *)v11 + 1), *((void **)v11 + 2));
  sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
  URL.absoluteString.getter();
  id v13 = sub_1001277C0();
  sub_100127078((void (*)(uint64_t))sub_100B23648);
  v210(v197, v204, v201);
  id v14 = sub_10012BEDC(v4, v5, v186, v187, (uint64_t)v12, (uint64_t)v13, 5, v194, v197, v225, 1);

  sub_100DCB5BC(&v257, v14);
  (*(void (**)(uint64_t, NSObject *))(v219 + 8))(v189, v229);
  v240(v204, v201);
  (*(void (**)(uint64_t, uint64_t))(v234 + 8))(v6, v7);
  uint64_t v15 = v0;
  sub_10012C39C(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v16 = v0[289] + 1;
  if (v16 == v0[286])
  {
LABEL_2:
    uint64_t v17 = v199;
LABEL_3:
    uint64_t v226 = v17;
    swift_bridgeObjectRelease();
    uint64_t v18 = v15[230];
    uint64_t v19 = v15[228];
    uint64_t v20 = v15[208];
    uint64_t v21 = v15[207];
    uint64_t v22 = v15[191];
    uint64_t v23 = v15[190];
    uint64_t v24 = v15[186];
    uint64_t v25 = v15[185];
    (*(void (**)(uint64_t, void, uint64_t))(v24 + 16))(v22, v15[232], v25);
    static Date.now.getter();
    Date.timeIntervalSince(_:)();
    uint64_t v27 = v26;
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v28(v23, v25);
    v247 = v28;
    v28(v22, v25);
    sub_10001D074(v18, v19, &qword_101638CF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v19, 1, v21) == 1)
    {
      sub_10001DAB4(v15[228], &qword_101638CF0);
      uint64_t v29 = v15;
LABEL_54:
      uint64_t v175 = v29[230];
      uint64_t v176 = v29;
      uint64_t v177 = v29[189];
      uint64_t v178 = v29[185];
      sub_100A62490(v176[122]);
      swift_bridgeObjectRelease();
      v247(v177, v178);
      sub_10001DAB4(v175, &qword_101638CF0);
      swift_release();
      uint64_t v179 = v176[101];
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v180 = (uint64_t (*)(uint64_t))v176[1];
      return v180(v179);
    }
    uint64_t v244 = v15[231];
    uint64_t v85 = v15[228];
    uint64_t v86 = v15[216];
    uint64_t v87 = v15[210];
    uint64_t v88 = v15[208];
    uint64_t v89 = v15[207];
    uint64_t v90 = v15[197];
    uint64_t v91 = v15[195];
    v253 = v15;
    uint64_t v92 = v15[194];
    uint64_t v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 32);
    v93(v87, v85, v89);
    uint64_t v94 = sub_10044A110();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 16))(v90, v94, v92);
    uint64_t v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16);
    v88 += 16;
    uint64_t v190 = v95;
    v95(v86, v87, v89);
    unint64_t v96 = (*(unsigned __int8 *)(v88 + 64) + 16) & ~(unint64_t)*(unsigned __int8 *)(v88 + 64);
    uint64_t v192 = *(unsigned __int8 *)(v88 + 64);
    uint64_t v97 = swift_allocObject();
    uint64_t v196 = (void (*)(unint64_t, uint64_t, uint64_t))v93;
    v93(v97 + v96, v86, v89);
    uint64_t v98 = swift_allocObject();
    *(void *)(v98 + 16) = sub_10012E6A4;
    *(void *)(v98 + 24) = v97;
    uint64_t v99 = swift_allocObject();
    *(void *)(v99 + 16) = sub_10012E77C;
    *(void *)(v99 + 24) = v244;
    uint64_t v100 = swift_allocObject();
    *(void *)(v100 + 16) = v27;
    swift_retain();
    uint64_t v232 = Logger.logObject.getter();
    os_log_type_t v212 = static os_log_type_t.default.getter();
    uint64_t v245 = swift_allocObject();
    *(unsigned char *)(v245 + 16) = 112;
    uint64_t v238 = swift_allocObject();
    *(unsigned char *)(v238 + 16) = 8;
    uint64_t v101 = swift_allocObject();
    *(void *)(v101 + 16) = 1752392040;
    uint64_t v102 = swift_allocObject();
    *(void *)(v102 + 16) = sub_100134228;
    *(void *)(v102 + 24) = v101;
    uint64_t v103 = swift_allocObject();
    *(unsigned char *)(v103 + 16) = 32;
    uint64_t v104 = v103;
    uint64_t v223 = swift_allocObject();
    *(unsigned char *)(v223 + 16) = 8;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_100134090;
    *(void *)(v105 + 24) = v98;
    uint64_t v106 = swift_allocObject();
    *(void *)(v106 + 16) = sub_1000654EC;
    *(void *)(v106 + 24) = v105;
    uint64_t v208 = swift_allocObject();
    *(unsigned char *)(v208 + 16) = 34;
    uint64_t v220 = swift_allocObject();
    *(unsigned char *)(v220 + 16) = 8;
    uint64_t v107 = swift_allocObject();
    *(void *)(v107 + 16) = sub_10012E784;
    *(void *)(v107 + 24) = v99;
    uint64_t v108 = swift_allocObject();
    *(void *)(v108 + 16) = sub_1000654EC;
    *(void *)(v108 + 24) = v107;
    uint64_t v109 = v108;
    uint64_t v217 = v108;
    uint64_t v110 = swift_allocObject();
    *(unsigned char *)(v110 + 16) = 0;
    uint64_t v111 = v110;
    uint64_t v215 = swift_allocObject();
    *(unsigned char *)(v215 + 16) = 8;
    uint64_t v112 = swift_allocObject();
    *(void *)(v112 + 16) = MacBeaconConfig.fastRollAdvertisementInterval.getter;
    *(void *)(v112 + 24) = v100;
    uint64_t v113 = swift_allocObject();
    *(void *)(v113 + 16) = sub_10012E88C;
    *(void *)(v113 + 24) = v112;
    sub_10000588C(&qword_101639B60);
    uint64_t v114 = swift_allocObject();
    sub_1004B810C(v114, 12);
    void *v115 = sub_100065514;
    v115[1] = v245;
    v115[2] = sub_100065514;
    v115[3] = v238;
    v115[4] = sub_100065504;
    v115[5] = v102;
    v115[6] = sub_100065514;
    v115[7] = v104;
    v115[8] = sub_100065514;
    v115[9] = v223;
    v115[10] = sub_100065500;
    v115[11] = v106;
    v115[12] = sub_100065514;
    v115[13] = v208;
    v115[14] = sub_100065514;
    v115[15] = v220;
    v115[16] = sub_100065500;
    v115[17] = v109;
    v115[18] = sub_100065514;
    v115[19] = v111;
    v115[20] = sub_100065514;
    v115[21] = v215;
    v115[22] = sub_10012E894;
    v115[23] = v113;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled(v232, v212))
    {
      uint64_t v137 = v253[197];
      uint64_t v138 = v253[195];
      uint64_t v227 = v253[194];

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v227);
      goto LABEL_46;
    }
    uint64_t v116 = (uint8_t *)sub_1008F9FAC();
    uint64_t v255 = 0;
    uint64_t v256 = swift_slowAlloc();
    *(_WORD *)uint64_t v116 = 1026;
    v254 = v116 + 2;
    uint64_t v257 = sub_100065514;
    uint64_t v258 = v245;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257, (uint64_t)&v254, (uint64_t)&v255, (uint64_t)&v256);
    if (!v226)
    {
      swift_release();
      uint64_t v257 = sub_100065514;
      uint64_t v258 = v238;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257, (uint64_t)&v254, (uint64_t)&v255, (uint64_t)&v256);
      swift_release();
      uint64_t v257 = (uint64_t (*)())sub_100065504;
      uint64_t v258 = v102;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257, (uint64_t)&v254, (uint64_t)&v255, (uint64_t)&v256);
      swift_release();
      uint64_t v257 = sub_100065514;
      uint64_t v258 = v104;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257, (uint64_t)&v254, (uint64_t)&v255, (uint64_t)&v256);
      swift_release();
      uint64_t v257 = sub_100065514;
      uint64_t v258 = v223;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257, (uint64_t)&v254, (uint64_t)&v255, (uint64_t)&v256);
      swift_release();
      uint64_t v257 = sub_100065500;
      uint64_t v258 = v106;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257, (uint64_t)&v254, (uint64_t)&v255, (uint64_t)&v256);
      swift_release();
      uint64_t v257 = sub_100065514;
      uint64_t v258 = v208;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257, (uint64_t)&v254, (uint64_t)&v255, (uint64_t)&v256);
      swift_release();
      uint64_t v257 = sub_100065514;
      uint64_t v258 = v220;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257, (uint64_t)&v254, (uint64_t)&v255, (uint64_t)&v256);
      swift_release();
      uint64_t v257 = sub_100065500;
      uint64_t v258 = v217;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257, (uint64_t)&v254, (uint64_t)&v255, (uint64_t)&v256);
      swift_release();
      uint64_t v257 = sub_100065514;
      uint64_t v258 = v111;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257, (uint64_t)&v254, (uint64_t)&v255, (uint64_t)&v256);
      swift_release();
      uint64_t v257 = sub_100065514;
      uint64_t v258 = v215;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257, (uint64_t)&v254, (uint64_t)&v255, (uint64_t)&v256);
      swift_release();
      uint64_t v257 = (uint64_t (*)())sub_10012E894;
      uint64_t v258 = v113;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257, (uint64_t)&v254, (uint64_t)&v255, (uint64_t)&v256);
      uint64_t v181 = v253[197];
      uint64_t v182 = v253[195];
      uint64_t v183 = v253[194];
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v232, v212, "Will expire next delegation: %{mask.hash}s at %{public}s [in %f seconds]", v116, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v181, v183);
LABEL_46:
      uint64_t v139 = v253[142];
      uint64_t v140 = v253[140];
      uint64_t v246 = v253[139];
      uint64_t v141 = v253[138];
      uint64_t v142 = v253[137];
      uint64_t v143 = v253[136];
      uint64_t v144 = v253[134];
      uint64_t v233 = v253[133];
      uint64_t v145 = v253[132];
      uint64_t v146 = v253[127];
      ContinuousClock.init()();
      ContinuousClock.now.getter();
      (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v141, v143);
      static Duration.seconds(_:)();
      ContinuousClock.Instant.advanced(by:)();
      uint64_t v239 = *(void (**)(uint64_t, uint64_t))(v140 + 8);
      v239(v139, v246);
      uint64_t v147 = v146 + OBJC_IVAR____TtC12searchpartyd20BeaconSharingService_pendingExpirationTask;
      swift_beginAccess();
      sub_10001D074(v147, v145, (uint64_t *)&unk_10163B880);
      uint64_t v148 = *(unsigned int (**)(uint64_t, uint64_t, NSObject *))(v144 + 48);
      if (v148(v145, 1, v233) == 1)
      {
        sub_10001DAB4(v253[132], (uint64_t *)&unk_10163B880);
        uint64_t v29 = v253;
      }
      else
      {
        sub_10012EC2C(v253[132], v253[135], type metadata accessor for BeaconSharingService.PendingExpirationTask);
        sub_10012B44C((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v149 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v150 = v253[135];
        uint64_t v29 = v253;
        if (v149)
        {
          sub_10012C39C(v253[135], type metadata accessor for BeaconSharingService.PendingExpirationTask);
        }
        else
        {
          uint64_t v151 = v253[134];
          uint64_t v152 = v253[133];
          uint64_t v153 = v253[131];
          swift_retain();
          sub_10000588C(&qword_101638D40);
          Task.cancel()();
          swift_release();
          sub_10012C39C(v150, type metadata accessor for BeaconSharingService.PendingExpirationTask);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v151 + 56))(v153, 1, 1, v152);
          swift_beginAccess();
          sub_10012EBC4(v153, v147);
          swift_endAccess();
        }
      }
      char v154 = v29[133];
      uint64_t v155 = v29[130];
      sub_10001D074(v147, v155, (uint64_t *)&unk_10163B880);
      LODWORD(v154) = v148(v155, 1, v154);
      sub_10001DAB4(v155, (uint64_t *)&unk_10163B880);
      if (v154 == 1)
      {
        uint64_t v213 = v29[231];
        uint64_t v156 = v29[216];
        uint64_t v157 = v29[210];
        uint64_t v209 = v157;
        uint64_t v188 = v29[209];
        uint64_t v158 = v29[207];
        uint64_t v159 = v29[143];
        uint64_t v206 = v159;
        uint64_t v228 = v147;
        uint64_t v160 = v29[142];
        uint64_t v184 = v160;
        uint64_t v185 = v29[141];
        uint64_t v161 = v29[140];
        uint64_t v162 = v29[139];
        uint64_t v218 = v29[134];
        uint64_t v221 = v29[133];
        uint64_t v216 = v29[131];
        uint64_t v224 = v29[129];
        uint64_t v163 = v29[128];
        uint64_t v200 = v163;
        uint64_t v203 = v29[127];
        uint64_t v164 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v164 - 8) + 56))(v163, 1, 1, v164);
        uint64_t v165 = v162;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v161 + 16))(v160, v159, v162);
        uint64_t v166 = v158;
        v190(v156, v157, v158);
        unint64_t v167 = (*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80);
        unint64_t v168 = (v185 + v192 + v167) & ~v192;
        unint64_t v169 = (v188 + v168 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v170 = swift_allocObject();
        *(void *)(v170 + 16) = 0;
        *(void *)(v170 + 24) = 0;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v161 + 32))(v170 + v167, v184, v165);
        v196(v170 + v168, v156, v166);
        *(void *)(v170 + v169) = v213;
        *(void *)(v170 + ((v169 + 15) & 0xFFFFFFFFFFFFFFF8)) = v203;
        swift_retain();
        swift_retain();
        uint64_t v171 = sub_100128234(v200, (uint64_t)&unk_10163B8E8, v170);
        sub_10001DAB4(v200, &qword_10164DBB0);
        v239(v206, v165);
        v196(v156, v209, v166);
        sub_100128404(v156, v171, v216);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v218 + 56))(v216, 0, 1, v221);
        sub_10001D608(v216, v224, (uint64_t *)&unk_10163B880);
        swift_beginAccess();
        sub_10012EBC4(v224, v228);
        swift_endAccess();
      }
      else
      {
        uint64_t v172 = v29[210];
        uint64_t v173 = v29[208];
        uint64_t v174 = v29[207];
        v239(v29[143], v29[139]);
        (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v172, v174);
      }
      goto LABEL_54;
    }
LABEL_37:
    return swift_errorRelease();
  }
  else
  {
    uint64_t v193 = (uint64_t)(v0 + 108);
    uint64_t v195 = (uint64_t)(v0 + 107);
    uint64_t v191 = (uint64_t)(v0 + 112);
    uint64_t v252 = v0;
    uint64_t v198 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 85);
    while (1)
    {
      v15[289] = v16;
      uint64_t v30 = v15[288];
      uint64_t v31 = *((unsigned __int8 *)v15 + 2444);
      uint64_t v32 = v15[285];
      uint64_t v33 = v15[211];
      uint64_t v34 = v15[208];
      uint64_t v35 = v15[207];
      uint64_t v36 = v15[191];
      uint64_t v37 = v15[186];
      uint64_t v38 = v15[185];
      uint64_t v39 = v252[182];
      uint64_t v40 = v252[159];
      uint64_t v41 = v252[156];
      sub_100130CA8(v32 + ((v31 + 32) & ~v31) + v30 * v16, v40, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v42 = v40 + *(int *)(v41 + 24);
      uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
      v252[290] = v43;
      v252[291] = (v34 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v43(v33, v42, v35);
      sub_100127078((void (*)(uint64_t))sub_100B23648);
      sub_100575B34();
      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v252[292] = v44;
      v252[293] = (v37 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v44(v36, v38);
      uint64_t v45 = v39;
      uint64_t v46 = v252;
      uint64_t v248 = v44;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v45, 1, v38) == 1)
      {
        uint64_t v47 = v252[182];
        static Date.distantFuture.getter();
        sub_10001DAB4(v47, (uint64_t *)&unk_10163AC90);
      }
      else
      {
        (*(void (**)(void, void, void))(v252[186] + 32))(v252[188], v252[182], v252[185]);
      }
      if ((static Date.> infix(_:_:)() & 1) == 0) {
        break;
      }
      uint64_t v48 = v252[198];
      uint64_t v49 = v252[195];
      uint64_t v50 = v252[194];
      uint64_t v235 = v252[191];
      uint64_t v241 = v252[188];
      uint64_t v51 = v252[186];
      uint64_t v52 = v252[185];
      uint64_t v53 = v252[160];
      uint64_t v54 = v252[159];
      unint64_t v55 = (*((unsigned __int8 *)v252 + 2444) + 16) & ~(unint64_t)*((unsigned __int8 *)v252 + 2444);
      uint64_t v56 = sub_10044A110();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v48, v56, v50);
      sub_100130CA8(v54, v53, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v57 = swift_allocObject();
      sub_10012EC2C(v53, v57 + v55, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v58 = swift_allocObject();
      *(void *)(v58 + 16) = sub_10012EC98;
      *(void *)(v58 + 24) = v57;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v235, v241, v52);
      unint64_t v59 = (*(unsigned __int8 *)(v51 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
      uint64_t v60 = swift_allocObject();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v51 + 32))(v60 + v59, v235, v52);
      uint64_t v61 = swift_allocObject();
      *(void *)(v61 + 16) = sub_10012ECDC;
      *(void *)(v61 + 24) = v60;
      uint64_t v250 = Logger.logObject.getter();
      os_log_type_t v230 = static os_log_type_t.default.getter();
      uint64_t v62 = swift_allocObject();
      *(unsigned char *)(v62 + 16) = 112;
      uint64_t v242 = swift_allocObject();
      *(unsigned char *)(v242 + 16) = 8;
      uint64_t v63 = swift_allocObject();
      *(void *)(v63 + 16) = 1752392040;
      uint64_t v64 = swift_allocObject();
      *(void *)(v64 + 16) = sub_100134228;
      *(void *)(v64 + 24) = v63;
      uint64_t v65 = swift_allocObject();
      *(unsigned char *)(v65 + 16) = 33;
      uint64_t v236 = swift_allocObject();
      *(unsigned char *)(v236 + 16) = 8;
      uint64_t v66 = swift_allocObject();
      *(void *)(v66 + 16) = sub_100134090;
      *(void *)(v66 + 24) = v58;
      uint64_t v67 = swift_allocObject();
      *(void *)(v67 + 16) = sub_1000654EC;
      *(void *)(v67 + 24) = v66;
      uint64_t v68 = swift_allocObject();
      *(unsigned char *)(v68 + 16) = 34;
      uint64_t v69 = swift_allocObject();
      *(unsigned char *)(v69 + 16) = 8;
      uint64_t v70 = swift_allocObject();
      *(void *)(v70 + 16) = sub_100134094;
      *(void *)(v70 + 24) = v61;
      uint64_t v71 = swift_allocObject();
      *(void *)(v71 + 16) = sub_1000654EC;
      *(void *)(v71 + 24) = v70;
      sub_10000588C(&qword_101639B60);
      uint64_t v72 = swift_allocObject();
      sub_1004B810C(v72, 9);
      void *v73 = sub_100065514;
      v73[1] = v62;
      v73[2] = sub_100065514;
      v73[3] = v242;
      v73[4] = sub_100065504;
      v73[5] = v64;
      v73[6] = sub_100065514;
      v73[7] = v65;
      v73[8] = sub_100065514;
      v73[9] = v236;
      v73[10] = sub_100065500;
      v73[11] = v67;
      v73[12] = sub_100065514;
      v73[13] = v68;
      v73[14] = sub_100065514;
      v73[15] = v69;
      v73[16] = sub_100065500;
      v73[17] = v71;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v250, v230))
      {
        uint64_t v76 = (uint8_t *)sub_1008F9FAC();
        uint64_t v77 = swift_slowAlloc();
        v252[108] = 0;
        v252[107] = v77;
        *(_WORD *)uint64_t v76 = 771;
        v252[112] = v76 + 2;
        v252[85] = sub_100065514;
        v252[86] = v62;
        sub_1008F9FB4(v198, v191, v193, v195);
        if (v199) {
          goto LABEL_37;
        }
        swift_release();
        v252[85] = sub_100065514;
        v252[86] = v242;
        sub_1008F9FB4(v198, v191, v193, v195);
        swift_release();
        v252[85] = sub_100065504;
        v252[86] = v64;
        sub_1008F9FB4(v198, v191, v193, v195);
        swift_release();
        v252[85] = sub_100065514;
        v252[86] = v65;
        sub_1008F9FB4(v198, v191, v193, v195);
        swift_release();
        v252[85] = sub_100065514;
        v252[86] = v236;
        sub_1008F9FB4(v198, v191, v193, v195);
        swift_release();
        v252[85] = sub_100065500;
        v252[86] = v67;
        sub_1008F9FB4(v198, v191, v193, v195);
        swift_release();
        v252[85] = sub_100065514;
        v252[86] = v68;
        sub_1008F9FB4(v198, v191, v193, v195);
        swift_release();
        v252[85] = sub_100065514;
        v252[86] = v69;
        sub_1008F9FB4(v198, v191, v193, v195);
        swift_release();
        v252[85] = sub_100065500;
        v252[86] = v71;
        sub_1008F9FB4(v198, v191, v193, v195);
        uint64_t v78 = v252[208];
        uint64_t v237 = v252[207];
        uint64_t v243 = v252[211];
        uint64_t v79 = v252[198];
        uint64_t v80 = v252[195];
        uint64_t v81 = v252[194];
        uint64_t v82 = v252[188];
        uint64_t v83 = v252[185];
        uint64_t v84 = v252[159];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v250, v230, "Ignoring expired share: %{private,mask.hash}s Expired: %{public}s", v76, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
        uint64_t v15 = v252;
        v248(v82, v83);
        (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v243, v237);
        sub_10012C39C(v84, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v199 = 0;
        uint64_t v17 = 0;
        uint64_t v16 = v252[289] + 1;
        if (v16 == v252[286]) {
          goto LABEL_3;
        }
      }
      else
      {
        uint64_t v15 = v252;
        uint64_t v231 = v252[211];
        uint64_t v74 = v252[208];
        uint64_t v222 = v252[207];
        uint64_t v75 = v252[195];
        uint64_t v202 = v252[194];
        uint64_t v205 = v252[198];
        uint64_t v207 = v252[185];
        uint64_t v211 = v252[188];
        uint64_t v214 = v252[159];
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v205, v202);
        v248(v211, v207);
        (*(void (**)(NSObject *, uint64_t))(v74 + 8))(v231, v222);
        sub_10012C39C(v214, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v16 = v252[289] + 1;
        if (v16 == v252[286]) {
          goto LABEL_2;
        }
      }
    }
    uint64_t v118 = v252[232];
    uint64_t v119 = v252[191];
    uint64_t v120 = v252[186];
    uint64_t v121 = v252[185];
    Date.timeIntervalSince(_:)();
    uint64_t v122 = *(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 16);
    v252[294] = v122;
    v252[295] = (v120 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v122(v119, v118, v121);
    char v123 = static Date.< infix(_:_:)();
    v248(v119, v121);
    if (v123)
    {
      uint64_t v124 = (void (*)(uint64_t, void, uint64_t, uint64_t))v252[233];
      uint64_t v125 = v252[230];
      uint64_t v126 = v252[207];
      uint64_t v249 = v252[188];
      uint64_t v251 = v252[232];
      uint64_t v127 = v252[186];
      uint64_t v128 = v252[185];
      uint64_t v129 = v252[159];
      uint64_t v130 = v252[156];
      sub_10001DAB4(v125, &qword_101638CF0);
      v43(v125, v129 + *(int *)(v130 + 20), v126);
      v124(v125, 0, 1, v126);
      uint64_t v46 = v252;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 24))(v251, v249, v128);
    }
    uint64_t v131 = v46[216];
    uint64_t v132 = v46[211];
    uint64_t v133 = v46[207];
    sub_10001D4B0(0, &qword_10163B8D0);
    v43(v131, v132, v133);
    id v134 = sub_100127724(v131);
    v46[296] = v134;
    uint64_t v135 = (void *)swift_task_alloc();
    v46[297] = v135;
    *uint64_t v135 = v46;
    v135[1] = sub_10011CA50;
    uint64_t v136 = v46[148];
    return sub_1000FAA48(v136, (uint64_t)v134);
  }
}

uint64_t sub_1001217C4()
{
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 1488) + 56))(*(void *)(v0 + 1472), 1, 1, *(void *)(v0 + 1480));
  uint64_t v1 = *(void *)(v0 + 1816);
  uint64_t v2 = *(void *)(v0 + 1808);
  uint64_t v3 = *(void *)(v0 + 1632);
  uint64_t v4 = *(void *)(v0 + 1560);
  uint64_t v5 = *(void *)(v0 + 1552);
  unint64_t v6 = (*(unsigned __int8 *)(v0 + 572) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 572);
  sub_10001DAB4(*(void *)(v0 + 1472), (uint64_t *)&unk_10163AC90);
  uint64_t v7 = sub_1000D1DD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v5);
  sub_100130CA8(v1, v2, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v8 = swift_allocObject();
  sub_10012EC2C(v2, v8 + v6, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_10012E3A0;
  *(void *)(v9 + 24) = v8;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 16) = 32;
  uint64_t v13 = swift_allocObject();
  *(unsigned char *)(v13 + 16) = 8;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_10012E3CC;
  *(void *)(v14 + 24) = v9;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_10005F790;
  *(void *)(v15 + 24) = v14;
  sub_10000588C(&qword_101639B60);
  uint64_t inited = swift_initStackObject();
  sub_1004B810C(inited, 3);
  *uint64_t v17 = sub_10005F778;
  v17[1] = v12;
  v17[2] = sub_100065514;
  v17[3] = v13;
  v17[4] = sub_10005F7D0;
  v17[5] = v15;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v18 = (uint8_t *)sub_1008F9FAC();
    uint64_t v19 = swift_slowAlloc();
    *(void *)(v0 + 912) = 0;
    buf = v18;
    *(void *)(v0 + 920) = v19;
    *(_WORD *)uint64_t v18 = 258;
    *(void *)(v0 + 904) = v18 + 2;
    *(void *)(v0 + 616) = sub_10005F778;
    *(void *)(v0 + 624) = v12;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 616), v0 + 904, v0 + 912, v0 + 920);
    swift_release();
    *(void *)(v0 + 616) = sub_100065514;
    *(void *)(v0 + 624) = v13;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 616), v0 + 904, v0 + 912, v0 + 920);
    swift_release();
    *(void *)(v0 + 616) = sub_10005F7D0;
    *(void *)(v0 + 624) = v15;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 616), v0 + 904, v0 + 912, v0 + 920);
    uint64_t v50 = *(void *)(v0 + 1632);
    uint64_t v51 = *(void *)(v0 + 1560);
    uint64_t v52 = *(void *)(v0 + 1552);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Beacon %s is not delegated.", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_1008F9FA0();

    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
  }
  else
  {
    uint64_t v20 = *(void *)(v0 + 1632);
    uint64_t v21 = *(void *)(v0 + 1560);
    uint64_t v22 = *(void *)(v0 + 1552);

    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  *(unsigned char *)(v0 + 570) = 0;
  uint64_t v23 = sub_100126DF4();
  uint64_t v24 = v23;
  *(void *)(v0 + 2040) = v23;
  char v25 = *(unsigned char *)(v23 + 32);
  *(unsigned char *)(v0 + 571) = v25;
  uint64_t v26 = -1;
  uint64_t v27 = -1 << v25;
  uint64_t v28 = *(void *)(v23 + 64);
  if (-v27 < 64) {
    uint64_t v26 = ~(-1 << -(char)v27);
  }
  *(void *)(v0 + 2048) = 0;
  unint64_t v29 = v26 & v28;
  if (v29)
  {
    uint64_t v30 = 0;
    unint64_t v31 = __clz(__rbit64(v29));
    uint64_t v32 = (v29 - 1) & v29;
    goto LABEL_8;
  }
  unint64_t v48 = 63 - v27;
  if (v48 <= 0x7F) {
    goto LABEL_29;
  }
  unint64_t v49 = *(void *)(v23 + 72);
  if (!v49)
  {
    if (v48 >= 0xC0)
    {
      unint64_t v49 = *(void *)(v23 + 80);
      if (v49)
      {
        uint64_t v30 = 2;
        goto LABEL_13;
      }
      if (v48 >= 0x100)
      {
        unint64_t v49 = *(void *)(v23 + 88);
        if (v49)
        {
          uint64_t v30 = 3;
          goto LABEL_13;
        }
        if (v48 >= 0x140)
        {
          unint64_t v49 = *(void *)(v23 + 96);
          if (v49)
          {
            uint64_t v30 = 4;
            goto LABEL_13;
          }
          uint64_t v53 = 0;
          uint64_t v54 = v48 >> 6;
          if (v54 <= 5) {
            uint64_t v54 = 5;
          }
          uint64_t v55 = v54 - 5;
          while (v55 != v53)
          {
            unint64_t v49 = *(void *)(v23 + 104 + 8 * v53++);
            if (v49)
            {
              uint64_t v30 = v53 + 4;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_29:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 1384) + 56))(*(void *)(v0 + 1440), 1, 1, *(void *)(v0 + 1376));
    goto LABEL_30;
  }
  uint64_t v30 = 1;
LABEL_13:
  uint64_t v32 = (v49 - 1) & v49;
  unint64_t v31 = __clz(__rbit64(v49)) + (v30 << 6);
LABEL_8:
  *(void *)(v0 + 2064) = v32;
  *(void *)(v0 + 2056) = v30;
  uint64_t v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1936);
  uint64_t v34 = *(void *)(v0 + 1656);
  uint64_t v35 = *(void *)(v0 + 1440);
  uint64_t v36 = *(void *)(v0 + 1384);
  uint64_t v37 = *(void *)(v0 + 1376);
  unint64_t v38 = *(void *)(*(void *)(v0 + 1664) + 72) * v31;
  v33(v35, *(void *)(v23 + 48) + v38, v34);
  v33(v35 + *(int *)(v37 + 48), *(void *)(v24 + 56) + v38, v34);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v35, 0, 1, v37);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v35, 1, v37) != 1)
  {
    uint64_t v39 = *(void (**)(void))(v0 + 1960);
    uint64_t v40 = *(void *)(v0 + 1656);
    uint64_t v41 = *(void *)(v0 + 1440);
    uint64_t v42 = *(void *)(v0 + 1424);
    uint64_t v43 = *(int *)(*(void *)(v0 + 1376) + 48);
    *(_DWORD *)(v0 + 2428) = v43;
    uint64_t v44 = v42 + v43;
    uint64_t v45 = v41 + v43;
    v39();
    ((void (*)(uint64_t, uint64_t, uint64_t))v39)(v44, v45, v40);
    uint64_t v46 = (void *)swift_task_alloc();
    *(void *)(v0 + 2072) = v46;
    void *v46 = v0;
    v46[1] = sub_100114F20;
    uint64_t v47 = *(void *)(v0 + 1312);
    goto LABEL_31;
  }
LABEL_30:
  swift_release();
  uint64_t v56 = *(void *)(v0 + 1816);
  uint64_t v57 = *(void *)(v0 + 1784);
  *(void *)(v0 + 2104) = qword_10134BD98[*(char *)(v56 + *(int *)(v57 + 40))];
  uint64_t v44 = v56 + *(int *)(v57 + 32);
  uint64_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 2112) = v58;
  *uint64_t v58 = v0;
  v58[1] = sub_100117230;
  uint64_t v47 = *(void *)(v0 + 1296);
LABEL_31:
  return sub_100E58EF4(v47, v44);
}

uint64_t sub_100121F44()
{
  uint64_t v279 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2320);
  uint64_t v2 = *(void *)(v0 + 1728);
  uint64_t v3 = *(void *)(v0 + 1688);
  uint64_t v268 = *(void *)(v0 + 2384);
  uint64_t v4 = *(void *)(v0 + 1664);
  uint64_t v5 = *(void *)(v0 + 1656);
  uint64_t v6 = *(void *)(v0 + 1568);
  uint64_t v7 = *(void *)(v0 + 1560);
  uint64_t v8 = *(void *)(v0 + 1552);

  uint64_t v9 = sub_10044A110();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
  v1(v2, v3, v5);
  unint64_t v10 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v10, v2, v5);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_10012E6A4;
  *(void *)(v12 + 24) = v11;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v268;
  swift_errorRetain();
  uint64_t v251 = Logger.logObject.getter();
  os_log_type_t v263 = static os_log_type_t.error.getter();
  uint64_t v14 = swift_allocObject();
  *(unsigned char *)(v14 + 16) = 112;
  uint64_t v15 = swift_allocObject();
  *(unsigned char *)(v15 + 16) = 8;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = 1752392040;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_100134228;
  *(void *)(v17 + 24) = v16;
  uint64_t v269 = swift_allocObject();
  *(unsigned char *)(v269 + 16) = 33;
  uint64_t v18 = swift_allocObject();
  *(unsigned char *)(v18 + 16) = 8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_100134090;
  *(void *)(v19 + 24) = v12;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_1000654EC;
  *(void *)(v20 + 24) = v19;
  uint64_t v21 = swift_allocObject();
  *(unsigned char *)(v21 + 16) = 66;
  uint64_t v22 = swift_allocObject();
  *(unsigned char *)(v22 + 16) = 8;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_1000613DC;
  *(void *)(v23 + 24) = v13;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = sub_1000600D8;
  *(void *)(v24 + 24) = v23;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_1000600E0;
  *(void *)(v25 + 24) = v24;
  sub_10000588C(&qword_101639B60);
  uint64_t v26 = swift_allocObject();
  sub_1004B810C(v26, 9);
  *uint64_t v27 = sub_100065514;
  v27[1] = v14;
  v27[2] = sub_100065514;
  v27[3] = v15;
  v27[4] = sub_100065504;
  v27[5] = v17;
  v27[6] = sub_100065514;
  v27[7] = v269;
  v27[8] = sub_100065514;
  v27[9] = v18;
  v27[10] = sub_100065500;
  v27[11] = v20;
  v27[12] = sub_100065514;
  v27[13] = v21;
  v27[14] = sub_100065514;
  v27[15] = v22;
  v27[16] = sub_1000600E8;
  v27[17] = v25;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v251, v263))
  {
    uint64_t v214 = v21;
    uint64_t v28 = (uint8_t *)sub_1008F9FAC();
    uint64_t v29 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(void *)(v0 + 936) = v29;
    uint64_t v210 = v28;
    *(void *)(v0 + 928) = v30;
    *(_WORD *)uint64_t v28 = 771;
    *(void *)(v0 + 968) = v28 + 2;
    *(void *)(v0 + 600) = sub_100065514;
    *(void *)(v0 + 608) = v14;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 968, v0 + 936, v0 + 928);
    swift_release();
    *(void *)(v0 + 600) = sub_100065514;
    *(void *)(v0 + 608) = v15;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 968, v0 + 936, v0 + 928);
    swift_release();
    *(void *)(v0 + 600) = sub_100065504;
    *(void *)(v0 + 608) = v17;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 968, v0 + 936, v0 + 928);
    swift_release();
    *(void *)(v0 + 600) = sub_100065514;
    *(void *)(v0 + 608) = v269;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 968, v0 + 936, v0 + 928);
    swift_release();
    *(void *)(v0 + 600) = sub_100065514;
    *(void *)(v0 + 608) = v18;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 968, v0 + 936, v0 + 928);
    swift_release();
    *(void *)(v0 + 600) = sub_100065500;
    *(void *)(v0 + 608) = v20;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 968, v0 + 936, v0 + 928);
    swift_release();
    *(void *)(v0 + 600) = sub_100065514;
    *(void *)(v0 + 608) = v214;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 968, v0 + 936, v0 + 928);
    swift_release();
    *(void *)(v0 + 600) = sub_100065514;
    *(void *)(v0 + 608) = v22;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 968, v0 + 936, v0 + 928);
    swift_release();
    *(void *)(v0 + 600) = sub_1000600E8;
    *(void *)(v0 + 608) = v25;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 968, v0 + 936, v0 + 928);
    uint64_t v270 = *(void *)(v0 + 1688);
    uint64_t v31 = *(void *)(v0 + 1664);
    uint64_t v257 = *(void *)(v0 + 1656);
    uint64_t v32 = *(void *)(v0 + 1568);
    uint64_t v33 = *(void *)(v0 + 1560);
    uint64_t v34 = *(void *)(v0 + 1552);
    uint64_t v35 = *(void *)(v0 + 1504);
    uint64_t v231 = *(void *)(v0 + 1480);
    uint64_t v235 = *(void (**)(uint64_t, uint64_t))(v0 + 2336);
    uint64_t v245 = *(void *)(v0 + 1272);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v251, v263, "Beacon: %{private,mask.hash}s is not delegated. Error thrown %{public}@.", v210, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_1008F9FA0();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    v235(v35, v231);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v270, v257);
    uint64_t v36 = v245;
  }
  else
  {
    uint64_t v227 = *(void (**)(uint64_t, uint64_t))(v0 + 2336);
    uint64_t v264 = *(void *)(v0 + 1688);
    uint64_t v37 = *(void *)(v0 + 1664);
    uint64_t v246 = *(void *)(v0 + 1656);
    uint64_t v211 = *(void *)(v0 + 1568);
    uint64_t v38 = *(void *)(v0 + 1560);
    uint64_t v209 = *(void *)(v0 + 1552);
    uint64_t v219 = *(void *)(v0 + 1480);
    uint64_t v223 = *(void *)(v0 + 1504);
    uint64_t v236 = *(void *)(v0 + 1272);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v211, v209);
    v227(v223, v219);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v264, v246);
    uint64_t v36 = v236;
  }
  sub_10012C39C(v36, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v39 = *(void *)(v0 + 2312) + 1;
  if (v39 == *(void *)(v0 + 2288))
  {
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t v40 = *(void *)(v0 + 1856);
    uint64_t v41 = *(void *)(v0 + 1840);
    uint64_t v42 = *(void *)(v0 + 1824);
    uint64_t v43 = (void *)v0;
    uint64_t v44 = *(void *)(v0 + 1664);
    uint64_t v45 = v43[207];
    uint64_t v46 = v43[191];
    uint64_t v47 = v43[190];
    uint64_t v48 = v43[186];
    uint64_t v49 = v43[185];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v46, v40, v49);
    static Date.now.getter();
    Date.timeIntervalSince(_:)();
    uint64_t v51 = v50;
    uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v52(v47, v49);
    uint64_t v265 = v52;
    v52(v46, v49);
    sub_10001D074(v41, v42, &qword_101638CF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v42, 1, v45) == 1)
    {
      sub_10001DAB4(v43[228], &qword_101638CF0);
      uint64_t v53 = v43;
    }
    else
    {
      uint64_t v106 = v43[216];
      unint64_t v107 = v43[210];
      uint64_t v260 = v43[231];
      uint64_t v108 = v43[208];
      uint64_t v109 = v43[207];
      uint64_t v110 = v43[197];
      uint64_t v111 = v43[195];
      uint64_t v112 = v43[194];
      uint64_t v113 = *(void (**)(unint64_t, uint64_t, uint64_t))(v108 + 32);
      v113(v107, v43[228], v109);
      uint64_t v114 = sub_10044A110();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 16))(v110, v114, v112);
      uint64_t v202 = *(void (**)(uint64_t, unint64_t, uint64_t))(v108 + 16);
      v202(v106, v107, v109);
      unint64_t v115 = (*(unsigned __int8 *)(v108 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
      uint64_t v204 = *(unsigned __int8 *)(v108 + 80);
      uint64_t v116 = swift_allocObject();
      uint64_t v207 = v113;
      v113(v116 + v115, v106, v109);
      uint64_t v117 = swift_allocObject();
      *(void *)(v117 + 16) = sub_10012E6A4;
      *(void *)(v117 + 24) = v116;
      uint64_t v118 = swift_allocObject();
      *(void *)(v118 + 16) = sub_10012E77C;
      *(void *)(v118 + 24) = v260;
      uint64_t v119 = swift_allocObject();
      *(void *)(v119 + 16) = v51;
      swift_retain();
      uint64_t v237 = Logger.logObject.getter();
      os_log_type_t v216 = static os_log_type_t.default.getter();
      uint64_t v261 = swift_allocObject();
      *(unsigned char *)(v261 + 16) = 112;
      uint64_t v255 = swift_allocObject();
      *(unsigned char *)(v255 + 16) = 8;
      uint64_t v120 = swift_allocObject();
      *(void *)(v120 + 16) = 1752392040;
      uint64_t v121 = swift_allocObject();
      *(void *)(v121 + 16) = sub_100134228;
      *(void *)(v121 + 24) = v120;
      uint64_t v249 = swift_allocObject();
      *(unsigned char *)(v249 + 16) = 32;
      uint64_t v243 = swift_allocObject();
      *(unsigned char *)(v243 + 16) = 8;
      uint64_t v122 = swift_allocObject();
      *(void *)(v122 + 16) = sub_100134090;
      *(void *)(v122 + 24) = v117;
      uint64_t v123 = swift_allocObject();
      *(void *)(v123 + 16) = sub_1000654EC;
      *(void *)(v123 + 24) = v122;
      uint64_t v124 = v123;
      uint64_t v239 = v123;
      uint64_t v212 = swift_allocObject();
      *(unsigned char *)(v212 + 16) = 34;
      uint64_t v233 = swift_allocObject();
      *(unsigned char *)(v233 + 16) = 8;
      uint64_t v125 = swift_allocObject();
      *(void *)(v125 + 16) = sub_10012E784;
      *(void *)(v125 + 24) = v118;
      uint64_t v126 = swift_allocObject();
      *(void *)(v126 + 16) = sub_1000654EC;
      *(void *)(v126 + 24) = v125;
      uint64_t v127 = v126;
      uint64_t v229 = v126;
      uint64_t v225 = swift_allocObject();
      *(unsigned char *)(v225 + 16) = 0;
      uint64_t v221 = swift_allocObject();
      *(unsigned char *)(v221 + 16) = 8;
      uint64_t v128 = swift_allocObject();
      *(void *)(v128 + 16) = MacBeaconConfig.fastRollAdvertisementInterval.getter;
      *(void *)(v128 + 24) = v119;
      uint64_t v129 = swift_allocObject();
      *(void *)(v129 + 16) = sub_10012E88C;
      *(void *)(v129 + 24) = v128;
      sub_10000588C(&qword_101639B60);
      uint64_t v130 = swift_allocObject();
      sub_1004B810C(v130, 12);
      *uint64_t v131 = sub_100065514;
      v131[1] = v261;
      v131[2] = sub_100065514;
      v131[3] = v255;
      v131[4] = sub_100065504;
      v131[5] = v121;
      v131[6] = sub_100065514;
      v131[7] = v249;
      v131[8] = sub_100065514;
      v131[9] = v243;
      v131[10] = sub_100065500;
      v131[11] = v124;
      v131[12] = sub_100065514;
      v131[13] = v212;
      v131[14] = sub_100065514;
      v131[15] = v233;
      v131[16] = sub_100065500;
      v131[17] = v127;
      v131[18] = sub_100065514;
      v131[19] = v225;
      v131[20] = sub_100065514;
      v131[21] = v221;
      v131[22] = sub_10012E894;
      v131[23] = v129;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v237, v216))
      {
        uint64_t v132 = (uint8_t *)sub_1008F9FAC();
        uint64_t v275 = 0;
        uint64_t v276 = swift_slowAlloc();
        *(_WORD *)uint64_t v132 = 1026;
        v274 = v132 + 2;
        v277 = sub_100065514;
        uint64_t v278 = v261;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
        swift_release();
        v277 = sub_100065514;
        uint64_t v278 = v255;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
        swift_release();
        v277 = (uint64_t (*)())sub_100065504;
        uint64_t v278 = v121;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
        swift_release();
        v277 = sub_100065514;
        uint64_t v278 = v249;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
        swift_release();
        v277 = sub_100065514;
        uint64_t v278 = v243;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
        swift_release();
        v277 = sub_100065500;
        uint64_t v278 = v239;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
        swift_release();
        v277 = sub_100065514;
        uint64_t v278 = v212;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
        swift_release();
        v277 = sub_100065514;
        uint64_t v278 = v233;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
        swift_release();
        v277 = sub_100065500;
        uint64_t v278 = v229;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
        swift_release();
        v277 = sub_100065514;
        uint64_t v278 = v225;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
        swift_release();
        v277 = sub_100065514;
        uint64_t v278 = v221;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
        swift_release();
        v277 = (uint64_t (*)())sub_10012E894;
        uint64_t v278 = v129;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
        uint64_t v195 = v43[197];
        uint64_t v196 = v43;
        uint64_t v197 = v43[195];
        uint64_t v198 = v43[194];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v237, v216, "Will expire next delegation: %{mask.hash}s at %{public}s [in %f seconds]", v132, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v195, v198);
      }
      else
      {
        uint64_t v133 = v43[197];
        uint64_t v134 = v43[195];
        uint64_t v217 = v43[194];

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v133, v217);
        uint64_t v196 = v43;
      }
      uint64_t v135 = v196[142];
      uint64_t v136 = v196[140];
      uint64_t v137 = v196[139];
      uint64_t v138 = v196[138];
      uint64_t v139 = v196[137];
      uint64_t v140 = v196[136];
      uint64_t v240 = v196[134];
      uint64_t v250 = v196[133];
      uint64_t v141 = v196[132];
      uint64_t v142 = v196[127];
      ContinuousClock.init()();
      ContinuousClock.now.getter();
      (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v138, v140);
      static Duration.seconds(_:)();
      ContinuousClock.Instant.advanced(by:)();
      uint64_t v256 = *(NSObject **)(v136 + 8);
      ((void (*)(uint64_t, uint64_t))v256)(v135, v137);
      uint64_t v143 = v142 + OBJC_IVAR____TtC12searchpartyd20BeaconSharingService_pendingExpirationTask;
      swift_beginAccess();
      sub_10001D074(v143, v141, (uint64_t *)&unk_10163B880);
      uint64_t v144 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48);
      if (v144(v141, 1, v250) == 1)
      {
        sub_10001DAB4(v196[132], (uint64_t *)&unk_10163B880);
        uint64_t v53 = v196;
      }
      else
      {
        sub_10012EC2C(v196[132], v196[135], type metadata accessor for BeaconSharingService.PendingExpirationTask);
        sub_10012B44C((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v165 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v166 = v196[135];
        uint64_t v53 = v196;
        if (v165)
        {
          sub_10012C39C(v196[135], type metadata accessor for BeaconSharingService.PendingExpirationTask);
        }
        else
        {
          unint64_t v167 = v196;
          uint64_t v168 = v196[134];
          uint64_t v169 = v196[133];
          uint64_t v170 = v196[131];
          swift_retain();
          sub_10000588C(&qword_101638D40);
          Task.cancel()();
          swift_release();
          sub_10012C39C(v166, type metadata accessor for BeaconSharingService.PendingExpirationTask);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 56))(v170, 1, 1, v169);
          uint64_t v53 = v167;
          swift_beginAccess();
          sub_10012EBC4(v170, v143);
          swift_endAccess();
        }
      }
      uint64_t v171 = v53[133];
      uint64_t v172 = v53[130];
      sub_10001D074(v143, v172, (uint64_t *)&unk_10163B880);
      LODWORD(v171) = v144(v172, 1, v171);
      sub_10001DAB4(v172, (uint64_t *)&unk_10163B880);
      if (v171 == 1)
      {
        uint64_t v226 = v53[231];
        uint64_t v199 = v53[216];
        unint64_t v173 = v53[210];
        uint64_t v222 = v173;
        uint64_t v201 = v53[209];
        uint64_t v174 = v53[207];
        uint64_t v175 = v53[143];
        uint64_t v218 = v175;
        uint64_t v176 = v53[142];
        uint64_t v200 = v53[141];
        uint64_t v177 = v53[140];
        uint64_t v178 = v53[139];
        uint64_t v238 = v53[134];
        uint64_t v241 = v53[133];
        uint64_t v234 = v53[131];
        uint64_t v244 = v53[129];
        uint64_t v179 = v53[128];
        uint64_t v213 = v53[127];
        uint64_t v180 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v180 - 8) + 56))(v179, 1, 1, v180);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v177 + 16))(v176, v175, v178);
        v202(v199, v173, v174);
        uint64_t v230 = v143;
        unint64_t v181 = (*(unsigned __int8 *)(v177 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v177 + 80);
        unint64_t v182 = (v200 + v204 + v181) & ~v204;
        unint64_t v183 = (v201 + v182 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v184 = swift_allocObject();
        *(void *)(v184 + 16) = 0;
        *(void *)(v184 + 24) = 0;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v177 + 32))(v184 + v181, v176, v178);
        v207(v184 + v182, v199, v174);
        *(void *)(v184 + v183) = v226;
        *(void *)(v184 + ((v183 + 15) & 0xFFFFFFFFFFFFFFF8)) = v213;
        swift_retain();
        swift_retain();
        uint64_t v185 = sub_100128234(v179, (uint64_t)&unk_10163B8E8, v184);
        sub_10001DAB4(v179, &qword_10164DBB0);
        ((void (*)(uint64_t, uint64_t))v256)(v218, v178);
        v207(v199, v222, v174);
        sub_100128404(v199, v185, v234);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v238 + 56))(v234, 0, 1, v241);
        sub_10001D608(v234, v244, (uint64_t *)&unk_10163B880);
        swift_beginAccess();
        sub_10012EBC4(v244, v230);
        swift_endAccess();
      }
      else
      {
        uint64_t v186 = v53[210];
        uint64_t v187 = v53;
        uint64_t v188 = v53[208];
        uint64_t v189 = v187[207];
        ((void (*)(void, void))v256)(v187[143], v187[139]);
        (*(void (**)(uint64_t, uint64_t))(v188 + 8))(v186, v189);
        uint64_t v53 = v187;
      }
    }
    uint64_t v190 = v53[230];
    uint64_t v191 = v53[189];
    uint64_t v192 = v53[185];
    sub_100A62490(v53[122]);
    swift_bridgeObjectRelease();
    v265(v191, v192);
    sub_10001DAB4(v190, &qword_101638CF0);
    swift_release();
    uint64_t v193 = v53[101];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v194 = (uint64_t (*)(uint64_t))v53[1];
    return v194(v193);
  }
  else
  {
    uint64_t v206 = v0 + 856;
    uint64_t v208 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 680);
    uint64_t v203 = v0 + 896;
    uint64_t v205 = v0 + 864;
    while (1)
    {
      *(void *)(v0 + 2312) = v39;
      uint64_t v58 = *(void *)(v0 + 1688);
      uint64_t v59 = *(void *)(v0 + 1664);
      uint64_t v60 = *(void *)(v0 + 1656);
      uint64_t v61 = *(void *)(v0 + 1528);
      uint64_t v62 = *(void *)(v0 + 1488);
      uint64_t v63 = *(void *)(v0 + 1480);
      uint64_t v64 = *(void *)(v0 + 1456);
      uint64_t v65 = *(void *)(v0 + 1272);
      uint64_t v66 = *(void *)(v0 + 1248);
      sub_100130CA8(*(void *)(v0 + 2280)+ ((*(unsigned __int8 *)(v0 + 2444) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2444))+ *(void *)(v0 + 2304) * v39, v65, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v67 = v65 + *(int *)(v66 + 24);
      uint64_t v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16);
      *(void *)(v0 + 2320) = v68;
      *(void *)(v0 + 2328) = (v59 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      uint64_t v69 = v60;
      uint64_t v70 = v68;
      v68(v58, v67, v69);
      sub_100127078((void (*)(uint64_t))sub_100B23648);
      sub_100575B34();
      uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
      *(void *)(v0 + 2336) = v71;
      *(void *)(v0 + 2344) = (v62 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v71(v61, v63);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v64, 1, v63) == 1)
      {
        uint64_t v72 = *(void *)(v0 + 1456);
        static Date.distantFuture.getter();
        sub_10001DAB4(v72, (uint64_t *)&unk_10163AC90);
      }
      else
      {
        (*(void (**)(void, void, void))(*(void *)(v0 + 1488) + 32))(*(void *)(v0 + 1504), *(void *)(v0 + 1456), *(void *)(v0 + 1480));
      }
      if ((static Date.> infix(_:_:)() & 1) == 0) {
        break;
      }
      uint64_t v232 = v71;
      uint64_t v73 = *(void *)(v0 + 1584);
      uint64_t v74 = *(void *)(v0 + 1560);
      uint64_t v75 = *(void *)(v0 + 1552);
      v253 = *(NSObject **)(v0 + 1528);
      uint64_t v258 = *(void *)(v0 + 1504);
      uint64_t v76 = *(void *)(v0 + 1488);
      uint64_t v247 = *(void *)(v0 + 1480);
      uint64_t v77 = *(void *)(v0 + 1280);
      uint64_t v78 = *(void *)(v0 + 1272);
      unint64_t v79 = (*(unsigned __int8 *)(v0 + 2444) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2444);
      uint64_t v80 = sub_10044A110();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v73, v80, v75);
      sub_100130CA8(v78, v77, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v81 = swift_allocObject();
      sub_10012EC2C(v77, v81 + v79, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v82 = swift_allocObject();
      *(void *)(v82 + 16) = sub_10012EC98;
      *(void *)(v82 + 24) = v81;
      (*(void (**)(NSObject *, uint64_t, uint64_t))(v76 + 16))(v253, v258, v247);
      unint64_t v83 = (*(unsigned __int8 *)(v76 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
      uint64_t v84 = swift_allocObject();
      (*(void (**)(unint64_t, NSObject *, uint64_t))(v76 + 32))(v84 + v83, v253, v247);
      uint64_t v85 = swift_allocObject();
      *(void *)(v85 + 16) = sub_10012ECDC;
      *(void *)(v85 + 24) = v84;
      uint64_t v259 = Logger.logObject.getter();
      os_log_type_t v254 = static os_log_type_t.default.getter();
      uint64_t v271 = swift_allocObject();
      *(unsigned char *)(v271 + 16) = 112;
      uint64_t v266 = swift_allocObject();
      *(unsigned char *)(v266 + 16) = 8;
      uint64_t v86 = swift_allocObject();
      *(void *)(v86 + 16) = 1752392040;
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = sub_100134228;
      *(void *)(v87 + 24) = v86;
      uint64_t v88 = swift_allocObject();
      *(unsigned char *)(v88 + 16) = 33;
      uint64_t v89 = swift_allocObject();
      *(unsigned char *)(v89 + 16) = 8;
      uint64_t v90 = swift_allocObject();
      *(void *)(v90 + 16) = sub_100134090;
      *(void *)(v90 + 24) = v82;
      uint64_t v91 = swift_allocObject();
      *(void *)(v91 + 16) = sub_1000654EC;
      *(void *)(v91 + 24) = v90;
      uint64_t v92 = swift_allocObject();
      *(unsigned char *)(v92 + 16) = 34;
      uint64_t v93 = swift_allocObject();
      *(unsigned char *)(v93 + 16) = 8;
      uint64_t v94 = swift_allocObject();
      *(void *)(v94 + 16) = sub_100134094;
      *(void *)(v94 + 24) = v85;
      uint64_t v95 = swift_allocObject();
      *(void *)(v95 + 16) = sub_1000654EC;
      *(void *)(v95 + 24) = v94;
      sub_10000588C(&qword_101639B60);
      uint64_t v96 = swift_allocObject();
      sub_1004B810C(v96, 9);
      *uint64_t v97 = sub_100065514;
      v97[1] = v271;
      v97[2] = sub_100065514;
      v97[3] = v266;
      v97[4] = sub_100065504;
      v97[5] = v87;
      v97[6] = sub_100065514;
      v97[7] = v88;
      v97[8] = sub_100065514;
      v97[9] = v89;
      v97[10] = sub_100065500;
      v97[11] = v91;
      v97[12] = sub_100065514;
      v97[13] = v92;
      v97[14] = sub_100065514;
      v97[15] = v93;
      v97[16] = sub_100065500;
      v97[17] = v95;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v259, v254))
      {
        uint64_t v98 = (uint8_t *)sub_1008F9FAC();
        uint64_t v99 = swift_slowAlloc();
        *(void *)(v0 + 864) = 0;
        *(void *)(v0 + 856) = v99;
        *(_WORD *)uint64_t v98 = 771;
        *(void *)(v0 + 896) = v98 + 2;
        *(void *)(v0 + 680) = sub_100065514;
        *(void *)(v0 + 688) = v271;
        sub_1008F9FB4(v208, v203, v205, v206);
        swift_release();
        *(void *)(v0 + 680) = sub_100065514;
        *(void *)(v0 + 688) = v266;
        sub_1008F9FB4(v208, v203, v205, v206);
        swift_release();
        *(void *)(v0 + 680) = sub_100065504;
        *(void *)(v0 + 688) = v87;
        sub_1008F9FB4(v208, v203, v205, v206);
        swift_release();
        *(void *)(v0 + 680) = sub_100065514;
        *(void *)(v0 + 688) = v88;
        sub_1008F9FB4(v208, v203, v205, v206);
        swift_release();
        *(void *)(v0 + 680) = sub_100065514;
        *(void *)(v0 + 688) = v89;
        sub_1008F9FB4(v208, v203, v205, v206);
        swift_release();
        *(void *)(v0 + 680) = sub_100065500;
        *(void *)(v0 + 688) = v91;
        sub_1008F9FB4(v208, v203, v205, v206);
        swift_release();
        *(void *)(v0 + 680) = sub_100065514;
        *(void *)(v0 + 688) = v92;
        sub_1008F9FB4(v208, v203, v205, v206);
        swift_release();
        *(void *)(v0 + 680) = sub_100065514;
        *(void *)(v0 + 688) = v93;
        sub_1008F9FB4(v208, v203, v205, v206);
        swift_release();
        *(void *)(v0 + 680) = sub_100065500;
        *(void *)(v0 + 688) = v95;
        sub_1008F9FB4(v208, v203, v205, v206);
        uint64_t v100 = *(void *)(v0 + 1664);
        uint64_t v267 = *(void *)(v0 + 1656);
        uint64_t v272 = *(void *)(v0 + 1688);
        uint64_t v101 = *(void *)(v0 + 1584);
        uint64_t v102 = *(void *)(v0 + 1560);
        uint64_t v103 = *(void *)(v0 + 1552);
        uint64_t v104 = *(void *)(v0 + 1504);
        uint64_t v105 = *(void *)(v0 + 1480);
        uint64_t v248 = *(void *)(v0 + 1272);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v259, v254, "Ignoring expired share: %{private,mask.hash}s Expired: %{public}s", v98, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v101, v103);
        v232(v104, v105);
        (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v272, v267);
        uint64_t v57 = v248;
      }
      else
      {
        uint64_t v54 = *(void *)(v0 + 1688);
        uint64_t v55 = *(void *)(v0 + 1664);
        uint64_t v252 = *(NSObject **)(v0 + 1656);
        uint64_t v56 = *(void *)(v0 + 1560);
        uint64_t v215 = *(void *)(v0 + 1552);
        uint64_t v220 = *(void *)(v0 + 1584);
        uint64_t v224 = *(void *)(v0 + 1480);
        uint64_t v228 = *(void *)(v0 + 1504);
        uint64_t v242 = *(void *)(v0 + 1272);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v220, v215);
        v232(v228, v224);
        (*(void (**)(uint64_t, NSObject *))(v55 + 8))(v54, v252);
        uint64_t v57 = v242;
      }
      sub_10012C39C(v57, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v39 = *(void *)(v0 + 2312) + 1;
      if (v39 == *(void *)(v0 + 2288)) {
        goto LABEL_5;
      }
    }
    uint64_t v145 = *(void *)(v0 + 1856);
    uint64_t v146 = *(void *)(v0 + 1528);
    uint64_t v147 = *(void *)(v0 + 1488);
    uint64_t v148 = *(void *)(v0 + 1480);
    Date.timeIntervalSince(_:)();
    char v149 = *(void (**)(uint64_t, uint64_t, uint64_t))(v147 + 16);
    *(void *)(v0 + 2352) = v149;
    *(void *)(v0 + 2360) = (v147 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v149(v146, v145, v148);
    char v150 = static Date.< infix(_:_:)();
    v71(v146, v148);
    if (v150)
    {
      uint64_t v151 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1864);
      uint64_t v273 = *(void *)(v0 + 1856);
      uint64_t v152 = *(void *)(v0 + 1840);
      uint64_t v153 = *(void *)(v0 + 1656);
      uint64_t v262 = *(void *)(v0 + 1504);
      uint64_t v154 = *(void *)(v0 + 1488);
      uint64_t v155 = *(void *)(v0 + 1480);
      uint64_t v156 = *(void *)(v0 + 1272);
      uint64_t v157 = *(void *)(v0 + 1248);
      sub_10001DAB4(v152, &qword_101638CF0);
      v70(v152, v156 + *(int *)(v157 + 20), v153);
      v151(v152, 0, 1, v153);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v154 + 24))(v273, v262, v155);
    }
    uint64_t v158 = *(void *)(v0 + 1728);
    uint64_t v159 = *(void *)(v0 + 1688);
    uint64_t v160 = *(void *)(v0 + 1656);
    sub_10001D4B0(0, &qword_10163B8D0);
    v70(v158, v159, v160);
    id v161 = sub_100127724(v158);
    *(void *)(v0 + 2368) = v161;
    uint64_t v162 = (void *)swift_task_alloc();
    *(void *)(v0 + 2376) = v162;
    *uint64_t v162 = v0;
    v162[1] = sub_10011CA50;
    uint64_t v163 = *(void *)(v0 + 1184);
    return sub_1000FAA48(v163, (uint64_t)v161);
  }
}

uint64_t sub_100124960()
{
  uint64_t v245 = v0;
  swift_release();
  uint64_t v197 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2352);
  uint64_t v226 = *(void (**)(uint64_t, uint64_t))(v0 + 2336);
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2320);
  uint64_t v2 = *(void *)(v0 + 1728);
  uint64_t v3 = *(void *)(v0 + 1712);
  uint64_t v4 = *(void *)(v0 + 1704);
  uint64_t v176 = *(void *)(v0 + 1696);
  uint64_t v5 = *(void *)(v0 + 1688);
  uint64_t v220 = *(void *)(v0 + 1664);
  uint64_t v6 = *(void *)(v0 + 1656);
  uint64_t v182 = *(void *)(v0 + 1528);
  uint64_t v190 = *(void *)(v0 + 1504);
  uint64_t v184 = *(void *)(v0 + 1520);
  uint64_t v187 = *(void *)(v0 + 1480);
  uint64_t v7 = *(void *)(v0 + 1272);
  uint64_t v8 = *(void *)(v0 + 1248);
  uint64_t v236 = *(void *)(v0 + 1192);
  uint64_t v207 = *(void *)(v0 + 1176);
  uint64_t v212 = *(void *)(v0 + 1168);
  sub_10001D4B0(0, &qword_10163B870);
  uint64_t v9 = v7 + *(int *)(v8 + 20);
  v1(v2, v9, v6);
  v1(v3, v5, v6);
  v1(v4, v9, v6);
  UUID.init()();
  unint64_t v10 = sub_1002A71AC();
  uint64_t v11 = (void *)sub_100ECF4F0(*v10, *((void *)v10 + 1), *((void **)v10 + 2));
  sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
  URL.absoluteString.getter();
  id v12 = sub_1001277C0();
  sub_100127078((void (*)(uint64_t))sub_100B23648);
  v197(v184, v190, v187);
  id v13 = sub_10012BEDC(v2, v3, v4, v176, (uint64_t)v11, (uint64_t)v12, 5, v182, v184, 0, 1);

  sub_100DCB5BC(&v243, v13);
  (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v236, v212);
  v226(v190, v187);
  (*(void (**)(uint64_t, uint64_t))(v220 + 8))(v5, v6);
  sub_10012C39C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v14 = *(void *)(v0 + 2312) + 1;
  if (v14 == *(void *)(v0 + 2288))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void *)(v0 + 1840);
    uint64_t v16 = *(void *)(v0 + 1824);
    uint64_t v17 = *(void *)(v0 + 1664);
    uint64_t v18 = *(void *)(v0 + 1656);
    uint64_t v19 = *(void *)(v0 + 1528);
    uint64_t v20 = *(void *)(v0 + 1520);
    uint64_t v21 = *(void *)(v0 + 1488);
    uint64_t v22 = *(void *)(v0 + 1480);
    (*(void (**)(uint64_t, void, uint64_t))(v21 + 16))(v19, *(void *)(v0 + 1856), v22);
    static Date.now.getter();
    Date.timeIntervalSince(_:)();
    uint64_t v24 = v23;
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v25(v20, v22);
    uint64_t v233 = v25;
    v25(v19, v22);
    sub_10001D074(v15, v16, &qword_101638CF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v16, 1, v18) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 1824), &qword_101638CF0);
    }
    else
    {
      uint64_t v78 = *(void *)(v0 + 1728);
      unint64_t v79 = *(void *)(v0 + 1680);
      uint64_t v80 = *(void *)(v0 + 1664);
      uint64_t v81 = *(void *)(v0 + 1656);
      uint64_t v82 = *(void *)(v0 + 1576);
      uint64_t v229 = *(void *)(v0 + 1848);
      uint64_t v83 = *(void *)(v0 + 1560);
      uint64_t v84 = *(void *)(v0 + 1552);
      uint64_t v85 = *(void (**)(unint64_t, uint64_t, uint64_t))(v80 + 32);
      v85(v79, *(void *)(v0 + 1824), v81);
      uint64_t v86 = sub_10044A110();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v82, v86, v84);
      uint64_t v175 = *(void (**)(uint64_t, unint64_t, uint64_t))(v80 + 16);
      v175(v78, v79, v81);
      unint64_t v87 = (*(unsigned __int8 *)(v80 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
      uint64_t v177 = *(unsigned __int8 *)(v80 + 80);
      uint64_t v88 = swift_allocObject();
      uint64_t v180 = v85;
      v85(v88 + v87, v78, v81);
      uint64_t v89 = swift_allocObject();
      *(void *)(v89 + 16) = sub_10012E6A4;
      *(void *)(v89 + 24) = v88;
      uint64_t v90 = swift_allocObject();
      *(void *)(v90 + 16) = sub_10012E77C;
      *(void *)(v90 + 24) = v229;
      uint64_t v91 = swift_allocObject();
      *(void *)(v91 + 16) = v24;
      swift_retain();
      uint64_t v214 = Logger.logObject.getter();
      os_log_type_t v192 = static os_log_type_t.default.getter();
      uint64_t v230 = swift_allocObject();
      *(unsigned char *)(v230 + 16) = 112;
      uint64_t v224 = swift_allocObject();
      *(unsigned char *)(v224 + 16) = 8;
      uint64_t v92 = swift_allocObject();
      *(void *)(v92 + 16) = 1752392040;
      uint64_t v93 = swift_allocObject();
      *(void *)(v93 + 16) = sub_100134228;
      *(void *)(v93 + 24) = v92;
      uint64_t v218 = swift_allocObject();
      *(unsigned char *)(v218 + 16) = 32;
      uint64_t v210 = swift_allocObject();
      *(unsigned char *)(v210 + 16) = 8;
      uint64_t v94 = swift_allocObject();
      *(void *)(v94 + 16) = sub_100134090;
      *(void *)(v94 + 24) = v89;
      uint64_t v95 = swift_allocObject();
      *(void *)(v95 + 16) = sub_1000654EC;
      *(void *)(v95 + 24) = v94;
      uint64_t v96 = v95;
      uint64_t v208 = v95;
      uint64_t v188 = swift_allocObject();
      *(unsigned char *)(v188 + 16) = 34;
      uint64_t v205 = swift_allocObject();
      *(unsigned char *)(v205 + 16) = 8;
      uint64_t v97 = swift_allocObject();
      *(void *)(v97 + 16) = sub_10012E784;
      *(void *)(v97 + 24) = v90;
      uint64_t v98 = swift_allocObject();
      *(void *)(v98 + 16) = sub_1000654EC;
      *(void *)(v98 + 24) = v97;
      uint64_t v99 = v98;
      uint64_t v202 = v98;
      uint64_t v199 = swift_allocObject();
      *(unsigned char *)(v199 + 16) = 0;
      uint64_t v196 = swift_allocObject();
      *(unsigned char *)(v196 + 16) = 8;
      uint64_t v100 = swift_allocObject();
      *(void *)(v100 + 16) = MacBeaconConfig.fastRollAdvertisementInterval.getter;
      *(void *)(v100 + 24) = v91;
      uint64_t v101 = swift_allocObject();
      *(void *)(v101 + 16) = sub_10012E88C;
      *(void *)(v101 + 24) = v100;
      sub_10000588C(&qword_101639B60);
      uint64_t v102 = swift_allocObject();
      sub_1004B810C(v102, 12);
      *uint64_t v103 = sub_100065514;
      v103[1] = v230;
      v103[2] = sub_100065514;
      v103[3] = v224;
      v103[4] = sub_100065504;
      v103[5] = v93;
      v103[6] = sub_100065514;
      v103[7] = v218;
      v103[8] = sub_100065514;
      v103[9] = v210;
      v103[10] = sub_100065500;
      v103[11] = v96;
      v103[12] = sub_100065514;
      v103[13] = v188;
      v103[14] = sub_100065514;
      v103[15] = v205;
      v103[16] = sub_100065500;
      v103[17] = v99;
      v103[18] = sub_100065514;
      v103[19] = v199;
      v103[20] = sub_100065514;
      v103[21] = v196;
      v103[22] = sub_10012E894;
      v103[23] = v101;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v214, v192))
      {
        uint64_t v104 = (uint8_t *)sub_1008F9FAC();
        uint64_t v241 = 0;
        uint64_t v242 = swift_slowAlloc();
        *(_WORD *)uint64_t v104 = 1026;
        uint64_t v240 = v104 + 2;
        uint64_t v243 = sub_100065514;
        uint64_t v244 = v230;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v243, (uint64_t)&v240, (uint64_t)&v241, (uint64_t)&v242);
        swift_release();
        uint64_t v243 = sub_100065514;
        uint64_t v244 = v224;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v243, (uint64_t)&v240, (uint64_t)&v241, (uint64_t)&v242);
        swift_release();
        uint64_t v243 = (uint64_t (*)())sub_100065504;
        uint64_t v244 = v93;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v243, (uint64_t)&v240, (uint64_t)&v241, (uint64_t)&v242);
        swift_release();
        uint64_t v243 = sub_100065514;
        uint64_t v244 = v218;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v243, (uint64_t)&v240, (uint64_t)&v241, (uint64_t)&v242);
        swift_release();
        uint64_t v243 = sub_100065514;
        uint64_t v244 = v210;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v243, (uint64_t)&v240, (uint64_t)&v241, (uint64_t)&v242);
        swift_release();
        uint64_t v243 = sub_100065500;
        uint64_t v244 = v208;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v243, (uint64_t)&v240, (uint64_t)&v241, (uint64_t)&v242);
        swift_release();
        uint64_t v243 = sub_100065514;
        uint64_t v244 = v188;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v243, (uint64_t)&v240, (uint64_t)&v241, (uint64_t)&v242);
        swift_release();
        uint64_t v243 = sub_100065514;
        uint64_t v244 = v205;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v243, (uint64_t)&v240, (uint64_t)&v241, (uint64_t)&v242);
        swift_release();
        uint64_t v243 = sub_100065500;
        uint64_t v244 = v202;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v243, (uint64_t)&v240, (uint64_t)&v241, (uint64_t)&v242);
        swift_release();
        uint64_t v243 = sub_100065514;
        uint64_t v244 = v199;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v243, (uint64_t)&v240, (uint64_t)&v241, (uint64_t)&v242);
        swift_release();
        uint64_t v243 = sub_100065514;
        uint64_t v244 = v196;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v243, (uint64_t)&v240, (uint64_t)&v241, (uint64_t)&v242);
        swift_release();
        uint64_t v243 = (uint64_t (*)())sub_10012E894;
        uint64_t v244 = v101;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v243, (uint64_t)&v240, (uint64_t)&v241, (uint64_t)&v242);
        uint64_t v168 = *(void *)(v0 + 1576);
        uint64_t v169 = *(void *)(v0 + 1560);
        uint64_t v170 = *(void *)(v0 + 1552);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v214, v192, "Will expire next delegation: %{mask.hash}s at %{public}s [in %f seconds]", v104, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v168, v170);
      }
      else
      {
        uint64_t v193 = *(void *)(v0 + 1576);
        uint64_t v105 = *(void *)(v0 + 1560);
        uint64_t v185 = *(void *)(v0 + 1552);

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v193, v185);
      }
      uint64_t v106 = *(void *)(v0 + 1136);
      uint64_t v107 = *(void *)(v0 + 1120);
      uint64_t v231 = *(void *)(v0 + 1112);
      uint64_t v108 = *(void *)(v0 + 1104);
      uint64_t v109 = *(void *)(v0 + 1096);
      uint64_t v110 = *(void *)(v0 + 1088);
      uint64_t v111 = *(void *)(v0 + 1072);
      uint64_t v225 = *(void *)(v0 + 1064);
      uint64_t v112 = *(void *)(v0 + 1056);
      uint64_t v113 = *(void *)(v0 + 1016);
      ContinuousClock.init()();
      ContinuousClock.now.getter();
      (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v108, v110);
      static Duration.seconds(_:)();
      ContinuousClock.Instant.advanced(by:)();
      uint64_t v114 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
      v114(v106, v231);
      uint64_t v115 = v113 + OBJC_IVAR____TtC12searchpartyd20BeaconSharingService_pendingExpirationTask;
      swift_beginAccess();
      sub_10001D074(v115, v112, (uint64_t *)&unk_10163B880);
      uint64_t v116 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48);
      if (v116(v112, 1, v225) == 1)
      {
        sub_10001DAB4(*(void *)(v0 + 1056), (uint64_t *)&unk_10163B880);
      }
      else
      {
        sub_10012EC2C(*(void *)(v0 + 1056), *(void *)(v0 + 1080), type metadata accessor for BeaconSharingService.PendingExpirationTask);
        sub_10012B44C((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v137 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v138 = *(void *)(v0 + 1080);
        if (v137)
        {
          sub_10012C39C(*(void *)(v0 + 1080), type metadata accessor for BeaconSharingService.PendingExpirationTask);
        }
        else
        {
          uint64_t v139 = *(void *)(v0 + 1072);
          uint64_t v140 = *(void *)(v0 + 1064);
          uint64_t v141 = *(void *)(v0 + 1048);
          swift_retain();
          sub_10000588C(&qword_101638D40);
          Task.cancel()();
          swift_release();
          sub_10012C39C(v138, type metadata accessor for BeaconSharingService.PendingExpirationTask);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56))(v141, 1, 1, v140);
          swift_beginAccess();
          sub_10012EBC4(v141, v115);
          swift_endAccess();
        }
      }
      uint64_t v142 = *(void *)(v0 + 1064);
      uint64_t v143 = *(void *)(v0 + 1040);
      sub_10001D074(v115, v143, (uint64_t *)&unk_10163B880);
      LODWORD(v142) = v116(v143, 1, v142);
      sub_10001DAB4(v143, (uint64_t *)&unk_10163B880);
      if (v142 == 1)
      {
        uint64_t v219 = v115;
        uint64_t v200 = *(void *)(v0 + 1848);
        uint64_t v144 = *(void *)(v0 + 1728);
        uint64_t v145 = *(void *)(v0 + 1680);
        uint64_t v186 = *(void *)(v0 + 1672);
        uint64_t v146 = *(void *)(v0 + 1656);
        uint64_t v172 = v146;
        uint64_t v147 = *(void *)(v0 + 1144);
        uint64_t v194 = v147;
        uint64_t v203 = v114;
        uint64_t v148 = *(void *)(v0 + 1136);
        uint64_t v173 = v148;
        uint64_t v174 = *(void *)(v0 + 1128);
        uint64_t v149 = *(void *)(v0 + 1120);
        uint64_t v150 = *(void *)(v0 + 1112);
        uint64_t v209 = *(void *)(v0 + 1072);
        uint64_t v211 = *(void *)(v0 + 1064);
        uint64_t v206 = *(void *)(v0 + 1048);
        uint64_t v215 = *(void *)(v0 + 1032);
        uint64_t v151 = *(void *)(v0 + 1024);
        uint64_t v189 = *(void *)(v0 + 1016);
        uint64_t v152 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v152 - 8) + 56))(v151, 1, 1, v152);
        uint64_t v153 = v148;
        uint64_t v154 = v150;
        uint64_t v171 = v150;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v149 + 16))(v153, v147, v150);
        v175(v144, v145, v146);
        unint64_t v155 = (*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80);
        unint64_t v156 = (v174 + v177 + v155) & ~v177;
        unint64_t v157 = (v186 + v156 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v158 = swift_allocObject();
        *(void *)(v158 + 16) = 0;
        *(void *)(v158 + 24) = 0;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v149 + 32))(v158 + v155, v173, v154);
        v180(v158 + v156, v144, v172);
        *(void *)(v158 + v157) = v200;
        *(void *)(v158 + ((v157 + 15) & 0xFFFFFFFFFFFFFFF8)) = v189;
        swift_retain();
        swift_retain();
        uint64_t v159 = sub_100128234(v151, (uint64_t)&unk_10163B8E8, v158);
        sub_10001DAB4(v151, &qword_10164DBB0);
        v203(v194, v171);
        v180(v144, v145, v172);
        sub_100128404(v144, v159, v206);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v209 + 56))(v206, 0, 1, v211);
        sub_10001D608(v206, v215, (uint64_t *)&unk_10163B880);
        swift_beginAccess();
        sub_10012EBC4(v215, v219);
        swift_endAccess();
      }
      else
      {
        uint64_t v160 = *(void *)(v0 + 1680);
        uint64_t v161 = *(void *)(v0 + 1664);
        uint64_t v162 = *(void *)(v0 + 1656);
        v114(*(void *)(v0 + 1144), *(void *)(v0 + 1112));
        (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v160, v162);
      }
    }
    uint64_t v163 = *(void *)(v0 + 1840);
    uint64_t v164 = *(void *)(v0 + 1512);
    uint64_t v165 = *(void *)(v0 + 1480);
    sub_100A62490(*(void *)(v0 + 976));
    swift_bridgeObjectRelease();
    v233(v164, v165);
    sub_10001DAB4(v163, &qword_101638CF0);
    swift_release();
    uint64_t v166 = *(void *)(v0 + 808);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v167 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v167(v166);
  }
  else
  {
    uint64_t v181 = v0 + 856;
    unint64_t v183 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 680);
    uint64_t v178 = v0 + 896;
    uint64_t v179 = v0 + 864;
    while (1)
    {
      *(void *)(v0 + 2312) = v14;
      uint64_t v30 = *(void *)(v0 + 1688);
      uint64_t v31 = *(void *)(v0 + 1664);
      uint64_t v32 = *(void *)(v0 + 1656);
      uint64_t v33 = *(void *)(v0 + 1528);
      uint64_t v34 = *(void *)(v0 + 1488);
      uint64_t v35 = *(void *)(v0 + 1480);
      uint64_t v36 = *(void *)(v0 + 1456);
      uint64_t v37 = *(void *)(v0 + 1272);
      uint64_t v38 = *(void *)(v0 + 1248);
      sub_100130CA8(*(void *)(v0 + 2280)+ ((*(unsigned __int8 *)(v0 + 2444) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2444))+ *(void *)(v0 + 2304) * v14, v37, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v39 = v37 + *(int *)(v38 + 24);
      uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16);
      *(void *)(v0 + 2320) = v40;
      *(void *)(v0 + 2328) = (v31 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      uint64_t v41 = v32;
      uint64_t v42 = v40;
      v40(v30, v39, v41);
      sub_100127078((void (*)(uint64_t))sub_100B23648);
      sub_100575B34();
      uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
      *(void *)(v0 + 2336) = v43;
      *(void *)(v0 + 2344) = (v34 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v43(v33, v35);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v36, 1, v35) == 1)
      {
        uint64_t v44 = *(void *)(v0 + 1456);
        static Date.distantFuture.getter();
        sub_10001DAB4(v44, (uint64_t *)&unk_10163AC90);
      }
      else
      {
        (*(void (**)(void, void, void))(*(void *)(v0 + 1488) + 32))(*(void *)(v0 + 1504), *(void *)(v0 + 1456), *(void *)(v0 + 1480));
      }
      if ((static Date.> infix(_:_:)() & 1) == 0) {
        break;
      }
      uint64_t v204 = v43;
      uint64_t v45 = *(void *)(v0 + 1584);
      uint64_t v46 = *(void *)(v0 + 1560);
      uint64_t v47 = *(void *)(v0 + 1552);
      uint64_t v222 = *(void *)(v0 + 1528);
      uint64_t v227 = *(void *)(v0 + 1504);
      uint64_t v48 = *(void *)(v0 + 1488);
      uint64_t v216 = *(void *)(v0 + 1480);
      uint64_t v49 = *(void *)(v0 + 1280);
      uint64_t v50 = *(void *)(v0 + 1272);
      unint64_t v51 = (*(unsigned __int8 *)(v0 + 2444) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2444);
      uint64_t v52 = sub_10044A110();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v45, v52, v47);
      sub_100130CA8(v50, v49, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v53 = swift_allocObject();
      sub_10012EC2C(v49, v53 + v51, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v54 = swift_allocObject();
      *(void *)(v54 + 16) = sub_10012EC98;
      *(void *)(v54 + 24) = v53;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v222, v227, v216);
      unint64_t v55 = (*(unsigned __int8 *)(v48 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
      uint64_t v56 = swift_allocObject();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v48 + 32))(v56 + v55, v222, v216);
      uint64_t v57 = swift_allocObject();
      *(void *)(v57 + 16) = sub_10012ECDC;
      *(void *)(v57 + 24) = v56;
      uint64_t v228 = Logger.logObject.getter();
      os_log_type_t v223 = static os_log_type_t.default.getter();
      uint64_t v237 = swift_allocObject();
      *(unsigned char *)(v237 + 16) = 112;
      uint64_t v234 = swift_allocObject();
      *(unsigned char *)(v234 + 16) = 8;
      uint64_t v58 = swift_allocObject();
      *(void *)(v58 + 16) = 1752392040;
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = sub_100134228;
      *(void *)(v59 + 24) = v58;
      uint64_t v60 = swift_allocObject();
      *(unsigned char *)(v60 + 16) = 33;
      uint64_t v61 = swift_allocObject();
      *(unsigned char *)(v61 + 16) = 8;
      uint64_t v62 = swift_allocObject();
      *(void *)(v62 + 16) = sub_100134090;
      *(void *)(v62 + 24) = v54;
      uint64_t v63 = swift_allocObject();
      *(void *)(v63 + 16) = sub_1000654EC;
      *(void *)(v63 + 24) = v62;
      uint64_t v64 = swift_allocObject();
      *(unsigned char *)(v64 + 16) = 34;
      uint64_t v65 = swift_allocObject();
      *(unsigned char *)(v65 + 16) = 8;
      uint64_t v66 = swift_allocObject();
      *(void *)(v66 + 16) = sub_100134094;
      *(void *)(v66 + 24) = v57;
      uint64_t v67 = swift_allocObject();
      *(void *)(v67 + 16) = sub_1000654EC;
      *(void *)(v67 + 24) = v66;
      sub_10000588C(&qword_101639B60);
      uint64_t v68 = swift_allocObject();
      sub_1004B810C(v68, 9);
      void *v69 = sub_100065514;
      v69[1] = v237;
      v69[2] = sub_100065514;
      v69[3] = v234;
      v69[4] = sub_100065504;
      v69[5] = v59;
      v69[6] = sub_100065514;
      v69[7] = v60;
      v69[8] = sub_100065514;
      v69[9] = v61;
      v69[10] = sub_100065500;
      v69[11] = v63;
      v69[12] = sub_100065514;
      v69[13] = v64;
      v69[14] = sub_100065514;
      v69[15] = v65;
      v69[16] = sub_100065500;
      v69[17] = v67;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v228, v223))
      {
        uint64_t v70 = (uint8_t *)sub_1008F9FAC();
        uint64_t v71 = swift_slowAlloc();
        *(void *)(v0 + 864) = 0;
        *(void *)(v0 + 856) = v71;
        *(_WORD *)uint64_t v70 = 771;
        *(void *)(v0 + 896) = v70 + 2;
        *(void *)(v0 + 680) = sub_100065514;
        *(void *)(v0 + 688) = v237;
        sub_1008F9FB4(v183, v178, v179, v181);
        swift_release();
        *(void *)(v0 + 680) = sub_100065514;
        *(void *)(v0 + 688) = v234;
        sub_1008F9FB4(v183, v178, v179, v181);
        swift_release();
        *(void *)(v0 + 680) = sub_100065504;
        *(void *)(v0 + 688) = v59;
        sub_1008F9FB4(v183, v178, v179, v181);
        swift_release();
        *(void *)(v0 + 680) = sub_100065514;
        *(void *)(v0 + 688) = v60;
        sub_1008F9FB4(v183, v178, v179, v181);
        swift_release();
        *(void *)(v0 + 680) = sub_100065514;
        *(void *)(v0 + 688) = v61;
        sub_1008F9FB4(v183, v178, v179, v181);
        swift_release();
        *(void *)(v0 + 680) = sub_100065500;
        *(void *)(v0 + 688) = v63;
        sub_1008F9FB4(v183, v178, v179, v181);
        swift_release();
        *(void *)(v0 + 680) = sub_100065514;
        *(void *)(v0 + 688) = v64;
        sub_1008F9FB4(v183, v178, v179, v181);
        swift_release();
        *(void *)(v0 + 680) = sub_100065514;
        *(void *)(v0 + 688) = v65;
        sub_1008F9FB4(v183, v178, v179, v181);
        swift_release();
        *(void *)(v0 + 680) = sub_100065500;
        *(void *)(v0 + 688) = v67;
        sub_1008F9FB4(v183, v178, v179, v181);
        uint64_t v72 = *(void *)(v0 + 1664);
        uint64_t v235 = *(void *)(v0 + 1656);
        uint64_t v238 = *(void *)(v0 + 1688);
        uint64_t v73 = *(void *)(v0 + 1584);
        uint64_t v74 = *(void *)(v0 + 1560);
        uint64_t v75 = *(void *)(v0 + 1552);
        uint64_t v76 = *(void *)(v0 + 1504);
        uint64_t v77 = *(void *)(v0 + 1480);
        uint64_t v217 = *(void *)(v0 + 1272);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v228, v223, "Ignoring expired share: %{private,mask.hash}s Expired: %{public}s", v70, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
        v204(v76, v77);
        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v238, v235);
        uint64_t v29 = v217;
      }
      else
      {
        uint64_t v26 = *(void *)(v0 + 1688);
        uint64_t v27 = *(void *)(v0 + 1664);
        uint64_t v221 = *(void *)(v0 + 1656);
        uint64_t v28 = *(void *)(v0 + 1560);
        uint64_t v191 = *(void *)(v0 + 1552);
        uint64_t v195 = *(void *)(v0 + 1584);
        uint64_t v198 = *(void *)(v0 + 1480);
        uint64_t v201 = *(void *)(v0 + 1504);
        uint64_t v213 = *(void *)(v0 + 1272);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v195, v191);
        v204(v201, v198);
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v221);
        uint64_t v29 = v213;
      }
      sub_10012C39C(v29, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v14 = *(void *)(v0 + 2312) + 1;
      if (v14 == *(void *)(v0 + 2288)) {
        goto LABEL_2;
      }
    }
    uint64_t v117 = *(void *)(v0 + 1856);
    uint64_t v118 = *(void *)(v0 + 1528);
    uint64_t v119 = *(void *)(v0 + 1488);
    uint64_t v120 = *(void *)(v0 + 1480);
    Date.timeIntervalSince(_:)();
    uint64_t v121 = *(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 16);
    *(void *)(v0 + 2352) = v121;
    *(void *)(v0 + 2360) = (v119 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v121(v118, v117, v120);
    char v122 = static Date.< infix(_:_:)();
    v43(v118, v120);
    if (v122)
    {
      uint64_t v123 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1864);
      uint64_t v239 = *(void *)(v0 + 1856);
      uint64_t v124 = *(void *)(v0 + 1840);
      uint64_t v125 = *(void *)(v0 + 1656);
      uint64_t v232 = *(void *)(v0 + 1504);
      uint64_t v126 = *(void *)(v0 + 1488);
      uint64_t v127 = *(void *)(v0 + 1480);
      uint64_t v128 = *(void *)(v0 + 1272);
      uint64_t v129 = *(void *)(v0 + 1248);
      sub_10001DAB4(v124, &qword_101638CF0);
      v42(v124, v128 + *(int *)(v129 + 20), v125);
      v123(v124, 0, 1, v125);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 24))(v239, v232, v127);
    }
    uint64_t v130 = *(void *)(v0 + 1728);
    uint64_t v131 = *(void *)(v0 + 1688);
    uint64_t v132 = *(void *)(v0 + 1656);
    sub_10001D4B0(0, &qword_10163B8D0);
    v42(v130, v131, v132);
    id v133 = sub_100127724(v130);
    *(void *)(v0 + 2368) = v133;
    uint64_t v134 = (void *)swift_task_alloc();
    *(void *)(v0 + 2376) = v134;
    *uint64_t v134 = v0;
    v134[1] = sub_10011CA50;
    uint64_t v135 = *(void *)(v0 + 1184);
    return sub_1000FAA48(v135, (uint64_t)v133);
  }
}

BOOL sub_100126CB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = type metadata accessor for MemberSharingCircle();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = (unsigned __int8 *)(a1
                         + *(int *)(v3 + 40)
                         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
  uint64_t v7 = v1 - 1;
  do
  {
    int v8 = *v6;
    BOOL result = v8 != 4;
    BOOL v10 = v8 != 4 || v7-- == 0;
    v6 += v5;
  }
  while (!v10);
  return result;
}

uint64_t sub_100126D78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for MemberSharingCircle() + 24);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, v3, v4);
}

uint64_t sub_100126DF4()
{
  type metadata accessor for MemberSharingCircle();
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = sub_10070FB1C(v1);
  swift_bridgeObjectRelease();
  uint64_t v6 = v0;
  uint64_t v3 = sub_1000D1394((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_10012F3D8, (uint64_t)&v5, v2);
  swift_release();
  return v3;
}

uint64_t sub_100126E88()
{
  type metadata accessor for OwnerSharingCircle();
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = sub_10070FB1C(v1);
  swift_bridgeObjectRelease();
  uint64_t v6 = v0;
  uint64_t v3 = sub_1000D1394((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_10012F3A8, (uint64_t)&v5, v2);
  swift_release();
  return v3;
}

id sub_100126F1C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v1 = [(id)swift_getObjCClassFromMetadata() handleWithString:v0];

  return v1;
}

uint64_t sub_100126F80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for MemberSharingCircle() + 28);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, v3, v4);
}

uint64_t sub_100126FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for MemberSharingCircle() + 32);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, v3, v4);
}

void sub_100127078(void (*a1)(uint64_t))
{
  a1(v1);
}

uint64_t sub_1001270DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_100127100, a3, 0);
}

uint64_t sub_100127100()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v1 + *(int *)(type metadata accessor for OwnedBeaconRecord() + 20);
  Swift::Int v3 = sub_100DF2D10((uint64_t)&off_1015A04D8);
  v0[5] = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001271C8;
  return sub_100E59F38(v2, v3);
}

uint64_t sub_1001271C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001272FC, v2, 0);
}

uint64_t sub_1001272FC()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100127320(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v43 = a1;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v33 - v10;
  uint64_t v12 = type metadata accessor for OwnerPeerTrust();
  swift_bridgeObjectRetain();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [self handleWithString:v13];

  if (!v14) {
    goto LABEL_6;
  }
  uint64_t v15 = *(uint64_t *)((char *)a2 + *(int *)(type metadata accessor for OwnerSharingCircle() + 32));
  if (!*(void *)(v15 + 16) || (unint64_t v16 = sub_1007240CC(a3 + *(int *)(v12 + 20)), (v17 & 1) == 0))
  {

LABEL_6:
    id v28 = 0;
    goto LABEL_7;
  }
  uint64_t v35 = v6;
  uint64_t v37 = qword_10134BD68[*(char *)(*(void *)(v15 + 56) + v16)];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v40 = UUID._bridgeToObjectiveC()().super.isa;
  Class v39 = UUID._bridgeToObjectiveC()().super.isa;
  Class v38 = UUID._bridgeToObjectiveC()().super.isa;
  id v36 = [self SPOwner];
  sub_100B23648(a2, (uint64_t)v11);
  id v42 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class v19 = Date._bridgeToObjectiveC()().super.isa;
  Class v34 = v19;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v35 + 8);
  v20(v11, v5);
  static Date.distantFuture.getter();
  Class v21 = Date._bridgeToObjectiveC()().super.isa;
  v20(v9, v5);
  LOBYTE(v32) = 0;
  Class v22 = v21;
  Class v31 = v19;
  Class v23 = isa;
  Class v25 = v39;
  Class v24 = v40;
  Class v26 = v38;
  uint64_t v27 = v36;
  id v28 = [v42 initWithIdentifier:isa beaconIdentifier:v40 sharingCircleIdentifier:v39 peerTrustIdentifier:v38 owner:v36 sharee:v14 state:v37 creationDate:v31 expirationDate:v21 visitorCount:0 delegationStatus:v32];

LABEL_7:
  sub_10012C39C(a3, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  uint64_t v29 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v43, v29);
  sub_10012C39C((uint64_t)a2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  return v28;
}

uint64_t sub_1001276A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for OwnerSharingCircle() + 20);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, v3, v4);
}

id sub_100127724(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v4 = [v2 initWithBeaconIdentifier:isa];

  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return v4;
}

id sub_1001277C0()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v1 = [(id)swift_getObjCClassFromMetadata() handleWithWeb:v0];

  return v1;
}

uint64_t sub_100127824@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = swift_projectBox();
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1001278B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[13] = a6;
  v7[14] = a7;
  v7[11] = a4;
  v7[12] = a5;
  uint64_t v8 = type metadata accessor for Date();
  v7[15] = v8;
  v7[16] = *(void *)(v8 - 8);
  v7[17] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v7[18] = v9;
  v7[19] = *(void *)(v9 - 8);
  v7[20] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ContinuousClock();
  v7[21] = v10;
  v7[22] = *(void *)(v10 - 8);
  v7[23] = swift_task_alloc();
  return _swift_task_switch(sub_100127A30, 0, 0);
}

uint64_t sub_100127A30()
{
  *(_OWORD *)(v0 + 40) = xmmword_10134B8B0;
  *(unsigned char *)(v0 + 56) = 0;
  ContinuousClock.init()();
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v1;
  uint64_t v2 = sub_10012B44C((unint64_t *)&unk_1016666F0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  *id v1 = v0;
  v1[1] = sub_100127B28;
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 88);
  return static Task<>.sleep<A>(until:tolerance:clock:)(v5, v0 + 40, v3, v4, v2);
}

uint64_t sub_100127B28()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184);
  uint64_t v3 = *(void *)(*(void *)v1 + 176);
  uint64_t v4 = *(void *)(*(void *)v1 + 168);
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_1001281B8;
  }
  else {
    uint64_t v5 = sub_100127C98;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100127C98()
{
  Class v26 = v0;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[12];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170DED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[19];
  uint64_t v9 = v0[20];
  uint64_t v11 = v0[18];
  if (v8)
  {
    uint64_t v12 = v0[16];
    uint64_t v23 = v0[17];
    uint64_t v22 = v0[15];
    uint64_t v13 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558531;
    v0[8] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    os_log_type_t type = v7;
    v0[9] = sub_1008FA0F0(v14, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v13 + 22) = 2082;
    uint64_t v16 = swift_projectBox();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v23, v16, v22);
    sub_10012B44C((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v23, v22);
    v0[10] = sub_1008FA0F0(v17, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Expiring %{private,mask.hash}s at %{public}s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[20], v0[18]);

    swift_release_n();
  }
  if (qword_101636A80 != -1) {
    swift_once();
  }
  uint64_t v20 = v0[14];
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  return _swift_task_switch(sub_1001280B0, v20, 0);
}

uint64_t sub_1001280B0()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001281B8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100128234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v5 - 8);
  os_log_type_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v7, &qword_10164DBB0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10001DAB4((uint64_t)v7, &qword_10164DBB0);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

uint64_t sub_100128404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t result = type metadata accessor for BeaconSharingService.PendingExpirationTask(0);
  *(void *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t sub_100128480(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  v2[11] = sub_10000588C((uint64_t *)&unk_101638D10);
  v2[12] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[13] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[14] = v4;
  v2[15] = *(void *)(v4 + 64);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = sub_10000588C((uint64_t *)&unk_10163B7C0);
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_1001285CC, v1, 0);
}

uint64_t sub_1001285CC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 80) + 136);
  *(void *)(v0 + 168) = v1;
  return _swift_task_switch(sub_1001285F0, v1, 0);
}

uint64_t sub_1001285F0()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 72);
  *(void *)(v0 + 176) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 184) = v6;
  *(void *)(v0 + 192) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  int v7 = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 328) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 200) = v9;
  *(void *)(v9 + 16) = v1;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 208) = v10;
  *(void *)(v0 + 216) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100128708, 0, 0);
}

uint64_t sub_100128708()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[22];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[28] = v3;
  v3[2] = v2;
  v3[3] = sub_10012AA74;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[29] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100128810;
  uint64_t v6 = v0[19];
  uint64_t v5 = v0[20];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10012AA8C, v3, v6);
}

uint64_t sub_100128810()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100128960, v1, 0);
}

uint64_t sub_100128960()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = type metadata accessor for MemberSharingCircle();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  sub_10001DAB4(v1, (uint64_t *)&unk_10163B7C0);
  if (v3 == 1)
  {
    uint64_t v4 = v0[21];
    return _swift_task_switch(sub_100128C38, v4, 0);
  }
  else
  {
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101641E80 + dword_101641E80);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[30] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100128AA8;
    uint64_t v6 = v0[9];
    return v8(v6, 1);
  }
}

uint64_t sub_100128AA8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100128C38()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 208);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 72);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 328) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 328);
  *(void *)(v0 + 248) = *(void *)(v3 + 136);
  v2(v4, v6, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 256) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_100128D2C, 0, 0);
}

uint64_t sub_100128D2C()
{
  uint64_t v2 = v0[31];
  uint64_t v1 = v0[32];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[33] = v3;
  v3[2] = v2;
  v3[3] = sub_10012AADC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[34] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100128E30;
  uint64_t v6 = v0[11];
  uint64_t v5 = v0[12];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10012AAF4, v3, v6);
}

uint64_t sub_100128E30()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100128F80, v1, 0);
}

uint64_t sub_100128F80()
{
  uint64_t v23 = v0;
  uint64_t v1 = v0[12];
  uint64_t v2 = type metadata accessor for OwnerSharingCircle();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  sub_10001DAB4(v1, (uint64_t *)&unk_101638D10);
  if (v3 == 1)
  {
    if (qword_101636890 != -1) {
      swift_once();
    }
    uint64_t v4 = v0[9];
    uint64_t v5 = (void (*)(uint64_t, uint64_t, uint64_t))v0[23];
    uint64_t v6 = v0[16];
    uint64_t v7 = v0[13];
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170D7A0);
    v5(v6, v4, v7);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = v0[16];
    uint64_t v13 = v0[13];
    uint64_t v14 = v0[14];
    if (v11)
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 141558275;
      v0[7] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2081;
      sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[8] = sub_1008FA0F0(v16, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "No share for %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v14 + 8))(v0[16], v0[13]);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Class v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
  else
  {
    uint64_t v18 = *(void *)(v0[10] + 200);
    v0[5] = type metadata accessor for MemberCircleRevokeManager();
    v0[6] = &off_101607480;
    v0[2] = v18;
    swift_retain();
    unint64_t v19 = (void *)swift_task_alloc();
    v0[35] = v19;
    *unint64_t v19 = v0;
    v19[1] = sub_100129334;
    return sub_100351D10((uint64_t)(v0 + 2));
  }
}

uint64_t sub_100129334(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(*v2 + 288) = a1;
  swift_task_dealloc();
  if (v1)
  {
    *(void *)(v3 + 320) = v1;
    uint64_t v4 = *(void *)(v3 + 80);
    uint64_t v5 = sub_100129838;
  }
  else
  {
    uint64_t v5 = sub_100129464;
    uint64_t v4 = 0;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100129464()
{
  if (qword_101636A80 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 104);
  unint64_t v5 = (*(unsigned __int8 *)(v0 + 328) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 328);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 184))(v3, *(void *)(v0 + 72), v4);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 296) = v6;
  *(void *)(v6 + 16) = v1;
  v2(v6 + v5, v3, v4);
  uint64_t v9 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                               + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1001295EC;
  return v9(&unk_10163B7D0, v6);
}

uint64_t sub_1001295EC()
{
  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_1001297C8;
  }
  else {
    uint64_t v2 = sub_10012971C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10012971C()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001297C8()
{
  swift_release();
  v0[40] = v0[39];
  uint64_t v1 = v0[10];
  return _swift_task_switch(sub_100129838, v1, 0);
}

uint64_t sub_100129838()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001298E0(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10001D2E4;
  return sub_100128480(a1);
}

uint64_t sub_100129974(uint64_t a1)
{
  uint64_t result = sub_10012B44C(&qword_10163B7A8, (void (*)(uint64_t))type metadata accessor for BeaconSharingService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001299CC(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100129A24(a1, a2, a3, (void (*)(void))type metadata accessor for MemberSharingCircle);
}

uint64_t sub_1001299F8(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100129A24(a1, a2, a3, (void (*)(void))type metadata accessor for OwnerSharingCircle);
}

uint64_t sub_100129A24(uint64_t a1, char *a2, uint64_t a3, void (*a4)(void))
{
  v24[1] = a1;
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v24 - v14;
  a4(0);
  sub_10012B44C((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v26 = v16;
  v17._countAndFlagsBits = 124;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = String.utf8Data.getter();
  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  uint64_t v25 = v19;
  unint64_t v26 = v21;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  sub_10001CFB8(v19, v21);
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v22(v13, v15, v9);
  v22(v8, a2, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  sub_10015D7D8((uint64_t)v8, (uint64_t)v13);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
}

uint64_t sub_100129CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163B820, (uint64_t)&unk_1015AC700, (uint64_t)sub_10012C390, (uint64_t)&unk_1015AC718);
}

uint64_t sub_100129CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163B978, (uint64_t)&unk_1015AE028, (uint64_t)sub_10012F5E4, (uint64_t)&unk_1015AE040);
}

uint64_t sub_100129D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163B818, (uint64_t)&unk_1015AC6B0, (uint64_t)sub_10012C378, (uint64_t)&unk_1015AC6C8);
}

uint64_t sub_100129D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163B9E8, (uint64_t)&unk_1015AE1B8, (uint64_t)sub_10012F7BC, (uint64_t)&unk_1015AE1D0);
}

uint64_t sub_100129D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BAF8, (uint64_t)&unk_1015AE6E0, (uint64_t)sub_10012FB14, (uint64_t)&unk_1015AE6F8);
}

uint64_t sub_100129DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BB48, (uint64_t)&unk_1015AE960, (uint64_t)sub_10012FE0C, (uint64_t)&unk_1015AE978);
}

uint64_t sub_100129DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_1016575E0, (uint64_t)&unk_1015AC610, (uint64_t)sub_10012C2A0, (uint64_t)&unk_1015AC628);
}

uint64_t sub_100129E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163B7D8, (uint64_t)&unk_1015AC570, (uint64_t)sub_10012C1A8, (uint64_t)&unk_1015AC588);
}

uint64_t sub_100129E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BA38, (uint64_t)&unk_1015AE3E8, (uint64_t)sub_10012F87C, (uint64_t)&unk_1015AE400);
}

uint64_t sub_100129E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BB18, (uint64_t)&unk_1015AE820, (uint64_t)sub_10012FCE4, (uint64_t)&unk_1015AE838);
}

uint64_t sub_100129E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BA28, (uint64_t)&unk_1015AE348, (uint64_t)sub_10012F84C, (uint64_t)&unk_1015AE360);
}

uint64_t sub_100129ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BB08, (uint64_t)&unk_1015AE780, (uint64_t)sub_10012FBFC, (uint64_t)&unk_1015AE798);
}

uint64_t sub_100129EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163B7F8, (uint64_t)&unk_1015AC5C0, (uint64_t)sub_10012C1E0, (uint64_t)&unk_1015AC5D8);
}

uint64_t sub_100129F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163B928, (uint64_t)&unk_1015ADFD8, (uint64_t)sub_10012F414, (uint64_t)&unk_1015ADFF0);
}

uint64_t sub_100129F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, (uint64_t *)&unk_10163BB50, (uint64_t)&unk_1015AE9B0, (uint64_t)sub_10012FE24, (uint64_t)&unk_1015AE9C8);
}

uint64_t sub_100129F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163B9D8, (uint64_t)&unk_1015AE168, (uint64_t)sub_10012F79C, (uint64_t)&unk_1015AE180);
}

uint64_t sub_100129FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BAC8, (uint64_t)&unk_1015AE500, (uint64_t)sub_10012F93C, (uint64_t)&unk_1015AE518);
}

uint64_t sub_100129FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BA18, (uint64_t)&unk_1015AE2F8, (uint64_t)sub_10012F82C, (uint64_t)&unk_1015AE310);
}

uint64_t sub_10012A01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BAA0, (uint64_t)&unk_1015AE4B0, (uint64_t)sub_10012F91C, (uint64_t)&unk_1015AE4C8);
}

uint64_t sub_10012A04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BA00, (uint64_t)&unk_1015AE258, (uint64_t)sub_10012F7F4, (uint64_t)&unk_1015AE270);
}

uint64_t sub_10012A07C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163B9F8, (uint64_t)&unk_1015AE208, (uint64_t)sub_10012F7DC, (uint64_t)&unk_1015AE220);
}

uint64_t sub_10012A0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BB60, (uint64_t)&unk_1015AEA00, (uint64_t)sub_10012FE3C, (uint64_t)&unk_1015AEA18);
}

uint64_t sub_10012A0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BB00, (uint64_t)&unk_1015AE730, (uint64_t)sub_10012FB2C, (uint64_t)&unk_1015AE748);
}

uint64_t sub_10012A10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BB68, (uint64_t)&unk_1015AEA50, (uint64_t)sub_10012FF10, (uint64_t)&unk_1015AEA68);
}

uint64_t sub_10012A13C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163B980, (uint64_t)&unk_1015AE078, (uint64_t)sub_10012F5FC, (uint64_t)&unk_1015AE090);
}

uint64_t sub_10012A16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BAE0, (uint64_t)&unk_1015AE5F0, (uint64_t)sub_10012FA14, (uint64_t)&unk_1015AE608);
}

uint64_t sub_10012A19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163C0D0, (uint64_t)&unk_1015AF900, (uint64_t)sub_100133AB8, (uint64_t)&unk_1015AF918);
}

uint64_t sub_10012A1CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BA08, (uint64_t)&unk_1015AE2A8, (uint64_t)sub_10012F80C, (uint64_t)&unk_1015AE2C0);
}

uint64_t sub_10012A1FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, (uint64_t *)&unk_10163B800, (uint64_t)&unk_1015AC660, (uint64_t)sub_10012C360, (uint64_t)&unk_1015AC678);
}

uint64_t sub_10012A22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BC48, (uint64_t)&unk_1015AED98, (uint64_t)sub_100130524, (uint64_t)&unk_1015AEDB0);
}

uint64_t sub_10012A25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BB38, (uint64_t)&unk_1015AE8C0, (uint64_t)sub_10012FD24, (uint64_t)&unk_1015AE8D8);
}

uint64_t sub_10012A28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BB40, (uint64_t)&unk_1015AE910, (uint64_t)sub_10012FD3C, (uint64_t)&unk_1015AE928);
}

uint64_t sub_10012A2BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, (uint64_t *)&unk_10163BC30, (uint64_t)&unk_1015AECF8, (uint64_t)sub_1001304EC, (uint64_t)&unk_1015AED10);
}

uint64_t sub_10012A2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BAE8, (uint64_t)&unk_1015AE640, (uint64_t)sub_10012FA2C, (uint64_t)&unk_1015AE658);
}

uint64_t sub_10012A31C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BB28, (uint64_t)&unk_1015AE870, (uint64_t)sub_10012FD04, (uint64_t)&unk_1015AE888);
}

uint64_t sub_10012A34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BC40, (uint64_t)&unk_1015AED48, (uint64_t)sub_10013050C, (uint64_t)&unk_1015AED60);
}

uint64_t sub_10012A37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BA30, (uint64_t)&unk_1015AE398, (uint64_t)sub_10012F864, (uint64_t)&unk_1015AE3B0);
}

uint64_t sub_10012A3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BAF0, (uint64_t)&unk_1015AE690, (uint64_t)sub_10012FA44, (uint64_t)&unk_1015AE6A8);
}

uint64_t sub_10012A3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BB90, (uint64_t)&unk_1015AEB40, (uint64_t)sub_100130024, (uint64_t)&unk_1015AEB58);
}

uint64_t sub_10012A40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BB88, (uint64_t)&unk_1015AEAF0, (uint64_t)sub_10012FF50, (uint64_t)&unk_1015AEB08);
}

uint64_t sub_10012A43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BB98, (uint64_t)&unk_1015AEB90, (uint64_t)sub_100130044, (uint64_t)&unk_1015AEBA8);
}

uint64_t sub_10012A46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BBA8, (uint64_t)&unk_1015AEBE0, (uint64_t)sub_100130064, (uint64_t)&unk_1015AEBF8);
}

uint64_t sub_10012A49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BB10, (uint64_t)&unk_1015AE7D0, (uint64_t)sub_10012FCCC, (uint64_t)&unk_1015AE7E8);
}

uint64_t sub_10012A4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BAD0, (uint64_t)&unk_1015AE550, (uint64_t)sub_10012F95C, (uint64_t)&unk_1015AE568);
}

uint64_t sub_10012A4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BB78, (uint64_t)&unk_1015AEAA0, (uint64_t)sub_10012FF30, (uint64_t)&unk_1015AEAB8);
}

uint64_t sub_10012A52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, &qword_10163BAD8, (uint64_t)&unk_1015AE5A0, (uint64_t)sub_10012F9FC, (uint64_t)&unk_1015AE5B8);
}

uint64_t sub_10012A55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10012A58C(a1, a2, a3, a4, (uint64_t *)&unk_10163BA48, (uint64_t)&unk_1015AE438, (uint64_t)sub_10012F894, (uint64_t)&unk_1015AE450);
}

uint64_t sub_10012A58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = a8;
  uint64_t v30 = a4;
  uint64_t v31 = a7;
  v28[1] = a6;
  uint64_t v29 = a3;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  unint64_t v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(a5);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, v17);
  unint64_t v21 = (*(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  unint64_t v22 = (v19 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(v23 + v21, v20, v17);
  uint64_t v24 = (void *)(v23 + v22);
  uint64_t v25 = v30;
  void *v24 = v29;
  v24[1] = v25;
  aBlock[4] = v31;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = v33;
  unint64_t v26 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v36 = _swiftEmptyArrayStorage;
  sub_10012B44C((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v34);
  return swift_release();
}

uint64_t sub_10012A928(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  a2(v4);
  sub_10000588C(&qword_10163BAD0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10012A9C8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v7 = sub_10000588C(a4);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  a2(v8);
  sub_10000588C(a5);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10012AA74()
{
  return sub_1001334E4((uint64_t (*)(uint64_t, uint64_t))sub_100E5AEA4);
}

uint64_t sub_10012AA8C(uint64_t a1)
{
  return sub_10012A58C(a1, v1[2], v1[3], v1[4], &qword_10163B7F8, (uint64_t)&unk_1015AC5C0, (uint64_t)sub_10012C1E0, (uint64_t)&unk_1015AC5D8);
}

uint64_t sub_10012AADC()
{
  return sub_1001334E4((uint64_t (*)(uint64_t, uint64_t))sub_100E5AB7C);
}

uint64_t sub_10012AAF4(uint64_t a1)
{
  return sub_10012A58C(a1, v1[2], v1[3], v1[4], &qword_10163B7D8, (uint64_t)&unk_1015AC570, (uint64_t)sub_10012C1A8, (uint64_t)&unk_1015AC588);
}

uint64_t sub_10012AB40(void (*a1)(uint64_t), uint64_t a2)
{
  return sub_10012ABD0(a1, a2, (uint64_t (*)(void))&type metadata accessor for UUID, (unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_10012AB88(void (*a1)(uint64_t), uint64_t a2)
{
  return sub_10012ABD0(a1, a2, (uint64_t (*)(void))&type metadata accessor for Date, (unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
}

uint64_t sub_10012ABD0(void (*a1)(uint64_t), uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v15 - v11;
  a1(v10);
  sub_10012B44C(a4, a5);
  uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return v13;
}

uint64_t sub_10012ACE8(void (*a1)(void *__return_ptr, uint64_t))
{
  uint64_t v2 = type metadata accessor for String.Encoding();
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  a1(v10, v3);
  uint64_t v4 = v10[0];
  unint64_t v5 = v10[1];
  static String.Encoding.utf8.getter();
  uint64_t v6 = String.init(data:encoding:)();
  if (!v7) {
    uint64_t v6 = Data.hexString.getter();
  }
  uint64_t v8 = v6;
  sub_10001CFB8(v4, v5);
  return v8;
}

uint64_t sub_10012ADB4(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  type metadata accessor for MultipartAccessoryPairingInfo(0);
  sub_100061B8C();
  uint64_t v1 = Dictionary.description.getter();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10012AE34(void (*a1)(uint64_t *__return_ptr))
{
  return sub_10012B08C(a1);
}

uint64_t sub_10012AE40(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  sub_100061B8C();
  uint64_t v1 = Set.description.getter();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10012AEB0(void (*a1)(uint64_t *__return_ptr), uint64_t a2)
{
  return sub_10012B178(a1, a2, (uint64_t (*)(uint64_t))sub_1008F5C58);
}

uint64_t sub_10012AEC8(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return sub_10012AFC8(a1, a2, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon, (uint64_t (*)(uint64_t))sub_100C03E08, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
}

uint64_t sub_10012AF08(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return sub_10012AFC8(a1, a2, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo, (uint64_t (*)(uint64_t))sub_1011E56F0, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
}

uint64_t sub_10012AF48(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return sub_10012AFC8(a1, a2, type metadata accessor for SharingCircleKeyManager.Instruction, (uint64_t (*)(uint64_t))sub_100C27BF0, type metadata accessor for SharingCircleKeyManager.Instruction);
}

uint64_t sub_10012AF88(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return sub_10012AFC8(a1, a2, type metadata accessor for KeyDropInterface.KeyPackage, (uint64_t (*)(uint64_t))sub_101264DA0, type metadata accessor for KeyDropInterface.KeyPackage);
}

uint64_t sub_10012AFC8(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t), uint64_t (*a5)(void))
{
  uint64_t v8 = a3(0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = a1(v9);
  uint64_t v13 = a4(v12);
  sub_10012C39C((uint64_t)v11, a5);
  return v13;
}

uint64_t sub_10012B080(void (*a1)(uint64_t *__return_ptr))
{
  return sub_10012B08C(a1);
}

uint64_t sub_10012B08C(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  uint64_t v1 = Array.description.getter();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10012B0F4(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v1 = Array.description.getter();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10012B160(void (*a1)(uint64_t *__return_ptr), uint64_t a2)
{
  return sub_10012B178(a1, a2, (uint64_t (*)(uint64_t))sub_10041F334);
}

uint64_t sub_10012B178(void (*a1)(uint64_t *__return_ptr), uint64_t a2, uint64_t (*a3)(uint64_t))
{
  a1(&v6);
  uint64_t v3 = v6;

  return a3(v3);
}

uint64_t sub_10012B1CC(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v5);
  uint64_t v1 = v5;
  unint64_t v2 = v6;
  uint64_t v3 = sub_1002AA678(v5, v6);
  sub_10001CFB8(v1, v2);
  return v3;
}

uint64_t sub_10012B234(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  __int16 v1 = v3;

  return sub_10110E1B4(v1);
}

uint64_t sub_10012B27C(void (*a1)(uint64_t))
{
  uint64_t v2 = sub_10000588C(&qword_10163D210);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v4);
  sub_100062734(&qword_10163B810, &qword_10163D210);
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v7;
}

uint64_t sub_10012B39C(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v2);

  return sub_1009CD110();
}

uint64_t sub_10012B3E4(void (*a1)(void *__return_ptr))
{
  a1(v5);
  uint64_t v1 = v5[0];
  unint64_t v2 = v5[1];
  uint64_t v3 = Data.description.getter();
  sub_10001CFB8(v1, v2);
  return v3;
}

uint64_t sub_10012B44C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10012B494(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
    sub_10012E2E4(&qword_10163C0A0, (unint64_t *)&qword_10163B900);
    Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v40;
    uint64_t v38 = v41;
    uint64_t v5 = v42;
    uint64_t v6 = v43;
    unint64_t v7 = v44;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v38 = a2 + 56;
    uint64_t v9 = ~v8;
    uint64_t v10 = -v8;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v7 = v11 & *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    uint64_t v5 = v9;
    uint64_t v6 = 0;
  }
  int64_t v37 = (unint64_t)(v5 + 64) >> 6;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_42;
      }
      sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v16 = v45;
      swift_unknownObjectRelease();
      uint64_t v15 = v6;
      uint64_t v13 = v7;
      if (!v45) {
        goto LABEL_42;
      }
    }
    else
    {
      if (v7)
      {
        uint64_t v13 = (v7 - 1) & v7;
        unint64_t v14 = __clz(__rbit64(v7)) | (v6 << 6);
        uint64_t v15 = v6;
      }
      else
      {
        int64_t v17 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_45;
        }
        if (v17 >= v37) {
          goto LABEL_42;
        }
        unint64_t v18 = *(void *)(v38 + 8 * v17);
        uint64_t v15 = v6 + 1;
        if (!v18)
        {
          uint64_t v15 = v6 + 2;
          if (v6 + 2 >= v37) {
            goto LABEL_42;
          }
          unint64_t v18 = *(void *)(v38 + 8 * v15);
          if (!v18)
          {
            uint64_t v15 = v6 + 3;
            if (v6 + 3 >= v37) {
              goto LABEL_42;
            }
            unint64_t v18 = *(void *)(v38 + 8 * v15);
            if (!v18)
            {
              uint64_t v15 = v6 + 4;
              if (v6 + 4 >= v37) {
                goto LABEL_42;
              }
              unint64_t v18 = *(void *)(v38 + 8 * v15);
              if (!v18)
              {
                uint64_t v15 = v6 + 5;
                if (v6 + 5 >= v37) {
                  goto LABEL_42;
                }
                unint64_t v18 = *(void *)(v38 + 8 * v15);
                if (!v18)
                {
                  uint64_t v19 = v6 + 6;
                  while (v37 != v19)
                  {
                    unint64_t v18 = *(void *)(v38 + 8 * v19++);
                    if (v18)
                    {
                      uint64_t v15 = v19 - 1;
                      goto LABEL_31;
                    }
                  }
LABEL_42:
                  sub_100132C20();
                  return (uint64_t)a1;
                }
              }
            }
          }
        }
LABEL_31:
        uint64_t v13 = (v18 - 1) & v18;
        unint64_t v14 = __clz(__rbit64(v18)) + (v15 << 6);
      }
      id v16 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
      if (!v16) {
        goto LABEL_42;
      }
    }
    id v20 = v16;
    uint64_t v21 = a3;
    swift_errorRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v45 = a1;
    unint64_t v24 = sub_1007244B0((uint64_t)v20);
    uint64_t v25 = a1[2];
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      break;
    }
    char v28 = v23;
    if (a1[3] >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_100E7FB78();
      }
    }
    else
    {
      sub_100E68318(v27, isUniquelyReferenced_nonNull_native);
      unint64_t v29 = sub_1007244B0((uint64_t)v20);
      if ((v28 & 1) != (v30 & 1)) {
        goto LABEL_46;
      }
      unint64_t v24 = v29;
    }
    uint64_t v31 = 8 * v24;
    if (v28)
    {
      uint64_t v12 = a1[7];
      swift_errorRelease();
      a3 = v21;
      *(void *)(v12 + v31) = v21;
    }
    else
    {
      a1[(v24 >> 6) + 8] |= 1 << v24;
      *(void *)(a1[6] + 8 * v24) = v20;
      *(void *)(a1[7] + 8 * v24) = v21;
      uint64_t v32 = a1[2];
      BOOL v33 = __OFADD__(v32, 1);
      uint64_t v34 = v32 + 1;
      if (v33) {
        goto LABEL_44;
      }
      a3 = v21;
      a1[2] = v34;
      id v35 = v20;
    }

    swift_bridgeObjectRelease();
    uint64_t v6 = v15;
    unint64_t v7 = v13;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  sub_10001D4B0(0, (unint64_t *)&qword_10163B900);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_10012B8B4(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 <= 9)
  {
    if (!v3) {
      return;
    }
    uint64_t v8 = *(void *)(type metadata accessor for SharingCircleSecret() - 8);
    uint64_t v9 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)));
    uint64_t v10 = *(void *)(v8 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_100EE5828(v9);
      if (v1) {
        break;
      }
      uint64_t v9 = (uint64_t *)((char *)v9 + v10);
      --v3;
    }
    while (v3);
  }
  else
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170D788);
    swift_bridgeObjectRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 134218240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "More than %ld shared secrets - leaving them orphaned for later cleanup. Count: %ld.", (uint8_t *)v7, 0x16u);
      swift_slowDealloc();

      return;
    }
  }
  swift_bridgeObjectRelease();
}

void *sub_10012BAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for OwnerSharingCircle();
  uint64_t v9 = __chkstk_darwin(v32);
  uint64_t v31 = (uint64_t)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v37 = (uint64_t)v28 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v41 = _swiftEmptyArrayStorage;
  uint64_t v34 = *(void *)(a1 + 16);
  if (v34)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
    v28[1] = v2;
    uint64_t v29 = (v15 + 32) & ~v15;
    uint64_t v33 = a1 + v29;
    uint64_t v35 = *(void *)(v11 + 72);
    uint64_t v38 = v6 + 16;
    uint64_t v39 = a2 + 56;
    uint64_t v30 = v6;
    id v16 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v17 = a2;
    uint64_t v40 = a2;
    do
    {
      uint64_t v36 = v14;
      sub_100130CA8(v33 + v35 * v14, v37, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (*(void *)(v17 + 16)
        && (sub_10012B44C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID),
            uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v17 = v40,
            uint64_t v19 = -1 << *(unsigned char *)(v40 + 32),
            unint64_t v20 = v18 & ~v19,
            ((*(void *)(v39 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) != 0))
      {
        uint64_t v21 = ~v19;
        uint64_t v22 = *(void *)(v30 + 72);
        char v23 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
        while (1)
        {
          v23(v8, *(void *)(v17 + 48) + v22 * v20, v5);
          sub_10012B44C((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v16)(v8, v5);
          if (v24) {
            break;
          }
          unint64_t v20 = (v20 + 1) & v21;
          uint64_t v17 = v40;
          if (((*(void *)(v39 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
            goto LABEL_3;
          }
        }
        sub_10012EC2C(v37, v31, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v25 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B721C(0, v25[2] + 1, 1);
          uint64_t v25 = v41;
        }
        unint64_t v27 = v25[2];
        unint64_t v26 = v25[3];
        if (v27 >= v26 >> 1)
        {
          sub_1000B721C(v26 > 1, v27 + 1, 1);
          uint64_t v25 = v41;
        }
        v25[2] = v27 + 1;
        sub_10012EC2C(v31, (uint64_t)v25 + v29 + v27 * v35, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v17 = v40;
      }
      else
      {
LABEL_3:
        sub_10012C39C(v37, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      uint64_t v14 = v36 + 1;
    }
    while (v36 + 1 != v34);
    return v41;
  }
  return result;
}

id sub_10012BEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v13 = UUID._bridgeToObjectiveC()().super.isa;
  Class v14 = UUID._bridgeToObjectiveC()().super.isa;
  Class v15 = UUID._bridgeToObjectiveC()().super.isa;
  Class v16 = Date._bridgeToObjectiveC()().super.isa;
  Class v17 = Date._bridgeToObjectiveC()().super.isa;
  LOBYTE(v24) = a11;
  id v18 = [v11 initWithIdentifier:isa beaconIdentifier:v13 sharingCircleIdentifier:v14 peerTrustIdentifier:v15 owner:a5 sharee:a6 state:a7 creationDate:v16 expirationDate:v17 visitorCount:a10 delegationStatus:v24];

  uint64_t v19 = type metadata accessor for Date();
  unint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  v20(a9, v19);
  v20(a8, v19);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8);
  v22(a4, v21);
  v22(a3, v21);
  v22(a2, v21);
  v22(a1, v21);
  return v18;
}

uint64_t sub_10012C0C8()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100033F68;
  return sub_10034C328(v3, v4);
}

uint64_t sub_10012C19C()
{
  return sub_100133A14(&qword_10163B7D8);
}

uint64_t sub_10012C1A8()
{
  return sub_10012C1F4(&qword_10163B7D8, (uint64_t *)&unk_101638D10);
}

uint64_t sub_10012C1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10012C1CC()
{
  return swift_release();
}

uint64_t sub_10012C1D4()
{
  return sub_100133A14(&qword_10163B7F8);
}

uint64_t sub_10012C1E0()
{
  return sub_10012C1F4(&qword_10163B7F8, (uint64_t *)&unk_10163B7C0);
}

uint64_t sub_10012C1F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(sub_10000588C(a1) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10012A9C8(v2 + v6, *(void (**)(uint64_t))(v2 + v7), *(void *)(v2 + v7 + 8), a2, a1);
}

uint64_t sub_10012C294()
{
  return sub_100133A14(&qword_1016575E0);
}

uint64_t sub_10012C2A0()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_1016575E0) - 8);
  (*(void (**)(void))(v0
                    + ((*(void *)(v1 + 64)
                      + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
                      + 7) & 0xFFFFFFFFFFFFFFF8)))();
  sub_10000588C(&qword_1016575E0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10012C354()
{
  return sub_100133A14((uint64_t *)&unk_10163B800);
}

uint64_t sub_10012C360()
{
  return sub_10012FE48((uint64_t *)&unk_10163B800);
}

uint64_t sub_10012C36C()
{
  return sub_100133A14(&qword_10163B818);
}

uint64_t sub_10012C378()
{
  return sub_10012FE48(&qword_10163B818);
}

uint64_t sub_10012C384()
{
  return sub_100133A14(&qword_10163B820);
}

uint64_t sub_10012C390()
{
  return sub_10012FE48(&qword_10163B820);
}

uint64_t sub_10012C39C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_10012C3FC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10)
{
  uint64_t v44 = a6;
  uint64_t v45 = a7;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v38 - v21;
  uint64_t v39 = qword_10134BD98[a8];
  uint64_t v50 = a1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v48 = a3;
  Class v42 = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v47 = a4;
  Class v41 = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v46 = a5;
  Class v23 = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v49 = a2;
  sub_100B23648(a2, (uint64_t)v22);
  uint64_t v40 = a9;
  id v25 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class v26 = Date._bridgeToObjectiveC()().super.isa;
  unint64_t v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v22, v16);
  static Date.distantFuture.getter();
  Class v28 = Date._bridgeToObjectiveC()().super.isa;
  v27(v20, v16);
  LOBYTE(v37) = a10 & 1;
  uint64_t v29 = v25;
  Class v31 = v42;
  Class v30 = isa;
  Class v32 = v41;
  id v33 = [v29 initWithIdentifier:isa beaconIdentifier:v42 sharingCircleIdentifier:v41 peerTrustIdentifier:v23 owner:v44 sharee:v45 state:v39 creationDate:v26 expirationDate:v28 visitorCount:0 delegationStatus:v37];

  sub_10012C39C(v40, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  uint64_t v34 = type metadata accessor for UUID();
  uint64_t v35 = *(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8);
  v35(v46, v34);
  v35(v47, v34);
  v35(v48, v34);
  sub_10012C39C((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  v35(v50, v34);
  return v33;
}

id sub_10012C700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v13 = UUID._bridgeToObjectiveC()().super.isa;
  Class v14 = UUID._bridgeToObjectiveC()().super.isa;
  Class v15 = UUID._bridgeToObjectiveC()().super.isa;
  Class v16 = Date._bridgeToObjectiveC()().super.isa;
  Class v17 = Date._bridgeToObjectiveC()().super.isa;
  LOBYTE(v24) = a10;
  id v18 = [v11 initWithIdentifier:isa beaconIdentifier:v13 sharingCircleIdentifier:v14 peerTrustIdentifier:v15 owner:a5 sharee:a6 state:a7 creationDate:v16 expirationDate:v17 delegationStatus:v24];

  uint64_t v19 = type metadata accessor for Date();
  unint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  v20(a9, v19);
  v20(a8, v19);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8);
  v22(a4, v21);
  v22(a3, v21);
  v22(a2, v21);
  v22(a1, v21);
  return v18;
}

id sub_10012C8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v13 = UUID._bridgeToObjectiveC()().super.isa;
  Class v14 = UUID._bridgeToObjectiveC()().super.isa;
  Class v15 = UUID._bridgeToObjectiveC()().super.isa;
  Class v16 = Date._bridgeToObjectiveC()().super.isa;
  Class v17 = Date._bridgeToObjectiveC()().super.isa;
  id v18 = [v11 initWithIdentifier:isa beaconIdentifier:v13 sharingCircleIdentifier:v14 peerTrustIdentifier:v15 owner:a5 sharee:a6 state:a7 creationDate:v16 expirationDate:v17];

  uint64_t v19 = type metadata accessor for Date();
  unint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  v20(a9, v19);
  v20(a8, v19);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8);
  v22(a4, v21);
  v22(a3, v21);
  v22(a2, v21);
  v22(a1, v21);
  return v18;
}

void sub_10012CAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *sub_10001CD44((void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  id v8 = [self currentConnection];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = sub_100FD0B68(v8);
    swift_release();
    if (v10)
    {
      uint64_t v11 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
      uint64_t v12 = (void *)swift_allocObject();
      v12[2] = 0;
      v12[3] = 0;
      v12[4] = v7;
      swift_retain();
      sub_1008F5E44((uint64_t)v6, (uint64_t)&unk_10163BF30, (uint64_t)v12);
      swift_release();
      (*(void (**)(uint64_t, uint64_t, void))(a2 + 16))(a2, 1, 0);

      return;
    }
  }
  type metadata accessor for SPBeaconSharingError(0);
  v15[0] = 1;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_10012B44C((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
  _BridgedStoredNSError.init(_:userInfo:)();
  Class v13 = (void *)v15[1];
  Class v14 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void, void *))(a2 + 16))(a2, 0, v14);
}

void sub_10012CCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *sub_10001CD44((void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  id v4 = [self currentConnection];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)(v3 + 184);
    uint64_t v7 = *(NSObject **)(v6 + 16);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v6;
    *(void *)(v8 + 24) = v5;
    uint64_t v9 = (void *)swift_allocObject();
    v9[2] = sub_10013240C;
    v9[3] = v8;
    aBlock[4] = sub_100132424;
    aBlock[5] = v9;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1000A70B0;
    aBlock[3] = &unk_1015AF3A0;
    uint64_t v10 = _Block_copy(aBlock);
    swift_retain();
    id v11 = v5;
    swift_retain();
    swift_release();
    dispatch_sync(v7, v10);
    _Block_release(v10);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v7)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, void))(a2 + 16))(a2, 1, 0);
    }
  }
  else
  {
    type metadata accessor for SPBeaconSharingError(0);
    void aBlock[6] = (id)1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_10012B44C((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v12 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(a2 + 16))(a2, 0, v12);
  }
}

uint64_t sub_10012CF50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  swift_retain();
  if (a1 == 1)
  {
    sub_10001DAB4((uint64_t)v6, &qword_10164DBB0);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    if (v9[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v11 = v12;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
    }
  }
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = &unk_10163BE80;
  *(void *)(v13 + 24) = v9;
  if (v11 | v10)
  {
    v15[0] = 0;
    v15[1] = 0;
    void v15[2] = v10;
    v15[3] = v11;
  }
  swift_task_create();
  return swift_release();
}

void *sub_10012D19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v34 = a4;
  uint64_t v35 = a6;
  uint64_t v33 = a3;
  uint64_t v36 = a2;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v37 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PrefixedDefaults();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  Class v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  __chkstk_darwin(v16 - 8);
  v39[3] = type metadata accessor for SharingScheduler();
  v39[4] = &off_1015FBB80;
  v39[0] = a1;
  v38[3] = type metadata accessor for SystemInfoDynamic();
  v38[4] = &off_1016111E0;
  v38[0] = a5;
  swift_defaultActor_initialize();
  type metadata accessor for WorkItemQueue();
  UUID.init()();
  a7[27] = WorkItemQueue.__allocating_init(name:identifier:)();
  a7[30] = 0;
  uint64_t v17 = OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isFindMyAppInstalledCached;
  if (qword_101637398 != -1) {
    swift_once();
  }
  id v18 = (char *)a7 + v17;
  uint64_t v19 = sub_100010324(v12, (uint64_t)qword_101667E70);
  unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v20(v15, v19, v12);
  v18[16] = 1;
  uint64_t v21 = sub_10000588C(&qword_10163BC08);
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v22(&v18[*(int *)(v21 + 40)], v15, v12);
  strcpy(v18, "findmyappstate");
  v18[15] = -18;
  Class v23 = (char *)a7 + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isThisMeDeviceCached;
  v20(v15, v19, v12);
  v23[16] = 0;
  v22(&v23[*(int *)(v21 + 40)], v15, v12);
  *(void *)Class v23 = 0xD000000000000011;
  *((void *)v23 + 1) = 0x80000001013F3C20;
  uint64_t v24 = (char *)a7 + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__revokedCircles;
  v20(v15, v19, v12);
  *((void *)v24 + 2) = _swiftEmptyArrayStorage;
  uint64_t v25 = sub_10000588C(&qword_10163BC10);
  v22(&v24[*(int *)(v25 + 40)], v15, v12);
  strcpy(v24, "revokedcircles");
  v24[15] = -18;
  uint64_t v26 = v34;
  a7[28] = v33;
  a7[29] = v26;
  sub_10001D010((uint64_t)v39, (uint64_t)(a7 + 14));
  sub_10001D010((uint64_t)v38, (uint64_t)(a7 + 19));
  uint64_t v27 = v36;
  a7[24] = v35;
  a7[25] = &off_1015CBCB0;
  a7[26] = v27;
  type metadata accessor for Transaction();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  uint64_t v28 = type metadata accessor for TaskPriority();
  uint64_t v29 = (uint64_t)v37;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v37, 1, 1, v28);
  Class v30 = (void *)swift_allocObject();
  v30[2] = 0;
  v30[3] = 0;
  v30[4] = a7;
  swift_retain();
  sub_1000212B0(v29, (uint64_t)&unk_10163BC20, (uint64_t)v30);
  swift_release();
  sub_10001DAB4(v29, &qword_10164DBB0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v39);
  return a7;
}

void *sub_10012D668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = type metadata accessor for SharingScheduler();
  uint64_t v28 = &off_1015FBB80;
  v26[0] = a1;
  uint64_t v24 = type metadata accessor for SystemInfoDynamic();
  uint64_t v25 = &off_1016111E0;
  v23[0] = a5;
  type metadata accessor for SharesRemovalManager();
  uint64_t v12 = (void *)swift_allocObject();
  uint64_t v13 = sub_1000BD078((uint64_t)v26, v27);
  __chkstk_darwin(v13);
  Class v15 = (void *)((char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_1000BD078((uint64_t)v23, v24);
  __chkstk_darwin(v17);
  uint64_t v19 = (void *)((char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = sub_10012D19C(*v15, a2, a3, a4, *v19, a6, v12);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v21;
}

void *sub_10012D86C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  v2[14] = 0xD000000000000014;
  v2[15] = 0x800000010134B9A0;
  v2[19] = 2;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AC168(v29);
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_101654000);
  v2[20] = AsyncKeyedThrottle.__allocating_init(throttleInterval:)();
  type metadata accessor for XPCSessionManager();
  swift_allocObject();
  v2[21] = XPCSessionManager.init(name:)();
  v2[22] = 0;
  type metadata accessor for BeaconSharingServiceConnections(0);
  uint64_t v9 = swift_allocObject();
  v2[23] = sub_100F36EDC(v9);
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_10170E330;
  uint64_t v11 = type metadata accessor for BeaconObservationStore();
  Class v31 = &off_1015D4FE8;
  uint64_t v32 = &off_1015B2900;
  uint64_t v30 = v11;
  *(void *)&long long v29 = v10;
  type metadata accessor for MemberCircleRevokeManager();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 24) = 0;
  swift_unknownObjectWeakInit();
  sub_10005F748(&v29, (_OWORD *)(v12 + 32));
  v3[25] = v12;
  type metadata accessor for MessagingQueryController();
  swift_allocObject();
  swift_retain();
  v3[26] = sub_101278D6C(0xD00000000000001BLL, 0x80000001013F3BA0);
  swift_allocObject();
  v3[27] = sub_101278D6C(0xD000000000000037, 0x80000001013F3BC0);
  v3[28] = 0;
  v3[29] = 0;
  v3[30] = _swiftEmptyArrayStorage;
  v3[31] = &_swiftEmptySetSingleton;
  type metadata accessor for DeviceIdentityUtility();
  uint64_t v13 = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v14 = v13 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  *(void *)(v13 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(void *)(v13 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v13 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 1;
  v3[32] = v13;
  v3[33] = 0;
  uint64_t v16 = (char *)v3 + OBJC_IVAR____TtC12searchpartyd20BeaconSharingService_pendingExpirationTask;
  uint64_t v17 = type metadata accessor for BeaconSharingService.PendingExpirationTask(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = OBJC_IVAR____TtC12searchpartyd20BeaconSharingService_dailySharesCountAnalyticsThrottle;
  *(void *)((char *)v3 + v18) = AsyncKeyedThrottle.__allocating_init(throttleInterval:)();
  v3[17] = a1;
  type metadata accessor for SharingCircleKeyManager();
  uint64_t v19 = swift_allocObject();
  swift_retain_n();
  swift_defaultActor_initialize();
  type metadata accessor for KeyDropInterface();
  uint64_t v20 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v20 + 112) = 0;
  *(void *)(v20 + 120) = 0;
  *(void *)(v19 + 112) = v20;
  *(void *)(v19 + 120) = a1;
  v3[16] = v19;
  v3[24] = a2;
  uint64_t v21 = qword_101637680;
  swift_retain_n();
  swift_retain();
  if (v21 != -1) {
    swift_once();
  }
  uint64_t v22 = qword_10170F8A0;
  type metadata accessor for AppDeletionObserver();
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = type metadata accessor for TaskPriority();
  *(void *)(v23 + 16) = 0;
  *(void *)(v23 + 24) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v8, 1, 1, v24);
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = v23;
  swift_retain();
  swift_retain();
  sub_1000212B0((uint64_t)v8, (uint64_t)&unk_10163BC00, (uint64_t)v25);
  swift_release();
  sub_10001DAB4((uint64_t)v8, &qword_10164DBB0);
  uint64_t v26 = sub_10012D668(a2, a1, (uint64_t)&unk_10163BBF8, a1, v22, v23);
  swift_release();
  swift_release();
  v3[18] = v26;
  *(void *)(v3[25] + 24) = &off_1015AC380;
  swift_unknownObjectWeakAssign();
  return v3;
}

uint64_t sub_10012DE0C()
{
  sub_100130580();
  char v0 = NSXPCConnection.hasEntitlement<A>(_:)();
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "BeaconSharingService: Received new XPC connection (has entitlement: %{BOOL}d).", v4, 8u);
    swift_slowDealloc();
  }

  return v0 & 1;
}

uint64_t sub_10012DF40()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012DF78()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  v2[7] = v0;
  return _swift_task_switch(sub_1000F096C, 0, 0);
}

uint64_t sub_10012E020()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10012E0C8;
  v2[13] = v0;
  return _swift_task_switch(sub_1000F0CA8, 0, 0);
}

uint64_t sub_10012E0C8(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  os_log_type_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_10012E1C4()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  return sub_100EF13F4(v0);
}

uint64_t sub_10012E254()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10012E28C()
{
  return sub_100E581E0(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_10012E298(uint64_t a1)
{
  return sub_10012A58C(a1, v1[2], v1[3], v1[4], &qword_1016575E0, (uint64_t)&unk_1015AC610, (uint64_t)sub_10012C2A0, (uint64_t)&unk_1015AC628);
}

uint64_t sub_10012E2E4(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001D4B0(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10012E338()
{
  return sub_1001334E4((uint64_t (*)(uint64_t, uint64_t))sub_100E5F4A8);
}

uint64_t sub_10012E350(uint64_t a1)
{
  return sub_10012A58C(a1, v1[2], v1[3], v1[4], &qword_10163B928, (uint64_t)&unk_1015ADFD8, (uint64_t)sub_10012F414, (uint64_t)&unk_1015ADFF0);
}

uint64_t sub_10012E3A0()
{
  return sub_10012E47C((uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (uint64_t (*)(unint64_t))sub_100126D78);
}

uint64_t sub_10012E3CC()
{
  return sub_10012ABD0(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), (uint64_t (*)(void))&type metadata accessor for UUID, (unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_10012E42C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E43C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E450()
{
  return sub_10012E47C((uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (uint64_t (*)(unint64_t))sub_100126F80);
}

uint64_t sub_10012E47C(uint64_t (*a1)(void), uint64_t (*a2)(unint64_t))
{
  uint64_t v4 = *(void *)(a1(0) - 8);
  return a2(v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

uint64_t sub_10012E4FC()
{
  return sub_10012E47C((uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (uint64_t (*)(unint64_t))sub_100126FFC);
}

uint64_t sub_10012E528()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E538()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E548()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10012E558(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

uint64_t sub_10012E564()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E574()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E584()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E594()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E5A4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012E5B4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E5C4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[3] = a2;
  v6[4] = v2;
  v6[1] = sub_100033F68;
  v6[2] = a1;
  return _swift_task_switch(sub_100127100, v2, 0);
}

uint64_t sub_10012E68C()
{
  return sub_100130830((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_10012E6A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10012ECF4((uint64_t (*)(void))&type metadata accessor for UUID, a1);
}

uint64_t sub_10012E6BC()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012E6F4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E704()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E714()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012E724()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E734()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E744()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E754()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E764()
{
  return sub_100130830((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_10012E77C@<X0>(uint64_t a1@<X8>)
{
  return sub_100127824(a1);
}

uint64_t sub_10012E784()
{
  return sub_10012ABD0(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), (uint64_t (*)(void))&type metadata accessor for Date, (unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
}

uint64_t sub_10012E7E4()
{
  return _swift_deallocObject(v0, 24, 7);
}

double MacBeaconConfig.fastRollAdvertisementInterval.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t sub_10012E7FC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E80C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E81C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012E82C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E83C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E84C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E85C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E86C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E87C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012E88C()
{
  return sub_1002A3580(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10012E894(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002A35A8(a1, a2, a3, *(void (**)(void))(v3 + 16));
}

uint64_t sub_10012E89C()
{
  uint64_t v1 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v12 = v3 | v8 | 7;
  unint64_t v10 = (((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v10 + 8, v12);
}

uint64_t sub_10012EA24(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for ContinuousClock.Instant() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)(v1 + 16);
  uint64_t v12 = *(void *)(v1 + 24);
  uint64_t v13 = v1 + v6;
  uint64_t v14 = v1 + v9;
  uint64_t v15 = *(void *)(v1 + v10);
  uint64_t v16 = *(void *)(v1 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v17;
  *uint64_t v17 = v3;
  v17[1] = sub_100033F68;
  return sub_1001278B4(a1, v11, v12, v13, v14, v15, v16);
}

uint64_t sub_10012EBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163B880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012EC2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10012EC98()
{
  return sub_10012E47C((uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, (uint64_t (*)(unint64_t))sub_1001276A8);
}

uint64_t sub_10012ECC4()
{
  return sub_100130830((uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t sub_10012ECDC@<X0>(uint64_t a1@<X8>)
{
  return sub_10012ECF4((uint64_t (*)(void))&type metadata accessor for Date, a1);
}

uint64_t sub_10012ECF4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return v6(a2, v7, v4);
}

uint64_t sub_10012ED70()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012ED80()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012ED90()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012EDA0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012EDB0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012EDC0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012EDD0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012EDE4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012EDF4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012EE04()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012EE14()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012EE24()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012EE38()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnerSharingCircle() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10012EF64()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012EF74()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012EF84()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012EF94()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012EFA4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012EFBC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012EFCC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012EFDC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012EFEC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012EFFC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F00C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F01C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F02C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012F03C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F04C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F064()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F074()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F084()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012F094()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F0A4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F0B4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F0C4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F0D4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012F0E4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F0F4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F104()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012F13C()
{
  return *(void *)(*(void *)(v0 + 16) + 16) - 1;
}

uint64_t sub_10012F14C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F15C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F170()
{
  uint64_t v1 = (int *)(type metadata accessor for MemberSharingCircle() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  v9(v6 + v1[9], v8);
  v9(v6 + v1[10], v8);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10012F2CC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F2DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F2EC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012F2FC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F30C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012F31C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100347684();
}

uint64_t sub_10012F3A8(uint64_t a1, char *a2)
{
  return sub_100129A24(a1, a2, *(void *)(v2 + 16), (void (*)(void))type metadata accessor for OwnerSharingCircle);
}

uint64_t sub_10012F3D8(uint64_t a1, char *a2)
{
  return sub_100129A24(a1, a2, *(void *)(v2 + 16), (void (*)(void))type metadata accessor for MemberSharingCircle);
}

uint64_t sub_10012F408()
{
  return sub_100133A14(&qword_10163B928);
}

uint64_t sub_10012F414()
{
  return sub_10012C1F4(&qword_10163B928, (uint64_t *)&unk_101653D50);
}

uint64_t sub_10012F428(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10012F484()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  v2[5] = v0;
  return _swift_task_switch(sub_1000F994C, 0, 0);
}

uint64_t sub_10012F52C(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100033F68;
  v4[5] = a1;
  v4[6] = v1;
  return _swift_task_switch(sub_1000F9B04, 0, 0);
}

uint64_t sub_10012F5D8()
{
  return sub_100133A14(&qword_10163B978);
}

uint64_t sub_10012F5E4()
{
  return sub_10012FE48(&qword_10163B978);
}

uint64_t sub_10012F5F0()
{
  return sub_100133A14(&qword_10163B980);
}

uint64_t sub_10012F5FC()
{
  return sub_10012C1F4(&qword_10163B980, (uint64_t *)&unk_1016607D0);
}

uint64_t sub_10012F61C()
{
  return sub_1001334E4((uint64_t (*)(uint64_t, uint64_t))sub_100E5ABA8);
}

unint64_t sub_10012F634()
{
  unint64_t result = qword_10163B9B0;
  if (!qword_10163B9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163B9B0);
  }
  return result;
}

uint64_t sub_10012F68C()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  char v6 = *(unsigned char *)(v0 + v3 + *(void *)(v2 + 64));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100033F68;
  return sub_10034C460(v4, v5, v6);
}

uint64_t sub_10012F790()
{
  return sub_100133A14(&qword_10163B9D8);
}

uint64_t sub_10012F79C()
{
  return sub_10012C1F4(&qword_10163B9D8, &qword_10163B9E0);
}

uint64_t sub_10012F7B0()
{
  return sub_100133A14(&qword_10163B9E8);
}

uint64_t sub_10012F7BC()
{
  return sub_10012C1F4(&qword_10163B9E8, &qword_10163B9F0);
}

uint64_t sub_10012F7D0()
{
  return sub_100133A14(&qword_10163B9F8);
}

uint64_t sub_10012F7DC()
{
  return sub_10012FE48(&qword_10163B9F8);
}

uint64_t sub_10012F7E8()
{
  return sub_100133A14(&qword_10163BA00);
}

uint64_t sub_10012F7F4()
{
  return sub_10012FE48(&qword_10163BA00);
}

uint64_t sub_10012F800()
{
  return sub_100133A14(&qword_10163BA08);
}

uint64_t sub_10012F80C()
{
  return sub_10012C1F4(&qword_10163BA08, &qword_10163BA10);
}

uint64_t sub_10012F820()
{
  return sub_100133A14(&qword_10163BA18);
}

uint64_t sub_10012F82C()
{
  return sub_10012C1F4(&qword_10163BA18, &qword_10163BA20);
}

uint64_t sub_10012F840()
{
  return sub_100133A14(&qword_10163BA28);
}

uint64_t sub_10012F84C()
{
  return sub_10012FE48(&qword_10163BA28);
}

uint64_t sub_10012F858()
{
  return sub_100133A14(&qword_10163BA30);
}

uint64_t sub_10012F864()
{
  return sub_10012FE48(&qword_10163BA30);
}

uint64_t sub_10012F870()
{
  return sub_100133A14(&qword_10163BA38);
}

uint64_t sub_10012F87C()
{
  return sub_10012FF5C(&qword_10163BA38);
}

uint64_t sub_10012F888()
{
  return sub_100133A14((uint64_t *)&unk_10163BA48);
}

uint64_t sub_10012F894()
{
  return sub_10012C1F4((uint64_t *)&unk_10163BA48, (uint64_t *)&unk_10163B1D0);
}

uint64_t sub_10012F8AC()
{
  return sub_1001334E4((uint64_t (*)(uint64_t, uint64_t))sub_100E5DC5C);
}

uint64_t sub_10012F8C4(uint64_t a1)
{
  return sub_10012A58C(a1, v1[2], v1[3], v1[4], &qword_10163BAA0, (uint64_t)&unk_1015AE4B0, (uint64_t)sub_10012F91C, (uint64_t)&unk_1015AE4C8);
}

uint64_t sub_10012F910()
{
  return sub_100133A14(&qword_10163BAA0);
}

uint64_t sub_10012F91C()
{
  return sub_10012C1F4(&qword_10163BAA0, (uint64_t *)&unk_10163BA80);
}

uint64_t sub_10012F930()
{
  return sub_100133A14(&qword_10163BAC8);
}

uint64_t sub_10012F93C()
{
  return sub_10012C1F4(&qword_10163BAC8, (uint64_t *)&unk_10163B890);
}

uint64_t sub_10012F950()
{
  return sub_100133A14(&qword_10163BAD0);
}

uint64_t sub_10012F95C()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_10163BAD0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = *(void (**)(uint64_t))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10012A928(v0 + v2, v3);
}

uint64_t sub_10012F9F0()
{
  return sub_100133A14(&qword_10163BAD8);
}

uint64_t sub_10012F9FC()
{
  return sub_10012FE48(&qword_10163BAD8);
}

uint64_t sub_10012FA08()
{
  return sub_100133A14(&qword_10163BAE0);
}

uint64_t sub_10012FA14()
{
  return sub_10012FE48(&qword_10163BAE0);
}

uint64_t sub_10012FA20()
{
  return sub_100133A14(&qword_10163BAE8);
}

uint64_t sub_10012FA2C()
{
  return sub_10012FE48(&qword_10163BAE8);
}

uint64_t sub_10012FA38()
{
  return sub_100133A14(&qword_10163BAF0);
}

uint64_t sub_10012FA44()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_10163BAF0) - 8);
  (*(void (**)(uint64_t *__return_ptr))(v0
                                                + ((*(void *)(v1 + 64)
                                                  + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
                                                  + 7) & 0xFFFFFFFFFFFFFFF8)))(&v3);
  sub_10000588C(&qword_10163BAF0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10012FB08()
{
  return sub_100133A14(&qword_10163BAF8);
}

uint64_t sub_10012FB14()
{
  return sub_10012FE48(&qword_10163BAF8);
}

uint64_t sub_10012FB20()
{
  return sub_100133A14(&qword_10163BB00);
}

uint64_t sub_10012FB2C()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_10163BB00) - 8);
  (*(void (**)(uint64_t *__return_ptr))(v0
                                                + ((*(void *)(v1 + 64)
                                                  + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
                                                  + 7) & 0xFFFFFFFFFFFFFFF8)))(&v3);
  sub_10000588C(&qword_10163BB00);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10012FBF0()
{
  return sub_100133A14(&qword_10163BB08);
}

uint64_t sub_10012FBFC()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_10163BB08) - 8);
  (*(void (**)(uint64_t *__return_ptr))(v0
                                                + ((*(void *)(v1 + 64)
                                                  + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
                                                  + 7) & 0xFFFFFFFFFFFFFFF8)))(&v3);
  sub_10000588C(&qword_10163BB08);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10012FCC0()
{
  return sub_100133A14(&qword_10163BB10);
}

uint64_t sub_10012FCCC()
{
  return sub_10012FE48(&qword_10163BB10);
}

uint64_t sub_10012FCD8()
{
  return sub_100133A14(&qword_10163BB18);
}

uint64_t sub_10012FCE4()
{
  return sub_10012C1F4(&qword_10163BB18, &qword_10163BB20);
}

uint64_t sub_10012FCF8()
{
  return sub_100133A14(&qword_10163BB28);
}

uint64_t sub_10012FD04()
{
  return sub_10012C1F4(&qword_10163BB28, &qword_10163BB30);
}

uint64_t sub_10012FD18()
{
  return sub_100133A14(&qword_10163BB38);
}

uint64_t sub_10012FD24()
{
  return sub_10012FE48(&qword_10163BB38);
}

uint64_t sub_10012FD30()
{
  return sub_100133A14(&qword_10163BB40);
}

uint64_t sub_10012FD3C()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_10163BB40) - 8);
  (*(void (**)(uint64_t *__return_ptr))(v0
                                                + ((*(void *)(v1 + 64)
                                                  + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
                                                  + 7) & 0xFFFFFFFFFFFFFFF8)))(&v3);
  sub_10000588C(&qword_10163BB40);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10012FE00()
{
  return sub_100133A14(&qword_10163BB48);
}

uint64_t sub_10012FE0C()
{
  return sub_10012FE48(&qword_10163BB48);
}

uint64_t sub_10012FE18()
{
  return sub_100133A14((uint64_t *)&unk_10163BB50);
}

uint64_t sub_10012FE24()
{
  return sub_10012FE48((uint64_t *)&unk_10163BB50);
}

uint64_t sub_10012FE30()
{
  return sub_100133A14(&qword_10163BB60);
}

uint64_t sub_10012FE3C()
{
  return sub_10012FE48(&qword_10163BB60);
}

uint64_t sub_10012FE48(uint64_t *a1)
{
  uint64_t v3 = *(void *)(sub_10000588C(a1) - 8);
  (*(void (**)(uint64_t *__return_ptr))(v1
                                                + ((*(void *)(v3 + 64)
                                                  + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
                                                  + 7) & 0xFFFFFFFFFFFFFFF8)))(&v5);
  sub_10000588C(a1);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10012FF04()
{
  return sub_100133A14(&qword_10163BB68);
}

uint64_t sub_10012FF10()
{
  return sub_10012C1F4(&qword_10163BB68, &qword_10163BB70);
}

uint64_t sub_10012FF24()
{
  return sub_100133A14(&qword_10163BB78);
}

uint64_t sub_10012FF30()
{
  return sub_10012C1F4(&qword_10163BB78, &qword_10163BB80);
}

uint64_t sub_10012FF44()
{
  return sub_100133A14(&qword_10163BB88);
}

uint64_t sub_10012FF50()
{
  return sub_10012FF5C(&qword_10163BB88);
}

uint64_t sub_10012FF5C(uint64_t *a1)
{
  uint64_t v3 = *(void *)(sub_10000588C(a1) - 8);
  (*(void (**)(void *__return_ptr))(v1
                                               + ((*(void *)(v3 + 64)
                                                 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
                                                 + 7) & 0xFFFFFFFFFFFFFFF8)))(v5);
  sub_10000588C(a1);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100130018()
{
  return sub_100133A14(&qword_10163BB90);
}

uint64_t sub_100130024()
{
  return sub_10012C1F4(&qword_10163BB90, &qword_101638CF0);
}

uint64_t sub_100130038()
{
  return sub_100133A14(&qword_10163BB98);
}

uint64_t sub_100130044()
{
  return sub_10012C1F4(&qword_10163BB98, &qword_10163BBA0);
}

uint64_t sub_100130058()
{
  return sub_100133A14(&qword_10163BBA8);
}

uint64_t sub_100130064()
{
  return sub_10012C1F4(&qword_10163BBA8, &qword_10163BBB0);
}

unint64_t sub_100130078()
{
  unint64_t result = qword_10163BBC8;
  if (!qword_10163BBC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163BBC8);
  }
  return result;
}

uint64_t *sub_1001300CC(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  unint64_t v5 = a1[6];
  sub_100037A24(*a1, a1[1]);
  sub_100037A24(v2, v3);
  swift_bridgeObjectRelease();
  sub_100037A24(v4, v5);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_100130148()
{
  unint64_t result = qword_10163BBD0;
  if (!qword_10163BBD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163BBD0);
  }
  return result;
}

unint64_t sub_10013019C()
{
  unint64_t result = qword_10165E000;
  if (!qword_10165E000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165E000);
  }
  return result;
}

uint64_t sub_1001301F8(uint64_t a1)
{
  return sub_10012A58C(a1, v1[2], v1[3], v1[4], &qword_10163BA38, (uint64_t)&unk_1015AE3E8, (uint64_t)sub_10012F87C, (uint64_t)&unk_1015AE400);
}

uint64_t sub_100130244(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100033F68;
  return sub_1000DED10(a1, v1);
}

uint64_t sub_1001302E0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001D2E4;
  return sub_1005741D0(a1, v4, v5, v6);
}

uint64_t sub_100130394()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  return sub_1010448BC(v0);
}

uint64_t sub_100130428(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_101049BC8(a1, v4, v5, v6);
}

uint64_t sub_1001304E0()
{
  return sub_100133A14((uint64_t *)&unk_10163BC30);
}

uint64_t sub_1001304EC()
{
  return sub_10012C1F4((uint64_t *)&unk_10163BC30, &qword_101660BB0);
}

uint64_t sub_100130500()
{
  return sub_100133A14(&qword_10163BC40);
}

uint64_t sub_10013050C()
{
  return sub_10012FE48(&qword_10163BC40);
}

uint64_t sub_100130518()
{
  return sub_100133A14(&qword_10163BC48);
}

uint64_t sub_100130524()
{
  return sub_10012FE48(&qword_10163BC48);
}

uint64_t sub_100130530(uint64_t a1)
{
  return sub_10012A58C(a1, v1[2], v1[3], v1[4], &qword_10163B978, (uint64_t)&unk_1015AE028, (uint64_t)sub_10012F5E4, (uint64_t)&unk_1015AE040);
}

unint64_t sub_100130580()
{
  unint64_t result = qword_10163BC68;
  if (!qword_10163BC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163BC68);
  }
  return result;
}

uint64_t sub_1001305D4()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10013067C;
  v2[7] = v0;
  return _swift_task_switch(sub_1000EF560, 0, 0);
}

uint64_t sub_10013067C(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  unint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_100130778(uint64_t a1)
{
  return sub_10012A58C(a1, v1[2], v1[3], v1[4], &qword_10163BA28, (uint64_t)&unk_1015AE348, (uint64_t)sub_10012F84C, (uint64_t)&unk_1015AE360);
}

unint64_t sub_1001307C4()
{
  unint64_t result = qword_10163BCB8;
  if (!qword_10163BCB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163BCB8);
  }
  return result;
}

uint64_t sub_100130818()
{
  return sub_100130830((uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100130830(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1001308C8()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100033F68;
  return sub_10034BB58(v3);
}

uint64_t sub_100130994()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 24) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }

  return _swift_deallocObject(v0, ((v2 + 24) & ~v2) + v16, v2 | 7);
}

uint64_t sub_100130C24@<X0>(BOOL *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = v3 - 8;
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v1 + 16);
  if (v7) {
    uint64_t result = sub_10069316C(v1 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
  }
  *a1 = v7 == 0;
  return result;
}

uint64_t sub_100130CA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100130D14(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100033F68;
  return sub_1000E73A0(a1, v4, v5, v7, v6);
}

uint64_t sub_100130DD4(uint64_t a1)
{
  return sub_1000E04F4(a1, v1, (uint64_t)&unk_1015AEEB0, (void (*)(unsigned char *, uint64_t))sub_10001CEB0);
}

uint64_t sub_100130E28(uint64_t a1)
{
  return sub_1000E04F4(a1, v1, (uint64_t)&unk_1015AEE88, (void (*)(unsigned char *, uint64_t))sub_10001CEB0);
}

uint64_t sub_100130E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100033F68;
  return sub_1000E0650(a1, a2, v2);
}

uint64_t sub_100130F2C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  return sub_1000E05B4(v2, v0 + 24);
}

uint64_t sub_100130FCC()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10013100C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  return sub_1000E02C0(v2, v0 + 24);
}

uint64_t sub_1001310A8()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10001D2E4;
  return sub_100EF13F4(v0);
}

uint64_t sub_10013113C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100131184(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100033F68;
  return sub_1000E75FC(a1, v4, v5, v7, v6);
}

uint64_t sub_100131244(uint64_t a1)
{
  return sub_100EF53E8(a1, v1);
}

uint64_t sub_10013124C()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnerSharingCircle() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100131380()
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100033F68;
  return sub_10034ADD0(v3, v4);
}

uint64_t sub_100131454()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10013148C(char a1, uint64_t a2)
{
  sub_1010610FC(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100131498(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100033F68;
  return sub_1000DE254(a1, v4, v5, v6, v7, v9, v8);
}

void sub_10013156C(uint64_t a1, uint64_t a2)
{
  sub_1000DE100(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10013158C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100033F68;
  return sub_1000DD7A0(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100131660(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t sub_10013167C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100033F68;
  return sub_1000DD014(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100131754(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100033F68;
  return sub_1000DC828(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100131828()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100131860()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100131888()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10013189C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001318DC()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 24) = v3;
  return _swift_task_switch(sub_1000DC4B0, 0, 0);
}

uint64_t sub_10013198C()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100033F68;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return _swift_task_switch(sub_1000DC10C, 0, 0);
}

void sub_100131A40(char a1, uint64_t a2, uint64_t a3)
{
  sub_1000DB85C(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_100131A4C()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100131A94(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100033F68;
  return sub_1000DB8DC(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100131B5C()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();

  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100131CAC()
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v0 + v4);
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_100033F68;
  *(_OWORD *)(v6 + 24) = v7;
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)&dword_101642068 + dword_101642068);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v6 + 40) = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_1000DB1A8;
  return v10(v5);
}

uint64_t sub_100131E14(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  long long v7 = (char *)v1 + (v6 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = v1[4];
  uint64_t v11 = (uint64_t)v1 + v5;
  char v12 = *((unsigned char *)v1 + v6);
  uint64_t v13 = *((void *)v7 + 1);
  uint64_t v14 = *((void *)v7 + 2);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v15;
  *uint64_t v15 = v2;
  v15[1] = sub_100033F68;
  return sub_1000DA854(a1, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_100131F58()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 24;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100132048(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  long long v7 = (char *)v1 + (v6 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = v1[4];
  uint64_t v11 = (uint64_t)v1 + v5;
  char v12 = *((unsigned char *)v1 + v6);
  uint64_t v13 = *((void *)v7 + 1);
  uint64_t v14 = *((void *)v7 + 2);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v15;
  *uint64_t v15 = v2;
  v15[1] = sub_100033F68;
  return sub_1000D9E20(a1, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_10013218C()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001321DC()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 40) = v3;
  return _swift_task_switch(sub_1000D978C, 0, 0);
}

uint64_t sub_100132290(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_100033F68;
  return sub_1000D8ED8(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1001323CC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10013240C()
{
  sub_100DFFDBC(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100132414()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100132424()
{
  return sub_1000A7088(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100132430()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100132470()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  return sub_1000F5580();
}

void sub_100132544(uint64_t a1)
{
  sub_1000D89E0(a1, *(void *)(v1 + 16));
}

uint64_t sub_100132550()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100033F68;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return _swift_task_switch(sub_1000D8AB4, 0, 0);
}

uint64_t sub_100132608()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100132650()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100033F68;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return _swift_task_switch(sub_1000D86DC, 0, 0);
}

uint64_t sub_100132708(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_100033F68;
  return sub_1000D7E28(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_100132848()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *unint64_t v5 = v1;
  v5[1] = sub_100033F68;
  return sub_10034C50C(v3, v4);
}

uint64_t sub_100132920()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100033F68;
  *(_OWORD *)(v4 + 48) = v5;
  *(void *)(v4 + 32) = v2;
  *(void *)(v4 + 40) = v3;
  return _swift_task_switch(sub_1000D7644, 0, 0);
}

uint64_t sub_1001329E0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_100033F68;
  return sub_1000D6D90(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_100132B20()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100132B70()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 40) = v3;
  return _swift_task_switch(sub_1000D6734, 0, 0);
}

uint64_t sub_100132C20()
{
  return swift_release();
}

uint64_t sub_100132C2C()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100132C74()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100033F68;
  *(_OWORD *)(v4 + 56) = v5;
  *(void *)(v4 + 40) = v2;
  *(void *)(v4 + 48) = v3;
  return _swift_task_switch(sub_1000D60C8, 0, 0);
}

uint64_t sub_100132D38(uint64_t a1)
{
  return sub_10012A58C(a1, v1[2], v1[3], v1[4], &qword_10163B818, (uint64_t)&unk_1015AC6B0, (uint64_t)sub_10012C378, (uint64_t)&unk_1015AC6C8);
}

uint64_t sub_100132D84()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_100132E6C(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_100E5A3A8(v5, v1 + v4, v6, a1);
}

uint64_t sub_100132F10(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_100033F68;
  return sub_1000D5814(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_100133050()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100133124(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_100033F68;
  return sub_1000D4CA4(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_100133264(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_100033F68;
  return sub_1000D43FC(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1001333A4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_100033F68;
  return sub_1000D3B1C(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1001334E4(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_100133570()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100133664(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_100033F68;
  return sub_1000D328C(a1, v6, v7, v8, v9, v11, v12);
}

void sub_1001337A0(char a1, uint64_t a2)
{
  sub_1000D31B8(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1001337A8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1001338AC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = v1[5];
  uint64_t v11 = *(void *)((char *)v1 + v6);
  uint64_t v12 = (uint64_t)v1 + v5;
  uint64_t v13 = *(void *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100033F68;
  return sub_1000D1EC4(a1, v7, v8, v9, v10, v12, v11, v13);
}

uint64_t sub_100133A08()
{
  return sub_100133A14(&qword_10163C0D0);
}

uint64_t sub_100133A14(uint64_t *a1)
{
  uint64_t v2 = sub_10000588C(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = ((*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  swift_release();

  return _swift_deallocObject(v1, v7, v6);
}

uint64_t sub_100133AB8()
{
  return sub_10012FE48(&qword_10163C0D0);
}

unsigned char *storeEnumTagSinglePayload for BeaconSharingEntitlement(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100133B60);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingEntitlement()
{
  return &type metadata for BeaconSharingEntitlement;
}

unsigned char *storeEnumTagSinglePayload for BeaconServiceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100133C64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconServiceError()
{
  return &type metadata for BeaconServiceError;
}

uint64_t getEnumTagSinglePayload for BeaconSharingService.BeaconSharingServiceError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BeaconSharingService.BeaconSharingServiceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100133DF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingService.BeaconSharingServiceError()
{
  return &type metadata for BeaconSharingService.BeaconSharingServiceError;
}

unint64_t sub_100133E34()
{
  unint64_t result = qword_10163C0D8;
  if (!qword_10163C0D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C0D8);
  }
  return result;
}

unint64_t sub_100133E8C()
{
  unint64_t result = qword_10163C0E0;
  if (!qword_10163C0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C0E0);
  }
  return result;
}

unint64_t sub_100133EE4()
{
  unint64_t result = qword_10163C0E8;
  if (!qword_10163C0E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C0E8);
  }
  return result;
}

unint64_t sub_100133F3C()
{
  unint64_t result = qword_10163C0F0;
  if (!qword_10163C0F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C0F0);
  }
  return result;
}

uint64_t sub_100133F90()
{
  return sub_10010D614();
}

uint64_t sub_100134010()
{
  return sub_10010E848();
}

uint64_t sub_1001343BC(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v3, v4);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v1)
  {
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v3);
}

double sub_100134714@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100135A98(a1, v11);
  if (!v2)
  {
    long long v5 = v19;
    a2[8] = v18;
    a2[9] = v5;
    long long v6 = v21;
    a2[10] = v20;
    a2[11] = v6;
    long long v7 = v15;
    a2[4] = v14;
    a2[5] = v7;
    long long v8 = v17;
    a2[6] = v16;
    a2[7] = v8;
    long long v9 = v11[1];
    *a2 = v11[0];
    a2[1] = v9;
    double result = *(double *)&v12;
    long long v10 = v13;
    a2[2] = v12;
    a2[3] = v10;
  }
  return result;
}

uint64_t sub_100134778(void *a1)
{
  return sub_1001343BC(a1);
}

double sub_100134790@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,unint64_t a21,uint64_t a22,unint64_t a23)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v23) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_70;
      }
      uint64_t v23 = (int)v23;
LABEL_6:
      if (v23 != 89) {
        goto LABEL_90;
      }
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v27) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_72;
          }
          uint64_t v27 = (int)v27;
LABEL_12:
          if (v27 != 32) {
            goto LABEL_91;
          }
          switch(a8 >> 62)
          {
            case 1uLL:
              LODWORD(v30) = HIDWORD(a7) - a7;
              if (__OFSUB__(HIDWORD(a7), a7)) {
                goto LABEL_74;
              }
              uint64_t v30 = (int)v30;
LABEL_18:
              if (v30 != 100) {
                goto LABEL_92;
              }
              switch(a11 >> 62)
              {
                case 1uLL:
                  LODWORD(v33) = HIDWORD(a10) - a10;
                  if (__OFSUB__(HIDWORD(a10), a10)) {
                    goto LABEL_76;
                  }
                  uint64_t v33 = (int)v33;
LABEL_24:
                  if (v33 != 1) {
                    goto LABEL_93;
                  }
                  switch(a6 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v36) = HIDWORD(a5) - a5;
                      if (__OFSUB__(HIDWORD(a5), a5)) {
                        goto LABEL_78;
                      }
                      uint64_t v36 = (int)v36;
LABEL_30:
                      if (v36 != 60) {
                        goto LABEL_94;
                      }
                      break;
                    case 2uLL:
                      uint64_t v38 = *(void *)(a5 + 16);
                      uint64_t v37 = *(void *)(a5 + 24);
                      BOOL v26 = __OFSUB__(v37, v38);
                      uint64_t v36 = v37 - v38;
                      if (!v26) {
                        goto LABEL_30;
                      }
                      goto LABEL_79;
                    case 3uLL:
                      goto LABEL_94;
                    default:
                      uint64_t v36 = BYTE6(a6);
                      goto LABEL_30;
                  }
                  break;
                case 2uLL:
                  uint64_t v35 = *(void *)(a10 + 16);
                  uint64_t v34 = *(void *)(a10 + 24);
                  BOOL v26 = __OFSUB__(v34, v35);
                  uint64_t v33 = v34 - v35;
                  if (!v26) {
                    goto LABEL_24;
                  }
                  goto LABEL_77;
                case 3uLL:
                  goto LABEL_93;
                default:
                  uint64_t v33 = BYTE6(a11);
                  goto LABEL_24;
              }
              break;
            case 2uLL:
              uint64_t v32 = *(void *)(a7 + 16);
              uint64_t v31 = *(void *)(a7 + 24);
              BOOL v26 = __OFSUB__(v31, v32);
              uint64_t v30 = v31 - v32;
              if (!v26) {
                goto LABEL_18;
              }
              goto LABEL_75;
            case 3uLL:
              goto LABEL_92;
            default:
              uint64_t v30 = BYTE6(a8);
              goto LABEL_18;
          }
          break;
        case 2uLL:
          uint64_t v29 = *(void *)(a3 + 16);
          uint64_t v28 = *(void *)(a3 + 24);
          BOOL v26 = __OFSUB__(v28, v29);
          uint64_t v27 = v28 - v29;
          if (!v26) {
            goto LABEL_12;
          }
          goto LABEL_73;
        case 3uLL:
          goto LABEL_91;
        default:
          uint64_t v27 = BYTE6(a4);
          goto LABEL_12;
      }
      break;
    case 2uLL:
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v24 = *(void *)(a1 + 24);
      BOOL v26 = __OFSUB__(v24, v25);
      uint64_t v23 = v24 - v25;
      if (!v26) {
        goto LABEL_6;
      }
      goto LABEL_71;
    case 3uLL:
      goto LABEL_90;
    default:
      uint64_t v23 = BYTE6(a2);
      goto LABEL_6;
  }
  switch(a13 >> 62)
  {
    case 1uLL:
      LODWORD(v39) = HIDWORD(a12) - a12;
      if (__OFSUB__(HIDWORD(a12), a12))
      {
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }
      uint64_t v39 = (int)v39;
LABEL_35:
      if (v39 != 706)
      {
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
        JUMPOUT(0x100134C18);
      }
      switch(a15 >> 62)
      {
        case 1uLL:
          LODWORD(v42) = HIDWORD(a14) - a14;
          if (__OFSUB__(HIDWORD(a14), a14)) {
            goto LABEL_80;
          }
          uint64_t v42 = (int)v42;
LABEL_41:
          if (v42 != 2) {
            goto LABEL_95;
          }
          switch(a17 >> 62)
          {
            case 1uLL:
              LODWORD(v45) = HIDWORD(a16) - a16;
              if (__OFSUB__(HIDWORD(a16), a16)) {
                goto LABEL_68;
              }
              uint64_t v45 = (int)v45;
LABEL_46:
              if (v45 != 554) {
                goto LABEL_89;
              }
              switch(a19 >> 62)
              {
                case 1uLL:
                  LODWORD(v48) = HIDWORD(a18) - a18;
                  if (__OFSUB__(HIDWORD(a18), a18)) {
                    goto LABEL_82;
                  }
                  uint64_t v48 = (int)v48;
LABEL_52:
                  if (v48 != 2) {
                    goto LABEL_96;
                  }
                  switch(a21 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v51) = HIDWORD(a20) - a20;
                      if (__OFSUB__(HIDWORD(a20), a20)) {
                        goto LABEL_84;
                      }
                      uint64_t v51 = (int)v51;
LABEL_58:
                      if (v51 != 8) {
                        goto LABEL_97;
                      }
                      switch(a23 >> 62)
                      {
                        case 1uLL:
                          LODWORD(v54) = HIDWORD(a22) - a22;
                          if (__OFSUB__(HIDWORD(a22), a22)) {
                            goto LABEL_86;
                          }
                          uint64_t v54 = (int)v54;
LABEL_64:
                          if (v54 != 24) {
                            goto LABEL_98;
                          }
                          *(void *)a9 = a1;
                          *(void *)(a9 + 8) = a2;
                          *(void *)(a9 + 16) = a3;
                          *(void *)(a9 + 24) = a4;
                          *(void *)(a9 + 32) = a5;
                          *(void *)(a9 + 40) = a6;
                          *(void *)(a9 + 48) = a7;
                          *(void *)(a9 + 56) = a8;
                          *(void *)(a9 + 64) = a10;
                          *(void *)(a9 + 72) = a11;
                          *(void *)(a9 + 80) = a12;
                          *(void *)(a9 + 88) = a13;
                          *(void *)(a9 + 96) = a14;
                          *(void *)(a9 + 104) = a15;
                          *(void *)(a9 + 112) = a16;
                          *(void *)(a9 + 120) = a17;
                          *(void *)(a9 + 128) = a18;
                          *(void *)(a9 + 136) = a19;
                          *(void *)(a9 + 144) = a20;
                          *(void *)(a9 + 152) = a21;
                          *(void *)(a9 + 160) = a22;
                          *(void *)(a9 + 168) = a23;
                          double result = 0.0;
                          *(_OWORD *)(a9 + 176) = xmmword_101347BB0;
                          return result;
                        case 2uLL:
                          uint64_t v56 = *(void *)(a22 + 16);
                          uint64_t v55 = *(void *)(a22 + 24);
                          BOOL v26 = __OFSUB__(v55, v56);
                          uint64_t v54 = v55 - v56;
                          if (!v26) {
                            goto LABEL_64;
                          }
                          goto LABEL_87;
                        case 3uLL:
                          goto LABEL_98;
                        default:
                          uint64_t v54 = BYTE6(a23);
                          goto LABEL_64;
                      }
                    case 2uLL:
                      uint64_t v53 = *(void *)(a20 + 16);
                      uint64_t v52 = *(void *)(a20 + 24);
                      BOOL v26 = __OFSUB__(v52, v53);
                      uint64_t v51 = v52 - v53;
                      if (!v26) {
                        goto LABEL_58;
                      }
                      goto LABEL_85;
                    case 3uLL:
                      goto LABEL_97;
                    default:
                      uint64_t v51 = BYTE6(a21);
                      goto LABEL_58;
                  }
                case 2uLL:
                  uint64_t v50 = *(void *)(a18 + 16);
                  uint64_t v49 = *(void *)(a18 + 24);
                  BOOL v26 = __OFSUB__(v49, v50);
                  uint64_t v48 = v49 - v50;
                  if (!v26) {
                    goto LABEL_52;
                  }
                  goto LABEL_83;
                case 3uLL:
                  goto LABEL_96;
                default:
                  uint64_t v48 = BYTE6(a19);
                  goto LABEL_52;
              }
            case 2uLL:
              uint64_t v47 = *(void *)(a16 + 16);
              uint64_t v46 = *(void *)(a16 + 24);
              BOOL v26 = __OFSUB__(v46, v47);
              uint64_t v45 = v46 - v47;
              if (!v26) {
                goto LABEL_46;
              }
              goto LABEL_69;
            default:
              goto LABEL_89;
          }
        case 2uLL:
          uint64_t v44 = *(void *)(a14 + 16);
          uint64_t v43 = *(void *)(a14 + 24);
          BOOL v26 = __OFSUB__(v43, v44);
          uint64_t v42 = v43 - v44;
          if (!v26) {
            goto LABEL_41;
          }
          goto LABEL_81;
        case 3uLL:
          goto LABEL_95;
        default:
          uint64_t v42 = BYTE6(a15);
          goto LABEL_41;
      }
    case 2uLL:
      uint64_t v41 = *(void *)(a12 + 16);
      uint64_t v40 = *(void *)(a12 + 24);
      BOOL v26 = __OFSUB__(v40, v41);
      uint64_t v39 = v40 - v41;
      if (!v26) {
        goto LABEL_35;
      }
      goto LABEL_67;
    default:
      goto LABEL_88;
  }
}

double sub_100134CC8@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, unint64_t a17)
{
  uint64_t v22 = 0;
  switch(a6 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a5), a5)) {
        goto LABEL_41;
      }
      uint64_t v22 = HIDWORD(a5) - (int)a5;
LABEL_6:
      sub_1000361E0(a5, a6);
LABEL_7:
      if (__OFSUB__(60, v22))
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        JUMPOUT(0x1001352A0);
      }
      *(void *)&v84[0] = sub_10085E9A4(60 - v22);
      *((void *)&v84[0] + 1) = v25;
      sub_10072AD40((uint64_t *)v84, 0);
      long long v26 = v84[0];
      Data.append(_:)();
      sub_10001CFB8(v26, *((unint64_t *)&v26 + 1));
      uint64_t v27 = 0;
      switch(a8 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(a7), a7)) {
            goto LABEL_43;
          }
          uint64_t v27 = HIDWORD(a7) - (int)a7;
LABEL_13:
          sub_1000361E0(a7, a8);
LABEL_14:
          if (__OFSUB__(100, v27)) {
            goto LABEL_39;
          }
          *(void *)&v84[0] = sub_10085E9A4(100 - v27);
          *((void *)&v84[0] + 1) = v30;
          sub_10072AD40((uint64_t *)v84, 0);
          long long v31 = v84[0];
          Data.append(_:)();
          sub_10001CFB8(v31, *((unint64_t *)&v31 + 1));
          uint64_t v32 = 0;
          switch(a11 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(a10), a10)) {
                goto LABEL_45;
              }
              uint64_t v32 = HIDWORD(a10) - (int)a10;
LABEL_20:
              sub_1000361E0(a10, a11);
LABEL_21:
              if (__OFSUB__(706, v32)) {
                goto LABEL_40;
              }
              *(void *)&v84[0] = sub_10085E9A4(706 - v32);
              *((void *)&v84[0] + 1) = v35;
              sub_10072AD40((uint64_t *)v84, 0);
              long long v36 = v84[0];
              Data.append(_:)();
              sub_10001CFB8(v36, *((unint64_t *)&v36 + 1));
              uint64_t v37 = 0;
              switch(a8 >> 62)
              {
                case 1uLL:
                  LODWORD(v37) = HIDWORD(a7) - a7;
                  if (__OFSUB__(HIDWORD(a7), a7)) {
                    goto LABEL_47;
                  }
                  uint64_t v37 = (int)v37;
LABEL_27:
                  unint64_t v77 = a2;
                  *(void *)&v84[0] = v37;
                  sub_1000361E0(a5, a6);
                  sub_1000361E0(a7, a8);
                  sub_10000D64C();
                  uint64_t v41 = FixedWidthInteger.data.getter();
                  unint64_t v43 = v42;
                  uint64_t v44 = Data.trimmed.getter();
                  unint64_t v75 = v45;
                  uint64_t v76 = v44;
                  sub_10001CFB8(v41, v43);
                  uint64_t v46 = 0;
                  switch(a11 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v46) = HIDWORD(a10) - a10;
                      if (__OFSUB__(HIDWORD(a10), a10)) {
                        goto LABEL_49;
                      }
                      uint64_t v46 = (int)v46;
LABEL_32:
                      uint64_t v74 = a3;
                      *(void *)&v84[0] = v46;
                      sub_1000361E0(a10, a11);
                      uint64_t v49 = FixedWidthInteger.data.getter();
                      unint64_t v51 = v50;
                      uint64_t v52 = Data.trimmed.getter();
                      unint64_t v73 = v53;
                      sub_10001CFB8(v49, v51);
                      uint64_t v54 = 0;
                      switch(a13 >> 62)
                      {
                        case 1uLL:
                          LODWORD(v54) = HIDWORD(a12) - a12;
                          if (__OFSUB__(HIDWORD(a12), a12)) {
                            goto LABEL_51;
                          }
                          uint64_t v54 = (int)v54;
LABEL_37:
                          *(void *)&v84[0] = v54;
                          uint64_t v57 = FixedWidthInteger.data.getter();
                          unint64_t v59 = v58;
                          uint64_t v60 = Data.trimmed.getter();
                          unint64_t v72 = a4;
                          unint64_t v62 = v61;
                          sub_10001CFB8(v57, v59);
                          sub_10001CFB8(a10, a11);
                          sub_10001CFB8(a7, a8);
                          sub_10001CFB8(a5, a6);
                          sub_10001CFB8(a10, a11);
                          sub_10001CFB8(a7, a8);
                          sub_10001CFB8(a5, a6);
                          sub_100134790(a1, v77, v74, v72, a5, a6, a7, a8, (uint64_t)v84, v76, v75, a10, a11, v52, v73, a12, a13, v60, v62,
                            a14,
                            a15,
                            a16,
                            a17);
                          long long v63 = v92;
                          long long v64 = v93;
                          long long v65 = v90;
                          a9[8] = v91;
                          a9[9] = v63;
                          long long v66 = v94;
                          a9[10] = v64;
                          a9[11] = v66;
                          long long v67 = v88;
                          long long v68 = v89;
                          a9[4] = v87;
                          a9[5] = v67;
                          a9[6] = v68;
                          a9[7] = v65;
                          long long v69 = v84[1];
                          *a9 = v84[0];
                          a9[1] = v69;
                          double result = *(double *)&v85;
                          long long v71 = v86;
                          a9[2] = v85;
                          a9[3] = v71;
                          return result;
                        case 2uLL:
                          uint64_t v56 = *(void *)(a12 + 16);
                          uint64_t v55 = *(void *)(a12 + 24);
                          BOOL v40 = __OFSUB__(v55, v56);
                          uint64_t v54 = v55 - v56;
                          if (!v40) {
                            goto LABEL_37;
                          }
                          goto LABEL_52;
                        case 3uLL:
                          goto LABEL_37;
                        default:
                          uint64_t v54 = BYTE6(a13);
                          goto LABEL_37;
                      }
                    case 2uLL:
                      uint64_t v48 = *(void *)(a10 + 16);
                      uint64_t v47 = *(void *)(a10 + 24);
                      BOOL v40 = __OFSUB__(v47, v48);
                      uint64_t v46 = v47 - v48;
                      if (!v40) {
                        goto LABEL_32;
                      }
                      goto LABEL_50;
                    case 3uLL:
                      goto LABEL_32;
                    default:
                      uint64_t v46 = BYTE6(a11);
                      goto LABEL_32;
                  }
                case 2uLL:
                  uint64_t v39 = *(void *)(a7 + 16);
                  uint64_t v38 = *(void *)(a7 + 24);
                  BOOL v40 = __OFSUB__(v38, v39);
                  uint64_t v37 = v38 - v39;
                  if (!v40) {
                    goto LABEL_27;
                  }
                  goto LABEL_48;
                case 3uLL:
                  goto LABEL_27;
                default:
                  uint64_t v37 = BYTE6(a8);
                  goto LABEL_27;
              }
            case 2uLL:
              uint64_t v34 = *(void *)(a10 + 16);
              uint64_t v33 = *(void *)(a10 + 24);
              uint64_t v32 = v33 - v34;
              if (!__OFSUB__(v33, v34)) {
                goto LABEL_20;
              }
              goto LABEL_46;
            case 3uLL:
              goto LABEL_21;
            default:
              uint64_t v32 = BYTE6(a11);
              goto LABEL_21;
          }
        case 2uLL:
          uint64_t v29 = *(void *)(a7 + 16);
          uint64_t v28 = *(void *)(a7 + 24);
          uint64_t v27 = v28 - v29;
          if (!__OFSUB__(v28, v29)) {
            goto LABEL_13;
          }
          goto LABEL_44;
        case 3uLL:
          goto LABEL_14;
        default:
          uint64_t v27 = BYTE6(a8);
          goto LABEL_14;
      }
    case 2uLL:
      uint64_t v24 = *(void *)(a5 + 16);
      uint64_t v23 = *(void *)(a5 + 24);
      uint64_t v22 = v23 - v24;
      if (!__OFSUB__(v23, v24)) {
        goto LABEL_6;
      }
      goto LABEL_42;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v22 = BYTE6(a6);
      goto LABEL_7;
  }
}

uint64_t destroy for AirPodsLEFinalizePairingCommandPayload(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  sub_10001CFB8(a1[4], a1[5]);
  sub_10001CFB8(a1[6], a1[7]);
  sub_10001CFB8(a1[8], a1[9]);
  sub_10001CFB8(a1[10], a1[11]);
  sub_10001CFB8(a1[12], a1[13]);
  sub_10001CFB8(a1[14], a1[15]);
  sub_10001CFB8(a1[16], a1[17]);
  sub_10001CFB8(a1[18], a1[19]);
  uint64_t result = sub_10001CFB8(a1[20], a1[21]);
  unint64_t v3 = a1[23];
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = a1[22];
    return sub_10001CFB8(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for AirPodsLEFinalizePairingCommandPayload(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  uint64_t v12 = a2[8];
  unint64_t v13 = a2[9];
  sub_1000361E0(v12, v13);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  uint64_t v14 = a2[10];
  unint64_t v15 = a2[11];
  sub_1000361E0(v14, v15);
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  uint64_t v16 = a2[12];
  unint64_t v17 = a2[13];
  sub_1000361E0(v16, v17);
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  uint64_t v18 = a2[14];
  unint64_t v19 = a2[15];
  sub_1000361E0(v18, v19);
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  uint64_t v20 = a2[16];
  unint64_t v21 = a2[17];
  sub_1000361E0(v20, v21);
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  uint64_t v22 = a2[18];
  unint64_t v23 = a2[19];
  sub_1000361E0(v22, v23);
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  uint64_t v24 = a2[20];
  unint64_t v25 = a2[21];
  sub_1000361E0(v24, v25);
  *(void *)(a1 + 160) = v24;
  *(void *)(a1 + 168) = v25;
  long long v26 = a2 + 22;
  unint64_t v27 = a2[23];
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)v26;
  }
  else
  {
    uint64_t v28 = *v26;
    sub_1000361E0(*v26, v27);
    *(void *)(a1 + 176) = v28;
    *(void *)(a1 + 184) = v27;
  }
  return a1;
}

uint64_t *assignWithCopy for AirPodsLEFinalizePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[4];
  unint64_t v13 = a2[5];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[6];
  unint64_t v17 = a2[7];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[6];
  unint64_t v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v20 = a2[8];
  unint64_t v21 = a2[9];
  sub_1000361E0(v20, v21);
  uint64_t v22 = a1[8];
  unint64_t v23 = a1[9];
  a1[8] = v20;
  a1[9] = v21;
  sub_10001CFB8(v22, v23);
  uint64_t v24 = a2[10];
  unint64_t v25 = a2[11];
  sub_1000361E0(v24, v25);
  uint64_t v26 = a1[10];
  unint64_t v27 = a1[11];
  a1[10] = v24;
  a1[11] = v25;
  sub_10001CFB8(v26, v27);
  uint64_t v28 = a2[12];
  unint64_t v29 = a2[13];
  sub_1000361E0(v28, v29);
  uint64_t v30 = a1[12];
  unint64_t v31 = a1[13];
  a1[12] = v28;
  a1[13] = v29;
  sub_10001CFB8(v30, v31);
  uint64_t v32 = a2[14];
  unint64_t v33 = a2[15];
  sub_1000361E0(v32, v33);
  uint64_t v34 = a1[14];
  unint64_t v35 = a1[15];
  a1[14] = v32;
  a1[15] = v33;
  sub_10001CFB8(v34, v35);
  uint64_t v36 = a2[16];
  unint64_t v37 = a2[17];
  sub_1000361E0(v36, v37);
  uint64_t v38 = a1[16];
  unint64_t v39 = a1[17];
  a1[16] = v36;
  a1[17] = v37;
  sub_10001CFB8(v38, v39);
  uint64_t v40 = a2[18];
  unint64_t v41 = a2[19];
  sub_1000361E0(v40, v41);
  uint64_t v42 = a1[18];
  unint64_t v43 = a1[19];
  a1[18] = v40;
  a1[19] = v41;
  sub_10001CFB8(v42, v43);
  uint64_t v44 = a2[20];
  unint64_t v45 = a2[21];
  sub_1000361E0(v44, v45);
  uint64_t v46 = a1[20];
  unint64_t v47 = a1[21];
  a1[20] = v44;
  a1[21] = v45;
  sub_10001CFB8(v46, v47);
  uint64_t v48 = a2 + 22;
  unint64_t v49 = a2[23];
  if ((unint64_t)a1[23] >> 60 != 15)
  {
    if (v49 >> 60 != 15)
    {
      uint64_t v51 = *v48;
      sub_1000361E0(*v48, v49);
      uint64_t v52 = a1[22];
      unint64_t v53 = a1[23];
      a1[22] = v51;
      a1[23] = v49;
      sub_10001CFB8(v52, v53);
      return a1;
    }
    sub_1001356D0((uint64_t)(a1 + 22));
    goto LABEL_6;
  }
  if (v49 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 11) = *(_OWORD *)v48;
    return a1;
  }
  uint64_t v50 = *v48;
  sub_1000361E0(*v48, v49);
  a1[22] = v50;
  a1[23] = v49;
  return a1;
}

uint64_t sub_1001356D0(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for AirPodsLEFinalizePairingCommandPayload(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t *assignWithTake for AirPodsLEFinalizePairingCommandPayload(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a1[8];
  unint64_t v13 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_10001CFB8(v12, v13);
  uint64_t v14 = a1[10];
  unint64_t v15 = a1[11];
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a1[12];
  unint64_t v17 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  sub_10001CFB8(v16, v17);
  uint64_t v18 = a1[14];
  unint64_t v19 = a1[15];
  *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 112);
  sub_10001CFB8(v18, v19);
  uint64_t v20 = a1[16];
  unint64_t v21 = a1[17];
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
  sub_10001CFB8(v20, v21);
  uint64_t v22 = a1[18];
  unint64_t v23 = a1[19];
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  sub_10001CFB8(v22, v23);
  uint64_t v24 = a1[20];
  unint64_t v25 = a1[21];
  *((_OWORD *)a1 + 10) = *(_OWORD *)(a2 + 160);
  sub_10001CFB8(v24, v25);
  uint64_t v26 = (uint64_t *)(a2 + 176);
  unint64_t v27 = a1[23];
  if (v27 >> 60 != 15)
  {
    unint64_t v28 = *(void *)(a2 + 184);
    if (v28 >> 60 != 15)
    {
      uint64_t v29 = a1[22];
      a1[22] = *v26;
      a1[23] = v28;
      sub_10001CFB8(v29, v27);
      return a1;
    }
    sub_1001356D0((uint64_t)(a1 + 22));
  }
  *((_OWORD *)a1 + 11) = *(_OWORD *)v26;
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLEFinalizePairingCommandPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 192)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsLEFinalizePairingCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 192) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEFinalizePairingCommandPayload()
{
  return &type metadata for AirPodsLEFinalizePairingCommandPayload;
}

unint64_t sub_10013596C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10013599C();
  unint64_t result = sub_1001359F0();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10013599C()
{
  unint64_t result = qword_10163C100;
  if (!qword_10163C100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C100);
  }
  return result;
}

unint64_t sub_1001359F0()
{
  unint64_t result = qword_10163C108;
  if (!qword_10163C108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C108);
  }
  return result;
}

unint64_t sub_100135A44()
{
  unint64_t result = qword_10163C110;
  if (!qword_10163C110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C110);
  }
  return result;
}

uint64_t sub_100135A98@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v63, v64);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v63);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000BD078((uint64_t)v63, v64);
    uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v66 = v10;
    sub_1000BD078((uint64_t)v63, v64);
    uint64_t v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v59 = v12;
    uint64_t v60 = v11;
    sub_1000BD078((uint64_t)v63, v64);
    uint64_t v13 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v57 = v14;
    uint64_t v58 = v9;
    uint64_t v61 = v13;
    unint64_t v62 = v14;
    uint64_t v56 = v13;
    sub_1000361E0(v60, v59);
    sub_1000362FC();
    uint64_t v15 = DataProtocol.intValue.getter();
    sub_100435A9C(v15, v60, v59, &v61);
    uint64_t v54 = v61;
    unint64_t v55 = v62;
    sub_1000BD078((uint64_t)v63, v64);
    uint64_t v51 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v52 = v16;
    sub_1000BD078((uint64_t)v63, v64);
    uint64_t v17 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v50 = v18;
    sub_1000BD078((uint64_t)v63, v64);
    uint64_t v61 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v62 = v19;
    uint64_t v48 = v61;
    unint64_t v49 = v19;
    sub_1000361E0(v17, v50);
    uint64_t v20 = DataProtocol.intValue.getter();
    sub_100435A9C(v20, v17, v50, &v61);
    uint64_t v46 = v61;
    unint64_t v47 = v62;
    sub_1000BD078((uint64_t)v63, v64);
    uint64_t v21 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v44 = v22;
    uint64_t v45 = v21;
    sub_1000BD078((uint64_t)v63, v64);
    uint64_t v61 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v62 = v23;
    unint64_t v42 = v23;
    uint64_t v43 = v61;
    sub_1000361E0(v45, v44);
    uint64_t v24 = DataProtocol.intValue.getter();
    sub_100435A9C(v24, v45, v44, &v61);
    uint64_t v53 = v61;
    unint64_t v41 = v62;
    sub_1000BD078((uint64_t)v63, v64);
    uint64_t v25 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v39 = v26;
    uint64_t v40 = v25;
    sub_1000BD078((uint64_t)v63, v64);
    uint64_t v27 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v29 = v28;
    sub_10001CFB8(v45, v44);
    sub_10001CFB8(v17, v50);
    sub_10001CFB8(v60, v59);
    sub_100134790(v7, v8, v58, v66, v51, v52, v54, v55, (uint64_t)v65, v56, v57, v46, v47, v48, v49, v53, v41, v43, v42,
      v40,
      v39,
      v27,
      v29);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v63);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    long long v31 = v65[9];
    long long v32 = v65[10];
    long long v33 = v65[7];
    a2[8] = v65[8];
    a2[9] = v31;
    long long v34 = v65[11];
    a2[10] = v32;
    a2[11] = v34;
    long long v35 = v65[5];
    long long v36 = v65[6];
    a2[4] = v65[4];
    a2[5] = v35;
    a2[6] = v36;
    a2[7] = v33;
    long long v37 = v65[1];
    *a2 = v65[0];
    a2[1] = v37;
    long long v38 = v65[3];
    a2[2] = v65[2];
    a2[3] = v38;
  }
  return result;
}

uint64_t sub_100136064()
{
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FindMyNetworkPublishDateProvider()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for FindMyNetworkPublishDateProviderFactory(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100136154);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FindMyNetworkPublishDateProviderFactory()
{
  return &type metadata for FindMyNetworkPublishDateProviderFactory;
}

unint64_t sub_100136190()
{
  unint64_t result = qword_10163C1F0;
  if (!qword_10163C1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C1F0);
  }
  return result;
}

BOOL sub_1001361E4(char *a1, char *a2)
{
  return qword_10134C1F0[*a1] == qword_10134C1F0[*a2];
}

Swift::Int sub_100136208()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_10134C1F0[v1]);
  return Hasher._finalize()();
}

void sub_100136258()
{
  Hasher._combine(_:)(qword_10134C1F0[*v0]);
}

Swift::Int sub_100136290()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_10134C1F0[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1001362DC@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100155248(*a1);
  *a2 = result;
  return result;
}

void sub_100136308(void *a1@<X8>)
{
  *a1 = qword_10134C1F0[*v1];
}

uint64_t sub_100136320(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10015AF08();
  unint64_t v5 = sub_10000D64C();

  return Error<>._code.getter(a1, a2, v4, v5);
}

unint64_t sub_100136378()
{
  uint64_t v1 = type metadata accessor for StandaloneBeacon();
  __chkstk_darwin(v1 - 8);
  int v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult();
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001570F0(v0, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_100157D84((uint64_t)v12, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
    unint64_t v24 = 0;
    unint64_t v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    unint64_t v24 = 0xD000000000000014;
    unint64_t v25 = 0x80000001013F25A0;
    type metadata accessor for UUID();
    sub_100158020((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 41;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    unint64_t v15 = v24;
    unint64_t v16 = (uint64_t (*)(void))type metadata accessor for StandaloneBeacon;
    uint64_t v17 = (uint64_t)v3;
  }
  else
  {
    uint64_t v18 = (uint64_t)&v12[*(int *)(sub_10000588C(&qword_101639B90) + 48)];
    sub_100157D84((uint64_t)v12, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    sub_100157D84(v18, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v24 = 0;
    unint64_t v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    unint64_t v24 = 0xD000000000000010;
    unint64_t v25 = 0x80000001013F25C0;
    type metadata accessor for UUID();
    sub_100158020((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0x6E6F63616562202CLL;
    v20._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 41;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    unint64_t v15 = v24;
    sub_100157DEC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v16 = type metadata accessor for OwnedBeaconGroup;
    uint64_t v17 = (uint64_t)v9;
  }
  sub_100157DEC(v17, v16);
  return v15;
}

uint64_t sub_10013678C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10163C1F8);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10163C1F8);
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170F098);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100136854()
{
  if (qword_1016368A0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_100010324(v0, (uint64_t)qword_10163C1F8);
}

uint64_t sub_1001368B8(uint64_t a1)
{
  return sub_1001368D0(a1, qword_10163C210);
}

uint64_t sub_1001368C4(uint64_t a1)
{
  return sub_1001368D0(a1, qword_10163C228);
}

uint64_t sub_1001368D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_10001E384(v3, a2);
  sub_100010324(v3, (uint64_t)a2);
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
}

uint64_t sub_100136920(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v36 = a4;
  uint64_t v37 = a1;
  int v35 = a3;
  uint64_t v38 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  __chkstk_darwin(v6 - 8);
  long long v34 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  Swift::String v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  static DispatchQoS.unspecified.getter();
  unint64_t v39 = _swiftEmptyArrayStorage;
  sub_100158020((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v4 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 72) = &_swiftEmptySetSingleton;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  sub_10000588C(&qword_101648980);
  swift_allocObject();
  *(void *)(v4 + 104) = PassthroughSubject.init()();
  *(_OWORD *)(v4 + 112) = xmmword_101347BB0;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(void *)(v4 + 160) = 0;
  *(void *)(v4 + 168) = 0xF000000000000000;
  *(void *)(v4 + 176) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v4 + 184) = 0;
  *(void *)(v4 + 192) = 0;
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170F098);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "AirPodsLEPairingManager.init", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = v38;
  *(void *)(v5 + 24) = v37;
  *(void *)(v5 + 32) = v18;
  type metadata accessor for AccessoryPairingValidator();
  uint64_t v19 = swift_allocObject();
  type metadata accessor for DeviceIdentityUtility();
  uint64_t v20 = swift_allocObject();
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  uint64_t v21 = v20 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  uint64_t v22 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  *(void *)(v20 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(void *)(v20 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v20 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 9;
  *(void *)(v19 + 16) = v20;
  *(void *)(v19 + 24) = 0;
  *(void *)(v5 + 48) = v19;
  *(unsigned char *)(v5 + 200) = v35 & 1;
  *(void *)(v5 + 208) = v36;
  uint64_t v23 = (uint64_t)v34;
  UUID.init()();
  unint64_t v24 = *(void **)(v5 + 16);
  type metadata accessor for AccessoryPairingCoordinator();
  swift_allocObject();
  swift_retain();
  uint64_t v25 = sub_101141B24(v23, v19, v24);
  uint64_t v26 = v25;
  if (v25)
  {
    *(void *)(v5 + 64) = v25;
    swift_retain();
    sub_10000588C((uint64_t *)&unk_10165F6A0);
    unsafeFromAsyncTask<A>(_:)();
    uint64_t v27 = v39;
    if (v39)
    {
      swift_release();
      swift_release();
      swift_release();
      *(void *)(v5 + 40) = v27;
      return v5;
    }
    sub_100061234();
    swift_allocError();
    *(void *)uint64_t v28 = 15;
    *(_OWORD *)(v28 + 8) = 0u;
    *(_OWORD *)(v28 + 24) = 0u;
    *(unsigned char *)(v28 + 40) = 11;
    swift_willThrow();
    swift_errorRelease();
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v29, v30))
    {

      swift_release();
      swift_release();
      goto LABEL_11;
    }
    long long v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Missing central manager service!", v31, 2u);
    swift_slowDealloc();
    swift_release();
  }
  swift_release();
LABEL_11:
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  if (v26) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100037A24(*(void *)(v5 + 112), *(void *)(v5 + 120));
  swift_release();
  swift_release();
  sub_1000A1534(*(void *)(v5 + 144));
  sub_100037A24(*(void *)(v5 + 160), *(void *)(v5 + 168));
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for AirPodsLEPairingManager();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t sub_100137020()
{
  uint64_t v1 = v0;
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170F098);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "AirPodsLEPairingManager.deinit", v5, 2u);
    swift_slowDealloc();
  }

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100037A24(*(void *)(v1 + 112), *(void *)(v1 + 120));
  swift_release();
  swift_release();
  sub_1000A1534(*(void *)(v1 + 144));
  sub_100037A24(*(void *)(v1 + 160), *(void *)(v1 + 168));
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1001371A0()
{
  sub_100137020();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AirPodsLEPairingManager()
{
  return self;
}

uint64_t sub_1001371F8()
{
  uint64_t v1 = v0;
  sub_10000588C(&qword_101648980);
  swift_allocObject();
  uint64_t v2 = PassthroughSubject.init()();
  *(void *)(v0 + 104) = v2;
  swift_retain();
  swift_release();
  uint64_t v3 = *(NSObject **)(v0 + 16);
  OS_dispatch_queue.sync<A>(execute:)();
  if (aBlock[0])
  {
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170F098);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Existing pairing session in progress!", v7, 2u);
      swift_slowDealloc();
    }

    aBlock[0] = v2;
    sub_100062734(&qword_10163C7C0, &qword_101648980);
    uint64_t v8 = Publisher.eraseToAnyPublisher()();
    goto LABEL_9;
  }
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100158454;
  *(void *)(v9 + 24) = v1;
  aBlock[4] = sub_100132424;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015B1E00;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v10);
  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v13 = type metadata accessor for Transaction();
    __chkstk_darwin(v13);
    static Transaction.named<A>(_:with:)();
    aBlock[0] = v2;
    sub_100062734(&qword_10163C7C0, &qword_101648980);
    uint64_t v8 = Publisher.eraseToAnyPublisher()();
    swift_release();
LABEL_9:
    swift_release();
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001375D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v6 = *(void **)(a1 + 16);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6) {
    *(unsigned char *)(a1 + 184) = 1;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001376EC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v49 = a3;
  uint64_t v37 = a8;
  int v38 = a5;
  int v39 = a6;
  unint64_t v50 = a4;
  uint64_t v40 = a1;
  uint64_t v42 = a9;
  uint64_t v45 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v48 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  unint64_t v44 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v46 = *(void *)(v12 - 8);
  uint64_t v47 = v12;
  __chkstk_darwin(v12);
  unint64_t v41 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for MACAddress();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v36 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v36 - v18;
  uint64_t v43 = *(void *)(a2 + 16);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v20((char *)&v36 - v18, a7, v14);
  v20((char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v37, v14);
  uint64_t v21 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v22 = (v21 + 42) & ~v21;
  uint64_t v23 = v16 + 7;
  unint64_t v24 = (v16 + 7 + v22) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = (v21 + v24 + 8) & ~v21;
  unint64_t v26 = (v23 + v25) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v49;
  *(void *)(v27 + 16) = a2;
  *(void *)(v27 + 24) = v28;
  *(void *)(v27 + 32) = v50;
  *(unsigned char *)(v27 + 40) = v38;
  *(unsigned char *)(v27 + 41) = v39;
  uint64_t v29 = v27 + v22;
  os_log_type_t v30 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v30(v29, v19, v14);
  *(void *)(v27 + v24) = v40;
  v30(v27 + v25, v36, v14);
  *(void *)(v27 + v26) = v42;
  aBlock[4] = sub_1001585D0;
  aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015B1E50;
  long long v31 = _Block_copy(aBlock);
  swift_retain();
  sub_100037A38(v49, v50);
  swift_retain();
  long long v32 = v41;
  static DispatchQoS.unspecified.getter();
  aBlock[8] = _swiftEmptyArrayStorage;
  sub_100158020((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  long long v34 = v44;
  uint64_t v33 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v34, v33);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v47);
  return swift_release();
}

uint64_t sub_100137B54(void *a1, uint64_t a2, unint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v151 = a8;
  uint64_t v154 = a7;
  uint64_t v165 = type metadata accessor for MACAddress();
  uint64_t v170 = *(void *)(v165 - 8);
  uint64_t v163 = *(void *)(v170 + 64);
  uint64_t v14 = __chkstk_darwin(v165);
  uint64_t v153 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v164 = (char *)&v108 - v16;
  uint64_t v17 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_10000588C(&qword_10163C7C8);
  uint64_t v166 = *(void **)(v158 - 8);
  __chkstk_darwin(v158);
  uint64_t v21 = (char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = (void *)sub_10000588C(&qword_10163C7D0);
  unint64_t v155 = (void (**)(char *, void *))*(v121 - 1);
  __chkstk_darwin(v121);
  uint64_t v112 = (char *)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_10000588C(&qword_10163C7D8);
  uint64_t v125 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v119 = (char *)&v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_10000588C(&qword_10163C7E0);
  uint64_t v128 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v120 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_10000588C(&qword_10163C7E8);
  uint64_t v131 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  char v122 = (char *)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = sub_10000588C(&qword_10163C7F0);
  uint64_t v133 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v124 = (char *)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_10000588C(&qword_10163C7F8);
  uint64_t v135 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v127 = (char *)&v108 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_10000588C(&qword_10163C800);
  uint64_t v137 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  uint64_t v130 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = sub_10000588C(&qword_10163C808);
  uint64_t v141 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v161 = (char *)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_10000588C(&qword_10163C810);
  uint64_t v143 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v140 = (char *)&v108 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_10000588C(&qword_10163C818);
  uint64_t v146 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v145 = (char *)&v108 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = sub_10000588C(&qword_10163C820);
  uint64_t v149 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v162 = (char *)&v108 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = a1[14];
  unint64_t v34 = a1[15];
  a1[14] = a2;
  a1[15] = a3;
  sub_100037A38(a2, a3);
  sub_100037A24(v33, v34);
  *(unsigned char *)(*(void *)(a1[8] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
           + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePair) = a4;
  type metadata accessor for AnalyticsEvent(0);
  int v35 = (char *)swift_allocObject();
  swift_defaultActor_initialize();
  *((void *)v35 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v36 = &v35[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v37 = type metadata accessor for DispatchTime();
  int v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56);
  v38(v36, 1, 1, v37);
  v38(&v35[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v37);
  *((void *)v35 + 15) = 0xD00000000000002CLL;
  *((void *)v35 + 16) = 0x80000001013F40E0;
  a1[24] = v35;
  swift_retain();
  swift_release();
  type metadata accessor for Transaction();
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v35;
  *(unsigned char *)(v39 + 24) = a5;
  uint64_t v148 = v35;
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  type metadata accessor for AccessoryDiscoverySession();
  swift_allocObject();
  uint64_t v40 = sub_1005E6580();
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = 0;
  uint64_t v42 = a6;
  uint64_t v138 = v40;
  uint64_t v43 = (void *)sub_1005E6E24();
  id v171 = (id)a1[2];
  id v44 = v171;
  id v172 = v43;
  uint64_t v160 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v45 = *(void *)(v160 - 8);
  unint64_t v167 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56);
  uint64_t v169 = v45 + 56;
  uint64_t v46 = (uint64_t)v19;
  v167(v19, 1, 1, v160);
  id v111 = v44;
  sub_10000588C((uint64_t *)&unk_101649D90);
  unint64_t v159 = sub_10000584C();
  uint64_t v110 = &protocol conformance descriptor for AnyPublisher<A, B>;
  sub_100062734(&qword_10163C838, (uint64_t *)&unk_101649D90);
  uint64_t v168 = sub_100158020((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
  uint64_t v47 = v21;
  uint64_t v109 = v46;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v46, &qword_10163C6C8);

  swift_release();
  uint64_t v48 = v170;
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v170 + 16);
  unint64_t v50 = v164;
  uint64_t v152 = v42;
  uint64_t v51 = v42;
  uint64_t v52 = v165;
  uint64_t v118 = v170 + 16;
  uint64_t v116 = v49;
  v49(v164, v51, v165);
  uint64_t v53 = *(unsigned __int8 *)(v48 + 80);
  uint64_t v113 = ~v53;
  uint64_t v54 = (v53 + 24) & ~v53;
  uint64_t v114 = v53;
  unint64_t v55 = (v163 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v115 = v53 | 7;
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = a1;
  unint64_t v57 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
  uint64_t v170 = v48 + 32;
  uint64_t v117 = v57;
  v57((char *)(v56 + v54), v50, v52);
  *(void *)(v56 + v55) = v41;
  uint64_t v58 = type metadata accessor for Peripheral();
  uint64_t v108 = &protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
  sub_100062734(&qword_10163C840, &qword_10163C7C8);
  swift_retain();
  uint64_t v139 = v41;
  swift_retain();
  unint64_t v59 = v112;
  uint64_t v60 = v158;
  uint64_t v156 = v58;
  Publisher.compactMap<A>(_:)();
  swift_release();
  ((void (*)(char *, uint64_t))v166[1])(v47, v60);
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  uint64_t v157 = sub_10000588C((uint64_t *)&unk_101649C90);
  sub_100062734(&qword_10163C848, &qword_10163C7D0);
  uint64_t v158 = sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
  uint64_t v61 = v119;
  unint64_t v62 = v121;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  uint64_t v166 = a1;
  swift_release();
  v155[1](v59, v62);
  long long v63 = v111;
  id v172 = v111;
  uint64_t v64 = v109;
  uint64_t v65 = v160;
  v167((char *)v109, 1, 1, v160);
  unint64_t v155 = (void (**)(char *, void *))&protocol conformance descriptor for Publishers.FlatMap<A, B>;
  sub_100062734(&qword_10163C850, &qword_10163C7D8);
  uint64_t v121 = v63;
  unint64_t v66 = v120;
  uint64_t v67 = v123;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v64, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v125 + 8))(v61, v67);
  static Subscribers.Demand.unlimited.getter();
  sub_100062734(&qword_10163C858, &qword_10163C7E0);
  long long v68 = v122;
  uint64_t v69 = v126;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  (*(void (**)(char *, uint64_t))(v128 + 8))(v66, v69);
  uint64_t v70 = v121;
  id v172 = v121;
  uint64_t v71 = v64;
  unint64_t v72 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v167;
  v167((char *)v64, 1, 1, v65);
  sub_100062734(&qword_10163C860, &qword_10163C7E8);
  id v73 = v70;
  uint64_t v74 = v124;
  uint64_t v75 = v71;
  uint64_t v76 = v129;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v75, &qword_10163C6C8);

  unint64_t v77 = v72;
  (*(void (**)(char *, uint64_t))(v131 + 8))(v68, v76);
  static Subscribers.Demand.unlimited.getter();
  sub_100062734(&qword_10163C868, &qword_10163C7F0);
  uint64_t v78 = v127;
  uint64_t v79 = v132;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  (*(void (**)(char *, uint64_t))(v133 + 8))(v74, v79);
  id v172 = v73;
  v77(v75, 1, 1, v65);
  sub_100062734(&qword_10163C870, &qword_10163C7F8);
  id v80 = v73;
  uint64_t v81 = v130;
  uint64_t v82 = v134;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v75, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v135 + 8))(v78, v82);
  sub_100062734(&qword_10163C878, &qword_10163C800);
  uint64_t v83 = v136;
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v137 + 8))(v81, v83);
  if (qword_1016368B0 != -1) {
    swift_once();
  }
  uint64_t v84 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_100010324(v84, (uint64_t)qword_10163C228);
  id v172 = v80;
  v167((char *)v75, 1, 1, v160);
  sub_100062734(&qword_10163C880, &qword_10163C808);
  id v85 = v80;
  long long v86 = v140;
  uint64_t v87 = v142;
  long long v88 = v161;
  Publisher.timeout<A>(_:scheduler:options:customError:)();
  sub_10001DAB4(v75, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v141 + 8))(v88, v87);
  sub_10000588C(&qword_101655B50);
  sub_100062734(&qword_10163C888, &qword_10163C810);
  long long v89 = v145;
  uint64_t v90 = v144;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v143 + 8))(v86, v90);
  sub_10000588C(&qword_10163C890);
  sub_100062734(&qword_10163C898, &qword_10163C818);
  sub_100062734(&qword_10163C8A0, &qword_10163C890);
  uint64_t v91 = v147;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v146 + 8))(v89, v91);
  uint64_t v92 = swift_allocObject();
  swift_weakInit();
  long long v94 = v164;
  uint64_t v93 = v165;
  uint64_t v95 = v116;
  v116(v164, v151, v165);
  uint64_t v96 = v153;
  v95(v153, v152, v93);
  uint64_t v97 = (v114 + 48) & v113;
  uint64_t v98 = (v163 + v114 + v97) & v113;
  uint64_t v99 = (char *)swift_allocObject();
  uint64_t v100 = v154;
  *((void *)v99 + 2) = v92;
  *((void *)v99 + 3) = v100;
  uint64_t v101 = v139;
  *((void *)v99 + 4) = v138;
  *((void *)v99 + 5) = v101;
  uint64_t v102 = &v99[v97];
  uint64_t v103 = v117;
  v117(v102, v94, v93);
  v103(&v99[v98], v96, v93);
  sub_100062734(&qword_10163C8A8, &qword_10163C820);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v104 = v150;
  uint64_t v105 = v162;
  uint64_t v106 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v149 + 8))(v105, v104);
  v166[17] = v106;
  swift_release();
  return swift_release();
}

uint64_t sub_10013911C(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 64) = a2;
  *(void *)(v2 + 40) = a1;
  sub_10000588C(&qword_101639428);
  *(void *)(v2 + 48) = swift_task_alloc();
  *(void *)(v2 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_1001391C8, a1, 0);
}

uint64_t sub_1001391C8()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  static DispatchTime.now()();
  uint64_t v4 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 0, 1, v4);
  sub_10001D608(v1, v2, &qword_101639428);
  uint64_t v5 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess();
  sub_100062604(v2, v5, &qword_101639428);
  swift_endAccess();
  return _swift_task_switch(sub_1001392E0, v3, 0);
}

uint64_t sub_1001392E0()
{
  sub_10117D500(*(void **)(v0 + 40), *(unsigned char *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10013936C(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v59 = a3;
  uint64_t v60 = a5;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v57 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v56 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v55 = (char *)&v50 - v11;
  uint64_t v12 = type metadata accessor for MACAddress();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *a1;
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = sub_100010324(v17, (uint64_t)qword_10170F098);
  uint64_t v19 = v16;
  uint64_t v58 = v18;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v51 = v15;
    uint64_t v52 = v8;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v53 = a4;
    uint64_t v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v50 = a2;
    uint64_t v25 = (void *)v24;
    *(_DWORD *)uint64_t v23 = 138543362;
    v61[0] = v19;
    uint64_t v26 = v19;
    uint64_t v54 = v12;
    uint64_t v27 = v26;
    uint64_t v15 = v51;
    uint64_t v8 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v19;

    uint64_t v12 = v54;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Discovered %{public}@", v23, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v53;
    swift_slowDealloc();
  }
  else
  {
  }
  __chkstk_darwin(v28);
  uint64_t v29 = v59;
  *(&v50 - 2) = v59;
  *(&v50 - 1) = v30;
  sub_10000588C(&qword_10165F6B0);
  Lock.callAsFunction<A>(_:)();
  id v31 = v61[0];
  if (!v61[0])
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v29, v12);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = swift_slowAlloc();
      v61[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 141558275;
      uint64_t v62 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v41 + 12) = 2081;
      sub_100158020((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v62 = sub_1008FA0F0(v42, v43, (uint64_t *)v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Missing connected peripheral for %{private,mask.hash}s", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }

    goto LABEL_16;
  }
  id v32 = [*(id *)((char *)v61[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject) identifier];
  uint64_t v33 = v55;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v34 = [v19 identifier];
  int v35 = v56;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v34) = static UUID.== infix(_:_:)();
  uint64_t v36 = *(void (**)(char *, uint64_t))(v57 + 8);
  v36(v35, v8);
  v36(v33, v8);
  if ((v34 & 1) == 0)
  {
    id v44 = v19;
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 138543362;
      v61[0] = v44;
      uint64_t v49 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v48 = v44;

      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Ignoring accessory %{public}@", v47, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
LABEL_16:
    id v31 = 0;
    goto LABEL_17;
  }
  sub_100A3C59C(0xD000000000000015, 0x80000001013F4150);
  swift_beginAccess();
  uint64_t v37 = *(void **)(a4 + 16);
  *(void *)(a4 + 16) = v19;
  int v38 = v19;

LABEL_17:
  *uint64_t v60 = v31;
}

uint64_t sub_100139AA8@<X0>(char **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v5;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = 1;
  unint64_t v6 = sub_10092CEEC(inited);
  uint64_t v7 = sub_1013285F8(v3, v6);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v7;
  return result;
}

uint64_t sub_100139B54@<X0>(uint64_t *a1@<X8>)
{
  sub_10000588C(&qword_10163AAE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 56) = &type metadata for BAServiceIdentifier;
  *(void *)(inited + 64) = &off_1015CE038;
  *(unsigned char *)(inited + 32) = 1;
  uint64_t v3 = sub_100A3D36C(inited);
  swift_setDeallocating();
  sub_10000588C(&qword_10163AAE8);
  uint64_t result = swift_arrayDestroy();
  *a1 = v3;
  return result;
}

uint64_t sub_100139BFC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_10163C8B0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101649E80);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (char *)*a1;
  v36[3] = &type metadata for BAServiceIdentifier;
  v36[4] = &off_1015CE038;
  LOBYTE(v36[0]) = 1;
  uint64_t v13 = (uint64_t *)&v12[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess();
  uint64_t v14 = *v13;
  int v35 = v36;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_100E4E988((uint64_t (*)(uint64_t *))sub_10015AF64, (uint64_t)v34, v14);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v36);
  if (v15)
  {
    uint64_t v16 = sub_100A9B7E0((uint64_t)&off_1015A0528);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v15;
    *(void *)(v17 + 24) = v16;
    sub_10000588C((uint64_t *)&unk_101649E90);
    swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    v36[0] = Future.init(_:)();
    sub_100062734((unint64_t *)&qword_101671CE0, (uint64_t *)&unk_101649E90);
    uint64_t v18 = Publisher.eraseToAnyPublisher()();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
  }
  else
  {
    uint64_t v33 = v5;
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170F098);
    os_log_type_t v21 = v12;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v31 = v8;
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      id v32 = a2;
      uint64_t v29 = v24;
      *(_DWORD *)uint64_t v24 = 138412290;
      v36[0] = v21;
      uint64_t v25 = v21;
      uint64_t v30 = v4;
      uint64_t v26 = v25;
      uint64_t v8 = v31;
      a2 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v21;

      uint64_t v4 = v30;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "No FindMy service for %@", v29, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v22 = v21;
    }

    v36[0] = v21;
    type metadata accessor for Peripheral();
    uint64_t v27 = v21;
    Just.init(_:)();
    sub_100061234();
    Just.setFailureType<A>(to:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v4);
    sub_100062734(&qword_10163C8B8, (uint64_t *)&unk_101649E80);
    uint64_t v18 = Publisher.eraseToAnyPublisher()();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  *a2 = v18;
  return result;
}

id sub_10013A0E8@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = v2;
  return v2;
}

id sub_10013A0F4@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 41) = 0;
  return v2;
}

uint64_t sub_10013A104(uint64_t a1)
{
  sub_1000610B8(a1, (uint64_t)v2);
  v2[41] = 1;
  sub_10000588C(&qword_101655B50);
  return Just.init(_:)();
}

uint64_t sub_10013A158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v35 = a7;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v41, &qword_101655B50);
  if ((v42 & 1) == 0)
  {
    uint64_t v35 = a6;
    uint64_t v18 = (char *)v41[0];
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170F098);
    sub_100A3C59C(0xD000000000000013, 0x80000001013F4130);
    uint64_t v39 = &type metadata for BAServiceIdentifier;
    os_log_type_t v40 = &off_1015CE038;
    v38[0] = 1;
    uint64_t v20 = (uint64_t *)&v18[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
    uint64_t v21 = swift_beginAccess();
    uint64_t v22 = *v20;
    __chkstk_darwin(v21);
    uint64_t v33 = v38;
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_100E4E988((uint64_t (*)(uint64_t *))sub_100158AAC, (uint64_t)v32, v22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
    if (v23)
    {
      uint64_t v34 = a4;
      uint64_t v39 = &type metadata for BACharacteristicIdentifier.FindMy;
      os_log_type_t v40 = &off_1015CE018;
      v38[0] = 0;
      uint64_t v24 = swift_beginAccess();
      uint64_t v25 = *(void *)(v23 + 40);
      __chkstk_darwin(v24);
      uint64_t v33 = v38;
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_100E4E9E4((uint64_t (*)(uint64_t *))sub_100158ACC, (uint64_t)v32, v25);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
      if (v26)
      {
        uint64_t result = swift_beginAccess();
        uint64_t v27 = v34;
        if (!*(void *)(a5 + 16))
        {
          __break(1u);
          return result;
        }
        id v28 = *(id *)(a5 + 16);
        sub_10013AA1C(v26, (uint64_t)v18, v28, v35);

        sub_10013E204(v27, 0);
        swift_release();
        swift_release();
        return swift_release();
      }
      swift_release();
      a4 = v34;
    }
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "No pairing characteristic!", v31, 2u);
      swift_slowDealloc();
    }

    sub_10013E204(a4, 1);
    return swift_release();
  }
  sub_10006105C((uint64_t)v41, (uint64_t)v38);
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170F098);
  sub_1000610B8((uint64_t)v38, (uint64_t)v37);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    v36[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446210;
    sub_100061234();
    uint64_t v16 = Error.localizedDescription.getter();
    v36[4] = sub_1008FA0F0(v16, v17, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100061288((uint64_t)v37);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Peripheral discovery error: %{public}s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100061288((uint64_t)v37);
  }

  sub_10013A7F4(a6, v35);
  sub_10013E204(a4, 1);
  swift_release();
  return sub_100061288((uint64_t)v38);
}

uint64_t sub_10013A6B4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_10013A6CC(a1, a2);
}

uint64_t sub_10013A6CC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(a1 + 16);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8) {
    *a2 = *(unsigned char *)(a1 + 184);
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_10013A7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(v2 + 16);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    sub_100155FAC();
    uint64_t v15 = swift_allocError();
    unsigned char *v16 = 3;
    uint64_t v17 = type metadata accessor for MACAddress();
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v7, a2, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v7, 0, 1, v17);
    sub_1001540B0(v15, a1, (uint64_t)v7);
    sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_1016477E0);
    return swift_errorRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10013AA1C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  id v95 = a3;
  uint64_t v96 = a4;
  uint64_t v94 = a2;
  uint64_t v7 = (void *)*v5;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v86 = (uint64_t)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v85 = (uint64_t)&v80 - v11;
  uint64_t v12 = type metadata accessor for MACAddress();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (void **)((char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = (void *)v5[2];
  *uint64_t v19 = v20;
  uint64_t v21 = *(void (**)(void))(v17 + 104);
  unsigned int v90 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v91 = v17 + 104;
  long long v89 = (void (*)(void *, void, uint64_t))v21;
  v21(v19);
  id v87 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  uint64_t v23 = *(void (**)(void *, uint64_t))(v17 + 8);
  uint64_t v22 = v17 + 8;
  uint64_t v92 = v19;
  long long v88 = v23;
  v23(v19, v16);
  if (v20)
  {
    uint64_t v84 = v16;
    uint64_t v81 = v7;
    uint64_t v82 = a1;
    if (qword_101637320 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = (void *)sub_100010324(v24, (uint64_t)qword_10170F098);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v96, v12);
  id v93 = v25;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v83 = v22;
  if (v28)
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    v98[0] = swift_slowAlloc();
    id v80 = v5;
    *(_DWORD *)uint64_t v29 = 136446210;
    sub_100158020((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v97 = sub_1008FA0F0(v30, v31, v98);
    uint64_t v5 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Start pairing AirPods. classicMACAddress: %{public}s", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }

  id v32 = (void *)v94;
  sub_100A3C59C(0, 0xE000000000000000);
  id v33 = v95;
  id v34 = [v95 discoveredMetadata];
  id v35 = [v34 productData];

  uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v38 = v37;

  uint64_t v39 = sub_1002AB228(v36, v38);
  if (v40 >> 60 == 15)
  {
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      unint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Invalid product data!", v43, 2u);
      swift_slowDealloc();
    }
    goto LABEL_21;
  }
  uint64_t v44 = v39;
  unint64_t v45 = v40;
  id v46 = [v33 productInformation];
  if (!v46)
  {
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v41, v54))
    {
      sub_100037A24(v44, v45);
LABEL_21:

      return;
    }
    unint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v54, "Missing product info!", v55, 2u);
    swift_slowDealloc();

    goto LABEL_24;
  }
  uint64_t v47 = v46;
  if (![v46 eligibleForPairing])
  {
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v52 = 0;
      uint64_t v53 = "Not eligible for pairing!";
      goto LABEL_18;
    }
LABEL_19:
    sub_100037A24(v44, v45);

    return;
  }
  uint64_t v48 = (void *)v5[7];
  v5[7] = v32;
  id v49 = v32;

  sub_10013F9B8((uint64_t)v98);
  if (v99)
  {
    sub_10001DAB4((uint64_t)v98, &qword_10163C6C0);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v52 = 0;
      uint64_t v53 = "Failed to create pairing coordinator!";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v50, v51, v53, v52, 2u);
      swift_slowDealloc();

LABEL_24:
      sub_100037A24(v44, v45);
      return;
    }
    goto LABEL_19;
  }
  uint64_t v56 = v98[0];
  uint64_t v57 = *(void *)(v98[0] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  uint64_t v58 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  uint64_t v94 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  uint64_t v59 = *(void *)(v57 + 104);
  unint64_t v60 = *(void *)(v57 + 112);
  *(void *)(v57 + 104) = v44;
  *(void *)(v57 + 112) = v45;
  sub_1000361E0(v44, v45);
  sub_100037A24(v59, v60);
  uint64_t v61 = *(void *)(v56 + v58);
  swift_retain();
  uint64_t v62 = v85;
  sub_1011DE574(v85);
  uint64_t v63 = type metadata accessor for AccessoryProductInfo();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v62, 0, 1, v63);
  id v93 = v47;
  uint64_t v64 = v86;
  sub_10001D608(v62, v86, (uint64_t *)&unk_10166BFA0);
  uint64_t v65 = v61 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
  swift_beginAccess();
  sub_100062604(v64, v65, (uint64_t *)&unk_10166BFA0);
  swift_endAccess();
  swift_release();
  uint64_t v66 = *(void *)(v56 + v94);
  swift_retain();
  id v67 = [v33 discoveredMetadata];
  id v68 = [v67 firmwareVersion];

  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v71 = v70;

  *(void *)(v66 + 88) = v69;
  *(void *)(v66 + 96) = v71;
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v72 = v92;
  id v73 = v87;
  void *v92 = v87;
  uint64_t v74 = v84;
  v89(v72, v90, v84);
  id v75 = v73;
  LOBYTE(v73) = _dispatchPreconditionTest(_:)();
  v88(v72, v74);
  if (v73)
  {
    uint64_t v76 = type metadata accessor for Transaction();
    __chkstk_darwin(v76);
    uint64_t v77 = v82;
    *(&v80 - 4) = v5;
    *(&v80 - 3) = (void *)v77;
    uint64_t v78 = v96;
    uint64_t v79 = v81;
    *(&v80 - 2) = (void *)v96;
    *(&v80 - 1) = v79;
    static Transaction.named<A>(_:with:)();
    sub_10015526C(v77, v78);

    swift_release();
    goto LABEL_24;
  }
  __break(1u);
}

uint64_t sub_10013B3B0(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v71 = a5;
  uint64_t v76 = a1;
  uint64_t v8 = type metadata accessor for MACAddress();
  uint64_t v73 = *(void *)(v8 - 8);
  uint64_t v74 = v8;
  __chkstk_darwin(v8);
  uint64_t v70 = v9;
  unint64_t v72 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10000588C(&qword_10163C6D0);
  uint64_t v58 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_10163C6D8);
  uint64_t v60 = *(void *)(v15 - 8);
  uint64_t v61 = v15;
  __chkstk_darwin(v15);
  unint64_t v55 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_10163C6E0);
  uint64_t v62 = *(void *)(v17 - 8);
  uint64_t v63 = v17;
  __chkstk_darwin(v17);
  uint64_t v59 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_10163C6E8);
  uint64_t v65 = *(void *)(v19 - 8);
  uint64_t v66 = v19;
  __chkstk_darwin(v19);
  uint64_t v64 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_10163C6F0);
  uint64_t v68 = *(void *)(v21 - 8);
  uint64_t v69 = v21;
  __chkstk_darwin(v21);
  id v67 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v79 = (id)sub_101320FA8(0, a3);
  id v78 = *(id *)(a2 + 16);
  id v23 = v78;
  uint64_t v24 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v25 = *(void *)(v24 - 8);
  os_log_type_t v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  uint64_t v53 = v25 + 56;
  v54(v12, 1, 1, v24);
  id v52 = v23;
  sub_10000588C(&qword_10163C5E8);
  unint64_t v26 = sub_10000584C();
  sub_100062734(&qword_10163C5F0, &qword_10163C5E8);
  uint64_t v27 = sub_100158020((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
  unint64_t v56 = v26;
  uint64_t v51 = v27;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v12, &qword_10163C6C8);

  swift_release();
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = a2;
  *(void *)(v28 + 24) = a4;
  uint64_t v77 = a2;
  swift_retain();
  uint64_t v75 = a4;
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_10000588C(&qword_10163C608);
  sub_100062734(&qword_10163C6F8, &qword_10163C6D0);
  uint64_t v29 = v55;
  sub_100062734(&qword_10163C700, &qword_10163C608);
  uint64_t v30 = v57;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v14, v30);
  if (qword_1016368B0 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_100010324(v31, (uint64_t)qword_10163C228);
  id v32 = v52;
  id v79 = v52;
  v54(v12, 1, 1, v24);
  sub_100062734(&qword_10163C708, &qword_10163C6D8);
  id v33 = v32;
  id v34 = v59;
  uint64_t v35 = v61;
  Publisher.timeout<A>(_:scheduler:options:customError:)();
  sub_10001DAB4((uint64_t)v12, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v60 + 8))(v29, v35);
  sub_10000588C(&qword_10163C600);
  sub_100062734(&qword_10163C710, &qword_10163C6E0);
  uint64_t v36 = v63;
  unint64_t v37 = v64;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v34, v36);
  sub_10000588C(&qword_10163C718);
  sub_100062734(&qword_10163C720, &qword_10163C6E8);
  sub_100062734(&qword_10163C728, &qword_10163C718);
  uint64_t v38 = v66;
  uint64_t v39 = v67;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v37, v38);
  uint64_t v40 = swift_allocObject();
  uint64_t v41 = v77;
  swift_weakInit();
  unint64_t v43 = v72;
  uint64_t v42 = v73;
  uint64_t v44 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v72, v71, v74);
  unint64_t v45 = (*(unsigned __int8 *)(v42 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  id v46 = (char *)swift_allocObject();
  *((void *)v46 + 2) = v40;
  uint64_t v47 = v75;
  *((void *)v46 + 3) = v76;
  *((void *)v46 + 4) = v47;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v46[v45], v43, v44);
  sub_100062734(&qword_10163C730, &qword_10163C6F0);
  swift_retain();
  swift_retain();
  uint64_t v48 = v69;
  uint64_t v49 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v39, v48);
  *(void *)(v41 + 88) = v49;
  return swift_release();
}

uint64_t sub_10013BD68@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170F098);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Getting beacon group data...", v7, 2u);
    swift_slowDealloc();
  }

  sub_1001580A4((uint64_t)v11);
  sub_1001559B0((uint64_t)v11, (uint64_t)v10);
  v10[216] = 0;
  uint64_t v8 = sub_10013FDB4((uint64_t)v10, a1);
  uint64_t result = sub_10001DAB4((uint64_t)v10, &qword_10163C600);
  *a2 = v8;
  return result;
}

uint64_t sub_10013BEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v12 = result;
    Transaction.capture()();
    sub_10001D074(a1, (uint64_t)v33, &qword_10163C600);
    if (v33[216])
    {
      sub_10006105C((uint64_t)v33, (uint64_t)v30);
      if (qword_101637320 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100010324(v13, (uint64_t)qword_10170F098);
      sub_1000610B8((uint64_t)v30, (uint64_t)v32);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = swift_slowAlloc();
        uint64_t v28 = a4;
        uint64_t v17 = (uint8_t *)v16;
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136446210;
        uint64_t v29 = a5;
        uint64_t v18 = sub_101321420();
        v30[27] = sub_1008FA0F0(v18, v19, &v31);
        a5 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100061288((uint64_t)v32);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to write initial pairing data. Error %{public}s", v17, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        a4 = v28;
        swift_slowDealloc();
      }
      else
      {
        sub_100061288((uint64_t)v32);
      }

      sub_10013E3F8(a4);
      sub_100061234();
      uint64_t v24 = swift_allocError();
      sub_1000610B8((uint64_t)v30, v25);
      uint64_t v26 = type metadata accessor for MACAddress();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v10, 1, 1, v26);
      sub_1001540B0(v24, a5, (uint64_t)v10);
      swift_release();
      sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_1016477E0);
      sub_100061288((uint64_t)v30);
      return swift_errorRelease();
    }
    else
    {
      sub_1001559B0((uint64_t)v33, (uint64_t)v30);
      sub_100156058((uint64_t)v30, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
      if (qword_101637320 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_100010324(v20, (uint64_t)qword_10170F098);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        id v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Requested beacon group data. Waiting for AirPods to respond.", v23, 2u);
        swift_slowDealloc();
      }

      *(void *)(v12 + 88) = 0;
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10013C2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v111 = a4;
  uint64_t v115 = a2;
  uint64_t v106 = a1;
  uint64_t v112 = type metadata accessor for MACAddress();
  uint64_t v114 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v109 = v5;
  uint64_t v110 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v6 - 8);
  uint64_t v108 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_10000588C(&qword_10163C738);
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  long long v89 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_10000588C(&qword_10163C740);
  id v93 = *(void (***)(char *, uint64_t))(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v92 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163C748);
  uint64_t v96 = *(void *)(v10 - 8);
  uint64_t v97 = v10;
  __chkstk_darwin(v10);
  id v95 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10163C750);
  uint64_t v100 = *(void *)(v12 - 8);
  uint64_t v101 = v12;
  __chkstk_darwin(v12);
  char v99 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_10163C758);
  uint64_t v102 = *(void *)(v14 - 8);
  uint64_t v103 = v14;
  __chkstk_darwin(v14);
  uint64_t v98 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_10163C760);
  uint64_t v104 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_10163C768);
  uint64_t v105 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C(&qword_10163C770);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C((uint64_t *)&unk_101649D00);
  uint64_t v107 = a3;
  uint64_t v88 = v26;
  unint64_t v27 = v113;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (v27)
  {
    swift_errorRelease();
    uint64_t v28 = 0;
    uint64_t v29 = v115;
  }
  else
  {
    uint64_t v77 = v18;
    uint64_t v78 = v16;
    id v79 = v21;
    uint64_t v80 = v19;
    uint64_t v81 = 0;
    uint64_t v82 = v25;
    uint64_t v83 = v23;
    uint64_t v84 = v22;
    uint64_t v30 = v115;
    id v116 = *(id *)(v115 + 16);
    id v31 = v116;
    uint64_t v32 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v33 = *(void *)(v32 - 8);
    id v87 = *(void (**)(void))(v33 + 56);
    uint64_t v86 = v33 + 56;
    uint64_t v34 = (uint64_t)v108;
    v87();
    unint64_t v113 = sub_10000584C();
    sub_100062734(&qword_101649D10, (uint64_t *)&unk_101649D00);
    uint64_t v85 = sub_100158020((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
    id v76 = v31;
    uint64_t v35 = v89;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v34, &qword_10163C6C8);

    swift_release();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C(&qword_101639B58);
    sub_10000588C(&qword_10163C628);
    uint64_t v75 = &protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
    sub_100062734(&qword_10163C778, &qword_10163C738);
    uint64_t v74 = &protocol conformance descriptor for Future<A, B>;
    sub_100062734(&qword_10163C780, &qword_10163C628);
    uint64_t v36 = v92;
    uint64_t v37 = v91;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v35, v37);
    uint64_t v38 = v76;
    id v117 = v76;
    uint64_t v39 = (uint64_t)v108;
    uint64_t v91 = v32;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v87)(v108, 1, 1, v32);
    sub_100062734(&qword_10163C788, &qword_10163C740);
    id v76 = v38;
    uint64_t v40 = v95;
    uint64_t v41 = v94;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v39, &qword_10163C6C8);

    v93[1](v36, v41);
    uint64_t v42 = v114;
    unint64_t v43 = *(void (***)(char *, uint64_t))(v114 + 16);
    uint64_t v44 = v110;
    uint64_t v45 = v112;
    uint64_t v94 = v114 + 16;
    id v93 = v43;
    ((void (*)(char *, uint64_t, uint64_t))v43)(v110, v111, v112);
    uint64_t v46 = *(unsigned __int8 *)(v42 + 80);
    uint64_t v88 = ~v46;
    uint64_t v47 = (v46 + 24) & ~v46;
    uint64_t v90 = v46;
    uint64_t v92 = (char *)(v46 | 7);
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = v30;
    uint64_t v49 = *(char **)(v42 + 32);
    uint64_t v114 = v42 + 32;
    long long v89 = v49;
    ((void (*)(uint64_t, char *, uint64_t))v49)(v48 + v47, v44, v45);
    swift_retain();
    uint64_t v50 = sub_10000588C(&qword_10163C600);
    sub_100062734(&qword_10163C790, &qword_10163C748);
    uint64_t v51 = v99;
    uint64_t v52 = v97;
    uint64_t v75 = (void *)v50;
    Publisher.map<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v40, v52);
    uint64_t v53 = swift_allocObject();
    uint64_t v54 = v107;
    *(void *)(v53 + 16) = v30;
    *(void *)(v53 + 24) = v54;
    swift_retain();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C(&qword_10163C608);
    sub_100062734(&qword_10163C798, &qword_10163C750);
    sub_100062734(&qword_10163C700, &qword_10163C608);
    unint64_t v55 = v98;
    uint64_t v56 = v101;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v100 + 8))(v51, v56);
    if (qword_1016368A8 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
    sub_100010324(v57, (uint64_t)qword_10163C210);
    uint64_t v58 = v76;
    id v117 = v76;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v87)(v39, 1, 1, v91);
    sub_100062734(&qword_10163C7A0, &qword_10163C758);
    id v59 = v58;
    uint64_t v60 = v77;
    uint64_t v61 = v103;
    Publisher.timeout<A>(_:scheduler:options:customError:)();
    sub_10001DAB4(v39, &qword_10163C6C8);

    (*(void (**)(char *, uint64_t))(v102 + 8))(v55, v61);
    sub_100062734(&qword_10163C7A8, &qword_10163C760);
    uint64_t v62 = v79;
    uint64_t v63 = v78;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v104 + 8))(v60, v63);
    sub_10000588C(&qword_10163C718);
    sub_100062734(&qword_10163C7B0, &qword_10163C768);
    sub_100062734(&qword_10163C728, &qword_10163C718);
    uint64_t v64 = v82;
    uint64_t v65 = v80;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v105 + 8))(v62, v65);
    uint64_t v66 = swift_allocObject();
    uint64_t v29 = v115;
    swift_weakInit();
    id v67 = v110;
    uint64_t v68 = v112;
    ((void (*)(char *, uint64_t, uint64_t))v93)(v110, v111, v112);
    uint64_t v69 = (v90 + 40) & v88;
    uint64_t v70 = (void *)swift_allocObject();
    v70[2] = v66;
    uint64_t v71 = v107;
    v70[3] = v106;
    v70[4] = v71;
    ((void (*)(char *, char *, uint64_t))v89)((char *)v70 + v69, v67, v68);
    sub_100062734(&qword_10163C7B8, &qword_10163C770);
    swift_retain();
    swift_retain();
    uint64_t v72 = v84;
    uint64_t v28 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v64, v72);
  }
  *(void *)(v29 + 80) = v28;
  return swift_release();
}

double sub_10013D200@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 10;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 40) = 11;
  return result;
}

uint64_t sub_10013D220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1001559B0(a1, (uint64_t)v4);
  sub_1001559B0((uint64_t)v4, a2);
  *(unsigned char *)(a2 + 216) = 0;
  return sub_100156058((uint64_t)v4, (void (*)(void))sub_1000361E0, (void (*)(void))sub_100037A38);
}

uint64_t sub_10013D290(uint64_t a1)
{
  sub_1000610B8(a1, (uint64_t)v2);
  v2[216] = 1;
  sub_10000588C(&qword_10163C600);
  return Just.init(_:)();
}

uint64_t sub_10013D2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Transaction.capture()();
    sub_10013D370(a1, a4, a5);
    return swift_release();
  }
  return result;
}

void sub_10013D370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v92 = a2;
  uint64_t v93 = a1;
  uint64_t v6 = type metadata accessor for MACAddress();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v87 = (char *)v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v9 - 8);
  uint64_t v88 = (uint64_t)v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v85 = *(void *)(v11 - 8);
  uint64_t v86 = v11;
  __chkstk_darwin(v11);
  uint64_t v84 = (uint64_t)v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v13 - 8);
  uint64_t v91 = (char *)v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (void *)((char *)v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *(void **)(v4 + 16);
  void *v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  char v21 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if (v21)
  {
    uint64_t v89 = v7;
    if (qword_101637320 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = sub_100010324(v22, (uint64_t)qword_10170F098);
  sub_10001D074(v93, (uint64_t)v98, &qword_10163C600);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v90 = v6;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc();
    v83[0] = v22;
    uint64_t v28 = (uint8_t *)v27;
    v95[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315138;
    v83[1] = v23;
    sub_10001D074((uint64_t)v98, (uint64_t)v94, &qword_10163C600);
    sub_10000588C(&qword_10163C600);
    uint64_t v29 = String.init<A>(describing:)();
    v94[0] = sub_1008FA0F0(v29, v30, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v98, &qword_10163C600);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "handlePublisherUpdate %s", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v22 = v83[0];
    swift_slowDealloc();
  }
  else
  {
    sub_10001DAB4((uint64_t)v98, &qword_10163C600);
  }

  sub_10001D074(v93, (uint64_t)v98, &qword_10163C600);
  if (v98[216])
  {
    sub_10006105C((uint64_t)v98, (uint64_t)v94);
    sub_1000610B8((uint64_t)v94, (uint64_t)v95);
    swift_retain_n();
    id v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v93 = a3;
      uint64_t v34 = v33;
      uint64_t v97 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136446466;
      uint64_t v35 = sub_101321420();
      uint64_t v96 = sub_1008FA0F0(v35, v36, &v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100061288((uint64_t)v95);
      *(_WORD *)(v34 + 12) = 2082;
      unint64_t v37 = sub_1011418C0(*(unsigned char *)(*(void *)(v4 + 64)
                                   + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState));
      uint64_t v96 = sub_1008FA0F0(v37, v38, &v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Pairing error %{public}s). Pairing state: %{public}s)", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v93;
      swift_slowDealloc();
    }
    else
    {
      sub_100061288((uint64_t)v95);

      swift_release_n();
    }
    uint64_t v43 = v89;
    uint64_t v42 = v90;
    sub_100061234();
    uint64_t v44 = swift_allocError();
    sub_1000610B8((uint64_t)v94, v45);
    uint64_t v46 = (uint64_t)v91;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v91, 1, 1, v42);
    sub_1001540B0(v44, a3, v46);
    sub_10001DAB4(v46, (uint64_t *)&unk_1016477E0);
    swift_errorRelease();
    sub_10013E3F8(v92);
    uint64_t v47 = *(void **)(v4 + 56);
    if (v47)
    {
      uint64_t v48 = *(void *)(v4 + 64);
      if (*(unsigned __int8 *)(v48 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) >= 4u)
      {
        id v49 = v47;
        uint64_t v50 = v87;
        sub_100A3AC74(v87);
        uint64_t v51 = v88;
        sub_100AE800C(v88);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v50, v42);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v51, 1, v86) == 1)
        {
          sub_100061288((uint64_t)v94);

          sub_10001DAB4(v51, &qword_10163BB20);
          return;
        }
        uint64_t v71 = v84;
        sub_100157D84(v51, v84, type metadata accessor for OwnedBeaconGroup);
        uint64_t v72 = (uint64_t *)(*(void *)(v48 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                        + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
        unint64_t v73 = v72[1];
        if (v73 >> 60 == 15)
        {
        }
        else
        {
          v95[0] = *v72;
          uint64_t v79 = v95[0];
          v95[1] = v73;
          sub_1000361E0(v95[0], v73);
          sub_1000362FC();
          if (DataProtocol.isNull.getter())
          {
          }
          else
          {
            uint64_t v80 = Data.trimmed.getter();
            unint64_t v82 = v81;
            sub_1001502DC(v80, v81, v71);

            sub_10001CFB8(v80, v82);
          }
          sub_100037A24(v79, v73);
        }
        sub_100157DEC(v71, type metadata accessor for OwnedBeaconGroup);
      }
    }
    else
    {
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Missing peripheral to clean up pending pairing!", v54, 2u);
        swift_slowDealloc();
      }
    }
    sub_100061288((uint64_t)v94);
  }
  else
  {
    sub_1001559B0((uint64_t)v98, (uint64_t)v95);
    sub_1001559B0((uint64_t)v95, (uint64_t)v94);
    switch(sub_100156F10((uint64_t)v94))
    {
      case 1u:
        sub_100157BC4((uint64_t)v94);
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v41 = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Sent initiate pairing.", v41, 2u);
          swift_slowDealloc();
        }

        sub_100156058((uint64_t)v95, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
        *(unsigned char *)(*(void *)(v4 + 64) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 0;
        break;
      case 3u:
        sub_100157BC4((uint64_t)v94);
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v62 = 0;
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "Sent finalize pairing.", v62, 2u);
          swift_slowDealloc();
        }

        sub_100156058((uint64_t)v95, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
        *(unsigned char *)(*(void *)(v4 + 64) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 4;
        break;
      case 5u:
        if (qword_101637310 != -1) {
          swift_once();
        }
        sub_100010324(v22, (uint64_t)qword_10170F068);
        uint64_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v65 = 0;
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "Requested beacon group data.", v65, 2u);
          swift_slowDealloc();
        }

        *(unsigned char *)(*(void *)(v4 + 64) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 1;
        break;
      case 6u:
        int v66 = *(unsigned __int8 *)(v4 + 200);
        id v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.default.getter();
        BOOL v69 = os_log_type_enabled(v67, v68);
        if (v66 == 1)
        {
          if (v69)
          {
            uint64_t v70 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v70 = 0;
            _os_log_impl((void *)&_mh_execute_header, v67, v68, "Sent pairing complete, skip ackRequest.", v70, 2u);
            swift_slowDealloc();
          }
        }
        else
        {
          if (v69)
          {
            uint64_t v74 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v74 = 0;
            _os_log_impl((void *)&_mh_execute_header, v67, v68, "Sent pairing complete, continue with ackRequest.", v74, 2u);
            swift_slowDealloc();
          }

          sub_10014A994();
        }
        uint64_t v75 = *(void *)(v4 + 64);
        if (*(unsigned char *)(v75 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) == 9)
        {
          id v76 = Logger.logObject.getter();
          os_log_type_t v77 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v76, v77))
          {
            uint64_t v78 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v78 = 0;
            _os_log_impl((void *)&_mh_execute_header, v76, v77, "Pairing has been completed for all serial numbers.", v78, 2u);
            swift_slowDealloc();
          }
        }
        else
        {
          *(unsigned char *)(v75 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 6;
        }
        sub_1001539A4();
        sub_10013E3F8(v92);
        break;
      default:
        swift_retain_n();
        unint64_t v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v55, v56))
        {
          uint64_t v57 = (uint8_t *)swift_slowAlloc();
          uint64_t v97 = swift_slowAlloc();
          *(_DWORD *)uint64_t v57 = 136315138;
          unint64_t v58 = sub_1011418C0(*(unsigned char *)(*(void *)(v4 + 64)
                                       + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState));
          uint64_t v96 = sub_1008FA0F0(v58, v59, &v97);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "Invalid pairing state %s!", v57, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        sub_10013E3F8(v92);
        sub_100156058((uint64_t)v95, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
        break;
    }
  }
}

void sub_10013E204(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v3 + 16);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    if (qword_101637320 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170F098);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "stopDiscovery", v14, 2u);
    swift_slowDealloc();
  }

  sub_1005E6BFC();
  *(void *)(v3 + 136) = 0;
  swift_release();
  if (a2) {
    sub_10013E3F8(0);
  }
}

void sub_10013E3F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v1 + 16);
  *uint64_t v7 = v8;
  uint64_t v9 = enum case for DispatchPredicate.onQueue(_:);
  id v10 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v35 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t v11 = *(void (**)(void *, uint64_t))(v5 + 8);
  v11(v7, v4);
  if (v8)
  {
    uint64_t v33 = v11;
    uint64_t v34 = v10;
    if (qword_101637320 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170F098);
  os_log_type_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = a1;
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "cleanUp", v15, 2u);
    a1 = v32;
    swift_slowDealloc();
  }

  *(void *)(v2 + 80) = 0;
  swift_release();
  *(void *)(v2 + 88) = 0;
  swift_release();
  if (a1)
  {
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v36 = 12;
    long long v37 = 0u;
    long long v38 = 0u;
    char v39 = 11;
    sub_100A6D128((uint64_t)&v36);
    sub_100061288((uint64_t)&v36);
  }
  uint64_t v16 = v34;
  uint64_t v17 = v35;
  *uint64_t v7 = v35;
  v16(v7, v9, v4);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  v33(v7, v4);
  if (v17)
  {
    *(unsigned char *)(v2 + 184) = 0;
    uint64_t v19 = *(void *)(v2 + 160);
    unint64_t v20 = *(void *)(v2 + 168);
    *(_OWORD *)(v2 + 160) = xmmword_101347BB0;
    sub_100037A24(v19, v20);
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    LOBYTE(v36) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    char v21 = *(void **)(v2 + 56);
    if (!v21)
    {
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        unint64_t v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Missing peripheral to clean up!", v30, 2u);
        swift_slowDealloc();
      }
      goto LABEL_15;
    }
    id v22 = v21;
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Disconnecting on cleanUp", v25, 2u);
      swift_slowDealloc();
    }

    uint64_t v26 = *(void *)(v2 + 40);
    uint64_t v36 = sub_101329270(v22);
    sub_10000588C((uint64_t *)&unk_101649C90);
    sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
    Publisher.oneshot(_:)();
    uint64_t v27 = swift_release();
    if (*(unsigned char *)(v26 + OBJC_IVAR____TtC12searchpartyd14CentralManager_isSharedPairingAgent) == 1)
    {
      __chkstk_darwin(v27);
      *(&v31 - 2) = v26;
      type metadata accessor for SharedPairingAgent();
      Lock.callAsFunction<A>(_:)();
      uint64_t v28 = v36;
      sub_101070634(v22);

LABEL_15:
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10013E920(uint64_t a1)
{
  sub_10001D074(a1, (uint64_t)v10, &qword_101655B50);
  if (v11)
  {
    sub_10006105C((uint64_t)v10, (uint64_t)v9);
    sub_100061234();
    swift_willThrowTypedImpl();
    sub_10006105C((uint64_t)v9, (uint64_t)v8);
    swift_allocError();
    sub_10006105C((uint64_t)v8, v1);
    swift_errorRetain();
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170F098);
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138543362;
      uint64_t v7 = (void *)_convertErrorToNSError(_:)();
      v10[0] = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v6 = v7;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Disconnection failure: %{public}@!", v5, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
  }
  else
  {
  }
}

void sub_10013EB48(uint8_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v106 = a2;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AccessoryProductInfo();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  os_log_type_t v13 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  uint64_t v108 = a1;
  uint64_t v14 = *(void *)&a1[OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo]
      + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
  swift_beginAccess();
  sub_10001D074(v14, (uint64_t)v9, (uint64_t *)&unk_10166BFA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_10166BFA0);
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170F068);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      v112.n128_u64[0] = swift_slowAlloc();
      *(_DWORD *)id v18 = 136446210;
      v117[0].n128_u64[0] = sub_1008FA0F0(0xD00000000000003ELL, 0x80000001013F3FD0, (uint64_t *)&v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s Missing productInfo!", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    *(void *)a4 = 7;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    goto LABEL_25;
  }
  unint64_t v104 = a3;
  sub_100157D84((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  uint64_t v19 = (uint64_t *)&v13[*(int *)(v10 + 92)];
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  swift_retain();
  sub_100037A38(v20, v21);
  uint64_t v22 = sub_100F81FEC(v20, v21);
  unint64_t v24 = v23;
  sub_100037A24(v20, v21);
  swift_release();
  if (v24 >> 60 == 15)
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_10170F068);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unable to generate E1 blob.", v28, 2u);
      swift_slowDealloc();
    }

LABEL_24:
    sub_100157DEC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(void *)(a4 + 32) = 0;
LABEL_25:
    *(unsigned char *)(a4 + 40) = 11;
    *(unsigned char *)(a4 + 216) = 1;
    return;
  }
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v103 = type metadata accessor for Logger();
  sub_100010324(v103, (uint64_t)qword_10170F068);
  sub_1000361E0(v22, v24);
  sub_1000361E0(v22, v24);
  os_log_type_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    unint64_t v102 = swift_slowAlloc();
    v112.n128_u64[0] = v102;
    char v99 = v31;
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v98 = v31 + 4;
    sub_1000361E0(v22, v24);
    uint64_t v32 = v13;
    uint64_t v33 = a4;
    uint64_t v34 = Data.hexString.getter();
    unint64_t v36 = v35;
    sub_100037A24(v22, v24);
    uint64_t v37 = v34;
    a4 = v33;
    os_log_type_t v13 = v32;
    v117[0].n128_u64[0] = sub_1008FA0F0(v37, v36, (uint64_t *)&v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100037A24(v22, v24);
    sub_100037A24(v22, v24);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "E1: %s", v99, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100037A24(v22, v24);
    sub_100037A24(v22, v24);
  }

  long long v38 = v108;
  char v39 = (unint64_t *)(*(void *)&v108[v107]
                           + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId);
  unint64_t v40 = v39[1];
  if (v40 >> 60 == 15)
  {
    if (qword_101637320 != -1) {
      swift_once();
    }
    sub_100010324(v103, (uint64_t)qword_10170F098);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Missing FindMyNetworkId to generate init pairing.", v43, 2u);
      swift_slowDealloc();
    }

    sub_100037A24(v22, v24);
    goto LABEL_24;
  }
  unint64_t v44 = *v39;
  int v45 = *(unsigned __int8 *)(v105 + 200);
  uint64_t v101 = v13;
  if (v45 == 1)
  {
    sub_1000361E0(v44, v40);
    int v46 = 0;
  }
  else
  {
    uint64_t My = type metadata accessor for Feature.FindMy();
    v113.n128_u64[1] = My;
    v114.n128_u64[0] = sub_100158020((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    uint64_t v48 = sub_10001D958((uint64_t *)&v112);
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v48, enum case for Feature.FindMy.alphaWasp(_:), My);
    sub_1000361E0(v44, v40);
    LOBYTE(My) = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v112);
    int v46 = My & 1;
  }
  unint64_t v102 = a4;
  uint64_t v49 = *(void *)&v38[v107];
  unint64_t v51 = *(void *)(v49 + 16);
  unint64_t v50 = *(void *)(v49 + 24);
  int v92 = v46;
  v112.n128_u8[0] = v46;
  sub_100037A38(v22, v24);
  sub_100037A38(v44, v40);
  sub_1000361E0(v51, v50);
  uint64_t v52 = v106;
  os_log_type_t v53 = (uint8_t *)v40;
  unint64_t v54 = v104;
  sub_1000361E0(v106, v104);
  sub_10006145C();
  unint64_t v55 = FixedWidthInteger.data.getter();
  unint64_t v90 = v56;
  unint64_t v57 = v50;
  uint64_t v58 = v52;
  char v99 = v53;
  sub_1009D57F4(v51, v57, v22, v24, v44, (unint64_t)v53, v52, v54, v117, v55, v90);
  __n128 v96 = v117[1];
  __n128 v97 = v117[0];
  __n128 v94 = v117[3];
  __n128 v95 = v117[2];
  __n128 v93 = v117[4];
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v59 = sub_100010324(v103, (uint64_t)qword_10170F098);
  uint64_t v60 = v108;
  swift_retain_n();
  uint64_t v105 = v59;
  os_log_type_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.default.getter();
  BOOL v63 = os_log_type_enabled(v61, v62);
  uint64_t v100 = v22;
  uint64_t v98 = (uint8_t *)v44;
  if (v63)
  {
    os_log_type_t v64 = (uint8_t *)swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    uint64_t v103 = v65;
    *(_DWORD *)os_log_type_t v64 = 136315138;
    v112.n128_u64[0] = v65;
    uint64_t v91 = v64 + 4;
    uint64_t v66 = *(void *)&v60[v107];
    uint64_t v68 = *(void *)(v66 + 16);
    unint64_t v67 = *(void *)(v66 + 24);
    sub_1000361E0(v68, v67);
    uint64_t v69 = Data.hexString.getter();
    unint64_t v71 = v70;
    unint64_t v72 = v67;
    uint64_t v58 = v106;
    sub_10001CFB8(v68, v72);
    uint64_t v109 = sub_1008FA0F0(v69, v71, (uint64_t *)&v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "sessionNonce: %s", v64, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  unint64_t v73 = v104;
  sub_1000361E0(v58, v104);
  sub_1000361E0(v58, v73);
  uint64_t v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    id v76 = (uint8_t *)swift_slowAlloc();
    v112.n128_u64[0] = swift_slowAlloc();
    *(_DWORD *)id v76 = 136315138;
    uint64_t v108 = v76 + 4;
    uint64_t v77 = Data.hexString.getter();
    uint64_t v109 = sub_1008FA0F0(v77, v78, (uint64_t *)&v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v58, v73);
    sub_10001CFB8(v58, v73);
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "companionSessionNonce: %s", v76, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(v58, v73);
    sub_10001CFB8(v58, v73);
  }

  uint64_t v79 = (uint64_t)v98;
  uint64_t v80 = v99;
  __n128 v112 = v97;
  __n128 v113 = v96;
  __n128 v114 = v95;
  __n128 v115 = v94;
  __n128 v116 = v93;
  sub_100157E4C((uint64_t)&v112);
  sub_100037A38(v79, (unint64_t)v80);
  sub_100037A38(v79, (unint64_t)v80);
  sub_100157EEC((uint64_t *)v117, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_1000361E0);
  unint64_t v81 = Logger.logObject.getter();
  os_log_type_t v82 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v81, v82))
  {
    uint64_t v83 = swift_slowAlloc();
    uint64_t v84 = swift_slowAlloc();
    uint64_t v108 = (uint8_t *)v24;
    uint64_t v111 = v84;
    *(_DWORD *)uint64_t v83 = 141558531;
    uint64_t v109 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v83 + 12) = 2081;
    uint64_t v109 = v79;
    uint64_t v110 = v80;
    sub_100061628();
    uint64_t v85 = RawRepresentable<>.hexString.getter();
    uint64_t v109 = sub_1008FA0F0(v85, v86, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100037A24(v79, (unint64_t)v80);
    sub_100037A24(v79, (unint64_t)v80);
    *(_WORD *)(v83 + 22) = 256;
    LOBYTE(v109) = v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "generateInitPairingPayload request success: fmNetworkId: %{private,mask.hash}s, accountHint: %hhu.", (uint8_t *)v83, 0x19u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_100037A24(v79, (unint64_t)v80);
    sub_100157EEC((uint64_t *)v117, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    uint64_t v87 = v100;
    unint64_t v88 = (unint64_t)v108;
  }
  else
  {

    sub_100037A24(v79, (unint64_t)v80);
    sub_100037A24(v79, (unint64_t)v80);
    sub_10001CFB8(v79, (unint64_t)v80);
    sub_100157EEC((uint64_t *)v117, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    uint64_t v87 = v100;
    unint64_t v88 = v24;
  }
  sub_100037A24(v87, v88);
  sub_100157DEC((uint64_t)v101, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  uint64_t v89 = v102;
  sub_1001559B0((uint64_t)&v112, v102);
  *(unsigned char *)(v89 + 216) = 0;
}

void sub_10013F9B8(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint8_t **)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v2 + 16);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = sub_100F87378();
  if (v11 >> 60 == 15)
  {
    if (qword_101637320 == -1)
    {
LABEL_4:
      uint64_t v12 = type metadata accessor for Logger();
      sub_100010324(v12, (uint64_t)qword_10170F098);
      os_log_type_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unable to generate FindMyNetworkId.", v15, 2u);
        swift_slowDealloc();
      }

      *(void *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_WORD *)(a1 + 40) = 267;
      return;
    }
LABEL_14:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v16 = v10;
  unint64_t v17 = v11;
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100010324(v18, (uint64_t)qword_10170F098);
  sub_1000361E0(v16, v17);
  sub_1000361E0(v16, v17);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v31 = v2;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    os_log_type_t v30 = v22 + 4;
    sub_1000361E0(v16, v17);
    uint64_t v23 = Data.hexString.getter();
    unint64_t v25 = v24;
    sub_100037A24(v16, v17);
    uint64_t v32 = sub_1008FA0F0(v23, v25, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100037A24(v16, v17);
    sub_100037A24(v16, v17);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "findMyNetworkId: %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v31;
    swift_slowDealloc();
  }
  else
  {
    sub_100037A24(v16, v17);
    sub_100037A24(v16, v17);
  }

  uint64_t v26 = *(void *)(v2 + 64);
  os_log_type_t v27 = (uint64_t *)(*(void *)(v26 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId);
  uint64_t v28 = *v27;
  unint64_t v29 = v27[1];
  *os_log_type_t v27 = v16;
  v27[1] = v17;
  sub_100037A24(v28, v29);
  *(void *)a1 = v26;
  *(unsigned char *)(a1 + 41) = 0;
  swift_retain();
}

uint64_t sub_10013FDB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (void *)((char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v3 + 16);
  *id v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_5;
  }
  sub_10001D074(a1, (uint64_t)v23, &qword_10163C600);
  if (v23[216])
  {
    sub_10006105C((uint64_t)v23, (uint64_t)v24);
    sub_1000610B8((uint64_t)v24, (uint64_t)v21);
    uint64_t v12 = swift_allocObject();
    sub_10006105C((uint64_t)v21, v12 + 16);
    sub_10000588C(&qword_10163C608);
    swift_allocObject();
    uint64_t v13 = Future.init(_:)();
    sub_100061288((uint64_t)v24);
    return v13;
  }
  sub_1001559B0((uint64_t)v23, (uint64_t)v24);
  if (qword_101637320 != -1) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170F098);
  sub_100156058((uint64_t)v24, (void (*)(void))sub_1000361E0, (void (*)(void))sub_100037A38);
  sub_100156058((uint64_t)v24, (void (*)(void))sub_1000361E0, (void (*)(void))sub_100037A38);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)unint64_t v17 = 136446210;
    sub_1001559B0((uint64_t)v24, (uint64_t)v21);
    sub_100156058((uint64_t)v24, (void (*)(void))sub_1000361E0, (void (*)(void))sub_100037A38);
    uint64_t v18 = String.init<A>(describing:)();
    v21[0] = sub_1008FA0F0(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100156058((uint64_t)v24, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
    sub_100156058((uint64_t)v24, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Sending %{public}s)", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100156058((uint64_t)v24, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
    sub_100156058((uint64_t)v24, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
  }

  uint64_t v13 = sub_10015245C((uint64_t)v24, a2);
  sub_100156058((uint64_t)v24, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
  return v13;
}

uint64_t sub_100140234@<X0>(NSObject *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v879 = a2;
  v908 = a1;
  v904 = a3;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v4 - 8);
  v848 = (char *)&v841 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for StandaloneBeacon();
  uint64_t v843 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v844 = v8;
  uint64_t v845 = (uint64_t)&v841 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v849 = (uint64_t)&v841 - v9;
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v10 - 8);
  uint64_t v850 = (uint64_t)&v841 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v846 = type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult();
  uint64_t v12 = __chkstk_darwin(v846);
  uint64_t v847 = (uint64_t)&v841 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v856 = (uint64_t)&v841 - v14;
  uint64_t v854 = sub_10000588C(&qword_10163C658);
  __chkstk_darwin(v854);
  v855 = (NSObject **)((char *)&v841 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v887 = *(void *)(v16 - 8);
  uint64_t v888 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v853 = (uint64_t)&v841 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v867 = (uint64_t)&v841 - v19;
  uint64_t v20 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v20 - 8);
  v876 = (char *)&v841 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for MACAddress();
  uint64_t v864 = *(void *)(v22 - 8);
  uint64_t v865 = v22;
  __chkstk_darwin(v22);
  v863 = (char *)&v841 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_10163BB20);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v869 = (uint64_t)&v841 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v871 = (uint64_t)&v841 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v878 = (uint64_t)&v841 - v30;
  __chkstk_darwin(v29);
  v870 = (char *)&v841 - v31;
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = __chkstk_darwin(v32);
  v874 = (char *)&v841 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v34);
  v894 = (uint8_t *)&v841 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  unint64_t v40 = (char *)&v841 - v39;
  uint64_t v41 = __chkstk_darwin(v38);
  v896 = (char *)&v841 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v880 = (char *)&v841 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v902 = (uint64_t)&v841 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  v868 = (char *)&v841 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v858 = ((char *)&v841 - v50);
  uint64_t v51 = __chkstk_darwin(v49);
  v851 = ((char *)&v841 - v52);
  uint64_t v53 = __chkstk_darwin(v51);
  v852 = (char *)&v841 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v842 = (char *)&v841 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v861 = (char *)&v841 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  v866 = ((char *)&v841 - v60);
  uint64_t v61 = __chkstk_darwin(v59);
  v862 = (char *)&v841 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  os_log_t v901 = (os_log_t)((char *)&v841 - v64);
  uint64_t v65 = __chkstk_darwin(v63);
  v897 = ((char *)&v841 - v66);
  uint64_t v67 = __chkstk_darwin(v65);
  v859 = (char *)&v841 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  v875 = ((char *)&v841 - v70);
  uint64_t v71 = __chkstk_darwin(v69);
  v857 = ((char *)&v841 - v72);
  uint64_t v73 = __chkstk_darwin(v71);
  v860 = ((char *)&v841 - v74);
  uint64_t v75 = __chkstk_darwin(v73);
  v877 = ((char *)&v841 - v76);
  uint64_t v77 = __chkstk_darwin(v75);
  v892 = ((char *)&v841 - v78);
  uint64_t v79 = __chkstk_darwin(v77);
  v886 = ((char *)&v841 - v80);
  uint64_t v81 = __chkstk_darwin(v79);
  v891 = ((char *)&v841 - v82);
  uint64_t v83 = __chkstk_darwin(v81);
  uint64_t v890 = (uint64_t)&v841 - v84;
  uint64_t v85 = __chkstk_darwin(v83);
  v885 = (char *)&v841 - v86;
  uint64_t v87 = __chkstk_darwin(v85);
  v884 = (char *)&v841 - v88;
  uint64_t v89 = __chkstk_darwin(v87);
  v883 = (char *)&v841 - v90;
  uint64_t v91 = __chkstk_darwin(v89);
  v882 = (char *)&v841 - v92;
  uint64_t v93 = __chkstk_darwin(v91);
  v881 = (char *)&v841 - v94;
  uint64_t v95 = __chkstk_darwin(v93);
  v893 = ((char *)&v841 - v96);
  uint64_t v97 = __chkstk_darwin(v95);
  v889 = ((char *)&v841 - v98);
  uint64_t v99 = __chkstk_darwin(v97);
  v873 = (char *)&v841 - v100;
  uint64_t v101 = __chkstk_darwin(v99);
  v872 = (char *)&v841 - v102;
  uint64_t v103 = __chkstk_darwin(v101);
  v899 = (uint8_t *)&v841 - v104;
  uint64_t v105 = __chkstk_darwin(v103);
  v898 = ((char *)&v841 - v106);
  uint64_t v107 = __chkstk_darwin(v105);
  v895 = ((char *)&v841 - v108);
  __chkstk_darwin(v107);
  uint64_t v110 = (char *)&v841 - v109;
  uint64_t v111 = type metadata accessor for DispatchPredicate();
  uint64_t v112 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  __n128 v114 = ((char *)&v841 - ((v113 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v900 = v3;
  __n128 v115 = *(objc_class **)(v3 + 16);
  v114->Class isa = v115;
  (*(void (**)(NSObject *, void, uint64_t))(v112 + 104))(v114, enum case for DispatchPredicate.onQueue(_:), v111);
  __n128 v116 = v115;
  LOBYTE(v115) = _dispatchPreconditionTest(_:)();
  (*(void (**)(NSObject *, uint64_t))(v112 + 8))(v114, v111);
  if ((v115 & 1) == 0)
  {
    __break(1u);
    goto LABEL_179;
  }
  id v117 = v908;
  sub_10005F6AC((uint64_t)v908, (uint64_t)&v937);
  sub_10000588C(&qword_101639B58);
  int v118 = swift_dynamicCast();
  uint64_t v910 = v32;
  if (!v118)
  {
    uint64_t v135 = sub_100F7E39C();
    uint64_t v136 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v40, v135, v32);
    sub_10005F6AC((uint64_t)v117, (uint64_t)&v917);
    uint64_t v137 = swift_allocObject();
    sub_10005F748(&v917, (_OWORD *)(v137 + 16));
    uint64_t v138 = Logger.logObject.getter();
    int v139 = static os_log_type_t.error.getter();
    uint64_t v140 = swift_allocObject();
    *(unsigned char *)(v140 + 16) = 34;
    uint64_t v141 = swift_allocObject();
    *(unsigned char *)(v141 + 16) = 8;
    uint64_t v142 = swift_allocObject();
    *(void *)(v142 + 16) = sub_10005F760;
    *(void *)(v142 + 24) = v137;
    uint64_t v143 = swift_allocObject();
    *(void *)(v143 + 16) = sub_10005F790;
    *(void *)(v143 + 24) = v142;
    sub_10000588C(&qword_101639B60);
    uint64_t v144 = swift_allocObject();
    sub_1004B810C(v144, 3);
    void *v145 = sub_10005F778;
    v145[1] = v140;
    v145[2] = sub_100065514;
    v145[3] = v141;
    v145[4] = sub_10005F7D0;
    v145[5] = v143;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v908) = v139;
    if (os_log_type_enabled(v138, (os_log_type_t)v139))
    {
      uint64_t v909 = v33;
      uint64_t v146 = (uint8_t *)sub_1008F9FAC();
      uint64_t v147 = swift_slowAlloc();
      v952[0] = 0;
      *(void *)&long long v938 = v147;
      *(_WORD *)uint64_t v146 = 258;
      v953[0] = v146 + 2;
      *(void *)&long long v917 = sub_10005F778;
      *((void *)&v917 + 1) = v140;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)v953, (uint64_t)v952, (uint64_t)&v938);
      swift_release();
      *(void *)&long long v917 = sub_100065514;
      *((void *)&v917 + 1) = v141;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)v953, (uint64_t)v952, (uint64_t)&v938);
      swift_release();
      *(void *)&long long v917 = sub_10005F7D0;
      *((void *)&v917 + 1) = v143;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)v953, (uint64_t)v952, (uint64_t)&v938);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v138, (os_log_type_t)v908, "Invalid command from payload %{public}s", v146, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v909 + 8))(v136, v910);
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v136, v910);
    }
    uint64_t v179 = v904;
    uint64_t v180 = 6;
    goto LABEL_141;
  }
  sub_1001559B0((uint64_t)v936, (uint64_t)v952);
  sub_1001559B0((uint64_t)v936, (uint64_t)v935);
  uint64_t v119 = sub_100F7E39C();
  uint64_t v120 = *(void (**)(os_log_t, uint64_t, uint64_t))(v33 + 16);
  uint64_t v906 = v119;
  v908 = (v33 + 16);
  v907 = v120;
  ((void (*)(char *))v120)(v110);
  uint64_t v121 = swift_allocObject();
  sub_1001559B0((uint64_t)v952, v121 + 16);
  sub_100156058((uint64_t)v952, (void (*)(void))sub_1000361E0, (void (*)(void))sub_100037A38);
  char v122 = Logger.logObject.getter();
  int v123 = static os_log_type_t.default.getter();
  uint64_t v124 = swift_allocObject();
  *(unsigned char *)(v124 + 16) = 34;
  uint64_t v125 = swift_allocObject();
  *(unsigned char *)(v125 + 16) = 8;
  uint64_t v126 = swift_allocObject();
  *(void *)(v126 + 16) = sub_100156ED4;
  *(void *)(v126 + 24) = v121;
  uint64_t v127 = swift_allocObject();
  *(void *)(v127 + 16) = sub_1000654EC;
  *(void *)(v127 + 24) = v126;
  uint64_t v903 = sub_10000588C(&qword_101639B60);
  uint64_t v128 = swift_allocObject();
  sub_1004B810C(v128, 3);
  void *v129 = sub_100065514;
  v129[1] = v124;
  v129[2] = sub_100065514;
  v129[3] = v125;
  v129[4] = sub_100065500;
  v129[5] = v127;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  LODWORD(v905) = v123;
  BOOL v130 = os_log_type_enabled(v122, (os_log_type_t)v123);
  uint64_t v909 = v33;
  if (v130)
  {
    uint64_t v131 = (uint8_t *)sub_1008F9FAC();
    uint64_t v132 = swift_slowAlloc();
    *(void *)&long long v938 = 0;
    *(void *)&long long v911 = v132;
    *(_WORD *)uint64_t v131 = 258;
    v953[0] = v131 + 2;
    *(void *)&long long v917 = sub_100065514;
    *((void *)&v917 + 1) = v124;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)v953, (uint64_t)&v938, (uint64_t)&v911);
    swift_release();
    *(void *)&long long v917 = sub_100065514;
    *((void *)&v917 + 1) = v125;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)v953, (uint64_t)&v938, (uint64_t)&v911);
    swift_release();
    *(void *)&long long v917 = sub_100065500;
    *((void *)&v917 + 1) = v127;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)v953, (uint64_t)&v938, (uint64_t)&v911);
    os_log_t v133 = v901;
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v122, (os_log_type_t)v905, "Received command: %{public}s", v131, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_1008F9FA0();

    uint64_t v33 = v909;
    uint64_t v134 = v910;
    v905 = *(void (**)(char *, uint64_t))(v909 + 8);
    v905(v110, v910);
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();
    uint64_t v134 = v910;
    v905 = *(void (**)(char *, uint64_t))(v33 + 8);
    v905(v110, v910);
    os_log_t v133 = v901;
  }
  sub_1001559B0((uint64_t)v952, (uint64_t)v953);
  int v149 = sub_100156F10((uint64_t)v953);
  uint64_t v150 = v902;
  if (v149 == 4)
  {
    sub_100157BC4((uint64_t)v953);
    v907(v133, v906, v134);
    uint64_t v186 = Logger.logObject.getter();
    os_log_type_t v187 = static os_log_type_t.default.getter();
    uint64_t v188 = sub_101020788(0);
    if (os_log_type_enabled(v186, v187))
    {
      uint64_t v189 = (uint8_t *)sub_1008F9FAC();
      *(void *)&long long v938 = 0;
      *(void *)&long long v911 = 0;
      *(_WORD *)uint64_t v189 = 0;
      *(void *)&long long v917 = v189 + 2;
      sub_100E08120((uint64_t)v188, (uint64_t)&v917, (uint64_t)&v938, (uint64_t)&v911);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v186, v187, "Received pairing status.", v189, 2u);
      sub_1008F9FA0();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v905((char *)v133, v134);
    uint64_t v238 = *(char **)(v900 + 64);
    uint64_t v239 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState;
    v238[OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState] = 5;
    sub_100D1513C((uint64_t *)&v915);
    sub_10000588C(&qword_101639B68);
    if (!swift_dynamicCast())
    {
      uint64_t v902 = 0;
      uint64_t v243 = v880;
      v907((os_log_t)v880, v906, v134);
      uint64_t v244 = swift_allocObject();
      sub_1001559B0((uint64_t)v952, v244 + 16);
      sub_1001559B0((uint64_t)v935, (uint64_t)&v917);
      uint64_t v245 = (uint64_t *)sub_100157BC4((uint64_t)&v917);
      uint64_t v246 = v245[2];
      unint64_t v247 = v245[3];
      uint64_t v248 = v245[4];
      unint64_t v249 = v245[5];
      uint64_t v250 = v134;
      uint64_t v251 = v245[6];
      unint64_t v252 = v245[7];
      sub_1000361E0(*v245, v245[1]);
      sub_1000361E0(v246, v247);
      sub_1000361E0(v248, v249);
      unint64_t v253 = (unint64_t)v243;
      sub_1000361E0(v251, v252);
      os_log_type_t v254 = Logger.logObject.getter();
      os_log_type_t v255 = static os_log_type_t.error.getter();
      uint64_t v256 = swift_allocObject();
      *(unsigned char *)(v256 + 16) = 34;
      uint64_t v257 = swift_allocObject();
      *(unsigned char *)(v257 + 16) = 8;
      uint64_t v258 = swift_allocObject();
      *(void *)(v258 + 16) = sub_100156F64;
      *(void *)(v258 + 24) = v244;
      uint64_t v259 = swift_allocObject();
      *(void *)(v259 + 16) = sub_1000654EC;
      *(void *)(v259 + 24) = v258;
      uint64_t v260 = swift_allocObject();
      sub_1004B810C(v260, 3);
      void *v261 = sub_100065514;
      v261[1] = v256;
      v261[2] = sub_100065514;
      v261[3] = v257;
      v261[4] = sub_100065500;
      v261[5] = v259;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (!os_log_type_enabled(v254, v255))
      {

        swift_release();
        swift_release();
        swift_release();
        sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
        unint64_t v237 = v253;
        uint64_t v265 = v250;
        goto LABEL_139;
      }
      uint64_t v262 = (uint8_t *)sub_1008F9FAC();
      uint64_t v263 = swift_slowAlloc();
      uint64_t v933 = 0;
      *(_WORD *)uint64_t v262 = 258;
      uint64_t v932 = v263;
      v934 = v262 + 2;
      *(void *)&long long v911 = sub_100065514;
      *((void *)&v911 + 1) = v256;
      uint64_t v264 = (char *)v902;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
      if (v264) {
        goto LABEL_192;
      }
      swift_release();
      *(void *)&long long v911 = sub_100065514;
      *((void *)&v911 + 1) = v257;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
      swift_release();
      *(void *)&long long v911 = sub_100065500;
      *((void *)&v911 + 1) = v259;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v254, v255, "Invalid sendPairingStatus payload %{public}s", v262, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
      unint64_t v237 = (unint64_t)v880;
      goto LABEL_35;
    }
    long long v911 = v938;
    long long v912 = v939;
    long long v913 = v940;
    long long v914 = v941;
    long long v240 = v939;
    sub_1000361E0(v939, *((unint64_t *)&v939 + 1));
    char v241 = sub_1008F5DD8(v240, *((unint64_t *)&v240 + 1));
    if (!static DatabaseCheckpointMode.__derived_enum_equals(_:_:)(v241, 0))
    {
      v907(v150, v906, v134);
      uint64_t v331 = swift_allocObject();
      *(unsigned char *)(v331 + 16) = v241;
      uint64_t v332 = swift_allocObject();
      *(void *)(v332 + 16) = sub_10005FE10;
      *(void *)(v332 + 24) = v331;
      v333 = Logger.logObject.getter();
      os_log_type_t v334 = static os_log_type_t.error.getter();
      uint64_t v335 = swift_allocObject();
      *(unsigned char *)(v335 + 16) = 34;
      uint64_t v336 = swift_allocObject();
      *(unsigned char *)(v336 + 16) = 8;
      uint64_t v337 = swift_allocObject();
      *(void *)(v337 + 16) = sub_10005FE1C;
      *(void *)(v337 + 24) = v332;
      uint64_t v338 = swift_allocObject();
      *(void *)(v338 + 16) = sub_1000654EC;
      *(void *)(v338 + 24) = v337;
      uint64_t v339 = swift_allocObject();
      sub_1004B810C(v339, 3);
      void *v340 = sub_100065514;
      v340[1] = v335;
      v340[2] = sub_100065514;
      v340[3] = v336;
      v340[4] = sub_100065500;
      v340[5] = v338;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v333, v334))
      {
        v341 = (uint8_t *)sub_1008F9FAC();
        uint64_t v342 = swift_slowAlloc();
        v915 = 0;
        v934 = (uint8_t *)v342;
        *(_WORD *)v341 = 258;
        *(void *)&long long v938 = v341 + 2;
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v335;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v336;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065500;
        *((void *)&v917 + 1) = v338;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v915, (uint64_t)&v934);
        v343 = (char *)v902;
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v333, v334, "Pairing failed with status %{public}s", v341, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
        sub_10005FEF0((uint64_t *)&v911, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        v344 = v343;
        uint64_t v345 = v910;
LABEL_113:
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v905)(v344, v345);
        uint64_t v180 = 7;
LABEL_140:
        uint64_t v179 = v904;
LABEL_141:
        *uint64_t v179 = v180;
        *(_OWORD *)(v179 + 1) = 0u;
        *(_OWORD *)(v179 + 3) = 0u;
        *((unsigned char *)v179 + 40) = 11;
        *((unsigned char *)v179 + 216) = 1;
        return result;
      }

      swift_release();
      swift_release();
      swift_release();
      sub_10005FEF0((uint64_t *)&v911, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
      v344 = (char *)v902;
LABEL_112:
      uint64_t v345 = v134;
      goto LABEL_113;
    }
    os_log_t v901 = v239;
    long long v242 = v911;
    sub_1000361E0(v911, *((unint64_t *)&v911 + 1));
    sub_1004352BC(v242, *((unint64_t *)&v242 + 1), (uint64_t *)&v917);
    v905 = 0;
    long long v667 = v917;
    uint64_t v902 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
    uint64_t v668 = *(void *)&v238[OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo];
    *((void *)&v918 + 1) = &type metadata for CollaborativeKeyGen.v1.C3;
    *(void *)&long long v919 = sub_10005FE44();
    long long v917 = v667;
    sub_10001D608((uint64_t)&v917, (uint64_t)&v938, &qword_101639B78);
    v669 = v238;
    uint64_t v670 = v668 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3;
    swift_beginAccess();
    swift_retain();
    v897 = *((void *)&v667 + 1);
    v898 = v667;
    sub_1000361E0(v667, *((unint64_t *)&v667 + 1));
    sub_100062604((uint64_t)&v938, v670, &qword_101639B78);
    swift_endAccess();
    swift_release();
    v671 = (char *)v902;
    v672 = (uint64_t *)(*(void *)&v669[v902] + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
    uint64_t v673 = *v672;
    unint64_t v674 = v672[1];
    *(_OWORD *)v672 = v240;
    sub_1000361E0(v240, *((unint64_t *)&v240 + 1));
    sub_100037A24(v673, v674);
    v896 = v669;
    uint64_t v675 = *(void *)&v671[(void)v669];
    uint64_t v676 = v910;
    unint64_t v678 = *((void *)&v913 + 1);
    uint64_t v677 = v913;
    v679 = (uint64_t *)(v675 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4);
    uint64_t v680 = *v679;
    unint64_t v681 = v679[1];
    uint64_t *v679 = v913;
    v679[1] = v678;
    sub_1000361E0(v677, v678);
    sub_100037A24(v680, v681);
    v682 = v862;
    v907((os_log_t)v862, v906, v676);
    uint64_t v683 = swift_allocObject();
    *(unsigned char *)(v683 + 16) = v241;
    uint64_t v684 = swift_allocObject();
    *(void *)(v684 + 16) = sub_100065688;
    *(void *)(v684 + 24) = v683;
    v685 = Logger.logObject.getter();
    os_log_type_t v686 = static os_log_type_t.default.getter();
    uint64_t v687 = swift_allocObject();
    *(unsigned char *)(v687 + 16) = 34;
    uint64_t v688 = swift_allocObject();
    *(unsigned char *)(v688 + 16) = 8;
    uint64_t v689 = swift_allocObject();
    *(void *)(v689 + 16) = sub_1000654F0;
    *(void *)(v689 + 24) = v684;
    uint64_t v690 = swift_allocObject();
    *(void *)(v690 + 16) = sub_1000654EC;
    *(void *)(v690 + 24) = v689;
    uint64_t v691 = swift_allocObject();
    sub_1004B810C(v691, 3);
    void *v692 = sub_100065514;
    v692[1] = v687;
    v692[2] = sub_100065514;
    v692[3] = v688;
    v692[4] = sub_100065500;
    v692[5] = v690;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v685, v686))
    {
      v694 = (uint8_t *)sub_1008F9FAC();
      uint64_t v695 = swift_slowAlloc();
      v915 = 0;
      v934 = (uint8_t *)v695;
      *(_WORD *)v694 = 258;
      *(void *)&long long v938 = v694 + 2;
      *(void *)&long long v917 = sub_100065514;
      *((void *)&v917 + 1) = v687;
      v696 = v905;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v915, (uint64_t)&v934);
      if (v696) {
        goto LABEL_192;
      }
      swift_release();
      *(void *)&long long v917 = sub_100065514;
      *((void *)&v917 + 1) = v688;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v915, (uint64_t)&v934);
      swift_release();
      *(void *)&long long v917 = sub_100065500;
      *((void *)&v917 + 1) = v690;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v915, (uint64_t)&v934);
      v905 = 0;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v685, v686, "status: %{public}s", v694, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      v697 = *(void (**)(char *, uint64_t))(v33 + 8);
      v698 = v862;
      uint64_t v676 = v910;
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      v697 = *(void (**)(char *, uint64_t))(v33 + 8);
      v698 = v682;
    }
    uint64_t v902 = (uint64_t)v697;
    v697(v698, v676);
    v907(v866, v906, v676);
    v729 = (_OWORD *)swift_allocObject();
    long long v730 = v912;
    v729[1] = v911;
    v729[2] = v730;
    long long v731 = v914;
    v729[3] = v913;
    v729[4] = v731;
    v732 = (_OWORD *)swift_allocObject();
    long long v733 = v912;
    v732[1] = v911;
    v732[2] = v733;
    long long v734 = v914;
    v732[3] = v913;
    v732[4] = v734;
    sub_10005FEF0((uint64_t *)&v911, (void (*)(uint64_t, uint64_t))sub_1000361E0);
    sub_10005FEF0((uint64_t *)&v911, (void (*)(uint64_t, uint64_t))sub_1000361E0);
    v895 = Logger.logObject.getter();
    LODWORD(v899) = static os_log_type_t.debug.getter();
    uint64_t v735 = swift_allocObject();
    *(unsigned char *)(v735 + 16) = 0;
    uint64_t v736 = swift_allocObject();
    *(unsigned char *)(v736 + 16) = 8;
    uint64_t v737 = swift_allocObject();
    *(void *)(v737 + 16) = sub_100157028;
    *(void *)(v737 + 24) = v729;
    uint64_t v738 = swift_allocObject();
    *(void *)(v738 + 16) = sub_100060004;
    *(void *)(v738 + 24) = v737;
    uint64_t v739 = swift_allocObject();
    *(unsigned char *)(v739 + 16) = 32;
    v740 = (uint8_t *)swift_allocObject();
    v740[16] = 8;
    v741 = v895;
    uint64_t v742 = swift_allocObject();
    *(void *)(v742 + 16) = sub_10005FFDC;
    *(void *)(v742 + 24) = v732;
    uint64_t v743 = swift_allocObject();
    *(void *)(v743 + 16) = sub_1000654EC;
    *(void *)(v743 + 24) = v742;
    uint64_t v744 = swift_allocObject();
    sub_1004B810C(v744, 6);
    void *v745 = sub_100065514;
    v745[1] = v735;
    v745[2] = sub_100065514;
    v745[3] = v736;
    v745[4] = sub_10006000C;
    v745[5] = v738;
    v745[6] = sub_100065514;
    v745[7] = v739;
    v745[8] = sub_100065514;
    v745[9] = v740;
    v745[10] = sub_100065500;
    v745[11] = v743;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v741, (os_log_type_t)v899))
    {
      v894 = v740;
      v746 = (uint8_t *)sub_1008F9FAC();
      uint64_t v747 = swift_slowAlloc();
      v915 = 0;
      v934 = (uint8_t *)v747;
      *(_WORD *)v746 = 514;
      *(void *)&long long v938 = v746 + 2;
      *(void *)&long long v917 = sub_100065514;
      *((void *)&v917 + 1) = v735;
      v748 = v905;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v915, (uint64_t)&v934);
      if (v748) {
        goto LABEL_192;
      }
      swift_release();
      *(void *)&long long v917 = sub_100065514;
      *((void *)&v917 + 1) = v736;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v915, (uint64_t)&v934);
      swift_release();
      *(void *)&long long v917 = sub_10006000C;
      *((void *)&v917 + 1) = v738;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v915, (uint64_t)&v934);
      swift_release();
      *(void *)&long long v917 = sub_100065514;
      *((void *)&v917 + 1) = v739;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v915, (uint64_t)&v934);
      swift_release();
      *(void *)&long long v917 = sub_100065514;
      *((void *)&v917 + 1) = v894;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v915, (uint64_t)&v934);
      uint64_t v749 = v910;
      swift_release();
      *(void *)&long long v917 = sub_100065500;
      *((void *)&v917 + 1) = v743;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v915, (uint64_t)&v934);
      v905 = 0;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v741, (os_log_type_t)v899, "S4 count %ld: %s", v746, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      v750 = v866;
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v750 = v866;
      uint64_t v749 = v910;
    }
    ((void (*)(NSObject *, uint64_t))v902)(v750, v749);
    v751 = v861;
    v907((os_log_t)v861, v906, v749);
    v752 = (_OWORD *)swift_allocObject();
    long long v753 = v912;
    v752[1] = v911;
    v752[2] = v753;
    long long v754 = v914;
    v752[3] = v913;
    v752[4] = v754;
    sub_10005FEF0((uint64_t *)&v911, (void (*)(uint64_t, uint64_t))sub_1000361E0);
    v755 = Logger.logObject.getter();
    os_log_type_t v756 = static os_log_type_t.debug.getter();
    uint64_t v757 = swift_allocObject();
    *(unsigned char *)(v757 + 16) = 32;
    uint64_t v758 = swift_allocObject();
    *(unsigned char *)(v758 + 16) = 8;
    uint64_t v759 = swift_allocObject();
    *(void *)(v759 + 16) = sub_1000656A0;
    *(void *)(v759 + 24) = v752;
    uint64_t v760 = swift_allocObject();
    *(void *)(v760 + 16) = sub_1000654EC;
    *(void *)(v760 + 24) = v759;
    uint64_t v761 = swift_allocObject();
    sub_1004B810C(v761, 3);
    void *v762 = sub_100065514;
    v762[1] = v757;
    v762[2] = sub_100065514;
    v762[3] = v758;
    v762[4] = sub_100065500;
    v762[5] = v760;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v755, v756))
    {
      v763 = (uint8_t *)sub_1008F9FAC();
      uint64_t v764 = swift_slowAlloc();
      v915 = 0;
      v934 = (uint8_t *)v764;
      *(_WORD *)v763 = 258;
      *(void *)&long long v938 = v763 + 2;
      *(void *)&long long v917 = sub_100065514;
      *((void *)&v917 + 1) = v757;
      v765 = v905;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v915, (uint64_t)&v934);
      if (v765) {
        goto LABEL_192;
      }
      swift_release();
      *(void *)&long long v917 = sub_100065514;
      *((void *)&v917 + 1) = v758;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v915, (uint64_t)&v934);
      swift_release();
      *(void *)&long long v917 = sub_100065500;
      *((void *)&v917 + 1) = v760;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v915, (uint64_t)&v934);
      unint64_t v766 = (unint64_t)v897;
      v905 = 0;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v755, v756, "C3: %s", v763, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      uint64_t v749 = v910;
      ((void (*)(char *, uint64_t))v902)(v861, v910);
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      ((void (*)(char *, uint64_t))v902)(v751, v749);
      unint64_t v766 = (unint64_t)v897;
    }
    uint64_t v767 = (uint64_t)&v896[OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext];
    swift_beginAccess();
    sub_10001D074(v767, (uint64_t)&v917, &qword_101639A40);
    uint64_t v768 = (uint64_t)v898;
    v769 = v858;
    if (!*((void *)&v918 + 1))
    {
      unint64_t v772 = v766;
      sub_10001DAB4((uint64_t)&v917, &qword_101639A40);
      goto LABEL_167;
    }
    sub_10000588C(&qword_101639C60);
    type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
    if ((swift_dynamicCast() & 1) == 0)
    {
      unint64_t v772 = v766;
      goto LABEL_167;
    }
    uint64_t v770 = v938;
    sub_1000361E0(v768, v766);
    v771 = (char *)v905;
    sub_100A8B808(v770, v768, v766, &v938);
    if (v771)
    {
      swift_errorRelease();
      unint64_t v772 = v766;
      sub_10001CFB8(v768, v766);
      swift_release();
      v905 = 0;
LABEL_167:
      v907(v769, v906, v749);
      v775 = Logger.logObject.getter();
      os_log_type_t v776 = static os_log_type_t.error.getter();
      v777 = sub_101020788(0);
      if (os_log_type_enabled(v775, v776))
      {
        v778 = v769;
        v779 = (uint8_t *)sub_1008F9FAC();
        v934 = 0;
        uint64_t v933 = 0;
        *(_WORD *)v779 = 0;
        *(void *)&long long v917 = v779 + 2;
        sub_100E08120((uint64_t)v777, (uint64_t)&v917, (uint64_t)&v934, (uint64_t)&v933);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v775, v776, "Unable to generate initial pairing data from owner context and C3!)", v779, 2u);
        sub_1008F9FA0();

        sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
        sub_10001CFB8(v768, v772);
        sub_10005FEF0((uint64_t *)&v911, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        v780 = v778;
      }
      else
      {
        sub_10001CFB8(v768, v772);

        swift_bridgeObjectRelease();
        sub_10005FEF0((uint64_t *)&v911, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
        v780 = v769;
      }
      uint64_t result = ((uint64_t (*)(NSObject *, uint64_t))v902)(v780, v749);
      v781 = v904;
      uint64_t *v904 = 9;
      *(_OWORD *)(v781 + 1) = 0u;
      *(_OWORD *)(v781 + 3) = 0u;
      *((unsigned char *)v781 + 40) = 11;
      *((unsigned char *)v781 + 216) = 1;
      return result;
    }
    sub_10001CFB8(v768, v766);
    v782 = v855;
    sub_10014EBB8(&v938, v879, (uint64_t)v855);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v797 = v856;
      sub_100157D84((uint64_t)v782, v856, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult);
      uint64_t v798 = v847;
      sub_1001570F0(v797, v847, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v906 = 0;
        v905 = (void (*)(char *, uint64_t))v770;
        uint64_t v799 = v849;
        sub_100157D84(v798, v849, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
        uint64_t v800 = sub_100F7E378();
        v907((os_log_t)v852, v800, v749);
        uint64_t v801 = v845;
        sub_1001570F0(v799, v845, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
        unint64_t v802 = (*(unsigned __int8 *)(v843 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v843 + 80);
        uint64_t v803 = swift_allocObject();
        sub_100157D84(v801, v803 + v802, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
        uint64_t v804 = swift_allocObject();
        *(void *)(v804 + 16) = sub_10015715C;
        *(void *)(v804 + 24) = v803;
        sub_1001570F0(v799, v801, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
        uint64_t v805 = swift_allocObject();
        sub_100157D84(v801, v805 + v802, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
        uint64_t v806 = swift_allocObject();
        *(void *)(v806 + 16) = sub_100060444;
        *(void *)(v806 + 24) = v805;
        v908 = Logger.logObject.getter();
        LODWORD(v907) = static os_log_type_t.default.getter();
        uint64_t v807 = swift_allocObject();
        *(unsigned char *)(v807 + 16) = 32;
        uint64_t v902 = swift_allocObject();
        *(unsigned char *)(v902 + 16) = 8;
        uint64_t v808 = swift_allocObject();
        *(void *)(v808 + 16) = sub_100060258;
        *(void *)(v808 + 24) = v804;
        uint64_t v809 = swift_allocObject();
        *(void *)(v809 + 16) = sub_1000654EC;
        *(void *)(v809 + 24) = v808;
        uint64_t v810 = swift_allocObject();
        *(unsigned char *)(v810 + 16) = 112;
        uint64_t v811 = swift_allocObject();
        *(unsigned char *)(v811 + 16) = 8;
        uint64_t v812 = swift_allocObject();
        *(void *)(v812 + 16) = 1752392040;
        uint64_t v813 = swift_allocObject();
        *(void *)(v813 + 16) = sub_100060540;
        *(void *)(v813 + 24) = v812;
        uint64_t v814 = swift_allocObject();
        *(unsigned char *)(v814 + 16) = 33;
        uint64_t v815 = swift_allocObject();
        *(unsigned char *)(v815 + 16) = 8;
        uint64_t v816 = swift_allocObject();
        *(void *)(v816 + 16) = sub_1000604E8;
        *(void *)(v816 + 24) = v806;
        uint64_t v817 = swift_allocObject();
        *(void *)(v817 + 16) = sub_1000654EC;
        *(void *)(v817 + 24) = v816;
        uint64_t v818 = swift_allocObject();
        sub_1004B810C(v818, 9);
        void *v819 = sub_100065514;
        v819[1] = v807;
        v820 = (char *)v902;
        v819[2] = sub_100065514;
        v819[3] = v820;
        v819[4] = sub_100065500;
        v819[5] = v809;
        v819[6] = sub_100065514;
        v819[7] = v810;
        v819[8] = sub_100065514;
        v819[9] = v811;
        v819[10] = sub_10006000C;
        v819[11] = v813;
        v819[12] = sub_100065514;
        v819[13] = v814;
        v819[14] = sub_100065514;
        v819[15] = v815;
        v819[16] = sub_100065500;
        v819[17] = v817;
        uint64_t v903 = v807;
        v821 = v820;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v908, (os_log_type_t)v907))
        {
          v895 = v813;
          v899 = (uint8_t *)v817;
          uint64_t v900 = v815;
          v822 = (uint8_t *)sub_1008F9FAC();
          uint64_t v823 = swift_slowAlloc();
          uint64_t v933 = 0;
          v893 = v823;
          v894 = v822;
          *(_WORD *)v822 = 771;
          uint64_t v932 = v823;
          v934 = v822 + 2;
          *(void *)&long long v917 = sub_100065514;
          *((void *)&v917 + 1) = v903;
          v771 = (char *)v906;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
          v724 = v904;
          if (v771) {
            goto LABEL_192;
          }
          swift_release();
          *(void *)&long long v917 = sub_100065514;
          *((void *)&v917 + 1) = v821;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
          swift_release();
          *(void *)&long long v917 = sub_100065500;
          *((void *)&v917 + 1) = v809;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
          swift_release();
          *(void *)&long long v917 = sub_100065514;
          *((void *)&v917 + 1) = v810;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
          uint64_t v824 = (uint64_t)v898;
          swift_release();
          *(void *)&long long v917 = sub_100065514;
          *((void *)&v917 + 1) = v811;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
          swift_release();
          *(void *)&long long v917 = sub_10006000C;
          *((void *)&v917 + 1) = v895;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
          swift_release();
          *(void *)&long long v917 = sub_100065514;
          *((void *)&v917 + 1) = v814;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
          swift_release();
          *(void *)&long long v917 = sub_100065514;
          *((void *)&v917 + 1) = v900;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
          uint64_t v825 = v910;
          uint64_t v826 = v849;
          v827 = v852;
          swift_release();
          *(void *)&long long v917 = sub_100065500;
          *((void *)&v917 + 1) = v899;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
          swift_release();
          v828 = v908;
          _os_log_impl((void *)&_mh_execute_header, v908, (os_log_type_t)v907, "Created standalone beacon: %s. BeaconId: %{private,mask.hash}s", v894, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          sub_1008F9FA0();

          (*(void (**)(char *, uint64_t))(v909 + 8))(v827, v825);
          sub_100157DEC(v826, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
          sub_100157DEC(v856, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult);
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();

          (*(void (**)(char *, uint64_t))(v909 + 8))(v852, v910);
          sub_100157DEC(v849, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
          sub_100157DEC(v856, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult);
          v724 = v904;
          uint64_t v824 = (uint64_t)v898;
          v771 = (char *)v906;
        }
        unint64_t v831 = (unint64_t)v897;
        *((unsigned char *)&v901->isa + (void)v896) = 9;
      }
      else
      {
        unint64_t v831 = v766;
        uint64_t v832 = v798 + *(int *)(sub_10000588C(&qword_101639B90) + 48);
        sub_100157D84(v798, v853, type metadata accessor for OwnedBeaconGroup);
        sub_100157D84(v832, v850, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        v833 = v842;
        v907((os_log_t)v842, v906, v749);
        v834 = Logger.logObject.getter();
        os_log_type_t v835 = static os_log_type_t.default.getter();
        v836 = sub_101020788(0);
        if (os_log_type_enabled(v834, v835))
        {
          v837 = (uint8_t *)sub_1008F9FAC();
          v934 = 0;
          uint64_t v933 = 0;
          *(_WORD *)v837 = 0;
          *(void *)&long long v917 = v837 + 2;
          sub_100E08120((uint64_t)v836, (uint64_t)&v917, (uint64_t)&v934, (uint64_t)&v933);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v834, v835, "Saved new beacon. Proceed to sending pairing complete.", v837, 2u);
          unint64_t v831 = (unint64_t)v897;
          sub_1008F9FA0();
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        ((void (*)(char *, uint64_t))v902)(v833, v749);
        v724 = v904;
        os_log_t v838 = v901;
        char v839 = sub_1004CF378();
        uint64_t v824 = (uint64_t)v898;
        if (v839) {
          *((unsigned char *)&v838->isa + (void)v896) = 9;
        }
        uint64_t v840 = v850;
        sub_100A632C8(v850);
        sub_100157DEC(v840, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_100157DEC(v853, type metadata accessor for OwnedBeaconGroup);
        sub_100157DEC(v856, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult);
      }
      sub_1010BC390();
      static Data.random(bytes:)();
      sub_100157248();
      BinaryDecodable.init(data:)();
      if (!v771)
      {
        sub_10001CFB8(v824, v831);
        swift_release();
        sub_100157EEC((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
        sub_10005FEF0((uint64_t *)&v911, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
        sub_10015729C((uint64_t)&v917);
        uint64_t result = sub_1001559B0((uint64_t)&v917, (uint64_t)v724);
        *((unsigned char *)v724 + 216) = 0;
        return result;
      }
      swift_errorRelease();
      sub_10001CFB8(v824, v831);
      swift_release();
      sub_100157EEC((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
      sub_10005FEF0((uint64_t *)&v911, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      uint64_t result = sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
      uint64_t v774 = 9;
      goto LABEL_165;
    }
    v905 = (void (*)(char *, uint64_t))v770;
    v783 = *v782;
    uint64_t v111 = (uint64_t)v851;
    v907(v851, v906, v749);
    uint64_t v784 = swift_allocObject();
    *(void *)(v784 + 16) = v783;
    v908 = v783;
    swift_errorRetain();
    __n128 v114 = Logger.logObject.getter();
    LODWORD(v783) = static os_log_type_t.error.getter();
    uint64_t v785 = swift_allocObject();
    *(unsigned char *)(v785 + 16) = 34;
    uint64_t v786 = swift_allocObject();
    *(unsigned char *)(v786 + 16) = 8;
    uint64_t v787 = swift_allocObject();
    *(void *)(v787 + 16) = sub_10015B0D4;
    *(void *)(v787 + 24) = v784;
    uint64_t v788 = swift_allocObject();
    *(void *)(v788 + 16) = sub_1000654EC;
    *(void *)(v788 + 24) = v787;
    uint64_t v789 = swift_allocObject();
    sub_1004B810C(v789, 3);
    void *v790 = sub_100065514;
    v790[1] = v785;
    v790[2] = sub_100065514;
    v790[3] = v786;
    v790[4] = sub_100065500;
    v790[5] = v788;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v907) = v783;
    if (os_log_type_enabled(v114, (os_log_type_t)v783))
    {
      v791 = (uint8_t *)sub_1008F9FAC();
      uint64_t v792 = swift_slowAlloc();
      uint64_t v933 = 0;
      *(_WORD *)v791 = 258;
      uint64_t v932 = v792;
      v934 = v791 + 2;
      *(void *)&long long v917 = sub_100065514;
      *((void *)&v917 + 1) = v785;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
      swift_release();
      *(void *)&long long v917 = sub_100065514;
      *((void *)&v917 + 1) = v786;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
      swift_release();
      *(void *)&long long v917 = sub_100065500;
      *((void *)&v917 + 1) = v788;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
      uint64_t v793 = v910;
      v794 = v851;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v114, (os_log_type_t)v907, "Failed to create new beacon. %{public}s", v791, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      uint64_t v795 = (uint64_t)v794;
      uint64_t v796 = v793;
LABEL_180:
      ((void (*)(uint64_t, uint64_t))v902)(v795, v796);
      uint64_t v829 = (uint64_t)v848;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v864 + 56))(v848, 1, 1, v865);
      sub_1001540B0((uint64_t)v908, v879, v829);
      swift_release();
      sub_100157EEC((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
      sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
      swift_errorRelease();
      sub_10001CFB8((uint64_t)v898, (unint64_t)v897);
      sub_10005FEF0((uint64_t *)&v911, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      uint64_t result = sub_10001DAB4(v829, (uint64_t *)&unk_1016477E0);
      v830 = v904;
      uint64_t *v904 = 9;
      *(_OWORD *)(v830 + 1) = 0u;
      *(_OWORD *)(v830 + 3) = 0u;
      *((unsigned char *)v830 + 40) = 11;
      *((unsigned char *)v830 + 216) = 1;
      return result;
    }
LABEL_179:

    swift_release();
    swift_release();
    swift_release();
    uint64_t v795 = v111;
    uint64_t v796 = v910;
    goto LABEL_180;
  }
  if (v149 == 2)
  {
    sub_100157BC4((uint64_t)v953);
    unint64_t v181 = (unint64_t)v889;
    v907(v889, v906, v134);
    uint64_t v182 = Logger.logObject.getter();
    os_log_type_t v183 = static os_log_type_t.default.getter();
    uint64_t v184 = sub_101020788(0);
    if (os_log_type_enabled(v182, v183))
    {
      uint64_t v185 = (uint8_t *)sub_1008F9FAC();
      *(void *)&long long v938 = 0;
      *(void *)&long long v911 = 0;
      *(_WORD *)uint64_t v185 = 0;
      *(void *)&long long v917 = v185 + 2;
      sub_100E08120((uint64_t)v184, (uint64_t)&v917, (uint64_t)&v938, (uint64_t)&v911);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v182, v183, "Received pairing data.", v185, 2u);
      sub_1008F9FA0();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v905((char *)v181, v134);
    uint64_t v205 = v893;
    sub_100D1513C((uint64_t *)&v911);
    sub_10000588C(&qword_101639B68);
    if (swift_dynamicCast())
    {
      long long v948 = v927;
      long long v949 = v928;
      long long v950 = v929;
      uint64_t v951 = v930;
      long long v944 = v923;
      long long v945 = v924;
      long long v946 = v925;
      long long v947 = v926;
      long long v940 = v919;
      long long v941 = v920;
      long long v942 = v921;
      long long v943 = v922;
      long long v938 = v917;
      long long v939 = v918;
      v907(v205, v906, v134);
      uint64_t v206 = swift_allocObject();
      long long v207 = v949;
      *(_OWORD *)(v206 + 176) = v948;
      *(_OWORD *)(v206 + 192) = v207;
      *(_OWORD *)(v206 + 208) = v950;
      *(void *)(v206 + 224) = v951;
      long long v208 = v945;
      *(_OWORD *)(v206 + 112) = v944;
      *(_OWORD *)(v206 + 128) = v208;
      long long v209 = v947;
      *(_OWORD *)(v206 + 144) = v946;
      *(_OWORD *)(v206 + 160) = v209;
      long long v210 = v941;
      *(_OWORD *)(v206 + 48) = v940;
      *(_OWORD *)(v206 + 64) = v210;
      long long v211 = v943;
      *(_OWORD *)(v206 + 80) = v942;
      *(_OWORD *)(v206 + 96) = v211;
      long long v212 = v939;
      *(_OWORD *)(v206 + 16) = v938;
      *(_OWORD *)(v206 + 32) = v212;
      sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      uint64_t v213 = Logger.logObject.getter();
      int v214 = static os_log_type_t.debug.getter();
      uint64_t v215 = swift_allocObject();
      *(unsigned char *)(v215 + 16) = 32;
      uint64_t v216 = (char *)v205;
      uint64_t v217 = swift_allocObject();
      *(unsigned char *)(v217 + 16) = 8;
      uint64_t v218 = swift_allocObject();
      *(void *)(v218 + 16) = sub_1000654E8;
      *(void *)(v218 + 24) = v206;
      uint64_t v219 = swift_allocObject();
      *(void *)(v219 + 16) = sub_1000654EC;
      *(void *)(v219 + 24) = v218;
      uint64_t v220 = swift_allocObject();
      sub_1004B810C(v220, 3);
      *uint64_t v221 = sub_100065514;
      v221[1] = v215;
      v221[2] = sub_100065514;
      v221[3] = v217;
      v221[4] = sub_100065500;
      v221[5] = v219;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v902) = v214;
      if (os_log_type_enabled(v213, (os_log_type_t)v214))
      {
        uint64_t v222 = (uint8_t *)sub_1008F9FAC();
        uint64_t v223 = swift_slowAlloc();
        v915 = 0;
        v934 = (uint8_t *)v223;
        *(_WORD *)uint64_t v222 = 258;
        *(void *)&long long v911 = v222 + 2;
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v215;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v217;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065500;
        *((void *)&v917 + 1) = v219;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v213, (os_log_type_t)v902, "SerialNumber: %s", v222, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        uint64_t v224 = (char *)v893;
        uint64_t v134 = v910;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        uint64_t v224 = v216;
      }
      v905(v224, v134);
      v312 = v881;
      v907((os_log_t)v881, v906, v134);
      uint64_t v313 = swift_allocObject();
      long long v314 = v949;
      *(_OWORD *)(v313 + 176) = v948;
      *(_OWORD *)(v313 + 192) = v314;
      *(_OWORD *)(v313 + 208) = v950;
      *(void *)(v313 + 224) = v951;
      long long v315 = v945;
      *(_OWORD *)(v313 + 112) = v944;
      *(_OWORD *)(v313 + 128) = v315;
      long long v316 = v947;
      *(_OWORD *)(v313 + 144) = v946;
      *(_OWORD *)(v313 + 160) = v316;
      long long v317 = v941;
      *(_OWORD *)(v313 + 48) = v940;
      *(_OWORD *)(v313 + 64) = v317;
      long long v318 = v943;
      *(_OWORD *)(v313 + 80) = v942;
      *(_OWORD *)(v313 + 96) = v318;
      long long v319 = v939;
      *(_OWORD *)(v313 + 16) = v938;
      *(_OWORD *)(v313 + 32) = v319;
      sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v320 = Logger.logObject.getter();
      os_log_type_t v321 = static os_log_type_t.debug.getter();
      uint64_t v322 = swift_allocObject();
      *(unsigned char *)(v322 + 16) = 32;
      uint64_t v323 = swift_allocObject();
      *(unsigned char *)(v323 + 16) = 8;
      uint64_t v324 = swift_allocObject();
      *(void *)(v324 + 16) = sub_100060C2C;
      *(void *)(v324 + 24) = v313;
      uint64_t v325 = swift_allocObject();
      *(void *)(v325 + 16) = sub_1000654EC;
      *(void *)(v325 + 24) = v324;
      uint64_t v326 = swift_allocObject();
      sub_1004B810C(v326, 3);
      void *v327 = sub_100065514;
      v327[1] = v322;
      v327[2] = sub_100065514;
      v327[3] = v323;
      v327[4] = sub_100065500;
      v327[5] = v325;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v320, v321))
      {
        v328 = (uint8_t *)sub_1008F9FAC();
        uint64_t v329 = swift_slowAlloc();
        v915 = 0;
        v934 = (uint8_t *)v329;
        *(_WORD *)v328 = 258;
        *(void *)&long long v911 = v328 + 2;
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v322;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v323;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065500;
        *((void *)&v917 + 1) = v325;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v320, v321, "ChipId: %s", v328, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v330 = v881;
        uint64_t v134 = v910;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        v330 = v312;
      }
      v905(v330, v134);
      v346 = v882;
      v907((os_log_t)v882, v906, v134);
      uint64_t v347 = swift_allocObject();
      long long v348 = v949;
      *(_OWORD *)(v347 + 176) = v948;
      *(_OWORD *)(v347 + 192) = v348;
      *(_OWORD *)(v347 + 208) = v950;
      *(void *)(v347 + 224) = v951;
      long long v349 = v945;
      *(_OWORD *)(v347 + 112) = v944;
      *(_OWORD *)(v347 + 128) = v349;
      long long v350 = v947;
      *(_OWORD *)(v347 + 144) = v946;
      *(_OWORD *)(v347 + 160) = v350;
      long long v351 = v941;
      *(_OWORD *)(v347 + 48) = v940;
      *(_OWORD *)(v347 + 64) = v351;
      long long v352 = v943;
      *(_OWORD *)(v347 + 80) = v942;
      *(_OWORD *)(v347 + 96) = v352;
      long long v353 = v939;
      *(_OWORD *)(v347 + 16) = v938;
      *(_OWORD *)(v347 + 32) = v353;
      sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v354 = Logger.logObject.getter();
      os_log_type_t v355 = static os_log_type_t.debug.getter();
      uint64_t v356 = swift_allocObject();
      *(unsigned char *)(v356 + 16) = 32;
      uint64_t v357 = swift_allocObject();
      *(unsigned char *)(v357 + 16) = 8;
      uint64_t v358 = swift_allocObject();
      *(void *)(v358 + 16) = sub_100060BF4;
      *(void *)(v358 + 24) = v347;
      uint64_t v359 = swift_allocObject();
      *(void *)(v359 + 16) = sub_1000654EC;
      *(void *)(v359 + 24) = v358;
      uint64_t v360 = swift_allocObject();
      sub_1004B810C(v360, 3);
      void *v361 = sub_100065514;
      v361[1] = v356;
      v361[2] = sub_100065514;
      v361[3] = v357;
      v361[4] = sub_100065500;
      v361[5] = v359;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v354, v355))
      {
        v362 = (uint8_t *)sub_1008F9FAC();
        uint64_t v363 = swift_slowAlloc();
        v915 = 0;
        v934 = (uint8_t *)v363;
        *(_WORD *)v362 = 258;
        *(void *)&long long v911 = v362 + 2;
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v356;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v357;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065500;
        *((void *)&v917 + 1) = v359;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v354, v355, "ECID: %s", v362, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v364 = v882;
        uint64_t v134 = v910;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        v364 = v346;
      }
      v905(v364, v134);
      v365 = v883;
      v907((os_log_t)v883, v906, v134);
      uint64_t v366 = swift_allocObject();
      long long v367 = v949;
      *(_OWORD *)(v366 + 176) = v948;
      *(_OWORD *)(v366 + 192) = v367;
      *(_OWORD *)(v366 + 208) = v950;
      *(void *)(v366 + 224) = v951;
      long long v368 = v945;
      *(_OWORD *)(v366 + 112) = v944;
      *(_OWORD *)(v366 + 128) = v368;
      long long v369 = v947;
      *(_OWORD *)(v366 + 144) = v946;
      *(_OWORD *)(v366 + 160) = v369;
      long long v370 = v941;
      *(_OWORD *)(v366 + 48) = v940;
      *(_OWORD *)(v366 + 64) = v370;
      long long v371 = v943;
      *(_OWORD *)(v366 + 80) = v942;
      *(_OWORD *)(v366 + 96) = v371;
      long long v372 = v939;
      *(_OWORD *)(v366 + 16) = v938;
      *(_OWORD *)(v366 + 32) = v372;
      sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v373 = Logger.logObject.getter();
      os_log_type_t v374 = static os_log_type_t.debug.getter();
      uint64_t v375 = swift_allocObject();
      *(unsigned char *)(v375 + 16) = 32;
      uint64_t v376 = swift_allocObject();
      *(unsigned char *)(v376 + 16) = 8;
      uint64_t v377 = swift_allocObject();
      *(void *)(v377 + 16) = sub_100060B9C;
      *(void *)(v377 + 24) = v366;
      uint64_t v378 = swift_allocObject();
      *(void *)(v378 + 16) = sub_1000654EC;
      *(void *)(v378 + 24) = v377;
      uint64_t v379 = swift_allocObject();
      sub_1004B810C(v379, 3);
      void *v380 = sub_100065514;
      v380[1] = v375;
      v380[2] = sub_100065514;
      v380[3] = v376;
      v380[4] = sub_100065500;
      v380[5] = v378;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v373, v374))
      {
        v381 = (uint8_t *)sub_1008F9FAC();
        uint64_t v382 = swift_slowAlloc();
        v915 = 0;
        v934 = (uint8_t *)v382;
        *(_WORD *)v381 = 258;
        *(void *)&long long v911 = v381 + 2;
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v375;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v376;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065500;
        *((void *)&v917 + 1) = v378;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v373, v374, "numberOfBeacons: %s", v381, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v383 = v883;
        uint64_t v134 = v910;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        v383 = v365;
      }
      v905(v383, v134);
      v384 = v884;
      v907((os_log_t)v884, v906, v134);
      uint64_t v385 = swift_allocObject();
      long long v386 = v949;
      *(_OWORD *)(v385 + 176) = v948;
      *(_OWORD *)(v385 + 192) = v386;
      *(_OWORD *)(v385 + 208) = v950;
      *(void *)(v385 + 224) = v951;
      long long v387 = v945;
      *(_OWORD *)(v385 + 112) = v944;
      *(_OWORD *)(v385 + 128) = v387;
      long long v388 = v947;
      *(_OWORD *)(v385 + 144) = v946;
      *(_OWORD *)(v385 + 160) = v388;
      long long v389 = v941;
      *(_OWORD *)(v385 + 48) = v940;
      *(_OWORD *)(v385 + 64) = v389;
      long long v390 = v943;
      *(_OWORD *)(v385 + 80) = v942;
      *(_OWORD *)(v385 + 96) = v390;
      long long v391 = v939;
      *(_OWORD *)(v385 + 16) = v938;
      *(_OWORD *)(v385 + 32) = v391;
      sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v392 = Logger.logObject.getter();
      os_log_type_t v393 = static os_log_type_t.debug.getter();
      uint64_t v394 = swift_allocObject();
      *(unsigned char *)(v394 + 16) = 32;
      uint64_t v395 = swift_allocObject();
      *(unsigned char *)(v395 + 16) = 8;
      uint64_t v396 = swift_allocObject();
      *(void *)(v396 + 16) = sub_100060BC8;
      *(void *)(v396 + 24) = v385;
      uint64_t v397 = swift_allocObject();
      *(void *)(v397 + 16) = sub_1000654EC;
      *(void *)(v397 + 24) = v396;
      uint64_t v398 = swift_allocObject();
      sub_1004B810C(v398, 3);
      void *v399 = sub_100065514;
      v399[1] = v394;
      v399[2] = sub_100065514;
      v399[3] = v395;
      v399[4] = sub_100065500;
      v399[5] = v397;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v392, v393))
      {
        v400 = (uint8_t *)sub_1008F9FAC();
        uint64_t v401 = swift_slowAlloc();
        v915 = 0;
        v934 = (uint8_t *)v401;
        *(_WORD *)v400 = 258;
        *(void *)&long long v911 = v400 + 2;
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v394;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v395;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065500;
        *((void *)&v917 + 1) = v397;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v392, v393, "otherSerialNumber: %s", v400, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v402 = v884;
        uint64_t v134 = v910;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        v402 = v384;
      }
      v905(v402, v134);
      v403 = v885;
      v907((os_log_t)v885, v906, v134);
      uint64_t v404 = swift_allocObject();
      long long v405 = v949;
      *(_OWORD *)(v404 + 176) = v948;
      *(_OWORD *)(v404 + 192) = v405;
      *(_OWORD *)(v404 + 208) = v950;
      *(void *)(v404 + 224) = v951;
      long long v406 = v945;
      *(_OWORD *)(v404 + 112) = v944;
      *(_OWORD *)(v404 + 128) = v406;
      long long v407 = v947;
      *(_OWORD *)(v404 + 144) = v946;
      *(_OWORD *)(v404 + 160) = v407;
      long long v408 = v941;
      *(_OWORD *)(v404 + 48) = v940;
      *(_OWORD *)(v404 + 64) = v408;
      long long v409 = v943;
      *(_OWORD *)(v404 + 80) = v942;
      *(_OWORD *)(v404 + 96) = v409;
      long long v410 = v939;
      *(_OWORD *)(v404 + 16) = v938;
      *(_OWORD *)(v404 + 32) = v410;
      sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v411 = Logger.logObject.getter();
      os_log_type_t v412 = static os_log_type_t.debug.getter();
      uint64_t v413 = swift_allocObject();
      *(unsigned char *)(v413 + 16) = 32;
      uint64_t v414 = swift_allocObject();
      *(unsigned char *)(v414 + 16) = 8;
      uint64_t v415 = swift_allocObject();
      *(void *)(v415 + 16) = sub_100060D38;
      *(void *)(v415 + 24) = v404;
      uint64_t v416 = swift_allocObject();
      *(void *)(v416 + 16) = sub_1000654EC;
      *(void *)(v416 + 24) = v415;
      uint64_t v417 = swift_allocObject();
      sub_1004B810C(v417, 3);
      void *v418 = sub_100065514;
      v418[1] = v413;
      v418[2] = sub_100065514;
      v418[3] = v414;
      v418[4] = sub_100065500;
      v418[5] = v416;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v411, v412))
      {
        v419 = (uint8_t *)sub_1008F9FAC();
        uint64_t v420 = swift_slowAlloc();
        v915 = 0;
        v934 = (uint8_t *)v420;
        *(_WORD *)v419 = 258;
        *(void *)&long long v911 = v419 + 2;
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v413;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v414;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065500;
        *((void *)&v917 + 1) = v416;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        uint64_t v421 = v890;
        uint64_t v902 = 0;
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v411, v412, "seed: %s", v419, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        uint64_t v134 = v910;
        v905(v885, v910);
      }
      else
      {
        uint64_t v902 = 0;

        swift_release();
        swift_release();
        swift_release();
        v905(v403, v134);
        uint64_t v421 = v890;
      }
      v907((os_log_t)v421, v906, v134);
      uint64_t v422 = swift_allocObject();
      long long v423 = v949;
      *(_OWORD *)(v422 + 176) = v948;
      *(_OWORD *)(v422 + 192) = v423;
      *(_OWORD *)(v422 + 208) = v950;
      *(void *)(v422 + 224) = v951;
      long long v424 = v945;
      *(_OWORD *)(v422 + 112) = v944;
      *(_OWORD *)(v422 + 128) = v424;
      long long v425 = v947;
      *(_OWORD *)(v422 + 144) = v946;
      *(_OWORD *)(v422 + 160) = v425;
      long long v426 = v941;
      *(_OWORD *)(v422 + 48) = v940;
      *(_OWORD *)(v422 + 64) = v426;
      long long v427 = v943;
      *(_OWORD *)(v422 + 80) = v942;
      *(_OWORD *)(v422 + 96) = v427;
      long long v428 = v939;
      *(_OWORD *)(v422 + 16) = v938;
      *(_OWORD *)(v422 + 32) = v428;
      uint64_t v429 = swift_allocObject();
      long long v430 = v949;
      *(_OWORD *)(v429 + 176) = v948;
      *(_OWORD *)(v429 + 192) = v430;
      *(_OWORD *)(v429 + 208) = v950;
      *(void *)(v429 + 224) = v951;
      long long v431 = v945;
      *(_OWORD *)(v429 + 112) = v944;
      *(_OWORD *)(v429 + 128) = v431;
      long long v432 = v947;
      *(_OWORD *)(v429 + 144) = v946;
      *(_OWORD *)(v429 + 160) = v432;
      long long v433 = v941;
      *(_OWORD *)(v429 + 48) = v940;
      *(_OWORD *)(v429 + 64) = v433;
      long long v434 = v943;
      *(_OWORD *)(v429 + 80) = v942;
      *(_OWORD *)(v429 + 96) = v434;
      long long v435 = v939;
      *(_OWORD *)(v429 + 16) = v938;
      *(_OWORD *)(v429 + 32) = v435;
      sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      os_log_t v901 = (os_log_t)Logger.logObject.getter();
      LODWORD(v899) = static os_log_type_t.debug.getter();
      uint64_t v436 = swift_allocObject();
      *(unsigned char *)(v436 + 16) = 0;
      uint64_t v437 = swift_allocObject();
      *(unsigned char *)(v437 + 16) = 8;
      uint64_t v438 = swift_allocObject();
      *(void *)(v438 + 16) = sub_1001573F0;
      *(void *)(v438 + 24) = v422;
      uint64_t v439 = swift_allocObject();
      *(void *)(v439 + 16) = sub_10006569C;
      *(void *)(v439 + 24) = v438;
      uint64_t v440 = swift_allocObject();
      *(unsigned char *)(v440 + 16) = 32;
      uint64_t v441 = swift_allocObject();
      *(unsigned char *)(v441 + 16) = 8;
      os_log_t v442 = v901;
      uint64_t v443 = swift_allocObject();
      *(void *)(v443 + 16) = sub_1001573FC;
      *(void *)(v443 + 24) = v429;
      uint64_t v444 = swift_allocObject();
      *(void *)(v444 + 16) = sub_1000654EC;
      *(void *)(v444 + 24) = v443;
      uint64_t v445 = swift_allocObject();
      sub_1004B810C(v445, 6);
      void *v446 = sub_100065514;
      v446[1] = v436;
      v446[2] = sub_100065514;
      v446[3] = v437;
      v446[4] = sub_100065504;
      v446[5] = v439;
      v446[6] = sub_100065514;
      v446[7] = v440;
      v446[8] = sub_100065514;
      v446[9] = v441;
      v446[10] = sub_100065500;
      v446[11] = v444;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v442, (os_log_type_t)v899))
      {
        v898 = v440;
        v447 = (uint8_t *)sub_1008F9FAC();
        uint64_t v448 = swift_slowAlloc();
        v915 = 0;
        v934 = (uint8_t *)v448;
        *(_WORD *)v447 = 514;
        *(void *)&long long v911 = v447 + 2;
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v436;
        v449 = (char *)v902;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        if (v449) {
          goto LABEL_192;
        }
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v437;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065504;
        *((void *)&v917 + 1) = v439;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v898;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v441;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        uint64_t v450 = v910;
        swift_release();
        *(void *)&long long v917 = sub_100065500;
        *((void *)&v917 + 1) = v444;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        uint64_t v902 = 0;
        swift_release();
        os_log_t v451 = v901;
        _os_log_impl((void *)&_mh_execute_header, v901, (os_log_type_t)v899, "attestation (S1) count %ld: %s", v447, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        uint64_t v452 = v890;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v452 = v890;
        uint64_t v450 = v910;
      }
      v905((char *)v452, v450);
      v907(v891, v906, v450);
      uint64_t v453 = swift_allocObject();
      long long v454 = v949;
      *(_OWORD *)(v453 + 176) = v948;
      *(_OWORD *)(v453 + 192) = v454;
      *(_OWORD *)(v453 + 208) = v950;
      *(void *)(v453 + 224) = v951;
      long long v455 = v945;
      *(_OWORD *)(v453 + 112) = v944;
      *(_OWORD *)(v453 + 128) = v455;
      long long v456 = v947;
      *(_OWORD *)(v453 + 144) = v946;
      *(_OWORD *)(v453 + 160) = v456;
      long long v457 = v941;
      *(_OWORD *)(v453 + 48) = v940;
      *(_OWORD *)(v453 + 64) = v457;
      long long v458 = v943;
      *(_OWORD *)(v453 + 80) = v942;
      *(_OWORD *)(v453 + 96) = v458;
      long long v459 = v939;
      *(_OWORD *)(v453 + 16) = v938;
      *(_OWORD *)(v453 + 32) = v459;
      uint64_t v460 = swift_allocObject();
      long long v461 = v949;
      *(_OWORD *)(v460 + 176) = v948;
      *(_OWORD *)(v460 + 192) = v461;
      *(_OWORD *)(v460 + 208) = v950;
      *(void *)(v460 + 224) = v951;
      long long v462 = v945;
      *(_OWORD *)(v460 + 112) = v944;
      *(_OWORD *)(v460 + 128) = v462;
      long long v463 = v947;
      *(_OWORD *)(v460 + 144) = v946;
      *(_OWORD *)(v460 + 160) = v463;
      long long v464 = v941;
      *(_OWORD *)(v460 + 48) = v940;
      *(_OWORD *)(v460 + 64) = v464;
      long long v465 = v943;
      *(_OWORD *)(v460 + 80) = v942;
      *(_OWORD *)(v460 + 96) = v465;
      long long v466 = v939;
      *(_OWORD *)(v460 + 16) = v938;
      *(_OWORD *)(v460 + 32) = v466;
      sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      os_log_t v901 = (os_log_t)Logger.logObject.getter();
      LODWORD(v899) = static os_log_type_t.debug.getter();
      uint64_t v467 = swift_allocObject();
      *(unsigned char *)(v467 + 16) = 0;
      uint64_t v468 = swift_allocObject();
      *(unsigned char *)(v468 + 16) = 8;
      uint64_t v469 = swift_allocObject();
      *(void *)(v469 + 16) = sub_100157448;
      *(void *)(v469 + 24) = v453;
      uint64_t v470 = swift_allocObject();
      *(void *)(v470 + 16) = sub_10006569C;
      *(void *)(v470 + 24) = v469;
      uint64_t v471 = swift_allocObject();
      *(unsigned char *)(v471 + 16) = 32;
      uint64_t v472 = swift_allocObject();
      *(unsigned char *)(v472 + 16) = 8;
      uint64_t v473 = swift_allocObject();
      *(void *)(v473 + 16) = sub_100060D90;
      *(void *)(v473 + 24) = v460;
      uint64_t v474 = swift_allocObject();
      *(void *)(v474 + 16) = sub_1000654EC;
      *(void *)(v474 + 24) = v473;
      uint64_t v475 = swift_allocObject();
      sub_1004B810C(v475, 6);
      void *v476 = sub_100065514;
      v476[1] = v467;
      v476[2] = sub_100065514;
      v476[3] = v468;
      v476[4] = sub_100065504;
      v476[5] = v470;
      v476[6] = sub_100065514;
      v476[7] = v471;
      v476[8] = sub_100065514;
      v476[9] = v472;
      v476[10] = sub_100065500;
      v476[11] = v474;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      os_log_t v477 = v901;
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v477, (os_log_type_t)v899))
      {
        v478 = (uint8_t *)sub_1008F9FAC();
        uint64_t v479 = swift_slowAlloc();
        v915 = 0;
        v934 = (uint8_t *)v479;
        *(_WORD *)v478 = 514;
        *(void *)&long long v911 = v478 + 2;
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v467;
        v480 = (char *)v902;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        if (v480) {
          goto LABEL_192;
        }
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v468;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065504;
        *((void *)&v917 + 1) = v470;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v471;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v472;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        uint64_t v481 = v910;
        swift_release();
        *(void *)&long long v917 = sub_100065500;
        *((void *)&v917 + 1) = v474;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        v482 = v886;
        swift_release();
        os_log_t v483 = v901;
        _os_log_impl((void *)&_mh_execute_header, v901, (os_log_type_t)v899, "BAA signature (S2) count %ld: %s", v478, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v905((char *)v891, v481);
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v481 = v910;
        v905((char *)v891, v910);
        v480 = (char *)v902;
        v482 = v886;
      }
      v907(v482, v906, v481);
      uint64_t v484 = swift_allocObject();
      long long v485 = v949;
      *(_OWORD *)(v484 + 176) = v948;
      *(_OWORD *)(v484 + 192) = v485;
      *(_OWORD *)(v484 + 208) = v950;
      *(void *)(v484 + 224) = v951;
      long long v486 = v945;
      *(_OWORD *)(v484 + 112) = v944;
      *(_OWORD *)(v484 + 128) = v486;
      long long v487 = v947;
      *(_OWORD *)(v484 + 144) = v946;
      *(_OWORD *)(v484 + 160) = v487;
      long long v488 = v941;
      *(_OWORD *)(v484 + 48) = v940;
      *(_OWORD *)(v484 + 64) = v488;
      long long v489 = v943;
      *(_OWORD *)(v484 + 80) = v942;
      *(_OWORD *)(v484 + 96) = v489;
      long long v490 = v939;
      *(_OWORD *)(v484 + 16) = v938;
      *(_OWORD *)(v484 + 32) = v490;
      sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      v491 = Logger.logObject.getter();
      os_log_type_t v492 = static os_log_type_t.debug.getter();
      uint64_t v493 = swift_allocObject();
      *(unsigned char *)(v493 + 16) = 0;
      uint64_t v494 = swift_allocObject();
      *(unsigned char *)(v494 + 16) = 1;
      uint64_t v495 = swift_allocObject();
      *(void *)(v495 + 16) = sub_100157498;
      *(void *)(v495 + 24) = v484;
      uint64_t v496 = swift_allocObject();
      *(void *)(v496 + 16) = sub_100060CF8;
      *(void *)(v496 + 24) = v495;
      uint64_t v497 = swift_allocObject();
      sub_1004B810C(v497, 3);
      void *v498 = sub_100065514;
      v498[1] = v493;
      v498[2] = sub_100065514;
      v498[3] = v494;
      v498[4] = sub_100060D00;
      v498[5] = v496;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v491, v492))
      {
        v499 = (uint8_t *)sub_1008F9FAC();
        v915 = 0;
        v934 = 0;
        *(_WORD *)v499 = 256;
        *(void *)&long long v911 = v499 + 2;
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v493;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        if (v480) {
          goto LABEL_192;
        }
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v494;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100060D00;
        *((void *)&v917 + 1) = v496;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        v500 = (char *)v886;
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v491, v492, "beaconPartId: %hhu", v499, 5u);
        sub_1008F9FA0();

        v501 = v500;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        v501 = (char *)v482;
      }
      v905(v501, v481);
      uint64_t v502 = *(void *)(v900 + 64);
      *(unsigned char *)(v502 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 3;
      v905 = (void (*)(char *, uint64_t))OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
      uint64_t v503 = *(void *)(v502 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
      long long v504 = v938;
      swift_retain();
      sub_1000361E0(v504, *((unint64_t *)&v504 + 1));
      sub_100434DF4(v504, *((unint64_t *)&v504 + 1), (uint64_t *)&v917);
      if (v480)
      {
        swift_errorRelease();
        os_log_t v901 = 0;
        long long v505 = xmmword_101347BB0;
      }
      else
      {
        os_log_t v901 = 0;
        long long v505 = v917;
      }
      uint64_t v506 = *(void *)(v503 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1);
      unint64_t v507 = *(void *)(v503 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1 + 8);
      *(_OWORD *)(v503 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1) = v505;
      sub_100037A24(v506, v507);
      swift_release();
      v508 = v905;
      long long v509 = v942;
      v510 = (uint64_t *)(*(void *)((char *)v905 + v502)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid);
      uint64_t v511 = *v510;
      unint64_t v512 = v510[1];
      *(_OWORD *)v510 = v942;
      sub_1000361E0(v509, *((unint64_t *)&v509 + 1));
      sub_100037A24(v511, v512);
      long long v513 = v940;
      v514 = (uint64_t *)(*(void *)((char *)v508 + v502)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
      uint64_t v515 = *v514;
      unint64_t v516 = v514[1];
      *(_OWORD *)v514 = v940;
      sub_1000361E0(v513, *((unint64_t *)&v513 + 1));
      sub_100037A24(v515, v516);
      long long v517 = v943;
      v518 = (uint64_t *)(*(void *)((char *)v508 + v502)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId);
      uint64_t v519 = *v518;
      unint64_t v520 = v518[1];
      *(_OWORD *)v518 = v943;
      sub_1000361E0(v517, *((unint64_t *)&v517 + 1));
      sub_100037A24(v519, v520);
      long long v521 = v946;
      v522 = (uint64_t *)(*(void *)((char *)v508 + v502)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2);
      uint64_t v523 = *v522;
      unint64_t v524 = v522[1];
      *(_OWORD *)v522 = v946;
      sub_1000361E0(v521, *((unint64_t *)&v521 + 1));
      sub_100037A24(v523, v524);
      long long v525 = v945;
      v526 = (uint64_t *)(*(void *)((char *)v508 + v502)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation);
      uint64_t v527 = *v526;
      unint64_t v528 = v526[1];
      *(_OWORD *)v526 = v945;
      sub_1000361E0(v525, *((unint64_t *)&v525 + 1));
      sub_100037A24(v527, v528);
      long long v529 = v944;
      v530 = (uint64_t *)(*(void *)((char *)v508 + v502) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1);
      uint64_t v531 = *v530;
      unint64_t v532 = v530[1];
      *(_OWORD *)v530 = v944;
      sub_1000361E0(v529, *((unint64_t *)&v529 + 1));
      sub_100037A24(v531, v532);
      uint64_t v533 = *(void *)((char *)v508 + v502);
      *(_WORD *)(v533 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId) = v950;
      long long v917 = v939;
      sub_1000362FC();
      swift_retain();
      *(void *)(v533 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_numBeacons) = DataProtocol.intValue.getter();
      swift_release();
      long long v534 = v948;
      v535 = (uint64_t *)(*(void *)((char *)v508 + v502)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey);
      uint64_t v536 = *v535;
      unint64_t v537 = v535[1];
      *(_OWORD *)v535 = v948;
      sub_1000361E0(v534, *((unint64_t *)&v534 + 1));
      sub_100037A24(v536, v537);
      uint64_t v902 = v502;
      long long v538 = v947;
      v539 = (uint64_t *)(*(void *)((char *)v508 + v502)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey);
      uint64_t v540 = *v539;
      unint64_t v541 = v539[1];
      *(_OWORD *)v539 = v947;
      sub_1000361E0(v538, *((unint64_t *)&v538 + 1));
      sub_100037A24(v540, v541);
      uint64_t v542 = Data.trimmed.getter();
      unint64_t v544 = v543;
      static String.Encoding.utf8.getter();
      v545 = (uint8_t *)String.init(data:encoding:)();
      uint64_t v547 = v546;
      sub_10001CFB8(v542, v544);
      if (!v547)
      {
        uint64_t v548 = Data.trimmed.getter();
        unint64_t v550 = v549;
        v545 = (uint8_t *)Data.hexString.getter();
        uint64_t v547 = v551;
        sub_10001CFB8(v548, v550);
      }
      v907(v892, v906, v481);
      uint64_t v552 = swift_allocObject();
      v899 = v545;
      *(void *)(v552 + 16) = v545;
      *(void *)(v552 + 24) = v547;
      swift_bridgeObjectRetain();
      v553 = Logger.logObject.getter();
      int v554 = static os_log_type_t.default.getter();
      uint64_t v555 = v481;
      uint64_t v556 = swift_allocObject();
      *(unsigned char *)(v556 + 16) = 34;
      uint64_t v557 = swift_allocObject();
      *(unsigned char *)(v557 + 16) = 8;
      uint64_t v558 = swift_allocObject();
      *(void *)(v558 + 16) = sub_100060DF0;
      *(void *)(v558 + 24) = v552;
      uint64_t v559 = swift_allocObject();
      *(void *)(v559 + 16) = sub_1000654EC;
      *(void *)(v559 + 24) = v558;
      uint64_t v560 = swift_allocObject();
      sub_1004B810C(v560, 3);
      void *v561 = sub_100065514;
      v561[1] = v556;
      v561[2] = sub_100065514;
      v561[3] = v557;
      v561[4] = sub_100065500;
      v561[5] = v559;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v898) = v554;
      os_log_type_t v562 = v554;
      v563 = v553;
      if (os_log_type_enabled(v553, v562))
      {
        v564 = (uint8_t *)sub_1008F9FAC();
        uint64_t v565 = swift_slowAlloc();
        v915 = 0;
        v934 = (uint8_t *)v565;
        *(_WORD *)v564 = 258;
        *(void *)&long long v911 = v564 + 2;
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v556;
        os_log_t v566 = v901;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        if (v566) {
          goto LABEL_192;
        }
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v557;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        uint64_t v567 = v900;
        swift_release();
        *(void *)&long long v917 = sub_100065500;
        *((void *)&v917 + 1) = v559;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        uint64_t v568 = v910;
        os_log_t v901 = 0;
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v563, (os_log_type_t)v898, "beaconDisplayName: %{public}s", v564, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v569 = *(void (**)(uint64_t, uint64_t))(v909 + 8);
        v569((uint64_t)v892, v568);
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        v569 = *(void (**)(uint64_t, uint64_t))(v909 + 8);
        v569((uint64_t)v892, v555);
        uint64_t v568 = v555;
        uint64_t v567 = v900;
      }
      v570 = v877;
      v571 = (void *)(*(void *)((char *)v905 + v902)
                      + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryDisplayName);
      void *v571 = v899;
      v571[1] = v547;
      swift_bridgeObjectRelease();
      swift_retain();
      char v572 = sub_1001C7F30();
      swift_release();
      if (v572)
      {
        uint64_t v573 = sub_100136854();
        v907(v570, v573, v568);
        v574 = Logger.logObject.getter();
        os_log_type_t v575 = static os_log_type_t.default.getter();
        v576 = sub_101020788(0);
        BOOL v577 = os_log_type_enabled(v574, v575);
        os_log_t v578 = v901;
        if (v577)
        {
          v579 = (uint8_t *)sub_1008F9FAC();
          *(void *)&long long v911 = 0;
          v915 = 0;
          *(_WORD *)v579 = 0;
          *(void *)&long long v917 = v579 + 2;
          sub_100E08120((uint64_t)v576, (uint64_t)&v917, (uint64_t)&v911, (uint64_t)&v915);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v574, v575, "S1 contains session nonce. Hardcoded pairing detected!", v579, 2u);
          uint64_t v567 = v900;
          sub_1008F9FA0();
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        v569((uint64_t)v570, v568);
      }
      else
      {
        os_log_t v578 = v901;
      }
      sub_10084BCF8();
      uint64_t v620 = Data.chunked(into:)();
      v621 = sub_100054D88(v620);
      uint64_t v622 = v902;
      *(void *)(*(void *)((char *)v905 + v902)
                + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbers) = v620;
      swift_bridgeObjectRelease();
      if (*(unsigned char *)(v567 + 200))
      {
        swift_bridgeObjectRelease();
        goto LABEL_122;
      }
      uint64_t v623 = v869;
      sub_100AE800C(v869);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v887 + 48))(v623, 1, v888) == 1)
      {
        swift_bridgeObjectRelease();
        sub_10001DAB4(v623, &qword_10163BB20);
        goto LABEL_122;
      }
      uint64_t v624 = v867;
      sub_100157D84(v623, v867, type metadata accessor for OwnedBeaconGroup);
      uint64_t v625 = sub_1004CCF10();
      uint64_t v626 = sub_1011586CC(v625);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      char v627 = sub_10005FD50((uint64_t)v621, v626);
      swift_bridgeObjectRelease();
      if (v627)
      {
        sub_100157DEC(v624, type metadata accessor for OwnedBeaconGroup);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v622 = v902;
LABEL_122:
        uint64_t v628 = *(void *)((char *)v905 + v622);
        swift_retain();
        uint64_t v629 = sub_100149C1C();
        v630 = v875;
        if (v578)
        {
          v905 = (void (*)(char *, uint64_t))v569;
          swift_release();
          v631 = v874;
          v907((os_log_t)v874, v906, v568);
          uint64_t v632 = swift_allocObject();
          *(void *)(v632 + 16) = v578;
          swift_errorRetain();
          v633 = Logger.logObject.getter();
          int v634 = static os_log_type_t.error.getter();
          uint64_t v635 = swift_allocObject();
          *(unsigned char *)(v635 + 16) = 34;
          uint64_t v636 = swift_allocObject();
          *(unsigned char *)(v636 + 16) = 8;
          uint64_t v637 = swift_allocObject();
          *(void *)(v637 + 16) = sub_100157518;
          *(void *)(v637 + 24) = v632;
          uint64_t v638 = swift_allocObject();
          *(void *)(v638 + 16) = sub_1000654EC;
          *(void *)(v638 + 24) = v637;
          uint64_t v639 = swift_allocObject();
          sub_1004B810C(v639, 3);
          void *v640 = sub_100065514;
          v640[1] = v635;
          v640[2] = sub_100065514;
          v640[3] = v636;
          v640[4] = sub_100065500;
          v640[5] = v638;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          LODWORD(v908) = v634;
          if (os_log_type_enabled(v633, (os_log_type_t)v634))
          {
            uint64_t v902 = (uint64_t)v578;
            v641 = (uint8_t *)sub_1008F9FAC();
            uint64_t v642 = swift_slowAlloc();
            v915 = 0;
            v934 = (uint8_t *)v642;
            *(_WORD *)v641 = 258;
            *(void *)&long long v911 = v641 + 2;
            *(void *)&long long v917 = sub_100065514;
            *((void *)&v917 + 1) = v635;
            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
            swift_release();
            *(void *)&long long v917 = sub_100065514;
            *((void *)&v917 + 1) = v636;
            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
            v643 = v874;
            swift_release();
            *(void *)&long long v917 = sub_100065500;
            *((void *)&v917 + 1) = v638;
            sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
            v644 = (uint64_t (*)(char *, uint64_t))v905;
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v633, (os_log_type_t)v908, "Unable to parse otherSerialNumbersAndMacAddressesMap due to %{public}s", v641, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            sub_1008F9FA0();

            sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
            swift_errorRelease();
            sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
            uint64_t result = v644(v643, v910);
          }
          else
          {
            swift_errorRelease();

            swift_release();
            swift_release();
            swift_release();
            sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
            sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
            uint64_t result = ((uint64_t (*)(char *, uint64_t))v905)(v631, v910);
          }
          uint64_t v179 = v904;
          uint64_t v180 = 13;
          goto LABEL_141;
        }
        *(void *)(v628 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndMACAddresses) = v629;
        swift_release();
        swift_bridgeObjectRelease();
        sub_10014B6C4(v879, (unint64_t)&v917);
        if ((v931 & 1) == 0)
        {
          sub_1001559B0((uint64_t)&v917, (uint64_t)&v911);
          v907(v630, v906, v568);
          v699 = Logger.logObject.getter();
          os_log_type_t v700 = static os_log_type_t.default.getter();
          v701 = sub_101020788(0);
          BOOL v702 = os_log_type_enabled(v699, v700);
          v703 = v904;
          if (v702)
          {
            uint64_t v704 = sub_1008F9FAC();
            v934 = 0;
            uint64_t v933 = 0;
            *(_WORD *)uint64_t v704 = 0;
            v915 = (uint64_t (*)())(v704 + 2);
            sub_100E08120((uint64_t)v701, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v699, v700, "Successfully generated finalize pairing command.", (uint8_t *)v704, 2u);
            sub_1008F9FA0();

            sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
            sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          }
          else
          {

            swift_bridgeObjectRelease();
            sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
            sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
          }
          v569((uint64_t)v630, v568);
          uint64_t result = sub_1001559B0((uint64_t)&v911, (uint64_t)v703);
          *((unsigned char *)v703 + 216) = 0;
          return result;
        }
        uint64_t v902 = 0;
        v905 = (void (*)(char *, uint64_t))v569;
        sub_10006105C((uint64_t)&v917, (uint64_t)&v911);
        v645 = v859;
        v907((os_log_t)v859, v906, v568);
        sub_1000610B8((uint64_t)&v911, (uint64_t)&v915);
        uint64_t v646 = swift_allocObject();
        sub_10006105C((uint64_t)&v915, v646 + 16);
        v647 = Logger.logObject.getter();
        int v648 = static os_log_type_t.error.getter();
        uint64_t v649 = swift_allocObject();
        *(unsigned char *)(v649 + 16) = 34;
        uint64_t v650 = swift_allocObject();
        *(unsigned char *)(v650 + 16) = 8;
        uint64_t v651 = v568;
        uint64_t v652 = swift_allocObject();
        *(void *)(v652 + 16) = sub_1000611F0;
        *(void *)(v652 + 24) = v646;
        uint64_t v653 = swift_allocObject();
        *(void *)(v653 + 16) = sub_1000654EC;
        *(void *)(v653 + 24) = v652;
        uint64_t v654 = swift_allocObject();
        sub_1004B810C(v654, 3);
        void *v655 = sub_100065514;
        v655[1] = v649;
        v655[2] = sub_100065514;
        v655[3] = v650;
        v655[4] = sub_100065500;
        v655[5] = v653;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        BOOL v656 = os_log_type_enabled(v647, (os_log_type_t)v648);
        v657 = v904;
        if (v656)
        {
          LODWORD(v908) = v648;
          v658 = (uint8_t *)sub_1008F9FAC();
          uint64_t v659 = swift_slowAlloc();
          uint64_t v933 = 0;
          *(_WORD *)v658 = 258;
          uint64_t v932 = v659;
          v934 = v658 + 2;
          v915 = sub_100065514;
          uint64_t v916 = v649;
          v660 = (char *)v902;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v915, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
          if (v660) {
            goto LABEL_192;
          }
          swift_release();
          v915 = sub_100065514;
          uint64_t v916 = v650;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v915, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
          v661 = v859;
          swift_release();
          v915 = sub_100065500;
          uint64_t v916 = v653;
          sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v915, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
          v662 = v905;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v647, (os_log_type_t)v908, "Unable to generate finalizeCommand payload due to %{public}s", v658, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          sub_1008F9FA0();

          sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
          sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          v662(v661, v910);
          v657 = v904;
        }
        else
        {

          swift_release();
          swift_release();
          swift_release();
          sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
          sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
          v905(v645, v651);
        }
        uint64_t result = sub_10006105C((uint64_t)&v911, (uint64_t)v657);
        *((unsigned char *)v657 + 216) = 1;
        return result;
      }
      v905 = (void (*)(char *, uint64_t))v569;
      v907(v860, v906, v568);
      uint64_t v705 = swift_allocObject();
      *(void *)(v705 + 16) = v621;
      uint64_t v706 = swift_allocObject();
      *(void *)(v706 + 16) = sub_10006568C;
      *(void *)(v706 + 24) = v705;
      uint64_t v707 = swift_allocObject();
      *(void *)(v707 + 16) = v626;
      uint64_t v708 = swift_allocObject();
      *(void *)(v708 + 16) = sub_10006568C;
      *(void *)(v708 + 24) = v707;
      uint64_t v902 = Logger.logObject.getter();
      LODWORD(v901) = static os_log_type_t.error.getter();
      uint64_t v709 = swift_allocObject();
      *(unsigned char *)(v709 + 16) = 32;
      uint64_t v710 = swift_allocObject();
      *(unsigned char *)(v710 + 16) = 8;
      uint64_t v711 = swift_allocObject();
      *(void *)(v711 + 16) = sub_100061314;
      *(void *)(v711 + 24) = v706;
      uint64_t v712 = swift_allocObject();
      *(void *)(v712 + 16) = sub_1000654EC;
      *(void *)(v712 + 24) = v711;
      uint64_t v713 = swift_allocObject();
      *(unsigned char *)(v713 + 16) = 32;
      uint64_t v714 = swift_allocObject();
      *(unsigned char *)(v714 + 16) = 8;
      v715 = v902;
      uint64_t v716 = v714;
      uint64_t v717 = swift_allocObject();
      *(void *)(v717 + 16) = sub_10006131C;
      *(void *)(v717 + 24) = v708;
      uint64_t v718 = v716;
      uint64_t v719 = swift_allocObject();
      *(void *)(v719 + 16) = sub_1000654EC;
      *(void *)(v719 + 24) = v717;
      uint64_t v720 = swift_allocObject();
      sub_1004B810C(v720, 6);
      void *v721 = sub_100065514;
      v721[1] = v709;
      v721[2] = sub_100065514;
      v721[3] = v710;
      v721[4] = sub_100065500;
      v721[5] = v712;
      v721[6] = sub_100065514;
      v721[7] = v713;
      v721[8] = sub_100065514;
      v721[9] = v718;
      v721[10] = sub_100065500;
      v721[11] = v719;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v715, (os_log_type_t)v901))
      {
        uint64_t v903 = v718;
        v722 = (uint8_t *)sub_1008F9FAC();
        uint64_t v723 = swift_slowAlloc();
        v915 = 0;
        v934 = (uint8_t *)v723;
        *(_WORD *)v722 = 514;
        *(void *)&long long v911 = v722 + 2;
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v709;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        if (v578) {
          goto LABEL_192;
        }
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v710;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065500;
        *((void *)&v917 + 1) = v712;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        v724 = v904;
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v713;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        *(void *)&long long v917 = sub_100065514;
        *((void *)&v917 + 1) = v903;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        uint64_t v725 = v910;
        uint64_t v726 = v867;
        swift_release();
        *(void *)&long long v917 = sub_100065500;
        *((void *)&v917 + 1) = v719;
        sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
        swift_release();
        id v727 = (id)v902;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v902, (os_log_type_t)v901, "Invalid otherSerialNumbers: %s. allSerialNumbers: %s", v722, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_1008F9FA0();

        v728 = (void (*)(uint64_t, uint64_t))v905;
        v905((char *)v860, v725);
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v725 = v910;
        v728 = (void (*)(uint64_t, uint64_t))v905;
        v905((char *)v860, v910);
        v724 = v904;
        uint64_t v726 = v867;
      }
      uint64_t v773 = (uint64_t)v857;
      v907(v857, v906, v725);
      sub_1004CCF70(v773);
      sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
      sub_100157554((uint64_t *)&v938, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      v728(v773, v725);
      uint64_t result = sub_100157DEC(v726, type metadata accessor for OwnedBeaconGroup);
      uint64_t v774 = 13;
LABEL_165:
      uint64_t *v724 = v774;
      *(_OWORD *)(v724 + 1) = 0u;
      *(_OWORD *)(v724 + 3) = 0u;
      *((unsigned char *)v724 + 40) = 11;
      *((unsigned char *)v724 + 216) = 1;
      return result;
    }
    v907(v897, v906, v134);
    uint64_t v225 = swift_allocObject();
    sub_1001559B0((uint64_t)v952, v225 + 16);
    sub_1001559B0((uint64_t)v935, (uint64_t)&v938);
    uint64_t v226 = (uint64_t *)sub_100157BC4((uint64_t)&v938);
    sub_100157554(v226, (void (*)(uint64_t, uint64_t))sub_1000361E0);
    uint64_t v227 = Logger.logObject.getter();
    os_log_type_t v228 = static os_log_type_t.error.getter();
    uint64_t v229 = swift_allocObject();
    *(unsigned char *)(v229 + 16) = 34;
    uint64_t v230 = swift_allocObject();
    *(unsigned char *)(v230 + 16) = 8;
    uint64_t v231 = swift_allocObject();
    *(void *)(v231 + 16) = sub_10015B0E8;
    *(void *)(v231 + 24) = v225;
    uint64_t v232 = swift_allocObject();
    *(void *)(v232 + 16) = sub_1000654EC;
    *(void *)(v232 + 24) = v231;
    uint64_t v233 = swift_allocObject();
    sub_1004B810C(v233, 3);
    *uint64_t v234 = sub_100065514;
    v234[1] = v229;
    v234[2] = sub_100065514;
    v234[3] = v230;
    v234[4] = sub_100065500;
    v234[5] = v232;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled(v227, v228))
    {

      swift_release();
      swift_release();
      swift_release();
      sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
      unint64_t v237 = (unint64_t)v897;
      uint64_t v265 = v134;
      goto LABEL_139;
    }
    uint64_t v235 = (uint8_t *)sub_1008F9FAC();
    uint64_t v236 = swift_slowAlloc();
    uint64_t v933 = 0;
    *(_WORD *)uint64_t v235 = 258;
    uint64_t v932 = v236;
    v934 = v235 + 2;
    v915 = sub_100065514;
    uint64_t v916 = v229;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v915, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
    swift_release();
    v915 = sub_100065514;
    uint64_t v916 = v230;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v915, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
    swift_release();
    v915 = sub_100065500;
    uint64_t v916 = v232;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v915, (uint64_t)&v934, (uint64_t)&v933, (uint64_t)&v932);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v227, v228, "Invalid sendPairingData payload %{public}s", v235, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_1008F9FA0();

    sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
    unint64_t v237 = (unint64_t)v897;
LABEL_35:
    uint64_t v265 = v910;
LABEL_139:
    uint64_t result = ((uint64_t (*)(unint64_t, uint64_t))v905)(v237, v265);
    uint64_t v180 = 9;
    goto LABEL_140;
  }
  if (v149)
  {
    uint64_t v190 = v896;
    v907((os_log_t)v896, v906, v134);
    uint64_t v191 = swift_allocObject();
    sub_1001559B0((uint64_t)v952, v191 + 16);
    sub_100156058((uint64_t)v952, (void (*)(void))sub_1000361E0, (void (*)(void))sub_100037A38);
    os_log_type_t v192 = Logger.logObject.getter();
    os_log_type_t v193 = static os_log_type_t.error.getter();
    uint64_t v194 = swift_allocObject();
    *(unsigned char *)(v194 + 16) = 34;
    uint64_t v195 = swift_allocObject();
    *(unsigned char *)(v195 + 16) = 8;
    uint64_t v196 = swift_allocObject();
    *(void *)(v196 + 16) = sub_10015B0E4;
    *(void *)(v196 + 24) = v191;
    uint64_t v197 = swift_allocObject();
    *(void *)(v197 + 16) = sub_1000654EC;
    *(void *)(v197 + 24) = v196;
    uint64_t v198 = swift_allocObject();
    sub_1004B810C(v198, 3);
    *uint64_t v199 = sub_100065514;
    v199[1] = v194;
    v199[2] = sub_100065514;
    v199[3] = v195;
    v199[4] = sub_100065500;
    v199[5] = v197;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v192, v193))
    {
      uint64_t v200 = (uint8_t *)sub_1008F9FAC();
      uint64_t v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_slowAlloc();
      *(void *)&long long v911 = 0;
      v915 = (uint64_t (*)())v201;
      *(_WORD *)uint64_t v200 = 258;
      *(void *)&long long v938 = v200 + 2;
      *(void *)&long long v917 = sub_100065514;
      *((void *)&v917 + 1) = v194;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v911, (uint64_t)&v915);
      swift_release();
      *(void *)&long long v917 = sub_100065514;
      *((void *)&v917 + 1) = v195;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v911, (uint64_t)&v915);
      swift_release();
      *(void *)&long long v917 = sub_100065500;
      *((void *)&v917 + 1) = v197;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v917, (uint64_t)&v938, (uint64_t)&v911, (uint64_t)&v915);
      uint64_t v202 = v896;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v192, v193, "Received unexpected command %{public}s", v200, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
      uint64_t v203 = v202;
      uint64_t v204 = v910;
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
      uint64_t v203 = v190;
      uint64_t v204 = v134;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v905)(v203, v204);
    uint64_t v180 = 6;
    goto LABEL_140;
  }
  uint64_t v902 = 0;
  uint64_t v151 = sub_100157BC4((uint64_t)v953);
  uint64_t v152 = *(NSObject **)v151;
  unint64_t v153 = *(void *)(v151 + 8);
  uint64_t v154 = *(char **)(v151 + 16);
  unint64_t v155 = *(NSObject **)(v151 + 24);
  unint64_t v156 = (unint64_t)v895;
  v907(v895, v906, v134);
  uint64_t v157 = (void *)swift_allocObject();
  os_log_t v901 = v152;
  v157[2] = v152;
  v157[3] = v153;
  v896 = v154;
  v897 = v153;
  v157[4] = v154;
  v157[5] = v155;
  v893 = v155;
  sub_1001559B0((uint64_t)v935, (uint64_t)&v938);
  uint64_t v158 = (uint64_t *)sub_100157BC4((uint64_t)&v938);
  uint64_t v159 = *v158;
  unint64_t v160 = v158[1];
  uint64_t v161 = v158[2];
  unint64_t v162 = v158[3];
  sub_1001559B0((uint64_t)v935, (uint64_t)&v917);
  uint64_t v163 = (uint64_t *)sub_100157BC4((uint64_t)&v917);
  uint64_t v164 = v163[2];
  unint64_t v165 = v163[3];
  sub_1000361E0(*v163, v163[1]);
  sub_1000361E0(v164, v165);
  v889 = v160;
  uint64_t v890 = v159;
  sub_1000361E0(v159, v160);
  v891 = v162;
  v892 = v161;
  sub_1000361E0(v161, v162);
  uint64_t v166 = Logger.logObject.getter();
  os_log_type_t v167 = static os_log_type_t.default.getter();
  uint64_t v168 = swift_allocObject();
  *(unsigned char *)(v168 + 16) = 32;
  uint64_t v169 = v134;
  uint64_t v170 = swift_allocObject();
  *(unsigned char *)(v170 + 16) = 8;
  uint64_t v171 = swift_allocObject();
  *(void *)(v171 + 16) = sub_100061368;
  *(void *)(v171 + 24) = v157;
  uint64_t v172 = swift_allocObject();
  *(void *)(v172 + 16) = sub_1000654EC;
  *(void *)(v172 + 24) = v171;
  uint64_t v173 = swift_allocObject();
  sub_1004B810C(v173, 3);
  *uint64_t v174 = sub_100065514;
  v174[1] = v168;
  v174[2] = sub_100065514;
  v174[3] = v170;
  v174[4] = sub_100065500;
  v174[5] = v172;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v166, v167))
  {
    uint64_t v175 = sub_1008F9FAC();
    uint64_t v176 = swift_slowAlloc();
    v934 = 0;
    *(_WORD *)uint64_t v175 = 258;
    uint64_t v933 = v176;
    v915 = (uint64_t (*)())(v175 + 2);
    *(void *)&long long v911 = sub_100065514;
    *((void *)&v911 + 1) = v168;
    uint64_t v177 = (char *)v902;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
    if (v177) {
      goto LABEL_192;
    }
    swift_release();
    *(void *)&long long v911 = sub_100065514;
    *((void *)&v911 + 1) = v170;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
    swift_release();
    *(void *)&long long v911 = sub_100065500;
    *((void *)&v911 + 1) = v172;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
    uint64_t v902 = 0;
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v166, v167, "Received beacon group data %s", (uint8_t *)v175, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_1008F9FA0();

    unint64_t v178 = (unint64_t)v895;
    uint64_t v169 = v910;
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();
    unint64_t v178 = v156;
  }
  v905((char *)v178, v169);
  uint64_t v266 = (uint64_t)v898;
  v907(v898, v906, v169);
  uint64_t v267 = (void *)swift_allocObject();
  unint64_t v268 = (unint64_t)v897;
  v267[2] = v901;
  v267[3] = v268;
  uint64_t v269 = v893;
  v267[4] = v896;
  v267[5] = v269;
  sub_1000361E0(v890, (unint64_t)v889);
  sub_1000361E0((uint64_t)v892, (unint64_t)v891);
  uint64_t v270 = Logger.logObject.getter();
  os_log_type_t v271 = static os_log_type_t.debug.getter();
  uint64_t v272 = swift_allocObject();
  *(unsigned char *)(v272 + 16) = 32;
  uint64_t v273 = swift_allocObject();
  *(unsigned char *)(v273 + 16) = 8;
  uint64_t v274 = swift_allocObject();
  *(void *)(v274 + 16) = sub_100060D0C;
  *(void *)(v274 + 24) = v267;
  uint64_t v275 = swift_allocObject();
  *(void *)(v275 + 16) = sub_1000654EC;
  *(void *)(v275 + 24) = v274;
  uint64_t v276 = swift_allocObject();
  sub_1004B810C(v276, 3);
  void *v277 = sub_100065514;
  v277[1] = v272;
  v277[2] = sub_100065514;
  v277[3] = v273;
  v277[4] = sub_100065500;
  v277[5] = v275;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v270, v271))
  {
    uint64_t v278 = sub_1008F9FAC();
    uint64_t v279 = swift_slowAlloc();
    v934 = 0;
    *(_WORD *)uint64_t v278 = 258;
    uint64_t v933 = v279;
    v915 = (uint64_t (*)())(v278 + 2);
    *(void *)&long long v911 = sub_100065514;
    *((void *)&v911 + 1) = v272;
    uint64_t v280 = (char *)v902;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
    if (v280) {
      goto LABEL_192;
    }
    swift_release();
    *(void *)&long long v911 = sub_100065514;
    *((void *)&v911 + 1) = v273;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
    swift_release();
    *(void *)&long long v911 = sub_100065500;
    *((void *)&v911 + 1) = v275;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
    uint64_t v134 = v910;
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v270, v271, "numberOfBeacons: %s", (uint8_t *)v278, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_1008F9FA0();

    v905((char *)v898, v134);
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();
    v905((char *)v266, v169);
    uint64_t v134 = v169;
    uint64_t v280 = (char *)v902;
  }
  v281 = v899;
  v907((os_log_t)v899, v906, v134);
  v282 = (void *)swift_allocObject();
  unint64_t v283 = (unint64_t)v897;
  v282[2] = v901;
  v282[3] = v283;
  v284 = v893;
  v282[4] = v896;
  v282[5] = v284;
  sub_1000361E0(v890, (unint64_t)v889);
  sub_1000361E0((uint64_t)v892, (unint64_t)v891);
  v285 = Logger.logObject.getter();
  os_log_type_t v286 = static os_log_type_t.debug.getter();
  uint64_t v287 = swift_allocObject();
  *(unsigned char *)(v287 + 16) = 32;
  uint64_t v288 = swift_allocObject();
  *(unsigned char *)(v288 + 16) = 8;
  uint64_t v289 = swift_allocObject();
  *(void *)(v289 + 16) = sub_100060B9C;
  *(void *)(v289 + 24) = v282;
  uint64_t v290 = swift_allocObject();
  *(void *)(v290 + 16) = sub_1000654EC;
  *(void *)(v290 + 24) = v289;
  uint64_t v291 = swift_allocObject();
  sub_1004B810C(v291, 3);
  void *v292 = sub_100065514;
  v292[1] = v287;
  v292[2] = sub_100065514;
  v292[3] = v288;
  v292[4] = sub_100065500;
  v292[5] = v290;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v285, v286))
  {
    uint64_t v293 = sub_1008F9FAC();
    uint64_t v294 = swift_slowAlloc();
    v934 = 0;
    *(_WORD *)uint64_t v293 = 258;
    uint64_t v933 = v294;
    v915 = (uint64_t (*)())(v293 + 2);
    *(void *)&long long v911 = sub_100065514;
    *((void *)&v911 + 1) = v287;
    sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
    if (!v280)
    {
      swift_release();
      *(void *)&long long v911 = sub_100065514;
      *((void *)&v911 + 1) = v288;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
      swift_release();
      *(void *)&long long v911 = sub_100065500;
      *((void *)&v911 + 1) = v290;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v285, v286, "beaconGroupData: %s", (uint8_t *)v293, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      v295 = v899;
      uint64_t v134 = v910;
      goto LABEL_47;
    }
LABEL_192:
    swift_errorRelease();
    __break(1u);
    swift_errorRelease();
    __break(1u);
    uint64_t result = swift_errorRelease();
    __break(1u);
    return result;
  }

  swift_release();
  swift_release();
  swift_release();
  v295 = v281;
LABEL_47:
  v905((char *)v295, v134);
  uint64_t v296 = v900;
  v297 = *(uint8_t **)(v900 + 64);
  v297[OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState] = 2;
  v298 = *(void **)(v296 + 56);
  v299 = v894;
  if (!v298)
  {
    v305 = v873;
    v907((os_log_t)v873, v906, v134);
    v306 = Logger.logObject.getter();
    os_log_type_t v307 = static os_log_type_t.error.getter();
    v308 = sub_101020788(0);
    if (os_log_type_enabled(v306, v307))
    {
      v309 = (uint8_t *)sub_1008F9FAC();
      v915 = 0;
      v934 = 0;
      *(_WORD *)v309 = 0;
      *(void *)&long long v911 = v309 + 2;
      sub_100E08120((uint64_t)v308, (uint64_t)&v911, (uint64_t)&v915, (uint64_t)&v934);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v306, v307, "Missing peripheral to start pairing!", v309, 2u);
      sub_1008F9FA0();

      sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
    }
    else
    {
      sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);

      swift_bridgeObjectRelease();
    }
    sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
    v344 = v305;
    goto LABEL_112;
  }
  int v300 = *(unsigned __int8 *)(v296 + 200);
  uint64_t v902 = *(void *)(v296 + 56);
  v899 = v297;
  if (v300 != 1)
  {
    v298;
    uint64_t v310 = v878;
    sub_100AE800C(v878);
    uint64_t v311 = v871;
    sub_10001D074(v310, v871, &qword_10163BB20);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v887 + 48))(v311, 1, v888) == 1)
    {
      sub_10001DAB4(v311, &qword_10163BB20);
    }
    else
    {
      v580 = v863;
      uint64_t v581 = v311;
      sub_100A3AC74(v863);
      uint64_t v582 = sub_1004CC5F4((uint64_t)v580);
      (*(void (**)(char *, uint64_t))(v864 + 8))(v580, v865);
      sub_100157DEC(v581, type metadata accessor for OwnedBeaconGroup);
      if ((v582 & 0x100) == 0)
      {
LABEL_103:
        uint64_t v301 = v878;
        uint64_t v303 = v878;
        unint64_t v304 = v582;
        goto LABEL_104;
      }
    }
    uint64_t v582 = 255;
    goto LABEL_103;
  }
  uint64_t v301 = (uint64_t)v870;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v887 + 56))(v870, 1, 1, v888);
  id v302 = v298;
  uint64_t v303 = v301;
  unint64_t v304 = 255;
LABEL_104:
  v898 = sub_101144344(v303, v304);
  v895 = v583;
  sub_10001DAB4(v301, &qword_10163BB20);
  uint64_t v584 = sub_100034EEC((unint64_t)v901, (unint64_t)v897);
  v585 = v280;
  if (v280)
  {
    v907((os_log_t)v299, v906, v134);
    uint64_t v586 = swift_allocObject();
    *(void *)(v586 + 16) = v585;
    swift_errorRetain();
    v587 = Logger.logObject.getter();
    int v588 = static os_log_type_t.error.getter();
    uint64_t v589 = swift_allocObject();
    *(unsigned char *)(v589 + 16) = 34;
    uint64_t v590 = swift_allocObject();
    *(unsigned char *)(v590 + 16) = 8;
    uint64_t v591 = swift_allocObject();
    *(void *)(v591 + 16) = sub_10015B0D4;
    *(void *)(v591 + 24) = v586;
    uint64_t v592 = v134;
    uint64_t v593 = swift_allocObject();
    *(void *)(v593 + 16) = sub_1000654EC;
    *(void *)(v593 + 24) = v591;
    uint64_t v594 = swift_allocObject();
    sub_1004B810C(v594, 3);
    void *v595 = sub_100065514;
    v595[1] = v589;
    v595[2] = sub_100065514;
    v595[3] = v590;
    v595[4] = sub_100065500;
    v595[5] = v593;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v908) = v588;
    if (os_log_type_enabled(v587, (os_log_type_t)v588))
    {
      uint64_t v596 = sub_1008F9FAC();
      uint64_t v597 = swift_slowAlloc();
      v934 = 0;
      *(_WORD *)uint64_t v596 = 258;
      uint64_t v933 = v597;
      v915 = (uint64_t (*)())(v596 + 2);
      *(void *)&long long v911 = sub_100065514;
      *((void *)&v911 + 1) = v589;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
      swift_release();
      *(void *)&long long v911 = sub_100065514;
      *((void *)&v911 + 1) = v590;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
      swift_release();
      *(void *)&long long v911 = sub_100065500;
      *((void *)&v911 + 1) = v593;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
      v598 = v894;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v587, (os_log_type_t)v908, "Unable to parse beacon group info due to %{public}s", (uint8_t *)v596, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      v599 = v598;
      uint64_t v600 = v910;
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      v599 = v894;
      uint64_t v600 = v592;
    }
    v905((char *)v599, v600);
    uint64_t v616 = (uint64_t)v898;
    unint64_t v617 = (unint64_t)v895;
    sub_10013EB48(v899, (uint64_t)v898, (unint64_t)v895, (uint64_t)v904);
    sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
    swift_errorRelease();
    uint64_t v618 = v616;
    unint64_t v619 = v617;
  }
  else
  {
    v601 = v584;
    v602 = v872;
    v907((os_log_t)v872, v906, v134);
    uint64_t v603 = swift_allocObject();
    *(void *)(v603 + 16) = v601;
    uint64_t v604 = swift_allocObject();
    *(void *)(v604 + 16) = sub_100061428;
    *(void *)(v604 + 24) = v603;
    v908 = v601;
    swift_bridgeObjectRetain();
    v605 = Logger.logObject.getter();
    LODWORD(v603) = static os_log_type_t.default.getter();
    uint64_t v606 = swift_allocObject();
    *(unsigned char *)(v606 + 16) = 32;
    uint64_t v607 = swift_allocObject();
    *(unsigned char *)(v607 + 16) = 8;
    uint64_t v608 = swift_allocObject();
    *(void *)(v608 + 16) = sub_100061434;
    *(void *)(v608 + 24) = v604;
    uint64_t v609 = swift_allocObject();
    *(void *)(v609 + 16) = sub_1000654EC;
    *(void *)(v609 + 24) = v608;
    uint64_t v610 = swift_allocObject();
    sub_1004B810C(v610, 3);
    void *v611 = sub_100065514;
    v611[1] = v606;
    v611[2] = sub_100065514;
    v611[3] = v607;
    v611[4] = sub_100065500;
    v611[5] = v609;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v907) = v603;
    if (os_log_type_enabled(v605, (os_log_type_t)v603))
    {
      uint64_t v612 = sub_1008F9FAC();
      uint64_t v613 = swift_slowAlloc();
      v934 = 0;
      *(_WORD *)uint64_t v612 = 258;
      uint64_t v933 = v613;
      v915 = (uint64_t (*)())(v612 + 2);
      *(void *)&long long v911 = sub_100065514;
      *((void *)&v911 + 1) = v606;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
      swift_release();
      *(void *)&long long v911 = sub_100065514;
      *((void *)&v911 + 1) = v607;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
      swift_release();
      *(void *)&long long v911 = sub_100065500;
      *((void *)&v911 + 1) = v609;
      sub_1008F9FB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v911, (uint64_t)&v915, (uint64_t)&v934, (uint64_t)&v933);
      v614 = v904;
      v615 = v872;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v605, (os_log_type_t)v907, "beaconGroupInfo: %s", (uint8_t *)v612, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_1008F9FA0();

      v905(v615, v910);
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      v905(v602, v910);
      v614 = v904;
    }
    v663 = v899;
    *(void *)(*(void *)&v899[OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo]
              + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds) = v908;
    swift_bridgeObjectRelease();
    uint64_t v664 = (uint64_t)v614;
    uint64_t v665 = (uint64_t)v898;
    unint64_t v666 = (unint64_t)v895;
    sub_10013EB48(v663, (uint64_t)v898, (unint64_t)v895, v664);
    sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
    uint64_t v618 = v665;
    unint64_t v619 = v666;
  }
  sub_10001CFB8(v618, v619);

  return sub_100156058((uint64_t)v952, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
}

uint64_t sub_100149AA4(uint64_t a1)
{
  long long v4 = *(_OWORD *)(a1 + 112);
  sub_1000620BC((uint64_t)&v4, (uint64_t)v5);
  sub_1000620BC((uint64_t)v5, (uint64_t)&v6);
  uint64_t result = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      v7 &= 0x3FFFFFFFFFFFFFFFuLL;
      if (__OFSUB__(HIDWORD(v6), v6))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x100149B50);
      }
      return HIDWORD(v6) - (int)v6;
    case 2uLL:
      v7 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v2 = *(void *)(v6 + 16);
      uint64_t v3 = *(void *)(v6 + 24);
      uint64_t result = v3 - v2;
      if (!__OFSUB__(v3, v2)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(v7);
  }
}

uint64_t sub_100149B60(uint64_t a1)
{
  long long v4 = *(_OWORD *)(a1 + 128);
  sub_1000620BC((uint64_t)&v4, (uint64_t)v5);
  sub_1000620BC((uint64_t)v5, (uint64_t)&v6);
  uint64_t result = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      v7 &= 0x3FFFFFFFFFFFFFFFuLL;
      if (__OFSUB__(HIDWORD(v6), v6))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x100149C0CLL);
      }
      return HIDWORD(v6) - (int)v6;
    case 2uLL:
      v7 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v2 = *(void *)(v6 + 16);
      uint64_t v3 = *(void *)(v6 + 24);
      uint64_t result = v3 - v2;
      if (!__OFSUB__(v3, v2)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(v7);
  }
}

uint64_t sub_100149C1C()
{
  uint64_t v23 = _swiftEmptyDictionarySingleton;
  *(_OWORD *)uint64_t v22 = *(_OWORD *)(v0 + 16);
  sub_1000362FC();
  uint64_t v1 = DataProtocol.intValue.getter();
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170F068);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134349056;
    v22[0] = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Number of beacons: %{public}ld", v5, 0xCu);
    swift_slowDealloc();
  }

  if (v1 < 2) {
    return (uint64_t)v23;
  }
  uint64_t v6 = Data.chunked(into:)();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = (long long *)(v6 + 32);
    do
    {
      long long v9 = *v8++;
      *(_OWORD *)uint64_t v22 = v9;
      sub_100154DD0();
      --v7;
    }
    while (v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = v23[2];
  uint64_t v11 = Logger.logObject.getter();
  if (v10 == v1 - 1)
  {
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_10000588C((uint64_t *)&unk_1016477E0);
      sub_100061B8C();
      uint64_t v14 = Dictionary.description.getter();
      unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      sub_1008FA0F0(v14, v16, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "serialNumbersAndMacAddressesMap: %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_beginAccess();
    return (uint64_t)v23;
  }
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 134349056;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v11, v18, "Unexpected number of other serial numbers: %{public}ld", v19, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v20 = type metadata accessor for BinaryEncodingError();
  sub_100158020((unint64_t *)&qword_101639620, (void (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v20 - 8) + 104))(v21, enum case for BinaryEncodingError.encodingError(_:), v20);
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10014A09C(uint64_t a1)
{
  sub_1001559B0(a1, (uint64_t)v51);
  sub_1001559B0((uint64_t)v51, (uint64_t)v53);
  sub_1001559B0(a1, (uint64_t)v52);
  switch(sub_100156F10((uint64_t)v52))
  {
    case 1u:
      uint64_t v9 = sub_100157BC4((uint64_t)v52);
      long long v42 = *(_OWORD *)(v9 + 16);
      long long v45 = *(_OWORD *)v9;
      long long v39 = *(_OWORD *)(v9 + 48);
      long long v40 = *(_OWORD *)(v9 + 32);
      uint64_t v10 = *(void *)(v9 + 64);
      uint64_t v11 = *(void *)(v9 + 72);
      uint64_t v49 = &type metadata for AirPodsLEInitiatePairingCommandPayload;
      unint64_t v50 = sub_100062448();
      uint64_t v12 = swift_allocObject();
      uint64_t v48 = v12;
      *(_OWORD *)(v12 + 16) = v45;
      *(_OWORD *)(v12 + 32) = v42;
      *(_OWORD *)(v12 + 48) = v40;
      *(_OWORD *)(v12 + 64) = v39;
      *(void *)(v12 + 80) = v10;
      *(void *)(v12 + 88) = v11;
      sub_1001559B0((uint64_t)v53, (uint64_t)v47);
      uint64_t v13 = (uint64_t *)sub_100157BC4((uint64_t)v47);
      uint64_t v14 = v13[2];
      unint64_t v15 = v13[3];
      uint64_t v16 = v13[4];
      unint64_t v17 = v13[5];
      uint64_t v18 = v13[6];
      unint64_t v19 = v13[7];
      uint64_t v20 = v13[8];
      unint64_t v21 = v13[9];
      sub_1000361E0(*v13, v13[1]);
      sub_1000361E0(v14, v15);
      sub_1000361E0(v16, v17);
      sub_1000361E0(v18, v19);
      sub_1000361E0(v20, v21);
      break;
    case 2u:
      uint64_t v22 = (const void *)sub_100157BC4((uint64_t)v52);
      uint64_t v49 = &type metadata for AirPodsLESendPairingDataCommandPayload;
      unint64_t v50 = sub_100157AD4();
      uint64_t v48 = swift_allocObject();
      memmove((void *)(v48 + 16), v22, 0xD8uLL);
      sub_1001559B0((uint64_t)v53, (uint64_t)v47);
      uint64_t v23 = (uint64_t *)sub_100157BC4((uint64_t)v47);
      sub_100157554(v23, (void (*)(uint64_t, uint64_t))sub_1000361E0);
      break;
    case 3u:
      uint64_t v24 = (const void *)sub_100157BC4((uint64_t)v52);
      uint64_t v49 = &type metadata for AirPodsLEFinalizePairingCommandPayload;
      unint64_t v50 = sub_1001578B4();
      uint64_t v48 = swift_allocObject();
      memmove((void *)(v48 + 16), v24, 0xC0uLL);
      sub_1001559B0((uint64_t)v53, (uint64_t)v47);
      uint64_t v25 = (uint64_t *)sub_100157BC4((uint64_t)v47);
      sub_1001579A8(v25);
      break;
    case 4u:
      uint64_t v26 = sub_100157BC4((uint64_t)v52);
      long long v43 = *(_OWORD *)(v26 + 16);
      long long v46 = *(_OWORD *)v26;
      long long v41 = *(_OWORD *)(v26 + 32);
      uint64_t v27 = *(void *)(v26 + 48);
      uint64_t v28 = *(void *)(v26 + 56);
      uint64_t v49 = &type metadata for AirPodsLESendPairingStatusCommandPayload;
      unint64_t v50 = sub_10015785C();
      uint64_t v29 = swift_allocObject();
      uint64_t v48 = v29;
      *(_OWORD *)(v29 + 16) = v46;
      *(_OWORD *)(v29 + 32) = v43;
      *(_OWORD *)(v29 + 48) = v41;
      *(void *)(v29 + 64) = v27;
      *(void *)(v29 + 72) = v28;
      sub_1001559B0((uint64_t)v53, (uint64_t)v47);
      uint64_t v30 = (uint64_t *)sub_100157BC4((uint64_t)v47);
      uint64_t v31 = v30[2];
      unint64_t v32 = v30[3];
      uint64_t v33 = v30[4];
      unint64_t v34 = v30[5];
      uint64_t v35 = v30[6];
      unint64_t v36 = v30[7];
      sub_1000361E0(*v30, v30[1]);
      sub_1000361E0(v31, v32);
      sub_1000361E0(v33, v34);
      sub_1000361E0(v35, v36);
      break;
    case 5u:
      uint64_t v49 = &type metadata for AccessoryGenericPayload;
      unint64_t v37 = sub_10006258C();
      goto LABEL_10;
    case 6u:
      uint64_t v49 = &type metadata for AirPodsPairingCompleteCommandPayload;
      unint64_t v37 = sub_100157808();
      goto LABEL_10;
    case 7u:
      uint64_t v49 = &type metadata for UnpairCommandPayload;
      unint64_t v37 = sub_100062118();
LABEL_10:
      unint64_t v50 = v37;
      break;
    default:
      uint64_t v2 = sub_100157BC4((uint64_t)v52);
      long long v44 = *(_OWORD *)v2;
      uint64_t v3 = *(void *)(v2 + 16);
      uint64_t v4 = *(void *)(v2 + 24);
      uint64_t v49 = &type metadata for AirPodsSendBeaconGroupDataCommandPayload;
      unint64_t v50 = sub_1000624F4();
      uint64_t v5 = swift_allocObject();
      uint64_t v48 = v5;
      *(_OWORD *)(v5 + 16) = v44;
      *(void *)(v5 + 32) = v3;
      *(void *)(v5 + 40) = v4;
      sub_1001559B0((uint64_t)v53, (uint64_t)v47);
      uint64_t v6 = (uint64_t *)sub_100157BC4((uint64_t)v47);
      uint64_t v7 = v6[2];
      unint64_t v8 = v6[3];
      sub_1000361E0(*v6, v6[1]);
      sub_1000361E0(v7, v8);
      break;
  }
  sub_10000588C(&qword_101639B68);
  return String.init<A>(describing:)();
}

uint64_t sub_10014A490(uint64_t a1)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  sub_1000620BC((uint64_t)&v4, (uint64_t)v5);
  sub_1000620BC((uint64_t)v5, (uint64_t)&v6);
  uint64_t result = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      v7 &= 0x3FFFFFFFFFFFFFFFuLL;
      if (__OFSUB__(HIDWORD(v6), v6))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x10014A53CLL);
      }
      return HIDWORD(v6) - (int)v6;
    case 2uLL:
      v7 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v2 = *(void *)(v6 + 16);
      uint64_t v3 = *(void *)(v6 + 24);
      uint64_t result = v3 - v2;
      if (!__OFSUB__(v3, v2)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(v7);
  }
}

uint64_t sub_10014A54C(uint64_t a1)
{
  sub_1001559B0(a1, (uint64_t)v3);
  sub_100156058(a1, (void (*)(void))sub_1000361E0, (void (*)(void))sub_100037A38);
  return String.init<A>(describing:)();
}

uint64_t sub_10014A5BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v25 = a1;
  uint64_t v27 = a2;
  uint64_t v4 = sub_10000588C(&qword_10163C678);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = type metadata accessor for AirPodsLEPairingLockCheckResponse();
  uint64_t v7 = __chkstk_darwin(v23);
  uint64_t v22 = (uint64_t)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = swift_allocBox();
  uint64_t v13 = v12;
  type metadata accessor for SPPairingSessionError(0);
  uint64_t v29 = 1;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100158020(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  void *v13 = v28;
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = dispatch_group_create();
  dispatch_group_enter(v14);
  uint64_t v24 = v3;
  LOBYTE(v3) = *(unsigned char *)(v3 + 200);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v11;
  *(void *)(v15 + 24) = v14;
  uint64_t v26 = v11;
  swift_retain();
  uint64_t v16 = v14;
  sub_100973EC4(v25, v3, (void (*)(void *))sub_100156D34, v15);
  swift_release();
  OS_dispatch_group.wait()();
  swift_beginAccess();
  sub_10001D074((uint64_t)v13, (uint64_t)v6, &qword_10163C678);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v29 = *v6;
    unint64_t v17 = (void *)v29;
    sub_100158020(&qword_1016381E8, type metadata accessor for SPPairingSessionError);
    swift_willThrowTypedImpl();
  }
  else
  {
    uint64_t v18 = v22;
    sub_100157D84((uint64_t)v6, v22, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);

    sub_100157D84(v18, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
    uint64_t v19 = *(void *)(*(void *)(v24 + 64) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
    uint64_t v20 = *(void *)&v10[*(int *)(v23 + 56)];
    swift_retain();
    sub_100157DEC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
    *(void *)(v19 + 32) = v20;
    swift_release();
  }
  sub_10001D074((uint64_t)v13, v27, &qword_10163C678);
  return swift_release();
}

void sub_10014A928(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = swift_projectBox();
  swift_beginAccess();
  sub_100156D3C(a1, v5, &qword_10163C678);
  dispatch_group_leave(a3);
}

void sub_10014A994()
{
  uint64_t v1 = *(void *)(v0 + 112);
  unint64_t v2 = *(void *)(v0 + 120);
  swift_retain();
  sub_100037A38(v1, v2);
  sub_100F83C14(v1, v2, (uint64_t)v8);
  sub_100037A24(v1, v2);
  swift_release();
  sub_10001D608((uint64_t)v8, (uint64_t)v9, &qword_10163C688);
  if (sub_10005F324((uint64_t)v9) == 1)
  {
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170F098);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to generate ack data!", v6, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    memcpy(v10, v9, sizeof(v10));
    uint64_t v7 = type metadata accessor for Transaction();
    __chkstk_darwin(v7);
    static Transaction.named<A>(_:with:)();
    sub_10015682C((uint64_t)v8);
  }
}

uint64_t sub_10014AB98(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v14 = a3;
  uint64_t v6 = type metadata accessor for MACAddress();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v9;
  *(void *)(v11 + 24) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  swift_retain();
  swift_retain();
  sub_1009748A0(v14, (void (*)(uint64_t))sub_100156B20, v11);
  swift_release();
  return swift_release();
}

uint64_t sub_10014AD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v63 = *(void *)(v6 - 8);
  uint64_t v64 = v6;
  __chkstk_darwin(v6);
  uint64_t v61 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for DispatchQoS();
  uint64_t v60 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v59 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MACAddress();
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  uint64_t v10 = *(void *)(v56 + 64);
  __chkstk_darwin(v9);
  uint64_t v55 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AirPodsLEPairingLockAckResponse();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  unint64_t v17 = (char *)&v52 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v52 - v18;
  uint64_t v20 = sub_10000588C(&qword_10163C690);
  __chkstk_darwin(v20);
  uint64_t v22 = (void **)((char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v54 = result;
    uint64_t v53 = a3;
    Transaction.capture()();
    sub_10001D074(a1, (uint64_t)v22, &qword_10163C690);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = *v22;
      if (qword_101637320 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_100010324(v25, (uint64_t)qword_10170F098);
      uint64_t v26 = v24;
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        uint64_t v65 = v26;
        aBlock[0] = v30;
        *(_DWORD *)uint64_t v29 = 136446210;
        type metadata accessor for SPPairingSessionError(0);
        uint64_t v31 = v26;
        uint64_t v32 = String.init<A>(describing:)();
        uint64_t v65 = (void *)sub_1008FA0F0(v32, v33, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Ack register failed with error - %{public}s", v29, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v40 = v53;
      uint64_t v41 = v54;
      long long v42 = v55;
      uint64_t v44 = v56;
      uint64_t v43 = v57;
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, v58, v57);
      unint64_t v45 = (*(unsigned __int8 *)(v44 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
      long long v46 = (char *)swift_allocObject();
      *((void *)v46 + 2) = v40;
      *((void *)v46 + 3) = v41;
      *((void *)v46 + 4) = v26;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(&v46[v45], v42, v43);
      aBlock[4] = (uint64_t)sub_100156C70;
      aBlock[5] = (uint64_t)v46;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1004B5480;
      aBlock[3] = (uint64_t)&unk_1015AFEC0;
      uint64_t v47 = _Block_copy(aBlock);
      uint64_t v48 = v26;
      swift_retain();
      swift_retain();
      uint64_t v49 = v59;
      static DispatchQoS.unspecified.getter();
      uint64_t v65 = _swiftEmptyArrayStorage;
      sub_100158020((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      unint64_t v50 = v61;
      uint64_t v51 = v64;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v47);

      (*(void (**)(char *, uint64_t))(v63 + 8))(v50, v51);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v49, v62);
      swift_release();
      return swift_release();
    }
    else
    {
      sub_100157D84((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockAckResponse);
      if (qword_101637320 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      sub_100010324(v34, (uint64_t)qword_10170F098);
      sub_1001570F0((uint64_t)v19, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockAckResponse);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        unint64_t v37 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v37 = 136446210;
        sub_1001570F0((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockAckResponse);
        uint64_t v38 = String.init<A>(describing:)();
        uint64_t v65 = (void *)sub_1008FA0F0(v38, v39, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100157DEC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockAckResponse);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Ack register was success. %{public}s", v37, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        sub_100157DEC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockAckResponse);
        swift_release();
      }
      return sub_100157DEC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockAckResponse);
    }
  }
  return result;
}

uint64_t sub_10014B5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  uint64_t v9 = type metadata accessor for MACAddress();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  sub_1001540B0(a3, a4, (uint64_t)v8);
  return sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_1016477E0);
}

void sub_10014B6C4(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v211 = a1;
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v188 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v188 - v8;
  uint64_t v207 = type metadata accessor for AirPodsLEPairingLockCheckResponse();
  uint64_t v10 = __chkstk_darwin(v207);
  uint64_t v206 = (uint64_t)&v188 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint8_t *)&v188 - v12;
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v188 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v208 = sub_10000588C(&qword_10163C678);
  __chkstk_darwin(v208);
  long long v209 = (id *)((char *)&v188 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v221 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v214 = *(void *)(v221 - 8);
  uint64_t v18 = __chkstk_darwin(v221);
  uint64_t v231 = (uint64_t)&v188 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v232 = (char *)&v188 - v20;
  uint64_t v220 = sub_10000588C(&qword_101639618);
  uint64_t v21 = __chkstk_darwin(v220);
  uint64_t v219 = (_OWORD *)((char *)&v188 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v218 = (_OWORD *)((char *)&v188 - v24);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v217 = (uint64_t *)((char *)&v188 - v26);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v216 = (uint64_t *)((char *)&v188 - v28);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v230 = (uint64_t *)((char *)&v188 - v30);
  __chkstk_darwin(v29);
  uint64_t v215 = (uint64_t *)((char *)&v188 - v31);
  uint64_t v32 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v32 - 8);
  uint64_t v229 = (uint64_t *)((char *)&v188 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v34 = type metadata accessor for HashAlgorithm();
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v36 = v2;
  uint64_t v38 = (char *)&v188 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = *(void *)(v2 + 64);
  uint64_t v40 = (uint64_t *)(*(void *)(v39 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1);
  unint64_t v41 = v40[1];
  if (v41 >> 60 == 15)
  {
    if (qword_101637320 != -1) {
      goto LABEL_72;
    }
    goto LABEL_3;
  }
  uint64_t v204 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  uint64_t v205 = v39;
  uint64_t v201 = v16;
  uint64_t v202 = v13;
  uint64_t v203 = v36;
  uint64_t v46 = *v40;
  sub_1000361E0(*v40, v41);
  sub_1000361E0(v46, v41);
  uint64_t v47 = sub_100A8AEE4(v46, v41);
  uint64_t v191 = v9;
  os_log_type_t v192 = v7;
  uint64_t v199 = v46;
  uint64_t v200 = v48;
  unint64_t v50 = v49;
  uint64_t v51 = v47;
  sub_100037A24(v46, v41);
  sub_1000361E0(v51, v50);
  sub_100435190(v51, v50, v238);
  uint64_t v197 = v51;
  unint64_t v198 = v50;
  unint64_t v189 = v41;
  uint64_t v190 = (void *)a2;
  uint64_t v52 = v238[0];
  unint64_t v53 = v238[1];
  uint64_t v54 = v205;
  uint64_t v55 = *(void *)(v205 + v204);
  v238[3] = (uint64_t)&type metadata for CollaborativeKeyGen.v1.C2;
  v238[4] = sub_100061FCC();
  v238[0] = v52;
  v238[1] = v53;
  sub_10001D608((uint64_t)v238, (uint64_t)v237, &qword_101639BC0);
  uint64_t v56 = v55 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2;
  swift_beginAccess();
  swift_retain();
  uint64_t v195 = v52;
  unint64_t v196 = v53;
  sub_1000361E0(v52, v53);
  sub_100062604((uint64_t)v237, v56, &qword_101639BC0);
  swift_endAccess();
  swift_release();
  uint64_t v57 = type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
  v238[4] = (uint64_t)&off_1015E6CC0;
  v238[3] = v57;
  a2 = v200;
  v238[0] = v200;
  sub_10001D608((uint64_t)v238, (uint64_t)v237, &qword_101639A40);
  uint64_t v58 = v54 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext;
  swift_beginAccess();
  swift_retain();
  sub_100062604((uint64_t)v237, v58, &qword_101639A40);
  swift_endAccess();
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v59 = type metadata accessor for Logger();
  uint64_t v60 = sub_100010324(v59, (uint64_t)qword_10170F098);
  uint64_t v61 = v197;
  unint64_t v62 = v198;
  sub_1000361E0(v197, v198);
  sub_1000361E0(v61, v62);
  uint64_t v188 = v60;
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = swift_slowAlloc();
    os_log_t v227 = v63;
    uint64_t v66 = (uint8_t *)v65;
    os_log_type_t v228 = (char *)swift_slowAlloc();
    v238[0] = (uint64_t)v228;
    *(_DWORD *)uint64_t v66 = 136315138;
    uint64_t v226 = v66 + 4;
    uint64_t v67 = Data.hexString.getter();
    v237[0] = sub_1008FA0F0(v67, v68, v238);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v61, v62);
    sub_10001CFB8(v61, v62);
    os_log_t v69 = v227;
    _os_log_impl((void *)&_mh_execute_header, v227, v64, "C2: %s", v66, 0xCu);
    a2 = (unint64_t)v228;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(v61, v62);
    sub_10001CFB8(v61, v62);
  }
  (*(void (**)(char *, void, uint64_t))(v35 + 104))(v38, enum case for HashAlgorithm.sha256(_:), v34);
  uint64_t v71 = v195;
  unint64_t v70 = v196;
  sub_1000361E0(v195, v196);
  uint64_t v193 = Data.hash(algorithm:)();
  unint64_t v194 = v72;
  sub_10001CFB8(v71, v70);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v34);
  uint64_t v73 = (uint64_t)v229;
  sub_100AE800C((uint64_t)v229);
  uint64_t v74 = type metadata accessor for OwnedBeaconGroup(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 48))(v73, 1, v74) != 1)
  {
    uint64_t v81 = *(void **)(v73 + *(int *)(v74 + 40));
    swift_bridgeObjectRetain();
    sub_100157DEC(v73, type metadata accessor for OwnedBeaconGroup);
LABEL_48:
    uint64_t v132 = *(void *)(v203 + 112);
    unint64_t v133 = *(void *)(v203 + 120);
    swift_retain();
    sub_100037A38(v132, v133);
    sub_100F84008(v193, v194, v132, v133, (uint64_t)v81, (uint64_t)v233);
    swift_bridgeObjectRelease();
    sub_100037A24(v132, v133);
    swift_release();
    sub_10001D608((uint64_t)v233, (uint64_t)v237, &qword_10163C680);
    if (sub_1000616F4((uint64_t)v237) == 1)
    {
      uint64_t v134 = Logger.logObject.getter();
      os_log_type_t v135 = static os_log_type_t.error.getter();
      BOOL v136 = os_log_type_enabled(v134, v135);
      uint64_t v137 = v199;
      if (v136)
      {
        uint64_t v138 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v138 = 0;
        _os_log_impl((void *)&_mh_execute_header, v134, v135, "Unable to create pairing check data.", v138, 2u);
        swift_slowDealloc();
      }

      swift_release();
      sub_10001CFB8(v195, v196);
      sub_100037A24(v137, v189);
      sub_10001CFB8(v197, v198);
      sub_10001CFB8(v193, v194);
      unint64_t v139 = 0xD00000000000001ALL;
      uint64_t v140 = "Invalid E2 from accessory!";
    }
    else
    {
      memcpy(v238, v237, 0x160uLL);
      uint64_t v142 = v209;
      sub_10014A5BC(v238, (uint64_t)v209);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        id v143 = *v142;
        uint64_t v144 = Logger.logObject.getter();
        os_log_type_t v145 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v144, v145))
        {
          uint64_t v146 = (uint8_t *)swift_slowAlloc();
          v236[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v146 = 136446210;
          v235[0] = v143;
          type metadata accessor for SPPairingSessionError(0);
          id v147 = v143;
          uint64_t v148 = String.init<A>(describing:)();
          v235[0] = sub_1008FA0F0(v148, v149, v236);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v144, v145, "Pairing lock check failed. Error %{public}s", v146, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v158 = (uint64_t)v201;
        uint64_t v159 = type metadata accessor for MACAddress();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v159 - 8) + 56))(v158, 1, 1, v159);
        id v160 = v143;
        sub_1001540B0((uint64_t)v160, v211, v158);

        sub_10001DAB4(v158, (uint64_t *)&unk_1016477E0);
        v235[0] = v160;
        type metadata accessor for SPPairingSessionError(0);
        sub_100158020(&qword_101638770, type metadata accessor for SPPairingSessionError);
        _BridgedStoredNSError.code.getter();
        if (v236[0] == 18)
        {
          sub_10014CF08(v205, (uint64_t)v190);
          swift_release();
          sub_10001CFB8(v195, v196);
          sub_100037A24(v199, v189);
          sub_10001CFB8(v197, v198);
          sub_10001CFB8(v193, v194);
          sub_10015657C((uint64_t)v233);
        }
        else
        {
          swift_release();
          sub_10001CFB8(v195, v196);
          sub_100037A24(v199, v189);
          sub_10001CFB8(v197, v198);
          sub_10001CFB8(v193, v194);
          sub_10015657C((uint64_t)v233);
          uint64_t v161 = v190;
          *uint64_t v190 = v160;
          *((unsigned char *)v161 + 40) = 0;
          *((unsigned char *)v161 + 216) = 1;
        }
        return;
      }
      uint64_t v150 = v202;
      sub_100157D84((uint64_t)v142, (uint64_t)v202, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
      uint64_t v151 = v206;
      sub_1001570F0((uint64_t)v150, v206, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
      uint64_t v152 = Logger.logObject.getter();
      os_log_type_t v153 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v152, v153))
      {
        uint64_t v154 = v151;
        unint64_t v155 = (uint8_t *)swift_slowAlloc();
        v236[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v155 = 136446210;
        if (*(void *)(v154 + *(int *)(v207 + 52) + 8) >> 60 == 15)
        {
          uint64_t v156 = 0;
          unint64_t v157 = 0xE000000000000000;
        }
        else
        {
          uint64_t v156 = Data.hexString.getter();
          unint64_t v157 = v162;
        }
        v235[0] = sub_1008FA0F0(v156, v157, v236);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100157DEC(v206, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
        _os_log_impl((void *)&_mh_execute_header, v152, v153, "Received SeedS and S3 from server. Pairing token: %{public}s", v155, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v150 = v202;
      }
      else
      {
        sub_100157DEC(v151, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
      }
      uint64_t v163 = v204;
      uint64_t v164 = v205;
      uint64_t v165 = *(void *)(v205 + v204);
      uint64_t v166 = v207;
      os_log_type_t v167 = &v150[*(int *)(v207 + 36)];
      uint64_t v168 = type metadata accessor for UUID();
      uint64_t v169 = *(void *)(v168 - 8);
      uint64_t v170 = (uint64_t)v191;
      (*(void (**)(char *, uint8_t *, uint64_t))(v169 + 16))(v191, v167, v168);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v169 + 56))(v170, 0, 1, v168);
      uint64_t v171 = (uint64_t)v192;
      sub_10001D608(v170, (uint64_t)v192, &qword_101638CF0);
      uint64_t v172 = v165 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
      swift_beginAccess();
      swift_retain();
      sub_100062604(v171, v172, &qword_101638CF0);
      swift_endAccess();
      swift_release();
      uint64_t v173 = (uint64_t *)&v150[*(int *)(v166 + 44)];
      uint64_t v174 = *v173;
      unint64_t v175 = v173[1];
      uint64_t v176 = (uint64_t *)(*(void *)(v164 + v163) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert);
      uint64_t v177 = *v176;
      unint64_t v178 = v176[1];
      *uint64_t v176 = *v173;
      v176[1] = v175;
      sub_1000361E0(v174, v175);
      sub_100037A24(v177, v178);
      uint64_t v179 = (uint64_t *)&v150[*(int *)(v166 + 48)];
      uint64_t v180 = *v179;
      unint64_t v181 = v179[1];
      uint64_t v182 = (uint64_t *)(*(void *)(v164 + v163) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1);
      uint64_t v183 = *v182;
      unint64_t v184 = v182[1];
      *uint64_t v182 = *v179;
      v182[1] = v181;
      sub_1000361E0(v180, v181);
      sub_100037A24(v183, v184);
      uint64_t v186 = v197;
      unint64_t v185 = v198;
      sub_10014D8BC(v150, v197, v198, v211, (uint64_t)v234);
      sub_10001D608((uint64_t)v234, (uint64_t)v235, &qword_10163C670);
      if (sub_1001564C0((uint64_t)v235) != 1)
      {
        sub_1001559B0((uint64_t)v235, (uint64_t)v236);
        sub_100157DEC((uint64_t)v150, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
        swift_release();
        sub_10001CFB8(v195, v196);
        sub_100037A24(v199, v189);
        sub_10001CFB8(v186, v185);
        sub_10001CFB8(v193, v194);
        sub_10015657C((uint64_t)v233);
        os_log_type_t v187 = v190;
        sub_1001559B0((uint64_t)v236, (uint64_t)v190);
        *((unsigned char *)v187 + 216) = 0;
        return;
      }
      sub_100037A24(v199, v189);
      sub_10001CFB8(v193, v194);
      sub_10015657C((uint64_t)v233);
      swift_release();
      sub_10001CFB8(v195, v196);
      sub_10001CFB8(v186, v185);
      sub_100157DEC((uint64_t)v150, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
      unint64_t v139 = 0xD000000000000019;
      uint64_t v140 = "Invalid token from server";
    }
    uint64_t v141 = v190;
    *uint64_t v190 = v139;
    v141[1] = (unint64_t)(v140 - 32) | 0x8000000000000000;
    *((unsigned char *)v141 + 40) = 9;
    *((unsigned char *)v141 + 216) = 1;
    return;
  }
  sub_10001DAB4(v73, &qword_10163BB20);
  uint64_t v75 = *(void *)(*(void *)(v205 + v204)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
  uint64_t v76 = *(void *)(v75 + 64);
  uint64_t v210 = v75 + 64;
  uint64_t v77 = 1 << *(unsigned char *)(v75 + 32);
  uint64_t v78 = -1;
  if (v77 < 64) {
    uint64_t v78 = ~(-1 << v77);
  }
  unint64_t v79 = v78 & v76;
  int64_t v212 = (unint64_t)(v77 + 63) >> 6;
  uint64_t v213 = v75;
  swift_bridgeObjectRetain_n();
  int64_t v80 = 0;
  uint64_t v81 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    uint64_t v229 = v81;
    if (v79)
    {
      uint64_t v223 = (v79 - 1) & v79;
      int64_t v224 = v80;
      unint64_t v82 = __clz(__rbit64(v79)) | (v80 << 6);
    }
    else
    {
      int64_t v83 = v80 + 1;
      if (__OFADD__(v80, 1)) {
        goto LABEL_71;
      }
      if (v83 >= v212)
      {
LABEL_47:
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_48;
      }
      unint64_t v84 = *(void *)(v210 + 8 * v83);
      int64_t v85 = v80 + 1;
      if (!v84)
      {
        int64_t v85 = v80 + 2;
        if (v80 + 2 >= v212) {
          goto LABEL_47;
        }
        unint64_t v84 = *(void *)(v210 + 8 * v85);
        if (!v84)
        {
          int64_t v85 = v80 + 3;
          if (v80 + 3 >= v212) {
            goto LABEL_47;
          }
          unint64_t v84 = *(void *)(v210 + 8 * v85);
          if (!v84)
          {
            int64_t v85 = v80 + 4;
            if (v80 + 4 >= v212) {
              goto LABEL_47;
            }
            unint64_t v84 = *(void *)(v210 + 8 * v85);
            if (!v84)
            {
              uint64_t v86 = v80 + 5;
              if (v80 + 5 >= v212) {
                goto LABEL_47;
              }
              unint64_t v84 = *(void *)(v210 + 8 * v86);
              if (!v84)
              {
                while (1)
                {
                  int64_t v85 = v86 + 1;
                  if (__OFADD__(v86, 1)) {
                    break;
                  }
                  if (v85 >= v212) {
                    goto LABEL_47;
                  }
                  unint64_t v84 = *(void *)(v210 + 8 * v85);
                  ++v86;
                  if (v84) {
                    goto LABEL_34;
                  }
                }
                __break(1u);
LABEL_74:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                return;
              }
              int64_t v85 = v80 + 5;
            }
          }
        }
      }
LABEL_34:
      uint64_t v223 = (v84 - 1) & v84;
      int64_t v224 = v85;
      unint64_t v82 = __clz(__rbit64(v84)) + (v85 << 6);
    }
    uint64_t v87 = *(void *)(v213 + 56);
    uint64_t v88 = (uint64_t *)(*(void *)(v213 + 48) + 16 * v82);
    unint64_t v89 = v88[1];
    uint64_t v225 = *v88;
    uint64_t v90 = v225;
    uint64_t v226 = (uint8_t *)v89;
    uint64_t v91 = type metadata accessor for MultipartAccessoryPairingInfo(0) - 8;
    uint64_t v92 = *(void *)(*(void *)v91 + 72);
    os_log_t v227 = (os_log_t)v91;
    uint64_t v93 = v87 + v92 * v82;
    uint64_t v94 = v220;
    uint64_t v95 = v215;
    sub_1001570F0(v93, (uint64_t)v215 + *(int *)(v220 + 48), type metadata accessor for MultipartAccessoryPairingInfo);
    *uint64_t v95 = v90;
    v95[1] = v89;
    uint64_t v96 = (uint64_t)v95;
    uint64_t v97 = v230;
    sub_10001D608(v96, (uint64_t)v230, &qword_101639618);
    uint64_t v98 = *(int *)(v94 + 48);
    uint64_t v99 = v216;
    uint64_t v100 = (uint64_t)v216 + v98;
    uint64_t v101 = (uint64_t)v97 + v98;
    uint64_t v102 = *v97;
    unint64_t v103 = v97[1];
    *uint64_t v216 = *v97;
    v99[1] = v103;
    uint64_t v222 = (uint64_t)v99 + v98;
    sub_1001570F0((uint64_t)v97 + v98, v100, type metadata accessor for MultipartAccessoryPairingInfo);
    uint64_t v104 = sub_10000588C((uint64_t *)&unk_101647810);
    uint64_t v105 = (uint64_t)v232;
    os_log_type_t v228 = &v232[*(int *)(v104 + 48)];
    uint64_t v106 = *(int *)(v94 + 48);
    uint64_t v107 = v217;
    uint64_t v108 = (uint64_t)v217 + v106;
    *uint64_t v217 = v102;
    v107[1] = v103;
    sub_1001570F0(v101, (uint64_t)v107 + v106, type metadata accessor for MultipartAccessoryPairingInfo);
    sub_10001D074(v108 + *(int *)(v91 + 32), v105, (uint64_t *)&unk_1016477E0);
    sub_1000361E0(v225, (unint64_t)v226);
    sub_1000361E0(v102, v103);
    sub_100157DEC(v108, type metadata accessor for MultipartAccessoryPairingInfo);
    uint64_t v109 = *(int *)(v94 + 48);
    uint64_t v110 = v218;
    uint64_t v111 = (char *)v218 + v109;
    *uint64_t v218 = *(_OWORD *)v97;
    sub_1001570F0(v101, (uint64_t)v110 + v109, type metadata accessor for MultipartAccessoryPairingInfo);
    LOBYTE(v108) = *v111;
    sub_100157DEC((uint64_t)v111, type metadata accessor for MultipartAccessoryPairingInfo);
    uint64_t v112 = *(int *)(v94 + 48);
    uint64_t v113 = v219;
    uint64_t v114 = (uint64_t)v219 + v112;
    long long v115 = *(_OWORD *)v97;
    uint64_t v116 = v102;
    *uint64_t v219 = v115;
    sub_1001570F0(v101, (uint64_t)v113 + v112, type metadata accessor for MultipartAccessoryPairingInfo);
    LOBYTE(v102) = *(unsigned char *)(v114 + SHIDWORD(v227[4].isa));
    sub_100157DEC(v114, type metadata accessor for MultipartAccessoryPairingInfo);
    id v117 = v228;
    *os_log_type_t v228 = v108;
    v117[1] = 0;
    v117[2] = v102;
    uint64_t v118 = (uint64_t)v232;
    swift_storeEnumTagMultiPayload();
    sub_100157D84(v118, v231, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v119 = (uint64_t)v229;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v238[0] = v119;
    a2 = sub_1007241A0(v116, v103);
    uint64_t v122 = *(void *)(v119 + 16);
    BOOL v123 = (v121 & 1) == 0;
    uint64_t v124 = v122 + v123;
    if (__OFADD__(v122, v123)) {
      break;
    }
    char v125 = v121;
    if (*(void *)(v119 + 24) >= v124)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v81 = (void *)v238[0];
        if (v121) {
          goto LABEL_15;
        }
      }
      else
      {
        sub_100E7EDD8();
        uint64_t v81 = (void *)v238[0];
        if (v125) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      sub_100E663C4(v124, isUniquelyReferenced_nonNull_native);
      uint64_t v126 = sub_1007241A0(v116, v103);
      if ((v125 & 1) != (v127 & 1)) {
        goto LABEL_74;
      }
      a2 = v126;
      uint64_t v81 = (void *)v238[0];
      if (v125)
      {
LABEL_15:
        sub_100061690(v231, v81[7] + *(void *)(v214 + 72) * a2);
        goto LABEL_16;
      }
    }
    v81[(a2 >> 6) + 8] |= 1 << a2;
    uint64_t v128 = (uint64_t *)(v81[6] + 16 * a2);
    *uint64_t v128 = v116;
    v128[1] = v103;
    sub_100157D84(v231, v81[7] + *(void *)(v214 + 72) * a2, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v129 = v81[2];
    BOOL v130 = __OFADD__(v129, 1);
    uint64_t v131 = v129 + 1;
    if (v130) {
      goto LABEL_70;
    }
    v81[2] = v131;
    sub_1000361E0(v116, v103);
LABEL_16:
    swift_bridgeObjectRelease();
    sub_10001CFB8(v116, v103);
    sub_100157DEC(v222, type metadata accessor for MultipartAccessoryPairingInfo);
    sub_10001DAB4((uint64_t)v230, &qword_101639618);
    unint64_t v79 = v223;
    int64_t v80 = v224;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  swift_once();
LABEL_3:
  uint64_t v42 = type metadata accessor for Logger();
  sub_100010324(v42, (uint64_t)qword_10170F098);
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    unint64_t v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Missing C1 from accessory!", v45, 2u);
    swift_slowDealloc();
  }

  *(void *)a2 = 0xD00000000000001ALL;
  *(void *)(a2 + 8) = 0x80000001013F23F0;
  *(unsigned char *)(a2 + 40) = 9;
  *(unsigned char *)(a2 + 216) = 1;
}

double sub_10014CF08@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for MACAddress();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = *(void **)(v3 + 56);
  if (v11)
  {
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                    + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    unint64_t v13 = v12[1];
    if (v13 >> 60 == 15)
    {
      id v14 = v11;
LABEL_10:
      if (qword_101637320 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_100010324(v20, (uint64_t)qword_10170F098);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Invalid serial number.", v23, 2u);
        swift_slowDealloc();
      }

      goto LABEL_33;
    }
    uint64_t v72 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
    uint64_t v69 = v7;
    v74[0] = *v12;
    uint64_t v19 = v74[0];
    v74[1] = v13;
    unint64_t v70 = v11;
    sub_100037A38(v19, v13);
    sub_1000362FC();
    if (DataProtocol.isNull.getter())
    {
      sub_100037A24(v19, v13);
      goto LABEL_10;
    }
    uint64_t v24 = Data.trimmed.getter();
    unint64_t v26 = v25;
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v62 = v19;
    unint64_t v63 = v13;
    uint64_t v27 = type metadata accessor for Logger();
    uint64_t v28 = sub_100010324(v27, (uint64_t)qword_10170F098);
    sub_1000361E0(v24, v26);
    sub_1000361E0(v24, v26);
    uint64_t v29 = v24;
    uint64_t v68 = v28;
    uint64_t v30 = Logger.logObject.getter();
    int v31 = static os_log_type_t.debug.getter();
    uint64_t v71 = v30;
    BOOL v32 = os_log_type_enabled(v30, (os_log_type_t)v31);
    uint64_t v66 = v29;
    unint64_t v67 = v26;
    if (v32)
    {
      LODWORD(v61) = v31;
      unint64_t v33 = v26;
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      v74[0] = v60;
      *(_DWORD *)uint64_t v34 = 136315138;
      sub_1000361E0(v29, v33);
      static String.Encoding.utf8.getter();
      uint64_t v35 = String.init(data:encoding:)();
      if (v36)
      {
        unint64_t v37 = v36;
        uint64_t v59 = v35;
      }
      else
      {
        uint64_t v59 = Data.hexString.getter();
        unint64_t v37 = v38;
      }
      sub_10001CFB8(v29, v33);
      uint64_t v73 = sub_1008FA0F0(v59, v37, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v29, v33);
      sub_10001CFB8(v29, v33);
      uint64_t v39 = v71;
      _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v61, "Accessory serial number: %s.", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v29, v26);
      sub_10001CFB8(v29, v26);
    }
    uint64_t v40 = *(NSObject **)(*(void *)(a1 + v72)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
    swift_bridgeObjectRetain_n();
    unint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    BOOL v43 = os_log_type_enabled(v41, v42);
    uint64_t v71 = v40;
    uint64_t v64 = a1;
    if (v43)
    {
      os_log_type_t v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      v74[0] = v61;
      *(_DWORD *)os_log_type_t v44 = 136315138;
      uint64_t v60 = (uint64_t)(v44 + 4);
      type metadata accessor for MultipartAccessoryPairingInfo(0);
      sub_100061B8C();
      swift_bridgeObjectRetain();
      uint64_t v45 = Dictionary.description.getter();
      unint64_t v47 = v46;
      swift_bridgeObjectRelease();
      uint64_t v73 = sub_1008FA0F0(v45, v47, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "beaconGroupInfo: %s", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v48 = v70;
    uint64_t v49 = *(void *)&v70[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8];
    uint64_t v65 = v6;
    if (v49)
    {
      uint64_t v50 = *(void *)&v70[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName];
      uint64_t v51 = v49;
    }
    else
    {
      id v52 = [*(id *)&v70[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] name];
      if (!v52)
      {
        uint64_t v50 = 0;
        uint64_t v51 = 0xE000000000000000;
        goto LABEL_31;
      }
      unint64_t v53 = v52;
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v51 = v54;
    }
    swift_bridgeObjectRetain();
LABEL_31:
    sub_100A3AC74(v9);
    uint64_t v55 = *(void *)(v64 + v72);
    swift_retain();
    uint64_t v56 = v66;
    unint64_t v57 = v67;
    sub_100BF0A30(v66, v67, v50, v51, (uint64_t)v9, (uint64_t)v71, v55);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v9, v65);
    sub_100037A24(v62, v63);
    sub_10001CFB8(v56, v57);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_33;
  }
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170F098);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Missing peripheral to handle pairing lock error!", v18, 2u);
    swift_slowDealloc();
  }

LABEL_33:
  *(void *)a2 = 8;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(unsigned char *)(a2 + 40) = 11;
  *(unsigned char *)(a2 + 216) = 1;
  return result;
}

uint64_t sub_10014D8BC@<X0>(uint8_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v168 = a3;
  v156[1] = a4;
  uint64_t v167 = a2;
  uint64_t v165 = a5;
  uint64_t v6 = type metadata accessor for String.Encoding();
  uint64_t v160 = *(void *)(v6 - 8);
  unint64_t v161 = v6;
  __chkstk_darwin(v6);
  unint64_t v159 = (unint64_t)v156 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163BB20);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  unint64_t v157 = (unint64_t)v156 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v158 = (uint64_t)v156 - v12;
  __chkstk_darwin(v11);
  uint64_t v162 = (uint64_t)v156 - v13;
  uint64_t v173 = (int *)type metadata accessor for AirPodsLEPairingLockCheckResponse();
  uint64_t v14 = __chkstk_darwin(v173);
  uint64_t v16 = (char *)v156 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)v156 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  unint64_t v170 = (unint64_t)v156 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v166 = (unint64_t)v156 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v26 = (char *)v156 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)v156 - v28;
  __chkstk_darwin(v27);
  int v31 = (char *)v156 - v30;
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v163 = v16;
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = sub_100010324(v32, (uint64_t)qword_10170F098);
  sub_1001570F0((uint64_t)a1, (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
  sub_1001570F0((uint64_t)a1, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v171 = a1;
  uint64_t v172 = v33;
  if (v36)
  {
    uint64_t v164 = v26;
    uint64_t v37 = swift_slowAlloc();
    uint64_t v177 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 134218242;
    uint64_t v38 = *((void *)v31 + 8);
    unint64_t v39 = *((void *)v31 + 9);
    uint64_t v40 = 0;
    switch(v39 >> 62)
    {
      case 1uLL:
        BOOL v41 = __OFSUB__(HIDWORD(v38), v38);
        int v42 = HIDWORD(v38) - v38;
        if (v41)
        {
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
          JUMPOUT(0x10014EB88);
        }
        uint64_t v40 = v42;
LABEL_10:
        v156[0] = v19;
        sub_100157DEC((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
        v176[0] = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v37 + 12) = 2080;
        uint64_t v46 = Data.hexString.getter();
        v176[0] = sub_1008FA0F0(v46, v47, &v177);
        a1 = v171;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v19 = (char *)v156[0];
        sub_100157DEC((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "S3 count %ld: %s", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        unint64_t v26 = v164;
        break;
      case 2uLL:
        uint64_t v45 = v38 + 16;
        uint64_t v43 = *(void *)(v38 + 16);
        uint64_t v44 = *(void *)(v45 + 8);
        uint64_t v40 = v44 - v43;
        if (!__OFSUB__(v44, v43)) {
          goto LABEL_10;
        }
        goto LABEL_56;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v40 = BYTE6(v39);
        goto LABEL_10;
    }
  }
  else
  {
    sub_100157DEC((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
    sub_100157DEC((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
  }
  sub_1001570F0((uint64_t)a1, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
  uint64_t v48 = v166;
  sub_1001570F0((uint64_t)a1, v166, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
  uint64_t v49 = Logger.logObject.getter();
  int v50 = static os_log_type_t.debug.getter();
  BOOL v51 = os_log_type_enabled(v49, (os_log_type_t)v50);
  uint64_t v52 = v170;
  if (v51)
  {
    uint64_t v53 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    uint64_t v177 = v54;
    *(_DWORD *)uint64_t v53 = 134218242;
    uint64_t v55 = &v26[v173[11]];
    uint64_t v56 = *(void *)v55;
    unint64_t v57 = *((void *)v55 + 1);
    uint64_t v58 = 0;
    switch(v57 >> 62)
    {
      case 1uLL:
        BOOL v41 = __OFSUB__(HIDWORD(v56), v56);
        int v59 = HIDWORD(v56) - v56;
        if (v41) {
          goto LABEL_57;
        }
        uint64_t v58 = v59;
LABEL_18:
        LODWORD(v156[0]) = v50;
        uint64_t v164 = (char *)v54;
        sub_100157DEC((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
        v176[0] = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v53 + 12) = 2080;
        uint64_t v63 = Data.hexString.getter();
        v176[0] = sub_1008FA0F0(v63, v64, &v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v52 = v170;
        sub_100157DEC(v48, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
        _os_log_impl((void *)&_mh_execute_header, v49, v156[0], "baaLeaf count %ld: %s", (uint8_t *)v53, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        a1 = v171;
        break;
      case 2uLL:
        uint64_t v62 = v56 + 16;
        uint64_t v60 = *(void *)(v56 + 16);
        uint64_t v61 = *(void *)(v62 + 8);
        uint64_t v58 = v61 - v60;
        if (!__OFSUB__(v61, v60)) {
          goto LABEL_18;
        }
        goto LABEL_58;
      case 3uLL:
        goto LABEL_18;
      default:
        uint64_t v58 = BYTE6(v57);
        goto LABEL_18;
    }
  }
  else
  {
    sub_100157DEC((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
    sub_100157DEC(v48, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
  }
  sub_1001570F0((uint64_t)a1, v52, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
  sub_1001570F0((uint64_t)a1, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v65, v66))
  {
    uint64_t v67 = (uint64_t)v19;
    uint64_t v68 = swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    uint64_t v177 = v69;
    *(_DWORD *)uint64_t v68 = 134218242;
    unint64_t v70 = v173;
    uint64_t v71 = (uint64_t *)(v52 + v173[12]);
    uint64_t v72 = *v71;
    unint64_t v73 = v71[1];
    uint64_t v74 = 0;
    switch(v73 >> 62)
    {
      case 1uLL:
        BOOL v41 = __OFSUB__(HIDWORD(v72), v72);
        int v75 = HIDWORD(v72) - v72;
        if (v41) {
          goto LABEL_59;
        }
        uint64_t v74 = v75;
LABEL_26:
        unint64_t v170 = v69;
        sub_100157DEC(v52, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
        v176[0] = v74;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v68 + 12) = 2080;
        uint64_t v79 = Data.hexString.getter();
        v176[0] = sub_1008FA0F0(v79, v80, &v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        a1 = v171;
        sub_100157DEC(v67, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "baaIntermediate count %ld: %s", (uint8_t *)v68, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        break;
      case 2uLL:
        uint64_t v78 = v72 + 16;
        uint64_t v76 = *(void *)(v72 + 16);
        uint64_t v77 = *(void *)(v78 + 8);
        uint64_t v74 = v77 - v76;
        if (!__OFSUB__(v77, v76)) {
          goto LABEL_26;
        }
        goto LABEL_60;
      case 3uLL:
        goto LABEL_26;
      default:
        uint64_t v74 = BYTE6(v73);
        goto LABEL_26;
    }
  }
  else
  {
    sub_100157DEC(v52, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
    sub_100157DEC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);

    unint64_t v70 = v173;
  }
  uint64_t v81 = v169;
  if (*(unsigned char *)(v169 + 200) != 1)
  {
    if (*(void *)&a1[v70[10] + 8]
      && (unint64_t v117 = v159,
          static String.Encoding.utf8.getter(),
          uint64_t v118 = String.data(using:allowLossyConversion:)(),
          unint64_t v120 = v119,
          (*(void (**)(unint64_t, unint64_t))(v160 + 8))(v117, v161),
          unint64_t v166 = v120,
          v120 >> 60 != 15))
    {
      uint64_t v164 = (char *)v118;
      uint64_t v134 = *(void *)(v81 + 64);
      uint64_t v135 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
      uint64_t v136 = *(void *)(v134 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
      uint64_t v137 = (char *)(v136 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId);
      if ((*(unsigned char *)(v136 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId + 1) & 1) == 0)
      {
        uint64_t v138 = (uint64_t *)(v136 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
        unint64_t v139 = v138[1];
        if (v139 >> 60 != 15)
        {
          char v140 = *v137;
          uint64_t v177 = *v138;
          uint64_t v141 = v177;
          unint64_t v178 = v139;
          sub_1000361E0(v177, v139);
          sub_1000362FC();
          if ((DataProtocol.isNull.getter() & 1) == 0)
          {
            uint64_t v149 = Data.trimmed.getter();
            unint64_t v151 = v150;
            uint64_t v84 = v158;
            sub_100AE800C(v158);
            uint64_t v152 = v157;
            sub_10001D074(v84, v157, &qword_10163BB20);
            uint64_t v153 = type metadata accessor for OwnedBeaconGroup(0);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v153 - 8) + 48))(v152, 1, v153) == 1)
            {
              sub_10001DAB4(v152, &qword_10163BB20);
            }
            else
            {
              __int16 v154 = sub_1004CF630(v149, v151);
              sub_100157DEC(v152, type metadata accessor for OwnedBeaconGroup);
              if ((v154 & 0x100) == 0) {
                char v140 = v154;
              }
            }
            a1 = v171;
            uint64_t v169 = sub_10114503C(v84, v140);
            unint64_t v170 = v155;
            sub_10001CFB8(v149, v151);
            sub_100037A24(v141, v139);
            unint64_t v70 = v173;
            goto LABEL_29;
          }
          sub_100037A24(v141, v139);
        }
      }
      swift_retain_n();
      char v121 = Logger.logObject.getter();
      os_log_type_t v142 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v121, v142))
      {
        uint64_t v143 = swift_slowAlloc();
        v176[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v143 = 141558275;
        uint64_t v177 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v143 + 12) = 2081;
        uint64_t v144 = (uint64_t *)(*(void *)(v134 + v135)
                         + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
        unint64_t v145 = v144[1];
        uint64_t v177 = *v144;
        unint64_t v178 = v145;
        sub_100037A38(v177, v145);
        sub_10000588C(&qword_101669360);
        uint64_t v146 = String.init<A>(describing:)();
        uint64_t v177 = sub_1008FA0F0(v146, v147, v176);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v121, v142, "Invalid serial number %{private,mask.hash}s!", (uint8_t *)v143, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_100037A24((uint64_t)v164, v166);
LABEL_48:
        sub_1001563E8((uint64_t)v176);
        goto LABEL_49;
      }
      swift_release_n();
      sub_100037A24((uint64_t)v164, v166);
    }
    else
    {
      char v121 = Logger.logObject.getter();
      os_log_type_t v122 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v121, v122))
      {
        BOOL v123 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v123 = 0;
        _os_log_impl((void *)&_mh_execute_header, v121, v122, "Unable to decode masked apple ID", v123, 2u);
        swift_slowDealloc();
      }
    }

    goto LABEL_48;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v82 = __DataStorage.init(length:)();
  uint64_t v177 = 0x3C00000000;
  unint64_t v178 = v82;
  sub_10072AF34((int *)&v177, 0);
  uint64_t v164 = (char *)v177;
  unint64_t v166 = v178 | 0x4000000000000000;
  uint64_t v83 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v84 = v162;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v162, 1, 1, v83);
  uint64_t v169 = sub_10114503C(v84, 255);
  unint64_t v170 = v85;
LABEL_29:
  sub_10001DAB4(v84, &qword_10163BB20);
  uint64_t v87 = *((void *)a1 + 6);
  unint64_t v161 = *((void *)a1 + 7);
  unint64_t v86 = v161;
  uint64_t v162 = v87;
  uint64_t v88 = *((void *)a1 + 8);
  unint64_t v159 = *((void *)a1 + 9);
  unint64_t v89 = v159;
  uint64_t v160 = v88;
  uint64_t v90 = v70[12];
  uint64_t v91 = (uint64_t *)&a1[v70[11]];
  unint64_t v93 = v91[1];
  uint64_t v158 = *v91;
  uint64_t v92 = v158;
  uint64_t v94 = (uint64_t *)&a1[v90];
  uint64_t v95 = v70;
  uint64_t v96 = *v94;
  unint64_t v97 = v94[1];
  uint64_t v177 = *(void *)&a1[v95[14]];
  sub_1000361E0(v167, v168);
  sub_1000361E0(v87, v86);
  uint64_t v98 = (uint64_t)v164;
  uint64_t v99 = v166;
  sub_1000361E0((uint64_t)v164, v166);
  sub_1000361E0(v88, v89);
  sub_1000361E0(v92, v93);
  sub_1000361E0(v96, v97);
  unint64_t v157 = sub_100061D24();
  uint64_t v100 = FixedWidthInteger.data.getter();
  unint64_t v101 = v99;
  unint64_t v103 = v102;
  uint64_t v105 = v169;
  unint64_t v104 = v170;
  sub_1000361E0(v169, v170);
  sub_100134CC8(v167, v168, v162, v161, v98, v101, v160, v159, v175, v158, v93, v96, v97, v100, v103, v105, v104);
  uint64_t v106 = (uint64_t)v163;
  sub_1001570F0((uint64_t)v171, (uint64_t)v163, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
  uint64_t v107 = Logger.logObject.getter();
  os_log_type_t v108 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v107, v108))
  {
    uint64_t v109 = (uint8_t *)swift_slowAlloc();
    uint64_t v110 = swift_slowAlloc();
    *(_DWORD *)uint64_t v109 = 136446210;
    uint64_t v177 = v110;
    uint64_t v171 = v109 + 4;
    v176[0] = *(void *)(v106 + v173[14]);
    uint64_t v111 = FixedWidthInteger.data.getter();
    unint64_t v113 = v112;
    uint64_t v114 = Data.hexString.getter();
    unint64_t v116 = v115;
    sub_10001CFB8(v111, v113);
    v176[0] = sub_1008FA0F0(v114, v116, &v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100157DEC((uint64_t)v163, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
    _os_log_impl((void *)&_mh_execute_header, v107, v108, "pairingEpoch: %{public}s", v109, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100157DEC(v106, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckResponse);
  }

  uint64_t v125 = v169;
  unint64_t v124 = v170;
  sub_1000361E0(v169, v170);
  sub_1000361E0(v125, v124);
  uint64_t v126 = Logger.logObject.getter();
  os_log_type_t v127 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v126, v127))
  {
    uint64_t v128 = (uint8_t *)swift_slowAlloc();
    uint64_t v177 = swift_slowAlloc();
    *(_DWORD *)uint64_t v128 = 136446210;
    uint64_t v129 = Data.hexString.getter();
    unint64_t v170 = v124;
    v176[0] = sub_1008FA0F0(v129, v130, &v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v131 = v170;
    sub_10001CFB8(v125, v170);
    sub_10001CFB8(v125, v131);
    _os_log_impl((void *)&_mh_execute_header, v126, v127, "companionPairingEpochs: %{public}s", v128, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v132 = v125;
    unint64_t v133 = v131;
  }
  else
  {

    sub_10001CFB8(v125, v124);
    sub_10001CFB8(v125, v124);
    uint64_t v132 = v125;
    unint64_t v133 = v124;
  }
  sub_10001CFB8(v132, v133);
  sub_10001CFB8((uint64_t)v164, v166);
  v174[8] = v175[8];
  v174[9] = v175[9];
  v174[10] = v175[10];
  v174[11] = v175[11];
  v174[4] = v175[4];
  v174[5] = v175[5];
  v174[6] = v175[6];
  v174[7] = v175[7];
  v174[0] = v175[0];
  v174[1] = v175[1];
  v174[2] = v175[2];
  v174[3] = v175[3];
  sub_10015641C((uint64_t)v174);
  sub_1001559B0((uint64_t)v174, (uint64_t)v176);
  SharingCircleWildAdvertisementKey.init(key:)(v176);
LABEL_49:
  sub_10001D608((uint64_t)v176, (uint64_t)&v177, &qword_10163C670);
  return sub_10001D608((uint64_t)&v177, v165, &qword_10163C670);
}

uint64_t sub_10014EBB8@<X0>(long long *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  os_log_type_t v122 = (uint64_t *)a3;
  uint64_t v119 = type metadata accessor for StandaloneBeacon();
  __chkstk_darwin(v119);
  unint64_t v120 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MACAddress();
  uint64_t v118 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v118 + 64);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v103 - v12;
  uint64_t v14 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v117);
  char v121 = (void (*)(char *, unint64_t, uint64_t))((char *)&v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v18 - 8);
  uint64_t v19 = *(void **)(v4 + 56);
  if (v19)
  {
    unint64_t v116 = v16;
    uint64_t v20 = *(NSObject **)(v4 + 64);
    uint64_t v21 = (uint64_t *)(*(char **)((char *)&v20->isa
                               + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                    + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    unint64_t v22 = v21[1];
    if (v22 >> 60 == 15)
    {
      id v23 = v19;
LABEL_13:
      uint64_t v34 = v122;
      if (qword_101637320 != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      sub_100010324(v35, (uint64_t)qword_10170F098);
      BOOL v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Invalid serial number.", v38, 2u);
        swift_slowDealloc();
      }

      sub_100155FAC();
      uint64_t v39 = swift_allocError();
      *uint64_t v40 = 1;

      uint64_t *v34 = v39;
      sub_10000588C(&qword_10163C658);
      return swift_storeEnumTagMultiPayload();
    }
    uint64_t v113 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
    os_log_t v114 = v20;
    unint64_t v115 = a2;
    unint64_t v112 = a1;
    v123[0] = *v21;
    uint64_t v33 = v123[0];
    v123[1] = v22;
    uint64_t v111 = v19;
    sub_100037A38(v33, v22);
    sub_1000362FC();
    if (DataProtocol.isNull.getter())
    {
      sub_100037A24(v33, v22);
      goto LABEL_13;
    }
    uint64_t v110 = v33;
    unint64_t v107 = v22;
    uint64_t v41 = Data.trimmed.getter();
    unint64_t v43 = v42;
    if (qword_101637310 != -1) {
      swift_once();
    }
    os_log_type_t v108 = (uint8_t *)type metadata accessor for Logger();
    sub_100010324((uint64_t)v108, (uint64_t)qword_10170F068);
    sub_1000361E0(v41, v43);
    sub_1000361E0(v41, v43);
    uint64_t v44 = Logger.logObject.getter();
    LODWORD(v105) = static os_log_type_t.default.getter();
    BOOL v45 = os_log_type_enabled(v44, (os_log_type_t)v105);
    unint64_t v46 = v115;
    if (v45)
    {
      os_log_t v104 = v44;
      uint64_t v47 = swift_slowAlloc();
      uint64_t v103 = swift_slowAlloc();
      v123[0] = v103;
      *(_DWORD *)uint64_t v47 = 141558275;
      uint64_t v124 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v47 + 12) = 2081;
      static String.Encoding.utf8.getter();
      uint64_t v48 = String.init(data:encoding:)();
      if (!v49) {
        uint64_t v48 = Data.hexString.getter();
      }
      uint64_t v124 = sub_1008FA0F0(v48, v49, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v41, v43);
      sub_10001CFB8(v41, v43);
      os_log_t v50 = v104;
      _os_log_impl((void *)&_mh_execute_header, v104, (os_log_type_t)v105, "Creating beacon for %{private,mask.hash}s", (uint8_t *)v47, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v46 = v115;
    }
    else
    {
      sub_10001CFB8(v41, v43);
      sub_10001CFB8(v41, v43);
    }
    char v51 = *(unsigned char *)(v4 + 200);
    unint64_t v109 = v43;
    uint64_t v106 = v41;
    if (v51)
    {
      if (qword_101637320 != -1) {
        swift_once();
      }
      uint64_t v52 = sub_100010324((uint64_t)v108, (uint64_t)qword_10170F098);
      uint64_t v53 = v118;
      char v121 = *(void (**)(char *, unint64_t, uint64_t))(v118 + 16);
      v121(v13, v46, v8);
      uint64_t v117 = v52;
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.default.getter();
      LODWORD(v116) = v55;
      if (os_log_type_enabled(v54, v55))
      {
        os_log_t v114 = v54;
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v113 = swift_slowAlloc();
        v123[0] = v113;
        os_log_type_t v108 = v56;
        *(_DWORD *)uint64_t v56 = 136446210;
        uint64_t v105 = v56 + 4;
        sub_100158020((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
        uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v124 = sub_1008FA0F0(v57, v58, v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v8);
        uint64_t v54 = v114;
        _os_log_impl((void *)&_mh_execute_header, v114, (os_log_type_t)v116, "Creating standalone beacon. classicMACAddress %{public}s", v108, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v8);
      }

      uint64_t v68 = v53;
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v69 = __DataStorage.init(length:)() | 0x4000000000000000;
      v121(v11, v46, v8);
      unint64_t v70 = (*(unsigned __int8 *)(v53 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      unint64_t v71 = (v9 + v70 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v72 = swift_allocObject();
      unint64_t v73 = v112;
      long long v74 = *v112;
      *(_OWORD *)(v72 + 40) = v112[1];
      long long v75 = v73[3];
      *(_OWORD *)(v72 + 56) = v73[2];
      *(_OWORD *)(v72 + 72) = v75;
      *(_OWORD *)(v72 + 88) = v73[4];
      *(void *)(v72 + 16) = v4;
      *(_OWORD *)(v72 + 24) = v74;
      uint64_t v76 = v68;
      uint64_t v77 = v111;
      *(void *)(v72 + 104) = v111;
      (*(void (**)(unint64_t, char *, uint64_t))(v76 + 32))(v72 + v70, v11, v8);
      uint64_t v78 = (void *)(v72 + v71);
      void *v78 = 0x6000000000;
      v78[1] = v69;
      id v79 = v77;
      swift_retain();
      sub_100157EEC((uint64_t *)v73, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
      swift_retain();
      uint64_t v80 = (uint64_t)v120;
      unsafeFromAsyncTask<A>(_:)();
      sub_100037A24(v110, v107);
      sub_10001CFB8(v106, v109);
      swift_release();

      swift_release();
      sub_100157D84(v80, (uint64_t)v122, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult();
      swift_storeEnumTagMultiPayload();
      sub_10000588C(&qword_10163C658);
      return swift_storeEnumTagMultiPayload();
    }
    uint64_t v59 = *(void *)(*(char **)((char *)&v114->isa + v113)
                    + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
    uint64_t v60 = qword_101637320;
    swift_bridgeObjectRetain();
    if (v60 != -1) {
      swift_once();
    }
    sub_100010324((uint64_t)v108, (uint64_t)qword_10170F098);
    swift_bridgeObjectRetain_n();
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = swift_slowAlloc();
      v123[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = 136315394;
      type metadata accessor for MultipartAccessoryPairingInfo(0);
      sub_100061B8C();
      swift_bridgeObjectRetain();
      uint64_t v64 = Dictionary.description.getter();
      unint64_t v66 = v65;
      swift_bridgeObjectRelease();
      uint64_t v124 = sub_1008FA0F0(v64, v66, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 12) = 2048;
      uint64_t v67 = *(void *)(v59 + 16);
      swift_bridgeObjectRelease();
      uint64_t v124 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "allSerialNumbersAndPartIds: %s. Count %ld", (uint8_t *)v63, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v81 = v111;
    uint64_t v82 = (uint64_t)v121;
    uint64_t v83 = *(void *)(v4 + 24);
    uint64_t v84 = *(uint64_t *)((char *)&v114->isa + v113);
    uint64_t v85 = *(void *)&v111[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8];
    if (v85)
    {
      uint64_t v86 = *(void *)&v111[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName];
      swift_retain();
      uint64_t v87 = v85;
      uint64_t v88 = v110;
    }
    else
    {
      unint64_t v89 = *(void **)&v111[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
      swift_retain();
      id v90 = [v89 name];
      uint64_t v88 = v110;
      if (!v90)
      {
        uint64_t v86 = 0;
        uint64_t v87 = 0xE000000000000000;
        goto LABEL_42;
      }
      uint64_t v91 = v90;
      uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v87 = v92;
    }
    swift_bridgeObjectRetain();
LABEL_42:
    sub_100BF17A8(v82, (uint64_t)v116, v112, v84, v86, v87, v115, v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v93 = (void **)(*(char **)((char *)&v114->isa
                             + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_locationMonitor)
                  + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
    swift_beginAccess();
    uint64_t v94 = *v93;
    if (*v93)
    {
      uint64_t v95 = v82 + *(int *)(v117 + 20);
      uint64_t v96 = type metadata accessor for Transaction();
      __chkstk_darwin(v96);
      *((unsigned char *)&v103 - 32) = 0;
      *(&v103 - 3) = (uint64_t)v94;
      *(&v103 - 2) = v95;
      *(&v103 - 1) = v83;
      id v97 = v94;
      static Transaction.named<A>(_:with:)();
      sub_100037A24(v88, v107);
      sub_10001CFB8(v106, v109);
    }
    else
    {
      uint64_t v98 = Logger.logObject.getter();
      os_log_type_t v99 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v98, v99))
      {
        uint64_t v100 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v100 = 0;
        _os_log_impl((void *)&_mh_execute_header, v98, v99, "Unable to retrieve current location from CL for pairing", v100, 2u);
        swift_slowDealloc();

        sub_10001CFB8(v106, v109);
        sub_100037A24(v88, v107);
      }
      else
      {
        sub_100037A24(v88, v107);
        sub_10001CFB8(v106, v109);
      }
    }
    uint64_t v101 = (uint64_t)v122;
    uint64_t v102 = v101 + *(int *)(sub_10000588C(&qword_101639B90) + 48);
    sub_100157D84((uint64_t)v116, v101, type metadata accessor for OwnedBeaconGroup);
    sub_100157D84(v82, v102, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult();
    swift_storeEnumTagMultiPayload();
    sub_10000588C(&qword_10163C658);
    return swift_storeEnumTagMultiPayload();
  }
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100010324(v24, (uint64_t)qword_10170F098);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v28 = v122;
  if (v27)
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Missing peripheral to create beacon!", v29, 2u);
    swift_slowDealloc();
  }

  sub_100155FAC();
  uint64_t v30 = swift_allocError();
  *int v31 = 1;
  uint64_t *v28 = v30;
  sub_10000588C(&qword_10163C658);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10014FEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  uint64_t v8 = type metadata accessor for MACAddress();
  v7[9] = v8;
  v7[10] = *(void *)(v8 - 8);
  v7[11] = swift_task_alloc();
  return _swift_task_switch(sub_10014FFC8, 0, 0);
}

uint64_t sub_10014FFC8()
{
  uint64_t v1 = (char *)v0[11];
  uint64_t v2 = *(void *)(*(void *)(v0[3] + 64) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  v0[12] = v2;
  swift_retain();
  sub_100A3AC74(v1);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[13] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001500B4;
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[4];
  uint64_t v9 = v0[2];
  return sub_100BF5520(v9, v8, v2, v4, v7, v5, v6);
}

uint64_t sub_1001500B4()
{
  uint64_t v2 = *(void *)(*v1 + 88);
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(*v1 + 72);
  uint64_t v5 = *v1;
  *(void *)(v5 + 112) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  if (v0)
  {
    return _swift_task_switch(sub_100150278, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_100150278()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1001502DC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v81 = a3;
  uint64_t v5 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v5 - 8);
  uint64_t v74 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v73 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v69 - v12;
  __chkstk_darwin(v11);
  uint64_t v72 = (uint64_t)&v69 - v14;
  uint64_t v15 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v15 - 8);
  uint64_t v76 = (uint64_t)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v77 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  long long v75 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v19 - 8);
  if (qword_101637320 != -1) {
    swift_once();
  }
  unint64_t v71 = v13;
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = sub_100010324(v20, (uint64_t)qword_10170F098);
  sub_1000361E0(a1, a2);
  sub_1000361E0(a1, a2);
  uint64_t v78 = v21;
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v80 = v7;
  if (v24)
  {
    unint64_t v70 = v10;
    uint64_t v79 = v17;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 141558275;
    uint64_t v82 = 1752392040;
    uint64_t v83 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 12) = 2081;
    sub_1000361E0(a1, a2);
    static String.Encoding.utf8.getter();
    uint64_t v27 = String.init(data:encoding:)();
    if (!v28) {
      uint64_t v27 = Data.hexString.getter();
    }
    uint64_t v29 = v27;
    unint64_t v30 = v28;
    sub_10001CFB8(a1, a2);
    uint64_t v82 = sub_1008FA0F0(v29, v30, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a1, a2);
    sub_10001CFB8(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Clean up pending pairing for %{private,mask.hash}s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v17 = v79;
    uint64_t v7 = v80;
    uint64_t v10 = v70;
  }
  else
  {
    sub_10001CFB8(a1, a2);
    sub_10001CFB8(a1, a2);
  }
  uint64_t v31 = swift_allocBox();
  uint64_t v32 = v81;
  sub_1001570F0(v81, v33, type metadata accessor for OwnedBeaconGroup);
  if (sub_1004D0AD8(a1, a2))
  {
    uint64_t v34 = v32;
    uint64_t v35 = dispatch_group_create();
    dispatch_group_enter(v35);
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = v35;
    swift_retain();
    os_log_type_t v37 = v35;
    sub_101072EAC(v34, 0, (void (*)(uint64_t))sub_1001560D8, v31, (void (*)(uint64_t (*)(uint64_t)))sub_100156118, (void (*)(uint64_t (*)(uint64_t)))v36);
    swift_release();
    swift_release();
    OS_dispatch_group.wait()();
    uint64_t v38 = v76;
    sub_1004D1078(a1, a2, v76);
    uint64_t v39 = v77;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v38, 1, v17) == 1)
    {

      uint64_t v40 = &qword_101638CF0;
LABEL_16:
      sub_10001DAB4(v38, v40);
LABEL_17:
      swift_release();
      return;
    }
    os_log_t v50 = v37;
    uint64_t v51 = (uint64_t)v75;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v75, v38, v17);
    uint64_t v38 = v74;
    sub_100AE75E0(v51, v74);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v38, 1, v7) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v51, v17);

      uint64_t v40 = &qword_10163BB20;
      goto LABEL_16;
    }
    uint64_t v52 = v72;
    sub_100157D84(v38, v72, type metadata accessor for OwnedBeaconGroup);
    uint64_t v53 = sub_100E09380(v52);
    if (v53)
    {
      uint64_t v54 = v53;
      uint64_t v55 = (uint64_t)v71;
      sub_1001570F0(v52, (uint64_t)v71, type metadata accessor for OwnedBeaconGroup);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v56 = Logger.logObject.getter();
      uint64_t v57 = v52;
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v58))
      {
        uint64_t v59 = swift_slowAlloc();
        uint64_t v60 = swift_slowAlloc();
        uint64_t v78 = v60;
        *(_DWORD *)uint64_t v59 = 141558531;
        uint64_t v82 = 1752392040;
        uint64_t v83 = v60;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v59 + 12) = 2081;
        uint64_t v81 = v31;
        sub_100158020((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v82 = sub_1008FA0F0(v61, v62, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100157DEC(v55, type metadata accessor for OwnedBeaconGroup);
        *(_WORD *)(v59 + 22) = 2082;
        uint64_t v82 = v54;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v79 = v17;
        uint64_t v63 = String.init<A>(describing:)();
        uint64_t v82 = sub_1008FA0F0(v63, v64, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v56, v58, "\"Failed to delete pending record %{private,mask.hash}s\ndue to %{public}s", (uint8_t *)v59, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        sub_100157DEC(v72, type metadata accessor for OwnedBeaconGroup);
        (*(void (**)(char *, uint64_t))(v77 + 8))(v75, v79);
        swift_release();
        return;
      }

      swift_errorRelease();
      swift_errorRelease();
      sub_100157DEC(v55, type metadata accessor for OwnedBeaconGroup);
      swift_errorRelease();

      uint64_t v68 = v57;
    }
    else
    {

      uint64_t v68 = v52;
    }
    sub_100157DEC(v68, type metadata accessor for OwnedBeaconGroup);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v75, v17);
    goto LABEL_17;
  }
  sub_1001570F0(v32, (uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
  sub_1000361E0(a1, a2);
  sub_1000361E0(a1, a2);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v81 = v31;
    uint64_t v79 = v17;
    uint64_t v43 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    uint64_t v82 = 1752392040;
    uint64_t v83 = v44;
    *(_DWORD *)uint64_t v43 = 141558787;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 12) = 2081;
    sub_1000361E0(a1, a2);
    static String.Encoding.utf8.getter();
    uint64_t v45 = String.init(data:encoding:)();
    if (v46)
    {
      uint64_t v47 = v45;
      unint64_t v48 = v46;
      uint64_t v49 = (uint64_t)v10;
    }
    else
    {
      uint64_t v49 = (uint64_t)v10;
      uint64_t v47 = Data.hexString.getter();
      unint64_t v48 = v65;
    }
    sub_10001CFB8(a1, a2);
    uint64_t v82 = sub_1008FA0F0(v47, v48, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a1, a2);
    sub_10001CFB8(a1, a2);
    *(_WORD *)(v43 + 22) = 2160;
    uint64_t v82 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 32) = 2081;
    sub_100158020((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v82 = sub_1008FA0F0(v66, v67, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100157DEC(v49, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Unable to unpair %{private,mask.hash}s from %{private,mask.hash}s!", (uint8_t *)v43, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(a1, a2);
    sub_10001CFB8(a1, a2);
    sub_100157DEC((uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
  }
  swift_release();
}

uint64_t sub_100150F24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v3 = swift_projectBox();
  swift_beginAccess();
  uint64_t v4 = *(int *)(v2 + 40);
  uint64_t v5 = *(void *)(v3 + v4);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + v4) = v5;
  return result;
}

void sub_100150FA0(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = sub_10000588C(&qword_10163C650);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v12, &qword_10163C650);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = *v12;
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170F098);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v31 = v13;
      uint64_t v32 = v18;
      *(_DWORD *)uint64_t v17 = 136446210;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v19 = String.init<A>(describing:)();
      uint64_t v31 = sub_1008FA0F0(v19, v20, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unable to modify existing group. Error %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    sub_100157D84((uint64_t)v12, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    uint64_t v22 = sub_100010324(v21, (uint64_t)qword_10170F098);
    sub_1001570F0((uint64_t)v9, (uint64_t)v7, type metadata accessor for OwnedBeaconGroup);
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      unint64_t v30 = a2;
      *(_DWORD *)uint64_t v25 = 141558275;
      uint64_t v31 = 1752392040;
      uint64_t v32 = v26;
      uint64_t v29 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100158020((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v31 = sub_1008FA0F0(v27, v28, &v32);
      uint64_t v22 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100157DEC((uint64_t)v7, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Successfully modified existing group %{private,mask.hash}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      a2 = v30;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100157DEC((uint64_t)v7, type metadata accessor for OwnedBeaconGroup);
    }

    sub_1004CCF70(v22);
    sub_100157DEC((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_1001514DC(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v3 + 16);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    if (qword_101637320 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170F098);
  sub_1000361E0(a1, a2);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134217984;
    os_log_type_t v16 = v15;
    uint64_t v17 = 0;
    switch(a2 >> 62)
    {
      case 1uLL:
        LODWORD(v17) = HIDWORD(a1) - a1;
        if (__OFSUB__(HIDWORD(a1), a1))
        {
          __break(1u);
LABEL_15:
          __break(1u);
          JUMPOUT(0x1001517E0);
        }
        uint64_t v17 = (int)v17;
LABEL_10:
        v24[1] = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_10001CFB8(a1, a2);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "didNotify data length %ld", v16, 0xCu);
        swift_slowDealloc();
        break;
      case 2uLL:
        uint64_t v19 = *(void *)(a1 + 16);
        uint64_t v18 = *(void *)(a1 + 24);
        BOOL v20 = __OFSUB__(v18, v19);
        uint64_t v17 = v18 - v19;
        if (!v20) {
          goto LABEL_10;
        }
        goto LABEL_15;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v17 = BYTE6(a2);
        goto LABEL_10;
    }
  }
  else
  {
    sub_10001CFB8(a1, a2);
  }

  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = (void *)swift_allocObject();
  long long v22[2] = v21;
  v22[3] = a1;
  uint64_t v22[4] = a2;
  sub_10000588C(&qword_10163C628);
  swift_allocObject();
  sub_1000361E0(a1, a2);
  return Future.init(_:)();
}

uint64_t sub_1001517F0(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v103 = a2;
  os_log_t v104 = a1;
  uint64_t v7 = type metadata accessor for BinaryDecodingError();
  uint64_t v98 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  os_log_type_t v99 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BinaryDecoder();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10163C630);
  __chkstk_darwin(v13 - 8);
  uint64_t v100 = (void (*)(uint8_t *, uint64_t))((char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for Bit();
  uint64_t v102 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v95 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v101 = (uint8_t *)&v87 - v18;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    uint64_t v109 = 0;
    memset(v108, 0, sizeof(v108));
    char v110 = 11;
    char v111 = 1;
    v104(v108);
    return sub_10001DAB4((uint64_t)v108, &qword_10163C638);
  }
  uint64_t v20 = Strong;
  uint64_t v90 = v10;
  uint64_t v21 = *(void *)(Strong + 160);
  unint64_t v22 = *(void *)(v20 + 168);
  if (v22 >> 60 == 15) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v21;
  }
  unint64_t v24 = 0xC000000000000000;
  if (v22 >> 60 != 15) {
    unint64_t v24 = *(void *)(v20 + 168);
  }
  uint64_t v112 = v23;
  unint64_t v113 = v24;
  sub_100037A38(v21, v22);
  sub_1000361E0(a4, a5);
  uint64_t v97 = a4;
  sub_100EFD6B8(1, a4, a5, v108);
  long long v25 = *(_OWORD *)v108;
  Data.append(_:)();
  sub_10001CFB8(v25, *((unint64_t *)&v25 + 1));
  uint64_t v26 = v112;
  unint64_t v27 = v113;
  uint64_t v28 = *(void *)(v20 + 160);
  unint64_t v29 = *(void *)(v20 + 168);
  *(void *)(v20 + 160) = v112;
  *(void *)(v20 + 168) = v27;
  sub_1000361E0(v26, v27);
  sub_100037A24(v28, v29);
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  uint64_t v96 = sub_100010324(v30, (uint64_t)qword_10170F098);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  int v33 = v32;
  BOOL v34 = os_log_type_enabled(v31, v32);
  uint64_t v91 = v9;
  uint64_t v92 = v12;
  if (v34)
  {
    uint64_t v94 = v15;
    uint64_t v35 = swift_slowAlloc();
    int v88 = v33;
    uint64_t v36 = (uint8_t *)v35;
    uint64_t v89 = swift_slowAlloc();
    v108[0] = v89;
    unint64_t v93 = a5;
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v87 = v36 + 4;
    swift_beginAccess();
    uint64_t v37 = v7;
    uint64_t v38 = v20;
    uint64_t v40 = v112;
    unint64_t v39 = v113;
    sub_1000361E0(v112, v113);
    uint64_t v41 = Data.description.getter();
    unint64_t v43 = v42;
    uint64_t v44 = v40;
    uint64_t v20 = v38;
    uint64_t v7 = v37;
    unint64_t v45 = v39;
    uint64_t v15 = v94;
    sub_10001CFB8(v44, v45);
    v107[0] = sub_1008FA0F0(v41, v43, v108);
    a5 = v93;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v88, "localReadBuffer %s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v46 = v102;
  uint64_t v47 = v97;
  sub_1000361E0(v97, a5);
  __int16 v48 = sub_10115B26C(v47, a5);
  sub_10001CFB8(v47, a5);
  uint64_t v50 = (uint64_t)v100;
  uint64_t v49 = v101;
  if ((v48 & 0x100) != 0) {
    goto LABEL_18;
  }
  LOBYTE(v108[0]) = v48;
  sub_10006145C();
  uint64_t v51 = FixedWidthInteger.bits()();
  if (*(void *)(v51 + 16))
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v46 + 16))(v50, v51 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80)), v15);
    uint64_t v52 = 0;
  }
  else
  {
    uint64_t v52 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v50, v52, 1, v15);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v50, 1, v15) == 1)
  {
    sub_10001DAB4(v50, &qword_10163C630);
LABEL_18:
    sub_100155FAC();
    uint64_t v53 = swift_allocError();
    *uint64_t v54 = 2;
    swift_willThrow();
    goto LABEL_19;
  }
  uint64_t v89 = v7;
  (*(void (**)(uint8_t *, uint64_t, uint64_t))(v46 + 32))(v49, v50, v15);
  uint64_t v60 = v95;
  (*(void (**)(char *, void, uint64_t))(v46 + 104))(v95, enum case for Bit.one(_:), v15);
  sub_100158020((unint64_t *)&qword_10163B220, (void (*)(uint64_t))&type metadata accessor for Bit);
  uint64_t v61 = v46;
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v62 = LOBYTE(v108[0]);
  int v63 = LOBYTE(v107[0]);
  uint64_t v66 = *(char **)(v61 + 8);
  uint64_t v64 = v61 + 8;
  unint64_t v65 = v66;
  ((void (*)(char *, uint64_t))v66)(v60, v15);
  uint64_t v67 = v15;
  if (v62 == v63)
  {
    uint64_t v100 = (void (*)(uint8_t *, uint64_t))v65;
    uint64_t v102 = v64;
    unint64_t v93 = a5;
    uint64_t v94 = v15;
    uint64_t v68 = v92;
    BinaryDecoder.init()();
    swift_beginAccess();
    uint64_t v70 = v112;
    unint64_t v69 = v113;
    sub_1000361E0(v112, v113);
    unint64_t v71 = sub_100156000();
    BinaryDecoder.decode<A>(_:from:)();
    sub_10001CFB8(v70, v69);
    sub_1001559B0((uint64_t)v108, (uint64_t)v107);
    uint64_t v84 = *(void *)(v20 + 160);
    unint64_t v85 = *(void *)(v20 + 168);
    *(_OWORD *)(v20 + 160) = xmmword_101347BB0;
    sub_100037A24(v84, v85);
    v105[3] = &type metadata for AirPodsLEPairingCommand;
    v105[4] = v71;
    v105[5] = sub_100155EF0();
    v105[0] = swift_allocObject();
    sub_1001559B0((uint64_t)v107, v105[0] + 16);
    char v106 = 0;
    sub_100156058((uint64_t)v107, (void (*)(void))sub_1000361E0, (void (*)(void))sub_100037A38);
    v104(v105);
    swift_release();
    sub_100156058((uint64_t)v107, (void (*)(void))sub_10001CFB8, (void (*)(void))sub_100037A24);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v68, v91);
    v100(v101, v94);
    sub_10001DAB4((uint64_t)v105, &qword_10163C638);
    return sub_10001CFB8(v112, v113);
  }
  sub_100158020((unint64_t *)&qword_101639630, (void (*)(uint64_t))&type metadata accessor for BinaryDecodingError);
  uint64_t v82 = v89;
  uint64_t v53 = swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(v98 + 104))(v83, enum case for BinaryDecodingError.insufficientData(_:), v82);
  swift_willThrow();
  ((void (*)(uint8_t *, uint64_t))v65)(v101, v67);
  uint64_t v7 = v82;
LABEL_19:
  sub_10001CFB8(v112, v113);
  v108[0] = v53;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v55 = v99;
  if (!swift_dynamicCast())
  {
LABEL_26:
    swift_errorRelease();
    sub_1000361E0(v47, a5);
    sub_1000361E0(v47, a5);
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      v108[0] = v102;
      *(_DWORD *)uint64_t v74 = 136446210;
      uint64_t v100 = (void (*)(uint8_t *, uint64_t))(v74 + 4);
      uint64_t v101 = v74;
      sub_1000361E0(v47, a5);
      uint64_t v75 = v20;
      uint64_t v76 = Data.description.getter();
      unint64_t v78 = v77;
      sub_10001CFB8(v47, a5);
      uint64_t v79 = v76;
      uint64_t v20 = v75;
      v107[0] = sub_1008FA0F0(v79, v78, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v47, a5);
      sub_10001CFB8(v47, a5);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Failed to decode data %{public}s", v101, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v47, a5);
      sub_10001CFB8(v47, a5);
    }

    uint64_t v80 = *(void *)(v20 + 160);
    unint64_t v81 = *(void *)(v20 + 168);
    *(_OWORD *)(v20 + 160) = xmmword_101347BB0;
    sub_100037A24(v80, v81);
    v108[0] = v53;
    char v110 = 10;
    char v111 = 1;
    swift_errorRetain();
    v104(v108);
    swift_release();
    swift_errorRelease();
    return sub_10001DAB4((uint64_t)v108, &qword_10163C638);
  }
  uint64_t v56 = v98;
  if ((*(unsigned int (**)(char *, uint64_t))(v98 + 88))(v55, v7) != enum case for BinaryDecodingError.insufficientData(_:))
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v7);
    goto LABEL_26;
  }
  swift_errorRelease();
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v57, v58))
  {
    uint64_t v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "insufficientData. Keep reading...", v59, 2u);
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_release();
  }
  return swift_errorRelease();
}

uint64_t sub_10015245C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v2 + 16);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v9)
  {
    uint64_t v12 = swift_allocObject();
    swift_weakInit();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    sub_1001559B0(a1, v13 + 24);
    *(void *)(v13 + 240) = a2;
    sub_10000588C(&qword_10163C608);
    swift_allocObject();
    sub_100156058(a1, (void (*)(void))sub_1000361E0, (void (*)(void))sub_100037A38);
    swift_retain();
    return Future.init(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100152638(void (*a1)(long long *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for BinaryEncoder();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = (void *)swift_weakLoadStrong();
  if (!Strong)
  {
    uint64_t v56 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    char v57 = 11;
    char v58 = 1;
    a1(&v54);
    return sub_10001DAB4((uint64_t)&v54, &qword_10163C600);
  }
  uint64_t v14 = Strong;
  uint64_t v49 = a5;
  uint64_t v15 = (void *)Strong[7];
  if (!v15)
  {
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170F098);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Missing peripheral to write!", v23, 2u);
      swift_slowDealloc();
    }

    uint64_t v56 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    char v57 = 11;
    char v58 = 1;
    a1(&v54);
    swift_release();
    return sub_10001DAB4((uint64_t)&v54, &qword_10163C600);
  }
  uint64_t v51 = v10;
  uint64_t v16 = Strong[18];
  Strong[18] = a1;
  Strong[19] = a2;
  swift_retain();
  id v17 = v15;
  sub_1000A1534(v16);
  BinaryEncoder.init()();
  sub_1001559B0(a4, (uint64_t)&v54);
  sub_100155EF0();
  uint64_t v18 = 0;
  uint64_t v19 = BinaryEncoder.encode<A>(_:)();
  uint64_t v50 = v12;
  unint64_t v46 = v25;
  uint64_t v47 = v19;
  __chkstk_darwin(v19);
  v42[-2] = v17;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v26 = v54;
  if (__OFSUB__((void)v54, 1))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v48 = v9;
  uint64_t v18 = Data.chunked(into:)();
  if (qword_101637320 != -1) {
LABEL_18:
  }
    swift_once();
  uint64_t v27 = type metadata accessor for Logger();
  sub_100010324(v27, (uint64_t)qword_10170F098);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  int v30 = v29;
  uint64_t v31 = v28;
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v32 = swift_slowAlloc();
    int v44 = v30;
    uint64_t v33 = v32;
    uint64_t v43 = swift_slowAlloc();
    *(void *)&long long v54 = v43;
    *(_DWORD *)uint64_t v33 = 136315906;
    id v45 = v17;
    swift_bridgeObjectRetain();
    uint64_t v34 = Array.description.getter();
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    uint64_t v53 = sub_1008FA0F0(v34, v36, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2048;
    uint64_t v53 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 22) = 2048;
    swift_beginAccess();
    uint64_t v37 = *(void *)(v14[22] + 16);
    swift_release();
    uint64_t v52 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v33 + 32) = 2080;
    v42[1] = v33 + 34;
    swift_bridgeObjectRetain();
    uint64_t v38 = Array.description.getter();
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    uint64_t v52 = sub_1008FA0F0(v38, v40, (uint64_t *)&v54);
    id v17 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v44, "Enqueuing %s. MTU %ld. Current queue [%ld] %s", (uint8_t *)v33, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  uint64_t v41 = sub_1001554FC(v18);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_100442E40((uint64_t)v41);
  swift_endAccess();
  sub_100152E84(v49, a4);
  sub_10001CFB8(v47, v46);
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v50, v48);
}

uint64_t sub_100152E84(uint64_t a1, uint64_t a2)
{
  uint64_t v74 = a1;
  uint64_t v4 = type metadata accessor for DispatchTime();
  unint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  os_log_type_t v73 = &v64[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v9 = &v64[-v8];
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v64[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = (void *)v2[2];
  void *v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  unint64_t v16 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  id v17 = v2 + 22;
  uint64_t result = swift_beginAccess();
  if (*(void *)(v2[22] + 16))
  {
    swift_beginAccess();
    uint64_t v19 = *v17;
    if (*(void *)(*v17 + 16))
    {
      uint64_t v66 = a2;
      uint64_t v72 = v2;
      uint64_t v10 = *(void *)(v19 + 32);
      unint64_t v16 = *(void *)(v19 + 40);
      sub_1000361E0(v10, v16);
      sub_100A29D94(0, 1);
      swift_endAccess();
      if (qword_101637320 == -1) {
        goto LABEL_5;
      }
      goto LABEL_30;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    swift_once();
LABEL_5:
    uint64_t v69 = (uint64_t)v9;
    unint64_t v70 = v5;
    uint64_t v71 = v4;
    uint64_t v20 = type metadata accessor for Logger();
    uint64_t v21 = sub_100010324(v20, (uint64_t)qword_10170F098);
    sub_1000361E0(v10, v16);
    swift_retain();
    sub_1000361E0(v10, v16);
    swift_retain();
    uint64_t v68 = v21;
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    int v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      v77[0] = v67;
      *(_DWORD *)uint64_t v25 = 136315394;
      int v65 = v24;
      sub_1000361E0(v10, v16);
      unint64_t v26 = v16;
      uint64_t v27 = Data.description.getter();
      unint64_t v29 = v28;
      sub_10001CFB8(v10, v26);
      v81[0] = sub_1008FA0F0(v27, v29, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v10, v26);
      sub_10001CFB8(v10, v26);
      *(_WORD *)(v25 + 12) = 2082;
      swift_retain();
      uint64_t v30 = sub_100A6DA6C();
      uint64_t v31 = v10;
      unint64_t v33 = v32;
      swift_release();
      v81[0] = sub_1008FA0F0(v30, v33, v77);
      unint64_t v16 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v10 = v31;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v65, "processQueuedUpdates: writing %s. Characteristic %{public}s.", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v10, v16);
      sub_10001CFB8(v10, v16);

      swift_release_n();
    }
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = 0u;
    uint64_t v36 = v35 + 16;
    *(_OWORD *)(v35 + 32) = 0u;
    *(void *)(v35 + 48) = 0;
    *(_WORD *)(v35 + 56) = 267;
    uint64_t v37 = dispatch_group_create();
    dispatch_group_enter(v37);
    v77[0] = sub_100A6C94C(v10, v16);
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = v35;
    *(void *)(v38 + 24) = v37;
    uint64_t v67 = v35;
    swift_retain();
    unint64_t v39 = v37;
    sub_10000588C(&qword_10163C5E8);
    sub_100062734(&qword_10163C5F0, &qword_10163C5E8);
    Publisher.oneshot(_:)();
    swift_release();
    swift_release();
    unint64_t v40 = v73;
    static DispatchTime.now()();
    uint64_t v41 = v69;
    + infix(_:_:)();
    uint64_t v42 = v71;
    uint64_t v43 = *(void (**)(NSObject *, uint64_t))(v70 + 8);
    v43(v40, v71);
    os_log_type_t v73 = v39;
    OS_dispatch_group.wait(timeout:)();
    v43(v41, v42);
    if (static DispatchTimeoutResult.== infix(_:_:)())
    {
      int v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        unint64_t v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Timed out waiting for writeFuture", v46, 2u);
        swift_slowDealloc();
      }
    }
    swift_beginAccess();
    sub_10001D074(v36, (uint64_t)v81, &qword_10163C5F8);
    if (v82)
    {
      sub_10006105C((uint64_t)v81, (uint64_t)v80);
      sub_1000610B8((uint64_t)v80, (uint64_t)v77);
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = swift_slowAlloc();
        uint64_t v71 = v10;
        uint64_t v50 = (uint8_t *)v49;
        uint64_t v76 = swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = 136446210;
        uint64_t v51 = sub_101321420();
        uint64_t v75 = sub_1008FA0F0(v51, v52, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100061288((uint64_t)v77);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "writeFuture error: %{public}s", v50, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v10 = v71;
        swift_slowDealloc();
      }
      else
      {
        sub_100061288((uint64_t)v77);
      }

      uint64_t v60 = (void (*)(uint64_t *))v72[18];
      if (v60)
      {
        sub_100061234();
        uint64_t v61 = swift_allocError();
        sub_1000610B8((uint64_t)v80, v62);
        v77[0] = v61;
        char v78 = 0;
        char v79 = 1;
        swift_retain();
        v60(v77);
        sub_1000A1534((uint64_t)v60);

        sub_10001CFB8(v10, v16);
        sub_10001DAB4((uint64_t)v77, &qword_10163C600);
        sub_100061288((uint64_t)v80);
        return swift_release();
      }
      sub_100061288((uint64_t)v80);

      uint64_t v63 = v10;
    }
    else
    {
      uint64_t v71 = v10;
      uint64_t v53 = v72;
      swift_retain_n();
      long long v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        v77[0] = v69;
        *(_DWORD *)uint64_t v56 = 134218242;
        v80[0] = *(void *)(v53[22] + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v56 + 12) = 2080;
        unint64_t v70 = v16;
        swift_bridgeObjectRetain();
        uint64_t v57 = Array.description.getter();
        unint64_t v59 = v58;
        swift_bridgeObjectRelease();
        v80[0] = sub_1008FA0F0(v57, v59, v77);
        unint64_t v16 = v70;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "writeFuture success. writeQueue [%ld] %s", (uint8_t *)v56, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      sub_100152E84(v74, v66);

      uint64_t v63 = v71;
    }
    sub_10001CFB8(v63, v16);
    return swift_release();
  }
  uint64_t v34 = (void (*)(uint64_t *))v2[18];
  if (v34)
  {
    sub_1001559B0(a2, (uint64_t)v77);
    char v79 = 0;
    sub_1000BD0E8((uint64_t)v34);
    sub_100156058(a2, (void (*)(void))sub_1000361E0, (void (*)(void))sub_100037A38);
    v34(v77);
    sub_1000A1534((uint64_t)v34);
    return sub_10001DAB4((uint64_t)v77, &qword_10163C600);
  }
  return result;
}

void sub_10015393C(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  sub_100156D3C(a1, v5, &qword_10163C5F8);
  dispatch_group_leave(a3);
}

void sub_1001539A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = (void *)v1[2];
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (qword_101637320 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170F098);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "pairingCompleteAnalyticsEvent", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = v1[24];
  if (v12)
  {
    uint64_t v13 = *(void *)(v1[8] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
    type metadata accessor for Transaction();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v12;
    *(void *)(v14 + 24) = v13;
    swift_retain_n();
    swift_retain_n();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_release();
    swift_release();
    v1[24] = 0;
    swift_release();
  }
  else
  {
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "No analytics event!", v17, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100153C80(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_100153CA0, 0, 0);
}

uint64_t sub_100153CA0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return _swift_task_switch(sub_100153D0C, v1, 0);
}

uint64_t sub_100153D0C()
{
  sub_1011A13AC(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_release();
  return _swift_task_switch(sub_100153DA4, 0, 0);
}

uint64_t sub_100153DA4()
{
  type metadata accessor for AnalyticsPublisher();
  v0[4] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100153E58;
  uint64_t v2 = v0[2];
  return sub_101196838(v2);
}

uint64_t sub_100153E58()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_100153F68()
{
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10134BF90;
  *(void *)(inited + 32) = 0x6563637553736177;
  *(void *)(inited + 40) = 0xEA00000000007373;
  *(void *)(inited + 48) = 1;
  *(unsigned char *)(inited + 56) = 1;
  *(void *)(inited + 64) = 0x626D754E74726170;
  *(void *)(inited + 72) = 0xEA00000000007265;
  *(NSNumber *)(inited + 80) = UInt8._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "numberOfParts");
  *(_WORD *)(inited + 110) = -4864;
  *(NSNumber *)(inited + 112) = Int._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 120) = 0;
  *(void *)(inited + 128) = 0x6961506563726F66;
  *(void *)(inited + 136) = 0xE900000000000072;
  *(NSNumber *)(inited + 144) = Bool._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 152) = 0;
  return sub_10092E03C(inited);
}

void sub_1001540B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v60 = a3;
  uint64_t v65 = a2;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v61 = (uint64_t)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v59 = (char *)&v56 - v9;
  uint64_t v10 = type metadata accessor for MACAddress();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v14 - 8);
  uint64_t v64 = (uint64_t)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v63 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v62 = (uint64_t)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = (void *)v4[2];
  *uint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if (v21)
  {
    if (qword_101637320 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = sub_100010324(v23, (uint64_t)qword_10170F098);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v66 = v24;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  unint64_t v58 = v13;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v57 = v4;
    unint64_t v29 = (uint8_t *)v28;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v68 = a1;
    uint64_t v69 = v30;
    *(_DWORD *)unint64_t v29 = 136446210;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v31 = String.init<A>(describing:)();
    uint64_t v68 = sub_1008FA0F0(v31, v32, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "pairingFailureAnalyticsEvent %{public}s", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v57;
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v33 = v4[24];
  if (v33)
  {
    uint64_t v34 = *(void *)(v4[8] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
    uint64_t v35 = (unsigned char *)(v34 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId);
    if (*(unsigned char *)(v34 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId + 1))
    {
      swift_retain();
      swift_retain();
      uint64_t v36 = v64;
      sub_100AE800C(v64);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v36, 1, v67) == 1)
      {
        sub_10001DAB4(v36, &qword_10163BB20);
      }
      else
      {
        sub_100157D84(v36, v62, type metadata accessor for OwnedBeaconGroup);
        uint64_t v41 = v61;
        sub_10001D074(v60, v61, (uint64_t *)&unk_1016477E0);
        uint64_t v42 = v11;
        uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
        int v44 = v43(v41, 1, v10);
        uint64_t v56 = v42;
        if (v44 == 1)
        {
          os_log_type_t v45 = (void *)v4[7];
          if (v45)
          {
            id v46 = v45;
            uint64_t v47 = v59;
            sub_100A3AC74(v59);

            uint64_t v41 = v61;
            uint64_t v48 = 0;
          }
          else
          {
            uint64_t v48 = 1;
            uint64_t v47 = v59;
          }
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v47, v48, 1, v10);
          sub_10001DAB4(v41, (uint64_t *)&unk_1016477E0);
          uint64_t v50 = v47;
        }
        else
        {
          uint64_t v49 = v41;
          uint64_t v50 = v59;
          (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v59, v49, v10);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v50, 0, 1, v10);
        }
        if (v43((uint64_t)v50, 1, v10) == 1)
        {
          sub_100157DEC(v62, type metadata accessor for OwnedBeaconGroup);
          sub_10001DAB4((uint64_t)v50, (uint64_t *)&unk_1016477E0);
        }
        else
        {
          uint64_t v51 = v56;
          uint64_t v52 = (uint64_t)v58;
          (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v58, v50, v10);
          uint64_t v53 = v62;
          __int16 v54 = sub_1004CC5F4(v52);
          *uint64_t v35 = v54;
          v35[1] = HIBYTE(v54) & 1;
          uint64_t v55 = *(void *)(*(void *)(v53 + *(int *)(v67 + 40)) + 16);
          (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v10);
          sub_100157DEC(v53, type metadata accessor for OwnedBeaconGroup);
          *(void *)(v34 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_numBeacons) = v55;
        }
      }
    }
    else
    {
      swift_retain();
      swift_retain();
    }
    type metadata accessor for Transaction();
    unint64_t v40 = (void *)swift_allocObject();
    v40[2] = v33;
    v40[3] = v34;
    v40[4] = a1;
    swift_errorRetain();
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_release();
    swift_release();
    v4[24] = 0;
    swift_release();
  }
  else
  {
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      unint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "No analytics event!", v39, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1001548D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1001548F8, 0, 0);
}

uint64_t sub_1001548F8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  swift_errorRetain();
  return _swift_task_switch(sub_10015496C, v1, 0);
}

uint64_t sub_10015496C()
{
  sub_1011A13EC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_errorRelease();
  swift_release();
  return _swift_task_switch(sub_100154A10, 0, 0);
}

uint64_t sub_100154A10()
{
  type metadata accessor for AnalyticsPublisher();
  v0[5] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100154AC4;
  uint64_t v2 = v0[2];
  return sub_101196838(v2);
}

uint64_t sub_100154AC4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_100154BD4()
{
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10134BFA0;
  *(void *)(inited + 32) = 0x6563637553736177;
  *(void *)(inited + 40) = 0xEA00000000007373;
  *(void *)(inited + 48) = 0;
  *(unsigned char *)(inited + 56) = 1;
  *(void *)(inited + 64) = 0x6D6F44726F727265;
  *(void *)(inited + 72) = 0xEB000000006E6961;
  swift_getErrorValue();
  Error.domain.getter();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 80) = v1;
  *(unsigned char *)(inited + 88) = 0;
  *(void *)(inited + 96) = 0x646F43726F727265;
  *(void *)(inited + 104) = 0xE900000000000065;
  swift_getErrorValue();
  Error.code.getter();
  *(NSNumber *)(inited + 112) = Int._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 120) = 0;
  strcpy((char *)(inited + 128), "numberOfParts");
  *(_WORD *)(inited + 142) = -4864;
  *(NSNumber *)(inited + 144) = Int._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0x626D754E74726170;
  *(void *)(inited + 168) = 0xEA00000000007265;
  *(NSNumber *)(inited + 176) = UInt8._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 184) = 0;
  *(void *)(inited + 192) = 0x6961506563726F66;
  *(void *)(inited + 200) = 0xE900000000000072;
  *(NSNumber *)(inited + 208) = Bool._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 216) = 0;
  return sub_10092E03C(inited);
}

void sub_100154DD0()
{
  uint64_t v0 = sub_10000588C(&qword_101639C18);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = Data.subdata(in:)();
  unint64_t v5 = v4;
  v19[0] = v3;
  v19[1] = v4;
  sub_1000362FC();
  if (DataProtocol.isNull.getter())
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F068);
    sub_1000361E0(v3, v5);
    sub_1000361E0(v3, v5);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      v19[0] = v18;
      *(_DWORD *)uint64_t v9 = 141558275;
      uint64_t v20 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      uint64_t v10 = Data.hexString.getter();
      uint64_t v20 = sub_1008FA0F0(v10, v11, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v3, v5);
      sub_10001CFB8(v3, v5);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Invalid serial number %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10001CFB8(v3, v5);
    }
    else
    {
      sub_10001CFB8(v3, v5);
      sub_10001CFB8(v3, v5);
      sub_10001CFB8(v3, v5);
    }
  }
  else
  {
    uint64_t v12 = Data.trimmed.getter();
    unint64_t v14 = v13;
    uint64_t v15 = type metadata accessor for MACAddress();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v2, 1, 1, v15);
    uint64_t v16 = sub_10000588C((uint64_t *)&unk_1016477E0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v2, 0, 1, v16);
    sub_1000361E0(v12, v14);
    sub_10015D3F8((uint64_t)v2, v12, v14);
    sub_10001CFB8(v3, v5);
    sub_10001CFB8(v12, v14);
  }
}

uint64_t sub_10015514C()
{
  swift_release();
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100155194()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10001D2E4;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return _swift_task_switch(sub_1001548F8, 0, 0);
}

uint64_t sub_100155248(unint64_t a1)
{
  if (a1 >= 5) {
    return 5;
  }
  else {
    return (0x104030200uLL >> (8 * a1));
  }
}

void sub_10015526C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = (void *)v2[2];
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v12 = (void *)v2[7];
  if (v12)
  {
    uint64_t v13 = type metadata accessor for Transaction();
    __chkstk_darwin(v13);
    *(void *)&v19[-48] = v2;
    *(void *)&v19[-40] = v12;
    *(void *)&v19[-32] = a1;
    *(void *)&v19[-24] = a2;
    *(void *)&v19[-16] = v5;
    id v14 = v12;
    static Transaction.named<A>(_:with:)();

    return;
  }
  if (qword_101637320 != -1) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170F098);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Missing peripheral to start pairing!", v18, 2u);
    swift_slowDealloc();
  }
}

void *sub_1001554FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
  uint64_t v3 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v4 = *(v2 - 1);
    unint64_t v5 = *v2;
    sub_10000588C(&qword_10163A788);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_101342130;
    *(unsigned char *)(v6 + 32) = v1 == 1;
    uint64_t v7 = sub_10000588C(&qword_10163C618);
    uint64_t v25 = v7;
    uint64_t v26 = sub_100062734(&qword_10163C620, &qword_10163C618);
    uint64_t v23 = v6;
    uint64_t v8 = sub_10001CD44(&v23, v7);
    uint64_t v9 = *v8;
    size_t v10 = *(void *)(*v8 + 16);
    if (v10)
    {
      if (v10 <= 0xE)
      {
        memset(__dst, 0, sizeof(__dst));
        unsigned __int8 v22 = v10;
        memcpy(__dst, (const void *)(v9 + 32), v10);
        uint64_t v13 = *(void *)__dst;
        unint64_t v14 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v22 << 48);
        sub_1000361E0(v4, v5);
        swift_bridgeObjectRetain();
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        sub_1000361E0(v4, v5);
        swift_bridgeObjectRetain();
        uint64_t v11 = __DataStorage.init(bytes:length:)();
        uint64_t v12 = v11;
        if (v10 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          uint64_t v13 = swift_allocObject();
          *(void *)(v13 + 16) = 0;
          *(void *)(v13 + 24) = v10;
          unint64_t v14 = v12 | 0x8000000000000000;
        }
        else
        {
          uint64_t v13 = v10 << 32;
          unint64_t v14 = v11 | 0x4000000000000000;
        }
      }
    }
    else
    {
      sub_1000361E0(v4, v5);
      swift_bridgeObjectRetain();
      uint64_t v13 = 0;
      unint64_t v14 = 0xC000000000000000;
    }
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v23);
    uint64_t v23 = v13;
    unint64_t v24 = v14;
    Data.append(_:)();
    uint64_t v15 = v23;
    unint64_t v16 = v24;
    sub_1000361E0(v23, v24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = sub_100A6EA38(0, v3[2] + 1, 1, v3);
    }
    unint64_t v18 = v3[2];
    unint64_t v17 = v3[3];
    if (v18 >= v17 >> 1) {
      uint64_t v3 = sub_100A6EA38((void *)(v17 > 1), v18 + 1, 1, v3);
    }
    v2 += 2;
    v3[2] = v18 + 1;
    uint64_t v19 = &v3[2 * v18];
    v19[4] = v15;
    v19[5] = v16;
    sub_10001CFB8(v4, v5);
    sub_10001CFB8(v15, v16);
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1001557F8()
{
  return sub_100158B04((void (*)(void))&_swift_release);
}

uint64_t sub_100155810()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_100153CA0, 0, 0);
}

uint64_t sub_1001558BC()
{
  if (*(unsigned char *)(v0 + 57) == 1)
  {
    uint64_t v1 = (id *)(v0 + 16);
    switch(*(unsigned char *)(v0 + 56))
    {
      case 0:
      case 7:
      case 0xA:
        goto LABEL_8;
      case 1:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
        break;
      case 2:

        goto LABEL_8;
      case 3:

        break;
      case 4:
      case 5:
      case 6:
        swift_release();
        break;
      case 8:
        swift_release();
LABEL_8:
        swift_errorRelease();
        break;
      case 9:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }

  return _swift_deallocObject(v0, 58, 7);
}

void sub_1001559A8(uint64_t a1)
{
  sub_10015393C(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1001559B0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100155A0C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100155A44()
{
  swift_release();
  sub_100155B04(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168),
    *(void *)(v0 + 176),
    *(void *)(v0 + 184),
    *(void *)(v0 + 192),
    *(void *)(v0 + 200),
    *(void *)(v0 + 208),
    *(void *)(v0 + 216),
    *(void *)(v0 + 224),
    *(void *)(v0 + 232),
    (void (*)(void))sub_10001CFB8,
    (void (*)(void))sub_100037A24);
  swift_release();

  return _swift_deallocObject(v0, 248, 7);
}

void sub_100155B04(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unint64_t a24,unint64_t a25,uint64_t a26,unint64_t a27,void (*a28)(void),void (*a29)(void))
{
  switch((a27 >> 59) & 6 | (a25 >> 63))
  {
    case 0uLL:
      a28();
      uint64_t v34 = a3;
      unint64_t v35 = a4;
      goto LABEL_9;
    case 1uLL:
      a28();
      ((void (*)(uint64_t, unint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, unint64_t))a28)(a7, a8);
      uint64_t v34 = a9;
      unint64_t v35 = a10;
      goto LABEL_9;
    case 2uLL:
      a28();
      ((void (*)(uint64_t, unint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, unint64_t))a28)(a7, a8);
      ((void (*)(uint64_t, unint64_t))a28)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a28)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a28)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a28)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a28)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a28)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a28)(a21, a22);
      ((void (*)(uint64_t, unint64_t))a28)(a23, a24);
      unint64_t v35 = a27 & 0xCFFFFFFFFFFFFFFFLL;
      uint64_t v34 = a26;
      goto LABEL_9;
    case 3uLL:
      a28();
      ((void (*)(uint64_t, unint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, unint64_t))a28)(a7, a8);
      ((void (*)(uint64_t, unint64_t))a28)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a28)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a28)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a28)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a28)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a28)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a28)(a21, a22);
      uint64_t v34 = a23;
      unint64_t v35 = a24;
      goto LABEL_11;
    case 4uLL:
      a28();
      ((void (*)(uint64_t, unint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      uint64_t v34 = a7;
      unint64_t v35 = a8;
LABEL_9:
      a29 = a28;
LABEL_11:
      ((void (*)(uint64_t, unint64_t))a29)(v34, v35);
      break;
    default:
      return;
  }
}

uint64_t sub_100155EE0(void (*a1)(long long *), uint64_t a2)
{
  return sub_100152638(a1, a2, *(void *)(v2 + 16), v2 + 24, *(void *)(v2 + 240));
}

unint64_t sub_100155EF0()
{
  unint64_t result = qword_10163C610;
  if (!qword_10163C610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C610);
  }
  return result;
}

id sub_100155F44@<X0>(void *a1@<X8>)
{
  return sub_100A3B0CC(*(void *)(v1 + 16), a1);
}

uint64_t sub_100155F60()
{
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100155FA0(void (*a1)(uint64_t *), uint64_t a2)
{
  return sub_1001517F0(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

unint64_t sub_100155FAC()
{
  unint64_t result = qword_10163C640;
  if (!qword_10163C640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C640);
  }
  return result;
}

unint64_t sub_100156000()
{
  unint64_t result = qword_10163C648;
  if (!qword_10163C648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C648);
  }
  return result;
}

uint64_t sub_100156058(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  sub_100155B04(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    a2,
    a3);
  return a1;
}

uint64_t sub_1001560D8(uint64_t a1)
{
  return sub_100150F24(a1);
}

uint64_t sub_1001560E0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100156118(uint64_t a1)
{
  sub_100150FA0(a1, *(NSObject **)(v1 + 16));
}

uint64_t type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult()
{
  uint64_t result = qword_10163C930;
  if (!qword_10163C930) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10015616C()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 24), *(void *)(v0 + 32));
  sub_10001CFB8(*(void *)(v0 + 40), *(void *)(v0 + 48));
  sub_10001CFB8(*(void *)(v0 + 56), *(void *)(v0 + 64));
  unint64_t v5 = *(void *)(v0 + 80);
  if (v5 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v0 + 72), v5);
  }
  unint64_t v6 = *(void *)(v0 + 96);
  if (v6 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v0 + 88), v6);
  }
  uint64_t v7 = (v3 + 112) & ~v3;
  unint64_t v8 = (v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v7, v1);
  sub_10001CFB8(*(void *)(v0 + v8), *(void *)(v0 + v8 + 8));

  return _swift_deallocObject(v0, v8 + 16, v3 | 7);
}

uint64_t sub_1001562A8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for MACAddress() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + 24;
  uint64_t v8 = *(void *)(v1 + 104);
  uint64_t v9 = v1 + v5;
  size_t v10 = (uint64_t *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_10001D2E4;
  return sub_10014FEFC(a1, v6, v7, v8, v9, v11, v12);
}

double sub_1001563E8(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_101347BC0;
  *(_OWORD *)(a1 + 16) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 32) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 48) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 64) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 80) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 96) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 112) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 128) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 144) = xmmword_101347BC0;
  *(_OWORD *)(a1 + 160) = xmmword_101347BC0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 261888;
  return result;
}

uint64_t sub_10015641C(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = *(void *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = *(void *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = *(void *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = *(void *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = *(void *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = *(void *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = *(void *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v9 = *(void *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v10 = *(void *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v11 = *(unsigned __int8 *)(result + 192) | 0x8000000000000000;
  unint64_t v12 = *(void *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 24) = v1;
  *(void *)(result + 40) = v2;
  *(void *)(result + 56) = v3;
  *(void *)(result + 72) = v4;
  *(void *)(result + 88) = v5;
  *(void *)(result + 104) = v6;
  *(void *)(result + 120) = v7;
  *(void *)(result + 136) = v8;
  *(void *)(result + 152) = v9;
  *(void *)(result + 168) = v10;
  *(void *)(result + 192) = v11;
  *(void *)(result + 208) = v12;
  return result;
}

uint64_t sub_1001564C0(uint64_t a1)
{
  unsigned int v1 = (*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 3 | *(unsigned char *)(a1 + 47) & 0x30 | (*(void *)(a1 + 56) >> 54) & 0xC0 | (*(void *)(a1 + 72) >> 52) & 0x300 | (*(void *)(a1 + 88) >> 50) & 0xC00 | *(_WORD *)(a1 + 110) & 0x3000 | (*(void *)(a1 + 120) >> 46) & 0xC000 | (*(void *)(a1 + 136) >> 44) & 0x30000 | (*(void *)(a1 + 152) >> 42) & 0xC0000 | (*(void *)(a1 + 168) >> 40) & 0x300000 | (*(_DWORD *)(a1 + 192) >> 8 << 22);
  if (v1 > 0x80000000) {
    return -v1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10015657C(uint64_t a1)
{
  long long v8 = *(_OWORD *)(a1 + 304);
  long long v9 = *(_OWORD *)(a1 + 320);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v4 = *(_OWORD *)(a1 + 240);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v3 = *(_OWORD *)(a1 + 208);
  sub_100156610(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v3,
    *((unint64_t *)&v3 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v4,
    *((unint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((unint64_t *)&v8 + 1),
    v9,
    *((unint64_t *)&v9 + 1),
    *(void *)(a1 + 336),
    *(void *)(a1 + 344));
  return a1;
}

uint64_t sub_100156610(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,unint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,unint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unint64_t a40,uint64_t a41,unint64_t a42,uint64_t a43,unint64_t a44)
{
  if (a22)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    sub_100037A24(a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a14, a15);
    sub_10001CFB8(a16, a17);
    sub_10001CFB8(a18, a19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a25, a26);
    sub_10001CFB8(a27, a28);
    sub_10001CFB8(a29, a30);
    sub_10001CFB8(a31, a32);
    sub_10001CFB8(a33, a34);
    sub_100037A24(a35, a36);
    swift_bridgeObjectRelease();
    sub_100037A24(a39, a40);
    sub_10001CFB8(a41, a42);
    return sub_10001CFB8(a43, a44);
  }
  return result;
}

uint64_t sub_10015680C(uint64_t a1)
{
  return sub_10014AB98(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10015682C(uint64_t a1)
{
  long long v3 = *(_OWORD *)(a1 + 224);
  long long v4 = *(_OWORD *)(a1 + 240);
  sub_1001568A8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((unint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(void *)(a1 + 256),
    *(void *)(a1 + 264));
  return a1;
}

void sub_1001568A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,unint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unint64_t a34)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a7, a8);
    sub_10001CFB8(a9, a10);
    sub_10001CFB8(a11, a12);
    sub_10001CFB8(a13, a14);
    sub_10001CFB8(a15, a16);
    sub_10001CFB8(a17, a18);
    sub_10001CFB8(a19, a20);
    sub_10001CFB8(a21, a22);
    sub_10001CFB8(a23, a24);
    sub_100037A24(a25, a26);
    sub_10001CFB8(a27, a28);
    sub_10001CFB8(a29, a30);
    swift_bridgeObjectRelease();
    sub_100037A24(a33, a34);
  }
}

uint64_t sub_100156A4C()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100156B20(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10014AD38(a1, v4, v5, v6);
}

uint64_t sub_100156B94()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100156C70()
{
  uint64_t v1 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10014B5D4(v2, v3, v4, v5);
}

uint64_t sub_100156CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100156CE8()
{
  return swift_release();
}

uint64_t sub_100156CF4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100156D34(uint64_t a1)
{
  sub_10014A928(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100156D3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000588C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_100156DA0()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100156DD8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100156DE8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100156DF8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100156E34()
{
  sub_100155B04(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160),
    *(void *)(v0 + 168),
    *(void *)(v0 + 176),
    *(void *)(v0 + 184),
    *(void *)(v0 + 192),
    *(void *)(v0 + 200),
    *(void *)(v0 + 208),
    *(void *)(v0 + 216),
    *(void *)(v0 + 224),
    (void (*)(void))sub_10001CFB8,
    (void (*)(void))sub_100037A24);

  return _swift_deallocObject(v0, 232, 7);
}

uint64_t sub_100156ED4()
{
  return sub_10014A54C(v0 + 16);
}

uint64_t sub_100156EF0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100156F00()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100156F10(uint64_t a1)
{
  unsigned int v1 = (*(void *)(a1 + 208) >> 59) & 6 | (*(void *)(a1 + 192) >> 63);
  if (v1 <= 4) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t sub_100156F40()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100156F50()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100156F64()
{
  return sub_10014A09C(v0 + 16);
}

uint64_t sub_100156F80()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100156F90()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100156FA0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100156FB0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100156FC0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100156FD4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100156FE4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100156FF4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157004()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157014()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157028()
{
  return sub_10014A490(v0 + 16);
}

uint64_t sub_100157034()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157044()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157054()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157064()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157078()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157088()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157098()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001570D0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001570E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001570F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10015715C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for StandaloneBeacon() - 8);
  return sub_1001570F0(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
}

uint64_t sub_1001571D8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001571E8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001571F8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157208()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157218()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100157228()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157238()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100157248()
{
  unint64_t result = qword_10163C698;
  if (!qword_10163C698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C698);
  }
  return result;
}

double sub_10015729C(uint64_t a1)
{
  *(void *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  double result = -0.0;
  *(_OWORD *)(a1 + 192) = xmmword_10134BFB0;
  *(void *)(a1 + 208) = 0x2000000000000000;
  return result;
}

uint64_t sub_1001572F4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157304()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157318()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157328()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10015733C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10015734C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157360()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157370()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157384()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157394()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001573A8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001573B8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001573CC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001573DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001573F0()
{
  return sub_100149AA4(v0 + 16);
}

uint64_t sub_1001573FC()
{
  return Data.hexString.getter();
}

uint64_t sub_100157404()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157414()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157424()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157434()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157448()
{
  return sub_100149B60(v0 + 16);
}

uint64_t sub_100157454()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157464()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157474()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157484()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157498()
{
  return *(unsigned __int8 *)(v0 + 208);
}

uint64_t sub_1001574A0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001574B0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001574C0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001574F8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157508()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157518()
{
  return sub_100055368();
}

uint64_t sub_100157534()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157544()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t *sub_100157554(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  uint64_t v11 = a1[9];
  uint64_t v13 = a1[11];
  uint64_t v14 = a1[10];
  uint64_t v15 = a1[13];
  uint64_t v16 = a1[12];
  uint64_t v17 = a1[15];
  uint64_t v18 = a1[14];
  uint64_t v19 = a1[17];
  uint64_t v20 = a1[16];
  uint64_t v21 = a1[19];
  uint64_t v22 = a1[18];
  uint64_t v23 = a1[21];
  uint64_t v24 = a1[20];
  uint64_t v25 = a1[23];
  uint64_t v26 = a1[22];
  uint64_t v27 = a1[26];
  uint64_t v28 = a1[25];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v8);
  a2(v7, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  a2(v20, v19);
  a2(v22, v21);
  a2(v24, v23);
  a2(v26, v25);
  a2(v28, v27);
  return a1;
}

uint64_t sub_1001576C4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001576D4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001576E4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10015771C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10015772C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10015773C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10015774C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157760()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157770()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157784()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100157794()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001577A8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001577B8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001577C8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001577D8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001577E8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001577F8()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100157808()
{
  unint64_t result = qword_10163C6A0;
  if (!qword_10163C6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C6A0);
  }
  return result;
}

unint64_t sub_10015785C()
{
  unint64_t result = qword_10163C6A8;
  if (!qword_10163C6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C6A8);
  }
  return result;
}

unint64_t sub_1001578B4()
{
  unint64_t result = qword_10163C6B0;
  if (!qword_10163C6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C6B0);
  }
  return result;
}

uint64_t sub_100157908()
{
  sub_10001CFB8(v0[2], v0[3]);
  sub_10001CFB8(v0[4], v0[5]);
  sub_10001CFB8(v0[6], v0[7]);
  sub_10001CFB8(v0[8], v0[9]);
  sub_10001CFB8(v0[10], v0[11]);
  sub_10001CFB8(v0[12], v0[13]);
  sub_10001CFB8(v0[14], v0[15]);
  sub_10001CFB8(v0[16], v0[17]);
  sub_10001CFB8(v0[18], v0[19]);
  sub_10001CFB8(v0[20], v0[21]);
  sub_10001CFB8(v0[22], v0[23]);
  unint64_t v1 = v0[25];
  if (v1 >> 60 != 15) {
    sub_10001CFB8(v0[24], v1);
  }

  return _swift_deallocObject(v0, 208, 7);
}

uint64_t *sub_1001579A8(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  unint64_t v9 = a1[9];
  uint64_t v10 = a1[10];
  unint64_t v12 = a1[11];
  unint64_t v13 = a1[13];
  uint64_t v14 = a1[12];
  unint64_t v15 = a1[15];
  uint64_t v16 = a1[14];
  unint64_t v17 = a1[17];
  uint64_t v18 = a1[16];
  unint64_t v19 = a1[19];
  uint64_t v22 = a1[20];
  uint64_t v20 = a1[18];
  unint64_t v21 = a1[21];
  uint64_t v24 = a1[22];
  unint64_t v23 = a1[23];
  sub_1000361E0(*a1, a1[1]);
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  sub_1000361E0(v6, v7);
  sub_1000361E0(v8, v9);
  sub_1000361E0(v10, v12);
  sub_1000361E0(v14, v13);
  sub_1000361E0(v16, v15);
  sub_1000361E0(v18, v17);
  sub_1000361E0(v20, v19);
  sub_1000361E0(v22, v21);
  sub_100037A38(v24, v23);
  return a1;
}

unint64_t sub_100157AD4()
{
  unint64_t result = qword_10163C6B8;
  if (!qword_10163C6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C6B8);
  }
  return result;
}

uint64_t sub_100157B2C()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));
  sub_10001CFB8(*(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10001CFB8(*(void *)(v0 + 112), *(void *)(v0 + 120));
  sub_10001CFB8(*(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10001CFB8(*(void *)(v0 + 144), *(void *)(v0 + 152));
  sub_10001CFB8(*(void *)(v0 + 160), *(void *)(v0 + 168));
  sub_10001CFB8(*(void *)(v0 + 176), *(void *)(v0 + 184));
  sub_10001CFB8(*(void *)(v0 + 192), *(void *)(v0 + 200));
  sub_10001CFB8(*(void *)(v0 + 216), *(void *)(v0 + 224));

  return _swift_deallocObject(v0, 232, 7);
}

uint64_t sub_100157BC4(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 192) &= ~0x8000000000000000;
  *(void *)(result + 208) = v1;
  return result;
}

uint64_t sub_100157BE0()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100157C40()
{
  unint64_t v1 = (id *)(v0 + 16);
  switch(*(unsigned char *)(v0 + 56))
  {
    case 0:
    case 7:
    case 0xA:
      goto LABEL_7;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
      break;
    case 2:

      goto LABEL_7;
    case 3:

      break;
    case 4:
    case 5:
    case 6:
      swift_release();
      break;
    case 8:
      swift_release();
LABEL_7:
      swift_errorRelease();
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return _swift_deallocObject(v0, 57, 7);
}

uint64_t sub_100157D1C(void (*a1)(unsigned char *))
{
  sub_1000610B8(v1 + 16, (uint64_t)v4);
  unsigned char v4[216] = 1;
  a1(v4);
  return sub_10001DAB4((uint64_t)v4, &qword_10163C600);
}

uint64_t sub_100157D84(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100157DEC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100157E4C(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = *(void *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = *(void *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = *(void *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = *(void *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = *(void *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = *(void *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = *(void *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v9 = *(void *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v10 = *(void *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v11 = *(void *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v12 = *(unsigned __int8 *)(result + 192) | 0x8000000000000000;
  *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 24) = v1;
  *(void *)(result + 40) = v2;
  *(void *)(result + 56) = v3;
  *(void *)(result + 72) = v4;
  *(void *)(result + 88) = v5;
  *(void *)(result + 104) = v6;
  *(void *)(result + 120) = v7;
  *(void *)(result + 136) = v8;
  *(void *)(result + 152) = v9;
  *(void *)(result + 168) = v10;
  *(void *)(result + 192) = v12;
  *(void *)(result + 208) = v11;
  return result;
}

uint64_t *sub_100157EEC(uint64_t *a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  uint64_t v12 = a1[8];
  uint64_t v14 = a1[9];
  a2(*a1, a1[1]);
  a2(v6, v7);
  a2(v8, v9);
  a3(v10, v11);
  a3(v12, v14);
  return a1;
}

id sub_100157FA4@<X0>(void *a1@<X8>)
{
  return sub_101322DEC(*(void *)(v1 + 16), a1);
}

uint64_t sub_100157FC0()
{
  return sub_100A6D054(v0);
}

uint64_t sub_100157FDC(uint64_t a1)
{
  return sub_10013C2C8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100157FFC(uint64_t a1)
{
  return sub_10013B3B0(a1, *(void *)(v1 + 16), *(char **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100158020(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100158068()
{
  return sub_100158B04((void (*)(void))&_swift_release);
}

uint64_t sub_100158080@<X0>(uint64_t *a1@<X8>)
{
  return sub_10013BD68(*(void *)(v1 + 24), a1);
}

uint64_t sub_10015808C(uint64_t a1)
{
  return sub_1001583AC(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_10013BEAC);
}

double sub_1001580A4(uint64_t a1)
{
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  double result = -0.0;
  *(_OWORD *)(a1 + 192) = xmmword_10134BFB0;
  *(void *)(a1 + 208) = 0x2000000000000000;
  return result;
}

uint64_t sub_1001580D8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100A6CE98(v1, a1);
}

uint64_t sub_1001580F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001514DC(*(void *)a1, *(void *)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_100158124()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001581F0@<X0>(NSObject *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for MACAddress() - 8);
  return sub_100140234(a1, v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2);
}

uint64_t sub_10015826C()
{
  return sub_100158B04((void (*)(void))&_swift_release);
}

uint64_t sub_100158284@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10013FDB4(a1, *(void *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_1001582B8()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100158394(uint64_t a1)
{
  return sub_1001583AC(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_10013D2E4);
}

uint64_t sub_1001583AC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, char *))
{
  uint64_t v4 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = (char *)v2 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5, v6, v7, v8);
}

uint64_t sub_100158438@<X0>(unsigned char *a1@<X8>)
{
  return sub_10013A6CC(v1, a1);
}

uint64_t sub_100158454()
{
  return sub_1001375D8(v0);
}

uint64_t sub_10015845C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10015846C(uint64_t a1)
{
  return sub_1001376EC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(unsigned __int8 *)(v1 + 41), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_1001584A8()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_release();
  unint64_t v5 = *(void *)(v0 + 32);
  if (v5 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v0 + 24), v5);
  }
  uint64_t v6 = (v3 + 42) & ~v3;
  unint64_t v7 = (v3 + ((v4 + 7 + v6) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v3;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v0 + v6, v1);
  swift_release();
  v8(v0 + v7, v1);

  return _swift_deallocObject(v0, ((v4 + 7 + v7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1001585D0()
{
  uint64_t v1 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 42) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + 7 + v3) & 0xFFFFFFFFFFFFFFF8;
  return sub_100137B54(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(unsigned char *)(v0 + 41), v0 + v3, *(void *)(v0 + v4), v0 + ((v2 + v4 + 8) & ~v2));
}

uint64_t sub_100158688()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1001586C0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unint64_t v4 = v1;
  v4[1] = sub_100033F68;
  return sub_10013911C(v2, v3);
}

uint64_t sub_10015875C()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_100158844(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for MACAddress() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_10013936C(a1, v7, v2 + v6, v8, a2);
}

uint64_t sub_1001588F4@<X0>(char **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100139AA8(a1, a2);
}

uint64_t sub_1001588FC()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v6);
}

uint64_t sub_100158A08(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 48) & ~v4;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = (uint64_t)v1 + ((*(void *)(v3 + 64) + v4 + v5) & ~v4);

  return sub_10013A158(a1, v6, v7, v8, v9, (uint64_t)v1 + v5, v10);
}

uint64_t sub_100158AAC(uint64_t a1)
{
  return sub_100A3D8E4(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_100158ACC(uint64_t a1)
{
  return sub_1011367E4(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_100158AEC()
{
  return sub_100158B04((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100158B04(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 24));

  return _swift_deallocObject(v1, 32, 7);
}

void sub_100158B54(uint64_t a1, uint64_t a2)
{
  sub_101136930(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void sub_100158B5C(void *a1@<X8>)
{
  sub_101323190(*(void *)(v1 + 16), *(char **)(v1 + 24), a1);
}

unint64_t sub_100158B78(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v41 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v41 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for StandaloneBeacon();
      uint64_t v8 = v7[5];
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      uint64_t v11 = type metadata accessor for MACAddress();
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
      v12(v9, v10, v11);
      v12(a1 + v7[6], a2 + v7[6], v11);
      uint64_t v13 = v7[7];
      uint64_t v14 = (void *)(a1 + v13);
      unint64_t v15 = (void *)(a2 + v13);
      uint64_t v16 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v16;
      uint64_t v17 = v7[8];
      uint64_t v18 = a1 + v17;
      uint64_t v19 = a2 + v17;
      uint64_t v20 = type metadata accessor for Date();
      unint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16);
      swift_bridgeObjectRetain();
      v21(v18, v19, v20);
      uint64_t v22 = v7[9];
      unint64_t v23 = (uint64_t *)(a1 + v22);
      uint64_t v24 = (uint64_t *)(a2 + v22);
      uint64_t v25 = *v24;
      unint64_t v26 = v24[1];
      sub_1000361E0(*v24, v26);
      *unint64_t v23 = v25;
      v23[1] = v26;
      uint64_t v27 = v7[10];
      uint64_t v28 = (uint64_t *)(a1 + v27);
      unint64_t v29 = (void *)(a2 + v27);
      uint64_t v30 = *(void *)(a2 + v27);
      unint64_t v31 = *(void *)(a2 + v27 + 8);
      sub_1000361E0(v30, v31);
      uint64_t *v28 = v30;
      v28[1] = v31;
      uint64_t v32 = v29[2];
      unint64_t v33 = v29[3];
      sub_1000361E0(v32, v33);
      void v28[2] = v32;
      v28[3] = v33;
      uint64_t v34 = v29[4];
      unint64_t v35 = v29[5];
      sub_1000361E0(v34, v35);
      v28[4] = v34;
      v28[5] = v35;
      uint64_t v36 = v7[11];
      uint64_t v37 = (uint64_t *)(a1 + v36);
      os_log_type_t v38 = (uint64_t *)(a2 + v36);
      uint64_t v39 = *v38;
      unint64_t v40 = v38[1];
      sub_1000361E0(*v38, v40);
      uint64_t *v37 = v39;
      v37[1] = v40;
    }
    else
    {
      uint64_t v42 = *(void *)a2;
      unint64_t v43 = *(void *)(a2 + 8);
      sub_1000361E0(*(void *)a2, v43);
      *(void *)a1 = v42;
      *(void *)(a1 + 8) = v43;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      int v44 = (int *)type metadata accessor for OwnedBeaconGroup(0);
      uint64_t v45 = v44[6];
      uint64_t v46 = a1 + v45;
      uint64_t v47 = a2 + v45;
      uint64_t v48 = type metadata accessor for UUID();
      uint64_t v146 = *(void *)(v48 - 8);
      uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 16);
      v49(v46, v47, v48);
      uint64_t v50 = v44[7];
      uint64_t v51 = a1 + v50;
      uint64_t v52 = a2 + v50;
      uint64_t v53 = type metadata accessor for MACAddress();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
      *(unsigned char *)(a1 + v44[8]) = *(unsigned char *)(a2 + v44[8]);
      uint64_t v54 = v44[9];
      uint64_t v55 = (void *)(a1 + v54);
      uint64_t v56 = (void *)(a2 + v54);
      uint64_t v57 = v56[1];
      *uint64_t v55 = *v56;
      v55[1] = v57;
      *(void *)(a1 + v44[10]) = *(void *)(a2 + v44[10]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v58 = *(int *)(sub_10000588C(&qword_101639B90) + 48);
      unint64_t v59 = (uint64_t *)(a1 + v58);
      uint64_t v60 = a2 + v58;
      uint64_t v61 = *(void *)(a2 + v58);
      unint64_t v62 = *(void *)(v60 + 8);
      sub_1000361E0(v61, v62);
      uint64_t *v59 = v61;
      v59[1] = v62;
      uint64_t v63 = (int *)type metadata accessor for OwnedBeaconRecord();
      v49((uint64_t)v59 + v63[5], v60 + v63[5], v48);
      uint64_t v64 = v63[6];
      uint64_t v65 = (uint64_t *)((char *)v59 + v64);
      uint64_t v66 = (void *)(v60 + v64);
      type metadata accessor for StableIdentifier();
      unint64_t v145 = (void (*)(char *, const void *, uint64_t))v49;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v68 = v66[1];
          void *v65 = *v66;
          v65[1] = v68;
          uint64_t v69 = v66[3];
          v65[2] = v66[2];
          v65[3] = v69;
          uint64_t v70 = v66[5];
          v65[4] = v66[4];
          v65[5] = v70;
          goto LABEL_10;
        case 2u:
          v49((uint64_t)v65, (uint64_t)v66, v48);
          uint64_t v71 = (int *)sub_10000588C(&qword_1016555E0);
          uint64_t v72 = v71[12];
          os_log_type_t v73 = (void *)((char *)v65 + v72);
          uint64_t v74 = (void *)((char *)v66 + v72);
          uint64_t v76 = *v74;
          uint64_t v75 = v74[1];
          void *v73 = v76;
          v73[1] = v75;
          uint64_t v77 = v71[16];
          char v78 = (void *)((char *)v65 + v77);
          char v79 = (void *)((char *)v66 + v77);
          uint64_t v143 = v79[1];
          void *v78 = *v79;
          v78[1] = v143;
          uint64_t v80 = v71[20];
          unint64_t v81 = (void *)((char *)v65 + v80);
          char v82 = (void *)((char *)v66 + v80);
          uint64_t v142 = v82[1];
          *unint64_t v81 = *v82;
          v81[1] = v142;
          *(_WORD *)((char *)v65 + v71[24]) = *(_WORD *)((char *)v66 + v71[24]);
          uint64_t v83 = v71[28];
          uint64_t v84 = (void *)((char *)v65 + v83);
          unint64_t v85 = (void *)((char *)v66 + v83);
          uint64_t v86 = v85[1];
          *uint64_t v84 = *v85;
          v84[1] = v86;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_11;
        case 3u:
          v49((uint64_t)v65, (uint64_t)v66, v48);
          uint64_t v87 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
          uint64_t v88 = v87[12];
          uint64_t v89 = (void *)((char *)v65 + v88);
          uint64_t v90 = (void *)((char *)v66 + v88);
          uint64_t v92 = *v90;
          uint64_t v91 = v90[1];
          *uint64_t v89 = v92;
          v89[1] = v91;
          uint64_t v93 = v87[16];
          uint64_t v94 = (void *)((char *)v65 + v93);
          uint64_t v95 = (void *)((char *)v66 + v93);
          uint64_t v144 = v95[1];
          *uint64_t v94 = *v95;
          v94[1] = v144;
          uint64_t v96 = v87[20];
          uint64_t v97 = (void *)((char *)v65 + v96);
          uint64_t v98 = (void *)((char *)v66 + v96);
          uint64_t v99 = v98[1];
          *uint64_t v97 = *v98;
          v97[1] = v99;
          *((unsigned char *)v65 + v87[24]) = *((unsigned char *)v66 + v87[24]);
LABEL_10:
          swift_bridgeObjectRetain();
LABEL_11:
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v67 = v66[1];
          void *v65 = *v66;
          v65[1] = v67;
          break;
      }
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      uint64_t v100 = v63[7];
      uint64_t v101 = (char *)v59 + v100;
      uint64_t v102 = (const void *)(v60 + v100);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48))(v60 + v100, 1, v48))
      {
        uint64_t v103 = sub_10000588C(&qword_101638CF0);
        memcpy(v101, v102, *(void *)(*(void *)(v103 - 8) + 64));
      }
      else
      {
        v145(v101, v102, v48);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v146 + 56))(v101, 0, 1, v48);
      }
      uint64_t v104 = v63[8];
      uint64_t v105 = (char *)v59 + v104;
      uint64_t v106 = v60 + v104;
      uint64_t v107 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v107 - 8) + 16))(v105, v106, v107);
      uint64_t v108 = v63[9];
      uint64_t v109 = (uint64_t *)((char *)v59 + v108);
      char v110 = (uint64_t *)(v60 + v108);
      uint64_t v111 = *v110;
      unint64_t v112 = v110[1];
      sub_1000361E0(*v110, v112);
      *uint64_t v109 = v111;
      v109[1] = v112;
      uint64_t v113 = v63[10];
      os_log_t v114 = (char *)v59 + v113;
      unint64_t v115 = (uint64_t *)(v60 + v113);
      unint64_t v116 = v115[1];
      if (v116 >> 60 == 15)
      {
        *(_OWORD *)os_log_t v114 = *(_OWORD *)v115;
      }
      else
      {
        uint64_t v117 = *v115;
        sub_1000361E0(*v115, v115[1]);
        *(void *)os_log_t v114 = v117;
        *((void *)v114 + 1) = v116;
      }
      uint64_t v118 = v63[11];
      uint64_t v119 = (char *)v59 + v118;
      unint64_t v120 = (uint64_t *)(v60 + v118);
      unint64_t v121 = v120[1];
      if (v121 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v119 = *(_OWORD *)v120;
      }
      else
      {
        uint64_t v122 = *v120;
        sub_1000361E0(*v120, v120[1]);
        *(void *)uint64_t v119 = v122;
        *((void *)v119 + 1) = v121;
      }
      uint64_t v123 = v63[12];
      uint64_t v124 = (uint64_t *)((char *)v59 + v123);
      uint64_t v125 = (uint64_t *)(v60 + v123);
      uint64_t v126 = *v125;
      unint64_t v127 = v125[1];
      sub_1000361E0(*v125, v127);
      uint64_t *v124 = v126;
      v124[1] = v127;
      uint64_t v128 = v63[13];
      uint64_t v129 = (uint64_t *)((char *)v59 + v128);
      unint64_t v130 = (uint64_t *)(v60 + v128);
      uint64_t v131 = *v130;
      unint64_t v132 = v130[1];
      sub_1000361E0(*v130, v132);
      uint64_t *v129 = v131;
      v129[1] = v132;
      uint64_t v133 = v63[14];
      uint64_t v134 = (uint64_t *)((char *)v59 + v133);
      uint64_t v135 = (void *)(v60 + v133);
      uint64_t v136 = v135[1];
      *uint64_t v134 = *v135;
      v134[1] = v136;
      uint64_t v137 = v63[15];
      uint64_t v138 = (uint64_t *)((char *)v59 + v137);
      unint64_t v139 = (void *)(v60 + v137);
      uint64_t v140 = v139[1];
      *uint64_t v138 = *v139;
      v138[1] = v140;
      *(uint64_t *)((char *)v59 + v63[16]) = *(void *)(v60 + v63[16]);
      *(uint64_t *)((char *)v59 + v63[17]) = *(void *)(v60 + v63[17]);
      *((unsigned char *)v59 + v63[18]) = *(unsigned char *)(v60 + v63[18]);
      *((unsigned char *)v59 + v63[19]) = *(unsigned char *)(v60 + v63[19]);
      *((unsigned char *)v59 + v63[20]) = *(unsigned char *)(v60 + v63[20]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100159354(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
    uint64_t v3 = (int *)type metadata accessor for StandaloneBeacon();
    uint64_t v4 = a1 + v3[5];
    uint64_t v5 = type metadata accessor for MACAddress();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    v6(v4, v5);
    v6(a1 + v3[6], v5);
    swift_bridgeObjectRelease();
    uint64_t v7 = a1 + v3[8];
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    sub_10001CFB8(*(void *)(a1 + v3[9]), *(void *)(a1 + v3[9] + 8));
    uint64_t v9 = a1 + v3[10];
    sub_10001CFB8(*(void *)v9, *(void *)(v9 + 8));
    sub_10001CFB8(*(void *)(v9 + 16), *(void *)(v9 + 24));
    sub_10001CFB8(*(void *)(v9 + 32), *(void *)(v9 + 40));
    uint64_t v10 = (uint64_t *)(a1 + v3[11]);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    return sub_10001CFB8(v11, v12);
  }
  else
  {
    sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
    uint64_t v14 = type metadata accessor for OwnedBeaconGroup(0);
    uint64_t v15 = a1 + *(int *)(v14 + 24);
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v18(v15, v16);
    uint64_t v19 = a1 + *(int *)(v14 + 28);
    uint64_t v20 = type metadata accessor for MACAddress();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v21 = a1 + *(int *)(sub_10000588C(&qword_101639B90) + 48);
    sub_10001CFB8(*(void *)v21, *(void *)(v21 + 8));
    uint64_t v22 = (int *)type metadata accessor for OwnedBeaconRecord();
    v18(v21 + v22[5], v16);
    uint64_t v23 = v21 + v22[6];
    type metadata accessor for StableIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 4u:
        goto LABEL_9;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 2u:
        v18(v23, v16);
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      case 3u:
        v18(v23, v16);
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_9:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v24 = v21 + v22[7];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v24, 1, v16)) {
      v18(v24, v16);
    }
    uint64_t v25 = v21 + v22[8];
    uint64_t v26 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
    sub_10001CFB8(*(void *)(v21 + v22[9]), *(void *)(v21 + v22[9] + 8));
    uint64_t v27 = (uint64_t *)(v21 + v22[10]);
    unint64_t v28 = v27[1];
    if (v28 >> 60 != 15) {
      sub_10001CFB8(*v27, v28);
    }
    unint64_t v29 = (uint64_t *)(v21 + v22[11]);
    unint64_t v30 = v29[1];
    if (v30 >> 60 != 15) {
      sub_10001CFB8(*v29, v30);
    }
    sub_10001CFB8(*(void *)(v21 + v22[12]), *(void *)(v21 + v22[12] + 8));
    sub_10001CFB8(*(void *)(v21 + v22[13]), *(void *)(v21 + v22[13] + 8));
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100159840(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    uint64_t v5 = (int *)type metadata accessor for StandaloneBeacon();
    uint64_t v6 = v5[5];
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    uint64_t v9 = type metadata accessor for MACAddress();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    v10(v7, v8, v9);
    v10(a1 + v5[6], a2 + v5[6], v9);
    uint64_t v11 = v5[7];
    unint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (void *)(a2 + v11);
    uint64_t v14 = v13[1];
    void *v12 = *v13;
    v12[1] = v14;
    uint64_t v15 = v5[8];
    uint64_t v16 = a1 + v15;
    uint64_t v17 = a2 + v15;
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
    swift_bridgeObjectRetain();
    v19(v16, v17, v18);
    uint64_t v20 = v5[9];
    uint64_t v21 = (uint64_t *)(a1 + v20);
    uint64_t v22 = (uint64_t *)(a2 + v20);
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    sub_1000361E0(*v22, v24);
    uint64_t *v21 = v23;
    v21[1] = v24;
    uint64_t v25 = v5[10];
    uint64_t v26 = (uint64_t *)(a1 + v25);
    uint64_t v27 = (void *)(a2 + v25);
    uint64_t v28 = *(void *)(a2 + v25);
    unint64_t v29 = *(void *)(a2 + v25 + 8);
    sub_1000361E0(v28, v29);
    uint64_t *v26 = v28;
    v26[1] = v29;
    uint64_t v30 = v27[2];
    unint64_t v31 = v27[3];
    sub_1000361E0(v30, v31);
    v26[2] = v30;
    void v26[3] = v31;
    uint64_t v32 = v27[4];
    unint64_t v33 = v27[5];
    sub_1000361E0(v32, v33);
    v26[4] = v32;
    v26[5] = v33;
    uint64_t v34 = v5[11];
    unint64_t v35 = (uint64_t *)(a1 + v34);
    uint64_t v36 = (uint64_t *)(a2 + v34);
    uint64_t v37 = *v36;
    unint64_t v38 = v36[1];
    sub_1000361E0(*v36, v38);
    *unint64_t v35 = v37;
    v35[1] = v38;
  }
  else
  {
    uint64_t v39 = *(void *)a2;
    unint64_t v40 = *(void *)(a2 + 8);
    sub_1000361E0(*(void *)a2, v40);
    *(void *)a1 = v39;
    *(void *)(a1 + 8) = v40;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v41 = (int *)type metadata accessor for OwnedBeaconGroup(0);
    uint64_t v42 = v41[6];
    uint64_t v43 = a1 + v42;
    uint64_t v44 = a2 + v42;
    uint64_t v45 = type metadata accessor for UUID();
    uint64_t v143 = *(void *)(v45 - 8);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v143 + 16);
    v46(v43, v44, v45);
    uint64_t v47 = v41[7];
    uint64_t v48 = a1 + v47;
    uint64_t v49 = a2 + v47;
    uint64_t v50 = type metadata accessor for MACAddress();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
    *(unsigned char *)(a1 + v41[8]) = *(unsigned char *)(a2 + v41[8]);
    uint64_t v51 = v41[9];
    uint64_t v52 = (void *)(a1 + v51);
    uint64_t v53 = (void *)(a2 + v51);
    uint64_t v54 = v53[1];
    *uint64_t v52 = *v53;
    v52[1] = v54;
    *(void *)(a1 + v41[10]) = *(void *)(a2 + v41[10]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v55 = *(int *)(sub_10000588C(&qword_101639B90) + 48);
    uint64_t v56 = (uint64_t *)(a1 + v55);
    uint64_t v57 = a2 + v55;
    uint64_t v58 = *(void *)(a2 + v55);
    unint64_t v59 = *(void *)(v57 + 8);
    sub_1000361E0(v58, v59);
    *uint64_t v56 = v58;
    v56[1] = v59;
    uint64_t v60 = (int *)type metadata accessor for OwnedBeaconRecord();
    v46((uint64_t)v56 + v60[5], v57 + v60[5], v45);
    uint64_t v61 = v60[6];
    unint64_t v62 = (uint64_t *)((char *)v56 + v61);
    uint64_t v63 = (void *)(v57 + v61);
    type metadata accessor for StableIdentifier();
    uint64_t v142 = (void (*)(char *, const void *, uint64_t))v46;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v65 = v63[1];
        *unint64_t v62 = *v63;
        v62[1] = v65;
        uint64_t v66 = v63[3];
        v62[2] = v63[2];
        v62[3] = v66;
        uint64_t v67 = v63[5];
        v62[4] = v63[4];
        v62[5] = v67;
        goto LABEL_8;
      case 2u:
        v46((uint64_t)v62, (uint64_t)v63, v45);
        uint64_t v68 = (int *)sub_10000588C(&qword_1016555E0);
        uint64_t v69 = v68[12];
        uint64_t v70 = (void *)((char *)v62 + v69);
        uint64_t v71 = (void *)((char *)v63 + v69);
        uint64_t v73 = *v71;
        uint64_t v72 = v71[1];
        void *v70 = v73;
        v70[1] = v72;
        uint64_t v74 = v68[16];
        uint64_t v75 = (void *)((char *)v62 + v74);
        uint64_t v76 = (void *)((char *)v63 + v74);
        uint64_t v141 = v76[1];
        void *v75 = *v76;
        v75[1] = v141;
        uint64_t v77 = v68[20];
        char v78 = (void *)((char *)v62 + v77);
        char v79 = (void *)((char *)v63 + v77);
        uint64_t v80 = v79[1];
        void *v78 = *v79;
        v78[1] = v80;
        *(_WORD *)((char *)v62 + v68[24]) = *(_WORD *)((char *)v63 + v68[24]);
        uint64_t v81 = v68[28];
        char v82 = (void *)((char *)v62 + v81);
        uint64_t v83 = (void *)((char *)v63 + v81);
        uint64_t v84 = v83[1];
        *char v82 = *v83;
        v82[1] = v84;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 3u:
        v46((uint64_t)v62, (uint64_t)v63, v45);
        unint64_t v85 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        uint64_t v86 = v85[12];
        uint64_t v87 = (void *)((char *)v62 + v86);
        uint64_t v88 = (void *)((char *)v63 + v86);
        uint64_t v90 = *v88;
        uint64_t v89 = v88[1];
        *uint64_t v87 = v90;
        v87[1] = v89;
        uint64_t v91 = v85[16];
        uint64_t v92 = (void *)((char *)v62 + v91);
        uint64_t v93 = (void *)((char *)v63 + v91);
        uint64_t v94 = v93[1];
        void *v92 = *v93;
        v92[1] = v94;
        uint64_t v95 = v85[20];
        uint64_t v96 = (void *)((char *)v62 + v95);
        uint64_t v97 = (void *)((char *)v63 + v95);
        uint64_t v98 = v97[1];
        *uint64_t v96 = *v97;
        v96[1] = v98;
        *((unsigned char *)v62 + v85[24]) = *((unsigned char *)v63 + v85[24]);
LABEL_8:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v64 = v63[1];
        *unint64_t v62 = *v63;
        v62[1] = v64;
        break;
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    uint64_t v99 = v60[7];
    uint64_t v100 = (char *)v56 + v99;
    uint64_t v101 = (const void *)(v57 + v99);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v143 + 48))(v57 + v99, 1, v45))
    {
      uint64_t v102 = sub_10000588C(&qword_101638CF0);
      memcpy(v100, v101, *(void *)(*(void *)(v102 - 8) + 64));
    }
    else
    {
      v142(v100, v101, v45);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(v100, 0, 1, v45);
    }
    uint64_t v103 = v60[8];
    uint64_t v104 = (char *)v56 + v103;
    uint64_t v105 = v57 + v103;
    uint64_t v106 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v106 - 8) + 16))(v104, v105, v106);
    uint64_t v107 = v60[9];
    uint64_t v108 = (uint64_t *)((char *)v56 + v107);
    uint64_t v109 = (uint64_t *)(v57 + v107);
    uint64_t v110 = *v109;
    unint64_t v111 = v109[1];
    sub_1000361E0(*v109, v111);
    uint64_t *v108 = v110;
    v108[1] = v111;
    uint64_t v112 = v60[10];
    uint64_t v113 = (char *)v56 + v112;
    os_log_t v114 = (uint64_t *)(v57 + v112);
    unint64_t v115 = v114[1];
    if (v115 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v113 = *(_OWORD *)v114;
    }
    else
    {
      uint64_t v116 = *v114;
      sub_1000361E0(*v114, v114[1]);
      *(void *)uint64_t v113 = v116;
      *((void *)v113 + 1) = v115;
    }
    uint64_t v117 = v60[11];
    uint64_t v118 = (char *)v56 + v117;
    uint64_t v119 = (uint64_t *)(v57 + v117);
    unint64_t v120 = v119[1];
    if (v120 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
    }
    else
    {
      uint64_t v121 = *v119;
      sub_1000361E0(*v119, v119[1]);
      *(void *)uint64_t v118 = v121;
      *((void *)v118 + 1) = v120;
    }
    uint64_t v122 = v60[12];
    uint64_t v123 = (uint64_t *)((char *)v56 + v122);
    uint64_t v124 = (uint64_t *)(v57 + v122);
    uint64_t v125 = *v124;
    unint64_t v126 = v124[1];
    sub_1000361E0(*v124, v126);
    *uint64_t v123 = v125;
    v123[1] = v126;
    uint64_t v127 = v60[13];
    uint64_t v128 = (uint64_t *)((char *)v56 + v127);
    uint64_t v129 = (uint64_t *)(v57 + v127);
    uint64_t v130 = *v129;
    unint64_t v131 = v129[1];
    sub_1000361E0(*v129, v131);
    *uint64_t v128 = v130;
    v128[1] = v131;
    uint64_t v132 = v60[14];
    uint64_t v133 = (uint64_t *)((char *)v56 + v132);
    uint64_t v134 = (void *)(v57 + v132);
    uint64_t v135 = v134[1];
    *uint64_t v133 = *v134;
    v133[1] = v135;
    uint64_t v136 = v60[15];
    uint64_t v137 = (uint64_t *)((char *)v56 + v136);
    uint64_t v138 = (void *)(v57 + v136);
    uint64_t v139 = v138[1];
    *uint64_t v137 = *v138;
    v137[1] = v139;
    *(uint64_t *)((char *)v56 + v60[16]) = *(void *)(v57 + v60[16]);
    *(uint64_t *)((char *)v56 + v60[17]) = *(void *)(v57 + v60[17]);
    *((unsigned char *)v56 + v60[18]) = *(unsigned char *)(v57 + v60[18]);
    *((unsigned char *)v56 + v60[19]) = *(unsigned char *)(v57 + v60[19]);
    *((unsigned char *)v56 + v60[20]) = *(unsigned char *)(v57 + v60[20]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100159FC4(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100157DEC(a1, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      uint64_t v5 = (int *)type metadata accessor for StandaloneBeacon();
      uint64_t v6 = v5[5];
      uint64_t v7 = a1 + v6;
      uint64_t v8 = a2 + v6;
      uint64_t v9 = type metadata accessor for MACAddress();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
      v10(v7, v8, v9);
      v10(a1 + v5[6], a2 + v5[6], v9);
      uint64_t v11 = v5[7];
      unint64_t v12 = (void *)(a1 + v11);
      uint64_t v13 = (void *)(a2 + v11);
      void *v12 = *v13;
      v12[1] = v13[1];
      uint64_t v14 = v5[8];
      uint64_t v15 = a1 + v14;
      uint64_t v16 = a2 + v14;
      uint64_t v17 = type metadata accessor for Date();
      uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      v18(v15, v16, v17);
      uint64_t v19 = v5[9];
      uint64_t v20 = (uint64_t *)(a1 + v19);
      uint64_t v21 = (uint64_t *)(a2 + v19);
      uint64_t v22 = *v21;
      unint64_t v23 = v21[1];
      sub_1000361E0(*v21, v23);
      *uint64_t v20 = v22;
      v20[1] = v23;
      uint64_t v24 = v5[10];
      uint64_t v25 = (uint64_t *)(a1 + v24);
      uint64_t v26 = (void *)(a2 + v24);
      uint64_t v27 = *(void *)(a2 + v24);
      unint64_t v28 = *(void *)(a2 + v24 + 8);
      sub_1000361E0(v27, v28);
      *uint64_t v25 = v27;
      v25[1] = v28;
      uint64_t v29 = v26[2];
      unint64_t v30 = v26[3];
      sub_1000361E0(v29, v30);
      v25[2] = v29;
      v25[3] = v30;
      uint64_t v31 = v26[4];
      unint64_t v32 = v26[5];
      sub_1000361E0(v31, v32);
      v25[4] = v31;
      v25[5] = v32;
      uint64_t v33 = v5[11];
      uint64_t v34 = (uint64_t *)(a1 + v33);
      unint64_t v35 = (uint64_t *)(a2 + v33);
      uint64_t v36 = *v35;
      unint64_t v37 = v35[1];
      sub_1000361E0(*v35, v37);
      uint64_t *v34 = v36;
      v34[1] = v37;
    }
    else
    {
      uint64_t v38 = *(void *)a2;
      unint64_t v39 = *(void *)(a2 + 8);
      sub_1000361E0(*(void *)a2, v39);
      *(void *)a1 = v38;
      *(void *)(a1 + 8) = v39;
      uint64_t v40 = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 16) = v40;
      uint64_t v41 = (int *)type metadata accessor for OwnedBeaconGroup(0);
      uint64_t v42 = v41[6];
      uint64_t v43 = a1 + v42;
      uint64_t v44 = a2 + v42;
      uint64_t v45 = type metadata accessor for UUID();
      uint64_t v126 = *(void *)(v45 - 8);
      uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 16);
      v46(v43, v44, v45);
      uint64_t v47 = v41[7];
      uint64_t v48 = a1 + v47;
      uint64_t v49 = a2 + v47;
      uint64_t v50 = type metadata accessor for MACAddress();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
      *(unsigned char *)(a1 + v41[8]) = *(unsigned char *)(a2 + v41[8]);
      uint64_t v51 = v41[9];
      uint64_t v52 = (void *)(a1 + v51);
      uint64_t v53 = (void *)(a2 + v51);
      *uint64_t v52 = *v53;
      v52[1] = v53[1];
      *(void *)(a1 + v41[10]) = *(void *)(a2 + v41[10]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v54 = *(int *)(sub_10000588C(&qword_101639B90) + 48);
      uint64_t v55 = (uint64_t *)(a1 + v54);
      uint64_t v56 = a2 + v54;
      uint64_t v57 = *(void *)(a2 + v54);
      unint64_t v58 = *(void *)(v56 + 8);
      sub_1000361E0(v57, v58);
      *uint64_t v55 = v57;
      v55[1] = v58;
      unint64_t v59 = (int *)type metadata accessor for OwnedBeaconRecord();
      v46((uint64_t)v55 + v59[5], v56 + v59[5], v45);
      uint64_t v60 = v59[6];
      uint64_t v61 = (uint64_t *)((char *)v55 + v60);
      unint64_t v62 = (void *)(v56 + v60);
      type metadata accessor for StableIdentifier();
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          void *v61 = *v62;
          v61[1] = v62[1];
          v61[2] = v62[2];
          id v61[3] = v62[3];
          v61[4] = v62[4];
          v61[5] = v62[5];
          goto LABEL_9;
        case 2u:
          v46((uint64_t)v61, (uint64_t)v62, v45);
          uint64_t v63 = (int *)sub_10000588C(&qword_1016555E0);
          uint64_t v64 = v63[12];
          uint64_t v65 = (void *)((char *)v61 + v64);
          uint64_t v66 = (void *)((char *)v62 + v64);
          void *v65 = *v66;
          v65[1] = v66[1];
          uint64_t v67 = v63[16];
          uint64_t v68 = (void *)((char *)v61 + v67);
          uint64_t v69 = (void *)((char *)v62 + v67);
          *uint64_t v68 = *v69;
          v68[1] = v69[1];
          uint64_t v70 = v63[20];
          uint64_t v71 = (void *)((char *)v61 + v70);
          uint64_t v72 = (void *)((char *)v62 + v70);
          void *v71 = *v72;
          v71[1] = v72[1];
          *(_WORD *)((char *)v61 + v63[24]) = *(_WORD *)((char *)v62 + v63[24]);
          uint64_t v73 = v63[28];
          uint64_t v74 = (void *)((char *)v61 + v73);
          uint64_t v75 = (void *)((char *)v62 + v73);
          void *v74 = *v75;
          v74[1] = v75[1];
          swift_bridgeObjectRetain();
          goto LABEL_9;
        case 3u:
          v46((uint64_t)v61, (uint64_t)v62, v45);
          uint64_t v76 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
          uint64_t v77 = v76[12];
          char v78 = (void *)((char *)v61 + v77);
          char v79 = (void *)((char *)v62 + v77);
          void *v78 = *v79;
          v78[1] = v79[1];
          uint64_t v80 = v76[16];
          uint64_t v81 = (void *)((char *)v61 + v80);
          char v82 = (void *)((char *)v62 + v80);
          *uint64_t v81 = *v82;
          v81[1] = v82[1];
          uint64_t v83 = v76[20];
          uint64_t v84 = (void *)((char *)v61 + v83);
          unint64_t v85 = (void *)((char *)v62 + v83);
          *uint64_t v84 = *v85;
          v84[1] = v85[1];
          *((unsigned char *)v61 + v76[24]) = *((unsigned char *)v62 + v76[24]);
LABEL_9:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
        default:
          void *v61 = *v62;
          v61[1] = v62[1];
          break;
      }
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      uint64_t v86 = v59[7];
      uint64_t v87 = (char *)v55 + v86;
      uint64_t v88 = (const void *)(v56 + v86);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v56 + v86, 1, v45))
      {
        uint64_t v89 = sub_10000588C(&qword_101638CF0);
        memcpy(v87, v88, *(void *)(*(void *)(v89 - 8) + 64));
      }
      else
      {
        v46((uint64_t)v87, (uint64_t)v88, v45);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56))(v87, 0, 1, v45);
      }
      uint64_t v90 = v59[8];
      uint64_t v91 = (char *)v55 + v90;
      uint64_t v92 = v56 + v90;
      uint64_t v93 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v93 - 8) + 16))(v91, v92, v93);
      uint64_t v94 = v59[9];
      uint64_t v95 = (uint64_t *)((char *)v55 + v94);
      uint64_t v96 = (uint64_t *)(v56 + v94);
      uint64_t v97 = *v96;
      unint64_t v98 = v96[1];
      sub_1000361E0(*v96, v98);
      *uint64_t v95 = v97;
      v95[1] = v98;
      uint64_t v99 = v59[10];
      uint64_t v100 = (char *)v55 + v99;
      uint64_t v101 = (uint64_t *)(v56 + v99);
      unint64_t v102 = v101[1];
      if (v102 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v100 = *(_OWORD *)v101;
      }
      else
      {
        uint64_t v103 = *v101;
        sub_1000361E0(*v101, v101[1]);
        *(void *)uint64_t v100 = v103;
        *((void *)v100 + 1) = v102;
      }
      uint64_t v104 = v59[11];
      uint64_t v105 = (char *)v55 + v104;
      uint64_t v106 = (uint64_t *)(v56 + v104);
      unint64_t v107 = v106[1];
      if (v107 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
      }
      else
      {
        uint64_t v108 = *v106;
        sub_1000361E0(*v106, v106[1]);
        *(void *)uint64_t v105 = v108;
        *((void *)v105 + 1) = v107;
      }
      uint64_t v109 = v59[12];
      uint64_t v110 = (uint64_t *)((char *)v55 + v109);
      unint64_t v111 = (uint64_t *)(v56 + v109);
      uint64_t v112 = *v111;
      unint64_t v113 = v111[1];
      sub_1000361E0(*v111, v113);
      *uint64_t v110 = v112;
      v110[1] = v113;
      uint64_t v114 = v59[13];
      unint64_t v115 = (uint64_t *)((char *)v55 + v114);
      uint64_t v116 = (uint64_t *)(v56 + v114);
      uint64_t v117 = *v116;
      unint64_t v118 = v116[1];
      sub_1000361E0(*v116, v118);
      uint64_t *v115 = v117;
      v115[1] = v118;
      uint64_t v119 = v59[14];
      unint64_t v120 = (uint64_t *)((char *)v55 + v119);
      uint64_t v121 = (void *)(v56 + v119);
      void *v120 = *v121;
      v120[1] = v121[1];
      uint64_t v122 = v59[15];
      uint64_t v123 = (uint64_t *)((char *)v55 + v122);
      uint64_t v124 = (void *)(v56 + v122);
      *uint64_t v123 = *v124;
      v123[1] = v124[1];
      *(uint64_t *)((char *)v55 + v59[16]) = *(void *)(v56 + v59[16]);
      *(uint64_t *)((char *)v55 + v59[17]) = *(void *)(v56 + v59[17]);
      *((unsigned char *)v55 + v59[18]) = *(unsigned char *)(v56 + v59[18]);
      *((unsigned char *)v55 + v59[19]) = *(unsigned char *)(v56 + v59[19]);
      *((unsigned char *)v55 + v59[20]) = *(unsigned char *)(v56 + v59[20]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10015A7E4(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100157DEC(a1, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
      uint64_t v5 = (int *)type metadata accessor for StandaloneBeacon();
      uint64_t v6 = v5[5];
      uint64_t v7 = a1 + v6;
      uint64_t v8 = a2 + v6;
      uint64_t v9 = type metadata accessor for MACAddress();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
      v10(v7, v8, v9);
      v10(a1 + v5[6], a2 + v5[6], v9);
      *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
      uint64_t v11 = v5[8];
      uint64_t v12 = a1 + v11;
      uint64_t v13 = a2 + v11;
      uint64_t v14 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      *(_OWORD *)(a1 + v5[9]) = *(_OWORD *)(a2 + v5[9]);
      uint64_t v15 = v5[10];
      uint64_t v16 = (_OWORD *)(a1 + v15);
      uint64_t v17 = (_OWORD *)(a2 + v15);
      long long v18 = v17[1];
      _OWORD *v16 = *v17;
      v16[1] = v18;
      v16[2] = v17[2];
      *(_OWORD *)(a1 + v5[11]) = *(_OWORD *)(a2 + v5[11]);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      uint64_t v19 = (int *)type metadata accessor for OwnedBeaconGroup(0);
      uint64_t v20 = v19[6];
      uint64_t v21 = a1 + v20;
      uint64_t v22 = a2 + v20;
      uint64_t v23 = type metadata accessor for UUID();
      uint64_t v49 = *(void *)(v23 - 8);
      uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32);
      v24(v21, v22, v23);
      uint64_t v25 = v19[7];
      uint64_t v26 = a1 + v25;
      uint64_t v27 = a2 + v25;
      uint64_t v28 = type metadata accessor for MACAddress();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32))(v26, v27, v28);
      *(unsigned char *)(a1 + v19[8]) = *(unsigned char *)(a2 + v19[8]);
      *(_OWORD *)(a1 + v19[9]) = *(_OWORD *)(a2 + v19[9]);
      *(void *)(a1 + v19[10]) = *(void *)(a2 + v19[10]);
      uint64_t v29 = *(int *)(sub_10000588C(&qword_101639B90) + 48);
      uint64_t v30 = a1 + v29;
      uint64_t v31 = a2 + v29;
      *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
      unint64_t v32 = (int *)type metadata accessor for OwnedBeaconRecord();
      v24(v30 + v32[5], v31 + v32[5], v23);
      uint64_t v33 = v32[6];
      uint64_t v34 = (unsigned char *)(v30 + v33);
      unint64_t v35 = (unsigned char *)(v31 + v33);
      uint64_t v36 = type metadata accessor for StableIdentifier();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        v24((uint64_t)v34, (uint64_t)v35, v23);
        unint64_t v39 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        *(_OWORD *)&v34[v39[12]] = *(_OWORD *)&v35[v39[12]];
        *(_OWORD *)&v34[v39[16]] = *(_OWORD *)&v35[v39[16]];
        *(_OWORD *)&v34[v39[20]] = *(_OWORD *)&v35[v39[20]];
        v34[v39[24]] = v35[v39[24]];
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload == 2)
      {
        v24((uint64_t)v34, (uint64_t)v35, v23);
        uint64_t v38 = (int *)sub_10000588C(&qword_1016555E0);
        *(_OWORD *)&v34[v38[12]] = *(_OWORD *)&v35[v38[12]];
        *(_OWORD *)&v34[v38[16]] = *(_OWORD *)&v35[v38[16]];
        *(_OWORD *)&v34[v38[20]] = *(_OWORD *)&v35[v38[20]];
        *(_WORD *)&v34[v38[24]] = *(_WORD *)&v35[v38[24]];
        *(_OWORD *)&v34[v38[28]] = *(_OWORD *)&v35[v38[28]];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
      }
      uint64_t v40 = v32[7];
      uint64_t v41 = (void *)(v30 + v40);
      uint64_t v42 = (const void *)(v31 + v40);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v31 + v40, 1, v23))
      {
        uint64_t v43 = sub_10000588C(&qword_101638CF0);
        memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        v24((uint64_t)v41, (uint64_t)v42, v23);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v41, 0, 1, v23);
      }
      uint64_t v44 = v32[8];
      uint64_t v45 = v30 + v44;
      uint64_t v46 = v31 + v44;
      uint64_t v47 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 32))(v45, v46, v47);
      *(_OWORD *)(v30 + v32[9]) = *(_OWORD *)(v31 + v32[9]);
      *(_OWORD *)(v30 + v32[10]) = *(_OWORD *)(v31 + v32[10]);
      *(_OWORD *)(v30 + v32[11]) = *(_OWORD *)(v31 + v32[11]);
      *(_OWORD *)(v30 + v32[12]) = *(_OWORD *)(v31 + v32[12]);
      *(_OWORD *)(v30 + v32[13]) = *(_OWORD *)(v31 + v32[13]);
      *(_OWORD *)(v30 + v32[14]) = *(_OWORD *)(v31 + v32[14]);
      *(_OWORD *)(v30 + v32[15]) = *(_OWORD *)(v31 + v32[15]);
      *(void *)(v30 + v32[16]) = *(void *)(v31 + v32[16]);
      *(void *)(v30 + v32[17]) = *(void *)(v31 + v32[17]);
      *(unsigned char *)(v30 + v32[18]) = *(unsigned char *)(v31 + v32[18]);
      *(unsigned char *)(v30 + v32[19]) = *(unsigned char *)(v31 + v32[19]);
      *(unsigned char *)(v30 + v32[20]) = *(unsigned char *)(v31 + v32[20]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AirPodsLEPairingManager.AirPodsLEPairingManagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10015AE78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingManager.AirPodsLEPairingManagerError()
{
  return &type metadata for AirPodsLEPairingManager.AirPodsLEPairingManagerError;
}

unint64_t sub_10015AEB4()
{
  unint64_t result = qword_10163C968;
  if (!qword_10163C968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C968);
  }
  return result;
}

unint64_t sub_10015AF08()
{
  unint64_t result = qword_10163C970;
  if (!qword_10163C970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C970);
  }
  return result;
}

uint64_t sub_10015AF64(uint64_t a1)
{
  return sub_100158AAC(a1) & 1;
}

uint64_t sub_10015B0EC()
{
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  qword_10163C978 = result;
  return result;
}

void *sub_10015B124()
{
  type metadata accessor for MessagingQueryController();
  swift_allocObject();
  uint64_t result = sub_101278D6C(0xD00000000000001BLL, 0x80000001013F3BA0);
  qword_10163C990 = (uint64_t)result;
  return result;
}

uint64_t sub_10015B17C()
{
  if (qword_101637280 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  qword_10163C980 = 0;
  swift_bridgeObjectRelease();
  qword_10163C988 = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10015B228@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = qword_10163C980;
  if (qword_10163C980)
  {
    swift_bridgeObjectRetain();
    static os_log_type_t.debug.getter();
    if (qword_101637280 != -1) {
      swift_once();
    }
    uint64_t result = os_log(_:dso:log:_:_:)();
    *(void *)a1 = v2;
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)FAFetchFamilyCircleRequest) init];
    [v4 setCachePolicy:1];
    uint64_t v5 = dispatch_group_create();
    uint64_t v6 = swift_allocObject();
    sub_10015B4B4();
    uint64_t v7 = swift_allocError();
    *uint64_t v8 = 1;
    *(void *)(v6 + 16) = v7;
    *(unsigned char *)(v6 + 24) = 1;
    dispatch_group_enter(v5);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v5;
    *(void *)(v9 + 24) = v6;
    void v14[4] = sub_10015B6D0;
    v14[5] = v9;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_10001F4BC;
    v14[3] = &unk_1015B2020;
    uint64_t v10 = _Block_copy(v14);
    uint64_t v11 = v5;
    swift_retain();
    swift_release();
    [v4 startRequestWithCompletionHandler:v10];
    _Block_release(v10);
    OS_dispatch_group.wait()();

    swift_beginAccess();
    uint64_t v12 = *(void *)(v6 + 16);
    char v13 = *(unsigned char *)(v6 + 24);
    *(void *)a1 = v12;
    *(unsigned char *)(a1 + 8) = v13;
    sub_10015B6F0(v12, v13);
    return swift_release();
  }
  return result;
}

uint64_t sub_10015B46C()
{
  sub_10015B4A8(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10015B4A8(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

unint64_t sub_10015B4B4()
{
  unint64_t result = qword_10163C998;
  if (!qword_10163C998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10163C998);
  }
  return result;
}

void sub_10015B508(void *a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  if (a2)
  {
    swift_beginAccess();
    uint64_t v7 = *(void *)(a4 + 16);
    char v8 = *(unsigned char *)(a4 + 24);
    *(void *)(a4 + 16) = a2;
    *(unsigned char *)(a4 + 24) = 1;
    swift_errorRetain();
    uint64_t v9 = v7;
    char v10 = v8;
  }
  else if (a1)
  {
    id v11 = a1;
    id v12 = [v11 members];
    sub_10001D4B0(0, (unint64_t *)&qword_10166BF90);
    unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v14 = sub_101158C9C(v13);
    swift_bridgeObjectRelease();
    qword_10163C980 = v14;
    swift_bridgeObjectRetain();

    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v9 = *(void *)(a4 + 16);
    char v10 = *(unsigned char *)(a4 + 24);
    *(void *)(a4 + 16) = v14;
    *(unsigned char *)(a4 + 24) = 0;
  }
  else
  {
    sub_10015B4B4();
    uint64_t v15 = swift_allocError();
    unsigned char *v16 = 1;
    swift_beginAccess();
    uint64_t v9 = *(void *)(a4 + 16);
    char v10 = *(unsigned char *)(a4 + 24);
    *(void *)(a4 + 16) = v15;
    *(unsigned char *)(a4 + 24) = 1;
  }
  sub_10015B4A8(v9, v10);
  dispatch_group_leave(a3);
}

uint64_t sub_10015B690()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10015B6D0(void *a1, uint64_t a2)
{
  sub_10015B508(a1, a2, *(NSObject **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10015B6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10015B6E8()
{
  return swift_release();
}

uint64_t sub_10015B6F0(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_10015B6FC@<X0>(void *a1@<X8>)
{
  *a1 = qword_10163C988;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10015B720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[14] = a5;
  v6[15] = a6;
  v6[13] = a4;
  return _swift_task_switch(sub_10015B744, 0, 0);
}

uint64_t sub_10015B744()
{
  uint64_t v1 = *(void *)(v0 + 104);
  *(void *)(v0 + 88) = &_swiftEmptySetSingleton;
  char v2 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 256) = v2;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << v2;
  if (-(-1 << v2) < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 56);
  uint64_t v6 = (void *)swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = __clz(__rbit64(v5));
    uint64_t v9 = (v5 - 1) & v5;
LABEL_5:
    *(void *)(v0 + 152) = v7;
    *(void *)(v0 + 160) = v9;
    uint64_t v10 = v6[6] + 24 * v8;
    *(unsigned char *)(v0 + 257) = *(unsigned char *)v10;
    *(void *)(v0 + 168) = *(void *)(v10 + 8);
    *(void *)(v0 + 176) = *(void *)(v10 + 16);
    uint64_t v11 = qword_1016368C0;
    swift_bridgeObjectRetain();
    if (v11 != -1) {
      swift_once();
    }
    uint64_t v12 = qword_10163C990;
    *(void *)(v0 + 184) = qword_10163C990;
    return _swift_task_switch(sub_10015BB70, v12, 0);
  }
  unint64_t v13 = 63 - v4;
  if ((unint64_t)(63 - v4) > 0x7F)
  {
    unint64_t v14 = v6[8];
    if (v14)
    {
      uint64_t v7 = 1;
LABEL_13:
      uint64_t v9 = (v14 - 1) & v14;
      unint64_t v8 = __clz(__rbit64(v14)) + (v7 << 6);
      goto LABEL_5;
    }
    if (v13 >= 0xC0)
    {
      unint64_t v14 = v6[9];
      if (v14)
      {
        uint64_t v7 = 2;
        goto LABEL_13;
      }
      if (v13 >= 0x100)
      {
        unint64_t v14 = v6[10];
        if (v14)
        {
          uint64_t v7 = 3;
          goto LABEL_13;
        }
        if (v13 >= 0x140)
        {
          unint64_t v14 = v6[11];
          if (v14)
          {
            uint64_t v7 = 4;
            goto LABEL_13;
          }
          uint64_t v15 = 0;
          uint64_t v16 = v13 >> 6;
          if (v16 <= 5) {
            uint64_t v16 = 5;
          }
          uint64_t v17 = v16 - 5;
          while (v17 != v15)
          {
            unint64_t v14 = v6[v15++ + 12];
            if (v14)
            {
              uint64_t v7 = v15 + 4;
              goto LABEL_13;
            }
          }
        }
      }
    }
  }
  swift_release();
  uint64_t v18 = *(void *)(v0 + 88);
  *(void *)(v0 + 128) = v18;
  uint64_t v19 = swift_allocObject();
  *(void *)(v0 + 136) = v19;
  *(void *)(v19 + 16) = v18;
  swift_bridgeObjectRetain();
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_10015B9E0;
  return unsafeBlocking<A>(_:)(v20, sub_10015D010, v19, (char *)&type metadata for () + 8);
}

uint64_t sub_10015B9E0()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10015BAF8, 0, 0);
}

uint64_t sub_10015BAF8()
{
  (*(void (**)(void, void))(v0 + 112))(*(void *)(v0 + 128), 0);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10015BB70()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 168);
  char v4 = *(unsigned char *)(v0 + 257);
  sub_10000588C(&qword_10163BAB0);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 192) = inited;
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(unsigned char *)(inited + 32) = v4;
  *(void *)(inited + 40) = v3;
  *(void *)(inited + 48) = v1;
  uint64_t v6 = *(void **)(v2 + 112);
  *(void *)(v0 + 200) = v6;
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = *(void *)(v0 + 184);
    unint64_t v8 = sub_10015CF74();
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v9;
    v9[2] = inited;
    v9[3] = v6;
    v9[4] = v7;
    id v10 = v6;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v11;
    uint64_t v12 = sub_10000588C(&qword_10163C9C0);
    *uint64_t v11 = v0;
    v11[1] = sub_10015BD94;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 96, v7, v8, 0xD00000000000001CLL, 0x80000001013F4210, sub_10015CFCC, v9, v12);
  }
  else
  {
    sub_10015CEB8();
    uint64_t v13 = swift_allocError();
    *unint64_t v14 = 6;
    swift_willThrow();
    *(void *)(v0 + 232) = v13;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_10015C1AC, 0, 0);
  }
}

uint64_t sub_10015BD94()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 184);
    char v4 = sub_10015C0FC;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 184);
    swift_task_dealloc();
    char v4 = sub_10015BEBC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10015BEBC()
{
  uint64_t v1 = *(void *)(v0 + 192);

  unint64_t v2 = v1 + 32;
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v3 = *(void *)(v0 + 96);
  unint64_t v4 = *(void *)(v3 + 64);
  char v5 = *(unsigned char *)(v3 + 32);
  uint64_t v6 = 1 << v5;
  if (v4)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if ((v5 & 0x3Fu) < 7) {
      goto LABEL_24;
    }
    unint64_t v4 = *(void *)(v3 + 72);
    if (!v4)
    {
      unint64_t v20 = (unint64_t)(v6 + 63) >> 6;
      if (v20 <= 2) {
        unint64_t v20 = 2;
      }
      uint64_t v21 = (unint64_t *)(v3 + 80);
      unint64_t v22 = v20 - 2;
      uint64_t v7 = 64;
      while (v22)
      {
        unint64_t v23 = *v21++;
        unint64_t v4 = v23;
        v7 += 64;
        --v22;
        if (v23) {
          goto LABEL_3;
        }
      }
      goto LABEL_24;
    }
    uint64_t v7 = 64;
  }
LABEL_3:
  unint64_t v8 = __clz(__rbit64(v4));
  uint64_t v9 = v8 + v7;
  if (v9 == v6)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v19 = sub_10015D1B4;
    goto LABEL_25;
  }
  if (v9 < 0 || v9 >= v6)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (((*(void *)(v3 + 64 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v10 = swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
  unint64_t v2 = *(void *)(*(void *)(v3 + 56) + 8 * v9);
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRelease();
  if (v2 >> 62) {
    goto LABEL_30;
  }
  if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_24;
  }
LABEL_9:
  if ((v2 & 0xC000000000000001) != 0)
  {
    id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return _swift_task_switch(v10, v11, v12);
    }
    id v13 = *(id *)(v2 + 32);
  }
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  id v15 = [v14 senderCorrelationIdentifier];

  if (v15)
  {
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    *(void *)(v0 + 240) = v16;
    *(void *)(v0 + 248) = v18;
    uint64_t v19 = sub_10015C4FC;
  }
  else
  {
    uint64_t v19 = sub_10015C794;
  }
LABEL_25:
  uint64_t v10 = (uint64_t)v19;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_10015C0FC()
{
  swift_task_dealloc();
  *(void *)(v0 + 232) = *(void *)(v0 + 224);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10015C1AC, 0, 0);
}

uint64_t sub_10015C1AC()
{
  static os_log_type_t.error.getter();
  if (qword_101637280 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101342130;
  uint64_t v2 = _convertErrorToNSError(_:)();
  *(void *)(v1 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_101640E40);
  *(void *)(v1 + 64) = sub_10015CF0C();
  *(void *)(v1 + 32) = v2;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v3 = (void *)swift_errorRelease();
  int64_t v7 = *(void *)(v0 + 152);
  unint64_t v8 = *(void *)(v0 + 160);
  if (!v8)
  {
    int64_t v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
    }
    else
    {
      int64_t v15 = (unint64_t)((1 << *(unsigned char *)(v0 + 256)) + 63) >> 6;
      uint64_t v3 = *(void **)(v0 + 104);
      if (v14 >= v15) {
        goto LABEL_24;
      }
      uint64_t v16 = v3 + 7;
      unint64_t v17 = v3[v14 + 7];
      ++v7;
      if (v17)
      {
LABEL_13:
        uint64_t v9 = (v17 - 1) & v17;
        unint64_t v10 = __clz(__rbit64(v17)) + (v7 << 6);
        goto LABEL_5;
      }
      int64_t v7 = v14 + 1;
      if (v14 + 1 >= v15) {
        goto LABEL_24;
      }
      unint64_t v17 = v16[v7];
      if (v17) {
        goto LABEL_13;
      }
      int64_t v7 = v14 + 2;
      if (v14 + 2 >= v15) {
        goto LABEL_24;
      }
      unint64_t v17 = v16[v7];
      if (v17) {
        goto LABEL_13;
      }
      int64_t v18 = v14 + 3;
      if (v18 >= v15)
      {
LABEL_24:
        swift_release();
        uint64_t v19 = *(void *)(v0 + 88);
        *(void *)(v0 + 128) = v19;
        uint64_t v20 = swift_allocObject();
        *(void *)(v0 + 136) = v20;
        *(void *)(v20 + 16) = v19;
        swift_bridgeObjectRetain();
        uint64_t v3 = (void *)swift_task_alloc();
        *(void *)(v0 + 144) = v3;
        *uint64_t v3 = v0;
        v3[1] = sub_10015B9E0;
        uint64_t v6 = (char *)&type metadata for () + 8;
        unint64_t v4 = sub_10015D010;
        uint64_t v5 = v20;
        return unsafeBlocking<A>(_:)(v3, v4, v5, v6);
      }
      unint64_t v17 = v16[v18];
      if (v17)
      {
        int64_t v7 = v18;
        goto LABEL_13;
      }
      while (1)
      {
        int64_t v7 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          break;
        }
        if (v7 >= v15) {
          goto LABEL_24;
        }
        unint64_t v17 = v16[v7];
        ++v18;
        if (v17) {
          goto LABEL_13;
        }
      }
    }
    __break(1u);
    return unsafeBlocking<A>(_:)(v3, v4, v5, v6);
  }
  uint64_t v9 = (v8 - 1) & v8;
  unint64_t v10 = __clz(__rbit64(v8)) | (v7 << 6);
  uint64_t v3 = *(void **)(v0 + 104);
LABEL_5:
  *(void *)(v0 + 152) = v7;
  *(void *)(v0 + 160) = v9;
  uint64_t v11 = v3[6] + 24 * v10;
  *(unsigned char *)(v0 + 257) = *(unsigned char *)v11;
  *(void *)(v0 + 168) = *(void *)(v11 + 8);
  *(void *)(v0 + 176) = *(void *)(v11 + 16);
  uint64_t v12 = qword_1016368C0;
  swift_bridgeObjectRetain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_10163C990;
  *(void *)(v0 + 184) = qword_10163C990;
  return _swift_task_switch(sub_10015BB70, v13, 0);
}

uint64_t sub_10015C4FC()
{
  Swift::Int v2 = *(void *)(v0 + 240);
  Swift::Int v1 = *(void *)(v0 + 248);
  swift_bridgeObjectRelease();
  sub_100DC979C((Swift::Int *)(v0 + 72), v2, v1);
  uint64_t v3 = (void *)swift_bridgeObjectRelease();
  int64_t v7 = *(void *)(v0 + 152);
  unint64_t v8 = *(void *)(v0 + 160);
  if (!v8)
  {
    int64_t v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
    }
    else
    {
      int64_t v15 = (unint64_t)((1 << *(unsigned char *)(v0 + 256)) + 63) >> 6;
      uint64_t v3 = *(void **)(v0 + 104);
      if (v14 >= v15) {
        goto LABEL_22;
      }
      uint64_t v16 = v3 + 7;
      unint64_t v17 = v3[v14 + 7];
      ++v7;
      if (v17)
      {
LABEL_11:
        uint64_t v9 = (v17 - 1) & v17;
        unint64_t v10 = __clz(__rbit64(v17)) + (v7 << 6);
        goto LABEL_3;
      }
      int64_t v7 = v14 + 1;
      if (v14 + 1 >= v15) {
        goto LABEL_22;
      }
      unint64_t v17 = v16[v7];
      if (v17) {
        goto LABEL_11;
      }
      int64_t v7 = v14 + 2;
      if (v14 + 2 >= v15) {
        goto LABEL_22;
      }
      unint64_t v17 = v16[v7];
      if (v17) {
        goto LABEL_11;
      }
      int64_t v18 = v14 + 3;
      if (v18 >= v15)
      {
LABEL_22:
        swift_release();
        uint64_t v19 = *(void *)(v0 + 88);
        *(void *)(v0 + 128) = v19;
        uint64_t v20 = swift_allocObject();
        *(void *)(v0 + 136) = v20;
        *(void *)(v20 + 16) = v19;
        swift_bridgeObjectRetain();
        uint64_t v3 = (void *)swift_task_alloc();
        *(void *)(v0 + 144) = v3;
        *uint64_t v3 = v0;
        v3[1] = sub_10015B9E0;
        uint64_t v6 = (char *)&type metadata for () + 8;
        unint64_t v4 = sub_10015D010;
        uint64_t v5 = v20;
        return unsafeBlocking<A>(_:)(v3, v4, v5, v6);
      }
      unint64_t v17 = v16[v18];
      if (v17)
      {
        int64_t v7 = v18;
        goto LABEL_11;
      }
      while (1)
      {
        int64_t v7 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          break;
        }
        if (v7 >= v15) {
          goto LABEL_22;
        }
        unint64_t v17 = v16[v7];
        ++v18;
        if (v17) {
          goto LABEL_11;
        }
      }
    }
    __break(1u);
    return unsafeBlocking<A>(_:)(v3, v4, v5, v6);
  }
  uint64_t v9 = (v8 - 1) & v8;
  unint64_t v10 = __clz(__rbit64(v8)) | (v7 << 6);
  uint64_t v3 = *(void **)(v0 + 104);
LABEL_3:
  *(void *)(v0 + 152) = v7;
  *(void *)(v0 + 160) = v9;
  uint64_t v11 = v3[6] + 24 * v10;
  *(unsigned char *)(v0 + 257) = *(unsigned char *)v11;
  *(void *)(v0 + 168) = *(void *)(v11 + 8);
  *(void *)(v0 + 176) = *(void *)(v11 + 16);
  uint64_t v12 = qword_1016368C0;
  swift_bridgeObjectRetain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_10163C990;
  *(void *)(v0 + 184) = qword_10163C990;
  return _swift_task_switch(sub_10015BB70, v13, 0);
}

uint64_t sub_10015C794()
{
  static os_log_type_t.error.getter();
  if (qword_101637280 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v1 = *(void *)(v0 + 176);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101342130;
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_10000B4CC();
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  os_log(_:dso:log:_:_:)();
  unint64_t v4 = (void *)swift_bridgeObjectRelease();
  int64_t v8 = *(void *)(v0 + 152);
  unint64_t v9 = *(void *)(v0 + 160);
  if (!v9)
  {
    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
    }
    else
    {
      int64_t v16 = (unint64_t)((1 << *(unsigned char *)(v0 + 256)) + 63) >> 6;
      unint64_t v4 = *(void **)(v0 + 104);
      if (v15 >= v16) {
        goto LABEL_24;
      }
      unint64_t v17 = v4 + 7;
      unint64_t v18 = v4[v15 + 7];
      ++v8;
      if (v18)
      {
LABEL_13:
        uint64_t v10 = (v18 - 1) & v18;
        unint64_t v11 = __clz(__rbit64(v18)) + (v8 << 6);
        goto LABEL_5;
      }
      int64_t v8 = v15 + 1;
      if (v15 + 1 >= v16) {
        goto LABEL_24;
      }
      unint64_t v18 = v17[v8];
      if (v18) {
        goto LABEL_13;
      }
      int64_t v8 = v15 + 2;
      if (v15 + 2 >= v16) {
        goto LABEL_24;
      }
      unint64_t v18 = v17[v8];
      if (v18) {
        goto LABEL_13;
      }
      int64_t v19 = v15 + 3;
      if (v19 >= v16)
      {
LABEL_24:
        swift_release();
        uint64_t v20 = *(void *)(v0 + 88);
        *(void *)(v0 + 128) = v20;
        uint64_t v21 = swift_allocObject();
        *(void *)(v0 + 136) = v21;
        *(void *)(v21 + 16) = v20;
        swift_bridgeObjectRetain();
        unint64_t v4 = (void *)swift_task_alloc();
        *(void *)(v0 + 144) = v4;
        *unint64_t v4 = v0;
        v4[1] = sub_10015B9E0;
        int64_t v7 = (char *)&type metadata for () + 8;
        uint64_t v5 = sub_10015D010;
        uint64_t v6 = v21;
        return unsafeBlocking<A>(_:)(v4, v5, v6, v7);
      }
      unint64_t v18 = v17[v19];
      if (v18)
      {
        int64_t v8 = v19;
        goto LABEL_13;
      }
      while (1)
      {
        int64_t v8 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          break;
        }
        if (v8 >= v16) {
          goto LABEL_24;
        }
        unint64_t v18 = v17[v8];
        ++v19;
        if (v18) {
          goto LABEL_13;
        }
      }
    }
    __break(1u);
    return unsafeBlocking<A>(_:)(v4, v5, v6, v7);
  }
  uint64_t v10 = (v9 - 1) & v9;
  unint64_t v11 = __clz(__rbit64(v9)) | (v8 << 6);
  unint64_t v4 = *(void **)(v0 + 104);
LABEL_5:
  *(void *)(v0 + 152) = v8;
  *(void *)(v0 + 160) = v10;
  uint64_t v12 = v4[6] + 24 * v11;
  *(unsigned char *)(v0 + 257) = *(unsigned char *)v12;
  *(void *)(v0 + 168) = *(void *)(v12 + 8);
  *(void *)(v0 + 176) = *(void *)(v12 + 16);
  uint64_t v13 = qword_1016368C0;
  swift_bridgeObjectRetain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_10163C990;
  *(void *)(v0 + 184) = qword_10163C990;
  return _swift_task_switch(sub_10015BB70, v14, 0);
}

uint64_t sub_10015CAC0(uint64_t a1)
{
  if (qword_1016368B8 != -1) {
    a1 = swift_once();
  }
  __chkstk_darwin(a1);
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)();
}

uint64_t sub_10015CB80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 32) = a7;
  *(void *)(v8 + 40) = a8;
  *(unsigned char *)(v8 + 80) = a6;
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  return _swift_task_switch(sub_10015CBA8, 0, 0);
}

uint64_t sub_10015CBA8()
{
  if (qword_1016368C0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10015CC78;
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  char v4 = *(unsigned char *)(v0 + 80);
  return sub_10127B8C8(v4, v2, v3);
}

uint64_t sub_10015CC78(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 56) = v2;
  swift_task_dealloc();
  if (v2)
  {
    int64_t v7 = sub_10015CE24;
  }
  else
  {
    *(void *)(v6 + 64) = a2;
    *(void *)(v6 + 72) = a1;
    int64_t v7 = sub_10015CDAC;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10015CDAC()
{
  (*(void (**)(void, void, void))(v0 + 16))(*(void *)(v0 + 72), *(void *)(v0 + 64), 0);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10015CE24()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = (void (*)(uint64_t, void, uint64_t))v0[2];
  swift_errorRetain();
  v2(v1, 0, 1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

unint64_t sub_10015CEB8()
{
  unint64_t result = qword_10163C9A8;
  if (!qword_10163C9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C9A8);
  }
  return result;
}

unint64_t sub_10015CF0C()
{
  unint64_t result = qword_10163C9B0;
  if (!qword_10163C9B0)
  {
    sub_10001D4B0(255, (unint64_t *)&qword_101640E40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C9B0);
  }
  return result;
}

unint64_t sub_10015CF74()
{
  unint64_t result = qword_10163C9B8;
  if (!qword_10163C9B8)
  {
    type metadata accessor for MessagingQueryController();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163C9B8);
  }
  return result;
}

void sub_10015CFCC(uint64_t a1)
{
  sub_10127AB88(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10015CFD8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10015D010()
{
  return sub_10015CAC0(*(void *)(v0 + 16));
}

uint64_t sub_10015D018()
{
  qword_10163C988 = *(void *)(v0 + 16);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRetain();
}

unsigned char *storeEnumTagSinglePayload for FamilyCircle.FamilyCircleError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10015D124);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FamilyCircle.FamilyCircleError()
{
  return &type metadata for FamilyCircle.FamilyCircleError;
}

unint64_t sub_10015D160()
{
  unint64_t result = qword_10163C9D0[0];
  if (!qword_10163C9D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10163C9D0);
  }
  return result;
}

uint64_t sub_10015D1B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10015D1E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v8 = sub_10000588C(&qword_101639628);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, &qword_101639628);
    sub_100163778(a2, a3, type metadata accessor for MultipartAccessoryPairingInfo, type metadata accessor for MultipartAccessoryPairingInfo, type metadata accessor for MultipartAccessoryPairingInfo, (void (*)(void))sub_100E7E760, (uint64_t)v10);
    sub_10001CFB8(a2, a3);
    return sub_10001DAB4((uint64_t)v10, &qword_101639628);
  }
  else
  {
    sub_1001740B8(a1, (uint64_t)v13, type metadata accessor for MultipartAccessoryPairingInfo);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *unsigned int v4 = 0x8000000000000000;
    sub_10016BCD8((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *unsigned int v4 = v18;
    swift_bridgeObjectRelease();
    return sub_10001CFB8(a2, a3);
  }
}

uint64_t sub_10015D3F8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v8 = sub_10000588C(&qword_101639C18);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, &qword_101639C18);
    sub_1001634E8(a2, a3, (uint64_t)v10);
    sub_10001CFB8(a2, a3);
    return sub_10001DAB4((uint64_t)v10, &qword_101639C18);
  }
  else
  {
    sub_10001D608(a1, (uint64_t)v13, (uint64_t *)&unk_1016477E0);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *unsigned int v4 = 0x8000000000000000;
    sub_10016BE48((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *unsigned int v4 = v18;
    swift_bridgeObjectRelease();
    return sub_10001CFB8(a2, a3);
  }
}

uint64_t sub_10015D5C4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v8 = sub_10000588C(&qword_10163CB78);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, &qword_10163CB78);
    sub_100163778(a2, a3, type metadata accessor for OwnedBeaconGroup.PairingState, type metadata accessor for OwnedBeaconGroup.PairingState, type metadata accessor for OwnedBeaconGroup.PairingState, (void (*)(void))sub_100E7EDD8, (uint64_t)v10);
    sub_10001CFB8(a2, a3);
    return sub_10001DAB4((uint64_t)v10, &qword_10163CB78);
  }
  else
  {
    sub_1001740B8(a1, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *unsigned int v4 = 0x8000000000000000;
    sub_10016C250((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *unsigned int v4 = v18;
    swift_bridgeObjectRelease();
    return sub_10001CFB8(a2, a3);
  }
}

uint64_t sub_10015D7D8(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10001DAB4(a1, &qword_101638CF0);
    sub_10016393C(a2, (uint64_t)v8);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    return sub_10001DAB4((uint64_t)v8, &qword_101638CF0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v3;
    *int v3 = 0x8000000000000000;
    sub_10016C514((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v16;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }
}

uint64_t sub_10015D9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_100173E4C((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *int v3 = 0x8000000000000000;
    sub_10016C700(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *int v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10001DAB4(a1, (uint64_t *)&unk_101644360);
    sub_100163B04(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_101644360);
  }
}

uint64_t sub_10015DAA0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_100173E4C((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_10016C854(v9, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for CodingUserInfoKey();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_10001DAB4(a1, (uint64_t *)&unk_101644360);
    sub_100163C08(a2, v9);
    uint64_t v7 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
    return sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_101644360);
  }
}

uint64_t sub_10015DBC0(uint64_t a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10163CB68);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, &qword_10163CB68);
    sub_100163E44((uint64_t)a2, (uint64_t)v8);

    return sub_10001DAB4((uint64_t)v8, &qword_10163CB68);
  }
  else
  {
    sub_1001740B8(a1, (uint64_t)v11, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v3;
    *int v3 = 0x8000000000000000;
    sub_10016CBEC((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v16;

    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10015DD7C(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10163EB60);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ObservedAdvertisement(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, &qword_10163EB60);
    sub_10016409C(a2, (uint64_t)v8);
    sub_100174058(a2, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    return sub_10001DAB4((uint64_t)v8, &qword_10163EB60);
  }
  else
  {
    sub_1001740B8(a1, (uint64_t)v11, type metadata accessor for ObservedAdvertisement);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v3;
    *int v3 = 0x8000000000000000;
    sub_10016D070((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v16;
    swift_bridgeObjectRelease();
    return sub_100174058(a2, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  }
}

uint64_t sub_10015DF64(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1001710D0(a1, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100E805B0, (void (*)(void))sub_100E697D4, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7C79C);
    *uint64_t v2 = v18;
    swift_bridgeObjectRelease();
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(a2, v7);
  }
  else
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_1007240CC(a2);
    char v12 = v11;
    swift_bridgeObjectRelease();
    if (v12)
    {
      char v13 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v14 = *v2;
      uint64_t v19 = *v3;
      *int v3 = 0x8000000000000000;
      if ((v13 & 1) == 0)
      {
        sub_100E805B0();
        uint64_t v14 = v19;
      }
      uint64_t v15 = *(void *)(v14 + 48);
      uint64_t v16 = type metadata accessor for UUID();
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15 + *(void *)(*(void *)(v16 - 8) + 72) * v10, v16);
      sub_100167790(v10, v14);
      *int v3 = v14;
      swift_bridgeObjectRelease();
    }
    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a2, v17);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10015E184(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10001DAB4(a1, (uint64_t *)&unk_10163AC90);
    sub_100164290(a2, (uint64_t)v8);
    return sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v3;
    *int v3 = 0x8000000000000000;
    sub_10016D58C((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v16;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10015E340(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10163CBC8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, &qword_10163CBC8);
    sub_100165AE8(a2, (uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator, (uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator, (uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator, (void (*)(void))sub_100E80BEC, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10001DAB4((uint64_t)v8, &qword_10163CBC8);
  }
  else
  {
    sub_1001740B8(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_10016D89C((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_10015E5B0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_10001CEB0((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_10016E558((uint64_t)v9, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100E81A60, (void (*)(void))sub_100E6D110, (uint64_t (*)(uint64_t, uint64_t))sub_10001CEB0, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7C99C);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_10001DAB4(a1, (uint64_t *)&unk_10164E7C0);
    sub_100165354(a2, (void (*)(unint64_t, uint64_t))sub_10001CEB0, (void (*)(void))sub_100E81A60, (uint64_t)v9);
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
    return sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_10164E7C0);
  }
}

uint64_t sub_10015E748(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10001DAB4(a1, (uint64_t *)&unk_10163AC90);
    sub_10016488C(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_10016E75C((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_10015E974(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_10016F68C(a1, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
  }
  else
  {
    uint64_t result = sub_1007248D8(a2);
    if ((v8 & 1) == 0) {
      return result;
    }
    unint64_t v9 = result;
    int v10 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v2;
    uint64_t v14 = *v3;
    *int v3 = 0x8000000000000000;
    if (!v10)
    {
      sub_100E83468();
      uint64_t v11 = v14;
    }
    uint64_t v12 = *(void **)(*(void *)(v11 + 56) + 8 * v9);
    sub_100169234(v9, v11);
    *int v3 = v11;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10015EA54(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101638D50);
  __chkstk_darwin(v6 - 8);
  char v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BeaconEstimatedLocation();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, (uint64_t *)&unk_101638D50);
    sub_100165AE8(a2, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation, (void (*)(void))sub_100E841B0, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_101638D50);
  }
  else
  {
    sub_1001740B8(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_10016FC68((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_10015ECC4(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10163CBD8);
  __chkstk_darwin(v6 - 8);
  char v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101660F20);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10001DAB4(a1, &qword_10163CBD8);
    sub_10016587C(a2, &qword_101660F20, (void (*)(void))sub_100E84878, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10001DAB4((uint64_t)v8, &qword_10163CBD8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100172064((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100E84878, (void (*)(void))sub_100E72858, &qword_101660F20, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7CFF0);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_10015EF54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v8 = sub_10000588C(&qword_101669310);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SecureLocation();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, &qword_101669310);
    sub_100164EBC(a2, a3, (uint64_t (*)(void))type metadata accessor for SecureLocation, (uint64_t (*)(void))type metadata accessor for SecureLocation, (uint64_t (*)(void))type metadata accessor for SecureLocation, (void (*)(void))sub_100E84DF8, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_10001DAB4((uint64_t)v10, &qword_101669310);
  }
  else
  {
    sub_1001740B8(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *unsigned int v4 = 0x8000000000000000;
    sub_100170550((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *unsigned int v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10015F164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v8 = sub_10000588C(&qword_10163CBB8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SecureLocationsSubscription();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, &qword_10163CBB8);
    sub_100164EBC(a2, a3, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription, (void (*)(void))sub_100E850F0, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_10001DAB4((uint64_t)v10, &qword_10163CBB8);
  }
  else
  {
    sub_1001740B8(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *unsigned int v4 = 0x8000000000000000;
    sub_1001708A4((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *unsigned int v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10015F374(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10163CBC0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101660EA0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, &qword_10163CBC0);
    sub_100165098(a2, &qword_101660EA0, (void (*)(void))sub_100E857B4, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10001DAB4((uint64_t)v8, &qword_10163CBC0);
  }
  else
  {
    sub_10001D608(a1, (uint64_t)v11, &qword_101660EA0);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_1001714AC((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100E857B4, (void (*)(void))sub_100E744E8, &qword_101660EA0, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7D274);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_10015F5EC(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BeaconNamingRecord();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, &qword_10163B9E0);
    sub_100165AE8(a2, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (void (*)(void))sub_100E8695C, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10001DAB4((uint64_t)v8, &qword_10163B9E0);
  }
  else
  {
    sub_1001740B8(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_1001712D8((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_10015F85C(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10163CBA0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_10164E870);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, &qword_10163CBA0);
    sub_100165098(a2, (uint64_t *)&unk_10164E870, (void (*)(void))sub_100E869A4, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10001DAB4((uint64_t)v8, &qword_10163CBA0);
  }
  else
  {
    sub_10001D608(a1, (uint64_t)v11, (uint64_t *)&unk_10164E870);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_1001714AC((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100E869A4, (void (*)(void))sub_100E76900, (uint64_t *)&unk_10164E870, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7D4A0);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_10015FAD4(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10163CBA8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163CBB0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, &qword_10163CBA8);
    sub_100165098(a2, &qword_10163CBB0, (void (*)(void))sub_100E86D1C, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10001DAB4((uint64_t)v8, &qword_10163CBA8);
  }
  else
  {
    sub_10001D608(a1, (uint64_t)v11, &qword_10163CBB0);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_1001714AC((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100E86D1C, (void (*)(void))sub_100E76DF8, &qword_10163CBB0, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7D590);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_10015FD4C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 == 15)
  {
    sub_10016526C(a3, a4, &v11);
    sub_10001CFB8(a3, a4);
    return sub_100037A24(v11, *((unint64_t *)&v11 + 1));
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v11 = *v4;
    *unsigned int v4 = 0x8000000000000000;
    sub_1001716D4(a1, a2, a3, a4, isUniquelyReferenced_nonNull_native);
    *unsigned int v4 = v11;
    swift_bridgeObjectRelease();
    return sub_10001CFB8(a3, a4);
  }
}

uint64_t sub_10015FE1C(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10163CB98);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_1016609B0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10001DAB4(a1, &qword_10163CB98);
    sub_10016587C(a2, &qword_1016609B0, (void (*)(void))sub_100E871F4, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10001DAB4((uint64_t)v8, &qword_10163CB98);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100172064((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100E871F4, (void (*)(void))sub_100E778E4, &qword_1016609B0, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7D59C);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_1001600AC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_10001CEB0((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_10016E558((uint64_t)v9, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100E87208, (void (*)(void))sub_100E778F8, (uint64_t (*)(uint64_t, uint64_t))sub_10001CEB0, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7C99C);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_100165354(a2, (void (*)(unint64_t, uint64_t))sub_10001CEB0, (void (*)(void))sub_100E87208, (uint64_t)v9);
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
    if (v10) {
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v9);
    }
  }
  return result;
}

uint64_t sub_100160238(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10163CB58);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101660720);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10001DAB4(a1, &qword_10163CB58);
    sub_10016587C(a2, &qword_101660720, (void (*)(void))sub_100E81240, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10001DAB4((uint64_t)v8, &qword_10163CB58);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100172064((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100E81240, (void (*)(void))sub_100E6BB90, &qword_101660720, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7D674);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_1001604C8(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10163CB88);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BeaconScanner.AISLookupState(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, &qword_10163CB88);
    sub_1001656AC(a2, (uint64_t)v8);
    uint64_t v13 = sub_10000588C(&qword_10163D210);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10001DAB4((uint64_t)v8, &qword_10163CB88);
  }
  else
  {
    sub_1001740B8(a1, (uint64_t)v11, type metadata accessor for BeaconScanner.AISLookupState);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100171E8C((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = sub_10000588C(&qword_10163D210);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_1001606F0(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10163CB80);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101660970);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10001DAB4(a1, &qword_10163CB80);
    sub_10016587C(a2, &qword_101660970, (void (*)(void))sub_100E87C8C, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10001DAB4((uint64_t)v8, &qword_10163CB80);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100172064((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100E87C8C, (void (*)(void))sub_100E78984, &qword_101660970, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7D8B0);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_100160980(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10163CB70);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AccessoryFirmwareUpdateStateInfo();
  __chkstk_darwin(updated);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, &qword_10163CB70);
    sub_100165AE8(a2, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo, (void (*)(void))sub_100E88F68, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10001DAB4((uint64_t)v8, &qword_10163CB70);
  }
  else
  {
    sub_1001740B8(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateStateInfo);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100172C2C((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_100160BF0(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = sub_10000588C(&qword_10163CBD0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo();
  __chkstk_darwin(updated);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_10001DAB4(a1, &qword_10163CBD0);
    sub_100165AE8(a2, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo, (void (*)(void))sub_100E88FB0, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_10001DAB4((uint64_t)v8, &qword_10163CBD0);
  }
  else
  {
    sub_1001740B8(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *int v3 = 0x8000000000000000;
    sub_100172E00((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *int v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

unint64_t sub_100160E60(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A0618, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_100160EB0(char a1)
{
  return qword_10134C5D8[a1];
}

uint64_t sub_100160EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_100160F3C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_100160FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_100161018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

unint64_t sub_100161088@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100160E60(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001610B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100160EB0(*v1);
  *a1 = result;
  a1[1] = 0xE100000000000000;
  return result;
}

uint64_t sub_1001610E8()
{
  return sub_100160EB0(*v0);
}

uint64_t sub_100161108@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100160EAC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100161130@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100173E34();
  *a1 = result;
  return result;
}

uint64_t sub_10016115C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_1001611B0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

BOOL static Message.MessageError.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Message.MessageError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int Message.MessageError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_100161284(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Message.MessageError.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100161290()
{
  return Message.MessageError.hashValue.getter(*v0);
}

void sub_100161298(uint64_t a1)
{
  Message.MessageError.hash(into:)(a1, *v1);
}

Swift::Int sub_1001612A0()
{
  Hasher.init(_seed:)();
  Message.MessageError.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t Message.type.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Message.version.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t SessionMessage.identifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t SessionMessage.init<A>(type:version:payload:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v38 = a6;
  uint64_t v40 = a3;
  uint64_t v12 = type metadata accessor for CodingUserInfoKey();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = *(void *)(a4 - 8);
  uint64_t v42 = a1;
  uint64_t v16 = a1;
  uint64_t v17 = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(a7, v16, a4);
  uint64_t v18 = type metadata accessor for SessionMessage();
  *(void *)(a7 + *(int *)(v18 + 36)) = a2;
  uint64_t v19 = a7 + *(int *)(v18 + 40);
  uint64_t v36 = v18;
  uint64_t v37 = v19;
  UUID.init()();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_100010324(v12, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v20, v12);
  v44[3] = &type metadata for Bool;
  LOBYTE(v44[0]) = 1;
  uint64_t v21 = (void (*)(char *, void))dispatch thunk of PropertyListEncoder.userInfo.modify();
  sub_10015DAA0((uint64_t)v44, (uint64_t)v15);
  v21(v43, 0);
  sub_100162468(a5, a5);
  uint64_t v22 = *(void *)(a5 - 8);
  swift_allocObject();
  uint64_t v23 = static Array._adoptStorage(_:count:)();
  uint64_t v24 = v40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v25, v40, a5);
  type metadata accessor for Array();
  v44[0] = v23;
  v44[5] = v38;
  swift_getWitnessTable();
  uint64_t v26 = v39;
  uint64_t v27 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v26)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, a5);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v29(v42, v17);
    swift_bridgeObjectRelease();
    v29(a7, v17);
    uint64_t v30 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v37, v30);
  }
  else
  {
    uint64_t v32 = v27;
    uint64_t v33 = v28;
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, a5);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v17);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v34 = (uint64_t *)(a7 + *(int *)(v36 + 44));
    uint64_t *v34 = v32;
    v34[1] = v33;
  }
  return result;
}

uint64_t type metadata accessor for SessionMessage()
{
  return sub_1000103A0();
}

uint64_t SessionMessage.extract<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = a4;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v20 = (char *)v17 - v9;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  type metadata accessor for Array();
  uint64_t v10 = a1;
  uint64_t v21 = a3;
  swift_getWitnessTable();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t result = swift_release();
  if (!v4)
  {
    uint64_t v13 = v18;
    uint64_t v12 = v19;
    v17[1] = v10;
    swift_getWitnessTable();
    uint64_t v14 = v20;
    Collection.first.getter();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void *)(a2 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v14, v8);
      type metadata accessor for SessionMessage.MessageError();
      swift_getWitnessTable();
      swift_allocError();
      unsigned char *v16 = 0;
      return swift_willThrow();
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v12, v14, a2);
    }
  }
  return result;
}

uint64_t SessionMessage.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  v13[0] = a2;
  v13[1] = v3;
  type metadata accessor for SessionMessage.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v13 - v6;
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  uint64_t v8 = v13[2];
  uint64_t v9 = v13[3];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v9) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v11 = v5;
  uint64_t v12 = v13[0];
  LOBYTE(v14) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v14) = 2;
  type metadata accessor for UUID();
  sub_100173FA8(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  long long v14 = *(_OWORD *)(v8 + *(int *)(v12 + 44));
  char v15 = 3;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v7, v4);
}

uint64_t SessionMessage.init(from:)@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v34 = type metadata accessor for UUID();
  uint64_t v31 = *(void *)(v34 - 8);
  uint64_t v7 = __chkstk_darwin(v34);
  uint64_t v30 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *((void *)a2 - 1);
  __chkstk_darwin(v7);
  uint64_t v37 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SessionMessage.CodingKeys();
  swift_getWitnessTable();
  uint64_t v36 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v32 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v35 = a3;
  uint64_t v12 = type metadata accessor for SessionMessage();
  uint64_t v28 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  long long v14 = (char *)&v28 - v13;
  sub_10001CD44(a1, a1[3]);
  uint64_t v38 = v11;
  uint64_t v15 = (uint64_t)v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v16 = v14;
  uint64_t v39 = a1;
  uint64_t v18 = v33;
  uint64_t v17 = v34;
  LOBYTE(v40) = 0;
  uint64_t v19 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v20 = *(void (**)(char *, char *, char *))(v18 + 32);
  uint64_t v21 = v37;
  uint64_t v37 = a2;
  v20(v16, v21, a2);
  LOBYTE(v40) = 1;
  uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v35 = v12;
  *(void *)&v16[*(int *)(v12 + 36)] = v22;
  LOBYTE(v40) = 2;
  sub_100173FA8((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v23 = v30;
  uint64_t v24 = v17;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v25 = v35;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v16[*(int *)(v35 + 40)], v23, v24);
  char v41 = 3;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v38, v19);
  *(_OWORD *)&v16[*(int *)(v25 + 44)] = v40;
  uint64_t v26 = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 16))(v29, v16, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v39);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v16, v25);
}

uint64_t sub_100162248@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SessionMessage.init(from:)(a1, *(char **)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_100162268(void *a1, uint64_t a2)
{
  return SessionMessage.encode(to:)(a1, a2);
}

uint64_t SessionMessage.description.getter(uint64_t a1)
{
  _StringGuts.grow(_:)(65);
  v3._object = (void *)0x80000001013F4260;
  v3._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v3);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4._countAndFlagsBits = 0x6F6973726576202CLL;
  v4._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x69746E656469202CLL;
  v6._object = (void *)0xEE00203A72656966;
  String.append(_:)(v6);
  type metadata accessor for UUID();
  sub_100173FA8((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x64616F6C79617020;
  v8._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v8);
  uint64_t v9 = (uint64_t *)(v1 + *(int *)(a1 + 44));
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000361E0(*v9, v11);
  v12._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v10, v11);
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t sub_100162468(uint64_t a1, uint64_t a2)
{
  if (swift_isClassType()) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    return sub_10000588C(&qword_10166BD20);
  }
  else
  {
    return type metadata accessor for _ContiguousArrayStorage(0, a2);
  }
}

uint64_t type metadata accessor for SessionMessage.MessageError()
{
  return sub_1000103A0();
}

uint64_t type metadata accessor for SessionMessage.CodingKeys()
{
  return sub_1000103A0();
}

uint64_t sub_100162508()
{
  return swift_getWitnessTable();
}

uint64_t sub_100162524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_10016252C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_10016260C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64) + 7;
  unsigned int v12 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v11 + ((v10 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + (((v12 | 7) + 16) & ~(unint64_t)(v12 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v16 = v8;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    uint64_t v17 = (void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v18 = (void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v17 = *v18;
    uint64_t v19 = ((unint64_t)v17 + v10 + 8) & ~v10;
    uint64_t v20 = ((unint64_t)v18 + v10 + 8) & ~v10;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v19, v20, v16);
    uint64_t v21 = (void *)((v11 + v19) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (uint64_t *)((v11 + v20) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    sub_1000361E0(*v22, v24);
    void *v21 = v23;
    v21[1] = v24;
  }
  return a1;
}

uint64_t sub_1001627F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v9 = (uint64_t *)((*(void *)(v7 + 56) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];

  return sub_10001CFB8(v10, v11);
}

uint64_t sub_1001628BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10 + 16;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v7 + v12 + 8) & ~v12;
  uint64_t v14 = ((unint64_t)v8 + v12 + 8) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, v14, v9);
  uint64_t v15 = *(void *)(v11 + 48) + 7;
  uint64_t v16 = (void *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (uint64_t *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_1000361E0(*v17, v19);
  void *v16 = v18;
  v16[1] = v19;
  return a1;
}

uint64_t sub_1001629C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v7 + v12 + 8) & ~v12;
  uint64_t v14 = ((unint64_t)v8 + v12 + 8) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v13, v14, v9);
  uint64_t v15 = *(void *)(v11 + 40) + 7;
  uint64_t v16 = (uint64_t *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (uint64_t *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_1000361E0(*v17, v19);
  uint64_t v20 = *v16;
  unint64_t v21 = v16[1];
  uint64_t *v16 = v18;
  v16[1] = v19;
  sub_10001CFB8(v20, v21);
  return a1;
}

uint64_t sub_100162ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10 + 32;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v7 + v12 + 8) & ~v12;
  uint64_t v14 = ((unint64_t)v8 + v12 + 8) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13, v14, v9);
  *(_OWORD *)((*(void *)(v11 + 32) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v11 + 32)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_100162BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v7 + v12 + 8) & ~v12;
  uint64_t v14 = ((unint64_t)v8 + v12 + 8) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v13, v14, v9);
  uint64_t v15 = *(void *)(v11 + 24) + 7;
  uint64_t v16 = (uint64_t *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  *(_OWORD *)uint64_t v16 = *(_OWORD *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  sub_10001CFB8(v17, v18);
  return a1;
}

uint64_t sub_100162CC4(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v7) {
    unsigned int v11 = v7;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(void *)(v6 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  if (v11 <= 0xC) {
    unsigned int v14 = 12;
  }
  else {
    unsigned int v14 = v11;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64) + 7;
  if (v14 < a2)
  {
    unint64_t v16 = ((v15 + ((v13 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v17 = v16 & 0xFFFFFFF8;
    if ((v16 & 0xFFFFFFF8) != 0) {
      unsigned int v18 = 2;
    }
    else {
      unsigned int v18 = a2 - v14 + 1;
    }
    if (v18 >= 0x10000) {
      unsigned int v19 = 4;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v18 < 0x100) {
      unsigned int v19 = 1;
    }
    if (v18 >= 2) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    switch(v20)
    {
      case 1:
        int v21 = *((unsigned __int8 *)a1 + v16);
        if (!v21) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v21 = *(unsigned __int16 *)((char *)a1 + v16);
        if (v21) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100162F58);
      case 4:
        int v21 = *(int *)((char *)a1 + v16);
        if (!v21) {
          break;
        }
LABEL_25:
        int v23 = v21 - 1;
        if (v17)
        {
          int v23 = 0;
          int v24 = *a1;
        }
        else
        {
          int v24 = 0;
        }
        return v14 + (v24 | v23) + 1;
      default:
        break;
    }
  }
  if (v7 == v14)
  {
    uint64_t v25 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v6 + 48);
    return v25(a1, v7, v5);
  }
  else
  {
    unint64_t v26 = ((((unint64_t)a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + v13 + 8) & ~v13;
    if (v10 == v14)
    {
      uint64_t v27 = *(uint64_t (**)(unint64_t))(v9 + 48);
      return v27(v26);
    }
    else
    {
      uint64_t v28 = *(void *)(((v15 + v26) & 0xFFFFFFFFFFFFFFF8) + 8) >> 60;
      if (((4 * v28) & 0xC) != 0) {
        return 16 - ((4 * v28) & 0xC | (v28 >> 2));
      }
      else {
        return 0;
      }
    }
  }
}

void sub_100162F6C(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v30 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = *(void *)(v10 + 64);
  if (v13 <= 0xC) {
    unsigned int v17 = 12;
  }
  else {
    unsigned int v17 = v13;
  }
  uint64_t v18 = v16 + 7;
  unint64_t v19 = ((v18 + ((v15 + ((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v17 >= a3)
  {
    int v22 = 0;
    int v23 = a2 - v17;
    if (a2 <= v17)
    {
LABEL_20:
      switch(v22)
      {
        case 1:
          *((unsigned char *)a1 + v19) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)((char *)a1 + v19) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)((char *)a1 + v19) = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if (v9 == v17)
            {
              unint64_t v26 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v30 + 56);
              v26(a1, a2, v9, v7);
            }
            else
            {
              unint64_t v27 = ((((unint64_t)a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) + v15 + 8) & ~v15;
              if (v12 == v17)
              {
                uint64_t v28 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
                v28(v27, a2);
              }
              else
              {
                uint64_t v29 = (void *)((v18 + v27) & 0xFFFFFFFFFFFFFFF8);
                if (a2 > 0xC)
                {
                  *uint64_t v29 = (a2 - 13);
                  v29[1] = 0;
                }
                else
                {
                  *uint64_t v29 = 0;
                  v29[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v18 + ((v15 + ((v14 + 7) & 0xFFFFFFF8) + 8) & ~v15)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v20 = a3 - v17 + 1;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v20 >= 0x10000) {
      int v21 = 4;
    }
    else {
      int v21 = 2;
    }
    if (v20 < 0x100) {
      int v21 = 1;
    }
    if (v20 >= 2) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    int v23 = a2 - v17;
    if (a2 <= v17) {
      goto LABEL_20;
    }
  }
  if (((v18 + ((v15 + ((v14 + 7) & 0xFFFFFFF8) + 8) & ~v15)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v24 = v23;
  }
  else {
    int v24 = 1;
  }
  if (((v18 + ((v15 + ((v14 + 7) & 0xFFFFFFF8) + 8) & ~v15)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v25 = ~v17 + a2;
    bzero(a1, ((v18 + ((v15 + ((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v25;
  }
  switch(v22)
  {
    case 1:
      *((unsigned char *)a1 + v19) = v24;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v19) = v24;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x100163264);
    case 4:
      *(_DWORD *)((char *)a1 + v19) = v24;
      break;
    default:
      return;
  }
}

uint64_t sub_10016328C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

unsigned char *sub_100163294(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100163360);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_100163388(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100163454);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_10016347C()
{
  return swift_getWitnessTable();
}

uint64_t sub_100163498()
{
  return swift_getWitnessTable();
}

uint64_t sub_1001634B4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1001634D0(uint64_t a1)
{
  return sub_100166004(a1, (void (*)(void))sub_100E7E098);
}

uint64_t sub_1001634E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1007241A0(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *unsigned int v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100E7E7A8();
      uint64_t v11 = v21;
    }
    sub_10001CFB8(*(void *)(*(void *)(v11 + 48) + 16 * v8), *(void *)(*(void *)(v11 + 48) + 16 * v8 + 8));
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = sub_10000588C((uint64_t *)&unk_1016477E0);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_10001D608(v12 + *(void *)(v20 + 72) * v8, a3, (uint64_t *)&unk_1016477E0);
    sub_100166260(v8, v11);
    *unsigned int v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = sub_10000588C((uint64_t *)&unk_1016477E0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_100163690(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100723FF4(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *int v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100E7EC1C();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_100166488(v6, v9);
  *int v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100163778@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(void)@<X4>, void (*a6)(void)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12 = v7;
  swift_bridgeObjectRetain();
  unint64_t v16 = sub_1007241A0(a1, a2);
  LOBYTE(a2) = v17;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v12;
    uint64_t v29 = *v12;
    uint64_t *v12 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a6();
      uint64_t v19 = v29;
    }
    sub_10001CFB8(*(void *)(*(void *)(v19 + 48) + 16 * v16), *(void *)(*(void *)(v19 + 48) + 16 * v16 + 8));
    uint64_t v20 = *(void *)(v19 + 56);
    uint64_t v21 = a3(0);
    uint64_t v28 = *(void *)(v21 - 8);
    sub_1001740B8(v20 + *(void *)(v28 + 72) * v16, a7, a4);
    sub_100166660(v16, v19, a5);
    uint64_t *v12 = v19;
    swift_bridgeObjectRelease();
    int v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
    uint64_t v23 = a7;
    uint64_t v24 = 0;
    uint64_t v25 = v21;
  }
  else
  {
    uint64_t v26 = a3(0);
    int v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
    uint64_t v25 = v26;
    uint64_t v23 = a7;
    uint64_t v24 = 1;
  }

  return v22(v23, v24, 1, v25);
}

uint64_t sub_10016393C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1007240CC(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *int v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100E7F31C();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v20 = v12;
    unint64_t v13 = *(void *)(v12 + 72) * v6;
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v10 + v13, v11);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, *(void *)(v9 + 56) + v13, v11);
    sub_100166888(v6, v9);
    *int v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v11;
  }
  else
  {
    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

double sub_100163B04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unsigned int v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100723FF4(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *unsigned int v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100E7F618();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_100173E4C((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_100166B8C(v8, v11);
    *unsigned int v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

double sub_100163C08@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  int v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1007242F0(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *int v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100E7F638();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    sub_100173E4C((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_100166D64(v6, v9);
    *int v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_100163D34(uint64_t a1)
{
  unint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1007240CC(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 6;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *unint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100E7F8E0();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 + 56) + v4);
  sub_10016701C(v4, v7);
  *unint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100163E2C(uint64_t a1)
{
  return sub_100166004(a1, (void (*)(void))sub_100E7F8EC);
}

uint64_t sub_100163E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100724354(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v19 = *v3;
    *int v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100E7F918();
      uint64_t v9 = v19;
    }

    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
    uint64_t v18 = *(void *)(v11 - 8);
    sub_1001740B8(v10 + *(void *)(v18 + 72) * v6, a2, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
    sub_100169D58(v6, v9, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
    *int v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v13 = a2;
    uint64_t v14 = 0;
    uint64_t v15 = v11;
  }
  else
  {
    uint64_t v16 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v15 = v16;
    uint64_t v13 = a2;
    uint64_t v14 = 1;
  }

  return v12(v13, v14, 1, v15);
}

uint64_t sub_100163FF0(uint64_t a1)
{
  unint64_t v2 = v1;
  unint64_t v3 = sub_100723EF4(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *unint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100E7FD24();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 16 * v5);
  sub_1001675F4(v5, v7);
  *unint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10016409C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1007245E4(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100E800B8();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for BeaconIdentifier();
    sub_100174058(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for ObservedAdvertisement(0);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_1001740B8(v12 + *(void *)(v20 + 72) * v6, a2, type metadata accessor for ObservedAdvertisement);
    sub_100169974(v6, v9, type metadata accessor for ObservedAdvertisement);
    *unint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for ObservedAdvertisement(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_100164278(uint64_t a1)
{
  return sub_100164D70(a1, (void (*)(void))sub_100E805B0);
}

uint64_t sub_100164290@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100723FB0(a1);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *v3;
    uint64_t v20 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100E80940();
      uint64_t v10 = v20;
    }
    uint64_t v11 = *(void *)(v10 + 56);
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v19 = *(void *)(v12 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 32))(a2, v11 + *(void *)(v19 + 72) * v6, v12);
    sub_100167A88(v6, v10);
    *unint64_t v3 = v10;
    swift_bridgeObjectRelease();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
    uint64_t v14 = a2;
    uint64_t v15 = 0;
    uint64_t v16 = v12;
  }
  else
  {
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    uint64_t v16 = v17;
    uint64_t v14 = a2;
    uint64_t v15 = 1;
  }

  return v13(v14, v15, 1, v16);
}

uint64_t sub_10016442C(uint64_t a1)
{
  unint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100724804(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *unint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100E80BCC();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for MACAddress();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_100167314(v4, v7, (uint64_t (*)(void))&type metadata accessor for MACAddress, (unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  *unint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100164568(uint64_t a1)
{
  return sub_100166004(a1, (void (*)(void))sub_100E81214);
}

uint64_t sub_100164580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10016587C(a1, &qword_101660720, (void (*)(void))sub_100E81240, a2);
}

uint64_t sub_1001645A0(uint64_t a1)
{
  return sub_100166004(a1, (void (*)(void))sub_100E8141C);
}

uint64_t sub_1001645B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100724804(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100E8143C();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for MACAddress();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_100167D8C(v6, v9);
    *unint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_100164788(uint64_t a1)
{
  unint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100724804(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v12 = *v2;
  *unint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100E8145C();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for MACAddress();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1001680D4(v4, v7);
  *unint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10016488C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1007240CC(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100E81D34();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_1001683E4(v6, v9, (uint64_t (*)(void))&type metadata accessor for Date);
    *unint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_100164A70(uint64_t a1)
{
  unint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100724A28(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  *unint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100E825C0();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  sub_100168780(v4, v7);
  *unint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_100164B48(uint64_t a1)
{
  unint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1007240CC(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0xF000000000000007;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *unint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100E82778();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_100167790(v4, v7);
  *unint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100164C40(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100723FF4(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *unint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100E82DA0();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_100168934(v6, v9);
  *unint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100164D10(uint64_t a1)
{
  return sub_100166004(a1, (void (*)(void))sub_100E84840);
}

uint64_t sub_100164D28(uint64_t a1)
{
  return sub_100166004(a1, (void (*)(void))sub_100E8484C);
}

uint64_t sub_100164D40(uint64_t a1)
{
  return sub_100164D70(a1, (void (*)(void))sub_100E8486C);
}

uint64_t sub_100164D58(uint64_t a1)
{
  return sub_100164D70(a1, (void (*)(void))sub_100E84E40);
}

uint64_t sub_100164D70(uint64_t a1, void (*a2)(void))
{
  unint64_t v4 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1007240CC(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v4;
  uint64_t v14 = *v4;
  *unint64_t v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    uint64_t v9 = v14;
  }
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_100167790(v6, v9);
  *unint64_t v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100164E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100164EBC(a1, a2, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription, (void (*)(void))sub_100E850F0, a3);
}

uint64_t sub_100164EBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(void)@<X4>, void (*a6)(void)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12 = v7;
  swift_bridgeObjectRetain();
  unint64_t v16 = sub_100723FF4(a1, a2);
  LOBYTE(a2) = v17;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v12;
    uint64_t v29 = *v12;
    uint64_t *v12 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a6();
      uint64_t v19 = v29;
    }
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(v19 + 56);
    uint64_t v21 = a3(0);
    uint64_t v28 = *(void *)(v21 - 8);
    sub_1001740B8(v20 + *(void *)(v28 + 72) * v16, a7, a4);
    sub_10016973C(v16, v19, a5);
    uint64_t *v12 = v19;
    swift_bridgeObjectRelease();
    int v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
    uint64_t v23 = a7;
    uint64_t v24 = 0;
    uint64_t v25 = v21;
  }
  else
  {
    uint64_t v26 = a3(0);
    int v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
    uint64_t v25 = v26;
    uint64_t v23 = a7;
    uint64_t v24 = 1;
  }

  return v22(v23, v24, 1, v25);
}

uint64_t sub_100165080(uint64_t a1)
{
  return sub_100166004(a1, (void (*)(void))sub_100E853AC);
}

uint64_t sub_100165098@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  char v7 = v4;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1007240CC(a1);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v7;
    uint64_t v25 = *v7;
    *char v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a3();
      uint64_t v13 = v25;
    }
    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14 + *(void *)(*(void *)(v15 - 8) + 72) * v10, v15);
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = sub_10000588C(a2);
    uint64_t v24 = *(void *)(v17 - 8);
    sub_10001D608(v16 + *(void *)(v24 + 72) * v10, a4, a2);
    sub_1001693F0(v10, v13, a2);
    *char v7 = v13;
    swift_bridgeObjectRelease();
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
    uint64_t v19 = a4;
    uint64_t v20 = 0;
    uint64_t v21 = v17;
  }
  else
  {
    uint64_t v22 = sub_10000588C(a2);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
    uint64_t v21 = v22;
    uint64_t v19 = a4;
    uint64_t v20 = 1;
  }

  return v18(v19, v20, 1, v21);
}

double sub_10016526C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100724CDC(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100E8702C();
      uint64_t v11 = v13;
    }
    sub_10001CFB8(*(void *)(*(void *)(v11 + 48) + 16 * v8), *(void *)(*(void *)(v11 + 48) + 16 * v8 + 8));
    *a3 = *(_OWORD *)(*(void *)(v11 + 56) + 16 * v8);
    sub_100169F54(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = xmmword_101347BB0;
  }
  return result;
}

double sub_100165354@<D0>(uint64_t a1@<X0>, void (*a2)(unint64_t, uint64_t)@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  char v7 = v4;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1007240CC(a1);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v7;
    uint64_t v17 = *v7;
    *char v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a3();
      uint64_t v13 = v17;
    }
    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14 + *(void *)(*(void *)(v15 - 8) + 72) * v10, v15);
    a2(*(void *)(v13 + 56) + 40 * v10, a4);
    sub_10016A13C(v10, v13);
    *char v7 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a4 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

double sub_1001654A4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100724804(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100E87228();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for MACAddress();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    *a2 = *(_OWORD *)(*(void *)(v9 + 56) + 16 * v6);
    sub_10016A458(v6, v9);
    *unint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = xmmword_101347BB0;
  }
  return result;
}

uint64_t sub_1001655B0(uint64_t a1)
{
  return sub_100166004(a1, (void (*)(void))sub_100E876D4);
}

uint64_t sub_1001655C8(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100724500(a1, a2, a3);
  LOBYTE(a3) = v9;
  swift_bridgeObjectRelease();
  if ((a3 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v4;
  uint64_t v14 = *v4;
  *unint64_t v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100E8773C();
    uint64_t v11 = v14;
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(*(void *)(v11 + 56) + 8 * v8);
  sub_10016A750(v8, v11);
  *unint64_t v4 = v11;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1001656AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100725314(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100E87900();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = sub_10000588C(&qword_10163D210);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for BeaconScanner.AISLookupState(0);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_1001740B8(v12 + *(void *)(v20 + 72) * v6, a2, type metadata accessor for BeaconScanner.AISLookupState);
    sub_10016A950(v6, v9);
    *unint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for BeaconScanner.AISLookupState(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_10016587C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  char v7 = v4;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1007240CC(a1);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v7;
    uint64_t v25 = *v7;
    *char v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a3();
      uint64_t v13 = v25;
    }
    uint64_t v14 = *(void *)(v13 + 48);
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14 + *(void *)(*(void *)(v15 - 8) + 72) * v10, v15);
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = sub_10000588C(a2);
    uint64_t v24 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v24 + 32))(a4, v16 + *(void *)(v24 + 72) * v10, v17);
    sub_1001693F0(v10, v13, a2);
    *char v7 = v13;
    swift_bridgeObjectRelease();
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
    uint64_t v19 = a4;
    uint64_t v20 = 0;
    uint64_t v21 = v17;
  }
  else
  {
    uint64_t v22 = sub_10000588C(a2);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
    uint64_t v21 = v22;
    uint64_t v19 = a4;
    uint64_t v20 = 1;
  }

  return v18(v19, v20, 1, v21);
}

uint64_t sub_100165A64(uint64_t a1)
{
  return sub_100166004(a1, (void (*)(void))sub_100E88214);
}

uint64_t sub_100165A7C(uint64_t a1)
{
  return sub_100166004(a1, (void (*)(void))sub_100E88F48);
}

uint64_t sub_100165A94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100165AE8(a1, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo, (uint64_t (*)(void))type metadata accessor for AccessoryFirmwareUpdateCommandInfo, (void (*)(void))sub_100E88FB0, a2);
}

uint64_t sub_100165AE8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, void (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  char v11 = v6;
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_1007240CC(a1);
  LOBYTE(a1) = v15;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v11;
    uint64_t v29 = *v11;
    *char v11 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a5();
      uint64_t v17 = v29;
    }
    uint64_t v18 = *(void *)(v17 + 48);
    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v14, v19);
    uint64_t v20 = *(void *)(v17 + 56);
    uint64_t v21 = a2(0);
    uint64_t v28 = *(void *)(v21 - 8);
    sub_1001740B8(v20 + *(void *)(v28 + 72) * v14, a6, a3);
    sub_1001683E4(v14, v17, a4);
    *char v11 = v17;
    swift_bridgeObjectRelease();
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
    uint64_t v23 = a6;
    uint64_t v24 = 0;
    uint64_t v25 = v21;
  }
  else
  {
    uint64_t v26 = a2(0);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
    uint64_t v25 = v26;
    uint64_t v23 = a6;
    uint64_t v24 = 1;
  }

  return v22(v23, v24, 1, v25);
}

uint64_t sub_100165CD4@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10072548C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100E89390();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
    sub_100174058(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, type metadata accessor for ShareAttemptTracker.AttemptKey);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_10016B008(v6, v9);
    *unint64_t v3 = v9;
    swift_bridgeObjectRelease();
    unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for Date();
    unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_100165EA0(uint64_t a1)
{
  return sub_100165ED0(a1, (void (*)(void))sub_100E89D44);
}

uint64_t sub_100165EB8(uint64_t a1)
{
  return sub_100165ED0(a1, (void (*)(void))sub_100E89D8C);
}

uint64_t sub_100165ED0(uint64_t a1, void (*a2)(void))
{
  unint64_t v4 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100725124(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v4;
  uint64_t v14 = *v4;
  *unint64_t v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    uint64_t v9 = v14;
  }
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = type metadata accessor for BeaconKeyManager.FileKey(0);
  sub_100174058(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, type metadata accessor for BeaconKeyManager.FileKey);
  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_10016B39C(v6, v9);
  *unint64_t v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100165FD4(uint64_t a1)
{
  return sub_100166004(a1, (void (*)(void))sub_100E89DD4);
}

uint64_t sub_100165FEC(uint64_t a1)
{
  return sub_100166004(a1, (void (*)(void))sub_100E8A074);
}

uint64_t sub_100166004(uint64_t a1, void (*a2)(void))
{
  unint64_t v4 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1007240CC(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v4;
  uint64_t v14 = *v4;
  *unint64_t v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    uint64_t v9 = v14;
  }
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_100167314(v6, v9, (uint64_t (*)(void))&type metadata accessor for UUID, &qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  *unint64_t v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100166150(uint64_t a1)
{
  unint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1007240CC(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *unint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100E8A32C();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 + 56) + 16 * v4);
  sub_10016B750(v4, v7);
  *unint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_100166260(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        unint64_t v11 = v9[1];
        Hasher.init(_seed:)();
        sub_1000361E0(v10, v11);
        Data.hash(into:)();
        Swift::Int v12 = Hasher._finalize()();
        double result = sub_10001CFB8(v10, v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v13 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = *(void *)(a2 + 48);
        uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
        uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1) {
          *uint64_t v15 = *v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = *(void *)(*(void *)(sub_10000588C((uint64_t *)&unk_1016477E0) - 8) + 72);
        int64_t v19 = v18 * v3;
        double result = v17 + v18 * v3;
        int64_t v20 = v18 * v6;
        unint64_t v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v19 == v20) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v13 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v13) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1 << result) - 1;
  }
  *uint64_t v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100166488(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          Swift::Int v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100166660(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v9 = ~v6;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v10 = (result + 1) & v9;
      while (1)
      {
        uint64_t v11 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v7);
        uint64_t v12 = *v11;
        unint64_t v13 = v11[1];
        Hasher.init(_seed:)();
        sub_1000361E0(v12, v13);
        Data.hash(into:)();
        Swift::Int v14 = Hasher._finalize()();
        double result = sub_10001CFB8(v12, v13);
        unint64_t v15 = v14 & v9;
        if (v4 >= (uint64_t)v10) {
          break;
        }
        if (v15 < v10) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v16 = *(void *)(a2 + 48);
        uint64_t v17 = (_OWORD *)(v16 + 16 * v4);
        uint64_t v18 = (_OWORD *)(v16 + 16 * v7);
        if (v4 != v7 || v17 >= v18 + 1) {
          *uint64_t v17 = *v18;
        }
        uint64_t v19 = *(void *)(a2 + 56);
        uint64_t v20 = *(void *)(*(void *)(a3(0) - 8) + 72);
        int64_t v21 = v20 * v4;
        double result = v19 + v20 * v4;
        int64_t v22 = v20 * v7;
        unint64_t v23 = v19 + v20 * v7 + v20;
        if (v21 < v22 || result >= v23)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v4 = v7;
          if (v21 == v22) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v9;
        if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v15 < v10) {
        goto LABEL_6;
      }
LABEL_11:
      if (v4 < (uint64_t)v15) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v25 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << v4) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(v5 + 8 * (result >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << result) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100166888(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v33 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v33;
    if ((*(void *)(v33 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      Swift::Int v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v30 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v32 = v13;
      uint64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v10;
        v30(v8, *(void *)(a2 + 48) + v15 * v10, v4);
        sub_100173FA8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v16)(v8, v4);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v19 < v31 || a1 < (uint64_t)v19) {
            goto LABEL_6;
          }
        }
        else if (v19 < v31 && a1 < (uint64_t)v19)
        {
          goto LABEL_6;
        }
        int64_t v22 = v15 * a1;
        if (v15 * a1 < v17 || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v17 + v15))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v22 != v17)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v23 = *(void *)(a2 + 56);
        unint64_t result = v23 + v22;
        if (v22 < v17 || result >= v23 + v17 + v15)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v22 == v17) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
        uint64_t v12 = v33;
      }
      while (((*(void *)(v33 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v24 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v24 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  uint64_t *v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100166B8C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          Swift::Int v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          int64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            _OWORD *v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100166D64(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v38 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v38;
    if ((*(void *)(v38 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v36 = (result + 1) & v11;
      Swift::Int v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v35 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v37 = v13;
      uint64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v10;
        v35(v8, *(void *)(a2 + 48) + v15 * v10, v4);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v16)(v8, v4);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_17:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t result = v22 + v15 * a1;
            unint64_t v23 = v22 + v17 + v15;
            if (v15 * a1 < v17 || result >= v23)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v17)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v25 = *(void *)(a2 + 56);
            uint64_t v26 = (_OWORD *)(v25 + 32 * a1);
            uint64_t v27 = (_OWORD *)(v25 + 32 * v10);
            uint64_t v12 = v38;
            if (a1 != v10 || (a1 = v10, v26 >= v27 + 2))
            {
              long long v28 = v27[1];
              _OWORD *v26 = *v27;
              v26[1] = v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_17;
        }
        uint64_t v12 = v38;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v29 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v29 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *uint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016701C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_100173FA8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            unint64_t v23 = (unsigned char *)(v22 + a1);
            uint64_t v24 = (unsigned char *)(v22 + v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *unint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100167314(int64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v44 = a5;
  uint64_t v45 = a6;
  uint64_t v43 = a4;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  unint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = a2 + 64;
  uint64_t v14 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v15 = (a1 + 1) & ~v14;
  if (((1 << v15) & *(void *)(a2 + 64 + 8 * (v15 >> 6))) != 0)
  {
    uint64_t v16 = ~v14;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v13 + 8 * (v15 >> 6)) & (1 << v15)) != 0)
    {
      uint64_t v17 = (result + 1) & v16;
      char v41 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v42 = v9 + 16;
      uint64_t v46 = *(void *)(v9 + 72);
      long long v40 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
      do
      {
        uint64_t v18 = v13;
        int64_t v19 = v46 * v15;
        v41(v12, *(void *)(a2 + 48) + v46 * v15, v8);
        unint64_t v20 = v17;
        uint64_t v21 = v16;
        sub_100173FA8(v43, v44);
        uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v40)(v12, v8);
        uint64_t v23 = v22 & v21;
        uint64_t v16 = v21;
        uint64_t v17 = v20;
        if (a1 >= (uint64_t)v20)
        {
          if (v23 >= v20 && a1 >= v23)
          {
LABEL_17:
            uint64_t v26 = *(void *)(a2 + 48);
            unint64_t result = v26 + v46 * a1;
            unint64_t v27 = v26 + v19 + v46;
            if (v46 * a1 < v19 || result >= v27)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              uint64_t v13 = v18;
            }
            else
            {
              BOOL v29 = v46 * a1 == v19;
              uint64_t v13 = v18;
              if (!v29) {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
              }
            }
            uint64_t v30 = *(void *)(a2 + 56);
            unint64_t v31 = (void *)(v30 + 8 * a1);
            uint64_t v32 = (void *)(v30 + 8 * v15);
            if (a1 != v15 || (a1 = v15, v31 >= v32 + 1))
            {
              *unint64_t v31 = *v32;
              a1 = v15;
            }
            goto LABEL_5;
          }
        }
        else if (v23 >= v20 || a1 >= v23)
        {
          goto LABEL_17;
        }
        uint64_t v13 = v18;
LABEL_5:
        unint64_t v15 = (v15 + 1) & v16;
      }
      while (((*(void *)(v13 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
    }
    uint64_t v33 = (uint64_t *)(v13 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v34 = *v33;
    uint64_t v35 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v33 = (uint64_t *)(v13 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v35 = *v33;
    uint64_t v34 = (-1 << a1) - 1;
  }
  *uint64_t v33 = v35 & v34;
  uint64_t v36 = *(void *)(a2 + 16);
  BOOL v37 = __OFSUB__(v36, 1);
  uint64_t v38 = v36 - 1;
  if (v37)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v38;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001675F4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        unint64_t v10 = (void *)(v9 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
            uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              _OWORD *v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100167790(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_100173FA8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *uint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100167A88(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unint64_t result = Hasher._finalize()();
        unint64_t v9 = result & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v9 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v10 = *(void *)(a2 + 48);
        uint64_t v11 = (unsigned char *)(v10 + v3);
        uint64_t v12 = (unsigned char *)(v10 + v6);
        if (v3 != v6 || v11 >= v12 + 1) {
          *uint64_t v11 = *v12;
        }
        uint64_t v13 = *(void *)(a2 + 56);
        uint64_t v14 = *(void *)(*(void *)(type metadata accessor for Date() - 8) + 72);
        int64_t v15 = v14 * v3;
        unint64_t result = v13 + v14 * v3;
        int64_t v16 = v14 * v6;
        unint64_t v17 = v13 + v14 * v6 + v14;
        if (v15 < v16 || result >= v17)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v15 == v16) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v9 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v9) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
    JUMPOUT(0x100167D54);
  }
  *(void *)(a2 + 16) = v24;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_100167D74(int64_t a1, uint64_t a2)
{
  return sub_1001683E4(a1, a2, (uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

unint64_t sub_100167D8C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MACAddress();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      BOOL v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      uint64_t v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_100173FA8((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for Date() - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    BOOL v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    BOOL v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *BOOL v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001680D4(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MACAddress();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_100173FA8((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *uint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    int64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    int64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *int64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001683CC(int64_t a1, uint64_t a2)
{
  return sub_1001683E4(a1, a2, (uint64_t (*)(void))&type metadata accessor for Date);
}

unint64_t sub_1001683E4(int64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  BOOL v37 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t result = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2 + 64;
  uint64_t v11 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v12 = (a1 + 1) & ~v11;
  if (((1 << v12) & *(void *)(a2 + 64 + 8 * (v12 >> 6))) != 0)
  {
    uint64_t v13 = ~v11;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v10 + 8 * (v12 >> 6)) & (1 << v12)) != 0)
    {
      unint64_t v40 = (result + 1) & v13;
      uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
      uint64_t v14 = v6 + 16;
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v41 = v14;
      uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v14 - 8);
      unint64_t v39 = v15;
      uint64_t v36 = v13;
      do
      {
        uint64_t v17 = v10;
        uint64_t v18 = v16;
        int64_t v19 = v16 * v12;
        v39(v9, *(void *)(a2 + 48) + v16 * v12, v5);
        sub_100173FA8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v38)(v9, v5);
        unint64_t v21 = v20 & v13;
        if (a1 >= (uint64_t)v40)
        {
          if (v21 >= v40 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            if (v18 * a1 < v19
              || *(void *)(a2 + 48) + v18 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v18 * a1 != v19)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v24 = *(void *)(a2 + 56);
            uint64_t v25 = *(void *)(*(void *)(v37(0) - 8) + 72);
            int64_t v26 = v25 * a1;
            unint64_t result = v24 + v25 * a1;
            int64_t v27 = v25 * v12;
            unint64_t v28 = v24 + v25 * v12 + v25;
            BOOL v29 = v26 < v27 || result >= v28;
            uint64_t v10 = v17;
            if (v29)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v12;
              uint64_t v13 = v36;
            }
            else
            {
              a1 = v12;
              uint64_t v13 = v36;
              if (v26 != v27)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v12;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v40 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v10 = v17;
LABEL_5:
        unint64_t v12 = (v12 + 1) & v13;
        uint64_t v16 = v18;
      }
      while (((*(void *)(v10 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  uint64_t *v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100168738(int64_t a1, uint64_t a2)
{
  return sub_100167314(a1, a2, (uint64_t (*)(void))&type metadata accessor for UUID, &qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

void sub_100168780(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *uint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 16 * v3);
            unint64_t v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  uint64_t *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_100168934(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          Swift::Int v12 = (_OWORD *)(v11 + 16 * v3);
          Swift::Int v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100168B0C(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BeaconSharingSessionContext();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v48 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t result = __chkstk_darwin(v9);
  v45[0] = (char *)v45 - v13;
  uint64_t v14 = a2 + 64;
  uint64_t v15 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v16 = (a1 + 1) & ~v15;
  if (((1 << v16) & *(void *)(a2 + 64 + 8 * (v16 >> 6))) != 0)
  {
    uint64_t v51 = v12;
    int64_t v52 = v5;
    uint64_t v17 = ~v15;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v14 + 8 * (v16 >> 6)) & (1 << v16)) != 0)
    {
      unint64_t v49 = (result + 1) & v17;
      uint64_t v50 = v17;
      uint64_t v18 = *(void *)(v51 + 72);
      uint64_t v46 = (void (**)(char *, uint64_t))(v52 + 8);
      uint64_t v47 = (void (**)(char *, unsigned __int8 *, uint64_t))(v52 + 32);
      uint64_t v19 = (unsigned __int8 *)v48;
      uint64_t v20 = v45[0];
      uint64_t v51 = v18;
      do
      {
        uint64_t v21 = *(void *)(a2 + 48);
        int64_t v52 = v18 * v16;
        sub_100173FF0(v21 + v18 * v16, v20, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
        Hasher.init(_seed:)();
        sub_100173FF0(v20, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v23 = v14;
            uint64_t v24 = v8;
            unint64_t v25 = a1;
            BOOL v26 = v7;
            uint64_t v27 = a2;
            uint64_t v28 = v4;
            Swift::UInt v29 = *v19;
            v45[1] = *((void *)v19 + 1);
            Hasher._combine(_:)(1uLL);
            Swift::UInt v30 = v29;
            uint64_t v4 = v28;
            a2 = v27;
            uint64_t v7 = v26;
            a1 = v25;
            uint64_t v8 = v24;
            uint64_t v14 = v23;
            uint64_t v20 = v45[0];
            Hasher._combine(_:)(v30);
            swift_bridgeObjectRetain();
            String.hash(into:)();
            uint64_t v19 = (unsigned __int8 *)v48;
            swift_bridgeObjectRelease_n();
            goto LABEL_12;
          }
          (*v47)(v7, v19, v4);
          Swift::UInt v31 = 2;
        }
        else
        {
          (*v47)(v7, v19, v4);
          Swift::UInt v31 = 0;
        }
        Hasher._combine(_:)(v31);
        sub_100173FA8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        (*v46)(v7, v4);
LABEL_12:
        Swift::Int v32 = Hasher._finalize()();
        unint64_t result = sub_100174058(v20, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
        unint64_t v33 = v32 & v50;
        uint64_t v34 = v50;
        if ((uint64_t)a1 >= (uint64_t)v49)
        {
          uint64_t v18 = v51;
          if (v33 < v49) {
            goto LABEL_5;
          }
        }
        else
        {
          uint64_t v18 = v51;
          if (v33 >= v49) {
            goto LABEL_17;
          }
        }
        if ((uint64_t)a1 >= (uint64_t)v33)
        {
LABEL_17:
          uint64_t v35 = *(void *)(a2 + 48);
          unint64_t result = v35 + v18 * a1;
          if ((uint64_t)(v18 * a1) < v52 || result >= v35 + v52 + v18)
          {
            unint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_22:
            uint64_t v18 = v51;
          }
          else if (v18 * a1 != v52)
          {
            unint64_t result = swift_arrayInitWithTakeBackToFront();
            goto LABEL_22;
          }
          uint64_t v36 = *(void *)(a2 + 56);
          BOOL v37 = (void *)(v36 + 8 * a1);
          uint64_t v38 = (void *)(v36 + 8 * v16);
          if (a1 != v16 || (a1 = v16, v37 >= v38 + 1))
          {
            void *v37 = *v38;
            a1 = v16;
          }
        }
LABEL_5:
        unint64_t v16 = (v16 + 1) & v34;
      }
      while (((*(void *)(v14 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
    }
    unint64_t v39 = (uint64_t *)(v14 + 8 * (a1 >> 6));
    uint64_t v40 = *v39;
    uint64_t v41 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v39 = (uint64_t *)(v14 + 8 * (a1 >> 6));
    uint64_t v41 = *v39;
    uint64_t v40 = (-1 << a1) - 1;
  }
  *unint64_t v39 = v41 & v40;
  uint64_t v42 = *(void *)(a2 + 16);
  BOOL v43 = __OFSUB__(v42, 1);
  uint64_t v44 = v42 - 1;
  if (v43)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v44;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100168FFC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Swift::UInt v9 = *(unsigned __int8 *)(*(void *)(a2 + 48) + 24 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v11 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v12 = *(void *)(a2 + 48);
        unint64_t v13 = v12 + 24 * v3;
        uint64_t v14 = (long long *)(v12 + 24 * v6);
        if (v3 != v6 || v13 >= (unint64_t)v14 + 24)
        {
          long long v15 = *v14;
          *(void *)(v13 + 16) = *((void *)v14 + 2);
          *(_OWORD *)unint64_t v13 = v15;
        }
        uint64_t v16 = *(void *)(a2 + 56);
        uint64_t v17 = *(void *)(*(void *)(type metadata accessor for UUID() - 8) + 72);
        int64_t v18 = v17 * v3;
        unint64_t result = v16 + v17 * v3;
        int64_t v19 = v17 * v6;
        unint64_t v20 = v16 + v17 * v6 + v17;
        if (v18 < v19 || result >= v20)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v18 == v19) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v11 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v11) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  uint64_t *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100169234(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        unint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (void *)(v11 + 8 * v3);
          unint64_t v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            void *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          long long v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *long long v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001693F0(int64_t a1, uint64_t a2, uint64_t *a3)
{
  BOOL v37 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t result = __chkstk_darwin(v5);
  Swift::UInt v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2 + 64;
  uint64_t v11 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v12 = (a1 + 1) & ~v11;
  if (((1 << v12) & *(void *)(a2 + 64 + 8 * (v12 >> 6))) != 0)
  {
    uint64_t v13 = ~v11;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v10 + 8 * (v12 >> 6)) & (1 << v12)) != 0)
    {
      unint64_t v40 = (result + 1) & v13;
      long long v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
      uint64_t v14 = v6 + 16;
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v41 = v14;
      uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v14 - 8);
      unint64_t v39 = v15;
      uint64_t v36 = v13;
      do
      {
        uint64_t v17 = v10;
        uint64_t v18 = v16;
        int64_t v19 = v16 * v12;
        v39(v9, *(void *)(a2 + 48) + v16 * v12, v5);
        sub_100173FA8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v38)(v9, v5);
        unint64_t v21 = v20 & v13;
        if (a1 >= (uint64_t)v40)
        {
          if (v21 >= v40 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            if (v18 * a1 < v19
              || *(void *)(a2 + 48) + v18 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v18 * a1 != v19)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v24 = *(void *)(a2 + 56);
            uint64_t v25 = *(void *)(*(void *)(sub_10000588C(v37) - 8) + 72);
            int64_t v26 = v25 * a1;
            unint64_t result = v24 + v25 * a1;
            int64_t v27 = v25 * v12;
            unint64_t v28 = v24 + v25 * v12 + v25;
            BOOL v29 = v26 < v27 || result >= v28;
            uint64_t v10 = v17;
            if (v29)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v12;
              uint64_t v13 = v36;
            }
            else
            {
              a1 = v12;
              uint64_t v13 = v36;
              if (v26 != v27)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v12;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v40 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v10 = v17;
LABEL_5:
        unint64_t v12 = (v12 + 1) & v13;
        uint64_t v16 = v18;
      }
      while (((*(void *)(v10 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
    }
    Swift::UInt v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    Swift::UInt v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  uint64_t *v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016973C(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v9 = ~v6;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v10 = (result + 1) & v9;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v9;
        if (v4 >= (uint64_t)v10) {
          break;
        }
        if (v12 < v10) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v13 = *(void *)(a2 + 48);
        uint64_t v14 = (_OWORD *)(v13 + 16 * v4);
        long long v15 = (_OWORD *)(v13 + 16 * v7);
        if (v4 != v7 || v14 >= v15 + 1) {
          *uint64_t v14 = *v15;
        }
        uint64_t v16 = *(void *)(a2 + 56);
        uint64_t v17 = *(void *)(*(void *)(a3(0) - 8) + 72);
        int64_t v18 = v17 * v4;
        unint64_t result = v16 + v17 * v4;
        int64_t v19 = v17 * v7;
        unint64_t v20 = v16 + v17 * v7 + v17;
        if (v18 < v19 || result >= v20)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v4 = v7;
          if (v18 == v19) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v9;
        if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v12 < v10) {
        goto LABEL_6;
      }
LABEL_11:
      if (v4 < (uint64_t)v12) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v22 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v4) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v5 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  uint64_t *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016995C(uint64_t a1, uint64_t a2)
{
  return sub_100169974(a1, a2, (uint64_t (*)(void))&type metadata accessor for URL);
}

unint64_t sub_100169974(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v33 = a3;
  uint64_t v37 = type metadata accessor for BeaconIdentifier();
  uint64_t v4 = *(void *)(v37 - 8);
  unint64_t result = __chkstk_darwin(v37);
  uint64_t v36 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (v6 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    int64_t v12 = v6;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v13 = (result + 1) & v11;
      uint64_t v14 = *(void *)(v4 + 72);
      uint64_t v15 = v11;
      uint64_t v34 = v14;
      uint64_t v35 = a2 + 64;
      uint64_t v16 = (uint64_t)v36;
      do
      {
        int64_t v17 = v14 * v10;
        sub_100173FF0(*(void *)(a2 + 48) + v14 * v10, v16, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_100173FA8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int v18 = Hasher._finalize()();
        unint64_t result = sub_100174058(v16, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        Swift::Int v19 = v18 & v15;
        unint64_t v20 = v12;
        if (v12 >= (uint64_t)v13)
        {
          if (v19 < v13)
          {
            uint64_t v8 = v35;
          }
          else
          {
            uint64_t v8 = v35;
            if (v12 >= v19) {
              goto LABEL_13;
            }
          }
        }
        else
        {
          uint64_t v8 = v35;
          if (v19 >= v13 || v12 >= v19)
          {
LABEL_13:
            uint64_t v14 = v34;
            if (v34 * v12 < v17
              || *(void *)(a2 + 48) + v34 * v12 >= (unint64_t)(*(void *)(a2 + 48) + v17 + v34))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v34 * v12 != v17)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v21 = *(void *)(a2 + 56);
            uint64_t v22 = *(void *)(*(void *)(v33(0) - 8) + 72);
            int64_t v23 = v22 * v12;
            unint64_t result = v21 + v22 * v12;
            int64_t v24 = v22 * v10;
            unint64_t v25 = v21 + v22 * v10 + v22;
            if (v23 < v24 || result >= v25)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              unint64_t v20 = v10;
            }
            else
            {
              unint64_t v20 = v10;
              if (v23 != v24)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                unint64_t v20 = v10;
              }
            }
            goto LABEL_6;
          }
        }
        uint64_t v14 = v34;
LABEL_6:
        int64_t v12 = v20;
        unint64_t v10 = (v10 + 1) & v15;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v27 = (uint64_t *)(v8 + 8 * ((unint64_t)v12 >> 6));
    uint64_t v28 = *v27;
    uint64_t v29 = (-1 << v12) - 1;
  }
  else
  {
    uint64_t v27 = (uint64_t *)(v8 + 8 * (v6 >> 6));
    uint64_t v29 = *v27;
    uint64_t v28 = (-1 << v6) - 1;
  }
  *uint64_t v27 = v29 & v28;
  uint64_t v30 = *(void *)(a2 + 16);
  BOOL v31 = __OFSUB__(v30, 1);
  uint64_t v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100169D28(int64_t a1, uint64_t a2)
{
  return sub_1001683E4(a1, a2, type metadata accessor for BeaconState);
}

void sub_100169D40(unint64_t a1, uint64_t a2)
{
}

void sub_100169D58(unint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = a1;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = (a1 + 1) & ~v6;
  if (((1 << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v9 = ~v6;
    uint64_t v10 = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v11 = (v10 + 1) & v9;
      do
      {
        Swift::Int v12 = *(void *)(a2 + 40);
        id v13 = *(id *)(*(void *)(a2 + 48) + 8 * v7);
        Swift::Int v14 = NSObject._rawHashValue(seed:)(v12);

        Swift::Int v15 = v14 & v9;
        if (v4 >= (uint64_t)v11)
        {
          if (v15 < v11 || v4 < v15) {
            goto LABEL_6;
          }
        }
        else if (v15 < v11 && v4 < v15)
        {
          goto LABEL_6;
        }
        uint64_t v18 = *(void *)(a2 + 48);
        Swift::Int v19 = (void *)(v18 + 8 * v4);
        unint64_t v20 = (void *)(v18 + 8 * v7);
        if (v4 != v7 || v19 >= v20 + 1) {
          *Swift::Int v19 = *v20;
        }
        uint64_t v21 = *(void *)(a2 + 56);
        uint64_t v22 = *(void *)(*(void *)(a3(0) - 8) + 72);
        int64_t v23 = v22 * v4;
        unint64_t v24 = v21 + v22 * v4;
        int64_t v25 = v22 * v7;
        unint64_t v26 = v21 + v22 * v7 + v22;
        if (v23 < v25 || v24 >= v26)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v4 = v7;
          if (v23 == v25) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v9;
      }
      while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    uint64_t v28 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v29 = *v28;
    uint64_t v30 = (-1 << v4) - 1;
  }
  else
  {
    uint64_t v28 = (uint64_t *)(v5 + 8 * (a1 >> 6));
    uint64_t v30 = *v28;
    uint64_t v29 = (-1 << a1) - 1;
  }
  uint64_t *v28 = v30 & v29;
  uint64_t v31 = *(void *)(a2 + 16);
  BOOL v32 = __OFSUB__(v31, 1);
  uint64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_100169F54(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        unint64_t v11 = v9[1];
        Hasher.init(_seed:)();
        sub_1000361E0(v10, v11);
        Data.hash(into:)();
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = sub_10001CFB8(v10, v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          Swift::Int v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *Swift::Int v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_OWORD *)(v17 + 16 * v3);
          Swift::Int v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            _OWORD *v18 = *v19;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *unint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016A13C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      unint64_t v37 = (result + 1) & v12;
      uint64_t v38 = v13;
      uint64_t v14 = *(void *)(v5 + 72);
      uint64_t v39 = v5 + 16;
      uint64_t v36 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v14;
        int64_t v18 = v14 * v11;
        uint64_t v19 = v15;
        v38(v8, *(void *)(a2 + 48) + v14 * v11, v4);
        sub_100173FA8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v36)(v8, v4);
        uint64_t v15 = v19;
        unint64_t v21 = v20 & v19;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v17 * a1;
            uint64_t v9 = v16;
            if (v17 * a1 < v18 || (uint64_t v14 = v17, result >= v24 + v18 + v17))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              uint64_t v14 = v17;
              uint64_t v15 = v19;
            }
            else if (v17 * a1 != v18)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            uint64_t v25 = *(void *)(a2 + 56);
            unint64_t v26 = v25 + 40 * a1;
            uint64_t v27 = (long long *)(v25 + 40 * v11);
            if (a1 != v11 || (a1 = v11, v26 >= (unint64_t)v27 + 40))
            {
              long long v28 = *v27;
              long long v29 = v27[1];
              *(void *)(v26 + 32) = *((void *)v27 + 4);
              *(_OWORD *)unint64_t v26 = v28;
              *(_OWORD *)(v26 + 16) = v29;
              a1 = v11;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
        uint64_t v14 = v17;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v15;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  uint64_t *v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016A458(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MACAddress();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      unint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_100173FA8((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (_OWORD *)(v22 + 16 * a1);
            uint64_t v24 = (_OWORD *)(v22 + 16 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *uint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016A750(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v9 = *(unsigned __int8 *)(*(void *)(a2 + 48) + 24 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          unint64_t v13 = v12 + 24 * v3;
          uint64_t v14 = (long long *)(v12 + 24 * v6);
          if (v3 != v6 || v13 >= (unint64_t)v14 + 24)
          {
            long long v15 = *v14;
            *(void *)(v13 + 16) = *((void *)v14 + 2);
            *(_OWORD *)unint64_t v13 = v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          uint64_t v17 = (void *)(v16 + 8 * v3);
          unint64_t v18 = (void *)(v16 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 1))
          {
            *uint64_t v17 = *v18;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016A950(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v41 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v41;
    if ((*(void *)(v41 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v39 = (result + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v38 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      uint64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v10;
        v38(v8, *(void *)(a2 + 48) + v15 * v10, v4);
        sub_100173EF0();
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v16)(v8, v4);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v39)
        {
          if (v19 < v39 || a1 < (uint64_t)v19) {
            goto LABEL_6;
          }
        }
        else if (v19 < v39 && a1 < (uint64_t)v19)
        {
          goto LABEL_6;
        }
        uint64_t v22 = *(void *)(a2 + 48);
        unint64_t v23 = v22 + v15 * a1;
        unint64_t v24 = v22 + v17 + v15;
        if (v15 * a1 < v17 || v23 >= v24)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v15 * a1 != v17)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v26 = *(void *)(a2 + 56);
        uint64_t v27 = *(void *)(*(void *)(type metadata accessor for BeaconScanner.AISLookupState(0) - 8) + 72);
        int64_t v28 = v27 * a1;
        unint64_t result = v26 + v27 * a1;
        int64_t v29 = v27 * v10;
        unint64_t v30 = v26 + v27 * v10 + v27;
        if (v28 < v29 || result >= v30)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v28 == v29) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
        uint64_t v12 = v41;
      }
      while (((*(void *)(v41 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v32 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v33 = *v32;
    uint64_t v34 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v32 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v34 = *v32;
    uint64_t v33 = (-1 << a1) - 1;
  }
  *uint64_t v32 = v34 & v33;
  uint64_t v35 = *(void *)(a2 + 16);
  BOOL v36 = __OFSUB__(v35, 1);
  uint64_t v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v37;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016AC44(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_WORD *)(v14 + 2 * v3);
          uint64_t v16 = (_WORD *)(v14 + 2 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *int64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016AE1C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = v15 + 24 * v3;
          int64_t v17 = (long long *)(v15 + 24 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= (unint64_t)v17 + 24))
          {
            long long v9 = *v17;
            *(void *)(v16 + 16) = *((void *)v17 + 2);
            *(_OWORD *)unint64_t v16 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  uint64_t *v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016B008(int64_t a1, uint64_t a2)
{
  uint64_t v34 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  uint64_t v4 = *(void *)(v34 - 8);
  unint64_t result = __chkstk_darwin(v34);
  uint64_t v7 = (unsigned __int8 *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v33 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v4 + 72);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v12;
        int64_t v15 = v12 * v10;
        uint64_t v16 = v13;
        sub_100173FF0(*(void *)(a2 + 48) + v12 * v10, (uint64_t)v7, type metadata accessor for ShareAttemptTracker.AttemptKey);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(*v7);
        type metadata accessor for UUID();
        sub_100173FA8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        Swift::Int v17 = Hasher._finalize()();
        unint64_t result = sub_100174058((uint64_t)v7, type metadata accessor for ShareAttemptTracker.AttemptKey);
        uint64_t v13 = v16;
        Swift::Int v18 = v17 & v16;
        if (a1 >= (uint64_t)v33)
        {
          if (v18 < v33)
          {
            uint64_t v12 = v14;
          }
          else
          {
            uint64_t v12 = v14;
            if (a1 >= v18) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v12 = v14;
          if (v18 >= v33 || a1 >= v18)
          {
LABEL_12:
            if (v12 * a1 < v15
              || *(void *)(a2 + 48) + v12 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v15 + v12))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v12 * a1 != v15)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = *(void *)(*(void *)(type metadata accessor for Date() - 8) + 72);
            int64_t v21 = v20 * a1;
            unint64_t result = v19 + v20 * a1;
            int64_t v22 = v20 * v10;
            unint64_t v23 = v19 + v20 * v10 + v20;
            if (v21 < v22 || result >= v23)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              uint64_t v12 = v14;
              uint64_t v13 = v16;
            }
            else
            {
              a1 = v10;
              BOOL v25 = v21 == v22;
              uint64_t v12 = v14;
              uint64_t v13 = v16;
              if (!v25)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                uint64_t v13 = v16;
                a1 = v10;
              }
            }
          }
        }
        unint64_t v10 = (v10 + 1) & v13;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1 << a1) - 1;
  }
  uint64_t *v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016B39C(int64_t a1, uint64_t a2)
{
  uint64_t v32 = type metadata accessor for BeaconKeyManager.FileKey(0);
  uint64_t v4 = *(void *)(v32 - 8);
  unint64_t result = __chkstk_darwin(v32);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v31 = a2;
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v12 = (result + 1) & v11;
      uint64_t v13 = *(void *)(v4 + 72);
      uint64_t v14 = v11;
      a2 = v31;
      while (1)
      {
        uint64_t v15 = *(void *)(a2 + 48);
        uint64_t v16 = v13;
        int64_t v17 = v13 * v10;
        sub_100173FF0(v15 + v13 * v10, (uint64_t)v7, type metadata accessor for BeaconKeyManager.FileKey);
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        sub_100173FA8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Swift::Int v18 = Hasher._finalize()();
        unint64_t result = sub_100174058((uint64_t)v7, type metadata accessor for BeaconKeyManager.FileKey);
        Swift::Int v19 = v18 & v14;
        if (a1 >= (uint64_t)v12)
        {
          uint64_t v13 = v16;
          if (v19 < v12)
          {
            a2 = v31;
          }
          else
          {
            a2 = v31;
            if (a1 >= v19) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v13 = v16;
          a2 = v31;
          if (v19 >= v12 || a1 >= v19)
          {
LABEL_12:
            uint64_t v20 = *(void *)(a2 + 48);
            unint64_t result = v20 + v13 * a1;
            if (v13 * a1 < v17 || result >= v20 + v17 + v13)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v13 * a1 != v17)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v21 = *(void *)(a2 + 56);
            int64_t v22 = (void *)(v21 + 8 * a1);
            unint64_t v23 = (void *)(v21 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v22 >= v23 + 1))
            {
              void *v22 = *v23;
              a1 = v10;
            }
          }
        }
        unint64_t v10 = (v10 + 1) & v14;
        if (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          goto LABEL_23;
        }
      }
    }
    a2 = v31;
LABEL_23:
    unint64_t v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << a1) - 1;
  }
  uint64_t *v24 = v25 & v26;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10016B750(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_100173FA8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            unint64_t v23 = (_OWORD *)(v22 + 16 * a1);
            unint64_t v24 = (_OWORD *)(v22 + 16 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *unint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_10016BA48(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t sub_10016BA88(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[2];
  uint64_t v29 = a1[1];
  uint64_t v30 = v8;
  uint64_t v31 = a1[3];
  int v32 = *((unsigned __int8 *)a1 + 32);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  unint64_t v15 = sub_1007240CC(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v4;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7] + 40 * v15;
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v24 = v29;
      *(void *)uint64_t v22 = v7;
      *(void *)(v22 + 8) = v24;
      uint64_t v25 = v31;
      *(void *)(v22 + 16) = v30;
      *(void *)(v22 + 24) = v25;
      *(unsigned char *)(v22 + 32) = v32;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100E7E0A4();
    goto LABEL_7;
  }
  sub_100E64D6C(v18, a3 & 1);
  unint64_t v26 = sub_1007240CC(a2);
  if ((v19 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v26;
  uint64_t v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  *(void *)&long long v33 = v7;
  *((void *)&v33 + 1) = v29;
  uint64_t v34 = v30;
  uint64_t v35 = v31;
  char v36 = v32;
  return sub_100E7BEA8(v15, (uint64_t)v12, &v33, v21);
}

void sub_10016BC98(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_10016BCD8(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1007241A0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for MultipartAccessoryPairingInfo(0);
      return sub_100174120(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, type metadata accessor for MultipartAccessoryPairingInfo);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100E7E760();
    goto LABEL_7;
  }
  sub_100E65958(v15, a4 & 1);
  uint64_t v22 = sub_1007241A0(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7BF94(v12, a2, a3, a1, v18);

  return sub_1000361E0(a2, a3);
}

uint64_t sub_10016BE48(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1007241A0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = sub_10000588C((uint64_t *)&unk_1016477E0);
      return sub_100062604(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, (uint64_t *)&unk_1016477E0);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100E7E7A8();
    goto LABEL_7;
  }
  sub_100E659A0(v15, a4 & 1);
  uint64_t v22 = sub_1007241A0(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7BFC0(v12, a2, a3, a1, v18);

  return sub_1000361E0(a2, a3);
}

_OWORD *sub_10016BFB0(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1007241B8(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100E7EA34();
      goto LABEL_7;
    }
    sub_100E65D84(v13, a3 & 1);
    unint64_t v19 = sub_1007241B8(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_100173F4C(a2, (uint64_t)v21);
      return sub_100E7C06C(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);

  return sub_100173E4C(a1, v17);
}

uint64_t sub_10016C0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  BOOL v12 = (void *)*v5;
  unint64_t v14 = sub_100723FF4(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    char v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (uint64_t *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t *v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100E7EC1C();
    goto LABEL_7;
  }
  sub_100E6609C(v17, a5 & 1);
  uint64_t v23 = sub_100723FF4(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7C0E8(v14, a3, a4, a1, a2, v20);

  return swift_bridgeObjectRetain();
}

uint64_t sub_10016C250(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1007241A0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      return sub_100174120(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, type metadata accessor for OwnedBeaconGroup.PairingState);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100E7EDD8();
    goto LABEL_7;
  }
  sub_100E663C4(v15, a4 & 1);
  uint64_t v22 = sub_1007241A0(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7C138(v12, a2, a3, a1, v18);

  return sub_1000361E0(a2, a3);
}

uint64_t sub_10016C3C0(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100724268(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t v18 = type metadata accessor for BookmarkMetaData();
      return sub_100174120(a1, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v10, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100E7F0A4();
    goto LABEL_7;
  }
  sub_100E66D88(v13, a3 & 1);
  unint64_t v20 = sub_100724268(a2);
  if ((v14 & 1) != (v21 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v20;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_100E7C210(v10, a2, a1, v16);
}

uint64_t sub_10016C514(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_1007240CC(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 < v16 || (a3 & 1) == 0)
  {
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_100E7F31C();
      goto LABEL_7;
    }
    sub_100E673F4(v16, a3 & 1);
    unint64_t v23 = sub_1007240CC(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      unint64_t v13 = v23;
      uint64_t v19 = *v4;
      if (v17) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v10, a2, v8);
      return sub_100E7C2B8(v13, (uint64_t)v10, a1, v19);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v19 = *v4;
  if ((v17 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  unint64_t v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v26 + 40);
  unint64_t v21 = v19[7] + *(void *)(v26 + 72) * v13;

  return v20(v21, a1, v8);
}

_OWORD *sub_10016C700(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100723FF4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100E7F618();
      goto LABEL_7;
    }
    sub_100E6789C(v15, a4 & 1);
    uint64_t v21 = sub_100723FF4(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
    return sub_100173E4C(a1, v19);
  }
LABEL_13:
  sub_100E7C394(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_10016C854(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1007242F0(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100E7F638();
      goto LABEL_7;
    }
    sub_100E678BC(v17, a3 & 1);
    unint64_t v23 = sub_1007242F0(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100E7C400(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = (_OWORD *)(v20[7] + 32 * v14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v21);

  return sub_100173E4C(a1, v21);
}

uint64_t sub_10016CA2C(unsigned int a1, uint64_t a2, char a3)
{
  return sub_10016DAB0(a1, a2, a3, (uint64_t (*)(void))sub_100E7F8E0, (void (*)(void))sub_100E67CB8, (uint64_t (*)(unint64_t, char *, void, uint64_t))sub_100E7C4C0);
}

uint64_t sub_10016CA6C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100173AAC(a1, a2, a3, (void (*)(void))sub_100E7F8EC, (void (*)(void))sub_100E67CC4, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7BE90);
}

void sub_10016CAAC(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_100724354((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100E7F90C();
    goto LABEL_7;
  }
  sub_100E67CD0(v12, a3 & 1);
  unint64_t v17 = sub_100724354((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_15:
    sub_10001D4B0(0, &qword_10163CB60);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7C4C4(v9, (uint64_t)a2, a1, v15);

  id v19 = a2;
}

id sub_10016CBEC(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_100724354((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      uint64_t v17 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
      return (id)sub_100174120(a1, v16 + *(void *)(*(void *)(v17 - 8) + 72) * v9, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100E7F918();
    goto LABEL_7;
  }
  sub_100E67CDC(v12, a3 & 1);
  unint64_t v19 = sub_100724354((uint64_t)a2);
  if ((v13 & 1) != (v20 & 1))
  {
LABEL_15:
    sub_10001D4B0(0, &qword_10163CB60);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v19;
  uint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7C4C8(v9, (uint64_t)a2, a1, v15);

  return a2;
}

unint64_t sub_10016CD58(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_1007243A4(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100E7F960();
    goto LABEL_7;
  }
  sub_100E67D24(v13, a3 & 1);
  unint64_t v19 = sub_1007243A4(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_100E7C570(v10, a2, a1, v16);
}

uint64_t sub_10016CE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_10016F7F4(a1, a2, a3, a4, a5, (void (*)(void))sub_100E7FB6C, (void (*)(void))sub_100E6830C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100E7C5FC);
}

unint64_t sub_10016CEC0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100723EF4(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      unint64_t v19 = (uint64_t *)(v18[7] + 16 * v12);
      unint64_t result = swift_release();
      *unint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100E7FD24();
    goto LABEL_7;
  }
  sub_100E685F0(v15, a4 & 1);
  unint64_t v21 = sub_100723EF4(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_100E7C600(v12, a3, a1, a2, v18);
}

uint64_t sub_10016CFF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100173490(a1, a2, a3, a4, (void (*)(void))sub_100E7FED0, (void (*)(void))sub_100E688A4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100E7BF90);
}

uint64_t sub_10016D030(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100173490(a1, a2, a3, a4, (void (*)(void))sub_100E7FEDC, (void (*)(void))sub_100E688B0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100E7BF90);
}

uint64_t sub_10016D070(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for BeaconIdentifier();
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = (void *)*v3;
  unint64_t v13 = sub_1007245E4(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v19 = *v4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      uint64_t v21 = type metadata accessor for ObservedAdvertisement(0);
      return sub_100174120(a1, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v13, type metadata accessor for ObservedAdvertisement);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_100E800B8();
    goto LABEL_7;
  }
  sub_100E68FD4(v16, a3 & 1);
  unint64_t v23 = sub_1007245E4(a2);
  if ((v17 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v23;
  unint64_t v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100173FF0(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  return sub_100E7C648(v13, (uint64_t)v10, a1, v19);
}

_OWORD *sub_10016D21C(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_100724628((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100E803E8();
      goto LABEL_7;
    }
    sub_100E69500(v12, a3 & 1);
    unint64_t v18 = sub_100724628((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      BOOL v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    sub_10001D4B0(0, (unint64_t *)&qword_10165F5D0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v15 = *v4;
  if (v13)
  {
LABEL_8:
    uint64_t v16 = (_OWORD *)(v15[7] + 32 * v9);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v16);
    return sub_100173E4C(a1, v16);
  }
LABEL_13:
  sub_100E7C734(v9, (uint64_t)a2, a1, v15);

  return a2;
}

uint64_t sub_10016D370(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001710D0(a1, a2, a3, (void (*)(void))sub_100E805B0, (void (*)(void))sub_100E697D4, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7C79C);
}

uint64_t sub_10016D3B0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001710D0(a1, a2, a3, (void (*)(void))sub_100E80758, (void (*)(void))sub_100E69D58, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7C79C);
}

uint64_t sub_10016D3F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100173490(a1, a2, a3, a4, (void (*)(void))sub_100E80764, (void (*)(void))sub_100E6A190, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100E7BF90);
}

void sub_10016D430(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = sub_100723FF4(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      sub_100173E3C(*(id *)v21, *(unsigned char *)(v21 + 8));
      *(void *)uint64_t v21 = a1;
      *(unsigned char *)(v21 + 8) = a2;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100E80770();
    goto LABEL_7;
  }
  sub_100E6A19C(v17, a5 & 1);
  uint64_t v22 = sub_100723FF4(a3, a4);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7C7A0(v14, a3, a4, a1, a2, v20);

  swift_bridgeObjectRetain();
}

uint64_t sub_10016D58C(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_100723FB0(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100E80940();
      goto LABEL_7;
    }
    sub_100E6A4BC(v13, a3 & 1);
    unint64_t v24 = sub_100723FB0(a2);
    if ((v14 & 1) == (v25 & 1))
    {
      unint64_t v10 = v24;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7];
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40);
    uint64_t v21 = v18;
    uint64_t v22 = v17 + *(void *)(v19 + 72) * v10;
    return v20(v22, a1, v21);
  }
LABEL_13:

  return sub_100E7C7F4(v10, a2, a1, v16);
}

uint64_t sub_10016D6F4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for MACAddress();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_100724804(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100E80BCC();
    goto LABEL_7;
  }
  sub_100E6A990(v17, a3 & 1);
  unint64_t v23 = sub_100724804(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100E7C8A0(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10016D89C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_1007240CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator();
      return sub_100174120(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v14, (uint64_t (*)(void))type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100E80BEC();
    goto LABEL_7;
  }
  sub_100E6ADB8(v17, a3 & 1);
  unint64_t v24 = sub_1007240CC(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v24;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100E7C8B8(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10016DA70(unsigned int a1, uint64_t a2, char a3)
{
  return sub_10016DAB0(a1, a2, a3, (uint64_t (*)(void))sub_100E80F5C, (void (*)(void))sub_100E6B2F8, (uint64_t (*)(unint64_t, char *, void, uint64_t))sub_100E7C4C0);
}

uint64_t sub_10016DAB0(unsigned int a1, uint64_t a2, char a3, uint64_t (*a4)(void), void (*a5)(void), uint64_t (*a6)(unint64_t, char *, void, uint64_t))
{
  uint64_t v26 = a5;
  char v27 = a6;
  uint64_t v8 = v6;
  unsigned int v28 = a1;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v6;
  unint64_t v17 = sub_1007240CC(a2);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t result = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v8;
    if (v21)
    {
LABEL_8:
      *(unsigned char *)(*(void *)(v23 + 56) + v17) = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= result && (a3 & 1) == 0)
  {
    uint64_t result = a4();
    goto LABEL_7;
  }
  v26();
  uint64_t result = sub_1007240CC(a2);
  if ((v21 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = result;
  uint64_t v23 = *v8;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  return v27(v17, v14, v28, v23);
}

uint64_t sub_10016DC70(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10016E558(a1, a2, a3, (void (*)(void))sub_100E811F4, (void (*)(void))sub_100E6B72C, (uint64_t (*)(uint64_t, uint64_t))sub_10001CEB0, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7C99C);
}

_OWORD *sub_10016DCC4(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_1007248DC(a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100E81254();
      goto LABEL_7;
    }
    sub_100E6BBA4(v12, a3 & 1);
    uint64_t v18 = sub_1007248DC(a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for CBConnectionEventMatchingOption(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    char v16 = (_OWORD *)(v15[7] + 32 * v9);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v16);
    return sub_100173E4C(a1, v16);
  }
LABEL_13:
  sub_100E7C734(v9, (uint64_t)a2, a1, v15);

  return a2;
}

uint64_t sub_10016DE08(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100173AAC(a1, a2, a3, (void (*)(void))sub_100E8141C, (void (*)(void))sub_100E6BEE0, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7BE90);
}

uint64_t sub_10016DE48(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for MACAddress();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100724804(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100E8143C();
      goto LABEL_7;
    }
    sub_100E6BEEC(v17, a3 & 1);
    unint64_t v28 = sub_100724804(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100E7C9B4(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  char v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

uint64_t sub_10016E04C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for MACAddress();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_100724804(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100E8145C();
    goto LABEL_7;
  }
  sub_100E6C3EC(result, a3 & 1);
  uint64_t result = sub_100724804(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100E7C9CC(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10016E1E8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = *(void *)a1;
  HIDWORD(v31) = *(unsigned __int8 *)(a1 + 8);
  uint64_t v32 = *(void *)(a1 + 16);
  uint64_t v33 = *(void *)(a1 + 24);
  uint64_t v34 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v35 = *(void *)(a1 + 40);
  uint64_t v36 = v8;
  uint64_t v37 = *(void *)(a1 + 56);
  LODWORD(v8) = *(unsigned __int8 *)(a1 + 65);
  int v38 = *(unsigned __int8 *)(a1 + 64);
  int v39 = v8;
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v40 = *(void *)(a1 + 72);
  uint64_t v41 = v9;
  uint64_t v42 = *(void *)(a1 + 88);
  int v43 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = (void *)*v3;
  unint64_t v16 = sub_1007240CC(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v4;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7] + 104 * v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)uint64_t v23 = v7;
      *(unsigned char *)(v23 + 8) = BYTE4(v31);
      uint64_t v25 = v33;
      *(void *)(v23 + 16) = v32;
      *(void *)(v23 + 24) = v25;
      uint64_t v26 = v35;
      *(void *)(v23 + 32) = v34;
      *(void *)(v23 + 40) = v26;
      uint64_t v27 = v37;
      *(void *)(v23 + 48) = v36;
      *(void *)(v23 + 56) = v27;
      *(unsigned char *)(v23 + 64) = v38;
      *(unsigned char *)(v23 + 65) = v39;
      uint64_t v28 = v41;
      *(void *)(v23 + 72) = v40;
      *(void *)(v23 + 80) = v28;
      *(void *)(v23 + 88) = v42;
      *(unsigned char *)(v23 + 96) = v43;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_100E81698();
    goto LABEL_7;
  }
  sub_100E6CB70(v19, a3 & 1);
  unint64_t v29 = sub_1007240CC(a2);
  if ((v20 & 1) != (v30 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v29;
  uint64_t v22 = *v4;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  uint64_t v44 = v7;
  char v45 = BYTE4(v31);
  uint64_t v46 = v32;
  uint64_t v47 = v33;
  uint64_t v48 = v34;
  uint64_t v49 = v35;
  uint64_t v50 = v36;
  uint64_t v51 = v37;
  char v52 = v38;
  char v53 = v39;
  uint64_t v54 = v40;
  uint64_t v55 = v41;
  uint64_t v56 = v42;
  char v57 = v43;
  return sub_100E7C9E4(v16, (uint64_t)v13, &v44, v22);
}

uint64_t sub_10016E518(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001710D0(a1, a2, a3, (void (*)(void))sub_100E81A54, (void (*)(void))sub_100E6D104, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7C79C);
}

uint64_t sub_10016E558(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(uint64_t, uint64_t), uint64_t (*a7)(unint64_t, char *, uint64_t, uint64_t))
{
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  uint64_t v31 = a5;
  uint64_t v9 = v7;
  uint64_t v34 = a1;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  char v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v7;
  unint64_t v18 = sub_1007240CC(a2);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v22 = v17;
  uint64_t v23 = *(void *)(v16 + 24);
  if (v23 < v21 || (a3 & 1) == 0)
  {
    if (v23 >= v21 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    v31();
    unint64_t v29 = sub_1007240CC(a2);
    if ((v22 & 1) == (v30 & 1))
    {
      unint64_t v18 = v29;
      uint64_t v24 = *v9;
      if (v22) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
      return v33(v18, v15, v34, v24);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v24 = *v9;
  if ((v22 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v25 = *(void *)(v24 + 56) + 40 * v18;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
  uint64_t v26 = v34;
  uint64_t v27 = v32;

  return v27(v26, v25);
}

uint64_t sub_10016E75C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1007240CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100E81D34();
      goto LABEL_7;
    }
    sub_100E6D598(v17, a3 & 1);
    unint64_t v28 = sub_1007240CC(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      BOOL v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100E7CB30(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

void sub_10016E960(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_1007248DC(a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100E8210C();
    goto LABEL_7;
  }
  sub_100E6DAA4(v12, a3 & 1);
  uint64_t v17 = sub_1007248DC(a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_15:
    type metadata accessor for SPBeaconTaskName(0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7CC40(v9, (uint64_t)a2, a1, v15);

  id v19 = a2;
}

uint64_t sub_10016EA90(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100173AAC(a1, a2, a3, (void (*)(void))sub_100E822B4, (void (*)(void))sub_100E6DDD4, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7BE90);
}

uint64_t sub_10016EAD0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100173AAC(a1, a2, a3, (void (*)(void))sub_100E822D4, (void (*)(void))sub_100E6DDE0, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100E7BE90);
}

id sub_10016EB10(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v9 = (void *)*v4;
  unint64_t v11 = sub_100724A28((uint64_t)a3);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v15 = v10;
  uint64_t v16 = v9[3];
  if (v16 >= v14 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v17 = *v5;
    if (v15)
    {
LABEL_8:
      char v18 = (uint64_t *)(v17[7] + 16 * v11);
      id result = (id)swift_bridgeObjectRelease();
      uint64_t *v18 = a1;
      v18[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v16 >= v14 && (a4 & 1) == 0)
  {
    sub_100E825C0();
    goto LABEL_7;
  }
  sub_100E6E224(v14, a4 & 1);
  unint64_t v20 = sub_100724A28((uint64_t)a3);
  if ((v15 & 1) != (v21 & 1))
  {
LABEL_15:
    sub_10001D4B0(0, &qword_10163CBE0);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v11 = v20;
  uint64_t v17 = *v5;
  if (v15) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7C600(v11, (uint64_t)a3, a1, a2, v17);

  return a3;
}

uint64_t sub_10016EC64(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1007240CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = sub_100173E5C(*(void *)(v21 + 8 * v14));
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100E82778();
    goto LABEL_7;
  }
  sub_100E6E50C(v17, a3 & 1);
  unint64_t v23 = sub_1007240CC(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100E7CC88(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10016EE0C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = (void **)v6;
  unint64_t v14 = (void *)*v6;
  unint64_t v16 = sub_100724500(a3, a4, a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a6 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7] + 16 * v16;
      uint64_t result = sub_10001CFB8(*(void *)v23, *(void *)(v23 + 8));
      *(void *)uint64_t v23 = a1;
      *(void *)(v23 + 8) = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_100E82A10();
    goto LABEL_7;
  }
  sub_100E6E934(v19, a6 & 1);
  unint64_t v25 = sub_100724500(a3, a4, a5);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  uint64_t v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100E7CD40(v16, a3, a4, a5, a1, a2, v22);

  return swift_bridgeObjectRetain();
}