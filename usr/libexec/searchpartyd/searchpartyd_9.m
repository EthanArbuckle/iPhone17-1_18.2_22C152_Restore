unint64_t sub_10065435C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  char *v10;
  void *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  long long v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_10000588C(&qword_1016460A0);
    v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = _swiftEmptyDictionarySingleton;
  }
  v32 = v1 + 64;
  v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    v4 = ~(-1 << -(char)v3);
  }
  else {
    v4 = -1;
  }
  v5 = v4 & *(void *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = (char *)&type metadata for Any + 8;
  v11 = &type metadata for String;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  v21 = *(void *)(v32 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_100132C20();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v34 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    v35 = *v24;
    v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100173E4C(v6, v7);
    sub_100173E4C(v7, v40);
    sub_100173E4C(v40, &v38);
    result = sub_100723FF4(v35, v36);
    v25 = result;
    if (v26)
    {
      v33 = i;
      v12 = v7;
      v13 = v6;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v17 = v35;
      v17[1] = v36;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v6 = v13;
      v7 = v12;
      i = v33;
      v18 = (_OWORD *)(v2[7] + 32 * v25);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v18);
      result = (unint64_t)sub_100173E4C(&v38, v18);
      v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)sub_100173E4C(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1006546C8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000588C(&qword_10164B230);
    v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_10012F428(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100173E4C(v38, v37);
    sub_10000588C(&qword_101651CF0);
    swift_dynamicCast();
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_100173E4C(&v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_100173E4C(v36, v37);
    sub_100173E4C(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~v6[v21 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~v6[v21 >> 6])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = v6[v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)((char *)v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_100173E4C(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_100132C20();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_100654AC0(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_10000588C((uint64_t *)&unk_101644340);
    v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v31 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v30 = (unint64_t)(63 - v3) >> 6;
  v6 = &v35;
  v7 = &v37;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = &type metadata for String;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v19 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v19 >= v30) {
    goto LABEL_32;
  }
  unint64_t v20 = *(void *)(v31 + 8 * v19);
  int64_t v21 = i + 1;
  if (!v20)
  {
    int64_t v21 = i + 2;
    if (i + 2 >= v30) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v31 + 8 * v21);
    if (!v20)
    {
      int64_t v21 = i + 3;
      if (i + 3 >= v30) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v31 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = i + 4;
        if (i + 4 >= v30) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v31 + 8 * v21);
        if (!v20)
        {
          int64_t v22 = i + 5;
          if (i + 5 < v30)
          {
            unint64_t v20 = *(void *)(v31 + 8 * v22);
            if (v20)
            {
              int64_t v21 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v21 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                goto LABEL_36;
              }
              if (v21 >= v30) {
                break;
              }
              unint64_t v20 = *(void *)(v31 + 8 * v21);
              ++v22;
              if (v20) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_100132C20();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v32 = (v20 - 1) & v20;
  unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
  for (i = v21; ; unint64_t v18 = __clz(__rbit64(v5)) | (i << 6))
  {
    char v23 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v18);
    uint64_t v33 = *v23;
    uint64_t v34 = v23[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101651CF0);
    swift_dynamicCast();
    sub_100173E4C(v6, v7);
    sub_100173E4C(v7, v38);
    sub_100173E4C(v38, &v36);
    unint64_t result = sub_100723FF4(v33, v34);
    unint64_t v24 = result;
    if (v25)
    {
      unint64_t v11 = v7;
      unint64_t v12 = v6;
      uint64_t v13 = v1;
      int64_t v14 = i;
      int64_t v15 = v10;
      int64_t v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *int64_t v16 = v33;
      v16[1] = v34;
      uint64_t v10 = v15;
      int64_t i = v14;
      uint64_t v1 = v13;
      v6 = v12;
      v7 = v11;
      v17 = (_OWORD *)(v2[7] + 32 * v24);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);
      unint64_t result = (unint64_t)sub_100173E4C(&v36, v17);
      unint64_t v5 = v32;
      if (!v32) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v26 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v26 = v33;
    v26[1] = v34;
    unint64_t result = (unint64_t)sub_100173E4C(&v36, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v27 = v2[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_34;
    }
    v2[2] = v29;
    unint64_t v5 = v32;
    if (!v32) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v32 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100654E30(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000588C(&qword_10164B248);
    v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_10012F428(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100173E4C(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_100173E4C(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_100173E4C(v36, v37);
    sub_100173E4C(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~v6[v21 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~v6[v21 >> 6])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = v6[v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)((char *)v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_100173E4C(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_100132C20();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_1006551F8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_10000588C(&qword_1016460A0);
    v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v35 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v34 = (unint64_t)(63 - v3) >> 6;
  v6 = v47;
  v7 = v45;
  int64_t v8 = &v41;
  unint64_t v9 = &v43;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v36 = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v19 = v36 + 1;
  if (__OFADD__(v36, 1)) {
    goto LABEL_35;
  }
  if (v19 >= v34) {
    goto LABEL_32;
  }
  unint64_t v20 = *(void *)(v35 + 8 * v19);
  int64_t v21 = v36 + 1;
  if (!v20)
  {
    int64_t v21 = v36 + 2;
    if (v36 + 2 >= v34) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v21);
    if (!v20)
    {
      int64_t v21 = v36 + 3;
      if (v36 + 3 >= v34) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v36 + 4;
        if (v36 + 4 >= v34) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v21);
        if (!v20)
        {
          int64_t v22 = v36 + 5;
          if (v36 + 5 < v34)
          {
            unint64_t v20 = *(void *)(v35 + 8 * v22);
            if (v20)
            {
              int64_t v21 = v36 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v21 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                goto LABEL_36;
              }
              if (v21 >= v34) {
                break;
              }
              unint64_t v20 = *(void *)(v35 + 8 * v21);
              ++v22;
              if (v20) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_100132C20();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  int64_t v36 = v21;
  uint64_t v37 = (v20 - 1) & v20;
  for (unint64_t i = __clz(__rbit64(v20)) + (v21 << 6); ; unint64_t i = __clz(__rbit64(v5)) | (v36 << 6))
  {
    char v23 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    sub_10012F428(*(void *)(v1 + 56) + 32 * i, (uint64_t)v6);
    *(void *)&long long v46 = v25;
    *((void *)&v46 + 1) = v24;
    v44[2] = v46;
    v45[0] = v47[0];
    v45[1] = v47[1];
    uint64_t v39 = v25;
    uint64_t v40 = v24;
    sub_100173E4C(v7, &v38);
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101651CF0);
    swift_dynamicCast();
    uint64_t v27 = v39;
    uint64_t v26 = v40;
    sub_100173E4C(v8, v9);
    sub_100173E4C(v9, v44);
    sub_100173E4C(v44, &v42);
    unint64_t result = sub_100723FF4(v27, v26);
    unint64_t v28 = result;
    if (v29)
    {
      unint64_t v11 = v9;
      unint64_t v12 = v8;
      uint64_t v13 = v1;
      unint64_t v14 = v7;
      int64_t v15 = v6;
      int64_t v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *int64_t v16 = v27;
      v16[1] = v26;
      v6 = v15;
      v7 = v14;
      uint64_t v1 = v13;
      int64_t v8 = v12;
      unint64_t v9 = v11;
      v17 = (_OWORD *)(v2[7] + 32 * v28);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);
      unint64_t result = (unint64_t)sub_100173E4C(&v42, v17);
      unint64_t v5 = v37;
      if (!v37) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v30 = (uint64_t *)(v2[6] + 16 * result);
    *long long v30 = v27;
    v30[1] = v26;
    unint64_t result = (unint64_t)sub_100173E4C(&v42, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v31 = v2[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_34;
    }
    v2[2] = v33;
    unint64_t v5 = v37;
    if (!v37) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v37 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_1006555A4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000588C(&qword_10164B240);
    v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  swift_bridgeObjectRetain();
  int64_t i = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v11 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v11 >= v27) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v11);
  int64_t v13 = i + 1;
  if (!v12)
  {
    int64_t v13 = i + 2;
    if (i + 2 >= v27) {
      goto LABEL_32;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v13);
    if (!v12)
    {
      int64_t v13 = i + 3;
      if (i + 3 >= v27) {
        goto LABEL_32;
      }
      unint64_t v12 = *(void *)(v28 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = i + 4;
        if (i + 4 >= v27) {
          goto LABEL_32;
        }
        unint64_t v12 = *(void *)(v28 + 8 * v13);
        if (!v12)
        {
          int64_t v14 = i + 5;
          if (i + 5 < v27)
          {
            unint64_t v12 = *(void *)(v28 + 8 * v14);
            if (v12)
            {
              int64_t v13 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v13 = v14 + 1;
              if (__OFADD__(v14, 1)) {
                goto LABEL_36;
              }
              if (v13 >= v27) {
                break;
              }
              unint64_t v12 = *(void *)(v28 + 8 * v13);
              ++v14;
              if (v12) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_100132C20();
          return;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v12 - 1) & v12;
  unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
  for (i = v13; ; unint64_t v10 = v9 | (i << 6))
  {
    int64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = *(void **)(*(void *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    id v19 = v18;
    unint64_t v20 = sub_100723FF4(v17, v16);
    unint64_t v21 = v20;
    if (v22)
    {
      v7 = (uint64_t *)(v2[6] + 16 * v20);
      swift_bridgeObjectRelease();
      uint64_t *v7 = v17;
      v7[1] = v16;
      uint64_t v8 = v2[7];

      *(void *)(v8 + 8 * v21) = v19;
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v20;
    char v23 = (uint64_t *)(v2[6] + 16 * v20);
    *char v23 = v17;
    v23[1] = v16;
    *(void *)(v2[7] + 8 * v20) = v19;
    uint64_t v24 = v2[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_34;
    }
    v2[2] = v26;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_100655848()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  v10[2] = v10[3];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_1000BF5A4();
  uint64_t v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v2 = v1;
  uint64_t v3 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v10[0] = 0;
  id v5 = [v3 JSONObjectWithData:isa options:4 error:v10];

  id v6 = v10[0];
  if (!v5)
  {
    uint64_t v8 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    goto LABEL_7;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10000588C((uint64_t *)&unk_101664240);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    swift_release();
    sub_10001CFB8(v0, v2);
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v7 = sub_100653C34((uint64_t)v10[0]);
  swift_release();
  sub_10001CFB8(v0, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t getEnumTagSinglePayload for VersionNumber(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for VersionNumber(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryProtocolVersionResponsePayload()
{
  return &type metadata for AccessoryProtocolVersionResponsePayload;
}

uint64_t sub_100655AE4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100655C68(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(unsigned char *)(a2 + 2) = BYTE2(result);
    *(unsigned char *)(a2 + 3) = BYTE3(result);
  }
  return result;
}

uint64_t sub_100655B20(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  uint64_t v1 = sub_1009CD1F0();
  unint64_t v3 = v2;
  sub_1000BD078((uint64_t)v5, v6);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  sub_10001CFB8(v1, v3);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v5);
}

unint64_t sub_100655BE4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100655C14();
  unint64_t result = sub_100573E7C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100655C14()
{
  unint64_t result = qword_10164B250;
  if (!qword_10164B250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10164B250);
  }
  return result;
}

uint64_t sub_100655C68(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v3 = v13;
  sub_1000BD078((uint64_t)v11, v12);
  uint64_t v4 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v1) {
    goto LABEL_5;
  }
  uint64_t v6 = v4;
  unint64_t v7 = v5;
  sub_1000361E0(v4, v5);
  unint64_t v8 = sub_1009CD940(v6, v7);
  if ((v8 & 0x100000000) != 0)
  {
    uint64_t v3 = type metadata accessor for BinaryEncodingError();
    sub_10017986C();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v3 - 8) + 104))(v9, enum case for BinaryEncodingError.encodingError(_:), v3);
    swift_willThrow();
    sub_10001CFB8(v6, v7);
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    return v3;
  }
  uint64_t v3 = v8;
  sub_10001CFB8(v6, v7);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v3;
}

void *sub_100655DC4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SafeLocation();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v12 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    v11[1] = v1;
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
    uint64_t v10 = *(void *)(v4 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1006CC8F8(v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      sub_100A06758((uint64_t)v6);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v9 += v10;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    return (void *)v12;
  }
  return result;
}

void *sub_100655F68(uint64_t a1)
{
  uint64_t v42 = sub_10000588C(&qword_10163A958);
  uint64_t v3 = *(void *)(v42 - 8);
  uint64_t v4 = __chkstk_darwin(v42);
  uint64_t v39 = (uint64_t)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  long long v38 = (char *)v32 - v6;
  uint64_t v7 = sub_10000588C(&qword_10164B360);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = _s18ConnectionKeyGroupVMa();
  uint64_t v10 = __chkstk_darwin(v41);
  uint64_t v40 = (uint64_t)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v34 = (uint64_t)v32 - v13;
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v35 = v9;
  _OWORD v32[2] = v1;
  uint64_t v33 = v12;
  uint64_t v15 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v36 = *(void *)(v3 + 72);
  uint64_t v37 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v32[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v17 = (uint64_t)v38;
  do
  {
    uint64_t v18 = v42;
    uint64_t v19 = *(int *)(v42 + 48);
    uint64_t v20 = v17 + v19;
    uint64_t v21 = v15 + v19;
    sub_10001D074(v15, v17, (uint64_t *)&unk_10163EB40);
    sub_10001D074(v21, v20, &qword_10164B360);
    uint64_t v22 = *(int *)(v18 + 48);
    uint64_t v23 = v39;
    uint64_t v24 = v39 + v22;
    sub_10001D608(v17, v39, (uint64_t *)&unk_10163EB40);
    sub_10001D608(v20, v24, &qword_10164B360);
    uint64_t v25 = (uint64_t)v35;
    sub_10001D074(v24, (uint64_t)v35, &qword_10164B360);
    sub_10001DAB4(v23, &qword_10163A958);
    if ((*v37)(v25, 1, v41) == 1)
    {
      sub_10001DAB4(v25, &qword_10164B360);
    }
    else
    {
      uint64_t v26 = v34;
      sub_1006CD470(v25, v34, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
      sub_1006CD470(v26, v40, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = (void *)sub_100A6F4A0(0, v16[2] + 1, 1, (unint64_t)v16);
      }
      unint64_t v28 = v16[2];
      unint64_t v27 = v16[3];
      uint64_t v29 = v33;
      if (v28 >= v27 >> 1)
      {
        uint64_t v30 = sub_100A6F4A0(v27 > 1, v28 + 1, 1, (unint64_t)v16);
        uint64_t v29 = v33;
        uint64_t v16 = (void *)v30;
      }
      v16[2] = v28 + 1;
      sub_1006CD470(v40, (uint64_t)v16+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v28, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
    }
    v15 += v36;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return v16;
}

void *sub_100656354(uint64_t a1)
{
  uint64_t v42 = sub_10000588C(&qword_10163A958);
  uint64_t v3 = *(void *)(v42 - 8);
  uint64_t v4 = __chkstk_darwin(v42);
  uint64_t v38 = (uint64_t)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v39 = (char *)v32 - v6;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10163EB40);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for TimeBasedKey();
  uint64_t v10 = __chkstk_darwin(v41);
  uint64_t v40 = (uint64_t)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v34 = (uint64_t)v32 - v13;
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v35 = v9;
  _OWORD v32[2] = v1;
  uint64_t v33 = v12;
  uint64_t v15 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v36 = *(void *)(v3 + 72);
  uint64_t v37 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v32[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v17 = (uint64_t)v39;
  do
  {
    uint64_t v18 = v42;
    uint64_t v19 = *(int *)(v42 + 48);
    uint64_t v20 = v17 + v19;
    uint64_t v21 = v15 + v19;
    sub_10001D074(v15, v17, (uint64_t *)&unk_10163EB40);
    sub_10001D074(v21, v20, &qword_10164B360);
    uint64_t v22 = *(int *)(v18 + 48);
    uint64_t v23 = v38;
    uint64_t v24 = v38 + v22;
    sub_10001D608(v17, v38, (uint64_t *)&unk_10163EB40);
    sub_10001D608(v20, v24, &qword_10164B360);
    uint64_t v25 = (uint64_t)v35;
    sub_10001D074(v23, (uint64_t)v35, (uint64_t *)&unk_10163EB40);
    sub_10001DAB4(v23, &qword_10163A958);
    if ((*v37)(v25, 1, v41) == 1)
    {
      sub_10001DAB4(v25, (uint64_t *)&unk_10163EB40);
    }
    else
    {
      uint64_t v26 = v34;
      sub_1006CD470(v25, v34, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      sub_1006CD470(v26, v40, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = (void *)sub_100A6F46C(0, v16[2] + 1, 1, (unint64_t)v16);
      }
      unint64_t v28 = v16[2];
      unint64_t v27 = v16[3];
      uint64_t v29 = v33;
      if (v28 >= v27 >> 1)
      {
        uint64_t v30 = sub_100A6F46C(v27 > 1, v28 + 1, 1, (unint64_t)v16);
        uint64_t v29 = v33;
        uint64_t v16 = (void *)v30;
      }
      v16[2] = v28 + 1;
      sub_1006CD470(v40, (uint64_t)v16+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v28, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    }
    v15 += v36;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return v16;
}

void *sub_100656744(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v18 = type metadata accessor for StandaloneBeacon();
    uint64_t v4 = a1
       + ((*(unsigned __int8 *)(*(void *)(v18 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v18 - 8) + 80));
    uint64_t v17 = *(void *)(*(void *)(v18 - 8) + 72);
    do
    {
      uint64_t v25 = v2;
      uint64_t v5 = MACAddress.dataRepresentation.getter();
      unint64_t v23 = v6;
      uint64_t v24 = v5;
      uint64_t v22 = MACAddress.dataRepresentation.getter();
      unint64_t v20 = v7;
      uint64_t v8 = (uint64_t *)(v4 + *(int *)(v18 + 36));
      uint64_t v10 = *v8;
      unint64_t v9 = v8[1];
      id v21 = objc_allocWithZone((Class)SPStandaloneBeacon);
      swift_bridgeObjectRetain();
      unint64_t v11 = v9;
      sub_1000361E0(v10, v9);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      Class v12 = Data._bridgeToObjectiveC()().super.isa;
      Class v13 = Data._bridgeToObjectiveC()().super.isa;
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class v15 = Date._bridgeToObjectiveC()().super.isa;
      Class v16 = Data._bridgeToObjectiveC()().super.isa;
      [v21 initWithIdentifier:isa macAddress:v12 classicMacAddress:v13 serialNumber:v14 pairingDate:v15 productData:v16];

      sub_10001CFB8(v10, v11);
      sub_10001CFB8(v22, v20);
      sub_10001CFB8(v24, v23);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 += v17;
      uint64_t v2 = v25 - 1;
    }
    while (v25 != 1);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1006569A4()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(21);
  type metadata accessor for UUID();
  sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 8250;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  uint64_t v4 = type metadata accessor for KeySyncMetadataDisplay();
  uint64_t v5 = (uint64_t *)(v1 + *(int *)(v4 + 20));
  uint64_t v6 = *v5;
  unint64_t v7 = (void *)v5[1];
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 773860640;
  v9._object = (void *)0xE400000000000000;
  String.append(_:)(v9);
  uint64_t v10 = (uint64_t *)(v1 + *(int *)(v4 + 28));
  uint64_t v11 = *v10;
  Class v12 = (void *)v10[1];
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 40;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 539828265;
  v16._object = (void *)0xE400000000000000;
  String.append(_:)(v16);
  type metadata accessor for Date();
  sub_100691B60((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  return v2;
}

id sub_100656BA8(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v132 = a3;
  v133 = a2;
  uint64_t v122 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v122);
  uint64_t v123 = (uint64_t)v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v6 - 8);
  v126 = (char *)v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v125 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v124 = (uint64_t)v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v9 - 8);
  v130 = (char *)v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SafeLocation();
  uint64_t v147 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  Swift::String v14 = (char *)v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v146 = (uint64_t)v121 - v15;
  uint64_t v16 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v16 - 8);
  uint64_t v161 = (uint64_t)v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = type metadata accessor for Date();
  unint64_t v18 = *(void *)(v162 - 8);
  uint64_t v19 = __chkstk_darwin(v162);
  v149 = (char *)v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v154 = (char *)v121 - v21;
  uint64_t v155 = type metadata accessor for UUID();
  uint64_t v134 = *(void *)(v155 - 8);
  uint64_t v22 = __chkstk_darwin(v155);
  v163 = (char *)v121 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  v153 = (char *)v121 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v152 = (char *)v121 - v27;
  __chkstk_darwin(v26);
  v151 = (char *)v121 - v28;
  uint64_t v148 = type metadata accessor for ShareRecord();
  uint64_t v159 = *(void *)(v148 - 8);
  __chkstk_darwin(v148);
  unint64_t v150 = (unint64_t)v121 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v30 - 8);
  v135 = (char *)v121 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    goto LABEL_40;
  }
  while (1)
  {
    uint64_t v129 = sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_101347BA0;
    uint64_t v166 = *v3;
    sub_10000588C(&qword_101642888);
    uint64_t v33 = String.init<A>(describing:)();
    v136 = v3;
    uint64_t v35 = v34;
    *(void *)(v32 + 56) = &type metadata for String;
    unint64_t v36 = sub_10000B4CC();
    *(void *)(v32 + 32) = v33;
    *(void *)(v32 + 40) = v35;
    *(void *)(v32 + 96) = &type metadata for String;
    *(void *)(v32 + 104) = v36;
    *(void *)(v32 + 64) = v36;
    *(void *)(v32 + 72) = 0xD000000000000017;
    *(void *)(v32 + 80) = 0x80000001014042B0;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v37 = v136[35];
    sub_100ACCD98(a1, (uint64_t)&v164);
    if (!v165)
    {
      sub_10001DAB4((uint64_t)&v164, (uint64_t *)&unk_10163BBE0);
      return (id)((uint64_t (*)(void))v133)(0);
    }
    sub_10001CEB0(&v164, (uint64_t)&v166);
    uint64_t v128 = v37;
    uint64_t v38 = sub_100B6DD88();
    uint64_t v39 = v38[2];
    v131 = (_UNKNOWN **)a1;
    if (v39)
    {
      *(void *)&long long v164 = _swiftEmptyArrayStorage;
      uint64_t v160 = v39;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v40 = v159;
      unint64_t v41 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      v121[1] = v38;
      uint64_t v42 = (uint64_t)v38 + v41;
      id v144 = self;
      v143 = (void (**)(char *, unint64_t, uint64_t))(v134 + 16);
      uint64_t v142 = *(void *)(v40 + 72);
      v141 = (void (**)(char *, unint64_t, uint64_t))(v18 + 16);
      v140 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
      v137 = (void (**)(char *, uint64_t, uint64_t))(v18 + 32);
      v139 = (void (**)(char *, uint64_t))(v18 + 8);
      v138 = (void (**)(void))(v134 + 8);
      uint64_t v43 = v155;
      v145 = v14;
      uint64_t v44 = v162;
      v45 = v154;
      long long v46 = v152;
      v47 = v151;
      unint64_t v18 = v150;
      do
      {
        uint64_t v159 = v42;
        sub_1006CC8F8(v42, v18, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        v66 = (int *)v148;
        v67 = *v143;
        (*v143)(v47, v18 + *(int *)(v148 + 20), v43);
        v67(v46, v18 + v66[6], v43);
        UUID.init(uuid:)();
        v120 = 0;
        UUID.init(uuid:)();
        id v158 = [v144 SPOwner];
        uint64_t v157 = sub_100ECF4F0(*(unsigned char *)(v18 + v66[9]), *(void *)(v18 + v66[9] + 8), *(void **)(v18 + v66[9] + 16));
        (*v141)(v45, v18 + v66[7], v44);
        uint64_t v68 = v161;
        sub_10001D074(v18 + v66[8], v161, (uint64_t *)&unk_10163AC90);
        if ((*v140)(v68, 1, v44) == 1)
        {
          v48 = v149;
          static Date.distantFuture.getter();
          sub_10001DAB4(v161, (uint64_t *)&unk_10163AC90);
        }
        else
        {
          v48 = v149;
          (*v137)(v149, v161, v44);
        }
        id v49 = objc_allocWithZone((Class)SPBeaconShare);
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        v51 = v152;
        Class v52 = UUID._bridgeToObjectiveC()().super.isa;
        Class v53 = UUID._bridgeToObjectiveC()().super.isa;
        Class v54 = UUID._bridgeToObjectiveC()().super.isa;
        Class v55 = Date._bridgeToObjectiveC()().super.isa;
        Class v56 = Date._bridgeToObjectiveC()().super.isa;
        LOBYTE(v120) = 0;
        v57 = v49;
        v58 = (void *)v157;
        v59 = v158;
        id v156 = [v57 initWithIdentifier:isa beaconIdentifier:v52 sharingCircleIdentifier:v53 peerTrustIdentifier:v54 owner:v158 sharee:v157 state:5 creationDate:v55 expirationDate:v56 visitorCount:0 delegationStatus:v120];

        v60 = v153;
        v61 = v163;

        v45 = v154;
        v62 = *v139;
        uint64_t v63 = v162;
        (*v139)(v48, v162);
        v62(v45, v63);
        v64 = *v138;
        uint64_t v43 = v155;
        ((void (*)(char *, uint64_t))*v138)(v61, v155);
        ((void (*)(char *, uint64_t))v64)(v60, v43);
        long long v46 = v51;
        ((void (*)(char *, uint64_t))v64)(v51, v43);
        v47 = v151;
        v64();
        unint64_t v18 = v150;
        sub_1006CCE04(v150, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v42 = v159 + v142;
        BOOL v65 = v160-- == 1;
        uint64_t v44 = v162;
      }
      while (!v65);
      Swift::String v14 = v145;
      v69 = (void *)v164;
      swift_bridgeObjectRelease();
      a1 = (uint64_t)v131;
    }
    else
    {
      swift_bridgeObjectRelease();
      v69 = _swiftEmptyArrayStorage;
      uint64_t v43 = v155;
    }
    sub_101158F2C((unint64_t)v69);
    swift_bridgeObjectRelease();
    uint64_t v71 = v167;
    uint64_t v72 = v168;
    v73 = sub_10001CD44(&v166, v167);
    id v74 = sub_100B2B68C((uint64_t)v73, v128, v71, v72);
    sub_10001D4B0(0, &qword_10163B870);
    sub_10012E2E4(&qword_10163B878, &qword_10163B870);
    Class v75 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v74 setShares:v75];

    if (qword_101636CB8 != -1) {
      swift_once();
    }
    id v76 = sub_1011E87EC(a1);
    [v74 setSeparationState:v76];

    uint64_t v77 = v134;
    v78 = v135;
    (*(void (**)(char *, uint64_t, uint64_t))(v134 + 16))(v135, a1, v43);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v78, 0, 1, v43);
    v79 = sub_100B6C090();
    uint64_t v80 = v79[2];
    if (!v80) {
      break;
    }
    unint64_t v81 = 0;
    Swift::String v3 = _swiftEmptyArrayStorage;
    while (v81 < v79[2])
    {
      unint64_t v82 = (*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80);
      a1 = *(void *)(v147 + 72);
      uint64_t v83 = v146;
      sub_1006CC8F8((uint64_t)v79 + v82 + a1 * v81, v146, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      sub_1006CD470(v83, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v164 = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000B79B0(0, v3[2] + 1, 1);
        Swift::String v3 = (void *)v164;
      }
      unint64_t v18 = v3[2];
      unint64_t v85 = v3[3];
      if (v18 >= v85 >> 1)
      {
        sub_1000B79B0(v85 > 1, v18 + 1, 1);
        Swift::String v3 = (void *)v164;
      }
      ++v81;
      v3[2] = v18 + 1;
      sub_1006CD470((uint64_t)v14, (uint64_t)v3 + v82 + v18 * a1, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      if (v80 == v81) {
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_40:
    swift_once();
  }
  Swift::String v3 = _swiftEmptyArrayStorage;
LABEL_24:
  uint64_t v86 = swift_bridgeObjectRelease();
  __chkstk_darwin(v86);
  uint64_t v87 = (uint64_t)v135;
  v120 = v135;
  uint64_t v88 = sub_1000A4684((uint64_t (*)(char *))sub_1006CD4DC, &v119, (uint64_t)v3);
  v89 = sub_100655DC4(v88);
  swift_bridgeObjectRelease();
  sub_10001DAB4(v87, &qword_101638CF0);
  sub_101158F5C((unint64_t)v89);
  swift_bridgeObjectRelease();
  sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
  sub_10012E2E4((unint64_t *)&qword_1016556C0, (unint64_t *)&unk_101653D70);
  Class v90 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v74 setSafeLocations:v90];

  uint64_t v91 = v167;
  uint64_t v92 = v168;
  v93 = sub_10001CD44(&v166, v167);
  uint64_t v94 = (uint64_t)v136;
  [v74 setCanBeLeashedByHost:(sub_100A27564((uint64_t)v93, (uint64_t)v136, v91, v92) & 1)];
  id result = [v74 setBeaconSeparationState:sub_100A05F68((uint64_t)v131)];
  uint64_t v95 = *(void *)(v94 + 40);
  if (v95)
  {
    uint64_t v96 = *(unsigned __int8 *)(v95 + 376);
    swift_retain();
    static os_log_type_t.info.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    uint64_t v97 = swift_allocObject();
    *(_OWORD *)(v97 + 16) = xmmword_101342130;
    *(void *)(v97 + 56) = &type metadata for Bool;
    *(void *)(v97 + 64) = &protocol witness table for Bool;
    *(unsigned char *)(v97 + 32) = v96;
    os_log(_:dso:log:_:_:)();
    swift_release();
    swift_bridgeObjectRelease();
    [v74 setConnectionAllowed:v96];
    sub_10001D010((uint64_t)&v166, (uint64_t)&v164);
    sub_10000588C((uint64_t *)&unk_10164DBF0);
    uint64_t v98 = type metadata accessor for SharedBeaconRecord(0);
    uint64_t v99 = (uint64_t)v130;
    int v100 = swift_dynamicCast();
    v101 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56);
    if (v100)
    {
      v101(v99, 0, 1, v98);
      sub_10001DAB4(v99, (uint64_t *)&unk_101653D50);
      [v74 setConnectableDeviceCount:0];
LABEL_38:
      v117 = (void (*)(id))v133;
      id v118 = v74;
      v117(v74);

      return (id)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v166);
    }
    v101(v99, 1, 1, v98);
    sub_10001DAB4(v99, (uint64_t *)&unk_101653D50);
    sub_10001D010((uint64_t)&v166, (uint64_t)&v164);
    uint64_t v102 = (uint64_t)v126;
    uint64_t v103 = v127;
    char v104 = swift_dynamicCast();
    v105 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v125 + 56);
    if ((v104 & 1) == 0)
    {
      v105(v102, 1, 1, v103);
      sub_10001DAB4(v102, &qword_10163B9F0);
      goto LABEL_38;
    }
    v105(v102, 0, 1, v103);
    uint64_t v106 = v124;
    sub_1006CD470(v102, v124, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    v107 = v131;
    uint64_t v108 = v103;
    uint64_t v109 = sub_10099C240((uint64_t)v131);
    CurrentValueSubject.value.getter();
    uint64_t v110 = v164;
    id result = (id)sub_100660124(v107, v164);
    if (!__OFADD__(v110, v109))
    {
      [v74 setConnectableDeviceCount:v110 + v109];
      uint64_t v111 = v123;
      sub_1006CC8F8(v106 + *(int *)(v108 + 24), v123, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        NSString v116 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v74 setSerialNumber:v116];

        sub_1006CCE04(v106, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v111, v155);
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          NSString v113 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v74 setSerialNumber:v113];

          v114 = type metadata accessor for OwnedBeaconRecord;
          uint64_t v115 = v106;
        }
        else
        {
          [v74 setSerialNumber:0];
          sub_1006CCE04(v106, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          v114 = type metadata accessor for StableIdentifier;
          uint64_t v115 = v111;
        }
        sub_1006CCE04(v115, (uint64_t (*)(void))v114);
      }
      goto LABEL_38;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100658018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a1;
  uint64_t v23 = a3;
  uint64_t v21 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101347BA0;
  aBlock[0] = *v3;
  sub_10000588C(&qword_101642888);
  uint64_t v11 = String.init<A>(describing:)();
  uint64_t v13 = v12;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v14 = sub_10000B4CC();
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = v13;
  *(void *)(v10 + 96) = &type metadata for String;
  *(void *)(v10 + 104) = v14;
  *(void *)(v10 + 64) = v14;
  *(void *)(v10 + 72) = 0xD000000000000022;
  *(void *)(v10 + 80) = 0x8000000101403890;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)swift_allocObject();
  uint64_t v16 = v21;
  v15[2] = v3;
  v15[3] = v16;
  uint64_t v17 = v22;
  v15[4] = v23;
  v15[5] = v17;
  aBlock[4] = sub_1006C5C8C;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CF478;
  unint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v25);
  return swift_release();
}

void sub_100658408(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v71 = a2;
  v70 = a1;
  uint64_t v4 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v4 - 8);
  uint64_t v97 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for URL();
  uint64_t v87 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v90 - 8);
  __chkstk_darwin(v90);
  unint64_t v81 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v7 - 8);
  uint64_t v84 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for DirectorySequence();
  uint64_t v94 = *(char **)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10164B298);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  unint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v83 = (uint64_t)&v62 - v15;
  uint64_t v16 = sub_10000588C(&qword_10164B2A0);
  uint64_t v92 = *(char **)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v91 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v86 = (uint64_t)&v62 - v19;
  uint64_t v20 = sub_10000588C(&qword_101645758);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000588C(&qword_101645750);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unint64_t v85 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C((uint64_t *)&unk_101638D10);
  __chkstk_darwin(v26 - 8);
  uint64_t v73 = (uint64_t)&v62 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for OwnerSharingCircle();
  uint64_t v63 = *(void *)(v72 - 8);
  uint64_t v28 = __chkstk_darwin(v72);
  uint64_t v68 = (uint64_t)&v62 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v69 = (uint64_t)&v62 - v30;
  uint64_t v31 = sub_10000588C((uint64_t *)&unk_101653CA0);
  __chkstk_darwin(v31 - 8);
  uint64_t v33 = (char *)&v62 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = _swiftEmptyArrayStorage;
  sub_10001D608(v96, (uint64_t)v33, (uint64_t *)&unk_101653CA0);
  id v76 = v33;
  sub_10001D074((uint64_t)v33, (uint64_t)v22, &qword_101645758);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  id v74 = v22;
  uint64_t v75 = v23;
  uint64_t v67 = v24 + 48;
  v66 = v34;
  if (v34((uint64_t)v22, 1, v23) == 1)
  {
    uint64_t v35 = (uint64_t)v74;
LABEL_3:
    sub_10001DAB4(v35, &qword_101645758);
    uint64_t v36 = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v73, 1, 1, v72);
LABEL_4:
    sub_10001DAB4((uint64_t)v76, (uint64_t *)&unk_101653CA0);
    sub_10001DAB4(v36, (uint64_t *)&unk_101638D10);
    return;
  }
  uint64_t v95 = (char **)(v94 + 48);
  v93 = (char **)(v94 + 32);
  v89 = (unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 6);
  v79 = (void (**)(char *, uint64_t, uint64_t))(v87 + 4);
  uint64_t v88 = (void (**)(char *, uint64_t))(v94 + 8);
  v78 = (void (**)(uint64_t, uint64_t))(v87 + 1);
  uint64_t v77 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56);
  unint64_t v82 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 56);
  uint64_t v87 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48);
  BOOL v65 = (void (**)(void))(v63 + 56);
  v62 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
  v64 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
  uint64_t v35 = (uint64_t)v74;
  uint64_t v37 = v75;
  uint64_t v80 = v14;
  while (1)
  {
    uint64_t v96 = v3;
    uint64_t v38 = v85;
    sub_10001D608(v35, (uint64_t)v85, &qword_101645750);
    uint64_t v39 = (uint64_t)&v38[*(int *)(v37 + 40)];
    uint64_t v40 = v84;
    sub_10001D074(v39, v84, (uint64_t *)&unk_101653C90);
    uint64_t v94 = *v95;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v94)(v40, 1, v98) != 1) {
      break;
    }
    uint64_t v41 = v83;
LABEL_18:
    sub_10001DAB4(v40, (uint64_t *)&unk_101653C90);
    (*v82)(v41, 1, 1, v16);
LABEL_19:
    uint64_t v3 = v96;
    uint64_t v35 = (uint64_t)v74;
    sub_10001DAB4((uint64_t)v85, &qword_101645750);
    sub_10001DAB4(v41, &qword_10164B298);
    uint64_t v54 = (uint64_t)v76;
    sub_10001DAB4((uint64_t)v76, &qword_101645758);
    (*v62)(v54, 1, 1, v75);
LABEL_20:
    uint64_t v36 = v73;
    uint64_t v55 = v72;
    (*v65)();
    if ((*v64)(v36, 1, v55) == 1) {
      goto LABEL_4;
    }
    uint64_t v56 = v69;
    sub_1006CD470(v36, v69, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    char v57 = v70(v56);
    if (v3)
    {
      sub_1006CCE04(v56, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_10001DAB4((uint64_t)v76, (uint64_t *)&unk_101653CA0);
      swift_release();
      return;
    }
    if (v57)
    {
      sub_1006CD470(v56, v68, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      v58 = v99;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B721C(0, v58[2] + 1, 1);
        v58 = v99;
      }
      uint64_t v59 = v63;
      unint64_t v61 = v58[2];
      unint64_t v60 = v58[3];
      if (v61 >= v60 >> 1)
      {
        sub_1000B721C(v60 > 1, v61 + 1, 1);
        v58 = v99;
      }
      v58[2] = v61 + 1;
      sub_1006CD470(v68, (uint64_t)v58+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(void *)(v59 + 72) * v61, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v35 = (uint64_t)v74;
    }
    else
    {
      sub_1006CCE04(v56, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    }
    sub_10001D074((uint64_t)v76, v35, &qword_101645758);
    uint64_t v37 = v75;
    if (v66(v35, 1, v75) == 1) {
      goto LABEL_3;
    }
  }
  uint64_t v92 = *v93;
  uint64_t v41 = v83;
  while (1)
  {
    ((void (*)(char *, uint64_t, uint64_t))v92)(v10, v40, v98);
    DirectorySequence.next()();
    uint64_t v42 = (uint64_t)v97;
    uint64_t v43 = v10;
    uint64_t v44 = v90;
    if ((*v89)(v97, 1, v90) == 1)
    {
      uint64_t v45 = v98;
      (*v88)(v43, v98);
      sub_10001DAB4(v42, &qword_101649E40);
      sub_10001DAB4(v39, (uint64_t *)&unk_101653C90);
      (*v77)(v39, 1, 1, v45);
      (*v82)(v41, 1, 1, v16);
      uint64_t v10 = v43;
      goto LABEL_15;
    }
    uint64_t v46 = v98;
    uint64_t v47 = (uint64_t)v81;
    (*v79)(v81, v42, v44);
    uint64_t v49 = (uint64_t)v80;
    uint64_t v50 = v96;
    sub_100E56CAC(v47, v85, (uint64_t)v80);
    uint64_t v96 = v50;
    if (v50) {
      break;
    }
    (*v88)(v43, v46);
    uint64_t v51 = v44;
    uint64_t v10 = v43;
    (*v78)(v47, v51);
    uint64_t v41 = v83;
    sub_10001D608(v49, v83, &qword_10164B298);
    uint64_t v40 = v84;
LABEL_15:
    uint64_t v52 = (uint64_t)v91;
    if ((*v87)(v41, 1, v16) == 1) {
      goto LABEL_19;
    }
    uint64_t v53 = v86;
    sub_10001D608(v41, v86, &qword_10164B2A0);
    sub_10001D608(v53, v52, &qword_10164B2A0);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_10001DAB4((uint64_t)v85, &qword_101645750);
      sub_1006CD470(v52, v73, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v3 = v96;
      uint64_t v35 = (uint64_t)v74;
      goto LABEL_20;
    }
    sub_10001DAB4(v52, &qword_10164B2A0);
    sub_10001D074(v39, v40, (uint64_t *)&unk_101653C90);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v94)(v40, 1, v98) == 1) {
      goto LABEL_18;
    }
  }
  __break(1u);
}

void sub_1006590AC(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v71 = a2;
  v70 = a1;
  uint64_t v4 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v4 - 8);
  uint64_t v97 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for URL();
  uint64_t v87 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v90 - 8);
  __chkstk_darwin(v90);
  unint64_t v81 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v7 - 8);
  uint64_t v84 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for DirectorySequence();
  uint64_t v94 = *(char **)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_101660590);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  unint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v83 = (uint64_t)&v62 - v15;
  uint64_t v16 = sub_10000588C(&qword_10164B2B0);
  uint64_t v92 = *(char **)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v91 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v86 = (uint64_t)&v62 - v19;
  uint64_t v20 = sub_10000588C(&qword_101653CB0);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000588C((uint64_t *)&unk_101653C80);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unint64_t v85 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C((uint64_t *)&unk_10163B7C0);
  __chkstk_darwin(v26 - 8);
  uint64_t v73 = (uint64_t)&v62 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for MemberSharingCircle();
  uint64_t v63 = *(void *)(v72 - 8);
  uint64_t v28 = __chkstk_darwin(v72);
  uint64_t v68 = (uint64_t)&v62 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v69 = (uint64_t)&v62 - v30;
  uint64_t v31 = sub_10000588C(&qword_1016496E0);
  __chkstk_darwin(v31 - 8);
  uint64_t v33 = (char *)&v62 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = _swiftEmptyArrayStorage;
  sub_10001D608(v96, (uint64_t)v33, &qword_1016496E0);
  id v76 = v33;
  sub_10001D074((uint64_t)v33, (uint64_t)v22, &qword_101653CB0);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  id v74 = v22;
  uint64_t v75 = v23;
  uint64_t v67 = v24 + 48;
  v66 = v34;
  if (v34((uint64_t)v22, 1, v23) == 1)
  {
    uint64_t v35 = (uint64_t)v74;
LABEL_3:
    sub_10001DAB4(v35, &qword_101653CB0);
    uint64_t v36 = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v73, 1, 1, v72);
LABEL_4:
    sub_10001DAB4((uint64_t)v76, &qword_1016496E0);
    sub_10001DAB4(v36, (uint64_t *)&unk_10163B7C0);
    return;
  }
  uint64_t v95 = (char **)(v94 + 48);
  v93 = (char **)(v94 + 32);
  v89 = (unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 6);
  v79 = (void (**)(char *, uint64_t, uint64_t))(v87 + 4);
  uint64_t v88 = (void (**)(char *, uint64_t))(v94 + 8);
  v78 = (void (**)(uint64_t, uint64_t))(v87 + 1);
  uint64_t v77 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56);
  unint64_t v82 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 56);
  uint64_t v87 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48);
  BOOL v65 = (void (**)(void))(v63 + 56);
  v62 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
  v64 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
  uint64_t v35 = (uint64_t)v74;
  uint64_t v37 = v75;
  uint64_t v80 = v14;
  while (1)
  {
    uint64_t v96 = v3;
    uint64_t v38 = v85;
    sub_10001D608(v35, (uint64_t)v85, (uint64_t *)&unk_101653C80);
    uint64_t v39 = (uint64_t)&v38[*(int *)(v37 + 40)];
    uint64_t v40 = v84;
    sub_10001D074(v39, v84, (uint64_t *)&unk_101653C90);
    uint64_t v94 = *v95;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v94)(v40, 1, v98) != 1) {
      break;
    }
    uint64_t v41 = v83;
LABEL_18:
    sub_10001DAB4(v40, (uint64_t *)&unk_101653C90);
    (*v82)(v41, 1, 1, v16);
LABEL_19:
    uint64_t v3 = v96;
    uint64_t v35 = (uint64_t)v74;
    sub_10001DAB4((uint64_t)v85, (uint64_t *)&unk_101653C80);
    sub_10001DAB4(v41, (uint64_t *)&unk_101660590);
    uint64_t v54 = (uint64_t)v76;
    sub_10001DAB4((uint64_t)v76, &qword_101653CB0);
    (*v62)(v54, 1, 1, v75);
LABEL_20:
    uint64_t v36 = v73;
    uint64_t v55 = v72;
    (*v65)();
    if ((*v64)(v36, 1, v55) == 1) {
      goto LABEL_4;
    }
    uint64_t v56 = v69;
    sub_1006CD470(v36, v69, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    char v57 = v70(v56);
    if (v3)
    {
      sub_1006CCE04(v56, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      sub_10001DAB4((uint64_t)v76, &qword_1016496E0);
      swift_release();
      return;
    }
    if (v57)
    {
      sub_1006CD470(v56, v68, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      v58 = v99;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B71E0(0, v58[2] + 1, 1);
        v58 = v99;
      }
      uint64_t v59 = v63;
      unint64_t v61 = v58[2];
      unint64_t v60 = v58[3];
      if (v61 >= v60 >> 1)
      {
        sub_1000B71E0(v60 > 1, v61 + 1, 1);
        v58 = v99;
      }
      v58[2] = v61 + 1;
      sub_1006CD470(v68, (uint64_t)v58+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(void *)(v59 + 72) * v61, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v35 = (uint64_t)v74;
    }
    else
    {
      sub_1006CCE04(v56, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    }
    sub_10001D074((uint64_t)v76, v35, &qword_101653CB0);
    uint64_t v37 = v75;
    if (v66(v35, 1, v75) == 1) {
      goto LABEL_3;
    }
  }
  uint64_t v92 = *v93;
  uint64_t v41 = v83;
  while (1)
  {
    ((void (*)(char *, uint64_t, uint64_t))v92)(v10, v40, v98);
    DirectorySequence.next()();
    uint64_t v42 = (uint64_t)v97;
    uint64_t v43 = v10;
    uint64_t v44 = v90;
    if ((*v89)(v97, 1, v90) == 1)
    {
      uint64_t v45 = v98;
      (*v88)(v43, v98);
      sub_10001DAB4(v42, &qword_101649E40);
      sub_10001DAB4(v39, (uint64_t *)&unk_101653C90);
      (*v77)(v39, 1, 1, v45);
      (*v82)(v41, 1, 1, v16);
      uint64_t v10 = v43;
      goto LABEL_15;
    }
    uint64_t v46 = v98;
    uint64_t v47 = (uint64_t)v81;
    (*v79)(v81, v42, v44);
    uint64_t v49 = (uint64_t)v80;
    uint64_t v50 = v96;
    sub_100E56BAC(v47, v85, (uint64_t)v80);
    uint64_t v96 = v50;
    if (v50) {
      break;
    }
    (*v88)(v43, v46);
    uint64_t v51 = v44;
    uint64_t v10 = v43;
    (*v78)(v47, v51);
    uint64_t v41 = v83;
    sub_10001D608(v49, v83, (uint64_t *)&unk_101660590);
    uint64_t v40 = v84;
LABEL_15:
    uint64_t v52 = (uint64_t)v91;
    if ((*v87)(v41, 1, v16) == 1) {
      goto LABEL_19;
    }
    uint64_t v53 = v86;
    sub_10001D608(v41, v86, &qword_10164B2B0);
    sub_10001D608(v53, v52, &qword_10164B2B0);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_10001DAB4((uint64_t)v85, (uint64_t *)&unk_101653C80);
      sub_1006CD470(v52, v73, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v3 = v96;
      uint64_t v35 = (uint64_t)v74;
      goto LABEL_20;
    }
    sub_10001DAB4(v52, &qword_10164B2B0);
    sub_10001D074(v39, v40, (uint64_t *)&unk_101653C90);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v94)(v40, 1, v98) == 1) {
      goto LABEL_18;
    }
  }
  __break(1u);
}

void *sub_100659D50(uint64_t a1, uint64_t a2, char a3, int a4)
{
  int v37 = a4;
  uint64_t v7 = sub_100AE4A24();
  uint64_t v8 = sub_100A9C06C((uint64_t)v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_100AE4C44();
  uint64_t v10 = sub_100A9C23C((uint64_t)v9);
  swift_bridgeObjectRelease();
  *(void *)&long long v44 = v8;
  sub_1004445F4((uint64_t)v10);
  uint64_t v11 = _swiftEmptyArrayStorage;
  v40[0] = _swiftEmptyArrayStorage;
  uint64_t v12 = v8[2];
  if (v12)
  {
    uint64_t v13 = (uint64_t)(v8 + 4);
    swift_bridgeObjectRetain();
    do
    {
      sub_10001D010(v13, (uint64_t)&v44);
      uint64_t v15 = v45;
      uint64_t v14 = v46;
      sub_10001CD44(&v44, v45);
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v15, v14);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v44);
      sub_100444614(v16);
      v13 += 40;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease_n();
    uint64_t v17 = (void *)v40[0];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = _swiftEmptyArrayStorage;
  }
  uint64_t v18 = sub_101158244((uint64_t)v17);
  swift_bridgeObjectRelease();
  uint64_t v43 = _swiftEmptyArrayStorage;
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v38 = v20;
  if (v19)
  {
    uint64_t v21 = v20 + 32;
    char v22 = a3 & 1;
    int v39 = a3 & 1;
    do
    {
      sub_10001D010(v21, (uint64_t)&v44);
      if (sub_10066A534(&v44, v22, a2, v18))
      {
        sub_10001CEB0(&v44, (uint64_t)v40);
        uint64_t v23 = v43;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v23[2] + 1, 1);
          uint64_t v23 = v43;
        }
        uint64_t v24 = v18;
        unint64_t v26 = v23[2];
        unint64_t v25 = v23[3];
        if (v26 >= v25 >> 1) {
          sub_1000B7570(v25 > 1, v26 + 1, 1);
        }
        uint64_t v27 = v41;
        uint64_t v28 = v42;
        uint64_t v29 = sub_1000BD078((uint64_t)v40, v41);
        __chkstk_darwin(v29);
        uint64_t v31 = (char *)&v36 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v32 + 16))(v31);
        sub_1006985B0(v26, (uint64_t)v31, (uint64_t *)&v43, v27, v28);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v40);
        uint64_t v18 = v24;
        char v22 = v39;
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v44);
      }
      v21 += 40;
      --v19;
    }
    while (v19);
    uint64_t v11 = v43;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v37 & 1) == 0)
  {
    uint64_t v33 = v36;
    swift_retain();
    uint64_t v34 = sub_1006AE454((uint64_t)v11, v33);
    swift_release();
    swift_release();
    return v34;
  }
  return v11;
}

uint64_t sub_10065A0B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SharedBeaconGroup();
  __chkstk_darwin(v2);
  uint64_t v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v5 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  uint64_t v10 = &v14[-v9 - 8];
  sub_10001D010(a1, (uint64_t)v14);
  sub_10000588C((uint64_t *)&unk_101657950);
  if (swift_dynamicCast())
  {
    sub_1006CD470((uint64_t)v10, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
    uint64_t v11 = (void *)sub_1006792CC((uint64_t)v8);
    sub_1006CCE04((uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v14);
    return (uint64_t)v11;
  }
  if (swift_dynamicCast())
  {
    sub_1006CCE04((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SharedBeaconGroup);
    uint64_t v11 = _swiftEmptyDictionarySingleton;
    goto LABEL_5;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10065A2D0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E0E8);
  sub_100010324(v0, (uint64_t)qword_10170E0E8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10065A354(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a4;
  uint64_t v30 = a3;
  int v28 = a1;
  uint64_t v5 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5 - 8);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v27 - v10;
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170F068);
  uint64_t v33 = a2;
  sub_1006CC8F8(a2, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = v6;
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v17 = sub_1004D6904();
    uint64_t v34 = sub_1008FA0F0(v17, v18, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006CCE04((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "updateFindMyNetwork for %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v15;
    swift_slowDealloc();
  }
  else
  {
    sub_1006CCE04((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  }

  uint64_t v20 = v32;
  uint64_t v19 = v33;
  v27[1] = *(void *)(v32 + 280);
  sub_1006CC8F8(v33, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
  uint64_t v21 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v22 = swift_allocObject();
  char v23 = v28 & 1;
  *(unsigned char *)(v22 + 16) = v28 & 1;
  sub_1006CD470((uint64_t)v9, v22 + ((v21 + 17) & ~v21), type metadata accessor for OwnedBeaconGroup);
  sub_1006CC8F8(v19, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
  uint64_t v24 = swift_allocObject();
  *(unsigned char *)(v24 + 16) = v23;
  uint64_t v25 = v31;
  *(void *)(v24 + 24) = v30;
  *(void *)(v24 + 32) = v25;
  *(void *)(v24 + 40) = v20;
  sub_1006CD470((uint64_t)v9, v24 + ((v21 + 48) & ~v21), type metadata accessor for OwnedBeaconGroup);
  swift_retain();
  swift_retain();
  sub_101072EAC(v19, 0, (void (*)(uint64_t))sub_1006CD1B0, v22, (void (*)(uint64_t (*)(uint64_t)))sub_1006CD384, (void (*)(uint64_t (*)(uint64_t)))v24);
  swift_release();
  return swift_release();
}

void sub_10065A724(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(void *)(a2 + 16) = a1;
  swift_errorRetain();
  swift_errorRelease();
  dispatch_group_leave(a3);
}

uint64_t sub_10065A790(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t result = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(a1 + *(int *)(result + 32)) = a2;
  if ((a2 & 1) == 0)
  {
    sub_1006CC8F8(a3, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    sub_1004D9C24();
    uint64_t v10 = *(void *)&v9[*(int *)(v6 + 40)];
    swift_bridgeObjectRetain();
    sub_1006CCE04((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    uint64_t v11 = *(int *)(v6 + 40);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + v11) = v10;
  }
  return result;
}

uint64_t sub_10065A888(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v75 = a5;
  uint64_t v76 = a6;
  uint64_t v85 = a4;
  LODWORD(v77) = a2;
  uint64_t v84 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  unint64_t v81 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v82 = *(void *)(v10 - 8);
  uint64_t v83 = v10;
  __chkstk_darwin(v10);
  uint64_t v80 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v79 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  v78 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for MACAddress();
  uint64_t v73 = *(void *)(v14 - 8);
  uint64_t v74 = v14;
  __chkstk_darwin(v14);
  uint64_t v72 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v16 = __chkstk_darwin(v71);
  unint64_t v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v70 - v20;
  __chkstk_darwin(v19);
  char v23 = (char *)&v70 - v22;
  uint64_t v24 = sub_10000588C(&qword_10163C650);
  __chkstk_darwin(v24);
  unint64_t v26 = (char **)((char *)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v26, &qword_10163C650);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v75 = a3;
    uint64_t v77 = v8;
    uint64_t v27 = (void *)*v26;
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100010324(v28, (uint64_t)qword_10170F068);
    sub_1006CC8F8(v76, (uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      uint64_t v32 = sub_1004D6904();
      uint64_t v86 = (void *)sub_1008FA0F0(v32, v33, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1006CCE04((uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v31 + 12) = 2082;
      uint64_t v86 = v27;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v86 = (void *)sub_1008FA0F0(v34, v35, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to set FMN status for %s. Error %{public}s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1006CCE04((uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v46 = v78;
    uint64_t v45 = v79;
    (*(void (**)(char *, void, uint64_t))(v79 + 104))(v78, enum case for DispatchQoS.QoSClass.default(_:), v12);
    uint64_t v47 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v12);
    v48 = (void *)swift_allocObject();
    uint64_t v49 = v85;
    v48[2] = v75;
    v48[3] = v49;
    v48[4] = v27;
    uint64_t v91 = sub_10027B0F4;
    uint64_t v92 = v48;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v88 = 1107296256;
    v89 = sub_1004B5480;
    uint64_t v90 = &unk_1015D0198;
    uint64_t v50 = _Block_copy(&aBlock);
    swift_retain();
    swift_errorRetain();
    uint64_t v51 = v80;
    static DispatchQoS.unspecified.getter();
    uint64_t v86 = _swiftEmptyArrayStorage;
    sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v52 = v81;
    uint64_t v53 = v84;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v50);

    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v52, v53);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v51, v83);
  }
  else
  {
    sub_1006CD470((uint64_t)v26, (uint64_t)v23, type metadata accessor for OwnedBeaconGroup);
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100010324(v36, (uint64_t)qword_10170F068);
    sub_1006CC8F8((uint64_t)v23, (uint64_t)v21, type metadata accessor for OwnedBeaconGroup);
    int v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    uint64_t v39 = v8;
    uint64_t v40 = a3;
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      v70 = v23;
      uint64_t aBlock = v42;
      *(_DWORD *)uint64_t v41 = 136315138;
      uint64_t v76 = v12;
      uint64_t v43 = sub_1004D6904();
      uint64_t v86 = (void *)sub_1008FA0F0(v43, v44, &aBlock);
      uint64_t v12 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1006CCE04((uint64_t)v21, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Successfully set FMN status for %s", v41, 0xCu);
      swift_arrayDestroy();
      char v23 = v70;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1006CCE04((uint64_t)v21, type metadata accessor for OwnedBeaconGroup);
    }

    if (v77)
    {
      uint64_t v54 = v74;
      uint64_t v55 = *(void *)(v75 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_bluetoothCommunicatorCoordinator);
      uint64_t v57 = (uint64_t)v72;
      uint64_t v56 = v73;
      (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v72, &v23[*(int *)(v71 + 28)], v74);
      uint64_t v58 = swift_allocObject();
      *(void *)(v58 + 16) = v40;
      *(void *)(v58 + 24) = v85;
      uint64_t v59 = *(char **)(v55 + 24);
      swift_retain();
      swift_retain();
      sub_101332204(v57, v59, (void (*)(void))sub_1006CD468, v58);
      swift_release_n();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v54);
      return sub_1006CCE04((uint64_t)v23, type metadata accessor for OwnedBeaconGroup);
    }
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    v62 = v78;
    uint64_t v61 = v79;
    (*(void (**)(char *, void, uint64_t))(v79 + 104))(v78, enum case for DispatchQoS.QoSClass.default(_:), v12);
    uint64_t v63 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v12);
    uint64_t v64 = swift_allocObject();
    uint64_t v65 = v85;
    *(void *)(v64 + 16) = v40;
    *(void *)(v64 + 24) = v65;
    uint64_t v91 = sub_10041ED88;
    uint64_t v92 = (void *)v64;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v88 = 1107296256;
    v89 = sub_1004B5480;
    uint64_t v90 = &unk_1015D01E8;
    v66 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v67 = v80;
    static DispatchQoS.unspecified.getter();
    uint64_t v86 = _swiftEmptyArrayStorage;
    sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v68 = v81;
    uint64_t v69 = v84;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v66);

    (*(void (**)(char *, uint64_t))(v39 + 8))(v68, v69);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v67, v83);
    sub_1006CCE04((uint64_t)v23, type metadata accessor for OwnedBeaconGroup);
  }
  return swift_release();
}

uint64_t sub_10065B508(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v34 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v8 - 8);
  uint64_t v33 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170F068);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v29 = a2;
      uint64_t v18 = swift_slowAlloc();
      uint64_t v30 = a3;
      uint64_t v19 = (uint8_t *)v18;
      uint64_t v28 = swift_slowAlloc();
      uint64_t v36 = a1;
      aBlock[0] = v28;
      uint64_t v31 = v6;
      *(_DWORD *)uint64_t v19 = 136446210;
      uint64_t v27 = v19 + 4;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v20 = String.init<A>(describing:)();
      uint64_t v36 = (void *)sub_1008FA0F0(v20, v21, aBlock);
      uint64_t v6 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a2 = v29;
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "fakeClassicPairing failed due to %{public}s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v30;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  uint64_t v22 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a2;
  *(void *)(v23 + 24) = a3;
  aBlock[4] = (uint64_t)sub_1003C6214;
  aBlock[5] = v23;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1004B5480;
  aBlock[3] = (uint64_t)&unk_1015D0260;
  uint64_t v24 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = _swiftEmptyArrayStorage;
  sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v25 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v6);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
  return swift_release();
}

uint64_t sub_10065BA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[19] = a5;
  v6[20] = a6;
  v6[17] = a3;
  v6[18] = a4;
  v6[15] = a1;
  v6[16] = a2;
  sub_10000588C(&qword_10164ABE8);
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  return _swift_task_switch(sub_10065BB28, 0, 0);
}

uint64_t sub_10065BB28()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016392B8 + dword_1016392B8);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10065BC78;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10065BC78(uint64_t a1)
{
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10065BD78, 0, 0);
}

uint64_t sub_10065BD78()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[24])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[25] = v2;
    void *v2 = v0;
    v2[1] = sub_10065BF64;
    uint64_t v3 = v0[22];
    uint64_t v4 = v0[19];
    uint64_t v5 = v0[20];
    uint64_t v6 = v0[18];
    return sub_100619168(v3, v6, v4, v5);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170E0D0);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Missing OwnerCommandManager service to connect!", v11, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = (void (*)(void))v0[16];

    sub_1003A4778();
    swift_allocError();
    *uint64_t v13 = 11;
    v12();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_10065BF64()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10065C200;
  }
  else {
    uint64_t v2 = sub_10065C078;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10065C078()
{
  uint64_t v1 = *(void *)(v0 + 168);
  sub_10001D074(*(void *)(v0 + 176), v1, &qword_10164ABE8);
  uint64_t v2 = type metadata accessor for OwnerCommandManager.Error();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  uint64_t v4 = *(void *)(v0 + 168);
  if (v3 == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 168), &qword_10164ABE8);
    uint64_t v5 = 0;
  }
  else
  {
    sub_100691B60(&qword_10164ABF0, (void (*)(uint64_t))type metadata accessor for OwnerCommandManager.Error);
    uint64_t v5 = swift_allocError();
    sub_1006CD470(v4, v6, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
  }
  uint64_t v7 = *(void *)(v0 + 176);
  (*(void (**)(uint64_t))(v0 + 128))(v5);
  swift_errorRelease();
  swift_release();
  sub_10001DAB4(v7, &qword_10164ABE8);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10065C200()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = (void (*)(uint64_t))v0[16];
  swift_release();
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  int v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10065C2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[17] = a3;
  v4[18] = a4;
  v4[15] = a1;
  v4[16] = a2;
  sub_10000588C(&qword_10164ABE8);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  return _swift_task_switch(sub_10065C34C, 0, 0);
}

uint64_t sub_10065C34C()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016392B8 + dword_1016392B8);
    int v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v3;
    *int v3 = v0;
    v3[1] = sub_10065C49C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10065C49C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10065C59C, 0, 0);
}

uint64_t sub_10065C59C()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[22])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[23] = v2;
    void *v2 = v0;
    v2[1] = sub_10065C784;
    uint64_t v3 = v0[20];
    uint64_t v4 = v0[18];
    return sub_10061B6E0(v3, v4);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170E0D0);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing OwnerCommandManager service to disconnect!", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = (void (*)(void))v0[16];

    sub_1003A4778();
    swift_allocError();
    *uint64_t v11 = 11;
    v10();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_10065C784()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10065CA20;
  }
  else {
    uint64_t v2 = sub_10065C898;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10065C898()
{
  uint64_t v1 = *(void *)(v0 + 152);
  sub_10001D074(*(void *)(v0 + 160), v1, &qword_10164ABE8);
  uint64_t v2 = type metadata accessor for OwnerCommandManager.Error();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  uint64_t v4 = *(void *)(v0 + 152);
  if (v3 == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 152), &qword_10164ABE8);
    uint64_t v5 = 0;
  }
  else
  {
    sub_100691B60(&qword_10164ABF0, (void (*)(uint64_t))type metadata accessor for OwnerCommandManager.Error);
    uint64_t v5 = swift_allocError();
    sub_1006CD470(v4, v6, (uint64_t (*)(void))type metadata accessor for OwnerCommandManager.Error);
  }
  uint64_t v7 = *(void *)(v0 + 160);
  (*(void (**)(uint64_t))(v0 + 128))(v5);
  swift_errorRelease();
  swift_release();
  sub_10001DAB4(v7, &qword_10164ABE8);
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10065CA20()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = (void (*)(uint64_t))v0[16];
  swift_release();
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  int v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10065CAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(void *)(v4 + 104);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a1;
  v16[3] = v4;
  v16[4] = a2;
  v16[5] = a3;
  aBlock[4] = sub_1006CCDA8;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CFFB8;
  os_log_type_t v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19[1] = _swiftEmptyArrayStorage;
  sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t sub_10065CDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16))
  {
    swift_retain();
    uint64_t v15 = (uint64_t)sub_1006AE5C0(a1, a2);
  }
  else
  {
    uint64_t v32 = v9;
    if (qword_101637188 != -1) {
      swift_once();
    }
    uint64_t v16 = (void *)qword_10170EE68;
    id v17 = [self sharedInstance];
    unsigned int v18 = [v17 isInternalBuild];

    uint64_t v31 = a3;
    if (v18)
    {
      NSString v19 = String._bridgeToObjectiveC()();
      char v20 = [v16 BOOLForKey:v19];
    }
    else
    {
      char v20 = 0;
    }
    unint64_t v21 = sub_100AE4A24();
    uint64_t v22 = sub_100A9C06C((uint64_t)v21);
    swift_bridgeObjectRelease();
    uint64_t v23 = sub_100AE4C44();
    uint64_t v24 = sub_100A9C23C((uint64_t)v23);
    swift_bridgeObjectRelease();
    aBlock[0] = v22;
    sub_1004445F4((uint64_t)v24);
    uint64_t v25 = aBlock[0];
    swift_retain();
    uint64_t v15 = sub_1006AEE78(v25, a2, v20);
    a3 = v31;
    uint64_t v9 = v32;
  }
  swift_release();
  swift_retain();
  unint64_t v26 = sub_1006AF0AC(v15, a2);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v27 = sub_101159B84((unint64_t)v26);
  swift_bridgeObjectRelease();
  uint64_t v28 = (void *)swift_allocObject();
  v28[2] = a3;
  v28[3] = a4;
  v28[4] = v27;
  aBlock[4] = sub_1006CCDCC;
  aBlock[5] = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D0008;
  uint64_t v29 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = _swiftEmptyArrayStorage;
  sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v33);
  return swift_release();
}

uint64_t sub_10065D20C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v77 = a2;
  uint64_t v6 = type metadata accessor for Endianness();
  __chkstk_darwin(v6 - 8);
  v78 = (char *)v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v75);
  uint64_t v9 = (char *)v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v10 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v76 = (uint64_t)v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unsigned int v18 = (char *)v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D010(a1, (uint64_t)v79);
  sub_10000588C((uint64_t *)&unk_101657950);
  char v19 = swift_dynamicCast();
  char v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if ((v19 & 1) == 0)
  {
    LOBYTE(a3) = 1;
    v20(v14, 1, 1, v15);
    sub_10001DAB4((uint64_t)v14, &qword_10163BB20);
    return a3 & 1;
  }
  v20(v14, 0, 1, v15);
  sub_1006CD470((uint64_t)v14, (uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
  uint64_t v68 = v18;
  uint64_t v21 = sub_1004D1434();
  uint64_t v22 = *(void *)(v77 + 280);
  swift_retain();
  uint64_t v23 = sub_1006AD620(v21, v22);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v70 = v23[2];
  if (!v70)
  {
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  v64[1] = v23;
  uint64_t v65 = v15;
  int v66 = a3;
  uint64_t v67 = v3;
  uint64_t v73 = (char *)v23 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v24 = *(void *)(v10 + 72);
  uint64_t v71 = v9 + 8;
  uint64_t v72 = v24;
  swift_bridgeObjectRetain();
  uint64_t v25 = 0;
  uint64_t v26 = v76;
  uint64_t v69 = v9;
  while (2)
  {
    sub_1006CC8F8((uint64_t)&v73[v72 * v25], v26, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v27 = v74;
    sub_1006CC8F8(v26 + *(int *)(v74 + 24), (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (EnumCaseMultiPayload != 2)
      {
        sub_1006CCE04((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        goto LABEL_50;
      }
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v29 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8))(v9, v29);
    uint64_t v30 = sub_1002AAF08(*(void *)(v26 + *(int *)(v27 + 64)), *(void *)(v26 + *(int *)(v27 + 68)));
    if (v31 >> 60 == 15) {
      goto LABEL_50;
    }
    uint64_t v32 = v30;
    unint64_t v33 = v31;
    uint64_t v77 = v25 + 1;
    uint64_t v34 = Set.init(minimumCapacity:)();
    uint64_t v35 = 0;
    for (uint64_t i = v34 + 56; ; uint64_t i = v34 + 56)
    {
      while (1)
      {
        uint64_t v37 = (uint64_t)*(&off_10159FB18 + v35 + 4);
        uint64_t v38 = v35 + 1;
        uint64_t v39 = static Hasher._hash(seed:_:)();
        uint64_t v40 = -1 << *(unsigned char *)(v34 + 32);
        unint64_t v41 = v39 & ~v40;
        if (((*(void *)(i + ((v41 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v41) & 1) == 0) {
          goto LABEL_17;
        }
        uint64_t v42 = *(void *)(v34 + 48);
        if (*(void *)(v42 + 8 * v41) != v37) {
          break;
        }
LABEL_10:
        uint64_t v35 = 1;
        if (v38 == 2) {
          goto LABEL_19;
        }
      }
      uint64_t v43 = ~v40;
      while (1)
      {
        unint64_t v41 = (v41 + 1) & v43;
        if (((*(void *)(i + ((v41 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v41) & 1) == 0) {
          break;
        }
        if (*(void *)(v42 + 8 * v41) == v37) {
          goto LABEL_10;
        }
      }
LABEL_17:
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v80 = v34;
      sub_100DDF204(v37, v41, isUniquelyReferenced_nonNull_native);
      uint64_t v34 = v80;
      swift_bridgeObjectRelease();
      uint64_t v35 = 1;
      if (v38 == 2) {
        break;
      }
    }
LABEL_19:
    v79[0] = v34;
    sub_100DCA424(&v80, 8216);
    switch(v33 >> 62)
    {
      case 1uLL:
        LODWORD(v45) = HIDWORD(v32) - v32;
        if (__OFSUB__(HIDWORD(v32), v32)) {
          goto LABEL_55;
        }
        uint64_t v45 = (int)v45;
LABEL_23:
        if (v45 < -1)
        {
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
          JUMPOUT(0x10065DB6CLL);
        }
LABEL_24:
        Data.subdata(in:)();
        static Endianness.current.getter();
        sub_100091A80();
        FixedWidthInteger.init(data:ofEndianness:)();
        uint64_t v49 = v79[0];
        if ((v80 & 0x100000000) != 0 || v80 != 76)
        {
          swift_bridgeObjectRelease();
          sub_100037A24(v32, v33);
          uint64_t v26 = v76;
LABEL_50:
          sub_1006CCE04(v26, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_51:
          swift_bridgeObjectRelease_n();
          char v63 = v68[*(int *)(v65 + 32)];
          sub_1006CCE04((uint64_t)v68, type metadata accessor for OwnedBeaconGroup);
          LOBYTE(a3) = v66;
          if (v63) {
            goto LABEL_46;
          }
          return a3 & 1;
        }
        switch(v33 >> 62)
        {
          case 1uLL:
            int v52 = HIDWORD(v32) - v32;
            if (__OFSUB__(HIDWORD(v32), v32)) {
              goto LABEL_57;
            }
            uint64_t v50 = v52;
            uint64_t v51 = (uint64_t)(v52 + (v52 < 0)) >> 1;
            break;
          case 2uLL:
            uint64_t v54 = *(void *)(v32 + 16);
            uint64_t v53 = *(void *)(v32 + 24);
            uint64_t v50 = v53 - v54;
            if (__OFSUB__(v53, v54)) {
              goto LABEL_58;
            }
            if (v50 >= 0) {
              uint64_t v55 = v53 - v54;
            }
            else {
              uint64_t v55 = v50 + 1;
            }
            uint64_t v51 = v55 >> 1;
            break;
          case 3uLL:
            goto LABEL_36;
          default:
            uint64_t v50 = BYTE6(v33);
            uint64_t v51 = BYTE6(v33) >> 1;
            break;
        }
        if (v50 < v51) {
          goto LABEL_54;
        }
LABEL_36:
        swift_bridgeObjectRetain();
        Data.subdata(in:)();
        static Endianness.current.getter();
        FixedWidthInteger.init(data:ofEndianness:)();
        if (BYTE4(v80)) {
          uint64_t v56 = 0;
        }
        else {
          uint64_t v56 = (int)v80;
        }
        BOOL v57 = sub_100DC71B4(v56, v49);
        swift_bridgeObjectRelease_n();
        sub_100037A24(v32, v33);
        uint64_t v26 = v76;
        sub_1006CCE04(v76, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if (!v57) {
          goto LABEL_51;
        }
        uint64_t v9 = v69;
        uint64_t v25 = v77;
        if (v77 != v70) {
          continue;
        }
        swift_bridgeObjectRelease_n();
        LOBYTE(a3) = v66;
        uint64_t v15 = v65;
LABEL_44:
        uint64_t My = type metadata accessor for Feature.FindMy();
        v79[3] = My;
        v79[4] = sub_100691B60((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
        uint64_t v59 = sub_10001D958(v79);
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v59, enum case for Feature.FindMy.alphaWasp(_:), My);
        char v60 = isFeatureEnabled(_:)();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v79);
        int v61 = v68[*(int *)(v15 + 32)];
        sub_1006CCE04((uint64_t)v68, type metadata accessor for OwnedBeaconGroup);
        if (v61 == 1 && (v60 & 1) != 0) {
LABEL_46:
        }
          LOBYTE(a3) = 1;
        return a3 & 1;
      case 2uLL:
        uint64_t v47 = *(void *)(v32 + 16);
        uint64_t v46 = *(void *)(v32 + 24);
        BOOL v48 = __OFSUB__(v46, v47);
        uint64_t v45 = v46 - v47;
        if (!v48) {
          goto LABEL_23;
        }
        goto LABEL_56;
      default:
        goto LABEL_24;
    }
  }
}

uint64_t sub_10065DB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v20 = *(void *)(v6 - 8);
  uint64_t v21 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101347BA0;
  aBlock[0] = *v2;
  sub_10000588C(&qword_101642888);
  uint64_t v10 = String.init<A>(describing:)();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v13 = sub_10000B4CC();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v13;
  *(void *)(v9 + 64) = v13;
  *(void *)(v9 + 72) = 0xD00000000000001DLL;
  *(void *)(v9 + 80) = 0x8000000101403960;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)swift_allocObject();
  uint64_t v15 = v19;
  v14[2] = v18;
  v14[3] = v15;
  v14[4] = v2;
  aBlock[4] = sub_1006C5DE8;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CF5B8;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v21);
  return swift_release();
}

uint64_t sub_10065DF70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[23] = a6;
  v7[24] = a7;
  v7[21] = a4;
  v7[22] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[25] = v8;
  v7[26] = *(void *)(v8 - 8);
  v7[27] = swift_task_alloc();
  v7[28] = swift_task_alloc();
  return _swift_task_switch(sub_10065E044, 0, 0);
}

uint64_t sub_10065E044()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639240 + dword_101639240);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10065E194;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10065E194(uint64_t a1)
{
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10065E294, 0, 0);
}

uint64_t sub_10065E294()
{
  uint64_t v1 = v0[30];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    uint64_t v2 = qword_10170E390;
    v0[31] = qword_10170E390;
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[32] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10065E4B8;
    return unsafeBlocking<A>(_:)(v0 + 15, sub_10001D704, v2, &type metadata for Configuration);
  }
  else
  {
    if (qword_101636A50 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170DD90);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing NotifyWhenFoundManager.", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = (void (*)(void))v0[22];

    v8(0);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_10065E4B8()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10065E5D0, 0, 0);
}

uint64_t sub_10065E5D0()
{
  uint64_t v24 = v0;
  char v1 = sub_1010ABD6C(*(void *)(v0 + 120));
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v2;
    void *v2 = v0;
    v2[1] = sub_10065E9EC;
    uint64_t v3 = *(void *)(v0 + 192);
    return sub_1002EBD1C(v3);
  }
  else
  {
    if (qword_101636A50 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170DD90);
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Server configured: allowing both local and online NWF notifications.", v8, 2u);
      swift_slowDealloc();
    }

    if (qword_101636A50 != -1) {
      swift_once();
    }
    uint64_t v9 = *(void *)(v0 + 224);
    uint64_t v10 = *(void *)(v0 + 200);
    uint64_t v11 = *(void *)(v0 + 208);
    uint64_t v12 = *(void *)(v0 + 192);
    sub_100010324(v5, (uint64_t)qword_10170DD90);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v12, v10);
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = *(void *)(v0 + 224);
    uint64_t v17 = *(void *)(v0 + 200);
    uint64_t v18 = *(void *)(v0 + 208);
    if (v15)
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 141558531;
      *(void *)(v0 + 128) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2081;
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 136) = sub_1008FA0F0(v20, v21, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      *(_WORD *)(v19 + 22) = 1024;
      *(_DWORD *)(v0 + 280) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Posted local NWF notification for beacon %{private,mask.hash}s %{BOOL}d.", (uint8_t *)v19, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v18 + 8))(*(void *)(v0 + 224), *(void *)(v0 + 200));
    }

    (*(void (**)(void))(v0 + 176))(0);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
}

uint64_t sub_10065E9EC(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 272) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10065EDF4;
  }
  else
  {
    *(unsigned char *)(v4 + 284) = a1 & 1;
    uint64_t v5 = sub_10065EB18;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10065EB18()
{
  uint64_t v19 = v0;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 284);
  if (qword_101636A50 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170DD90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 224);
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 208);
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558531;
    *(void *)(v0 + 128) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 136) = sub_1008FA0F0(v14, v15, &v18);
    uint64_t v1 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    *(_WORD *)(v13 + 22) = 1024;
    *(_DWORD *)(v0 + 280) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Posted local NWF notification for beacon %{private,mask.hash}s %{BOOL}d.", (uint8_t *)v13, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v12 + 8))(*(void *)(v0 + 224), *(void *)(v0 + 200));
  }

  (*(void (**)(uint64_t))(v0 + 176))(v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_10065EDF4()
{
  uint64_t v35 = v0;
  if (qword_101636A50 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v33 = type metadata accessor for Logger();
  sub_100010324(v33, (uint64_t)qword_10170DD90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v9 = *(void *)(v0 + 208);
  uint64_t v8 = *(void *)(v0 + 216);
  uint64_t v10 = *(void *)(v0 + 200);
  if (v7)
  {
    log = v5;
    os_log_type_t type = v6;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v30 = (void *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141558531;
    *(void *)(v0 + 144) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 152) = sub_1008FA0F0(v12, v13, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    *(_WORD *)(v11 + 22) = 2114;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 160) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v30 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Error reading posted state for %{private,mask.hash}s, %{public}@.", (uint8_t *)v11, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    swift_errorRelease();
    swift_errorRelease();
  }
  if (qword_101636A50 != -1) {
    swift_once();
  }
  uint64_t v15 = *(void *)(v0 + 224);
  uint64_t v16 = *(void *)(v0 + 200);
  uint64_t v17 = *(void *)(v0 + 208);
  uint64_t v18 = *(void *)(v0 + 192);
  sub_100010324(v33, (uint64_t)qword_10170DD90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v18, v16);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v22 = *(void *)(v0 + 224);
  uint64_t v23 = *(void *)(v0 + 200);
  uint64_t v24 = *(void *)(v0 + 208);
  if (v21)
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 141558531;
    *(void *)(v0 + 128) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 12) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 136) = sub_1008FA0F0(v26, v27, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    *(_WORD *)(v25 + 22) = 1024;
    *(_DWORD *)(v0 + 280) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Posted local NWF notification for beacon %{private,mask.hash}s %{BOOL}d.", (uint8_t *)v25, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v24 + 8))(*(void *)(v0 + 224), *(void *)(v0 + 200));
  }

  (*(void (**)(void))(v0 + 176))(0);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_10065F3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  uint64_t v6 = type metadata accessor for UUID();
  v5[20] = v6;
  v5[21] = *(void *)(v6 - 8);
  v5[22] = swift_task_alloc();
  return _swift_task_switch(sub_10065F464, 0, 0);
}

uint64_t sub_10065F464()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639240 + dword_101639240);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10065F5B4;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10065F5B4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10065F6B4, 0, 0);
}

uint64_t sub_10065F6B4()
{
  uint64_t v25 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[24])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[25] = v2;
    void *v2 = v0;
    v2[1] = sub_10065FAD8;
    uint64_t v3 = v0[19];
    return sub_1002F2178(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v5 = 0xD000000000000016;
    v5[1] = 0x80000001013F9660;
    swift_willThrow();
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v7 = v0[21];
    uint64_t v6 = v0[22];
    uint64_t v9 = v0[19];
    uint64_t v8 = v0[20];
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170E840);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v15 = v0[21];
    uint64_t v14 = v0[22];
    uint64_t v16 = v0[20];
    if (v13)
    {
      log = v11;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 141558531;
      v0[15] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2081;
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[16] = sub_1008FA0F0(v18, v19, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      *(_WORD *)(v17 + 22) = 2114;
      swift_errorRetain();
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      v0[17] = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v20;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, log, v12, "Failed to force publish for beacon %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v17, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    BOOL v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
}

uint64_t sub_10065FAD8()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10065FBEC;
  }
  else {
    uint64_t v2 = sub_100599904;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10065FBEC()
{
  BOOL v21 = v0;
  swift_release();
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v4 = v0[19];
  uint64_t v3 = v0[20];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170E840);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[21];
  uint64_t v9 = v0[22];
  uint64_t v11 = v0[20];
  if (v8)
  {
    log = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Failed to force publish for beacon %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_10065FF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101342130;
  uint64_t v7 = UUID.uuidString.getter();
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_10000B4CC();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1008C097C(a1);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  swift_retain();
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_100660124(_UNKNOWN **a1, uint64_t a2)
{
  uint64_t v103 = a2;
  uint64_t v3 = (int *)type metadata accessor for BeaconObservation();
  uint64_t v110 = *((void *)v3 - 1);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v93 = (uint64_t)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t)&v90 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v96 = (char *)&v90 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v109 = (uint64_t)&v90 - v12;
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v90 - v13;
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_101655530);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v98 = (uint64_t)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v95 = (uint64_t)&v90 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v90 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v94 = (uint64_t)&v90 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v99 = (uint64_t)&v90 - v26;
  __chkstk_darwin(v25);
  Swift::UInt v28 = (Swift::UInt)&v90 - v27;
  if (qword_101636CB8 != -1) {
LABEL_50:
  }
    swift_once();
  sub_10000588C(&qword_101655540);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v100 = 0;
  uint64_t v29 = v114[0];
  uint64_t v30 = *(void *)(v114[0] + 16);
  v101 = a1;
  if (v30 && (unint64_t v31 = sub_1007240CC((uint64_t)a1), (v32 & 1) != 0))
  {
    uint64_t v33 = *(void *)(*(void *)(v29 + 56) + 8 * v31);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v34 = sub_1007100C0(v33);
    swift_bridgeObjectRelease();
    size_t v35 = sub_100B752E8((uint64_t)v34);
    swift_release();
    uint64_t v36 = _swiftEmptyArrayStorage;
    *(void *)&long long v117 = _swiftEmptyArrayStorage;
    uint64_t v107 = *(void *)(v35 + 16);
    if (v107)
    {
      uint64_t v91 = v8;
      uint64_t v108 = v3;
      Swift::UInt v92 = v28;
      unint64_t v37 = 0;
      a1 = &off_10159F838;
      uint64_t v8 = -1;
      uint64_t v3 = (int *)qword_101364F00;
      uint64_t v106 = v22;
      v105 = v14;
      size_t v104 = v35;
      while (1)
      {
        if (v37 >= *(void *)(v35 + 16))
        {
          __break(1u);
          goto LABEL_50;
        }
        Swift::UInt v38 = *(void *)(v110 + 72);
        unint64_t v112 = (*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
        unint64_t v113 = v37 + 1;
        Swift::UInt v111 = v38;
        sub_1006CC8F8(v35 + v112 + v38 * v37, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        sub_1004DCCB0();
        uint64_t v39 = Set.init(minimumCapacity:)();
        uint64_t v40 = 0;
        for (uint64_t i = v39 + 56; ; uint64_t i = v39 + 56)
        {
          while (1)
          {
            uint64_t v42 = *((char *)&off_10159F838 + v40++ + 32);
            Hasher.init(_seed:)();
            Swift::UInt v28 = qword_101364F00[v42];
            Hasher._combine(_:)(v28);
            Swift::Int v43 = Hasher._finalize()();
            uint64_t v44 = -1 << *(unsigned char *)(v39 + 32);
            unint64_t v45 = v43 & ~v44;
            if (((*(void *)(i + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45) & 1) == 0) {
              goto LABEL_17;
            }
            uint64_t v46 = *(void *)(v39 + 48);
            if (qword_101364F00[*(char *)(v46 + v45)] != v28) {
              break;
            }
LABEL_10:
            if (v40 == 2) {
              goto LABEL_19;
            }
          }
          uint64_t v47 = ~v44;
          while (1)
          {
            unint64_t v45 = (v45 + 1) & v47;
            if (((*(void *)(i + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45) & 1) == 0) {
              break;
            }
            if (qword_101364F00[*(char *)(v46 + v45)] == v28) {
              goto LABEL_10;
            }
          }
LABEL_17:
          Swift::UInt v28 = v42;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v114[0] = v39;
          sub_100DE20D8(v28, v45, isUniquelyReferenced_nonNull_native);
          uint64_t v39 = v114[0];
          swift_bridgeObjectRelease();
          if (v40 == 2) {
            break;
          }
        }
LABEL_19:
        unint64_t v14 = v105;
        BOOL v49 = sub_100DC7BFC(v105[v108[6]], v39);
        swift_bridgeObjectRelease();
        if (v49)
        {
          sub_1006CD470((uint64_t)v14, v109, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          uint64_t v50 = v117;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B77F0(0, *(void *)(v50 + 16) + 1, 1);
            uint64_t v50 = v117;
          }
          Swift::UInt v28 = v111;
          unint64_t v51 = v112;
          unint64_t v53 = *(void *)(v50 + 16);
          unint64_t v52 = *(void *)(v50 + 24);
          if (v53 >= v52 >> 1)
          {
            sub_1000B77F0(v52 > 1, v53 + 1, 1);
            uint64_t v50 = v117;
          }
          *(void *)(v50 + 16) = v53 + 1;
          sub_1006CD470(v109, v50 + v51 + v53 * v28, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        }
        else
        {
          sub_1006CCE04((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        }
        uint64_t v22 = v106;
        size_t v35 = v104;
        unint64_t v37 = v113;
        if (v113 == v107)
        {
          uint64_t v36 = (void *)v117;
          Swift::UInt v28 = v92;
          uint64_t v3 = v108;
          uint64_t v8 = v91;
          break;
        }
      }
    }
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v36 = _swiftEmptyArrayStorage;
  }
  sub_100E4D5E0((uint64_t)v36, v28);
  swift_bridgeObjectRelease();
  uint64_t v54 = *(uint64_t (**)(Swift::UInt, uint64_t, int *))(v110 + 48);
  int v55 = v54(v28, 1, v3);
  if (v103 <= 1)
  {
    sub_10001D074(v28, (uint64_t)v22, (uint64_t *)&unk_101655530);
    if (v55 == 1)
    {
      sub_10001DAB4((uint64_t)v22, (uint64_t *)&unk_101655530);
    }
    else
    {
      uint64_t v59 = v95;
      sub_10001D608((uint64_t)v22, v95, (uint64_t *)&unk_101655530);
      if (v54(v59, 1, v3) == 1)
      {
        sub_10001DAB4(v59, (uint64_t *)&unk_101655530);
        return sub_10001DAB4(v28, (uint64_t *)&unk_101655530);
      }
      uint64_t v68 = v59;
      int v69 = *(unsigned __int8 *)(v59 + v3[6]);
      sub_1006CCE04(v68, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (v69 != 30) {
        return sub_10001DAB4(v28, (uint64_t *)&unk_101655530);
      }
    }
    uint64_t v70 = type metadata accessor for UUID();
    uint64_t v71 = (uint64_t)v101;
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t))(*(void *)(v70 - 8) + 16))(v8, v101, v70);
    Date.init()();
    *(unsigned char *)(v8 + v3[6]) = 31;
    uint64_t v72 = qword_10170E330;
    sub_10000588C(&qword_10163A778);
    unint64_t v73 = (*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
    uint64_t v74 = swift_allocObject();
    *(_OWORD *)(v74 + 16) = xmmword_101342130;
    sub_1006CC8F8(v8, v74 + v73, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v75 = type metadata accessor for Transaction();
    __chkstk_darwin(v75);
    *(&v90 - 4) = v72;
    *(&v90 - 3) = v74;
    *(&v90 - 2) = 0;
    *(&v90 - 1) = 0;
    unint64_t v113 = v76;
    static Transaction.named<A>(_:with:)();
    swift_bridgeObjectRelease();
    uint64_t v77 = *(void *)(v97 + 280);
    sub_100ACCD98(v71, (uint64_t)&v117);
    if (v118)
    {
      sub_10001CEB0(&v117, (uint64_t)v114);
      uint64_t v78 = v115;
      uint64_t v79 = v116;
      uint64_t v80 = sub_10001CD44(v114, v115);
      id v81 = sub_100B2B68C((uint64_t)v80, v77, v78, v79);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v114);
    }
    else
    {
      sub_10001DAB4((uint64_t)&v117, (uint64_t *)&unk_10163BBE0);
      id v81 = 0;
    }
    uint64_t v82 = v98;
    sub_10001D074(v28, v98, (uint64_t *)&unk_101655530);
    if (v54(v82, 1, v3) == 1)
    {
      sub_10001DAB4(v82, (uint64_t *)&unk_101655530);
      double v83 = 0.0;
    }
    else
    {
      uint64_t v84 = v82;
      uint64_t v85 = v93;
      sub_1006CD470(v84, v93, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      Date.timeIntervalSinceNow.getter();
      double v83 = fabs(v86);
      sub_1006CCE04(v85, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    }
    uint64_t v87 = swift_allocObject();
    *(double *)(v87 + 16) = v83;
    *(void *)(v87 + 24) = v81;
    id v88 = v81;
    static Transaction.asyncTask(name:block:)();

    swift_release();
    uint64_t v67 = v8;
    goto LABEL_47;
  }
  uint64_t v56 = v99;
  sub_10001D074(v28, v99, (uint64_t *)&unk_101655530);
  if (v55 == 1)
  {
    sub_10001DAB4(v56, (uint64_t *)&unk_101655530);
LABEL_38:
    uint64_t v61 = type metadata accessor for UUID();
    uint64_t v62 = (uint64_t)v96;
    (*(void (**)(char *, _UNKNOWN **, uint64_t))(*(void *)(v61 - 8) + 16))(v96, v101, v61);
    Date.init()();
    *(unsigned char *)(v62 + v3[6]) = 30;
    uint64_t v63 = qword_10170E330;
    sub_10000588C(&qword_10163A778);
    unint64_t v64 = (*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
    uint64_t v65 = swift_allocObject();
    *(_OWORD *)(v65 + 16) = xmmword_101342130;
    sub_1006CC8F8(v62, v65 + v64, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v66 = type metadata accessor for Transaction();
    __chkstk_darwin(v66);
    *(&v90 - 4) = v63;
    *(&v90 - 3) = v65;
    *(&v90 - 2) = 0;
    *(&v90 - 1) = 0;
    static Transaction.named<A>(_:with:)();
    swift_bridgeObjectRelease();
    uint64_t v67 = v62;
LABEL_47:
    sub_1006CCE04(v67, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    return sub_10001DAB4(v28, (uint64_t *)&unk_101655530);
  }
  uint64_t v57 = v56;
  uint64_t v58 = v94;
  sub_10001D608(v57, v94, (uint64_t *)&unk_101655530);
  if (v54(v58, 1, v3) == 1)
  {
    sub_10001DAB4(v58, (uint64_t *)&unk_101655530);
  }
  else
  {
    int v60 = *(unsigned __int8 *)(v58 + v3[6]);
    sub_1006CCE04(v58, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    if (v60 == 31) {
      goto LABEL_38;
    }
  }
  return sub_10001DAB4(v28, (uint64_t *)&unk_101655530);
}

uint64_t sub_100660DA0(uint64_t a1, double a2)
{
  *(void *)(v2 + 24) = a1;
  *(double *)(v2 + 16) = a2;
  return _swift_task_switch(sub_100660DC4, 0, 0);
}

uint64_t sub_100660DC4()
{
  uint64_t v1 = *(void **)(v0 + 24);
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v2 = (char *)swift_allocObject();
  *(void *)(v0 + 32) = v2;
  swift_defaultActor_initialize();
  *((void *)v2 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v3 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v4);
  *((void *)v2 + 15) = 0xD00000000000003DLL;
  *((void *)v2 + 16) = 0x80000001014036C0;
  id v6 = v1;
  return _swift_task_switch(sub_100660F1C, v2, 0);
}

uint64_t sub_100660F1C()
{
  sub_1011A83C8(*(void *)(v0 + 32), *(void **)(v0 + 24), *(double *)(v0 + 16));

  return _swift_task_switch(sub_100660FB8, 0, 0);
}

uint64_t sub_100660FB8()
{
  type metadata accessor for AnalyticsPublisher();
  v0[5] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10066106C;
  uint64_t v2 = v0[4];
  return sub_101196838(v2);
}

uint64_t sub_10066106C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100661184, 0, 0);
}

uint64_t sub_100661184()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_1006611E4(void *a1, double a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347BA0;
  *(void *)(inited + 32) = 0xD000000000000016;
  *(void *)(inited + 40) = 0x8000000101403700;
  *(void *)(inited + 48) = 0;
  *(unsigned char *)(inited + 56) = 1;
  *(void *)(inited + 64) = 0x6E6F697461727564;
  *(void *)(inited + 72) = 0xE800000000000000;
  *(void *)(inited + 80) = [objc_allocWithZone((Class)NSNumber) initWithDouble:a2];
  *(unsigned char *)(inited + 88) = 0;
  unint64_t v9 = sub_10092E03C(inited);
  if (!a1) {
    return (id)v9;
  }
  id v10 = a1;
  id result = [v10 systemVersion];
  if (result)
  {
    uint64_t v12 = (uint64_t)result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v47 = v9;
    sub_10016D430(v12, 0, 0xD000000000000013, 0x80000001013FD3D0, isUniquelyReferenced_nonNull_native);
    unint64_t v14 = v47;
    swift_bridgeObjectRelease();
    id result = [v10 systemVersion];
    if (result)
    {
      uint64_t v15 = (uint64_t)result;
      char v16 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v47 = v14;
      sub_10016D430(v15, 0, 0xD00000000000001BLL, 0x80000001013FD3F0, v16);
      unint64_t v17 = v47;
      swift_bridgeObjectRelease();
      id v18 = [objc_allocWithZone((Class)NSNumber) initWithInteger:[v10 batteryLevel]];
      char v19 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v47 = v17;
      sub_10016D430((uint64_t)v18, 0, 0x4C79726574746162, 0xEC0000006C657665, v19);
      unint64_t v20 = v47;
      swift_bridgeObjectRelease();
      id v21 = SPBeaconTaskNameBeginLeashing;
      id v22 = [v10 taskInformation];
      type metadata accessor for SPBeaconTaskName(0);
      sub_10001D4B0(0, &qword_101653D80);
      sub_100691B60(&qword_1016387E0, type metadata accessor for SPBeaconTaskName);
      uint64_t v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v23 + 16) && (uint64_t v24 = sub_1007248DC(v21), (v25 & 1) != 0))
      {
        id v26 = *(id *)(*(void *)(v23 + 56) + 8 * v24);

        swift_bridgeObjectRelease();
        id v27 = [v26 state];

        BOOL v28 = v27 == 0;
      }
      else
      {

        swift_bridgeObjectRelease();
        BOOL v28 = 0;
      }
      char v29 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v47 = v20;
      sub_10016D430(v28, 1, 0x6563697665447369, 0xEF6465687361654CLL, v29);
      unint64_t v30 = v47;
      swift_bridgeObjectRelease();
      uint64_t v31 = [v10 connected];
      char v32 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v47 = v30;
      sub_10016D430(v31, 1, 0xD000000000000011, 0x80000001013F72A0, v32);
      unint64_t v9 = v47;
      swift_bridgeObjectRelease();
      id v33 = [v10 role];
      if (v33)
      {
        uint64_t v34 = v33;
        id v35 = [v33 role];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v36 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        char v37 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v47 = v9;
        sub_10016D430((uint64_t)v36, 0, 1701605234, 0xE400000000000000, v37);
        unint64_t v9 = v47;
        swift_bridgeObjectRelease();
      }
      id v38 = [self sharedInstance];
      unsigned int v39 = [v38 isInternalBuild];

      if (!v39) {
        goto LABEL_13;
      }
      id v40 = [v10 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      NSString v41 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      char v42 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v47 = v9;
      sub_10016D430((uint64_t)v41, 0, 0x6544646572696170, 0xEE00444965636976, v42);
      unint64_t v9 = v47;
      swift_bridgeObjectRelease();
      id v43 = [v10 serialNumber];
      if (v43)
      {
        uint64_t v44 = (uint64_t)v43;
        char v45 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v47 = v9;
        sub_10016D430(v44, 0, 0xD000000000000018, 0x80000001013F72C0, v45);
        unint64_t v9 = v47;

        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_13:
      }
      return (id)v9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100661834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  __chkstk_darwin(v6);
  char v25 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101347BA0;
  aBlock[0] = *v3;
  sub_10000588C(&qword_101642888);
  uint64_t v11 = String.init<A>(describing:)();
  uint64_t v13 = v12;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v14 = sub_10000B4CC();
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = v13;
  *(void *)(v10 + 96) = &type metadata for String;
  *(void *)(v10 + 104) = v14;
  *(void *)(v10 + 64) = v14;
  *(void *)(v10 + 72) = 0xD00000000000001FLL;
  *(void *)(v10 + 80) = 0x8000000101404300;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (qword_1016372F0 != -1) {
    swift_once();
  }
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  *(void *)(v15 + 56) = sub_10000588C((uint64_t *)&unk_1016636E0);
  *(void *)(v15 + 64) = sub_100062734(&qword_10164B440, (uint64_t *)&unk_1016636E0);
  *(void *)(v15 + 32) = a1;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  char v16 = (void *)swift_allocObject();
  v16[2] = a1;
  v16[3] = v4;
  uint64_t v17 = v23;
  v16[4] = v22;
  v16[5] = v17;
  aBlock[4] = sub_1006CC8EC;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CFEF0;
  id v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  char v29 = _swiftEmptyArrayStorage;
  sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  char v19 = v25;
  uint64_t v20 = v28;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v19, v20);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v26);
  return swift_release();
}

uint64_t sub_100661D14(uint64_t a1, char *a2, void (*a3)(void *), uint64_t a4)
{
  v68[2] = a4;
  int v69 = a3;
  uint64_t v6 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v6 - 8);
  id v81 = ((char *)v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v86 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v8 = *(void *)(v86 - 8);
  uint64_t v9 = __chkstk_darwin(v86);
  uint64_t v85 = (void *)((char *)v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v68 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v80 = (uint64_t)v68 - v15;
  __chkstk_darwin(v14);
  uint64_t v79 = (uint64_t)v68 - v16;
  uint64_t v84 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v84 - 8);
  uint64_t v18 = __chkstk_darwin(v84);
  uint64_t v70 = (char *)v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v21 = (char *)v68 - v20;
  uint64_t v22 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(a1 + 16);
  uint64_t v71 = v17;
  double v83 = a2;
  if (!v25)
  {
    unint64_t v30 = (void (**)(char *, uint64_t, uint64_t, uint64_t))sub_10126D714();
    id v40 = (uint64_t)v30[2];
    if (v40) {
      goto LABEL_16;
    }
LABEL_13:
    v69(_swiftEmptyArrayStorage);
    return swift_bridgeObjectRelease();
  }
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v26 = v17 + 16;
  uint64_t v28 = a1 + ((*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64));
  uint64_t v82 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 40);
  uint64_t v29 = *(void *)(v26 + 56);
  unint64_t v76 = (unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 32);
  uint64_t v77 = v27;
  uint64_t v74 = (void (**)(char *, char *, uint64_t))(v26 + 16);
  uint64_t v75 = v29;
  uint64_t v78 = v26;
  uint64_t v72 = (void (**)(char *, uint64_t))(v26 - 8);
  unint64_t v73 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  v68[1] = a1;
  swift_bridgeObjectRetain();
  unint64_t v30 = (void (**)(char *, uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
  uint64_t v31 = v84;
  while (1)
  {
    v77(v24, v28, v31);
    char v32 = *v82;
    (*v82)(v24, 0, 1, v31);
    if ((*v76)(v24, 1, v31) == 1) {
      break;
    }
    unint64_t v33 = (unint64_t)v30;
    (*v74)(v21, v24, v31);
    uint64_t v34 = (uint64_t)v81;
    sub_100AE381C((uint64_t)v21, (uint64_t)v81);
    if ((*v73)(v34, 1, v86) == 1)
    {
      sub_10001DAB4(v34, &qword_1016511E0);
    }
    else
    {
      uint64_t v35 = v79;
      sub_1006CD470(v34, v79, type metadata accessor for WildModeAssociationRecord);
      sub_1006CC8F8(v35, v80, type metadata accessor for WildModeAssociationRecord);
      unint64_t v36 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v36 = sub_100A70B4C(0, *(void *)(v33 + 16) + 1, 1, v33);
      }
      unint64_t v38 = *(void *)(v36 + 16);
      unint64_t v37 = *(void *)(v36 + 24);
      uint64_t v39 = v36;
      if (v38 >= v37 >> 1) {
        uint64_t v39 = sub_100A70B4C(v37 > 1, v38 + 1, 1, v36);
      }
      *(void *)(v39 + 16) = v38 + 1;
      unint64_t v30 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v39;
      sub_1006CD470(v80, v39+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v38, type metadata accessor for WildModeAssociationRecord);
      sub_1006CCE04(v79, type metadata accessor for WildModeAssociationRecord);
    }
    uint64_t v31 = v84;
    (*v72)(v21, v84);
    v28 += v75;
    if (!--v25)
    {
      v32(v24, 1, 1, v31);
      break;
    }
  }
  swift_bridgeObjectRelease();
  id v40 = (uint64_t)v30[2];
  if (!v40) {
    goto LABEL_13;
  }
LABEL_16:
  v89 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  unint64_t v41 = 0;
  unint64_t v42 = 250;
  uint64_t v82 = v30;
  do
  {
    if (v41 >= (unint64_t)v30[2])
    {
      __break(1u);
      goto LABEL_48;
    }
    unint64_t v43 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v44 = *(void *)(v8 + 72);
    sub_1006CC8F8((uint64_t)v30 + v43 + v44 * v41, (uint64_t)v13, type metadata accessor for WildModeAssociationRecord);
    int v45 = v13[*(int *)(v86 + 64)];
    if (v45 == 8 || (v45 & 0xFA) == 0)
    {
      sub_1006CCE04((uint64_t)v13, type metadata accessor for WildModeAssociationRecord);
    }
    else
    {
      sub_1006CD470((uint64_t)v13, (uint64_t)v85, type metadata accessor for WildModeAssociationRecord);
      unint64_t v47 = v89;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7CB0(0, v47[2] + 1, 1);
        unint64_t v30 = v82;
        unint64_t v47 = v89;
      }
      unint64_t v49 = v47[2];
      unint64_t v48 = v47[3];
      if (v49 >= v48 >> 1)
      {
        sub_1000B7CB0(v48 > 1, v49 + 1, 1);
        unint64_t v30 = v82;
        unint64_t v47 = v89;
      }
      _OWORD v47[2] = v49 + 1;
      sub_1006CD470((uint64_t)v85, (uint64_t)v47 + v43 + v49 * v44, type metadata accessor for WildModeAssociationRecord);
      unint64_t v42 = 250;
    }
    ++v41;
  }
  while (v40 != v41);
  swift_bridgeObjectRelease();
  uint64_t v50 = (uint64_t)v89;
  swift_retain();
  unint64_t v42 = (unint64_t)sub_1006AF6D0(v50);
  swift_release();
  swift_release();
  if (qword_101636CA8 == -1) {
    goto LABEL_30;
  }
LABEL_48:
  swift_once();
LABEL_30:
  uint64_t v51 = type metadata accessor for Logger();
  sub_100010324(v51, (uint64_t)qword_10170E318);
  swift_bridgeObjectRetain_n();
  unint64_t v52 = Logger.logObject.getter();
  int v53 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v52, (os_log_type_t)v53))
  {

    swift_bridgeObjectRelease_n();
LABEL_45:
    v69((void *)v42);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  LODWORD(v86) = v53;
  uint64_t v54 = swift_slowAlloc();
  uint64_t v85 = (void *)swift_slowAlloc();
  v89 = v85;
  *(_DWORD *)uint64_t v54 = 134218242;
  if (v42 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v55 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  uint64_t v87 = (void *)v55;
  double v83 = &v88;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v54 + 12) = 2082;
  if (!v55)
  {
LABEL_44:
    uint64_t v65 = Array.description.getter();
    unint64_t v67 = v66;
    swift_bridgeObjectRelease();
    uint64_t v87 = (void *)sub_1008FA0F0(v65, v67, (uint64_t *)&v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v86, "unknownBeacons[%ld]: %{public}s ", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_45;
  }
  uint64_t v80 = v54;
  id v81 = v52;
  uint64_t v87 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000B7034(0, v55 & ~(v55 >> 63), 0);
  if ((v55 & 0x8000000000000000) == 0)
  {
    uint64_t v57 = 0;
    uint64_t v58 = v87;
    uint64_t v59 = v70;
    do
    {
      if ((v42 & 0xC000000000000001) != 0) {
        id v60 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v60 = *(id *)(v42 + 8 * v57 + 32);
      }
      id v61 = v60;
      id v62 = [v61 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v87 = v58;
      unint64_t v64 = v58[2];
      unint64_t v63 = v58[3];
      if (v64 >= v63 >> 1)
      {
        sub_1000B7034(v63 > 1, v64 + 1, 1);
        uint64_t v58 = v87;
      }
      ++v57;
      v58[2] = v64 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v71 + 32))((unint64_t)v58+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(void *)(v71 + 72) * v64, v59, v84);
    }
    while (v55 != v57);
    uint64_t v54 = v80;
    unint64_t v52 = v81;
    goto LABEL_44;
  }
  __break(1u);
  return result;
}

void *sub_100662754(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for WildModeAssociationRecord(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v71 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v71 - v13;
  uint64_t v91 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v91 - 8);
  uint64_t v16 = __chkstk_darwin(v91);
  id v81 = (char *)v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v71 - v18;
  uint64_t v80 = v1;
  __int16 v20 = sub_10126EC74(a1);
  id v21 = sub_10110DB88(v20);
  uint64_t v84 = v21[2];
  if (!v84)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyDictionarySingleton;
  }
  uint64_t v79 = v12;
  uint64_t v23 = 0;
  uint64_t v86 = 0;
  unint64_t v73 = &v98;
  uint64_t v77 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager;
  v89 = (void (**)(char *, uint64_t))(v15 + 8);
  unint64_t v76 = (void (**)(char *, char *, uint64_t))(v15 + 32);
  uint64_t v24 = _swiftEmptyDictionarySingleton;
  uint64_t v82 = SPBeaconTaskNamePlaySound;
  *(void *)&long long v22 = 136315394;
  long long v72 = v22;
  v71[1] = (char *)&type metadata for Any + 8;
  uint64_t v90 = v14;
  uint64_t v95 = v19;
  uint64_t v74 = a1;
  uint64_t v78 = v9;
  double v83 = v21;
  do
  {
    uint64_t v93 = v24;
    uint64_t v94 = v23;
    id v31 = (id)v21[v23 + 4];
    static Date.trustedNow.getter((uint64_t)v19);
    uint64_t v32 = type metadata accessor for UUID();
    uint64_t v92 = *(void *)(v32 - 8);
    uint64_t v87 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56);
    uint64_t v88 = v92 + 56;
    v87(v14, 1, 1, v32);
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;
    BOOL v37 = v33 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v35 == v36;
    uint64_t v96 = v32;
    if (v37)
    {
      uint64_t v39 = swift_bridgeObjectRelease_n();
    }
    else
    {
      char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = swift_bridgeObjectRelease();
      if ((v38 & 1) == 0)
      {
        id v40 = 0;
        uint64_t v41 = 2;
        goto LABEL_21;
      }
    }
    id v85 = v31;
    __chkstk_darwin(v39);
    v71[-2] = v42;
    v71[-1] = a1;
    sub_10001D4B0(0, &qword_101653D80);
    uint64_t v43 = v86;
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v86 = v43;
    uint64_t v44 = (void *)v99[0];
    if (qword_101636CF8 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_100010324(v45, (uint64_t)qword_10170E3C8);
    sub_1006CC8F8(a1, (uint64_t)v5, type metadata accessor for WildModeAssociationRecord);
    id v46 = v44;
    unint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      v99[0] = v75;
      *(_DWORD *)uint64_t v49 = v72;
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v97 = sub_1008FA0F0(v50, v51, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1006CCE04((uint64_t)v5, type metadata accessor for WildModeAssociationRecord);
      *(_WORD *)(v49 + 12) = 2080;
      id v52 = [v46 debugDescription];
      uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v55 = v54;

      a1 = v74;
      uint64_t v97 = sub_1008FA0F0(v53, v55, v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "UT Play taskInfo for %s: %s", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v19 = v95;
      swift_slowDealloc();
    }
    else
    {
      sub_1006CCE04((uint64_t)v5, type metadata accessor for WildModeAssociationRecord);
    }
    uint64_t v9 = v78;
    uint64_t v41 = (uint64_t)[v46 state];
    id v56 = [v46 lastUpdated];
    uint64_t v57 = v81;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v58 = v91;
    (*v89)(v19, v91);
    (*v76)(v19, v57, v58);
    id v40 = [v46 error];
    id v59 = [v46 commandIdentifier];
    if (v59)
    {
      id v60 = v59;
      uint64_t v61 = (uint64_t)v79;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v62 = 0;
      id v46 = v60;
    }
    else
    {
      uint64_t v62 = 1;
      uint64_t v61 = (uint64_t)v79;
    }

    uint64_t v63 = (uint64_t)v90;
    sub_10001DAB4((uint64_t)v90, &qword_101638CF0);
    v87((char *)v61, v62, 1, v96);
    sub_10001D608(v61, v63, &qword_101638CF0);
    id v31 = v85;
LABEL_21:
    id v64 = v31;
    swift_errorRetain();
    v65.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v66 = v92;
    if (v40)
    {
      unint64_t v67 = (void *)_convertErrorToNSError(_:)();
      swift_errorRelease();
    }
    else
    {
      unint64_t v67 = 0;
    }
    uint64_t v68 = v96;
    id v69 = [objc_allocWithZone((Class)SPBeaconTaskInformation) initWithName:v64 lastUpdated:v65.super.isa error:v67 state:v41];

    uint64_t v14 = v90;
    sub_10001D074((uint64_t)v90, (uint64_t)v9, &qword_101638CF0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v9, 1, v68) == 1)
    {
      v25.super.Class isa = 0;
    }
    else
    {
      v25.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v9, v68);
    }
    uint64_t v26 = v94 + 1;
    [v69 setCommandIdentifier:v25.super.isa];

    id v27 = v64;
    id v28 = v69;
    uint64_t v29 = (uint64_t)v93;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v99[0] = v29;
    sub_10016E960((uint64_t)v28, v27, isUniquelyReferenced_nonNull_native);
    uint64_t v23 = v26;
    uint64_t v24 = (void *)v99[0];

    swift_bridgeObjectRelease();
    swift_errorRelease();
    sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
    uint64_t v19 = v95;
    (*v89)(v95, v91);
    id v21 = v83;
  }
  while (v84 != v23);
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t sub_1006630A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_101636CA8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170E318);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    sub_1008FA0F0(0xD000000000000035, 0x8000000101404390, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  type metadata accessor for Transaction();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v3;
  v10[3] = a1;
  v10[4] = a2;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_1006632A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  return _swift_task_switch(sub_1006632C8, 0, 0);
}

uint64_t sub_1006632C8()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639258 + dword_101639258);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100663418;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100663418(uint64_t a1)
{
  *(void *)(*(void *)v1 + 168) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100663518, 0, 0);
}

uint64_t sub_100663518()
{
  uint64_t v10 = v0;
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 168))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v2;
    void *v2 = v0;
    v2[1] = sub_10066375C;
    return sub_1012354A0();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E0D0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446210;
      *(void *)(v0 + 120) = sub_1008FA0F0(0xD000000000000035, 0x8000000101404390, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s Missing OwnerCommandService!", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(void))(v0 + 144))(0);
    os_log_type_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_10066375C()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1006638E4;
  }
  else {
    uint64_t v2 = sub_100663870;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100663870()
{
  (*(void (**)(void))(v0 + 144))(0);
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1006638E4()
{
  if (qword_101636CA8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170E318);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[16] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error stop fetching encrypted serial number %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = (void (*)(void))v0[18];

  v7(0);
  swift_release();
  swift_errorRelease();
  os_log_type_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100663AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  id v28 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - v9;
  if (qword_101636CA8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170E318);
  id v27 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v27(v10, a1, v5);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v25 = a1;
    uint64_t v15 = v14;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v32 = v24;
    *(_DWORD *)uint64_t v15 = 136446466;
    uint64_t v31 = sub_1008FA0F0(0xD000000000000030, 0x8000000101404410, &v32);
    uint64_t v26 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2082;
    uint64_t v23 = v15 + 14;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v31 = sub_1008FA0F0(v16, v17, &v32);
    a3 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s identifier: %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v25;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  type metadata accessor for Transaction();
  uint64_t v18 = v28;
  v27(v28, a1, v5);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  __int16 v20 = (char *)swift_allocObject();
  uint64_t v21 = v29;
  *((void *)v20 + 2) = v30;
  *((void *)v20 + 3) = v21;
  *((void *)v20 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v20[v19], v18, v5);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_100663ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[42] = a3;
  v4[43] = a4;
  v4[40] = a1;
  v4[41] = a2;
  sub_10000588C(&qword_1016511E0);
  v4[44] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for WildModeAssociationRecord(0);
  v4[45] = v5;
  v4[46] = *(void *)(v5 - 8);
  v4[47] = swift_task_alloc();
  sub_10000588C(&qword_101649E40);
  v4[48] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v4[49] = v6;
  v4[50] = *(void *)(v6 - 8);
  v4[51] = swift_task_alloc();
  v4[52] = swift_task_alloc();
  v4[53] = sub_10000588C((uint64_t *)&unk_10163B1D0);
  v4[54] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for LocalFindableAccessoryRecord();
  v4[55] = v7;
  v4[56] = *(void *)(v7 - 8);
  v4[57] = swift_task_alloc();
  v4[58] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v4[59] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[60] = v9;
  v4[61] = *(void *)(v9 + 64);
  v4[62] = swift_task_alloc();
  v4[63] = swift_task_alloc();
  v4[64] = swift_task_alloc();
  v4[65] = swift_task_alloc();
  v4[66] = swift_task_alloc();
  v4[67] = swift_task_alloc();
  v4[68] = swift_task_alloc();
  return _swift_task_switch(sub_1006641B0, 0, 0);
}

uint64_t sub_1006641B0()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639258 + dword_101639258);
    os_log_type_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 552) = v3;
    *os_log_type_t v3 = v0;
    v3[1] = sub_100664300;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100664300(uint64_t a1)
{
  *(void *)(*(void *)v1 + 560) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100664400, 0, 0);
}

uint64_t sub_100664400()
{
  uint64_t v1 = *(void *)(v0 + 560);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 160))
    {
      sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
      sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
      os_log_type_t v13 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 568) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_100664708;
      return v13();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E0D0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing OwnerCommandService to fetchUnauthorizedEncryptedPayload!", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = *(void *)(v0 + 392);
    uint64_t v9 = *(void *)(v0 + 400);
    uint64_t v10 = *(void *)(v0 + 384);
    uint64_t v11 = *(void (**)(uint64_t))(v0 + 328);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, 1, 1, v8);
    v11(v10);
    sub_10001DAB4(v10, &qword_101649E40);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  return result;
}

uint64_t sub_100664708(uint64_t a1)
{
  *(void *)(*(void *)v1 + 576) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100664808, 0, 0);
}

uint64_t sub_100664808()
{
  uint64_t v68 = v0;
  uint64_t v1 = v0[72];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
  if (v1)
  {
    if (qword_101636CA8 != -1) {
      swift_once();
    }
    uint64_t v2 = v0[68];
    uint64_t v3 = v0[59];
    uint64_t v4 = v0[60];
    uint64_t v5 = v0[43];
    uint64_t v6 = type metadata accessor for Logger();
    v0[73] = sub_100010324(v6, (uint64_t)qword_10170E318);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v0[74] = v7;
    v0[75] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v7(v2, v5, v3);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[68];
    uint64_t v13 = v0[59];
    uint64_t v12 = v0[60];
    if (v10)
    {
      os_log_type_t type = v9;
      uint64_t v14 = swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446723;
      v0[37] = sub_1008FA0F0(0xD000000000000030, 0x8000000101404410, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2160;
      v0[38] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 22) = 2081;
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[39] = sub_1008FA0F0(v15, v16, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v17(v11, v13);
      _os_log_impl((void *)&_mh_execute_header, v8, type, "%{public}s Checking LocalFindableRecord: %{private,mask.hash}s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v17(v0[68], v0[59]);
    }

    v0[76] = v17;
    uint64_t v35 = v0[67];
    uint64_t v36 = v0[60];
    uint64_t v37 = v0[59];
    v7(v35, v0[43], v37);
    unint64_t v38 = (*(unsigned __int8 *)(v36 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    uint64_t v39 = swift_allocObject();
    v0[77] = v39;
    *(void *)(v39 + 16) = v1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v36 + 32))(v39 + v38, v35, v37);
    swift_retain();
    id v40 = (void *)swift_task_alloc();
    v0[78] = v40;
    *id v40 = v0;
    v40[1] = sub_100665218;
    uint64_t v42 = v0[53];
    uint64_t v41 = v0[54];
    return withTimeout<A>(_:block:)(v41, 5000000000000000000, 0, &unk_10164B470, v39, v42);
  }
  else
  {
    uint64_t v18 = v0[45];
    uint64_t v19 = v0[46];
    uint64_t v20 = v0[44];
    sub_100AE381C(v0[43], v20);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v20, 1, v18) == 1)
    {
      sub_10001DAB4(v0[44], &qword_1016511E0);
      if (qword_101636CA8 != -1) {
        swift_once();
      }
      uint64_t v21 = v0[66];
      uint64_t v22 = v0[59];
      uint64_t v23 = v0[60];
      uint64_t v24 = v0[43];
      uint64_t v25 = type metadata accessor for Logger();
      sub_100010324(v25, (uint64_t)qword_10170E318);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, v24, v22);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      BOOL v28 = os_log_type_enabled(v26, v27);
      uint64_t v29 = v0[66];
      uint64_t v30 = v0[59];
      uint64_t v31 = v0[60];
      if (v28)
      {
        uint64_t v32 = swift_slowAlloc();
        uint64_t v67 = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 141558275;
        v0[25] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v32 + 12) = 2081;
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[26] = sub_1008FA0F0(v33, v34, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "No wildModeAssociationRecord for %{private,mask.hash}s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v31 + 8))(v0[66], v0[59]);
      }

      uint64_t v59 = v0[48];
      id v60 = (void (*)(uint64_t))v0[41];
      (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[50] + 56))(v59, 1, 1, v0[49]);
      v60(v59);
      swift_release();
      sub_10001DAB4(v59, &qword_101649E40);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v61 = (uint64_t (*)(void))v0[1];
      return v61();
    }
    else
    {
      sub_1006CD470(v0[44], v0[47], type metadata accessor for WildModeAssociationRecord);
      if (qword_101636CA8 != -1) {
        swift_once();
      }
      uint64_t v43 = v0[65];
      uint64_t v44 = v0[59];
      uint64_t v45 = v0[60];
      uint64_t v46 = v0[43];
      uint64_t v47 = type metadata accessor for Logger();
      v0[82] = sub_100010324(v47, (uint64_t)qword_10170E318);
      os_log_type_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16);
      v0[83] = v48;
      v0[84] = (v45 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v48(v43, v46, v44);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.default.getter();
      BOOL v51 = os_log_type_enabled(v49, v50);
      uint64_t v52 = v0[65];
      uint64_t v53 = v0[59];
      uint64_t v54 = v0[60];
      if (v51)
      {
        unint64_t v55 = (uint8_t *)swift_slowAlloc();
        uint64_t v67 = swift_slowAlloc();
        *(_DWORD *)unint64_t v55 = 136446210;
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[29] = sub_1008FA0F0(v56, v57, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
        v58(v52, v53);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Fetching encrypted serial number for %{public}s", v55, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
        v58(v0[65], v0[59]);
      }

      v0[85] = v58;
      uint64_t v62 = (void *)swift_task_alloc();
      v0[86] = v62;
      void *v62 = v0;
      v62[1] = sub_100665F18;
      uint64_t v63 = v0[51];
      uint64_t v64 = v0[47];
      return sub_10123333C(v63, v64);
    }
  }
}

uint64_t sub_100665218()
{
  *(void *)(*(void *)v1 + 632) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100666208;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100665334;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100665334()
{
  unint64_t v55 = v0;
  uint64_t v1 = v0[54];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[56] + 48))(v1, 1, v0[55]) == 1)
  {
    swift_release();
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B1D0);
    uint64_t v2 = v0[45];
    uint64_t v3 = v0[46];
    uint64_t v4 = v0[44];
    sub_100AE381C(v0[43], v4);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
    {
      sub_10001DAB4(v0[44], &qword_1016511E0);
      if (qword_101636CA8 != -1) {
        swift_once();
      }
      uint64_t v5 = v0[66];
      uint64_t v6 = v0[59];
      uint64_t v7 = v0[60];
      uint64_t v8 = v0[43];
      uint64_t v9 = type metadata accessor for Logger();
      sub_100010324(v9, (uint64_t)qword_10170E318);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8, v6);
      BOOL v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      BOOL v12 = os_log_type_enabled(v10, v11);
      uint64_t v13 = v0[66];
      uint64_t v14 = v0[59];
      uint64_t v15 = v0[60];
      if (v12)
      {
        uint64_t v16 = swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 141558275;
        v0[25] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v16 + 12) = 2081;
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[26] = sub_1008FA0F0(v17, v18, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "No wildModeAssociationRecord for %{private,mask.hash}s", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v15 + 8))(v0[66], v0[59]);
      }

      uint64_t v48 = v0[48];
      uint64_t v49 = (void (*)(uint64_t))v0[41];
      (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[50] + 56))(v48, 1, 1, v0[49]);
      v49(v48);
      swift_release();
      sub_10001DAB4(v48, &qword_101649E40);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      os_log_type_t v50 = (uint64_t (*)(void))v0[1];
      return v50();
    }
    else
    {
      sub_1006CD470(v0[44], v0[47], type metadata accessor for WildModeAssociationRecord);
      if (qword_101636CA8 != -1) {
        swift_once();
      }
      uint64_t v28 = v0[65];
      uint64_t v29 = v0[59];
      uint64_t v30 = v0[60];
      uint64_t v31 = v0[43];
      uint64_t v32 = type metadata accessor for Logger();
      v0[82] = sub_100010324(v32, (uint64_t)qword_10170E318);
      uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
      v0[83] = v33;
      v0[84] = (v30 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v33(v28, v31, v29);
      unint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      BOOL v36 = os_log_type_enabled(v34, v35);
      uint64_t v37 = v0[65];
      uint64_t v38 = v0[59];
      uint64_t v39 = v0[60];
      if (v36)
      {
        id v40 = (uint8_t *)swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        *(_DWORD *)id v40 = 136446210;
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[29] = sub_1008FA0F0(v41, v42, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
        v43(v37, v38);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Fetching encrypted serial number for %{public}s", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
        v43(v0[65], v0[59]);
      }

      v0[85] = v43;
      BOOL v51 = (void *)swift_task_alloc();
      v0[86] = v51;
      void *v51 = v0;
      v51[1] = sub_100665F18;
      uint64_t v52 = v0[51];
      uint64_t v53 = v0[47];
      return sub_10123333C(v52, v53);
    }
  }
  else
  {
    uint64_t v20 = v0[57];
    uint64_t v19 = v0[58];
    sub_1006CD470(v1, v19, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    sub_1006CC8F8(v19, v20, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = v0[57];
    if (v23)
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446466;
      v0[35] = sub_1008FA0F0(0xD000000000000030, 0x8000000101404410, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2080;
      uint64_t v26 = sub_1000C8E00();
      v0[36] = sub_1008FA0F0(v26, v27, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1006CCE04(v24, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s Found LocalFindableRecord: %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1006CCE04(v0[57], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    }

    uint64_t v44 = (void *)swift_task_alloc();
    v0[80] = v44;
    *uint64_t v44 = v0;
    v44[1] = sub_100665C18;
    uint64_t v45 = v0[58];
    uint64_t v46 = v0[52];
    return sub_101229144(v46, v45);
  }
}

uint64_t sub_100665C18()
{
  *(void *)(*(void *)v1 + 648) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100666AC8;
  }
  else {
    uint64_t v2 = sub_100665D2C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100665D2C()
{
  uint64_t v1 = v0[58];
  uint64_t v2 = v0[52];
  uint64_t v3 = v0[49];
  uint64_t v4 = v0[50];
  uint64_t v5 = v0[48];
  uint64_t v6 = (void (*)(uint64_t))v0[41];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v2, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v5, 0, 1, v3);
  v6(v5);
  swift_release();
  swift_release();
  sub_10001DAB4(v5, &qword_101649E40);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1006CCE04(v1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100665F18()
{
  *(void *)(*(void *)v1 + 696) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100666EC8;
  }
  else {
    uint64_t v2 = sub_10066602C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10066602C()
{
  uint64_t v2 = v0[50];
  uint64_t v1 = v0[51];
  uint64_t v4 = v0[48];
  uint64_t v3 = v0[49];
  uint64_t v5 = v0[47];
  uint64_t v6 = (void (*)(uint64_t))v0[41];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v1, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v4, 0, 1, v3);
  v6(v4);
  swift_release();
  sub_10001DAB4(v4, &qword_101649E40);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1006CCE04(v5, type metadata accessor for WildModeAssociationRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100666208()
{
  unint64_t v57 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[74];
  uint64_t v2 = v0[64];
  uint64_t v3 = v0[59];
  uint64_t v4 = v0[43];
  swift_release();
  v1(v2, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v55 = (void (*)(uint64_t, uint64_t))v0[76];
    uint64_t v7 = v0[64];
    uint64_t v8 = v0[59];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446723;
    v0[30] = sub_1008FA0F0(0xD000000000000030, 0x8000000101404410, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2160;
    v0[31] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 22) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[32] = sub_1008FA0F0(v10, v11, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v55(v7, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s No LocalFindableRecord: %{private,mask.hash}s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
    swift_release();
  }
  else
  {
    BOOL v12 = (void (*)(uint64_t, uint64_t))v0[76];
    uint64_t v13 = v0[64];
    uint64_t v14 = v0[59];
    swift_release();
    swift_errorRelease();
    v12(v13, v14);
  }

  uint64_t v15 = v0[45];
  uint64_t v16 = v0[46];
  uint64_t v17 = v0[44];
  sub_100AE381C(v0[43], v17);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v15) == 1)
  {
    sub_10001DAB4(v0[44], &qword_1016511E0);
    if (qword_101636CA8 != -1) {
      swift_once();
    }
    uint64_t v18 = v0[66];
    uint64_t v19 = v0[59];
    uint64_t v20 = v0[60];
    uint64_t v21 = v0[43];
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170E318);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v18, v21, v19);
    BOOL v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = v0[66];
    uint64_t v27 = v0[59];
    uint64_t v28 = v0[60];
    if (v25)
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 141558275;
      v0[25] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2081;
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[26] = sub_1008FA0F0(v30, v31, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "No wildModeAssociationRecord for %{private,mask.hash}s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v28 + 8))(v0[66], v0[59]);
    }

    uint64_t v48 = v0[48];
    uint64_t v49 = (void (*)(uint64_t))v0[41];
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[50] + 56))(v48, 1, 1, v0[49]);
    v49(v48);
    swift_release();
    sub_10001DAB4(v48, &qword_101649E40);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v50 = (uint64_t (*)(void))v0[1];
    return v50();
  }
  else
  {
    sub_1006CD470(v0[44], v0[47], type metadata accessor for WildModeAssociationRecord);
    if (qword_101636CA8 != -1) {
      swift_once();
    }
    uint64_t v32 = v0[65];
    uint64_t v33 = v0[59];
    uint64_t v34 = v0[60];
    uint64_t v35 = v0[43];
    uint64_t v36 = type metadata accessor for Logger();
    v0[82] = sub_100010324(v36, (uint64_t)qword_10170E318);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
    v0[83] = v37;
    v0[84] = (v34 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v37(v32, v35, v33);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v41 = v0[65];
    uint64_t v42 = v0[59];
    uint64_t v43 = v0[60];
    if (v40)
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136446210;
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[29] = sub_1008FA0F0(v45, v46, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
      v47(v41, v42);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Fetching encrypted serial number for %{public}s", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
      v47(v0[65], v0[59]);
    }

    v0[85] = v47;
    uint64_t v52 = (void *)swift_task_alloc();
    v0[86] = v52;
    *uint64_t v52 = v0;
    v52[1] = sub_100665F18;
    uint64_t v53 = v0[51];
    uint64_t v54 = v0[47];
    return sub_10123333C(v53, v54);
  }
}

uint64_t sub_100666AC8()
{
  uint64_t v17 = v0;
  (*(void (**)(void, void, void))(v0 + 592))(*(void *)(v0 + 504), *(void *)(v0 + 344), *(void *)(v0 + 472));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
    uint64_t v3 = *(void *)(v0 + 504);
    uint64_t v4 = *(void *)(v0 + 472);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 264) = sub_1008FA0F0(v6, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v14(v3, v4);
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 272) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error fetching encrypted serial number for %{public}s. Error %{public}@", (uint8_t *)v5, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 608))(*(void *)(v0 + 504), *(void *)(v0 + 472));
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v9 = *(void *)(v0 + 464);
  uint64_t v10 = *(void *)(v0 + 384);
  unint64_t v11 = *(void (**)(uint64_t))(v0 + 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 400) + 56))(v10, 1, 1, *(void *)(v0 + 392));
  v11(v10);
  swift_release();
  swift_errorRelease();
  swift_release();
  sub_10001DAB4(v10, &qword_101649E40);
  sub_1006CCE04(v9, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_100666EC8()
{
  uint64_t v17 = v0;
  (*(void (**)(void, void, void))(v0 + 664))(*(void *)(v0 + 496), *(void *)(v0 + 344), *(void *)(v0 + 472));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 496);
    uint64_t v4 = *(void *)(v0 + 472);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 680);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 216) = sub_1008FA0F0(v6, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v14(v3, v4);
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 224) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error fetching encrypted serial number for %{public}s. Error %{public}@", (uint8_t *)v5, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 680))(*(void *)(v0 + 496), *(void *)(v0 + 472));
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v10 = *(void *)(v0 + 376);
  uint64_t v9 = *(void *)(v0 + 384);
  unint64_t v11 = *(void (**)(uint64_t))(v0 + 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 400) + 56))(v9, 1, 1, *(void *)(v0 + 392));
  v11(v9);
  swift_release();
  swift_errorRelease();
  sub_10001DAB4(v9, &qword_101649E40);
  sub_1006CCE04(v10, type metadata accessor for WildModeAssociationRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_1006672B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1006672D0, a2, 0);
}

uint64_t sub_1006672D0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001CBC4;
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  return sub_100C12834(v3, v2);
}

uint64_t sub_100667370@<X0>(char **a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  v328 = a3;
  uint64_t v320 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v5 = __chkstk_darwin(v320);
  uint64_t v316 = (uint64_t)&v308 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v319 = (char *)&v308 - v7;
  uint64_t v8 = type metadata accessor for SafeLocation();
  v365 = *(void (**)(char *, uint64_t))(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  v343 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v308 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v330 = (uint64_t)&v308 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v364 = (uint64_t)&v308 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v342 = (void (**)(char *, uint64_t))((char *)&v308 - v16);
  uint64_t v17 = __chkstk_darwin(v15);
  v344 = (void (**)(char *, uint64_t))((char *)&v308 - v18);
  __chkstk_darwin(v17);
  uint64_t v331 = (uint64_t)&v308 - v19;
  uint64_t v20 = sub_10000588C(&qword_101638CF0);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  v313 = (char *)&v308 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  v317 = (char *)&v308 - v24;
  __chkstk_darwin(v23);
  v314 = (char *)&v308 - v25;
  uint64_t v26 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v334 = (uint64_t)&v308 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v332 = (uint64_t)&v308 - v30;
  __chkstk_darwin(v29);
  uint64_t v333 = (uint64_t)&v308 - v31;
  uint64_t v361 = type metadata accessor for Date();
  uint64_t v311 = *(void *)(v361 - 8);
  uint64_t v32 = __chkstk_darwin(v361);
  v350 = (void (**)(char *, uint64_t, uint64_t))((char *)&v308 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v34 = __chkstk_darwin(v32);
  v341 = (void (**)(char *, uint64_t, uint64_t))((char *)&v308 - v35);
  uint64_t v36 = __chkstk_darwin(v34);
  v349 = (char *)&v308 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v355 = (char *)&v308 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  v359 = (char *)&v308 - v41;
  __chkstk_darwin(v40);
  v348 = (char *)&v308 - v42;
  uint64_t v360 = type metadata accessor for ShareRecord();
  uint64_t v310 = *(void *)(v360 - 8);
  uint64_t v43 = __chkstk_darwin(v360);
  v340 = (uint64_t *)((char *)&v308 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v338 = (uint64_t)&v308 - v46;
  __chkstk_darwin(v45);
  uint64_t v339 = (uint64_t)&v308 - v47;
  uint64_t v318 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v318);
  uint64_t v326 = (uint64_t)&v308 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v327 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v49 = __chkstk_darwin(v327);
  uint64_t v308 = (uint64_t)&v308 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __chkstk_darwin(v49);
  uint64_t v309 = (uint64_t)&v308 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  v329 = (char **)((char *)&v308 - v54);
  __chkstk_darwin(v53);
  v324 = (char *)&v308 - v55;
  uint64_t v356 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v56 = __chkstk_darwin(v356);
  v325 = (char **)((char *)&v308 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v56);
  uint64_t v59 = (char *)&v308 - v58;
  uint64_t v60 = type metadata accessor for UUID();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = __chkstk_darwin(v60);
  v347 = (char *)&v308 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __chkstk_darwin(v62);
  v337 = (char *)&v308 - v65;
  uint64_t v66 = __chkstk_darwin(v64);
  uint64_t v358 = (uint64_t)&v308 - v67;
  uint64_t v68 = __chkstk_darwin(v66);
  v354 = (char *)&v308 - v69;
  uint64_t v70 = __chkstk_darwin(v68);
  v336 = (char *)&v308 - v71;
  uint64_t v72 = __chkstk_darwin(v70);
  v346 = (void (**)(char *, uint64_t, uint64_t))((char *)&v308 - v73);
  uint64_t v74 = __chkstk_darwin(v72);
  v357 = (char *)&v308 - v75;
  uint64_t v76 = __chkstk_darwin(v74);
  v353 = (char *)&v308 - v77;
  uint64_t v78 = __chkstk_darwin(v76);
  v315 = (char *)&v308 - v79;
  uint64_t v80 = __chkstk_darwin(v78);
  v312 = (char *)&v308 - v81;
  uint64_t v82 = __chkstk_darwin(v80);
  v345 = (char *)&v308 - v83;
  uint64_t v84 = __chkstk_darwin(v82);
  v335 = (char *)&v308 - v85;
  uint64_t v86 = __chkstk_darwin(v84);
  v352 = (char *)&v308 - v87;
  uint64_t v88 = __chkstk_darwin(v86);
  v351 = (char *)&v308 - v89;
  __chkstk_darwin(v88);
  uint64_t v91 = (char *)&v308 - v90;
  uint64_t v92 = a1;
  uint64_t v93 = a1[35];
  uint64_t v94 = a2[3];
  uint64_t v95 = a2[4];
  sub_10001CD44(a2, v94);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v95 + 8) + 8) + 32))(v94);
  uint64_t v96 = sub_10099C240((uint64_t)v91);
  uint64_t v322 = v61;
  uint64_t v97 = *(void (**)(void))(v61 + 8);
  v323 = (_UNKNOWN **)v91;
  v362 = v97;
  uint64_t v363 = v61 + 8;
  ((void (*)(char *, uint64_t))v97)(v91, v60);
  sub_10001D010((uint64_t)a2, (uint64_t)v367);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  if (swift_dynamicCast())
  {
    uint64_t v98 = (uint64_t)v59;
    uint64_t v99 = v325;
    sub_1006CD470(v98, (uint64_t)v325, type metadata accessor for SharedBeaconRecord);
    uint64_t v100 = sub_10039C768((uint64_t)v99, (uint64_t)v93);
    [v100 setConnectionAllowed:0];
    [v100 setConnectableDeviceCount:0];
    sub_10069D7C4((uint64_t)v99, 0, v92);
    type metadata accessor for SPBeaconTaskName(0);
    sub_10001D4B0(0, &qword_101653D80);
    sub_100691B60(&qword_1016387E0, type metadata accessor for SPBeaconTaskName);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v100 setTaskInformation:isa];

    uint64_t v102 = (uint64_t (*)())type metadata accessor for SharedBeaconRecord;
LABEL_3:
    uint64_t v103 = v102;
    uint64_t v104 = (uint64_t)v99;
    goto LABEL_4;
  }
  v321 = v93;
  v325 = v92;
  uint64_t v106 = (uint64_t)v324;
  uint64_t v107 = v327;
  if (!swift_dynamicCast())
  {
    uint64_t v141 = (uint64_t)v319;
    int v142 = swift_dynamicCast();
    v143 = v325;
    if (!v142)
    {
      type metadata accessor for SPOwnerSessionError(0);
      uint64_t v366 = 18;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100691B60(&qword_101638460, type metadata accessor for SPOwnerSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v367);
    }
    uint64_t v144 = v316;
    sub_1006CD470(v141, v316, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v100 = sub_1003A0448(v144, (uint64_t)v321);
    sub_1006A1924(v144, 0, (uint64_t)v143);
    type metadata accessor for SPBeaconTaskName(0);
    sub_10001D4B0(0, &qword_101653D80);
    sub_100691B60(&qword_1016387E0, type metadata accessor for SPBeaconTaskName);
    Class v145 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v100 setTaskInformation:v145];

    uint64_t v103 = type metadata accessor for LocalFindableAccessoryRecord;
    uint64_t v104 = v144;
LABEL_4:
    sub_1006CCE04(v104, (uint64_t (*)(void))v103);
    v105 = v328;
    goto LABEL_89;
  }
  uint64_t v320 = v96;
  uint64_t v108 = (uint64_t)v329;
  sub_1006CD470(v106, (uint64_t)v329, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_1006CC8F8(v108 + *(int *)(v107 + 24), v326, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v356 = v60;
  uint64_t v110 = v361;
  Swift::UInt v111 = (char *)v341;
  unint64_t v112 = v355;
  uint64_t v113 = (uint64_t)v340;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v146 = sub_100B6DD88();
      uint64_t v147 = v146[2];
      if (v147)
      {
        v368 = _swiftEmptyArrayStorage;
        uint64_t v364 = v147;
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v148 = v310;
        unint64_t v149 = (*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80);
        v340 = v146;
        uint64_t v150 = (uint64_t)v146 + v149;
        v350 = (void (**)(char *, uint64_t, uint64_t))self;
        v349 = (char *)(v322 + 16);
        v347 = *(char **)(v148 + 72);
        v346 = (void (**)(char *, uint64_t, uint64_t))(v311 + 16);
        v343 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v311 + 48);
        v341 = (void (**)(char *, uint64_t, uint64_t))(v311 + 32);
        v342 = (void (**)(char *, uint64_t))(v311 + 8);
        uint64_t v151 = v339;
        uint64_t v152 = v110;
        v153 = v351;
        v154 = v352;
        do
        {
          uint64_t v358 = v150;
          sub_1006CC8F8(v150, v151, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          v173 = (int *)v360;
          v174 = *(void (**)(char *, uint64_t, uint64_t))v349;
          (*(void (**)(char *, uint64_t, uint64_t))v349)(v153, v151 + *(int *)(v360 + 20), v60);
          v174(v154, v151 + v173[6], v60);
          UUID.init(uuid:)();
          v307 = 0;
          UUID.init(uuid:)();
          v357 = (char *)[v350 SPOwner];
          v355 = (char *)sub_100ECF4F0(*(unsigned char *)(v151 + v173[9]), *(void *)(v151 + v173[9] + 8), *(void **)(v151 + v173[9] + 16));
          (*v346)(v348, v151 + v173[7], v152);
          uint64_t v175 = v333;
          sub_10001D074(v151 + v173[8], v333, (uint64_t *)&unk_10163AC90);
          if ((*v343)(v175, 1, v152) == 1)
          {
            static Date.distantFuture.getter();
            sub_10001DAB4(v175, (uint64_t *)&unk_10163AC90);
          }
          else
          {
            (*v341)(v359, v175, v152);
          }
          id v155 = objc_allocWithZone((Class)SPBeaconShare);
          Class v156 = UUID._bridgeToObjectiveC()().super.isa;
          Class v157 = UUID._bridgeToObjectiveC()().super.isa;
          Class v158 = UUID._bridgeToObjectiveC()().super.isa;
          uint64_t v159 = v345;
          Class v160 = UUID._bridgeToObjectiveC()().super.isa;
          uint64_t v161 = v348;
          Class v162 = Date._bridgeToObjectiveC()().super.isa;
          v353 = (char *)v162;
          Class v163 = Date._bridgeToObjectiveC()().super.isa;
          LOBYTE(v307) = 0;
          Class v305 = v162;
          long long v164 = v155;
          Class v165 = v156;
          Class v166 = v156;
          Class v167 = v157;
          Class v168 = v157;
          v169 = v357;
          v170 = v355;
          v354 = (char *)[v164 initWithIdentifier:v165 beaconIdentifier:v167 sharingCircleIdentifier:v158 peerTrustIdentifier:v160 owner:v357 sharee:v355 state:5 creationDate:v305 expirationDate:v163 visitorCount:0 delegationStatus:v307];

          v171 = *v342;
          uint64_t v152 = v361;
          (*v342)(v359, v361);
          v171(v161, v152);
          uint64_t v60 = v356;
          v172 = v362;
          ((void (*)(char *, uint64_t))v362)(v159, v356);
          v172();
          v154 = v352;
          v172();
          v153 = v351;
          v172();
          uint64_t v151 = v339;
          sub_1006CCE04(v339, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v150 = (uint64_t)&v347[v358];
          --v364;
        }
        while (v364);
        v238 = v368;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v238 = _swiftEmptyArrayStorage;
      }
      uint64_t v256 = sub_101158F2C((unint64_t)v238);
      swift_bridgeObjectRelease();
      uint64_t v257 = (uint64_t)v329;
      uint64_t v100 = sub_100398B08((uint64_t)v329, v321);
      sub_10001D4B0(0, &qword_10163B870);
      sub_10012E2E4(&qword_10163B878, &qword_10163B870);
      Class v258 = Set._bridgeToObjectiveC()().super.isa;
      [v100 setShares:v258];

      uint64_t v259 = v309;
      sub_1006CC8F8(v257, v309, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if ((v256 & 0xC000000000000001) != 0) {
        uint64_t v260 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v260 = *(void *)(v256 + 16);
      }
      swift_bridgeObjectRelease();
      sub_10069F874(v259, v260 != 0, v325);
      sub_1006CCE04(v259, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      type metadata accessor for SPBeaconTaskName(0);
      sub_10001D4B0(0, &qword_101653D80);
      sub_100691B60(&qword_1016387E0, type metadata accessor for SPBeaconTaskName);
      Class v272 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v100 setTaskInformation:v272];

      if (qword_101636CB8 != -1) {
        swift_once();
      }
      unint64_t v182 = (unint64_t)&selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
      id v273 = [v100 identifier];
      unint64_t v180 = (unint64_t)v323;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v274 = sub_1011E87EC(v180);
      uint64_t v275 = v356;
      v276 = v362;
      ((void (*)(unint64_t, uint64_t))v362)(v180, v356);
      [v100 setSeparationState:v274];

      id v277 = [v100 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v278 = sub_100A05F68(v180);
      ((void (*)(unint64_t, uint64_t))v276)(v180, v275);
      [v100 setBeaconSeparationState:v278];
      id v279 = [v100 identifier];
      v280 = v314;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v322 + 56))(v280, 0, 1, v275);
      v281 = sub_100B6C090();
      uint64_t v282 = v281[2];
      if (!v282)
      {
        uint64_t v184 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_81:
        uint64_t v288 = swift_bridgeObjectRelease();
        __chkstk_darwin(v288);
        uint64_t v289 = (uint64_t)v314;
        v307 = v314;
        uint64_t v290 = sub_1000A4684((uint64_t (*)(char *))sub_1006CD4DC, &v306, v184);
        v291 = sub_100655DC4(v290);
        swift_bridgeObjectRelease();
        sub_10001DAB4(v289, &qword_101638CF0);
        sub_101158F5C((unint64_t)v291);
        swift_bridgeObjectRelease();
        sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
        sub_10012E2E4((unint64_t *)&qword_1016556C0, (unint64_t *)&unk_101653D70);
        Class v292 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v100 setSafeLocations:v292];

        v293 = v325;
        [v100 setCanBeLeashedByHost:(sub_1006A5804((uint64_t)v329, (uint64_t)v325) & 1)];
        id v294 = [v100 identifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v295 = v293[5];
        if (v295)
        {
          uint64_t v296 = v295[376];
          swift_retain();
          static os_log_type_t.info.getter();
          if (qword_101637258 != -1) {
            swift_once();
          }
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v297 = swift_allocObject();
          *(_OWORD *)(v297 + 16) = xmmword_101342130;
          *(void *)(v297 + 56) = &type metadata for Bool;
          *(void *)(v297 + 64) = &protocol witness table for Bool;
          *(unsigned char *)(v297 + 32) = v296;
          os_log(_:dso:log:_:_:)();
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v298 = v356;
          v299 = v362;
          ((void (*)(char *, uint64_t))v362)(v312, v356);
          [v100 setConnectionAllowed:v296];
          id v300 = [v100 identifier];
          v301 = v323;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          CurrentValueSubject.value.getter();
          v302 = v368;
          sub_100660124(v301, (uint64_t)v368);
          ((void (*)(_UNKNOWN **, uint64_t))v299)(v301, v298);
          if (!__OFADD__(v302, v320))
          {
            [v100 setConnectableDeviceCount:(char *)v302 + v320];
            uint64_t v236 = (uint64_t)v329;
            goto LABEL_88;
          }
          __break(1u);
LABEL_98:
          __break(1u);
        }
        __break(1u);
        JUMPOUT(0x10066A520);
      }
      unint64_t v283 = 0;
      uint64_t v184 = (uint64_t)_swiftEmptyArrayStorage;
      while (v283 < v281[2])
      {
        unint64_t v182 = (*((unsigned __int8 *)v365 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v365 + 80);
        uint64_t v284 = *((void *)v365 + 9);
        uint64_t v285 = v331;
        sub_1006CC8F8((uint64_t)v281 + v182 + v284 * v283, v331, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        sub_1006CD470(v285, (uint64_t)v344, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v368 = (void *)v184;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000B79B0(0, *(void *)(v184 + 16) + 1, 1);
          uint64_t v184 = (uint64_t)v368;
        }
        unint64_t v180 = *(void *)(v184 + 16);
        unint64_t v287 = *(void *)(v184 + 24);
        if (v180 >= v287 >> 1)
        {
          sub_1000B79B0(v287 > 1, v180 + 1, 1);
          uint64_t v184 = (uint64_t)v368;
        }
        ++v283;
        *(void *)(v184 + 16) = v180 + 1;
        sub_1006CD470((uint64_t)v344, v184 + v182 + v180 * v284, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        if (v282 == v283) {
          goto LABEL_81;
        }
      }
      break;
    case 2:
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_24;
    case 3:
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_24:
      uint64_t v176 = v326;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v362)(v176, v60);
      uint64_t v177 = (uint64_t)v329;
      uint64_t v100 = sub_100398B08((uint64_t)v329, v321);
      v178 = v325;
      sub_10069F874(v177, 0, v325);
      type metadata accessor for SPBeaconTaskName(0);
      sub_10001D4B0(0, &qword_101653D80);
      sub_100691B60(&qword_1016387E0, type metadata accessor for SPBeaconTaskName);
      Class v179 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v100 setTaskInformation:v179];

      unint64_t v180 = (unint64_t)&selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
      id v181 = [v100 identifier];
      unint64_t v182 = (unint64_t)v315;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v183 = v178[5];
      if (!v183) {
        goto LABEL_98;
      }
      uint64_t v184 = v183[376];
      swift_retain();
      static os_log_type_t.info.getter();
      if (qword_101637258 == -1) {
        goto LABEL_26;
      }
      goto LABEL_94;
    case 4:
      swift_bridgeObjectRelease();
      v206 = (void (**)(char *, uint64_t))sub_100B6DD88();
      v207 = v206[2];
      if (v207)
      {
        v368 = _swiftEmptyArrayStorage;
        v365 = v207;
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v208 = v310;
        unint64_t v209 = (*(unsigned __int8 *)(v208 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v208 + 80);
        v344 = v206;
        v210 = (char *)v206 + v209;
        v353 = (char *)self;
        v351 = *(char **)(v208 + 72);
        v352 = (char *)(v322 + 16);
        v349 = (char *)(v311 + 16);
        v348 = (char *)(v311 + 48);
        v345 = (char *)(v311 + 32);
        v346 = (void (**)(char *, uint64_t, uint64_t))(v311 + 8);
        uint64_t v211 = v110;
        v212 = v354;
        do
        {
          uint64_t v364 = (uint64_t)v210;
          sub_1006CC8F8((uint64_t)v210, v113, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          v225 = (int *)v360;
          v226 = *(void (**)(uint64_t, uint64_t, uint64_t))v352;
          (*(void (**)(char *, uint64_t, uint64_t))v352)(v212, v113 + *(int *)(v360 + 20), v60);
          v226(v358, v113 + v225[6], v60);
          UUID.init(uuid:)();
          v307 = 0;
          UUID.init(uuid:)();
          v227 = (char *)[v353 SPOwner];
          v357 = (char *)sub_100ECF4F0(*(unsigned char *)(v113 + v225[9]), *(void *)(v113 + v225[9] + 8), *(void **)(v113 + v225[9] + 16));
          (*(void (**)(char *, uint64_t, uint64_t))v349)(v111, v113 + v225[7], v211);
          uint64_t v228 = v334;
          sub_10001D074(v113 + v225[8], v334, (uint64_t *)&unk_10163AC90);
          int v229 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v348)(v228, 1, v211);
          v359 = v227;
          if (v229 == 1)
          {
            static Date.distantFuture.getter();
            sub_10001DAB4(v228, (uint64_t *)&unk_10163AC90);
          }
          else
          {
            (*(void (**)(void *, uint64_t, uint64_t))v345)(v350, v228, v211);
          }
          v355 = (char *)objc_allocWithZone((Class)SPBeaconShare);
          Class v213 = UUID._bridgeToObjectiveC()().super.isa;
          Class v214 = UUID._bridgeToObjectiveC()().super.isa;
          Class v215 = UUID._bridgeToObjectiveC()().super.isa;
          v216 = v347;
          Class v217 = UUID._bridgeToObjectiveC()().super.isa;
          Class v218 = Date._bridgeToObjectiveC()().super.isa;
          Class v219 = Date._bridgeToObjectiveC()().super.isa;
          LOBYTE(v307) = 0;
          v220 = v359;
          v221 = v357;
          v355 = (char *)[v355 initWithIdentifier:v213 beaconIdentifier:v214 sharingCircleIdentifier:v215 peerTrustIdentifier:v217 owner:v359 sharee:v357 state:5 creationDate:v218 expirationDate:v219 visitorCount:0 delegationStatus:v307];

          v222 = v216;
          Swift::UInt v111 = (char *)v341;

          v223 = *v346;
          uint64_t v211 = v361;
          ((void (*)(void (**)(char *, uint64_t, uint64_t), uint64_t))*v346)(v350, v361);
          ((void (*)(char *, uint64_t))v223)(v111, v211);
          uint64_t v60 = v356;
          v224 = v362;
          ((void (*)(char *, uint64_t))v362)(v222, v356);
          v224();
          ((void (*)(uint64_t, uint64_t))v224)(v358, v60);
          v212 = v354;
          v224();
          uint64_t v113 = (uint64_t)v340;
          sub_1006CCE04((uint64_t)v340, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v210 = &v351[v364];
          v365 = (void (*)(char *, uint64_t))((char *)v365 - 1);
        }
        while (v365);
        v239 = v368;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v239 = _swiftEmptyArrayStorage;
      }
      sub_101158F2C((unint64_t)v239);
      swift_bridgeObjectRelease();
      uint64_t v99 = v329;
      uint64_t v100 = sub_100398B08((uint64_t)v329, v321);
      sub_10001D4B0(0, &qword_10163B870);
      sub_10012E2E4(&qword_10163B878, &qword_10163B870);
      Class v261 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v100 setShares:v261];

      uint64_t v102 = type metadata accessor for OwnedBeaconRecord;
      goto LABEL_3;
    default:
      swift_bridgeObjectRelease();
      v114 = (void (**)(char *, uint64_t, uint64_t))sub_100B6DD88();
      uint64_t v115 = (uint64_t)v114[2];
      if (v115)
      {
        v368 = _swiftEmptyArrayStorage;
        uint64_t v364 = v115;
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v116 = v310;
        unint64_t v117 = (*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80);
        v341 = v114;
        uint64_t v118 = (uint64_t)v114 + v117;
        v351 = (char *)self;
        v350 = (void (**)(char *, uint64_t, uint64_t))(v322 + 16);
        v348 = *(char **)(v116 + 72);
        v347 = (char *)(v311 + 16);
        v345 = (char *)(v311 + 48);
        v342 = (void (**)(char *, uint64_t))(v311 + 32);
        v344 = (void (**)(char *, uint64_t))(v311 + 8);
        uint64_t v119 = v110;
        uint64_t v120 = v338;
        v121 = v353;
        do
        {
          v359 = (char *)v118;
          sub_1006CC8F8(v118, v120, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          v138 = (int *)v360;
          v139 = *v350;
          (*v350)(v121, v120 + *(int *)(v360 + 20), v60);
          v139(v357, v120 + v138[6], v60);
          UUID.init(uuid:)();
          v307 = 0;
          UUID.init(uuid:)();
          uint64_t v358 = (uint64_t)[v351 SPOwner];
          v354 = (char *)sub_100ECF4F0(*(unsigned char *)(v120 + v138[9]), *(void *)(v120 + v138[9] + 8), *(void **)(v120 + v138[9] + 16));
          (*(void (**)(char *, uint64_t, uint64_t))v347)(v112, v120 + v138[7], v119);
          uint64_t v140 = v332;
          sub_10001D074(v120 + v138[8], v332, (uint64_t *)&unk_10163AC90);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v345)(v140, 1, v119) == 1)
          {
            static Date.distantFuture.getter();
            sub_10001DAB4(v140, (uint64_t *)&unk_10163AC90);
          }
          else
          {
            ((void (*)(char *, uint64_t, uint64_t))*v342)(v349, v140, v119);
          }
          id v122 = objc_allocWithZone((Class)SPBeaconShare);
          Class v123 = UUID._bridgeToObjectiveC()().super.isa;
          Class v124 = UUID._bridgeToObjectiveC()().super.isa;
          uint64_t v125 = v346;
          Class v126 = UUID._bridgeToObjectiveC()().super.isa;
          Class v127 = UUID._bridgeToObjectiveC()().super.isa;
          Class v128 = Date._bridgeToObjectiveC()().super.isa;
          Class v129 = Date._bridgeToObjectiveC()().super.isa;
          LOBYTE(v307) = 0;
          v130 = v122;
          v131 = v125;
          uint64_t v132 = (void *)v358;
          v133 = v354;
          v352 = (char *)[v130 initWithIdentifier:v123 beaconIdentifier:v124 sharingCircleIdentifier:v126 peerTrustIdentifier:v127 owner:v358 sharee:v354 state:5 creationDate:v128 expirationDate:v129 visitorCount:0 delegationStatus:v307];

          uint64_t v134 = v336;
          v135 = *v344;
          uint64_t v136 = v361;
          (*v344)(v349, v361);
          v135(v355, v136);
          uint64_t v60 = v356;
          v137 = v362;
          ((void (*)(char *, uint64_t))v362)(v134, v356);
          ((void (*)(void (**)(char *, uint64_t, uint64_t), uint64_t))v137)(v131, v60);
          uint64_t v119 = v136;
          ((void (*)(char *, uint64_t))v137)(v357, v60);
          v121 = v353;
          v137();
          uint64_t v120 = v338;
          sub_1006CCE04(v338, (uint64_t (*)(void))type metadata accessor for ShareRecord);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v118 = (uint64_t)&v348[(void)v359];
          --v364;
          unint64_t v112 = v355;
        }
        while (v364);
        v237 = v368;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v237 = _swiftEmptyArrayStorage;
      }
      v240 = v321;
      uint64_t v364 = sub_101158F2C((unint64_t)v237);
      swift_bridgeObjectRelease();
      uint64_t v100 = sub_100398B08((uint64_t)v329, v240);
      if (qword_101636CB8 != -1) {
        swift_once();
      }
      id v241 = [v100 identifier];
      unint64_t v182 = (unint64_t)v323;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v242 = sub_1011E87EC(v182);
      uint64_t v243 = v356;
      v244 = v362;
      ((void (*)(unint64_t, uint64_t))v362)(v182, v356);
      [v100 setSeparationState:v242];

      id v245 = [v100 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v246 = sub_100A05F68(v182);
      ((void (*)(unint64_t, uint64_t))v244)(v182, v243);
      [v100 setBeaconSeparationState:v246];
      id v247 = [v100 identifier];
      v248 = v313;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, void, uint64_t, uint64_t))(v322 + 56))(v248, 0, 1, v243);
      v249 = sub_100B6C090();
      uint64_t v250 = v249[2];
      if (v250)
      {
        unint64_t v180 = 0;
        uint64_t v184 = (uint64_t)_swiftEmptyArrayStorage;
        do
        {
          if (v180 >= v249[2]) {
            goto LABEL_92;
          }
          unint64_t v182 = (*((unsigned __int8 *)v365 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v365 + 80);
          uint64_t v251 = *((void *)v365 + 9);
          uint64_t v252 = v330;
          sub_1006CC8F8((uint64_t)v249 + v182 + v251 * v180, v330, (uint64_t (*)(void))type metadata accessor for SafeLocation);
          sub_1006CD470(v252, (uint64_t)v343, (uint64_t (*)(void))type metadata accessor for SafeLocation);
          char v253 = swift_isUniquelyReferenced_nonNull_native();
          v368 = (void *)v184;
          if ((v253 & 1) == 0)
          {
            sub_1000B79B0(0, *(void *)(v184 + 16) + 1, 1);
            uint64_t v184 = (uint64_t)v368;
          }
          unint64_t v255 = *(void *)(v184 + 16);
          unint64_t v254 = *(void *)(v184 + 24);
          if (v255 >= v254 >> 1)
          {
            sub_1000B79B0(v254 > 1, v255 + 1, 1);
            uint64_t v184 = (uint64_t)v368;
          }
          ++v180;
          *(void *)(v184 + 16) = v255 + 1;
          sub_1006CD470((uint64_t)v343, v184 + v182 + v255 * v251, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        }
        while (v250 != v180);
      }
      else
      {
        uint64_t v184 = (uint64_t)_swiftEmptyArrayStorage;
      }
      uint64_t v262 = swift_bridgeObjectRelease();
      __chkstk_darwin(v262);
      uint64_t v263 = (uint64_t)v313;
      v307 = v313;
      uint64_t v264 = sub_1000A4684((uint64_t (*)(char *))sub_1006C5824, &v306, v184);
      v265 = sub_100655DC4(v264);
      swift_bridgeObjectRelease();
      sub_10001DAB4(v263, &qword_101638CF0);
      sub_101158F5C((unint64_t)v265);
      swift_bridgeObjectRelease();
      sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
      sub_10012E2E4((unint64_t *)&qword_1016556C0, (unint64_t *)&unk_101653D70);
      Class v266 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v100 setSafeLocations:v266];

      uint64_t v267 = (uint64_t)v329;
      [v100 setCanBeLeashedByHost:(sub_1006A5804((uint64_t)v329, (uint64_t)v325) & 1)];
      sub_10001D4B0(0, &qword_10163B870);
      sub_10012E2E4(&qword_10163B878, &qword_10163B870);
      uint64_t v268 = v364;
      Class v269 = Set._bridgeToObjectiveC()().super.isa;
      [v100 setShares:v269];

      uint64_t v270 = v308;
      sub_1006CC8F8(v267, v308, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if ((v268 & 0xC000000000000001) != 0) {
        uint64_t v271 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v271 = *(void *)(v268 + 16);
      }
      swift_bridgeObjectRelease();
      sub_10069F874(v270, v271 != 0, v325);
      sub_1006CCE04(v270, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      type metadata accessor for SPBeaconTaskName(0);
      sub_10001D4B0(0, &qword_101653D80);
      sub_100691B60(&qword_1016387E0, type metadata accessor for SPBeaconTaskName);
      Class v303 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v100 setTaskInformation:v303];

      uint64_t v236 = (uint64_t)v329;
      goto LABEL_88;
  }
  while (1)
  {
    __break(1u);
LABEL_94:
    swift_once();
LABEL_26:
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v185 = swift_allocObject();
    *(_OWORD *)(v185 + 16) = xmmword_101342130;
    *(void *)(v185 + 56) = &type metadata for Bool;
    *(void *)(v185 + 64) = &protocol witness table for Bool;
    *(unsigned char *)(v185 + 32) = v184;
    os_log(_:dso:log:_:_:)();
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v186 = v182;
    uint64_t v187 = v356;
    unint64_t v182 = (unint64_t)v362;
    ((void (*)(unint64_t, uint64_t))v362)(v186, v356);
    [v100 setConnectionAllowed:v184];
    id v188 = [v100 *(SEL *)(v180 + 328)];
    v189 = v323;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    CurrentValueSubject.value.getter();
    v190 = v368;
    sub_100660124(v189, (uint64_t)v368);
    ((void (*)(_UNKNOWN **, uint64_t))v182)(v189, v187);
    if (__OFADD__(v190, v320))
    {
      __break(1u);
    }
    else
    {
      [v100 setConnectableDeviceCount:(char *)v190 + v320];
      if (qword_101636CB8 == -1) {
        goto LABEL_28;
      }
    }
    swift_once();
LABEL_28:
    id v191 = [v100 *(SEL *)(v180 + 328)];
    uint64_t v192 = (uint64_t)v323;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v193 = sub_1011E87EC(v192);
    v194 = v362;
    ((void (*)(uint64_t, uint64_t))v362)(v192, v187);
    [v100 setSeparationState:v193];

    id v195 = [v100 *(SEL *)(v180 + 328)];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v196 = sub_100A05F68(v192);
    ((void (*)(uint64_t, uint64_t))v194)(v192, v187);
    [v100 setBeaconSeparationState:v196];
    id v197 = [v100 *(SEL *)(v180 + 328)];
    v198 = v317;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v322 + 56))(v198, 0, 1, v187);
    v199 = sub_100B6C090();
    uint64_t v200 = v199[2];
    if (!v200) {
      break;
    }
    unint64_t v201 = 0;
    uint64_t v184 = (uint64_t)_swiftEmptyArrayStorage;
    while (v201 < v199[2])
    {
      unint64_t v180 = (*((unsigned __int8 *)v365 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v365 + 80);
      unint64_t v182 = *((void *)v365 + 9);
      v202 = v342;
      sub_1006CC8F8((uint64_t)v199 + v180 + v182 * v201, (uint64_t)v342, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      sub_1006CD470((uint64_t)v202, v364, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      char v203 = swift_isUniquelyReferenced_nonNull_native();
      v368 = (void *)v184;
      if ((v203 & 1) == 0)
      {
        sub_1000B79B0(0, *(void *)(v184 + 16) + 1, 1);
        uint64_t v184 = (uint64_t)v368;
      }
      unint64_t v205 = *(void *)(v184 + 16);
      unint64_t v204 = *(void *)(v184 + 24);
      if (v205 >= v204 >> 1)
      {
        sub_1000B79B0(v204 > 1, v205 + 1, 1);
        uint64_t v184 = (uint64_t)v368;
      }
      ++v201;
      *(void *)(v184 + 16) = v205 + 1;
      sub_1006CD470(v364, v184 + v180 + v205 * v182, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      if (v200 == v201) {
        goto LABEL_44;
      }
    }
    __break(1u);
LABEL_92:
    __break(1u);
  }
  uint64_t v184 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_44:
  uint64_t v230 = swift_bridgeObjectRelease();
  __chkstk_darwin(v230);
  uint64_t v231 = (uint64_t)v317;
  v307 = v317;
  uint64_t v232 = sub_1000A4684((uint64_t (*)(char *))sub_1006CD4DC, &v306, v184);
  v233 = sub_100655DC4(v232);
  swift_bridgeObjectRelease();
  sub_10001DAB4(v231, &qword_101638CF0);
  sub_101158F5C((unint64_t)v233);
  swift_bridgeObjectRelease();
  sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
  sub_10012E2E4((unint64_t *)&qword_1016556C0, (unint64_t *)&unk_101653D70);
  Class v234 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v100 setSafeLocations:v234];

  uint64_t v235 = (uint64_t)v329;
  [v100 setCanBeLeashedByHost:(sub_1006A5804((uint64_t)v329, (uint64_t)v325) & 1)];
  sub_100693338(v235);
  uint64_t v236 = v235;
LABEL_88:
  sub_1006CCE04(v236, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  v105 = v328;
LABEL_89:
  void *v105 = v100;
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v367);
}

uint64_t sub_10066A534(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = a4;
  uint64_t v48 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v47 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v19 = a1[3];
    uint64_t v20 = a1[4];
    sub_10001CD44(a1, v19);
    uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 176))(v19, v20);
    char v22 = sub_100DC7E2C(v21, v48);

    return v22 & 1;
  }
  uint64_t v44 = v8;
  uint64_t v45 = v11;
  sub_10001D010((uint64_t)a1, (uint64_t)v49);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  char v24 = swift_dynamicCast();
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v26 = a1;
  if ((v24 & 1) == 0)
  {
    v25(v14, 1, 1, v15);
    sub_10001DAB4((uint64_t)v14, &qword_10163B9F0);
    goto LABEL_7;
  }
  v25(v14, 0, 1, v15);
  sub_1006CD470((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v27 = sub_100D1B318();
  if (v28 >> 60 == 15)
  {
    sub_1006CCE04((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    goto LABEL_7;
  }
  uint64_t v40 = v27;
  unint64_t v41 = v28;
  if (!sub_100DC8844(v27, v28))
  {
    sub_1006CCE04((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_100037A24(v40, v41);
LABEL_7:
    uint64_t v29 = a1[3];
    uint64_t v30 = a1[4];
    sub_10001CD44(a1, v29);
    uint64_t v31 = (uint64_t)v45;
    (*(void (**)(uint64_t, uint64_t))(v30 + 192))(v29, v30);
    uint64_t v32 = v47;
    LODWORD(v29) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v31, 1, v6);
    sub_10001DAB4(v31, &qword_101638CF0);
    if (v29 == 1)
    {
      sub_10001D010((uint64_t)v26, (uint64_t)v49);
    }
    else
    {
      uint64_t v33 = v26[3];
      uint64_t v34 = v26[4];
      sub_10001CD44(v26, v33);
      uint64_t v35 = (uint64_t)v44;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v34 + 8) + 8) + 32))(v33);
      LOBYTE(v33) = sub_100DC7280(v35, v46);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v35, v6);
      sub_10001D010((uint64_t)v26, (uint64_t)v49);
      if ((v33 & 1) == 0)
      {
        char v39 = 0;
        goto LABEL_15;
      }
    }
    uint64_t v36 = v50;
    uint64_t v37 = v51;
    sub_10001CD44(v49, v50);
    uint64_t v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v37 + 176))(v36, v37);
    char v39 = sub_100DC7E2C(v38, v48);

LABEL_15:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v49);
    return v39 & 1;
  }
  uint64_t My = type metadata accessor for Feature.FindMy();
  uint64_t v50 = My;
  uint64_t v51 = sub_100691B60((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v43 = sub_10001D958(v49);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v43, enum case for Feature.FindMy.alphaWasp(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  sub_100037A24(v40, v41);
  sub_1006CCE04((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v49);
  if (My) {
    goto LABEL_7;
  }
  char v39 = 0;
  return v39 & 1;
}

void sub_10066AAA8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v53 = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1008BBD30(a1))
  {
    uint64_t v55 = v3;
    uint64_t v56 = a3;
    uint64_t v54 = *(void *)(v54 + 280);
    uint64_t v17 = a1[3];
    uint64_t v16 = a1[4];
    sub_10001CD44(a1, v17);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v16 + 8) + 8) + 32))(v17);
    sub_100AE311C((uint64_t)v9, (uint64_t)v12);
    uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v19 = v7 + 8;
    uint64_t v18 = v20;
    uint64_t v21 = v9;
    v20(v9, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {
      sub_10001DAB4((uint64_t)v12, &qword_10163BBB0);
      uint64_t v22 = (uint64_t)a1;
      uint64_t v23 = v56;
LABEL_16:
      sub_10001D010(v22, v23);
      return;
    }
    uint64_t v36 = (uint64_t)v12;
    uint64_t v37 = (uint64_t)v53;
    sub_1006CD470(v36, (uint64_t)v53, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    uint64_t v24 = v56;
    if (*(unsigned char *)(v37 + *(int *)(v13 + 28)) != 1)
    {
      sub_1006CCE04(v37, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      uint64_t v22 = (uint64_t)a1;
      uint64_t v23 = v24;
      goto LABEL_16;
    }
    uint64_t v51 = v18;
    uint64_t v52 = v6;
    uint64_t v54 = v19;
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100010324(v38, (uint64_t)qword_10170E840);
    sub_10001D010((uint64_t)a1, (uint64_t)v58);
    char v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      unint64_t v41 = v21;
      uint64_t v42 = swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 141558275;
      uint64_t v57 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2081;
      v50[1] = v42 + 14;
      uint64_t v44 = v59;
      uint64_t v43 = v60;
      sub_10001CD44(v58, v59);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v43 + 8) + 8) + 32))(v44);
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v45 = v52;
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v48 = v47;
      v51(v41, v45);
      uint64_t v57 = sub_1008FA0F0(v46, v48, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v24 = v56;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v58);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Hiding beacon %{private,mask.hash}s because productInfo has hidden flag set.", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v49 = (uint64_t)v53;
    }
    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v58);
      uint64_t v49 = v37;
    }
    sub_1006CCE04(v49, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
  }
  else
  {
    uint64_t v24 = a3;
    uint64_t v53 = v9;
    uint64_t v54 = v7;
    uint64_t v52 = v6;
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_10170E840);
    sub_10001D010((uint64_t)a1, (uint64_t)v58);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 141558275;
      uint64_t v57 = 1752392040;
      uint64_t v55 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2081;
      uint64_t v51 = (void (*)(char *, uint64_t))(v28 + 14);
      uint64_t v56 = a3;
      uint64_t v30 = v59;
      uint64_t v29 = v60;
      sub_10001CD44(v58, v59);
      uint64_t v31 = (uint64_t)v53;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v29 + 8) + 8) + 32))(v30);
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v32 = v52;
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v35 = v34;
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v31, v32);
      uint64_t v57 = sub_1008FA0F0(v33, v35, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v24 = v56;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v58);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Filtering %{private,mask.hash}s because it has automatic share type (e.g. it's Family member's item) or Items Sharing feature disabled.", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v58);
    }
  }
  *(void *)(v24 + 32) = 0;
  *(_OWORD *)uint64_t v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
}

uint64_t sub_10066B230(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v47 = a5;
  uint64_t v48 = a4;
  LODWORD(v5) = a3;
  LODWORD(v6) = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v50 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v51 = v11;
  uint64_t v52 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = mach_continuous_time();
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170E840);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "BeaconManagerService: allBeacons(ofTypes:includeDupes:includeHidden:completion:(", v19, 2u);
    swift_slowDealloc();
  }

  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_10000588C(&qword_10164B280);
    uint64_t inited = swift_initStackObject();
    int v44 = v5;
    uint64_t v5 = inited;
    *(_OWORD *)(inited + 16) = xmmword_10134BFA0;
    uint64_t v21 = (void *)SPBeaconTypeSelfBeaconing;
    *(void *)(inited + 32) = SPBeaconTypeSelfBeaconing;
    uint64_t v22 = (void *)SPBeaconTypeDurian;
    uint64_t v23 = (void *)SPBeaconTypeAccessory;
    *(void *)(inited + 40) = SPBeaconTypeDurian;
    *(void *)(inited + 48) = v23;
    uint64_t v24 = v15;
    uint64_t v25 = v14;
    uint64_t v26 = (void *)SPBeaconTypeVirtualMeDevice;
    uint64_t v46 = v10;
    uint64_t v45 = v8;
    os_log_type_t v27 = (void *)SPBeaconTypeHele;
    *(void *)(inited + 56) = SPBeaconTypeVirtualMeDevice;
    *(void *)(inited + 64) = v27;
    int v43 = (int)v6;
    uint64_t v6 = (void *)SPBeaconTypeLocalFindable;
    *(void *)(inited + 72) = SPBeaconTypeLocalFindable;
    id v28 = v21;
    id v29 = v22;
    id v30 = v23;
    id v31 = v26;
    uint64_t v14 = v25;
    uint64_t v15 = v24;
    id v32 = v27;
    uint64_t v8 = v45;
    uint64_t v10 = v46;
    id v33 = v6;
    LOBYTE(v6) = v43;
    a1 = sub_1011591E8(v5);
    LOBYTE(v5) = v44;
    swift_setDeallocating();
    type metadata accessor for SPBeaconType(0);
    swift_arrayDestroy();
  }
  id v34 = [self currentConnection];
  if (v34)
  {
    unint64_t v35 = v34;
    unsigned int v36 = [v34 processIdentifier];
  }
  else
  {
    unsigned int v36 = 0;
  }
  uint64_t v37 = v49;
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v37;
  *(void *)(v38 + 24) = a1;
  *(unsigned char *)(v38 + 32) = v6 & 1;
  *(unsigned char *)(v38 + 33) = v5 & 1;
  *(void *)(v38 + 40) = v15;
  *(_DWORD *)(v38 + 48) = v36;
  uint64_t v39 = v47;
  *(void *)(v38 + 56) = v48;
  *(void *)(v38 + 64) = v39;
  aBlock[4] = sub_1006C5808;
  aBlock[5] = v38;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CF068;
  os_log_type_t v40 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v53 = _swiftEmptyArrayStorage;
  sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v40);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v14, v51);
  return swift_release();
}

uint64_t sub_10066B784(char **a1, uint64_t a2, char a3, int a4, unint64_t a5, uint64_t a6, void (*a7)(uint64_t))
{
  uint64_t v12 = mach_continuous_time();
  uint64_t v13 = sub_100AD2AD4();
  uint64_t v14 = sub_100659D50(v13, a2, a3, a4);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v15 = sub_1006AEBF0((uint64_t)v14, a1);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1004453A0((unint64_t)v15);
  uint64_t v16 = mach_continuous_time();
  if (v16 >= a5)
  {
    convertToNanoseconds(_:)(v16 - a5);
    if (v16 >= v12)
    {
      convertToNanoseconds(_:)(v16 - v12);
      if (qword_101636EF0 == -1) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_9:
  swift_once();
LABEL_5:
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170E840);
  variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  os_log_type_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 67110144;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 8) = 1040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 14) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 24) = 1040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 30) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "allBeacons [pid: %d] duration: %.*fms  -- queued: %.*fms", (uint8_t *)v20, 0x28u);
    swift_slowDealloc();
  }

  uint64_t v21 = sub_101159418((unint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  a7(v21);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10066BA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[17] = a6;
  v7[18] = a7;
  v7[15] = a4;
  v7[16] = a5;
  v7[19] = type metadata accessor for UUID();
  v7[20] = swift_task_alloc();
  return _swift_task_switch(sub_10066BAF4, 0, 0);
}

uint64_t sub_10066BAF4()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016391E0 + dword_1016391E0);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v2;
    void *v2 = v0;
    v2[1] = sub_10066BC30;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10066BC30(uint64_t a1)
{
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10066BD30, 0, 0);
}

uint64_t sub_10066BD30()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 176))
  {
    uint64_t v2 = *(void **)(v0 + 144);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    id v3 = v2;
    *(void *)(v0 + 184) = [v3 fetchProperties];
    id v4 = [v3 bundleIdentifier];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v8 = 0;
    }
    *(void *)(v0 + 192) = v6;
    *(void *)(v0 + 200) = v8;
    uint64_t v14 = *(void **)(v0 + 144);
    *(unsigned char *)(v0 + 223) = [v14 sendInitialBeacons];
    id v15 = [v14 filterBeaconUUIDs];
    *(void *)(v0 + 208) = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v16 = *(void *)(v0 + 176);
    return _swift_task_switch(sub_10066BED0, v16, 0);
  }
  else
  {
    uint64_t v9 = *(void (**)(void, uint64_t))(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_1003A4778();
    uint64_t v10 = swift_allocError();
    *uint64_t v11 = 11;
    v9(0, v10);
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
}

uint64_t sub_10066BED0()
{
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 208);
  char v3 = *(unsigned char *)(v0 + 223);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v7 = *(void **)(v0 + 136);
  type metadata accessor for WorkItemQueue.WorkItem();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v6;
  *(void *)(v8 + 24) = v7;
  *(void *)(v8 + 32) = v4;
  *(void *)(v8 + 40) = v5;
  *(void *)(v8 + 48) = v2;
  *(unsigned char *)(v8 + 56) = v3;
  *(_DWORD *)(v8 + 57) = *(_DWORD *)(v0 + 216);
  *(_DWORD *)(v8 + 60) = *(_DWORD *)(v0 + 219);
  *(void *)(v8 + 64) = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  id v9 = v7;
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10066C03C, 0, 0);
}

uint64_t sub_10066C03C()
{
  (*(void (**)(uint64_t, void))(v0 + 120))(1, 0);
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10066C0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = &_swiftEmptySetSingleton;
  v17[1] = *(void *)(v3 + 120);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v3;
  v14[3] = v13;
  v14[4] = a1;
  v14[5] = a2;
  aBlock[4] = sub_1006C5DC4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CF568;
  id v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  os_log_type_t v19 = _swiftEmptyArrayStorage;
  sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v18);
  swift_release();
  return swift_release();
}

uint64_t sub_10066C3C8(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v23 = a4;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(a1 + 280);
  uint64_t v13 = sub_100AD2AD4();
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v21 = v13;
    uint64_t v22 = a3;
    uint64_t v15 = v13 + 32;
    do
    {
      sub_10001D010(v15, (uint64_t)v26);
      sub_10000588C((uint64_t *)&unk_10164DBF0);
      char v16 = swift_dynamicCast();
      uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      if (v16)
      {
        v17(v8, 0, 1, v9);
        sub_1006CD470((uint64_t)v8, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
        if ((v12[*(int *)(v9 + 52)] & 1) == 0)
        {
          uint64_t v18 = sub_10039C768((uint64_t)v12, v24);
          swift_beginAccess();
          sub_100DD1574(&v25, v18);
          swift_endAccess();
        }
        sub_1006CCE04((uint64_t)v12, type metadata accessor for SharedBeaconRecord);
      }
      else
      {
        v17(v8, 1, 1, v9);
        sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_101653D50);
      }
      v15 += 40;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    a3 = v22;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v19 = swift_bridgeObjectRetain();
  a3(v19);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10066C670(uint64_t a1, uint64_t (*a2)(void *), uint64_t a3, uint64_t a4)
{
  unsigned int v36 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v33 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  id v31 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (void (*)(uint64_t))((char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v30 - v18;
  if (*(void *)(a1 + 32))
  {
    uint64_t v30 = v7;
    swift_retain();
    uint64_t v20 = sub_100FB98C4(a4);
    type metadata accessor for Transaction();
    *(void *)(swift_allocObject() + 16) = v20;
    swift_bridgeObjectRetain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    static Date.trustedNow.getter((uint64_t)v19);
    uint64_t v21 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v19, 0, 1, v21);
    sub_1000A5940();
    sub_10001D074((uint64_t)v19, (uint64_t)v17, (uint64_t *)&unk_10163AC90);
    sub_100F180D8(v17);
    swift_release();
    sub_10001DAB4((uint64_t)v19, (uint64_t *)&unk_10163AC90);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
    uint64_t v22 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v23 = (void *)swift_allocObject();
    v23[2] = v36;
    v23[3] = a3;
    v23[4] = v20;
    aBlock[4] = sub_1006C5D90;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015CF4F0;
    uint64_t v24 = _Block_copy(aBlock);
    swift_retain();
    id v25 = v31;
    static DispatchQoS.unspecified.getter();
    uint64_t v37 = _swiftEmptyArrayStorage;
    sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v26 = v33;
    uint64_t v27 = v30;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v24);
    swift_release();

    (*(void (**)(char *, uint64_t))(v35 + 8))(v26, v27);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v25, v34);
    return swift_release();
  }
  else
  {
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v29 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    return v36(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_10066CC64(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10066CC84, 0, 0);
}

uint64_t sub_10066CC84()
{
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v1 = (char *)swift_allocObject();
  *(void *)(v0 + 24) = v1;
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v4(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD000000000000032;
  *((void *)v1 + 16) = 0x8000000101403900;
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_10066CDE0, v1, 0);
}

uint64_t sub_10066CDE0()
{
  sub_1011AA4E4(*(void *)(v0 + 24), *(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10066CE78, 0, 0);
}

uint64_t sub_10066CE78()
{
  type metadata accessor for AnalyticsPublisher();
  v0[4] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10066CF2C;
  uint64_t v2 = v0[3];
  return sub_101196838(v2);
}

uint64_t sub_10066CF2C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10066D044, 0, 0);
}

uint64_t sub_10066D044()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_10066D0A4(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for HashAlgorithm();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, &qword_1016552A0);
  uint64_t v6 = NSString.init(stringLiteral:)();
  if (!(a1 >> 62))
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_8;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_6;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v9 = *(id *)(a1 + 32);
LABEL_6:
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    id v11 = [v10 key];

    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    sub_1000361E0(v12, v14);
    sub_100434E0C(v12, v14, &v22);
    uint64_t v15 = v22;
    unint64_t v21 = v23;
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v2);
    uint64_t v16 = Data.hash(algorithm:)();
    unint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v22 = v16;
    unint64_t v23 = v18;
    sub_1001D780C();
    RawRepresentable<>.hexString.getter();
    sub_10001CFB8(v16, v18);
    NSString v19 = String._bridgeToObjectiveC()();

    sub_10001CFB8(v12, v14);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v15, v21);
    uint64_t v6 = v19;
LABEL_9:
    sub_10000588C(&qword_10163C5D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(void *)(inited + 32) = 0xD000000000000010;
    *(void *)(inited + 40) = 0x8000000101403940;
    *(void *)(inited + 48) = v6;
    *(unsigned char *)(inited + 56) = 0;
    return sub_10092E03C(inited);
  }
  __break(1u);
  return result;
}

uint64_t sub_10066D3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a3;
  v7[4] = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10000588C(&qword_10163FE78);
  sub_100062734(&qword_10163FE80, &qword_10163FE78);
  Publisher.oneshot(_:)();
  swift_release();
  return swift_release();
}

uint64_t sub_10066D4A8()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_theftDeterrenceStateManager);
  type metadata accessor for Transaction();
  uint64_t result = static Transaction.named<A>(_:with:)();
  if (*(void *)(v1 + 128))
  {
    swift_retain();
    CurrentValueSubject.send(_:)();
    return swift_release();
  }
  return result;
}

void *sub_10066D570(uint64_t a1, uint64_t a2)
{
  uint64_t v217 = a2;
  uint64_t v241 = _s18ConnectionKeyGroupVMa();
  uint64_t v212 = *(void *)(v241 - 8);
  __chkstk_darwin(v241);
  v240 = (uint64_t *)((char *)&v199 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = sub_10000588C(&qword_10163F758);
  __chkstk_darwin(v4 - 8);
  uint64_t v200 = (uint64_t)&v199 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v246 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v199 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v239 = type metadata accessor for TimeBasedKey();
  uint64_t v213 = *(void *)(v239 - 8);
  __chkstk_darwin(v239);
  uint64_t v10 = (char *)&v199 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10164B2D0);
  __chkstk_darwin(v11 - 8);
  uint64_t v207 = (uint64_t)&v199 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v206 = type metadata accessor for LostModeInfoRecord();
  uint64_t v13 = *(void *)(v206 - 8);
  __chkstk_darwin(v206);
  uint64_t v205 = (uint64_t)&v199 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v15 - 8);
  unint64_t v17 = (char *)&v199 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v215 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v18 = *(void *)(v215 - 8);
  __chkstk_darwin(v215);
  uint64_t v211 = (uint64_t)&v199 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v228 = (char *)&v199 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v227 = (char *)&v199 - v24;
  uint64_t v25 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v25 - 8);
  uint64_t v27 = (char *)&v199 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v221 = *(void *)(a1 + 16);
  uint64_t v202 = a1;
  if (v221)
  {
    id v29 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    uint64_t v28 = v21 + 16;
    uint64_t v236 = v29;
    uint64_t v224 = a1 + ((*(unsigned __int8 *)(v28 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 64));
    v226 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 40);
    uint64_t v223 = *(void *)(v28 + 56);
    v222 = (unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 32);
    v220 = (void (**)(uint64_t, char *, uint64_t))(v28 + 16);
    uint64_t v230 = (void (**)(char *, uint64_t))(v28 - 8);
    v238 = (void (**)(char *, char *, uint64_t))(v246 + 16);
    v237 = (void (**)(char *, uint64_t))(v246 + 8);
    unint64_t v209 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    unint64_t v204 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    char v203 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    uint64_t v30 = 0;
    uint64_t v246 = 0;
    Class v234 = _swiftEmptyDictionarySingleton;
    long long v208 = xmmword_101347EF0;
    long long v201 = xmmword_101347BA0;
    long long v214 = xmmword_101342130;
    uint64_t v243 = v8;
    uint64_t v244 = v6;
    id v242 = v10;
    uint64_t v229 = v13;
    uint64_t v233 = v20;
    v210 = v17;
    uint64_t v232 = v28;
    v216 = v27;
    uint64_t v31 = (uint64_t)v227;
    uint64_t v32 = v13;
    while (1)
    {
      v236(v27, v224 + v223 * v30, v20);
      Class v218 = *v226;
      v218(v27, 0, 1, v20);
      if ((*v222)(v27, 1, v20) == 1)
      {
        unint64_t v180 = v234;
        goto LABEL_70;
      }
      (*v220)(v31, v27, v20);
      uint64_t v33 = *(void *)(v225 + 280);
      sub_100ACCD98(v31, (uint64_t)&v250);
      uint64_t v235 = v30;
      if (v251)
      {
        sub_10001CEB0(&v250, (uint64_t)&v249);
        sub_10001CEB0(&v249, (uint64_t)&v250);
        uint64_t v34 = v251;
        uint64_t v35 = v252;
        unsigned int v36 = sub_10001CD44(&v250, v251);
        uint64_t v37 = sub_100B2F5F4((uint64_t)v36, v217, 0, 0, 0, v33, v34, v35);
        uint64_t v39 = (void *)v37;
        switch(v40)
        {
          case 1:
            uint64_t v51 = _swiftEmptyArrayStorage;
            break;
          case 2:
            uint64_t v51 = (void *)v37;
            uint64_t v39 = _swiftEmptyArrayStorage;
            break;
          case 3:
            static os_log_type_t.default.getter();
            if (qword_101637250 != -1) {
              swift_once();
            }
            sub_10000588C((uint64_t *)&unk_10163AD00);
            uint64_t v84 = swift_allocObject();
            *(_OWORD *)(v84 + 16) = v214;
            uint64_t v86 = v251;
            uint64_t v85 = v252;
            sub_10001CD44(&v250, v251);
            uint64_t v87 = v228;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v85 + 8) + 8) + 32))(v86);
            uint64_t v88 = UUID.uuidString.getter();
            uint64_t v90 = v89;
            uint64_t v91 = v87;
            uint64_t v92 = v233;
            (*v230)(v91, v233);
            *(void *)(v84 + 56) = &type metadata for String;
            *(void *)(v84 + 64) = sub_10000B4CC();
            *(void *)(v84 + 32) = v88;
            *(void *)(v84 + 40) = v90;
            uint64_t v20 = v92;
            os_log(_:dso:log:_:_:)();
            swift_bridgeObjectRelease();
            uint64_t v51 = _swiftEmptyArrayStorage;
            uint64_t v39 = _swiftEmptyArrayStorage;
            break;
          default:
            uint64_t v41 = v38;
            swift_bridgeObjectRetain();
            static os_log_type_t.default.getter();
            Class v219 = v39;
            if (qword_101637250 != -1) {
              swift_once();
            }
            sub_10000588C((uint64_t *)&unk_10163AD00);
            uint64_t v42 = swift_allocObject();
            *(_OWORD *)(v42 + 16) = v214;
            uint64_t v44 = v251;
            uint64_t v43 = v252;
            sub_10001CD44(&v250, v251);
            uint64_t v45 = v228;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v43 + 8) + 8) + 32))(v44);
            uint64_t v46 = UUID.uuidString.getter();
            uint64_t v48 = v47;
            uint64_t v49 = v45;
            uint64_t v50 = v233;
            (*v230)(v49, v233);
            *(void *)(v42 + 56) = &type metadata for String;
            *(void *)(v42 + 64) = sub_10000B4CC();
            *(void *)(v42 + 32) = v46;
            *(void *)(v42 + 40) = v48;
            os_log(_:dso:log:_:_:)();
            uint64_t v20 = v50;
            swift_bridgeObjectRelease();
            uint64_t v39 = v219;
            sub_1002F6A08((uint64_t)v219, v41, 0);
            uint64_t v51 = _swiftEmptyArrayStorage;
            uint64_t v32 = v229;
            break;
        }
        uint64_t v93 = v39[2];
        uint64_t v231 = v51;
        if (v93)
        {
          unint64_t v248 = (unint64_t)_swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)();
          unint64_t v94 = (*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80);
          Class v219 = v39;
          uint64_t v95 = (uint64_t)v39 + v94;
          id v245 = *(id *)(v213 + 72);
          while (2)
          {
            sub_1006CC8F8(v95, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            uint64_t v96 = v239;
            (*v238)(v8, &v10[*(int *)(v239 + 20)], v6);
            uint64_t v97 = &v10[*(int *)(v96 + 24)];
            uint64_t v99 = *((void *)v97 + 2);
            unint64_t v98 = *((void *)v97 + 3);
            sub_1000361E0(v99, v98);
            uint64_t v100 = v246;
            sub_100A948F8(v99, v98);
            if (v100)
            {
              uint64_t v184 = v100;
LABEL_95:
              unint64_t v101 = static os_log_type_t.error.getter();
              if (qword_101636F48 != -1) {
                swift_once();
              }
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v194 = swift_allocObject();
              *(_OWORD *)(v194 + 16) = v214;
              *(void *)&long long v249 = v184;
              swift_errorRetain();
              sub_10000588C(&qword_101638D40);
              uint64_t v195 = String.init<A>(describing:)();
              uint64_t v8 = v196;
              *(void *)(v194 + 56) = &type metadata for String;
              *(void *)(v194 + 64) = sub_10000B4CC();
              *(void *)(v194 + 32) = v195;
              *(void *)(v194 + 40) = v8;
              os_log(_:dso:log:_:_:)();
              swift_bridgeObjectRelease();
              sub_100130148();
              uint64_t v192 = swift_allocError();
              *id v197 = 0;
              swift_willThrow();
              swift_errorRelease();
              goto LABEL_98;
            }
            *(void *)&long long v249 = 57;
            type metadata accessor for __DataStorage();
            swift_allocObject();
            unint64_t v101 = __DataStorage.init(length:)();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              uint64_t v102 = __DataStorage._bytes.getter();
              if (v102)
              {
                uint64_t v8 = (char *)v102;
                uint64_t v103 = __DataStorage._offset.getter();
                unint64_t v104 = -v103;
                if (__OFSUB__(0, v103)) {
                  goto LABEL_75;
                }
              }
              swift_allocObject();
              uint64_t v105 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
              swift_release();
              unint64_t v101 = v105;
            }
            uint64_t v106 = __DataStorage._bytes.getter();
            if (!v106) {
              goto LABEL_76;
            }
            uint64_t v8 = (char *)v106;
            uint64_t v107 = __DataStorage._offset.getter();
            unint64_t v104 = -v107;
            if (__OFSUB__(0, v107))
            {
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
LABEL_74:
              __break(1u);
LABEL_75:
              __break(1u);
LABEL_76:
              __break(1u);
LABEL_77:
              if (v104 == 1)
              {
                LODWORD(v104) = HIDWORD(v8) - v8;
                if (!__OFSUB__(HIDWORD(v8), v8)) {
                  goto LABEL_99;
                }
                __break(1u);
              }
              if (v104 == 2)
              {
                uint64_t v183 = *((void *)v8 + 2);
                uint64_t v182 = *((void *)v8 + 3);
                unint64_t v109 = v182 - v183;
                if (__OFSUB__(v182, v183)) {
                  __break(1u);
                }
              }
              else
              {
                unint64_t v109 = BYTE6(v101);
              }
              while (1)
              {
LABEL_92:
                sub_10013019C();
                uint64_t v192 = swift_allocError();
                *(void *)uint64_t v193 = 28;
                *(void *)(v193 + 8) = v109;
                *(unsigned char *)(v193 + 16) = 0;
                swift_willThrow();
                unint64_t v98 = v101;
                uint64_t v99 = (uint64_t)v8;
LABEL_98:
                sub_10001CFB8(v99, v98);
                *(void *)&long long v249 = 0;
                *((void *)&v249 + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(35);
                v198._object = (void *)0x80000001013F3B70;
                v198._countAndFlagsBits = 0xD000000000000021;
                String.append(_:)(v198);
                uint64_t v247 = v192;
                sub_10000588C(&qword_101638D40);
                _print_unlocked<A, B>(_:_:)();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
LABEL_99:
                unint64_t v109 = (int)v104;
              }
            }
            v8 -= v107;
            __DataStorage._length.getter();
            int v108 = CCECCryptorExportKey();
            if (v108)
            {
              int v185 = v108;
              static os_log_type_t.error.getter();
              if (qword_101636F48 != -1) {
                swift_once();
              }
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v186 = swift_allocObject();
              *(_OWORD *)(v186 + 16) = v214;
              *(void *)(v186 + 56) = &type metadata for Int32;
              *(void *)(v186 + 64) = &protocol witness table for Int32;
              *(_DWORD *)(v186 + 32) = v185;
              os_log(_:dso:log:_:_:)();
              swift_bridgeObjectRelease();
              uint64_t v187 = v200;
              CryptoError.init(rawValue:)();
              uint64_t v188 = type metadata accessor for CryptoError();
              sub_100691B60((unint64_t *)&qword_1016605B0, (void (*)(uint64_t))&type metadata accessor for CryptoError);
              uint64_t v184 = swift_allocError();
              uint64_t v190 = v189;
              uint64_t v191 = *(void *)(v188 - 8);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v191 + 48))(v187, 1, v188) == 1)
              {
                (*(void (**)(uint64_t, void, uint64_t))(v191 + 104))(v190, enum case for CryptoError.unspecifiedError(_:), v188);
                sub_10001DAB4(v200, &qword_10163F758);
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v191 + 32))(v190, v200, v188);
              }
              swift_willThrow();
              swift_release();
              goto LABEL_95;
            }
            LODWORD(v104) = v249;
            if ((v249 & 0x8000000000000000) != 0) {
              goto LABEL_72;
            }
            if ((unint64_t)v249 >= 0x39) {
              unint64_t v109 = 57;
            }
            else {
              unint64_t v109 = v249;
            }
            if (!v109)
            {
              swift_release();
              CCECCryptorRelease();
              sub_10001CFB8(v99, v98);
              uint64_t v8 = 0;
              unint64_t v101 = 0xC000000000000000;
              goto LABEL_92;
            }
            if (v109 <= 0xE)
            {
              swift_retain();
              uint64_t v8 = (char *)sub_1006ACF50(0x3900000000, v101, v109);
              uint64_t v111 = v110;
              swift_release_n();
              unint64_t v101 = v111 & 0xFFFFFFFFFFFFFFLL;
            }
            else
            {
              uint64_t v8 = (char *)(v109 << 32);
              v101 |= 0x4000000000000000uLL;
            }
            CCECCryptorRelease();
            sub_10001CFB8(v99, v98);
            unint64_t v104 = v101 >> 62;
            uint64_t v6 = v244;
            switch(v101 >> 62)
            {
              case 1uLL:
                LODWORD(v112) = HIDWORD(v8) - v8;
                if (__OFSUB__(HIDWORD(v8), v8)) {
                  goto LABEL_73;
                }
                uint64_t v112 = (int)v112;
LABEL_45:
                uint64_t v246 = 0;
                if (v112 != 28) {
                  goto LABEL_77;
                }
                id v116 = objc_allocWithZone((Class)SPBeaconingKey);
                unint64_t v117 = v243;
                Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
                Class v119 = Data._bridgeToObjectiveC()().super.isa;
                id v120 = [v116 initWithDateInterval:isa key:v119];

                uint64_t v121 = (uint64_t)v8;
                uint64_t v8 = v117;
                sub_10001CFB8(v121, v101);
                (*v237)(v117, v6);
                id v122 = objc_allocWithZone((Class)SPCommandKeys);
                Class v123 = Data._bridgeToObjectiveC()().super.isa;
                Class v124 = Data._bridgeToObjectiveC()().super.isa;
                Class v125 = Data._bridgeToObjectiveC()().super.isa;
                [v122 initWithBeaconingKey:v120 commandKey:v123 connectionToken:v124 nearbyToken:v125];

                uint64_t v10 = v242;
                sub_1006CCE04((uint64_t)v242, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
                v95 += (uint64_t)v245;
                if (--v93) {
                  continue;
                }
                Class v126 = (void *)v248;
                swift_bridgeObjectRelease();
                uint64_t v32 = v229;
                uint64_t v20 = v233;
                uint64_t v51 = v231;
                break;
              case 2uLL:
                uint64_t v114 = *((void *)v8 + 2);
                uint64_t v113 = *((void *)v8 + 3);
                BOOL v115 = __OFSUB__(v113, v114);
                uint64_t v112 = v113 - v114;
                if (!v115) {
                  goto LABEL_45;
                }
                goto LABEL_74;
              case 3uLL:
                unint64_t v109 = 0;
                goto LABEL_92;
              default:
                uint64_t v112 = BYTE6(v101);
                goto LABEL_45;
            }
            break;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          Class v126 = _swiftEmptyArrayStorage;
        }
        unint64_t v248 = (unint64_t)_swiftEmptyArrayStorage;
        *(void *)&long long v249 = v126;
        uint64_t v127 = v51[2];
        if (v127)
        {
          uint64_t v128 = v212;
          uint64_t v129 = (uint64_t)v51
               + ((*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80));
          swift_bridgeObjectRetain();
          id v245 = *(id *)(v128 + 72);
          do
          {
            v130 = v240;
            sub_1006CC8F8(v129, (uint64_t)v240, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
            uint64_t v131 = *v130;
            unint64_t v132 = v130[1];
            id v133 = objc_allocWithZone((Class)SPBeaconingKey);
            sub_1000361E0(v131, v132);
            Class v134 = DateInterval._bridgeToObjectiveC()().super.isa;
            Class v135 = Data._bridgeToObjectiveC()().super.isa;
            id v136 = [v133 initWithDateInterval:v134 key:v135];

            sub_10001CFB8(v131, v132);
            uint64_t v137 = v130[2];
            unint64_t v138 = v130[3];
            id v139 = objc_allocWithZone((Class)SPCommandKeys);
            sub_1000361E0(v137, v138);
            Class v140 = Data._bridgeToObjectiveC()().super.isa;
            Class v141 = Data._bridgeToObjectiveC()().super.isa;
            Class v142 = Data._bridgeToObjectiveC()().super.isa;
            id v143 = [v139 initWithBeaconingKey:v136 commandKey:v140 connectionToken:v141 nearbyToken:v142];
            sub_10001CFB8(v137, v138);

            sub_1006CCE04((uint64_t)v130, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
            if (v143)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((v248 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v248 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
            v129 += (uint64_t)v245;
            --v127;
          }
          while (v127);
          swift_bridgeObjectRelease();
          uint64_t v144 = (void *)v248;
          uint64_t v8 = v243;
          uint64_t v6 = v244;
          uint64_t v10 = v242;
          uint64_t v32 = v229;
          uint64_t v20 = v233;
        }
        else
        {
          uint64_t v144 = _swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRelease();
        sub_1004453B8((unint64_t)v144);
        uint64_t v145 = (uint64_t)v228;
        uint64_t v146 = v227;
        v236(v228, (uint64_t)v227, v20);
        uint64_t v147 = v249;
        uint64_t v148 = v234;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v248 = (unint64_t)v148;
        sub_10017024C(v147, v145, isUniquelyReferenced_nonNull_native);
        Class v234 = (void *)v248;
        swift_bridgeObjectRelease();
        uint64_t v150 = *v230;
        uint64_t v151 = v145;
        uint64_t v31 = (uint64_t)v146;
        (*v230)((char *)v151, v20);
        v150(v146, v20);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v250);
      }
      else
      {
        sub_10001DAB4((uint64_t)&v250, (uint64_t *)&unk_10163BBE0);
        uint64_t v52 = (uint64_t)v210;
        sub_100AE381C(v31, (uint64_t)v210);
        if ((*v209)(v52, 1, v215) == 1)
        {
          sub_10001DAB4(v52, &qword_1016511E0);
          uint64_t v53 = sub_100B6D390(v31);
          if (v53[2])
          {
            uint64_t v54 = (uint64_t)v53
                + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
            uint64_t v55 = v207;
            sub_1006CC8F8(v54, v207, (uint64_t (*)(void))type metadata accessor for LostModeInfoRecord);
            uint64_t v56 = 0;
            uint64_t v57 = v206;
          }
          else
          {
            uint64_t v56 = 1;
            uint64_t v57 = v206;
            uint64_t v55 = v207;
          }
          (*v204)(v55, v56, 1, v57);
          swift_bridgeObjectRelease();
          if ((*v203)(v55, 1, v57) == 1)
          {
            (*v230)((char *)v31, v20);
            sub_10001DAB4(v55, &qword_10164B2D0);
            uint64_t v32 = v229;
            goto LABEL_60;
          }
          uint64_t v152 = v205;
          sub_1006CD470(v55, v205, (uint64_t (*)(void))type metadata accessor for LostModeInfoRecord);
          v153 = (uint64_t *)(v152 + *(int *)(v57 + 44));
          uint64_t v154 = v31;
          uint64_t v155 = *v153;
          unint64_t v156 = v153[1];
          id v157 = objc_allocWithZone((Class)SPBeaconingKey);
          sub_1000361E0(v155, v156);
          Class v158 = DateInterval._bridgeToObjectiveC()().super.isa;
          uint64_t v159 = v20;
          Class v160 = Data._bridgeToObjectiveC()().super.isa;
          id v161 = [v157 initWithDateInterval:v158 key:v160];

          sub_10001CFB8(v155, v156);
          id v162 = objc_allocWithZone((Class)SPCommandKeys);
          id v163 = v161;
          Class v164 = Data._bridgeToObjectiveC()().super.isa;
          Class v165 = Data._bridgeToObjectiveC()().super.isa;
          Class v166 = Data._bridgeToObjectiveC()().super.isa;
          id v167 = [v162 initWithBeaconingKey:v163 commandKey:v164 connectionToken:v165 nearbyToken:v166];

          uint64_t v168 = (uint64_t)v228;
          uint64_t v31 = v154;
          v236(v228, v154, v159);
          sub_10000588C(&qword_10166BD20);
          uint64_t v169 = swift_allocObject();
          *(_OWORD *)(v169 + 16) = v208;
          *(void *)(v169 + 32) = v167;
          *(void *)&long long v250 = v169;
          specialized Array._endMutation()();
          uint64_t v170 = v250;
          id v245 = v167;
          v171 = v234;
          char v172 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v250 = v171;
          sub_10017024C(v170, v168, v172);
          Class v234 = (void *)v250;
          swift_bridgeObjectRelease();
          v173 = *v230;
          (*v230)((char *)v168, v159);
          static os_log_type_t.default.getter();
          if (qword_1016372E0 != -1) {
            swift_once();
          }
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v174 = swift_allocObject();
          *(_OWORD *)(v174 + 16) = v201;
          uint64_t v175 = UUID.uuidString.getter();
          uint64_t v177 = v176;
          *(void *)(v174 + 56) = &type metadata for String;
          unint64_t v178 = sub_10000B4CC();
          *(void *)(v174 + 32) = v175;
          *(void *)(v174 + 40) = v177;
          *(void *)(v174 + 96) = &type metadata for Int;
          *(void *)(v174 + 104) = &protocol witness table for Int;
          *(void *)(v174 + 64) = v178;
          *(void *)(v174 + 72) = 1;
          os_log(_:dso:log:_:_:)();

          swift_bridgeObjectRelease();
          sub_1006CCE04(v205, (uint64_t (*)(void))type metadata accessor for LostModeInfoRecord);
          uint64_t v20 = v233;
          v173((char *)v31, v233);
          uint64_t v8 = v243;
          uint64_t v6 = v244;
          uint64_t v32 = v229;
        }
        else
        {
          sub_1006CD470(v52, v211, type metadata accessor for WildModeAssociationRecord);
          static os_log_type_t.default.getter();
          if (qword_1016372F0 != -1) {
            swift_once();
          }
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v58 = swift_allocObject();
          *(_OWORD *)(v58 + 16) = v214;
          uint64_t v59 = UUID.uuidString.getter();
          uint64_t v61 = v60;
          *(void *)(v58 + 56) = &type metadata for String;
          *(void *)(v58 + 64) = sub_10000B4CC();
          *(void *)(v58 + 32) = v59;
          *(void *)(v58 + 40) = v61;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          uint64_t v62 = MACAddress.data.getter();
          unint64_t v64 = v63;
          id v65 = objc_allocWithZone((Class)SPBeaconingKey);
          Class v66 = DateInterval._bridgeToObjectiveC()().super.isa;
          Class v67 = Data._bridgeToObjectiveC()().super.isa;
          id v68 = [v65 initWithDateInterval:v66 key:v67];

          sub_10001CFB8(v62, v64);
          id v69 = objc_allocWithZone((Class)SPCommandKeys);
          id v70 = v68;
          Class v71 = Data._bridgeToObjectiveC()().super.isa;
          Class v72 = Data._bridgeToObjectiveC()().super.isa;
          Class v73 = Data._bridgeToObjectiveC()().super.isa;
          id v245 = v70;
          id v74 = [v69 initWithBeaconingKey:v70 commandKey:v71 connectionToken:v72 nearbyToken:v73];

          uint64_t v75 = (uint64_t)v228;
          uint64_t v76 = v227;
          uint64_t v20 = v233;
          v236(v228, (uint64_t)v227, v233);
          sub_10000588C(&qword_10166BD20);
          uint64_t v77 = swift_allocObject();
          *(_OWORD *)(v77 + 16) = v208;
          *(void *)(v77 + 32) = v74;
          *(void *)&long long v250 = v77;
          specialized Array._endMutation()();
          uint64_t v78 = v250;
          id v79 = v74;
          uint64_t v80 = v234;
          char v81 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v250 = v80;
          uint64_t v82 = v78;
          uint64_t v31 = (uint64_t)v76;
          sub_10017024C(v82, v75, v81);
          Class v234 = (void *)v250;
          swift_bridgeObjectRelease();
          uint64_t v83 = *v230;
          (*v230)((char *)v75, v20);

          sub_1006CCE04(v211, type metadata accessor for WildModeAssociationRecord);
          v83(v76, v20);
          uint64_t v32 = v229;
        }
      }
      uint64_t v27 = v216;
LABEL_60:
      uint64_t v30 = v235 + 1;
      if (v235 + 1 == v221)
      {
        unint64_t v180 = v234;
        v218(v27, 1, 1, v20);
        goto LABEL_70;
      }
    }
  }
  Class v179 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  swift_bridgeObjectRetain();
  unint64_t v180 = _swiftEmptyDictionarySingleton;
  v179(v27, 1, 1, v20);
LABEL_70:
  swift_bridgeObjectRelease();
  return v180;
}

uint64_t sub_10066F37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v32 = a1;
  uint64_t v33 = a4;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v39 = v6;
  __chkstk_darwin(v6);
  uint64_t v37 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  __chkstk_darwin(v8);
  uint64_t v34 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DateInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  v29[1] = static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101347BA0;
  aBlock[0] = *v5;
  sub_10000588C(&qword_101642888);
  uint64_t v14 = String.init<A>(describing:)();
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v17 = sub_10000B4CC();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  *(void *)(v13 + 96) = &type metadata for String;
  *(void *)(v13 + 104) = v17;
  *(void *)(v13 + 64) = v17;
  *(void *)(v13 + 72) = 0xD000000000000029;
  *(void *)(v13 + 80) = 0x8000000101403740;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v30, v10);
  unint64_t v19 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v32;
  *(void *)(v20 + 16) = v18;
  *(void *)(v20 + 24) = v21;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v20 + v19, (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  uint64_t v22 = (void *)(v20 + ((v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v23 = v33;
  *uint64_t v22 = v31;
  v22[1] = v23;
  aBlock[4] = sub_1006C5BB8;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CF3D8;
  uint64_t v24 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v25 = v34;
  static DispatchQoS.unspecified.getter();
  char v40 = _swiftEmptyArrayStorage;
  sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v26 = v37;
  uint64_t v27 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v26, v27);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v36);
  swift_release();
  return swift_release();
}

uint64_t sub_10066F88C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t), uint64_t a5)
{
  v58[1] = a5;
  uint64_t v59 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v72 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v75 = (char *)v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_10000588C(&qword_10164B2C8);
  uint64_t v9 = __chkstk_darwin(v71);
  id v70 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (unint64_t)v58 - v12;
  __chkstk_darwin(v11);
  id v69 = (char *)v58 - v14;
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    unint64_t v15 = (unint64_t)sub_10066D570(a2, a3);
    swift_release();
  }
  else
  {
    unint64_t v15 = sub_10092F500((uint64_t)_swiftEmptyArrayStorage);
  }
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
LABEL_45:
  }
    swift_once();
  os_log(_:dso:log:_:_:)();
  uint64_t v16 = *(void *)(v15 + 64);
  unint64_t v60 = v15 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v61 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v67 = v72 + 32;
  uint64_t v68 = v72 + 16;
  unint64_t v64 = (void (**)(char *, uint64_t))(v72 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v21 = 0;
  long long v63 = xmmword_101347BA0;
  unint64_t v65 = v13;
  unint64_t v66 = v15;
  uint64_t v62 = v7;
  while (1)
  {
    if (v19)
    {
      uint64_t v73 = (v19 - 1) & v19;
      int64_t v74 = v21;
      unint64_t v31 = __clz(__rbit64(v19)) | (v21 << 6);
      goto LABEL_29;
    }
    int64_t v32 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      goto LABEL_44;
    }
    if (v32 >= v61)
    {
LABEL_42:
      swift_release();
      v59(v15);
      return swift_bridgeObjectRelease();
    }
    unint64_t v33 = *(void *)(v60 + 8 * v32);
    int64_t v34 = v21 + 1;
    if (!v33)
    {
      int64_t v34 = v21 + 2;
      if (v21 + 2 >= v61) {
        goto LABEL_42;
      }
      unint64_t v33 = *(void *)(v60 + 8 * v34);
      if (!v33)
      {
        int64_t v34 = v21 + 3;
        if (v21 + 3 >= v61) {
          goto LABEL_42;
        }
        unint64_t v33 = *(void *)(v60 + 8 * v34);
        if (!v33)
        {
          int64_t v34 = v21 + 4;
          if (v21 + 4 >= v61) {
            goto LABEL_42;
          }
          unint64_t v33 = *(void *)(v60 + 8 * v34);
          if (!v33)
          {
            int64_t v34 = v21 + 5;
            if (v21 + 5 >= v61) {
              goto LABEL_42;
            }
            unint64_t v33 = *(void *)(v60 + 8 * v34);
            if (!v33) {
              break;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v73 = (v33 - 1) & v33;
    int64_t v74 = v34;
    unint64_t v31 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_29:
    uint64_t v36 = v72;
    uint64_t v37 = *(void (**)(char *, unint64_t, uint64_t))(v72 + 16);
    uint64_t v38 = (uint64_t)v69;
    v37(v69, *(void *)(v15 + 48) + *(void *)(v72 + 72) * v31, v7);
    uint64_t v39 = *(void *)(*(void *)(v15 + 56) + 8 * v31);
    uint64_t v40 = v71;
    *(void *)(v38 + *(int *)(v71 + 48)) = v39;
    sub_10001D608(v38, v13, &qword_10164B2C8);
    uint64_t v41 = *(int *)(v40 + 48);
    unint64_t v15 = (unint64_t)v70;
    v37(v70, v13, v7);
    unint64_t v13 = *(void *)(v13 + v41);
    (*(void (**)(char *, unint64_t, uint64_t))(v36 + 32))(v75, v15, v7);
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
      if (!v42)
      {
LABEL_41:
        swift_bridgeObjectRelease();
        uint64_t v44 = _swiftEmptyArrayStorage;
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v42 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v42) {
        goto LABEL_41;
      }
    }
    uint64_t v76 = _swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v42 & ~(v42 >> 63), 0);
    if (v42 < 0)
    {
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    uint64_t v43 = 0;
    uint64_t v44 = v76;
    do
    {
      if ((v13 & 0xC000000000000001) != 0) {
        id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v45 = *(id *)(v13 + 8 * v43 + 32);
      }
      uint64_t v46 = v45;
      id v47 = [v45 beaconingKey];
      id v48 = [v47 key];

      uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v51 = v50;

      uint64_t v52 = Data.hexString.getter();
      uint64_t v54 = v53;
      sub_10001CFB8(v49, v51);

      uint64_t v76 = v44;
      unint64_t v56 = v44[2];
      unint64_t v55 = v44[3];
      if (v56 >= v55 >> 1)
      {
        sub_1000B6ED0(v55 > 1, v56 + 1, 1);
        uint64_t v44 = v76;
      }
      ++v43;
      v44[2] = v56 + 1;
      uint64_t v57 = &v44[2 * v56];
      v57[4] = v52;
      v57[5] = v54;
    }
    while (v42 != v43);
    swift_bridgeObjectRelease();
    uint64_t v7 = v62;
LABEL_8:
    static os_log_type_t.default.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = v63;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v23 = v75;
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v26 = v25;
    *(void *)(v22 + 56) = &type metadata for String;
    unint64_t v27 = sub_10000B4CC();
    *(void *)(v22 + 64) = v27;
    *(void *)(v22 + 32) = v24;
    *(void *)(v22 + 40) = v26;
    uint64_t v76 = v44;
    sub_10000588C(&qword_101654A30);
    sub_100062734((unint64_t *)&qword_10163A100, &qword_101654A30);
    uint64_t v28 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    *(void *)(v22 + 96) = &type metadata for String;
    *(void *)(v22 + 104) = v27;
    *(void *)(v22 + 72) = v28;
    *(void *)(v22 + 80) = v30;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    (*v64)(v23, v7);
    unint64_t v13 = v65;
    uint64_t result = sub_10001DAB4(v65, &qword_10164B2C8);
    unint64_t v15 = v66;
    unint64_t v19 = v73;
    int64_t v21 = v74;
  }
  uint64_t v35 = v21 + 6;
  if (v21 + 6 >= v61) {
    goto LABEL_42;
  }
  unint64_t v33 = *(void *)(v60 + 8 * v35);
  if (v33)
  {
    int64_t v34 = v21 + 6;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v34 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v34 >= v61) {
      goto LABEL_42;
    }
    unint64_t v33 = *(void *)(v60 + 8 * v34);
    ++v35;
    if (v33) {
      goto LABEL_28;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10067002C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a1;
  uint64_t v25 = a3;
  uint64_t v23 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v7 - 8);
  uint64_t v27 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101347BA0;
  aBlock[0] = *v3;
  sub_10000588C(&qword_101642888);
  uint64_t v11 = String.init<A>(describing:)();
  uint64_t v13 = v12;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v14 = sub_10000B4CC();
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = v13;
  *(void *)(v10 + 96) = &type metadata for String;
  *(void *)(v10 + 104) = v14;
  *(void *)(v10 + 64) = v14;
  *(void *)(v10 + 72) = 0xD00000000000001CLL;
  *(void *)(v10 + 80) = 0x8000000101403850;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = v23;
  uint64_t v18 = v24;
  v16[2] = v15;
  v16[3] = v18;
  uint64_t v19 = v25;
  v16[4] = v17;
  v16[5] = v19;
  aBlock[4] = sub_1006C5C78;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CF428;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = _swiftEmptyArrayStorage;
  sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v27);
  swift_release();
  return swift_release();
}

uint64_t sub_100670454(uint64_t a1, uint64_t a2, void (*a3)(unint64_t), uint64_t a4)
{
  v63[1] = a4;
  unint64_t v64 = a3;
  uint64_t v67 = type metadata accessor for UUID();
  uint64_t v76 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v80 = (char *)v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000588C(&qword_10164B2C8);
  uint64_t v6 = __chkstk_darwin(v75);
  int64_t v74 = (char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v79 = (uint64_t)v63 - v9;
  __chkstk_darwin(v8);
  uint64_t v73 = (char *)v63 - v10;
  uint64_t v11 = type metadata accessor for Date();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DateInterval();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    static Date.trustedNow.getter((uint64_t)v13);
    DateInterval.init(start:duration:)();
    unint64_t v18 = (unint64_t)sub_10066D570(a2, (uint64_t)v17);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    swift_release();
  }
  else
  {
    unint64_t v18 = sub_10092F500((uint64_t)_swiftEmptyArrayStorage);
  }
  static os_log_type_t.default.getter();
  uint64_t v19 = v67;
  if (qword_101637278 != -1) {
LABEL_45:
  }
    swift_once();
  os_log(_:dso:log:_:_:)();
  uint64_t v20 = *(void *)(v18 + 64);
  unint64_t v65 = v18 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(v18 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v66 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v71 = v76 + 32;
  uint64_t v72 = v76 + 16;
  id v69 = (void (**)(char *, uint64_t))(v76 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v25 = 0;
  long long v68 = xmmword_101347BA0;
  unint64_t v70 = v18;
  while (1)
  {
    if (v23)
    {
      uint64_t v77 = (v23 - 1) & v23;
      int64_t v78 = v25;
      unint64_t v35 = __clz(__rbit64(v23)) | (v25 << 6);
      goto LABEL_29;
    }
    int64_t v36 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      goto LABEL_44;
    }
    if (v36 >= v66)
    {
LABEL_42:
      swift_release();
      v64(v18);
      return swift_bridgeObjectRelease();
    }
    unint64_t v37 = *(void *)(v65 + 8 * v36);
    int64_t v38 = v25 + 1;
    if (!v37)
    {
      int64_t v38 = v25 + 2;
      if (v25 + 2 >= v66) {
        goto LABEL_42;
      }
      unint64_t v37 = *(void *)(v65 + 8 * v38);
      if (!v37)
      {
        int64_t v38 = v25 + 3;
        if (v25 + 3 >= v66) {
          goto LABEL_42;
        }
        unint64_t v37 = *(void *)(v65 + 8 * v38);
        if (!v37)
        {
          int64_t v38 = v25 + 4;
          if (v25 + 4 >= v66) {
            goto LABEL_42;
          }
          unint64_t v37 = *(void *)(v65 + 8 * v38);
          if (!v37)
          {
            int64_t v38 = v25 + 5;
            if (v25 + 5 >= v66) {
              goto LABEL_42;
            }
            unint64_t v37 = *(void *)(v65 + 8 * v38);
            if (!v37) {
              break;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v77 = (v37 - 1) & v37;
    int64_t v78 = v38;
    unint64_t v35 = __clz(__rbit64(v37)) + (v38 << 6);
LABEL_29:
    uint64_t v40 = v76;
    uint64_t v41 = *(void (**)(char *, unint64_t, uint64_t))(v76 + 16);
    uint64_t v42 = (uint64_t)v73;
    v41(v73, *(void *)(v18 + 48) + *(void *)(v76 + 72) * v35, v19);
    uint64_t v43 = v75;
    *(void *)(v42 + *(int *)(v75 + 48)) = *(void *)(*(void *)(v18 + 56) + 8 * v35);
    uint64_t v44 = v79;
    sub_10001D608(v42, v79, &qword_10164B2C8);
    uint64_t v45 = *(int *)(v43 + 48);
    uint64_t v46 = v74;
    v41(v74, v44, v19);
    unint64_t v18 = *(void *)(v44 + v45);
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v80, v46, v19);
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
      if (!v47)
      {
LABEL_41:
        swift_bridgeObjectRelease();
        uint64_t v49 = _swiftEmptyArrayStorage;
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v47 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v47) {
        goto LABEL_41;
      }
    }
    char v81 = _swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v47 & ~(v47 >> 63), 0);
    if (v47 < 0)
    {
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    uint64_t v48 = 0;
    uint64_t v49 = v81;
    do
    {
      if ((v18 & 0xC000000000000001) != 0) {
        id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v50 = *(id *)(v18 + 8 * v48 + 32);
      }
      unint64_t v51 = v50;
      id v52 = [v50 beaconingKey];
      id v53 = [v52 key];

      uint64_t v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v56 = v55;

      uint64_t v57 = Data.hexString.getter();
      uint64_t v59 = v58;
      sub_10001CFB8(v54, v56);

      char v81 = v49;
      unint64_t v61 = v49[2];
      unint64_t v60 = v49[3];
      if (v61 >= v60 >> 1)
      {
        sub_1000B6ED0(v60 > 1, v61 + 1, 1);
        uint64_t v49 = v81;
      }
      ++v48;
      v49[2] = v61 + 1;
      uint64_t v62 = &v49[2 * v61];
      v62[4] = v57;
      v62[5] = v59;
    }
    while (v47 != v48);
    swift_bridgeObjectRelease();
    uint64_t v19 = v67;
LABEL_8:
    static os_log_type_t.default.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = v68;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v27 = v80;
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v30 = v29;
    *(void *)(v26 + 56) = &type metadata for String;
    unint64_t v31 = sub_10000B4CC();
    *(void *)(v26 + 64) = v31;
    *(void *)(v26 + 32) = v28;
    *(void *)(v26 + 40) = v30;
    char v81 = v49;
    sub_10000588C(&qword_101654A30);
    sub_100062734((unint64_t *)&qword_10163A100, &qword_101654A30);
    uint64_t v32 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    *(void *)(v26 + 96) = &type metadata for String;
    *(void *)(v26 + 104) = v31;
    *(void *)(v26 + 72) = v32;
    *(void *)(v26 + 80) = v34;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    (*v69)(v27, v19);
    uint64_t result = sub_10001DAB4(v79, &qword_10164B2C8);
    unint64_t v18 = v70;
    unint64_t v23 = v77;
    int64_t v25 = v78;
  }
  uint64_t v39 = v25 + 6;
  if (v25 + 6 >= v66) {
    goto LABEL_42;
  }
  unint64_t v37 = *(void *)(v65 + 8 * v39);
  if (v37)
  {
    int64_t v38 = v25 + 6;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v38 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      break;
    }
    if (v38 >= v66) {
      goto LABEL_42;
    }
    unint64_t v37 = *(void *)(v65 + 8 * v38);
    ++v39;
    if (v37) {
      goto LABEL_28;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100670CDC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v58 = a3;
  uint64_t v6 = type metadata accessor for TimeBasedKey();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v50 - v11;
  __chkstk_darwin(v10);
  unint64_t v15 = *a1 / 0x60uLL;
  uint64_t v53 = *a1;
  if (v53) {
    unint64_t v16 = v15 + 1;
  }
  else {
    unint64_t v16 = 0;
  }
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17)
  {
    uint64_t v51 = (uint64_t)&v50 - v14;
    uint64_t v52 = v3;
    uint64_t v18 = a2 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v19 = *(void *)(v13 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1006CC8F8(v18, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      if (*v9 == v16) {
        break;
      }
      sub_1006CCE04((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      v18 += v19;
      if (!--v17)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    sub_1006CD470((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v30 = (uint64_t)v12;
    uint64_t v31 = v51;
    sub_1006CD470(v30, v51, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v32 = (long long *)((char *)a1 + *(int *)(v6 + 24));
    long long v33 = v32[2];
    long long v34 = *v32;
    long long v56 = v32[1];
    long long v57 = v33;
    long long v55 = v34;
    uint64_t v35 = sub_100A8C640();
    unint64_t v37 = v36;
    int64_t v38 = (long long *)(v31 + *(int *)(v6 + 24));
    long long v39 = v38[2];
    long long v40 = *v38;
    v54[1] = v38[1];
    v54[2] = v39;
    v54[0] = v40;
    sub_1006CA500(v54, (void (*)(void, void))sub_1006CD4D8, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
    uint64_t v41 = sub_100A8C640();
    unint64_t v43 = v42;
    sub_1006CA500(v54, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
    id v44 = objc_allocWithZone((Class)SPBeaconingKey);
    Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
    uint64_t v46 = v35;
    unint64_t v47 = v37;
    Class v48 = Data._bridgeToObjectiveC()().super.isa;
    Class v49 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001CFB8(v41, v43);
    id v28 = [v44 initWithDateInterval:isa key:v48 secondaryKey:v49 primaryIndex:v53 secondaryIndex:v16];

    sub_10001CFB8(v46, v47);
    uint64_t result = sub_1006CCE04(v51, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
  }
  else
  {
LABEL_9:
    uint64_t v20 = (long long *)((char *)a1 + *(int *)(v6 + 24));
    long long v21 = v20[1];
    long long v55 = *v20;
    long long v56 = v21;
    long long v57 = v20[2];
    uint64_t v22 = sub_100A8C640();
    unint64_t v24 = v23;
    id v25 = objc_allocWithZone((Class)SPBeaconingKey);
    Class v26 = DateInterval._bridgeToObjectiveC()().super.isa;
    Class v27 = Data._bridgeToObjectiveC()().super.isa;
    id v28 = [v25 initWithDateInterval:v26 key:v27 secondaryKey:0 primaryIndex:v53 secondaryIndex:0];

    uint64_t result = sub_10001CFB8(v22, v24);
  }
  void *v58 = v28;
  return result;
}

unint64_t sub_100671100(uint64_t a1, uint64_t a2)
{
  uint64_t v134 = a2;
  uint64_t v4 = sub_10000588C(&qword_10164B2D0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LostModeInfoRecord();
  uint64_t v131 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = _s18ConnectionKeyGroupVMa();
  uint64_t v129 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  id v133 = (uint64_t *)((char *)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v130 = (void *)type metadata accessor for UUID();
  uint64_t v127 = (void *)*(v130 - 1);
  __chkstk_darwin(v130);
  uint64_t v19 = (char *)&v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v142 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v128 = v2;
  uint64_t v20 = v2[35];
  sub_100ACCD98(a1, (uint64_t)&v137);
  if (!v138)
  {
    uint64_t v36 = v131;
    sub_10001DAB4((uint64_t)&v137, (uint64_t *)&unk_10163BBE0);
    sub_100AE381C(a1, (uint64_t)v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {
      sub_10001DAB4((uint64_t)v12, &qword_1016511E0);
      unint64_t v37 = sub_100B6D390(a1);
      if (v37[2])
      {
        sub_1006CC8F8((uint64_t)v37 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80)), (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LostModeInfoRecord);
        uint64_t v38 = 0;
      }
      else
      {
        uint64_t v38 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v6, v38, 1, v7);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v6, 1, v7) == 1)
      {
        sub_10001DAB4((uint64_t)v6, &qword_10164B2D0);
        return v142;
      }
      sub_1006CD470((uint64_t)v6, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for LostModeInfoRecord);
      uint64_t v102 = *(int *)(v7 + 44);
      uint64_t v103 = v9;
      unint64_t v104 = (uint64_t *)&v9[v102];
      uint64_t v105 = *v104;
      unint64_t v106 = v104[1];
      id v107 = objc_allocWithZone((Class)SPBeaconingKey);
      sub_1000361E0(v105, v106);
      Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
      Class v109 = Data._bridgeToObjectiveC()().super.isa;
      id v110 = [v107 initWithDateInterval:isa key:v109];

      sub_10001CFB8(v105, v106);
      id v111 = objc_allocWithZone((Class)SPCommandKey);
      id v112 = v110;
      Class v113 = Data._bridgeToObjectiveC()().super.isa;
      Class v114 = Data._bridgeToObjectiveC()().super.isa;
      Class v115 = Data._bridgeToObjectiveC()().super.isa;
      id v116 = [v111 initWithBeaconingKey:v112 commandKey:v113 connectionToken:v114 nearbyToken:v115 primaryIndex:0 secondaryIndex:0 type:2];

      static os_log_type_t.default.getter();
      if (qword_1016372E0 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v117 = swift_allocObject();
      *(_OWORD *)(v117 + 16) = xmmword_101347BA0;
      uint64_t v118 = UUID.uuidString.getter();
      uint64_t v120 = v119;
      *(void *)(v117 + 56) = &type metadata for String;
      unint64_t v121 = sub_10000B4CC();
      *(void *)(v117 + 32) = v118;
      *(void *)(v117 + 40) = v120;
      *(void *)(v117 + 96) = &type metadata for Int;
      *(void *)(v117 + 104) = &protocol witness table for Int;
      *(void *)(v117 + 64) = v121;
      *(void *)(v117 + 72) = 1;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      id v122 = v116;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v142 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v142 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      uint64_t v59 = (uint64_t (*)(void))type metadata accessor for LostModeInfoRecord;
      uint64_t v60 = (uint64_t)v103;
    }
    else
    {
      uint64_t v39 = (uint64_t)v12;
      long long v40 = v16;
      sub_1006CD470(v39, (uint64_t)v16, type metadata accessor for WildModeAssociationRecord);
      static os_log_type_t.default.getter();
      if (qword_1016372F0 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_101342130;
      uint64_t v42 = UUID.uuidString.getter();
      uint64_t v44 = v43;
      *(void *)(v41 + 56) = &type metadata for String;
      *(void *)(v41 + 64) = sub_10000B4CC();
      *(void *)(v41 + 32) = v42;
      *(void *)(v41 + 40) = v44;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = MACAddress.data.getter();
      unint64_t v47 = v46;
      id v48 = objc_allocWithZone((Class)SPBeaconingKey);
      Class v49 = DateInterval._bridgeToObjectiveC()().super.isa;
      Class v50 = Data._bridgeToObjectiveC()().super.isa;
      id v51 = [v48 initWithDateInterval:v49 key:v50];

      sub_10001CFB8(v45, v47);
      id v52 = objc_allocWithZone((Class)SPCommandKey);
      id v53 = v51;
      Class v54 = Data._bridgeToObjectiveC()().super.isa;
      Class v55 = Data._bridgeToObjectiveC()().super.isa;
      Class v56 = Data._bridgeToObjectiveC()().super.isa;
      id v57 = [v52 initWithBeaconingKey:v53 commandKey:v54 connectionToken:v55 nearbyToken:v56 primaryIndex:0 secondaryIndex:0 type:2];

      id v58 = v57;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v142 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v142 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      uint64_t v59 = type metadata accessor for WildModeAssociationRecord;
      uint64_t v60 = (uint64_t)v40;
    }
    sub_1006CCE04(v60, v59);
    return v142;
  }
  sub_10001CEB0(&v137, (uint64_t)v139);
  uint64_t v21 = v140;
  uint64_t v22 = v141;
  unint64_t v23 = sub_10001CD44(v139, v140);
  uint64_t v24 = sub_100B2F5F4((uint64_t)v23, v134, 0, 1, 0, v20, v21, v22);
  Class v26 = (void *)v24;
  switch(v27)
  {
    case 1:
      goto LABEL_6;
    case 2:
      uint64_t v35 = (void *)v24;
      Class v26 = _swiftEmptyArrayStorage;
      break;
    case 3:
      static os_log_type_t.default.getter();
      if (qword_101637250 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_101342130;
      uint64_t v63 = v140;
      uint64_t v62 = v141;
      sub_10001CD44(v139, v140);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v62 + 8) + 8) + 32))(v63);
      uint64_t v64 = UUID.uuidString.getter();
      uint64_t v66 = v65;
      ((void (*)(char *, void *))v127[1])(v19, v130);
      *(void *)(v61 + 56) = &type metadata for String;
      *(void *)(v61 + 64) = sub_10000B4CC();
      *(void *)(v61 + 32) = v64;
      *(void *)(v61 + 40) = v66;
      os_log(_:dso:log:_:_:)();
      uint64_t v24 = swift_bridgeObjectRelease();
      uint64_t v35 = _swiftEmptyArrayStorage;
      Class v26 = _swiftEmptyArrayStorage;
      break;
    default:
      uint64_t v28 = v25;
      swift_bridgeObjectRetain();
      static os_log_type_t.default.getter();
      if (qword_101637250 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_101342130;
      uint64_t v31 = v140;
      uint64_t v30 = v141;
      sub_10001CD44(v139, v140);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v30 + 8) + 8) + 32))(v31);
      uint64_t v32 = UUID.uuidString.getter();
      uint64_t v34 = v33;
      ((void (*)(char *, void *))v127[1])(v19, v130);
      *(void *)(v29 + 56) = &type metadata for String;
      *(void *)(v29 + 64) = sub_10000B4CC();
      *(void *)(v29 + 32) = v32;
      *(void *)(v29 + 40) = v34;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v24 = sub_1002F6A08((uint64_t)v26, v28, 0);
LABEL_6:
      uint64_t v35 = _swiftEmptyArrayStorage;
      break;
  }
  *(void *)&long long v137 = _swiftEmptyArrayStorage;
  __chkstk_darwin(v24);
  Class v124 = v139;
  Class v125 = &v137;
  uint64_t v67 = 0;
  long long v68 = sub_100F48FC0((void (*)(uint64_t *__return_ptr, uint64_t))sub_1006CA1C4, (uint64_t)(&v126 - 4), (uint64_t)v26);
  swift_bridgeObjectRelease();
  sub_100445584((unint64_t)v68);
  uint64_t v136 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v69 = v35[2];
  if (v69)
  {
    uint64_t v126 = 0;
    uint64_t v70 = (uint64_t)v35 + ((*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80));
    uint64_t v71 = *(void *)(v129 + 72);
    v130 = v133 + 4;
    uint64_t v131 = v71;
    uint64_t v127 = v35;
    swift_bridgeObjectRetain();
    uint64_t v72 = v133;
    do
    {
      uint64_t v134 = v69;
      sub_1006CC8F8(v70, (uint64_t)v72, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
      uint64_t v73 = *v72;
      unint64_t v74 = v72[1];
      id v75 = objc_allocWithZone((Class)SPBeaconingKey);
      sub_1000361E0(v73, v74);
      Class v76 = DateInterval._bridgeToObjectiveC()().super.isa;
      Class v77 = Data._bridgeToObjectiveC()().super.isa;
      id v78 = [v75 initWithDateInterval:v76 key:v77];

      sub_10001CFB8(v73, v74);
      uint64_t v79 = v72[2];
      unint64_t v80 = v72[3];
      sub_10001CD44(v130, v72[7]);
      sub_1000361E0(v79, v80);
      dispatch thunk of RawRepresentable.rawValue.getter();
      id v81 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:v135];
      id v82 = objc_allocWithZone((Class)SPCommandKey);
      Class v83 = Data._bridgeToObjectiveC()().super.isa;
      Class v84 = Data._bridgeToObjectiveC()().super.isa;
      Class v85 = Data._bridgeToObjectiveC()().super.isa;
      id v86 = [v82 initWithBeaconingKey:v78 commandKey:v83 connectionToken:v84 nearbyToken:v85 primaryIndex:v81 secondaryIndex:0 type:0];

      sub_10001CFB8(v79, v80);
      sub_1006CCE04((uint64_t)v72, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
      if (v86)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v136 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v136 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v70 += v131;
      uint64_t v69 = v134 - 1;
    }
    while (v134 != 1);
    swift_bridgeObjectRelease();
    uint64_t v87 = (void *)v136;
    uint64_t v67 = v126;
  }
  else
  {
    uint64_t v87 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  sub_100445584((unint64_t)v87);
  uint64_t v88 = swift_bridgeObjectRetain();
  sub_101159BB4(v88);
  swift_bridgeObjectRelease();
  uint64_t v89 = swift_bridgeObjectRetain();
  uint64_t v90 = sub_100710CE0(v89);
  swift_bridgeObjectRelease();
  uint64_t v136 = (uint64_t)v90;
  sub_100691BA8(&v136);
  if (v67)
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x100672164);
  }
  uint64_t v91 = swift_bridgeObjectRelease();
  uint64_t v92 = v136;
  __chkstk_darwin(v91);
  Class v124 = v128;
  Class v125 = (long long *)v139;
  uint64_t v93 = sub_100F49018((void (*)(void))sub_1006CA1E0, (uint64_t)(&v126 - 4), v92);
  swift_release();
  uint64_t v136 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v94 = v93[2];
  if (v94)
  {
    uint64_t v95 = (void *)((char *)v93
                   + ((*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80)));
    uint64_t v96 = *(void *)(v129 + 72);
    unint64_t v97 = v142;
    uint64_t v98 = swift_bridgeObjectRetain();
    do
    {
      __chkstk_darwin(v98);
      Class v124 = v95;
      swift_bridgeObjectRetain();
      uint64_t v99 = sub_100F4930C((void (*)(uint64_t *__return_ptr, id *))sub_1006CA1FC, (uint64_t)(&v126 - 4), v97);
      swift_bridgeObjectRelease();
      uint64_t v98 = sub_100445584((unint64_t)v99);
      uint64_t v95 = (void *)((char *)v95 + v96);
      --v94;
    }
    while (v94);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  unint64_t v100 = swift_bridgeObjectRetain();
  sub_100445584(v100);
  unint64_t v101 = v142;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v139);
  swift_bridgeObjectRelease();
  return v101;
}

uint64_t sub_100672174@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, void **a3@<X2>, void *a4@<X8>)
{
  uint64_t v89 = a4;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (char *)a1 + *(int *)(type metadata accessor for TimeBasedKey() + 24);
  unint64_t v13 = *((void *)v12 + 1);
  uint64_t v90 = v4;
  if (v13 >> 60 == 15)
  {
    LODWORD(v88) = static os_log_type_t.error.getter();
    if (qword_101637250 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_101347BA0;
    uint64_t v15 = a2[3];
    uint64_t v16 = a2[4];
    sub_10001CD44(a2, v15);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v16 + 8) + 8) + 32))(v15);
    uint64_t v17 = UUID.uuidString.getter();
    uint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(void *)(v14 + 56) = &type metadata for String;
    unint64_t v20 = sub_10000B4CC();
    *(void *)(v14 + 32) = v17;
    *(void *)(v14 + 40) = v19;
    unint64_t v21 = *a1;
    *(void *)(v14 + 96) = &type metadata for UInt64;
    *(void *)(v14 + 104) = &protocol witness table for UInt64;
    *(void *)(v14 + 64) = v20;
    *(void *)(v14 + 72) = v21;
    os_log(_:dso:log:_:_:)();
    uint64_t result = swift_bridgeObjectRelease();
    id v23 = 0;
    goto LABEL_14;
  }
  uint64_t v93 = *(void *)v12;
  uint64_t v24 = v93;
  unint64_t v94 = v13;
  long long v25 = *((_OWORD *)v12 + 2);
  long long v95 = *((_OWORD *)v12 + 1);
  long long v96 = v25;
  sub_1000361E0(v93, v13);
  uint64_t v26 = sub_100A8C640();
  unint64_t v28 = v27;
  id v29 = objc_allocWithZone((Class)SPBeaconingKey);
  Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  Class v31 = Data._bridgeToObjectiveC()().super.isa;
  id v87 = [v29 initWithDateInterval:isa key:v31];

  sub_10001CFB8(v26, v28);
  unint64_t v32 = *a1;
  uint64_t v33 = (objc_class *)[objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:*a1];
  if (v32) {
    unint64_t v34 = v32 / 0x60 + 1;
  }
  else {
    unint64_t v34 = 0;
  }
  uint64_t v35 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v35;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v35 = sub_100A714F4(0, v35[2] + 1, 1, v35);
    *a3 = v35;
  }
  unint64_t v38 = v35[2];
  unint64_t v37 = v35[3];
  if (v38 >= v37 >> 1) {
    uint64_t v35 = sub_100A714F4((void *)(v37 > 1), v38 + 1, 1, v35);
  }
  v35[2] = v38 + 1;
  v35[v38 + 4] = v34;
  *a3 = v35;
  uint64_t v39 = String.utf8Data.getter();
  unint64_t v41 = v40;
  sub_1000361E0(v24, v13);
  uint64_t v42 = v90;
  uint64_t v43 = sub_100A941DC(v24, v13, v39, v41, 32);
  if (!v42)
  {
    uint64_t v45 = v43;
    unint64_t v46 = v44;
    sub_100037A24(v24, v13);
    sub_100434DF4(v45, v46, &v91);
    unint64_t v47 = v13;
    sub_10001CFB8(v39, v41);
    uint64_t v48 = v91;
    unint64_t v85 = v92;
    uint64_t v49 = String.utf8Data.getter();
    unint64_t v51 = v50;
    sub_1000361E0(v24, v47);
    uint64_t v52 = sub_100A941DC(v24, v47, v49, v51, 32);
    unint64_t v54 = v53;
    Class v86 = v33;
    unint64_t v88 = v47;
    sub_100037A24(v24, v47);
    sub_100434DF4(v52, v54, &v91);
    sub_10001CFB8(v49, v51);
    unint64_t v83 = v92;
    uint64_t v84 = v91;
    uint64_t v55 = sub_100A8C640();
    unint64_t v57 = v56;
    uint64_t v58 = String.utf8Data.getter();
    unint64_t v60 = v59;
    unint64_t v61 = v88;
    sub_1000361E0(v24, v88);
    uint64_t v62 = sub_100A941DC(v24, v61, v58, v60, 32);
    unint64_t v64 = v63;
    sub_100037A24(v24, v88);
    sub_100434DF4(v62, v64, &v91);
    uint64_t v90 = 0;
    uint64_t v82 = v24;
    sub_10001CFB8(v58, v60);
    uint64_t v65 = v91;
    unint64_t v66 = v92;
    uint64_t v67 = sub_1004378B8(v91, v92, v55, v57);
    unint64_t v79 = v68;
    uint64_t v80 = v67;
    sub_10001CFB8(v65, v66);
    sub_10001CFB8(v55, v57);
    id v81 = objc_allocWithZone((Class)SPCommandKey);
    uint64_t v69 = v86;
    unint64_t v70 = v85;
    Class v71 = Data._bridgeToObjectiveC()().super.isa;
    Class v86 = v71;
    unint64_t v72 = v83;
    uint64_t v73 = v84;
    Class v74 = Data._bridgeToObjectiveC()().super.isa;
    Class v75 = Data._bridgeToObjectiveC()().super.isa;
    Class v76 = v87;
    id v23 = [v81 initWithBeaconingKey:v87 commandKey:v71 connectionToken:v74 nearbyToken:v75 primaryIndex:v69 secondaryIndex:0 type:0];

    sub_10001CFB8(v80, v79);
    sub_10001CFB8(v73, v72);
    sub_10001CFB8(v48, v70);

    uint64_t result = sub_100037A24(v82, v88);
LABEL_14:
    void *v89 = v23;
    return result;
  }
  sub_10001CFB8(v39, v41);
  sub_100037A24(v24, v13);
  uint64_t v91 = 0;
  unint64_t v92 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  v77._object = (void *)0x80000001014034D0;
  v77._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v77);
  uint64_t v97 = v42;
  sub_10000588C(&qword_101638D40);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1006729B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v152 = a4;
  uint64_t v7 = sub_10000588C(&qword_10164B360);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  Class v160 = (char *)&v149 - v11;
  uint64_t v12 = _s18ConnectionKeyGroupVMa();
  uint64_t v169 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v168 = (uint64_t)&v149 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  id v161 = (char *)&v149 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v155 = (uint64_t)&v149 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v157 = (uint64_t)&v149 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  Class v166 = (uint64_t (**)(char *, uint64_t, uint64_t))((char *)&v149 - v22);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v159 = (char *)&v149 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v154 = (uint64_t)&v149 - v26;
  __chkstk_darwin(v25);
  uint64_t v156 = (uint64_t)&v149 - v27;
  uint64_t v28 = type metadata accessor for TimeBasedKey();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = __chkstk_darwin(v28);
  v171 = (uint64_t *)((char *)&v149 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v32 = __chkstk_darwin(v30);
  Class v158 = (char *)&v149 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  id v167 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)&v149 - v35);
  __chkstk_darwin(v34);
  v173 = (uint64_t *)((char *)&v149 - v36);
  uint64_t v37 = *a1;
  sub_10001D010(a3, (uint64_t)&v177);
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = a2;
  sub_10001CEB0(&v177, v38 + 24);
  *(void *)(v38 + 64) = v37;
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v39 = *((void *)&v177 + 1);
  char v172 = (char *)v12;
  uint64_t v170 = v28;
  switch(v178)
  {
    case 1:
      uint64_t v150 = *((void *)&v177 + 1);
      uint64_t v10 = *(char **)(v177 + 16);
      uint64_t v151 = v177;
      if (v10)
      {
        unint64_t v44 = v177 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
        Class v158 = v159 + 32;
        Class v164 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v169 + 48);
        Class v165 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v169 + 56);
        id v163 = *(char **)(v29 + 72);
        swift_bridgeObjectRetain();
        unint64_t v88 = _swiftEmptyArrayStorage;
        uint64_t v89 = (uint64_t)v160;
        uint64_t v90 = (uint64_t)v167;
        while (1)
        {
          v171 = v88;
          uint64_t v91 = (uint64_t)v173;
          sub_1006CC8F8(v44, (uint64_t)v173, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          sub_1006CC8F8(v91, v90, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          uint64_t v28 = v90 + *(int *)(v28 + 24);
          unint64_t v92 = *(void *)(v28 + 8);
          if (v92 >> 60 == 15)
          {
            sub_1006CCE04(v90, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            uint64_t v93 = 1;
            uint64_t v28 = v170;
          }
          else
          {
            id v162 = v10;
            uint64_t v10 = (char *)v90;
            uint64_t v94 = *(void *)v28;
            sub_1000361E0(*(void *)v28, v92);
            unint64_t v48 = String.utf8Data.getter();
            unint64_t v50 = v95;
            sub_1000361E0(v94, v92);
            uint64_t v96 = v174;
            uint64_t v168 = sub_100A941DC(v94, v92, v48, v50, 32);
            uint64_t v54 = v96;
            if (v96)
            {
              sub_10001CFB8(v48, v50);
              uint64_t v135 = v94;
              unint64_t v136 = v92;
              goto LABEL_124;
            }
            unint64_t v46 = v97;
            sub_100037A24(v94, v92);
            unint64_t v55 = v46 >> 62;
            id v161 = (char *)v46;
            switch(v46 >> 62)
            {
              case 1uLL:
                LODWORD(v98) = HIDWORD(v168) - v168;
                if (__OFSUB__(HIDWORD(v168), v168)) {
                  goto LABEL_83;
                }
                uint64_t v98 = (int)v98;
LABEL_49:
                if (v98 != 32) {
                  goto LABEL_92;
                }
                sub_10001CFB8(v48, v50);
                sub_100037A24(v94, v92);
                unint64_t v46 = (unint64_t)v10;
                uint64_t v101 = *(void *)v10;
                Class v179 = &type metadata for SecondaryIndex;
                unint64_t v180 = sub_1001A15EC();
                *(void *)&long long v177 = v101;
                uint64_t v102 = *(void *)(v28 + 16);
                unint64_t v103 = *(void *)(v28 + 24);
                sub_1000361E0(v102, v103);
                uint64_t v104 = sub_100A948F8(v102, v103);
                uint64_t v105 = sub_100A90C58(v104, 0);
                uint64_t v174 = 0;
                uint64_t v28 = v170;
                uint64_t v10 = v162;
                unint64_t v48 = v105;
                unint64_t v50 = v106;
                CCECCryptorRelease();
                sub_10001CFB8(v102, v103);
                unint64_t v55 = v50 >> 62;
                uint64_t v12 = (uint64_t)v172;
                switch(v50 >> 62)
                {
                  case 1uLL:
                    LODWORD(v107) = HIDWORD(v48) - v48;
                    if (__OFSUB__(HIDWORD(v48), v48)) {
                      goto LABEL_87;
                    }
                    uint64_t v107 = (int)v107;
LABEL_57:
                    if (v107 != 28) {
                      goto LABEL_100;
                    }
                    sub_100435A9C(6, v48, v50, &v175);
                    uint64_t v110 = v175;
                    unint64_t v111 = v176;
                    sub_10001D010((uint64_t)&v177, (uint64_t)v158);
                    unint64_t v112 = v46 + *(int *)(v28 + 20);
                    Class v113 = (uint64_t *)v159;
                    Class v114 = &v159[*(int *)(v12 + 28)];
                    uint64_t v115 = type metadata accessor for DateInterval();
                    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v115 - 8) + 16))(v114, v112, v115);
                    *Class v113 = v110;
                    v113[1] = v111;
                    uint64_t v116 = (uint64_t)v167;
                    uint64_t v117 = v161;
                    v113[2] = v168;
                    v113[3] = (uint64_t)v117;
                    sub_1006CCE04(v116, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v177);
                    uint64_t v118 = (uint64_t)v113;
                    uint64_t v90 = (uint64_t)v167;
                    uint64_t v119 = v154;
                    sub_1006CD470(v118, v154, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                    uint64_t v89 = (uint64_t)v160;
                    sub_1006CD470(v119, (uint64_t)v160, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                    uint64_t v93 = 0;
                    break;
                  case 2uLL:
                    uint64_t v109 = *(void *)(v48 + 16);
                    uint64_t v108 = *(void *)(v48 + 24);
                    BOOL v59 = __OFSUB__(v108, v109);
                    uint64_t v107 = v108 - v109;
                    if (!v59) {
                      goto LABEL_57;
                    }
                    goto LABEL_85;
                  case 3uLL:
                    uint64_t v54 = 0;
                    goto LABEL_132;
                  default:
                    uint64_t v107 = BYTE6(v50);
                    goto LABEL_57;
                }
                break;
              case 2uLL:
                uint64_t v100 = *(void *)(v168 + 16);
                uint64_t v99 = *(void *)(v168 + 24);
                BOOL v59 = __OFSUB__(v99, v100);
                uint64_t v98 = v99 - v100;
                if (!v59) {
                  goto LABEL_49;
                }
                goto LABEL_81;
              case 3uLL:
                uint64_t v147 = 0;
                goto LABEL_126;
              default:
                uint64_t v98 = BYTE6(v46);
                goto LABEL_49;
            }
          }
          (*v165)(v89, v93, 1, v12);
          sub_1006CCE04((uint64_t)v173, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          int v120 = (*v164)(v89, 1, v12);
          unint64_t v88 = v171;
          if (v120 == 1)
          {
            sub_10001DAB4(v89, &qword_10164B360);
          }
          else
          {
            uint64_t v121 = v156;
            sub_1006CD470(v89, v156, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
            sub_1006CD470(v121, (uint64_t)v166, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v88 = (void *)sub_100A6F4A0(0, v88[2] + 1, 1, (unint64_t)v88);
            }
            unint64_t v123 = v88[2];
            unint64_t v122 = v88[3];
            if (v123 >= v122 >> 1) {
              unint64_t v88 = (void *)sub_100A6F4A0(v122 > 1, v123 + 1, 1, (unint64_t)v88);
            }
            v88[2] = v123 + 1;
            sub_1006CD470((uint64_t)v166, (uint64_t)v88+ ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80))+ *(void *)(v169 + 72) * v123, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
          }
          v44 += (unint64_t)v163;
          if (!--v10)
          {
            sub_1002F6A08(v151, v150, 1u);
            goto LABEL_73;
          }
        }
      }
      unint64_t v88 = _swiftEmptyArrayStorage;
LABEL_73:
      uint64_t v127 = v152;
      if (v88[2])
      {
        uint64_t v128 = v169;
        sub_1006CC8F8((uint64_t)v88 + ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80)), v152, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v128 + 56))(v127, 0, 1, v12);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v169 + 56))(v152, 1, 1, v12);
      }
      sub_1002F6A08(v151, v150, 1u);
      return swift_bridgeObjectRelease();
    case 2:
      if (*(void *)(v177 + 16))
      {
        uint64_t v83 = v169;
        uint64_t v84 = v177;
        uint64_t v85 = v152;
        sub_1006CC8F8(v177 + ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80)), v152, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v83 + 56))(v85, 0, 1, v12);
        uint64_t v86 = v84;
      }
      else
      {
        uint64_t v124 = v177;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v169 + 56))(v152, 1, 1, v12);
        uint64_t v86 = v124;
      }
      return sub_1002F6A08(v86, v39, 2u);
    case 3:
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v169 + 56))(v152, 1, 1, v12);
    default:
      uint64_t v150 = *((void *)&v177 + 1);
      unint64_t v40 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v177 + 16);
      uint64_t v151 = v177;
      if (!v40)
      {
        uint64_t v42 = _swiftEmptyArrayStorage;
        goto LABEL_70;
      }
      uint64_t v41 = v177 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
      Class v160 = v161 + 32;
      Class v166 = (uint64_t (**)(char *, uint64_t, uint64_t))(v169 + 48);
      id v167 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v169 + 56);
      Class v165 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 72);
      swift_bridgeObjectRetain();
      uint64_t v42 = _swiftEmptyArrayStorage;
      uint64_t v43 = (uint64_t)v171;
      unint64_t v44 = (unint64_t)v158;
      v153 = v10;
      break;
  }
  do
  {
    v173 = v42;
    sub_1006CC8F8(v41, v44, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    sub_1006CC8F8(v44, v43, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v45 = (uint64_t *)(v43 + *(int *)(v28 + 24));
    unint64_t v46 = v45[1];
    if (v46 >> 60 != 15)
    {
      Class v164 = v40;
      uint64_t v28 = *v45;
      sub_1000361E0(*v45, v46);
      unint64_t v48 = String.utf8Data.getter();
      unint64_t v50 = v49;
      sub_1000361E0(v28, v46);
      uint64_t v51 = v174;
      uint64_t v52 = sub_100A941DC(v28, v46, v48, v50, 32);
      uint64_t v54 = v51;
      if (!v51)
      {
        uint64_t v10 = (char *)v52;
        unint64_t v44 = v53;
        sub_100037A24(v28, v46);
        unint64_t v55 = v44 >> 62;
        switch(v44 >> 62)
        {
          case 1uLL:
            LODWORD(v56) = HIDWORD(v10) - v10;
            if (__OFSUB__(HIDWORD(v10), v10)) {
              goto LABEL_82;
            }
            uint64_t v56 = (int)v56;
LABEL_16:
            if (v56 != 32) {
              goto LABEL_88;
            }
            id v163 = v10;
            sub_10001CFB8(v48, v50);
            sub_100037A24(v28, v46);
            uint64_t v60 = *v171;
            Class v179 = &type metadata for SecondaryIndex;
            unint64_t v180 = sub_1001A15EC();
            *(void *)&long long v177 = v60;
            uint64_t v28 = v45[2];
            unint64_t v46 = v45[3];
            sub_1000361E0(v28, v46);
            uint64_t v61 = sub_100A948F8(v28, v46);
            uint64_t v62 = sub_100A90C58(v61, 0);
            uint64_t v174 = 0;
            uint64_t v10 = v172;
            unint64_t v50 = v62;
            unint64_t v48 = v63;
            CCECCryptorRelease();
            sub_10001CFB8(v28, v46);
            unint64_t v55 = v48 >> 62;
            uint64_t v64 = v170;
            switch(v48 >> 62)
            {
              case 1uLL:
                LODWORD(v65) = HIDWORD(v50) - v50;
                if (__OFSUB__(HIDWORD(v50), v50)) {
                  goto LABEL_86;
                }
                uint64_t v65 = (int)v65;
LABEL_24:
                if (v65 != 28) {
                  goto LABEL_96;
                }
                uint64_t v68 = v41;
                sub_100435A9C(6, v50, v48, &v175);
                uint64_t v69 = v175;
                id v162 = (char *)v176;
                sub_10001D010((uint64_t)&v177, (uint64_t)v160);
                uint64_t v43 = (uint64_t)v171;
                unint64_t v70 = (char *)v171 + *(int *)(v64 + 20);
                uint64_t v12 = (uint64_t)v10;
                uint64_t v71 = *((int *)v10 + 7);
                unint64_t v72 = (uint64_t *)v161;
                uint64_t v73 = &v161[v71];
                uint64_t v74 = type metadata accessor for DateInterval();
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v74 - 8) + 16))(v73, v70, v74);
                *unint64_t v72 = v69;
                uint64_t v28 = v64;
                Class v75 = v163;
                v72[1] = (uint64_t)v162;
                v72[2] = (uint64_t)v75;
                v72[3] = v44;
                sub_1006CCE04(v43, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v177);
                uint64_t v76 = v155;
                sub_1006CD470((uint64_t)v72, v155, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                uint64_t v10 = v153;
                sub_1006CD470(v76, (uint64_t)v153, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
                uint64_t v47 = 0;
                unint64_t v44 = (unint64_t)v158;
                unint64_t v40 = v164;
                uint64_t v41 = v68;
                break;
              case 2uLL:
                uint64_t v67 = *(void *)(v50 + 16);
                uint64_t v66 = *(void *)(v50 + 24);
                BOOL v59 = __OFSUB__(v66, v67);
                uint64_t v65 = v66 - v67;
                if (!v59) {
                  goto LABEL_24;
                }
                goto LABEL_84;
              case 3uLL:
                uint64_t v148 = 0;
                goto LABEL_130;
              default:
                uint64_t v65 = BYTE6(v48);
                goto LABEL_24;
            }
            goto LABEL_26;
          case 2uLL:
            uint64_t v58 = *((void *)v10 + 2);
            uint64_t v57 = *((void *)v10 + 3);
            BOOL v59 = __OFSUB__(v57, v58);
            uint64_t v56 = v57 - v58;
            if (!v59) {
              goto LABEL_16;
            }
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            if (v55 != 1) {
              goto LABEL_104;
            }
            LODWORD(v55) = HIDWORD(v10) - v10;
            if (!__OFSUB__(HIDWORD(v10), v10)) {
              goto LABEL_135;
            }
            __break(1u);
LABEL_92:
            if (v55 != 1) {
              goto LABEL_108;
            }
            LODWORD(v55) = HIDWORD(v168) - v168;
            if (!__OFSUB__(HIDWORD(v168), v168))
            {
              uint64_t v147 = (int)v55;
LABEL_126:
              sub_10013019C();
              uint64_t v54 = swift_allocError();
              *(void *)uint64_t v140 = 32;
              *(void *)(v140 + 8) = v147;
              *(unsigned char *)(v140 + 16) = 0;
              swift_willThrow();
              uint64_t v138 = v168;
              unint64_t v139 = (unint64_t)v161;
              goto LABEL_127;
            }
            __break(1u);
LABEL_96:
            if (v55 != 1) {
              goto LABEL_112;
            }
            LODWORD(v55) = HIDWORD(v50) - v50;
            if (!__OFSUB__(HIDWORD(v50), v50))
            {
              uint64_t v148 = (int)v55;
LABEL_130:
              sub_10013019C();
              uint64_t v142 = swift_allocError();
              *(void *)uint64_t v143 = 28;
              *(void *)(v143 + 8) = v148;
              *(unsigned char *)(v143 + 16) = 0;
              swift_willThrow();
              sub_10001CFB8(v50, v48);
              uint64_t v175 = 0;
              unint64_t v176 = 0xE000000000000000;
              unint64_t v50 = (unint64_t)&v175;
              _StringGuts.grow(_:)(35);
              v144._object = (void *)0x80000001013F3B70;
              v144._countAndFlagsBits = 0xD000000000000021;
              String.append(_:)(v144);
              unint64_t v181 = v142;
LABEL_133:
              sub_10000588C(&qword_101638D40);
              _print_unlocked<A, B>(_:_:)();
              goto LABEL_134;
            }
            __break(1u);
LABEL_100:
            if (v55 != 1) {
              goto LABEL_116;
            }
            LODWORD(v55) = HIDWORD(v48) - v48;
            if (!__OFSUB__(HIDWORD(v48), v48))
            {
              uint64_t v54 = (int)v55;
LABEL_132:
              sub_10013019C();
              unint64_t v44 = swift_allocError();
              *(void *)uint64_t v145 = 28;
              *(void *)(v145 + 8) = v54;
              *(unsigned char *)(v145 + 16) = 0;
              swift_willThrow();
              sub_10001CFB8(v48, v50);
              uint64_t v175 = 0;
              unint64_t v176 = 0xE000000000000000;
              unint64_t v50 = (unint64_t)&v175;
              _StringGuts.grow(_:)(35);
              v146._object = (void *)0x80000001013F3B70;
              v146._countAndFlagsBits = 0xD000000000000021;
              String.append(_:)(v146);
              unint64_t v181 = v44;
              goto LABEL_133;
            }
            __break(1u);
LABEL_104:
            if (v55 != 2)
            {
              uint64_t v130 = BYTE6(v44);
              goto LABEL_122;
            }
            uint64_t v129 = *((void *)v10 + 2);
            unint64_t v55 = *((void *)v10 + 3);
            uint64_t v130 = v55 - v129;
            if (!__OFSUB__(v55, v129)) {
              goto LABEL_122;
            }
            __break(1u);
LABEL_108:
            if (v55 != 2)
            {
              uint64_t v147 = BYTE6(v161);
              goto LABEL_126;
            }
            uint64_t v131 = *(void *)(v168 + 16);
            unint64_t v55 = *(void *)(v168 + 24);
            uint64_t v147 = v55 - v131;
            if (!__OFSUB__(v55, v131)) {
              goto LABEL_126;
            }
            __break(1u);
LABEL_112:
            if (v55 != 2)
            {
              uint64_t v148 = BYTE6(v48);
              goto LABEL_130;
            }
            uint64_t v132 = *(void *)(v50 + 16);
            unint64_t v55 = *(void *)(v50 + 24);
            uint64_t v148 = v55 - v132;
            if (!__OFSUB__(v55, v132)) {
              goto LABEL_130;
            }
            __break(1u);
LABEL_116:
            if (v55 != 2)
            {
              uint64_t v54 = BYTE6(v50);
              goto LABEL_132;
            }
            uint64_t v134 = *(void *)(v48 + 16);
            uint64_t v133 = *(void *)(v48 + 24);
            uint64_t v54 = v133 - v134;
            if (!__OFSUB__(v133, v134)) {
              goto LABEL_132;
            }
            __break(1u);
            break;
          case 3uLL:
            uint64_t v130 = 0;
            goto LABEL_122;
          default:
            uint64_t v56 = BYTE6(v44);
            goto LABEL_16;
        }
      }
      sub_10001CFB8(v48, v50);
      uint64_t v135 = v28;
      unint64_t v136 = v46;
LABEL_124:
      sub_100037A24(v135, v136);
      while (1)
      {
        *(void *)&long long v177 = 0;
        *((void *)&v177 + 1) = 0xE000000000000000;
        unint64_t v50 = (unint64_t)&v177;
        _StringGuts.grow(_:)(35);
        v141._object = (void *)0x80000001013FB8E0;
        v141._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v141);
        uint64_t v175 = v54;
        sub_10000588C(&qword_101638D40);
        _print_unlocked<A, B>(_:_:)();
LABEL_134:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_135:
        uint64_t v130 = (int)v55;
LABEL_122:
        sub_10013019C();
        uint64_t v54 = swift_allocError();
        *(void *)uint64_t v137 = 32;
        *(void *)(v137 + 8) = v130;
        *(unsigned char *)(v137 + 16) = 0;
        swift_willThrow();
        uint64_t v138 = (uint64_t)v10;
        unint64_t v139 = v44;
LABEL_127:
        sub_10001CFB8(v138, v139);
        sub_10001CFB8(v48, v50);
      }
    }
    sub_1006CCE04(v43, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v47 = 1;
    uint64_t v12 = (uint64_t)v172;
LABEL_26:
    (*v167)(v10, v47, 1, v12);
    sub_1006CCE04(v44, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    int v77 = (*v166)(v10, 1, v12);
    uint64_t v42 = v173;
    if (v77 == 1)
    {
      sub_10001DAB4((uint64_t)v10, &qword_10164B360);
    }
    else
    {
      uint64_t v78 = v28;
      unint64_t v79 = v40;
      uint64_t v80 = v157;
      sub_1006CD470((uint64_t)v10, v157, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
      sub_1006CD470(v80, v168, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v42 = (void *)sub_100A6F4A0(0, v42[2] + 1, 1, (unint64_t)v42);
      }
      unint64_t v82 = v42[2];
      unint64_t v81 = v42[3];
      if (v82 >= v81 >> 1) {
        uint64_t v42 = (void *)sub_100A6F4A0(v81 > 1, v82 + 1, 1, (unint64_t)v42);
      }
      v42[2] = v82 + 1;
      sub_1006CD470(v168, (uint64_t)v42+ ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80))+ *(void *)(v169 + 72) * v82, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
      unint64_t v40 = v79;
      uint64_t v28 = v78;
      uint64_t v12 = (uint64_t)v172;
    }
    v41 += (uint64_t)v165;
    unint64_t v40 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))((char *)v40 - 1);
  }
  while (v40);
  swift_bridgeObjectRelease();
LABEL_70:
  uint64_t v125 = v152;
  if (v42[2])
  {
    uint64_t v126 = v169;
    sub_1006CC8F8((uint64_t)v42 + ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80)), v152, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v126 + 56))(v125, 0, 1, v12);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v169 + 56))(v152, 1, 1, v12);
  }
  sub_1002F6A08(v151, v150, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1006740E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return _swift_task_switch(sub_100674108, 0, 0);
}

uint64_t sub_100674108()
{
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  v0[7] = v0[2];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100674214;
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  return sub_1006D8A68(v3, v2, v2, 1, 0, 0);
}

uint64_t sub_100674214(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v4;
  *(void *)(*v4 + 72) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v9 = sub_100674384;
  }
  else
  {
    swift_release();
    *(unsigned char *)(v8 + 96) = a3;
    *(void *)(v8 + 80) = a2;
    *(void *)(v8 + 88) = a1;
    uint64_t v9 = sub_100674358;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_100674358()
{
  __int8 v1 = *(unsigned char *)(v0 + 96);
  uint64_t v2 = *(int8x16_t **)(v0 + 24);
  int8x16_t *v2 = vextq_s8(*(int8x16_t *)(v0 + 80), *(int8x16_t *)(v0 + 80), 8uLL);
  v2[1].i8[0] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100674384()
{
  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 16) = 3;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_100674400(void **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  v42[0] = a3;
  uint64_t v5 = _s18ConnectionKeyGroupVMa();
  __chkstk_darwin(v5);
  uint64_t v7 = (void *)((char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *a1;
  uint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  sub_1000361E0(v9, v10);
  id v11 = [v8 connectionToken];
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  LOBYTE(v11) = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v9, v10, v12, v14);
  sub_10001CFB8(v12, v14);
  sub_10001CFB8(v9, v10);
  sub_1006CC8F8((uint64_t)a2, (uint64_t)v7, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
  if (v11)
  {
    sub_1006CCE04((uint64_t)v7, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
    id v15 = 0;
  }
  else
  {
    uint64_t v16 = *v7;
    unint64_t v17 = v7[1];
    sub_1000361E0(*v7, v17);
    id v18 = [v8 beaconingKey];
    id v19 = [v18 key];

    uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    LOBYTE(v19) = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v16, v17, v20, v22);
    sub_10001CFB8(v20, v22);
    sub_10001CFB8(v16, v17);
    sub_1006CCE04((uint64_t)v7, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
    if (v19)
    {
      id v15 = 0;
    }
    else
    {
      uint64_t v23 = *a2;
      unint64_t v24 = a2[1];
      id v25 = objc_allocWithZone((Class)SPBeaconingKey);
      sub_1000361E0(v23, v24);
      Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
      Class v27 = Data._bridgeToObjectiveC()().super.isa;
      id v28 = [v25 initWithDateInterval:isa key:v27];

      sub_10001CFB8(v23, v24);
      sub_10001CD44(a2 + 4, a2[7]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      id v29 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:v42[3]];
      id v30 = [v8 primaryIndex];
      id v31 = [v8 connectionToken];
      uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v34 = v33;

      id v35 = objc_allocWithZone((Class)SPCommandKey);
      id v36 = v29;
      Class v37 = Data._bridgeToObjectiveC()().super.isa;
      Class v38 = Data._bridgeToObjectiveC()().super.isa;
      Class v39 = Data._bridgeToObjectiveC()().super.isa;
      unint64_t v40 = v35;
      uint64_t v41 = v28;
      id v15 = [v40 initWithBeaconingKey:v28 commandKey:v37 connectionToken:v38 nearbyToken:v39 primaryIndex:v30 secondaryIndex:v36 type:1];

      sub_10001CFB8(v32, v34);
    }
  }
  *(void *)v42[0] = v15;
}

void *sub_1006747BC(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = _s18ConnectionKeyGroupVMa();
  uint64_t v4 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  id v36 = (void *)((char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for TimeBasedKeysCriteria();
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100ACCD98(a1, (uint64_t)&v39);
  if (v40)
  {
    sub_10001CEB0(&v39, (uint64_t)v41);
    *uint64_t v8 = a2;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_100B032EC(v41, (uint64_t)v8);
    id v11 = sub_100655F68((uint64_t)v9);
    swift_bridgeObjectRelease();
    sub_1006CCE04((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for TimeBasedKeysCriteria);
    unint64_t v10 = _swiftEmptyArrayStorage;
    *(void *)&long long v39 = _swiftEmptyArrayStorage;
    uint64_t v12 = v11[2];
    if (v12)
    {
      uint64_t v13 = (uint64_t)v11 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      uint64_t v14 = *(void *)(v4 + 72);
      unint64_t v33 = v36 + 4;
      uint64_t v34 = v14;
      v32[1] = v11;
      swift_bridgeObjectRetain();
      id v15 = v36;
      do
      {
        uint64_t v37 = v13;
        sub_1006CC8F8(v13, (uint64_t)v15, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
        uint64_t v16 = *v15;
        unint64_t v17 = v15[1];
        id v18 = objc_allocWithZone((Class)SPBeaconingKey);
        sub_1000361E0(v16, v17);
        Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
        Class v20 = Data._bridgeToObjectiveC()().super.isa;
        id v21 = [v18 initWithDateInterval:isa key:v20];

        sub_10001CFB8(v16, v17);
        sub_10001CD44(v33, v15[7]);
        dispatch thunk of RawRepresentable.rawValue.getter();
        id v22 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:v38];
        uint64_t v23 = v15[2];
        unint64_t v24 = v15[3];
        id v25 = objc_allocWithZone((Class)SPCommandKey);
        sub_1000361E0(v23, v24);
        uint64_t v26 = v12;
        Class v27 = Data._bridgeToObjectiveC()().super.isa;
        Class v28 = Data._bridgeToObjectiveC()().super.isa;
        Class v29 = Data._bridgeToObjectiveC()().super.isa;
        id v30 = [v25 initWithBeaconingKey:v21 commandKey:v27 connectionToken:v28 nearbyToken:v29 primaryIndex:v22 secondaryIndex:0 type:0];

        sub_10001CFB8(v23, v24);
        sub_1006CCE04((uint64_t)v15, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
        if (v30)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        uint64_t v13 = v37 + v34;
        uint64_t v12 = v26 - 1;
      }
      while (v26 != 1);
      swift_bridgeObjectRelease();
      unint64_t v10 = (void *)v39;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v41);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10001DAB4((uint64_t)&v39, (uint64_t *)&unk_10163BBE0);
    return _swiftEmptyArrayStorage;
  }
  return v10;
}

void *sub_100674D00(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v166 = _s18ConnectionKeyGroupVMa();
  uint64_t v164 = *(void *)(v166 - 8);
  uint64_t v9 = __chkstk_darwin(v166);
  uint64_t v154 = (uint64_t)&v146 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v162 = (uint64_t)&v146 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v157 = (unsigned int (**)(unint64_t, uint64_t, uint64_t))((char *)&v146 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  id v161 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))((char *)&v146 - v16);
  __chkstk_darwin(v15);
  uint64_t v156 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))((char *)&v146 - v17);
  uint64_t v168 = type metadata accessor for TimeBasedKey();
  uint64_t v153 = *(void *)(v168 - 8);
  uint64_t v18 = __chkstk_darwin(v168);
  Class v165 = (uint64_t *)((char *)&v146 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v159 = (void (**)(unint64_t, uint64_t, uint64_t, uint64_t))((char *)&v146 - v21);
  uint64_t v22 = __chkstk_darwin(v20);
  id v163 = (uint64_t *)((char *)&v146 - v23);
  __chkstk_darwin(v22);
  unint64_t v167 = (unint64_t)&v146 - v24;
  uint64_t v25 = sub_10000588C(&qword_10164B360);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  Class v160 = (char *)&v146 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  id v30 = (uint64_t *)((char *)&v146 - v29);
  uint64_t v31 = __chkstk_darwin(v28);
  unint64_t v33 = (unint64_t)&v146 - v32;
  __chkstk_darwin(v31);
  uint64_t v155 = (uint64_t)&v146 - v34;
  uint64_t v35 = type metadata accessor for TimeBasedKeysCriteria();
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v146 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100ACCD98(a1, (uint64_t)&v172);
  if (!v174)
  {
    sub_10001DAB4((uint64_t)&v172, (uint64_t *)&unk_10163BBE0);
    return _swiftEmptyArrayStorage;
  }
  int v38 = a2 & 1;
  sub_10001CEB0(&v172, (uint64_t)&v176);
  *uint64_t v37 = v38;
  *((void *)v37 + 1) = a3;
  v37[16] = a4;
  swift_storeEnumTagMultiPayload();
  long long v39 = sub_100B032EC(&v176, (uint64_t)v37);
  uint64_t v42 = sub_100655F68((uint64_t)v39);
  swift_bridgeObjectRelease();
  uint64_t v43 = sub_1006CCE04((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for TimeBasedKeysCriteria);
  if (!v38)
  {
    __chkstk_darwin(v43);
    *(&v146 - 4) = v4;
    *(&v146 - 3) = (uint64_t)&v176;
    uint64_t v144 = a3;
    uint64_t v40 = sub_100F48FEC((void (*)(uint64_t *__return_ptr, uint64_t))sub_1006CA3D0, (uint64_t)(&v146 - 6), (uint64_t)v42);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v176);
    swift_bridgeObjectRelease();
    return v40;
  }
  uint64_t v148 = v42;
  uint64_t v158 = 0;
  sub_10001D010((uint64_t)&v176, (uint64_t)&v172);
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v4;
  sub_10001CEB0(&v172, v44 + 24);
  *(void *)(v44 + 64) = a3;
  uint64_t v45 = v4;
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v46 = *((void *)&v172 + 1);
  uint64_t v152 = v4;
  uint64_t v47 = v166;
  uint64_t v48 = v164;
  uint64_t v49 = v155;
  uint64_t v50 = (uint64_t)v160;
  uint64_t v51 = v165;
  uint64_t v52 = (uint64_t)v159;
  switch(v173)
  {
    case 1:
      uint64_t v146 = *((void *)&v172 + 1);
      uint64_t v88 = *(void *)(v172 + 16);
      uint64_t v147 = v172;
      if (v88)
      {
        uint64_t v62 = v172 + ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
        uint64_t v149 = (void *)(v33 + 32);
        uint64_t v159 = (void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v164 + 56);
        uint64_t v157 = (unsigned int (**)(unint64_t, uint64_t, uint64_t))(v164 + 48);
        uint64_t v153 = *(void *)(v153 + 72);
        swift_bridgeObjectRetain();
        Class v165 = _swiftEmptyArrayStorage;
        id v30 = v163;
        while (1)
        {
          uint64_t v89 = v167;
          sub_1006CC8F8(v62, v167, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          sub_1006CC8F8(v89, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          uint64_t v90 = (uint64_t *)((char *)v30 + *(int *)(v168 + 24));
          p_uint64_t i = v90[1];
          if (p_i >> 60 == 15)
          {
            sub_1006CCE04((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            uint64_t v91 = 1;
            uint64_t v45 = v152;
          }
          else
          {
            uint64_t v151 = v88;
            uint64_t v92 = *v90;
            sub_1000361E0(*v90, p_i);
            uint64_t v47 = String.utf8Data.getter();
            id v30 = v93;
            sub_1000361E0(v92, p_i);
            uint64_t v60 = v158;
            uint64_t v162 = sub_100A941DC(v92, p_i, v47, (unint64_t)v30, 32);
            unint64_t v59 = v60;
            if (v60)
            {
              sub_10001CFB8(v47, (unint64_t)v30);
              sub_100037A24(v92, p_i);
LABEL_140:
              *(void *)&long long v172 = 0;
              *((void *)&v172 + 1) = 0xE000000000000000;
              p_uint64_t i = (unint64_t)&v172;
              _StringGuts.grow(_:)(35);
              v136._object = (void *)0x80000001013FB8E0;
              v136._countAndFlagsBits = 0xD000000000000021;
              String.append(_:)(v136);
              for (uint64_t i = v59; ; uint64_t i = v62)
              {
                sub_10000588C(&qword_101638D40);
                _print_unlocked<A, B>(_:_:)();
                int v145 = 0;
                uint64_t v137 = 423;
LABEL_148:
                uint64_t v144 = v137;
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
LABEL_149:
                uint64_t v60 = (int)v64;
LABEL_135:
                sub_10013019C();
                uint64_t v62 = swift_allocError();
                *(void *)uint64_t v133 = 32;
                *(void *)(v133 + 8) = v60;
                *(unsigned char *)(v133 + 16) = 0;
                swift_willThrow();
                sub_10001CFB8((uint64_t)v163, v150);
                sub_10001CFB8(p_i, v59);
LABEL_136:
                *(void *)&long long v172 = 0;
                *((void *)&v172 + 1) = 0xE000000000000000;
                p_uint64_t i = (unint64_t)&v172;
                _StringGuts.grow(_:)(35);
                v134._object = (void *)0x80000001013FB8E0;
                v134._countAndFlagsBits = 0xD000000000000021;
                String.append(_:)(v134);
              }
            }
            unint64_t v95 = v94;
            sub_100037A24(v92, p_i);
            unint64_t v64 = v95 >> 62;
            unint64_t v150 = v95;
            switch(v95 >> 62)
            {
              case 1uLL:
                LODWORD(v96) = HIDWORD(v162) - v162;
                if (__OFSUB__(HIDWORD(v162), v162)) {
                  goto LABEL_94;
                }
                uint64_t v96 = (int)v96;
LABEL_57:
                if (v96 != 32) {
                  goto LABEL_103;
                }
                sub_10001CFB8(v47, (unint64_t)v30);
                sub_100037A24(v92, p_i);
                uint64_t v99 = *v163;
                uint64_t v174 = &type metadata for SecondaryIndex;
                unint64_t v175 = sub_1001A15EC();
                *(void *)&long long v172 = v99;
                p_uint64_t i = v90[2];
                unint64_t v100 = v90[3];
                sub_1000361E0(p_i, v100);
                uint64_t v101 = sub_100A948F8(p_i, v100);
                uint64_t v88 = v151;
                uint64_t v102 = sub_100A90C58(v101, 0);
                uint64_t v45 = v152;
                uint64_t v47 = v102;
                unint64_t v59 = v103;
                CCECCryptorRelease();
                sub_10001CFB8(p_i, v100);
                unint64_t v64 = v59 >> 62;
                id v30 = v163;
                switch(v59 >> 62)
                {
                  case 1uLL:
                    LODWORD(v104) = HIDWORD(v47) - v47;
                    if (__OFSUB__(HIDWORD(v47), v47)) {
                      goto LABEL_98;
                    }
                    uint64_t v104 = (int)v104;
LABEL_65:
                    uint64_t v158 = 0;
                    if (v104 != 28) {
                      goto LABEL_111;
                    }
                    sub_100435A9C(6, v47, v59, &i);
                    uint64_t v107 = i;
                    unint64_t v108 = v171;
                    sub_10001CEB0(&v172, (uint64_t)v149);
                    uint64_t v109 = (char *)v30 + *(int *)(v168 + 20);
                    uint64_t v47 = v166;
                    unint64_t v110 = v33 + *(int *)(v166 + 28);
                    uint64_t v111 = type metadata accessor for DateInterval();
                    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v111 - 8) + 16))(v110, v109, v111);
                    *(void *)unint64_t v33 = v107;
                    *(void *)(v33 + 8) = v108;
                    unint64_t v112 = v150;
                    *(void *)(v33 + 16) = v162;
                    *(void *)(v33 + 24) = v112;
                    sub_1006CCE04((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                    uint64_t v91 = 0;
                    uint64_t v48 = v164;
                    uint64_t v50 = (uint64_t)v160;
                    break;
                  case 2uLL:
                    uint64_t v106 = *(void *)(v47 + 16);
                    uint64_t v105 = *(void *)(v47 + 24);
                    BOOL v68 = __OFSUB__(v105, v106);
                    uint64_t v104 = v105 - v106;
                    if (!v68) {
                      goto LABEL_65;
                    }
                    goto LABEL_96;
                  case 3uLL:
                    uint64_t v143 = 0;
                    goto LABEL_146;
                  default:
                    uint64_t v104 = BYTE6(v59);
                    goto LABEL_65;
                }
                break;
              case 2uLL:
                uint64_t v98 = *(void *)(v162 + 16);
                uint64_t v97 = *(void *)(v162 + 24);
                BOOL v68 = __OFSUB__(v97, v98);
                uint64_t v96 = v97 - v98;
                if (!v68) {
                  goto LABEL_57;
                }
                goto LABEL_92;
              case 3uLL:
                p_uint64_t i = 0;
                goto LABEL_139;
              default:
                uint64_t v96 = BYTE6(v95);
                goto LABEL_57;
            }
          }
          (*v159)(v33, v91, 1, v47);
          sub_1006CCE04(v167, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          if ((*v157)(v33, 1, v47) == 1)
          {
            sub_10001DAB4(v33, &qword_10164B360);
          }
          else
          {
            Class v113 = v156;
            sub_1006CD470(v33, (uint64_t)v156, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
            sub_1006CD470((uint64_t)v113, (uint64_t)v161, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
            if (swift_isUniquelyReferenced_nonNull_native()) {
              unint64_t v114 = (unint64_t)v165;
            }
            else {
              unint64_t v114 = sub_100A6F4A0(0, v165[2] + 1, 1, (unint64_t)v165);
            }
            unint64_t v116 = *(void *)(v114 + 16);
            unint64_t v115 = *(void *)(v114 + 24);
            if (v116 >= v115 >> 1) {
              unint64_t v114 = sub_100A6F4A0(v115 > 1, v116 + 1, 1, v114);
            }
            *(void *)(v114 + 16) = v116 + 1;
            unint64_t v117 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
            Class v165 = (void *)v114;
            sub_1006CD470((uint64_t)v161, v114 + v117 + *(void *)(v48 + 72) * v116, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
          }
          v62 += v153;
          if (!--v88)
          {
            sub_1002F6A08(v147, v146, 1u);
            uint64_t v49 = v155;
            uint64_t v118 = v165;
            goto LABEL_82;
          }
        }
      }
      uint64_t v118 = _swiftEmptyArrayStorage;
LABEL_82:
      uint64_t v87 = v49;
      if (v118[2])
      {
        sub_1006CC8F8((uint64_t)v118 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80)), v49, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v87, 0, 1, v47);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v49, 1, 1, v47);
      }
      sub_1002F6A08(v147, v146, 1u);
      goto LABEL_88;
    case 2:
      uint64_t v86 = v172;
      uint64_t v87 = v155;
      if (*(void *)(v172 + 16))
      {
        sub_1006CC8F8(v172 + ((*(unsigned __int8 *)(v164 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80)), v155, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v87, 0, 1, v47);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v164 + 56))(v155, 1, 1, v166);
      }
      sub_1002F6A08(v86, v46, 2u);
      goto LABEL_89;
    case 3:
      swift_bridgeObjectRelease();
      goto LABEL_3;
    default:
      uint64_t v146 = *((void *)&v172 + 1);
      uint64_t v53 = *(void *)(v172 + 16);
      uint64_t v147 = v172;
      if (!v53)
      {
        unint64_t v33 = (unint64_t)_swiftEmptyArrayStorage;
        goto LABEL_79;
      }
      uint64_t v54 = v172 + ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
      uint64_t v149 = v30 + 4;
      id v161 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v164 + 56);
      uint64_t v156 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v164 + 48);
      uint64_t v153 = *(void *)(v153 + 72);
      swift_bridgeObjectRetain();
      unint64_t v33 = (unint64_t)_swiftEmptyArrayStorage;
      break;
  }
  do
  {
    unint64_t v167 = v33;
    sub_1006CC8F8(v54, v52, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    sub_1006CC8F8(v52, (uint64_t)v51, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v47 = (uint64_t)v51 + *(int *)(v168 + 24);
    unint64_t v33 = *(void *)(v47 + 8);
    if (v33 >> 60 != 15)
    {
      uint64_t v151 = v53;
      uint64_t v56 = *(void *)v47;
      sub_1000361E0(*(void *)v47, v33);
      p_uint64_t i = String.utf8Data.getter();
      unint64_t v59 = v58;
      sub_1000361E0(v56, v33);
      uint64_t v60 = v158;
      id v163 = (uint64_t *)sub_100A941DC(v56, v33, p_i, v59, 32);
      uint64_t v62 = v60;
      if (v60)
      {
        sub_10001CFB8(p_i, v59);
        sub_100037A24(v56, v33);
        goto LABEL_136;
      }
      unint64_t v63 = v61;
      sub_100037A24(v56, v33);
      unint64_t v64 = v63 >> 62;
      unint64_t v150 = v63;
      switch(v63 >> 62)
      {
        case 1uLL:
          LODWORD(v65) = HIDWORD(v163) - v163;
          if (__OFSUB__(HIDWORD(v163), v163)) {
            goto LABEL_93;
          }
          uint64_t v65 = (int)v65;
LABEL_24:
          if (v65 != 32) {
            goto LABEL_99;
          }
          sub_10001CFB8(p_i, v59);
          sub_100037A24(v56, v33);
          uint64_t v69 = *v165;
          uint64_t v174 = &type metadata for SecondaryIndex;
          unint64_t v175 = sub_1001A15EC();
          *(void *)&long long v172 = v69;
          uint64_t v70 = *(void *)(v47 + 16);
          unint64_t v59 = *(void *)(v47 + 24);
          sub_1000361E0(v70, v59);
          uint64_t v71 = sub_100A948F8(v70, v59);
          uint64_t v53 = v151;
          uint64_t v72 = sub_100A90C58(v71, 0);
          uint64_t v47 = v166;
          uint64_t v62 = v72;
          p_uint64_t i = v73;
          CCECCryptorRelease();
          sub_10001CFB8(v70, v59);
          unint64_t v64 = p_i >> 62;
          uint64_t v51 = v165;
          unint64_t v33 = v167;
          switch(p_i >> 62)
          {
            case 1uLL:
              LODWORD(v74) = HIDWORD(v62) - v62;
              if (__OFSUB__(HIDWORD(v62), v62)) {
                goto LABEL_97;
              }
              uint64_t v74 = (int)v74;
LABEL_32:
              uint64_t v158 = 0;
              if (v74 != 28) {
                goto LABEL_107;
              }
              sub_100435A9C(6, v62, p_i, &i);
              uint64_t v77 = i;
              unint64_t v78 = v171;
              sub_10001CEB0(&v172, (uint64_t)v149);
              unint64_t v79 = (char *)v51 + *(int *)(v168 + 20);
              uint64_t v80 = (char *)v30 + *(int *)(v47 + 28);
              uint64_t v81 = type metadata accessor for DateInterval();
              (*(void (**)(char *, char *, uint64_t))(*(void *)(v81 - 8) + 16))(v80, v79, v81);
              *id v30 = v77;
              v30[1] = v78;
              unint64_t v82 = v150;
              v30[2] = (uint64_t)v163;
              v30[3] = v82;
              sub_1006CCE04((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
              uint64_t v55 = 0;
              uint64_t v48 = v164;
              uint64_t v52 = (uint64_t)v159;
              break;
            case 2uLL:
              uint64_t v76 = *(void *)(v62 + 16);
              uint64_t v75 = *(void *)(v62 + 24);
              BOOL v68 = __OFSUB__(v75, v76);
              uint64_t v74 = v75 - v76;
              if (!v68) {
                goto LABEL_32;
              }
              goto LABEL_95;
            case 3uLL:
              unint64_t v59 = 0;
              goto LABEL_143;
            default:
              uint64_t v74 = BYTE6(p_i);
              goto LABEL_32;
          }
          goto LABEL_34;
        case 2uLL:
          uint64_t v67 = v163[2];
          uint64_t v66 = v163[3];
          BOOL v68 = __OFSUB__(v66, v67);
          uint64_t v65 = v66 - v67;
          if (!v68) {
            goto LABEL_24;
          }
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          if (v64 != 1) {
            goto LABEL_115;
          }
          LODWORD(v64) = HIDWORD(v163) - v163;
          if (!__OFSUB__(HIDWORD(v163), v163)) {
            goto LABEL_149;
          }
          __break(1u);
LABEL_103:
          if (v64 != 1) {
            goto LABEL_119;
          }
          LODWORD(v64) = HIDWORD(v162) - v162;
          if (!__OFSUB__(HIDWORD(v162), v162))
          {
            p_uint64_t i = (int)v64;
LABEL_139:
            sub_10013019C();
            unint64_t v59 = swift_allocError();
            *(void *)uint64_t v135 = 32;
            *(void *)(v135 + 8) = p_i;
            *(unsigned char *)(v135 + 16) = 0;
            swift_willThrow();
            sub_10001CFB8(v162, v150);
            sub_10001CFB8(v47, (unint64_t)v30);
            goto LABEL_140;
          }
          __break(1u);
LABEL_107:
          if (v64 != 1) {
            goto LABEL_123;
          }
          LODWORD(v64) = HIDWORD(v62) - v62;
          if (!__OFSUB__(HIDWORD(v62), v62))
          {
            unint64_t v59 = (int)v64;
LABEL_143:
            sub_10013019C();
            uint64_t v131 = swift_allocError();
            *(void *)uint64_t v138 = 28;
            *(void *)(v138 + 8) = v59;
            *(unsigned char *)(v138 + 16) = 0;
            swift_willThrow();
LABEL_144:
            uint64_t v139 = v62;
            unint64_t v140 = p_i;
LABEL_147:
            sub_10001CFB8(v139, v140);
            uint64_t i = 0;
            unint64_t v171 = 0xE000000000000000;
            p_uint64_t i = (unint64_t)&i;
            _StringGuts.grow(_:)(35);
            v142._object = (void *)0x80000001013F3B70;
            v142._countAndFlagsBits = 0xD000000000000021;
            String.append(_:)(v142);
            uint64_t v169 = v131;
            sub_10000588C(&qword_101638D40);
            _print_unlocked<A, B>(_:_:)();
            int v145 = 0;
            uint64_t v137 = 256;
            goto LABEL_148;
          }
          __break(1u);
LABEL_111:
          if (v64 != 1) {
            goto LABEL_127;
          }
          LODWORD(v64) = HIDWORD(v47) - v47;
          if (__OFSUB__(HIDWORD(v47), v47))
          {
            __break(1u);
LABEL_115:
            if (v64 != 2)
            {
              uint64_t v60 = BYTE6(v150);
              goto LABEL_135;
            }
            uint64_t v122 = v163[2];
            unint64_t v64 = v163[3];
            uint64_t v60 = v64 - v122;
            if (!__OFSUB__(v64, v122)) {
              goto LABEL_135;
            }
            __break(1u);
LABEL_119:
            if (v64 != 2)
            {
              p_uint64_t i = BYTE6(v150);
              goto LABEL_139;
            }
            uint64_t v123 = *(void *)(v162 + 16);
            unint64_t v64 = *(void *)(v162 + 24);
            p_uint64_t i = v64 - v123;
            if (!__OFSUB__(v64, v123)) {
              goto LABEL_139;
            }
            __break(1u);
LABEL_123:
            if (v64 != 2)
            {
              unint64_t v59 = BYTE6(p_i);
              goto LABEL_143;
            }
            uint64_t v124 = *(void *)(v62 + 16);
            unint64_t v64 = *(void *)(v62 + 24);
            unint64_t v59 = v64 - v124;
            if (!__OFSUB__(v64, v124)) {
              goto LABEL_143;
            }
            __break(1u);
LABEL_127:
            if (v64 == 2)
            {
              uint64_t v126 = *(void *)(v47 + 16);
              uint64_t v125 = *(void *)(v47 + 24);
              uint64_t v143 = v125 - v126;
              if (__OFSUB__(v125, v126))
              {
                __break(1u);
                static os_log_type_t.error.getter();
                if (qword_101636F48 != -1) {
                  swift_once();
                }
                sub_10000588C((uint64_t *)&unk_10163AD00);
                uint64_t v127 = swift_allocObject();
                *(_OWORD *)(v127 + 16) = xmmword_101342130;
                uint64_t i = v60;
                swift_errorRetain();
                sub_10000588C(&qword_101638D40);
                uint64_t v128 = String.init<A>(describing:)();
                uint64_t v130 = v129;
                *(void *)(v127 + 56) = &type metadata for String;
                *(void *)(v127 + 64) = sub_10000B4CC();
                *(void *)(v127 + 32) = v128;
                *(void *)(v127 + 40) = v130;
                os_log(_:dso:log:_:_:)();
                swift_bridgeObjectRelease();
                sub_100130148();
                uint64_t v131 = swift_allocError();
                *uint64_t v132 = 0;
                swift_willThrow();
                swift_errorRelease();
                p_uint64_t i = v59;
                uint64_t v62 = v33;
                goto LABEL_144;
              }
            }
            else
            {
              uint64_t v143 = BYTE6(v59);
            }
          }
          else
          {
            uint64_t v143 = (int)v64;
          }
LABEL_146:
          sub_10013019C();
          uint64_t v131 = swift_allocError();
          *(void *)uint64_t v141 = 28;
          *(void *)(v141 + 8) = v143;
          *(unsigned char *)(v141 + 16) = 0;
          swift_willThrow();
          uint64_t v139 = v47;
          unint64_t v140 = v59;
          goto LABEL_147;
        case 3uLL:
          uint64_t v60 = 0;
          goto LABEL_135;
        default:
          uint64_t v65 = BYTE6(v63);
          goto LABEL_24;
      }
    }
    sub_1006CCE04((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v55 = 1;
    uint64_t v47 = v166;
    unint64_t v33 = v167;
LABEL_34:
    (*v161)(v30, v55, 1, v47);
    sub_1006CCE04(v52, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    if ((*v156)(v30, 1, v47) == 1)
    {
      sub_10001DAB4((uint64_t)v30, &qword_10164B360);
    }
    else
    {
      uint64_t v83 = v157;
      sub_1006CD470((uint64_t)v30, (uint64_t)v157, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
      sub_1006CD470((uint64_t)v83, v162, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v33 = sub_100A6F4A0(0, *(void *)(v33 + 16) + 1, 1, v33);
      }
      unint64_t v85 = *(void *)(v33 + 16);
      unint64_t v84 = *(void *)(v33 + 24);
      if (v85 >= v84 >> 1) {
        unint64_t v33 = sub_100A6F4A0(v84 > 1, v85 + 1, 1, v33);
      }
      *(void *)(v33 + 16) = v85 + 1;
      sub_1006CD470(v162, v33+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v85, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
    }
    v54 += v153;
    --v53;
  }
  while (v53);
  swift_bridgeObjectRelease();
  uint64_t v49 = v155;
  uint64_t v50 = (uint64_t)v160;
LABEL_79:
  uint64_t v45 = v152;
  uint64_t v87 = v49;
  if (*(void *)(v33 + 16))
  {
    sub_1006CC8F8(v33 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80)), v49, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v87, 0, 1, v47);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v49, 1, 1, v47);
  }
  sub_1002F6A08(v147, v146, 0);
LABEL_88:
  swift_bridgeObjectRelease();
LABEL_89:
  sub_10001D074(v87, v50, &qword_10164B360);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v50, 1, v47) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10001DAB4(v50, &qword_10164B360);
    sub_10001DAB4(v87, &qword_10164B360);
LABEL_3:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v176);
    return _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v119 = v50;
    uint64_t v120 = v154;
    uint64_t v121 = sub_1006CD470(v119, v154, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
    __chkstk_darwin(v121);
    *(&v146 - 4) = v45;
    *(&v146 - 3) = (uint64_t)&v176;
    uint64_t v144 = v120;
    uint64_t v40 = sub_100F48FEC((void (*)(uint64_t *__return_ptr, uint64_t))sub_1006CA3B0, (uint64_t)(&v146 - 6), (uint64_t)v148);
    sub_10001DAB4(v87, &qword_10164B360);
    sub_1006CCE04(v120, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v176);
    swift_bridgeObjectRelease();
  }
  return v40;
}

uint64_t sub_1006767EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v155 = a1;
  Class v160 = a5;
  uint64_t v8 = _s18ConnectionKeyGroupVMa();
  unint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v156 = (uint64_t *)((char *)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v169 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))((char *)&v154 - v13);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v163 = (unint64_t)&v154 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v154 - v17;
  __chkstk_darwin(v16);
  unint64_t v164 = (unint64_t)&v154 - v19;
  uint64_t v177 = type metadata accessor for TimeBasedKey();
  uint64_t v167 = *(void *)(v177 - 8);
  uint64_t v20 = __chkstk_darwin(v177);
  unint64_t v175 = (uint64_t *)((char *)&v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))((char *)&v154 - v23);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v174 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))((char *)&v154 - v26);
  __chkstk_darwin(v25);
  unint64_t v28 = (unint64_t)&v154 - v27;
  uint64_t v29 = sub_10000588C(&qword_10164B360);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  uint64_t v158 = (char *)&v154 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  long long v172 = (uint64_t *)((char *)&v154 - v33);
  uint64_t v34 = __chkstk_darwin(v32);
  unint64_t v171 = (char *)&v154 - v35;
  __chkstk_darwin(v34);
  uint64_t v159 = (uint64_t)&v154 - v36;
  sub_10001D010(a3, (uint64_t)&v180);
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = a2;
  sub_10001CEB0(&v180, v37 + 24);
  *(void *)(v37 + 64) = a4;
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v157 = *((void *)&v180 + 1);
  uint64_t v173 = v8;
  unint64_t v170 = v9;
  switch(v181)
  {
    case 1:
      unint64_t v43 = *(void *)(v180 + 16);
      uint64_t v154 = v180;
      if (v43)
      {
        uint64_t v76 = v180 + ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80));
        id v161 = v171 + 32;
        uint64_t v168 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48);
        uint64_t v169 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        uint64_t v167 = *(void *)(v167 + 72);
        swift_bridgeObjectRetain();
        uint64_t v45 = _swiftEmptyArrayStorage;
        uint64_t v77 = (uint64_t)v174;
        unint64_t v163 = v28;
        uint64_t v162 = v18;
        while (1)
        {
          unint64_t v175 = (void *)v76;
          sub_1006CC8F8(v76, v28, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          sub_1006CC8F8(v28, v77, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          unint64_t v79 = (uint64_t *)(v77 + *(int *)(v177 + 24));
          unint64_t v46 = v79[1];
          if (v46 >> 60 == 15)
          {
            sub_1006CCE04(v77, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            uint64_t v80 = 1;
            uint64_t v8 = v173;
            uint64_t v81 = (uint64_t *)v171;
          }
          else
          {
            uint64_t v82 = *v79;
            sub_1000361E0(*v79, v79[1]);
            unint64_t v38 = String.utf8Data.getter();
            uint64_t v48 = v83;
            sub_1000361E0(v82, v46);
            uint64_t v84 = v176;
            long long v172 = (void *)sub_100A941DC(v82, v46, v38, (unint64_t)v48, 32);
            uint64_t v52 = v84;
            if (v84)
            {
              sub_10001CFB8(v38, (unint64_t)v48);
              uint64_t v140 = v82;
              unint64_t v141 = v46;
              goto LABEL_128;
            }
            unint64_t v28 = v85;
            sub_100037A24(v82, v46);
            unint64_t v53 = v28 >> 62;
            switch(v28 >> 62)
            {
              case 1uLL:
                LODWORD(v86) = HIDWORD(v172) - v172;
                if (__OFSUB__(HIDWORD(v172), v172)) {
                  goto LABEL_87;
                }
                uint64_t v86 = (int)v86;
LABEL_49:
                if (v86 != 32) {
                  goto LABEL_96;
                }
                sub_10001CFB8(v38, (unint64_t)v48);
                sub_100037A24(v82, v46);
                uint64_t v89 = *v174;
                uint64_t v182 = &type metadata for PrimaryIndex;
                unint64_t v183 = sub_1001A1640();
                *(void *)&long long v180 = v89;
                uint64_t v91 = v79[2];
                unint64_t v90 = v79[3];
                sub_1000361E0(v91, v90);
                uint64_t v92 = sub_100A948F8(v91, v90);
                uint64_t v48 = (uint64_t *)sub_100A90C58(v92, 0);
                unint64_t v38 = v93;
                CCECCryptorRelease();
                sub_10001CFB8(v91, v90);
                unint64_t v53 = v38 >> 62;
                uint64_t v94 = v173;
                unint64_t v46 = v170;
                uint64_t v166 = (void *)v28;
                switch(v38 >> 62)
                {
                  case 1uLL:
                    LODWORD(v95) = HIDWORD(v48) - v48;
                    if (__OFSUB__(HIDWORD(v48), v48)) {
                      goto LABEL_91;
                    }
                    uint64_t v95 = (int)v95;
LABEL_57:
                    uint64_t v176 = 0;
                    if (v95 != 28) {
                      goto LABEL_104;
                    }
                    unint64_t v98 = v170;
                    sub_100435A9C(6, (uint64_t)v48, v38, &v178);
                    unint64_t v99 = v179;
                    uint64_t v165 = v178;
                    sub_10001CEB0(&v180, (uint64_t)v161);
                    uint64_t v77 = (uint64_t)v174;
                    unint64_t v100 = (char *)v174 + *(int *)(v177 + 20);
                    uint64_t v8 = v94;
                    uint64_t v81 = (uint64_t *)v171;
                    uint64_t v101 = &v171[*(int *)(v94 + 28)];
                    uint64_t v102 = type metadata accessor for DateInterval();
                    (*(void (**)(char *, char *, uint64_t))(*(void *)(v102 - 8) + 16))(v101, v100, v102);
                    *uint64_t v81 = v165;
                    v81[1] = v99;
                    unint64_t v103 = v166;
                    v81[2] = (uint64_t)v172;
                    v81[3] = (uint64_t)v103;
                    sub_1006CCE04(v77, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                    uint64_t v80 = 0;
                    uint64_t v18 = v162;
                    unint64_t v9 = v98;
                    unint64_t v28 = v163;
                    break;
                  case 2uLL:
                    uint64_t v97 = v48[2];
                    uint64_t v96 = v48[3];
                    BOOL v57 = __OFSUB__(v96, v97);
                    uint64_t v95 = v96 - v97;
                    if (!v57) {
                      goto LABEL_57;
                    }
                    goto LABEL_89;
                  case 3uLL:
                    uint64_t v52 = 0;
                    goto LABEL_136;
                  default:
                    uint64_t v95 = BYTE6(v38);
                    goto LABEL_57;
                }
                break;
              case 2uLL:
                uint64_t v88 = v172[2];
                uint64_t v87 = v172[3];
                BOOL v57 = __OFSUB__(v87, v88);
                uint64_t v86 = v87 - v88;
                if (!v57) {
                  goto LABEL_49;
                }
                goto LABEL_85;
              case 3uLL:
                uint64_t v152 = 0;
                goto LABEL_130;
              default:
                uint64_t v86 = BYTE6(v28);
                goto LABEL_49;
            }
          }
          (*v169)(v81, v80, 1, v8);
          sub_1006CCE04(v28, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          if ((*v168)(v81, 1, v8) == 1)
          {
            sub_10001DAB4((uint64_t)v81, &qword_10164B360);
            unint64_t v78 = v175;
          }
          else
          {
            uint64_t v104 = v164;
            sub_1006CD470((uint64_t)v81, v164, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
            sub_1006CD470(v104, (uint64_t)v18, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v45 = (void *)sub_100A6F4A0(0, v45[2] + 1, 1, (unint64_t)v45);
            }
            unint64_t v78 = v175;
            unint64_t v106 = v45[2];
            unint64_t v105 = v45[3];
            if (v106 >= v105 >> 1) {
              uint64_t v45 = (void *)sub_100A6F4A0(v105 > 1, v106 + 1, 1, (unint64_t)v45);
            }
            _OWORD v45[2] = v106 + 1;
            sub_1006CD470((uint64_t)v18, (uint64_t)v45+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v106, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
            uint64_t v77 = (uint64_t)v174;
          }
          uint64_t v76 = (uint64_t)v78 + v167;
          if (!--v43)
          {
            uint64_t v107 = v157;
            sub_1002F6A08(v154, v157, 1u);
            goto LABEL_74;
          }
        }
      }
      uint64_t v45 = _swiftEmptyArrayStorage;
      uint64_t v107 = v157;
LABEL_74:
      unint64_t v108 = v160;
      uint64_t v75 = v159;
      uint64_t v109 = (uint64_t)v158;
      if (v45[2])
      {
        sub_1006CC8F8((uint64_t)v45 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v159, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v75, 0, 1, v8);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v159, 1, 1, v8);
      }
      uint64_t v111 = v154;
      uint64_t v112 = v107;
      unsigned __int8 v113 = 1;
      goto LABEL_80;
    case 2:
      if (*(void *)(v180 + 16))
      {
        uint64_t v74 = v180;
        uint64_t v75 = v159;
        sub_1006CC8F8(v180 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v159, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v75, 0, 1, v8);
      }
      else
      {
        uint64_t v75 = v159;
        uint64_t v74 = v180;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v159, 1, 1, v8);
      }
      sub_1002F6A08(v74, v157, 2u);
      goto LABEL_69;
    case 3:
      uint64_t v75 = v159;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v159, 1, 1, v8);
LABEL_69:
      unint64_t v108 = v160;
      uint64_t v109 = (uint64_t)v158;
      goto LABEL_81;
    default:
      unint64_t v38 = *(void *)(v180 + 16);
      uint64_t v154 = v180;
      if (!v38)
      {
        uint64_t v40 = _swiftEmptyArrayStorage;
        goto LABEL_71;
      }
      unint64_t v28 = v180 + ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80));
      long long v39 = v172;
      uint64_t v162 = (char *)(v172 + 4);
      uint64_t v174 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      unint64_t v171 = (char *)(v9 + 48);
      uint64_t v167 = *(void *)(v167 + 72);
      swift_bridgeObjectRetain();
      uint64_t v40 = _swiftEmptyArrayStorage;
      uint64_t v41 = (uint64_t)v175;
      uint64_t v168 = v24;
      break;
  }
  do
  {
    sub_1006CC8F8(v28, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    sub_1006CC8F8((uint64_t)v24, v41, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v42 = (uint64_t *)(v41 + *(int *)(v177 + 24));
    unint64_t v43 = v42[1];
    if (v43 >> 60 != 15)
    {
      unint64_t v164 = v28;
      uint64_t v165 = v38;
      uint64_t v166 = v40;
      uint64_t v45 = (void *)*v42;
      sub_1000361E0(*v42, v43);
      unint64_t v46 = String.utf8Data.getter();
      uint64_t v48 = v47;
      sub_1000361E0((uint64_t)v45, v43);
      uint64_t v49 = v176;
      uint64_t v50 = sub_100A941DC((uint64_t)v45, v43, v46, (unint64_t)v48, 32);
      uint64_t v52 = v49;
      if (!v49)
      {
        unint64_t v28 = v50;
        unint64_t v38 = v51;
        sub_100037A24((uint64_t)v45, v43);
        unint64_t v53 = v38 >> 62;
        switch(v38 >> 62)
        {
          case 1uLL:
            LODWORD(v54) = HIDWORD(v28) - v28;
            if (__OFSUB__(HIDWORD(v28), v28)) {
              goto LABEL_86;
            }
            uint64_t v54 = (int)v54;
LABEL_16:
            if (v54 != 32) {
              goto LABEL_92;
            }
            sub_10001CFB8(v46, (unint64_t)v48);
            sub_100037A24((uint64_t)v45, v43);
            uint64_t v58 = *v175;
            uint64_t v182 = &type metadata for PrimaryIndex;
            unint64_t v183 = sub_1001A1640();
            *(void *)&long long v180 = v58;
            unint64_t v43 = v42[2];
            uint64_t v45 = (void *)v42[3];
            sub_1000361E0(v43, (unint64_t)v45);
            uint64_t v59 = sub_100A948F8(v43, (unint64_t)v45);
            uint64_t v48 = (uint64_t *)sub_100A90C58(v59, 0);
            unint64_t v46 = v60;
            CCECCryptorRelease();
            sub_10001CFB8(v43, (unint64_t)v45);
            unint64_t v53 = v46 >> 62;
            switch(v46 >> 62)
            {
              case 1uLL:
                LODWORD(v61) = HIDWORD(v48) - v48;
                uint64_t v41 = (uint64_t)v175;
                if (__OFSUB__(HIDWORD(v48), v48)) {
                  goto LABEL_90;
                }
                uint64_t v61 = (int)v61;
LABEL_24:
                uint64_t v176 = 0;
                if (v61 != 28) {
                  goto LABEL_100;
                }
                sub_100435A9C(6, (uint64_t)v48, v46, &v178);
                uint64_t v64 = v178;
                unint64_t v65 = v179;
                sub_10001CEB0(&v180, (uint64_t)v162);
                uint64_t v66 = v41 + *(int *)(v177 + 20);
                long long v39 = v172;
                uint64_t v67 = v173;
                BOOL v68 = (char *)v172 + *(int *)(v173 + 28);
                uint64_t v69 = type metadata accessor for DateInterval();
                (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v69 - 8) + 16))(v68, v66, v69);
                *long long v39 = v64;
                v39[1] = v65;
                uint64_t v8 = v67;
                v39[2] = v28;
                v39[3] = v38;
                sub_1006CCE04(v41, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                uint64_t v44 = 0;
                unint64_t v38 = v165;
                uint64_t v40 = v166;
                unint64_t v28 = v164;
                break;
              case 2uLL:
                uint64_t v63 = v48[2];
                uint64_t v62 = v48[3];
                BOOL v57 = __OFSUB__(v62, v63);
                uint64_t v61 = v62 - v63;
                uint64_t v41 = (uint64_t)v175;
                if (!v57) {
                  goto LABEL_24;
                }
                goto LABEL_88;
              case 3uLL:
                unint64_t v153 = 0;
                goto LABEL_134;
              default:
                uint64_t v61 = BYTE6(v46);
                uint64_t v41 = (uint64_t)v175;
                goto LABEL_24;
            }
            goto LABEL_26;
          case 2uLL:
            uint64_t v56 = *(void *)(v28 + 16);
            uint64_t v55 = *(void *)(v28 + 24);
            BOOL v57 = __OFSUB__(v55, v56);
            uint64_t v54 = v55 - v56;
            if (!v57) {
              goto LABEL_16;
            }
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            if (v53 != 1) {
              goto LABEL_108;
            }
            LODWORD(v53) = HIDWORD(v28) - v28;
            if (!__OFSUB__(HIDWORD(v28), v28)) {
              goto LABEL_139;
            }
            __break(1u);
LABEL_96:
            if (v53 != 1) {
              goto LABEL_112;
            }
            LODWORD(v53) = HIDWORD(v172) - v172;
            if (!__OFSUB__(HIDWORD(v172), v172))
            {
              uint64_t v152 = (int)v53;
LABEL_130:
              sub_10013019C();
              uint64_t v52 = swift_allocError();
              *(void *)uint64_t v144 = 32;
              *(void *)(v144 + 8) = v152;
              *(unsigned char *)(v144 + 16) = 0;
              swift_willThrow();
              sub_10001CFB8((uint64_t)v172, v28);
              uint64_t v143 = v38;
              goto LABEL_131;
            }
            __break(1u);
LABEL_100:
            if (v53 != 1) {
              goto LABEL_116;
            }
            LODWORD(v53) = HIDWORD(v48) - v48;
            if (!__OFSUB__(HIDWORD(v48), v48))
            {
              unint64_t v153 = (int)v53;
LABEL_134:
              sub_10013019C();
              uint64_t v146 = swift_allocError();
              *(void *)uint64_t v147 = 28;
              *(void *)(v147 + 8) = v153;
              *(unsigned char *)(v147 + 16) = 0;
              swift_willThrow();
              uint64_t v148 = (uint64_t)v48;
              unint64_t v149 = v46;
LABEL_137:
              sub_10001CFB8(v148, v149);
              uint64_t v178 = 0;
              unint64_t v179 = 0xE000000000000000;
              uint64_t v48 = &v178;
              _StringGuts.grow(_:)(35);
              v151._object = (void *)0x80000001013F3B70;
              v151._countAndFlagsBits = 0xD000000000000021;
              String.append(_:)(v151);
              uint64_t v184 = v146;
              sub_10000588C(&qword_101638D40);
              _print_unlocked<A, B>(_:_:)();
              goto LABEL_138;
            }
            __break(1u);
LABEL_104:
            if (v53 != 1) {
              goto LABEL_120;
            }
            LODWORD(v53) = HIDWORD(v48) - v48;
            if (!__OFSUB__(HIDWORD(v48), v48))
            {
              uint64_t v52 = (int)v53;
LABEL_136:
              sub_10013019C();
              uint64_t v146 = swift_allocError();
              *(void *)uint64_t v150 = 28;
              *(void *)(v150 + 8) = v52;
              *(unsigned char *)(v150 + 16) = 0;
              swift_willThrow();
              uint64_t v148 = (uint64_t)v48;
              unint64_t v149 = v38;
              goto LABEL_137;
            }
            __break(1u);
LABEL_108:
            if (v53 != 2)
            {
              uint64_t v135 = BYTE6(v38);
              goto LABEL_126;
            }
            uint64_t v134 = *(void *)(v28 + 16);
            unint64_t v53 = *(void *)(v28 + 24);
            uint64_t v135 = v53 - v134;
            if (!__OFSUB__(v53, v134)) {
              goto LABEL_126;
            }
            __break(1u);
LABEL_112:
            if (v53 != 2)
            {
              uint64_t v152 = BYTE6(v28);
              goto LABEL_130;
            }
            uint64_t v136 = v172[2];
            unint64_t v53 = v172[3];
            uint64_t v152 = v53 - v136;
            if (!__OFSUB__(v53, v136)) {
              goto LABEL_130;
            }
            __break(1u);
LABEL_116:
            if (v53 != 2)
            {
              unint64_t v153 = BYTE6(v46);
              goto LABEL_134;
            }
            uint64_t v137 = v48[2];
            unint64_t v53 = v48[3];
            unint64_t v153 = v53 - v137;
            if (!__OFSUB__(v53, v137)) {
              goto LABEL_134;
            }
            __break(1u);
LABEL_120:
            if (v53 != 2)
            {
              uint64_t v52 = BYTE6(v38);
              goto LABEL_136;
            }
            uint64_t v139 = v48[2];
            uint64_t v138 = v48[3];
            uint64_t v52 = v138 - v139;
            if (!__OFSUB__(v138, v139)) {
              goto LABEL_136;
            }
            __break(1u);
            break;
          case 3uLL:
            uint64_t v135 = 0;
            goto LABEL_126;
          default:
            uint64_t v54 = BYTE6(v38);
            goto LABEL_16;
        }
      }
      sub_10001CFB8(v46, (unint64_t)v48);
      uint64_t v140 = (uint64_t)v45;
      unint64_t v141 = v43;
LABEL_128:
      sub_100037A24(v140, v141);
      while (1)
      {
        *(void *)&long long v180 = 0;
        *((void *)&v180 + 1) = 0xE000000000000000;
        uint64_t v48 = (uint64_t *)&v180;
        _StringGuts.grow(_:)(35);
        v145._object = (void *)0x80000001013FB8E0;
        v145._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v145);
        uint64_t v178 = v52;
        sub_10000588C(&qword_101638D40);
        _print_unlocked<A, B>(_:_:)();
LABEL_138:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_139:
        uint64_t v135 = (int)v53;
LABEL_126:
        sub_10013019C();
        uint64_t v52 = swift_allocError();
        *(void *)uint64_t v142 = 32;
        *(void *)(v142 + 8) = v135;
        *(unsigned char *)(v142 + 16) = 0;
        swift_willThrow();
        sub_10001CFB8(v28, v38);
        uint64_t v143 = v46;
LABEL_131:
        sub_10001CFB8(v143, (unint64_t)v48);
      }
    }
    sub_1006CCE04(v41, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v44 = 1;
LABEL_26:
    (*v174)(v39, v44, 1, v8);
    uint64_t v24 = v168;
    sub_1006CCE04((uint64_t)v168, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))v171)(v39, 1, v8) == 1)
    {
      sub_10001DAB4((uint64_t)v39, &qword_10164B360);
    }
    else
    {
      uint64_t v70 = (uint64_t)v39;
      uint64_t v71 = v163;
      sub_1006CD470(v70, v163, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
      sub_1006CD470(v71, (uint64_t)v169, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v40 = (void *)sub_100A6F4A0(0, v40[2] + 1, 1, (unint64_t)v40);
      }
      unint64_t v73 = v40[2];
      unint64_t v72 = v40[3];
      if (v73 >= v72 >> 1) {
        uint64_t v40 = (void *)sub_100A6F4A0(v72 > 1, v73 + 1, 1, (unint64_t)v40);
      }
      _OWORD v40[2] = v73 + 1;
      sub_1006CD470((uint64_t)v169, (uint64_t)v40+ ((*(unsigned __int8 *)(v170 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80))+ *(void *)(v170 + 72) * v73, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
      long long v39 = v172;
    }
    v28 += v167;
    --v38;
  }
  while (v38);
  swift_bridgeObjectRelease();
  unint64_t v9 = v170;
LABEL_71:
  unint64_t v108 = v160;
  uint64_t v75 = v159;
  uint64_t v109 = (uint64_t)v158;
  uint64_t v110 = v157;
  if (v40[2])
  {
    sub_1006CC8F8((uint64_t)v40 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v159, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v75, 0, 1, v8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v159, 1, 1, v8);
  }
  uint64_t v111 = v154;
  uint64_t v112 = v110;
  unsigned __int8 v113 = 0;
LABEL_80:
  sub_1002F6A08(v111, v112, v113);
  swift_bridgeObjectRelease();
LABEL_81:
  sub_10001D074(v75, v109, &qword_10164B360);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v109, 1, v8) == 1)
  {
    sub_10001DAB4(v75, &qword_10164B360);
    uint64_t result = sub_10001DAB4(v109, &qword_10164B360);
    id v115 = 0;
  }
  else
  {
    unint64_t v116 = v156;
    sub_1006CD470(v109, (uint64_t)v156, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
    uint64_t v117 = *v116;
    unint64_t v118 = v116[1];
    id v119 = objc_allocWithZone((Class)SPBeaconingKey);
    sub_1000361E0(v117, v118);
    Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
    Class v121 = Data._bridgeToObjectiveC()().super.isa;
    id v122 = [v119 initWithDateInterval:isa key:v121];

    sub_10001CFB8(v117, v118);
    uint64_t v123 = v155;
    sub_10001CD44((void *)(v155 + 32), *(void *)(v155 + 56));
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v124 = v180;
    uint64_t v125 = *(void *)(v123 + 16);
    unint64_t v126 = *(void *)(v123 + 24);
    id v127 = objc_allocWithZone((Class)NSNumber);
    sub_1000361E0(v125, v126);
    id v128 = [v127 initWithUnsignedLongLong:v124];
    id v129 = objc_allocWithZone((Class)SPCommandKey);
    Class v130 = Data._bridgeToObjectiveC()().super.isa;
    Class v131 = Data._bridgeToObjectiveC()().super.isa;
    Class v132 = Data._bridgeToObjectiveC()().super.isa;
    id v115 = [v129 initWithBeaconingKey:v122 commandKey:v130 connectionToken:v131 nearbyToken:v132 primaryIndex:v128 secondaryIndex:0 type:0];

    unint64_t v133 = v126;
    unint64_t v108 = v160;
    sub_10001CFB8(v125, v133);

    sub_1006CCE04((uint64_t)v116, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
    uint64_t result = sub_10001DAB4(v159, &qword_10164B360);
  }
  *unint64_t v108 = v115;
  return result;
}

uint64_t sub_100678038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return _swift_task_switch(sub_10067805C, 0, 0);
}

uint64_t sub_10067805C()
{
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  v0[7] = v0[2];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100678168;
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  return sub_1006D8A68(v3, v2, v2, 0, 0, 0);
}

uint64_t sub_100678168(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v4;
  *(void *)(*v4 + 72) = v3;
  swift_task_dealloc();
  if (v3)
  {
    unint64_t v9 = sub_1006CD6D4;
  }
  else
  {
    swift_release();
    *(unsigned char *)(v8 + 96) = a3;
    *(void *)(v8 + 80) = a2;
    *(void *)(v8 + 88) = a1;
    unint64_t v9 = sub_1006CD6D8;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_1006782AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return _swift_task_switch(sub_1006782D0, 0, 0);
}

uint64_t sub_1006782D0()
{
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  v0[7] = v0[2];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[8] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100678168;
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  return sub_1006D8A68(v3, v2, v2, 1, 0, 0);
}

uint64_t sub_1006783DC@<X0>(void *a1@<X0>, void *a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v33 = a4;
  uint64_t v7 = type metadata accessor for DateInterval();
  uint64_t v31 = *(void *)(v7 - 8);
  uint64_t v32 = v7;
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1 + 4, a1[7]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v10 = v34;
  if (v34) {
    uint64_t v11 = v34 / 0x60 + 1;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v30 = v9;
  sub_100AA81F8(a2, v11, 1, (uint64_t)v9);
  uint64_t v12 = *a3;
  unint64_t v13 = a3[1];
  id v14 = objc_allocWithZone((Class)SPBeaconingKey);
  sub_1000361E0(v12, v13);
  Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  Class v16 = Data._bridgeToObjectiveC()().super.isa;
  id v17 = [v14 initWithDateInterval:isa key:v16];

  sub_10001CFB8(v12, v13);
  uint64_t v19 = a1[2];
  unint64_t v18 = a1[3];
  id v20 = objc_allocWithZone((Class)NSNumber);
  sub_1000361E0(v19, v18);
  id v21 = [v20 initWithUnsignedLongLong:v10];
  id v22 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:v11];
  id v23 = objc_allocWithZone((Class)SPCommandKey);
  Class v24 = Data._bridgeToObjectiveC()().super.isa;
  Class v25 = Data._bridgeToObjectiveC()().super.isa;
  Class v26 = Data._bridgeToObjectiveC()().super.isa;
  id v27 = [v23 initWithBeaconingKey:v17 commandKey:v24 connectionToken:v25 nearbyToken:v26 primaryIndex:v21 secondaryIndex:v22 type:1];

  sub_10001CFB8(v19, v18);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v30, v32);
  *uint64_t v33 = v27;
  return result;
}

uint64_t sub_10067867C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = a2;
  uint64_t v46 = a3;
  uint64_t v47 = a4;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v53 = v5;
  __chkstk_darwin(v5);
  unint64_t v51 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v49 = *(void *)(v7 - 8);
  uint64_t v50 = v7;
  __chkstk_darwin(v7);
  uint64_t v48 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v41 = v10;
  uint64_t v42 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TimeBasedKeysCriteria();
  uint64_t v38 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v38 + 64);
  __chkstk_darwin(v11 - 8);
  uint64_t v39 = (uint64_t)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101347BA0;
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v17 = sub_10000B4CC();
  *(void *)(v13 + 64) = v17;
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  uint64_t v18 = v44;
  uint64_t v19 = TimeBasedKeysCriteria.description.getter();
  *(void *)(v13 + 96) = &type metadata for String;
  *(void *)(v13 + 104) = v17;
  *(void *)(v13 + 72) = v19;
  *(void *)(v13 + 80) = v20;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v40 = *(void *)(v43 + 136);
  uint64_t v37 = swift_allocObject();
  swift_weakInit();
  uint64_t v21 = v39;
  sub_1006CC8F8(v18, v39, (uint64_t (*)(void))type metadata accessor for TimeBasedKeysCriteria);
  id v22 = v42;
  uint64_t v23 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v42, a1, v45);
  unint64_t v24 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  unint64_t v25 = (v12 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (*(unsigned __int8 *)(v9 + 80) + v25 + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v27 = (v41 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = swift_allocObject();
  sub_1006CD470(v21, v28 + v24, (uint64_t (*)(void))type metadata accessor for TimeBasedKeysCriteria);
  *(void *)(v28 + v25) = v37;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v28 + v26, v22, v23);
  uint64_t v29 = (void *)(v28 + v27);
  uint64_t v30 = v47;
  *uint64_t v29 = v46;
  v29[1] = v30;
  aBlock[4] = sub_1006CA0B8;
  aBlock[5] = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CFB08;
  uint64_t v31 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  uint64_t v32 = v48;
  static DispatchQoS.unspecified.getter();
  uint64_t v54 = _swiftEmptyArrayStorage;
  sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v33 = v51;
  uint64_t v34 = v53;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v33, v34);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v50);
  swift_release();
  return swift_release();
}

uint64_t sub_100678C48(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  v42[1] = a5;
  uint64_t v43 = a4;
  uint64_t v7 = type metadata accessor for Date();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DateInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v42 - v15;
  uint64_t v17 = type metadata accessor for TimeBasedKeysCriteria();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1006CC8F8(a1, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for TimeBasedKeysCriteria);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v21 = *(void *)v19;
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        id v22 = sub_1006747BC(a3, v21);
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
      goto LABEL_19;
    case 2u:
      uint64_t v23 = *(void *)v19;
      char v24 = v19[8];
      swift_beginAccess();
      if (!swift_weakLoadStrong()) {
        goto LABEL_19;
      }
      id v22 = sub_100674D00(a3, 1, v23, v24);
      goto LABEL_10;
    case 3u:
      char v25 = *v19;
      uint64_t v26 = *((void *)v19 + 1);
      char v27 = v19[16];
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        id v22 = sub_100674D00(a3, v25, v26, v27);
LABEL_10:
        swift_release();
LABEL_11:
        v43(v22);
        return swift_bridgeObjectRelease();
      }
      else
      {
LABEL_19:
        static os_log_type_t.error.getter();
        if (qword_101637278 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v34 = swift_allocObject();
        *(_OWORD *)(v34 + 16) = xmmword_101342130;
        uint64_t v35 = UUID.uuidString.getter();
        uint64_t v37 = v36;
        *(void *)(v34 + 56) = &type metadata for String;
        *(void *)(v34 + 64) = sub_10000B4CC();
        *(void *)(v34 + 32) = v35;
        *(void *)(v34 + 40) = v37;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        return ((uint64_t (*)(void *))v43)(_swiftEmptyArrayStorage);
      }
    case 4u:
      static Date.trustedNow.getter((uint64_t)v9);
      DateInterval.init(start:duration:)();
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        unint64_t v29 = sub_100671100(a3, (uint64_t)v16);
        swift_release();
        v43((void *)v29);
        swift_bridgeObjectRelease();
      }
      else
      {
        static os_log_type_t.error.getter();
        if (qword_101637278 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v38 = swift_allocObject();
        *(_OWORD *)(v38 + 16) = xmmword_101342130;
        uint64_t v39 = UUID.uuidString.getter();
        uint64_t v41 = v40;
        *(void *)(v38 + 56) = &type metadata for String;
        *(void *)(v38 + 64) = sub_10000B4CC();
        *(void *)(v38 + 32) = v39;
        *(void *)(v38 + 40) = v41;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v43(_swiftEmptyArrayStorage);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    default:
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v19, v10);
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        unint64_t v20 = sub_100671100(a3, (uint64_t)v14);
        swift_release();
        v43((void *)v20);
        swift_bridgeObjectRelease();
      }
      else
      {
        static os_log_type_t.error.getter();
        if (qword_101637278 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v30 = swift_allocObject();
        *(_OWORD *)(v30 + 16) = xmmword_101342130;
        uint64_t v31 = UUID.uuidString.getter();
        uint64_t v33 = v32;
        *(void *)(v30 + 56) = &type metadata for String;
        *(void *)(v30 + 64) = sub_10000B4CC();
        *(void *)(v30 + 32) = v31;
        *(void *)(v30 + 40) = v33;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v43(_swiftEmptyArrayStorage);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
}

unint64_t sub_1006792CC(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163BB70);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v148 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v148 - v6;
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v8);
  uint64_t v168 = (uint64_t)&v148 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(char **)(v10 - 8);
  uint64_t v185 = v10;
  uint64_t v186 = v11;
  uint64_t v12 = __chkstk_darwin(v10);
  long long v172 = (char *)&v148 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v175 = (char *)&v148 - v14;
  uint64_t v15 = sub_10000588C(&qword_101638CF0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v148 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v158 = (char *)&v148 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v165 = (char *)&v148 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v187 = (uint64_t)&v148 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (long long *)((char *)&v148 - v25);
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v148 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_1004D1434();
  sub_10115B15C(v31, (uint64_t)v26);
  swift_bridgeObjectRelease();
  uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  uint64_t v174 = v28 + 48;
  uint64_t v173 = v32;
  if (v32((char *)v26, 1, v27) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v33 = &qword_101638CF0;
    uint64_t v34 = v26;
LABEL_62:
    sub_10001DAB4((uint64_t)v34, v33);
    if (qword_101636CF8 != -1) {
      swift_once();
    }
    uint64_t v143 = type metadata accessor for Logger();
    sub_100010324(v143, (uint64_t)qword_10170E3C8);
    uint64_t v144 = Logger.logObject.getter();
    os_log_type_t v145 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v144, v145))
    {
      uint64_t v146 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v146 = 0;
      _os_log_impl((void *)&_mh_execute_header, v144, v145, "Missing member record to compute group taskInfos!", v146, 2u);
      swift_slowDealloc();
    }

    return sub_10092E7D8((uint64_t)_swiftEmptyArrayStorage);
  }
  (*(void (**)(char *, long long *, uint64_t))(v28 + 32))(v30, v26, v27);
  uint64_t v156 = *((void *)v176 + 35);
  sub_100ACCD98((uint64_t)v30, (uint64_t)&v191);
  if (!v192)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    swift_bridgeObjectRelease();
    uint64_t v33 = (uint64_t *)&unk_10163BBE0;
    uint64_t v34 = &v191;
    goto LABEL_62;
  }
  uint64_t v154 = v30;
  uint64_t v155 = v28;
  sub_10001CEB0(&v191, (uint64_t)&v193);
  uint64_t v35 = v194;
  uint64_t v36 = v195;
  uint64_t v37 = sub_10001CD44(&v193, v194);
  uint64_t v38 = sub_1006AB098((uint64_t)v37, v176, v35, v36);
  uint64_t v40 = v38[2];
  unint64_t v153 = v38;
  if (v40)
  {
    Swift::String v151 = v7;
    unint64_t v149 = v5;
    uint64_t v177 = 0;
    uint64_t v41 = (void **)(v38 + 4);
    char v181 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v155 + 56);
    long long v180 = (void (**)(char *, uint64_t))(v186 + 8);
    unint64_t v170 = (void (**)(char *, char *, uint64_t))(v186 + 32);
    id v161 = &v189;
    unint64_t v164 = (void (**)(char *, uint64_t))(v155 + 8);
    uint64_t v42 = _swiftEmptyDictionarySingleton;
    uint64_t v169 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager;
    uint64_t v171 = SPBeaconTaskNamePlaySound;
    uint64_t v157 = SPBeaconTaskNameStopSound;
    uint64_t v152 = SPBeaconTaskNameEnableLostMode;
    uint64_t v150 = SPBeaconTaskNameDisableLostMode;
    uint64_t v148 = SPBeaconTaskNameEnableNotifyWhenFound;
    *(void *)&long long v39 = 141558531;
    long long v160 = v39;
    uint64_t v159 = (char *)&type metadata for Any + 8;
    uint64_t v163 = v8;
    uint64_t v43 = v175;
    uint64_t v179 = v27;
    uint64_t v44 = (uint64_t)v165;
    uint64_t v45 = v187;
    uint64_t v162 = a1;
    uint64_t v167 = v18;
    while (1)
    {
      uint64_t v182 = v42;
      unint64_t v183 = v41;
      uint64_t v184 = v40;
      unint64_t v51 = *v41;
      *(void *)&long long v191 = 2;
      uint64_t v52 = v51;
      Date.init()();
      uint64_t v178 = *v181;
      v178(v45, 1, 1, v27);
      uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v55 = v54;
      uint64_t v186 = v52;
      if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v55 == v56)
      {
        uint64_t v59 = swift_bridgeObjectRelease_n();
LABEL_17:
        __chkstk_darwin(v59);
        *(&v148 - 2) = v65;
        *(&v148 - 1) = v66;
        sub_10001D4B0(0, &qword_101653D80);
        uint64_t v67 = v177;
        OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v177 = v67;
        id v68 = v190;
        if (qword_101636CF8 != -1) {
          swift_once();
        }
        uint64_t v69 = type metadata accessor for Logger();
        sub_100010324(v69, (uint64_t)qword_10170E3C8);
        uint64_t v70 = v168;
        sub_1006CC8F8(a1, v168, type metadata accessor for OwnedBeaconGroup);
        id v71 = v68;
        unint64_t v72 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v72, v73))
        {
          uint64_t v74 = swift_slowAlloc();
          uint64_t v166 = (void *)swift_slowAlloc();
          id v190 = v166;
          *(_DWORD *)uint64_t v74 = v160;
          uint64_t v188 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v74 + 12) = 2081;
          sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v188 = sub_1008FA0F0(v75, v76, (uint64_t *)&v190);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1006CCE04(v70, type metadata accessor for OwnedBeaconGroup);
          *(_WORD *)(v74 + 22) = 2080;
          id v77 = [v71 debugDescription:v148];
          uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v80 = v79;

          a1 = v162;
          uint64_t v81 = v78;
          uint64_t v8 = v163;
          uint64_t v188 = sub_1008FA0F0(v81, v80, (uint64_t *)&v190);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          uint64_t v44 = (uint64_t)v165;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "Play taskInfo for group %{private,mask.hash}s: %s", (uint8_t *)v74, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1006CCE04(v70, type metadata accessor for OwnedBeaconGroup);
        }
        uint64_t v82 = v178;
        *(void *)&long long v191 = [v71 state:v148];
        id v83 = [v71 lastUpdated];
        uint64_t v84 = v172;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v43 = v175;
        uint64_t v85 = v185;
        (*v180)(v175, v185);
        (*v170)(v43, v84, v85);
        id v86 = [v71 error];
        id v87 = [v71 commandIdentifier];
        if (v87)
        {
          uint64_t v88 = v87;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v89 = 0;
        }
        else
        {
          uint64_t v89 = 1;
        }
        uint64_t v90 = v179;

        v82(v44, v89, 1, v90);
        sub_100062604(v44, v187, &qword_101638CF0);
        uint64_t v18 = v167;
        goto LABEL_32;
      }
      char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v59 = swift_bridgeObjectRelease();
      if (v58) {
        goto LABEL_17;
      }
      uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v62 = v61;
      if (v60 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v62 == v63)
      {
        uint64_t v64 = swift_bridgeObjectRelease_n();
LABEL_27:
        __chkstk_darwin(v64);
        *(&v148 - 2) = v92;
        *(&v148 - 1) = v93;
        sub_10001D4B0(0, &qword_101653D80);
        uint64_t v94 = v43;
        uint64_t v95 = v177;
        OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v177 = v95;
        id v96 = v190;
        *(void *)&long long v191 = [v190 state];
        id v97 = [v96 lastUpdated];
        unint64_t v98 = v172;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v99 = v185;
        (*v180)(v94, v185);
        (*v170)(v94, v98, v99);
        id v86 = [v96 error];
        id v100 = [v96 commandIdentifier];
        if (v100)
        {
          id v101 = v100;
          uint64_t v102 = (uint64_t)v158;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v103 = 0;
          id v96 = v101;
        }
        else
        {
          uint64_t v103 = 1;
          uint64_t v102 = (uint64_t)v158;
        }
        uint64_t v104 = v179;
        unint64_t v105 = v178;

        v105(v102, v103, 1, v104);
        sub_100062604(v102, v187, &qword_101638CF0);
        goto LABEL_31;
      }
      char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v64 = swift_bridgeObjectRelease();
      if (v91) {
        goto LABEL_27;
      }
      uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v113 = v112;
      if (v111 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v113 == v114) {
        break;
      }
      char v115 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v115) {
        goto LABEL_41;
      }
      uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v125 = v124;
      if (v123 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v125 == v126)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v127 & 1) == 0)
        {
          uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v137 = v136;
          if (v135 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v137 == v138)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_59;
          }
          char v139 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v139)
          {
LABEL_59:
            uint64_t v140 = sub_1004D1434();
            unint64_t v141 = v176;
            swift_retain();
            uint64_t v142 = v177;
            sub_1006AD048(v140, (uint64_t)v141, v45, &v191);
            uint64_t v177 = v142;
            uint64_t v43 = v175;
            swift_bridgeObjectRelease();
            swift_release();
          }
          id v86 = 0;
          goto LABEL_32;
        }
      }
      id v128 = sub_100B6D358(a1 + *(int *)(v8 + 24));
      uint64_t v129 = v128[2];
      uint64_t v130 = type metadata accessor for LostModeRecord();
      uint64_t v131 = *(void *)(v130 - 8);
      if (v129)
      {
        uint64_t v132 = (uint64_t)v149;
        sub_1006CC8F8((uint64_t)v128+ ((*(unsigned __int8 *)(*(void *)(v130 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v130 - 8) + 80)), (uint64_t)v149, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
        uint64_t v133 = 0;
      }
      else
      {
        uint64_t v133 = 1;
        uint64_t v132 = (uint64_t)v149;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56))(v132, v133, 1, v130);
      swift_bridgeObjectRelease();
      int v134 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v131 + 48))(v132, 1, v130);
      sub_10001DAB4(v132, &qword_10163BB70);
      uint64_t v8 = v163;
      if (v134 == 1)
      {
LABEL_54:
        id v86 = 0;
        *(void *)&long long v191 = 0;
        goto LABEL_31;
      }
LABEL_45:
      id v86 = 0;
      *(void *)&long long v191 = 2;
LABEL_31:
      uint64_t v43 = v175;
LABEL_32:
      uint64_t v106 = v191;
      uint64_t v107 = v186;
      swift_errorRetain();
      v108.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
      if (v86)
      {
        uint64_t v109 = (void *)_convertErrorToNSError(_:)();
        swift_errorRelease();
      }
      else
      {
        uint64_t v109 = 0;
      }
      id v110 = [objc_allocWithZone((Class)SPBeaconTaskInformation) initWithName:v107 lastUpdated:v108.super.isa error:v109 state:v106];

      sub_10001D074(v187, (uint64_t)v18, &qword_101638CF0);
      uint64_t v27 = v179;
      if (v173(v18, 1, v179) == 1)
      {
        v46.super.Class isa = 0;
      }
      else
      {
        v46.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
        (*v164)(v18, v27);
      }
      [v110 setCommandIdentifier:v46.super.isa v148];

      uint64_t v47 = v107;
      id v48 = v110;
      uint64_t v49 = v182;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id v190 = v49;
      sub_10016E960((uint64_t)v48, v47, isUniquelyReferenced_nonNull_native);
      uint64_t v42 = v190;

      swift_bridgeObjectRelease();
      swift_errorRelease();
      (*v180)(v43, v185);
      uint64_t v45 = v187;
      sub_10001DAB4(v187, &qword_101638CF0);
      uint64_t v41 = v183 + 1;
      uint64_t v40 = v184 - 1;
      if (v184 == 1) {
        goto LABEL_68;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_41:
    unint64_t v116 = sub_100B6D358(a1 + *(int *)(v8 + 24));
    uint64_t v117 = v116[2];
    uint64_t v118 = type metadata accessor for LostModeRecord();
    uint64_t v119 = *(void *)(v118 - 8);
    if (v117)
    {
      uint64_t v120 = (uint64_t)v151;
      sub_1006CC8F8((uint64_t)v116+ ((*(unsigned __int8 *)(*(void *)(v118 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v118 - 8) + 80)), (uint64_t)v151, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
      uint64_t v121 = 0;
    }
    else
    {
      uint64_t v121 = 1;
      uint64_t v120 = (uint64_t)v151;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v119 + 56))(v120, v121, 1, v118);
    swift_bridgeObjectRelease();
    int v122 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v120, 1, v118);
    sub_10001DAB4(v120, &qword_10163BB70);
    uint64_t v8 = v163;
    if (v122 != 1) {
      goto LABEL_54;
    }
    goto LABEL_45;
  }
  uint64_t v42 = _swiftEmptyDictionarySingleton;
LABEL_68:
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v193);
  (*(void (**)(char *, uint64_t))(v155 + 8))(v154, v27);
  return (unint64_t)v42;
}

uint64_t sub_10067A688(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  v46[1] = a7;
  uint64_t v50 = a6;
  uint64_t v51 = a4;
  id v48 = a5;
  uint64_t v52 = a3;
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v47 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v49 = (uint64_t)v46 - v12;
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  v46[0] = (char *)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v46 - v20;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v53 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = a2[3];
  uint64_t v26 = a2[4];
  sub_10001CD44(a2, v25);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v26 + 8) + 8) + 32))(v25);
  uint64_t v27 = a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier;
  swift_beginAccess();
  if (!*(void *)(*(void *)v27 + 16)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  sub_1007240CC((uint64_t)v24);
  if ((v28 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    uint64_t v29 = v53;
    uint64_t v30 = v22;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v24, v22);
    *uint64_t v52 = 2;
    goto LABEL_8;
  }
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v29 = v53;
  uint64_t v30 = v22;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v24, v22);
  sub_10001D4B0(0, &qword_101653D80);
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  id v31 = v54;
  id v32 = [v54 state];
  *uint64_t v52 = v32;
  if (!v31)
  {
LABEL_8:
    char v38 = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
    id v31 = 0;
    uint64_t v37 = v51;
    goto LABEL_9;
  }
  id v33 = [v31 lastUpdated];
  uint64_t v34 = v46[0];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
  v35(v15, v34, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  int v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  uint64_t v37 = v51;
  if (v36 == 1)
  {
    char v38 = 0;
    uint64_t v29 = v53;
LABEL_9:
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v21, v37, v16);
    sub_10001DAB4((uint64_t)v15, (uint64_t *)&unk_10163AC90);
    goto LABEL_10;
  }
  v35(v21, (uint64_t)v15, v16);
  char v38 = 0;
  uint64_t v29 = v53;
LABEL_10:
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 40))(v37, v21, v16);
  if (v38)
  {
    void *v48 = 0;
    swift_errorRelease();
    swift_release();
    uint64_t v39 = v49;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v49, 1, 1, v30);
  }
  else
  {
    id v40 = [v31 error];
    void *v48 = v40;
    swift_errorRelease();
    id v41 = [v31 commandIdentifier];
    if (v41)
    {
      uint64_t v42 = v41;
      uint64_t v43 = (uint64_t)v47;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v44 = 0;
    }
    else
    {
      uint64_t v44 = 1;
      uint64_t v43 = (uint64_t)v47;
    }

    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v43, v44, 1, v30);
    uint64_t v39 = v49;
    sub_10001D608(v43, v49, &qword_101638CF0);
  }
  return sub_100062604(v39, v50, &qword_101638CF0);
}

uint64_t sub_10067AC5C(uint64_t a1, uint64_t a2)
{
  static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101347BA0;
  sub_10000588C(&qword_101642888);
  uint64_t v5 = String.init<A>(describing:)();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v8 = sub_10000B4CC();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  *(void *)(v4 + 96) = &type metadata for String;
  *(void *)(v4 + 104) = v8;
  *(void *)(v4 + 64) = v8;
  *(void *)(v4 + 72) = 0xD000000000000017;
  *(void *)(v4 + 80) = 0x8000000101403680;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_10164B280);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  uint64_t v10 = (void *)SPBeaconTypeDurian;
  *(void *)(inited + 32) = SPBeaconTypeDurian;
  id v11 = v10;
  uint64_t v12 = sub_100DF2E7C(inited);
  swift_setDeallocating();
  type metadata accessor for SPBeaconType(0);
  swift_arrayDestroy();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  swift_retain();
  sub_10066B230((uint64_t)v12, 0, 0, (uint64_t)sub_1006C57B8, v13);
  swift_bridgeObjectRelease();
  return swift_release();
}

Swift::Int sub_10067AE84(uint64_t a1, void (*a2)(void *))
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_10001D4B0(0, (unint64_t *)&unk_10164DC30);
      do
      {
        swift_dynamicCast();
        id v4 = [v17 role];

        if (v4)
        {
          unint64_t v5 = *((void *)&_swiftEmptySetSingleton + 2);
          if (*((void *)&_swiftEmptySetSingleton + 3) <= v5) {
            sub_100DDB04C(v5 + 1);
          }
          Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
          uint64_t v7 = (char *)&_swiftEmptySetSingleton + 56;
          uint64_t v8 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
          unint64_t v9 = result & ~v8;
          unint64_t v10 = v9 >> 6;
          if (((-1 << v9) & ~*((void *)&_swiftEmptySetSingleton + (v9 >> 6) + 7)) != 0)
          {
            unint64_t v11 = __clz(__rbit64((-1 << v9) & ~*((void *)&_swiftEmptySetSingleton + (v9 >> 6) + 7))) | v9 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v12 = 0;
            unint64_t v13 = (unint64_t)(63 - v8) >> 6;
            do
            {
              if (++v10 == v13 && (v12 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v14 = v10 == v13;
              if (v10 == v13) {
                unint64_t v10 = 0;
              }
              v12 |= v14;
              uint64_t v15 = *(void *)&v7[8 * v10];
            }
            while (v15 == -1);
            unint64_t v11 = __clz(__rbit64(~v15)) + (v10 << 6);
          }
          *(void *)&v7[(v11 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v11;
          *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v11) = v17;
          ++*((void *)&_swiftEmptySetSingleton + 2);
        }
        else
        {
        }
      }
      while (__CocoaSet.Iterator.next()());
      uint64_t v3 = &_swiftEmptySetSingleton;
    }
    swift_release();
  }
  else
  {
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v3 = (void *)sub_100692E44(v16);
  }
  a2(v3);
  return swift_release();
}

uint64_t sub_10067B0C8(uint64_t a1, id a2)
{
  id v3 = [a2 roleId];
  uint64_t result = type metadata accessor for BeaconNamingRecord();
  *(void *)(a1 + *(int *)(result + 28)) = v3;
  return result;
}

uint64_t sub_10067B110(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_10000588C(&qword_10164B300);
  __chkstk_darwin(v9);
  unint64_t v11 = (void *)((char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v11, &qword_10164B300);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = *v11;
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101342130;
    v21[1] = v12;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v16 = v15;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_10000B4CC();
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v16;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v17 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    ((void (*)(void))a2)(0);
    return swift_errorRelease();
  }
  else
  {
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    uint64_t v19 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    id v20 = sub_100398B08(a5, *(char **)(a4 + 280));
    a2();

    return sub_10001DAB4((uint64_t)v11, &qword_10164B300);
  }
}

id sub_10067B34C(uint64_t a1, id a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v10 = [a2 name];
  if (v10)
  {

    unint64_t v11 = (void *)(a1 + *(int *)(type metadata accessor for BeaconNamingRecord() + 32));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *unint64_t v11 = a3;
    v11[1] = a4;
  }
  uint64_t v12 = a5[3];
  uint64_t v13 = a5[4];
  sub_10001CD44(a5, v12);
  uint64_t v14 = (void *)(*(uint64_t (**)(id, uint64_t, uint64_t))(v13 + 200))([a2 roleId], v12, v13);
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = [v14 roleId];

    *(void *)(a1 + *(int *)(type metadata accessor for BeaconNamingRecord() + 28)) = v16;
  }
  id result = [a2 emoji];
  if (result)
  {
    uint64_t v18 = result;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    uint64_t v22 = (uint64_t *)(a1 + *(int *)(type metadata accessor for BeaconNamingRecord() + 36));
    id result = (id)swift_bridgeObjectRelease();
    *uint64_t v22 = v19;
    v22[1] = v21;
  }
  return result;
}

uint64_t sub_10067B490(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  uint64_t v120 = a4;
  uint64_t v121 = a5;
  uint64_t v117 = a3;
  uint64_t v118 = a2;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v6 - 8);
  id v110 = (char *)v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_10000588C(&qword_101645750);
  uint64_t v112 = *(void *)(v116 - 8);
  uint64_t v8 = __chkstk_darwin(v116);
  NSDate v108 = (char *)v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v109 = (uint64_t)v97 - v10;
  uint64_t v111 = type metadata accessor for URL();
  uint64_t v119 = *(void *)(v111 - 8);
  uint64_t v11 = __chkstk_darwin(v111);
  uint64_t v103 = (char *)v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v104 = (char *)v97 - v14;
  __chkstk_darwin(v13);
  char v115 = (char *)v97 - v15;
  uint64_t v16 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v106 = (char *)v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v107 = (uint64_t)v97 - v19;
  uint64_t v102 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v102);
  uint64_t v21 = (char *)v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v113 = *(void *)(v25 - 8);
  uint64_t v26 = *(void *)(v113 + 64);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v105 = (uint64_t)v97 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v30 = (char *)v97 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  id v33 = (char *)v97 - v32;
  __chkstk_darwin(v31);
  uint64_t v114 = (uint64_t)v97 - v34;
  uint64_t v35 = sub_10000588C(&qword_10164B300);
  __chkstk_darwin(v35);
  uint64_t v37 = (void *)((char *)v97 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v37, &qword_10164B300);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v38 = *v37;
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_101342130;
    v124[0] = v38;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v40 = String.init<A>(describing:)();
    uint64_t v42 = v41;
    *(void *)(v39 + 56) = &type metadata for String;
    *(void *)(v39 + 64) = sub_10000B4CC();
    *(void *)(v39 + 32) = v40;
    *(void *)(v39 + 40) = v42;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    uint64_t v43 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    v120(0);
    return swift_errorRelease();
  }
  id v101 = v30;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v45 = *(void *)(v118 + 280);
  sub_100A9E7EC(15);
  type metadata accessor for Transaction();
  static Transaction.named<A>(_:with:)();
  swift_retain();
  PassthroughSubject.send(_:)();
  swift_release();
  sub_100ACCD98(v117, (uint64_t)&v122);
  if (!v123)
  {
    sub_10001DAB4((uint64_t)&v122, (uint64_t *)&unk_10163BBE0);
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v63 = swift_allocObject();
    *(_OWORD *)(v63 + 16) = xmmword_101342130;
    uint64_t v64 = UUID.uuidString.getter();
    uint64_t v66 = v65;
    *(void *)(v63 + 56) = &type metadata for String;
    *(void *)(v63 + 64) = sub_10000B4CC();
    *(void *)(v63 + 32) = v64;
    *(void *)(v63 + 40) = v66;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    uint64_t v67 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    v120(0);
    return sub_10001DAB4((uint64_t)v37, &qword_10164B300);
  }
  sub_10001CEB0(&v122, (uint64_t)v124);
  sub_10001D010((uint64_t)v124, (uint64_t)&v122);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  char v46 = swift_dynamicCast();
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v113 + 56);
  if ((v46 & 1) == 0)
  {
    v47(v24, 1, 1, v25);
    sub_10001DAB4((uint64_t)v24, &qword_10163B9F0);
    v120(1);
LABEL_18:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v124);
    return sub_10001DAB4((uint64_t)v37, &qword_10164B300);
  }
  uint64_t v99 = v21;
  uint64_t v100 = 0;
  uint64_t v48 = v113;
  v47(v24, 0, 1, v25);
  uint64_t v49 = (uint64_t)v24;
  uint64_t v50 = v114;
  sub_1006CD470(v49, v114, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_1006CC8F8(v50, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v51 = (uint64_t)v101;
  sub_1006CC8F8((uint64_t)v33, (uint64_t)v101, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v52 = *(unsigned __int8 *)(v48 + 80);
  uint64_t v53 = (v52 + 16) & ~v52;
  uint64_t v117 = v52;
  uint64_t v113 = v52 | 7;
  uint64_t v54 = swift_allocObject();
  uint64_t v55 = v54 + v53;
  uint64_t v56 = v50;
  sub_1006CD470((uint64_t)v33, v55, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v57 = v50 + *(int *)(v25 + 20);
  char v58 = sub_100B6DD88();
  if (!v58[2])
  {
    sub_10067C2C4(v51);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v62 = v117;
    uint64_t v59 = v51;
    goto LABEL_15;
  }
  unint64_t v98 = (char *)v54;
  uint64_t v59 = v51;
  uint64_t v60 = (uint64_t)v99;
  sub_1006CC8F8(v56 + *(int *)(v25 + 24), (uint64_t)v99, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  sub_1006CCE04(v60, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  if (EnumCaseMultiPayload)
  {
    sub_10067C2C4(v59);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v62 = v117;
LABEL_15:
    uint64_t v99 = v37;
    uint64_t v118 = v57;
    uint64_t v102 = ~v62;
    sub_1006CCE04(v59, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    id v101 = *(char **)(v45 + 160);
    if (qword_1016370F0 != -1) {
      swift_once();
    }
    uint64_t v70 = v111;
    uint64_t v71 = sub_100010324(v111, (uint64_t)qword_10170ED28);
    unint64_t v72 = *(void (**)(char *, uint64_t, uint64_t))(v119 + 16);
    os_log_type_t v73 = v115;
    v72(v115, v71, v70);
    uint64_t v74 = v104;
    v72(v104, (uint64_t)v73, v70);
    uint64_t v75 = v116;
    uint64_t v76 = (uint64_t)v108;
    unint64_t v98 = &v108[*(int *)(v116 + 40)];
    uint64_t v77 = (uint64_t)v98;
    uint64_t v78 = type metadata accessor for DirectorySequence();
    uint64_t v79 = *(void *)(v78 - 8);
    unint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56);
    v97[1] = v79 + 56;
    v80(v77, 1, 1, v78);
    v72((char *)v76, (uint64_t)v74, v70);
    *(void *)(v76 + *(int *)(v75 + 36)) = v101;
    v72(v103, (uint64_t)v74, v70);
    swift_retain();
    uint64_t v81 = (uint64_t)v110;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    uint64_t v82 = *(void (**)(char *, uint64_t))(v119 + 8);
    v119 += 8;
    v82(v74, v70);
    v80(v81, 0, 1, v78);
    sub_100062604(v81, (uint64_t)v98, (uint64_t *)&unk_101653C90);
    uint64_t v83 = v109;
    sub_10001D608(v76, v109, &qword_101645750);
    uint64_t v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v112 + 56);
    uint64_t v85 = (uint64_t)v106;
    uint64_t v86 = v116;
    v84(v106, 1, 1, v116);
    sub_10001DAB4(v85, &qword_101645758);
    sub_10001D608(v83, v85, &qword_101645750);
    v84((char *)v85, 0, 1, v86);
    sub_10001D608(v85, v107, (uint64_t *)&unk_101653CA0);
    uint64_t v87 = ((uint64_t (*)(char *, uint64_t))v82)(v115, v70);
    __chkstk_darwin(v87);
    uint64_t v88 = v118;
    v97[-2] = 0;
    v97[-1] = v88;
    sub_100658408(sub_1006CD688, (uint64_t)&v97[-4]);
    uint64_t v90 = v89;
    type metadata accessor for Transaction();
    uint64_t v91 = v114;
    uint64_t v92 = v105;
    sub_1006CC8F8(v114, v105, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v93 = (v117 + 24) & v102;
    uint64_t v94 = swift_allocObject();
    *(void *)(v94 + 16) = v90;
    sub_1006CD470(v92, v94 + v93, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v95 = (void (**)(uint64_t))(v94 + ((v26 + v93 + 7) & 0xFFFFFFFFFFFFFFF8));
    id v96 = v121;
    *uint64_t v95 = v120;
    v95[1] = v96;
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    sub_1006CCE04(v91, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v37 = v99;
    goto LABEL_18;
  }
  uint64_t v62 = v117;
  uint64_t v68 = *(void *)(v118 + 40);
  uint64_t v69 = (uint64_t)v98;
  if (v68)
  {
    swift_retain();
    swift_retain();
    sub_100547144((uint64_t)v58, v56, v68, (void **)sub_1006C95E0, v69);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    goto LABEL_15;
  }
  uint64_t result = sub_1006CCE04(v59, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  __break(1u);
  return result;
}

void sub_10067C2C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v2);
  id v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170E840);
  sub_1006CC8F8(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558275;
    uint64_t v12 = 1752392040;
    uint64_t v13 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    type metadata accessor for UUID();
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v12 = sub_1008FA0F0(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006CCE04((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Successfully pushed record update to shares: %{private,mask.hash}s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1006CCE04((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
}

uint64_t sub_10067C560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[31] = a3;
  v4[32] = a4;
  v4[29] = a1;
  v4[30] = a2;
  v4[33] = type metadata accessor for OwnedBeaconRecord();
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  v4[37] = v5;
  v4[38] = *(void *)(v5 - 8);
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  return _swift_task_switch(sub_10067C680, 0, 0);
}

uint64_t sub_10067C680()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 120))
  {
    sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v2;
    void *v2 = v0;
    v2[1] = sub_10067C7BC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10067C7BC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 336) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10067C8BC, 0, 0);
}

uint64_t sub_10067C8BC()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 336))
  {
    uint64_t v2 = *(void *)(v0 + 232);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v0 + 344) = v3;
    if (v3)
    {
      uint64_t v4 = *(void *)(v0 + 304);
      uint64_t v5 = *(void *)(v0 + 232);
      int v6 = *(_DWORD *)(v4 + 80);
      *(_DWORD *)(v0 + 416) = v6;
      *(void *)(v0 + 352) = *(void *)(v4 + 72);
      *(void *)(v0 + 360) = 0;
      uint64_t v7 = *(void *)(v0 + 320);
      uint64_t v8 = v5 + ((v6 + 32) & ~(unint64_t)v6);
      swift_bridgeObjectRetain();
      sub_1006CC8F8(v8, v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 368) = v9;
      *uint64_t v9 = v0;
      v9[1] = sub_10067CBBC;
      uint64_t v10 = *(void *)(v0 + 320);
      return sub_1000FC070(v10, 0);
    }
    else
    {
      uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
      if (*(void *)(v0 + 80))
      {
        sub_10001CEB0((long long *)(v0 + 56), v0 + 136);
        sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
        uint64_t v18 = (uint64_t (*)(void))((char *)&dword_1016392D0 + dword_1016392D0);
        uint64_t v17 = (void *)swift_task_alloc();
        *(void *)(v0 + 384) = v17;
        void *v17 = v0;
        v17[1] = sub_10067CCD0;
        return v18();
      }
      else
      {
        __break(1u);
      }
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170E840);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No BeaconSharingService!", v15, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  return result;
}

uint64_t sub_10067CBBC()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10067D714;
  }
  else {
    uint64_t v2 = sub_10067D254;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10067CCD0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 392) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10067CDD0, 0, 0);
}

uint64_t sub_10067CDD0()
{
  uint64_t v17 = v0;
  uint64_t v1 = v0 + 136;
  if (*(void *)(v0 + 392))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v2;
    void *v2 = v0;
    v2[1] = sub_10067D140;
    uint64_t v3 = *(void *)(v0 + 232);
    return sub_100CD8354(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v5 = *(void *)(v0 + 288);
    uint64_t v6 = *(void *)(v0 + 240);
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170E840);
    sub_1006CC8F8(v6, v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 288);
    if (v10)
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 141558275;
      *(void *)(v0 + 200) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 208) = sub_1008FA0F0(v13, v14, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1006CCE04(v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Successfully pushed record update to owner circle shares: %{private,mask.hash}s.", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1006CCE04(*(void *)(v0 + 288), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    (*(void (**)(uint64_t))(v0 + 248))(1);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_10067D140()
{
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10067DBD8;
  }
  else {
    uint64_t v2 = sub_10067D42C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10067D254()
{
  sub_1006CCE04(*(void *)(v0 + 320), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v1 = *(void *)(v0 + 360) + 1;
  if (v1 == *(void *)(v0 + 344))
  {
    swift_bridgeObjectRelease();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 136);
      sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
      uint64_t v6 = (uint64_t (*)(void))((char *)&dword_1016392D0 + dword_1016392D0);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 384) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_10067CCD0;
      return v6();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(void *)(v0 + 360) = v1;
    sub_1006CC8F8(*(void *)(v0 + 232)+ ((*(unsigned __int8 *)(v0 + 416) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 416))+ *(void *)(v0 + 352) * v1, *(void *)(v0 + 320), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 368) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10067CBBC;
    uint64_t v5 = *(void *)(v0 + 320);
    return sub_1000FC070(v5, 0);
  }
  return result;
}

uint64_t sub_10067D42C()
{
  uint64_t v14 = v0;
  swift_release();
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170E840);
  sub_1006CC8F8(v2, v1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 288);
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558275;
    *(void *)(v0 + 200) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    type metadata accessor for UUID();
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 208) = sub_1008FA0F0(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006CCE04(v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Successfully pushed record update to owner circle shares: %{private,mask.hash}s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1006CCE04(*(void *)(v0 + 288), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }

  (*(void (**)(uint64_t))(v0 + 248))(1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_10067D714()
{
  uint64_t v25 = v0;
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170E840);
  sub_1006CC8F8(v4, v3, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_1006CC8F8(v2, v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  BOOL v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = *(void *)(v0 + 312);
  uint64_t v9 = *(void *)(v0 + 320);
  if (v8)
  {
    uint64_t v11 = *(void *)(v0 + 280);
    uint64_t v12 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558787;
    *(void *)(v12 + 4) = 1752392040;
    *(_WORD *)(v12 + 12) = 2081;
    type metadata accessor for UUID();
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v12 + 14) = sub_1008FA0F0(v13, v14, &v24);
    swift_bridgeObjectRelease();
    sub_1006CCE04(v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    *(_WORD *)(v12 + 22) = 2160;
    *(void *)(v12 + 24) = 1752392040;
    *(_WORD *)(v12 + 32) = 2081;
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v12 + 34) = sub_1008FA0F0(v15, v16, &v24);
    swift_bridgeObjectRelease();
    sub_1006CCE04(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to update name record in keydrop: %{private,mask.hash}s, shareId: %{private,mask.hash}s.", (uint8_t *)v12, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 280);
    swift_errorRelease();

    sub_1006CCE04(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_1006CCE04(v17, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  sub_1006CCE04(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v18 = *(void *)(v0 + 360) + 1;
  if (v18 == *(void *)(v0 + 344))
  {
    swift_bridgeObjectRelease();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 136);
      sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
      uint64_t v23 = (uint64_t (__cdecl *)())((char *)&dword_1016392D0 + dword_1016392D0);
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 384) = v20;
      *uint64_t v20 = v0;
      v20[1] = sub_10067CCD0;
      return v23();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(void *)(v0 + 360) = v18;
    sub_1006CC8F8(*(void *)(v0 + 232)+ ((*(unsigned __int8 *)(v0 + 416) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 416))+ *(void *)(v0 + 352) * v18, *(void *)(v0 + 320), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 368) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_10067CBBC;
    uint64_t v22 = *(void *)(v0 + 320);
    return sub_1000FC070(v22, 0);
  }
  return result;
}

uint64_t sub_10067DBD8()
{
  uint64_t v23 = v0;
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v21 = type metadata accessor for Logger();
  sub_100010324(v21, (uint64_t)qword_10170E840);
  sub_1006CC8F8(v2, v1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 272);
  if (v5)
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558275;
    *(void *)(v0 + 216) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    type metadata accessor for UUID();
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 224) = sub_1008FA0F0(v8, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006CCE04(v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to send name record updates to members: %{private,mask.hash}s.", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    sub_1006CCE04(v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }

  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v10 = *(void *)(v0 + 288);
  uint64_t v11 = *(void *)(v0 + 240);
  sub_100010324(v21, (uint64_t)qword_10170E840);
  sub_1006CC8F8(v11, v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v15 = *(void *)(v0 + 288);
  if (v14)
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 141558275;
    *(void *)(v0 + 200) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2081;
    type metadata accessor for UUID();
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 208) = sub_1008FA0F0(v17, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006CCE04(v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Successfully pushed record update to owner circle shares: %{private,mask.hash}s.", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1006CCE04(*(void *)(v0 + 288), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }

  (*(void (**)(uint64_t))(v0 + 248))(1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_10067E10C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = sub_10000588C(&qword_10164B300);
  __chkstk_darwin(v4);
  uint64_t v6 = (void *)((char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v6, &qword_10164B300);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = *v6;
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_101342130;
    v13[1] = v7;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v9 = String.init<A>(describing:)();
    uint64_t v11 = v10;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10000B4CC();
    *(void *)(v8 + 32) = v9;
    *(void *)(v8 + 40) = v11;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    a2(0);
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    a2(1);
    sub_100A9E7EC(15);
    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)();
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    return sub_10001DAB4((uint64_t)v6, &qword_10164B300);
  }
}

uint64_t sub_10067E3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v72 = a5;
  uint64_t v73 = a4;
  uint64_t v79 = a2;
  uint64_t v77 = a1;
  uint64_t v9 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v9 - 8);
  uint64_t v80 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for UUID();
  uint64_t v76 = *(void *)(v81 - 8);
  uint64_t v11 = __chkstk_darwin(v81);
  uint64_t v71 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = v12;
  __chkstk_darwin(v11);
  uint64_t v66 = (char *)&v59 - v13;
  uint64_t v78 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v78 - 8);
  uint64_t v15 = __chkstk_darwin(v78);
  uint64_t v69 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = v16;
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v59 - v17;
  static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_101347BA0;
  uint64_t v20 = *v6;
  uint64_t v74 = v6;
  v83[0] = v20;
  sub_10000588C(&qword_101642888);
  uint64_t v21 = String.init<A>(describing:)();
  uint64_t v23 = v22;
  *(void *)(v19 + 56) = &type metadata for String;
  unint64_t v24 = sub_10000B4CC();
  *(void *)(v19 + 32) = v21;
  *(void *)(v19 + 40) = v23;
  *(void *)(v19 + 96) = &type metadata for String;
  *(void *)(v19 + 104) = v24;
  *(void *)(v19 + 64) = v24;
  *(void *)(v19 + 72) = 0xD000000000000038;
  *(void *)(v19 + 80) = 0x8000000101403580;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100010324(v25, (uint64_t)qword_10170E840);
  uint64_t v26 = v14;
  uint64_t v28 = v14 + 16;
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v29 = v78;
  uint64_t v65 = v27;
  uint64_t v63 = v28;
  v27(v18, v79, v78);
  uint64_t v30 = v76;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 16);
  uint64_t v32 = v66;
  uint64_t v70 = a3;
  uint64_t v33 = v81;
  uint64_t v64 = v31;
  v31(v66, a3, v81);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  int v36 = v35;
  BOOL v37 = os_log_type_enabled(v34, v35);
  uint64_t v75 = v26;
  if (v37)
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    v83[0] = v62;
    *(_DWORD *)uint64_t v38 = 134219011;
    uint64_t v82 = *(void *)&a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 12) = 2048;
    uint64_t v82 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 22) = 2080;
    int v61 = v36;
    sub_100691B60((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    os_log_t v60 = v34;
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v82 = sub_1008FA0F0(v39, v40, v83);
    uint64_t v33 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v18, v29);
    *(_WORD *)(v38 + 32) = 2160;
    uint64_t v82 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 42) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v82 = sub_1008FA0F0(v41, v42, v83);
    uint64_t v30 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v33);
    os_log_t v43 = v60;
    _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v61, "        setAlignmentUncertainty called: uncertainty: %f, index: %llu, date: %s, beaconUUID: %{private,mask.hash}s", (uint8_t *)v38, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v29);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v33);
  }
  uint64_t v44 = v74;
  uint64_t v45 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v80, 1, 1, v45);
  char v46 = v71;
  v64(v71, v70, v33);
  uint64_t v47 = v69;
  uint64_t v48 = v78;
  v65(v69, v79, v78);
  unint64_t v49 = (*(unsigned __int8 *)(v30 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  unint64_t v50 = (v68 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v51 = v75;
  unint64_t v52 = (*(unsigned __int8 *)(v75 + 80) + v50 + 8) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
  uint64_t v53 = (char *)swift_allocObject();
  uint64_t v54 = v30;
  uint64_t v55 = (uint64_t)v53;
  *((void *)v53 + 2) = 0;
  *((void *)v53 + 3) = 0;
  uint64_t v57 = v72;
  uint64_t v56 = v73;
  *((void *)v53 + 4) = v44;
  *((void *)v53 + 5) = v56;
  *((void *)v53 + 6) = v57;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(&v53[v49], v46, v81);
  *(void *)(v55 + v50) = v77;
  (*(void (**)(unint64_t, char *, uint64_t))(v51 + 32))(v55 + v52, v47, v48);
  swift_retain();
  swift_retain();
  sub_1008F5E44(v80, (uint64_t)&unk_10164B268, v55);
  return swift_release();
}

uint64_t sub_10067EBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[35] = a8;
  v8[36] = v17;
  v8[33] = a6;
  v8[34] = a7;
  v8[31] = a4;
  v8[32] = a5;
  uint64_t v9 = type metadata accessor for Date();
  v8[37] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[38] = v10;
  v8[39] = *(void *)(v10 + 64);
  v8[40] = swift_task_alloc();
  v8[41] = type metadata accessor for KeySyncMetadata();
  v8[42] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  v8[43] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v8[44] = v12;
  v8[45] = *(void *)(v12 + 64);
  v8[46] = swift_task_alloc();
  v8[47] = swift_task_alloc();
  v8[48] = swift_task_alloc();
  v8[49] = sub_10000588C(&qword_10163B9F0);
  v8[50] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for OwnedBeaconRecord();
  v8[51] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v8[52] = v14;
  v8[53] = *(void *)(v14 + 64);
  v8[54] = swift_task_alloc();
  v8[55] = swift_task_alloc();
  return _swift_task_switch(sub_10067EDD0, 0, 0);
}

uint64_t sub_10067EDD0()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 448) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10067EF20;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10067EF20(uint64_t a1)
{
  *(void *)(*(void *)v1 + 456) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10067F020, 0, 0);
}

uint64_t sub_10067F020()
{
  uint64_t v1 = *(void *)(v0 + 456);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 160))
    {
      sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
      sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v10 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 464) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_10067F284;
      return v10();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E840);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No ObservationStoreService.", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = *(void (**)(void))(v0 + 256);

    v8(0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  return result;
}

uint64_t sub_10067F284(uint64_t a1)
{
  *(void *)(*(void *)v1 + 472) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10067F384, 0, 0);
}

uint64_t sub_10067F384()
{
  uint64_t v1 = v0[59];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
  if (v1)
  {
    uint64_t v2 = v0[59];
    return _swift_task_switch(sub_10067F56C, v2, 0);
  }
  else
  {
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E840);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No beaconStoreActor.", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = (void (*)(void))v0[32];

    v7(0);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_10067F56C()
{
  uint64_t v1 = *(void *)(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v5 = *(void *)(v0 + 272);
  *(void *)(v0 + 480) = *(void *)(v1 + 136);
  os_log_type_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 488) = v6;
  *(void *)(v0 + 496) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  int v7 = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 608) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 504) = v9;
  *(void *)(v9 + 16) = v1;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 512) = v10;
  *(void *)(v0 + 520) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_10067F688, 0, 0);
}

uint64_t sub_10067F688()
{
  uint64_t v1 = v0[63];
  uint64_t v2 = v0[60];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[66] = v3;
  v3[2] = v2;
  v3[3] = sub_10001D828;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[67] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10067F790;
  uint64_t v6 = v0[49];
  uint64_t v5 = v0[50];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001D89C, v3, v6);
}

uint64_t sub_10067F790()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_10067F8C4, 0, 0);
}

uint64_t sub_10067F8C4()
{
  uint64_t v33 = v0;
  uint64_t v1 = *(void *)(v0 + 400);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 416) + 48))(v1, 1, *(void *)(v0 + 408)) == 1)
  {
    sub_10001DAB4(v1, &qword_10163B9F0);
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
    uint64_t v3 = *(void *)(v0 + 376);
    uint64_t v4 = *(void *)(v0 + 344);
    uint64_t v5 = *(void *)(v0 + 272);
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170E840);
    v2(v3, v5, v4);
    int v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 376);
    uint64_t v11 = *(void *)(v0 + 344);
    uint64_t v12 = *(void *)(v0 + 352);
    if (v9)
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 141558275;
      *(void *)(v0 + 200) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2081;
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 208) = sub_1008FA0F0(v14, v15, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "                    OwnedBeaconRecord with identifier not found - %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v12 + 8))(*(void *)(v0 + 376), *(void *)(v0 + 344));
    }

    (*(void (**)(void))(v0 + 256))(0);
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
    return v29();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
    uint64_t v18 = *(void *)(v0 + 336);
    uint64_t v17 = *(void *)(v0 + 344);
    uint64_t v19 = *(int **)(v0 + 328);
    uint64_t v20 = *(void *)(v0 + 304);
    uint64_t v31 = *(void *)(v0 + 296);
    uint64_t v21 = *(void *)(v0 + 280);
    uint64_t v30 = *(void *)(v0 + 288);
    uint64_t v22 = *(void *)(v0 + 272);
    sub_1006CD470(v1, *(void *)(v0 + 440), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    v16(v18, v22, v17);
    uint64_t v23 = (void *)(v18 + v19[6]);
    v23[3] = &type metadata for PrimaryIndex;
    v23[4] = sub_1001A1640();
    *uint64_t v23 = v21;
    uint64_t v24 = v18 + v19[7];
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    *(void *)(v0 + 544) = v25;
    *(void *)(v0 + 552) = (v20 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v25(v24, v30, v31);
    *(unsigned char *)(v18 + v19[5]) = 2;
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 560) = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_10067FD18;
    uint64_t v27 = *(void *)(v0 + 336);
    return sub_101104A5C(v27);
  }
}

uint64_t sub_10067FD18()
{
  *(void *)(*(void *)v1 + 568) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1006806F4;
  }
  else {
    uint64_t v2 = sub_10067FE2C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10067FE2C()
{
  uint64_t v18 = v0;
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[61];
  uint64_t v2 = v0[46];
  uint64_t v3 = v0[43];
  uint64_t v4 = v0[34];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170E840);
  v1(v2, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[46];
  uint64_t v10 = v0[43];
  uint64_t v11 = v0[44];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558275;
    v0[29] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[30] = sub_1008FA0F0(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Successfully updated alignment uncertainty for beacon %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(v0[46], v0[43]);
  }

  uint64_t v15 = v0[59];
  return _swift_task_switch(sub_1006800A8, v15, 0);
}

uint64_t sub_1006800A8()
{
  *(void *)(v0 + 576) = *(void *)(*(void *)(v0 + 472) + 136);
  swift_retain();
  return _swift_task_switch(sub_10068011C, 0, 0);
}

uint64_t sub_10068011C()
{
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[59];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[73] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[74] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_100680234;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 28, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DAA8, v3, v5);
}

uint64_t sub_100680234()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 600) = *(void *)(v1 + 224);
  return _swift_task_switch(sub_100680390, 0, 0);
}

uint64_t sub_100680390()
{
  uint64_t v36 = *(void *)(v0 + 600);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 544);
  os_log_type_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 512);
  uint64_t v1 = *(unsigned __int8 *)(v0 + 608);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
  uint64_t v34 = *(void *)(v0 + 440);
  uint64_t v22 = *(void *)(v0 + 416);
  uint64_t v23 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v29 = v2;
  uint64_t v24 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 344);
  uint64_t v27 = *(void *)(v0 + 432);
  uint64_t v28 = v3;
  uint64_t v37 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v26 = *(void *)(v0 + 312);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v30 = v4;
  uint64_t v31 = *(void *)(v0 + 280);
  uint64_t v8 = *(void *)(v0 + 272);
  uint64_t v9 = *(void *)(v0 + 248);
  uint64_t v32 = *(void *)(v0 + 256);
  uint64_t v33 = *(void *)(v0 + 264);
  sub_1006CC8F8(v34, v27, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  v21(v2, v8, v3);
  uint64_t v10 = v4;
  uint64_t v11 = v6;
  v25(v10, v7, v6);
  unint64_t v12 = (*(unsigned __int8 *)(v22 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v13 = (v23 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = (v1 + v13 + 8) & ~v1;
  unint64_t v15 = (v24 + *(unsigned __int8 *)(v5 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v9;
  sub_1006CD470(v27, v16 + v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  *(void *)(v16 + v13) = v31;
  v35(v16 + v14, v29, v28);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v16 + v15, v30, v11);
  uint64_t v17 = (void *)(v16 + ((v26 + v15 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v17 = v32;
  v17[1] = v33;
  type metadata accessor for Transaction();
  uint64_t v18 = swift_task_alloc();
  *(void *)(v18 + 16) = v36;
  *(void *)(v18 + 24) = v34;
  *(unsigned char *)(v18 + 32) = 2;
  *(void *)(v18 + 40) = sub_1006C49D8;
  *(void *)(v18 + 48) = v16;
  swift_retain();
  swift_retain();
  static Transaction.named<A>(_:with:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  sub_1006CCE04(v37, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  sub_1006CCE04(v34, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t sub_1006806F4()
{
  uint64_t v1 = v0[55];
  uint64_t v2 = v0[42];
  swift_release();
  sub_1006CCE04(v2, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  sub_1006CCE04(v1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170E840);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[27] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to update key sync %{public}@.", v6, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = (void (*)(void))v0[32];

  v9(0);
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1006809A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v41 = a6;
  uint64_t v42 = a7;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  unint64_t v36 = a3;
  uint64_t v34 = a1;
  uint64_t v38 = type metadata accessor for Date();
  uint64_t v44 = *(void *)(v38 - 8);
  uint64_t v9 = *(void *)(v44 + 64);
  __chkstk_darwin(v38);
  os_log_t v43 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v35 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v35);
  uint64_t v32 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v33 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v33 + 64);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = v17;
  sub_100680D70(a2, a3);
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  sub_1006CC8F8(a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v19 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v39, v35);
  uint64_t v20 = v44;
  uint64_t v21 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v40, v38);
  unint64_t v22 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  unint64_t v23 = (v13 + *(unsigned __int8 *)(v10 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v24 = (v11 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (*(unsigned __int8 *)(v20 + 80) + v24 + 8) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  unint64_t v26 = (v9 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = 0;
  *(void *)(v27 + 24) = 0;
  sub_1006CD470((uint64_t)v14, v27 + v22, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v27 + v23, v32, v19);
  *(void *)(v27 + v24) = v36;
  (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v27 + v25, v43, v21);
  uint64_t v28 = (void *)(v27 + v26);
  uint64_t v29 = v42;
  *uint64_t v28 = v41;
  v28[1] = v29;
  swift_retain();
  sub_1008F5E44((uint64_t)v37, (uint64_t)&unk_10164B278, v27);
  return swift_release();
}

uint64_t sub_100680D70(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v41 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v41 + 64);
  __chkstk_darwin(v5);
  uint64_t v40 = (uint64_t)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ShareRecord();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v30 - v11;
  uint64_t v42 = a1;
  uint64_t v43 = v2;
  uint64_t v37 = *(void *)(v2 + 280);
  uint64_t v13 = sub_100B6DD88();
  uint64_t v14 = v13[2];
  if (v14)
  {
    uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v34 = ~v15;
    uint64_t v35 = v15;
    v30[1] = v13;
    uint64_t v16 = (uint64_t)v13 + ((v15 + 32) & ~v15);
    uint64_t v17 = *(void *)(v8 + 72);
    uint64_t v32 = v6 + v15;
    long long v31 = xmmword_101347500;
    uint64_t v36 = v7;
    uint64_t v33 = v17;
    do
    {
      sub_1006CC8F8(v16, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      unint64_t v28 = *(void *)&v12[*(int *)(v7 + 44)];
      if (v28 > a2)
      {
        static os_log_type_t.default.getter();
        if (qword_101637250 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = v31;
        uint64_t v19 = UUID.uuidString.getter();
        uint64_t v21 = v20;
        *(void *)(v18 + 56) = &type metadata for String;
        unint64_t v22 = sub_10000B4CC();
        *(void *)(v18 + 32) = v19;
        *(void *)(v18 + 40) = v21;
        *(void *)(v18 + 96) = &type metadata for UInt64;
        *(void *)(v18 + 104) = &protocol witness table for UInt64;
        *(void *)(v18 + 112) = v28;
        *(void *)(v18 + 64) = v22;
        *(void *)(v18 + 72) = a2;
        *(void *)(v18 + 136) = &type metadata for UInt64;
        *(void *)(v18 + 144) = &protocol witness table for UInt64;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v23 = v40;
        sub_1006CC8F8(v42, v40, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v24 = v38;
        sub_1006CC8F8((uint64_t)v12, v38, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        unint64_t v25 = (*(unsigned __int8 *)(v41 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
        unint64_t v26 = (v32 + v25) & v34;
        uint64_t v27 = swift_allocObject();
        *(void *)(v27 + 16) = v43;
        sub_1006CD470(v23, v27 + v25, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_1006CD470(v24, v27 + v26, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        uint64_t v7 = v36;
        swift_retain();
        sub_100AC838C((uint64_t)v12, 0, (void (*)(uint64_t))sub_1006C56E0, (void (*)(uint64_t))v27, v37, a2);
        swift_release();
        uint64_t v17 = v33;
      }
      sub_1006CCE04((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      v16 += v17;
      --v14;
    }
    while (v14);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1006811B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a8;
  v8[10] = v14;
  v8[7] = a6;
  v8[8] = a7;
  v8[6] = a5;
  uint64_t v9 = type metadata accessor for Date();
  v8[11] = v9;
  v8[12] = *(void *)(v9 - 8);
  v8[13] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v8[14] = v10;
  v8[15] = *(void *)(v10 - 8);
  v8[16] = swift_task_alloc();
  uint64_t v11 = (void *)swift_task_alloc();
  v8[17] = v11;
  *uint64_t v11 = v8;
  v11[1] = sub_100681314;
  return sub_100D1B4D0();
}

uint64_t sub_100681314(char a1)
{
  *(unsigned char *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100681414, 0, 0);
}

uint64_t sub_100681414()
{
  uint64_t v32 = v0;
  if (*(unsigned char *)(v0 + 144) == 1)
  {
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v3 = *(void *)(v0 + 120);
    uint64_t v2 = *(void *)(v0 + 128);
    uint64_t v4 = *(void *)(v0 + 112);
    os_log_t log = *(os_log_t *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170E858);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
    (*(void (**)(os_log_t, uint64_t, uint64_t))(v5 + 16))(log, v7, v6);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 120);
    uint64_t v13 = *(void *)(v0 + 128);
    uint64_t v14 = *(void *)(v0 + 104);
    uint64_t v15 = *(void *)(v0 + 112);
    uint64_t v17 = *(void *)(v0 + 88);
    uint64_t v16 = *(void *)(v0 + 96);
    if (v11)
    {
      uint64_t v29 = *(void *)(v0 + 88);
      uint64_t v27 = *(void *)(v0 + 56);
      uint64_t v28 = *(void *)(v0 + 104);
      uint64_t v18 = swift_slowAlloc();
      v31[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 141558787;
      *(void *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2081;
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 24) = sub_1008FA0F0(v19, v20, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v15);
      *(_WORD *)(v18 + 22) = 2048;
      *(void *)(v0 + 32) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 32) = 2080;
      sub_100691B60((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_1008FA0F0(v21, v22, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v28, v29);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Posting SPManagedCBPeripheralChanged on keySyncRecord update from CL for %{private,mask.hash}s index %llu date %s.", (uint8_t *)v18, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v12 + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v17);
    }
    uint64_t v23 = (void *)SPManagedCBPeripheralChangedNotification;
    type metadata accessor for DarwinNotificationHelper();
    swift_allocObject();
    id v24 = v23;
    DarwinNotificationHelper.init(notificationName:rateLimit:)();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
    swift_release();
  }
  (*(void (**)(uint64_t))(v0 + 72))(1);
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t sub_100681850(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for ShareRecord();
  *(void *)(a1 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t sub_100681884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ShareRecord();
  uint64_t v9 = __chkstk_darwin(v8);
  BOOL v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v27 - v12;
  uint64_t v14 = sub_10000588C(&qword_101648068);
  __chkstk_darwin(v14);
  uint64_t v16 = (void *)((char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v16, &qword_101648068);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = *v16;
    static os_log_type_t.error.getter();
    if (qword_101637250 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_101342130;
    v27[1] = v17;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v21 = v20;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = sub_10000B4CC();
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v21;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_errorRelease();
  }
  else
  {
    sub_1006CD470((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    static os_log_type_t.default.getter();
    if (qword_101637250 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_101342130;
    sub_1006CC8F8((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ShareRecord);
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v26 = v25;
    *(void *)(v23 + 56) = &type metadata for String;
    *(void *)(v23 + 64) = sub_10000B4CC();
    *(void *)(v23 + 32) = v24;
    *(void *)(v23 + 40) = v26;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1006CCE04((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  }
  if (*(void *)(a2 + 40))
  {
    swift_retain();
    sub_10051DFC4(a3, a4);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100681BF4(void (*a1)(uint64_t (*)()), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a4;
  swift_retain();
  sub_1010757E0(a3, 0, (void (*)(uint64_t))sub_1006C9048, v7, (void (*)(uint64_t (*)()))sub_1006C9050, a1);
  swift_release();
  return swift_release();
}

uint64_t sub_100681CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for KeyAlignmentRecord();
  *(void *)(a1 + *(int *)(v8 + 28)) = a2;
  static Date.trustedNow.getter((uint64_t)v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 40))(a1 + *(int *)(v8 + 32), v7, v4);
}

uint64_t sub_100681D94(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164B328);
  __chkstk_darwin(v2);
  uint64_t v4 = (void *)((char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v4, &qword_10164B328);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = *v4;
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_101342130;
    v13[1] = v5;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v7 = String.init<A>(describing:)();
    uint64_t v9 = v8;
    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 64) = sub_10000B4CC();
    *(void *)(v6 + 32) = v7;
    *(void *)(v6 + 40) = v9;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    uint64_t v10 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    return swift_errorRelease();
  }
  else
  {
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    uint64_t v12 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    return sub_10001DAB4((uint64_t)v4, &qword_10164B328);
  }
}

uint64_t sub_100681F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[26] = a8;
  v8[27] = v12;
  v8[24] = a6;
  v8[25] = a7;
  v8[22] = a4;
  v8[23] = a5;
  uint64_t v9 = type metadata accessor for UUID();
  v8[28] = v9;
  v8[29] = *(void *)(v9 - 8);
  v8[30] = swift_task_alloc();
  v8[31] = swift_task_alloc();
  v8[32] = type metadata accessor for KeySyncMetadata();
  v8[33] = swift_task_alloc();
  return _swift_task_switch(sub_1006820A0, 0, 0);
}

uint64_t sub_1006820A0()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 272) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1006821F0;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006821F0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 280) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1006822F0, 0, 0);
}

uint64_t sub_1006822F0()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[35])
  {
    uint64_t v3 = (int *)v0[32];
    uint64_t v2 = v0[33];
    uint64_t v4 = v0[28];
    uint64_t v5 = v0[29];
    uint64_t v7 = v0[26];
    uint64_t v6 = v0[27];
    uint64_t v8 = v0[25];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v0[36] = v9;
    v0[37] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v9(v2, v8, v4);
    uint64_t v10 = (void *)(v2 + v3[6]);
    v10[3] = &type metadata for PrimaryIndex;
    v10[4] = sub_1001A1640();
    *uint64_t v10 = v7;
    uint64_t v11 = v2 + v3[7];
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v11, v6, v12);
    *(unsigned char *)(v2 + v3[5]) = 4;
    uint64_t v13 = (void *)swift_task_alloc();
    v0[38] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_100682574;
    uint64_t v14 = v0[33];
    return sub_101104A5C(v14);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170E840);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Missing ObservationStoreService.", v19, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = (void (*)(void))v0[23];

    v20(0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
}

uint64_t sub_100682574()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 264);
  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  sub_1006CCE04(v2, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
  if (v0) {
    uint64_t v3 = sub_10068298C;
  }
  else {
    uint64_t v3 = sub_1006826B8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1006826B8()
{
  uint64_t v19 = v0;
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170E840);
  v1(v2, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 248);
  uint64_t v10 = *(void *)(v0 + 224);
  uint64_t v11 = *(void *)(v0 + 232);
  if (v8)
  {
    uint64_t v12 = *(void *)(v0 + 208);
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 134218499;
    *(void *)(v0 + 152) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2160;
    *(void *)(v0 + 160) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 168) = sub_1008FA0F0(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "            Successfully updated last seen key index %lu for %{private,mask.hash}s.", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(*(void *)(v0 + 248), *(void *)(v0 + 224));
  }

  (*(void (**)(uint64_t))(v0 + 184))(1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_10068298C()
{
  uint64_t v22 = v0;
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170E840);
  v1(v2, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = *(void *)(v0 + 232);
  uint64_t v9 = *(void *)(v0 + 240);
  uint64_t v11 = *(void *)(v0 + 224);
  if (v8)
  {
    uint64_t v12 = *(void *)(v0 + 208);
    os_log_type_t type = v7;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 134218755;
    *(void *)(v0 + 120) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2160;
    *(void *)(v0 + 128) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 136) = sub_1008FA0F0(v14, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v13 + 32) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 144) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v19 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, type, "            Failed to updated last seen key index %lu for %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v13, 0x2Au);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 240), *(void *)(v0 + 224));
    swift_errorRelease();
    swift_errorRelease();
  }

  (*(void (**)(void))(v0 + 184))(0);
  swift_release();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_100682D34(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_100682D54, 0, 0);
}

uint64_t sub_100682D54()
{
  uint64_t v1 = *(void **)(v0 + 24);
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v2 = (char *)swift_allocObject();
  *(void *)(v0 + 32) = v2;
  swift_defaultActor_initialize();
  *((void *)v2 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v3 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v4);
  *((void *)v2 + 15) = 0xD000000000000031;
  *((void *)v2 + 16) = 0x8000000101403B40;
  id v6 = v1;
  return _swift_task_switch(sub_100682EAC, v2, 0);
}

uint64_t sub_100682EAC()
{
  sub_1011AC5F4(*(void *)(v0 + 32), *(void *)(v0 + 16), *(void **)(v0 + 24));

  return _swift_task_switch(sub_100660FB8, 0, 0);
}

id sub_100682F48(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = 0x6E4979654B77656ELL;
  *(void *)(inited + 40) = 0xEB00000000786564;
  *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:a1];
  *(unsigned char *)(inited + 56) = 0;
  unint64_t v9 = sub_10092E03C(inited);
  id result = [a2 systemVersion];
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v11 = (uint64_t)result;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v26 = v9;
  sub_10016D430(v11, 0, 0xD000000000000013, 0x80000001013FD3D0, isUniquelyReferenced_nonNull_native);
  unint64_t v13 = v26;
  swift_bridgeObjectRelease();
  id result = [a2 systemVersion];
  if (!result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v14 = (uint64_t)result;
  char v15 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v26 = v13;
  sub_10016D430(v14, 0, 0xD00000000000001BLL, 0x80000001013FD3F0, v15);
  unint64_t v16 = v26;
  swift_bridgeObjectRelease();
  id v17 = [self sharedInstance];
  unsigned int v18 = [v17 isInternalBuild];

  if (v18)
  {
    id v19 = [a2 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v26 = v16;
    sub_10016D430((uint64_t)v20, 0, 0x6544646572696170, 0xEE00444965636976, v21);
    unint64_t v16 = v26;
    swift_bridgeObjectRelease();
    id v22 = [a2 serialNumber];
    if (v22)
    {
      uint64_t v23 = (uint64_t)v22;
      char v24 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v26 = v16;
      sub_10016D430(v23, 0, 0xD000000000000018, 0x80000001013F72C0, v24);
      unint64_t v16 = v26;
      swift_bridgeObjectRelease();
    }
  }
  return (id)v16;
}

uint64_t sub_100683298(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(void *)(v3 + 136);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = sub_100691E6C;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CEED8;
  char v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_10068356C(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v83 = a3;
  uint64_t v84 = a2;
  unint64_t v98 = 0;
  uint64_t v4 = type metadata accessor for Date();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DateInterval();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v97 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v94 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v12);
  KeyPath = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = (int *)type metadata accessor for BeaconNamingRecord();
  uint64_t v15 = *((void *)v93 - 1);
  __chkstk_darwin(v93);
  uint64_t v86 = (uint64_t)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = *(void *)(a1 + 280);
  uint64_t v17 = sub_100AD2AD4();
  uint64_t v106 = _swiftEmptyArrayStorage;
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v87 = v7;
  *(void *)&long long v92 = v18;
  uint64_t v88 = v6;
  if (v18)
  {
    uint64_t v80 = v8;
    uint64_t v81 = a1;
    uint64_t v19 = v10;
    unint64_t v20 = 0;
    uint64_t v91 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer;
    uint64_t v21 = v17 + 32;
    uint64_t v79 = v19;
    uint64_t v90 = (void (**)(char *, uint64_t))(v19 + 8);
    uint64_t v89 = (unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
    uint64_t v85 = SPBeaconRoleIdUndefined;
    while (1)
    {
      if (v20 >= *(void *)(v17 + 16))
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v22 = v17;
      sub_10001D010(v21, (uint64_t)&v103);
      uint64_t v24 = v104;
      uint64_t v23 = v105;
      sub_10001CD44(&v103, v104);
      uint64_t v25 = v94;
      uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v23 + 8) + 8) + 32))(v24);
      __chkstk_darwin(v26);
      uint64_t v76 = v27;
      uint64_t v77 = v25;
      uint64_t v28 = v98;
      QueueSynchronizer.conditionalSync<A>(_:)();
      unint64_t v98 = v28;
      (*v90)(v25, v95);
      uint64_t v29 = v93;
      if ((*v89)(KeyPath, 1, v93) == 1)
      {
        sub_10001DAB4((uint64_t)KeyPath, &qword_10163B9E0);
      }
      else
      {
        uint64_t v30 = v86;
        sub_1006CD470((uint64_t)KeyPath, v86, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
        uint64_t v31 = *(void *)(v30 + v29[7]);
        sub_1006CCE04(v30, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
        if (v85 < v31)
        {
          sub_10001CEB0(&v103, (uint64_t)v100);
          uint64_t v32 = v106;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B7570(0, v32[2] + 1, 1);
            uint64_t v32 = v106;
          }
          uint64_t v33 = v12;
          unint64_t v35 = v32[2];
          unint64_t v34 = v32[3];
          if (v35 >= v34 >> 1) {
            sub_1000B7570(v34 > 1, v35 + 1, 1);
          }
          uint64_t v36 = v101;
          uint64_t v37 = v102;
          uint64_t v38 = sub_1000BD078((uint64_t)v100, v101);
          __chkstk_darwin(v38);
          uint64_t v40 = (char *)&v78 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v41 + 16))(v40);
          sub_1006985B0(v35, (uint64_t)v40, (uint64_t *)&v106, v36, v37);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v100);
          uint64_t v7 = v87;
          uint64_t v12 = v33;
          goto LABEL_5;
        }
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v103);
LABEL_5:
      uint64_t v17 = v22;
      ++v20;
      v21 += 40;
      if ((void)v92 == v20)
      {
        uint64_t v42 = v106;
        uint64_t v6 = v88;
        a1 = v81;
        uint64_t v8 = v80;
        uint64_t v10 = v79;
        goto LABEL_16;
      }
    }
  }
  uint64_t v42 = _swiftEmptyArrayStorage;
LABEL_16:
  swift_bridgeObjectRelease();
  *(void *)&long long v103 = v42;
  swift_retain();
  swift_retain();
  uint64_t v43 = v98;
  sub_1006C422C((void **)&v103, a1);
  if (v43)
  {
LABEL_37:
    swift_release();
    swift_release();
    __break(1u);
    JUMPOUT(0x10068412CLL);
  }
  swift_release();
  swift_release();
  uint64_t v44 = v103;
  uint64_t v106 = _swiftEmptyArrayStorage;
  uint64_t v45 = *(void *)(v44 + 16);
  if (!v45)
  {
    swift_release();
    uint64_t v73 = _swiftEmptyArrayStorage;
    goto LABEL_34;
  }
  uint64_t v90 = (void (**)(char *, uint64_t))v44;
  uint64_t v46 = v44 + 32;
  uint64_t v93 = (int *)(v10 + 8);
  unint64_t v98 = (void (**)(char *, uint64_t))(v8 + 8);
  long long v92 = xmmword_101342130;
  while (2)
  {
    sub_10001D010(v46, (uint64_t)&v103);
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v57 = v100[0];
    KeyPath = (char *)swift_getKeyPath();
    sub_1010ACB14(KeyPath, v57);
    if (v58)
    {
LABEL_36:
      v100[0] = 0;
      v100[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      v75._object = (void *)0x8000000101402410;
      v75._countAndFlagsBits = 0xD000000000000026;
      String.append(_:)(v75);
      uint64_t v99 = KeyPath;
      sub_10000588C(&qword_101649650);
      _print_unlocked<A, B>(_:_:)();
      LODWORD(v77) = 0;
      uint64_t v76 = 24;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_37;
    }
    swift_bridgeObjectRelease();
    swift_release();
    static Date.trustedNow.getter((uint64_t)v6);
    uint64_t v59 = (uint64_t)v97;
    DateInterval.init(start:duration:)();
    uint64_t v60 = v104;
    uint64_t v61 = v105;
    uint64_t v62 = sub_10001CD44(&v103, v104);
    uint64_t v54 = sub_100B2F5F4((uint64_t)v62, v59, 0, 0, 0, v96, v60, v61);
    uint64_t v55 = (void *)v54;
    uint64_t v64 = v63;
    switch(v65)
    {
      case 1:
        goto LABEL_24;
      case 2:
        sub_1002F6A08(v54, v63, 2u);
        goto LABEL_20;
      case 3:
LABEL_20:
        static os_log_type_t.default.getter();
        if (qword_101637250 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v47 = swift_allocObject();
        *(_OWORD *)(v47 + 16) = v92;
        uint64_t v49 = v104;
        uint64_t v48 = v105;
        sub_10001CD44(&v103, v104);
        unint64_t v50 = v94;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v48 + 8) + 8) + 32))(v49);
        uint64_t v51 = UUID.uuidString.getter();
        uint64_t v53 = v52;
        (*(void (**)(char *, uint64_t))v93)(v50, v95);
        *(void *)(v47 + 56) = &type metadata for String;
        *(void *)(v47 + 64) = sub_10000B4CC();
        *(void *)(v47 + 32) = v51;
        *(void *)(v47 + 40) = v53;
        os_log(_:dso:log:_:_:)();
        uint64_t v54 = swift_bridgeObjectRelease();
        uint64_t v55 = _swiftEmptyArrayStorage;
        goto LABEL_23;
      default:
        swift_bridgeObjectRetain();
        LODWORD(v91) = static os_log_type_t.default.getter();
        if (qword_101637250 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v66 = swift_allocObject();
        *(_OWORD *)(v66 + 16) = v92;
        uint64_t v68 = v104;
        uint64_t v67 = v105;
        sub_10001CD44(&v103, v104);
        uint64_t v69 = v94;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v67 + 8) + 8) + 32))(v68);
        uint64_t v70 = UUID.uuidString.getter();
        uint64_t v72 = v71;
        (*(void (**)(char *, uint64_t))v93)(v69, v95);
        *(void *)(v66 + 56) = &type metadata for String;
        *(void *)(v66 + 64) = sub_10000B4CC();
        *(void *)(v66 + 32) = v70;
        *(void *)(v66 + 40) = v72;
        os_log(_:dso:log:_:_:)();
        sub_1002F6A08((uint64_t)v55, v64, 0);
        uint64_t v54 = swift_bridgeObjectRelease();
        uint64_t v7 = v87;
LABEL_23:
        uint64_t v6 = v88;
LABEL_24:
        __chkstk_darwin(v54);
        uint64_t v76 = (uint64_t)&v103;
        uint64_t v56 = sub_100F48FC0((void (*)(uint64_t *__return_ptr, uint64_t))sub_1006C4330, (uint64_t)(&v78 - 4), (uint64_t)v55);
        swift_bridgeObjectRelease();
        sub_1004453B8((unint64_t)v56);
        (*v98)(v97, v7);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v103);
        v46 += 40;
        if (--v45) {
          continue;
        }
        swift_release();
        uint64_t v73 = v106;
        break;
    }
    break;
  }
LABEL_34:
  v84(v73);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10068413C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v80 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (char *)a1 + *(int *)(type metadata accessor for TimeBasedKey() + 24);
  unint64_t v81 = *((void *)v10 + 1);
  if (v81 >> 60 == 15)
  {
    uint64_t v79 = v3;
    LODWORD(v81) = static os_log_type_t.error.getter();
    if (qword_101637250 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_101347BA0;
    uint64_t v12 = a2[3];
    uint64_t v13 = a2[4];
    sub_10001CD44(a2, v12);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v13 + 8) + 8) + 32))(v12);
    uint64_t v14 = UUID.uuidString.getter();
    uint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(void *)(v11 + 56) = &type metadata for String;
    unint64_t v17 = sub_10000B4CC();
    *(void *)(v11 + 32) = v14;
    *(void *)(v11 + 40) = v16;
    uint64_t v18 = *a1;
    *(void *)(v11 + 96) = &type metadata for UInt64;
    *(void *)(v11 + 104) = &protocol witness table for UInt64;
    *(void *)(v11 + 64) = v17;
    *(void *)(v11 + 72) = v18;
    os_log(_:dso:log:_:_:)();
    uint64_t result = swift_bridgeObjectRelease();
    id v20 = 0;
    goto LABEL_7;
  }
  unint64_t v22 = v81;
  uint64_t v84 = *(void *)v10;
  uint64_t v21 = v84;
  unint64_t v85 = v81;
  long long v23 = *((_OWORD *)v10 + 2);
  long long v86 = *((_OWORD *)v10 + 1);
  long long v87 = v23;
  sub_1000361E0(v84, v81);
  uint64_t v24 = sub_100A8C640();
  unint64_t v26 = v25;
  id v27 = objc_allocWithZone((Class)SPBeaconingKey);
  Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  Class v29 = Data._bridgeToObjectiveC()().super.isa;
  id v30 = [v27 initWithDateInterval:isa key:v29];

  sub_10001CFB8(v24, v26);
  uint64_t v31 = String.utf8Data.getter();
  unint64_t v33 = v32;
  sub_1000361E0(v21, v22);
  uint64_t v34 = sub_100A941DC(v21, v22, v31, v33, 32);
  if (!v3)
  {
    uint64_t v36 = v34;
    unint64_t v37 = v35;
    sub_100037A24(v21, v81);
    sub_100434DF4(v36, v37, &v82);
    sub_10001CFB8(v31, v33);
    uint64_t v38 = v82;
    unint64_t v77 = v83;
    uint64_t v39 = String.utf8Data.getter();
    unint64_t v41 = v40;
    unint64_t v42 = v81;
    sub_1000361E0(v21, v81);
    uint64_t v43 = sub_100A941DC(v21, v42, v39, v41, 32);
    unint64_t v45 = v44;
    id v76 = v30;
    sub_100037A24(v21, v81);
    sub_100434DF4(v43, v45, &v82);
    sub_10001CFB8(v39, v41);
    unint64_t v74 = v83;
    uint64_t v75 = v82;
    uint64_t v46 = sub_100A8C640();
    unint64_t v48 = v47;
    uint64_t v49 = String.utf8Data.getter();
    unint64_t v51 = v50;
    unint64_t v52 = v81;
    sub_1000361E0(v21, v81);
    uint64_t v78 = v21;
    uint64_t v53 = sub_100A941DC(v21, v52, v49, v51, 32);
    unint64_t v55 = v54;
    sub_100037A24(v78, v81);
    sub_100434DF4(v53, v55, &v82);
    uint64_t v79 = 0;
    sub_10001CFB8(v49, v51);
    uint64_t v56 = v82;
    unint64_t v57 = v83;
    uint64_t v58 = sub_1004378B8(v82, v83, v46, v48);
    unint64_t v60 = v59;
    sub_10001CFB8(v56, v57);
    sub_10001CFB8(v46, v48);
    id v61 = objc_allocWithZone((Class)SPCommandKeys);
    uint64_t v73 = v38;
    Class v62 = Data._bridgeToObjectiveC()().super.isa;
    unint64_t v64 = v74;
    uint64_t v63 = v75;
    Class v65 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v66 = v58;
    unint64_t v67 = v60;
    Class v68 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v69 = v61;
    uint64_t v70 = v76;
    id v20 = [v69 initWithBeaconingKey:v76 commandKey:v62 connectionToken:v65 nearbyToken:v68];
    sub_10001CFB8(v66, v67);
    sub_10001CFB8(v63, v64);
    sub_10001CFB8(v73, v77);

    uint64_t result = sub_100037A24(v78, v81);
LABEL_7:
    *uint64_t v80 = v20;
    return result;
  }
  sub_10001CFB8(v31, v33);
  sub_100037A24(v21, v81);
  uint64_t v82 = 0;
  unint64_t v83 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  v71._object = (void *)0x80000001014034D0;
  v71._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v71);
  uint64_t v88 = v3;
  sub_10000588C(&qword_101638D40);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100684894(long long *a1, uint64_t (*a2)(long long *))
{
  uint64_t v2 = *((void *)a1 + 7);
  char v3 = *((unsigned char *)a1 + 64);
  unint64_t v4 = *((unsigned __int8 *)a1 + 16) | ((unint64_t)*((unsigned __int16 *)a1 + 9) << 16);
  long long v6 = *a1;
  unint64_t v7 = v4;
  long long v8 = *(long long *)((char *)a1 + 24);
  long long v9 = *(long long *)((char *)a1 + 40);
  uint64_t v10 = v2;
  char v11 = v3;
  return a2(&v6);
}

uint64_t sub_100684900(uint64_t a1, uint64_t (*a2)(_OWORD *))
{
  static os_log_type_t.error.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101342130;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v4 = String.init<A>(describing:)();
  uint64_t v6 = v5;
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_10000B4CC();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v6;
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  unint64_t v7 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  v9[0] = xmmword_101364E30;
  memset(&v9[1], 0, 48);
  char v10 = 0;
  return a2(v9);
}

uint64_t sub_100684A34(void *a1, void *a2, uint64_t a3)
{
  id v76 = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016511A0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v77 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  long long v9 = (char *)&v63 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v85 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v81 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v63 - v13;
  uint64_t v15 = sub_10000588C(&qword_10163BBA0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v78 = (uint64_t)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v63 - v18;
  uint64_t v20 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v80 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v63 - v23;
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v83 = *(void *)(v25 - 8);
  uint64_t v84 = v25;
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v72 = (char *)&v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v82 = (char *)&v63 - v28;
  uint64_t v29 = *(void *)(a3 + 280);
  uint64_t v31 = a1[3];
  uint64_t v30 = a1[4];
  sub_10001CD44(a1, v31);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v30 + 8) + 8) + 32))(v31);
  uint64_t v75 = v29;
  sub_100AE9138((uint64_t)v14, (uint64_t)v9);
  uint64_t v32 = sub_10000588C(&qword_1016511B0);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  uint64_t v74 = v33 + 48;
  if (v34(v9, 1, v32) == 1)
  {
    sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_1016511A0);
    uint64_t v35 = type metadata accessor for BeaconStatus(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v19, 1, 1, v35);
  }
  else
  {
    sub_1006CD470((uint64_t)v9, (uint64_t)v19, type metadata accessor for BeaconStatus);
    uint64_t v35 = type metadata accessor for BeaconStatus(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v19, 0, 1, v35);
  }
  uint64_t v36 = *(void (**)(char *, uint64_t))(v85 + 8);
  uint64_t v79 = v10;
  v85 += 8;
  uint64_t v73 = v36;
  v36(v14, v10);
  type metadata accessor for BeaconStatus(0);
  uint64_t v37 = *(void *)(v35 - 8);
  uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
  if (v38(v19, 1, v35) == 1)
  {
    sub_10001DAB4((uint64_t)v19, &qword_10163BBA0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v24, 1, 1, v84);
LABEL_7:
    uint64_t v42 = (uint64_t)v24;
    goto LABEL_15;
  }
  Swift::String v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v34;
  uint64_t v39 = &v19[*(int *)(v35 + 24)];
  unint64_t v41 = (void *)v83;
  uint64_t v40 = v84;
  unint64_t v67 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
  uint64_t v68 = v83 + 16;
  v67(v24, v39, v84);
  sub_1006CCE04((uint64_t)v19, type metadata accessor for BeaconStatus);
  uint64_t v69 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v41[7];
  uint64_t v70 = v41 + 7;
  v69(v24, 0, 1, v40);
  uint64_t v66 = (unsigned int (*)(char *, uint64_t, uint64_t))v41[6];
  if (v66(v24, 1, v40) == 1) {
    goto LABEL_7;
  }
  uint64_t v43 = (void (*)(char *, char *, uint64_t))v41[4];
  Class v65 = v41 + 4;
  unint64_t v64 = v43;
  v43(v82, v24, v40);
  uint64_t v44 = v76[3];
  uint64_t v45 = v76[4];
  sub_10001CD44(v76, v44);
  uint64_t v46 = (uint64_t)v81;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v45 + 8) + 8) + 32))(v44);
  uint64_t v47 = v77;
  sub_100AE9138(v46, v77);
  uint64_t v48 = v47;
  int v49 = v71(v47, 1, v32);
  unint64_t v50 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
  if (v49 == 1)
  {
    sub_10001DAB4(v48, (uint64_t *)&unk_1016511A0);
    uint64_t v51 = 1;
    unint64_t v52 = v80;
    uint64_t v53 = v78;
  }
  else
  {
    uint64_t v53 = v78;
    sub_1006CD470(v48, v78, type metadata accessor for BeaconStatus);
    uint64_t v51 = 0;
    unint64_t v52 = v80;
  }
  (*v50)(v53, v51, 1, v35);
  v73(v81, v79);
  unsigned int v54 = v38((char *)v53, 1, v35);
  uint64_t v55 = v84;
  if (v54 == 1)
  {
    sub_10001DAB4(v53, &qword_10163BBA0);
    v69(v52, 1, 1, v55);
    uint64_t v56 = v83;
  }
  else
  {
    v67(v52, (char *)(v53 + *(int *)(v35 + 24)), v84);
    sub_1006CCE04(v53, type metadata accessor for BeaconStatus);
    v69(v52, 0, 1, v55);
    unsigned int v57 = v66(v52, 1, v55);
    uint64_t v56 = v83;
    if (v57 != 1)
    {
      unint64_t v60 = v72;
      v64(v72, v52, v55);
      id v61 = v82;
      char v58 = static Date.> infix(_:_:)();
      Class v62 = *(void (**)(char *, uint64_t))(v56 + 8);
      v62(v60, v55);
      v62(v61, v55);
      return v58 & 1;
    }
  }
  (*(void (**)(char *, uint64_t))(v56 + 8))(v82, v55);
  uint64_t v42 = (uint64_t)v52;
LABEL_15:
  sub_10001DAB4(v42, (uint64_t *)&unk_10163AC90);
  char v58 = 0;
  return v58 & 1;
}

void *sub_100685260(void *a1, uint64_t a2)
{
  uint64_t v4 = v3;
  unint64_t v5 = v2;
  uint64_t v97 = type metadata accessor for TimeBasedKey();
  int64_t v8 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TimeBasedKeysCriteria();
  __chkstk_darwin(v11);
  uint64_t v13 = (uint64_t *)((char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_101636CD8 != -1) {
    goto LABEL_63;
  }
  while (1)
  {
    uint64_t v14 = v4;
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v15 = (uint64_t)v100;
    if (a2 == 2)
    {
      uint64_t v95 = v11;
      a2 = sub_1010ABFD4((uint64_t)v100);
      uint64_t v21 = sub_1010ABFE8(v15);
    }
    else
    {
      if (a2 != 1)
      {
        swift_bridgeObjectRelease();
        if (qword_101636BE0 == -1)
        {
LABEL_5:
          uint64_t v16 = type metadata accessor for Logger();
          sub_100010324(v16, (uint64_t)qword_10170E0E8);
          uint64_t v17 = Logger.logObject.getter();
          os_log_type_t v18 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v17, v18))
          {
            uint64_t v19 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v19 = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, v18, "_offlineAdvertisingKeys called for .invalid reason!", v19, 2u);
            swift_slowDealloc();
          }

          return _swiftEmptyArrayStorage;
        }
LABEL_65:
        swift_once();
        goto LABEL_5;
      }
      uint64_t v95 = v11;
      a2 = sub_1010ABFAC((uint64_t)v100);
      uint64_t v21 = sub_1010ABFC0(v15);
    }
    uint64_t v11 = v21;
    swift_bridgeObjectRelease();
    unint64_t v22 = *(void *)(v5 + 280);
    type metadata accessor for BeaconKeyManager(0);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    unint64_t v23 = (unint64_t)v100;
    uint64_t v96 = (uint64_t)a1;
    a1 = (void *)sub_101311650((uint64_t)a1, (uint64_t)v100);
    swift_release();
    uint64_t v24 = (char *)a1 + a2;
    if (__CFADD__(a1, a2))
    {
      __break(1u);
      goto LABEL_65;
    }
    BOOL v25 = __CFADD__(v24, v11);
    uint64_t v26 = &v24[v11];
    if (v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    unint64_t v23 = (unint64_t)(v26 - 1);
    if (!v26) {
      goto LABEL_67;
    }
    if (v23 >= (unint64_t)a1)
    {
      uint64_t v93 = v14;
      unint64_t v94 = v22;
      int64_t v90 = v8;
      if (qword_101636BE0 == -1) {
        goto LABEL_15;
      }
      goto LABEL_69;
    }
LABEL_68:
    __break(1u);
LABEL_69:
    swift_once();
LABEL_15:
    uint64_t v27 = type metadata accessor for Logger();
    uint64_t v28 = (void *)sub_100010324(v27, (uint64_t)qword_10170E0E8);
    uint64_t v29 = Logger.logObject.getter();
    uint64_t v30 = static os_log_type_t.info.getter();
    BOOL v31 = os_log_type_enabled(v29, (os_log_type_t)v30);
    uint64_t v91 = v28;
    if (v31)
    {
      long long v92 = v13;
      unint64_t v32 = swift_slowAlloc();
      uint64_t v33 = (void *)swift_slowAlloc();
      uint64_t v104 = v33;
      *(_DWORD *)unint64_t v32 = 134218242;
      if (__CFADD__(a2, v11))
      {
        __break(1u);
        goto LABEL_71;
      }
      uint64_t v100 = (void *)(a2 + v11);
      uint64_t v88 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 12) = 2080;
      unint64_t v87 = v32 + 14;
      unint64_t v98 = v23;
      uint64_t v99 = a1;
      uint64_t v100 = 0;
      unint64_t v101 = 0xE000000000000000;
      unint64_t v89 = v23;
      _print_unlocked<A, B>(_:_:)();
      v34._countAndFlagsBits = 3026478;
      v34._object = (void *)0xE300000000000000;
      String.append(_:)(v34);
      _print_unlocked<A, B>(_:_:)();
      uint64_t v100 = (void *)sub_1008FA0F0((uint64_t)v100, v101, (uint64_t *)&v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v23 = v89;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v30, "Getting %llu keys in range: %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v13 = v92;
    }
    else
    {
    }
    *uint64_t v13 = sub_100710F3C(a1, v23);
    swift_storeEnumTagMultiPayload();
    uint64_t v102 = type metadata accessor for OwnedBeaconRecord();
    uint64_t v103 = sub_100691B60(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
    uint64_t v35 = sub_10001D958((uint64_t *)&v100);
    sub_1006CC8F8(v96, (uint64_t)v35, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v36 = v93;
    uint64_t v20 = sub_100B032EC(&v100, (uint64_t)v13);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v100);
    if (v36)
    {
      sub_1006CCE04((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for TimeBasedKeysCriteria);
      return v20;
    }
    long long v92 = v13;
    unint64_t v5 = (unint64_t)sub_100656354((uint64_t)v20);
    uint64_t v4 = 0;
    swift_bridgeObjectRelease();
    int64_t v8 = *(void *)(v5 + 16);
    uint64_t v86 = a2;
    if (v8)
    {
      uint64_t v95 = v11;
      uint64_t v104 = _swiftEmptyArrayStorage;
      sub_1000B765C(0, v8, 0);
      uint64_t v37 = *(unsigned __int8 *)(v90 + 80);
      unint64_t v94 = v5;
      a2 = v5 + ((v37 + 32) & ~v37);
      uint64_t v96 = *(void *)(v90 + 72);
      while (2)
      {
        sub_1006CC8F8(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        uint64_t v38 = &v10[*(int *)(v97 + 24)];
        uint64_t v39 = *((void *)v38 + 2);
        uint64_t v13 = (void *)*((void *)v38 + 3);
        sub_1000361E0(v39, (unint64_t)v13);
        uint64_t v11 = sub_100A948F8(v39, (unint64_t)v13);
        uint64_t v4 = 0;
        a1 = (void *)sub_100A90C58(v11, 0);
        unint64_t v5 = v40;
        CCECCryptorRelease();
        sub_10001CFB8(v39, (unint64_t)v13);
        unint64_t v41 = v5 >> 62;
        switch(v5 >> 62)
        {
          case 1uLL:
            LODWORD(v42) = HIDWORD(a1) - a1;
            if (__OFSUB__(HIDWORD(a1), a1)) {
              goto LABEL_61;
            }
            uint64_t v42 = (int)v42;
LABEL_30:
            if (v42 != 28)
            {
              if (v41 == 1)
              {
                LODWORD(v41) = HIDWORD(a1) - a1;
                if (!__OFSUB__(HIDWORD(a1), a1))
                {
                  while (1)
                  {
                    uint64_t v76 = (int)v41;
LABEL_87:
                    sub_10013019C();
                    uint64_t v81 = swift_allocError();
                    *(void *)uint64_t v83 = 28;
                    *(void *)(v83 + 8) = v76;
                    *(unsigned char *)(v83 + 16) = 0;
                    swift_willThrow();
LABEL_88:
                    sub_10001CFB8((uint64_t)a1, v5);
                    uint64_t v100 = 0;
                    unint64_t v101 = 0xE000000000000000;
                    _StringGuts.grow(_:)(35);
                    v84._object = (void *)0x80000001013F3B70;
                    v84._countAndFlagsBits = 0xD000000000000021;
                    String.append(_:)(v84);
                    uint64_t v99 = (void *)v81;
                    sub_10000588C(&qword_101638D40);
                    _print_unlocked<A, B>(_:_:)();
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                  }
                }
                __break(1u);
              }
              if (v41 == 2)
              {
                uint64_t v75 = a1[2];
                uint64_t v74 = a1[3];
                uint64_t v76 = v74 - v75;
                if (__OFSUB__(v74, v75))
                {
                  __break(1u);
                  static os_log_type_t.error.getter();
                  if (qword_101636F48 != -1) {
                    swift_once();
                  }
                  sub_10000588C((uint64_t *)&unk_10163AD00);
                  uint64_t v77 = swift_allocObject();
                  *(_OWORD *)(v77 + 16) = xmmword_101342130;
                  uint64_t v100 = (void *)v76;
                  swift_errorRetain();
                  sub_10000588C(&qword_101638D40);
                  uint64_t v78 = String.init<A>(describing:)();
                  uint64_t v80 = v79;
                  *(void *)(v77 + 56) = &type metadata for String;
                  *(void *)(v77 + 64) = sub_10000B4CC();
                  *(void *)(v77 + 32) = v78;
                  *(void *)(v77 + 40) = v80;
                  os_log(_:dso:log:_:_:)();
                  swift_bridgeObjectRelease();
                  sub_100130148();
                  uint64_t v81 = swift_allocError();
                  *uint64_t v82 = 0;
                  swift_willThrow();
                  swift_errorRelease();
                  unint64_t v5 = (unint64_t)v13;
                  a1 = (void *)v39;
                  goto LABEL_88;
                }
              }
              else
              {
                uint64_t v76 = BYTE6(v5);
              }
              goto LABEL_87;
            }
            sub_1006CCE04((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            uint64_t v28 = v104;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1000B765C(0, v28[2] + 1, 1);
              uint64_t v28 = v104;
            }
            unint64_t v47 = v28[2];
            unint64_t v46 = v28[3];
            uint64_t v13 = (void *)(v47 + 1);
            if (v47 >= v46 >> 1)
            {
              sub_1000B765C(v46 > 1, v47 + 1, 1);
              uint64_t v28 = v104;
            }
            v28[2] = v13;
            uint64_t v48 = &v28[2 * v47];
            v48[4] = a1;
            v48[5] = v5;
            a2 += v96;
            if (--v8) {
              continue;
            }
            swift_bridgeObjectRelease();
            uint64_t v11 = v95;
            a2 = v86;
            if ((v86 & 0x8000000000000000) == 0) {
              goto LABEL_37;
            }
            goto LABEL_60;
          case 2uLL:
            uint64_t v44 = a1[2];
            uint64_t v43 = a1[3];
            BOOL v45 = __OFSUB__(v43, v44);
            uint64_t v42 = v43 - v44;
            if (!v45) {
              goto LABEL_30;
            }
            goto LABEL_62;
          case 3uLL:
            uint64_t v76 = 0;
            goto LABEL_87;
          default:
            uint64_t v42 = BYTE6(v5);
            goto LABEL_30;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v28 = _swiftEmptyArrayStorage;
    if ((a2 & 0x8000000000000000) == 0) {
      break;
    }
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    swift_once();
  }
LABEL_37:
  uint64_t v29 = sub_100435CCC(a2, (uint64_t)v28);
  a2 = v49;
  uint64_t v30 = v50;
  unint64_t v32 = v51;
  if (v51)
  {
    a1 = (void *)v11;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v52 = (void *)swift_dynamicCastClass();
    if (!v52)
    {
      swift_unknownObjectRelease();
      unint64_t v52 = _swiftEmptyArrayStorage;
    }
    uint64_t v53 = v52[2];
    swift_release();
    if (__OFSUB__(v32 >> 1, v30)) {
      goto LABEL_72;
    }
    if (v53 != (v32 >> 1) - v30) {
      goto LABEL_73;
    }
    a2 = swift_dynamicCastClass();
    if (!a2)
    {
      swift_unknownObjectRelease();
      a2 = (uint64_t)_swiftEmptyArrayStorage;
    }
    goto LABEL_46;
  }
  swift_bridgeObjectRetain();
  while (1)
  {
    a2 = (uint64_t)sub_100710DC8((uint64_t)v29, a2, v30, v32);
LABEL_46:
    swift_unknownObjectRelease();
    if ((v11 & 0x8000000000000000) == 0) {
      break;
    }
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    swift_unknownObjectRelease();
    uint64_t v11 = (uint64_t)a1;
  }
  uint64_t v54 = sub_1008861E4(v11, (uint64_t)v28);
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  unint64_t v60 = v59;
  if (v59)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    id v61 = (void *)swift_dynamicCastClass();
    if (!v61)
    {
      swift_unknownObjectRelease();
      id v61 = _swiftEmptyArrayStorage;
    }
    uint64_t v62 = v61[2];
    swift_release();
    if (__OFSUB__(v60 >> 1, v58))
    {
      __break(1u);
    }
    else if (v62 == (v60 >> 1) - v58)
    {
      if (!swift_dynamicCastClass()) {
        swift_unknownObjectRelease();
      }
      goto LABEL_55;
    }
    swift_unknownObjectRelease();
  }
  sub_100710DC8(v54, v56, v58, v60);
LABEL_55:
  swift_unknownObjectRelease();
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = swift_slowAlloc();
    *(_DWORD *)uint64_t v65 = 134218240;
    uint64_t v100 = (void *)v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v65 + 12) = 2048;
    uint64_t v100 = (void *)v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Returning %llu shortInterval keys and %llu longInterval keys", (uint8_t *)v65, 0x16u);
    swift_slowDealloc();
  }

  sub_10000588C(&qword_10166BD20);
  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_101364E40;
  id v67 = objc_allocWithZone((Class)SPOfflineAdvertisingKeys);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  id v69 = [v67 initWithInterval:15 keys:isa];

  *(void *)(v66 + 32) = v69;
  id v70 = objc_allocWithZone((Class)SPOfflineAdvertisingKeys);
  Class v71 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  id v72 = [v70 initWithInterval:1440 keys:v71];

  *(void *)(v66 + 40) = v72;
  uint64_t v100 = (void *)v66;
  specialized Array._endMutation()();
  uint64_t v20 = v100;
  sub_1006CCE04((uint64_t)v92, (uint64_t (*)(void))type metadata accessor for TimeBasedKeysCriteria);
  return v20;
}

uint64_t sub_100686050(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100685260(a4, a5);
    a2();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1006862B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1006CC8F8(a3, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_10001D010(a4, (uint64_t)v18);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v14 = (v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  sub_1006CD470((uint64_t)v12, v15 + v13, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_10001CEB0(v18, v15 + v14);
  *(unsigned char *)(v15 + v14 + 40) = a5;
  swift_retain();
  sub_100AB6E00(a3, (uint64_t)sub_1006C8B84, v15);
  return swift_release();
}

void sub_100686450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v117 = a5;
  uint64_t v123 = (char *)a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v119 = *(void *)(v7 - 8);
  uint64_t v120 = v7;
  __chkstk_darwin(v7);
  uint64_t v118 = (char *)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v9 = __chkstk_darwin(v122);
  uint64_t v115 = (uint64_t)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  os_log_t v114 = (os_log_t)((char *)&v112 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v116 = (uint64_t)&v112 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v121 = (uint64_t)&v112 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v112 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  unint64_t v22 = (char *)&v112 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  BOOL v25 = (char *)&v112 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v112 - v26;
  uint64_t v28 = sub_10000588C(&qword_1016428D8);
  __chkstk_darwin(v28);
  uint64_t v30 = (uint64_t *)((char *)&v112 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v30, &qword_1016428D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v31 = *v30;
    v126[0] = v31;
    swift_errorRetain();
    uint64_t v32 = sub_10000588C(&qword_101638D40);
    if (swift_dynamicCast())
    {
      if (v125 == 8)
      {
        if (qword_101636EF0 != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        sub_100010324(v33, (uint64_t)qword_10170E840);
        os_log_t v34 = v114;
        sub_1006CC8F8(a3, (uint64_t)v114, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        sub_10001D010((uint64_t)v123, (uint64_t)v126);
        uint64_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.default.getter();
        int v37 = v36;
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v38 = swift_slowAlloc();
          uint64_t v39 = swift_slowAlloc();
          uint64_t v123 = (char *)v39;
          *(_DWORD *)uint64_t v38 = 141558787;
          uint64_t v124 = 1752392040;
          uint64_t v125 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v38 + 12) = 2081;
          LODWORD(v122) = v37;
          sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v40 = v120;
          uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v124 = sub_1008FA0F0(v41, v42, &v125);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1006CCE04((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v38 + 22) = 2160;
          uint64_t v124 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v38 + 32) = 2081;
          uint64_t v44 = v127;
          uint64_t v43 = v128;
          sub_10001CD44(v126, v127);
          BOOL v45 = v118;
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v43 + 8) + 8) + 32))(v44);
          uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v48 = v47;
          (*(void (**)(char *, uint64_t))(v119 + 8))(v45, v40);
          uint64_t v124 = sub_1008FA0F0(v46, v48, &v125);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v126);
          _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v122, "Skipped saving outdated LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s.", (uint8_t *)v38, 0x2Au);
LABEL_16:
          swift_arrayDestroy();
          swift_slowDealloc();
LABEL_23:
          swift_slowDealloc();

          swift_errorRelease();
          return;
        }
        swift_errorRelease();
        sub_1006CCE04((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v126);
        goto LABEL_28;
      }
      if (qword_101636EF0 != -1) {
        swift_once();
      }
      uint64_t v94 = type metadata accessor for Logger();
      sub_100010324(v94, (uint64_t)qword_10170E840);
      uint64_t v95 = v115;
      sub_1006CC8F8(a3, v115, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      sub_10001D010((uint64_t)v123, (uint64_t)v126);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v96 = static os_log_type_t.error.getter();
      int v97 = v96;
      if (os_log_type_enabled(v35, v96))
      {
        uint64_t v98 = swift_slowAlloc();
        uint64_t v99 = swift_slowAlloc();
        uint64_t v121 = v99;
        *(_DWORD *)uint64_t v98 = 141559043;
        uint64_t v124 = 1752392040;
        uint64_t v125 = v99;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v98 + 12) = 2081;
        uint64_t v123 = (char *)v32;
        LODWORD(v122) = v97;
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v100 = v120;
        uint64_t v101 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v124 = sub_1008FA0F0(v101, v102, &v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1006CCE04(v95, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v98 + 22) = 2160;
        uint64_t v124 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v98 + 32) = 2081;
        uint64_t v104 = v127;
        uint64_t v103 = v128;
        sub_10001CD44(v126, v127);
        uint64_t v105 = v118;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v103 + 8) + 8) + 32))(v104);
        uint64_t v106 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v108 = v107;
        (*(void (**)(char *, uint64_t))(v119 + 8))(v105, v100);
        uint64_t v124 = sub_1008FA0F0(v106, v108, &v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v126);
        *(_WORD *)(v98 + 42) = 2082;
        uint64_t v124 = v31;
        swift_errorRetain();
        uint64_t v109 = String.init<A>(describing:)();
        uint64_t v124 = sub_1008FA0F0(v109, v110, &v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v122, "Failed to save LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s: %{public}s.", (uint8_t *)v98, 0x34u);
        swift_arrayDestroy();
        swift_slowDealloc();
        goto LABEL_23;
      }
      swift_errorRelease();
      uint64_t v111 = v95;
    }
    else
    {
      if (qword_101636EF0 != -1) {
        swift_once();
      }
      uint64_t v76 = type metadata accessor for Logger();
      sub_100010324(v76, (uint64_t)qword_10170E840);
      uint64_t v77 = v116;
      sub_1006CC8F8(a3, v116, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      sub_10001D010((uint64_t)v123, (uint64_t)v126);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.error.getter();
      int v79 = v78;
      if (os_log_type_enabled(v35, v78))
      {
        uint64_t v80 = swift_slowAlloc();
        uint64_t v123 = (char *)v32;
        uint64_t v81 = v80;
        uint64_t v82 = swift_slowAlloc();
        uint64_t v121 = v82;
        *(_DWORD *)uint64_t v81 = 141559043;
        uint64_t v124 = 1752392040;
        uint64_t v125 = v82;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v81 + 12) = 2081;
        LODWORD(v122) = v79;
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v83 = v120;
        uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v124 = sub_1008FA0F0(v84, v85, &v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1006CCE04(v77, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v81 + 22) = 2160;
        uint64_t v124 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v81 + 32) = 2081;
        uint64_t v87 = v127;
        uint64_t v86 = v128;
        sub_10001CD44(v126, v127);
        uint64_t v88 = v118;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v86 + 8) + 8) + 32))(v87);
        uint64_t v89 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v91 = v90;
        (*(void (**)(char *, uint64_t))(v119 + 8))(v88, v83);
        uint64_t v124 = sub_1008FA0F0(v89, v91, &v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v126);
        *(_WORD *)(v81 + 42) = 2082;
        uint64_t v124 = v31;
        swift_errorRetain();
        uint64_t v92 = String.init<A>(describing:)();
        uint64_t v124 = sub_1008FA0F0(v92, v93, &v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v122, "Failed to save LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s: %{public}s.", (uint8_t *)v81, 0x34u);
        goto LABEL_16;
      }
      swift_errorRelease();
      uint64_t v111 = v77;
    }
    sub_1006CCE04(v111, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v126);
    swift_errorRelease();
    swift_errorRelease();
LABEL_28:

    return;
  }
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_100010324(v49, (uint64_t)qword_10170E840);
  sub_1006CC8F8(a3, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_10001D010((uint64_t)v123, (uint64_t)v126);
  uint64_t v123 = v25;
  sub_1006CC8F8(a3, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_1006CC8F8(a3, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_1006CC8F8(a3, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  uint64_t v50 = v121;
  sub_1006CC8F8(a3, v121, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  unint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  int v53 = v52;
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v54 = swift_slowAlloc();
    LODWORD(v115) = v53;
    uint64_t v55 = v54;
    uint64_t v56 = swift_slowAlloc();
    uint64_t v116 = v56;
    *(_DWORD *)uint64_t v55 = 141560067;
    uint64_t v124 = 1752392040;
    uint64_t v125 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v112 = v22;
    *(_WORD *)(v55 + 12) = 2081;
    os_log_t v114 = v51;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v113 = v19;
    uint64_t v57 = v120;
    uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v124 = sub_1008FA0F0(v58, v59, &v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006CCE04((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v55 + 22) = 2160;
    uint64_t v124 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v55 + 32) = 2081;
    uint64_t v61 = v127;
    uint64_t v60 = v128;
    sub_10001CD44(v126, v127);
    uint64_t v62 = v118;
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v60 + 8) + 8) + 32))(v61);
    uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v65 = v64;
    (*(void (**)(char *, uint64_t))(v119 + 8))(v62, v57);
    uint64_t v124 = sub_1008FA0F0(v63, v65, &v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v126);
    *(_WORD *)(v55 + 42) = 2082;
    unint64_t v66 = sub_10041F334(v117);
    uint64_t v124 = sub_1008FA0F0(v66, v67, &v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v55 + 52) = 2082;
    id v69 = (int *)v122;
    uint64_t v68 = (uint64_t)v123;
    type metadata accessor for Date();
    sub_100691B60((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v124 = sub_1008FA0F0(v70, v71, &v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006CCE04(v68, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v55 + 62) = 2049;
    uint64_t v72 = (uint64_t)v112;
    uint64_t v124 = *(void *)&v112[v69[7]];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1006CCE04(v72, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v55 + 72) = 2049;
    uint64_t v73 = (uint64_t)v113;
    uint64_t v124 = *(void *)&v113[v69[8]];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1006CCE04(v73, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v55 + 82) = 2050;
    uint64_t v74 = v121;
    uint64_t v124 = *(void *)(v121 + v69[9]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1006CCE04(v74, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    os_log_t v75 = v114;
    _os_log_impl((void *)&_mh_execute_header, v114, (os_log_type_t)v115, "Saved LKL LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s, source: %{public}s, timestamp: %{public}s, lat: %{private}f, lon: %{private}f, acc: %{public}f.", (uint8_t *)v55, 0x5Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1006CCE04((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v126);
    sub_1006CCE04((uint64_t)v123, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_1006CCE04((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_1006CCE04((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_1006CCE04(v50, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  }
  sub_10001DAB4((uint64_t)v30, &qword_1016428D8);
}

uint64_t sub_100687620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v36 = a7;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v32 = a1;
  uint64_t v33 = a4;
  uint64_t v30 = a2;
  uint64_t v39 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v42 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v38 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v10 - 8);
  uint64_t v41 = v10;
  __chkstk_darwin(v10);
  uint64_t v31 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *(void *)(a2 + 48);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v17 = (v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v20 + v16, v15, v12);
  uint64_t v21 = v34;
  *(void *)(v20 + v17) = v33;
  *(void *)(v20 + v18) = v30;
  *(void *)(v20 + v19) = v32;
  unint64_t v22 = v20 + ((v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = v35;
  *(void *)unint64_t v22 = v21;
  *(void *)(v22 + 8) = v23;
  *(unsigned char *)(v22 + 16) = v36;
  aBlock[4] = sub_1006C5EFC;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CF608;
  uint64_t v24 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  BOOL v25 = v31;
  static DispatchQoS.unspecified.getter();
  aBlock[8] = _swiftEmptyArrayStorage;
  sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v27 = v38;
  uint64_t v26 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v27, v26);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v25, v41);
  return swift_release();
}

void sub_100687A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6, int a7)
{
  int v70 = a7;
  uint64_t v84 = a2;
  uint64_t v85 = a6;
  uint64_t v80 = a4;
  uint64_t v72 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v72);
  uint64_t v74 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v11 - 8);
  uint64_t v73 = (uint64_t)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v78 = *(void *)(v16 - 8);
  uint64_t v79 = v16;
  __chkstk_darwin(v16);
  uint64_t v71 = (uint64_t)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v18 - 8);
  uint64_t v83 = (uint64_t)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v81 = *(void *)(v20 - 8);
  uint64_t v82 = v20;
  __chkstk_darwin(v20);
  uint64_t v77 = (uint64_t)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v63 - v27;
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v30 = sub_100010324(v29, (uint64_t)qword_10170E840);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v86 = a1;
  uint64_t v68 = v23 + 16;
  unint64_t v67 = v31;
  v31(v28, a1, v22);
  uint64_t v69 = v30;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v75 = v23;
  uint64_t v76 = v22;
  if (v34)
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v65 = a3;
    uint64_t v36 = v35;
    uint64_t v37 = swift_slowAlloc();
    unint64_t v66 = a5;
    uint64_t v63 = v37;
    *(_DWORD *)uint64_t v36 = 141558531;
    uint64_t v87 = 1752392040;
    v88[0] = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 12) = 2081;
    unint64_t v64 = v15;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v87 = sub_1008FA0F0(v38, v39, v88);
    uint64_t v15 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v23 + 8);
    v40(v28, v22);
    *(_WORD *)(v36 + 22) = 2048;
    uint64_t v41 = v84;
    uint64_t v87 = v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "createDuplicateBeacons uuid: %{private,mask.hash}s count:%ld", (uint8_t *)v36, 0x20u);
    swift_arrayDestroy();
    a5 = v66;
    swift_slowDealloc();
    a3 = v65;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v40 = *(void (**)(char *, uint64_t))(v23 + 8);
    v40(v28, v22);

    uint64_t v41 = v84;
  }
  uint64_t v42 = *(void *)(a3 + 280);
  uint64_t v43 = v83;
  uint64_t v44 = v86;
  sub_100AE75E0(v86, v83);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v43, 1, v82) != 1)
  {
    uint64_t v52 = v77;
    sub_1006CD470(v43, v77, type metadata accessor for OwnedBeaconGroup);
    int v53 = (void *)swift_allocObject();
    v53[2] = v80;
    v53[3] = a5;
    v53[4] = v85;
    swift_retain();
    swift_retain();
    sub_1006884D0(v52, v41, (uint64_t)sub_1006CD5F0, (uint64_t)v53);
    swift_release();
    uint64_t v54 = type metadata accessor for OwnedBeaconGroup;
    uint64_t v55 = v52;
LABEL_17:
    sub_1006CCE04(v55, v54);
    return;
  }
  sub_10001DAB4(v43, &qword_10163BB20);
  sub_100ACD178((uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v15, 1, v79) != 1)
  {
    uint64_t v56 = v71;
    sub_1006CD470((uint64_t)v15, v71, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v57 = v73;
    if (v70) {
      uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v73, 1, 1, v76);
    }
    else {
      uint64_t v58 = sub_10001D074(v56 + *(int *)(v79 + 28), v73, &qword_101638CF0);
    }
    __chkstk_darwin(v58);
    uint64_t v60 = v86;
    *(&v63 - 2) = v42;
    *(&v63 - 1) = v60;
    uint64_t v61 = (uint64_t)v74;
    QueueSynchronizer.conditionalSync<A>(_:)();
    uint64_t v62 = (void *)swift_allocObject();
    v62[2] = v80;
    v62[3] = a5;
    v62[4] = v85;
    swift_retain();
    swift_retain();
    sub_1006894DC(v56, v61, v57, v41, (uint64_t)sub_1006C5FBC, (uint64_t)v62);
    swift_release();
    sub_10001DAB4(v61, &qword_10163B9E0);
    sub_10001DAB4(v57, &qword_101638CF0);
    uint64_t v54 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
    uint64_t v55 = v56;
    goto LABEL_17;
  }
  sub_10001DAB4((uint64_t)v15, &qword_10163B9F0);
  uint64_t v45 = v76;
  v67(v26, v44, v76);
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    uint64_t v86 = v49;
    *(_DWORD *)uint64_t v48 = 141558275;
    uint64_t v87 = 1752392040;
    v88[0] = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v48 + 12) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v87 = sub_1008FA0F0(v50, v51, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v40(v26, v45);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "No beaconGroup or beacon found for %{private,mask.hash}s", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v40(v26, v45);
  }

  type metadata accessor for SPOwnerSessionError(0);
  uint64_t v87 = 2;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100691B60(&qword_101638460, type metadata accessor for SPOwnerSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  unint64_t v59 = (void *)v88[0];
  a5(v88[0]);
}

void sub_1006884D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v100 = a4;
  uint64_t v99 = a3;
  uint64_t v120 = a1;
  uint64_t v98 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v129 = *(char **)(v98 - 8);
  __chkstk_darwin(v98);
  int v97 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for DispatchQoS();
  uint64_t v128 = *(char **)(v109 - 8);
  __chkstk_darwin(v109);
  os_log_type_t v96 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v95 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  uint64_t v94 = v10;
  uint64_t v93 = (uint64_t)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v11 - 8);
  uint64_t v92 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v13 - 8);
  uint64_t v81 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for BeaconNamingRecord();
  uint64_t v131 = *(void (***)(uint64_t, char *, uint64_t))(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v130 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v17 - 8);
  uint64_t v84 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_10000588C(&qword_10163A950);
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v20 = (char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for UUID();
  uint64_t v110 = *(void *)(v134 - 8);
  uint64_t v21 = *(void *)(v110 + 64);
  uint64_t v22 = __chkstk_darwin(v134);
  unint64_t v91 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v132 = (char *)&v80 - v23;
  uint64_t v24 = type metadata accessor for DispatchPredicate();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (uint64_t *)((char *)&v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = *(void **)(v5 + 48);
  *uint64_t v27 = v28;
  uint64_t v29 = *(void (**)(void))(v25 + 104);
  unsigned int v116 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v115 = v25 + 104;
  os_log_t v114 = (void (*)(void *, void, uint64_t))v29;
  v29(v27);
  id v113 = v28;
  char v30 = _dispatchPreconditionTest(_:)();
  uint64_t v31 = *(void (**)(void *, uint64_t))(v25 + 8);
  int v117 = v27;
  uint64_t v118 = v25 + 8;
  uint64_t v112 = v31;
  v31(v27, v24);
  if ((v30 & 1) == 0) {
    goto LABEL_21;
  }
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = 0;
  dispatch_group_t v101 = dispatch_group_create();
  if (a2 < 0)
  {
LABEL_22:
    __break(1u);
  }
  else
  {
    if (a2)
    {
      uint64_t v33 = 0;
      uint64_t v121 = 0;
      uint64_t v111 = (void (**)(char *, uint64_t))(v110 + 8);
      uint64_t v88 = v21 + 7;
      uint64_t v87 = v110 + 32;
      unint64_t v108 = &v137;
      uint64_t v86 = (void (**)(char *, uint64_t))(v129 + 8);
      uint64_t v85 = (void **)(v128 + 8);
      uint64_t v129 = v20;
      BOOL v34 = v132;
      uint64_t v102 = v5;
      uint64_t v90 = a2;
      uint64_t v126 = v15;
      uint64_t v89 = v24;
      uint64_t v133 = v32;
      uint64_t v124 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v110 + 56);
      uint64_t v125 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v131 + 7);
      uint64_t v131 = (void (**)(uint64_t, char *, uint64_t))(v110 + 16);
      do
      {
        if (v33 == a2)
        {
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
        UUID.init()();
        uint64_t v36 = swift_allocObject();
        *(void *)(v36 + 16) = _swiftEmptyDictionarySingleton;
        dispatch_group_t v123 = dispatch_group_create();
        uint64_t v37 = v117;
        uint64_t v38 = v113;
        *int v117 = v113;
        v114(v37, v116, v24);
        id v119 = v38;
        LOBYTE(v38) = _dispatchPreconditionTest(_:)();
        v112(v37, v24);
        if ((v38 & 1) == 0) {
          goto LABEL_20;
        }
        uint64_t v122 = v36;
        uint64_t v39 = sub_1004D1434();
        swift_retain();
        uint64_t v40 = v121;
        uint64_t v41 = sub_1006ADB9C(v39, v5);
        swift_release();
        uint64_t v42 = v41[2];
        uint64_t v43 = *(void *)(v39 + 16);
        swift_bridgeObjectRelease();
        if (v42 == v43)
        {
          swift_retain();
          uint64_t v44 = sub_1006AF894((uint64_t)v41, v5);
          dispatch_group_t v35 = v123;
          if (!v40)
          {
            uint64_t v45 = v44;
            uint64_t v121 = 0;
            uint64_t v107 = v33;
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v46 = v45[2];
            uint64_t v47 = (uint64_t)v92;
            if (v46)
            {
              uint64_t v128 = &v129[*(int *)(v83 + 48)];
              uint64_t v48 = v82;
              uint64_t v49 = (uint64_t)v45
                  + ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80));
              uint64_t v106 = v45;
              swift_bridgeObjectRetain();
              uint64_t v127 = *(void (**)(char *, uint64_t))(v48 + 72);
              uint64_t v50 = v102;
              uint64_t v51 = (uint64_t)v81;
              uint64_t v52 = (uint64_t)v130;
              uint64_t v53 = (uint64_t)v84;
              uint64_t v54 = v122;
              uint64_t v55 = v123;
              do
              {
                uint64_t v56 = (uint64_t)v129;
                sub_10001D074(v49, (uint64_t)v129, &qword_10163A950);
                sub_1006CD470(v56, v53, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                sub_1006CD470((uint64_t)v128, v52, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
                dispatch_group_enter(v55);
                sub_1006CC8F8(v52, v51, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
                (*v125)(v51, 0, 1, v126);
                uint64_t v57 = v134;
                (*v131)(v47, v132, v134);
                (*v124)(v47, 0, 1, v57);
                uint64_t v58 = (void *)swift_allocObject();
                void v58[2] = v55;
                void v58[3] = v50;
                uint64_t v59 = v133;
                v58[4] = v54;
                v58[5] = v59;
                swift_retain();
                uint64_t v60 = v55;
                swift_retain();
                swift_retain();
                sub_10068C8A0(v53, v51, v47, (uint64_t)sub_1006C6074, (uint64_t)v58);
                uint64_t v52 = (uint64_t)v130;
                swift_release();
                sub_10001DAB4(v47, &qword_101638CF0);
                sub_10001DAB4(v51, &qword_10163B9E0);
                sub_1006CCE04(v52, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
                sub_1006CCE04(v53, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                v49 += (uint64_t)v127;
                --v46;
              }
              while (v46);
              uint64_t v45 = v106;
              swift_bridgeObjectRelease();
            }
            uint64_t v61 = v93;
            sub_1006CC8F8(v120, v93, type metadata accessor for OwnedBeaconGroup);
            uint64_t v62 = v110;
            uint64_t v63 = v91;
            uint64_t v64 = v134;
            (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v91, v132, v134);
            unint64_t v65 = (*(unsigned __int8 *)(v95 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80);
            uint64_t v66 = v62;
            unint64_t v67 = (v94 + *(unsigned __int8 *)(v62 + 80) + v65) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
            uint64_t v68 = v45;
            unint64_t v69 = (v88 + v67) & 0xFFFFFFFFFFFFFFF8;
            int v70 = (char *)swift_allocObject();
            *((void *)v70 + 2) = v122;
            *((void *)v70 + 3) = v68;
            dispatch_group_t v71 = v101;
            *((void *)v70 + 4) = v101;
            sub_1006CD470(v61, (uint64_t)&v70[v65], type metadata accessor for OwnedBeaconGroup);
            (*(void (**)(char *, char *, uint64_t))(v66 + 32))(&v70[v67], v63, v64);
            uint64_t v5 = v102;
            *(void *)&v70[v69] = v102;
            uint64_t v72 = v133;
            *(void *)&v70[(v69 + 15) & 0xFFFFFFFFFFFFFFF8] = v133;
            char v139 = sub_1006C6278;
            uint64_t v140 = v70;
            uint64_t aBlock = _NSConcreteStackBlock;
            uint64_t v136 = 1107296256;
            uint64_t v137 = sub_1004B5480;
            uint64_t v138 = &unk_1015CF720;
            uint64_t v73 = _Block_copy(&aBlock);
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v128 = v71;
            uint64_t v74 = v96;
            static DispatchQoS.unspecified.getter();
            uint64_t v141 = (uint64_t)_swiftEmptyArrayStorage;
            uint64_t v104 = sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
            uint64_t v103 = sub_10000588C((uint64_t *)&unk_10163F350);
            uint64_t v105 = sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
            uint64_t v75 = v97;
            uint64_t v76 = v98;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            OS_dispatch_group.notify(qos:flags:queue:execute:)();
            _Block_release(v73);
            uint64_t v127 = *v86;
            v127(v75, v76);
            uint64_t v106 = *v85;
            ((void (*)(char *, uint64_t))v106)(v74, v109);
            swift_release();
            uint64_t v77 = (char *)swift_allocObject();
            uint64_t v78 = v99;
            *((void *)v77 + 2) = v72;
            *((void *)v77 + 3) = v78;
            *((void *)v77 + 4) = v100;
            *((void *)v77 + 5) = v5;
            char v139 = sub_1006C6388;
            uint64_t v140 = v77;
            uint64_t aBlock = _NSConcreteStackBlock;
            uint64_t v136 = 1107296256;
            uint64_t v137 = sub_1004B5480;
            uint64_t v138 = &unk_1015CF770;
            uint64_t v79 = _Block_copy(&aBlock);
            swift_retain();
            swift_retain();
            swift_retain();
            static DispatchQoS.unspecified.getter();
            uint64_t v141 = (uint64_t)_swiftEmptyArrayStorage;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            OS_dispatch_group.notify(qos:flags:queue:execute:)();
            _Block_release(v79);

            v127(v75, v76);
            ((void (*)(char *, uint64_t))v106)(v74, v109);
            BOOL v34 = v132;
            (*(void (**)(char *, uint64_t))(v110 + 8))(v132, v134);
            swift_release();
            swift_release();
            a2 = v90;
            uint64_t v24 = v89;
            uint64_t v33 = v107;
            goto LABEL_7;
          }
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v121 = 0;
        }
        else
        {
          swift_bridgeObjectRelease();
          type metadata accessor for SPOwnerSessionError(0);
          uint64_t v141 = 2;
          sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
          sub_100691B60(&qword_101638460, type metadata accessor for SPOwnerSessionError);
          _BridgedStoredNSError.init(_:userInfo:)();
          swift_willThrow();
          uint64_t v121 = 0;
          dispatch_group_t v35 = v123;
        }
        (*v111)(v34, v134);

        swift_errorRelease();
        swift_release();
LABEL_7:
        ++v33;
      }
      while (v33 != a2);
    }
    swift_release();
  }
}

dispatch_group_t sub_1006894DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = a6;
  uint64_t v31 = a5;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v11 - 8);
  uint64_t v38 = v11;
  __chkstk_darwin(v11);
  dispatch_group_t v35 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *(void **)(v6 + 48);
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v32 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  dispatch_group_t result = (dispatch_group_t)(*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = 0;
  dispatch_group_t result = dispatch_group_create();
  if (a4 < 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  for (uint64_t i = result; a4; --a4)
  {
    dispatch_group_enter(i);
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = i;
    *(void *)(v23 + 24) = v21;
    uint64_t v24 = i;
    swift_retain();
    sub_10068C8A0(a1, a2, a3, (uint64_t)sub_1006C8918, v23);
    swift_release();
  }
  uint64_t v25 = (void *)swift_allocObject();
  uint64_t v26 = v31;
  v25[2] = v21;
  v25[3] = v26;
  v25[4] = v33;
  v25[5] = v6;
  aBlock[4] = sub_1006C6388;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015CF888;
  uint64_t v27 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = _swiftEmptyArrayStorage;
  sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v28 = v35;
  uint64_t v29 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v29);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v36);
  swift_release();
  return (dispatch_group_t)swift_release();
}

uint64_t sub_10068995C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 144) = a8;
  *(void *)(v8 + 152) = v13;
  *(void *)(v8 + 128) = a6;
  *(void *)(v8 + 136) = a7;
  *(unsigned char *)(v8 + 272) = a5;
  *(void *)(v8 + 120) = a4;
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v8 + 160) = v9;
  *(void *)(v8 + 168) = *(void *)(v9 - 8);
  *(void *)(v8 + 176) = swift_task_alloc();
  uint64_t v10 = sub_10000588C(&qword_10163D210);
  *(void *)(v8 + 184) = v10;
  *(void *)(v8 + 192) = *(void *)(v10 - 8);
  *(void *)(v8 + 200) = swift_task_alloc();
  return _swift_task_switch(sub_100689A90, 0, 0);
}

uint64_t sub_100689A90()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639168 + dword_101639168);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100689BE0;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100689BE0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100689CE0, 0, 0);
}

uint64_t sub_100689CE0()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 216))
  {
    uint64_t v2 = *(unsigned __int8 *)(v0 + 272);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    switch(v2)
    {
      case 1:
        (*(void (**)(void, void, void))(*(void *)(v0 + 168) + 16))(*(void *)(v0 + 176), *(void *)(v0 + 128), *(void *)(v0 + 160));
        type metadata accessor for Peripheral();
        Identifier.init(_:)();
        uint64_t v9 = (void *)swift_task_alloc();
        *(void *)(v0 + 224) = v9;
        *uint64_t v9 = v0;
        v9[1] = sub_10068A278;
        uint64_t v10 = *(void *)(v0 + 200);
        uint64_t v11 = *(void *)(v0 + 136);
        uint64_t result = sub_100D2E818(v10, v11);
        break;
      case 2:
        (*(void (**)(void, void, void))(*(void *)(v0 + 168) + 16))(*(void *)(v0 + 176), *(void *)(v0 + 128), *(void *)(v0 + 160));
        type metadata accessor for Peripheral();
        Identifier.init(_:)();
        uint64_t v12 = (void *)swift_task_alloc();
        *(void *)(v0 + 232) = v12;
        *uint64_t v12 = v0;
        v12[1] = sub_10068A3D0;
        uint64_t v13 = *(void *)(v0 + 200);
        uint64_t v14 = *(void *)(v0 + 136);
        uint64_t result = sub_100D2EE60(v13, v14);
        break;
      case 3:
        (*(void (**)(void, void, void))(*(void *)(v0 + 168) + 16))(*(void *)(v0 + 176), *(void *)(v0 + 128), *(void *)(v0 + 160));
        type metadata accessor for Peripheral();
        Identifier.init(_:)();
        uint64_t v15 = (void *)swift_task_alloc();
        *(void *)(v0 + 240) = v15;
        *uint64_t v15 = v0;
        v15[1] = sub_10068A528;
        uint64_t v16 = *(void *)(v0 + 200);
        uint64_t v17 = *(void *)(v0 + 136);
        uint64_t result = sub_100D2F33C(v16, v17);
        break;
      case 4:
        (*(void (**)(void, void, void))(*(void *)(v0 + 168) + 16))(*(void *)(v0 + 176), *(void *)(v0 + 128), *(void *)(v0 + 160));
        type metadata accessor for Peripheral();
        Identifier.init(_:)();
        uint64_t v18 = (void *)swift_task_alloc();
        *(void *)(v0 + 248) = v18;
        *uint64_t v18 = v0;
        v18[1] = sub_10068A680;
        uint64_t v19 = *(void *)(v0 + 200);
        uint64_t v20 = *(void *)(v0 + 136);
        uint64_t result = sub_100D2FA20(v19, v20);
        break;
      case 5:
        (*(void (**)(void, void, void))(*(void *)(v0 + 168) + 16))(*(void *)(v0 + 176), *(void *)(v0 + 128), *(void *)(v0 + 160));
        type metadata accessor for Peripheral();
        Identifier.init(_:)();
        uint64_t v21 = (void *)swift_task_alloc();
        *(void *)(v0 + 256) = v21;
        *uint64_t v21 = v0;
        v21[1] = sub_10068A860;
        uint64_t v22 = *(void *)(v0 + 200);
        uint64_t v23 = *(void *)(v0 + 136);
        uint64_t result = sub_100D2FEFC(v22, v23);
        break;
      case 6:
        (*(void (**)(void, void, void))(*(void *)(v0 + 168) + 16))(*(void *)(v0 + 176), *(void *)(v0 + 128), *(void *)(v0 + 160));
        type metadata accessor for Peripheral();
        Identifier.init(_:)();
        uint64_t v24 = (void *)swift_task_alloc();
        *(void *)(v0 + 264) = v24;
        *uint64_t v24 = v0;
        v24[1] = sub_10068A9B8;
        uint64_t v25 = *(void *)(v0 + 200);
        uint64_t v26 = *(void *)(v0 + 136);
        uint64_t result = sub_100D3170C(v25, v26);
        break;
      default:
        sub_1003A4778();
        uint64_t v3 = swift_allocError();
        *uint64_t v4 = 1;
        swift_willThrow();
        swift_release();
        goto LABEL_5;
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    uint64_t v3 = swift_allocError();
    *uint64_t v5 = 0xD000000000000014;
    v5[1] = 0x8000000101403410;
    swift_willThrow();
LABEL_5:
    uint64_t v6 = *(void (**)(uint64_t))(v0 + 144);
    swift_errorRetain();
    v6(v3);
    swift_errorRelease();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  return result;
}

uint64_t sub_10068A278()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 200);
  uint64_t v2 = *(void *)(*(void *)v0 + 192);
  uint64_t v3 = *(void *)(*(void *)v0 + 184);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1006CD6E4, 0, 0);
}

uint64_t sub_10068A3D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 200);
  uint64_t v2 = *(void *)(*(void *)v0 + 192);
  uint64_t v3 = *(void *)(*(void *)v0 + 184);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1006CD6E4, 0, 0);
}

uint64_t sub_10068A528()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 200);
  uint64_t v2 = *(void *)(*(void *)v0 + 192);
  uint64_t v3 = *(void *)(*(void *)v0 + 184);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1006CD6E4, 0, 0);
}

uint64_t sub_10068A680()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 200);
  uint64_t v2 = *(void *)(*(void *)v0 + 192);
  uint64_t v3 = *(void *)(*(void *)v0 + 184);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_10068A7D8, 0, 0);
}

uint64_t sub_10068A7D8()
{
  (*(void (**)(void))(v0 + 144))(0);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10068A860()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 200);
  uint64_t v2 = *(void *)(*(void *)v0 + 192);
  uint64_t v3 = *(void *)(*(void *)v0 + 184);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1006CD6E4, 0, 0);
}

uint64_t sub_10068A9B8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 200);
  uint64_t v2 = *(void *)(*(void *)v0 + 192);
  uint64_t v3 = *(void *)(*(void *)v0 + 184);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1006CD6E4, 0, 0);
}

uint64_t sub_10068AB10()
{
  v1[39] = v0;
  uint64_t v2 = type metadata accessor for KeySyncMetadata();
  v1[40] = v2;
  v1[41] = *(void *)(v2 - 8);
  v1[42] = swift_task_alloc();
  v1[43] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for KeySyncMetadataDisplay();
  v1[44] = v3;
  v1[45] = *(void *)(v3 - 8);
  v1[46] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_10163CE68);
  v1[47] = v4;
  v1[48] = *(void *)(v4 - 8);
  v1[49] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Table();
  v1[50] = v5;
  v1[51] = *(void *)(v5 - 8);
  v1[52] = swift_task_alloc();
  v1[53] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v1[54] = v6;
  v1[55] = *(void *)(v6 - 8);
  v1[56] = swift_task_alloc();
  v1[57] = swift_task_alloc();
  return _swift_task_switch(sub_10068AD74, 0, 0);
}

uint64_t sub_10068AD74()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 120))
  {
    sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 464) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10068AEC4;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10068AEC4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 472) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10068AFC4, 0, 0);
}

uint64_t sub_10068AFC4()
{
  uint64_t v1 = *(void *)(v0 + 472);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 176, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 200))
    {
      sub_10001CEB0((long long *)(v0 + 176), v0 + 136);
      sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
      uint64_t v6 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 480) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_10068B1B0;
      return v6();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v4 = 0xD000000000000017;
    v4[1] = 0x80000001013FB7A0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  return result;
}

uint64_t sub_10068B1B0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 488) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10068B2B0, 0, 0);
}

uint64_t sub_10068B2B0()
{
  uint64_t v1 = (uint64_t)(v0 + 17);
  if (v0[61])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v0[36] = _swiftEmptyArrayStorage;
    uint64_t v2 = v0[61];
    return _swift_task_switch(sub_10068B430, v2, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v3 = 0xD000000000000010;
    v3[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_10068B430()
{
  *(void *)(v0 + 496) = *(void *)(*(void *)(v0 + 488) + 136);
  swift_retain();
  return _swift_task_switch(sub_10068B4A4, 0, 0);
}

uint64_t sub_10068B4A4()
{
  uint64_t v2 = v0[61];
  uint64_t v1 = v0[62];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[63] = v3;
  v3[2] = v1;
  v3[3] = sub_1001D4090;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[64] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DD0);
  *uint64_t v4 = v0;
  v4[1] = sub_10068B5BC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 35, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1001D4098, v3, v5);
}

uint64_t sub_10068B5BC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 520) = *(void *)(v1 + 280);
  return _swift_task_switch(sub_10068B718, 0, 0);
}

uint64_t sub_10068B718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t (**)())(v3 + 520);
  uint64_t v5 = *((void *)v4 + 2);
  *(void *)(v3 + 528) = v5;
  if (v5)
  {
    *(_OWORD *)(v3 + 536) = 0u;
    if (*((void *)v4 + 2))
    {
      sub_10001D010((uint64_t)v4 + 32, v3 + 56);
      uint64_t v6 = *(void *)(v3 + 80);
      uint64_t v7 = *(void *)(v3 + 88);
      sub_10001CD44((void *)(v3 + 56), v6);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v7 + 8) + 8) + 32))(v6);
      a2 = *(void *)(v3 + 472);
      uint64_t v4 = sub_10068B8C4;
      a3 = 0;
    }
    else
    {
      __break(1u);
    }
    return _swift_task_switch(v4, a2, a3);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v8 = *(void *)(v3 + 288);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(uint64_t))(v3 + 8);
    return v9(v8);
  }
}

uint64_t sub_10068B8C4()
{
  if (!*(void *)(v0[59] + 128))
  {
    if (qword_101637480 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10166B720);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "No observation store on this platform!", v17, 2u);
      swift_slowDealloc();
    }

    sub_1005D4B14();
    uint64_t v13 = swift_allocError();
    swift_willThrow();
    goto LABEL_13;
  }
  uint64_t v24 = v0 + 27;
  uint64_t v1 = qword_1016374E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[49];
  uint64_t v4 = v0[47];
  uint64_t v3 = v0[48];
  uint64_t v5 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v5, (uint64_t)qword_10170F410);
  == infix<A>(_:_:)();
  QueryType.filter(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_10000588C(&qword_10163CE90);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_101342130;
  if (qword_1016375A8 != -1) {
    swift_once();
  }
  uint64_t v23 = v0[67];
  uint64_t v7 = v0[52];
  uint64_t v6 = v0[53];
  uint64_t v9 = v0[50];
  uint64_t v8 = v0[51];
  uint64_t v10 = sub_10000588C(&qword_10163CE98);
  sub_100010324(v10, (uint64_t)qword_10170F650);
  sub_100062734(&qword_10163CEA0, &qword_10163CE98);
  ExpressionType.desc.getter();
  QueryType.order(_:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v11(v7, v9);
  v0[30] = v9;
  v0[31] = &protocol witness table for Table;
  uint64_t v12 = sub_10001D958(v24);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(v12, v6, v9);
  sub_100192424();
  v0[69] = v23;
  if (v23)
  {
    uint64_t v13 = v23;
    v11(v0[53], v0[50]);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
    swift_release();
LABEL_13:
    v0[71] = v13;
    (*(void (**)(void, void))(v0[55] + 8))(v0[57], v0[54]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v18 = sub_10068C394;
    goto LABEL_15;
  }
  uint64_t v19 = v0[57];
  uint64_t v20 = v0[54];
  uint64_t v21 = v0[55];
  v11(v0[53], v0[50]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
  v0[70] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  uint64_t v18 = sub_10068BD0C;
LABEL_15:
  return _swift_task_switch(v18, 0, 0);
}

uint64_t sub_10068BD0C()
{
  uint64_t v1 = v0 + 7;
  uint64_t v2 = v0[70];
  int64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v0[41];
    v0[37] = _swiftEmptyArrayStorage;
    uint64_t v47 = (void **)(v0 + 37);
    sub_1000B8068(0, v3, 0);
    uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v48 = *(void *)(v4 + 72);
    do
    {
      uint64_t v54 = v5;
      int64_t v55 = v3;
      uint64_t v7 = v0[55];
      uint64_t v6 = v0[56];
      uint64_t v8 = v0[54];
      uint64_t v9 = v0[42];
      uint64_t v10 = v0[43];
      uint64_t v11 = v0[40];
      sub_1006CC8F8(v5, v10, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      sub_1006CC8F8(v10, v9, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
      unint64_t v12 = 0xE800000000000000;
      unint64_t v13 = 0x6E776F6E6B6E752ELL;
      switch(*(unsigned char *)(v9 + *(int *)(v11 + 20)))
      {
        case 1:
          unint64_t v12 = 0xEA00000000007265;
          unint64_t v13 = 0x6E774F7261656E2ELL;
          break;
        case 2:
          unint64_t v12 = 0xEF64657461726170;
          unint64_t v13 = 0x6553686374616C2ELL;
          break;
        case 3:
          unint64_t v13 = 0xD00000000000001CLL;
          unint64_t v12 = 0x80000001013F2A30;
          break;
        case 4:
          unint64_t v13 = 0xD000000000000018;
          unint64_t v12 = 0x80000001013F2A10;
          break;
        case 5:
          unint64_t v12 = 0xEC0000007972616DLL;
          unint64_t v13 = 0x697250646C69772ELL;
          break;
        case 6:
          unint64_t v12 = 0xEE00797261646E6FLL;
          unint64_t v13 = 0x636553646C69772ELL;
          break;
        case 7:
          unint64_t v13 = 0x736142746E69682ELL;
          unint64_t v12 = 0xEA00000000006465;
          break;
        case 8:
          unint64_t v12 = 0xED0000746E656D6ELL;
          unint64_t v13 = 0x67696C4179656B2ELL;
          break;
        default:
          break;
      }
      unint64_t v52 = v13;
      unint64_t v53 = v12;
      uint64_t v14 = (void *)(v0[42] + *(int *)(v0[40] + 24));
      sub_10001CD44(v14, v14[3]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v51 = v0[38];
      uint64_t v15 = v14[3];
      uint64_t v16 = v14[4];
      sub_10001CD44(v14, v15);
      int v17 = sub_100EB7B8C(v15, v16);
      if (v17)
      {
        if (v17 == 1)
        {
          unint64_t v50 = 0xEA00000000007972;
          unint64_t v18 = 0x61646E6F6365732ELL;
        }
        else
        {
          unint64_t v50 = 0x80000001013F28C0;
          unint64_t v18 = 0xD000000000000010;
        }
      }
      else
      {
        unint64_t v50 = 0xE800000000000000;
        unint64_t v18 = 0x7972616D6972702ELL;
      }
      unint64_t v49 = v18;
      uint64_t v20 = v0[55];
      uint64_t v19 = v0[56];
      uint64_t v21 = v0[54];
      uint64_t v22 = v0[46];
      uint64_t v24 = v0[43];
      uint64_t v23 = (int *)v0[44];
      uint64_t v25 = v0[42];
      uint64_t v26 = v25 + *(int *)(v0[40] + 28);
      uint64_t v27 = v22 + v23[8];
      uint64_t v28 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v27, v26, v28);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v22, v19, v21);
      uint64_t v29 = (unint64_t *)(v22 + v23[5]);
      *uint64_t v29 = v52;
      v29[1] = v53;
      *(void *)(v22 + v23[6]) = v51;
      uint64_t v30 = (unint64_t *)(v22 + v23[7]);
      *uint64_t v30 = v49;
      v30[1] = v50;
      sub_1006CCE04(v25, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      sub_1006CCE04(v24, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
      uint64_t v31 = (void *)v0[37];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B8068(0, v31[2] + 1, 1);
        uint64_t v31 = *v47;
      }
      unint64_t v33 = v31[2];
      unint64_t v32 = v31[3];
      if (v33 >= v32 >> 1)
      {
        sub_1000B8068(v32 > 1, v33 + 1, 1);
        uint64_t v31 = *v47;
      }
      uint64_t v35 = v0[45];
      uint64_t v34 = v0[46];
      uint64_t v31[2] = v33 + 1;
      sub_1006CD470(v34, (uint64_t)v31+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v33, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
      uint64_t v5 = v54 + v48;
      int64_t v3 = v55 - 1;
    }
    while (v55 != 1);
    swift_release();
    uint64_t v1 = v0 + 7;
  }
  else
  {
    swift_release();
    uint64_t v31 = _swiftEmptyArrayStorage;
  }
  uint64_t v36 = v0[66];
  uint64_t v37 = v0[68] + 1;
  sub_100445770((uint64_t)v31);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
  if (v37 == v36)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v38 = v0[36];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v39 = (uint64_t (*)(uint64_t))v0[1];
    return v39(v38);
  }
  else
  {
    uint64_t v41 = v0[69];
    unint64_t v42 = v0[68] + 1;
    v0[68] = v42;
    v0[67] = v41;
    uint64_t v43 = v0[65];
    if (v42 >= *(void *)(v43 + 16))
    {
      __break(1u);
      JUMPOUT(0x10068C370);
    }
    sub_10001D010(v43 + 40 * v42 + 32, (uint64_t)v1);
    uint64_t v45 = v0[10];
    uint64_t v44 = v0[11];
    sub_10001CD44(v1, v45);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v44 + 8) + 8) + 32))(v45);
    uint64_t v46 = v0[59];
    return _swift_task_switch(sub_10068B8C4, v46, 0);
  }
}

uint64_t sub_10068C394()
{
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10068C478(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_10000588C(&qword_10163CB78);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v15);
  int v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v14, (uint64_t *)&unk_101656900);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v14;
    uint64_t v33 = *v14;
    sub_10000588C(&qword_101638D40);
    swift_willThrowTypedImpl();
  }
  else
  {
    sub_1006CD470((uint64_t)v14, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v19 = sub_1006C85B8((uint64_t)v17);
    if (v20 >> 60 != 15)
    {
      uint64_t v21 = v19;
      unint64_t v22 = v20;
      v32[0] = a4 + 16;
      uint64_t v23 = (int *)sub_10000588C(&qword_101643D80);
      uint64_t v24 = &v11[v23[12]];
      uint64_t v25 = v23[16];
      uint64_t v26 = &v11[v23[20]];
      uint64_t v27 = &v11[v23[24]];
      uint64_t v28 = &v17[*(int *)(v15 + 20)];
      uint64_t v29 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v11, v28, v29);
      uint64_t v30 = type metadata accessor for MACAddress();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v24, 1, 1, v30);
      *(_OWORD *)&v11[v25] = xmmword_101347BB0;
      *(void *)uint64_t v26 = 0;
      v26[8] = 1;
      *(_WORD *)uint64_t v27 = 256;
      void v27[2] = 3;
      uint64_t v31 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v11, 0, 1, v31);
      swift_beginAccess();
      sub_1000361E0(v21, v22);
      sub_10015D5C4((uint64_t)v11, v21, v22);
      swift_endAccess();
      sub_100037A24(v21, v22);
      sub_1006CCE04((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      goto LABEL_7;
    }
    type metadata accessor for SPOwnerSessionError(0);
    void v32[2] = 2;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100691B60(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v18 = v33;
    swift_willThrow();
    sub_1006CCE04((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  swift_beginAccess();
  *(void *)(a5 + 16) = v18;
  swift_errorRelease();
LABEL_7:
  dispatch_group_leave(a2);
}

uint64_t sub_10068C8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v79 = a4;
  uint64_t v80 = a5;
  uint64_t v72 = a3;
  uint64_t v77 = a2;
  uint64_t v73 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v85 = *(void *)(v6 - 8);
  uint64_t v86 = v6;
  __chkstk_darwin(v6);
  uint64_t v83 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for DispatchQoS();
  uint64_t v82 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v81 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v9 - 8);
  uint64_t v76 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for BeaconNamingRecord();
  uint64_t v75 = *(void *)(v87 - 8);
  uint64_t v11 = __chkstk_darwin(v87);
  uint64_t v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v69 = (uint64_t)&v67 - v14;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v89 = *(void *)(v15 - 8);
  uint64_t v90 = v15;
  __chkstk_darwin(v15);
  uint64_t v88 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v71 = (uint64_t)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  unint64_t v22 = (_OWORD *)((char *)&v67 - v21);
  uint64_t v23 = type metadata accessor for DispatchPredicate();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (void (**)(char *, char *, uint64_t))((char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v74 = v5;
  uint64_t v27 = *(void **)(v5 + 48);
  *uint64_t v26 = v27;
  (*(void (**)(void *, void, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  id v78 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v24 + 8))(v26, v23);
  if (v27)
  {
    uint64_t v68 = v13;
    uint64_t v29 = dispatch_group_create();
    sub_10000588C(&qword_10163B9F0);
    uint64_t v30 = swift_allocBox();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v31, 1, 1, v17);
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = 0;
    uint64_t v33 = v73;
    sub_10068DB70(v73, v72, v22);
    uint64_t v34 = (char *)v22 + *(int *)(v17 + 20);
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v89 + 16);
    uint64_t v72 = v89 + 16;
    unint64_t v67 = v35;
    v35(v88, v34, v90);
    dispatch_group_enter(v29);
    uint64_t v36 = *(void *)(v74 + 280);
    uint64_t v37 = v71;
    sub_1006CC8F8(v33, v71, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v38 = (*(unsigned __int8 *)(v18 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    unint64_t v39 = (v19 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = v29;
    sub_1006CD470(v37, v40 + v38, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    *(void *)(v40 + v39) = v30;
    *(void *)(v40 + ((v39 + 15) & 0xFFFFFFFFFFFFFFF8)) = v32;
    uint64_t v41 = v29;
    uint64_t v74 = v30;
    swift_retain();
    swift_retain();
    sub_100ABC198((uint64_t)v22, 0, (uint64_t)sub_1006C6978, v40);
    swift_release();
    uint64_t v42 = v76;
    sub_10001D074(v77, v76, &qword_10163B9E0);
    int v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v42, 1, v87);
    int v70 = v22;
    if (v43 == 1)
    {
      sub_10001DAB4(v42, &qword_10163B9E0);
      uint64_t v44 = v88;
    }
    else
    {
      uint64_t v45 = v69;
      sub_1006CD470(v42, v69, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      uint64_t v46 = (int *)v87;
      uint64_t v47 = v68;
      UUID.init()();
      uint64_t v48 = v88;
      v67(&v47[v46[6]], v88, v90);
      uint64_t v49 = v46[7];
      uint64_t v50 = *(void *)(v45 + v49);
      uint64_t v51 = (uint64_t *)(v45 + v46[8]);
      uint64_t v52 = *v51;
      uint64_t v53 = v51[1];
      uint64_t v54 = (uint64_t *)(v45 + v46[9]);
      uint64_t v56 = *v54;
      uint64_t v55 = v54[1];
      *(_OWORD *)uint64_t v47 = xmmword_101348180;
      *(void *)&v47[v49] = v50;
      uint64_t v57 = &v47[v46[8]];
      *(void *)uint64_t v57 = v52;
      *((void *)v57 + 1) = v53;
      uint64_t v58 = &v47[v46[9]];
      *(void *)uint64_t v58 = v56;
      *((void *)v58 + 1) = v55;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      dispatch_group_enter(v41);
      uint64_t v59 = v41;
      swift_retain();
      sub_100B42F98((uint64_t)v47, 0, v36, v59, v32);

      swift_release();
      sub_1006CCE04((uint64_t)v47, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      sub_1006CCE04(v45, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      uint64_t v44 = v48;
    }
    uint64_t v60 = (void *)swift_allocObject();
    uint64_t v61 = v79;
    uint64_t v62 = v80;
    v60[2] = v74;
    v60[3] = v61;
    v60[4] = v62;
    v60[5] = v32;
    aBlock[4] = sub_1006C6A28;
    aBlock[5] = v60;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015CF810;
    uint64_t v63 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v64 = v81;
    static DispatchQoS.unspecified.getter();
    unint64_t v91 = _swiftEmptyArrayStorage;
    sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    unint64_t v65 = v83;
    uint64_t v66 = v86;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v63);

    (*(void (**)(char *, uint64_t))(v85 + 8))(v65, v66);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v64, v84);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v44, v90);
    sub_1006CCE04((uint64_t)v70, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10068D214(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  uint64_t v12 = (int *)type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v39 = *((void *)v12 - 1);
  uint64_t v13 = *(void *)(v39 + 64);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v15 = &v36[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  uint64_t v17 = &v36[-v16];
  swift_beginAccess();
  if (*(void *)(*(void *)(a1 + 16) + 16) == *(void *)(a2 + 16))
  {
    dispatch_group_enter(a3);
    uint64_t v38 = *(void *)(a4 + 16);
    int v37 = *(unsigned __int8 *)(a4 + 24);
    uint64_t v18 = &v17[v12[6]];
    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v18, a5, v19);
    uint64_t v20 = v12[7];
    uint64_t v21 = a4 + v20;
    unint64_t v22 = &v17[v20];
    uint64_t v23 = type metadata accessor for MACAddress();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v22, v21, v23);
    LOBYTE(v21) = *(unsigned char *)(a4 + v12[8]);
    uint64_t v24 = (uint64_t *)(a4 + v12[9]);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    swift_beginAccess();
    uint64_t v27 = *(void *)(a1 + 16);
    *(_OWORD *)uint64_t v17 = xmmword_101348180;
    *((void *)v17 + 2) = v38;
    v17[24] = v37;
    v17[v12[8]] = v21;
    uint64_t v28 = &v17[v12[9]];
    *uint64_t v28 = v26;
    v28[1] = v25;
    *(void *)&v17[v12[10]] = v27;
    sub_1006CC8F8((uint64_t)v17, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    unint64_t v29 = (*(unsigned __int8 *)(v39 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
    unint64_t v30 = (v13 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = a3;
    sub_1006CD470((uint64_t)v15, v31 + v29, type metadata accessor for OwnedBeaconGroup);
    *(void *)(v31 + v30) = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v32 = a3;
    swift_retain();
    sub_100ABB2E8((uint64_t)v17, 0, (uint64_t)sub_1006C6530, v31);
    swift_release();
    return sub_1006CCE04((uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
  }
  else
  {
    uint64_t v34 = v41;
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v43 = 2;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100691B60(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v35 = v42;
    swift_willThrow();
    swift_beginAccess();
    *(void *)(v34 + 16) = v35;
    return swift_errorRelease();
  }
}

void sub_10068D5CC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  dispatch_group_t v40 = a2;
  uint64_t v7 = sub_10000588C(&qword_10163C650);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)&v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = &v36[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = &v36[-v15];
  __chkstk_darwin(v14);
  uint64_t v18 = &v36[-v17];
  sub_10001D074(a1, (uint64_t)v9, &qword_10163C650);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v9;
    v42[0] = *v9;
    sub_10000588C(&qword_101638D40);
    swift_willThrowTypedImpl();
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170E840);
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 138543362;
      uint64_t v25 = _convertErrorToNSError(_:)();
      v42[0] = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v25;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error creating duplicate OwnerBeaconGroup:%{public}@", v23, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_beginAccess();
    *(void *)(a4 + 16) = v19;
    swift_errorRelease();
  }
  else
  {
    sub_1006CD470((uint64_t)v9, (uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170E840);
    sub_1006CC8F8(a3, (uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    sub_1006CC8F8((uint64_t)v18, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    int v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      v42[0] = v39;
      *(_DWORD *)uint64_t v30 = 136446466;
      os_log_t v38 = v27;
      int v37 = v29;
      type metadata accessor for UUID();
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v41 = sub_1008FA0F0(v31, v32, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1006CCE04((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v30 + 12) = 2082;
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v41 = sub_1008FA0F0(v33, v34, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1006CCE04((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      os_log_t v35 = v38;
      _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v37, "Duplicated group %{public}s -> %{public}s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1006CCE04((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      sub_1006CCE04((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    }
    sub_1006CCE04((uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
  }
  dispatch_group_leave(v40);
}

uint64_t sub_10068DB70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = (int *)type metadata accessor for OwnedBeaconRecord();
  UUID.init()();
  sub_1006CC8F8(a1 + v6[6], (uint64_t)a3 + v6[6], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  sub_10001D074(a2, (uint64_t)a3 + v6[7], &qword_101638CF0);
  uint64_t v7 = v6[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (char *)a3 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v9, v8, v10);
  uint64_t v11 = (uint64_t *)(a1 + v6[9]);
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  uint64_t v14 = (uint64_t *)(a1 + v6[10]);
  uint64_t v16 = *v14;
  unint64_t v15 = v14[1];
  uint64_t v17 = (uint64_t *)(a1 + v6[11]);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  uint64_t v20 = (uint64_t *)(a1 + v6[12]);
  uint64_t v22 = *v20;
  unint64_t v21 = v20[1];
  uint64_t v23 = (uint64_t *)(a1 + v6[13]);
  uint64_t v25 = *v23;
  unint64_t v24 = v23[1];
  uint64_t v26 = (uint64_t *)(a1 + v6[14]);
  uint64_t v27 = *v26;
  uint64_t v45 = v18;
  uint64_t v46 = v26[1];
  os_log_type_t v28 = (uint64_t *)(a1 + v6[15]);
  uint64_t v29 = *v28;
  uint64_t v30 = v28[1];
  uint64_t v31 = *(void *)(a1 + v6[16]);
  uint64_t v32 = *(void *)(a1 + v6[17]);
  char v33 = *(unsigned char *)(a1 + v6[18]);
  char v34 = *(unsigned char *)(a1 + v6[19]);
  char v35 = *(unsigned char *)(a1 + v6[20]);
  *a3 = xmmword_101348180;
  uint64_t v36 = (uint64_t *)((char *)a3 + v6[9]);
  *uint64_t v36 = v12;
  v36[1] = v13;
  int v37 = (uint64_t *)((char *)a3 + v6[10]);
  *int v37 = v16;
  v37[1] = v15;
  os_log_t v38 = (uint64_t *)((char *)a3 + v6[11]);
  *os_log_t v38 = v18;
  v38[1] = v19;
  unint64_t v39 = v19;
  dispatch_group_t v40 = (uint64_t *)((char *)a3 + v6[12]);
  *dispatch_group_t v40 = v22;
  v40[1] = v21;
  uint64_t v41 = (uint64_t *)((char *)a3 + v6[13]);
  *uint64_t v41 = v25;
  v41[1] = v24;
  uint64_t v42 = (void *)((char *)a3 + v6[14]);
  *uint64_t v42 = v27;
  v42[1] = v46;
  uint64_t v43 = (void *)((char *)a3 + v6[15]);
  *uint64_t v43 = v29;
  v43[1] = v30;
  *(void *)((char *)a3 + v6[16]) = v31;
  *(void *)((char *)a3 + v6[17]) = v32;
  *((unsigned char *)a3 + v6[18]) = v33;
  *((unsigned char *)a3 + v6[19]) = v34;
  *((unsigned char *)a3 + v6[20]) = v35;
  sub_1000361E0(v12, v13);
  sub_100037A38(v16, v15);
  sub_100037A38(v45, v39);
  sub_1000361E0(v22, v21);
  sub_1000361E0(v25, v24);
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void sub_10068DDA0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v47 = a3;
  dispatch_group_t v49 = a2;
  uint64_t v7 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v41[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)&v41[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v48 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v46 = *(void *)(v48 - 8);
  uint64_t v13 = __chkstk_darwin(v48);
  unint64_t v15 = &v41[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = &v41[-v17];
  __chkstk_darwin(v16);
  uint64_t v20 = &v41[-v19];
  uint64_t v21 = swift_projectBox();
  sub_10001D074(a1, (uint64_t)v12, (uint64_t *)&unk_101656900);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = *v12;
    v51[0] = *v12;
    sub_10000588C(&qword_101638D40);
    swift_willThrowTypedImpl();
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v23 = (uint64_t *)(a5 + 16);
    uint64_t v24 = type metadata accessor for Logger();
    sub_100010324(v24, (uint64_t)qword_10170E840);
    swift_errorRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138543362;
      uint64_t v29 = _convertErrorToNSError(_:)();
      v51[0] = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v28 = v29;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Error creating duplicate OwnedBeaconRecord:%{public}@", v27, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_beginAccess();
    *uint64_t v23 = v22;
    swift_errorRelease();
  }
  else
  {
    sub_1006CD470((uint64_t)v12, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100010324(v30, (uint64_t)qword_10170E840);
    sub_1006CC8F8(v47, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_1006CC8F8((uint64_t)v20, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    int v33 = v32;
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      v51[0] = v45;
      *(_DWORD *)uint64_t v34 = 136446466;
      os_log_t v44 = v31;
      type metadata accessor for UUID();
      uint64_t v47 = v21;
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v50 = sub_1008FA0F0(v35, v36, v51);
      int v42 = v33;
      uint64_t v43 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1006CCE04((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      *(_WORD *)(v34 + 12) = 2082;
      uint64_t v37 = v48;
      uint64_t v21 = v47;
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v50 = sub_1008FA0F0(v38, v39, v51);
      uint64_t v9 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1006CCE04((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      os_log_t v40 = v44;
      _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v42, "Duplicated %{public}s -> %{public}s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1006CCE04((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_1006CCE04((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);

      uint64_t v37 = v48;
    }
    sub_1006CD470((uint64_t)v20, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v46 + 56))(v9, 0, 1, v37);
    swift_beginAccess();
    sub_100062604((uint64_t)v9, v21, &qword_10163B9F0);
  }
  dispatch_group_leave(v49);
}

void sub_10068E440(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_10164B300);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v8, &qword_10164B300);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = *v8;
    uint64_t v18 = v9;
    sub_10000588C(&qword_101638D40);
    swift_willThrowTypedImpl();
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v10 = (uint64_t *)(a3 + 16);
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170E840);
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      unint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138543362;
      uint64_t v16 = _convertErrorToNSError(_:)();
      uint64_t v18 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v15 = v16;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error creating duplicate BeaconNamingRecord:%{public}@", v14, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_beginAccess();
    *uint64_t v10 = v9;
    swift_errorRelease();
  }
  else
  {
    sub_10001DAB4((uint64_t)v8, &qword_10164B300);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_10068E6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v5);
  uint64_t v7 = (void *)((char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_projectBox();
  swift_beginAccess();
  sub_10001D074(v15, (uint64_t)v10, &qword_10163B9F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10001DAB4((uint64_t)v10, &qword_10163B9F0);
    type metadata accessor for SPOwnerSessionError(0);
    v19[4] = 2;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100691B60(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    void *v7 = v19[1];
    swift_storeEnumTagMultiPayload();
    ((void (*)(void *))v19[0])(v7);
    return sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_101656900);
  }
  else
  {
    uint64_t v17 = (void (*)(void *))v19[0];
    sub_1006CD470((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_beginAccess();
    uint64_t v18 = *(void *)(a4 + 16);
    if (v18)
    {
      void *v7 = v18;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      swift_errorRetain();
      v17(v7);
      swift_errorRelease();
    }
    else
    {
      sub_1006CC8F8((uint64_t)v14, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_storeEnumTagMultiPayload();
      v17(v7);
    }
    sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_101656900);
    return sub_1006CCE04((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
}

void sub_10068EA20(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101656900);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v8, (uint64_t *)&unk_101656900);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = *v8;
    v10[1] = v9;
    sub_10000588C(&qword_101638D40);
    swift_willThrowTypedImpl();
    swift_beginAccess();
    *(void *)(a3 + 16) = v9;
    swift_errorRelease();
  }
  else
  {
    sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_101656900);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_10068EB40(uint64_t a1, void (*a2)(uint64_t))
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_errorRetain();
    a2(v4);
    return swift_errorRelease();
  }
  else
  {
    QueueSynchronizer.conditionalSync<A>(_:)();
    return ((uint64_t (*)(void))a2)(0);
  }
}

uint64_t sub_10068EC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[19] = a6;
  v7[20] = a7;
  v7[17] = a4;
  v7[18] = a5;
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  v7[21] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for LocalFindableAccessoryRecord();
  v7[22] = v8;
  v7[23] = *(void *)(v8 - 8);
  v7[24] = swift_task_alloc();
  return _swift_task_switch(sub_10068ECF4, 0, 0);
}

uint64_t sub_10068ECF4()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10068EE44;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10068EE44(uint64_t a1)
{
  *(void *)(*(void *)v1 + 208) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10068EF44, 0, 0);
}

uint64_t sub_10068EF44()
{
  uint64_t v1 = v0[26];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v2 = v0[26];
    return _swift_task_switch(sub_10068F074, v2, 0);
  }
  else
  {
    sub_10001CEC8();
    uint64_t v3 = swift_allocError();
    *uint64_t v4 = 0xD000000000000013;
    v4[1] = 0x80000001014033F0;
    swift_willThrow();
    uint64_t v5 = (void (*)(uint64_t, uint64_t))v0[19];
    swift_errorRetain();
    v5(v3, 1);
    swift_errorRelease();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_10068F074()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[27] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10068F114;
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[18];
  return sub_100C12834(v2, v3);
}

uint64_t sub_10068F114()
{
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10068F4C4;
  }
  else {
    uint64_t v2 = sub_10068F228;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10068F228()
{
  uint64_t v1 = v0[21];
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v0[23] + 48))(v1, 1, v0[22]);
  uint64_t v3 = (void (*)(void *, uint64_t))v0[19];
  if (v2 == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B1D0);
    type metadata accessor for SPOwnerSessionError(0);
    v0[16] = 2;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100691B60(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v4 = (void *)v0[15];
    v3(v4, 1);
    swift_release();
  }
  else
  {
    uint64_t v5 = v0[24];
    sub_1006CD470(v1, v5, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    id v6 = [objc_allocWithZone((Class)SPPeripheralConnectionMaterial) init];
    type metadata accessor for PeripheralConnectionMaterial(0);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v6 setIrkData:isa];

    uint64_t v8 = MACAddress.data.getter();
    unint64_t v10 = v9;
    Class v11 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001CFB8(v8, v10);
    [v6 setBtAddressData:v11];

    uint64_t v12 = MACAddress.bluetoothAddressWithType.getter();
    unint64_t v14 = v13;
    Class v15 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001CFB8(v12, v14);
    [v6 setBtAddressWithTypeData:v15];

    v3(v6, 0);
    swift_release();

    sub_1006CCE04(v5, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_10068F4C4()
{
  swift_release();
  uint64_t v1 = v0[28];
  int v2 = (void (*)(uint64_t, uint64_t))v0[19];
  swift_errorRetain();
  v2(v1, 1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10068F570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[29] = a6;
  v7[30] = a7;
  v7[27] = a4;
  v7[28] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[31] = v8;
  v7[32] = *(void *)(v8 - 8);
  v7[33] = swift_task_alloc();
  uint64_t v9 = sub_10000588C(&qword_10163D210);
  v7[34] = v9;
  v7[35] = *(void *)(v9 - 8);
  v7[36] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  v7[37] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for LocalFindableAccessoryRecord();
  v7[38] = v10;
  v7[39] = *(void *)(v10 - 8);
  v7[40] = swift_task_alloc();
  return _swift_task_switch(sub_10068F720, 0, 0);
}

uint64_t sub_10068F720()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 120))
  {
    sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10068F870;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10068F870(uint64_t a1)
{
  *(void *)(*(void *)v1 + 336) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10068F970, 0, 0);
}

uint64_t sub_10068F970()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[42])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = v0[42];
    return _swift_task_switch(sub_10068FA98, v2, 0);
  }
  else
  {
    uint64_t v3 = (void (*)(void))v0[28];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v4 = 0xD000000000000013;
    v4[1] = 0x80000001014033F0;
    v3();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_10068FA98()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[43] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10068FB38;
  uint64_t v2 = v0[37];
  uint64_t v3 = v0[30];
  return sub_100C12834(v2, v3);
}

uint64_t sub_10068FB38()
{
  *(void *)(*(void *)v1 + 352) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10068FEA8;
  }
  else {
    uint64_t v2 = sub_10068FC4C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10068FC4C()
{
  uint64_t v1 = *(void *)(v0 + 296);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 312) + 48))(v1, 1, *(void *)(v0 + 304)) == 1)
  {
    uint64_t v2 = *(void (**)(void *))(v0 + 224);
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B1D0);
    type metadata accessor for SPOwnerSessionError(0);
    *(void *)(v0 + 200) = 2;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100691B60(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v3 = *(void **)(v0 + 208);
    v2(v3);
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    sub_1006CD470(v1, *(void *)(v0 + 320), (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 160))
    {
      sub_10001CEB0((long long *)(v0 + 136), v0 + 56);
      sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
      uint64_t v7 = (uint64_t (__cdecl *)())((char *)&dword_101639168 + dword_101639168);
      id v6 = (void *)swift_task_alloc();
      *(void *)(v0 + 360) = v6;
      void *v6 = v0;
      v6[1] = sub_10068FF54;
      return v7();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10068FEA8()
{
  swift_release();
  (*(void (**)(void))(v0 + 224))(*(void *)(v0 + 352));
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10068FF54(uint64_t a1)
{
  *(void *)(*(void *)v1 + 368) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100690054, 0, 0);
}

uint64_t sub_100690054()
{
  uint64_t v1 = (uint64_t)(v0 + 7);
  if (v0[46])
  {
    uint64_t v2 = v0[40];
    uint64_t v4 = v0[32];
    uint64_t v3 = v0[33];
    uint64_t v5 = v0[31];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    type metadata accessor for Peripheral();
    Identifier.init(_:)();
    id v6 = (void *)swift_task_alloc();
    v0[47] = v6;
    void *v6 = v0;
    v6[1] = sub_100690230;
    uint64_t v7 = v0[36];
    return sub_100D32E50(v7, 1);
  }
  else
  {
    uint64_t v9 = v0[40];
    uint64_t v10 = (void (*)(void))v0[28];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *Class v11 = 0xD000000000000014;
    v11[1] = 0x8000000101403410;
    v10();
    swift_release();
    sub_1006CCE04(v9, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_100690230()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 288);
  uint64_t v3 = *(void *)(*(void *)v1 + 280);
  uint64_t v4 = *(void *)(*(void *)v1 + 272);
  *(void *)(*(void *)v1 + 384) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_10069045C;
  }
  else {
    uint64_t v5 = sub_1006903A0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1006903A0()
{
  uint64_t v1 = *(void *)(v0 + 320);
  swift_release();
  swift_release();
  sub_1006CCE04(v1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10069045C()
{
  uint64_t v1 = *(void *)(v0 + 320);
  swift_release();
  swift_release();
  sub_1006CCE04(v1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  (*(void (**)(void))(v0 + 224))(*(void *)(v0 + 384));
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100690534(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  v7[4] = sub_10000588C(&qword_10164B410);
  v7[5] = swift_task_alloc();
  type metadata accessor for RawAccessoryMetadata(0);
  uint64_t v10 = swift_task_alloc();
  v7[6] = v10;
  type metadata accessor for AccessoryMetadataManager();
  Class v11 = (void *)swift_task_alloc();
  v7[7] = v11;
  *Class v11 = v7;
  v11[1] = sub_100690660;
  if (a4) {
    char v12 = 3;
  }
  else {
    char v12 = 2;
  }
  return sub_100306B24(v10, a5, v12);
}

uint64_t sub_100690660()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1006CD5F4;
  }
  else {
    uint64_t v2 = sub_1006CD514;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100690774(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  v7[4] = sub_10000588C(&qword_10164B3F8);
  v7[5] = swift_task_alloc();
  type metadata accessor for AccessoryMetadata(0);
  uint64_t v10 = swift_task_alloc();
  v7[6] = v10;
  type metadata accessor for AccessoryMetadataManager();
  Class v11 = (void *)swift_task_alloc();
  v7[7] = v11;
  *Class v11 = v7;
  v11[1] = sub_1006908A0;
  if (a4) {
    char v12 = 3;
  }
  else {
    char v12 = 2;
  }
  return sub_100311C78(v10, a5, v12);
}

uint64_t sub_1006908A0()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1006CD5F8;
  }
  else {
    uint64_t v2 = sub_1006CD518;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1006909B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  v7[4] = sub_10000588C(&qword_10164B410);
  v7[5] = swift_task_alloc();
  type metadata accessor for RawAccessoryMetadata(0);
  uint64_t v10 = swift_task_alloc();
  v7[6] = v10;
  type metadata accessor for AccessoryMetadataManager();
  Class v11 = (void *)swift_task_alloc();
  v7[7] = v11;
  *Class v11 = v7;
  v11[1] = sub_100690AD8;
  return sub_100306B24(v10, a4, a5);
}

uint64_t sub_100690AD8()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100690CD8;
  }
  else {
    uint64_t v2 = sub_100690BEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100690BEC()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = (void (*)(uint64_t))v0[2];
  sub_1006CC8F8(v1, v2, type metadata accessor for RawAccessoryMetadata);
  swift_storeEnumTagMultiPayload();
  v3(v2);
  sub_10001DAB4(v2, &qword_10164B410);
  sub_1006CCE04(v1, type metadata accessor for RawAccessoryMetadata);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100690CD8()
{
  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = (void (*)(void *))v0[2];
  *uint64_t v1 = v0[8];
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  sub_10001DAB4((uint64_t)v1, &qword_10164B410);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100690D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  v7[4] = sub_10000588C(&qword_10164B3F8);
  v7[5] = swift_task_alloc();
  type metadata accessor for AccessoryMetadata(0);
  uint64_t v10 = swift_task_alloc();
  v7[6] = v10;
  type metadata accessor for AccessoryMetadataManager();
  Class v11 = (void *)swift_task_alloc();
  v7[7] = v11;
  *Class v11 = v7;
  v11[1] = sub_100690EB4;
  return sub_100311C78(v10, a4, a5);
}

uint64_t sub_100690EB4()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1006910B4;
  }
  else {
    uint64_t v2 = sub_100690FC8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100690FC8()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = (void (*)(uint64_t))v0[2];
  sub_1006CC8F8(v1, v2, type metadata accessor for AccessoryMetadata);
  swift_storeEnumTagMultiPayload();
  v3(v2);
  sub_10001DAB4(v2, &qword_10164B3F8);
  sub_1006CCE04(v1, type metadata accessor for AccessoryMetadata);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1006910B4()
{
  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = (void (*)(void *))v0[2];
  *uint64_t v1 = v0[8];
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  sub_10001DAB4((uint64_t)v1, &qword_10164B3F8);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10069116C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  return _swift_task_switch(sub_10069118C, 0, 0);
}

uint64_t sub_10069118C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016393A8 + dword_1016393A8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v2;
    void *v2 = v0;
    v2[1] = sub_1006912C8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006912C8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1006913C8, 0, 0);
}

uint64_t sub_1006913C8()
{
  uint64_t v1 = v0[18];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v2 = v0[18];
    return _swift_task_switch(sub_10069157C, v2, 0);
  }
  else
  {
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E840);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error on publishWildModeRecords, no WildModeAssociationRecordsPublisher object!", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = (void (*)(void))v0[15];

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v8 = 0xD000000000000023;
    v8[1] = 0x80000001014042D0;
    v7();
    swift_errorRelease();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_10069157C()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v4 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                               + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v2;
  void *v2 = v0;
  v2[1] = sub_100691650;
  return v4(&unk_10164B3F0, v1);
}

uint64_t sub_100691650()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 144);
  if (v0)
  {
    uint64_t v4 = sub_100691808;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_100691790;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100691790()
{
  (*(void (**)(void, void))(v0 + 120))(0, 0);
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100691808()
{
  swift_release();
  return _swift_task_switch(sub_100691870, 0, 0);
}

uint64_t sub_100691870()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[15];
  swift_errorRetain();
  v2(v1, 1);
  swift_release();
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

unint64_t SPBeaconObservationType.description.getter(uint64_t a1)
{
  unint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0x7463656E6E6F632ELL;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0x6E6E6F637369642ELL;
      break;
    default:
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      unint64_t result = 0xD00000000000002DLL;
      break;
  }
  return result;
}

unint64_t sub_100691A54()
{
  return SPBeaconObservationType.description.getter(*v0);
}

uint64_t sub_100691B60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int sub_100691BA8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100B737B4(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1006921B8(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_100691C14()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      Swift::String_optional v5 = String.Iterator.next()();
      if (!v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (countAndFlagsBits == v5.value._countAndFlagsBits && object == v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      Swift::String_optional v4 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
      object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  BOOL v7 = v6 == 0;
  swift_bridgeObjectRelease();
  return v7;
}

void sub_100691D7C(uint64_t a1, uint64_t a2)
{
}

void sub_100691D90(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  sub_10001D4B0(0, a3);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

uint64_t sub_100691E04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 96))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_100691E64()
{
  return sub_1006CC968(40);
}

uint64_t sub_100691E6C()
{
  return sub_10068356C(*(void *)(v0 + 16), *(void (**)(void *))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100691E78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100691E88()
{
  return swift_release();
}

uint64_t sub_100691E90(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_101348180;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v7 = v2 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_14;
      }
      if (v7 < (int)v2) {
        goto LABEL_21;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v2, __DataStorage._offset.getter())) {
        goto LABEL_22;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v9 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v5 = v9;
      uint64_t v7 = v2 >> 32;
LABEL_14:
      if (v7 < (int)v2) {
        goto LABEL_19;
      }
      if (!__DataStorage._bytes.getter()) {
        goto LABEL_24;
      }
      if (__OFSUB__((int)v2, __DataStorage._offset.getter())) {
        goto LABEL_20;
      }
      __DataStorage._length.getter();
      uint64_t result = CCECCryptorExportKey();
      *a1 = v2;
      a1[1] = v5 | 0x4000000000000000;
      break;
    case 2uLL:
      uint64_t v11 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v8 = *(void *)(v2 + 16);
      if (!__DataStorage._bytes.getter())
      {
        __break(1u);
LABEL_24:
        __break(1u);
        JUMPOUT(0x1006921A8);
      }
      if (__OFSUB__(v8, __DataStorage._offset.getter()))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
      }
      __DataStorage._length.getter();
      uint64_t result = CCECCryptorExportKey();
      *a1 = v2;
      a1[1] = v11 | 0x8000000000000000;
      break;
    case 3uLL:
      return CCECCryptorExportKey();
    default:
      LOWORD(v10) = a1[1];
      BYTE2(v10) = BYTE2(a1[1]);
      HIBYTE(v10) = BYTE3(a1[1]);
      __int16 v12 = WORD2(a1[1]);
      unsigned __int8 v13 = BYTE6(a1[1]);
      uint64_t result = CCECCryptorExportKey();
      *a1 = v2;
      a1[1] = v10 | ((unint64_t)v12 << 32) | ((unint64_t)HIBYTE(v12) << 40) | ((unint64_t)v13 << 48);
      return result;
  }
  return result;
}

Swift::Int sub_1006921B8(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unint64_t v81 = *(void *)(v79 + 8 * i);
        uint64_t v82 = v78;
        do
        {
          unint64_t v83 = *(void *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(void *)(v79 + v82 + 8) = v83;
          *(void *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v95 = result;
  Swift::Int v96 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      uint64_t v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          uint64_t v86 = v11;
          uint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          sub_100692BD4((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(void *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v86 = sub_100B73584((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          uint64_t v90 = &v86[16 * v85 + 32];
          *(void *)uint64_t v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          uint64_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v94[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v94 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v96;
    uint64_t v94 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  uint64_t v92 = v2;
  uint64_t v93 = *v2 - 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      unint64_t v14 = *(void *)(v10 + 8 * v9);
      unint64_t v15 = *(void *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        unint64_t v16 = v14;
        while (1)
        {
          unint64_t v17 = *(void *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          unint64_t v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              uint64_t v20 = *(void *)(v10 + 8 * v19);
              *(void *)(v10 + 8 * v19) = *(void *)(v10 + 8 * v18);
              *(void *)(v10 + 8 * v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      uint64_t v22 = (unint64_t *)(v93 + 8 * v9);
      do
      {
        unint64_t v23 = *(void *)(v10 + 8 * v9);
        Swift::Int v24 = v13;
        uint64_t v25 = v22;
        do
        {
          unint64_t v26 = *v25;
          if (v23 >= *v25) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *uint64_t v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_100B729CC(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = sub_100B729CC((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      uint64_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          unint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          os_log_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        dispatch_group_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        uint64_t v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v29;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        sub_100692BD4((char *)(v10 + 8 * *(void *)v71), (char *)(v10 + 8 * *(void *)v74), v10 + 8 * v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        uint64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v8 = v94;
      uint64_t v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100692844(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5)
{
  uint64_t v6 = __dst;
  uint64_t v8 = a2;
  int64_t v10 = a2 - __src;
  int64_t v11 = (a2 - __src) / 40;
  uint64_t v12 = a3 - (void)a2;
  uint64_t v13 = (uint64_t)(a3 - (void)a2) / 40;
  uint64_t v41 = __src;
  uint64_t v40 = __dst;
  if (v11 >= v13)
  {
    if (v12 >= -39)
    {
      if (__dst != a2 || &a2[40 * v13] <= __dst) {
        memmove(__dst, a2, 40 * v13);
      }
      Swift::Int v24 = &v6[40 * v13];
      uint64_t v39 = v24;
      uint64_t v41 = v8;
      if (__src >= v8 || v12 < 40) {
        goto LABEL_44;
      }
      unint64_t v25 = a3 - 40;
      while (1)
      {
        sub_10001D010((uint64_t)(v24 - 40), (uint64_t)v38);
        unint64_t v28 = v8 - 40;
        sub_10001D010((uint64_t)(v8 - 40), (uint64_t)v37);
        char v29 = sub_100684A34(v38, v37, a5);
        if (v5) {
          goto LABEL_43;
        }
        char v30 = v29;
        unint64_t v31 = (char *)(v25 + 40);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v37);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
        if (v30)
        {
          if (v31 != v8 || v25 >= (unint64_t)v8)
          {
            long long v26 = *(_OWORD *)v28;
            long long v27 = *(_OWORD *)(v8 - 24);
            *(void *)(v25 + 32) = *((void *)v8 - 1);
            *(_OWORD *)unint64_t v25 = v26;
            *(_OWORD *)(v25 + 16) = v27;
          }
          v41 -= 40;
          Swift::Int v24 = v39;
          if (v39 <= v6) {
            goto LABEL_44;
          }
        }
        else
        {
          uint64_t v32 = v39;
          Swift::Int v24 = v39 - 40;
          v39 -= 40;
          if (v31 < v32 || v25 >= (unint64_t)v32 || v31 != v32)
          {
            long long v33 = *(_OWORD *)v24;
            long long v34 = *(_OWORD *)(v32 - 24);
            *(void *)(v25 + 32) = *((void *)v32 - 1);
            *(_OWORD *)unint64_t v25 = v33;
            *(_OWORD *)(v25 + 16) = v34;
          }
          unint64_t v28 = v8;
          if (v24 <= v6) {
            goto LABEL_44;
          }
        }
        v25 -= 40;
        uint64_t v8 = v28;
        if (v28 <= __src) {
          goto LABEL_44;
        }
      }
    }
  }
  else if (v10 >= -39)
  {
    if (__dst != __src || &__src[40 * v11] <= __dst) {
      memmove(__dst, __src, 40 * v11);
    }
    unint64_t v14 = &v6[40 * v11];
    uint64_t v39 = v14;
    if ((unint64_t)v8 >= a3 || v10 < 40) {
      goto LABEL_44;
    }
    while (1)
    {
      sub_10001D010((uint64_t)v8, (uint64_t)v38);
      sub_10001D010((uint64_t)v6, (uint64_t)v37);
      char v15 = sub_100684A34(v38, v37, a5);
      if (v5) {
        break;
      }
      char v16 = v15;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v37);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
      unint64_t v17 = v41;
      if (v16)
      {
        Swift::Int v18 = v8 + 40;
        if (v41 >= v8 && v41 < v18 && v41 == v8)
        {
          unint64_t v17 = v8;
        }
        else
        {
          long long v19 = *(_OWORD *)v8;
          long long v20 = *((_OWORD *)v8 + 1);
          *((void *)v41 + 4) = *((void *)v8 + 4);
          _OWORD *v17 = v19;
          v17[1] = v20;
        }
      }
      else
      {
        Swift::Int v21 = v40 + 40;
        if (v41 != v40 || v41 >= v21)
        {
          long long v22 = *(_OWORD *)v40;
          long long v23 = *((_OWORD *)v40 + 1);
          *((void *)v41 + 4) = *((void *)v40 + 4);
          _OWORD *v17 = v22;
          v17[1] = v23;
        }
        uint64_t v40 = v21;
        Swift::Int v18 = v8;
      }
      uint64_t v41 = (char *)v17 + 40;
      uint64_t v6 = v40;
      if (v40 < v14)
      {
        uint64_t v8 = v18;
        if ((unint64_t)v18 < a3) {
          continue;
        }
      }
      goto LABEL_44;
    }
LABEL_43:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v37);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
LABEL_44:
    sub_100B72E3C(&v41, &v40, &v39);
    swift_release();
    return 1;
  }
  swift_release();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100692BD4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  Swift::Int v24 = __src;
  long long v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      char v16 = &v4[8 * v13];
      long long v22 = v16;
      Swift::Int v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        unint64_t v17 = (unint64_t *)(a3 - 8);
        while (1)
        {
          Swift::Int v18 = (char *)(v17 + 1);
          long long v19 = v6 - 8;
          unint64_t v20 = *((void *)v6 - 1);
          if (*((void *)v16 - 1) >= v20)
          {
            long long v22 = v16 - 8;
            if (v18 < v16 || v17 >= (unint64_t *)v16 || v18 != v16) {
              unint64_t *v17 = *((void *)v16 - 1);
            }
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= (unint64_t *)v6) {
              unint64_t *v17 = v20;
            }
            Swift::Int v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          --v17;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    unint64_t v14 = &v4[8 * v10];
    long long v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          long long v23 = v4;
          char v15 = v6;
        }
        else
        {
          char v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      Swift::Int v24 = v7;
    }
LABEL_42:
    sub_100B72D80((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100692E44(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    sub_100692FA8((unint64_t *)((char *)&v11 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    uint64_t v7 = v6;
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    int64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v5);
    sub_100692FA8((unint64_t *)v8, v4, v2);
    uint64_t v7 = v9;
    swift_release();
    swift_slowDealloc();
  }
  return v7;
}

void sub_100692FA8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = 0;
  int64_t v4 = 0;
  uint64_t v5 = a3 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v9) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v9) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v5 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v9) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v5 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_5:
    id v12 = *(id *)(*(void *)(a3 + 48) + 8 * v11);
    id v13 = [v12 role];

    if (v13)
    {

      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        sub_100B2A160(a1, a2, v20, a3);
        return;
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v9) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_10069316C(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v2 - 8);
  int64_t v4 = (char *)&v11[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SharedBeaconRecord(0);
  v11[3] = v5;
  v11[4] = sub_100691B60(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  uint64_t v6 = sub_10001D958(v11);
  sub_1006CC8F8(a1, (uint64_t)v6, type metadata accessor for SharedBeaconRecord);
  sub_100AE311C((uint64_t)v6 + *(int *)(v5 + 20), (uint64_t)v4);
  uint64_t v7 = type metadata accessor for BeaconProductInfoRecord();
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v4, 1, v7);
  sub_10001DAB4((uint64_t)v4, &qword_10163BBB0);
  if (a1 == 1)
  {
    sub_10000588C((uint64_t *)&unk_101657630);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_101342130;
    sub_10001D010((uint64_t)v11, v8 + 32);
    sub_1010D3908(v8, 1, 0, 0);
    swift_bridgeObjectRelease();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
}

uint64_t sub_100693338(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v2 - 8);
  int64_t v4 = (char *)&v11[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  v11[3] = v5;
  v11[4] = sub_100691B60(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  uint64_t v6 = sub_10001D958(v11);
  sub_1006CC8F8(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_100AE311C((uint64_t)v6 + *(int *)(v5 + 20), (uint64_t)v4);
  uint64_t v7 = type metadata accessor for BeaconProductInfoRecord();
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v4, 1, v7);
  sub_10001DAB4((uint64_t)v4, &qword_10163BBB0);
  if (a1 == 1)
  {
    sub_10000588C((uint64_t *)&unk_101657630);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_101342130;
    sub_10001D010((uint64_t)v11, v8 + 32);
    sub_1010D3908(v8, 1, 0, 0);
    swift_bridgeObjectRelease();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
}

uint64_t sub_100693504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v19[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v11 - 8);
  id v13 = (char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[3] = a3;
  v19[4] = a4;
  int64_t v14 = sub_10001D958(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(v14, a1, a3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a4 + 8) + 8) + 32))(a3);
  sub_100AE311C((uint64_t)v10, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v15 = type metadata accessor for BeaconProductInfoRecord();
  LODWORD(a4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v13, 1, v15);
  sub_10001DAB4((uint64_t)v13, &qword_10163BBB0);
  if (a4 == 1)
  {
    sub_10000588C((uint64_t *)&unk_101657630);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_101342130;
    sub_10001D010((uint64_t)v19, v16 + 32);
    sub_1010D3908(v16, 1, 0, 0);
    swift_bridgeObjectRelease();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
}

uint64_t sub_10069376C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164B2A8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1006CC8F8(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t My = type metadata accessor for Feature.FindMy();
  v66[3] = My;
  v66[4] = sub_100691B60((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  Swift::Int v18 = sub_10001D958(v66);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v18, enum case for Feature.FindMy.separationAlerts(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v66);
  if (My)
  {
    uint64_t v64 = v11;
    uint64_t v65 = a2;
    uint64_t v63 = v6;
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v19 = v66[0];
    id v20 = sub_100D1C7BC();
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;
    if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v23 == v24)
    {
      swift_bridgeObjectRelease_n();
LABEL_9:

      LOBYTE(v20) = sub_1010AB768(v19);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_9;
    }
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;
    if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v29 == v30) {
      goto LABEL_13;
    }
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v31) {
      goto LABEL_15;
    }
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v35;
    if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v36 == v37)
    {
LABEL_13:
      swift_bridgeObjectRelease_n();
LABEL_15:

      swift_bridgeObjectRelease();
      sub_100AE311C((uint64_t)&v16[*(int *)(v14 + 20)], (uint64_t)v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v9, 1, v10) != 1)
      {
        sub_1006CD470((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
        LODWORD(v20) = (*(_DWORD *)&v13[*(int *)(v10 + 68)] >> 11) & 1;
        sub_1006CCE04((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
        goto LABEL_10;
      }
      uint64_t v32 = &qword_10163BBB0;
      uint64_t v33 = (uint64_t)v9;
      goto LABEL_17;
    }
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v38) {
      goto LABEL_15;
    }
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;
    if (v39 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v41 == v42)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_26;
    }
    char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v43)
    {
LABEL_26:

      uint64_t v44 = sub_1010AB774(v19);
      swift_bridgeObjectRelease();
      if (*(void *)(v44 + 16) && (unint64_t v45 = sub_100724020(1), (v46 & 1) != 0))
      {
        unint64_t v47 = v45;
        uint64_t v48 = *(void *)(v44 + 56);
        uint64_t v49 = type metadata accessor for FeatureSupportMatrix();
        uint64_t v50 = *(void *)(v49 - 8);
        uint64_t v51 = v48 + *(void *)(v50 + 72) * v47;
        uint64_t v52 = (uint64_t)v63;
        sub_1006CC8F8(v51, (uint64_t)v63, (uint64_t (*)(void))type metadata accessor for FeatureSupportMatrix);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v50 + 56))(v52, 0, 1, v49);
      }
      else
      {
        uint64_t v49 = type metadata accessor for FeatureSupportMatrix();
        uint64_t v52 = (uint64_t)v63;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v63, 1, 1, v49);
      }
      swift_bridgeObjectRelease();
      type metadata accessor for FeatureSupportMatrix();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48))(v52, 1, v49) != 1)
      {
        LOBYTE(v20) = sub_100693F98((uint64_t)v16, v52);
        sub_1006CCE04(v52, (uint64_t (*)(void))type metadata accessor for FeatureSupportMatrix);
        goto LABEL_10;
      }
      uint64_t v32 = &qword_10164B2A8;
      uint64_t v33 = v52;
LABEL_17:
      sub_10001DAB4(v33, v32);
      LOBYTE(v20) = 0;
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v55 = v54;
    if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v55 == v56)
    {
      swift_bridgeObjectRelease_n();
LABEL_37:

      LOBYTE(v20) = 0;
      goto LABEL_10;
    }
    char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v57) {
      goto LABEL_37;
    }
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v60 = v59;
    if (v58 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v60 == v61)
    {

      swift_bridgeObjectRelease_n();
      LOBYTE(v20) = 0;
    }
    else
    {
      _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOBYTE(v20) = 0;
    }
  }
  else
  {
    LOBYTE(v20) = 0;
  }
LABEL_10:
  sub_1006CCE04((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  return v20 & 1;
}

BOOL sub_100693F98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101648A20);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SystemVersionNumber();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v11);
  id v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1006CC8F8(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1008BB640();
  if (v15)
  {
    uint64_t v18 = v14;
    uint64_t v19 = v15;
    uint64_t v20 = v17;
    v23[0] = v16;
    v23[1] = a2;
    swift_bridgeObjectRetain();
    SystemVersionNumber.init(rawValue:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      BOOL v21 = sub_100EB8440(v18, v19, v23[0], v20, (uint64_t)v10);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_101648A20);
  }
  BOOL v21 = 0;
LABEL_6:
  sub_1006CCE04((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  return v21;
}

uint64_t sub_10069422C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164B290);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24[3] = type metadata accessor for OwnedBeaconRecord();
  v24[4] = sub_100691B60(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  uint64_t v7 = sub_10001D958(v24);
  sub_1006CC8F8(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  int v8 = LOBYTE(v23[0]);
  sub_10001D010((uint64_t)v24, (uint64_t)v23);
  if (v8 != 1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
LABEL_7:
    uint64_t v12 = sub_100B6CAA8();
    uint64_t v13 = v12[2];
    uint64_t v14 = type metadata accessor for LeashRecord();
    uint64_t v15 = *(void *)(v14 - 8);
    if (v13)
    {
      sub_1006CC8F8((uint64_t)v12+ ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80)), (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = 1;
    }
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v6, v16, 1, v14);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v6, 1, v14) == 1)
    {
      sub_10001DAB4((uint64_t)v6, &qword_10164B290);
    }
    else
    {
      uint64_t v17 = *(void *)&v6[*(int *)(v14 + 24)];
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_1006CCE04((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      __chkstk_darwin(v18);
      *(void *)&v22[-16] = v19;
      BOOL v20 = sub_100A9F998((uint64_t (*)(char *))sub_1006CD4F8, (uint64_t)&v22[-32], v17);
      swift_bridgeObjectRelease();
      if (v20)
      {
        uint64_t v11 = 0;
        goto LABEL_15;
      }
    }
    uint64_t v11 = 2;
    goto LABEL_15;
  }
  uint64_t v9 = sub_10001CD44(v23, v23[3]);
  char v10 = sub_100694BA8((uint64_t)v9, a2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
  if ((v10 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v11 = 5;
LABEL_15:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
  return v11;
}

uint64_t sub_10069455C(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164B290);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21[3] = type metadata accessor for LocalFindableAccessoryRecord();
  v21[4] = sub_100691B60(&qword_101642930, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
  uint64_t v5 = sub_10001D958(v21);
  sub_1006CC8F8(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  int v6 = LOBYTE(v20[0]);
  sub_10001D010((uint64_t)v21, (uint64_t)v20);
  if (v6 != 1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
LABEL_7:
    char v10 = sub_100B6CAA8();
    uint64_t v11 = v10[2];
    uint64_t v12 = type metadata accessor for LeashRecord();
    uint64_t v13 = *(void *)(v12 - 8);
    if (v11)
    {
      sub_1006CC8F8((uint64_t)v10+ ((*(unsigned __int8 *)(*(void *)(v12 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v12 - 8) + 80)), (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = 1;
    }
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v4, v14, 1, v12);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v4, 1, v12) == 1)
    {
      sub_10001DAB4((uint64_t)v4, &qword_10164B290);
    }
    else
    {
      uint64_t v15 = *(void *)&v4[*(int *)(v12 + 24)];
      swift_bridgeObjectRetain();
      uint64_t v16 = sub_1006CCE04((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      __chkstk_darwin(v16);
      *(void *)&v19[-16] = v5;
      BOOL v17 = sub_100A9F998((uint64_t (*)(char *))sub_1006CD4F8, (uint64_t)&v19[-32], v15);
      swift_bridgeObjectRelease();
      if (v17)
      {
        uint64_t v9 = 0;
        goto LABEL_15;
      }
    }
    uint64_t v9 = 2;
    goto LABEL_15;
  }
  uint64_t v7 = sub_10001CD44(v20, v20[3]);
  char v8 = sub_100695F64((uint64_t)v7);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
  if ((v8 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v9 = 5;
LABEL_15:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v21);
  return v9;
}

uint64_t sub_100694878(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = sub_10000588C(&qword_10164B290);
  __chkstk_darwin(v4 - 8);
  int v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24[3] = type metadata accessor for SharedBeaconRecord(0);
  v24[4] = sub_100691B60(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  uint64_t v7 = sub_10001D958(v24);
  sub_1006CC8F8(a1, (uint64_t)v7, type metadata accessor for SharedBeaconRecord);
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  int v8 = LOBYTE(v23[0]);
  sub_10001D010((uint64_t)v24, (uint64_t)v23);
  if (v8 != 1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
LABEL_7:
    uint64_t v12 = sub_100B6CAA8();
    uint64_t v13 = v12[2];
    uint64_t v14 = type metadata accessor for LeashRecord();
    uint64_t v15 = *(void *)(v14 - 8);
    if (v13)
    {
      sub_1006CC8F8((uint64_t)v12+ ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80)), (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = 1;
    }
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v6, v16, 1, v14);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v6, 1, v14) == 1)
    {
      sub_10001DAB4((uint64_t)v6, &qword_10164B290);
    }
    else
    {
      uint64_t v17 = *(void *)&v6[*(int *)(v14 + 24)];
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_1006CCE04((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LeashRecord);
      __chkstk_darwin(v18);
      *(void *)&v22[-16] = v19;
      BOOL v20 = sub_100A9F998((uint64_t (*)(char *))sub_1005E4C34, (uint64_t)&v22[-32], v17);
      swift_bridgeObjectRelease();
      if (v20)
      {
        uint64_t v11 = 0;
        goto LABEL_15;
      }
    }
    uint64_t v11 = 2;
    goto LABEL_15;
  }
  uint64_t v9 = sub_10001CD44(v23, v23[3]);
  char v10 = sub_100697258((uint64_t)v9, a2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
  if ((v10 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v11 = 5;
LABEL_15:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
  return v11;
}

uint64_t sub_100694BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v112 = a2;
  uint64_t v110 = type metadata accessor for Date();
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v108 = (uint64_t)v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for BeaconObservation();
  uint64_t v117 = *(void *)(v115 - 8);
  uint64_t v4 = __chkstk_darwin(v115);
  uint64_t v116 = (uint64_t)v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  int v8 = (char *)v103 - v7;
  __chkstk_darwin(v6);
  char v10 = (char *)v103 - v9;
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_101655530);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v111 = (uint64_t)v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v103 - v14;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v113 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  unint64_t v19 = (unint64_t)v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  BOOL v21 = (char *)v103 - v20;
  uint64_t v22 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for OwnedBeaconRecord();
  v127[3] = v25;
  v127[4] = sub_100691B60(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  long long v26 = sub_10001D958(v127);
  sub_1006CC8F8(a1, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v114 = v25;
  LOBYTE(v25) = sub_100DF1520(*(uint64_t *)((char *)v26 + *(int *)(v25 + 64)), *(uint64_t *)((char *)v26 + *(int *)(v25 + 68)));
  sub_10001D010((uint64_t)v127, (uint64_t)v126);
  if (v25)
  {
    uint64_t v105 = v8;
    uint64_t v107 = v16;
    uint64_t v106 = v15;
    sub_10001CD44(v126, v126[3]);
    id v27 = sub_100D1C7BC();
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;
    if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v30 == v31)
    {

      swift_bridgeObjectRelease_n();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v126);
    }
    else
    {
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v126);
      uint64_t v33 = 0;
      if ((v34 & 1) == 0) {
        goto LABEL_53;
      }
    }
    if (qword_101636CD8 != -1) {
      goto LABEL_57;
    }
    while (1)
    {
      OS_dispatch_queue.sync<A>(execute:)();
      char v35 = sub_1010AC008(v123[0]);
      swift_bridgeObjectRelease();
      uint64_t v36 = v107;
      if ((v35 & 1) == 0)
      {
        uint64_t v33 = 0;
        goto LABEL_53;
      }
      sub_10001D074((uint64_t)v26 + *(int *)(v114 + 28), (uint64_t)v24, &qword_101638CF0);
      uint64_t v37 = v113;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v24, 1, v36) == 1)
      {
        uint64_t v122 = 0;
        long long v121 = 0u;
        long long v120 = 0u;
LABEL_27:
        sub_10001DAB4((uint64_t)&v120, (uint64_t *)&unk_10164E7C0);
        if (qword_101636EE0 != -1) {
          swift_once();
        }
        uint64_t v50 = type metadata accessor for Logger();
        sub_100010324(v50, (uint64_t)qword_10170E7C8);
        sub_10001D010((uint64_t)v127, (uint64_t)v123);
        uint64_t v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v120 = swift_slowAlloc();
          *(_DWORD *)uint64_t v53 = 136315138;
          uint64_t v54 = (char *)sub_10001CD44(v123, v124);
          (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v21, &v54[*(int *)(v114 + 20)], v36);
          sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v56 = v36;
          unint64_t v58 = v57;
          (*(void (**)(char *, uint64_t))(v37 + 8))(v21, v56);
          uint64_t v119 = sub_1008FA0F0(v55, v58, (uint64_t *)&v120);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v123);
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "Can't monitor beacon: %s due to: airpods but missing beacon group.", v53, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v123);
        }

        goto LABEL_52;
      }
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v21, v24, v36);
      swift_retain();
      sub_100AF03FC((uint64_t)v21, (uint64_t)&v120);
      uint64_t v38 = v37 + 8;
      uint64_t v104 = *(void (**)(char *, uint64_t))(v37 + 8);
      v104(v21, v36);
      swift_release();
      if (!*((void *)&v121 + 1)) {
        goto LABEL_27;
      }
      sub_10001CEB0(&v120, (uint64_t)v123);
      if (qword_101636CB8 != -1) {
        swift_once();
      }
      uint64_t v39 = v124;
      uint64_t v40 = v125;
      sub_10001CD44(v123, v124);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v40);
      sub_1007B4970(v19, 0, 0, &v120);
      v103[1] = 0;
      long long v26 = (uint64_t *)v120;
      v104((char *)v19, v107);
      uint64_t v42 = _swiftEmptyArrayStorage;
      *(void *)&long long v120 = _swiftEmptyArrayStorage;
      uint64_t v112 = v26[2];
      if (!v112) {
        break;
      }
      v103[0] = v38;
      unint64_t v19 = 0;
      uint64_t v24 = (char *)_swiftEmptyArrayStorage;
      uint64_t v43 = v115;
      while (v19 < v26[2])
      {
        unint64_t v44 = (*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
        uint64_t v45 = *(void *)(v117 + 72);
        sub_1006CC8F8((uint64_t)v26 + v44 + v45 * v19, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        sub_1004DCCB0();
        uint64_t v119 = Set.init(minimumCapacity:)();
        sub_100DCDA84(&v118, 37);
        sub_100DCDA84(&v118, 38);
        BOOL v46 = sub_100DC7BFC(v10[*(int *)(v43 + 24)], v119);
        swift_bridgeObjectRelease();
        if (v46)
        {
          unint64_t v47 = v21;
          sub_1006CD470((uint64_t)v10, v116, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1000B77F0(0, *((void *)v24 + 2) + 1, 1);
          }
          uint64_t v24 = (char *)v120;
          unint64_t v49 = *(void *)(v120 + 16);
          unint64_t v48 = *(void *)(v120 + 24);
          if (v49 >= v48 >> 1)
          {
            sub_1000B77F0(v48 > 1, v49 + 1, 1);
            uint64_t v24 = (char *)v120;
          }
          *((void *)v24 + 2) = v49 + 1;
          sub_1006CD470(v116, (uint64_t)&v24[v44 + v49 * v45], (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          BOOL v21 = v47;
          uint64_t v43 = v115;
        }
        else
        {
          sub_1006CCE04((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        }
        if (v112 == ++v19)
        {
          uint64_t v42 = (void *)v120;
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_57:
      swift_once();
    }
LABEL_34:
    swift_bridgeObjectRelease();
    uint64_t v59 = (uint64_t)v106;
    sub_100E4D5E0((uint64_t)v42, (uint64_t)v106);
    swift_release();
    uint64_t v60 = v111;
    sub_10001D074(v59, v111, (uint64_t *)&unk_101655530);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v60, 1, v115) == 1)
    {
      sub_10001DAB4(v60, (uint64_t *)&unk_101655530);
      uint64_t v61 = v113;
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v62 = type metadata accessor for Logger();
      sub_100010324(v62, (uint64_t)qword_10170E7C8);
      sub_10001D010((uint64_t)v127, (uint64_t)&v120);
      uint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = (uint8_t *)swift_slowAlloc();
        uint64_t v119 = swift_slowAlloc();
        *(_DWORD *)uint64_t v65 = 136315138;
        uint64_t v66 = sub_10001CD44(&v120, *((uint64_t *)&v121 + 1));
        uint64_t v67 = (char *)v66 + *(int *)(v114 + 20);
        uint64_t v68 = v21;
        uint64_t v69 = v21;
        uint64_t v70 = v107;
        (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v68, v67, v107);
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v73 = v72;
        v104(v69, v70);
        uint64_t v118 = sub_1008FA0F0(v71, v73, &v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v120);
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Can't monitor beacon: %s due to: airpods but missing last BT observation.", v65, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v74 = (uint64_t)v106;
        goto LABEL_51;
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v120);
LABEL_50:
      uint64_t v74 = v59;
      goto LABEL_51;
    }
    sub_1006CD470(v60, (uint64_t)v105, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v75 = v108;
    static Date.trustedNow.getter(v108);
    Date.timeIntervalSince(_:)();
    double v77 = v76;
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v75, v110);
    OS_dispatch_queue.sync<A>(execute:)();
    sub_1010ABFFC(v120);
    double v79 = v78;
    swift_bridgeObjectRelease();
    uint64_t v80 = v113;
    if (v79 < v77)
    {
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v81 = type metadata accessor for Logger();
      sub_100010324(v81, (uint64_t)qword_10170E7C8);
      sub_10001D010((uint64_t)v127, (uint64_t)&v120);
      uint64_t v82 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v82, v83))
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v120);
        sub_1006CCE04((uint64_t)v105, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        goto LABEL_50;
      }
      uint64_t v84 = swift_slowAlloc();
      uint64_t v119 = swift_slowAlloc();
      *(_DWORD *)uint64_t v84 = 136315650;
      uint64_t v117 = v84 + 4;
      unint64_t v85 = (char *)sub_10001CD44(&v120, *((uint64_t *)&v121 + 1));
      uint64_t v86 = v107;
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v21, &v85[*(int *)(v114 + 20)], v107);
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v88 = v59;
      unint64_t v90 = v89;
      v104(v21, v86);
      uint64_t v118 = sub_1008FA0F0(v87, v90, &v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v120);
      *(_WORD *)(v84 + 12) = 2048;
      uint64_t v118 = *(void *)&v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v84 + 22) = 2048;
      uint64_t v118 = *(void *)&v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Can't monitor beacon: %s due to: airpods but expired (%f > %f sec ago)", (uint8_t *)v84, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1006CCE04((uint64_t)v105, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v74 = v88;
LABEL_51:
      sub_10001DAB4(v74, (uint64_t *)&unk_101655530);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v123);
LABEL_52:
      uint64_t v33 = 1;
      goto LABEL_53;
    }
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v91 = type metadata accessor for Logger();
    sub_100010324(v91, (uint64_t)qword_10170E7C8);
    sub_10001D010((uint64_t)v127, (uint64_t)&v120);
    uint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = swift_slowAlloc();
      uint64_t v119 = swift_slowAlloc();
      *(_DWORD *)uint64_t v94 = 136315650;
      uint64_t v117 = v94 + 4;
      Swift::Int v95 = (char *)sub_10001CD44(&v120, *((uint64_t *)&v121 + 1));
      uint64_t v96 = v107;
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v21, &v95[*(int *)(v114 + 20)], v107);
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v97 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v98 = v59;
      unint64_t v100 = v99;
      v104(v21, v96);
      uint64_t v118 = sub_1008FA0F0(v97, v100, &v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v120);
      *(_WORD *)(v94 + 12) = 2048;
      uint64_t v118 = *(void *)&v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v94 + 22) = 2048;
      uint64_t v118 = *(void *)&v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "Will monitor beacon: %s due to: airpods, not expired (%f < %f sec ago)", (uint8_t *)v94, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1006CCE04((uint64_t)v105, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v101 = v98;
    }
    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v120);
      sub_1006CCE04((uint64_t)v105, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      uint64_t v101 = v59;
    }
    sub_10001DAB4(v101, (uint64_t *)&unk_101655530);
    uint64_t v32 = v123;
  }
  else
  {
    uint64_t v32 = v126;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
  uint64_t v33 = 0;
LABEL_53:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v127);
  return v33;
}

uint64_t sub_100695F64(uint64_t a1)
{
  uint64_t v106 = type metadata accessor for Date();
  uint64_t v105 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v104 = (uint64_t)&v99 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for BeaconObservation();
  uint64_t v114 = *(uint8_t **)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v113 = (uint64_t)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t)&v99 - v7;
  __chkstk_darwin(v6);
  char v10 = (char *)&v99 - v9;
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_101655530);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v107 = (uint64_t)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v110 = (uint64_t)&v99 - v14;
  uint64_t v112 = type metadata accessor for UUID();
  uint64_t v111 = *(void *)(v112 - 8);
  uint64_t v15 = __chkstk_darwin(v112);
  uint64_t v17 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v108 = (char *)&v99 - v18;
  uint64_t v19 = sub_10000588C(&qword_101638CF0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v22 = (uint64_t)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v99 - v23;
  uint64_t v25 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v123[3] = v25;
  v123[4] = sub_100691B60(&qword_101642930, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
  long long v26 = sub_10001D958(v123);
  sub_1006CC8F8(a1, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  if (!sub_100DF1520(*(uint64_t *)((char *)v26 + *(int *)(v25 + 40)), *(uint64_t *)((char *)v26 + *(int *)(v25 + 44))))
  {
LABEL_10:
    uint64_t v32 = 0;
    goto LABEL_11;
  }
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;
  if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v29 == v30)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = 0;
    if ((v31 & 1) == 0) {
      goto LABEL_11;
    }
  }
  if (qword_101636CD8 != -1) {
    goto LABEL_56;
  }
  while (1)
  {
    OS_dispatch_queue.sync<A>(execute:)();
    char v33 = sub_1010AC008(v120[0]);
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0) {
      goto LABEL_10;
    }
    uint64_t v103 = v8;
    uint64_t v34 = v111;
    uint64_t v8 = v112;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v111 + 56))(v24, 1, 1, v112);
    sub_10001D074((uint64_t)v24, v22, &qword_101638CF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v22, 1, v8) == 1)
    {
      uint64_t v119 = 0;
      long long v117 = 0u;
      long long v118 = 0u;
      swift_retain();
    }
    else
    {
      uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 32);
      uint64_t v37 = v34;
      uint64_t v38 = (uint64_t)v108;
      v36(v108, v22, v8);
      swift_retain();
      sub_100AF03FC(v38, (uint64_t)&v117);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v8);
    }
    sub_10001DAB4((uint64_t)v24, &qword_101638CF0);
    swift_release();
    if (!*((void *)&v118 + 1))
    {
      sub_10001DAB4((uint64_t)&v117, (uint64_t *)&unk_10164E7C0);
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v63 = type metadata accessor for Logger();
      sub_100010324(v63, (uint64_t)qword_10170E7C8);
      sub_10001D010((uint64_t)v123, (uint64_t)v120);
      os_log_type_t v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v117 = swift_slowAlloc();
        *(_DWORD *)uint64_t v66 = 136315138;
        uint64_t v114 = v66 + 4;
        uint64_t v67 = sub_10001CD44(v120, v121);
        uint64_t v68 = v111;
        uint64_t v69 = v108;
        uint64_t v70 = v112;
        (*(void (**)(char *, void *, uint64_t))(v111 + 16))(v108, v67, v112);
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v73 = v72;
        (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
        uint64_t v116 = sub_1008FA0F0(v71, v73, (uint64_t *)&v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Can't monitor beacon: %s due to: airpods but missing beacon group.", v66, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
      }

      goto LABEL_52;
    }
    sub_10001CEB0(&v117, (uint64_t)v120);
    if (qword_101636CB8 != -1) {
      swift_once();
    }
    uint64_t v39 = v121;
    uint64_t v22 = v122;
    sub_10001CD44(v120, v121);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v39, v22);
    sub_1007B4970((uint64_t)v17, 0, 0, &v117);
    uint64_t v102 = 0;
    uint64_t v41 = v117;
    uint64_t v42 = *(void (**)(char *, uint64_t))(v111 + 8);
    uint64_t v101 = v111 + 8;
    unint64_t v100 = v42;
    v42(v17, v112);
    uint64_t v43 = _swiftEmptyArrayStorage;
    *(void *)&long long v117 = _swiftEmptyArrayStorage;
    uint64_t v17 = *(char **)(v41 + 16);
    if (!v17) {
      break;
    }
    unint64_t v44 = 0;
    uint64_t v24 = (char *)_swiftEmptyArrayStorage;
    uint64_t v109 = v41;
    while (v44 < *(void *)(v41 + 16))
    {
      unint64_t v45 = (v114[80] + 32) & ~(unint64_t)v114[80];
      uint64_t v8 = *((void *)v114 + 9);
      sub_1006CC8F8(v41 + v45 + v8 * v44, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      sub_1004DCCB0();
      uint64_t v116 = Set.init(minimumCapacity:)();
      sub_100DCDA84(&v115, 37);
      sub_100DCDA84(&v115, 38);
      uint64_t v22 = sub_100DC7BFC(v10[*(int *)(v3 + 24)], v116);
      swift_bridgeObjectRelease();
      if (v22)
      {
        BOOL v46 = v17;
        uint64_t v47 = v3;
        sub_1006CD470((uint64_t)v10, v113, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B77F0(0, *((void *)v24 + 2) + 1, 1);
        }
        uint64_t v24 = (char *)v117;
        unint64_t v49 = *(void *)(v117 + 16);
        unint64_t v48 = *(void *)(v117 + 24);
        uint64_t v22 = v49 + 1;
        if (v49 >= v48 >> 1)
        {
          sub_1000B77F0(v48 > 1, v49 + 1, 1);
          uint64_t v24 = (char *)v117;
        }
        *((void *)v24 + 2) = v22;
        sub_1006CD470(v113, (uint64_t)&v24[v45 + v49 * v8], (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v3 = v47;
        uint64_t v17 = v46;
        uint64_t v41 = v109;
      }
      else
      {
        sub_1006CCE04((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      }
      if (v17 == (char *)++v44)
      {
        uint64_t v43 = (void *)v117;
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_56:
    swift_once();
  }
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t v50 = v110;
  sub_100E4D5E0((uint64_t)v43, v110);
  swift_release();
  uint64_t v51 = v50;
  uint64_t v52 = v107;
  sub_10001D074(v51, v107, (uint64_t *)&unk_101655530);
  if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v114 + 6))(v52, 1, v3) == 1)
  {
    sub_10001DAB4(v52, (uint64_t *)&unk_101655530);
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    sub_100010324(v53, (uint64_t)qword_10170E7C8);
    sub_10001D010((uint64_t)v123, (uint64_t)&v117);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      uint64_t v116 = swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 136315138;
      unint64_t v57 = sub_10001CD44(&v117, *((uint64_t *)&v118 + 1));
      unint64_t v58 = v108;
      uint64_t v59 = v112;
      (*(void (**)(char *, void *, uint64_t))(v111 + 16))(v108, v57, v112);
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v62 = v61;
      v100(v58, v59);
      uint64_t v115 = sub_1008FA0F0(v60, v62, &v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v117);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Can't monitor beacon: %s due to: airpods but missing last BT observation.", v56, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v117);
    }
    goto LABEL_51;
  }
  sub_1006CD470(v52, v103, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  uint64_t v74 = v104;
  static Date.trustedNow.getter(v104);
  Date.timeIntervalSince(_:)();
  double v76 = v75;
  (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v74, v106);
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010ABFFC(v117);
  double v78 = v77;
  swift_bridgeObjectRelease();
  if (v78 < v76)
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v79 = type metadata accessor for Logger();
    sub_100010324(v79, (uint64_t)qword_10170E7C8);
    sub_10001D010((uint64_t)v123, (uint64_t)&v117);
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v82 = swift_slowAlloc();
      uint64_t v116 = swift_slowAlloc();
      *(_DWORD *)uint64_t v82 = 136315650;
      os_log_type_t v83 = sub_10001CD44(&v117, *((uint64_t *)&v118 + 1));
      uint64_t v84 = v108;
      uint64_t v85 = v112;
      (*(void (**)(char *, void *, uint64_t))(v111 + 16))(v108, v83, v112);
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v88 = v87;
      v100(v84, v85);
      uint64_t v115 = sub_1008FA0F0(v86, v88, &v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v117);
      *(_WORD *)(v82 + 12) = 2048;
      uint64_t v115 = *(void *)&v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v82 + 22) = 2048;
      uint64_t v115 = *(void *)&v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Can't monitor beacon: %s due to: airpods but expired (%f > %f sec ago)", (uint8_t *)v82, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v117);
    }
    sub_1006CCE04(v103, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_51:
    sub_10001DAB4(v110, (uint64_t *)&unk_101655530);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
LABEL_52:
    uint64_t v32 = 1;
    goto LABEL_11;
  }
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v89 = type metadata accessor for Logger();
  sub_100010324(v89, (uint64_t)qword_10170E7C8);
  sub_10001D010((uint64_t)v123, (uint64_t)&v117);
  unint64_t v90 = Logger.logObject.getter();
  os_log_type_t v91 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v90, v91))
  {
    uint64_t v92 = swift_slowAlloc();
    uint64_t v116 = swift_slowAlloc();
    *(_DWORD *)uint64_t v92 = 136315650;
    os_log_type_t v93 = sub_10001CD44(&v117, *((uint64_t *)&v118 + 1));
    uint64_t v94 = v108;
    uint64_t v95 = v112;
    (*(void (**)(char *, void *, uint64_t))(v111 + 16))(v108, v93, v112);
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v96 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v98 = v97;
    v100(v94, v95);
    uint64_t v115 = sub_1008FA0F0(v96, v98, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v117);
    *(_WORD *)(v92 + 12) = 2048;
    uint64_t v115 = *(void *)&v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v92 + 22) = 2048;
    uint64_t v115 = *(void *)&v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "Will monitor beacon: %s due to: airpods, not expired (%f < %f sec ago)", (uint8_t *)v92, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v117);
  }
  sub_1006CCE04(v103, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  sub_10001DAB4(v110, (uint64_t *)&unk_101655530);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
  uint64_t v32 = 0;
LABEL_11:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v123);
  return v32;
}

uint64_t sub_100697258(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v106 = a2;
  uint64_t v104 = type metadata accessor for Date();
  uint64_t v103 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  uint64_t v102 = (uint64_t)v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for BeaconObservation();
  uint64_t v111 = *(uint8_t **)(v109 - 8);
  uint64_t v4 = __chkstk_darwin(v109);
  uint64_t v110 = (uint64_t)v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v97 - v7;
  __chkstk_darwin(v6);
  char v10 = (char *)v97 - v9;
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_101655530);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v105 = (uint64_t)v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t)v97 - v14;
  uint64_t v108 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v108 - 8);
  uint64_t v17 = __chkstk_darwin(v108);
  uint64_t v19 = (char *)v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)v97 - v20;
  uint64_t v22 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (uint64_t)v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for SharedBeaconRecord(0);
  v121[3] = v25;
  v121[4] = sub_100691B60(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  unint64_t v26 = (unint64_t)sub_10001D958(v121);
  sub_1006CC8F8(a1, v26, type metadata accessor for SharedBeaconRecord);
  uint64_t v107 = v25;
  LOBYTE(a1) = sub_100DF1520(*(void *)(v26 + *(int *)(v25 + 44)), *(void *)(v26 + *(int *)(v25 + 48)));
  sub_10001D010((uint64_t)v121, (uint64_t)v120);
  if (a1)
  {
    uint64_t v101 = v16;
    unint64_t v100 = v21;
    uint64_t v99 = v8;
    sub_10001CD44(v120, v120[3]);
    sub_1012138A4();
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;
    if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v29 == v30)
    {
      swift_bridgeObjectRelease_n();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
    }
    else
    {
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
      uint64_t v32 = 0;
      if ((v33 & 1) == 0) {
        goto LABEL_54;
      }
    }
    if (qword_101636CD8 != -1) {
      goto LABEL_58;
    }
    while (1)
    {
      OS_dispatch_queue.sync<A>(execute:)();
      char v34 = sub_1010AC008(v117[0]);
      swift_bridgeObjectRelease();
      if ((v34 & 1) == 0)
      {
        uint64_t v32 = 0;
        goto LABEL_54;
      }
      sub_10001D074(v26 + *(int *)(v107 + 76), v24, &qword_101638CF0);
      uint64_t v35 = v101;
      uint64_t v36 = v108;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v24, 1, v108) == 1)
      {
        uint64_t v116 = 0;
        long long v115 = 0u;
        long long v114 = 0u;
        uint64_t v37 = (uint64_t)v100;
LABEL_27:
        sub_10001DAB4((uint64_t)&v114, (uint64_t *)&unk_10164E7C0);
        if (qword_101636EE0 != -1) {
          swift_once();
        }
        uint64_t v48 = type metadata accessor for Logger();
        sub_100010324(v48, (uint64_t)qword_10170E7C8);
        sub_10001D010((uint64_t)v121, (uint64_t)v117);
        unint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v49, v50))
        {
          uint64_t v51 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v114 = swift_slowAlloc();
          *(_DWORD *)uint64_t v51 = 136315138;
          uint64_t v52 = v37;
          uint64_t v111 = v51 + 4;
          uint64_t v53 = (char *)sub_10001CD44(v117, v118);
          uint64_t v54 = v108;
          (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v37, &v53[*(int *)(v107 + 20)], v108);
          sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v57 = v56;
          (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v52, v54);
          uint64_t v113 = sub_1008FA0F0(v55, v57, (uint64_t *)&v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "Can't monitor beacon: %s due to: airpods but missing beacon group.", v51, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
        }

        goto LABEL_53;
      }
      uint64_t v37 = (uint64_t)v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v100, v24, v36);
      swift_retain();
      sub_100AF03FC(v37, (uint64_t)&v114);
      uint64_t v38 = v35 + 8;
      uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v106(v37, v36);
      swift_release();
      if (!*((void *)&v115 + 1)) {
        goto LABEL_27;
      }
      uint64_t v98 = v15;
      sub_10001CEB0(&v114, (uint64_t)v117);
      if (qword_101636CB8 != -1) {
        swift_once();
      }
      uint64_t v39 = v118;
      uint64_t v24 = v119;
      sub_10001CD44(v117, v118);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v39, v24);
      sub_1007B4970((uint64_t)v19, 0, 0, &v114);
      v97[1] = 0;
      uint64_t v41 = v114;
      v97[0] = v38;
      v106((uint64_t)v19, v108);
      uint64_t v42 = _swiftEmptyArrayStorage;
      *(void *)&long long v114 = _swiftEmptyArrayStorage;
      uint64_t v43 = *(void *)(v41 + 16);
      uint64_t v44 = v109;
      if (!v43) {
        break;
      }
      unint64_t v26 = 0;
      uint64_t v19 = (char *)_swiftEmptyArrayStorage;
      while (v26 < *(void *)(v41 + 16))
      {
        unint64_t v45 = (v111[80] + 32) & ~(unint64_t)v111[80];
        uint64_t v15 = *((void *)v111 + 9);
        sub_1006CC8F8(v41 + v45 + v15 * v26, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        sub_1004DCCB0();
        uint64_t v113 = Set.init(minimumCapacity:)();
        sub_100DCDA84(&v112, 37);
        sub_100DCDA84(&v112, 38);
        uint64_t v24 = sub_100DC7BFC(v10[*(int *)(v44 + 24)], v113);
        swift_bridgeObjectRelease();
        if (v24)
        {
          sub_1006CD470((uint64_t)v10, v110, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1000B77F0(0, *((void *)v19 + 2) + 1, 1);
          }
          uint64_t v19 = (char *)v114;
          unint64_t v47 = *(void *)(v114 + 16);
          unint64_t v46 = *(void *)(v114 + 24);
          uint64_t v24 = v47 + 1;
          if (v47 >= v46 >> 1)
          {
            sub_1000B77F0(v46 > 1, v47 + 1, 1);
            uint64_t v19 = (char *)v114;
          }
          *((void *)v19 + 2) = v24;
          sub_1006CD470(v110, (uint64_t)&v19[v45 + v47 * v15], (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          uint64_t v44 = v109;
        }
        else
        {
          sub_1006CCE04((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        }
        if (v43 == ++v26)
        {
          uint64_t v42 = (void *)v114;
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_58:
      swift_once();
    }
LABEL_34:
    swift_bridgeObjectRelease();
    uint64_t v58 = v98;
    sub_100E4D5E0((uint64_t)v42, v98);
    swift_release();
    uint64_t v59 = v105;
    sub_10001D074(v58, v105, (uint64_t *)&unk_101655530);
    int v60 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v111 + 6))(v59, 1, v44);
    uint64_t v61 = v108;
    if (v60 == 1)
    {
      sub_10001DAB4(v59, (uint64_t *)&unk_101655530);
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v62 = type metadata accessor for Logger();
      sub_100010324(v62, (uint64_t)qword_10170E7C8);
      sub_10001D010((uint64_t)v121, (uint64_t)&v114);
      uint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v63, v64))
      {
        os_log_type_t v65 = (uint8_t *)swift_slowAlloc();
        uint64_t v113 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v65 = 136315138;
        uint64_t v66 = (char *)sub_10001CD44(&v114, *((uint64_t *)&v115 + 1));
        uint64_t v67 = v100;
        (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v100, &v66[*(int *)(v107 + 20)], v61);
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v70 = v69;
        v106((uint64_t)v67, v61);
        uint64_t v112 = sub_1008FA0F0(v68, v70, &v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v114);
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Can't monitor beacon: %s due to: airpods but missing last BT observation.", v65, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v71 = v98;
        goto LABEL_52;
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v114);
LABEL_51:
      uint64_t v71 = v58;
LABEL_52:
      sub_10001DAB4(v71, (uint64_t *)&unk_101655530);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
LABEL_53:
      uint64_t v32 = 1;
      goto LABEL_54;
    }
    uint64_t v72 = (uint64_t)v99;
    sub_1006CD470(v59, (uint64_t)v99, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v73 = v102;
    static Date.trustedNow.getter(v102);
    Date.timeIntervalSince(_:)();
    double v75 = v74;
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v73, v104);
    OS_dispatch_queue.sync<A>(execute:)();
    sub_1010ABFFC(v114);
    double v77 = v76;
    swift_bridgeObjectRelease();
    if (v77 < v75)
    {
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v78 = type metadata accessor for Logger();
      sub_100010324(v78, (uint64_t)qword_10170E7C8);
      sub_10001D010((uint64_t)v121, (uint64_t)&v114);
      uint64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = swift_slowAlloc();
        uint64_t v113 = swift_slowAlloc();
        *(_DWORD *)uint64_t v81 = 136315650;
        uint64_t v111 = (uint8_t *)(v81 + 4);
        uint64_t v82 = (char *)sub_10001CD44(&v114, *((uint64_t *)&v115 + 1));
        os_log_type_t v83 = v100;
        (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v100, &v82[*(int *)(v107 + 20)], v61);
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v86 = v85;
        v106((uint64_t)v83, v61);
        uint64_t v112 = sub_1008FA0F0(v84, v86, &v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v114);
        *(_WORD *)(v81 + 12) = 2048;
        uint64_t v112 = *(void *)&v75;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v81 + 22) = 2048;
        uint64_t v112 = *(void *)&v77;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "Can't monitor beacon: %s due to: airpods but expired (%f > %f sec ago)", (uint8_t *)v81, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v114);
      }
      sub_1006CCE04(v72, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      goto LABEL_51;
    }
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v87 = type metadata accessor for Logger();
    sub_100010324(v87, (uint64_t)qword_10170E7C8);
    sub_10001D010((uint64_t)v121, (uint64_t)&v114);
    unint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v88, v89))
    {
      uint64_t v90 = swift_slowAlloc();
      uint64_t v113 = swift_slowAlloc();
      *(_DWORD *)uint64_t v90 = 136315650;
      uint64_t v111 = (uint8_t *)(v90 + 4);
      os_log_type_t v91 = (char *)sub_10001CD44(&v114, *((uint64_t *)&v115 + 1));
      uint64_t v92 = v100;
      (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v100, &v91[*(int *)(v107 + 20)], v61);
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v93 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v95 = v94;
      v106((uint64_t)v92, v61);
      uint64_t v112 = sub_1008FA0F0(v93, v95, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v114);
      *(_WORD *)(v90 + 12) = 2048;
      uint64_t v112 = *(void *)&v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v90 + 22) = 2048;
      uint64_t v112 = *(void *)&v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "Will monitor beacon: %s due to: airpods, not expired (%f < %f sec ago)", (uint8_t *)v90, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v114);
    }
    sub_1006CCE04(v72, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    sub_10001DAB4(v58, (uint64_t *)&unk_101655530);
    char v31 = v117;
  }
  else
  {
    char v31 = v120;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
  uint64_t v32 = 0;
LABEL_54:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v121);
  return v32;
}

uint64_t sub_1006985B0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = sub_10001D958((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return sub_10001CEB0(&v12, v10 + 40 * a1 + 32);
}

void *sub_100698648(uint64_t a1, char *a2)
{
  uint64_t v193 = a2;
  uint64_t v184 = type metadata accessor for MemberSharingCircle();
  uint64_t v183 = *(void *)(v184 - 8);
  uint64_t v3 = __chkstk_darwin(v184);
  uint64_t v5 = (char *)&v165 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v165 - v6;
  uint64_t v8 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v8 - 8);
  uint64_t v167 = (uint64_t)&v165 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = type metadata accessor for LocalFindableAccessoryRecord();
  __chkstk_darwin(v176);
  unint64_t v175 = (char *)&v165 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v190 = sub_10000588C((uint64_t *)&unk_101653C80);
  uint64_t v181 = *(void *)(v190 - 8);
  uint64_t v11 = __chkstk_darwin(v190);
  uint64_t v177 = (char *)&v165 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v179 = (char *)&v165 - v13;
  uint64_t v14 = sub_10000588C(&qword_1016496E0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v178 = (char *)&v165 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v180 = (uint64_t)&v165 - v17;
  uint64_t v18 = sub_10000588C((uint64_t *)&unk_10163B7C0);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v182 = (uint64_t *)((char *)&v165 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  uint64_t v174 = (uint64_t)&v165 - v21;
  uint64_t v22 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v22 - 8);
  char v189 = (char *)&v165 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = sub_10000588C(&qword_101645750);
  long long v172 = *(char **)(v185 - 8);
  uint64_t v24 = __chkstk_darwin(v185);
  unint64_t v170 = (char *)&v165 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v171 = (uint64_t)&v165 - v26;
  uint64_t v188 = type metadata accessor for URL();
  uint64_t v194 = *(void *)(v188 - 8);
  uint64_t v27 = __chkstk_darwin(v188);
  uint64_t v186 = (char *)&v165 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v187 = (char *)&v165 - v30;
  __chkstk_darwin(v29);
  uint64_t v192 = (char *)&v165 - v31;
  uint64_t v32 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v33 = __chkstk_darwin(v32 - 8);
  uint64_t v168 = (char *)&v165 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  uint64_t v169 = (uint64_t)&v165 - v35;
  uint64_t v36 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v165 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v40 = __chkstk_darwin(v39);
  uint64_t v173 = (uint64_t)&v165 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v166 = (uint64_t)&v165 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v191 = (uint64_t)&v165 - v45;
  __chkstk_darwin(v44);
  unint64_t v47 = (char *)&v165 - v46;
  uint64_t v48 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v49 = __chkstk_darwin(v48);
  uint64_t v51 = (char *)&v165 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = __chkstk_darwin(v49);
  uint64_t v54 = (char *)&v165 - v53;
  v200[3] = v52;
  v200[4] = sub_100691B60(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  uint64_t v55 = sub_10001D958(v200);
  sub_1006CC8F8(a1, (uint64_t)v55, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_10001D010((uint64_t)v200, (uint64_t)v199);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  if (swift_dynamicCast())
  {
    sub_1006CD470((uint64_t)v54, (uint64_t)v51, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v191 = 0;
    uint64_t v56 = v195[0];
    unint64_t v57 = &v51[v48[14]];
    uint64_t v59 = *(void *)v57;
    unint64_t v58 = *((void *)v57 + 1);
    uint64_t v60 = v59 & 0xFFFFFFFFFFFFLL;
    if ((v58 & 0x2000000000000000) != 0) {
      uint64_t v61 = HIBYTE(v58) & 0xF;
    }
    else {
      uint64_t v61 = v60;
    }
    uint64_t v62 = (uint64_t)v193;
    if (!v61)
    {
      v195[0] = 0;
      v195[1] = 0xE000000000000000;
      uint64_t v198 = *(void *)&v51[v48[16]];
      v63._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      v64._uint64_t countAndFlagsBits = 95;
      v64._object = (void *)0xE100000000000000;
      String.append(_:)(v64);
      uint64_t v198 = *(void *)&v51[v48[17]];
      v65._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v65);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (qword_101637658 != -1) {
      swift_once();
    }
    uint64_t v66 = qword_10170F830;
    swift_bridgeObjectRetain();
    if (sub_100F2C7E4())
    {
      v195[0] = v66;
      sub_10112728C(2u);
      sub_10112728C(1u);
      uint64_t v66 = v195[0];
    }
    uint64_t v198 = v66;
    if ((sub_10069376C((uint64_t)v51, v62) & 1) != 0 && (sub_100F2C7E4() & 1) == 0)
    {
      sub_100DCCFE4(v195, 8);
      sub_100DCCFE4(v195, 9);
    }
    else
    {
      sub_10112728C(8u);
      sub_10112728C(9u);
    }
    sub_1006CC8F8((uint64_t)&v51[v48[6]], (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_1006CCE04((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    if (EnumCaseMultiPayload != 1)
    {
      sub_10112728C(0xCu);
      sub_10112728C(0xDu);
    }
    if ((sub_100D1CA38() & 1) == 0
      || (uint64_t My = type metadata accessor for Feature.FindMy(),
          uint64_t v196 = My,
          v197 = sub_100691B60((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy), uint64_t v103 = sub_10001D958(v195), (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v103, enum case for Feature.FindMy.btRSSIFinding(_:), My), LOBYTE(My) = isFeatureEnabled(_:)(), _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v195), (My & 1) == 0))
    {
      sub_10112728C(0xAu);
      sub_10112728C(0xBu);
    }
    if ((sub_10111198C() & 1) == 0) {
      goto LABEL_40;
    }
    uint64_t v104 = type metadata accessor for Feature.FindMy();
    uint64_t v196 = v104;
    uint64_t v105 = sub_100691B60((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    uint64_t v197 = v105;
    uint64_t v106 = sub_10001D958(v195);
    uint64_t v107 = *(void *)(v104 - 8);
    uint64_t v108 = *(uint64_t **)(v107 + 104);
    uint64_t v109 = v107 + 104;
    ((void (*)(uint64_t *, void, uint64_t))v108)(v106, enum case for Feature.FindMy.itemSharing(_:), v104);
    char v110 = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v195);
    if ((v110 & 1) == 0)
    {
LABEL_40:
      swift_bridgeObjectRelease();
      uint64_t v137 = v198;
      swift_bridgeObjectRetain();
      char v138 = sub_100DC7494(4u, v137);
      swift_bridgeObjectRelease();
      if (v138)
      {
        sub_10112728C(4u);
        uint64_t v137 = v198;
      }
      swift_bridgeObjectRetain();
      char v139 = sub_100DC7494(5u, v137);
      swift_bridgeObjectRelease();
      if (v139) {
        sub_10112728C(5u);
      }
      sub_10112728C(0x15u);
      uint64_t v140 = (uint64_t)v51;
      goto LABEL_55;
    }
    uint64_t v181 = v109;
    uint64_t v182 = v108;
    uint64_t v183 = v105;
    uint64_t v184 = v104;
    uint64_t v190 = v56;
    sub_100DCCFE4(v195, 4);
    uint64_t v111 = v48[5];
    uint64_t v193 = v51;
    uint64_t v179 = &v51[v111];
    uint64_t v180 = sub_101158C68((uint64_t)&off_10159F770);
    uint64_t v178 = *(char **)(v62 + 160);
    if (qword_1016370F0 != -1) {
      swift_once();
    }
    uint64_t v112 = v188;
    uint64_t v113 = sub_100010324(v188, (uint64_t)qword_10170ED28);
    long long v114 = *(void (**)(char *, uint64_t, uint64_t))(v194 + 16);
    long long v115 = v192;
    v114(v192, v113, v112);
    uint64_t v116 = v187;
    v114(v187, (uint64_t)v115, v112);
    uint64_t v117 = v185;
    uint64_t v118 = (uint64_t)v170;
    uint64_t v177 = &v170[*(int *)(v185 + 40)];
    uint64_t v119 = (uint64_t)v177;
    uint64_t v120 = type metadata accessor for DirectorySequence();
    uint64_t v121 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v120 - 8) + 56);
    v121(v119, 1, 1, v120);
    v114((char *)v118, (uint64_t)v116, v112);
    *(void *)(v118 + *(int *)(v117 + 36)) = v178;
    v114(v186, (uint64_t)v116, v112);
    swift_retain();
    uint64_t v122 = (uint64_t)v189;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    dispatch_group_t v123 = *(void (**)(char *, uint64_t))(v194 + 8);
    v123(v116, v112);
    v121(v122, 0, 1, v120);
    sub_100062604(v122, (uint64_t)v177, (uint64_t *)&unk_101653C90);
    uint64_t v124 = v171;
    sub_10001D608(v118, v171, &qword_101645750);
    uint64_t v125 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v172 + 7);
    uint64_t v126 = (uint64_t)v168;
    uint64_t v127 = v185;
    v125(v168, 1, 1, v185);
    sub_10001DAB4(v126, &qword_101645758);
    sub_10001D608(v124, v126, &qword_101645750);
    v125((char *)v126, 0, 1, v127);
    sub_10001D608(v126, v169, (uint64_t *)&unk_101653CA0);
    uint64_t v128 = ((uint64_t (*)(char *, uint64_t))v123)(v192, v112);
    __chkstk_darwin(v128);
    uint64_t v129 = (uint64_t)v179;
    *(&v165 - 2) = v180;
    *(&v165 - 1) = v129;
    sub_100658408(sub_1006CD688, (uint64_t)(&v165 - 4));
    uint64_t v131 = v130;
    swift_bridgeObjectRelease();
    uint64_t v132 = *(void *)(v131 + 16);
    swift_bridgeObjectRelease();
    uint64_t v133 = v198;
    swift_bridgeObjectRetain();
    LOBYTE(v123) = sub_100DC7494(5u, v133);
    swift_bridgeObjectRelease();
    if ((v123 & 1) != 0 || !v132)
    {
      swift_bridgeObjectRetain();
      char v142 = sub_100DC7494(5u, v133);
      swift_bridgeObjectRelease();
      uint64_t v134 = v190;
      uint64_t v135 = v184;
      uint64_t v136 = (void (*)(uint64_t *, void, uint64_t))v182;
      if ((v142 & 1) != 0 && !v132) {
        sub_10112728C(5u);
      }
    }
    else
    {
      sub_100DCCFE4(v195, 5);
      uint64_t v134 = v190;
      uint64_t v135 = v184;
      uint64_t v136 = (void (*)(uint64_t *, void, uint64_t))v182;
    }
    uint64_t v196 = v135;
    uint64_t v197 = v183;
    uint64_t v143 = sub_10001D958(v195);
    v136(v143, enum case for Feature.FindMy.cowardlyCarrot(_:), v135);
    char v144 = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v195);
    uint64_t v145 = (uint64_t)v193;
    if (v144)
    {
      char v146 = sub_1010AAF90(v134);
      swift_bridgeObjectRelease();
      if ((v146 & 1) == 0)
      {
        sub_100DCCFE4(v195, 21);
LABEL_54:
        uint64_t v140 = v145;
LABEL_55:
        sub_1006CCE04(v140, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        unint64_t v100 = (void *)v198;
        goto LABEL_68;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_10112728C(0x15u);
    goto LABEL_54;
  }
  if (swift_dynamicCast())
  {
    unint64_t v170 = v5;
    uint64_t v67 = (uint64_t)v47;
    uint64_t v68 = v191;
    sub_1006CD470(v67, v191, type metadata accessor for SharedBeaconRecord);
    uint64_t v176 = v39;
    uint64_t v185 = v68 + *(int *)(v39 + 20);
    unint64_t v175 = (char *)*((void *)v193 + 20);
    if (qword_101636A48 != -1) {
      swift_once();
    }
    uint64_t v69 = v188;
    uint64_t v70 = sub_100010324(v188, (uint64_t)qword_10170DD78);
    uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t))(v194 + 16);
    uint64_t v72 = v192;
    v71(v192, v70, v69);
    uint64_t v73 = v187;
    v71(v187, (uint64_t)v72, v69);
    uint64_t v74 = v190;
    uint64_t v75 = (uint64_t)v177;
    long long v172 = &v177[*(int *)(v190 + 40)];
    uint64_t v76 = (uint64_t)v172;
    uint64_t v77 = type metadata accessor for DirectorySequence();
    uint64_t v78 = *(void *)(v77 - 8);
    uint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56);
    uint64_t v171 = v78 + 56;
    v79(v76, 1, 1, v77);
    v71((char *)v75, (uint64_t)v73, v69);
    *(void *)(v75 + *(int *)(v74 + 36)) = v175;
    v71(v186, (uint64_t)v73, v69);
    swift_retain();
    uint64_t v80 = (uint64_t)v189;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    uint64_t v81 = *(void (**)(char *, uint64_t))(v194 + 8);
    v194 += 8;
    v81(v73, v69);
    v79(v80, 0, 1, v77);
    sub_100062604(v80, (uint64_t)v172, (uint64_t *)&unk_101653C90);
    uint64_t v82 = (uint64_t)v179;
    sub_10001D608(v75, (uint64_t)v179, (uint64_t *)&unk_101653C80);
    os_log_type_t v83 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v181 + 56);
    uint64_t v84 = (uint64_t)v178;
    uint64_t v85 = v190;
    v83(v178, 1, 1, v190);
    sub_10001DAB4(v84, &qword_101653CB0);
    sub_10001D608(v82, v84, (uint64_t *)&unk_101653C80);
    v83((char *)v84, 0, 1, v85);
    sub_10001D608(v84, v180, &qword_1016496E0);
    uint64_t v86 = ((uint64_t (*)(char *, uint64_t))v81)(v192, v69);
    __chkstk_darwin(v86);
    uint64_t v87 = v185;
    *(&v165 - 2) = v185;
    sub_1006590AC((uint64_t (*)(uint64_t))sub_1005E6200, (uint64_t)(&v165 - 4));
    uint64_t v89 = *(void *)(v88 + 16);
    if (v89)
    {
      uint64_t v90 = v183;
      uint64_t v91 = v88 + ((*(unsigned __int8 *)(v183 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80));
      uint64_t v92 = *(void *)(v183 + 72);
      uint64_t v93 = v184;
      uint64_t v94 = (uint64_t)v170;
      while (1)
      {
        sub_1006CC8F8(v91, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        int v95 = v7[*(int *)(v93 + 40)];
        sub_1006CC8F8((uint64_t)v7, v94, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        if (v95 == 1) {
          break;
        }
        int v96 = *(unsigned __int8 *)(v94 + *(int *)(v93 + 40));
        sub_1006CCE04(v94, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        if (v96 == 4) {
          goto LABEL_57;
        }
        sub_1006CCE04((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        v91 += v92;
        if (!--v89)
        {
          uint64_t v97 = 1;
          uint64_t v98 = v174;
          goto LABEL_58;
        }
      }
      sub_1006CCE04(v94, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
LABEL_57:
      uint64_t v98 = v174;
      sub_1006CD470((uint64_t)v7, v174, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v97 = 0;
LABEL_58:
      uint64_t v141 = v191;
      uint64_t v87 = v185;
    }
    else
    {
      uint64_t v98 = v174;
      uint64_t v141 = v191;
      uint64_t v93 = v184;
      uint64_t v90 = v183;
      uint64_t v97 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v98, v97, 1, v93);
    swift_bridgeObjectRelease();
    uint64_t v147 = v176;
    int v148 = *(unsigned __int8 *)(v141 + *(int *)(v176 + 52));
    uint64_t v149 = (uint64_t)v182;
    sub_10001D074(v98, (uint64_t)v182, (uint64_t *)&unk_10163B7C0);
    if (v148 != 1 || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v149, 1, v93) == 1)
    {
      sub_10001DAB4(v149, (uint64_t *)&unk_10163B7C0);
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v150 = type metadata accessor for Logger();
      sub_100010324(v150, (uint64_t)qword_10170E9E8);
      uint64_t v151 = v173;
      sub_1006CC8F8(v141, v173, type metadata accessor for SharedBeaconRecord);
      uint64_t v152 = Logger.logObject.getter();
      os_log_type_t v153 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v152, v153))
      {
        uint64_t v154 = swift_slowAlloc();
        v195[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v154 = 141558275;
        uint64_t v198 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v154 + 12) = 2081;
        type metadata accessor for UUID();
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v155 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v198 = sub_1008FA0F0(v155, v156, v195);
        uint64_t v141 = v191;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1006CCE04(v151, type metadata accessor for SharedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v152, v153, "No accepted member circle for beacon %{private,mask.hash}s.", (uint8_t *)v154, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1006CCE04(v151, type metadata accessor for SharedBeaconRecord);
      }

      sub_10001DAB4(v98, (uint64_t *)&unk_10163B7C0);
      sub_1006CCE04(v141, type metadata accessor for SharedBeaconRecord);
      goto LABEL_67;
    }
    sub_10001DAB4(v149, (uint64_t *)&unk_10163B7C0);
    v195[0] = (uint64_t)&_swiftEmptySetSingleton;
    uint64_t v158 = v167;
    sub_100AE311C(v87, v167);
    uint64_t v159 = v158;
    uint64_t v160 = type metadata accessor for BeaconProductInfoRecord();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v160 - 8) + 48))(v159, 1, v160) == 1)
    {
      sub_10001DAB4(v159, &qword_10163BBB0);
      uint64_t v161 = *(void *)(v141 + *(int *)(v147 + 44));
      uint64_t v162 = v166;
      sub_1006CC8F8(v141, v166, type metadata accessor for SharedBeaconRecord);
      if (v161 != 76)
      {
        sub_1006CCE04(v162, type metadata accessor for SharedBeaconRecord);
        goto LABEL_81;
      }
      if (qword_1016375F8 != -1) {
        swift_once();
      }
      BOOL v163 = sub_100DC71B4(*(void *)(v162 + *(int *)(v147 + 48)), qword_10170F778);
      sub_1006CCE04(v162, type metadata accessor for SharedBeaconRecord);
      if (!v163) {
        goto LABEL_81;
      }
      sub_100DCCFE4(&v198, 6);
      sub_100DCCFE4(&v198, 7);
      sub_100DCCFE4(&v198, 12);
      sub_100DCCFE4(&v198, 13);
LABEL_79:
      sub_100DCCFE4(&v198, 17);
      sub_100DCCFE4(&v198, 3);
      sub_100DCCFE4(&v198, 16);
LABEL_81:
      sub_100DCCFE4(&v198, 5);
      sub_10001DAB4(v98, (uint64_t *)&unk_10163B7C0);
      sub_1006CCE04(v141, type metadata accessor for SharedBeaconRecord);
      unint64_t v100 = (void *)v195[0];
      goto LABEL_68;
    }
    int v164 = *(_DWORD *)(v159 + *(int *)(v160 + 68));
    sub_1006CCE04(v159, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    if (v164)
    {
      sub_100DCCFE4(&v198, 6);
      sub_100DCCFE4(&v198, 7);
      if ((v164 & 0x400) == 0)
      {
LABEL_77:
        if ((v164 & 0x100) == 0) {
          goto LABEL_79;
        }
LABEL_78:
        sub_100DCCFE4(&v198, 12);
        sub_100DCCFE4(&v198, 13);
        goto LABEL_79;
      }
    }
    else if ((v164 & 0x400) == 0)
    {
      goto LABEL_77;
    }
    sub_100DCCFE4(&v198, 10);
    sub_100DCCFE4(&v198, 11);
    if ((v164 & 0x100) == 0) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  uint64_t v99 = (uint64_t)v175;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_67:
    unint64_t v100 = &_swiftEmptySetSingleton;
    goto LABEL_68;
  }
  sub_1006CCE04(v99, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  unint64_t v100 = sub_100DF16C0((uint64_t)&off_10159F798);
LABEL_68:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v199);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v200);
  return v100;
}

void *sub_10069A174(uint64_t a1, uint64_t a2)
{
  uint64_t v193 = a2;
  uint64_t v182 = type metadata accessor for MemberSharingCircle();
  uint64_t v181 = *(void **)(v182 - 8);
  uint64_t v3 = __chkstk_darwin(v182);
  uint64_t v5 = (char *)&v165 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v165 - v6;
  uint64_t v8 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v8 - 8);
  uint64_t v167 = (uint64_t)&v165 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LocalFindableAccessoryRecord();
  __chkstk_darwin(v10);
  uint64_t v174 = (char *)&v165 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v191 = sub_10000588C((uint64_t *)&unk_101653C80);
  uint64_t v179 = *(void *)(v191 - 8);
  uint64_t v12 = __chkstk_darwin(v191);
  unint64_t v175 = (char *)&v165 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v177 = (char *)&v165 - v14;
  uint64_t v15 = sub_10000588C(&qword_1016496E0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v176 = (char *)&v165 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v178 = (uint64_t)&v165 - v18;
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_10163B7C0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v180 = (uint64_t)&v165 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v184 = (uint64_t)&v165 - v22;
  uint64_t v23 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v23 - 8);
  uint64_t v187 = (char *)&v165 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v183 = sub_10000588C(&qword_101645750);
  long long v172 = *(char **)(v183 - 8);
  uint64_t v25 = __chkstk_darwin(v183);
  unint64_t v170 = (char *)&v165 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v171 = (uint64_t)&v165 - v27;
  uint64_t v188 = type metadata accessor for URL();
  uint64_t v194 = *(void *)(v188 - 8);
  uint64_t v28 = __chkstk_darwin(v188);
  uint64_t v185 = (char *)&v165 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v186 = (char *)&v165 - v31;
  __chkstk_darwin(v30);
  uint64_t v192 = (char *)&v165 - v32;
  uint64_t v33 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v34 = __chkstk_darwin(v33 - 8);
  uint64_t v168 = (char *)&v165 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v169 = (uint64_t)&v165 - v36;
  uint64_t v189 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v189);
  uint64_t v38 = (char *)&v165 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v40 = __chkstk_darwin(v39);
  uint64_t v173 = (uint64_t)&v165 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v166 = (uint64_t)&v165 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v190 = (uint64_t)&v165 - v45;
  __chkstk_darwin(v44);
  unint64_t v47 = (char *)&v165 - v46;
  uint64_t v48 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v49 = __chkstk_darwin(v48);
  uint64_t v51 = (char *)&v165 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49);
  uint64_t v53 = (char *)&v165 - v52;
  v200[3] = v10;
  v200[4] = sub_100691B60(&qword_101642930, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
  uint64_t v54 = sub_10001D958(v200);
  sub_1006CC8F8(a1, (uint64_t)v54, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  sub_10001D010((uint64_t)v200, (uint64_t)v199);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  if (swift_dynamicCast())
  {
    sub_1006CD470((uint64_t)v53, (uint64_t)v51, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v55 = (uint64_t)v51;
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v191 = 0;
    uint64_t v56 = v195[0];
    unint64_t v57 = (uint64_t *)(v55 + v48[14]);
    uint64_t v59 = *v57;
    unint64_t v58 = v57[1];
    uint64_t v60 = v59 & 0xFFFFFFFFFFFFLL;
    if ((v58 & 0x2000000000000000) != 0) {
      uint64_t v61 = HIBYTE(v58) & 0xF;
    }
    else {
      uint64_t v61 = v60;
    }
    if (!v61)
    {
      v195[0] = 0;
      v195[1] = 0xE000000000000000;
      uint64_t v198 = *(void *)(v55 + v48[16]);
      v62._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v62);
      swift_bridgeObjectRelease();
      v63._uint64_t countAndFlagsBits = 95;
      v63._object = (void *)0xE100000000000000;
      String.append(_:)(v63);
      uint64_t v198 = *(void *)(v55 + v48[17]);
      v64._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v65 = v193;
    if (qword_101637658 != -1) {
      swift_once();
    }
    uint64_t v66 = qword_10170F830;
    swift_bridgeObjectRetain();
    if (sub_100F2C7E4())
    {
      v195[0] = v66;
      sub_10112728C(2u);
      sub_10112728C(1u);
      uint64_t v66 = v195[0];
    }
    uint64_t v198 = v66;
    if ((sub_10069376C(v55, v65) & 1) != 0 && (sub_100F2C7E4() & 1) == 0)
    {
      sub_100DCCFE4(v195, 8);
      sub_100DCCFE4(v195, 9);
    }
    else
    {
      sub_10112728C(8u);
      sub_10112728C(9u);
    }
    sub_1006CC8F8(v55 + v48[6], (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_1006CCE04((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    if (EnumCaseMultiPayload != 1)
    {
      sub_10112728C(0xCu);
      sub_10112728C(0xDu);
    }
    if ((sub_100D1CA38() & 1) == 0
      || (uint64_t My = type metadata accessor for Feature.FindMy(),
          uint64_t v196 = My,
          v197 = sub_100691B60((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy), uint64_t v103 = sub_10001D958(v195), (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v103, enum case for Feature.FindMy.btRSSIFinding(_:), My), LOBYTE(My) = isFeatureEnabled(_:)(), _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v195), (My & 1) == 0))
    {
      sub_10112728C(0xAu);
      sub_10112728C(0xBu);
    }
    if ((sub_10111198C() & 1) == 0) {
      goto LABEL_40;
    }
    uint64_t v104 = type metadata accessor for Feature.FindMy();
    uint64_t v196 = v104;
    uint64_t v105 = sub_100691B60((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    uint64_t v197 = v105;
    uint64_t v106 = sub_10001D958(v195);
    uint64_t v107 = *(void *)(v104 - 8);
    uint64_t v108 = *(void **)(v107 + 104);
    uint64_t v109 = v107 + 104;
    ((void (*)(uint64_t *, void, uint64_t))v108)(v106, enum case for Feature.FindMy.itemSharing(_:), v104);
    char v110 = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v195);
    if ((v110 & 1) == 0)
    {
LABEL_40:
      swift_bridgeObjectRelease();
      uint64_t v137 = v198;
      swift_bridgeObjectRetain();
      char v138 = sub_100DC7494(4u, v137);
      swift_bridgeObjectRelease();
      if (v138)
      {
        sub_10112728C(4u);
        uint64_t v137 = v198;
      }
      swift_bridgeObjectRetain();
      char v139 = sub_100DC7494(5u, v137);
      swift_bridgeObjectRelease();
      if (v139) {
        sub_10112728C(5u);
      }
      sub_10112728C(0x15u);
      uint64_t v140 = v55;
      goto LABEL_55;
    }
    uint64_t v180 = v109;
    uint64_t v181 = v108;
    uint64_t v182 = v105;
    uint64_t v184 = v104;
    uint64_t v189 = v56;
    sub_100DCCFE4(v195, 4);
    uint64_t v111 = v48[5];
    uint64_t v190 = v55;
    uint64_t v178 = v55 + v111;
    uint64_t v179 = sub_101158C68((uint64_t)&off_10159F860);
    uint64_t v193 = *(void *)(v65 + 160);
    if (qword_1016370F0 != -1) {
      swift_once();
    }
    uint64_t v112 = v188;
    uint64_t v113 = sub_100010324(v188, (uint64_t)qword_10170ED28);
    long long v114 = *(void (**)(char *, uint64_t, uint64_t))(v194 + 16);
    long long v115 = v192;
    v114(v192, v113, v112);
    uint64_t v116 = v186;
    v114(v186, (uint64_t)v115, v112);
    uint64_t v117 = v183;
    uint64_t v118 = (uint64_t)v170;
    uint64_t v177 = &v170[*(int *)(v183 + 40)];
    uint64_t v119 = (uint64_t)v177;
    uint64_t v120 = type metadata accessor for DirectorySequence();
    uint64_t v121 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v120 - 8) + 56);
    v121(v119, 1, 1, v120);
    v114((char *)v118, (uint64_t)v116, v112);
    *(void *)(v118 + *(int *)(v117 + 36)) = v193;
    v114(v185, (uint64_t)v116, v112);
    swift_retain();
    uint64_t v122 = (uint64_t)v187;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    dispatch_group_t v123 = *(void (**)(char *, uint64_t))(v194 + 8);
    v123(v116, v112);
    v121(v122, 0, 1, v120);
    sub_100062604(v122, (uint64_t)v177, (uint64_t *)&unk_101653C90);
    uint64_t v124 = v171;
    sub_10001D608(v118, v171, &qword_101645750);
    uint64_t v125 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v172 + 7);
    uint64_t v126 = (uint64_t)v168;
    uint64_t v127 = v183;
    v125(v168, 1, 1, v183);
    sub_10001DAB4(v126, &qword_101645758);
    sub_10001D608(v124, v126, &qword_101645750);
    v125((char *)v126, 0, 1, v127);
    sub_10001D608(v126, v169, (uint64_t *)&unk_101653CA0);
    uint64_t v128 = ((uint64_t (*)(char *, uint64_t))v123)(v192, v112);
    __chkstk_darwin(v128);
    uint64_t v129 = v178;
    *(&v165 - 2) = v179;
    *(&v165 - 1) = v129;
    sub_100658408(sub_1006CD688, (uint64_t)(&v165 - 4));
    uint64_t v131 = v130;
    swift_bridgeObjectRelease();
    uint64_t v132 = *(void *)(v131 + 16);
    swift_bridgeObjectRelease();
    uint64_t v133 = v198;
    swift_bridgeObjectRetain();
    LOBYTE(v123) = sub_100DC7494(5u, v133);
    swift_bridgeObjectRelease();
    if ((v123 & 1) != 0 || !v132)
    {
      swift_bridgeObjectRetain();
      char v141 = sub_100DC7494(5u, v133);
      swift_bridgeObjectRelease();
      uint64_t v134 = v189;
      uint64_t v135 = v184;
      uint64_t v136 = v182;
      if ((v141 & 1) != 0 && !v132) {
        sub_10112728C(5u);
      }
    }
    else
    {
      sub_100DCCFE4(v195, 5);
      uint64_t v134 = v189;
      uint64_t v135 = v184;
      uint64_t v136 = v182;
    }
    uint64_t v196 = v135;
    uint64_t v197 = v136;
    char v142 = sub_10001D958(v195);
    ((void (*)(uint64_t *, void, uint64_t))v181)(v142, enum case for Feature.FindMy.cowardlyCarrot(_:), v135);
    char v143 = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v195);
    uint64_t v144 = v190;
    if (v143)
    {
      char v145 = sub_1010AAF90(v134);
      swift_bridgeObjectRelease();
      if ((v145 & 1) == 0)
      {
        sub_100DCCFE4(v195, 21);
LABEL_54:
        uint64_t v140 = v144;
LABEL_55:
        sub_1006CCE04(v140, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        unint64_t v100 = (void *)v198;
        goto LABEL_67;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_10112728C(0x15u);
    goto LABEL_54;
  }
  if (swift_dynamicCast())
  {
    unint64_t v170 = v5;
    uint64_t v67 = v190;
    sub_1006CD470((uint64_t)v47, v190, type metadata accessor for SharedBeaconRecord);
    uint64_t v183 = v39;
    uint64_t v189 = v67 + *(int *)(v39 + 20);
    uint64_t v174 = *(char **)(v193 + 160);
    if (qword_101636A48 != -1) {
      swift_once();
    }
    uint64_t v68 = v188;
    uint64_t v69 = sub_100010324(v188, (uint64_t)qword_10170DD78);
    uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v194 + 16);
    uint64_t v71 = v192;
    v70(v192, v69, v68);
    uint64_t v72 = v186;
    v70(v186, (uint64_t)v71, v68);
    uint64_t v73 = v191;
    uint64_t v74 = v175;
    long long v172 = &v175[*(int *)(v191 + 40)];
    uint64_t v75 = (uint64_t)v172;
    uint64_t v76 = type metadata accessor for DirectorySequence();
    uint64_t v77 = *(void *)(v76 - 8);
    uint64_t v78 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56);
    uint64_t v171 = v77 + 56;
    v78(v75, 1, 1, v76);
    uint64_t v79 = v68;
    v70(v74, (uint64_t)v72, v68);
    *(void *)&v74[*(int *)(v73 + 36)] = v174;
    v70(v185, (uint64_t)v72, v68);
    swift_retain();
    uint64_t v80 = (uint64_t)v187;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    uint64_t v81 = *(void (**)(char *, uint64_t))(v194 + 8);
    v194 += 8;
    v81(v72, v68);
    v78(v80, 0, 1, v76);
    sub_100062604(v80, (uint64_t)v172, (uint64_t *)&unk_101653C90);
    uint64_t v82 = (uint64_t)v74;
    uint64_t v83 = (uint64_t)v177;
    sub_10001D608(v82, (uint64_t)v177, (uint64_t *)&unk_101653C80);
    uint64_t v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56);
    uint64_t v85 = (uint64_t)v176;
    uint64_t v86 = v191;
    v84(v176, 1, 1, v191);
    sub_10001DAB4(v85, &qword_101653CB0);
    sub_10001D608(v83, v85, (uint64_t *)&unk_101653C80);
    v84((char *)v85, 0, 1, v86);
    sub_10001D608(v85, v178, &qword_1016496E0);
    uint64_t v87 = ((uint64_t (*)(char *, uint64_t))v81)(v192, v79);
    __chkstk_darwin(v87);
    *(&v165 - 2) = v189;
    sub_1006590AC((uint64_t (*)(uint64_t))sub_1005E6200, (uint64_t)(&v165 - 4));
    uint64_t v89 = *(void *)(v88 + 16);
    if (v89)
    {
      uint64_t v90 = v181;
      uint64_t v91 = v88 + ((*((unsigned __int8 *)v181 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v181 + 80));
      uint64_t v92 = v181[9];
      uint64_t v93 = v182;
      uint64_t v94 = (uint64_t)v170;
      while (1)
      {
        sub_1006CC8F8(v91, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        int v95 = v7[*(int *)(v93 + 40)];
        sub_1006CC8F8((uint64_t)v7, v94, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        if (v95 == 1) {
          break;
        }
        int v96 = *(unsigned __int8 *)(v94 + *(int *)(v93 + 40));
        sub_1006CCE04(v94, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        if (v96 == 4) {
          goto LABEL_57;
        }
        sub_1006CCE04((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        v91 += v92;
        if (!--v89)
        {
          uint64_t v97 = 1;
          uint64_t v98 = v184;
          goto LABEL_58;
        }
      }
      sub_1006CCE04(v94, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
LABEL_57:
      uint64_t v98 = v184;
      sub_1006CD470((uint64_t)v7, v184, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v97 = 0;
    }
    else
    {
      uint64_t v98 = v184;
      uint64_t v93 = v182;
      uint64_t v90 = v181;
      uint64_t v97 = 1;
    }
LABEL_58:
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v90[7])(v98, v97, 1, v93);
    swift_bridgeObjectRelease();
    uint64_t v146 = v183;
    uint64_t v147 = v190;
    int v148 = *(unsigned __int8 *)(v190 + *(int *)(v183 + 52));
    uint64_t v149 = v180;
    sub_10001D074(v98, v180, (uint64_t *)&unk_10163B7C0);
    if (v148 != 1 || ((unsigned int (*)(uint64_t, uint64_t, uint64_t))v90[6])(v149, 1, v93) == 1)
    {
      sub_10001DAB4(v149, (uint64_t *)&unk_10163B7C0);
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v150 = type metadata accessor for Logger();
      sub_100010324(v150, (uint64_t)qword_10170E9E8);
      uint64_t v151 = v173;
      sub_1006CC8F8(v147, v173, type metadata accessor for SharedBeaconRecord);
      uint64_t v152 = Logger.logObject.getter();
      os_log_type_t v153 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v152, v153))
      {
        uint64_t v154 = swift_slowAlloc();
        v195[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v154 = 141558275;
        uint64_t v198 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v154 + 12) = 2081;
        type metadata accessor for UUID();
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v155 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v198 = sub_1008FA0F0(v155, v156, v195);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1006CCE04(v151, type metadata accessor for SharedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v152, v153, "No accepted member circle for beacon %{private,mask.hash}s.", (uint8_t *)v154, 0x16u);
        swift_arrayDestroy();
        uint64_t v98 = v184;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1006CCE04(v151, type metadata accessor for SharedBeaconRecord);
      }

      sub_10001DAB4(v98, (uint64_t *)&unk_10163B7C0);
      sub_1006CCE04(v147, type metadata accessor for SharedBeaconRecord);
      goto LABEL_66;
    }
    sub_10001DAB4(v149, (uint64_t *)&unk_10163B7C0);
    v195[0] = (uint64_t)&_swiftEmptySetSingleton;
    uint64_t v158 = v167;
    sub_100AE311C(v189, v167);
    uint64_t v159 = v158;
    uint64_t v160 = type metadata accessor for BeaconProductInfoRecord();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v160 - 8) + 48))(v159, 1, v160) == 1)
    {
      sub_10001DAB4(v159, &qword_10163BBB0);
      uint64_t v161 = *(void *)(v147 + *(int *)(v146 + 44));
      uint64_t v162 = v166;
      sub_1006CC8F8(v147, v166, type metadata accessor for SharedBeaconRecord);
      if (v161 != 76)
      {
        sub_1006CCE04(v162, type metadata accessor for SharedBeaconRecord);
        goto LABEL_80;
      }
      if (qword_1016375F8 != -1) {
        swift_once();
      }
      BOOL v163 = sub_100DC71B4(*(void *)(v162 + *(int *)(v146 + 48)), qword_10170F778);
      sub_1006CCE04(v162, type metadata accessor for SharedBeaconRecord);
      if (!v163) {
        goto LABEL_80;
      }
      sub_100DCCFE4(&v198, 6);
      sub_100DCCFE4(&v198, 7);
      sub_100DCCFE4(&v198, 12);
      sub_100DCCFE4(&v198, 13);
LABEL_78:
      sub_100DCCFE4(&v198, 17);
      sub_100DCCFE4(&v198, 3);
      sub_100DCCFE4(&v198, 16);
LABEL_80:
      sub_100DCCFE4(&v198, 5);
      sub_10001DAB4(v98, (uint64_t *)&unk_10163B7C0);
      sub_1006CCE04(v147, type metadata accessor for SharedBeaconRecord);
      unint64_t v100 = (void *)v195[0];
      goto LABEL_67;
    }
    int v164 = *(_DWORD *)(v159 + *(int *)(v160 + 68));
    sub_1006CCE04(v159, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    if (v164)
    {
      sub_100DCCFE4(&v198, 6);
      sub_100DCCFE4(&v198, 7);
      if ((v164 & 0x400) == 0)
      {
LABEL_76:
        if ((v164 & 0x100) == 0) {
          goto LABEL_78;
        }
LABEL_77:
        sub_100DCCFE4(&v198, 12);
        sub_100DCCFE4(&v198, 13);
        goto LABEL_78;
      }
    }
    else if ((v164 & 0x400) == 0)
    {
      goto LABEL_76;
    }
    sub_100DCCFE4(&v198, 10);
    sub_100DCCFE4(&v198, 11);
    if ((v164 & 0x100) == 0) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  uint64_t v99 = (uint64_t)v174;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_66:
    unint64_t v100 = &_swiftEmptySetSingleton;
    goto LABEL_67;
  }
  sub_1006CCE04(v99, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  unint64_t v100 = sub_100DF16C0((uint64_t)&off_10159F888);
LABEL_67:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v199);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v200);
  return v100;
}

void *sub_10069BCA0(uint64_t a1, char *a2)
{
  uint64_t v193 = a2;
  uint64_t v184 = type metadata accessor for MemberSharingCircle();
  uint64_t v183 = *(void *)(v184 - 8);
  uint64_t v3 = __chkstk_darwin(v184);
  uint64_t v5 = (char *)&v165 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v165 - v6;
  uint64_t v8 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v8 - 8);
  uint64_t v167 = (uint64_t)&v165 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = type metadata accessor for LocalFindableAccessoryRecord();
  __chkstk_darwin(v176);
  unint64_t v175 = (char *)&v165 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v190 = sub_10000588C((uint64_t *)&unk_101653C80);
  uint64_t v181 = *(void *)(v190 - 8);
  uint64_t v11 = __chkstk_darwin(v190);
  uint64_t v177 = (char *)&v165 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v179 = (char *)&v165 - v13;
  uint64_t v14 = sub_10000588C(&qword_1016496E0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v178 = (char *)&v165 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v180 = (uint64_t)&v165 - v17;
  uint64_t v18 = sub_10000588C((uint64_t *)&unk_10163B7C0);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v182 = (uint64_t *)((char *)&v165 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  uint64_t v174 = (uint64_t)&v165 - v21;
  uint64_t v22 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v22 - 8);
  uint64_t v189 = (char *)&v165 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = sub_10000588C(&qword_101645750);
  long long v172 = *(char **)(v185 - 8);
  uint64_t v24 = __chkstk_darwin(v185);
  unint64_t v170 = (char *)&v165 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v171 = (uint64_t)&v165 - v26;
  uint64_t v188 = type metadata accessor for URL();
  uint64_t v194 = *(void *)(v188 - 8);
  uint64_t v27 = __chkstk_darwin(v188);
  uint64_t v186 = (char *)&v165 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v187 = (char *)&v165 - v30;
  __chkstk_darwin(v29);
  uint64_t v192 = (char *)&v165 - v31;
  uint64_t v32 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v33 = __chkstk_darwin(v32 - 8);
  uint64_t v168 = (char *)&v165 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  uint64_t v169 = (uint64_t)&v165 - v35;
  uint64_t v36 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v165 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v40 = __chkstk_darwin(v39);
  uint64_t v173 = (uint64_t)&v165 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v166 = (uint64_t)&v165 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v191 = (uint64_t)&v165 - v45;
  __chkstk_darwin(v44);
  unint64_t v47 = (char *)&v165 - v46;
  uint64_t v48 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v49 = __chkstk_darwin(v48);
  uint64_t v51 = (char *)&v165 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49);
  uint64_t v53 = (char *)&v165 - v52;
  v200[3] = v39;
  v200[4] = sub_100691B60(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  uint64_t v54 = sub_10001D958(v200);
  sub_1006CC8F8(a1, (uint64_t)v54, type metadata accessor for SharedBeaconRecord);
  sub_10001D010((uint64_t)v200, (uint64_t)v199);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  if (swift_dynamicCast())
  {
    sub_1006CD470((uint64_t)v53, (uint64_t)v51, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v191 = 0;
    uint64_t v55 = v195[0];
    uint64_t v56 = &v51[v48[14]];
    uint64_t v58 = *(void *)v56;
    unint64_t v57 = *((void *)v56 + 1);
    uint64_t v59 = v58 & 0xFFFFFFFFFFFFLL;
    if ((v57 & 0x2000000000000000) != 0) {
      uint64_t v60 = HIBYTE(v57) & 0xF;
    }
    else {
      uint64_t v60 = v59;
    }
    uint64_t v61 = (uint64_t)v193;
    if (!v60)
    {
      v195[0] = 0;
      v195[1] = 0xE000000000000000;
      uint64_t v198 = *(void *)&v51[v48[16]];
      v62._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v62);
      swift_bridgeObjectRelease();
      v63._uint64_t countAndFlagsBits = 95;
      v63._object = (void *)0xE100000000000000;
      String.append(_:)(v63);
      uint64_t v198 = *(void *)&v51[v48[17]];
      v64._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (qword_101637658 != -1) {
      swift_once();
    }
    uint64_t v65 = qword_10170F830;
    swift_bridgeObjectRetain();
    if (sub_100F2C7E4())
    {
      v195[0] = v65;
      sub_10112728C(2u);
      sub_10112728C(1u);
      uint64_t v65 = v195[0];
    }
    uint64_t v198 = v65;
    if ((sub_10069376C((uint64_t)v51, v61) & 1) != 0 && (sub_100F2C7E4() & 1) == 0)
    {
      sub_100DCCFE4(v195, 8);
      sub_100DCCFE4(v195, 9);
    }
    else
    {
      sub_10112728C(8u);
      sub_10112728C(9u);
    }
    sub_1006CC8F8((uint64_t)&v51[v48[6]], (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_1006CCE04((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    if (EnumCaseMultiPayload != 1)
    {
      sub_10112728C(0xCu);
      sub_10112728C(0xDu);
    }
    if ((sub_100D1CA38() & 1) == 0
      || (uint64_t My = type metadata accessor for Feature.FindMy(),
          uint64_t v196 = My,
          v197 = sub_100691B60((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy), uint64_t v103 = sub_10001D958(v195), (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v103, enum case for Feature.FindMy.btRSSIFinding(_:), My), LOBYTE(My) = isFeatureEnabled(_:)(), _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v195), (My & 1) == 0))
    {
      sub_10112728C(0xAu);
      sub_10112728C(0xBu);
    }
    if ((sub_10111198C() & 1) == 0) {
      goto LABEL_40;
    }
    uint64_t v104 = type metadata accessor for Feature.FindMy();
    uint64_t v196 = v104;
    uint64_t v105 = sub_100691B60((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    uint64_t v197 = v105;
    uint64_t v106 = sub_10001D958(v195);
    uint64_t v107 = *(void *)(v104 - 8);
    uint64_t v108 = *(uint64_t **)(v107 + 104);
    uint64_t v109 = v107 + 104;
    ((void (*)(uint64_t *, void, uint64_t))v108)(v106, enum case for Feature.FindMy.itemSharing(_:), v104);
    char v110 = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v195);
    if ((v110 & 1) == 0)
    {
LABEL_40:
      swift_bridgeObjectRelease();
      uint64_t v137 = v198;
      swift_bridgeObjectRetain();
      char v138 = sub_100DC7494(4u, v137);
      swift_bridgeObjectRelease();
      if (v138)
      {
        sub_10112728C(4u);
        uint64_t v137 = v198;
      }
      swift_bridgeObjectRetain();
      char v139 = sub_100DC7494(5u, v137);
      swift_bridgeObjectRelease();
      if (v139) {
        sub_10112728C(5u);
      }
      sub_10112728C(0x15u);
      uint64_t v140 = (uint64_t)v51;
      goto LABEL_55;
    }
    uint64_t v181 = v109;
    uint64_t v182 = v108;
    uint64_t v183 = v105;
    uint64_t v184 = v104;
    uint64_t v190 = v55;
    sub_100DCCFE4(v195, 4);
    uint64_t v111 = v48[5];
    uint64_t v193 = v51;
    uint64_t v179 = &v51[v111];
    uint64_t v180 = sub_101158C68((uint64_t)&off_10159F6F8);
    uint64_t v178 = *(char **)(v61 + 160);
    if (qword_1016370F0 != -1) {
      swift_once();
    }
    uint64_t v112 = v188;
    uint64_t v113 = sub_100010324(v188, (uint64_t)qword_10170ED28);
    long long v114 = *(void (**)(char *, uint64_t, uint64_t))(v194 + 16);
    long long v115 = v192;
    v114(v192, v113, v112);
    uint64_t v116 = v187;
    v114(v187, (uint64_t)v115, v112);
    uint64_t v117 = v185;
    uint64_t v118 = (uint64_t)v170;
    uint64_t v177 = &v170[*(int *)(v185 + 40)];
    uint64_t v119 = (uint64_t)v177;
    uint64_t v120 = type metadata accessor for DirectorySequence();
    uint64_t v121 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v120 - 8) + 56);
    v121(v119, 1, 1, v120);
    v114((char *)v118, (uint64_t)v116, v112);
    *(void *)(v118 + *(int *)(v117 + 36)) = v178;
    v114(v186, (uint64_t)v116, v112);
    swift_retain();
    uint64_t v122 = (uint64_t)v189;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    dispatch_group_t v123 = *(void (**)(char *, uint64_t))(v194 + 8);
    v123(v116, v112);
    v121(v122, 0, 1, v120);
    sub_100062604(v122, (uint64_t)v177, (uint64_t *)&unk_101653C90);
    uint64_t v124 = v171;
    sub_10001D608(v118, v171, &qword_101645750);
    uint64_t v125 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v172 + 7);
    uint64_t v126 = (uint64_t)v168;
    uint64_t v127 = v185;
    v125(v168, 1, 1, v185);
    sub_10001DAB4(v126, &qword_101645758);
    sub_10001D608(v124, v126, &qword_101645750);
    v125((char *)v126, 0, 1, v127);
    sub_10001D608(v126, v169, (uint64_t *)&unk_101653CA0);
    uint64_t v128 = ((uint64_t (*)(char *, uint64_t))v123)(v192, v112);
    __chkstk_darwin(v128);
    uint64_t v129 = (uint64_t)v179;
    *(&v165 - 2) = v180;
    *(&v165 - 1) = v129;
    sub_100658408(sub_1006CD688, (uint64_t)(&v165 - 4));
    uint64_t v131 = v130;
    swift_bridgeObjectRelease();
    uint64_t v132 = *(void *)(v131 + 16);
    swift_bridgeObjectRelease();
    uint64_t v133 = v198;
    swift_bridgeObjectRetain();
    LOBYTE(v123) = sub_100DC7494(5u, v133);
    swift_bridgeObjectRelease();
    if ((v123 & 1) != 0 || !v132)
    {
      swift_bridgeObjectRetain();
      char v142 = sub_100DC7494(5u, v133);
      swift_bridgeObjectRelease();
      uint64_t v134 = v190;
      uint64_t v135 = v184;
      uint64_t v136 = (void (*)(uint64_t *, void, uint64_t))v182;
      if ((v142 & 1) != 0 && !v132) {
        sub_10112728C(5u);
      }
    }
    else
    {
      sub_100DCCFE4(v195, 5);
      uint64_t v134 = v190;
      uint64_t v135 = v184;
      uint64_t v136 = (void (*)(uint64_t *, void, uint64_t))v182;
    }
    uint64_t v196 = v135;
    uint64_t v197 = v183;
    char v143 = sub_10001D958(v195);
    v136(v143, enum case for Feature.FindMy.cowardlyCarrot(_:), v135);
    char v144 = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v195);
    uint64_t v145 = (uint64_t)v193;
    if (v144)
    {
      char v146 = sub_1010AAF90(v134);
      swift_bridgeObjectRelease();
      if ((v146 & 1) == 0)
      {
        sub_100DCCFE4(v195, 21);
LABEL_54:
        uint64_t v140 = v145;
LABEL_55:
        sub_1006CCE04(v140, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        unint64_t v100 = (void *)v198;
        goto LABEL_68;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_10112728C(0x15u);
    goto LABEL_54;
  }
  if (swift_dynamicCast())
  {
    unint64_t v170 = v5;
    uint64_t v66 = (uint64_t)v47;
    uint64_t v67 = v191;
    sub_1006CD470(v66, v191, type metadata accessor for SharedBeaconRecord);
    uint64_t v176 = v39;
    uint64_t v185 = v67 + *(int *)(v39 + 20);
    unint64_t v175 = (char *)*((void *)v193 + 20);
    if (qword_101636A48 != -1) {
      swift_once();
    }
    uint64_t v68 = v188;
    uint64_t v69 = sub_100010324(v188, (uint64_t)qword_10170DD78);
    uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v194 + 16);
    uint64_t v71 = v192;
    v70(v192, v69, v68);
    uint64_t v72 = v187;
    v70(v187, (uint64_t)v71, v68);
    uint64_t v73 = v190;
    uint64_t v74 = (uint64_t)v177;
    long long v172 = &v177[*(int *)(v190 + 40)];
    uint64_t v75 = (uint64_t)v172;
    uint64_t v76 = type metadata accessor for DirectorySequence();
    uint64_t v77 = *(void *)(v76 - 8);
    uint64_t v78 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56);
    uint64_t v171 = v77 + 56;
    v78(v75, 1, 1, v76);
    uint64_t v79 = v68;
    v70((char *)v74, (uint64_t)v72, v68);
    *(void *)(v74 + *(int *)(v73 + 36)) = v175;
    v70(v186, (uint64_t)v72, v68);
    swift_retain();
    uint64_t v80 = (uint64_t)v189;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)();
    uint64_t v81 = *(void (**)(char *, uint64_t))(v194 + 8);
    v194 += 8;
    v81(v72, v68);
    v78(v80, 0, 1, v76);
    sub_100062604(v80, (uint64_t)v172, (uint64_t *)&unk_101653C90);
    uint64_t v82 = (uint64_t)v179;
    sub_10001D608(v74, (uint64_t)v179, (uint64_t *)&unk_101653C80);
    uint64_t v83 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v181 + 56);
    uint64_t v84 = (uint64_t)v178;
    uint64_t v85 = v190;
    v83(v178, 1, 1, v190);
    sub_10001DAB4(v84, &qword_101653CB0);
    sub_10001D608(v82, v84, (uint64_t *)&unk_101653C80);
    v83((char *)v84, 0, 1, v85);
    sub_10001D608(v84, v180, &qword_1016496E0);
    uint64_t v86 = ((uint64_t (*)(char *, uint64_t))v81)(v192, v79);
    __chkstk_darwin(v86);
    uint64_t v87 = v185;
    *(&v165 - 2) = v185;
    sub_1006590AC((uint64_t (*)(uint64_t))sub_1005E35A4, (uint64_t)(&v165 - 4));
    uint64_t v89 = *(void *)(v88 + 16);
    if (v89)
    {
      uint64_t v90 = v183;
      uint64_t v91 = v88 + ((*(unsigned __int8 *)(v183 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80));
      uint64_t v92 = *(void *)(v183 + 72);
      uint64_t v93 = v184;
      uint64_t v94 = (uint64_t)v170;
      while (1)
      {
        sub_1006CC8F8(v91, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        int v95 = v7[*(int *)(v93 + 40)];
        sub_1006CC8F8((uint64_t)v7, v94, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        if (v95 == 1) {
          break;
        }
        int v96 = *(unsigned __int8 *)(v94 + *(int *)(v93 + 40));
        sub_1006CCE04(v94, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        if (v96 == 4) {
          goto LABEL_57;
        }
        sub_1006CCE04((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        v91 += v92;
        if (!--v89)
        {
          uint64_t v97 = 1;
          uint64_t v98 = v174;
          goto LABEL_58;
        }
      }
      sub_1006CCE04(v94, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
LABEL_57:
      uint64_t v98 = v174;
      sub_1006CD470((uint64_t)v7, v174, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v97 = 0;
LABEL_58:
      uint64_t v141 = v191;
      uint64_t v87 = v185;
    }
    else
    {
      uint64_t v98 = v174;
      uint64_t v141 = v191;
      uint64_t v93 = v184;
      uint64_t v90 = v183;
      uint64_t v97 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v98, v97, 1, v93);
    swift_bridgeObjectRelease();
    uint64_t v147 = v176;
    int v148 = *(unsigned __int8 *)(v141 + *(int *)(v176 + 52));
    uint64_t v149 = (uint64_t)v182;
    sub_10001D074(v98, (uint64_t)v182, (uint64_t *)&unk_10163B7C0);
    if (v148 != 1 || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v149, 1, v93) == 1)
    {
      sub_10001DAB4(v149, (uint64_t *)&unk_10163B7C0);
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v150 = type metadata accessor for Logger();
      sub_100010324(v150, (uint64_t)qword_10170E9E8);
      uint64_t v151 = v173;
      sub_1006CC8F8(v141, v173, type metadata accessor for SharedBeaconRecord);
      uint64_t v152 = Logger.logObject.getter();
      os_log_type_t v153 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v152, v153))
      {
        uint64_t v154 = swift_slowAlloc();
        v195[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v154 = 141558275;
        uint64_t v198 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v154 + 12) = 2081;
        type metadata accessor for UUID();
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v155 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v198 = sub_1008FA0F0(v155, v156, v195);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1006CCE04(v151, type metadata accessor for SharedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v152, v153, "No accepted member circle for beacon %{private,mask.hash}s.", (uint8_t *)v154, 0x16u);
        swift_arrayDestroy();
        uint64_t v141 = v191;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1006CCE04(v151, type metadata accessor for SharedBeaconRecord);
      }

      sub_10001DAB4(v98, (uint64_t *)&unk_10163B7C0);
      sub_1006CCE04(v141, type metadata accessor for SharedBeaconRecord);
      goto LABEL_67;
    }
    sub_10001DAB4(v149, (uint64_t *)&unk_10163B7C0);
    v195[0] = (uint64_t)&_swiftEmptySetSingleton;
    uint64_t v158 = v167;
    sub_100AE311C(v87, v167);
    uint64_t v159 = v158;
    uint64_t v160 = type metadata accessor for BeaconProductInfoRecord();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v160 - 8) + 48))(v159, 1, v160) == 1)
    {
      sub_10001DAB4(v159, &qword_10163BBB0);
      uint64_t v161 = *(void *)(v141 + *(int *)(v147 + 44));
      uint64_t v162 = v166;
      sub_1006CC8F8(v141, v166, type metadata accessor for SharedBeaconRecord);
      if (v161 != 76)
      {
        sub_1006CCE04(v162, type metadata accessor for SharedBeaconRecord);
        goto LABEL_81;
      }
      if (qword_1016375F8 != -1) {
        swift_once();
      }
      BOOL v163 = sub_100DC71B4(*(void *)(v162 + *(int *)(v147 + 48)), qword_10170F778);
      sub_1006CCE04(v162, type metadata accessor for SharedBeaconRecord);
      if (!v163) {
        goto LABEL_81;
      }
      sub_100DCCFE4(&v198, 6);
      sub_100DCCFE4(&v198, 7);
      sub_100DCCFE4(&v198, 12);
      sub_100DCCFE4(&v198, 13);
LABEL_79:
      sub_100DCCFE4(&v198, 17);
      sub_100DCCFE4(&v198, 3);
      sub_100DCCFE4(&v198, 16);
LABEL_81:
      sub_100DCCFE4(&v198, 5);
      sub_10001DAB4(v98, (uint64_t *)&unk_10163B7C0);
      sub_1006CCE04(v141, type metadata accessor for SharedBeaconRecord);
      unint64_t v100 = (void *)v195[0];
      goto LABEL_68;
    }
    int v164 = *(_DWORD *)(v159 + *(int *)(v160 + 68));
    sub_1006CCE04(v159, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    if (v164)
    {
      sub_100DCCFE4(&v198, 6);
      sub_100DCCFE4(&v198, 7);
      if ((v164 & 0x400) == 0)
      {
LABEL_77:
        if ((v164 & 0x100) == 0) {
          goto LABEL_79;
        }
LABEL_78:
        sub_100DCCFE4(&v198, 12);
        sub_100DCCFE4(&v198, 13);
        goto LABEL_79;
      }
    }
    else if ((v164 & 0x400) == 0)
    {
      goto LABEL_77;
    }
    sub_100DCCFE4(&v198, 10);
    sub_100DCCFE4(&v198, 11);
    if ((v164 & 0x100) == 0) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  uint64_t v99 = (uint64_t)v175;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_67:
    unint64_t v100 = &_swiftEmptySetSingleton;
    goto LABEL_68;
  }
  sub_1006CCE04(v99, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  unint64_t v100 = sub_100DF16C0((uint64_t)&off_10159F720);
LABEL_68:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v199);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v200);
  return v100;
}

uint64_t sub_10069D7C4(uint64_t a1, int a2, char **a3)
{
  LODWORD(v306) = a2;
  uint64_t v5 = sub_10000588C(&qword_101660BB0);
  __chkstk_darwin(v5 - 8);
  uint64_t v273 = (uint64_t)&v239 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord();
  uint64_t v290 = *(void *)(found - 8);
  __chkstk_darwin(found);
  uint64_t v271 = (uint64_t)&v239 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163BB70);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v277 = (uint64_t)&v239 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v279 = (uint64_t)&v239 - v11;
  uint64_t v12 = sub_10000588C(&qword_101638CF0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v270 = (char *)&v239 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  Class v269 = (char *)&v239 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v239 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v302 = (uint64_t)&v239 - v21;
  __chkstk_darwin(v20);
  uint64_t v297 = (uint64_t)&v239 - v22;
  uint64_t v308 = type metadata accessor for Date();
  uint64_t v303 = *(void *)(v308 - 8);
  uint64_t v23 = __chkstk_darwin(v308);
  v276 = (char *)&v239 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  v304 = (char *)&v239 - v26;
  __chkstk_darwin(v25);
  v307 = (char *)&v239 - v27;
  uint64_t v28 = type metadata accessor for UUID();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v268 = (char *)&v239 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v275 = (char *)&v239 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v278 = (char *)&v239 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v288 = (char *)&v239 - v37;
  __chkstk_darwin(v36);
  uint64_t v39 = (char *)&v239 - v38;
  uint64_t v40 = type metadata accessor for SharedBeaconRecord(0);
  v318[3] = v40;
  v318[4] = sub_100691B60(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  uint64_t v41 = sub_10001D958(v318);
  sub_1006CC8F8(a1, (uint64_t)v41, type metadata accessor for SharedBeaconRecord);
  sub_10000588C(&qword_10164B288);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v42 = aBlock;
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  unint64_t v287 = (char *)v41 + *(int *)(v40 + 20);
  uint64_t v286 = v29 + 16;
  uint64_t v285 = v43;
  ((void (*)(char *))v43)(v39);
  uint64_t v44 = v42[2];
  Class v292 = v42;
  if (v44)
  {
    sub_1007240CC((uint64_t)v39);
    uint64_t v46 = 2;
    if (v45) {
      uint64_t v46 = 0;
    }
  }
  else
  {
    uint64_t v46 = 2;
  }
  uint64_t v274 = v46;
  unint64_t v47 = *(void (**)(char *, uint64_t))(v29 + 8);
  uint64_t v296 = v29 + 8;
  v295 = v47;
  v47(v39, v28);
  uint64_t v48 = sub_1006A95F0((uint64_t)v41, a3);
  uint64_t v49 = v48[2];
  if (!v49)
  {
    swift_bridgeObjectRelease();
    v237 = 0;
    uint64_t v236 = 0;
    v238 = (void **)_swiftEmptyDictionarySingleton;
LABEL_136:
    swift_bridgeObjectRelease();
    sub_1000A1534((uint64_t)v237);
    sub_1000A1534((uint64_t)v236);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v318);
    return (uint64_t)v238;
  }
  uint64_t v263 = v41;
  Class v266 = a3;
  uint64_t v284 = 0;
  unint64_t v283 = 0;
  uint64_t v282 = 0;
  v281 = 0;
  uint64_t v262 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue;
  uint64_t v259 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager;
  v301 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56);
  uint64_t v300 = SPBeaconTaskNameUnknown;
  Class v258 = (void (**)(char *, char *, uint64_t))(v303 + 40);
  v299 = (void (**)(char *, char *, uint64_t))(v303 + 16);
  uint64_t v50 = (void (**)(char *, uint64_t))(v303 + 8);
  uint64_t v298 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  uint64_t v294 = SPBeaconTaskNameStartSharing;
  uint64_t v291 = SPBeaconTaskNameStopSharing;
  uint64_t v267 = SPBeaconTaskNameEnableLostMode;
  uint64_t v265 = SPBeaconTaskNameDisableLostMode;
  uint64_t v264 = SPBeaconTaskNamePlaySound;
  uint64_t v257 = SPBeaconTaskNameStopSound;
  uint64_t v256 = SPBeaconTaskNameBeginLeashing;
  uint64_t v255 = SPBeaconTaskNameEndLeashing;
  uint64_t v254 = SPBeaconTaskNameBeginBTFinding;
  uint64_t v253 = SPBeaconTaskNameEndBTFinding;
  uint64_t v252 = SPBeaconTaskNameConnect;
  uint64_t v251 = SPBeaconTaskNameDisconnect;
  uint64_t v250 = SPBeaconTaskNameRename;
  uint64_t v249 = SPBeaconTaskNameBeginRanging;
  uint64_t v248 = SPBeaconTaskNameEndRanging;
  uint64_t v247 = SPBeaconTaskNameAccessoryFirmwareUpdate;
  uint64_t v246 = SPBeaconTaskNameEnableNotifyWhenFound;
  uint64_t v245 = SPBeaconTaskNameDisableNotifyWhenFound;
  uint64_t v244 = SPBeaconTaskNameLocating;
  v280 = v48;
  uint64_t v51 = (void **)(v48 + 4);
  uint64_t v243 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v290 + 56);
  id v242 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v290 + 48);
  Class v261 = &v311;
  uint64_t v52 = 2;
  if (v306) {
    uint64_t v53 = 2;
  }
  else {
    uint64_t v53 = 0;
  }
  uint64_t v289 = v53;
  if (v306) {
    uint64_t v52 = 0;
  }
  uint64_t v293 = v52;
  uint64_t v306 = (void **)_swiftEmptyDictionarySingleton;
  uint64_t v54 = v297;
  uint64_t v260 = v19;
  uint64_t v305 = v28;
  while (1)
  {
    uint64_t v303 = v49;
    Swift::String v62 = *v51;
    uint64_t v317 = 2;
    id v63 = v62;
    Date.init()();
    id v316 = 0;
    Swift::String v64 = *v301;
    (*v301)(v54, 1, 1, v28);
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v67 = v66;
    if (v65 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v67 == v68)
    {
      swift_bridgeObjectRelease_n();
LABEL_24:
      uint64_t v75 = -1;
      goto LABEL_25;
    }
    char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v70) {
      goto LABEL_24;
    }
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v73 = v72;
    if (v71 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v73 == v74)
    {
      swift_bridgeObjectRelease_n();
LABEL_32:
      uint64_t v75 = v293;
      goto LABEL_25;
    }
    char v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v86) {
      goto LABEL_32;
    }
    uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v89 = v88;
    if (v87 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v89 == v90)
    {
      swift_bridgeObjectRelease_n();
LABEL_37:
      uint64_t v75 = v289;
LABEL_25:
      uint64_t v317 = v75;
      goto LABEL_26;
    }
    char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v91) {
      goto LABEL_37;
    }
    uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v94 = v93;
    if (v92 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v94 == v95)
    {
      swift_bridgeObjectRelease_n();
LABEL_42:
      uint64_t v97 = (uint64_t)v288;
      v285(v288, v287, v305);
      uint64_t v98 = sub_100B6D358(v97);
      uint64_t v99 = v98[2];
      uint64_t v100 = type metadata accessor for LostModeRecord();
      uint64_t v101 = *(void *)(v100 - 8);
      if (v99)
      {
        uint64_t v102 = v279;
        sub_1006CC8F8((uint64_t)v98+ ((*(unsigned __int8 *)(*(void *)(v100 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v100 - 8) + 80)), v279, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
        uint64_t v103 = 0;
      }
      else
      {
        uint64_t v103 = 1;
        uint64_t v102 = v279;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v102, v103, 1, v100);
      swift_bridgeObjectRelease();
      v295(v288, v305);
      int v104 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v102, 1, v100);
      sub_10001DAB4(v102, &qword_10163BB70);
      if (v104 != 1) {
        goto LABEL_55;
      }
LABEL_46:
      uint64_t v75 = 2;
      goto LABEL_25;
    }
    char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v96) {
      goto LABEL_42;
    }
    uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v107 = v106;
    if (v105 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v107 == v108)
    {
      swift_bridgeObjectRelease_n();
LABEL_51:
      uint64_t v110 = (uint64_t)v278;
      v285(v278, v287, v305);
      uint64_t v111 = sub_100B6D358(v110);
      uint64_t v112 = v111[2];
      uint64_t v113 = type metadata accessor for LostModeRecord();
      uint64_t v114 = *(void *)(v113 - 8);
      if (v112)
      {
        uint64_t v115 = v277;
        sub_1006CC8F8((uint64_t)v111+ ((*(unsigned __int8 *)(*(void *)(v113 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v113 - 8) + 80)), v277, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
        uint64_t v116 = 0;
      }
      else
      {
        uint64_t v116 = 1;
        uint64_t v115 = v277;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v114 + 56))(v115, v116, 1, v113);
      swift_bridgeObjectRelease();
      v295(v278, v305);
      int v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v115, 1, v113);
      sub_10001DAB4(v115, &qword_10163BB70);
      if (v117 == 1)
      {
LABEL_55:
        uint64_t v317 = 0;
        goto LABEL_26;
      }
      goto LABEL_46;
    }
    char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v109) {
      goto LABEL_51;
    }
    uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v120 = v119;
    if (v118 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v120 == v121) {
      break;
    }
    char v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v122) {
      goto LABEL_60;
    }
    uint64_t v140 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v142 = v141;
    if (v140 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v142 == v143)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v145 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v145 & 1) == 0)
      {
        uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v153 = v152;
        if (v151 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v153 == v154) {
          goto LABEL_76;
        }
        char v155 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v155) {
          goto LABEL_78;
        }
        uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v158 = v157;
        if (v156 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v158 == v159)
        {
LABEL_76:
          swift_bridgeObjectRelease_n();
LABEL_78:
          uint64_t v317 = sub_100694878((uint64_t)v263, (void (*)(uint64_t, uint64_t))v266);
          goto LABEL_26;
        }
        char v160 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v160) {
          goto LABEL_78;
        }
        uint64_t v161 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v163 = v162;
        if (v161 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v163 == v164) {
          goto LABEL_84;
        }
        char v165 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v165) {
          goto LABEL_86;
        }
        uint64_t v167 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v169 = v168;
        if (v167 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v169 == v170) {
          goto LABEL_84;
        }
        char v171 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v171) {
          goto LABEL_86;
        }
        uint64_t v172 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v174 = v173;
        if (v172 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v174 == v175) {
          goto LABEL_84;
        }
        char v176 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v176) {
          goto LABEL_86;
        }
        uint64_t v177 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v179 = v178;
        if (v177 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v179 == v180) {
          goto LABEL_84;
        }
        char v181 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v181) {
          goto LABEL_86;
        }
        uint64_t v182 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v184 = v183;
        if (v182 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v184 == v185) {
          goto LABEL_84;
        }
        char v186 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v186) {
          goto LABEL_86;
        }
        uint64_t v187 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v189 = v188;
        if (v187 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v189 == v190) {
          goto LABEL_84;
        }
        char v191 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v191) {
          goto LABEL_86;
        }
        uint64_t v192 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v194 = v193;
        if (v192 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v194 == v195) {
          goto LABEL_84;
        }
        char v196 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v196) {
          goto LABEL_86;
        }
        uint64_t v197 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v199 = v198;
        if (v197 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v199 == v200)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v201 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v201 & 1) == 0)
          {
            uint64_t v212 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v214 = v213;
            if (v212 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v214 == v215)
            {
              swift_bridgeObjectRelease_n();
              goto LABEL_120;
            }
            char v217 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v217)
            {
LABEL_120:
              uint64_t v218 = (uint64_t)v268;
              v285(v268, v287, v305);
              Class v219 = sub_100B6E74C(v218);
              if (v219[2])
              {
                sub_1006CC8F8((uint64_t)v219+ ((*(unsigned __int8 *)(v290 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v290 + 80)), v273, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
                uint64_t v220 = 0;
              }
              else
              {
                uint64_t v220 = 1;
              }
              uint64_t v221 = v273;
              uint64_t v222 = found;
              (*v243)(v273, v220, 1, found);
              swift_bridgeObjectRelease();
              v295(v268, v305);
              if ((*v242)(v221, 1, v222) != 1)
              {
                uint64_t v223 = v271;
                sub_1006CD470(v273, v271, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
                uint64_t v224 = (uint64_t)v270;
                uint64_t v225 = v305;
                v285(v270, (char *)(v223 + *(int *)(found + 20)), v305);
                sub_1006CCE04(v223, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
                v64(v224, 0, 1, v225);
                uint64_t v54 = v297;
                sub_100062604(v224, v297, &qword_101638CF0);
                uint64_t v317 = 0;
                goto LABEL_26;
              }
              sub_10001DAB4(v273, &qword_101660BB0);
              goto LABEL_86;
            }
            uint64_t v226 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v228 = v227;
            if (v226 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v228 == v229)
            {
LABEL_84:
              swift_bridgeObjectRelease_n();
              goto LABEL_86;
            }
            char v230 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v230 & 1) == 0)
            {
              uint64_t v231 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v233 = v232;
              if (v231 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v233 == v234)
              {
                swift_bridgeObjectRelease_n();
                goto LABEL_133;
              }
              char v235 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v235)
              {
LABEL_133:
                uint64_t v166 = v274;
LABEL_87:
                uint64_t v317 = v166;
              }
LABEL_88:
              uint64_t v54 = v297;
              goto LABEL_26;
            }
LABEL_86:
            uint64_t v166 = 2;
            goto LABEL_87;
          }
        }
        uint64_t v202 = v266[22];
        if (!v202) {
          goto LABEL_88;
        }
        char v203 = v275;
        uint64_t v204 = v305;
        uint64_t v205 = ((uint64_t (*)(char *, char *, uint64_t))v285)(v275, v287, v305);
        uint64_t v241 = &v239;
        v240 = (void (**)(char *, uint64_t))*((void *)v202 + 3);
        __chkstk_darwin(v205);
        *(&v239 - 2) = (uint64_t)v202;
        *(&v239 - 1) = (uint64_t)v203;
        sub_10001D4B0(0, &qword_101653D80);
        swift_retain();
        OS_dispatch_queue.sync<A>(execute:)();
        swift_release();
        uint64_t v206 = aBlock;
        v295(v203, v204);
        uint64_t v317 = (uint64_t)[v206 state];
        id v207 = [v206 lastUpdated];
        long long v208 = v276;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        (*v258)(v307, v208, v308);
        id v316 = [v206 error];
        swift_errorRelease();
        unint64_t v209 = (void **)[v206 commandIdentifier];
        if (v209)
        {
          v210 = v209;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v211 = 0;
          uint64_t v206 = v210;
        }
        else
        {
          uint64_t v211 = 1;
        }

        v216 = v269;
        v64((uint64_t)v269, v211, 1, v305);
        uint64_t v144 = (uint64_t)v216;
        uint64_t v54 = v297;
        goto LABEL_70;
      }
    }
    char v146 = v266;
    uint64_t v147 = *(NSObject **)((char *)v266 + v262);
    sub_10001D010((uint64_t)v318, (uint64_t)&v315);
    int v148 = (void *)swift_allocObject();
    v148[2] = v146;
    sub_10001CEB0(&v315, (uint64_t)(v148 + 3));
    v148[8] = &v317;
    v148[9] = v307;
    v148[10] = &v316;
    v148[11] = v54;
    swift_retain();
    sub_1000A1534((uint64_t)v282);
    uint64_t v149 = swift_allocObject();
    uint64_t v282 = sub_1006C5894;
    *(void *)(v149 + 16) = sub_1006C5894;
    *(void *)(v149 + 24) = v148;
    v313 = sub_100132424;
    uint64_t v314 = v149;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v310 = 1107296256;
    uint64_t v311 = sub_1000A70B0;
    v312 = &unk_1015CF0E0;
    uint64_t v150 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    dispatch_sync(v147, v150);
    _Block_release(v150);
    LOBYTE(v146) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (v146) {
      goto LABEL_138;
    }
    v281 = v148;
LABEL_26:
    (*v299)(v304, v307, v308);
    id v77 = v316;
    uint64_t v76 = v317;
    id v78 = v63;
    swift_errorRetain();
    v79.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    if (v77)
    {
      uint64_t v80 = (void *)_convertErrorToNSError(_:)();
      swift_errorRelease();
    }
    else
    {
      uint64_t v80 = 0;
    }
    id v81 = [objc_allocWithZone((Class)SPBeaconTaskInformation) initWithName:v78 lastUpdated:v79.super.isa error:v80 state:v76];

    uint64_t v82 = *v50;
    uint64_t v83 = v50;
    (*v50)(v304, v308);
    uint64_t v84 = v302;
    sub_10001D074(v54, v302, &qword_101638CF0);
    uint64_t v85 = v305;
    if ((*v298)(v84, 1, v305) == 1)
    {
      v56.super.Class isa = 0;
    }
    else
    {
      uint64_t v55 = v84;
      v56.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v57 = v55;
      uint64_t v54 = v297;
      v295((char *)v57, v85);
    }
    [v81 setCommandIdentifier:v56.super.isa];

    id v58 = v78;
    id v59 = v81;
    uint64_t v60 = v306;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t aBlock = v60;
    sub_10016E960((uint64_t)v59, v58, isUniquelyReferenced_nonNull_native);
    uint64_t v306 = aBlock;

    swift_bridgeObjectRelease();
    sub_10001DAB4(v54, &qword_101638CF0);
    swift_errorRelease();
    uint64_t v50 = v83;
    v82(v307, v308);
    ++v51;
    uint64_t v49 = v303 - 1;
    uint64_t v28 = v305;
    if (v303 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v236 = v282;
      v237 = v284;
      v238 = v306;
      goto LABEL_136;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_60:
  if (sub_10120FA24())
  {
    v240 = v50;
    uint64_t v123 = *(uint64_t *)((char *)v266 + v259);
    uint64_t v124 = v275;
    uint64_t v125 = v305;
    uint64_t v126 = ((uint64_t (*)(char *, char *, uint64_t))v285)(v275, v287, v305);
    uint64_t v241 = &v239;
    __chkstk_darwin(v126);
    *(&v239 - 2) = v123;
    *(&v239 - 1) = (uint64_t)v124;
    sub_10001D4B0(0, &qword_101653D80);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v127 = aBlock;
    v295(v124, v125);
    uint64_t v317 = (uint64_t)[v127 state];
    id v128 = [v127 lastUpdated];
    uint64_t v129 = v276;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*v258)(v307, v129, v308);
    id v316 = [v127 error];
    swift_errorRelease();
    uint64_t v130 = (void **)[v127 commandIdentifier];
    if (v130)
    {
      uint64_t v131 = v130;
      uint64_t v132 = (uint64_t)v260;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v133 = 0;
      uint64_t v127 = v131;
    }
    else
    {
      uint64_t v133 = 1;
      uint64_t v132 = (uint64_t)v260;
    }
    uint64_t v50 = v240;

    v64(v132, v133, 1, v305);
    uint64_t v144 = v132;
LABEL_70:
    sub_100062604(v144, v54, &qword_101638CF0);
    goto LABEL_26;
  }
  uint64_t v134 = v266;
  uint64_t v135 = *(NSObject **)((char *)v266 + v262);
  sub_10001D010((uint64_t)v318, (uint64_t)&v315);
  uint64_t v136 = (void *)swift_allocObject();
  v136[2] = v134;
  sub_10001CEB0(&v315, (uint64_t)(v136 + 3));
  v136[8] = &v317;
  v136[9] = v307;
  v136[10] = &v316;
  v136[11] = v54;
  swift_retain();
  sub_1000A1534((uint64_t)v284);
  uint64_t v137 = swift_allocObject();
  uint64_t v284 = sub_1006C58C4;
  *(void *)(v137 + 16) = sub_1006C58C4;
  *(void *)(v137 + 24) = v136;
  v313 = sub_1003B7AE0;
  uint64_t v314 = v137;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v310 = 1107296256;
  uint64_t v311 = sub_1000A70B0;
  v312 = &unk_1015CF158;
  char v138 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v135, v138);
  _Block_release(v138);
  LOBYTE(v134) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v134 & 1) == 0)
  {
    unint64_t v283 = v136;
    goto LABEL_26;
  }
  __break(1u);
LABEL_138:
  __break(1u);
  return result;
}

uint64_t sub_10069F874(uint64_t a1, int a2, char **a3)
{
  LODWORD(v306) = a2;
  uint64_t v5 = sub_10000588C(&qword_101660BB0);
  __chkstk_darwin(v5 - 8);
  uint64_t v273 = (uint64_t)&v239 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord();
  uint64_t v290 = *(void *)(found - 8);
  __chkstk_darwin(found);
  uint64_t v271 = (uint64_t)&v239 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163BB70);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v277 = (uint64_t)&v239 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v279 = (uint64_t)&v239 - v11;
  uint64_t v12 = sub_10000588C(&qword_101638CF0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v270 = (char *)&v239 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  Class v269 = (char *)&v239 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v239 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v302 = (uint64_t)&v239 - v21;
  __chkstk_darwin(v20);
  uint64_t v297 = (uint64_t)&v239 - v22;
  uint64_t v308 = type metadata accessor for Date();
  uint64_t v303 = *(void *)(v308 - 8);
  uint64_t v23 = __chkstk_darwin(v308);
  v276 = (char *)&v239 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  v304 = (char *)&v239 - v26;
  __chkstk_darwin(v25);
  v307 = (char *)&v239 - v27;
  uint64_t v28 = type metadata accessor for UUID();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v268 = (char *)&v239 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v275 = (char *)&v239 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v278 = (char *)&v239 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v288 = (char *)&v239 - v37;
  __chkstk_darwin(v36);
  uint64_t v39 = (char *)&v239 - v38;
  uint64_t v40 = type metadata accessor for OwnedBeaconRecord();
  v318[3] = v40;
  v318[4] = sub_100691B60(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  uint64_t v41 = sub_10001D958(v318);
  sub_1006CC8F8(a1, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_10000588C(&qword_10164B288);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v42 = aBlock;
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  unint64_t v287 = (char *)v41 + *(int *)(v40 + 20);
  uint64_t v286 = v29 + 16;
  uint64_t v285 = v43;
  ((void (*)(char *))v43)(v39);
  uint64_t v44 = v42[2];
  Class v292 = v42;
  if (v44)
  {
    sub_1007240CC((uint64_t)v39);
    uint64_t v46 = 2;
    if (v45) {
      uint64_t v46 = 0;
    }
  }
  else
  {
    uint64_t v46 = 2;
  }
  uint64_t v274 = v46;
  unint64_t v47 = *(void (**)(char *, uint64_t))(v29 + 8);
  uint64_t v296 = v29 + 8;
  v295 = v47;
  v47(v39, v28);
  uint64_t v48 = sub_1006A7B4C((uint64_t)v41, a3);
  uint64_t v49 = v48[2];
  if (!v49)
  {
    swift_bridgeObjectRelease();
    v237 = 0;
    uint64_t v236 = 0;
    v238 = (void **)_swiftEmptyDictionarySingleton;
LABEL_136:
    swift_bridgeObjectRelease();
    sub_1000A1534((uint64_t)v237);
    sub_1000A1534((uint64_t)v236);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v318);
    return (uint64_t)v238;
  }
  uint64_t v263 = v41;
  Class v266 = a3;
  uint64_t v284 = 0;
  unint64_t v283 = 0;
  uint64_t v282 = 0;
  v281 = 0;
  uint64_t v262 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue;
  uint64_t v259 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager;
  v301 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56);
  uint64_t v300 = SPBeaconTaskNameUnknown;
  Class v258 = (void (**)(char *, char *, uint64_t))(v303 + 40);
  v299 = (void (**)(char *, char *, uint64_t))(v303 + 16);
  uint64_t v50 = (void (**)(char *, uint64_t))(v303 + 8);
  uint64_t v298 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  uint64_t v294 = SPBeaconTaskNameStartSharing;
  uint64_t v291 = SPBeaconTaskNameStopSharing;
  uint64_t v267 = SPBeaconTaskNameEnableLostMode;
  uint64_t v265 = SPBeaconTaskNameDisableLostMode;
  uint64_t v264 = SPBeaconTaskNamePlaySound;
  uint64_t v257 = SPBeaconTaskNameStopSound;
  uint64_t v256 = SPBeaconTaskNameBeginLeashing;
  uint64_t v255 = SPBeaconTaskNameEndLeashing;
  uint64_t v254 = SPBeaconTaskNameBeginBTFinding;
  uint64_t v253 = SPBeaconTaskNameEndBTFinding;
  uint64_t v252 = SPBeaconTaskNameConnect;
  uint64_t v251 = SPBeaconTaskNameDisconnect;
  uint64_t v250 = SPBeaconTaskNameRename;
  uint64_t v249 = SPBeaconTaskNameBeginRanging;
  uint64_t v248 = SPBeaconTaskNameEndRanging;
  uint64_t v247 = SPBeaconTaskNameAccessoryFirmwareUpdate;
  uint64_t v246 = SPBeaconTaskNameEnableNotifyWhenFound;
  uint64_t v245 = SPBeaconTaskNameDisableNotifyWhenFound;
  uint64_t v244 = SPBeaconTaskNameLocating;
  v280 = v48;
  uint64_t v51 = (void **)(v48 + 4);
  uint64_t v243 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v290 + 56);
  id v242 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v290 + 48);
  Class v261 = &v311;
  uint64_t v52 = 2;
  if (v306) {
    uint64_t v53 = 2;
  }
  else {
    uint64_t v53 = 0;
  }
  uint64_t v289 = v53;
  if (v306) {
    uint64_t v52 = 0;
  }
  uint64_t v293 = v52;
  uint64_t v306 = (void **)_swiftEmptyDictionarySingleton;
  uint64_t v54 = v297;
  uint64_t v260 = v19;
  uint64_t v305 = v28;
  while (1)
  {
    uint64_t v303 = v49;
    Swift::String v62 = *v51;
    uint64_t v317 = 2;
    id v63 = v62;
    Date.init()();
    id v316 = 0;
    Swift::String v64 = *v301;
    (*v301)(v54, 1, 1, v28);
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v67 = v66;
    if (v65 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v67 == v68)
    {
      swift_bridgeObjectRelease_n();
LABEL_24:
      uint64_t v75 = -1;
      goto LABEL_25;
    }
    char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v70) {
      goto LABEL_24;
    }
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v73 = v72;
    if (v71 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v73 == v74)
    {
      swift_bridgeObjectRelease_n();
LABEL_32:
      uint64_t v75 = v293;
      goto LABEL_25;
    }
    char v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v86) {
      goto LABEL_32;
    }
    uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v89 = v88;
    if (v87 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v89 == v90)
    {
      swift_bridgeObjectRelease_n();
LABEL_37:
      uint64_t v75 = v289;
LABEL_25:
      uint64_t v317 = v75;
      goto LABEL_26;
    }
    char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v91) {
      goto LABEL_37;
    }
    uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v94 = v93;
    if (v92 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v94 == v95)
    {
      swift_bridgeObjectRelease_n();
LABEL_42:
      uint64_t v97 = (uint64_t)v288;
      v285(v288, v287, v305);
      uint64_t v98 = sub_100B6D358(v97);
      uint64_t v99 = v98[2];
      uint64_t v100 = type metadata accessor for LostModeRecord();
      uint64_t v101 = *(void *)(v100 - 8);
      if (v99)
      {
        uint64_t v102 = v279;
        sub_1006CC8F8((uint64_t)v98+ ((*(unsigned __int8 *)(*(void *)(v100 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v100 - 8) + 80)), v279, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
        uint64_t v103 = 0;
      }
      else
      {
        uint64_t v103 = 1;
        uint64_t v102 = v279;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v102, v103, 1, v100);
      swift_bridgeObjectRelease();
      v295(v288, v305);
      int v104 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v102, 1, v100);
      sub_10001DAB4(v102, &qword_10163BB70);
      if (v104 != 1) {
        goto LABEL_55;
      }
LABEL_46:
      uint64_t v75 = 2;
      goto LABEL_25;
    }
    char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v96) {
      goto LABEL_42;
    }
    uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v107 = v106;
    if (v105 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v107 == v108)
    {
      swift_bridgeObjectRelease_n();
LABEL_51:
      uint64_t v110 = (uint64_t)v278;
      v285(v278, v287, v305);
      uint64_t v111 = sub_100B6D358(v110);
      uint64_t v112 = v111[2];
      uint64_t v113 = type metadata accessor for LostModeRecord();
      uint64_t v114 = *(void *)(v113 - 8);
      if (v112)
      {
        uint64_t v115 = v277;
        sub_1006CC8F8((uint64_t)v111+ ((*(unsigned __int8 *)(*(void *)(v113 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v113 - 8) + 80)), v277, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
        uint64_t v116 = 0;
      }
      else
      {
        uint64_t v116 = 1;
        uint64_t v115 = v277;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v114 + 56))(v115, v116, 1, v113);
      swift_bridgeObjectRelease();
      v295(v278, v305);
      int v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v115, 1, v113);
      sub_10001DAB4(v115, &qword_10163BB70);
      if (v117 == 1)
      {
LABEL_55:
        uint64_t v317 = 0;
        goto LABEL_26;
      }
      goto LABEL_46;
    }
    char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v109) {
      goto LABEL_51;
    }
    uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v120 = v119;
    if (v118 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v120 == v121) {
      break;
    }
    char v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v122) {
      goto LABEL_60;
    }
    uint64_t v140 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v142 = v141;
    if (v140 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v142 == v143)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v145 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v145 & 1) == 0)
      {
        uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v153 = v152;
        if (v151 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v153 == v154) {
          goto LABEL_76;
        }
        char v155 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v155) {
          goto LABEL_78;
        }
        uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v158 = v157;
        if (v156 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v158 == v159)
        {
LABEL_76:
          swift_bridgeObjectRelease_n();
LABEL_78:
          uint64_t v317 = sub_10069422C((uint64_t)v263, (uint64_t)v266);
          goto LABEL_26;
        }
        char v160 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v160) {
          goto LABEL_78;
        }
        uint64_t v161 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v163 = v162;
        if (v161 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v163 == v164) {
          goto LABEL_84;
        }
        char v165 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v165) {
          goto LABEL_86;
        }
        uint64_t v167 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v169 = v168;
        if (v167 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v169 == v170) {
          goto LABEL_84;
        }
        char v171 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v171) {
          goto LABEL_86;
        }
        uint64_t v172 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v174 = v173;
        if (v172 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v174 == v175) {
          goto LABEL_84;
        }
        char v176 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v176) {
          goto LABEL_86;
        }
        uint64_t v177 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v179 = v178;
        if (v177 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v179 == v180) {
          goto LABEL_84;
        }
        char v181 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v181) {
          goto LABEL_86;
        }
        uint64_t v182 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v184 = v183;
        if (v182 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v184 == v185) {
          goto LABEL_84;
        }
        char v186 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v186) {
          goto LABEL_86;
        }
        uint64_t v187 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v189 = v188;
        if (v187 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v189 == v190) {
          goto LABEL_84;
        }
        char v191 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v191) {
          goto LABEL_86;
        }
        uint64_t v192 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v194 = v193;
        if (v192 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v194 == v195) {
          goto LABEL_84;
        }
        char v196 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v196) {
          goto LABEL_86;
        }
        uint64_t v197 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v199 = v198;
        if (v197 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v199 == v200)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v201 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v201 & 1) == 0)
          {
            uint64_t v212 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v214 = v213;
            if (v212 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v214 == v215)
            {
              swift_bridgeObjectRelease_n();
              goto LABEL_120;
            }
            char v217 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v217)
            {
LABEL_120:
              uint64_t v218 = (uint64_t)v268;
              v285(v268, v287, v305);
              Class v219 = sub_100B6E74C(v218);
              if (v219[2])
              {
                sub_1006CC8F8((uint64_t)v219+ ((*(unsigned __int8 *)(v290 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v290 + 80)), v273, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
                uint64_t v220 = 0;
              }
              else
              {
                uint64_t v220 = 1;
              }
              uint64_t v221 = v273;
              uint64_t v222 = found;
              (*v243)(v273, v220, 1, found);
              swift_bridgeObjectRelease();
              v295(v268, v305);
              if ((*v242)(v221, 1, v222) != 1)
              {
                uint64_t v223 = v271;
                sub_1006CD470(v273, v271, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
                uint64_t v224 = (uint64_t)v270;
                uint64_t v225 = v305;
                v285(v270, (char *)(v223 + *(int *)(found + 20)), v305);
                sub_1006CCE04(v223, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
                v64(v224, 0, 1, v225);
                uint64_t v54 = v297;
                sub_100062604(v224, v297, &qword_101638CF0);
                uint64_t v317 = 0;
                goto LABEL_26;
              }
              sub_10001DAB4(v273, &qword_101660BB0);
              goto LABEL_86;
            }
            uint64_t v226 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v228 = v227;
            if (v226 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v228 == v229)
            {
LABEL_84:
              swift_bridgeObjectRelease_n();
              goto LABEL_86;
            }
            char v230 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v230 & 1) == 0)
            {
              uint64_t v231 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v233 = v232;
              if (v231 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v233 == v234)
              {
                swift_bridgeObjectRelease_n();
                goto LABEL_133;
              }
              char v235 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v235)
              {
LABEL_133:
                uint64_t v166 = v274;
LABEL_87:
                uint64_t v317 = v166;
              }
LABEL_88:
              uint64_t v54 = v297;
              goto LABEL_26;
            }
LABEL_86:
            uint64_t v166 = 2;
            goto LABEL_87;
          }
        }
        uint64_t v202 = v266[22];
        if (!v202) {
          goto LABEL_88;
        }
        char v203 = v275;
        uint64_t v204 = v305;
        uint64_t v205 = ((uint64_t (*)(char *, char *, uint64_t))v285)(v275, v287, v305);
        uint64_t v241 = &v239;
        v240 = (void (**)(char *, uint64_t))*((void *)v202 + 3);
        __chkstk_darwin(v205);
        *(&v239 - 2) = (uint64_t)v202;
        *(&v239 - 1) = (uint64_t)v203;
        sub_10001D4B0(0, &qword_101653D80);
        swift_retain();
        OS_dispatch_queue.sync<A>(execute:)();
        swift_release();
        uint64_t v206 = aBlock;
        v295(v203, v204);
        uint64_t v317 = (uint64_t)[v206 state];
        id v207 = [v206 lastUpdated];
        long long v208 = v276;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        (*v258)(v307, v208, v308);
        id v316 = [v206 error];
        swift_errorRelease();
        unint64_t v209 = (void **)[v206 commandIdentifier];
        if (v209)
        {
          v210 = v209;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v211 = 0;
          uint64_t v206 = v210;
        }
        else
        {
          uint64_t v211 = 1;
        }

        v216 = v269;
        v64((uint64_t)v269, v211, 1, v305);
        uint64_t v144 = (uint64_t)v216;
        uint64_t v54 = v297;
        goto LABEL_70;
      }
    }
    uint64_t v146 = (uint64_t)v266;
    uint64_t v147 = *(NSObject **)((char *)v266 + v262);
    sub_10001D010((uint64_t)v318, (uint64_t)&v315);
    int v148 = (void *)swift_allocObject();
    v148[2] = v146;
    sub_10001CEB0(&v315, (uint64_t)(v148 + 3));
    v148[8] = &v317;
    v148[9] = v307;
    v148[10] = &v316;
    v148[11] = v54;
    swift_retain();
    sub_1000A1534((uint64_t)v282);
    uint64_t v149 = swift_allocObject();
    uint64_t v282 = sub_1006C5894;
    *(void *)(v149 + 16) = sub_1006C5894;
    *(void *)(v149 + 24) = v148;
    v313 = sub_1003B7AE0;
    uint64_t v314 = v149;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v310 = 1107296256;
    uint64_t v311 = sub_1000A70B0;
    v312 = &unk_1015CF1F8;
    uint64_t v150 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    dispatch_sync(v147, v150);
    _Block_release(v150);
    LOBYTE(v146) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (v146) {
      goto LABEL_138;
    }
    v281 = v148;
LABEL_26:
    (*v299)(v304, v307, v308);
    id v77 = v316;
    uint64_t v76 = v317;
    id v78 = v63;
    swift_errorRetain();
    v79.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    if (v77)
    {
      uint64_t v80 = (void *)_convertErrorToNSError(_:)();
      swift_errorRelease();
    }
    else
    {
      uint64_t v80 = 0;
    }
    id v81 = [objc_allocWithZone((Class)SPBeaconTaskInformation) initWithName:v78 lastUpdated:v79.super.isa error:v80 state:v76];

    uint64_t v82 = *v50;
    uint64_t v83 = v50;
    (*v50)(v304, v308);
    uint64_t v84 = v302;
    sub_10001D074(v54, v302, &qword_101638CF0);
    uint64_t v85 = v305;
    if ((*v298)(v84, 1, v305) == 1)
    {
      v56.super.Class isa = 0;
    }
    else
    {
      uint64_t v55 = v84;
      v56.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v57 = v55;
      uint64_t v54 = v297;
      v295((char *)v57, v85);
    }
    [v81 setCommandIdentifier:v56.super.isa];

    id v58 = v78;
    id v59 = v81;
    uint64_t v60 = v306;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t aBlock = v60;
    sub_10016E960((uint64_t)v59, v58, isUniquelyReferenced_nonNull_native);
    uint64_t v306 = aBlock;

    swift_bridgeObjectRelease();
    sub_10001DAB4(v54, &qword_101638CF0);
    swift_errorRelease();
    uint64_t v50 = v83;
    v82(v307, v308);
    ++v51;
    uint64_t v49 = v303 - 1;
    uint64_t v28 = v305;
    if (v303 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v236 = v282;
      v237 = v284;
      v238 = v306;
      goto LABEL_136;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_60:
  if (sub_100D1C180())
  {
    v240 = v50;
    uint64_t v123 = *(uint64_t *)((char *)v266 + v259);
    uint64_t v124 = v275;
    uint64_t v125 = v305;
    uint64_t v126 = ((uint64_t (*)(char *, char *, uint64_t))v285)(v275, v287, v305);
    uint64_t v241 = &v239;
    __chkstk_darwin(v126);
    *(&v239 - 2) = v123;
    *(&v239 - 1) = (uint64_t)v124;
    sub_10001D4B0(0, &qword_101653D80);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v127 = aBlock;
    v295(v124, v125);
    uint64_t v317 = (uint64_t)[v127 state];
    id v128 = [v127 lastUpdated];
    uint64_t v129 = v276;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*v258)(v307, v129, v308);
    id v316 = [v127 error];
    swift_errorRelease();
    uint64_t v130 = (void **)[v127 commandIdentifier];
    if (v130)
    {
      uint64_t v131 = v130;
      uint64_t v132 = (uint64_t)v260;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v133 = 0;
      uint64_t v127 = v131;
    }
    else
    {
      uint64_t v133 = 1;
      uint64_t v132 = (uint64_t)v260;
    }
    uint64_t v50 = v240;

    v64(v132, v133, 1, v305);
    uint64_t v144 = v132;
LABEL_70:
    sub_100062604(v144, v54, &qword_101638CF0);
    goto LABEL_26;
  }
  uint64_t v134 = (uint64_t)v266;
  uint64_t v135 = *(NSObject **)((char *)v266 + v262);
  sub_10001D010((uint64_t)v318, (uint64_t)&v315);
  uint64_t v136 = (void *)swift_allocObject();
  v136[2] = v134;
  sub_10001CEB0(&v315, (uint64_t)(v136 + 3));
  v136[8] = &v317;
  v136[9] = v307;
  v136[10] = &v316;
  v136[11] = v54;
  swift_retain();
  sub_1000A1534((uint64_t)v284);
  uint64_t v137 = swift_allocObject();
  uint64_t v284 = sub_1006C58C4;
  *(void *)(v137 + 16) = sub_1006C58C4;
  *(void *)(v137 + 24) = v136;
  v313 = sub_1003B7AE0;
  uint64_t v314 = v137;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v310 = 1107296256;
  uint64_t v311 = sub_1000A70B0;
  v312 = &unk_1015CF270;
  char v138 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v135, v138);
  _Block_release(v138);
  LOBYTE(v134) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v134 & 1) == 0)
  {
    unint64_t v283 = v136;
    goto LABEL_26;
  }
  __break(1u);
LABEL_138:
  __break(1u);
  return result;
}

uint64_t sub_1006A1924(uint64_t a1, int a2, uint64_t a3)
{
  LODWORD(v283) = a2;
  uint64_t v5 = sub_10000588C(&qword_101660BB0);
  __chkstk_darwin(v5 - 8);
  uint64_t v258 = (uint64_t)v226 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord();
  uint64_t v270 = *(void *)(found - 8);
  __chkstk_darwin(found);
  uint64_t v9 = (char *)v226 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163BB70);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v259 = (uint64_t)v226 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v261 = (uint64_t)v226 - v13;
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v257 = (char *)v226 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v256 = (char *)v226 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v282 = (uint64_t)v226 - v20;
  __chkstk_darwin(v19);
  uint64_t v286 = (uint64_t)v226 - v21;
  uint64_t v288 = type metadata accessor for Date();
  uint64_t v278 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v288 - 8);
  uint64_t v22 = __chkstk_darwin(v288);
  uint64_t v255 = (char *)v226 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v284 = (char *)v226 - v25;
  __chkstk_darwin(v24);
  unint64_t v287 = (char *)v226 - v26;
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v254 = (char *)v226 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v253 = (char *)v226 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v260 = (char *)v226 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v268 = (char *)v226 - v36;
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)v226 - v37;
  v299[0] = type metadata accessor for LocalFindableAccessoryRecord();
  v299[1] = sub_100691B60(&qword_101642930, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
  uint64_t v39 = sub_10001D958(&v298);
  sub_1006CC8F8(a1, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  sub_10000588C(&qword_10164B288);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v40 = aBlock;
  uint64_t v41 = *(void (**)(char *, uint64_t *, uint64_t))(v28 + 16);
  uint64_t v273 = v39;
  v267[1] = v28 + 16;
  v267[0] = v41;
  v41(v38, v39, v27);
  uint64_t v42 = v40[2];
  Class v272 = v40;
  if (v42)
  {
    sub_1007240CC((uint64_t)v38);
    if (v43) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = 2;
    }
  }
  else
  {
    uint64_t v44 = 2;
  }
  char v45 = *(void (**)(char *, uint64_t))(v28 + 8);
  uint64_t v285 = v27;
  uint64_t v277 = v28 + 8;
  v276 = v45;
  v45(v38, v27);
  uint64_t v46 = sub_1006A6D78((uint64_t)v273, a3);
  uint64_t v47 = v46[2];
  if (!v47)
  {
    swift_bridgeObjectRelease();
    uint64_t v225 = 0;
    uint64_t v224 = 0;
    uint64_t v52 = (void **)_swiftEmptyDictionarySingleton;
LABEL_128:
    swift_bridgeObjectRelease();
    sub_1000A1534((uint64_t)v225);
    sub_1000A1534((uint64_t)v224);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v298);
    return (uint64_t)v52;
  }
  uint64_t v235 = v44;
  uint64_t v236 = v9;
  uint64_t v237 = found;
  uint64_t v251 = a3;
  Class v266 = 0;
  uint64_t v265 = 0;
  uint64_t v264 = 0;
  uint64_t v263 = 0;
  uint64_t v248 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue;
  v281 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
  uint64_t v280 = SPBeaconTaskNameUnknown;
  uint64_t v275 = SPBeaconTaskNameStartSharing;
  uint64_t v234 = (void (**)(char *, char *, uint64_t))(v278 + 5);
  uint64_t v279 = (void (**)(char *, char *, uint64_t))(v278 + 2);
  uint64_t v48 = (void (**)(char *, uint64_t))(v278 + 1);
  uint64_t v278 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  uint64_t v271 = SPBeaconTaskNameStopSharing;
  uint64_t v252 = SPBeaconTaskNameEnableLostMode;
  uint64_t v250 = SPBeaconTaskNameDisableLostMode;
  uint64_t v249 = SPBeaconTaskNamePlaySound;
  uint64_t v246 = SPBeaconTaskNameStopSound;
  uint64_t v245 = SPBeaconTaskNameBeginLeashing;
  uint64_t v244 = SPBeaconTaskNameEndLeashing;
  uint64_t v243 = SPBeaconTaskNameBeginBTFinding;
  uint64_t v242 = SPBeaconTaskNameEndBTFinding;
  uint64_t v241 = SPBeaconTaskNameConnect;
  uint64_t v240 = SPBeaconTaskNameDisconnect;
  uint64_t v239 = SPBeaconTaskNameRename;
  uint64_t v238 = SPBeaconTaskNameBeginRanging;
  uint64_t v233 = SPBeaconTaskNameEndRanging;
  uint64_t v232 = SPBeaconTaskNameAccessoryFirmwareUpdate;
  uint64_t v231 = SPBeaconTaskNameEnableNotifyWhenFound;
  uint64_t v230 = SPBeaconTaskNameDisableNotifyWhenFound;
  uint64_t v229 = SPBeaconTaskNameLocating;
  uint64_t v262 = v46;
  uint64_t v49 = (void **)(v46 + 4);
  uint64_t v228 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v270 + 56);
  uint64_t v227 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v270 + 48);
  uint64_t v247 = &v291;
  uint64_t v50 = 2;
  if (v283) {
    uint64_t v51 = 2;
  }
  else {
    uint64_t v51 = 0;
  }
  uint64_t v269 = v51;
  if (v283) {
    uint64_t v50 = 0;
  }
  uint64_t v274 = v50;
  uint64_t v52 = (void **)_swiftEmptyDictionarySingleton;
  uint64_t v53 = v286;
  while (1)
  {
    unint64_t v283 = v52;
    id v59 = *v49;
    uint64_t v297 = 2;
    id v60 = v59;
    Date.init()();
    id v296 = 0;
    uint64_t v61 = *v281;
    (*v281)(v53, 1, 1, v285);
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v64 = v63;
    if (v62 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v64 == v65)
    {
      swift_bridgeObjectRelease_n();
LABEL_24:
      uint64_t v72 = -1;
LABEL_28:
      uint64_t v297 = v72;
      goto LABEL_29;
    }
    char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v67) {
      goto LABEL_24;
    }
    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v70 = v69;
    if (v68 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v70 == v71)
    {
      swift_bridgeObjectRelease_n();
LABEL_26:
      uint64_t v74 = v299;
      goto LABEL_27;
    }
    char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v73) {
      goto LABEL_26;
    }
    uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v87 = v86;
    if (v85 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v87 == v88)
    {
      swift_bridgeObjectRelease_n();
LABEL_38:
      uint64_t v74 = &v297;
      goto LABEL_27;
    }
    char v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v89) {
      goto LABEL_38;
    }
    uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v92 = v91;
    if (v90 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v92 == v93)
    {
      swift_bridgeObjectRelease_n();
LABEL_43:
      uint64_t v95 = v48;
      uint64_t v96 = (uint64_t)v268;
      ((void (*)(char *, uint64_t *, uint64_t))v267[0])(v268, v273, v285);
      uint64_t v97 = sub_100B6D358(v96);
      uint64_t v98 = v97[2];
      uint64_t v99 = type metadata accessor for LostModeRecord();
      uint64_t v100 = *(void *)(v99 - 8);
      if (v98)
      {
        uint64_t v101 = v261;
        sub_1006CC8F8((uint64_t)v97+ ((*(unsigned __int8 *)(*(void *)(v99 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v99 - 8) + 80)), v261, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
        uint64_t v102 = 0;
      }
      else
      {
        uint64_t v102 = 1;
        uint64_t v101 = v261;
      }
      uint64_t v48 = v95;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v100 + 56))(v101, v102, 1, v99);
      swift_bridgeObjectRelease();
      v276(v268, v285);
      int v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v101, 1, v99);
      sub_10001DAB4(v101, &qword_10163BB70);
      if (v103 != 1) {
        goto LABEL_56;
      }
      goto LABEL_47;
    }
    char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v94) {
      goto LABEL_43;
    }
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v106 = v105;
    if (v104 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v106 == v107)
    {
      swift_bridgeObjectRelease_n();
LABEL_52:
      char v109 = v48;
      uint64_t v110 = (uint64_t)v260;
      ((void (*)(char *, uint64_t *, uint64_t))v267[0])(v260, v273, v285);
      uint64_t v111 = sub_100B6D358(v110);
      uint64_t v112 = v111[2];
      uint64_t v113 = type metadata accessor for LostModeRecord();
      uint64_t v114 = *(void *)(v113 - 8);
      if (v112)
      {
        uint64_t v115 = v259;
        sub_1006CC8F8((uint64_t)v111+ ((*(unsigned __int8 *)(*(void *)(v113 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v113 - 8) + 80)), v259, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
        uint64_t v116 = 0;
      }
      else
      {
        uint64_t v116 = 1;
        uint64_t v115 = v259;
      }
      uint64_t v48 = v109;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v114 + 56))(v115, v116, 1, v113);
      swift_bridgeObjectRelease();
      v276(v260, v285);
      int v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v115, 1, v113);
      sub_10001DAB4(v115, &qword_10163BB70);
      if (v117 == 1)
      {
LABEL_56:
        uint64_t v297 = 0;
        goto LABEL_29;
      }
      goto LABEL_47;
    }
    char v108 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v108) {
      goto LABEL_52;
    }
    uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v120 = v119;
    if (v118 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v120 == v121) {
      break;
    }
    char v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v122) {
      goto LABEL_61;
    }
    uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v132 = v131;
    if (v130 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v132 == v133)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v134 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v134 & 1) == 0)
      {
        uint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v143 = v142;
        if (v141 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v143 == v144) {
          goto LABEL_71;
        }
        char v145 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v145) {
          goto LABEL_73;
        }
        uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v148 = v147;
        if (v146 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v148 == v149)
        {
LABEL_71:
          swift_bridgeObjectRelease_n();
LABEL_73:
          uint64_t v297 = sub_10069455C((uint64_t)v273);
          goto LABEL_29;
        }
        char v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v150) {
          goto LABEL_73;
        }
        uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v153 = v152;
        if (v151 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v153 == v154)
        {
LABEL_79:
          swift_bridgeObjectRelease_n();
          goto LABEL_47;
        }
        char v155 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v155 & 1) == 0)
        {
          uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v158 = v157;
          if (v156 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v158 == v159) {
            goto LABEL_79;
          }
          char v160 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v160 & 1) == 0)
          {
            uint64_t v161 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v163 = v162;
            if (v161 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v163 == v164) {
              goto LABEL_79;
            }
            char v165 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v165 & 1) == 0)
            {
              uint64_t v166 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v168 = v167;
              if (v166 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v168 == v169) {
                goto LABEL_79;
              }
              char v170 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v170 & 1) == 0)
              {
                uint64_t v171 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v173 = v172;
                if (v171 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v173 == v174) {
                  goto LABEL_79;
                }
                char v175 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v175 & 1) == 0)
                {
                  uint64_t v176 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v178 = v177;
                  if (v176 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v178 == v179) {
                    goto LABEL_79;
                  }
                  char v180 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v180 & 1) == 0)
                  {
                    uint64_t v181 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    uint64_t v183 = v182;
                    if (v181 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v183 == v184) {
                      goto LABEL_79;
                    }
                    char v185 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v185 & 1) == 0)
                    {
                      uint64_t v186 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v188 = v187;
                      if (v186 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v188 == v189)
                      {
                        swift_bridgeObjectRelease_n();
LABEL_103:
                        uint64_t v191 = *(void *)(v251 + 176);
                        if (v191)
                        {
                          uint64_t v192 = v253;
                          uint64_t v193 = ((uint64_t (*)(char *, uint64_t *, uint64_t))v267[0])(v253, v273, v285);
                          v226[2] = v226;
                          v226[1] = *(void *)(v191 + 24);
                          __chkstk_darwin(v193);
                          v226[-2] = v191;
                          v226[-1] = v192;
                          sub_10001D4B0(0, &qword_101653D80);
                          swift_retain();
                          OS_dispatch_queue.sync<A>(execute:)();
                          swift_release();
                          uint64_t v194 = aBlock;
                          v276(v192, v285);
                          uint64_t v297 = (uint64_t)[v194 state];
                          id v195 = [v194 lastUpdated];
                          char v196 = v255;
                          static Date._unconditionallyBridgeFromObjectiveC(_:)();

                          (*v234)(v287, v196, v288);
                          id v296 = [v194 error];
                          swift_errorRelease();
                          uint64_t v197 = (void **)[v194 commandIdentifier];
                          if (v197)
                          {
                            uint64_t v198 = v197;
                            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                            uint64_t v199 = 0;
                            uint64_t v194 = v198;
                          }
                          else
                          {
                            uint64_t v199 = 1;
                          }

                          uint64_t v204 = (uint64_t)v256;
                          v61((uint64_t)v256, v199, 1, v285);
                          sub_100062604(v204, v286, &qword_101638CF0);
                        }
                        goto LABEL_29;
                      }
                      char v190 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if (v190) {
                        goto LABEL_103;
                      }
                      uint64_t v200 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v202 = v201;
                      if (v200 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v202 == v203)
                      {
                        swift_bridgeObjectRelease_n();
LABEL_112:
                        uint64_t v206 = (uint64_t)v254;
                        ((void (*)(char *, uint64_t *, uint64_t))v267[0])(v254, v273, v285);
                        id v207 = sub_100B6E74C(v206);
                        if (v207[2])
                        {
                          sub_1006CC8F8((uint64_t)v207+ ((*(unsigned __int8 *)(v270 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v270 + 80)), v258, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
                          uint64_t v208 = 0;
                        }
                        else
                        {
                          uint64_t v208 = 1;
                        }
                        uint64_t v209 = v258;
                        uint64_t v210 = v237;
                        (*v228)(v258, v208, 1, v237);
                        swift_bridgeObjectRelease();
                        v276(v254, v285);
                        if ((*v227)(v209, 1, v210) != 1)
                        {
                          uint64_t v211 = (uint64_t)v236;
                          sub_1006CD470(v258, (uint64_t)v236, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
                          uint64_t v212 = (uint64_t)v257;
                          uint64_t v213 = v285;
                          ((void (*)(char *, uint64_t, uint64_t))v267[0])(v257, v211 + *(int *)(v237 + 20), v285);
                          sub_1006CCE04(v211, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
                          v61(v212, 0, 1, v213);
                          sub_100062604(v212, v286, &qword_101638CF0);
                          uint64_t v297 = 0;
                          goto LABEL_29;
                        }
                        sub_10001DAB4(v258, &qword_101660BB0);
                        goto LABEL_47;
                      }
                      char v205 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if (v205) {
                        goto LABEL_112;
                      }
                      uint64_t v214 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v216 = v215;
                      if (v214 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v216 == v217) {
                        goto LABEL_79;
                      }
                      char v218 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v218 & 1) == 0)
                      {
                        uint64_t v219 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        uint64_t v221 = v220;
                        if (v219 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v221 == v222)
                        {
                          swift_bridgeObjectRelease_n();
                        }
                        else
                        {
                          char v223 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if ((v223 & 1) == 0) {
                            goto LABEL_29;
                          }
                        }
                        uint64_t v74 = v267;
LABEL_27:
                        uint64_t v72 = *(v74 - 32);
                        goto LABEL_28;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_47:
        uint64_t v72 = 2;
        goto LABEL_28;
      }
    }
    uint64_t v135 = v251;
    uint64_t v136 = *(NSObject **)(v251 + v248);
    sub_10001D010((uint64_t)&v298, (uint64_t)&v295);
    uint64_t v137 = (void *)swift_allocObject();
    v137[2] = v135;
    sub_10001CEB0(&v295, (uint64_t)(v137 + 3));
    v137[8] = &v297;
    v137[9] = v287;
    v137[10] = &v296;
    v137[11] = v286;
    swift_retain();
    sub_1000A1534((uint64_t)v264);
    uint64_t v138 = swift_allocObject();
    uint64_t v264 = sub_1006C5894;
    *(void *)(v138 + 16) = sub_1006C5894;
    *(void *)(v138 + 24) = v137;
    uint64_t v293 = sub_1003B7AE0;
    uint64_t v294 = v138;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v290 = 1107296256;
    uint64_t v291 = sub_1000A70B0;
    Class v292 = &unk_1015CF2E8;
    char v139 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    dispatch_sync(v136, v139);
    _Block_release(v139);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation) {
      goto LABEL_130;
    }
    uint64_t v263 = v137;
LABEL_29:
    (*v279)(v284, v287, v288);
    id v76 = v296;
    uint64_t v75 = v297;
    id v77 = v60;
    swift_errorRetain();
    v78.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    if (v76)
    {
      NSDate v79 = (void *)_convertErrorToNSError(_:)();
      swift_errorRelease();
    }
    else
    {
      NSDate v79 = 0;
    }
    id v80 = [objc_allocWithZone((Class)SPBeaconTaskInformation) initWithName:v77 lastUpdated:v78.super.isa error:v79 state:v75];

    id v81 = *v48;
    uint64_t v82 = v48;
    (*v48)(v284, v288);
    uint64_t v83 = v282;
    sub_10001D074(v286, v282, &qword_101638CF0);
    uint64_t v84 = v285;
    if ((*v278)(v83, 1, v285) == 1)
    {
      v54.super.Class isa = 0;
    }
    else
    {
      v54.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      v276((char *)v83, v84);
    }
    [v80 setCommandIdentifier:v54.super.isa];

    id v55 = v77;
    id v56 = v80;
    uint64_t v57 = v283;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t aBlock = v57;
    sub_10016E960((uint64_t)v56, v55, isUniquelyReferenced_nonNull_native);
    uint64_t v52 = aBlock;

    swift_bridgeObjectRelease();
    uint64_t v53 = v286;
    sub_10001DAB4(v286, &qword_101638CF0);
    swift_errorRelease();
    uint64_t v48 = v82;
    v81(v287, v288);
    ++v49;
    if (!--v47)
    {
      swift_bridgeObjectRelease();
      uint64_t v224 = v264;
      uint64_t v225 = v266;
      goto LABEL_128;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_61:
  uint64_t v123 = v251;
  uint64_t v124 = *(NSObject **)(v251 + v248);
  sub_10001D010((uint64_t)&v298, (uint64_t)&v295);
  uint64_t v125 = (void *)swift_allocObject();
  v125[2] = v123;
  sub_10001CEB0(&v295, (uint64_t)(v125 + 3));
  v125[8] = &v297;
  v125[9] = v287;
  v125[10] = &v296;
  v125[11] = v286;
  swift_retain();
  sub_1000A1534((uint64_t)v266);
  uint64_t v126 = swift_allocObject();
  Class v266 = sub_1006C58C4;
  *(void *)(v126 + 16) = sub_1006C58C4;
  *(void *)(v126 + 24) = v125;
  uint64_t v293 = sub_1003B7AE0;
  uint64_t v294 = v126;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v290 = 1107296256;
  uint64_t v291 = sub_1000A70B0;
  Class v292 = &unk_1015CF360;
  uint64_t v127 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v124, v127);
  _Block_release(v127);
  char v128 = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v128 & 1) == 0)
  {
    uint64_t v265 = v125;
    goto LABEL_29;
  }
  __break(1u);
LABEL_130:
  __break(1u);
  return result;
}

uint64_t sub_1006A3738(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5)
{
  LODWORD(v305) = a2;
  uint64_t v9 = sub_10000588C(&qword_101660BB0);
  __chkstk_darwin(v9 - 8);
  uint64_t v276 = (uint64_t)&v241 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord();
  uint64_t v292 = *(void *)(found - 8);
  __chkstk_darwin(found);
  uint64_t v274 = (uint64_t)&v241 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10163BB70);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v280 = (uint64_t)&v241 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v282[0] = (uint64_t)&v241 - v15;
  uint64_t v16 = sub_10000588C(&qword_101638CF0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v273 = (char *)&v241 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  Class v272 = (char *)&v241 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v241 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v303 = (uint64_t)&v241 - v25;
  __chkstk_darwin(v24);
  uint64_t v307 = (uint64_t)&v241 - v26;
  uint64_t v310 = type metadata accessor for Date();
  v304 = *(void ***)(v310 - 8);
  uint64_t v27 = __chkstk_darwin(v310);
  uint64_t v278 = (char *)&v241 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v306 = (char *)&v241 - v30;
  __chkstk_darwin(v29);
  uint64_t v308 = (char *)&v241 - v31;
  uint64_t v309 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v309 - 8);
  v299 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v32;
  uint64_t v33 = __chkstk_darwin(v309);
  uint64_t v271 = (char *)&v241 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v277 = (char *)&v241 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v281 = (char *)&v241 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v290 = (char *)&v241 - v40;
  __chkstk_darwin(v39);
  uint64_t v42 = (char *)&v241 - v41;
  uint64_t v322 = a4;
  uint64_t v323 = a5;
  char v43 = sub_10001D958(&v320);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v43, a1, a4);
  sub_10000588C(&qword_10164B288);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v44 = a5;
  uint64_t v45 = *(void *)(*(void *)(a5 + 8) + 8);
  uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v45 + 32);
  uint64_t v294 = v43;
  uint64_t v47 = (uint64_t)aBlock;
  uint64_t v289 = v45;
  uint64_t v288 = v45 + 32;
  unint64_t v287 = v46;
  ((void (*)(uint64_t))v46)(a4);
  uint64_t v48 = *(void *)(v47 + 16);
  uint64_t v279 = v23;
  if (v48)
  {
    sub_1007240CC((uint64_t)v42);
    if (v49) {
      uint64_t v50 = 0;
    }
    else {
      uint64_t v50 = 2;
    }
  }
  else
  {
    uint64_t v50 = 2;
  }
  uint64_t v51 = *(void (**)(char *, uint64_t))(v32 + 8);
  uint64_t v298 = v32 + 8;
  uint64_t v297 = v51;
  v51(v42, v309);
  uint64_t v52 = sub_1006AB098((uint64_t)v294, a3, a4, a5);
  uint64_t v53 = v52[2];
  if (!v53)
  {
    swift_bridgeObjectRelease();
    uint64_t v240 = 0;
    uint64_t v239 = 0;
    id v59 = (void **)_swiftEmptyDictionarySingleton;
LABEL_134:
    swift_bridgeObjectRelease();
    sub_1000A1534((uint64_t)v240);
    sub_1000A1534((uint64_t)v239);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v320);
    return (uint64_t)v59;
  }
  uint64_t v250 = v50;
  v282[2] = v47;
  uint64_t v269 = a3;
  uint64_t v268 = a4;
  uint64_t v286 = 0;
  uint64_t v285 = 0;
  uint64_t v284 = 0;
  unint64_t v283 = 0;
  uint64_t v263 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue;
  uint64_t v261 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager;
  uint64_t v302 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v299 + 7);
  uint64_t v301 = SPBeaconTaskNameUnknown;
  uint64_t v249 = (void (**)(char *, uint64_t, uint64_t))(v299 + 2);
  uint64_t v260 = (void (**)(char *, char *, uint64_t))(v304 + 5);
  BOOL v54 = (v305 & 1) == 0;
  uint64_t v300 = (void (**)(char *, char *, uint64_t))(v304 + 2);
  uint64_t v305 = (void (**)(char *, uint64_t))(v304 + 1);
  v299 += 6;
  uint64_t v296 = SPBeaconTaskNameStartSharing;
  uint64_t v293 = SPBeaconTaskNameStopSharing;
  uint64_t v270 = SPBeaconTaskNameEnableLostMode;
  uint64_t v267 = SPBeaconTaskNameDisableLostMode;
  uint64_t v266 = SPBeaconTaskNamePlaySound;
  uint64_t v259 = SPBeaconTaskNameStopSound;
  uint64_t v258 = SPBeaconTaskNameBeginLeashing;
  uint64_t v257 = SPBeaconTaskNameEndLeashing;
  uint64_t v256 = SPBeaconTaskNameBeginBTFinding;
  uint64_t v255 = SPBeaconTaskNameEndBTFinding;
  uint64_t v254 = SPBeaconTaskNameConnect;
  uint64_t v253 = SPBeaconTaskNameDisconnect;
  uint64_t v252 = SPBeaconTaskNameRename;
  uint64_t v251 = SPBeaconTaskNameBeginRanging;
  uint64_t v248 = SPBeaconTaskNameEndRanging;
  uint64_t v247 = SPBeaconTaskNameAccessoryFirmwareUpdate;
  uint64_t v246 = SPBeaconTaskNameEnableNotifyWhenFound;
  uint64_t v245 = SPBeaconTaskNameDisableNotifyWhenFound;
  uint64_t v244 = SPBeaconTaskNameLocating;
  id v55 = &qword_101638CF0;
  v282[1] = (uint64_t)v52;
  id v56 = (void **)(v52 + 4);
  uint64_t v243 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v292 + 56);
  uint64_t v242 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v292 + 48);
  uint64_t v262 = &v313;
  uint64_t v265 = v44;
  uint64_t v264 = v44 + 144;
  uint64_t v57 = 2;
  if (v54) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = 2;
  }
  uint64_t v291 = v58;
  if (!v54) {
    uint64_t v57 = 0;
  }
  uint64_t v295 = v57;
  id v59 = (void **)_swiftEmptyDictionarySingleton;
  uint64_t v60 = v307;
  while (1)
  {
    v304 = v59;
    uint64_t v66 = *v56;
    uint64_t v319 = 2;
    id v67 = v66;
    Date.init()();
    id v318 = 0;
    uint64_t v68 = *v302;
    (*v302)(v60, 1, 1, v309);
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v71 = v70;
    if (v69 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v71 == v72)
    {
      swift_bridgeObjectRelease_n();
LABEL_24:
      uint64_t v79 = -1;
LABEL_28:
      uint64_t v319 = v79;
      goto LABEL_29;
    }
    char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v74) {
      goto LABEL_24;
    }
    uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v77 = v76;
    if (v75 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v77 == v78)
    {
      swift_bridgeObjectRelease_n();
LABEL_26:
      id v81 = (uint64_t *)&v321;
      goto LABEL_27;
    }
    char v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v80) {
      goto LABEL_26;
    }
    uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v94 = v93;
    if (v92 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v94 == v95)
    {
      swift_bridgeObjectRelease_n();
LABEL_38:
      id v81 = &v319;
      goto LABEL_27;
    }
    char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v96) {
      goto LABEL_38;
    }
    uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v99 = v98;
    if (v97 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v99 == v100)
    {
      swift_bridgeObjectRelease_n();
LABEL_43:
      uint64_t v102 = (uint64_t)v290;
      v287(v268, v289);
      int v103 = sub_100B6D358(v102);
      uint64_t v104 = v103[2];
      uint64_t v105 = type metadata accessor for LostModeRecord();
      uint64_t v106 = *(void *)(v105 - 8);
      if (v104)
      {
        uint64_t v107 = v282[0];
        sub_1006CC8F8((uint64_t)v103+ ((*(unsigned __int8 *)(*(void *)(v105 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v105 - 8) + 80)), v282[0], (uint64_t (*)(void))type metadata accessor for LostModeRecord);
        uint64_t v108 = 0;
      }
      else
      {
        uint64_t v108 = 1;
        uint64_t v107 = v282[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 56))(v107, v108, 1, v105);
      swift_bridgeObjectRelease();
      v297(v290, v309);
      int v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v107, 1, v105);
      sub_10001DAB4(v107, &qword_10163BB70);
      if (v109 != 1) {
        goto LABEL_56;
      }
      goto LABEL_47;
    }
    char v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v101) {
      goto LABEL_43;
    }
    uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v112 = v111;
    if (v110 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v112 == v113)
    {
      swift_bridgeObjectRelease_n();
LABEL_52:
      uint64_t v115 = (uint64_t)v281;
      v287(v268, v289);
      uint64_t v116 = sub_100B6D358(v115);
      uint64_t v117 = v116[2];
      uint64_t v118 = type metadata accessor for LostModeRecord();
      uint64_t v119 = *(void *)(v118 - 8);
      if (v117)
      {
        uint64_t v120 = v280;
        sub_1006CC8F8((uint64_t)v116+ ((*(unsigned __int8 *)(*(void *)(v118 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v118 - 8) + 80)), v280, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
        uint64_t v121 = 0;
      }
      else
      {
        uint64_t v121 = 1;
        uint64_t v120 = v280;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v119 + 56))(v120, v121, 1, v118);
      swift_bridgeObjectRelease();
      v297(v281, v309);
      int v122 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v120, 1, v118);
      sub_10001DAB4(v120, &qword_10163BB70);
      if (v122 == 1)
      {
LABEL_56:
        uint64_t v319 = 0;
        goto LABEL_29;
      }
      goto LABEL_47;
    }
    char v114 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v114) {
      goto LABEL_52;
    }
    uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v125 = v124;
    if (v123 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v125 == v126) {
      break;
    }
    char v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v127) {
      goto LABEL_61;
    }
    uint64_t v145 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v147 = v146;
    if (v145 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v147 == v148)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v150 & 1) == 0)
      {
        uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v158 = v157;
        if (v156 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v158 == v159) {
          goto LABEL_77;
        }
        char v160 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v160) {
          goto LABEL_79;
        }
        uint64_t v161 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v163 = v162;
        if (v161 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v163 == v164)
        {
LABEL_77:
          swift_bridgeObjectRelease_n();
LABEL_79:
          uint64_t v319 = sub_100A25DA0((uint64_t)v294, (uint64_t)v269, v268, v265);
          goto LABEL_29;
        }
        char v165 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v165) {
          goto LABEL_79;
        }
        uint64_t v166 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v168 = v167;
        if (v166 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v168 == v169)
        {
LABEL_85:
          swift_bridgeObjectRelease_n();
          goto LABEL_47;
        }
        char v170 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v170 & 1) == 0)
        {
          uint64_t v171 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v173 = v172;
          if (v171 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v173 == v174) {
            goto LABEL_85;
          }
          char v175 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v175 & 1) == 0)
          {
            uint64_t v176 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v178 = v177;
            if (v176 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v178 == v179) {
              goto LABEL_85;
            }
            char v180 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v180 & 1) == 0)
            {
              uint64_t v181 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v183 = v182;
              if (v181 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v183 == v184) {
                goto LABEL_85;
              }
              char v185 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v185 & 1) == 0)
              {
                uint64_t v186 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v188 = v187;
                if (v186 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v188 == v189) {
                  goto LABEL_85;
                }
                char v190 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v190 & 1) == 0)
                {
                  uint64_t v191 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v193 = v192;
                  if (v191 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v193 == v194) {
                    goto LABEL_85;
                  }
                  char v195 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v195 & 1) == 0)
                  {
                    uint64_t v196 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    uint64_t v198 = v197;
                    if (v196 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v198 == v199) {
                      goto LABEL_85;
                    }
                    char v200 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v200 & 1) == 0)
                    {
                      uint64_t v201 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v203 = v202;
                      if (v201 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v203 == v204)
                      {
                        swift_bridgeObjectRelease_n();
LABEL_109:
                        uint64_t v206 = *((void *)v269 + 22);
                        if (!v206) {
                          goto LABEL_29;
                        }
                        swift_retain();
                        id v207 = v277;
                        uint64_t v208 = ((uint64_t (*)(uint64_t, uint64_t))v287)(v268, v289);
                        uint64_t v241 = (uint64_t)&v241;
                        __chkstk_darwin(v208);
                        *(&v241 - 2) = v206;
                        *(&v241 - 1) = (uint64_t)v207;
                        sub_10001D4B0(0, &qword_101653D80);
                        OS_dispatch_queue.sync<A>(execute:)();
                        swift_release();
                        uint64_t v209 = aBlock;
                        v297(v207, v309);
                        uint64_t v319 = (uint64_t)[v209 state];
                        id v210 = [v209 lastUpdated];
                        uint64_t v211 = v278;
                        static Date._unconditionallyBridgeFromObjectiveC(_:)();

                        (*v260)(v308, v211, v310);
                        id v318 = [v209 error];
                        swift_errorRelease();
                        uint64_t v212 = (void **)[v209 commandIdentifier];
                        if (v212)
                        {
                          uint64_t v213 = v212;
                          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                          uint64_t v214 = 0;
                          uint64_t v209 = v213;
                        }
                        else
                        {
                          uint64_t v214 = 1;
                        }

                        uint64_t v219 = v272;
                        v68((uint64_t)v272, v214, 1, v309);
                        uint64_t v149 = (uint64_t)v219;
LABEL_71:
                        sub_100062604(v149, v307, v55);
                        goto LABEL_29;
                      }
                      char v205 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if (v205) {
                        goto LABEL_109;
                      }
                      uint64_t v215 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v217 = v216;
                      if (v215 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v217 == v218)
                      {
                        swift_bridgeObjectRelease_n();
LABEL_118:
                        uint64_t v221 = (uint64_t)v271;
                        v287(v268, v289);
                        uint64_t v222 = sub_100B6E74C(v221);
                        if (v222[2])
                        {
                          sub_1006CC8F8((uint64_t)v222+ ((*(unsigned __int8 *)(v292 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v292 + 80)), v276, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
                          uint64_t v223 = 0;
                        }
                        else
                        {
                          uint64_t v223 = 1;
                        }
                        uint64_t v224 = v276;
                        uint64_t v225 = found;
                        (*v243)(v276, v223, 1, found);
                        swift_bridgeObjectRelease();
                        v297(v271, v309);
                        if ((*v242)(v224, 1, v225) != 1)
                        {
                          uint64_t v226 = v274;
                          sub_1006CD470(v276, v274, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
                          uint64_t v227 = (uint64_t)v273;
                          uint64_t v228 = v309;
                          (*v249)(v273, v226 + *(int *)(found + 20), v309);
                          sub_1006CCE04(v226, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
                          v68(v227, 0, 1, v228);
                          sub_100062604(v227, v307, v55);
                          uint64_t v319 = 0;
                          goto LABEL_29;
                        }
                        sub_10001DAB4(v276, &qword_101660BB0);
                        goto LABEL_47;
                      }
                      char v220 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if (v220) {
                        goto LABEL_118;
                      }
                      uint64_t v229 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v231 = v230;
                      if (v229 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v231 == v232) {
                        goto LABEL_85;
                      }
                      char v233 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v233 & 1) == 0)
                      {
                        uint64_t v234 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        uint64_t v236 = v235;
                        if (v234 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v236 == v237)
                        {
                          swift_bridgeObjectRelease_n();
                        }
                        else
                        {
                          char v238 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if ((v238 & 1) == 0) {
                            goto LABEL_29;
                          }
                        }
                        id v81 = v282;
LABEL_27:
                        uint64_t v79 = *(v81 - 32);
                        goto LABEL_28;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_47:
        uint64_t v79 = 2;
        goto LABEL_28;
      }
    }
    uint64_t v151 = (uint64_t)v269;
    uint64_t v152 = *(NSObject **)&v269[v263];
    sub_10001D010((uint64_t)&v320, (uint64_t)&v317);
    uint64_t v153 = (void *)swift_allocObject();
    v153[2] = v151;
    sub_10001CEB0(&v317, (uint64_t)(v153 + 3));
    v153[8] = &v319;
    v153[9] = v308;
    v153[10] = &v318;
    v153[11] = v307;
    swift_retain();
    sub_1000A1534((uint64_t)v284);
    uint64_t v154 = swift_allocObject();
    uint64_t v284 = sub_1006C5894;
    *(void *)(v154 + 16) = sub_1006C5894;
    *(void *)(v154 + 24) = v153;
    long long v315 = sub_1003B7AE0;
    uint64_t v316 = v154;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v312 = 1107296256;
    v313 = sub_1000A70B0;
    uint64_t v314 = &unk_1015CFD88;
    char v155 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    dispatch_sync(v152, v155);
    _Block_release(v155);
    LOBYTE(v151) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (v151) {
      goto LABEL_136;
    }
    unint64_t v283 = v153;
LABEL_29:
    (*v300)(v306, v308, v310);
    id v83 = v318;
    uint64_t v82 = v319;
    id v84 = v67;
    swift_errorRetain();
    v85.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    if (v83)
    {
      uint64_t v86 = (void *)_convertErrorToNSError(_:)();
      swift_errorRelease();
    }
    else
    {
      uint64_t v86 = 0;
    }
    id v87 = [objc_allocWithZone((Class)SPBeaconTaskInformation) initWithName:v84 lastUpdated:v85.super.isa error:v86 state:v82];

    uint64_t v88 = *v305;
    (*v305)(v306, v310);
    uint64_t v89 = v303;
    uint64_t v90 = v55;
    sub_10001D074(v307, v303, v55);
    uint64_t v91 = v309;
    if ((*v299)(v89, 1, v309) == 1)
    {
      v61.super.Class isa = 0;
    }
    else
    {
      v61.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      v297((char *)v89, v91);
    }
    [v87 setCommandIdentifier:v61.super.isa];

    id v62 = v84;
    id v63 = v87;
    uint64_t v64 = v304;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t aBlock = v64;
    sub_10016E960((uint64_t)v63, v62, isUniquelyReferenced_nonNull_native);
    id v59 = aBlock;

    swift_bridgeObjectRelease();
    uint64_t v60 = v307;
    id v55 = v90;
    sub_10001DAB4(v307, v90);
    swift_errorRelease();
    v88(v308, v310);
    ++v56;
    if (!--v53)
    {
      swift_bridgeObjectRelease();
      uint64_t v239 = v284;
      uint64_t v240 = v286;
      goto LABEL_134;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_61:
  uint64_t v128 = v268;
  if ((*(uint64_t (**)(uint64_t))(v265 + 144))(v268))
  {
    uint64_t v129 = *(void *)&v269[v261];
    uint64_t v130 = v277;
    uint64_t v131 = ((uint64_t (*)(uint64_t, uint64_t))v287)(v128, v289);
    __chkstk_darwin(v131);
    *(&v241 - 2) = v129;
    *(&v241 - 1) = (uint64_t)v130;
    sub_10001D4B0(0, &qword_101653D80);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v132 = aBlock;
    v297(v130, v309);
    uint64_t v319 = (uint64_t)[v132 state];
    id v133 = [v132 lastUpdated];
    char v134 = v278;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*v260)(v308, v134, v310);
    id v318 = [v132 error];
    swift_errorRelease();
    uint64_t v135 = (void **)[v132 commandIdentifier];
    if (v135)
    {
      uint64_t v136 = v135;
      uint64_t v137 = (uint64_t)v279;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v138 = 0;
      uint64_t v132 = v136;
    }
    else
    {
      uint64_t v138 = 1;
      uint64_t v137 = (uint64_t)v279;
    }
    id v55 = &qword_101638CF0;

    v68(v137, v138, 1, v309);
    uint64_t v149 = v137;
    goto LABEL_71;
  }
  uint64_t v139 = (uint64_t)v269;
  uint64_t v140 = *(NSObject **)&v269[v263];
  sub_10001D010((uint64_t)&v320, (uint64_t)&v317);
  uint64_t v141 = (void *)swift_allocObject();
  v141[2] = v139;
  sub_10001CEB0(&v317, (uint64_t)(v141 + 3));
  v141[8] = &v319;
  v141[9] = v308;
  v141[10] = &v318;
  v141[11] = v307;
  swift_retain();
  sub_1000A1534((uint64_t)v286);
  uint64_t v142 = swift_allocObject();
  uint64_t v286 = sub_1006C58C4;
  *(void *)(v142 + 16) = sub_1006C58C4;
  *(void *)(v142 + 24) = v141;
  long long v315 = sub_1003B7AE0;
  uint64_t v316 = v142;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v312 = 1107296256;
  v313 = sub_1000A70B0;
  uint64_t v314 = &unk_1015CFE00;
  uint64_t v143 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v140, v143);
  _Block_release(v143);
  LOBYTE(v139) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v139 & 1) == 0)
  {
    uint64_t v285 = v141;
    goto LABEL_29;
  }
  __break(1u);
LABEL_136:
  __break(1u);
  return result;
}

id sub_1006A5804(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v113 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v112 = (uint64_t)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v110 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v109 = (uint64_t)&v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v111 = (char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v104 - v21;
  char v114 = (int *)v7;
  v119[3] = v7;
  v119[4] = sub_100691B60(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  uint64_t v23 = sub_10001D958(v119);
  sub_1006CC8F8(a1, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  if ((sub_1006A6C00((uint64_t)v23, a2) & 1) == 0)
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170E7C8);
    sub_10001D010((uint64_t)v119, (uint64_t)v117);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 141558275;
      uint64_t v115 = 1752392040;
      uint64_t v116 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2081;
      uint64_t v37 = (char *)sub_10001CD44(v117, v118);
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v22, &v37[v114[5]], v17);
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = v18;
      unint64_t v41 = v40;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v22, v17);
      uint64_t v115 = sub_1008FA0F0(v38, v41, &v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
      uint64_t v34 = "Can't monitor beacon: %{private,mask.hash}s due to: unsupported beacon.";
      goto LABEL_11;
    }
LABEL_46:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
    goto LABEL_47;
  }
  if (sub_100DBADC8())
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100010324(v24, (uint64_t)qword_10170E7C8);
    sub_10001D010((uint64_t)v119, (uint64_t)v117);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 141558275;
      uint64_t v115 = 1752392040;
      uint64_t v116 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2081;
      uint64_t v29 = (char *)sub_10001CD44(v117, v118);
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v22, &v29[v114[5]], v17);
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v31 = v18;
      unint64_t v33 = v32;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v22, v17);
      uint64_t v115 = sub_1008FA0F0(v30, v33, &v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
      uint64_t v34 = "Can't monitor beacon: %{private,mask.hash}s due to: this device.";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v25, v26, v34, (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_47:

LABEL_48:
      uint64_t v71 = 0;
      goto LABEL_49;
    }
    goto LABEL_46;
  }
  uint64_t v105 = v22;
  uint64_t v107 = v17;
  uint64_t v108 = v18;
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  uint64_t v106 = v117[0];
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v42 = (void *)qword_10170EE68;
  char v43 = self;
  id v44 = [v43 sharedInstance];
  unsigned __int8 v45 = [v44 isInternalBuild];

  if ((v45 & 1) != 0
    && (NSString v46 = String._bridgeToObjectiveC()(),
        unsigned int v47 = [v42 BOOLForKey:v46],
        v46,
        v47))
  {
    id v48 = [v43 sharedInstance];
    unsigned __int8 v49 = [v48 isInternalBuild];
  }
  else
  {
    unsigned __int8 v49 = 0;
  }
  uint64_t v50 = v107;
  uint64_t v51 = v114;
  BOOL v52 = sub_100DF1520(*(uint64_t *)((char *)v23 + v114[16]), *(uint64_t *)((char *)v23 + v114[17]));
  uint64_t v53 = v108;
  if (v52)
  {
    if (v106 > 1) {
      char v54 = 1;
    }
    else {
      char v54 = v49;
    }
    if ((v54 & 1) == 0)
    {
      if (qword_101636EE0 != -1) {
        swift_once();
      }
      uint64_t v55 = type metadata accessor for Logger();
      sub_100010324(v55, (uint64_t)qword_10170E7C8);
      sub_10001D010((uint64_t)v119, (uint64_t)v117);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 141558275;
        uint64_t v115 = 1752392040;
        uint64_t v116 = v56;
        uint64_t v57 = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v27 + 12) = 2081;
        uint64_t v58 = (char *)sub_10001CD44(v117, v118);
        (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v57, &v58[v114[5]], v50);
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v60 = v53;
        unint64_t v62 = v61;
        (*(void (**)(char *, uint64_t))(v60 + 8))(v57, v50);
        uint64_t v115 = sub_1008FA0F0(v59, v62, &v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
        uint64_t v34 = "Can't monitor beacon: %{private,mask.hash}s due to: airpods beacon but less than 2 adv buffers.";
        goto LABEL_11;
      }
      goto LABEL_46;
    }
    sub_10001D074((uint64_t)v23 + v114[7], (uint64_t)v16, &qword_101638CF0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v16, 1, v50) == 1)
    {
      sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
    }
    else
    {
      uint64_t v63 = (uint64_t)v111;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v111, v16, v50);
      sub_100AE75E0(v63, (uint64_t)v11);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v11, 1, v12) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v63, v50);
        sub_10001DAB4((uint64_t)v11, &qword_10163BB20);
      }
      else
      {
        uint64_t v64 = v109;
        sub_1006CD470((uint64_t)v11, v109, type metadata accessor for OwnedBeaconGroup);
        if ((sub_1004CF378() & 1) == 0)
        {
          if (qword_101636EE0 != -1) {
            swift_once();
          }
          uint64_t v91 = type metadata accessor for Logger();
          sub_100010324(v91, (uint64_t)qword_10170E7C8);
          sub_10001D010((uint64_t)v119, (uint64_t)v117);
          uint64_t v92 = Logger.logObject.getter();
          os_log_type_t v93 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v92, v93))
          {
            uint64_t v94 = swift_slowAlloc();
            uint64_t v95 = swift_slowAlloc();
            *(_DWORD *)uint64_t v94 = 141558275;
            uint64_t v115 = 1752392040;
            uint64_t v116 = v95;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v94 + 12) = 2081;
            uint64_t v113 = v94 + 14;
            char v96 = (char *)sub_10001CD44(v117, v118);
            uint64_t v97 = v105;
            (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v105, &v96[v114[5]], v50);
            sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v99 = v97;
            uint64_t v100 = v53;
            unint64_t v102 = v101;
            int v103 = *(void (**)(char *, uint64_t))(v100 + 8);
            v103(v99, v50);
            uint64_t v115 = sub_1008FA0F0(v98, v102, &v116);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
            _os_log_impl((void *)&_mh_execute_header, v92, v93, "Can't monitor beacon: %{private,mask.hash}s due to: group pairing incomplete.", (uint8_t *)v94, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_1006CCE04(v109, type metadata accessor for OwnedBeaconGroup);
            v103(v111, v50);
          }
          else
          {

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
            sub_1006CCE04(v64, type metadata accessor for OwnedBeaconGroup);
            (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v63, v50);
          }
          goto LABEL_48;
        }
        sub_1006CCE04(v64, type metadata accessor for OwnedBeaconGroup);
        (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v63, v50);
      }
    }
    uint64_t v51 = v114;
  }
  sub_100A1208C((uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v113 + 48))(v6, 1, v51) == 1)
  {
    sub_10001DAB4((uint64_t)v6, &qword_10163B9F0);
  }
  else
  {
    uint64_t v65 = v112;
    sub_1006CD470((uint64_t)v6, v112, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_bridgeObjectRetain();
    char v66 = sub_100691C14();
    swift_bridgeObjectRelease();
    if (v66)
    {
      sub_100691B60((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        if (qword_101636EE0 != -1) {
          swift_once();
        }
        uint64_t v80 = type metadata accessor for Logger();
        sub_100010324(v80, (uint64_t)qword_10170E7C8);
        sub_10001D010((uint64_t)v119, (uint64_t)v117);
        id v81 = Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v81, v82))
        {
          uint64_t v83 = swift_slowAlloc();
          uint64_t v84 = swift_slowAlloc();
          *(_DWORD *)uint64_t v83 = 141558275;
          uint64_t v115 = 1752392040;
          uint64_t v116 = v84;
          NSDate v85 = v105;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v83 + 12) = 2081;
          uint64_t v86 = (char *)sub_10001CD44(v117, v118);
          (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v85, &v86[v51[5]], v50);
          sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v88 = v53;
          unint64_t v90 = v89;
          (*(void (**)(char *, uint64_t))(v88 + 8))(v85, v50);
          uint64_t v115 = sub_1008FA0F0(v87, v90, &v116);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
          _os_log_impl((void *)&_mh_execute_header, v81, v82, "Can't monitor beacon: %{private,mask.hash}s due to: watch beacon, but not actively paired.", (uint8_t *)v83, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          sub_1006CCE04(v112, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        }
        else
        {

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
          sub_1006CCE04(v65, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        }
        goto LABEL_48;
      }
    }
    sub_1006CCE04(v65, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  id result = [self defaultWorkspace];
  if (result)
  {
    uint64_t v68 = result;
    NSString v69 = String._bridgeToObjectiveC()();
    unsigned __int8 v70 = [v68 applicationIsInstalled:v69];

    if (v70)
    {
      uint64_t v71 = 1;
LABEL_49:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v119);
      return (id)v71;
    }
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    sub_100010324(v72, (uint64_t)qword_10170E7C8);
    sub_10001D010((uint64_t)v119, (uint64_t)v117);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 141558275;
      uint64_t v115 = 1752392040;
      uint64_t v116 = v73;
      char v74 = v105;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2081;
      uint64_t v75 = (char *)sub_10001CD44(v117, v118);
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v74, &v75[v51[5]], v50);
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v77 = v53;
      unint64_t v79 = v78;
      (*(void (**)(char *, uint64_t))(v77 + 8))(v74, v50);
      uint64_t v115 = sub_1008FA0F0(v76, v79, &v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
      uint64_t v34 = "Can't monitor beacon: %{private,mask.hash}s due to: no Find My app installed.";
      goto LABEL_11;
    }
    goto LABEL_46;
  }
  __break(1u);
  return result;
}

uint64_t sub_1006A6C00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1006CC8F8(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  id v7 = sub_100D1C7BC();
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
  {

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v14 = 0;
  if ((v13 & 1) == 0)
  {
    uint64_t v15 = sub_100698648((uint64_t)v6, *(char **)(a2 + 280));
    if (sub_100DC7494(8u, (uint64_t)v15))
    {
      char v14 = sub_100DC7494(9u, (uint64_t)v15);
LABEL_10:
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
LABEL_9:
    char v14 = 0;
    goto LABEL_10;
  }
LABEL_11:
  sub_1006CCE04((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  return v14 & 1;
}

void *sub_1006A6D78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalFindableAccessoryRecord();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73[3] = v4;
  v73[4] = sub_100691B60(&qword_101642930, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
  uint64_t v10 = sub_10001D958(v73);
  sub_1006CC8F8(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  sub_10001D010((uint64_t)v73, (uint64_t)v72);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  if (swift_dynamicCast())
  {
    sub_1006CCE04((uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    uint64_t v11 = sub_10069A174((uint64_t)v10, *(void *)(a2 + 280));
    int64_t v12 = v11[2];
    if (v12)
    {
      v72[0] = _swiftEmptyArrayStorage;
      sub_1000B7C24(0, v12, 0);
      char v13 = (void *)v72[0];
      uint64_t v14 = sub_10115FE18(v11);
      uint64_t v16 = v15;
      uint64_t v17 = (void *)SPBeaconTaskNameEnableDelegatedShares;
      char v19 = v18 & 1;
      uint64_t v71 = (char *)(v11 + 7);
      uint64_t v68 = (void *)SPBeaconTaskNameAccessoryFirmwareUpdate;
      NSString v69 = (void *)SPBeaconTaskNameUnpair;
      char v66 = (void *)SPBeaconTaskNameStartSharing;
      id v67 = (void *)SPBeaconTaskNameStopSharing;
      uint64_t v64 = (void *)SPBeaconTaskNameDisconnect;
      uint64_t v65 = (void *)SPBeaconTaskNameRename;
      unint64_t v62 = (void *)SPBeaconTaskNameDisableLostMode;
      uint64_t v63 = (void *)SPBeaconTaskNameConnect;
      unint64_t v61 = (void *)SPBeaconTaskNameEnableLostMode;
      uint64_t v60 = (void *)SPBeaconTaskNameEndRanging;
      uint64_t v59 = (void *)SPBeaconTaskNameBeginRanging;
      uint64_t v58 = (void *)SPBeaconTaskNameEndBTFinding;
      uint64_t v57 = (void *)SPBeaconTaskNameBeginBTFinding;
      uint64_t v56 = (void *)SPBeaconTaskNameEndLeashing;
      uint64_t v55 = (void *)SPBeaconTaskNameBeginLeashing;
      char v54 = (void *)SPBeaconTaskNameStopSound;
      uint64_t v53 = (void *)SPBeaconTaskNamePlaySound;
      BOOL v52 = (void *)SPBeaconTaskNameLocating;
      uint64_t v51 = (void *)SPBeaconTaskNameDisableNotifyWhenFound;
      uint64_t v50 = (void *)SPBeaconTaskNameEnableNotifyWhenFound;
      unsigned __int8 v70 = (void *)SPBeaconTaskNameUnknown;
      while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *((unsigned char *)v11 + 32))
      {
        if (((*(void *)&v71[((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v14) & 1) == 0) {
          goto LABEL_102;
        }
        if (*((_DWORD *)v11 + 9) != v16) {
          goto LABEL_103;
        }
        uint64_t v20 = v70;
        switch(*(unsigned char *)(v11[6] + v14))
        {
          case 1:
            uint64_t v20 = v50;
            break;
          case 2:
            uint64_t v20 = v51;
            break;
          case 3:
            uint64_t v20 = v52;
            break;
          case 4:
            uint64_t v20 = v66;
            break;
          case 5:
            uint64_t v20 = v67;
            break;
          case 6:
            uint64_t v20 = v53;
            break;
          case 7:
            uint64_t v20 = v54;
            break;
          case 8:
            uint64_t v20 = v55;
            break;
          case 9:
            uint64_t v20 = v56;
            break;
          case 0xA:
            uint64_t v20 = v57;
            break;
          case 0xB:
            uint64_t v20 = v58;
            break;
          case 0xC:
            uint64_t v20 = v59;
            break;
          case 0xD:
            uint64_t v20 = v60;
            break;
          case 0xE:
            uint64_t v20 = v61;
            break;
          case 0xF:
            uint64_t v20 = v62;
            break;
          case 0x10:
            uint64_t v20 = v65;
            break;
          case 0x11:
            uint64_t v20 = v63;
            break;
          case 0x12:
            uint64_t v20 = v64;
            break;
          case 0x13:
            uint64_t v20 = v68;
            break;
          case 0x14:
            uint64_t v20 = v69;
            break;
          case 0x15:
            uint64_t v20 = v17;
            break;
          default:
            break;
        }
        id v21 = v20;
        v72[0] = v13;
        unint64_t v23 = v13[2];
        unint64_t v22 = v13[3];
        if (v23 >= v22 >> 1)
        {
          sub_1000B7C24(v22 > 1, v23 + 1, 1);
          char v13 = (void *)v72[0];
        }
        void v13[2] = v23 + 1;
        v13[v23 + 4] = v21;
        uint64_t v14 = sub_10052CB9C(v14, v16, v19 & 1, v11);
        uint64_t v16 = v24;
        char v19 = v25 & 1;
        if (!--v12) {
          goto LABEL_98;
        }
      }
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
      JUMPOUT(0x1006A7A44);
    }
    goto LABEL_99;
  }
  sub_10001D010((uint64_t)v73, (uint64_t)v72);
  if (swift_dynamicCast())
  {
    sub_1006CCE04((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    os_log_type_t v26 = sub_10069A174((uint64_t)v10, *(void *)(a2 + 280));
    int64_t v27 = v26[2];
    if (v27)
    {
      v72[0] = _swiftEmptyArrayStorage;
      sub_1000B7C24(0, v27, 0);
      char v13 = (void *)v72[0];
      uint64_t v14 = sub_10115FE18(v26);
      uint64_t v16 = v28;
      uint64_t v29 = (void *)SPBeaconTaskNameEnableDelegatedShares;
      char v19 = v30 & 1;
      uint64_t v71 = (char *)(v26 + 7);
      uint64_t v68 = (void *)SPBeaconTaskNameAccessoryFirmwareUpdate;
      NSString v69 = (void *)SPBeaconTaskNameUnpair;
      char v66 = (void *)SPBeaconTaskNameStartSharing;
      id v67 = (void *)SPBeaconTaskNameStopSharing;
      uint64_t v64 = (void *)SPBeaconTaskNameDisconnect;
      uint64_t v65 = (void *)SPBeaconTaskNameRename;
      unint64_t v62 = (void *)SPBeaconTaskNameDisableLostMode;
      uint64_t v63 = (void *)SPBeaconTaskNameConnect;
      unint64_t v61 = (void *)SPBeaconTaskNameEnableLostMode;
      uint64_t v60 = (void *)SPBeaconTaskNameEndRanging;
      uint64_t v59 = (void *)SPBeaconTaskNameBeginRanging;
      uint64_t v58 = (void *)SPBeaconTaskNameEndBTFinding;
      uint64_t v57 = (void *)SPBeaconTaskNameBeginBTFinding;
      uint64_t v56 = (void *)SPBeaconTaskNameEndLeashing;
      uint64_t v55 = (void *)SPBeaconTaskNameBeginLeashing;
      char v54 = (void *)SPBeaconTaskNameStopSound;
      uint64_t v53 = (void *)SPBeaconTaskNamePlaySound;
      BOOL v52 = (void *)SPBeaconTaskNameLocating;
      uint64_t v51 = (void *)SPBeaconTaskNameDisableNotifyWhenFound;
      uint64_t v50 = (void *)SPBeaconTaskNameEnableNotifyWhenFound;
      unsigned __int8 v70 = (void *)SPBeaconTaskNameUnknown;
      while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *((unsigned char *)v26 + 32))
      {
        if (((*(void *)&v71[((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v14) & 1) == 0) {
          goto LABEL_105;
        }
        if (*((_DWORD *)v26 + 9) != v16) {
          goto LABEL_106;
        }
        uint64_t v31 = v70;
        switch(*(unsigned char *)(v26[6] + v14))
        {
          case 1:
            uint64_t v31 = v50;
            break;
          case 2:
            uint64_t v31 = v51;
            break;
          case 3:
            uint64_t v31 = v52;
            break;
          case 4:
            uint64_t v31 = v66;
            break;
          case 5:
            uint64_t v31 = v67;
            break;
          case 6:
            uint64_t v31 = v53;
            break;
          case 7:
            uint64_t v31 = v54;
            break;
          case 8:
            uint64_t v31 = v55;
            break;
          case 9:
            uint64_t v31 = v56;
            break;
          case 0xA:
            uint64_t v31 = v57;
            break;
          case 0xB:
            uint64_t v31 = v58;
            break;
          case 0xC:
            uint64_t v31 = v59;
            break;
          case 0xD:
            uint64_t v31 = v60;
            break;
          case 0xE:
            uint64_t v31 = v61;
            break;
          case 0xF:
            uint64_t v31 = v62;
            break;
          case 0x10:
            uint64_t v31 = v65;
            break;
          case 0x11:
            uint64_t v31 = v63;
            break;
          case 0x12:
            uint64_t v31 = v64;
            break;
          case 0x13:
            uint64_t v31 = v68;
            break;
          case 0x14:
            uint64_t v31 = v69;
            break;
          case 0x15:
            uint64_t v31 = v29;
            break;
          default:
            break;
        }
        id v32 = v31;
        v72[0] = v13;
        unint64_t v34 = v13[2];
        unint64_t v33 = v13[3];
        if (v34 >= v33 >> 1)
        {
          sub_1000B7C24(v33 > 1, v34 + 1, 1);
          char v13 = (void *)v72[0];
        }
        void v13[2] = v34 + 1;
        v13[v34 + 4] = v32;
        uint64_t v14 = sub_10052CB9C(v14, v16, v19 & 1, v26);
        uint64_t v16 = v35;
        char v19 = v36 & 1;
        if (!--v27) {
          goto LABEL_98;
        }
      }
      goto LABEL_104;
    }
    goto LABEL_99;
  }
  uint64_t v37 = sub_10069A174((uint64_t)v10, *(void *)(a2 + 280));
  int64_t v38 = v37[2];
  if (!v38)
  {
LABEL_99:
    swift_bridgeObjectRelease();
    char v13 = _swiftEmptyArrayStorage;
    goto LABEL_100;
  }
  v72[0] = _swiftEmptyArrayStorage;
  sub_1000B7C24(0, v38, 0);
  char v13 = (void *)v72[0];
  uint64_t v14 = sub_10115FE18(v37);
  uint64_t v16 = v39;
  unint64_t v40 = (void *)SPBeaconTaskNameEnableDelegatedShares;
  char v19 = v41 & 1;
  uint64_t v71 = (char *)(v37 + 7);
  uint64_t v68 = (void *)SPBeaconTaskNameAccessoryFirmwareUpdate;
  NSString v69 = (void *)SPBeaconTaskNameUnpair;
  char v66 = (void *)SPBeaconTaskNameStartSharing;
  id v67 = (void *)SPBeaconTaskNameStopSharing;
  uint64_t v64 = (void *)SPBeaconTaskNameDisconnect;
  uint64_t v65 = (void *)SPBeaconTaskNameRename;
  unint64_t v62 = (void *)SPBeaconTaskNameDisableLostMode;
  uint64_t v63 = (void *)SPBeaconTaskNameConnect;
  unint64_t v61 = (void *)SPBeaconTaskNameEnableLostMode;
  uint64_t v60 = (void *)SPBeaconTaskNameEndRanging;
  uint64_t v59 = (void *)SPBeaconTaskNameBeginRanging;
  uint64_t v58 = (void *)SPBeaconTaskNameEndBTFinding;
  uint64_t v57 = (void *)SPBeaconTaskNameBeginBTFinding;
  uint64_t v56 = (void *)SPBeaconTaskNameEndLeashing;
  uint64_t v55 = (void *)SPBeaconTaskNameBeginLeashing;
  char v54 = (void *)SPBeaconTaskNameStopSound;
  uint64_t v53 = (void *)SPBeaconTaskNamePlaySound;
  BOOL v52 = (void *)SPBeaconTaskNameLocating;
  uint64_t v51 = (void *)SPBeaconTaskNameDisableNotifyWhenFound;
  uint64_t v50 = (void *)SPBeaconTaskNameEnableNotifyWhenFound;
  unsigned __int8 v70 = (void *)SPBeaconTaskNameUnknown;
  do
  {
    if (v14 < 0 || v14 >= 1 << *((unsigned char *)v37 + 32)) {
      goto LABEL_107;
    }
    if (((*(void *)&v71[((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v14) & 1) == 0) {
      goto LABEL_108;
    }
    if (*((_DWORD *)v37 + 9) != v16) {
      goto LABEL_109;
    }
    uint64_t v42 = v70;
    switch(*(unsigned char *)(v37[6] + v14))
    {
      case 1:
        uint64_t v42 = v50;
        break;
      case 2:
        uint64_t v42 = v51;
        break;
      case 3:
        uint64_t v42 = v52;
        break;
      case 4:
        uint64_t v42 = v66;
        break;
      case 5:
        uint64_t v42 = v67;
        break;
      case 6:
        uint64_t v42 = v53;
        break;
      case 7:
        uint64_t v42 = v54;
        break;
      case 8:
        uint64_t v42 = v55;
        break;
      case 9:
        uint64_t v42 = v56;
        break;
      case 0xA:
        uint64_t v42 = v57;
        break;
      case 0xB:
        uint64_t v42 = v58;
        break;
      case 0xC:
        uint64_t v42 = v59;
        break;
      case 0xD:
        uint64_t v42 = v60;
        break;
      case 0xE:
        uint64_t v42 = v61;
        break;
      case 0xF:
        uint64_t v42 = v62;
        break;
      case 0x10:
        uint64_t v42 = v65;
        break;
      case 0x11:
        uint64_t v42 = v63;
        break;
      case 0x12:
        uint64_t v42 = v64;
        break;
      case 0x13:
        uint64_t v42 = v68;
        break;
      case 0x14:
        uint64_t v42 = v69;
        break;
      case 0x15:
        uint64_t v42 = v40;
        break;
      default:
        break;
    }
    id v43 = v42;
    v72[0] = v13;
    unint64_t v45 = v13[2];
    unint64_t v44 = v13[3];
    if (v45 >= v44 >> 1)
    {
      sub_1000B7C24(v44 > 1, v45 + 1, 1);
      char v13 = (void *)v72[0];
    }
    void v13[2] = v45 + 1;
    v13[v45 + 4] = v43;
    uint64_t v14 = sub_10052CB9C(v14, v16, v19 & 1, v37);
    uint64_t v16 = v46;
    char v19 = v47 & 1;
    --v38;
  }
  while (v38);
LABEL_98:
  sub_1001A1CB8(v14, v16, v19);
  swift_bridgeObjectRelease();
LABEL_100:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v73);
  return v13;
}

void *sub_1006A7B4C(uint64_t a1, char **a2)
{
  uint64_t v161 = a2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v3 - 8);
  char v150 = (char *)&v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = sub_10000588C(&qword_101645750);
  uint64_t v152 = *(void **)(v155 - 8);
  uint64_t v5 = __chkstk_darwin(v155);
  uint64_t v148 = (char *)&v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v149 = (char *)&v139 - v7;
  uint64_t v151 = (void *)type metadata accessor for URL();
  uint64_t v154 = (void *)*(v151 - 1);
  uint64_t v8 = __chkstk_darwin(v151);
  uint64_t v144 = (char *)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v145 = (char *)&v139 - v11;
  __chkstk_darwin(v10);
  uint64_t v153 = (char *)&v139 - v12;
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v146 = (char *)&v139 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v147 = (char *)&v139 - v16;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v157 = *(void (***)(uint64_t, void))(v17 - 8);
  uint64_t v158 = (void *)v17;
  __chkstk_darwin(v17);
  uint64_t v156 = (char *)&v139 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v19);
  id v21 = (char *)&v139 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)&v139 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for BeaconProductInfoRecord();
  char v160 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v159 = (char *)&v139 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for LocalFindableAccessoryRecord();
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v139 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v30);
  id v32 = (char *)&v139 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166[3] = v19;
  v166[4] = sub_100691B60(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  unint64_t v33 = sub_10001D958(v166);
  sub_1006CC8F8(a1, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_10001D010((uint64_t)v166, (uint64_t)v163);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  if (swift_dynamicCast())
  {
    sub_1006CCE04((uint64_t)v32, type metadata accessor for SharedBeaconRecord);
    unint64_t v34 = sub_100698648((uint64_t)v33, v161[35]);
    int64_t v35 = v34[2];
    if (v35)
    {
      v163[0] = _swiftEmptyArrayStorage;
      sub_1000B7C24(0, v35, 0);
      char v36 = v163[0];
      uint64_t v37 = sub_10115FE18(v34);
      uint64_t v39 = v38;
      char v160 = (unsigned int (**)(char *, uint64_t, uint64_t))SPBeaconTaskNameEnableDelegatedShares;
      char v41 = v40 & 1;
      uint64_t v161 = (char **)(v34 + 7);
      uint64_t v158 = (void *)SPBeaconTaskNameAccessoryFirmwareUpdate;
      uint64_t v159 = (char *)SPBeaconTaskNameUnpair;
      uint64_t v156 = (char *)SPBeaconTaskNameStartSharing;
      uint64_t v157 = (void (**)(uint64_t, void))SPBeaconTaskNameStopSharing;
      uint64_t v154 = (void *)SPBeaconTaskNameDisconnect;
      uint64_t v155 = SPBeaconTaskNameRename;
      uint64_t v153 = (char *)SPBeaconTaskNameConnect;
      uint64_t v152 = (void *)SPBeaconTaskNameDisableLostMode;
      uint64_t v151 = (void *)SPBeaconTaskNameEnableLostMode;
      char v150 = (char *)SPBeaconTaskNameEndRanging;
      uint64_t v149 = (char *)SPBeaconTaskNameBeginRanging;
      uint64_t v148 = (char *)SPBeaconTaskNameEndBTFinding;
      uint64_t v147 = (char *)SPBeaconTaskNameBeginBTFinding;
      uint64_t v146 = (char *)SPBeaconTaskNameEndLeashing;
      uint64_t v145 = (char *)SPBeaconTaskNameBeginLeashing;
      uint64_t v144 = (char *)SPBeaconTaskNameStopSound;
      uint64_t v143 = (char *)SPBeaconTaskNamePlaySound;
      uint64_t v142 = SPBeaconTaskNameLocating;
      uint64_t v141 = (void *)SPBeaconTaskNameDisableNotifyWhenFound;
      uint64_t v140 = (void *)SPBeaconTaskNameEnableNotifyWhenFound;
      uint64_t v42 = (void *)SPBeaconTaskNameUnknown;
      while ((v37 & 0x8000000000000000) == 0 && v37 < 1 << *((unsigned char *)v34 + 32))
      {
        if (((*(unint64_t *)((char *)v161 + (((unint64_t)v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v37) & 1) == 0) {
          goto LABEL_135;
        }
        if (*((_DWORD *)v34 + 9) != v39) {
          goto LABEL_136;
        }
        id v43 = v42;
        switch(*(unsigned char *)(v34[6] + v37))
        {
          case 1:
            id v43 = v140;
            break;
          case 2:
            id v43 = v141;
            break;
          case 3:
            id v43 = (void *)v142;
            break;
          case 4:
            id v43 = v156;
            break;
          case 5:
            id v43 = v157;
            break;
          case 6:
            id v43 = v143;
            break;
          case 7:
            id v43 = v144;
            break;
          case 8:
            id v43 = v145;
            break;
          case 9:
            id v43 = v146;
            break;
          case 0xA:
            id v43 = v147;
            break;
          case 0xB:
            id v43 = v148;
            break;
          case 0xC:
            id v43 = v149;
            break;
          case 0xD:
            id v43 = v150;
            break;
          case 0xE:
            id v43 = v151;
            break;
          case 0xF:
            id v43 = v152;
            break;
          case 0x10:
            id v43 = (void *)v155;
            break;
          case 0x11:
            id v43 = v153;
            break;
          case 0x12:
            id v43 = v154;
            break;
          case 0x13:
            id v43 = v158;
            break;
          case 0x14:
            id v43 = v159;
            break;
          case 0x15:
            id v43 = v160;
            break;
          default:
            break;
        }
        id v44 = v43;
        v163[0] = v36;
        unint64_t v46 = v36[2];
        unint64_t v45 = v36[3];
        if (v46 >= v45 >> 1)
        {
          sub_1000B7C24(v45 > 1, v46 + 1, 1);
          char v36 = v163[0];
        }
        _OWORD v36[2] = v46 + 1;
        v36[v46 + 4] = v44;
        uint64_t v37 = sub_10052CB9C(v37, v39, v41 & 1, v34);
        uint64_t v39 = v47;
        char v41 = v48 & 1;
        if (!--v35) {
          goto LABEL_101;
        }
      }
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
      goto LABEL_143;
    }
    goto LABEL_102;
  }
  uint64_t v49 = v161;
  sub_10001D010((uint64_t)v166, (uint64_t)v163);
  if (swift_dynamicCast())
  {
    sub_1006CCE04((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v50 = sub_100698648((uint64_t)v33, v49[35]);
    int64_t v51 = v50[2];
    if (v51)
    {
      v163[0] = _swiftEmptyArrayStorage;
      sub_1000B7C24(0, v51, 0);
      char v36 = v163[0];
      uint64_t v37 = sub_10115FE18(v50);
      uint64_t v39 = v52;
      char v160 = (unsigned int (**)(char *, uint64_t, uint64_t))SPBeaconTaskNameEnableDelegatedShares;
      char v41 = v53 & 1;
      uint64_t v161 = (char **)(v50 + 7);
      uint64_t v158 = (void *)SPBeaconTaskNameAccessoryFirmwareUpdate;
      uint64_t v159 = (char *)SPBeaconTaskNameUnpair;
      uint64_t v156 = (char *)SPBeaconTaskNameStartSharing;
      uint64_t v157 = (void (**)(uint64_t, void))SPBeaconTaskNameStopSharing;
      uint64_t v154 = (void *)SPBeaconTaskNameDisconnect;
      uint64_t v155 = SPBeaconTaskNameRename;
      uint64_t v153 = (char *)SPBeaconTaskNameConnect;
      uint64_t v152 = (void *)SPBeaconTaskNameDisableLostMode;
      uint64_t v151 = (void *)SPBeaconTaskNameEnableLostMode;
      char v150 = (char *)SPBeaconTaskNameEndRanging;
      uint64_t v149 = (char *)SPBeaconTaskNameBeginRanging;
      uint64_t v148 = (char *)SPBeaconTaskNameEndBTFinding;
      uint64_t v147 = (char *)SPBeaconTaskNameBeginBTFinding;
      uint64_t v146 = (char *)SPBeaconTaskNameEndLeashing;
      uint64_t v145 = (char *)SPBeaconTaskNameBeginLeashing;
      uint64_t v144 = (char *)SPBeaconTaskNameStopSound;
      uint64_t v143 = (char *)SPBeaconTaskNamePlaySound;
      uint64_t v142 = SPBeaconTaskNameLocating;
      uint64_t v141 = (void *)SPBeaconTaskNameDisableNotifyWhenFound;
      uint64_t v140 = (void *)SPBeaconTaskNameEnableNotifyWhenFound;
      char v54 = (void *)SPBeaconTaskNameUnknown;
      while ((v37 & 0x8000000000000000) == 0 && v37 < 1 << *((unsigned char *)v50 + 32))
      {
        if (((*(unint64_t *)((char *)v161 + (((unint64_t)v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v37) & 1) == 0) {
          goto LABEL_138;
        }
        if (*((_DWORD *)v50 + 9) != v39) {
          goto LABEL_139;
        }
        uint64_t v55 = v54;
        switch(*(unsigned char *)(v50[6] + v37))
        {
          case 1:
            uint64_t v55 = v140;
            break;
          case 2:
            uint64_t v55 = v141;
            break;
          case 3:
            uint64_t v55 = (void *)v142;
            break;
          case 4:
            uint64_t v55 = v156;
            break;
          case 5:
            uint64_t v55 = v157;
            break;
          case 6:
            uint64_t v55 = v143;
            break;
          case 7:
            uint64_t v55 = v144;
            break;
          case 8:
            uint64_t v55 = v145;
            break;
          case 9:
            uint64_t v55 = v146;
            break;
          case 0xA:
            uint64_t v55 = v147;
            break;
          case 0xB:
            uint64_t v55 = v148;
            break;
          case 0xC:
            uint64_t v55 = v149;
            break;
          case 0xD:
            uint64_t v55 = v150;
            break;
          case 0xE:
            uint64_t v55 = v151;
            break;
          case 0xF:
            uint64_t v55 = v152;
            break;
          case 0x10:
            uint64_t v55 = (void *)v155;
            break;
          case 0x11:
            uint64_t v55 = v153;
            break;
          case 0x12:
            uint64_t v55 = v154;
            break;
          case 0x13:
            uint64_t v55 = v158;
            break;
          case 0x14:
            uint64_t v55 = v159;
            break;
          case 0x15:
            uint64_t v55 = v160;
            break;
          default:
            break;
        }
        id v56 = v55;
        v163[0] = v36;
        unint64_t v58 = v36[2];
        unint64_t v57 = v36[3];
        if (v58 >= v57 >> 1)
        {
          sub_1000B7C24(v57 > 1, v58 + 1, 1);
          char v36 = v163[0];
        }
        _OWORD v36[2] = v58 + 1;
        v36[v58 + 4] = v56;
        uint64_t v37 = sub_10052CB9C(v37, v39, v41 & 1, v50);
        uint64_t v39 = v59;
        char v41 = v60 & 1;
        if (!--v51) {
          goto LABEL_101;
        }
      }
      goto LABEL_137;
    }
    goto LABEL_102;
  }
  char v61 = sub_100D1CA38();
  unint64_t v62 = v49[35];
  if ((v61 & 1) == 0)
  {
    uint64_t v64 = sub_100698648((uint64_t)v33, v49[35]);
    int64_t v65 = v64[2];
    if (v65)
    {
      v163[0] = _swiftEmptyArrayStorage;
      sub_1000B7C24(0, v65, 0);
      char v36 = v163[0];
      uint64_t v37 = sub_10115FE18(v64);
      uint64_t v39 = v66;
      char v160 = (unsigned int (**)(char *, uint64_t, uint64_t))SPBeaconTaskNameEnableDelegatedShares;
      char v41 = v67 & 1;
      uint64_t v161 = (char **)(v64 + 7);
      uint64_t v158 = (void *)SPBeaconTaskNameAccessoryFirmwareUpdate;
      uint64_t v159 = (char *)SPBeaconTaskNameUnpair;
      uint64_t v156 = (char *)SPBeaconTaskNameStartSharing;
      uint64_t v157 = (void (**)(uint64_t, void))SPBeaconTaskNameStopSharing;
      uint64_t v154 = (void *)SPBeaconTaskNameDisconnect;
      uint64_t v155 = SPBeaconTaskNameRename;
      uint64_t v153 = (char *)SPBeaconTaskNameConnect;
      uint64_t v152 = (void *)SPBeaconTaskNameDisableLostMode;
      uint64_t v151 = (void *)SPBeaconTaskNameEnableLostMode;
      char v150 = (char *)SPBeaconTaskNameEndRanging;
      uint64_t v149 = (char *)SPBeaconTaskNameBeginRanging;
      uint64_t v148 = (char *)SPBeaconTaskNameEndBTFinding;
      uint64_t v147 = (char *)SPBeaconTaskNameBeginBTFinding;
      uint64_t v146 = (char *)SPBeaconTaskNameEndLeashing;
      uint64_t v145 = (char *)SPBeaconTaskNameBeginLeashing;
      uint64_t v144 = (char *)SPBeaconTaskNameStopSound;
      uint64_t v143 = (char *)SPBeaconTaskNamePlaySound;
      uint64_t v142 = SPBeaconTaskNameLocating;
      uint64_t v141 = (void *)SPBeaconTaskNameDisableNotifyWhenFound;
      uint64_t v140 = (void *)SPBeaconTaskNameEnableNotifyWhenFound;
      uint64_t v68 = (void *)SPBeaconTaskNameUnknown;
      while ((v37 & 0x8000000000000000) == 0 && v37 < 1 << *((unsigned char *)v64 + 32))
      {
        if (((*(unint64_t *)((char *)v161 + (((unint64_t)v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v37) & 1) == 0) {
          goto LABEL_141;
        }
        if (*((_DWORD *)v64 + 9) != v39) {
          goto LABEL_142;
        }
        NSString v69 = v68;
        switch(*(unsigned char *)(v64[6] + v37))
        {
          case 1:
            NSString v69 = v140;
            break;
          case 2:
            NSString v69 = v141;
            break;
          case 3:
            NSString v69 = (void *)v142;
            break;
          case 4:
            NSString v69 = v156;
            break;
          case 5:
            NSString v69 = v157;
            break;
          case 6:
            NSString v69 = v143;
            break;
          case 7:
            NSString v69 = v144;
            break;
          case 8:
            NSString v69 = v145;
            break;
          case 9:
            NSString v69 = v146;
            break;
          case 0xA:
            NSString v69 = v147;
            break;
          case 0xB:
            NSString v69 = v148;
            break;
          case 0xC:
            NSString v69 = v149;
            break;
          case 0xD:
            NSString v69 = v150;
            break;
          case 0xE:
            NSString v69 = v151;
            break;
          case 0xF:
            NSString v69 = v152;
            break;
          case 0x10:
            NSString v69 = (void *)v155;
            break;
          case 0x11:
            NSString v69 = v153;
            break;
          case 0x12:
            NSString v69 = v154;
            break;
          case 0x13:
            NSString v69 = v158;
            break;
          case 0x14:
            NSString v69 = v159;
            break;
          case 0x15:
            NSString v69 = v160;
            break;
          default:
            break;
        }
        id v70 = v69;
        v163[0] = v36;
        unint64_t v72 = v36[2];
        unint64_t v71 = v36[3];
        if (v72 >= v71 >> 1)
        {
          sub_1000B7C24(v71 > 1, v72 + 1, 1);
          char v36 = v163[0];
        }
        _OWORD v36[2] = v72 + 1;
        v36[v72 + 4] = v70;
        uint64_t v37 = sub_10052CB9C(v37, v39, v41 & 1, v64);
        uint64_t v39 = v73;
        char v41 = v74 & 1;
        if (!--v65)
        {
LABEL_101:
          sub_1001A1CB8(v37, v39, v41);
          swift_bridgeObjectRelease();
          goto LABEL_104;
        }
      }
      goto LABEL_140;
    }
LABEL_102:
    swift_bridgeObjectRelease();
    goto LABEL_103;
  }
  uint64_t v63 = (uint64_t)v33 + *(int *)(v19 + 20);
  sub_100AE311C(v63, (uint64_t)v24);
  if (v160[6](v24, 1, v25) != 1)
  {
    uint64_t v76 = (uint64_t)v159;
    sub_1006CD470((uint64_t)v24, (uint64_t)v159, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    uint64_t v77 = sub_10110DB88(*(_DWORD *)(v76 + *(int *)(v25 + 68)));
    uint64_t v78 = sub_10115935C((uint64_t)v77);
    swift_bridgeObjectRelease();
    uint64_t v162 = v78;
    sub_10001D010((uint64_t)v166, (uint64_t)v163);
    swift_bridgeObjectRetain();
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_132;
    }
    uint64_t v142 = v63;
    uint64_t v143 = v62;
    sub_1006CCE04((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    id v79 = SPBeaconTaskNameBeginLeashing;
    char v80 = sub_100DC7E2C();

    swift_bridgeObjectRelease();
    if ((v80 & 1) == 0)
    {
      sub_100DD1320(v163, v79);
    }
    id v81 = (void *)SPBeaconTaskNameEndLeashing;
    swift_bridgeObjectRetain();
    id v82 = v81;
    char v83 = sub_100DC7E2C();

    swift_bridgeObjectRelease();
    NSDate v85 = v157;
    uint64_t v84 = v158;
    uint64_t v86 = v156;
    if ((v83 & 1) == 0)
    {
      sub_100DD1320(v163, v82);
    }
    uint64_t v87 = (void *)SPBeaconTaskNameUnpair;
    swift_bridgeObjectRetain();
    id v88 = v87;
    char v89 = sub_100DC7E2C();

    swift_bridgeObjectRelease();
    if ((v89 & 1) == 0)
    {
      sub_100DD1320(v163, v88);
    }
    uint64_t My = type metadata accessor for Feature.FindMy();
    uint64_t v164 = My;
    uint64_t v91 = sub_100691B60((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    uint64_t v165 = v91;
    uint64_t v92 = sub_10001D958((uint64_t *)v163);
    uint64_t v93 = *(void *)(My - 8);
    uint64_t v94 = *(char ***)(v93 + 104);
    char v160 = (unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 104);
    uint64_t v161 = v94;
    ((void (*)(uint64_t *, void, uint64_t))v94)(v92, enum case for Feature.FindMy.itemSharing(_:), My);
    char v95 = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v163);
    char v96 = (void *)SPBeaconTaskNameStartSharing;
    swift_bridgeObjectRetain();
    id v97 = v96;
    char v98 = sub_100DC7E2C();

    swift_bridgeObjectRelease();
    if ((v95 & 1) == 0)
    {
      if (v98)
      {
        id v124 = v97;
        uint64_t v125 = (void *)sub_1011281A8((uint64_t)v124);
      }
      uint64_t v126 = (void *)SPBeaconTaskNameStopSharing;
      swift_bridgeObjectRetain();
      id v127 = v126;
      char v128 = sub_100DC7E2C();

      swift_bridgeObjectRelease();
      if (v128)
      {
        id v129 = v127;
        uint64_t v130 = (void *)sub_1011281A8((uint64_t)v129);
      }
      goto LABEL_133;
    }
    if ((v98 & 1) == 0)
    {
      sub_100DD1320(v163, v97);
    }
    uint64_t v140 = (void *)v91;
    uint64_t v141 = (void *)My;
    ((void (*)(char *, uint64_t, void *))v85[2])(v86, v142, v84);
    uint64_t v142 = sub_101158C68((uint64_t)&off_10159F7C0);
    uint64_t v143 = (char *)*((void *)v143 + 20);
    if (qword_1016370F0 == -1)
    {
LABEL_116:
      uint64_t v99 = (uint64_t)v151;
      uint64_t v100 = sub_100010324((uint64_t)v151, (uint64_t)qword_10170ED28);
      unint64_t v101 = v153;
      unint64_t v102 = (void (*)(char *, uint64_t, uint64_t))v154[2];
      v102(v153, v100, v99);
      int v103 = v145;
      v102(v145, (uint64_t)v101, v99);
      uint64_t v104 = v155;
      uint64_t v105 = (uint64_t)v148;
      uint64_t v139 = &v148[*(int *)(v155 + 40)];
      uint64_t v106 = (uint64_t)v139;
      uint64_t v107 = type metadata accessor for DirectorySequence();
      uint64_t v108 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56);
      v108(v106, 1, 1, v107);
      v102((char *)v105, (uint64_t)v103, v99);
      *(void *)(v105 + *(int *)(v104 + 36)) = v143;
      v102(v144, (uint64_t)v103, v99);
      swift_retain();
      uint64_t v109 = (uint64_t)v150;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)();
      uint64_t v110 = (void (*)(char *, uint64_t))v154[1];
      v110(v103, v99);
      v108(v109, 0, 1, v107);
      sub_100062604(v109, (uint64_t)v139, (uint64_t *)&unk_101653C90);
      uint64_t v111 = (uint64_t)v149;
      sub_10001D608(v105, (uint64_t)v149, &qword_101645750);
      uint64_t v112 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v152[7];
      uint64_t v113 = (uint64_t)v146;
      uint64_t v114 = v155;
      v112(v146, 1, 1, v155);
      sub_10001DAB4(v113, &qword_101645758);
      sub_10001D608(v111, v113, &qword_101645750);
      v112((char *)v113, 0, 1, v114);
      sub_10001D608(v113, (uint64_t)v147, (uint64_t *)&unk_101653CA0);
      uint64_t v115 = ((uint64_t (*)(char *, uint64_t))v110)(v153, v99);
      __chkstk_darwin(v115);
      uint64_t v116 = (uint64_t)v156;
      *(&v139 - 2) = (char *)v142;
      *(&v139 - 1) = (char *)v116;
      sub_100658408(sub_1006CD688, (uint64_t)(&v139 - 4));
      uint64_t v118 = v117;
      swift_bridgeObjectRelease();
      ((void (**)(uint64_t, void *))v157)[1](v116, v158);
      uint64_t v119 = *(void *)(v118 + 16);
      swift_bridgeObjectRelease();
      uint64_t v120 = (void *)SPBeaconTaskNameStopSharing;
      swift_bridgeObjectRetain();
      id v121 = v120;
      LOBYTE(v116) = sub_100DC7E2C();

      swift_bridgeObjectRelease();
      if ((v116 & 1) != 0 || !v119)
      {
        swift_bridgeObjectRetain();
        id v131 = v121;
        char v132 = sub_100DC7E2C();

        swift_bridgeObjectRelease();
        uint64_t v122 = (uint64_t)v141;
        uint64_t v123 = (uint64_t)v140;
        if ((v132 & 1) != 0 && !v119)
        {
          id v133 = v131;
          char v134 = (void *)sub_1011281A8((uint64_t)v133);
        }
      }
      else
      {
        sub_100DD1320(v163, v121);

        uint64_t v122 = (uint64_t)v141;
        uint64_t v123 = (uint64_t)v140;
      }
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      id v135 = v163[0];
      uint64_t v164 = v122;
      uint64_t v165 = v123;
      uint64_t v136 = sub_10001D958((uint64_t *)v163);
      ((void (*)(uint64_t *, void, uint64_t))v161)(v136, enum case for Feature.FindMy.cowardlyCarrot(_:), v122);
      char v137 = isFeatureEnabled(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v163);
      uint64_t v76 = (uint64_t)v159;
      if (v137)
      {
        char v138 = sub_1010AAF90((uint64_t)v135);
        swift_bridgeObjectRelease();
        if ((v138 & 1) == 0)
        {
          sub_100DD1320(v163, SPBeaconTaskNameEnableDelegatedShares);
        }
        goto LABEL_133;
      }
LABEL_132:
      swift_bridgeObjectRelease();
LABEL_133:
      char v36 = sub_1007107BC(v162);
      swift_bridgeObjectRelease();
      sub_1006CCE04(v76, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      goto LABEL_104;
    }
LABEL_143:
    swift_once();
    goto LABEL_116;
  }
  sub_10001DAB4((uint64_t)v24, &qword_10163BBB0);
LABEL_103:
  char v36 = _swiftEmptyArrayStorage;
LABEL_104:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v166);
  return v36;
}

void *sub_1006A95F0(uint64_t a1, char **a2)
{
  uint64_t v161 = a2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v3 - 8);
  char v150 = (char *)&v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = sub_10000588C(&qword_101645750);
  uint64_t v152 = *(void **)(v155 - 8);
  uint64_t v5 = __chkstk_darwin(v155);
  uint64_t v148 = (char *)&v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v149 = (char *)&v139 - v7;
  uint64_t v151 = (void *)type metadata accessor for URL();
  uint64_t v154 = (void *)*(v151 - 1);
  uint64_t v8 = __chkstk_darwin(v151);
  uint64_t v144 = (char *)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v145 = (char *)&v139 - v11;
  __chkstk_darwin(v10);
  uint64_t v153 = (char *)&v139 - v12;
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v146 = (char *)&v139 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v147 = (char *)&v139 - v16;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v157 = *(void (***)(uint64_t, void))(v17 - 8);
  uint64_t v158 = (void *)v17;
  __chkstk_darwin(v17);
  uint64_t v156 = (char *)&v139 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v159);
  uint64_t v20 = (char *)&v139 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v139 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  char v160 = (char *)&v139 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for LocalFindableAccessoryRecord();
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v139 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v31 = __chkstk_darwin(v30);
  unint64_t v33 = (char *)&v139 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166[3] = v31;
  v166[4] = sub_100691B60(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  unint64_t v34 = sub_10001D958(v166);
  sub_1006CC8F8(a1, (uint64_t)v34, type metadata accessor for SharedBeaconRecord);
  sub_10001D010((uint64_t)v166, (uint64_t)v163);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  if (swift_dynamicCast())
  {
    sub_1006CCE04((uint64_t)v33, type metadata accessor for SharedBeaconRecord);
    int64_t v35 = sub_10069BCA0((uint64_t)v34, v161[35]);
    int64_t v36 = v35[2];
    if (v36)
    {
      v163[0] = _swiftEmptyArrayStorage;
      sub_1000B7C24(0, v36, 0);
      uint64_t v37 = v163[0];
      uint64_t v38 = sub_10115FE18(v35);
      uint64_t v40 = v39;
      char v160 = (char *)SPBeaconTaskNameEnableDelegatedShares;
      char v42 = v41 & 1;
      uint64_t v161 = (char **)(v35 + 7);
      uint64_t v158 = (void *)SPBeaconTaskNameAccessoryFirmwareUpdate;
      uint64_t v159 = SPBeaconTaskNameUnpair;
      uint64_t v156 = (char *)SPBeaconTaskNameStartSharing;
      uint64_t v157 = (void (**)(uint64_t, void))SPBeaconTaskNameStopSharing;
      uint64_t v154 = (void *)SPBeaconTaskNameDisconnect;
      uint64_t v155 = SPBeaconTaskNameRename;
      uint64_t v153 = (char *)SPBeaconTaskNameConnect;
      uint64_t v152 = (void *)SPBeaconTaskNameDisableLostMode;
      uint64_t v151 = (void *)SPBeaconTaskNameEnableLostMode;
      char v150 = (char *)SPBeaconTaskNameEndRanging;
      uint64_t v149 = (char *)SPBeaconTaskNameBeginRanging;
      uint64_t v148 = (char *)SPBeaconTaskNameEndBTFinding;
      uint64_t v147 = (char *)SPBeaconTaskNameBeginBTFinding;
      uint64_t v146 = (char *)SPBeaconTaskNameEndLeashing;
      uint64_t v145 = (char *)SPBeaconTaskNameBeginLeashing;
      uint64_t v144 = (char *)SPBeaconTaskNameStopSound;
      uint64_t v143 = (char *)SPBeaconTaskNamePlaySound;
      uint64_t v142 = SPBeaconTaskNameLocating;
      uint64_t v141 = (void *)SPBeaconTaskNameDisableNotifyWhenFound;
      uint64_t v140 = (void *)SPBeaconTaskNameEnableNotifyWhenFound;
      id v43 = (void *)SPBeaconTaskNameUnknown;
      while ((v38 & 0x8000000000000000) == 0 && v38 < 1 << *((unsigned char *)v35 + 32))
      {
        if (((*(unint64_t *)((char *)v161 + (((unint64_t)v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v38) & 1) == 0) {
          goto LABEL_135;
        }
        if (*((_DWORD *)v35 + 9) != v40) {
          goto LABEL_136;
        }
        id v44 = v43;
        switch(*(unsigned char *)(v35[6] + v38))
        {
          case 1:
            id v44 = v140;
            break;
          case 2:
            id v44 = v141;
            break;
          case 3:
            id v44 = (void *)v142;
            break;
          case 4:
            id v44 = v156;
            break;
          case 5:
            id v44 = v157;
            break;
          case 6:
            id v44 = v143;
            break;
          case 7:
            id v44 = v144;
            break;
          case 8:
            id v44 = v145;
            break;
          case 9:
            id v44 = v146;
            break;
          case 0xA:
            id v44 = v147;
            break;
          case 0xB:
            id v44 = v148;
            break;
          case 0xC:
            id v44 = v149;
            break;
          case 0xD:
            id v44 = v150;
            break;
          case 0xE:
            id v44 = v151;
            break;
          case 0xF:
            id v44 = v152;
            break;
          case 0x10:
            id v44 = (void *)v155;
            break;
          case 0x11:
            id v44 = v153;
            break;
          case 0x12:
            id v44 = v154;
            break;
          case 0x13:
            id v44 = v158;
            break;
          case 0x14:
            id v44 = (void *)v159;
            break;
          case 0x15:
            id v44 = v160;
            break;
          default:
            break;
        }
        id v45 = v44;
        v163[0] = v37;
        unint64_t v47 = v37[2];
        unint64_t v46 = v37[3];
        if (v47 >= v46 >> 1)
        {
          sub_1000B7C24(v46 > 1, v47 + 1, 1);
          uint64_t v37 = v163[0];
        }
        v37[2] = v47 + 1;
        v37[v47 + 4] = v45;
        uint64_t v38 = sub_10052CB9C(v38, v40, v42 & 1, v35);
        uint64_t v40 = v48;
        char v42 = v49 & 1;
        if (!--v36) {
          goto LABEL_101;
        }
      }
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
      goto LABEL_143;
    }
    goto LABEL_102;
  }
  uint64_t v50 = v161;
  sub_10001D010((uint64_t)v166, (uint64_t)v163);
  if (swift_dynamicCast())
  {
    sub_1006CCE04((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    int64_t v51 = sub_10069BCA0((uint64_t)v34, v50[35]);
    int64_t v52 = v51[2];
    if (v52)
    {
      v163[0] = _swiftEmptyArrayStorage;
      sub_1000B7C24(0, v52, 0);
      uint64_t v37 = v163[0];
      uint64_t v38 = sub_10115FE18(v51);
      uint64_t v40 = v53;
      char v160 = (char *)SPBeaconTaskNameEnableDelegatedShares;
      char v42 = v54 & 1;
      uint64_t v161 = (char **)(v51 + 7);
      uint64_t v158 = (void *)SPBeaconTaskNameAccessoryFirmwareUpdate;
      uint64_t v159 = SPBeaconTaskNameUnpair;
      uint64_t v156 = (char *)SPBeaconTaskNameStartSharing;
      uint64_t v157 = (void (**)(uint64_t, void))SPBeaconTaskNameStopSharing;
      uint64_t v154 = (void *)SPBeaconTaskNameDisconnect;
      uint64_t v155 = SPBeaconTaskNameRename;
      uint64_t v153 = (char *)SPBeaconTaskNameConnect;
      uint64_t v152 = (void *)SPBeaconTaskNameDisableLostMode;
      uint64_t v151 = (void *)SPBeaconTaskNameEnableLostMode;
      char v150 = (char *)SPBeaconTaskNameEndRanging;
      uint64_t v149 = (char *)SPBeaconTaskNameBeginRanging;
      uint64_t v148 = (char *)SPBeaconTaskNameEndBTFinding;
      uint64_t v147 = (char *)SPBeaconTaskNameBeginBTFinding;
      uint64_t v146 = (char *)SPBeaconTaskNameEndLeashing;
      uint64_t v145 = (char *)SPBeaconTaskNameBeginLeashing;
      uint64_t v144 = (char *)SPBeaconTaskNameStopSound;
      uint64_t v143 = (char *)SPBeaconTaskNamePlaySound;
      uint64_t v142 = SPBeaconTaskNameLocating;
      uint64_t v141 = (void *)SPBeaconTaskNameDisableNotifyWhenFound;
      uint64_t v140 = (void *)SPBeaconTaskNameEnableNotifyWhenFound;
      uint64_t v55 = (void *)SPBeaconTaskNameUnknown;
      while ((v38 & 0x8000000000000000) == 0 && v38 < 1 << *((unsigned char *)v51 + 32))
      {
        if (((*(unint64_t *)((char *)v161 + (((unint64_t)v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v38) & 1) == 0) {
          goto LABEL_138;
        }
        if (*((_DWORD *)v51 + 9) != v40) {
          goto LABEL_139;
        }
        id v56 = v55;
        switch(*(unsigned char *)(v51[6] + v38))
        {
          case 1:
            id v56 = v140;
            break;
          case 2:
            id v56 = v141;
            break;
          case 3:
            id v56 = (void *)v142;
            break;
          case 4:
            id v56 = v156;
            break;
          case 5:
            id v56 = v157;
            break;
          case 6:
            id v56 = v143;
            break;
          case 7:
            id v56 = v144;
            break;
          case 8:
            id v56 = v145;
            break;
          case 9:
            id v56 = v146;
            break;
          case 0xA:
            id v56 = v147;
            break;
          case 0xB:
            id v56 = v148;
            break;
          case 0xC:
            id v56 = v149;
            break;
          case 0xD:
            id v56 = v150;
            break;
          case 0xE:
            id v56 = v151;
            break;
          case 0xF:
            id v56 = v152;
            break;
          case 0x10:
            id v56 = (void *)v155;
            break;
          case 0x11:
            id v56 = v153;
            break;
          case 0x12:
            id v56 = v154;
            break;
          case 0x13:
            id v56 = v158;
            break;
          case 0x14:
            id v56 = (void *)v159;
            break;
          case 0x15:
            id v56 = v160;
            break;
          default:
            break;
        }
        id v57 = v56;
        v163[0] = v37;
        unint64_t v59 = v37[2];
        unint64_t v58 = v37[3];
        if (v59 >= v58 >> 1)
        {
          sub_1000B7C24(v58 > 1, v59 + 1, 1);
          uint64_t v37 = v163[0];
        }
        v37[2] = v59 + 1;
        v37[v59 + 4] = v57;
        uint64_t v38 = sub_10052CB9C(v38, v40, v42 & 1, v51);
        uint64_t v40 = v60;
        char v42 = v61 & 1;
        if (!--v52) {
          goto LABEL_101;
        }
      }
      goto LABEL_137;
    }
    goto LABEL_102;
  }
  BOOL v62 = sub_10120F7F4();
  uint64_t v63 = v50[35];
  if (!v62)
  {
    int64_t v65 = sub_10069BCA0((uint64_t)v34, v50[35]);
    int64_t v66 = v65[2];
    if (v66)
    {
      v163[0] = _swiftEmptyArrayStorage;
      sub_1000B7C24(0, v66, 0);
      uint64_t v37 = v163[0];
      uint64_t v38 = sub_10115FE18(v65);
      uint64_t v40 = v67;
      char v160 = (char *)SPBeaconTaskNameEnableDelegatedShares;
      char v42 = v68 & 1;
      uint64_t v161 = (char **)(v65 + 7);
      uint64_t v158 = (void *)SPBeaconTaskNameAccessoryFirmwareUpdate;
      uint64_t v159 = SPBeaconTaskNameUnpair;
      uint64_t v156 = (char *)SPBeaconTaskNameStartSharing;
      uint64_t v157 = (void (**)(uint64_t, void))SPBeaconTaskNameStopSharing;
      uint64_t v154 = (void *)SPBeaconTaskNameDisconnect;
      uint64_t v155 = SPBeaconTaskNameRename;
      uint64_t v153 = (char *)SPBeaconTaskNameConnect;
      uint64_t v152 = (void *)SPBeaconTaskNameDisableLostMode;
      uint64_t v151 = (void *)SPBeaconTaskNameEnableLostMode;
      char v150 = (char *)SPBeaconTaskNameEndRanging;
      uint64_t v149 = (char *)SPBeaconTaskNameBeginRanging;
      uint64_t v148 = (char *)SPBeaconTaskNameEndBTFinding;
      uint64_t v147 = (char *)SPBeaconTaskNameBeginBTFinding;
      uint64_t v146 = (char *)SPBeaconTaskNameEndLeashing;
      uint64_t v145 = (char *)SPBeaconTaskNameBeginLeashing;
      uint64_t v144 = (char *)SPBeaconTaskNameStopSound;
      uint64_t v143 = (char *)SPBeaconTaskNamePlaySound;
      uint64_t v142 = SPBeaconTaskNameLocating;
      uint64_t v141 = (void *)SPBeaconTaskNameDisableNotifyWhenFound;
      uint64_t v140 = (void *)SPBeaconTaskNameEnableNotifyWhenFound;
      NSString v69 = (void *)SPBeaconTaskNameUnknown;
      while ((v38 & 0x8000000000000000) == 0 && v38 < 1 << *((unsigned char *)v65 + 32))
      {
        if (((*(unint64_t *)((char *)v161 + (((unint64_t)v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v38) & 1) == 0) {
          goto LABEL_141;
        }
        if (*((_DWORD *)v65 + 9) != v40) {
          goto LABEL_142;
        }
        id v70 = v69;
        switch(*(unsigned char *)(v65[6] + v38))
        {
          case 1:
            id v70 = v140;
            break;
          case 2:
            id v70 = v141;
            break;
          case 3:
            id v70 = (void *)v142;
            break;
          case 4:
            id v70 = v156;
            break;
          case 5:
            id v70 = v157;
            break;
          case 6:
            id v70 = v143;
            break;
          case 7:
            id v70 = v144;
            break;
          case 8:
            id v70 = v145;
            break;
          case 9:
            id v70 = v146;
            break;
          case 0xA:
            id v70 = v147;
            break;
          case 0xB:
            id v70 = v148;
            break;
          case 0xC:
            id v70 = v149;
            break;
          case 0xD:
            id v70 = v150;
            break;
          case 0xE:
            id v70 = v151;
            break;
          case 0xF:
            id v70 = v152;
            break;
          case 0x10:
            id v70 = (void *)v155;
            break;
          case 0x11:
            id v70 = v153;
            break;
          case 0x12:
            id v70 = v154;
            break;
          case 0x13:
            id v70 = v158;
            break;
          case 0x14:
            id v70 = (void *)v159;
            break;
          case 0x15:
            id v70 = v160;
            break;
          default:
            break;
        }
        id v71 = v70;
        v163[0] = v37;
        unint64_t v73 = v37[2];
        unint64_t v72 = v37[3];
        if (v73 >= v72 >> 1)
        {
          sub_1000B7C24(v72 > 1, v73 + 1, 1);
          uint64_t v37 = v163[0];
        }
        v37[2] = v73 + 1;
        v37[v73 + 4] = v71;
        uint64_t v38 = sub_10052CB9C(v38, v40, v42 & 1, v65);
        uint64_t v40 = v74;
        char v42 = v75 & 1;
        if (!--v66)
        {
LABEL_101:
          sub_1001A1CB8(v38, v40, v42);
          swift_bridgeObjectRelease();
          goto LABEL_104;
        }
      }
      goto LABEL_140;
    }
LABEL_102:
    swift_bridgeObjectRelease();
    goto LABEL_103;
  }
  uint64_t v64 = (uint64_t)v34 + *(int *)(v30 + 20);
  sub_100AE311C(v64, (uint64_t)v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) != 1)
  {
    uint64_t v77 = (uint64_t)v160;
    sub_1006CD470((uint64_t)v23, (uint64_t)v160, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    uint64_t v78 = sub_10110DB88(*(_DWORD *)(v77 + *(int *)(v24 + 68)));
    uint64_t v79 = sub_10115935C((uint64_t)v78);
    swift_bridgeObjectRelease();
    uint64_t v162 = v79;
    sub_10001D010((uint64_t)v166, (uint64_t)v163);
    swift_bridgeObjectRetain();
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_132;
    }
    uint64_t v142 = v64;
    uint64_t v143 = v63;
    sub_1006CCE04((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    id v80 = SPBeaconTaskNameBeginLeashing;
    char v81 = sub_100DC7E2C();

    swift_bridgeObjectRelease();
    if ((v81 & 1) == 0)
    {
      sub_100DD1320(v163, v80);
    }
    id v82 = (void *)SPBeaconTaskNameEndLeashing;
    swift_bridgeObjectRetain();
    id v83 = v82;
    char v84 = sub_100DC7E2C();

    swift_bridgeObjectRelease();
    uint64_t v86 = v157;
    NSDate v85 = v158;
    uint64_t v87 = v156;
    if ((v84 & 1) == 0)
    {
      sub_100DD1320(v163, v83);
    }
    id v88 = (void *)SPBeaconTaskNameUnpair;
    swift_bridgeObjectRetain();
    id v89 = v88;
    char v90 = sub_100DC7E2C();

    swift_bridgeObjectRelease();
    if ((v90 & 1) == 0)
    {
      sub_100DD1320(v163, v89);
    }
    uint64_t My = type metadata accessor for Feature.FindMy();
    uint64_t v164 = My;
    uint64_t v92 = sub_100691B60((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    uint64_t v165 = v92;
    uint64_t v93 = sub_10001D958((uint64_t *)v163);
    uint64_t v94 = *(void *)(My - 8);
    uint64_t v161 = *(char ***)(v94 + 104);
    uint64_t v159 = v94 + 104;
    ((void (*)(uint64_t *, void, uint64_t))v161)(v93, enum case for Feature.FindMy.itemSharing(_:), My);
    char v95 = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v163);
    char v96 = (void *)SPBeaconTaskNameStartSharing;
    swift_bridgeObjectRetain();
    id v97 = v96;
    char v98 = sub_100DC7E2C();

    swift_bridgeObjectRelease();
    if ((v95 & 1) == 0)
    {
      if (v98)
      {
        id v124 = v97;
        uint64_t v125 = (void *)sub_1011281A8((uint64_t)v124);
      }
      uint64_t v126 = (void *)SPBeaconTaskNameStopSharing;
      swift_bridgeObjectRetain();
      id v127 = v126;
      char v128 = sub_100DC7E2C();

      swift_bridgeObjectRelease();
      if (v128)
      {
        id v129 = v127;
        uint64_t v130 = (void *)sub_1011281A8((uint64_t)v129);
      }
      goto LABEL_133;
    }
    if ((v98 & 1) == 0)
    {
      sub_100DD1320(v163, v97);
    }
    uint64_t v140 = (void *)v92;
    uint64_t v141 = (void *)My;
    ((void (*)(char *, uint64_t, void *))v86[2])(v87, v142, v85);
    uint64_t v142 = sub_101158C68((uint64_t)&off_10159F748);
    uint64_t v143 = (char *)*((void *)v143 + 20);
    if (qword_1016370F0 == -1)
    {
LABEL_116:
      uint64_t v99 = (uint64_t)v151;
      uint64_t v100 = sub_100010324((uint64_t)v151, (uint64_t)qword_10170ED28);
      unint64_t v101 = v153;
      unint64_t v102 = (void (*)(char *, uint64_t, uint64_t))v154[2];
      v102(v153, v100, v99);
      int v103 = v145;
      v102(v145, (uint64_t)v101, v99);
      uint64_t v104 = v155;
      uint64_t v105 = (uint64_t)v148;
      uint64_t v139 = &v148[*(int *)(v155 + 40)];
      uint64_t v106 = (uint64_t)v139;
      uint64_t v107 = type metadata accessor for DirectorySequence();
      uint64_t v108 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56);
      v108(v106, 1, 1, v107);
      v102((char *)v105, (uint64_t)v103, v99);
      *(void *)(v105 + *(int *)(v104 + 36)) = v143;
      v102(v144, (uint64_t)v103, v99);
      swift_retain();
      uint64_t v109 = (uint64_t)v150;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)();
      uint64_t v110 = (void (*)(char *, uint64_t))v154[1];
      v110(v103, v99);
      v108(v109, 0, 1, v107);
      sub_100062604(v109, (uint64_t)v139, (uint64_t *)&unk_101653C90);
      uint64_t v111 = (uint64_t)v149;
      sub_10001D608(v105, (uint64_t)v149, &qword_101645750);
      uint64_t v112 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v152[7];
      uint64_t v113 = (uint64_t)v146;
      uint64_t v114 = v155;
      v112(v146, 1, 1, v155);
      sub_10001DAB4(v113, &qword_101645758);
      sub_10001D608(v111, v113, &qword_101645750);
      v112((char *)v113, 0, 1, v114);
      sub_10001D608(v113, (uint64_t)v147, (uint64_t *)&unk_101653CA0);
      uint64_t v115 = ((uint64_t (*)(char *, uint64_t))v110)(v153, v99);
      __chkstk_darwin(v115);
      uint64_t v116 = (uint64_t)v156;
      *(&v139 - 2) = (char *)v142;
      *(&v139 - 1) = (char *)v116;
      sub_100658408(sub_10048321C, (uint64_t)(&v139 - 4));
      uint64_t v118 = v117;
      swift_bridgeObjectRelease();
      ((void (**)(uint64_t, void *))v157)[1](v116, v158);
      uint64_t v119 = *(void *)(v118 + 16);
      swift_bridgeObjectRelease();
      uint64_t v120 = (void *)SPBeaconTaskNameStopSharing;
      swift_bridgeObjectRetain();
      id v121 = v120;
      LOBYTE(v116) = sub_100DC7E2C();

      swift_bridgeObjectRelease();
      if ((v116 & 1) != 0 || !v119)
      {
        swift_bridgeObjectRetain();
        id v131 = v121;
        char v132 = sub_100DC7E2C();

        swift_bridgeObjectRelease();
        uint64_t v122 = (uint64_t)v141;
        uint64_t v123 = (uint64_t)v140;
        if ((v132 & 1) != 0 && !v119)
        {
          id v133 = v131;
          char v134 = (void *)sub_1011281A8((uint64_t)v133);
        }
      }
      else
      {
        sub_100DD1320(v163, v121);

        uint64_t v122 = (uint64_t)v141;
        uint64_t v123 = (uint64_t)v140;
      }
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      id v135 = v163[0];
      uint64_t v164 = v122;
      uint64_t v165 = v123;
      uint64_t v136 = sub_10001D958((uint64_t *)v163);
      ((void (*)(uint64_t *, void, uint64_t))v161)(v136, enum case for Feature.FindMy.cowardlyCarrot(_:), v122);
      char v137 = isFeatureEnabled(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v163);
      uint64_t v77 = (uint64_t)v160;
      if (v137)
      {
        char v138 = sub_1010AAF90((uint64_t)v135);
        swift_bridgeObjectRelease();
        if ((v138 & 1) == 0)
        {
          sub_100DD1320(v163, SPBeaconTaskNameEnableDelegatedShares);
        }
        goto LABEL_133;
      }
LABEL_132:
      swift_bridgeObjectRelease();
LABEL_133:
      uint64_t v37 = sub_1007107BC(v162);
      swift_bridgeObjectRelease();
      sub_1006CCE04(v77, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      goto LABEL_104;
    }
LABEL_143:
    swift_once();
    goto LABEL_116;
  }
  sub_10001DAB4((uint64_t)v23, &qword_10163BBB0);
LABEL_103:
  uint64_t v37 = _swiftEmptyArrayStorage;
LABEL_104:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v166);
  return v37;
}

void *sub_1006AB098(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v169 = a2;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v7 - 8);
  uint64_t v156 = (char *)&v145 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = sub_10000588C(&qword_101645750);
  uint64_t v158 = *(void **)(v161 - 8);
  uint64_t v9 = __chkstk_darwin(v161);
  uint64_t v154 = (char *)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v155 = (char *)&v145 - v11;
  uint64_t v157 = (void *)type metadata accessor for URL();
  char v160 = (void *)*(v157 - 1);
  uint64_t v12 = __chkstk_darwin(v157);
  char v150 = (char *)&v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v151 = (char *)&v145 - v15;
  __chkstk_darwin(v14);
  uint64_t v159 = (char *)&v145 - v16;
  uint64_t v17 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v152 = (char *)&v145 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v153 = (char *)&v145 - v20;
  uint64_t v163 = (void (*)(void, void, void))type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v163);
  uint64_t v162 = (char *)&v145 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = type metadata accessor for UUID();
  uint64_t v168 = *(void **)(v166 - 8);
  __chkstk_darwin(v166);
  uint64_t v167 = (char *)&v145 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (char *)&v145 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v164 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v165 = (char *)&v145 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for LocalFindableAccessoryRecord();
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v145 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v31);
  unint64_t v33 = (char *)&v145 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174[3] = a3;
  v174[4] = a4;
  unint64_t v34 = sub_10001D958(v174);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(v34, a1, a3);
  sub_10001D010((uint64_t)v174, (uint64_t)v171);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  if (swift_dynamicCast())
  {
    sub_1006CCE04((uint64_t)v33, type metadata accessor for SharedBeaconRecord);
    int64_t v35 = sub_100A03E9C((uint64_t)v34, *((char **)v169 + 35), a3, a4);
    int64_t v36 = v35[2];
    if (v36)
    {
      v171[0] = _swiftEmptyArrayStorage;
      sub_1000B7C24(0, v36, 0);
      uint64_t v37 = v171[0];
      uint64_t v38 = sub_10115FE18(v35);
      uint64_t v40 = v39;
      uint64_t v168 = (void *)SPBeaconTaskNameEnableDelegatedShares;
      char v42 = v41 & 1;
      uint64_t v169 = (char *)(v35 + 7);
      uint64_t v166 = SPBeaconTaskNameAccessoryFirmwareUpdate;
      uint64_t v167 = (char *)SPBeaconTaskNameUnpair;
      uint64_t v164 = (unsigned int (**)(char *, uint64_t, uint64_t))SPBeaconTaskNameStartSharing;
      uint64_t v165 = (char *)SPBeaconTaskNameStopSharing;
      uint64_t v162 = (char *)SPBeaconTaskNameDisconnect;
      uint64_t v163 = (void (*)(void, void, void))SPBeaconTaskNameRename;
      uint64_t v161 = SPBeaconTaskNameConnect;
      char v160 = (void *)SPBeaconTaskNameDisableLostMode;
      uint64_t v159 = (char *)SPBeaconTaskNameEnableLostMode;
      uint64_t v158 = (void *)SPBeaconTaskNameEndRanging;
      uint64_t v157 = (void *)SPBeaconTaskNameBeginRanging;
      uint64_t v156 = (char *)SPBeaconTaskNameEndBTFinding;
      uint64_t v155 = (char *)SPBeaconTaskNameBeginBTFinding;
      uint64_t v154 = (char *)SPBeaconTaskNameEndLeashing;
      uint64_t v153 = (char *)SPBeaconTaskNameBeginLeashing;
      uint64_t v152 = (char *)SPBeaconTaskNameStopSound;
      uint64_t v151 = (char *)SPBeaconTaskNamePlaySound;
      char v150 = (char *)SPBeaconTaskNameLocating;
      uint64_t v149 = (void *)SPBeaconTaskNameDisableNotifyWhenFound;
      uint64_t v148 = (char *)SPBeaconTaskNameEnableNotifyWhenFound;
      id v43 = (void *)SPBeaconTaskNameUnknown;
      while ((v38 & 0x8000000000000000) == 0 && v38 < 1 << *((unsigned char *)v35 + 32))
      {
        if (((*(void *)&v169[((unint64_t)v38 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v38) & 1) == 0) {
          goto LABEL_135;
        }
        if (*((_DWORD *)v35 + 9) != v40) {
          goto LABEL_136;
        }
        id v44 = v43;
        switch(*(unsigned char *)(v35[6] + v38))
        {
          case 1:
            id v44 = v148;
            break;
          case 2:
            id v44 = v149;
            break;
          case 3:
            id v44 = v150;
            break;
          case 4:
            id v44 = v164;
            break;
          case 5:
            id v44 = v165;
            break;
          case 6:
            id v44 = v151;
            break;
          case 7:
            id v44 = v152;
            break;
          case 8:
            id v44 = v153;
            break;
          case 9:
            id v44 = v154;
            break;
          case 0xA:
            id v44 = v155;
            break;
          case 0xB:
            id v44 = v156;
            break;
          case 0xC:
            id v44 = v157;
            break;
          case 0xD:
            id v44 = v158;
            break;
          case 0xE:
            id v44 = v159;
            break;
          case 0xF:
            id v44 = v160;
            break;
          case 0x10:
            id v44 = v163;
            break;
          case 0x11:
            id v44 = (void *)v161;
            break;
          case 0x12:
            id v44 = v162;
            break;
          case 0x13:
            id v44 = (void *)v166;
            break;
          case 0x14:
            id v44 = v167;
            break;
          case 0x15:
            id v44 = v168;
            break;
          default:
            break;
        }
        id v45 = v44;
        v171[0] = v37;
        unint64_t v47 = v37[2];
        unint64_t v46 = v37[3];
        if (v47 >= v46 >> 1)
        {
          sub_1000B7C24(v46 > 1, v47 + 1, 1);
          uint64_t v37 = v171[0];
        }
        v37[2] = v47 + 1;
        v37[v47 + 4] = v45;
        uint64_t v38 = sub_10052CB9C(v38, v40, v42 & 1, v35);
        uint64_t v40 = v48;
        char v42 = v49 & 1;
        if (!--v36) {
          goto LABEL_101;
        }
      }
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
      goto LABEL_143;
    }
    goto LABEL_102;
  }
  uint64_t v50 = v169;
  uint64_t v51 = a3;
  uint64_t v149 = v34;
  sub_10001D010((uint64_t)v174, (uint64_t)v171);
  if (swift_dynamicCast())
  {
    sub_1006CCE04((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    int64_t v52 = sub_100A03E9C((uint64_t)v149, *((char **)v50 + 35), a3, a4);
    int64_t v53 = v52[2];
    if (v53)
    {
      v171[0] = _swiftEmptyArrayStorage;
      sub_1000B7C24(0, v53, 0);
      uint64_t v37 = v171[0];
      uint64_t v38 = sub_10115FE18(v52);
      uint64_t v40 = v54;
      uint64_t v168 = (void *)SPBeaconTaskNameEnableDelegatedShares;
      char v42 = v55 & 1;
      uint64_t v169 = (char *)(v52 + 7);
      uint64_t v166 = SPBeaconTaskNameAccessoryFirmwareUpdate;
      uint64_t v167 = (char *)SPBeaconTaskNameUnpair;
      uint64_t v164 = (unsigned int (**)(char *, uint64_t, uint64_t))SPBeaconTaskNameStartSharing;
      uint64_t v165 = (char *)SPBeaconTaskNameStopSharing;
      uint64_t v162 = (char *)SPBeaconTaskNameDisconnect;
      uint64_t v163 = (void (*)(void, void, void))SPBeaconTaskNameRename;
      uint64_t v161 = SPBeaconTaskNameConnect;
      char v160 = (void *)SPBeaconTaskNameDisableLostMode;
      uint64_t v159 = (char *)SPBeaconTaskNameEnableLostMode;
      uint64_t v158 = (void *)SPBeaconTaskNameEndRanging;
      uint64_t v157 = (void *)SPBeaconTaskNameBeginRanging;
      uint64_t v156 = (char *)SPBeaconTaskNameEndBTFinding;
      uint64_t v155 = (char *)SPBeaconTaskNameBeginBTFinding;
      uint64_t v154 = (char *)SPBeaconTaskNameEndLeashing;
      uint64_t v153 = (char *)SPBeaconTaskNameBeginLeashing;
      uint64_t v152 = (char *)SPBeaconTaskNameStopSound;
      uint64_t v151 = (char *)SPBeaconTaskNamePlaySound;
      char v150 = (char *)SPBeaconTaskNameLocating;
      uint64_t v149 = (void *)SPBeaconTaskNameDisableNotifyWhenFound;
      uint64_t v148 = (char *)SPBeaconTaskNameEnableNotifyWhenFound;
      id v56 = (void *)SPBeaconTaskNameUnknown;
      while ((v38 & 0x8000000000000000) == 0 && v38 < 1 << *((unsigned char *)v52 + 32))
      {
        if (((*(void *)&v169[((unint64_t)v38 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v38) & 1) == 0) {
          goto LABEL_138;
        }
        if (*((_DWORD *)v52 + 9) != v40) {
          goto LABEL_139;
        }
        id v57 = v56;
        switch(*(unsigned char *)(v52[6] + v38))
        {
          case 1:
            id v57 = v148;
            break;
          case 2:
            id v57 = v149;
            break;
          case 3:
            id v57 = v150;
            break;
          case 4:
            id v57 = v164;
            break;
          case 5:
            id v57 = v165;
            break;
          case 6:
            id v57 = v151;
            break;
          case 7:
            id v57 = v152;
            break;
          case 8:
            id v57 = v153;
            break;
          case 9:
            id v57 = v154;
            break;
          case 0xA:
            id v57 = v155;
            break;
          case 0xB:
            id v57 = v156;
            break;
          case 0xC:
            id v57 = v157;
            break;
          case 0xD:
            id v57 = v158;
            break;
          case 0xE:
            id v57 = v159;
            break;
          case 0xF:
            id v57 = v160;
            break;
          case 0x10:
            id v57 = v163;
            break;
          case 0x11:
            id v57 = (void *)v161;
            break;
          case 0x12:
            id v57 = v162;
            break;
          case 0x13:
            id v57 = (void *)v166;
            break;
          case 0x14:
            id v57 = v167;
            break;
          case 0x15:
            id v57 = v168;
            break;
          default:
            break;
        }
        id v58 = v57;
        v171[0] = v37;
        unint64_t v60 = v37[2];
        unint64_t v59 = v37[3];
        if (v60 >= v59 >> 1)
        {
          sub_1000B7C24(v59 > 1, v60 + 1, 1);
          uint64_t v37 = v171[0];
        }
        v37[2] = v60 + 1;
        v37[v60 + 4] = v58;
        uint64_t v38 = sub_10052CB9C(v38, v40, v42 & 1, v52);
        uint64_t v40 = v61;
        char v42 = v62 & 1;
        if (!--v53) {
          goto LABEL_101;
        }
      }
      goto LABEL_137;
    }
    goto LABEL_102;
  }
  uint64_t v63 = (uint64_t)v149;
  uint64_t v64 = v51;
  char v65 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 104))(v51, a4);
  int64_t v66 = (char *)*((void *)v50 + 35);
  if ((v65 & 1) == 0)
  {
    unint64_t v72 = sub_100A03E9C(v63, v66, v51, a4);
    int64_t v73 = v72[2];
    if (v73)
    {
      v171[0] = _swiftEmptyArrayStorage;
      sub_1000B7C24(0, v73, 0);
      uint64_t v37 = v171[0];
      uint64_t v38 = sub_10115FE18(v72);
      uint64_t v40 = v74;
      uint64_t v168 = (void *)SPBeaconTaskNameEnableDelegatedShares;
      char v42 = v75 & 1;
      uint64_t v169 = (char *)(v72 + 7);
      uint64_t v166 = SPBeaconTaskNameAccessoryFirmwareUpdate;
      uint64_t v167 = (char *)SPBeaconTaskNameUnpair;
      uint64_t v164 = (unsigned int (**)(char *, uint64_t, uint64_t))SPBeaconTaskNameStartSharing;
      uint64_t v165 = (char *)SPBeaconTaskNameStopSharing;
      uint64_t v162 = (char *)SPBeaconTaskNameDisconnect;
      uint64_t v163 = (void (*)(void, void, void))SPBeaconTaskNameRename;
      uint64_t v161 = SPBeaconTaskNameConnect;
      char v160 = (void *)SPBeaconTaskNameDisableLostMode;
      uint64_t v159 = (char *)SPBeaconTaskNameEnableLostMode;
      uint64_t v158 = (void *)SPBeaconTaskNameEndRanging;
      uint64_t v157 = (void *)SPBeaconTaskNameBeginRanging;
      uint64_t v156 = (char *)SPBeaconTaskNameEndBTFinding;
      uint64_t v155 = (char *)SPBeaconTaskNameBeginBTFinding;
      uint64_t v154 = (char *)SPBeaconTaskNameEndLeashing;
      uint64_t v153 = (char *)SPBeaconTaskNameBeginLeashing;
      uint64_t v152 = (char *)SPBeaconTaskNameStopSound;
      uint64_t v151 = (char *)SPBeaconTaskNamePlaySound;
      char v150 = (char *)SPBeaconTaskNameLocating;
      uint64_t v149 = (void *)SPBeaconTaskNameDisableNotifyWhenFound;
      uint64_t v148 = (char *)SPBeaconTaskNameEnableNotifyWhenFound;
      uint64_t v76 = (void *)SPBeaconTaskNameUnknown;
      while ((v38 & 0x8000000000000000) == 0 && v38 < 1 << *((unsigned char *)v72 + 32))
      {
        if (((*(void *)&v169[((unint64_t)v38 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v38) & 1) == 0) {
          goto LABEL_141;
        }
        if (*((_DWORD *)v72 + 9) != v40) {
          goto LABEL_142;
        }
        uint64_t v77 = v76;
        switch(*(unsigned char *)(v72[6] + v38))
        {
          case 1:
            uint64_t v77 = v148;
            break;
          case 2:
            uint64_t v77 = v149;
            break;
          case 3:
            uint64_t v77 = v150;
            break;
          case 4:
            uint64_t v77 = v164;
            break;
          case 5:
            uint64_t v77 = v165;
            break;
          case 6:
            uint64_t v77 = v151;
            break;
          case 7:
            uint64_t v77 = v152;
            break;
          case 8:
            uint64_t v77 = v153;
            break;
          case 9:
            uint64_t v77 = v154;
            break;
          case 0xA:
            uint64_t v77 = v155;
            break;
          case 0xB:
            uint64_t v77 = v156;
            break;
          case 0xC:
            uint64_t v77 = v157;
            break;
          case 0xD:
            uint64_t v77 = v158;
            break;
          case 0xE:
            uint64_t v77 = v159;
            break;
          case 0xF:
            uint64_t v77 = v160;
            break;
          case 0x10:
            uint64_t v77 = v163;
            break;
          case 0x11:
            uint64_t v77 = (void *)v161;
            break;
          case 0x12:
            uint64_t v77 = v162;
            break;
          case 0x13:
            uint64_t v77 = (void *)v166;
            break;
          case 0x14:
            uint64_t v77 = v167;
            break;
          case 0x15:
            uint64_t v77 = v168;
            break;
          default:
            break;
        }
        id v78 = v77;
        v171[0] = v37;
        unint64_t v80 = v37[2];
        unint64_t v79 = v37[3];
        if (v80 >= v79 >> 1)
        {
          sub_1000B7C24(v79 > 1, v80 + 1, 1);
          uint64_t v37 = v171[0];
        }
        v37[2] = v80 + 1;
        v37[v80 + 4] = v78;
        uint64_t v38 = sub_10052CB9C(v38, v40, v42 & 1, v72);
        uint64_t v40 = v81;
        char v42 = v82 & 1;
        if (!--v73)
        {
LABEL_101:
          sub_1001A1CB8(v38, v40, v42);
          swift_bridgeObjectRelease();
          goto LABEL_104;
        }
      }
      goto LABEL_140;
    }
LABEL_102:
    swift_bridgeObjectRelease();
    goto LABEL_103;
  }
  uint64_t v67 = *(void *)(*(void *)(a4 + 8) + 8);
  char v68 = *(void (**)(uint64_t))(v67 + 32);
  uint64_t v69 = (uint64_t)v167;
  uint64_t v148 = (char *)v67;
  v68(v64);
  uint64_t v169 = v66;
  sub_100AE311C(v69, (uint64_t)v25);
  id v71 = v168 + 1;
  id v70 = (unsigned int (**)(char *, uint64_t, uint64_t))v168[1];
  ((void (*)(uint64_t, uint64_t))v70)(v69, v166);
  if (v164[6](v25, 1, v26) != 1)
  {
    uint64_t v84 = (uint64_t)v165;
    sub_1006CD470((uint64_t)v25, (uint64_t)v165, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    NSDate v85 = sub_10110DB88(*(_DWORD *)(v84 + *(int *)(v26 + 68)));
    uint64_t v86 = sub_10115935C((uint64_t)v85);
    swift_bridgeObjectRelease();
    uint64_t v170 = v86;
    sub_10001D010((uint64_t)v174, (uint64_t)v171);
    swift_bridgeObjectRetain();
    uint64_t v87 = (uint64_t)v162;
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_132;
    }
    uint64_t v164 = v70;
    sub_1006CCE04(v87, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    id v88 = SPBeaconTaskNameBeginLeashing;
    char v89 = sub_100DC7E2C();

    swift_bridgeObjectRelease();
    if ((v89 & 1) == 0)
    {
      sub_100DD1320(v171, v88);
    }
    char v90 = (void *)SPBeaconTaskNameEndLeashing;
    swift_bridgeObjectRetain();
    id v91 = v90;
    char v92 = sub_100DC7E2C();

    swift_bridgeObjectRelease();
    if ((v92 & 1) == 0)
    {
      sub_100DD1320(v171, v91);
    }
    uint64_t v93 = (void *)SPBeaconTaskNameUnpair;
    swift_bridgeObjectRetain();
    id v94 = v93;
    char v95 = sub_100DC7E2C();

    swift_bridgeObjectRelease();
    if ((v95 & 1) == 0)
    {
      sub_100DD1320(v171, v94);
    }
    uint64_t My = type metadata accessor for Feature.FindMy();
    uint64_t v172 = My;
    uint64_t v97 = sub_100691B60((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    uint64_t v173 = v97;
    char v98 = sub_10001D958((uint64_t *)v171);
    uint64_t v99 = *(void *)(My - 8);
    uint64_t v100 = *(void (**)(void, void, void))(v99 + 104);
    uint64_t v162 = (char *)(v99 + 104);
    uint64_t v163 = v100;
    v100(v98, enum case for Feature.FindMy.itemSharing(_:), My);
    char v101 = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v171);
    unint64_t v102 = (void *)SPBeaconTaskNameStartSharing;
    swift_bridgeObjectRetain();
    id v103 = v102;
    char v104 = sub_100DC7E2C();

    swift_bridgeObjectRelease();
    if ((v101 & 1) == 0)
    {
      if (v104)
      {
        id v130 = v103;
        id v131 = (void *)sub_1011281A8((uint64_t)v130);
      }
      char v132 = (void *)SPBeaconTaskNameStopSharing;
      swift_bridgeObjectRetain();
      id v133 = v132;
      char v134 = sub_100DC7E2C();

      swift_bridgeObjectRelease();
      if (v134)
      {
        id v135 = v133;
        uint64_t v136 = (void *)sub_1011281A8((uint64_t)v135);
      }
      goto LABEL_133;
    }
    if ((v104 & 1) == 0)
    {
      sub_100DD1320(v171, v103);
    }
    uint64_t v146 = v97;
    uint64_t v147 = My;
    uint64_t v168 = v71;
    ((void (*)(uint64_t, char *))v68)(v64, v148);
    uint64_t v149 = (void *)sub_101158C68((uint64_t)&off_10159FB98);
    uint64_t v169 = (char *)*((void *)v169 + 20);
    if (qword_1016370F0 == -1)
    {
LABEL_116:
      uint64_t v105 = (uint64_t)v157;
      uint64_t v106 = sub_100010324((uint64_t)v157, (uint64_t)qword_10170ED28);
      uint64_t v107 = (void (*)(char *, uint64_t, uint64_t))v160[2];
      uint64_t v108 = v159;
      v107(v159, v106, v105);
      uint64_t v109 = v151;
      v107(v151, (uint64_t)v108, v105);
      uint64_t v110 = v161;
      uint64_t v111 = (uint64_t)v154;
      uint64_t v148 = &v154[*(int *)(v161 + 40)];
      uint64_t v112 = (uint64_t)v148;
      uint64_t v113 = type metadata accessor for DirectorySequence();
      uint64_t v114 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56);
      v114(v112, 1, 1, v113);
      v107((char *)v111, (uint64_t)v109, v105);
      *(void *)(v111 + *(int *)(v110 + 36)) = v169;
      v107(v150, (uint64_t)v109, v105);
      swift_retain();
      uint64_t v115 = (uint64_t)v156;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)();
      uint64_t v116 = (void (*)(char *, uint64_t))v160[1];
      v116(v109, v105);
      v114(v115, 0, 1, v113);
      sub_100062604(v115, (uint64_t)v148, (uint64_t *)&unk_101653C90);
      uint64_t v117 = (uint64_t)v155;
      sub_10001D608(v111, (uint64_t)v155, &qword_101645750);
      uint64_t v118 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v158[7];
      uint64_t v119 = (uint64_t)v152;
      uint64_t v120 = v161;
      v118(v152, 1, 1, v161);
      sub_10001DAB4(v119, &qword_101645758);
      sub_10001D608(v117, v119, &qword_101645750);
      v118((char *)v119, 0, 1, v120);
      sub_10001D608(v119, (uint64_t)v153, (uint64_t *)&unk_101653CA0);
      uint64_t v121 = ((uint64_t (*)(char *, uint64_t))v116)(v159, v105);
      __chkstk_darwin(v121);
      uint64_t v122 = v167;
      *(&v145 - 2) = (uint64_t)v149;
      *(&v145 - 1) = (uint64_t)v122;
      sub_100658408(sub_1006CD688, (uint64_t)(&v145 - 4));
      uint64_t v124 = v123;
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v164)(v122, v166);
      uint64_t v125 = *(void *)(v124 + 16);
      swift_bridgeObjectRelease();
      uint64_t v126 = (void *)SPBeaconTaskNameStopSharing;
      swift_bridgeObjectRetain();
      id v127 = v126;
      LOBYTE(v113) = sub_100DC7E2C();

      swift_bridgeObjectRelease();
      if ((v113 & 1) != 0 || !v125)
      {
        swift_bridgeObjectRetain();
        id v137 = v127;
        char v138 = sub_100DC7E2C();

        swift_bridgeObjectRelease();
        uint64_t v128 = v147;
        uint64_t v129 = v146;
        if ((v138 & 1) != 0 && !v125)
        {
          id v139 = v137;
          uint64_t v140 = (void *)sub_1011281A8((uint64_t)v139);
        }
      }
      else
      {
        sub_100DD1320(v171, v127);

        uint64_t v128 = v147;
        uint64_t v129 = v146;
      }
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      id v141 = v171[0];
      uint64_t v172 = v128;
      uint64_t v173 = v129;
      uint64_t v142 = sub_10001D958((uint64_t *)v171);
      v163(v142, enum case for Feature.FindMy.cowardlyCarrot(_:), v128);
      char v143 = isFeatureEnabled(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v171);
      if (v143)
      {
        char v144 = sub_1010AAF90((uint64_t)v141);
        swift_bridgeObjectRelease();
        if ((v144 & 1) == 0)
        {
          sub_100DD1320(v171, SPBeaconTaskNameEnableDelegatedShares);
        }
        goto LABEL_133;
      }
LABEL_132:
      swift_bridgeObjectRelease();
LABEL_133:
      uint64_t v37 = sub_1007107BC(v170);
      swift_bridgeObjectRelease();
      sub_1006CCE04((uint64_t)v165, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      goto LABEL_104;
    }
LABEL_143:
    swift_once();
    goto LABEL_116;
  }
  sub_10001DAB4((uint64_t)v25, &qword_10163BBB0);
LABEL_103:
  uint64_t v37 = _swiftEmptyArrayStorage;
LABEL_104:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v174);
  return v37;
}

uint64_t sub_1006ACBB8(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v32 = a5;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v14 = (int *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v39 = sub_100691B60(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  uint64_t v17 = sub_10001D958(v37);
  sub_1006CC8F8(a3, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  UUID.init()();
  uint64_t v19 = v38;
  uint64_t v18 = v39;
  sub_10001CD44(v37, v38);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v18 + 8) + 8) + 32))(v19);
  [a1 latitude];
  uint64_t v21 = v20;
  [a1 longitude];
  uint64_t v23 = v22;
  [a1 horizontalAccuracy];
  uint64_t v25 = v24;
  id v26 = [a1 timestamp];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v27 = &v16[v14[14]];
  uint64_t v28 = type metadata accessor for Date();
  uint64_t v29 = *(void *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v27, a2, v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v27, 0, 1, v28);
  *(_OWORD *)uint64_t v16 = xmmword_101348180;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v16[v14[7]], v12, v9);
  *(void *)&v16[v14[9]] = v21;
  *(void *)&v16[v14[10]] = v23;
  *(void *)&v16[v14[11]] = v25;
  v16[v14[13]] = a4;
  *(void *)&v16[v14[15]] = 0;
  type metadata accessor for Transaction();
  uint64_t v33 = v32;
  unint64_t v34 = v16;
  int64_t v35 = v37;
  char v36 = a4;
  static Transaction.named<A>(_:with:)();
  sub_1006CCE04((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v37);
}

uint64_t sub_1006ACF50(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (a3 > 0xFF)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v3 = (int)a1;
  if ((int)a1 > a1 >> 32)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (__DataStorage._bytes.getter() && __OFSUB__(v3, __DataStorage._offset.getter())) {
LABEL_10:
  }
    __break(1u);
  __DataStorage._length.getter();
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  return 0;
}

uint64_t sub_1006AD048(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v43 = a3;
  id v44 = a4;
  uint64_t v53 = a2;
  uint64_t v5 = sub_10000588C(&qword_101660BB0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord();
  uint64_t v9 = *(void *)(found - 8);
  __chkstk_darwin(found);
  uint64_t v42 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_101638CF0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  char v41 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v46 = a1 + 56;
  uint64_t v21 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  uint64_t v57 = v12 + 16;
  id v58 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  uint64_t v54 = v12 + 48;
  uint64_t v55 = v12;
  uint64_t v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  uint64_t v51 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v45 = v9;
  char v49 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int64_t v47 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v48 = (uint64_t (**)(char *, uint64_t))(v12 + 8);
  uint64_t v56 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v25 = 0;
  int64_t v52 = v19;
  while (1)
  {
    if (v23)
    {
      unint64_t v26 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      int64_t v59 = v25;
      unint64_t v27 = v26 | (v25 << 6);
      goto LABEL_24;
    }
    int64_t v28 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v28 >= v47) {
      goto LABEL_30;
    }
    unint64_t v29 = *(void *)(v46 + 8 * v28);
    int64_t v30 = v25 + 1;
    if (!v29)
    {
      int64_t v30 = v25 + 2;
      if (v25 + 2 >= v47) {
        goto LABEL_30;
      }
      unint64_t v29 = *(void *)(v46 + 8 * v30);
      if (!v29)
      {
        int64_t v30 = v25 + 3;
        if (v25 + 3 >= v47) {
          goto LABEL_30;
        }
        unint64_t v29 = *(void *)(v46 + 8 * v30);
        if (!v29)
        {
          int64_t v30 = v25 + 4;
          if (v25 + 4 >= v47) {
            goto LABEL_30;
          }
          unint64_t v29 = *(void *)(v46 + 8 * v30);
          if (!v29) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v23 = (v29 - 1) & v29;
    int64_t v59 = v30;
    unint64_t v27 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_24:
    uint64_t v32 = v55;
    uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v55 + 16);
    v33(v19, *(void *)(v56 + 48) + *(void *)(v55 + 72) * v27, v11);
    unint64_t v34 = *(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56);
    v34(v19, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v19, 1, v11) == 1) {
      return swift_release();
    }
    (*v51)(v14, v19, v11);
    int64_t v35 = v14;
    char v36 = sub_100B6E74C((uint64_t)v14);
    if (v36[2])
    {
      sub_1006CC8F8((uint64_t)v36 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80)), (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
      uint64_t v37 = 0;
    }
    else
    {
      uint64_t v37 = 1;
    }
    (*v50)(v7, v37, 1, found);
    swift_bridgeObjectRelease();
    if ((*v49)(v7, 1, found) == 1)
    {
      sub_10001DAB4((uint64_t)v7, &qword_101660BB0);
    }
    else
    {
      uint64_t v38 = v42;
      sub_1006CD470((uint64_t)v7, v42, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
      uint64_t v39 = (uint64_t)v41;
      v33(v41, v38 + *(int *)(found + 20), v11);
      sub_1006CCE04(v38, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
      v34((char *)v39, 0, 1, v11);
      sub_100062604(v39, v43, &qword_101638CF0);
      *id v44 = 0;
    }
    uint64_t v14 = v35;
    uint64_t result = (*v48)(v35, v11);
    uint64_t v19 = v52;
    int64_t v25 = v59;
  }
  uint64_t v31 = v25 + 5;
  if (v25 + 5 >= v47)
  {
LABEL_30:
    (*v58)(v19, 1, 1, v11);
    return swift_release();
  }
  unint64_t v29 = *(void *)(v46 + 8 * v31);
  if (v29)
  {
    int64_t v30 = v25 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v47) {
      goto LABEL_30;
    }
    unint64_t v29 = *(void *)(v46 + 8 * v30);
    ++v31;
    if (v29) {
      goto LABEL_23;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

void *sub_1006AD620(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v3 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = *(void *)(v46 - 8);
  uint64_t v7 = __chkstk_darwin(v46);
  uint64_t v40 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)&v36 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v42 = a1 + 56;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v49 = v11 + 16;
  uint64_t v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v48 = v11 + 48;
  uint64_t v45 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  int64_t v43 = (unint64_t)(v18 + 63) >> 6;
  id v44 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v39 = v6;
  uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v51 = a1;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v23 = 0;
  char v41 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v26 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_30;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v43) {
          goto LABEL_30;
        }
        unint64_t v27 = *(void *)(v42 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v43) {
            goto LABEL_30;
          }
          unint64_t v27 = *(void *)(v42 + 8 * v23);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v16, *(void *)(v51 + 48) + *(void *)(v11 + 72) * v25, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1) {
      goto LABEL_31;
    }
    (*v45)(v13, v16, v10);
    sub_100ACD178((uint64_t)v5);
    (*v44)(v13, v10);
    if ((*v21)(v5, 1, v46) == 1)
    {
      uint64_t result = (void *)sub_10001DAB4((uint64_t)v5, &qword_10163B9F0);
    }
    else
    {
      uint64_t v37 = type metadata accessor for OwnedBeaconRecord;
      uint64_t v29 = v38;
      sub_1006CD470((uint64_t)v5, v38, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_1006CD470(v29, v40, (uint64_t (*)(void))v37);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v41 = (void *)sub_100A6F6C4(0, v41[2] + 1, 1, (unint64_t)v41);
      }
      unint64_t v31 = v41[2];
      unint64_t v30 = v41[3];
      uint64_t v32 = (uint64_t (*)())(v31 + 1);
      if (v31 >= v30 >> 1)
      {
        uint64_t v37 = (uint64_t (*)())(v31 + 1);
        int64_t v35 = (void *)sub_100A6F6C4(v30 > 1, v31 + 1, 1, (unint64_t)v41);
        uint64_t v32 = v37;
        char v41 = v35;
      }
      uint64_t v33 = v40;
      unint64_t v34 = v41;
      v41[2] = v32;
      uint64_t result = (void *)sub_1006CD470(v33, (uint64_t)v34+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v31, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v43)
  {
LABEL_30:
    (*v50)(v16, 1, 1, v10);
LABEL_31:
    swift_release();
    return v41;
  }
  unint64_t v27 = *(void *)(v42 + 8 * v28);
  if (v27)
  {
    int64_t v23 = v28;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v23 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

void *sub_1006ADB9C(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v3 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = *(void *)(v46 - 8);
  uint64_t v7 = __chkstk_darwin(v46);
  uint64_t v40 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)&v36 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v42 = a1 + 56;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v49 = v11 + 16;
  uint64_t v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v48 = v11 + 48;
  uint64_t v45 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  int64_t v43 = (unint64_t)(v18 + 63) >> 6;
  id v44 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v39 = v6;
  uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v51 = a1;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v23 = 0;
  char v41 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v26 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_30;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v43) {
          goto LABEL_30;
        }
        unint64_t v27 = *(void *)(v42 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v43) {
            goto LABEL_30;
          }
          unint64_t v27 = *(void *)(v42 + 8 * v23);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v16, *(void *)(v51 + 48) + *(void *)(v11 + 72) * v25, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1) {
      goto LABEL_31;
    }
    (*v45)(v13, v16, v10);
    sub_100ACD178((uint64_t)v5);
    (*v44)(v13, v10);
    if ((*v21)(v5, 1, v46) == 1)
    {
      uint64_t result = (void *)sub_10001DAB4((uint64_t)v5, &qword_10163B9F0);
    }
    else
    {
      uint64_t v37 = type metadata accessor for OwnedBeaconRecord;
      uint64_t v29 = v38;
      sub_1006CD470((uint64_t)v5, v38, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_1006CD470(v29, v40, (uint64_t (*)(void))v37);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v41 = (void *)sub_100A6F6C4(0, v41[2] + 1, 1, (unint64_t)v41);
      }
      unint64_t v31 = v41[2];
      unint64_t v30 = v41[3];
      uint64_t v32 = (uint64_t (*)())(v31 + 1);
      if (v31 >= v30 >> 1)
      {
        uint64_t v37 = (uint64_t (*)())(v31 + 1);
        int64_t v35 = (void *)sub_100A6F6C4(v30 > 1, v31 + 1, 1, (unint64_t)v41);
        uint64_t v32 = v37;
        char v41 = v35;
      }
      uint64_t v33 = v40;
      unint64_t v34 = v41;
      v41[2] = v32;
      uint64_t result = (void *)sub_1006CD470(v33, (uint64_t)v34+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v31, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v43)
  {
LABEL_30:
    (*v50)(v16, 1, 1, v10);
LABEL_31:
    swift_release();
    return v41;
  }
  unint64_t v27 = *(void *)(v42 + 8 * v28);
  if (v27)
  {
    int64_t v23 = v28;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v23 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

void *sub_1006AE11C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v30 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    v20[2] = a1;
    v20[3] = v1;
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v10 = v4 + 16;
    int64_t v26 = v11;
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64));
    uint64_t v23 = *(void *)(v10 + 56);
    unint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 32);
    uint64_t v21 = (void (**)(uint64_t, uint64_t))(v10 - 8);
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v10 + 16);
    swift_bridgeObjectRetain();
    uint64_t v13 = _swiftEmptyArrayStorage;
    unint64_t v25 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 40);
    v20[1] = (v10 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v20[4] = v10;
    while (1)
    {
      v26(v8, v12, v3);
      uint64_t v14 = *v25;
      (*v25)(v8, 0, 1, v3);
      if ((*v24)(v8, 1, v3) == 1) {
        break;
      }
      uint64_t v15 = (uint64_t)v30;
      (*v22)(v30, v8, v3);
      sub_100ACCD98(v15, (uint64_t)&v27);
      (*v21)(v15, v3);
      if (v28)
      {
        sub_10001CEB0(&v27, (uint64_t)v29);
        sub_10001CEB0(v29, (uint64_t)&v27);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = sub_100A6F7F0(0, v13[2] + 1, 1, v13);
        }
        unint64_t v17 = v13[2];
        unint64_t v16 = v13[3];
        if (v17 >= v16 >> 1) {
          uint64_t v13 = sub_100A6F7F0((void *)(v16 > 1), v17 + 1, 1, v13);
        }
        void v13[2] = v17 + 1;
        sub_10001CEB0(&v27, (uint64_t)&v13[5 * v17 + 4]);
      }
      else
      {
        sub_10001DAB4((uint64_t)&v27, (uint64_t *)&unk_10163BBE0);
      }
      v12 += v23;
      if (!--v9)
      {
        v14(v8, 1, 1, v3);
        break;
      }
    }
  }
  else
  {
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    swift_bridgeObjectRetain();
    uint64_t v13 = _swiftEmptyArrayStorage;
    v18(v8, 1, 1, v3);
  }
  swift_bridgeObjectRelease();
  return v13;
}

void *sub_1006AE454(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = (void *)(a1 + 32);
  swift_bridgeObjectRetain();
  uint64_t v6 = _swiftEmptyArrayStorage;
  do
  {
    sub_10066AAA8(v5, a2, (uint64_t)&v10);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    if (v11)
    {
      sub_10001CEB0(&v10, (uint64_t)v12);
      sub_10001CEB0(v12, (uint64_t)&v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_100A6F7F0(0, v6[2] + 1, 1, v6);
      }
      unint64_t v8 = v6[2];
      unint64_t v7 = v6[3];
      if (v8 >= v7 >> 1) {
        uint64_t v6 = sub_100A6F7F0((void *)(v7 > 1), v8 + 1, 1, v6);
      }
      v6[2] = v8 + 1;
      sub_10001CEB0(&v10, (uint64_t)&v6[5 * v8 + 4]);
    }
    else
    {
      sub_10001DAB4((uint64_t)&v10, (uint64_t *)&unk_10163BBE0);
    }
    v5 += 5;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v6;
}

void *sub_1006AE5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v4 = sub_10000588C(&qword_10164B478);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v46 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v57 = (char *)v39 - v14;
  uint64_t v15 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v15 - 8);
  unint64_t v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18)
  {
    int64_t v43 = v9;
    uint64_t v40 = v6;
    v39[1] = v2;
    unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    uint64_t v19 = v11 + 16;
    uint64_t v50 = v20;
    uint64_t v21 = a1;
    uint64_t v22 = a1 + ((*(unsigned __int8 *)(v19 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 64));
    uint64_t v23 = *(void *)(v19 + 56);
    uint64_t v48 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 40);
    char v41 = (void (**)(char *, char *, uint64_t))(v19 + 16);
    uint64_t v42 = v23;
    id v44 = (void (**)(uint64_t, uint64_t))(v19 - 8);
    uint64_t v45 = (unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 32);
    v39[0] = v21;
    swift_bridgeObjectRetain();
    unint64_t v24 = _swiftEmptyArrayStorage;
    v39[2] = v19;
    while (1)
    {
      v50(v17, v22, v10);
      unint64_t v25 = *v48;
      (*v48)(v17, 0, 1, v10);
      if ((*v45)(v17, 1, v10) == 1) {
        break;
      }
      uint64_t v49 = v24;
      uint64_t v26 = (uint64_t)v57;
      (*v41)(v57, v17, v10);
      uint64_t v27 = (uint64_t)v43;
      sub_100AE75E0(v26, (uint64_t)v43);
      uint64_t v28 = type metadata accessor for OwnedBeaconGroup(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v27, 1, v28) == 1)
      {
        sub_10001DAB4(v27, &qword_10163BB20);
        long long v54 = 0u;
        long long v55 = 0u;
        uint64_t v56 = 0;
      }
      else
      {
        *((void *)&v55 + 1) = v28;
        uint64_t v56 = &off_1015C78A8;
        uint64_t v29 = sub_10001D958((uint64_t *)&v54);
        sub_1006CD470(v27, (uint64_t)v29, type metadata accessor for OwnedBeaconGroup);
      }
      uint64_t v30 = (uint64_t)v46;
      v50(v46, (uint64_t)v57, v10);
      if (*((void *)&v55 + 1))
      {
        unint64_t v31 = *v44;
        (*v44)(v30, v10);
        sub_10001CEB0(&v54, (uint64_t)&v51);
      }
      else
      {
        uint64_t v32 = (uint64_t)v40;
        sub_100AE86F4(v30, (uint64_t)v40);
        uint64_t v33 = type metadata accessor for SharedBeaconGroup();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v32, 1, v33) == 1)
        {
          unint64_t v31 = *v44;
          (*v44)(v30, v10);
          sub_10001DAB4(v32, &qword_10164B478);
          long long v51 = 0u;
          long long v52 = 0u;
          uint64_t v53 = 0;
        }
        else
        {
          *((void *)&v52 + 1) = v33;
          uint64_t v53 = &off_1015BEB88;
          unint64_t v34 = sub_10001D958((uint64_t *)&v51);
          sub_1006CD470(v32, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for SharedBeaconGroup);
          unint64_t v31 = *v44;
          (*v44)(v30, v10);
        }
        sub_10001DAB4((uint64_t)&v54, (uint64_t *)&unk_10164E7C0);
      }
      unint64_t v24 = v49;
      v31((uint64_t)v57, v10);
      if (*((void *)&v52 + 1))
      {
        sub_10001CEB0(&v51, (uint64_t)&v54);
        sub_10001CEB0(&v54, (uint64_t)&v51);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v24 = sub_100A70870(0, v24[2] + 1, 1, v24);
        }
        unint64_t v36 = v24[2];
        unint64_t v35 = v24[3];
        if (v36 >= v35 >> 1) {
          unint64_t v24 = sub_100A70870((void *)(v35 > 1), v36 + 1, 1, v24);
        }
        v24[2] = v36 + 1;
        sub_10001CEB0(&v51, (uint64_t)&v24[5 * v36 + 4]);
      }
      else
      {
        sub_10001DAB4((uint64_t)&v51, (uint64_t *)&unk_10164E7C0);
      }
      v22 += v42;
      if (!--v18)
      {
        v25(v17, 1, 1, v10);
        break;
      }
    }
  }
  else
  {
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    swift_bridgeObjectRetain();
    unint64_t v24 = _swiftEmptyArrayStorage;
    v37(v17, 1, 1, v10);
  }
  swift_bridgeObjectRelease();
  return v24;
}

void *sub_1006AEBF0(uint64_t a1, char **a2)
{
  uint64_t v3 = v2;
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v11 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 32);
    swift_bridgeObjectRetain();
    do
    {
      sub_100667370(a2, v8, &v10);
      if (v3)
      {
        swift_errorRelease();
        uint64_t v3 = 0;
      }
      else
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v8 += 5;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return (void *)v11;
  }
  return result;
}

void *sub_1006AED0C(uint64_t a1, uint64_t a2)
{
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v11 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v7 = *(void *)(type metadata accessor for TimeBasedKey() - 8);
    uint64_t v8 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
    uint64_t v9 = *(void *)(v7 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_100670CDC(v8, a2, &v10);
      if (v2)
      {
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }
      if (v10)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      uint64_t v8 = (uint64_t *)((char *)v8 + v9);
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    return (void *)v11;
  }
  return result;
}

uint64_t sub_1006AEE78(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v4 = result;
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(result + 16);
  if (v6)
  {
    unint64_t v8 = 0;
    uint64_t v9 = result + 32;
    uint64_t v5 = (void *)(a3 & 1);
    uint64_t v22 = *(void *)(result + 16);
    uint64_t v23 = result;
    unsigned int v21 = a3 & 1;
    while (v8 < *(void *)(v4 + 16))
    {
      sub_10001D010(v9, (uint64_t)v27);
      char v10 = sub_10065D20C((uint64_t)v27, a2, (int)v5);
      if (v3)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
        swift_bridgeObjectRelease();
        swift_release();
        return (uint64_t)v5;
      }
      if (v10)
      {
        sub_10001CEB0(v27, (uint64_t)v24);
        unint64_t v11 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7BC4(0, v11[2] + 1, 1);
          unint64_t v11 = v28;
        }
        unint64_t v13 = v11[2];
        unint64_t v12 = v11[3];
        if (v13 >= v12 >> 1) {
          sub_1000B7BC4(v12 > 1, v13 + 1, 1);
        }
        uint64_t v14 = v25;
        uint64_t v15 = v26;
        uint64_t v16 = sub_1000BD078((uint64_t)v24, v25);
        __chkstk_darwin(v16);
        uint64_t v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v19 + 16))(v18);
        sub_1006985B0(v13, (uint64_t)v18, (uint64_t *)&v28, v14, v15);
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
        uint64_t v6 = v22;
        uint64_t v4 = v23;
        uint64_t v5 = (void *)v21;
      }
      else
      {
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
      }
      ++v8;
      v9 += 40;
      if (v6 == v8)
      {
        uint64_t v5 = v28;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  return result;
}

void *sub_1006AF0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = type metadata accessor for SharedBeaconGroup();
  uint64_t v5 = __chkstk_darwin(v37);
  unint64_t v34 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v32 - v8;
  __chkstk_darwin(v7);
  uint64_t v33 = (char *)v32 - v10;
  uint64_t v11 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v36 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v32 - v15;
  __chkstk_darwin(v14);
  unint64_t v35 = (char *)v32 - v17;
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v18)
  {
    v32[1] = v2;
    uint64_t v39 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v20 = a1 + 32;
    void v32[2] = *(void *)(a2 + 280);
    void v32[3] = a2;
    while (1)
    {
      sub_10001D010(v20, (uint64_t)v38);
      sub_10000588C((uint64_t *)&unk_101657950);
      uint64_t v22 = (uint64_t)v35;
      if (swift_dynamicCast())
      {
        sub_1006CD470(v22, (uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
        id v23 = sub_100AE5420((uint64_t)v16);
        unint64_t v24 = type metadata accessor for OwnedBeaconGroup;
        uint64_t v25 = (uint64_t)v16;
      }
      else
      {
        uint64_t v26 = (uint64_t)v33;
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_14;
        }
        sub_1006CD470(v26, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SharedBeaconGroup);
        id v23 = [objc_allocWithZone((Class)SPBeaconGroup) init];
        [v23 setVersion:-1];
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        [v23 setIdentifier:isa];

        NSString v28 = String._bridgeToObjectiveC()();
        [v23 setName:v28];

        [v23 setClassification:0];
        [v23 setIsPairingComplete:1];
        [v23 setIsFindMyNetworkEnabled:0];
        [v23 setStatus:0];
        type metadata accessor for UUID();
        sub_100691B60(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        Class v29 = Set._bridgeToObjectiveC()().super.isa;
        [v23 setBeaconIdentifiers:v29];

        [v23 setIsConnected:0];
        unint64_t v24 = (uint64_t (*)(void))type metadata accessor for SharedBeaconGroup;
        uint64_t v25 = (uint64_t)v9;
      }
      sub_1006CCE04(v25, v24);
      uint64_t v30 = (uint64_t)v36;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
      sub_10001D010(v20, (uint64_t)v38);
      if (swift_dynamicCast())
      {
        sub_1006CD470(v30, (uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
        sub_1006792CC((uint64_t)v16);
        sub_1006CCE04((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
      }
      else
      {
        uint64_t v31 = (uint64_t)v34;
        if ((swift_dynamicCast() & 1) == 0)
        {
LABEL_14:
          uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        sub_1006CCE04(v31, (uint64_t (*)(void))type metadata accessor for SharedBeaconGroup);
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
      type metadata accessor for SPBeaconTaskName(0);
      sub_10001D4B0(0, &qword_101653D80);
      sub_100691B60(&qword_1016387E0, type metadata accessor for SPBeaconTaskName);
      Class v21 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v23 setTaskInformation:v21];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v20 += 40;
      if (!--v18) {
        return v39;
      }
    }
  }
  return result;
}

void *sub_1006AF6D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = *(void *)(type metadata accessor for WildModeAssociationRecord(0) - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      id v7 = sub_10126DFC0(v5);
      sub_100662754(v5);
      type metadata accessor for SPBeaconTaskName(0);
      sub_10001D4B0(0, &qword_101653D80);
      sub_100691B60(&qword_1016387E0, type metadata accessor for SPBeaconTaskName);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v7 setTaskInformation:isa];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v5 += v6;
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1006AF894(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v34);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for BeaconNamingRecord();
  uint64_t v6 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v32 = (uint64_t)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163A950);
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    unint64_t v36 = _swiftEmptyArrayStorage;
    sub_1000B8038(0, v11, 0);
    uint64_t v13 = type metadata accessor for OwnedBeaconRecord();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v28 = *(void *)(a2 + 280);
    uint64_t v29 = v13;
    uint64_t v27 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer;
    uint64_t v26 = *(void *)(v14 + 72);
    uint64_t v16 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
    while (1)
    {
      __chkstk_darwin(v13);
      *(&v25 - 2) = v18;
      *(&v25 - 1) = v17;
      QueueSynchronizer.conditionalSync<A>(_:)();
      if ((*v16)(v5, 1, v33) == 1) {
        break;
      }
      uint64_t v19 = v32;
      sub_1006CD470((uint64_t)v5, v32, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      uint64_t v20 = (uint64_t)&v10[*(int *)(v31 + 48)];
      sub_1006CC8F8(v15, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_1006CD470(v19, v20, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      uint64_t v12 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B8038(0, v12[2] + 1, 1);
        uint64_t v12 = v36;
      }
      unint64_t v22 = v12[2];
      unint64_t v21 = v12[3];
      if (v22 >= v21 >> 1)
      {
        sub_1000B8038(v21 > 1, v22 + 1, 1);
        uint64_t v12 = v36;
      }
      long long v12[2] = v22 + 1;
      uint64_t v13 = sub_10001D608((uint64_t)v10, (uint64_t)v12+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v22, &qword_10163A950);
      v15 += v26;
      if (!--v11) {
        return v12;
      }
    }
    sub_10001DAB4((uint64_t)v5, &qword_10163B9E0);
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v12 = v23;
    uint64_t v35 = 2;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100691B60(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_release();
  }
  return v12;
}

uint64_t sub_1006AFCF0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v6 - 8);
  uint64_t v156 = (uint64_t)v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = type metadata accessor for Date();
  uint64_t v151 = *(char **)(v158 - 8);
  uint64_t v8 = __chkstk_darwin(v158);
  uint64_t v147 = (char *)v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v155 = (char *)v118 - v10;
  uint64_t v148 = type metadata accessor for UUID();
  uint64_t v130 = *(void *)(v148 - 8);
  uint64_t v11 = __chkstk_darwin(v148);
  uint64_t v152 = (char *)v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v146 = (char *)v118 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v157 = (char *)v118 - v16;
  __chkstk_darwin(v15);
  uint64_t v145 = (char *)v118 - v17;
  uint64_t v143 = type metadata accessor for ShareRecord();
  uint64_t v18 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v144 = (uint64_t)v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v120);
  uint64_t v121 = (uint64_t)v118 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v21 - 8);
  uint64_t v125 = (char *)v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v124 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v122 = (uint64_t)v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v24 - 8);
  uint64_t v128 = (char *)v118 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for SafeLocation();
  uint64_t v142 = *(void *)(v26 - 8);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v154 = (uint64_t)v118 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v141 = (uint64_t)v118 - v29;
  uint64_t v30 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v30 - 8);
  id v131 = (char *)v118 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    goto LABEL_40;
  }
  while (1)
  {
    uint64_t v127 = sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_101347BA0;
    uint64_t v161 = *(void *)a2;
    sub_10000588C(&qword_101642888);
    uint64_t v33 = String.init<A>(describing:)();
    uint64_t v35 = v34;
    unint64_t v132 = a2;
    *(void *)(v32 + 56) = &type metadata for String;
    unint64_t v36 = sub_10000B4CC();
    *(void *)(v32 + 32) = v33;
    *(void *)(v32 + 40) = v35;
    *(void *)(v32 + 96) = &type metadata for String;
    *(void *)(v32 + 104) = v36;
    *(void *)(v32 + 64) = v36;
    *(void *)(v32 + 72) = 0xD000000000000017;
    *(void *)(v32 + 80) = 0x80000001014042B0;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void *)(v132 + 280);
    sub_100ACCD98(a1, (uint64_t)&v159);
    if (!v160) {
      return sub_10001DAB4((uint64_t)&v159, (uint64_t *)&unk_10163BBE0);
    }
    sub_10001CEB0(&v159, (uint64_t)&v161);
    uint64_t v38 = sub_100B6DD88();
    uint64_t v39 = v38[2];
    uint64_t v129 = (_UNKNOWN **)a1;
    uint64_t v123 = v37;
    if (v39)
    {
      uint64_t v119 = a3;
      *(void *)&long long v159 = _swiftEmptyArrayStorage;
      uint64_t v153 = v39;
      specialized ContiguousArray.reserveCapacity(_:)();
      unint64_t v40 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      v118[1] = v38;
      uint64_t v41 = (uint64_t)v38 + v40;
      id v140 = self;
      id v139 = (void (**)(char *, uint64_t, uint64_t))(v130 + 16);
      uint64_t v138 = *(void *)(v18 + 72);
      id v137 = (void (**)(char *, uint64_t, uint64_t))(v151 + 16);
      uint64_t v136 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48);
      id v133 = (void (**)(char *, uint64_t, uint64_t))(v151 + 32);
      id v135 = (void (**)(char *, uint64_t))(v151 + 8);
      char v134 = (void (**)(void))(v130 + 8);
      uint64_t v42 = v148;
      int64_t v43 = v147;
      id v44 = v152;
      uint64_t v45 = v157;
      uint64_t v46 = v145;
      uint64_t v47 = v144;
      do
      {
        uint64_t v152 = (char *)v41;
        sub_1006CC8F8(v41, v47, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        char v62 = (int *)v143;
        uint64_t v63 = *v139;
        (*v139)(v46, v47 + *(int *)(v143 + 20), v42);
        v63(v45, v47 + v62[6], v42);
        UUID.init(uuid:)();
        uint64_t v117 = 0;
        uint64_t v64 = v44;
        UUID.init(uuid:)();
        uint64_t v151 = (char *)[v140 SPOwner];
        uint64_t v150 = sub_100ECF4F0(*(unsigned char *)(v47 + v62[9]), *(void *)(v47 + v62[9] + 8), *(void **)(v47 + v62[9] + 16));
        uint64_t v65 = v158;
        (*v137)(v155, v47 + v62[7], v158);
        uint64_t v66 = v156;
        sub_10001D074(v47 + v62[8], v156, (uint64_t *)&unk_10163AC90);
        if ((*v136)(v66, 1, v65) == 1)
        {
          static Date.distantFuture.getter();
          sub_10001DAB4(v156, (uint64_t *)&unk_10163AC90);
        }
        else
        {
          (*v133)(v43, v156, v158);
        }
        id v48 = objc_allocWithZone((Class)SPBeaconShare);
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        Class v50 = UUID._bridgeToObjectiveC()().super.isa;
        Class v51 = UUID._bridgeToObjectiveC()().super.isa;
        Class v52 = UUID._bridgeToObjectiveC()().super.isa;
        uint64_t v53 = v155;
        Class v54 = Date._bridgeToObjectiveC()().super.isa;
        Class v55 = Date._bridgeToObjectiveC()().super.isa;
        LOBYTE(v117) = 0;
        uint64_t v56 = v48;
        id v58 = (void *)v150;
        uint64_t v57 = v151;
        id v149 = [v56 initWithIdentifier:isa beaconIdentifier:v50 sharingCircleIdentifier:v51 peerTrustIdentifier:v52 owner:v151 sharee:v150 state:5 creationDate:v54 expirationDate:v55 visitorCount:0 delegationStatus:v117];

        uint64_t v45 = v157;
        int64_t v59 = *v135;
        int64_t v43 = v147;
        uint64_t v60 = v158;
        (*v135)(v147, v158);
        v59(v53, v60);
        uint64_t v61 = *v134;
        id v44 = v64;
        uint64_t v42 = v148;
        ((void (*)(char *, uint64_t))*v134)(v64, v148);
        v61();
        ((void (*)(char *, uint64_t))v61)(v45, v42);
        uint64_t v46 = v145;
        v61();
        uint64_t v47 = v144;
        sub_1006CCE04(v144, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v41 = (uint64_t)&v152[v138];
        --v153;
      }
      while (v153);
      uint64_t v67 = (void *)v159;
      swift_bridgeObjectRelease();
      a3 = v119;
      a1 = (unint64_t)v129;
      uint64_t v37 = v123;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v67 = _swiftEmptyArrayStorage;
    }
    sub_101158F2C((unint64_t)v67);
    swift_bridgeObjectRelease();
    uint64_t v69 = v162;
    uint64_t v70 = v163;
    id v71 = sub_10001CD44(&v161, v162);
    id v72 = sub_100B2B68C((uint64_t)v71, v37, v69, v70);
    sub_10001D4B0(0, &qword_10163B870);
    sub_10012E2E4(&qword_10163B878, &qword_10163B870);
    Class v73 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v72 setShares:v73];

    if (qword_101636CB8 != -1) {
      swift_once();
    }
    id v74 = sub_1011E87EC(a1);
    [v72 setSeparationState:v74];

    uint64_t v75 = v130;
    uint64_t v76 = v131;
    uint64_t v77 = v148;
    (*(void (**)(char *, unint64_t, uint64_t))(v130 + 16))(v131, a1, v148);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v76, 0, 1, v77);
    id v78 = sub_100B6C090();
    uint64_t v18 = v78[2];
    if (!v18) {
      break;
    }
    a2 = 0;
    unint64_t v79 = _swiftEmptyArrayStorage;
    while (a2 < v78[2])
    {
      a1 = (*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80);
      uint64_t v80 = *(void *)(v142 + 72);
      uint64_t v81 = v141;
      sub_1006CC8F8((uint64_t)v78 + a1 + v80 * a2, v141, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      sub_1006CD470(v81, v154, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v159 = v79;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000B79B0(0, v79[2] + 1, 1);
        unint64_t v79 = (void *)v159;
      }
      unint64_t v84 = v79[2];
      unint64_t v83 = v79[3];
      if (v84 >= v83 >> 1)
      {
        sub_1000B79B0(v83 > 1, v84 + 1, 1);
        unint64_t v79 = (void *)v159;
      }
      ++a2;
      v79[2] = v84 + 1;
      sub_1006CD470(v154, (uint64_t)v79 + a1 + v84 * v80, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      if (v18 == a2) {
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_40:
    swift_once();
  }
  unint64_t v79 = _swiftEmptyArrayStorage;
LABEL_24:
  uint64_t v85 = swift_bridgeObjectRelease();
  __chkstk_darwin(v85);
  uint64_t v86 = (uint64_t)v131;
  uint64_t v117 = v131;
  uint64_t v87 = sub_1000A4684((uint64_t (*)(char *))sub_1006CD4DC, &v116, (uint64_t)v79);
  id v88 = sub_100655DC4(v87);
  swift_bridgeObjectRelease();
  sub_10001DAB4(v86, &qword_101638CF0);
  sub_101158F5C((unint64_t)v88);
  swift_bridgeObjectRelease();
  sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
  sub_10012E2E4((unint64_t *)&qword_1016556C0, (unint64_t *)&unk_101653D70);
  Class v89 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v72 setSafeLocations:v89];

  uint64_t v90 = v162;
  uint64_t v91 = v163;
  char v92 = sub_10001CD44(&v161, v162);
  uint64_t v93 = v132;
  [v72 setCanBeLeashedByHost:(unint64_t)sub_100A27564((uint64_t)v92, v132, v90, v91) & 1];
  [v72 setBeaconSeparationState:sub_100A05F68((uint64_t)v129)];
  uint64_t v94 = *(void *)(v93 + 40);
  if (v94)
  {
    uint64_t v95 = *(unsigned __int8 *)(v94 + 376);
    swift_retain();
    static os_log_type_t.info.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    uint64_t v96 = swift_allocObject();
    *(_OWORD *)(v96 + 16) = xmmword_101342130;
    *(void *)(v96 + 56) = &type metadata for Bool;
    *(void *)(v96 + 64) = &protocol witness table for Bool;
    *(unsigned char *)(v96 + 32) = v95;
    os_log(_:dso:log:_:_:)();
    swift_release();
    swift_bridgeObjectRelease();
    [v72 setConnectionAllowed:v95];
    sub_10001D010((uint64_t)&v161, (uint64_t)&v159);
    sub_10000588C((uint64_t *)&unk_10164DBF0);
    uint64_t v97 = type metadata accessor for SharedBeaconRecord(0);
    uint64_t v98 = (uint64_t)v128;
    char v99 = swift_dynamicCast();
    uint64_t v100 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56);
    if (v99)
    {
      v100(v98, 0, 1, v97);
      sub_10001DAB4(v98, (uint64_t *)&unk_101653D50);
      [v72 setConnectableDeviceCount:0];
LABEL_38:
      uint64_t v115 = *(void **)(a3 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_targetBeacon);
      *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_targetBeacon) = v72;

      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v161);
    }
    v100(v98, 1, 1, v97);
    sub_10001DAB4(v98, (uint64_t *)&unk_101653D50);
    sub_10001D010((uint64_t)&v161, (uint64_t)&v159);
    uint64_t v101 = (uint64_t)v125;
    uint64_t v102 = v126;
    char v103 = swift_dynamicCast();
    char v104 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 56);
    if ((v103 & 1) == 0)
    {
      v104(v101, 1, 1, v102);
      sub_10001DAB4(v101, &qword_10163B9F0);
      goto LABEL_38;
    }
    v104(v101, 0, 1, v102);
    uint64_t v105 = v122;
    sub_1006CD470(v101, v122, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v106 = v129;
    uint64_t v107 = sub_10099C240((uint64_t)v129);
    CurrentValueSubject.value.getter();
    uint64_t v108 = v159;
    sub_100660124(v106, v159);
    if (!__OFADD__(v108, v107))
    {
      [v72 setConnectableDeviceCount:v108 + v107];
      uint64_t v109 = v121;
      sub_1006CC8F8(v105 + *(int *)(v102 + 24), v121, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        NSString v112 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v72 setSerialNumber:v112];

        uint64_t v113 = type metadata accessor for OwnedBeaconRecord;
        uint64_t v114 = v105;
      }
      else
      {
        if (EnumCaseMultiPayload == 2)
        {
          sub_10000588C(&qword_1016555E0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          NSString v111 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v72 setSerialNumber:v111];

          sub_1006CCE04(v105, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v109, v148);
          goto LABEL_38;
        }
        [v72 setSerialNumber:0];
        sub_1006CCE04(v105, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v113 = type metadata accessor for StableIdentifier;
        uint64_t v114 = v109;
      }
      sub_1006CCE04(v114, (uint64_t (*)(void))v113);
      goto LABEL_38;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void sub_1006B1130(_UNKNOWN **a1, unint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v6 - 8);
  uint64_t v143 = (uint64_t)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = type metadata accessor for Date();
  uint64_t v152 = *(void *)(v148 - 8);
  uint64_t v8 = __chkstk_darwin(v148);
  uint64_t v156 = (char *)&v117 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v155 = (char *)&v117 - v10;
  uint64_t v158 = type metadata accessor for UUID();
  uint64_t v130 = *(void *)(v158 - 8);
  uint64_t v11 = __chkstk_darwin(v158);
  uint64_t v157 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v147 = (char *)&v117 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v146 = (char *)&v117 - v16;
  __chkstk_darwin(v15);
  uint64_t v145 = (char *)&v117 - v17;
  uint64_t v142 = type metadata accessor for ShareRecord();
  uint64_t v151 = *(void **)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v144 = (uint64_t)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v119);
  uint64_t v120 = (uint64_t)&v117 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v20 - 8);
  uint64_t v123 = (char *)&v117 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v122 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v121 = (uint64_t)&v117 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v23 - 8);
  uint64_t v128 = (char *)&v117 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for SafeLocation();
  uint64_t v141 = *(void *)(v25 - 8);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v154 = (uint64_t)&v117 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v140 = (uint64_t)&v117 - v28;
  uint64_t v29 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v29 - 8);
  id v131 = (char *)&v117 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    goto LABEL_40;
  }
  while (1)
  {
    uint64_t v127 = sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_101347BA0;
    uint64_t v161 = *(void *)a2;
    sub_10000588C(&qword_101642888);
    uint64_t v32 = String.init<A>(describing:)();
    uint64_t v34 = v33;
    *(void *)(v31 + 56) = &type metadata for String;
    unint64_t v35 = sub_10000B4CC();
    *(void *)(v31 + 32) = v32;
    *(void *)(v31 + 40) = v34;
    *(void *)(v31 + 96) = &type metadata for String;
    *(void *)(v31 + 104) = v35;
    *(void *)(v31 + 64) = v35;
    *(void *)(v31 + 72) = 0xD000000000000017;
    *(void *)(v31 + 80) = 0x80000001014042B0;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v36 = *(void *)(a2 + 280);
    sub_100ACCD98((uint64_t)a1, (uint64_t)&v159);
    if (!v160)
    {
      sub_10001DAB4((uint64_t)&v159, (uint64_t *)&unk_10163BBE0);
      a3[2](a3, 0);
      return;
    }
    unint64_t v125 = a2;
    sub_10001CEB0(&v159, (uint64_t)&v161);
    uint64_t v126 = v36;
    uint64_t v129 = a1;
    uint64_t v37 = sub_100B6DD88();
    uint64_t v38 = v37[2];
    if (v38)
    {
      uint64_t v118 = a3;
      *(void *)&long long v159 = _swiftEmptyArrayStorage;
      uint64_t v153 = v38;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v39 = v151;
      unint64_t v40 = (*((unsigned __int8 *)v39 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v39 + 80);
      uint64_t v117 = v37;
      uint64_t v41 = (uint64_t)v37 + v40;
      id v139 = self;
      uint64_t v138 = (void (**)(char *, uint64_t, uint64_t))(v130 + 16);
      uint64_t v137 = v39[9];
      uint64_t v136 = (void (**)(char *, uint64_t, uint64_t))(v152 + 16);
      id v135 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48);
      unint64_t v132 = (void (**)(char *, uint64_t, uint64_t))(v152 + 32);
      char v134 = (void (**)(char *, uint64_t))(v152 + 8);
      id v133 = (void (**)(void))(v130 + 8);
      uint64_t v42 = v148;
      a2 = (unint64_t)v146;
      int64_t v43 = v145;
      uint64_t v44 = v144;
      do
      {
        uint64_t v152 = v41;
        sub_1006CC8F8(v41, v44, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        uint64_t v61 = (int *)v142;
        uint64_t v62 = v158;
        uint64_t v63 = *v138;
        (*v138)(v43, v44 + *(int *)(v142 + 20), v158);
        v63((char *)a2, v44 + v61[6], v62);
        UUID.init(uuid:)();
        uint64_t v116 = 0;
        UUID.init(uuid:)();
        uint64_t v151 = [v139 SPOwner];
        uint64_t v150 = sub_100ECF4F0(*(unsigned char *)(v44 + v61[9]), *(void *)(v44 + v61[9] + 8), *(void **)(v44 + v61[9] + 16));
        (*v136)(v155, v44 + v61[7], v42);
        uint64_t v64 = v143;
        sub_10001D074(v44 + v61[8], v143, (uint64_t *)&unk_10163AC90);
        if ((*v135)(v64, 1, v42) == 1)
        {
          static Date.distantFuture.getter();
          sub_10001DAB4(v64, (uint64_t *)&unk_10163AC90);
        }
        else
        {
          (*v132)(v156, v64, v42);
        }
        id v45 = objc_allocWithZone((Class)SPBeaconShare);
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        a2 = (unint64_t)v146;
        Class v47 = UUID._bridgeToObjectiveC()().super.isa;
        Class v48 = UUID._bridgeToObjectiveC()().super.isa;
        Class v49 = UUID._bridgeToObjectiveC()().super.isa;
        Class v50 = v155;
        Class v51 = Date._bridgeToObjectiveC()().super.isa;
        Class v52 = Date._bridgeToObjectiveC()().super.isa;
        LOBYTE(v116) = 0;
        uint64_t v53 = v45;
        Class v55 = (void *)v150;
        Class v54 = v151;
        id v149 = [v53 initWithIdentifier:isa beaconIdentifier:v47 sharingCircleIdentifier:v48 peerTrustIdentifier:v49 owner:v151 sharee:v150 state:5 creationDate:v51 expirationDate:v52 visitorCount:0 delegationStatus:v116];

        uint64_t v56 = v147;
        uint64_t v57 = v157;

        id v58 = *v134;
        uint64_t v42 = v148;
        (*v134)(v156, v148);
        v58(v50, v42);
        int64_t v59 = *v133;
        uint64_t v60 = v158;
        ((void (*)(char *, uint64_t))*v133)(v57, v158);
        ((void (*)(char *, uint64_t))v59)(v56, v60);
        ((void (*)(unint64_t, uint64_t))v59)(a2, v60);
        int64_t v43 = v145;
        v59();
        uint64_t v44 = v144;
        sub_1006CCE04(v144, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v41 = v152 + v137;
        --v153;
      }
      while (v153);
      uint64_t v65 = (void *)v159;
      swift_bridgeObjectRelease();
      a3 = v118;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v65 = _swiftEmptyArrayStorage;
    }
    sub_101158F2C((unint64_t)v65);
    swift_bridgeObjectRelease();
    uint64_t v66 = v162;
    uint64_t v67 = v163;
    char v68 = sub_10001CD44(&v161, v162);
    a1 = (_UNKNOWN **)sub_100B2B68C((uint64_t)v68, v126, v66, v67);
    sub_10001D4B0(0, &qword_10163B870);
    sub_10012E2E4(&qword_10163B878, &qword_10163B870);
    Class v69 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [a1 setShares:v69];

    if (qword_101636CB8 != -1) {
      swift_once();
    }
    uint64_t v70 = (uint64_t)v129;
    id v71 = sub_1011E87EC((uint64_t)v129);
    [a1 setSeparationState:v71];

    uint64_t v72 = v130;
    Class v73 = v131;
    uint64_t v74 = v158;
    (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v131, v70, v158);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v73, 0, 1, v74);
    uint64_t v75 = sub_100B6C090();
    uint64_t v76 = v75[2];
    if (!v76) {
      break;
    }
    unint64_t v77 = 0;
    id v78 = _swiftEmptyArrayStorage;
    while (v77 < v75[2])
    {
      unint64_t v79 = (*(unsigned __int8 *)(v141 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80);
      uint64_t v80 = *(void *)(v141 + 72);
      uint64_t v81 = v140;
      sub_1006CC8F8((uint64_t)v75 + v79 + v80 * v77, v140, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      sub_1006CD470(v81, v154, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v159 = v78;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000B79B0(0, v78[2] + 1, 1);
        id v78 = (void *)v159;
      }
      a2 = v78[2];
      unint64_t v83 = v78[3];
      if (a2 >= v83 >> 1)
      {
        sub_1000B79B0(v83 > 1, a2 + 1, 1);
        id v78 = (void *)v159;
      }
      ++v77;
      v78[2] = a2 + 1;
      sub_1006CD470(v154, (uint64_t)v78 + v79 + a2 * v80, (uint64_t (*)(void))type metadata accessor for SafeLocation);
      if (v76 == v77) {
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_40:
    swift_once();
  }
  id v78 = _swiftEmptyArrayStorage;
LABEL_24:
  uint64_t v84 = swift_bridgeObjectRelease();
  __chkstk_darwin(v84);
  uint64_t v85 = (uint64_t)v131;
  uint64_t v116 = v131;
  uint64_t v86 = sub_1000A4684((uint64_t (*)(char *))sub_1006CD4DC, &v115, (uint64_t)v78);
  uint64_t v87 = sub_100655DC4(v86);
  swift_bridgeObjectRelease();
  sub_10001DAB4(v85, &qword_101638CF0);
  sub_101158F5C((unint64_t)v87);
  swift_bridgeObjectRelease();
  sub_10001D4B0(0, (unint64_t *)&unk_101653D70);
  sub_10012E2E4((unint64_t *)&qword_1016556C0, (unint64_t *)&unk_101653D70);
  Class v88 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a1 setSafeLocations:v88];

  uint64_t v89 = v162;
  uint64_t v90 = v163;
  uint64_t v91 = sub_10001CD44(&v161, v162);
  uint64_t v92 = v125;
  [a1 setCanBeLeashedByHost:(unint64_t)sub_100A27564((uint64_t)v91, v125, v89, v90) & 1];
  [a1 setBeaconSeparationState:sub_100A05F68((uint64_t)v129)];
  uint64_t v93 = *(void *)(v92 + 40);
  if (v93)
  {
    uint64_t v94 = *(unsigned __int8 *)(v93 + 376);
    swift_retain();
    static os_log_type_t.info.getter();
    if (qword_101637258 != -1) {
      swift_once();
    }
    uint64_t v95 = swift_allocObject();
    *(_OWORD *)(v95 + 16) = xmmword_101342130;
    *(void *)(v95 + 56) = &type metadata for Bool;
    *(void *)(v95 + 64) = &protocol witness table for Bool;
    *(unsigned char *)(v95 + 32) = v94;
    os_log(_:dso:log:_:_:)();
    swift_release();
    swift_bridgeObjectRelease();
    [a1 setConnectionAllowed:v94];
    sub_10001D010((uint64_t)&v161, (uint64_t)&v159);
    sub_10000588C((uint64_t *)&unk_10164DBF0);
    uint64_t v96 = type metadata accessor for SharedBeaconRecord(0);
    uint64_t v97 = (uint64_t)v128;
    char v98 = swift_dynamicCast();
    char v99 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56);
    if (v98)
    {
      v99(v97, 0, 1, v96);
      sub_10001DAB4(v97, (uint64_t *)&unk_101653D50);
      [a1 setConnectableDeviceCount:0];
LABEL_38:
      ((void (**)(void, _UNKNOWN **))a3)[2](a3, a1);

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v161);
      return;
    }
    v99(v97, 1, 1, v96);
    sub_10001DAB4(v97, (uint64_t *)&unk_101653D50);
    sub_10001D010((uint64_t)&v161, (uint64_t)&v159);
    uint64_t v100 = (uint64_t)v123;
    uint64_t v101 = v124;
    char v102 = swift_dynamicCast();
    char v103 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v122 + 56);
    if ((v102 & 1) == 0)
    {
      v103(v100, 1, 1, v101);
      sub_10001DAB4(v100, &qword_10163B9F0);
      goto LABEL_38;
    }
    v103(v100, 0, 1, v101);
    uint64_t v104 = v121;
    sub_1006CD470(v100, v121, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v105 = v129;
    uint64_t v106 = v101;
    uint64_t v107 = sub_10099C240((uint64_t)v129);
    CurrentValueSubject.value.getter();
    uint64_t v108 = v159;
    sub_100660124(v105, v159);
    if (!__OFADD__(v108, v107))
    {
      [a1 setConnectableDeviceCount:v108 + v107];
      uint64_t v109 = v120;
      sub_1006CC8F8(v104 + *(int *)(v106 + 24), v120, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        NSString v112 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [a1 setSerialNumber:v112];

        uint64_t v113 = type metadata accessor for OwnedBeaconRecord;
        uint64_t v114 = v104;
      }
      else
      {
        if (EnumCaseMultiPayload == 2)
        {
          sub_10000588C(&qword_1016555E0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          NSString v111 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [a1 setSerialNumber:v111];

          sub_1006CCE04(v104, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v109, v158);
          goto LABEL_38;
        }
        [a1 setSerialNumber:0];
        sub_1006CCE04(v104, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v113 = type metadata accessor for StableIdentifier;
        uint64_t v114 = v109;
      }
      sub_1006CCE04(v114, (uint64_t (*)(void))v113);
      goto LABEL_38;
    }
    __break(1u);
  }
  _Block_release(a3);
  __break(1u);
}

uint64_t sub_1006B257C()
{
  *(void *)(v1 + 184) = v0;
  return _swift_task_switch(sub_1006B259C, 0, 0);
}

uint64_t sub_1006B259C()
{
  uint64_t My = type metadata accessor for Feature.FindMy();
  *(void *)(v0 + 40) = My;
  *(void *)(v0 + 48) = sub_100691B60((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v2 = sub_10001D958((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v2, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (My)
  {
    uint64_t v3 = qword_1016375E8;
    swift_retain();
    if (v3 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 120))
    {
      sub_10001CEB0((long long *)(v0 + 96), v0 + 56);
      swift_release();
      sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
      uint64_t v11 = (uint64_t (__cdecl *)())((char *)&dword_1016391C8 + dword_1016391C8);
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_1006B2880;
      return v11();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170E840);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "managedCBPeripheral FF is disabled!", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t v10 = *(uint64_t (**)(void *))(v0 + 8);
    return v10(&_swiftEmptySetSingleton);
  }
  return result;
}

uint64_t sub_1006B2880(uint64_t a1)
{
  *(void *)(*(void *)v1 + 200) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1006B2980, 0, 0);
}

uint64_t sub_1006B2980()
{
  uint64_t v1 = *(void *)(v0 + 200);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 200);
    return _swift_task_switch(sub_1006B2AE8, v2, 0);
  }
  else
  {
    if (qword_101636EF0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E840);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "standaloneBeacons: missing StandaloneBeaconService service!", v6, 2u);
      swift_slowDealloc();
    }

    uint64_t v7 = *(uint64_t (**)(void *))(v0 + 8);
    return v7(&_swiftEmptySetSingleton);
  }
}

uint64_t sub_1006B2AE8()
{
  sub_100FBDD80(*(void *)(v0[25] + 128));
  v0[26] = 0;
  v0[27] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
  swift_release();
  return _swift_task_switch(sub_1006B2B8C, 0, 0);
}

uint64_t sub_1006B2B8C()
{
  uint64_t v1 = sub_100656744(*(void *)(v0 + 216));
  swift_release();
  uint64_t v2 = sub_101159B54((unint64_t)v1);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1006B2C2C()
{
  uint64_t v12 = v0;
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170E840);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[26];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    v0[20] = v5;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v7 = String.init<A>(describing:)();
    v0[21] = sub_1008FA0F0(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "standaloneBeacons error %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();

  uint64_t v9 = (uint64_t (*)(void *))v0[1];
  return v9(&_swiftEmptySetSingleton);
}

uint64_t sub_1006B2E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v72 = a2;
  uint64_t v5 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v5 - 8);
  uint64_t v74 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v71 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  unint64_t v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v69 = (uint64_t)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v70 = (char *)&v63 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v76 = (char *)&v63 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v63 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v67 = (uint64_t)&v63 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v63 - v21;
  uint64_t v23 = type metadata accessor for MACAddress();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = sub_100010324(v27, (uint64_t)qword_10170F068);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v73 = a1;
  v29(v26, a1, v23);
  uint64_t v66 = v28;
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  char v68 = v22;
  uint64_t v65 = v18;
  if (v32)
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    uint64_t v64 = a3;
    *(_DWORD *)uint64_t v33 = 141558275;
    uint64_t v77 = 1752392040;
    uint64_t v78 = v34;
    uint64_t v63 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 12) = 2081;
    sub_100691B60((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v77 = sub_1008FA0F0(v35, v36, &v78);
    unint64_t v8 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "beaconingIdentifier for %{private,mask.hash}s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    a3 = v64;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  }

  uint64_t v37 = (uint64_t)v76;
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v38 = (void *)qword_10170EE68;
  id v39 = [self sharedInstance];
  unsigned int v40 = [v39 isInternalBuild];

  if (v40)
  {
    NSString v41 = String._bridgeToObjectiveC()();
    id v42 = [v38 stringForKey:v41];

    if (v42)
    {
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v45 = v44;

      swift_bridgeObjectRetain_n();
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, v47))
      {
        Class v48 = (uint8_t *)swift_slowAlloc();
        uint64_t v78 = swift_slowAlloc();
        *(_DWORD *)Class v48 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v77 = sub_1008FA0F0(v43, v45, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "beaconingIdentifierOverride: %s", v48, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v59 = (uint64_t)v68;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v60 = v67;
      sub_10001D074(v59, v67, &qword_101638CF0);
      uint64_t v57 = type metadata accessor for UUID();
      uint64_t v58 = *(void *)(v57 - 8);
      uint64_t v61 = v58;
      goto LABEL_22;
    }
  }
  uint64_t v49 = v74;
  sub_100AE800C(v74);
  uint64_t v50 = v75;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v49, 1, v75) == 1)
  {
    sub_10001DAB4(v49, &qword_10163BB20);
LABEL_19:
    uint64_t v57 = type metadata accessor for UUID();
    uint64_t v58 = *(void *)(v57 - 8);
    uint64_t v59 = (uint64_t)v70;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v70, 1, 1, v57);
    uint64_t v60 = v69;
    sub_10001D074(v59, v69, &qword_101638CF0);
    uint64_t v61 = v58;
LABEL_22:
    Class isa = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v60, 1, v57) != 1)
    {
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v60, v57);
    }
    (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);

    return sub_10001DAB4(v59, &qword_101638CF0);
  }
  sub_1006CD470(v49, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
  if ((v8[*(int *)(v50 + 32)] & 1) == 0)
  {
    sub_1006CCE04((uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
    goto LABEL_19;
  }
  Class v51 = &v8[*(int *)(v50 + 24)];
  uint64_t v52 = type metadata accessor for UUID();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = (uint64_t)v65;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v65, v51, v52);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v52);
  sub_10001D074(v54, v37, &qword_101638CF0);
  Class v55 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v37, 1, v52) != 1)
  {
    Class v55 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v37, v52);
  }
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v55);

  sub_10001DAB4(v54, &qword_101638CF0);
  return sub_1006CCE04((uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_1006B3848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v48 = a2;
  uint64_t v5 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v5 - 8);
  uint64_t v50 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v47 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v44 = (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MACAddress();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v40 - v13;
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = sub_100010324(v15, (uint64_t)qword_10170F068);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v51 = a1;
  id v42 = v17;
  v17(v14, a1, v8);
  uint64_t v43 = v16;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v46 = a3;
    uint64_t v21 = v20;
    uint64_t v22 = swift_slowAlloc();
    NSString v41 = v12;
    *(_DWORD *)uint64_t v21 = 141558275;
    uint64_t v52 = 1752392040;
    uint64_t v53 = v22;
    uint64_t v45 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2081;
    sub_100691B60((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v52 = sub_1008FA0F0(v23, v24, &v53);
    uint64_t v9 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v9 + 8);
    v25(v14, v8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "fetchFindMyNetworkStatus for %{private,mask.hash}s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    uint64_t v12 = v41;
    swift_slowDealloc();
    a3 = v46;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v25 = *(void (**)(char *, uint64_t))(v9 + 8);
    v25(v14, v8);
  }

  uint64_t v27 = v50;
  uint64_t v26 = v51;
  sub_100AE800C(v50);
  uint64_t v28 = v49;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v27, 1, v49) == 1)
  {
    sub_10001DAB4(v27, &qword_10163BB20);
    v42(v12, v26, v8);
    uint64_t v29 = v12;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v46 = a3;
      uint64_t v33 = (uint8_t *)v32;
      uint64_t v53 = swift_slowAlloc();
      uint64_t v45 = v9;
      *(_DWORD *)uint64_t v33 = 136315138;
      sub_100691B60((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v52 = sub_1008FA0F0(v34, v35, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v25(v29, v8);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "No beacon group for %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v46;
      swift_slowDealloc();
    }
    else
    {
      v25(v29, v8);
    }

    sub_1003A4778();
    swift_allocError();
    *uint64_t v38 = 1;
    id v39 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(a3 + 16))(a3, 0, v39);

    return swift_errorRelease();
  }
  else
  {
    uint64_t v36 = v44;
    sub_1006CD470(v27, v44, type metadata accessor for OwnedBeaconGroup);
    (*(void (**)(uint64_t, void, void))(a3 + 16))(a3, *(unsigned __int8 *)(v36 + *(int *)(v28 + 32)), 0);
    return sub_1006CCE04(v36, type metadata accessor for OwnedBeaconGroup);
  }
}

uint64_t sub_1006B3EC0(uint64_t a1, int a2, NSObject *a3, void (**a4)(const void *, void *))
{
  uint64_t v191 = a3;
  uint64_t v163 = sub_10000588C(&qword_101642800);
  uint64_t v161 = *(void *)(v163 - 8);
  __chkstk_darwin(v163);
  uint64_t v160 = (char *)&v157 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = sub_10000588C(&qword_101642808);
  uint64_t v164 = *(void *)(v165 - 8);
  __chkstk_darwin(v165);
  uint64_t v162 = (char *)&v157 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = sub_10000588C(&qword_101642810);
  uint64_t v167 = *(void *)(v168 - 8);
  __chkstk_darwin(v168);
  uint64_t v166 = (char *)&v157 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = sub_10000588C(&qword_101642818);
  uint64_t v170 = *(void *)(v171 - 8);
  __chkstk_darwin(v171);
  uint64_t v169 = (char *)&v157 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v178 = type metadata accessor for DispatchTime();
  uint64_t v175 = *(void *)(v178 - 8);
  uint64_t v11 = __chkstk_darwin(v178);
  uint64_t v176 = (char *)&v157 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v177 = (char *)&v157 - v13;
  uint64_t v14 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v14 - 8);
  uint64_t v187 = (void (*)(char *, uint64_t))((char *)&v157 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v186 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v190 = *(void *)(v186 - 8);
  uint64_t v16 = __chkstk_darwin(v186);
  uint64_t v159 = (uint64_t)&v157 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v173 = (uint64_t)&v157 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v172 = (uint64_t)&v157 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v174 = (uint64_t)&v157 - v23;
  uint64_t v158 = v24;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v157 - v25;
  uint64_t v27 = type metadata accessor for MACAddress();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v181 = (char *)&v157 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v157 - v31;
  uint64_t v33 = swift_allocObject();
  uint64_t v184 = a4;
  uint64_t v185 = v33;
  *(void *)(v33 + 16) = a4;
  _Block_copy(a4);
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  uint64_t v35 = sub_100010324(v34, (uint64_t)qword_10170F068);
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  uint64_t v188 = a1;
  char v180 = v36;
  v36(v32, a1, v27);
  uint64_t v189 = v35;
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  int v182 = a2;
  uint64_t v179 = v28;
  if (v39)
  {
    uint64_t v40 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    uint64_t v183 = v26;
    uint64_t v195 = v41;
    *(_DWORD *)uint64_t v40 = 67240450;
    LODWORD(v193) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v40 + 8) = 2082;
    sub_100691B60((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v193 = sub_1008FA0F0(v42, v43, &v195);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v44 = *(void (**)(char *, uint64_t))(v28 + 8);
    v44(v32, v27);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "setFindMyNetworkStatus %{BOOL,public}d for %{public}s", (uint8_t *)v40, 0x12u);
    swift_arrayDestroy();
    uint64_t v26 = v183;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v44 = *(void (**)(char *, uint64_t))(v28 + 8);
    v44(v32, v27);
  }

  uint64_t v45 = (uint64_t)v191;
  uint64_t v47 = v187;
  uint64_t v46 = v188;
  sub_100AE800C((uint64_t)v187);
  if ((*(unsigned int (**)(void (*)(char *, uint64_t), uint64_t, uint64_t))(v190 + 48))(v47, 1, v186) != 1)
  {
    sub_1006CD470((uint64_t)v47, (uint64_t)v26, type metadata accessor for OwnedBeaconGroup);
    if (v182)
    {
      sub_10065A354(1, (uint64_t)v26, (uint64_t)sub_1001DF814, v185);
      sub_1006CCE04((uint64_t)v26, type metadata accessor for OwnedBeaconGroup);
      return swift_release();
    }
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = 0;
    uint64_t v57 = (unint64_t *)(v56 + 16);
    uint64_t v58 = dispatch_group_create();
    dispatch_group_enter(v58);
    swift_retain();
    uint64_t v59 = v58;
    sub_1003B0814((uint64_t)v26, 1, v45, v56, v59);

    swift_release();
    uint64_t v60 = v176;
    static DispatchTime.now()();
    uint64_t v61 = v177;
    + infix(_:_:)();
    uint64_t v62 = v175 + 8;
    uint64_t v63 = *(void (**)(char *, uint64_t))(v175 + 8);
    uint64_t v64 = v178;
    v63(v60, v178);
    OS_dispatch_group.wait(timeout:)();
    uint64_t v187 = v63;
    v63(v61, v64);
    char v65 = static DispatchTimeoutResult.== infix(_:_:)();
    uint64_t v188 = v56;
    uint64_t v183 = v26;
    if (v65)
    {
      uint64_t v66 = v174;
      sub_1006CC8F8((uint64_t)v26, v174, type metadata accessor for OwnedBeaconGroup);
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v69 = (uint8_t *)swift_slowAlloc();
        uint64_t v195 = swift_slowAlloc();
        uint64_t v175 = v62;
        *(_DWORD *)uint64_t v69 = 136315138;
        uint64_t v70 = sub_1004D6904();
        unint64_t v193 = sub_1008FA0F0(v70, v71, &v195);
        uint64_t v56 = v188;
        uint64_t v62 = v175;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1006CCE04(v66, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "Timed out waiting for pairing lock removal %s", v69, 0xCu);
        swift_arrayDestroy();
        uint64_t v26 = v183;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1006CCE04(v66, type metadata accessor for OwnedBeaconGroup);
      }

      sub_1003A4778();
      uint64_t v72 = swift_allocError();
      unsigned char *v73 = 9;
      swift_beginAccess();
      unint64_t *v57 = v72;
      swift_errorRelease();
    }
    swift_beginAccess();
    unint64_t v74 = *v57;
    if (*v57)
    {
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v77 = (uint8_t *)swift_slowAlloc();
        unint64_t v193 = swift_slowAlloc();
        *(_DWORD *)uint64_t v77 = 136446210;
        unint64_t v194 = v74;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v78 = String.init<A>(describing:)();
        unint64_t v194 = sub_1008FA0F0(v78, v79, (uint64_t *)&v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "Unable to remove pairing lock. Error %{public}s", v77, 0xCu);
        swift_arrayDestroy();
        uint64_t v26 = v183;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_errorRetain();
      uint64_t v95 = (void *)_convertErrorToNSError(_:)();
      v184[2](v184, v95);

      swift_errorRelease();
      swift_errorRelease();

LABEL_46:
      uint64_t v146 = (uint64_t)v26;
LABEL_47:
      sub_1006CCE04(v146, type metadata accessor for OwnedBeaconGroup);
      swift_release();
      return swift_release();
    }
    dispatch_group_enter(v59);
    uint64_t v80 = swift_allocObject();
    *(void *)(v80 + 16) = v56;
    *(void *)(v80 + 24) = v59;
    swift_retain();
    uint64_t v81 = v59;
    sub_1003858E0((uint64_t)v26, (uint64_t)sub_1006CCE84, v80);
    swift_release();
    char v82 = v176;
    static DispatchTime.now()();
    unint64_t v83 = v177;
    + infix(_:_:)();
    uint64_t v84 = v178;
    uint64_t v85 = v187;
    v187(v82, v178);
    OS_dispatch_group.wait(timeout:)();
    v85(v83, v84);
    if (static DispatchTimeoutResult.== infix(_:_:)())
    {
      uint64_t v86 = v172;
      sub_1006CC8F8((uint64_t)v26, v172, type metadata accessor for OwnedBeaconGroup);
      uint64_t v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v87, v88))
      {
        uint64_t v89 = v81;
        uint64_t v90 = v86;
        uint64_t v91 = (uint8_t *)swift_slowAlloc();
        unint64_t v193 = swift_slowAlloc();
        uint64_t v175 = v62;
        *(_DWORD *)uint64_t v91 = 136315138;
        uint64_t v92 = sub_1004D6904();
        unint64_t v194 = sub_1008FA0F0(v92, v93, (uint64_t *)&v193);
        uint64_t v56 = v188;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v94 = v90;
        uint64_t v81 = v89;
        sub_1006CCE04(v94, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Timed out waiting for unpair command response %s", v91, 0xCu);
        swift_arrayDestroy();
        uint64_t v26 = v183;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1006CCE04(v86, type metadata accessor for OwnedBeaconGroup);
      }

      sub_1003A4778();
      uint64_t v96 = swift_allocError();
      *uint64_t v97 = 9;
      unint64_t *v57 = v96;
      swift_errorRelease();
    }
    unint64_t v98 = *v57;
    if (*v57)
    {
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      char v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v99, v100))
      {
        uint64_t v101 = (uint8_t *)swift_slowAlloc();
        unint64_t v193 = swift_slowAlloc();
        uint64_t v186 = (uint64_t)v57;
        *(_DWORD *)uint64_t v101 = 136446210;
        unint64_t v194 = v98;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v102 = String.init<A>(describing:)();
        unint64_t v194 = sub_1008FA0F0(v102, v103, (uint64_t *)&v193);
        uint64_t v56 = v188;
        uint64_t v57 = (unint64_t *)v186;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "Unpair command failed. Error %{public}s", v101, 0xCu);
        swift_arrayDestroy();
        uint64_t v26 = v183;
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      unint64_t *v57 = 0;
      swift_errorRelease();
    }
    dispatch_group_enter(v81);
    uint64_t v104 = swift_allocObject();
    *(void *)(v104 + 16) = v56;
    *(void *)(v104 + 24) = v81;
    swift_retain();
    uint64_t v105 = v81;
    sub_10065A354(0, (uint64_t)v26, (uint64_t)sub_1006CD6E0, v104);
    swift_release();
    uint64_t v106 = v176;
    static DispatchTime.now()();
    uint64_t v107 = v177;
    + infix(_:_:)();
    uint64_t v108 = v178;
    uint64_t v109 = v187;
    v187(v106, v178);
    OS_dispatch_group.wait(timeout:)();
    v109(v107, v108);
    if (static DispatchTimeoutResult.== infix(_:_:)())
    {
      uint64_t v110 = v173;
      sub_1006CC8F8((uint64_t)v26, v173, type metadata accessor for OwnedBeaconGroup);
      NSString v111 = Logger.logObject.getter();
      os_log_type_t v112 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v111, v112))
      {
        uint64_t v113 = (uint8_t *)swift_slowAlloc();
        unint64_t v193 = swift_slowAlloc();
        *(_DWORD *)uint64_t v113 = 136315138;
        uint64_t v114 = sub_1004D6904();
        unint64_t v194 = sub_1008FA0F0(v114, v115, (uint64_t *)&v193);
        uint64_t v56 = v188;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1006CCE04(v110, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v111, v112, "Timed out waiting for FMNS status update %s", v113, 0xCu);
        swift_arrayDestroy();
        uint64_t v26 = v183;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1006CCE04(v110, type metadata accessor for OwnedBeaconGroup);
      }

      sub_1003A4778();
      uint64_t v116 = swift_allocError();
      *uint64_t v117 = 9;
      unint64_t *v57 = v116;
      swift_errorRelease();
    }
    unint64_t v118 = *v57;
    if (*v57)
    {
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v119 = Logger.logObject.getter();
      os_log_type_t v120 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v119, v120))
      {
        uint64_t v121 = (uint8_t *)swift_slowAlloc();
        unint64_t v193 = swift_slowAlloc();
        *(_DWORD *)uint64_t v121 = 136446210;
        unint64_t v194 = v118;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v122 = String.init<A>(describing:)();
        unint64_t v194 = sub_1008FA0F0(v122, v123, (uint64_t *)&v193);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v119, v120, "Unable to update FMNS status. Error %{public}s", v121, 0xCu);
        swift_arrayDestroy();
        uint64_t v26 = v183;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_errorRetain();
      uint64_t v145 = (void *)_convertErrorToNSError(_:)();
      v184[2](v184, v145);

      swift_errorRelease();
      swift_errorRelease();

      goto LABEL_46;
    }
    dispatch_group_enter(v105);
    uint64_t v124 = swift_allocObject();
    *(void *)(v124 + 16) = v56;
    *(void *)(v124 + 24) = v105;
    unint64_t v194 = (unint64_t)_swiftEmptyArrayStorage;
    swift_retain_n();
    unint64_t v125 = v105;
    uint64_t v126 = sub_1004D1434();
    uint64_t v127 = (uint64_t)v191;
    swift_retain();
    sub_1003A6558(v126, v127, &v194, 0);
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v128 = v194;
    if (v194 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v148 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v148) {
        goto LABEL_43;
      }
    }
    else if (*(void *)((v194 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_43:
      uint64_t v129 = swift_allocObject();
      *(void *)(v129 + 16) = 0;
      unint64_t v193 = v128;
      swift_bridgeObjectRetain();
      sub_10000588C(&qword_101642820);
      uint64_t v186 = (uint64_t)v57;
      sub_10000588C(&qword_101642828);
      sub_100062734(&qword_101642830, &qword_101642820);
      sub_100062734(&qword_101642838, &qword_101642828);
      uint64_t v130 = v160;
      Publishers.MergeMany.init<A>(_:)();
      sub_100062734(&qword_101642840, &qword_101642800);
      id v131 = v162;
      uint64_t v191 = v125;
      uint64_t v132 = v163;
      Publisher.collect()();
      (*(void (**)(char *, uint64_t))(v161 + 8))(v130, v132);
      sub_10000588C(&qword_101642848);
      sub_100062734(&qword_101642850, &qword_101642808);
      id v133 = v166;
      uint64_t v134 = v165;
      Publisher.map<A>(_:)();
      (*(void (**)(char *, uint64_t))(v164 + 8))(v131, v134);
      sub_10000588C(&qword_101642858);
      sub_100062734(&qword_101642860, &qword_101642810);
      sub_100062734(&qword_101642868, &qword_101642858);
      id v135 = v169;
      uint64_t v136 = v168;
      Publisher.catch<A>(_:)();
      (*(void (**)(char *, uint64_t))(v167 + 8))(v133, v136);
      uint64_t v137 = v159;
      sub_1006CC8F8((uint64_t)v183, v159, type metadata accessor for OwnedBeaconGroup);
      unint64_t v138 = (*(unsigned __int8 *)(v190 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v190 + 80);
      unint64_t v139 = (v158 + v138 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v140 = swift_allocObject();
      uint64_t v141 = v137;
      unint64_t v125 = v191;
      sub_1006CD470(v141, v140 + v138, type metadata accessor for OwnedBeaconGroup);
      uint64_t v142 = (void (**)(uint64_t))(v140 + v139);
      *uint64_t v142 = sub_1006CD6E0;
      v142[1] = (void (*)(uint64_t))v124;
      *(void *)(v140 + ((v139 + 23) & 0xFFFFFFFFFFFFFFF8)) = v129;
      sub_100062734(&qword_101642870, &qword_101642818);
      swift_retain();
      swift_retain();
      uint64_t v143 = v171;
      uint64_t v144 = Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v170 + 8))(v135, v143);
      swift_beginAccess();
      *(void *)(v129 + 16) = v144;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v57 = (unint64_t *)v186;
      swift_release();
      goto LABEL_51;
    }
    *(void *)(v56 + 16) = 0;
    swift_errorRelease();
    dispatch_group_leave(v125);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_51:

    uint64_t v149 = *v57;
    if (*v57)
    {
      swift_errorRetain();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v150 = Logger.logObject.getter();
      os_log_type_t v151 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v150, v151))
      {
        uint64_t v152 = (uint8_t *)swift_slowAlloc();
        unint64_t v194 = swift_slowAlloc();
        *(_DWORD *)uint64_t v152 = 136446210;
        uint64_t v192 = v149;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v153 = String.init<A>(describing:)();
        uint64_t v192 = sub_1008FA0F0(v153, v154, (uint64_t *)&v194);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v150, v151, "Unable to remove related records. Error %{public}s", v152, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      uint64_t v155 = (uint64_t)v183;
      swift_errorRetain();
      uint64_t v156 = (void *)_convertErrorToNSError(_:)();
      v184[2](v184, v156);

      swift_errorRelease();
      swift_errorRelease();

      uint64_t v146 = v155;
    }
    else
    {
      v184[2](v184, 0);

      uint64_t v146 = (uint64_t)v183;
    }
    goto LABEL_47;
  }
  sub_10001DAB4((uint64_t)v47, &qword_10163BB20);
  uint64_t v48 = v181;
  v180(v181, v46, v27);
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    uint64_t v195 = swift_slowAlloc();
    *(_DWORD *)uint64_t v51 = 136446210;
    sub_100691B60((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v193 = sub_1008FA0F0(v52, v53, &v195);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v44(v48, v27);
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "No beacon group for %{public}s", v51, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v44(v48, v27);
  }

  sub_1003A4778();
  swift_allocError();
  *uint64_t v54 = 1;
  Class v55 = (void *)_convertErrorToNSError(_:)();
  v184[2](v184, v55);

  swift_errorRelease();
  return swift_release();
}

uint64_t sub_1006B5D00(void *a1, void *a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170F068);
  id v12 = a1;
  swift_bridgeObjectRetain_n();
  id v13 = v12;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1008FA0F0(v17, v18, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_1008FA0F0((uint64_t)a2, (unint64_t)a3, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "simulateAccessoryPairing type: %s name: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;
  if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22)
  {
    swift_bridgeObjectRelease_n();
LABEL_15:
    if ((sub_1011468FC((uint64_t)a2, (uint64_t)a3) & 1) == 0) {
      goto LABEL_19;
    }
    return (*(uint64_t (**)(uint64_t, void))(a6 + 16))(a6, 0);
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v24) {
    goto LABEL_15;
  }
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;
  if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v27 == v28)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
    {
      sub_1003A4778();
      swift_allocError();
      *uint64_t v33 = 6;
      goto LABEL_20;
    }
  }
  if (sub_101147300(a2, a3, a4 & 1)) {
    return (*(uint64_t (**)(uint64_t, void))(a6 + 16))(a6, 0);
  }
LABEL_19:
  sub_1003A4778();
  swift_allocError();
  *uint64_t v31 = 0;
LABEL_20:
  uint64_t v32 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void *))(a6 + 16))(a6, v32);

  return swift_errorRelease();
}

void sub_1006B60EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v146 = a2;
  uint64_t v154 = type metadata accessor for Date();
  unint64_t v5 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  uint64_t v153 = (uint64_t)&v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = type metadata accessor for HashAlgorithm();
  uint64_t v131 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  os_log_type_t v151 = (char *)&v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v161 = *(void *)(v159 - 8);
  __chkstk_darwin(v159);
  uint64_t v158 = (uint64_t *)((char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101660670);
  __chkstk_darwin(v9 - 8);
  uint64_t v157 = (uint64_t)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v11 - 8);
  uint64_t v150 = (char *)&v130 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101660680);
  uint64_t v162 = *(void **)(v13 - 8);
  uint64_t v163 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v147 = (void (**)(char *, uint64_t))((char *)&v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  uint64_t v149 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v130 - v16);
  uint64_t v145 = (void (**)(void, void))type metadata accessor for URL();
  uint64_t v164 = *(v145 - 1);
  uint64_t v17 = __chkstk_darwin(v145);
  unint64_t v139 = (char *)&v130 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v140 = (char *)&v130 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v130 - v21;
  uint64_t v23 = sub_10000588C((uint64_t *)&unk_101660A60);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v144 = (char *)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v148 = (void (**)(char *, void, uint64_t))((char *)&v130 - v26);
  unint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = *(char **)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v141 = (char *)&v130 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v166 = (char *)&v130 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v165 = (char *)&v130 - v34;
  __chkstk_darwin(v33);
  unint64_t v36 = (unint64_t)&v130 - v35;
  if (qword_101637660 != -1) {
LABEL_41:
  }
    swift_once();
  uint64_t v133 = type metadata accessor for Logger();
  sub_100010324(v133, (uint64_t)qword_10170F838);
  uint64_t v155 = (void (*)(unint64_t, uint64_t, unint64_t))*((void *)v28 + 2);
  uint64_t v156 = v28 + 16;
  v155(v36, a1, v27);
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  unint64_t v160 = v27;
  uint64_t v134 = a3;
  uint64_t v143 = a1;
  uint64_t v142 = v28;
  unint64_t v132 = v5;
  if (v39)
  {
    uint64_t v40 = swift_slowAlloc();
    v168[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 141558275;
    uint64_t v169 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v40 + 12) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v169 = sub_1008FA0F0(v41, v42, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v43 = (void (*)(unint64_t, unint64_t))*((void *)v28 + 1);
    v28 += 8;
    v43(v36, v160);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "OwnedDeviceKeyRecord for uuid %{private,mask.hash}s.", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    unint64_t v27 = v160;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v44 = (void (*)(unint64_t, unint64_t))*((void *)v28 + 1);
    v28 += 8;
    v44(v36, v27);
  }

  uint64_t v146 = *(void *)(*(void *)(v146 + 280) + 160);
  if (qword_1016374B0 != -1) {
    swift_once();
  }
  uint64_t v45 = v145;
  sub_100010324((uint64_t)v145, (uint64_t)qword_10170F308);
  UUID.uuidString.getter();
  uint64_t v46 = v22;
  unint64_t v138 = v22;
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  uint64_t v47 = (void (*)(char *, char *, void (**)(void, void)))v164[2];
  uint64_t v48 = v140;
  uint64_t v49 = v45;
  v47(v140, v46, v45);
  uint64_t v50 = v163;
  uint64_t v51 = (uint64_t)v147;
  uint64_t v137 = (char *)v147 + *(int *)(v163 + 40);
  uint64_t v52 = (uint64_t)v137;
  uint64_t v135 = type metadata accessor for DirectorySequence();
  uint64_t v136 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v135 - 8) + 56);
  v136(v52, 1, 1, v135);
  unint64_t v53 = v49;
  v47((char *)v51, v48, v49);
  *(void *)(v51 + *(int *)(v50 + 36)) = v146;
  v47(v139, v48, v49);
  swift_retain();
  uint64_t v54 = (uint64_t)v150;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  Class v55 = (void (*)(char *, void))v164[1];
  ++v164;
  v55(v48, v49);
  v136(v54, 0, 1, v135);
  sub_100062604(v54, (uint64_t)v137, (uint64_t *)&unk_101653C90);
  unint64_t v5 = (unint64_t)v149;
  sub_10001D608(v51, (uint64_t)v149, &qword_101660680);
  uint64_t v56 = v163;
  uint64_t v57 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v162[7];
  uint64_t v58 = (uint64_t)v144;
  v57(v144, 1, 1, v163);
  sub_10001DAB4(v58, &qword_10164B3C8);
  sub_10001D608(v5, v58, &qword_101660680);
  v57((char *)v58, 0, 1, v56);
  uint64_t v59 = (void (**)(void, void, void))v148;
  sub_10001D608(v58, (uint64_t)v148, (uint64_t *)&unk_101660A60);
  v55(v138, v53);
  sub_10000588C(&qword_101660A70);
  uint64_t v60 = (char *)swift_allocObject();
  sub_10001D608((uint64_t)v59, (uint64_t)&v60[*(void *)(class metadata base offset for _SequenceBox + *(void *)v60 + 16)], (uint64_t *)&unk_101660A60);
  uint64_t v169 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v61 = *(void *)(class metadata base offset for _SequenceBox + *(void *)v60 + 16);
  uint64_t v140 = v60;
  uint64_t v62 = (uint64_t)&v60[v61];
  sub_10000588C(&qword_10164B3E0);
  uint64_t v63 = (char *)swift_allocObject();
  sub_10001D074(v62, (uint64_t)&v63[*(void *)(class metadata base offset for _IteratorBox + *(void *)v63 + 16)], (uint64_t *)&unk_101660A60);
  uint64_t v64 = &v63[*(void *)(class metadata base offset for _IteratorBox + *(void *)v63 + 16)];
  unint64_t v139 = v63;
  swift_retain();
  uint64_t v65 = v157;
  uint64_t v150 = v64;
  sub_100B22DEC(v157);
  uint64_t v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v161 + 48);
  uint64_t v67 = (int *)v159;
  v161 += 48;
  uint64_t v149 = v66;
  int v68 = v66(v65, 1, v159);
  uint64_t v69 = v158;
  if (v68 != 1)
  {
    uint64_t v80 = 0;
    uint64_t v148 = (void (**)(char *, void, uint64_t))(v131 + 104);
    uint64_t v147 = (void (**)(char *, uint64_t))(v131 + 8);
    LODWORD(v146) = enum case for HashAlgorithm.sha256(_:);
    uint64_t v145 = (void (**)(void, void))(v132 + 8);
    uint64_t v144 = v142 + 8;
    while (2)
    {
      sub_1006CD470(v65, (uint64_t)v69, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v81 = (void (*)(char *, char *, unint64_t))v155;
      v155((unint64_t)v165, (uint64_t)v69 + v67[5], v27);
      v81(v166, (char *)v69 + v67[6], v27);
      char v82 = (uint64_t *)((char *)v69 + v67[7]);
      uint64_t v83 = *v82;
      unint64_t v27 = v82[1];
      sub_1000361E0(*v82, v27);
      sub_1000361E0(v83, v27);
      uint64_t v84 = sub_100A948F8(v83, v27);
      a1 = v80;
      if (!v80)
      {
        uint64_t v85 = v84;
        uint64_t v22 = 0;
        a1 = 0;
        a3 = (void *)sub_100A90C58(v84, 0);
        unint64_t v36 = (unint64_t)v86;
        CCECCryptorRelease();
        sub_10001CFB8(v83, v27);
        unint64_t v87 = v36 >> 62;
        switch(v36 >> 62)
        {
          case 1uLL:
            LODWORD(v88) = HIDWORD(a3) - a3;
            if (__OFSUB__(HIDWORD(a3), a3)) {
              goto LABEL_38;
            }
            uint64_t v88 = (int)v88;
LABEL_23:
            if (v88 == 28)
            {
              uint64_t v164 = a3;
              sub_10001CFB8(v83, v27);
              sub_1000361E0(v83, v27);
              sub_1000361E0(v83, v27);
              a3 = (void *)sub_100A948F8(v83, v27);
              uint64_t v22 = 0;
              a1 = 0;
              uint64_t v85 = sub_100A90C58((uint64_t)a3, 0);
              unint64_t v5 = v92;
              CCECCryptorRelease();
              sub_10001CFB8(v83, v27);
              unint64_t v93 = v5 >> 62;
              switch(v5 >> 62)
              {
                case 1uLL:
                  LODWORD(v94) = HIDWORD(v85) - v85;
                  if (__OFSUB__(HIDWORD(v85), v85)) {
                    goto LABEL_40;
                  }
                  uint64_t v94 = (int)v94;
LABEL_31:
                  if (v94 != 28) {
                    goto LABEL_47;
                  }
                  uint64_t v97 = (char *)v36;
                  sub_10001CFB8(v83, v27);
                  unint64_t v98 = v151;
                  uint64_t v99 = v152;
                  (*v148)(v151, v146, v152);
                  uint64_t v100 = Data.hash(algorithm:)();
                  unint64_t v102 = v101;
                  (*v147)(v98, v99);
                  sub_10001CFB8(v85, v5);
                  uint64_t v104 = v153;
                  sub_100B23648(v69, v153);
                  uint64_t v163 = 0;
                  uint64_t v162 = objc_allocWithZone((Class)SPOwnedDeviceKeyRecord);
                  Class isa = UUID._bridgeToObjectiveC()().super.isa;
                  unint64_t v5 = (unint64_t)UUID._bridgeToObjectiveC()().super.isa;
                  uint64_t v106 = (uint64_t)v164;
                  unint64_t v107 = (unint64_t)v97;
                  Class v108 = Data._bridgeToObjectiveC()().super.isa;
                  Class v109 = Data._bridgeToObjectiveC()().super.isa;
                  Class v110 = Date._bridgeToObjectiveC()().super.isa;
                  uint64_t v162 = [v162 initWithIdentifier:isa deviceIdentifier:v5 advertisement:v108 hashedAdvertisement:v109 creationDate:v110];

                  sub_10001CFB8(v100, v102);
                  sub_10001CFB8(v106, v107);
                  (*v145)(v104, v154);
                  uint64_t v28 = v144;
                  NSString v111 = *(void (**)(char *, unint64_t))v144;
                  unint64_t v27 = v160;
                  (*(void (**)(char *, unint64_t))v144)(v166, v160);
                  v111(v165, v27);
                  os_log_type_t v112 = v162;
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                  if (*(void *)((v169 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v169 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();

                  uint64_t v69 = v158;
                  sub_1006CCE04((uint64_t)v158, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
                  uint64_t v65 = v157;
                  sub_100B22DEC(v157);
                  uint64_t v67 = (int *)v159;
                  int v113 = v149(v65, 1, v159);
                  uint64_t v80 = v163;
                  if (v113 == 1) {
                    goto LABEL_8;
                  }
                  continue;
                case 2uLL:
                  uint64_t v96 = *(void *)(v85 + 16);
                  uint64_t v95 = *(void *)(v85 + 24);
                  BOOL v91 = __OFSUB__(v95, v96);
                  uint64_t v94 = v95 - v96;
                  if (!v91) {
                    goto LABEL_31;
                  }
                  goto LABEL_39;
                case 3uLL:
                  uint64_t v129 = 0;
                  goto LABEL_63;
                default:
                  uint64_t v94 = BYTE6(v5);
                  goto LABEL_31;
              }
            }
            uint64_t v83 = (uint64_t)a3;
            if (v87 != 1) {
              goto LABEL_51;
            }
            LODWORD(v93) = HIDWORD(a3) - a3;
            if (!__OFSUB__(HIDWORD(a3), a3)) {
              goto LABEL_68;
            }
            __break(1u);
LABEL_47:
            if (v93 != 1) {
              goto LABEL_55;
            }
            LODWORD(v87) = HIDWORD(v85) - v85;
            if (!__OFSUB__(HIDWORD(v85), v85))
            {
              uint64_t v129 = (int)v87;
LABEL_63:
              sub_10013019C();
              uint64_t v122 = swift_allocError();
              *(void *)uint64_t v124 = 28;
              *(void *)(v124 + 8) = v129;
              *(unsigned char *)(v124 + 16) = 0;
              swift_willThrow();
              uint64_t v125 = v85;
              for (unint64_t i = v5; ; unint64_t i = v36)
              {
                sub_10001CFB8(v125, i);
                v168[0] = 0;
                v168[1] = 0xE000000000000000;
                _StringGuts.grow(_:)(35);
                v128._object = (void *)0x80000001013F3B70;
                v128._uint64_t countAndFlagsBits = 0xD000000000000021;
                String.append(_:)(v128);
                uint64_t v167 = v122;
                sub_10000588C(&qword_101638D40);
                _print_unlocked<A, B>(_:_:)();
                _Block_release(v134);
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
LABEL_68:
                uint64_t v85 = (int)v93;
LABEL_65:
                sub_10013019C();
                uint64_t v122 = swift_allocError();
                *(void *)uint64_t v127 = 28;
                *(void *)(v127 + 8) = v85;
                *(unsigned char *)(v127 + 16) = 0;
                swift_willThrow();
LABEL_66:
                uint64_t v125 = v83;
              }
            }
            __break(1u);
LABEL_51:
            if (v87 != 2)
            {
              uint64_t v85 = BYTE6(v36);
              goto LABEL_65;
            }
            uint64_t v115 = *(void *)(v83 + 16);
            unint64_t v93 = *(void *)(v83 + 24);
            uint64_t v85 = v93 - v115;
            if (!__OFSUB__(v93, v115)) {
              goto LABEL_65;
            }
            __break(1u);
LABEL_55:
            if (v93 != 2)
            {
              uint64_t v129 = BYTE6(v5);
              goto LABEL_63;
            }
            uint64_t v117 = *(void *)(v85 + 16);
            uint64_t v116 = *(void *)(v85 + 24);
            uint64_t v129 = v116 - v117;
            if (!__OFSUB__(v116, v117)) {
              goto LABEL_63;
            }
            __break(1u);
            break;
          case 2uLL:
            uint64_t v90 = a3[2];
            uint64_t v89 = a3[3];
            BOOL v91 = __OFSUB__(v89, v90);
            uint64_t v88 = v89 - v90;
            if (!v91) {
              goto LABEL_23;
            }
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            goto LABEL_41;
          case 3uLL:
            uint64_t v83 = (uint64_t)a3;
            uint64_t v85 = 0;
            goto LABEL_65;
          default:
            uint64_t v88 = BYTE6(v36);
            goto LABEL_23;
        }
      }
      break;
    }
    static os_log_type_t.error.getter();
    if (qword_101636F48 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v118 = swift_allocObject();
    *(_OWORD *)(v118 + 16) = xmmword_101342130;
    v168[0] = a1;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v119 = String.init<A>(describing:)();
    uint64_t v121 = v120;
    *(void *)(v118 + 56) = &type metadata for String;
    *(void *)(v118 + 64) = sub_10000B4CC();
    *(void *)(v118 + 32) = v119;
    *(void *)(v118 + 40) = v121;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_100130148();
    uint64_t v122 = swift_allocError();
    *unint64_t v123 = 0;
    swift_willThrow();
    swift_errorRelease();
    unint64_t v36 = v27;
    goto LABEL_66;
  }
LABEL_8:
  uint64_t v70 = v139;
  swift_release();
  swift_setDeallocating();
  sub_10001DAB4((uint64_t)v70 + *(void *)(class metadata base offset for _IteratorBox + *v70 + 16), (uint64_t *)&unk_101660A60);
  swift_deallocClassInstance();
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  sub_100010324(v133, (uint64_t)qword_10170E840);
  unint64_t v71 = v169;
  uint64_t v72 = v141;
  v155((unint64_t)v141, v143, v27);
  swift_bridgeObjectRetain_n();
  uint64_t v73 = Logger.logObject.getter();
  os_log_type_t v74 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v73, v74))
  {
    uint64_t v75 = swift_slowAlloc();
    v168[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v75 = 134218499;
    if (v71 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v76 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v76 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v167 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v75 + 12) = 2160;
    uint64_t v167 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v75 + 22) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v77 = v141;
    uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v167 = sub_1008FA0F0(v78, v79, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*((void (**)(char *, unint64_t))v142 + 1))(v77, v27);
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "Got %ld ownedDeviceKeyRecord for %{private,mask.hash}s.", (uint8_t *)v75, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*((void (**)(char *, unint64_t))v142 + 1))(v72, v27);
  }

  swift_beginAccess();
  sub_10001D4B0(0, &qword_10164B3D8);
  Class v114 = Array._bridgeToObjectiveC()().super.isa;
  (*((void (**)(const void *, Class))v134 + 2))(v134, v114);
  swift_bridgeObjectRelease();
  swift_release();
}

uint64_t sub_1006B7980(uint64_t a1, void *a2, uint64_t a3)
{
  id v92 = a2;
  uint64_t v85 = type metadata accessor for Date();
  uint64_t v84 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v89 = (uint64_t)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for HashAlgorithm();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v81 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v7 = __chkstk_darwin(v87);
  uint64_t v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (uint64_t *)((char *)&v80 - v10);
  uint64_t v102 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v102 - 8);
  uint64_t v13 = __chkstk_darwin(v102);
  uint64_t v90 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v88 = (char *)&v80 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v80 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v96 = (char *)&v80 - v21;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v80 - v22;
  if (qword_101637660 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = sub_100010324(v24, (uint64_t)qword_10170F838);
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v99 = v12 + 16;
  uint64_t v100 = (char *)a1;
  unint64_t v98 = v26;
  v26(v23, (char *)a1, v102);
  uint64_t v93 = v25;
  unint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v95 = a3;
  uint64_t v86 = v9;
  uint64_t v94 = v12;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v97 = v19;
    uint64_t v103 = v31;
    *(_DWORD *)uint64_t v30 = 141558275;
    uint64_t v105 = 1752392040;
    uint64_t v32 = v102;
    BOOL v91 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 12) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v105 = sub_1008FA0F0(v33, v34, &v103);
    uint64_t v11 = v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = v97;
    unint64_t v101 = *(void (**)(char *, uint64_t))(v12 + 8);
    v101(v23, v32);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Creating ownedDeviceKeyRecord for uuid %{private,mask.hash}s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v101 = *(void (**)(char *, uint64_t))(v12 + 8);
    v101(v23, v102);
  }

  sub_100AA6A4C((uint64_t)v100, (uint64_t)v11);
  uint64_t v35 = v87;
  uint64_t v36 = v102;
  uint64_t v37 = v98;
  v98(v96, (char *)v11 + *(int *)(v87 + 20), v102);
  v37(v19, (char *)v11 + *(int *)(v35 + 24), v36);
  os_log_type_t v38 = (uint64_t *)((char *)v11 + *(int *)(v35 + 28));
  uint64_t v40 = *v38;
  unint64_t v39 = v38[1];
  sub_1000361E0(*v38, v39);
  sub_1000361E0(v40, v39);
  uint64_t v41 = sub_100A94760(v40, v39);
  unint64_t v43 = v42;
  sub_10001CFB8(v40, v39);
  sub_100434E0C(v41, v43, &v103);
  sub_10001CFB8(v40, v39);
  uint64_t v45 = v103;
  unint64_t v44 = v104;
  sub_1000361E0(v40, v39);
  sub_1000361E0(v40, v39);
  uint64_t v46 = sub_100A94760(v40, v39);
  unint64_t v48 = v47;
  uint64_t v97 = v19;
  sub_10001CFB8(v40, v39);
  sub_100434E0C(v46, v48, &v103);
  sub_10001CFB8(v40, v39);
  uint64_t v49 = v103;
  unint64_t v50 = v104;
  uint64_t v51 = v82;
  uint64_t v52 = v81;
  uint64_t v53 = v83;
  (*(void (**)(char *, void, uint64_t))(v82 + 104))(v81, enum case for HashAlgorithm.sha256(_:), v83);
  uint64_t v88 = (char *)Data.hash(algorithm:)();
  unint64_t v80 = v54;
  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
  sub_10001CFB8(v49, v50);
  sub_100B23648(v11, v89);
  BOOL v91 = v11;
  id v92 = objc_allocWithZone((Class)SPOwnedDeviceKeyRecord);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v57 = UUID._bridgeToObjectiveC()().super.isa;
  Class v58 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v59 = (uint64_t)v88;
  unint64_t v60 = v80;
  Class v61 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v62 = v89;
  Class v63 = Date._bridgeToObjectiveC()().super.isa;
  id v92 = [v92 initWithIdentifier:isa deviceIdentifier:v57 advertisement:v58 hashedAdvertisement:v61 creationDate:v63];

  sub_10001CFB8(v59, v60);
  sub_10001CFB8(v45, v44);
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v62, v85);
  uint64_t v65 = v101;
  uint64_t v64 = v102;
  v101(v97, v102);
  v65(v96, v64);
  uint64_t v66 = (uint64_t)v91;
  uint64_t v67 = (uint64_t)v86;
  sub_1006CC8F8((uint64_t)v91, (uint64_t)v86, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
  v98(v90, v100, v64);
  int v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = swift_slowAlloc();
    unint64_t v101 = v65;
    uint64_t v71 = v70;
    uint64_t v100 = (char *)swift_slowAlloc();
    uint64_t v103 = (uint64_t)v100;
    *(_DWORD *)uint64_t v71 = 141558787;
    uint64_t v105 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v71 + 12) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v72 = v102;
    uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v105 = sub_1008FA0F0(v73, v74, &v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006CCE04(v67, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
    *(_WORD *)(v71 + 22) = 2160;
    uint64_t v105 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v71 + 32) = 2081;
    uint64_t v75 = v90;
    uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v105 = sub_1008FA0F0(v76, v77, &v103);
    uint64_t v66 = (uint64_t)v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v101(v75, v72);
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "New OwnedDeviceKeyRecord with uuid: %{private,mask.hash}s created for %{private,mask.hash}s.", (uint8_t *)v71, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1006CCE04(v67, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
    v65(v90, v102);
  }

  id v78 = v92;
  (*(void (**)(uint64_t, id, void))(v95 + 16))(v95, v92, 0);

  return sub_1006CCE04(v66, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
}

uint64_t sub_1006B87BC(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v149 = a3;
  uint64_t v183 = a2;
  uint64_t v173 = type metadata accessor for Date();
  BOOL v4 = *(uint64_t **)(v173 - 8);
  __chkstk_darwin(v173);
  uint64_t v6 = (char *)&v143 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = type metadata accessor for HashAlgorithm();
  uint64_t v146 = *(void *)(v172 - 8);
  __chkstk_darwin(v172);
  uint64_t v171 = (char *)&v143 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v145 = *(void *)(v176 - 8);
  __chkstk_darwin(v176);
  uint64_t v9 = (uint64_t *)((char *)&v143 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v10 - 8);
  uint64_t v170 = (char *)&v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = sub_10000588C(&qword_101660680);
  uint64_t v182 = *(void *)(v184 - 8);
  uint64_t v12 = __chkstk_darwin(v184);
  uint64_t v168 = (char *)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v169 = (uint64_t)&v143 - v14;
  uint64_t v179 = (void *)type metadata accessor for URL();
  unint64_t v181 = *(v179 - 1);
  uint64_t v15 = __chkstk_darwin(v179);
  uint64_t v165 = (char *)&v143 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v164 = (char *)&v143 - v18;
  __chkstk_darwin(v17);
  char v180 = (char *)&v143 - v19;
  uint64_t v20 = sub_10000588C((uint64_t *)&unk_101660A60);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v166 = (void (**)(uint64_t, uint64_t))((char *)&v143 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  uint64_t v167 = (void (**)(char *, uint64_t))((char *)&v143 - v23);
  uint64_t v24 = type metadata accessor for UUID();
  unint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v186 = (char *)&v143 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v185 = (char *)&v143 - v29;
  __chkstk_darwin(v28);
  uint64_t v31 = (uint64_t)&v143 - v30;
  if (qword_101637660 != -1) {
LABEL_44:
  }
    swift_once();
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = sub_100010324(v32, (uint64_t)qword_10170F838);
  uint64_t v174 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
  unint64_t v175 = v25 + 16;
  v174(v31, a1, v24);
  uint64_t v161 = v33;
  unint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v178 = v24;
  uint64_t v162 = v6;
  uint64_t v177 = v9;
  uint64_t v147 = v4;
  unint64_t v144 = v25;
  if (v36)
  {
    uint64_t v37 = swift_slowAlloc();
    v188[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 141558275;
    uint64_t v189 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 12) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v189 = sub_1008FA0F0(v38, v39, v188);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v31, v178);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Purging ownedDeviceKeyRecord for uuid %{private,mask.hash}s.", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v31, v24);
  }

  uint64_t v160 = *(void *)(v183 + 280);
  uint64_t v183 = *(void *)(v160 + 160);
  if (qword_1016374B0 != -1) {
    swift_once();
  }
  uint64_t v40 = v179;
  uint64_t v159 = sub_100010324((uint64_t)v179, (uint64_t)qword_10170F308);
  uint64_t v158 = a1;
  UUID.uuidString.getter();
  uint64_t v41 = v180;
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  unint64_t v42 = v181;
  unint64_t v44 = v181 + 16;
  unint64_t v43 = *(void (**)(char *, char *, void *))(v181 + 16);
  uint64_t v45 = v164;
  v43(v164, v41, v40);
  uint64_t v46 = v184;
  unint64_t v47 = v168;
  size_t v163 = (size_t)&v168[*(int *)(v184 + 40)];
  size_t v48 = v163;
  uint64_t v49 = type metadata accessor for DirectorySequence();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = *(void (**)(size_t, uint64_t, uint64_t))(v50 + 56);
  uint64_t v52 = v50 + 56;
  size_t v53 = v48;
  uint64_t v54 = v49;
  uint64_t v151 = v49;
  v51(v53, 1, 1);
  uint64_t v152 = v52;
  uint64_t v153 = v51;
  uint64_t v155 = v43;
  unint64_t v156 = v44;
  v43(v47, v45, v40);
  *(void *)&v47[*(int *)(v46 + 36)] = v183;
  v43(v165, v45, v40);
  swift_retain();
  uint64_t v55 = (uint64_t)v170;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v56 = *(void (**)(char *, void *))(v42 + 8);
  v56(v45, v40);
  uint64_t v150 = v56;
  unint64_t v181 = v42 + 8;
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v51)(v55, 0, 1, v54);
  sub_100062604(v55, v163, (uint64_t *)&unk_101653C90);
  Class v57 = v168;
  uint64_t v58 = v169;
  sub_10001D608((uint64_t)v168, v169, &qword_101660680);
  uint64_t v59 = v182 + 56;
  unint64_t v60 = *(void (**)(void (**)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v182 + 56);
  uint64_t v61 = (uint64_t)v166;
  uint64_t v62 = v184;
  v60(v166, 1, 1, v184);
  uint64_t v154 = v60;
  uint64_t v182 = v59;
  sub_10001DAB4(v61, &qword_10164B3C8);
  sub_10001D608(v58, v61, &qword_101660680);
  v60((void (**)(uint64_t, uint64_t))v61, 0, 1, v62);
  Class v63 = v167;
  sub_10001D608(v61, (uint64_t)v167, (uint64_t *)&unk_101660A60);
  uint64_t v65 = v179;
  uint64_t v64 = v180;
  v56(v180, v179);
  uint64_t v157 = sub_10000588C(&qword_101660A70);
  uint64_t v66 = (void *)swift_allocObject();
  sub_10001D608((uint64_t)v63, (uint64_t)v66 + *(void *)(class metadata base offset for _SequenceBox + *v66 + 16), (uint64_t *)&unk_101660A60);
  size_t v163 = sub_100B75848((const void **)((char *)v66
                                     + *(void *)(class metadata base offset for _SequenceBox + *v66 + 16)));
  swift_setDeallocating();
  sub_10001DAB4((uint64_t)v66 + *(void *)(class metadata base offset for _SequenceBox + *v66 + 16), (uint64_t *)&unk_101660A60);
  swift_deallocClassInstance();
  uint64_t v67 = v160;
  type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v183 = 0;
  int v148 = sub_1012E9DA0(v158);
  swift_release();
  uint64_t v160 = *(void *)(v67 + 160);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  int v68 = v164;
  os_log_type_t v69 = v65;
  uint64_t v70 = v155;
  v155(v164, v64, v65);
  uint64_t v71 = v184;
  uint64_t v72 = (uint64_t)&v57[*(int *)(v184 + 40)];
  uint64_t v73 = v151;
  unint64_t v74 = v153;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v153)(v72, 1, 1, v151);
  v70(v57, v68, v69);
  *(void *)&v57[*(int *)(v71 + 36)] = v160;
  v70(v165, v68, v69);
  swift_retain();
  uint64_t v75 = (uint64_t)v170;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v76 = v150;
  v150(v68, v69);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v74)(v75, 0, 1, v73);
  sub_100062604(v75, v72, (uint64_t *)&unk_101653C90);
  uint64_t v77 = v169;
  sub_10001D608((uint64_t)v57, v169, &qword_101660680);
  uint64_t v78 = (uint64_t)v166;
  uint64_t v79 = v184;
  unint64_t v80 = v154;
  v154(v166, 1, 1, v184);
  sub_10001DAB4(v78, &qword_10164B3C8);
  sub_10001D608(v77, v78, &qword_101660680);
  v80((void (**)(uint64_t, uint64_t))v78, 0, 1, v79);
  uint64_t v81 = v167;
  sub_10001D608(v78, (uint64_t)v167, (uint64_t *)&unk_101660A60);
  v76(v180, v69);
  uint64_t v82 = (void *)swift_allocObject();
  sub_10001D608((uint64_t)v81, (uint64_t)v82 + *(void *)(class metadata base offset for _SequenceBox + *v82 + 16), (uint64_t *)&unk_101660A60);
  uint64_t v24 = sub_100B75848((const void **)((char *)v82
                                    + *(void *)(class metadata base offset for _SequenceBox + *v82 + 16)));
  swift_setDeallocating();
  sub_10001DAB4((uint64_t)v82 + *(void *)(class metadata base offset for _SequenceBox + *v82 + 16), (uint64_t *)&unk_101660A60);
  swift_deallocClassInstance();
  size_t v83 = v163;
  swift_retain();
  swift_retain();
  uint64_t v84 = Logger.logObject.getter();
  os_log_type_t v85 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v84, v85))
  {
    uint64_t v86 = swift_slowAlloc();
    *(_DWORD *)uint64_t v86 = 134218240;
    v188[0] = *(void *)(v83 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v86 + 12) = 2048;
    v188[0] = *(void *)(v24 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "OldRecords count = %ld recordsAfterPurge count = %ld.", (uint8_t *)v86, 0x16u);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
    swift_release();
  }
  uint64_t v87 = (uint64_t)v162;
  BOOL v4 = v177;
  uint64_t v88 = v178;
  uint64_t v189 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v6 = *(char **)(v83 + 16);
  if (v6)
  {
    uint64_t v89 = v83 + ((*(unsigned __int8 *)(v145 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v145 + 80));
    LODWORD(v169) = enum case for HashAlgorithm.sha256(_:);
    uint64_t v168 = (char *)(v146 + 104);
    uint64_t v167 = (void (**)(char *, uint64_t))(v146 + 8);
    uint64_t v166 = (void (**)(uint64_t, uint64_t))(v147 + 1);
    uint64_t v165 = (char *)(v144 + 8);
    uint64_t v90 = *(char **)(v145 + 72);
    uint64_t v170 = (char *)v24;
    uint64_t v164 = v90;
    do
    {
      sub_1006CC8F8(v89, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      if ((sub_100274D38(v4, v24) & 1) == 0)
      {
        uint64_t v182 = v89;
        uint64_t v91 = v176;
        id v92 = (void (*)(char *, char *, uint64_t))v174;
        v174((uint64_t)v185, (uint64_t)v4 + *(int *)(v176 + 20), v88);
        v92(v186, (char *)v4 + *(int *)(v91 + 24), v88);
        uint64_t v93 = (uint64_t *)((char *)v4 + *(int *)(v91 + 28));
        uint64_t v31 = *v93;
        uint64_t v9 = (uint64_t *)v93[1];
        sub_1000361E0(*v93, (unint64_t)v9);
        sub_1000361E0(v31, (unint64_t)v9);
        uint64_t v94 = v183;
        uint64_t v95 = sub_100A948F8(v31, (unint64_t)v9);
        uint64_t v96 = v94;
        if (v94) {
          goto LABEL_61;
        }
        a1 = v95;
        uint64_t v184 = sub_100A90C58(v95, 0);
        uint64_t v96 = 0;
        unint64_t v25 = v97;
        CCECCryptorRelease();
        sub_10001CFB8(v31, (unint64_t)v9);
        unint64_t v98 = v25 >> 62;
        switch(v25 >> 62)
        {
          case 1uLL:
            LODWORD(v99) = HIDWORD(v184) - v184;
            if (__OFSUB__(HIDWORD(v184), v184)) {
              goto LABEL_41;
            }
            uint64_t v99 = (int)v99;
LABEL_23:
            if (v99 != 28)
            {
              if (v98 != 1) {
                goto LABEL_53;
              }
              LODWORD(v104) = HIDWORD(v184) - v184;
              if (!__OFSUB__(HIDWORD(v184), v184))
              {
                while (1)
                {
                  uint64_t v130 = (int)v104;
LABEL_65:
                  sub_10013019C();
                  uint64_t v137 = swift_allocError();
                  *(void *)uint64_t v140 = 28;
                  *(void *)(v140 + 8) = v130;
                  *(unsigned char *)(v140 + 16) = 0;
                  swift_willThrow();
                  uint64_t v139 = v184;
LABEL_68:
                  sub_10001CFB8(v139, v25);
                  v188[0] = 0;
                  v188[1] = 0xE000000000000000;
                  _StringGuts.grow(_:)(35);
                  v142._object = (void *)0x80000001013F3B70;
                  v142._uint64_t countAndFlagsBits = 0xD000000000000021;
                  String.append(_:)(v142);
                  uint64_t v187 = v137;
                  sub_10000588C(&qword_101638D40);
                  _print_unlocked<A, B>(_:_:)();
                  _Block_release(v149);
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
                  _Block_release(v149);
                  __break(1u);
                }
              }
              __break(1u);
LABEL_49:
              if (v104 == 1)
              {
                LODWORD(v98) = HIDWORD(a1) - a1;
                if (!__OFSUB__(HIDWORD(a1), a1))
                {
                  uint64_t v31 = (int)v98;
                  goto LABEL_67;
                }
                __break(1u);
LABEL_53:
                if (v98 != 2)
                {
                  uint64_t v130 = BYTE6(v25);
                  goto LABEL_65;
                }
                uint64_t v129 = *(void *)(v184 + 16);
                unint64_t v104 = *(void *)(v184 + 24);
                uint64_t v130 = v104 - v129;
                if (!__OFSUB__(v104, v129)) {
                  goto LABEL_65;
                }
                __break(1u);
              }
              if (v104 == 2)
              {
                uint64_t v132 = *(void *)(a1 + 16);
                uint64_t v131 = *(void *)(a1 + 24);
                uint64_t v31 = v131 - v132;
                if (__OFSUB__(v131, v132))
                {
                  __break(1u);
LABEL_61:
                  static os_log_type_t.error.getter();
                  if (qword_101636F48 != -1) {
                    swift_once();
                  }
                  sub_10000588C((uint64_t *)&unk_10163AD00);
                  uint64_t v133 = swift_allocObject();
                  *(_OWORD *)(v133 + 16) = xmmword_101342130;
                  v188[0] = v96;
                  swift_errorRetain();
                  sub_10000588C(&qword_101638D40);
                  uint64_t v134 = String.init<A>(describing:)();
                  uint64_t v136 = v135;
                  *(void *)(v133 + 56) = &type metadata for String;
                  *(void *)(v133 + 64) = sub_10000B4CC();
                  *(void *)(v133 + 32) = v134;
                  *(void *)(v133 + 40) = v136;
                  os_log(_:dso:log:_:_:)();
                  swift_bridgeObjectRelease();
                  sub_100130148();
                  uint64_t v137 = swift_allocError();
                  unsigned char *v138 = 0;
                  swift_willThrow();
                  swift_errorRelease();
                  unint64_t v25 = (unint64_t)v9;
                  uint64_t v184 = v31;
                  uint64_t v139 = v31;
                  goto LABEL_68;
                }
              }
              else
              {
                uint64_t v31 = BYTE6(v25);
              }
LABEL_67:
              sub_10013019C();
              uint64_t v137 = swift_allocError();
              *(void *)uint64_t v141 = 28;
              *(void *)(v141 + 8) = v31;
              *(unsigned char *)(v141 + 16) = 0;
              swift_willThrow();
              uint64_t v139 = a1;
              goto LABEL_68;
            }
            unint64_t v181 = v25;
            sub_10001CFB8(v31, (unint64_t)v9);
            sub_1000361E0(v31, (unint64_t)v9);
            sub_1000361E0(v31, (unint64_t)v9);
            uint64_t v24 = sub_100A948F8(v31, (unint64_t)v9);
            uint64_t v96 = 0;
            a1 = sub_100A90C58(v24, 0);
            unint64_t v25 = v103;
            CCECCryptorRelease();
            sub_10001CFB8(v31, (unint64_t)v9);
            unint64_t v104 = v25 >> 62;
            switch(v25 >> 62)
            {
              case 1uLL:
                LODWORD(v105) = HIDWORD(a1) - a1;
                if (__OFSUB__(HIDWORD(a1), a1)) {
                  goto LABEL_43;
                }
                uint64_t v105 = (int)v105;
LABEL_31:
                char v180 = v6;
                if (v105 != 28) {
                  goto LABEL_49;
                }
                sub_10001CFB8(v31, (unint64_t)v9);
                Class v109 = v171;
                uint64_t v108 = v172;
                (*(void (**)(char *, void, uint64_t))v168)(v171, v169, v172);
                uint64_t v110 = Data.hash(algorithm:)();
                unint64_t v112 = v111;
                (*v167)(v109, v108);
                sub_10001CFB8(a1, v25);
                sub_100B23648(v4, v87);
                uint64_t v183 = 0;
                uint64_t v114 = v87;
                uint64_t v179 = objc_allocWithZone((Class)SPOwnedDeviceKeyRecord);
                Class isa = UUID._bridgeToObjectiveC()().super.isa;
                Class v116 = UUID._bridgeToObjectiveC()().super.isa;
                uint64_t v117 = v184;
                unint64_t v118 = v181;
                Class v119 = Data._bridgeToObjectiveC()().super.isa;
                Class v120 = Data._bridgeToObjectiveC()().super.isa;
                Class v121 = Date._bridgeToObjectiveC()().super.isa;
                uint64_t v179 = [v179 initWithIdentifier:isa deviceIdentifier:v116 advertisement:v119 hashedAdvertisement:v120 creationDate:v121];

                sub_10001CFB8(v110, v112);
                sub_10001CFB8(v117, v118);
                (*v166)(v114, v173);
                uint64_t v122 = *(void (**)(char *, uint64_t))v165;
                uint64_t v88 = v178;
                (*(void (**)(char *, uint64_t))v165)(v186, v178);
                v122(v185, v88);
                unint64_t v123 = v179;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                uint64_t v87 = v114;
                if (*(void *)((v189 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v189 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();

                BOOL v4 = v177;
                uint64_t v24 = (uint64_t)v170;
                uint64_t v6 = v180;
                uint64_t v89 = v182;
                uint64_t v90 = v164;
                break;
              case 2uLL:
                uint64_t v107 = *(void *)(a1 + 16);
                uint64_t v106 = *(void *)(a1 + 24);
                BOOL v102 = __OFSUB__(v106, v107);
                uint64_t v105 = v106 - v107;
                if (!v102) {
                  goto LABEL_31;
                }
                goto LABEL_42;
              case 3uLL:
                uint64_t v31 = 0;
                goto LABEL_67;
              default:
                uint64_t v105 = BYTE6(v25);
                goto LABEL_31;
            }
            break;
          case 2uLL:
            uint64_t v101 = *(void *)(v184 + 16);
            uint64_t v100 = *(void *)(v184 + 24);
            BOOL v102 = __OFSUB__(v100, v101);
            uint64_t v99 = v100 - v101;
            if (!v102) {
              goto LABEL_23;
            }
            __break(1u);
LABEL_41:
            __break(1u);
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
            goto LABEL_44;
          case 3uLL:
            uint64_t v130 = 0;
            goto LABEL_65;
          default:
            uint64_t v99 = BYTE6(v25);
            goto LABEL_23;
        }
      }
      sub_1006CCE04((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
      v89 += (uint64_t)v90;
      --v6;
    }
    while (v6);
  }
  swift_release();
  swift_release();
  if (v148)
  {
    uint64_t v124 = 0;
  }
  else
  {
    sub_1006CACF4();
    uint64_t v124 = swift_allocError();
    *uint64_t v125 = 9;
  }
  sub_10001D4B0(0, &qword_10164B3D8);
  v126.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  if (v124) {
    uint64_t v127 = (void *)_convertErrorToNSError(_:)();
  }
  else {
    uint64_t v127 = 0;
  }
  (*((void (**)(const void *, Class, void *))v149 + 2))(v149, v126.super.isa, v127);

  swift_errorRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1006BA1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v115 = a3;
  uint64_t v121 = a2;
  uint64_t v4 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v4 - 8);
  uint64_t v107 = (uint64_t)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v106 = *(void *)(v108 - 8);
  uint64_t v6 = __chkstk_darwin(v108);
  uint64_t v104 = (uint64_t)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v105 = (uint64_t)&v101 - v8;
  uint64_t v9 = sub_10000588C(&qword_101660BB0);
  __chkstk_darwin(v9 - 8);
  uint64_t v117 = (uint64_t)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v110 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v118 = (char *)&v101 - v15;
  __chkstk_darwin(v14);
  uint64_t v119 = (uint64_t)&v101 - v16;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  BOOL v102 = (char *)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v103 = (char *)&v101 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  Class v109 = (char *)&v101 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  os_log_t v116 = (os_log_t)((char *)&v101 - v26);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v101 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v101 - v30;
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = sub_100010324(v32, (uint64_t)qword_10170E840);
  Class v120 = (void (*)(char *, uint64_t, uint64_t))*((void *)v18 + 2);
  v120(v31, a1, v17);
  uint64_t v112 = v33;
  unint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v113 = a1;
  uint64_t v114 = v29;
  unint64_t v111 = (void *)((char *)v18 + 16);
  if (v36)
  {
    uint64_t v37 = swift_slowAlloc();
    v127[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 141558275;
    *(void *)&long long v124 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 12) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v124 = sub_1008FA0F0(v38, v39, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v40 = (void (*)(char *, uint64_t))*((void *)v18 + 1);
    v40(v31, v17);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "notificationBeacon for subscriptionId %{private,mask.hash}s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    a1 = v113;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v40 = (void (*)(char *, uint64_t))*((void *)v18 + 1);
    v40(v31, v17);
  }

  uint64_t v41 = v117;
  uint64_t v121 = *(void *)(v121 + 280);
  sub_100B6E7BC(v117);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord();
  int v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(found - 8) + 48))(v41, 1, found);
  os_log_t v44 = v116;
  if (v43 == 1)
  {
    sub_10001DAB4(v41, &qword_101660BB0);
    uint64_t v45 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v18 + 7);
    uint64_t v46 = (uint64_t)v118;
    v45(v118, 1, 1, v17);
    v120((char *)v44, a1, v17);
  }
  else
  {
    uint64_t v47 = v41 + *(int *)(found + 24);
    uint64_t v46 = (uint64_t)v118;
    size_t v48 = (void (*)(os_log_t, uint64_t, uint64_t))v120;
    v120(v118, v47, v17);
    sub_1006CCE04(v41, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
    uint64_t v45 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v18 + 7);
    v45((char *)v46, 0, 1, v17);
    v48(v44, a1, v17);
  }
  uint64_t v49 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v18 + 6);
  if (v49(v46, 1, v17) == 1)
  {
    uint64_t v50 = v119;
    sub_100AA7B10((uint64_t)v44, v119);
    uint64_t v51 = v50;
    v40((char *)v44, v17);
    sub_10001DAB4(v46, &qword_101638CF0);
    if (v49(v50, 1, v17) != 1)
    {
      uint64_t v52 = (void (*)(uint64_t, uint64_t, uint64_t))*((void *)v18 + 4);
      goto LABEL_16;
    }
  }
  else
  {
    v40((char *)v44, v17);
    uint64_t v52 = (void (*)(uint64_t, uint64_t, uint64_t))*((void *)v18 + 4);
    uint64_t v51 = v119;
    v52(v119, v46, v17);
    v45((char *)v51, 0, 1, v17);
    if (v49(v51, 1, v17) != 1)
    {
LABEL_16:
      uint64_t v57 = (uint64_t)v114;
      v52((uint64_t)v114, v51, v17);
      sub_100ACCD98(v57, (uint64_t)&v124);
      if (!v125)
      {
        sub_10001DAB4((uint64_t)&v124, (uint64_t *)&unk_10163BBE0);
        (*(void (**)(uint64_t, void, void))(v115 + 16))(v115, 0, 0);
        return ((uint64_t (*)(uint64_t, uint64_t))v40)(v57, v17);
      }
      sub_10001CEB0(&v124, (uint64_t)v127);
      uint64_t v119 = v17;
      uint64_t v58 = v128;
      uint64_t v59 = v129;
      sub_10001CD44(v127, v128);
      unint64_t v60 = *(void (**)(uint64_t, uint64_t))(v59 + 192);
      uint64_t v61 = v58;
      uint64_t v62 = (uint64_t)v110;
      uint64_t v63 = v59;
      uint64_t v64 = v119;
      v60(v61, v63);
      if (v49(v62, 1, v64) == 1)
      {
        uint64_t v65 = &qword_101638CF0;
      }
      else
      {
        uint64_t v66 = (uint64_t)v109;
        v52((uint64_t)v109, v62, v64);
        uint64_t v62 = v107;
        sub_100AE75E0(v66, v107);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v62, 1, v108) != 1)
        {
          uint64_t v71 = v62;
          uint64_t v72 = v105;
          sub_1006CD470(v71, v105, type metadata accessor for OwnedBeaconGroup);
          uint64_t v73 = v103;
          v120(v103, v113, v64);
          sub_10001D010((uint64_t)v127, (uint64_t)&v124);
          uint64_t v74 = v72;
          uint64_t v75 = v104;
          sub_1006CC8F8(v74, v104, type metadata accessor for OwnedBeaconGroup);
          uint64_t v76 = Logger.logObject.getter();
          os_log_type_t v77 = static os_log_type_t.default.getter();
          int v78 = v77;
          if (os_log_type_enabled(v76, v77))
          {
            uint64_t v79 = swift_slowAlloc();
            Class v120 = v18;
            uint64_t v80 = v79;
            uint64_t v81 = swift_slowAlloc();
            unint64_t v118 = (char *)v81;
            *(_DWORD *)uint64_t v80 = 141559299;
            uint64_t v122 = 1752392040;
            uint64_t v123 = v81;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v80 + 12) = 2081;
            sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            LODWORD(v117) = v78;
            os_log_t v116 = v76;
            uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v122 = sub_1008FA0F0(v82, v83, &v123);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v40(v73, v119);
            *(_WORD *)(v80 + 22) = 2160;
            uint64_t v122 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v80 + 32) = 2081;
            uint64_t v85 = v125;
            uint64_t v84 = v126;
            sub_10001CD44(&v124, v125);
            uint64_t v86 = v102;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v84 + 8) + 8) + 32))(v85);
            uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v89 = v88;
            v40(v86, v119);
            uint64_t v66 = (uint64_t)v109;
            uint64_t v122 = sub_1008FA0F0(v87, v89, &v123);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v124);
            *(_WORD *)(v80 + 42) = 2160;
            uint64_t v122 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v80 + 52) = 2081;
            uint64_t v90 = v104;
            uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v122 = sub_1008FA0F0(v91, v92, &v123);
            uint64_t v64 = v119;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1006CCE04(v90, type metadata accessor for OwnedBeaconGroup);
            os_log_t v93 = v116;
            _os_log_impl((void *)&_mh_execute_header, v116, (os_log_type_t)v117, "Subscription %{private,mask.hash}s. Beacon %{private,mask.hash}s.\nGroup %{private,mask.hash}s", (uint8_t *)v80, 0x3Eu);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v18 = v120;
            swift_slowDealloc();
          }
          else
          {
            v40(v73, v64);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v124);
            sub_1006CCE04(v75, type metadata accessor for OwnedBeaconGroup);
          }
          uint64_t v94 = v128;
          uint64_t v95 = v129;
          uint64_t v96 = sub_10001CD44(v127, v128);
          id v97 = sub_100B2B68C((uint64_t)v96, v121, v94, v95);
          uint64_t v98 = v105;
          uint64_t v99 = sub_100AE5420(v105);
          (*(void (**)(uint64_t, id, void *))(v115 + 16))(v115, v97, v99);

          sub_1006CCE04(v98, type metadata accessor for OwnedBeaconGroup);
          uint64_t v100 = (void (*)(uint64_t, uint64_t))*((void *)v18 + 1);
          v100(v66, v64);
          v100((uint64_t)v114, v64);
          return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v127);
        }
        v40((char *)v66, v64);
        uint64_t v65 = &qword_10163BB20;
      }
      sub_10001DAB4(v62, v65);
      uint64_t v67 = v128;
      uint64_t v68 = v129;
      os_log_type_t v69 = sub_10001CD44(v127, v128);
      id v70 = sub_100B2B68C((uint64_t)v69, v121, v67, v68);
      (*(void (**)(uint64_t, id, void))(v115 + 16))(v115, v70, 0);

      v40(v114, v64);
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v127);
    }
  }
  sub_10001DAB4(v51, &qword_101638CF0);
  size_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "No record found for notify subscriptionId", v55, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(uint64_t, void, void))(v115 + 16))(v115, 0, 0);
}

void sub_1006BB090(void *a1, void (**a2)(void, void, void))
{
  uint64_t v4 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  uint64_t v8 = self;
  _Block_copy(a2);
  id v9 = [v8 currentConnection];
  if (v9)
  {
    uint64_t v10 = v9;
    if (([a1 fetchProperties] & 0x200) != 0)
    {
      v18[14] = 5;
      sub_1006CAA84();
      if ((NSXPCConnection.hasEntitlement<A>(_:)() & 1) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      v18[15] = 6;
      sub_1006CAA84();
      if ((NSXPCConnection.hasEntitlement<A>(_:)() & 1) == 0)
      {
LABEL_4:
        sub_1003A4778();
        swift_allocError();
        *uint64_t v11 = 12;
        uint64_t v12 = (void *)_convertErrorToNSError(_:)();
        ((void (**)(void, void, void *))a2)[2](a2, 0, v12);

        swift_errorRelease();
        swift_release();

        return;
      }
    }
    uint64_t v15 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v6, 1, 1, v15);
    uint64_t v16 = (void *)swift_allocObject();
    v16[2] = 0;
    v16[3] = 0;
    v16[4] = sub_10013148C;
    v16[5] = v7;
    v16[6] = v10;
    v16[7] = a1;
    swift_retain();
    id v17 = a1;
    sub_1008F5E44((uint64_t)v6, (uint64_t)&unk_10164B3B8, (uint64_t)v16);
    swift_release();
    swift_release();
  }
  else
  {
    sub_1003A4778();
    swift_allocError();
    *uint64_t v13 = 7;
    uint64_t v14 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a2)[2](a2, 0, v14);

    swift_errorRelease();
    swift_release();
  }
}

uint64_t sub_1006BB35C(uint64_t a1, uint64_t a2)
{
  if (sub_100F32FE8()) {
    unsigned __int8 v3 = sub_100F2C7E4() ^ 1;
  }
  else {
    unsigned __int8 v3 = 0;
  }
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, v3 & v5 & 1);
}

void sub_1006BB40C(char a1, uint64_t a2, void (**a3)(void))
{
  *(void *)(swift_allocObject() + 16) = a3;
  _Block_copy(a3);
  if (sub_100F32FE8()) {
    char v5 = sub_100F2C7E4();
  }
  else {
    char v5 = 1;
  }
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if ((v5 & 1) != 0 || !v8)
  {
    a3[2](a3);
    swift_release();
  }
  else
  {
    uint64_t v6 = type metadata accessor for Transaction();
    __chkstk_darwin(v6);
    static Transaction.named<A>(_:with:)();
    id v7 = [self standardUserDefaults];
    [v7 setUserHasAcknowledgedFindMy:a1 & 1];
    swift_release();
  }
}

void sub_1006BB5C0(uint64_t a1, uint64_t a2, int a3, void *a4, void (**a5)(void, void))
{
  int v80 = a3;
  uint64_t v91 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v89 = *(void *)(v8 - 8);
  uint64_t v90 = v8;
  __chkstk_darwin(v8);
  uint64_t v87 = &v79[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v88 = type metadata accessor for DispatchQoS();
  uint64_t v86 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v85 = &v79[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v84 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v82 = &v79[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v92 = *(void *)(v12 - 8);
  uint64_t v93 = v12;
  __chkstk_darwin(v12);
  uint64_t v81 = &v79[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v94 = swift_allocObject();
  *(void *)(v94 + 16) = a5;
  _Block_copy(a5);
  static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  uint64_t v95 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101347BA0;
  *(void *)&long long aBlock = *a4;
  sub_10000588C(&qword_101642888);
  uint64_t v15 = String.init<A>(describing:)();
  uint64_t v17 = v16;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v18 = sub_10000B4CC();
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = v17;
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v18;
  unint64_t v19 = v18;
  *(void *)(v14 + 64) = v18;
  *(void *)(v14 + 72) = 0xD00000000000003CLL;
  *(void *)(v14 + 80) = 0x8000000101404100;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = a4[35];
  sub_100ACCD98(a1, (uint64_t)&aBlock);
  if (v99)
  {
    sub_10001CEB0(&aBlock, (uint64_t)v102);
    uint64_t v21 = v103;
    uint64_t v22 = v104;
    uint64_t v23 = sub_10001CD44(v102, v103);
    uint64_t v24 = v91;
    uint64_t v25 = sub_100B2F5F4((uint64_t)v23, v91, 0, 1, v80 & 1, v20, v21, v22);
    uint64_t v27 = (void *)v25;
    uint64_t v28 = v26;
    unint64_t v29 = v19;
    switch(v30)
    {
      case 1:
        unint64_t v34 = v81;
        break;
      case 2:
        sub_1002F6A08(v25, v26, 2u);
        goto LABEL_11;
      case 3:
LABEL_11:
        static os_log_type_t.default.getter();
        uint64_t v42 = swift_allocObject();
        *(_OWORD *)(v42 + 16) = xmmword_101342130;
        uint64_t v44 = v103;
        uint64_t v43 = v104;
        sub_10001CD44(v102, v103);
        unint64_t v34 = v81;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v43 + 8) + 8) + 32))(v44);
        uint64_t v45 = UUID.uuidString.getter();
        uint64_t v47 = v46;
        (*(void (**)(unsigned char *, uint64_t))(v92 + 8))(v34, v93);
        *(void *)(v42 + 56) = &type metadata for String;
        *(void *)(v42 + 64) = v29;
        *(void *)(v42 + 32) = v45;
        *(void *)(v42 + 40) = v47;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v27 = _swiftEmptyArrayStorage;
        break;
      default:
        swift_bridgeObjectRetain();
        static os_log_type_t.default.getter();
        uint64_t v31 = swift_allocObject();
        *(_OWORD *)(v31 + 16) = xmmword_101342130;
        uint64_t v33 = v103;
        uint64_t v32 = v104;
        sub_10001CD44(v102, v103);
        unint64_t v34 = v81;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v32 + 8) + 8) + 32))(v33);
        uint64_t v35 = UUID.uuidString.getter();
        uint64_t v37 = v36;
        (*(void (**)(unsigned char *, uint64_t))(v92 + 8))(v34, v93);
        *(void *)(v31 + 56) = &type metadata for String;
        *(void *)(v31 + 64) = v29;
        *(void *)(v31 + 32) = v35;
        *(void *)(v31 + 40) = v37;
        uint64_t v24 = v91;
        os_log(_:dso:log:_:_:)();
        sub_1002F6A08((uint64_t)v27, v28, 0);
        swift_bridgeObjectRelease();
        break;
    }
    uint64_t v48 = v103;
    uint64_t v49 = v104;
    uint64_t v50 = sub_10001CD44(v102, v103);
    uint64_t v51 = sub_100B2F5F4((uint64_t)v50, v24, 1, 1, 0, v20, v48, v49);
    size_t v53 = (void *)v51;
    uint64_t v54 = v52;
    switch(v55)
    {
      case 1:
        break;
      case 2:
        sub_1002F6A08(v51, v52, 2u);
        goto LABEL_15;
      case 3:
LABEL_15:
        static os_log_type_t.default.getter();
        uint64_t v62 = swift_allocObject();
        *(_OWORD *)(v62 + 16) = xmmword_101342130;
        uint64_t v64 = v103;
        uint64_t v63 = v104;
        sub_10001CD44(v102, v103);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v63 + 8) + 8) + 32))(v64);
        uint64_t v65 = UUID.uuidString.getter();
        uint64_t v67 = v66;
        (*(void (**)(unsigned char *, uint64_t))(v92 + 8))(v34, v93);
        *(void *)(v62 + 56) = &type metadata for String;
        *(void *)(v62 + 64) = v29;
        *(void *)(v62 + 32) = v65;
        *(void *)(v62 + 40) = v67;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        size_t v53 = _swiftEmptyArrayStorage;
        break;
      default:
        swift_bridgeObjectRetain();
        static os_log_type_t.default.getter();
        uint64_t v56 = swift_allocObject();
        *(_OWORD *)(v56 + 16) = xmmword_101342130;
        uint64_t v58 = v103;
        uint64_t v57 = v104;
        sub_10001CD44(v102, v103);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v57 + 8) + 8) + 32))(v58);
        uint64_t v59 = UUID.uuidString.getter();
        uint64_t v61 = v60;
        (*(void (**)(unsigned char *, uint64_t))(v92 + 8))(v34, v93);
        *(void *)(v56 + 56) = &type metadata for String;
        *(void *)(v56 + 64) = v29;
        *(void *)(v56 + 32) = v59;
        *(void *)(v56 + 40) = v61;
        os_log(_:dso:log:_:_:)();
        sub_1002F6A08((uint64_t)v53, v54, 0);
        swift_bridgeObjectRelease();
        break;
    }
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_1006AED0C((uint64_t)v27, (uint64_t)v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v69 = v83;
    id v70 = v82;
    uint64_t v71 = v84;
    (*(void (**)(unsigned char *, void, uint64_t))(v83 + 104))(v82, enum case for DispatchQoS.QoSClass.default(_:), v84);
    uint64_t v72 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(unsigned char *, uint64_t))(v69 + 8))(v70, v71);
    uint64_t v73 = (void *)swift_allocObject();
    uint64_t v74 = v94;
    v73[2] = sub_1006CA4BC;
    v73[3] = v74;
    v73[4] = v68;
    uint64_t v100 = sub_1006C5D90;
    uint64_t v101 = v73;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v98 = sub_1004B5480;
    uint64_t v99 = &unk_1015CFBF8;
    uint64_t v75 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v76 = v85;
    static DispatchQoS.unspecified.getter();
    uint64_t v96 = _swiftEmptyArrayStorage;
    sub_100691B60((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    os_log_type_t v77 = v87;
    uint64_t v78 = v90;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v75);

    (*(void (**)(unsigned char *, uint64_t))(v89 + 8))(v77, v78);
    (*(void (**)(unsigned char *, uint64_t))(v86 + 8))(v76, v88);
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v102);
    swift_release();
  }
  else
  {
    sub_10001DAB4((uint64_t)&aBlock, (uint64_t *)&unk_10163BBE0);
    static os_log_type_t.error.getter();
    if (qword_101637278 != -1) {
      swift_once();
    }
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_101342130;
    uint64_t v39 = UUID.uuidString.getter();
    *(void *)(v38 + 56) = &type metadata for String;
    *(void *)(v38 + 64) = v19;
    *(void *)(v38 + 32) = v39;
    *(void *)(v38 + 40) = v40;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10001D4B0(0, &qword_10164B398);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class))a5)[2](a5, isa);
    swift_release();
  }
}

void sub_1006BC1C4(unint64_t *a1, void (**a2)(const void *, Class, void))
{
  uint64_t v60 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v4 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for UUID();
  uint64_t v51 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  char v55 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v49 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v52 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = a2;
  _Block_copy(a2);
  static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101347BA0;
  unint64_t v63 = *a1;
  sub_10000588C(&qword_101642888);
  uint64_t v11 = String.init<A>(describing:)();
  uint64_t v13 = v12;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v14 = sub_10000B4CC();
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = v13;
  *(void *)(v10 + 96) = &type metadata for String;
  *(void *)(v10 + 104) = v14;
  *(void *)(v10 + 64) = v14;
  *(void *)(v10 + 72) = 0xD00000000000002ALL;
  *(void *)(v10 + 80) = 0x8000000101403FB0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  unint64_t v61 = sub_10092F514((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v15 = sub_100ACF5FC();
  uint64_t v16 = *((void *)v15 + 2);
  if (v16)
  {
    uint64_t v47 = v15;
    uint64_t v48 = v8;
    uint64_t v17 = (uint64_t)&v15[(*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)];
    size_t v53 = (void (**)(uint64_t, uint64_t))(v51 + 8);
    uint64_t v54 = (char *)(v51 + 16);
    uint64_t v57 = *(void (***)(uint64_t, uint64_t, uint64_t))(v4 + 72);
    uint64_t v58 = (char *)OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock;
    uint64_t v56 = (void (**)(uint64_t, uint64_t))((char *)&type metadata for () + 8);
    while (1)
    {
      sub_1006CC8F8(v17, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      type metadata accessor for BeaconKeyManager(0);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      uint64_t v23 = (uint64_t)&v6[*(int *)(v60 + 20)];
      unint64_t v63 = (unint64_t)_swiftEmptyArrayStorage;
      sub_1012E2F80(v23, 0, 0, v62);
      if (v62[0])
      {
        id v25 = v62[0];
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      sub_1012E2F80(v23, 1, 0, v62);
      if (v62[0])
      {
        id v27 = v62[0];
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      unint64_t v28 = v63;
      swift_release();
      if (v28 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v29)
        {
LABEL_17:
          sub_1006CCE04((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
      }
      else if (!*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_17;
      }
      uint64_t v18 = (uint64_t)v55;
      uint64_t v19 = v23;
      uint64_t v20 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))v54)(v55, v19, v59);
      uint64_t v21 = (void *)v61;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v63 = (unint64_t)v21;
      sub_10017028C(v28, v18, isUniquelyReferenced_nonNull_native);
      unint64_t v61 = v63;
      swift_bridgeObjectRelease();
      (*v53)(v18, v20);
      sub_1006CCE04((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_6:
      v17 += (uint64_t)v57;
      if (!--v16)
      {
        swift_bridgeObjectRelease();
        uint64_t v8 = v48;
        goto LABEL_22;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_22:
  char v30 = sub_100AD0D68();
  uint64_t v31 = *((void *)v30 + 2);
  if (v31)
  {
    uint64_t v60 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock;
    unint64_t v32 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
    uint64_t v54 = v30;
    uint64_t v33 = (uint64_t)&v30[v32];
    uint64_t v34 = *(void *)(v49 + 72);
    uint64_t v35 = v52;
    uint64_t v56 = (void (**)(uint64_t, uint64_t))(v51 + 8);
    uint64_t v57 = (void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
    uint64_t v58 = (char *)&type metadata for () + 8;
    uint64_t v36 = (uint64_t)v55;
    while (1)
    {
      sub_1006CC8F8(v33, v35, type metadata accessor for SharedBeaconRecord);
      if (*(unsigned char *)(v35 + *(int *)(v8 + 64)) == 2) {
        break;
      }
      sub_1006CCE04(v35, type metadata accessor for SharedBeaconRecord);
LABEL_25:
      v33 += v34;
      if (!--v31) {
        goto LABEL_33;
      }
    }
    type metadata accessor for BeaconKeyManager(0);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v37 = v8;
    uint64_t v38 = v35 + *(int *)(v8 + 20);
    unint64_t v39 = sub_1012E2E18(v38);
    swift_release();
    if (v39 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v44) {
        goto LABEL_29;
      }
    }
    else if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_29:
      uint64_t v40 = v38;
      uint64_t v41 = v59;
      (*v57)(v36, v40, v59);
      uint64_t v42 = (void *)v61;
      char v43 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v63 = (unint64_t)v42;
      sub_10017028C(v39, v36, v43);
      unint64_t v61 = v63;
      swift_bridgeObjectRelease();
      (*v56)(v36, v41);
      uint64_t v35 = v52;
      sub_1006CCE04(v52, type metadata accessor for SharedBeaconRecord);
LABEL_32:
      uint64_t v8 = v37;
      goto LABEL_25;
    }
    uint64_t v35 = v52;
    sub_1006CCE04(v52, type metadata accessor for SharedBeaconRecord);
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
LABEL_33:
  swift_bridgeObjectRelease();
  uint64_t v45 = v50;
  _Block_copy(v50);
  sub_10000588C(&qword_10164B358);
  sub_100691B60(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v45[2](v45, isa, 0);

  _Block_release(v45);
  swift_bridgeObjectRelease();
  _Block_release(v45);
}

void sub_1006BCAB0(uint64_t *a1, uint64_t a2)
{
  static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101347BA0;
  uint64_t v29 = *a1;
  sub_10000588C(&qword_101642888);
  uint64_t v5 = String.init<A>(describing:)();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v8 = sub_10000B4CC();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  *(void *)(v4 + 96) = &type metadata for String;
  *(void *)(v4 + 104) = v8;
  *(void *)(v4 + 64) = v8;
  *(void *)(v4 + 72) = 0xD00000000000001BLL;
  *(void *)(v4 + 80) = 0x8000000101403F70;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v9 = sub_1010AB754(v29);
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101342130;
  *(void *)(v10 + 56) = sub_10000588C(&qword_10163ABE8);
  *(void *)(v10 + 64) = sub_100062734(&qword_10164B340, &qword_10163ABE8);
  *(void *)(v10 + 32) = v9;
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  uint64_t v12 = *(void *)(v9 + 16);
  if (v12)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v13 = 0;
    uint64_t v26 = v12;
    uint64_t v27 = v9 + 32;
    do
    {
      uint64_t v17 = (uint64_t *)(v27 + 32 * v13);
      uint64_t v28 = *v17;
      uint64_t v18 = v17[3];
      uint64_t v19 = *(void *)(v18 + 16);
      if (v19)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v20 = v18 + 64;
        do
        {
          uint64_t v21 = *(void *)(v20 - 32);
          v20 += 40;
          id v22 = objc_allocWithZone((Class)SPBeaconRole);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          NSString v23 = String._bridgeToObjectiveC()();
          NSString v24 = String._bridgeToObjectiveC()();
          [v22 initWithRoleId:v21 role:v23 roleEmoji:v24];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v19;
        }
        while (v19);
        swift_bridgeObjectRelease();
        uint64_t v12 = v26;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      ++v13;
      id v14 = objc_allocWithZone((Class)SPBeaconRoleCategory);
      swift_bridgeObjectRetain();
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_10001D4B0(0, &qword_10164B348);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v14 initWithCategoryId:v28 category:v15 roles:isa];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v13 != v12);
  }
  swift_bridgeObjectRelease();
  sub_10001D4B0(0, &qword_10164B350);
  Class v25 = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, v25);
  swift_bridgeObjectRelease();
}

uint64_t sub_1006BD028(unint64_t a1, uint64_t a2, void *a3, void (**a4)(const void *, void))
{
  unint64_t v69 = a1;
  uint64_t v67 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v67);
  uint64_t v68 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BeaconNamingRecord();
  uint64_t v65 = *(void *)(v8 - 8);
  uint64_t v66 = v8;
  __chkstk_darwin(v8);
  uint64_t v64 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v76 = *(void *)(v13 - 8);
  uint64_t v77 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v63 = (uint64_t)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = v15;
  __chkstk_darwin(v14);
  uint64_t v70 = (uint64_t)&v61 - v16;
  uint64_t v17 = swift_allocObject();
  uint64_t v74 = a4;
  uint64_t v75 = v17;
  *(void *)(v17 + 16) = a4;
  _Block_copy(a4);
  static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  uint64_t v72 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v18 = swift_allocObject();
  long long v61 = xmmword_101347BA0;
  *(_OWORD *)(v18 + 16) = xmmword_101347BA0;
  *(void *)&long long v78 = *a3;
  sub_10000588C(&qword_101642888);
  uint64_t v19 = String.init<A>(describing:)();
  uint64_t v21 = v20;
  *(void *)(v18 + 56) = &type metadata for String;
  unint64_t v22 = sub_10000B4CC();
  *(void *)(v18 + 32) = v19;
  *(void *)(v18 + 40) = v21;
  *(void *)(v18 + 96) = &type metadata for String;
  *(void *)(v18 + 104) = v22;
  unint64_t v73 = v22;
  *(void *)(v18 + 64) = v22;
  *(void *)(v18 + 72) = 0xD00000000000001FLL;
  *(void *)(v18 + 80) = 0x8000000101403EA0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  NSString v23 = a3;
  uint64_t v24 = a3[35];
  sub_10000588C(&qword_10163BC50);
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  unint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  uint64_t v28 = swift_allocObject();
  long long v71 = xmmword_101342130;
  *(_OWORD *)(v28 + 16) = xmmword_101342130;
  uint64_t v29 = a2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 16))(v28 + v27, a2, v25);
  swift_retain();
  char v30 = sub_1006AE11C(v28);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (v30[2])
  {
    sub_10001D010((uint64_t)(v30 + 4), (uint64_t)&v78);
  }
  else
  {
    uint64_t v80 = 0;
    long long v78 = 0u;
    long long v79 = 0u;
  }
  uint64_t v31 = v76;
  swift_bridgeObjectRelease();
  if (!*((void *)&v79 + 1))
  {
    sub_10001DAB4((uint64_t)&v78, (uint64_t *)&unk_10163BBE0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v12, 1, 1, v77);
    goto LABEL_12;
  }
  unint64_t v32 = v23;
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  uint64_t v33 = v77;
  int v34 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v12, v34 ^ 1u, 1, v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v12, 1, v33) == 1)
  {
LABEL_12:
    sub_10001DAB4((uint64_t)v12, &qword_10163B9F0);
    static os_log_type_t.error.getter();
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = v71;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v43 = v73;
    *(void *)(v41 + 56) = &type metadata for String;
    *(void *)(v41 + 64) = v43;
    *(void *)(v41 + 32) = v42;
    *(void *)(v41 + 40) = v44;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    v74[2](v74, 0);
    return swift_release();
  }
  uint64_t v35 = (uint64_t)v12;
  uint64_t v36 = v70;
  sub_1006CD470(v35, v70, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v37 = sub_1012D4780(v69);
  if (v37)
  {
    uint64_t v38 = (void *)v37;
    __chkstk_darwin(v37);
    *((void *)&v61 - 2) = v24;
    *((void *)&v61 - 1) = v29;
    uint64_t v39 = (uint64_t)v68;
    QueueSynchronizer.conditionalSync<A>(_:)();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v39, 1, v66) != 1)
    {
      uint64_t v46 = v39;
      uint64_t v47 = v31;
      uint64_t v48 = v64;
      sub_1006CD470(v46, v64, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      uint64_t v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = v61;
      uint64_t v50 = v70;
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v52 = v73;
      *(void *)(v49 + 56) = &type metadata for String;
      *(void *)(v49 + 64) = v52;
      *(void *)(v49 + 32) = v51;
      *(void *)(v49 + 40) = v53;
      id v54 = [v38 roleId];
      *(void *)(v49 + 96) = &type metadata for Int;
      *(void *)(v49 + 104) = &protocol witness table for Int;
      *(void *)(v49 + 72) = v54;
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      char v55 = (void *)static OS_os_log.default.getter();
      static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();

      uint64_t v56 = v63;
      sub_1006CC8F8(v50, v63, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      unint64_t v57 = (*(unsigned __int8 *)(v47 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
      uint64_t v58 = swift_allocObject();
      uint64_t v59 = v75;
      *(void *)(v58 + 16) = sub_100131888;
      *(void *)(v58 + 24) = v59;
      *(void *)(v58 + 32) = v32;
      sub_1006CD470(v56, v58 + v57, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      id v60 = v38;
      swift_retain();
      swift_retain();
      sub_100B40F10(v48, 0, (void (*)(uint64_t (*)()))sub_1006C9E7C, (void (*)(uint64_t (*)()))v58, v24, v60);
      swift_release();

      sub_1006CCE04(v48, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      sub_1006CCE04(v50, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      return swift_release();
    }
    sub_10001DAB4(v39, &qword_10163B9E0);
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    v74[2](v74, 0);

    uint64_t v40 = v70;
  }
  else
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    v74[2](v74, 0);
    uint64_t v40 = v36;
  }
  sub_1006CCE04(v40, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  return swift_release();
}

uint64_t sub_1006BDA38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000588C(&qword_10164B300);
  __chkstk_darwin(v5);
  uint64_t v7 = (void *)((char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v7, &qword_10164B300);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = *v7;
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_101342130;
    v14[1] = v8;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v10 = String.init<A>(describing:)();
    uint64_t v12 = v11;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_10000B4CC();
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v12;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void))(a3 + 16))(a3, 0);
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, 1);
    sub_100A9E7EC(15);
    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)();
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    return sub_10001DAB4((uint64_t)v7, &qword_10164B300);
  }
}

void sub_1006BDCF8(void (*a1)(void), void *a2, void *a3, const void *a4)
{
  id v171 = a2;
  uint64_t v174 = a1;
  uint64_t v159 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v159);
  uint64_t v160 = (char *)&v150 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = sub_10000588C(&qword_10163B9E0);
  uint64_t v7 = __chkstk_darwin(v168);
  unint64_t v156 = (char *)&v150 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  os_log_t v167 = (os_log_t)((char *)&v150 - v9);
  uint64_t v10 = type metadata accessor for BeaconNamingRecord();
  uint64_t v176 = *(void **)(v10 - 8);
  uint64_t v177 = (int *)v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v151 = (uint64_t)&v150 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v152 = (uint64_t)&v150 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v162 = (_OWORD *)((char *)&v150 - v16);
  __chkstk_darwin(v15);
  uint64_t v169 = (uint64_t)&v150 - v17;
  uint64_t v173 = (long long *)sub_10000588C(&qword_101638CF0);
  uint64_t v18 = __chkstk_darwin(v173);
  uint64_t v172 = (uint64_t)&v150 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v150 - v20;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v180 = *(void *)(v22 - 8);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v153 = (char *)&v150 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v158 = (char *)&v150 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v155 = (char *)&v150 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v154 = (char *)&v150 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v166 = (char *)&v150 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v161 = (char *)&v150 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v150 - v36;
  uint64_t v157 = v38;
  __chkstk_darwin(v35);
  uint64_t v179 = (char *)&v150 - v39;
  uint64_t v178 = swift_allocObject();
  *(void *)(v178 + 16) = a4;
  _Block_copy(a4);
  unint64_t v175 = a4;
  _Block_copy(a4);
  static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  uint64_t v164 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_101347BA0;
  uint64_t v184 = *a3;
  sub_10000588C(&qword_101642888);
  uint64_t v41 = String.init<A>(describing:)();
  uint64_t v43 = v42;
  *(void *)(v40 + 56) = &type metadata for String;
  unint64_t v44 = sub_10000B4CC();
  *(void *)(v40 + 32) = v41;
  *(void *)(v40 + 40) = v43;
  *(void *)(v40 + 96) = &type metadata for String;
  *(void *)(v40 + 104) = v44;
  unint64_t v165 = v44;
  *(void *)(v40 + 64) = v44;
  *(void *)(v40 + 72) = 0xD000000000000023;
  *(void *)(v40 + 80) = 0x8000000101403D10;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  size_t v163 = a3;
  uint64_t v45 = a3[35];
  sub_100AD0D68();
  uint64_t v46 = swift_bridgeObjectRelease();
  __chkstk_darwin(v46);
  uint64_t v47 = v174;
  *(&v150 - 2) = v45;
  *(&v150 - 1) = (uint64_t)v47;
  uint64_t v48 = v172;
  QueueSynchronizer.conditionalSync<A>(_:)();
  sub_10001D608(v48, (uint64_t)v21, &qword_101638CF0);
  uint64_t v49 = v180;
  uint64_t v50 = *(void (**)(char *, void (*)(void), uint64_t))(v180 + 16);
  v50(v37, v47, v22);
  uint64_t v51 = v49;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v21, 1, v22) == 1)
  {
    uint64_t v52 = (uint64_t)v179;
    uint64_t v174 = *(void (**)(void))(v49 + 32);
    v174();
    sub_10001DAB4((uint64_t)v21, &qword_101638CF0);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v37, v22);
    uint64_t v52 = (uint64_t)v179;
    uint64_t v174 = *(void (**)(void))(v49 + 32);
    ((void (*)(char *, char *, uint64_t))v174)(v179, v21, v22);
  }
  sub_100ACCD98(v52, (uint64_t)&v182);
  if (!v183)
  {
    sub_10001DAB4((uint64_t)&v182, (uint64_t *)&unk_10163BBE0);
    static os_log_type_t.error.getter();
    uint64_t v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = xmmword_101342130;
    uint64_t v63 = UUID.uuidString.getter();
    unint64_t v64 = v165;
    *(void *)(v62 + 56) = &type metadata for String;
    *(void *)(v62 + 64) = v64;
    *(void *)(v62 + 32) = v63;
    *(void *)(v62 + 40) = v65;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    uint64_t v66 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    uint64_t v67 = v175;
    (*((void (**)(const void *, void))v175 + 2))(v175, 0);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v22);
    goto LABEL_45;
  }
  uint64_t v170 = v22;
  uint64_t v53 = sub_10001CEB0(&v182, (uint64_t)&v184);
  __chkstk_darwin(v53);
  *(&v150 - 2) = v45;
  *(&v150 - 1) = v52;
  os_log_t v54 = v167;
  QueueSynchronizer.conditionalSync<A>(_:)();
  char v55 = (char *)(v176 + 6);
  uint64_t v56 = (unsigned int (*)(os_log_t, uint64_t, int *))v176[6];
  if (v56(v54, 1, v177) == 1)
  {
    sub_10001DAB4((uint64_t)v54, &qword_10163B9E0);
    unint64_t v57 = v161;
    UUID.init()();
    v50(v166, (void (*)(void))v52, v170);
    id v58 = v171;
    uint64_t v176 = [v171 roleId];
    id v59 = [v58 name];
    if (v59)
    {
      id v60 = v59;
      uint64_t v172 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v173 = v61;
    }
    else
    {
      uint64_t v172 = 0x4E574F4E4B4E55;
      uint64_t v173 = (long long *)0xE700000000000000;
    }
    id v106 = [v58 emoji];
    if (v106)
    {
      uint64_t v107 = v106;
      uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v110 = v109;
    }
    else
    {
      uint64_t v108 = 0;
      uint64_t v110 = 0;
    }
    uint64_t v103 = (uint64_t)v162;
    *uint64_t v162 = xmmword_101348180;
    unint64_t v111 = v177;
    uint64_t v98 = v180;
    uint64_t v112 = v57;
    uint64_t v97 = v170;
    uint64_t v113 = v174;
    ((void (*)(uint64_t, char *, uint64_t))v174)(v103 + v177[5], v112, v170);
    ((void (*)(uint64_t, char *, uint64_t))v113)(v103 + v111[6], v166, v97);
    uint64_t v67 = v175;
    *(void *)(v103 + v111[7]) = v176;
    uint64_t v114 = (uint64_t *)(v103 + v111[8]);
    uint64_t v115 = v173;
    *uint64_t v114 = v172;
    v114[1] = (uint64_t)v115;
    os_log_t v116 = (uint64_t *)(v103 + v111[9]);
    *os_log_t v116 = v108;
    v116[1] = v110;
    _Block_copy(v67);
    swift_retain();
    uint64_t v117 = (uint64_t)v163;
    swift_retain();
    sub_100B42710(v103, 0, v45, v117, v67);
    _Block_release(v67);
    swift_release();
    swift_release();
    uint64_t v96 = v179;
LABEL_26:
    sub_1006CCE04(v103, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v184);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v96, v97);
    goto LABEL_45;
  }
  uint64_t v176 = v55;
  sub_1006CD470((uint64_t)v54, v169, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  id v68 = v171;
  unsigned __int8 v69 = [v171 restoreDefaultName];
  uint64_t v70 = v170;
  if ((v69 & 1) == 0)
  {
    id v85 = [v68 name];
    if (v85)
    {
      uint64_t v86 = v85;
      uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v89 = v88;

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v90 = swift_allocObject();
      *(_OWORD *)(v90 + 16) = xmmword_101342130;
      uint64_t v91 = UUID.uuidString.getter();
      unint64_t v92 = v165;
      *(void *)(v90 + 56) = &type metadata for String;
      *(void *)(v90 + 64) = v92;
      *(void *)(v90 + 32) = v91;
      *(void *)(v90 + 40) = v93;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10001D010((uint64_t)&v184, (uint64_t)&v182);
      uint64_t v94 = (void *)swift_allocObject();
      v94[2] = v171;
      v94[3] = v87;
      v94[4] = v89;
      sub_10001CEB0(&v182, (uint64_t)(v94 + 5));
      uint64_t v95 = v158;
      uint64_t v96 = v179;
      uint64_t v97 = v170;
      v50(v158, (void (*)(void))v179, v170);
      uint64_t v98 = v180;
      unint64_t v99 = (*(unsigned __int8 *)(v180 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v180 + 80);
      unint64_t v100 = (v157 + v99 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v101 = swift_allocObject();
      *(void *)(v101 + 16) = v163;
      ((void (*)(unint64_t, char *, uint64_t))v174)(v101 + v99, v95, v97);
      BOOL v102 = (uint64_t (**)(char))(v101 + v100);
      uint64_t v103 = v169;
      uint64_t v104 = v178;
      *BOOL v102 = sub_1006CD534;
      v102[1] = (uint64_t (*)(char))v104;
      swift_retain();
      id v105 = v171;
      swift_retain();
      sub_101074A24(v103, 1, (void (*)(uint64_t))sub_1006C90A0, (uint64_t)v94, (void (*)(uint64_t (*)()))sub_1006C90B4, (void (*)(uint64_t (*)()))v101);
      swift_release();
      swift_release();
      uint64_t v67 = v175;
      goto LABEL_26;
    }
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v129 = type metadata accessor for Logger();
    sub_100010324(v129, (uint64_t)qword_10170E9E8);
    uint64_t v119 = v153;
    v50(v153, (void (*)(void))v52, v70);
    Class v120 = Logger.logObject.getter();
    uint64_t v121 = v70;
    os_log_type_t v122 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v120, v122))
    {
      uint64_t v123 = swift_slowAlloc();
      uint64_t v130 = swift_slowAlloc();
      *(_DWORD *)uint64_t v123 = 141558275;
      uint64_t v181 = 1752392040;
      *(void *)&long long v182 = v130;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v123 + 12) = 2081;
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v131 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v181 = sub_1008FA0F0(v131, v132, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v127 = *(void (**)(char *, uint64_t))(v180 + 8);
      v127(v119, v121);
      uint64_t v128 = "Cannot set empty name for item. Beacon: %{private,mask.hash}s.";
      goto LABEL_35;
    }
LABEL_36:
    uint64_t v127 = *(void (**)(char *, uint64_t))(v180 + 8);
    v127(v119, v121);
    goto LABEL_37;
  }
  sub_10001D010((uint64_t)&v184, (uint64_t)&v182);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  uint64_t v71 = (uint64_t)v160;
  if ((swift_dynamicCast() & 1) == 0)
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v118 = type metadata accessor for Logger();
    sub_100010324(v118, (uint64_t)qword_10170E9E8);
    uint64_t v119 = v155;
    v50(v155, (void (*)(void))v52, v70);
    Class v120 = Logger.logObject.getter();
    uint64_t v121 = v70;
    os_log_type_t v122 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v120, v122))
    {
      uint64_t v123 = swift_slowAlloc();
      uint64_t v124 = swift_slowAlloc();
      *(_DWORD *)uint64_t v123 = 141558275;
      uint64_t v181 = 1752392040;
      *(void *)&long long v182 = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v123 + 12) = 2081;
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v125 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v181 = sub_1008FA0F0(v125, v126, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v127 = *(void (**)(char *, uint64_t))(v180 + 8);
      v127(v119, v121);
      uint64_t v128 = "Cannot restore default name for owned item yet. Beacon: %{private,mask.hash}s.";
LABEL_35:
      _os_log_impl((void *)&_mh_execute_header, v120, v122, v128, (uint8_t *)v123, 0x16u);
      swift_arrayDestroy();
      uint64_t v52 = (uint64_t)v179;
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_37:

      uint64_t v133 = v169;
      uint64_t v67 = v175;
      (*((void (**)(const void *, void))v175 + 2))(v175, 0);
      sub_1006CCE04(v133, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v184);
      v127((char *)v52, v121);
      goto LABEL_45;
    }
    goto LABEL_36;
  }
  sub_1006CCE04(v71, type metadata accessor for SharedBeaconRecord);
  if (qword_101636F50 != -1) {
    swift_once();
  }
  uint64_t v72 = type metadata accessor for Logger();
  sub_100010324(v72, (uint64_t)qword_10170E9E8);
  unint64_t v73 = v154;
  v50(v154, (void (*)(void))v52, v70);
  uint64_t v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  int v76 = v75;
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v77 = swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    uint64_t v172 = v78;
    *(_DWORD *)uint64_t v77 = 141558275;
    uint64_t v181 = 1752392040;
    *(void *)&long long v182 = v78;
    LODWORD(v171) = v76;
    uint64_t v173 = &v182;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v77 + 12) = 2081;
    uint64_t v166 = (char *)(v77 + 14);
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    os_log_t v167 = v74;
    uint64_t v79 = v170;
    uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v181 = sub_1008FA0F0(v80, v81, (uint64_t *)&v182);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v82 = v73;
    uint64_t v83 = v178;
    uint64_t v173 = *(long long **)(v180 + 8);
    ((void (*)(char *, uint64_t))v173)(v82, v79);
    os_log_t v84 = v167;
    _os_log_impl((void *)&_mh_execute_header, v167, (os_log_type_t)v171, "Restoring default name for shared item Beacon: %{private,mask.hash}s.", (uint8_t *)v77, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v173 = *(long long **)(v180 + 8);
    ((void (*)(char *, uint64_t))v173)(v73, v70);

    uint64_t v83 = v178;
  }
  uint64_t v134 = swift_allocObject();
  *(void *)(v134 + 16) = sub_1006CD534;
  *(void *)(v134 + 24) = v83;
  uint64_t v172 = v134;
  __chkstk_darwin(v134);
  uint64_t v135 = (void (*)(void))v179;
  *(&v150 - 2) = v45;
  *(&v150 - 1) = (uint64_t)v135;
  swift_retain_n();
  uint64_t v136 = (uint64_t)v156;
  QueueSynchronizer.conditionalSync<A>(_:)();
  if (v56((os_log_t)v136, 1, v177) == 1)
  {
    sub_10001DAB4(v136, &qword_10163B9E0);
    uint64_t v67 = v175;
    (*((void (**)(const void *, uint64_t))v175 + 2))(v175, 1);
    uint64_t v137 = v170;
  }
  else
  {
    uint64_t v138 = v152;
    sub_1006CD470(v136, v152, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v139 = v158;
    uint64_t v140 = v170;
    v50(v158, v135, v170);
    unint64_t v141 = (*(unsigned __int8 *)(v180 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v180 + 80);
    unint64_t v142 = (v157 + v141 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v143 = swift_allocObject();
    *(void *)(v143 + 16) = v45;
    ((void (*)(unint64_t, char *, uint64_t))v174)(v143 + v141, v139, v140);
    unint64_t v144 = (uint64_t (**)())(v143 + v142);
    uint64_t v145 = v172;
    *unint64_t v144 = sub_1006C9190;
    v144[1] = (uint64_t (*)())v145;
    swift_retain();
    swift_retain();
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    uint64_t v146 = swift_allocObject();
    *(_OWORD *)(v146 + 16) = xmmword_101342130;
    sub_1006CC8F8(v138, v151, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v147 = String.init<A>(describing:)();
    unint64_t v148 = v165;
    *(void *)(v146 + 56) = &type metadata for String;
    *(void *)(v146 + 64) = v148;
    *(void *)(v146 + 32) = v147;
    *(void *)(v146 + 40) = v149;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_100B416AC(v138, v45, (void (*)(void))sub_1006C91BC, v143);
    swift_release_n();
    sub_1006CCE04(v138, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v67 = v175;
    uint64_t v137 = v170;
  }
  swift_release();
  swift_release();
  sub_1006CCE04(v169, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v184);
  ((void (*)(char *, uint64_t))v173)(v179, v137);
LABEL_45:
  swift_release();
  _Block_release(v67);
}

uint64_t sub_1006BF43C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101347BA0;
  sub_10000588C(&qword_101642888);
  uint64_t v5 = String.init<A>(describing:)();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v8 = sub_10000B4CC();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  *(void *)(v4 + 96) = &type metadata for String;
  *(void *)(v4 + 104) = v8;
  *(void *)(v4 + 64) = v8;
  *(void *)(v4 + 72) = 0xD00000000000002BLL;
  *(void *)(v4 + 80) = 0x8000000101403C40;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v9 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, 0);
}

uint64_t sub_1006BF608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v66 = a6;
  uint64_t v64 = a2;
  uint64_t v69 = a1;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v60 - v15;
  __chkstk_darwin(v14);
  uint64_t v67 = (char *)&v60 - v17;
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = sub_100010324(v18, (uint64_t)qword_10170E840);
  swift_retain_n();
  uint64_t v71 = v19;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v70 = a3;
  uint64_t v62 = v16;
  uint64_t v63 = v13;
  uint64_t v68 = a4;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315394;
    uint64_t v72 = *a5;
    uint64_t v73 = v24;
    sub_10000588C(&qword_101642888);
    uint64_t v65 = (void (*)(char *, uint64_t, uint64_t))v9;
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v72 = sub_1008FA0F0(v25, v26, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    uint64_t v72 = sub_1008FA0F0(0xD00000000000003ALL, 0x8000000101403CD0, &v73);
    uint64_t v9 = (uint64_t)v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s: %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    a4 = v68;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v27 = v10 + 16;
  uint64_t v28 = v67;
  uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v65(v67, a4, v9);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.info.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v32 = v69;
  if (v31)
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    uint64_t v72 = v32;
    uint64_t v73 = v61;
    *(_DWORD *)uint64_t v33 = 134219011;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 12) = 2048;
    uint64_t v72 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 22) = 2048;
    uint64_t v72 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 32) = 2160;
    uint64_t v72 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 42) = 2081;
    sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v72 = sub_1008FA0F0(v34, v35, &v73);
    uint64_t v27 = v10 + 16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v36 = v69;
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void (**)(char *, uint64_t))(v10 + 8);
    v37(v28, v9);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "setWildKeyBase called:\nbase: %lu,\ninterval: %lu,\nfallback: %lu\nbeaconUUID: %{private,mask.hash}s", (uint8_t *)v33, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v68;
    swift_slowDealloc();

    if (v36) {
      goto LABEL_8;
    }
LABEL_11:
    unint64_t v44 = v62;
    v65(v62, a4, v9);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    int v47 = v46;
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      uint64_t v67 = (char *)v49;
      *(_DWORD *)uint64_t v48 = 141558787;
      uint64_t v72 = 1752392040;
      uint64_t v73 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 12) = 2081;
      uint64_t v69 = v27;
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      LODWORD(v64) = v47;
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = sub_1008FA0F0(v50, v51, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v37(v44, v9);
      *(_WORD *)(v48 + 22) = 2048;
      uint64_t v72 = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 32) = 2048;
      uint64_t v72 = 0;
      a4 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v64, "Ignoring setWildKeyBase update because wildIndexBase for beacon %{private,mask.hash}s:\nexisting: %llu new: %llu", (uint8_t *)v48, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v37(v44, v9);
    }

    if (v70) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  uint64_t v37 = *(void (**)(char *, uint64_t))(v10 + 8);
  v37(v28, v9);

  if (!v32) {
    goto LABEL_11;
  }
LABEL_8:
  if (!v70)
  {
LABEL_15:
    uint64_t v52 = v63;
    v65(v63, a4, v9);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      uint64_t v71 = v56;
      *(_DWORD *)uint64_t v55 = 141558787;
      uint64_t v72 = 1752392040;
      uint64_t v73 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v55 + 12) = 2081;
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = sub_1008FA0F0(v57, v58, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v37(v52, v9);
      *(_WORD *)(v55 + 22) = 2048;
      uint64_t v72 = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v55 + 32) = 2048;
      uint64_t v72 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Ignoring setWildKeyBase update because wildIndexFallback for beacon %{private,mask.hash}s:\nexisting: %llu new: %llu", (uint8_t *)v55, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v37(v52, v9);
    }

LABEL_19:
    uint64_t v43 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 16))(v66, v43);
  }
  static os_log_type_t.default.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_101342130;
  uint64_t v39 = UUID.uuidString.getter();
  uint64_t v41 = v40;
  *(void *)(v38 + 56) = &type metadata for String;
  *(void *)(v38 + 64) = sub_10000B4CC();
  *(void *)(v38 + 32) = v39;
  *(void *)(v38 + 40) = v41;
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v42 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  uint64_t v43 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 16))(v66, v43);
}

uint64_t sub_1006C0048(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  os_log_type_t v54 = a4;
  uint64_t v56 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v57 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v53 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v50 = (char *)&v48 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v48 - v11;
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = sub_100010324(v13, (uint64_t)qword_10170E840);
  swift_retain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v55 = a1;
  uint64_t v52 = v14;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    unint64_t v51 = v12;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v49 = v20;
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v58 = *a3;
    uint64_t v59 = v20;
    sub_10000588C(&qword_101642888);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v58 = sub_1008FA0F0(v21, v22, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    a1 = v55;
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v58 = sub_1008FA0F0(0xD00000000000002FLL, 0x8000000101403C10, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s: %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v12 = v51;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  if (a1 < 0)
  {
    _Block_release(v54);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    unint64_t v51 = *(char **)(v57 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v51)(v12, v56, v6);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      uint64_t v58 = a1;
      uint64_t v59 = v49;
      *(_DWORD *)uint64_t v25 = 134218499;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2160;
      uint64_t v58 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 22) = 2081;
      sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v58 = sub_1008FA0F0(v26, v27, &v59);
      a1 = v55;
      uint64_t v28 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void (**)(char *, uint64_t))(v28 + 8);
      v29(v12, v6);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "setCurrentWildKeyIndex called: index: %llu, beaconUUID: %{private,mask.hash}s", (uint8_t *)v25, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v29 = *(void (**)(char *, uint64_t))(v57 + 8);
      v29(v12, v6);
    }

    os_log_type_t v30 = v53;
    if (a1)
    {
      uint64_t v53 = (char *)v29;
      ((void (*)(char *, uint64_t, uint64_t))v51)(v30, v56, v6);
      BOOL v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = v30;
        uint64_t v34 = swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 141558275;
        uint64_t v58 = 1752392040;
        uint64_t v59 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v34 + 12) = 2081;
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v58 = sub_1008FA0F0(v36, v37, &v59);
        a1 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v53)(v33, v6);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Ignoring update for wild key index for %{private,mask.hash}s", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        ((void (*)(char *, uint64_t))v53)(v30, v6);
      }

      os_log_type_t v46 = (uint64_t (**)(const void *, BOOL))v54;
    }
    else
    {
      uint64_t v38 = v50;
      ((void (*)(char *, uint64_t, uint64_t))v51)(v50, v56, v6);
      uint64_t v39 = Logger.logObject.getter();
      uint64_t v40 = v6;
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v41))
      {
        uint64_t v42 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = 141558787;
        uint64_t v58 = 1752392040;
        uint64_t v59 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v42 + 12) = 2081;
        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v58 = sub_1008FA0F0(v44, v45, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v29(v38, v40);
        *(_WORD *)(v42 + 22) = 2048;
        uint64_t v58 = 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v42 + 32) = 2048;
        uint64_t v58 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v39, v41, "Ignoring setCurrentWildKeyindex update because wildIndexFallback for beacon %{private,mask.hash}s:\nexisting: %llu new: %llu", (uint8_t *)v42, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        v29(v38, v40);
      }

      os_log_type_t v46 = (uint64_t (**)(const void *, BOOL))v54;
      a1 = v55;
    }
    return v46[2](v46, a1 != 0);
  }
  return result;
}

uint64_t sub_1006C096C(uint64_t a1, uint64_t a2, void *a3, void (**a4)(const void *, void))
{
  uint64_t v67 = a2;
  uint64_t v71 = a1;
  uint64_t v60 = type metadata accessor for UUID();
  uint64_t v59 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v57 = v6;
  uint64_t v65 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v7 - 8);
  uint64_t v66 = (uint64_t)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163BB80);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v12 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v61 = (uint64_t)v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v69 = *(void *)(v14 - 8);
  uint64_t v70 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v64 = (char *)v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56[2] = v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v56 - v17;
  uint64_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = a4;
  uint64_t v58 = a4;
  _Block_copy(a4);
  LODWORD(v62) = static os_log_type_t.info.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  v56[1] = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_101347BA0;
  v74[0] = *a3;
  sub_10000588C(&qword_101642888);
  uint64_t v20 = String.init<A>(describing:)();
  uint64_t v22 = v21;
  *(void *)(v19 + 56) = &type metadata for String;
  unint64_t v23 = sub_10000B4CC();
  *(void *)(v19 + 32) = v20;
  *(void *)(v19 + 40) = v22;
  *(void *)(v19 + 96) = &type metadata for String;
  *(void *)(v19 + 104) = v23;
  *(void *)(v19 + 64) = v23;
  *(void *)(v19 + 72) = 0xD000000000000029;
  *(void *)(v19 + 80) = 0x8000000101403A80;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static Date.trustedNow.getter((uint64_t)v18);
  uint64_t v24 = a3[35];
  uint64_t v25 = v71;
  sub_100B6C53C((uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v63) == 1)
  {
    sub_10001DAB4((uint64_t)v11, &qword_10163BB80);
    static os_log_type_t.error.getter();
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_101342130;
    uint64_t v27 = UUID.uuidString.getter();
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = v23;
    *(void *)(v26 + 32) = v27;
    *(void *)(v26 + 40) = v28;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    uint64_t v29 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    v58[2](v58, 0);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v18, v70);
  }
  else
  {
    uint64_t v30 = v61;
    sub_1006CD470((uint64_t)v11, v61, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    uint64_t v31 = type metadata accessor for Transaction();
    __chkstk_darwin(v31);
    os_log_type_t v32 = a3;
    v56[-4] = a3;
    v56[-3] = v30;
    v56[-2] = v67;
    uint64_t v58 = v33;
    static Transaction.named<A>(_:with:)();
    uint64_t v34 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v66, 1, 1, v34);
    uint64_t v35 = v18;
    uint64_t v36 = v59;
    unint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
    uint64_t v63 = v24;
    uint64_t v38 = v60;
    v37(v65, v25, v60);
    uint64_t v39 = v69;
    uint64_t v40 = v70;
    os_log_type_t v41 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
    uint64_t v62 = v35;
    v41(v64, v35, v70);
    unint64_t v42 = (*(unsigned __int8 *)(v36 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    unint64_t v43 = (v57 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v44 = (*(unsigned __int8 *)(v39 + 80) + v43 + 8) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
    unint64_t v45 = (char *)swift_allocObject();
    *((void *)v45 + 2) = 0;
    *((void *)v45 + 3) = 0;
    *((void *)v45 + 4) = v32;
    *((void *)v45 + 5) = sub_100287680;
    *((void *)v45 + 6) = v68;
    os_log_type_t v46 = &v45[v42];
    uint64_t v47 = v63;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v46, v65, v38);
    uint64_t v48 = v67;
    *(void *)&v45[v43] = v67;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(&v45[v44], v64, v40);
    swift_retain();
    swift_retain();
    sub_1008F5E44(v66, (uint64_t)&unk_10164B310, (uint64_t)v45);
    swift_release();
    sub_100ACCD98(v71, (uint64_t)&v72);
    if (v73)
    {
      sub_10001CEB0(&v72, (uint64_t)v74);
      uint64_t v49 = v75;
      uint64_t v50 = v76;
      unint64_t v51 = sub_10001CD44(v74, v75);
      id v52 = sub_100B2B68C((uint64_t)v51, v47, v49, v50);
      uint64_t v53 = swift_allocObject();
      *(void *)(v53 + 16) = v48;
      *(void *)(v53 + 24) = v52;
      id v54 = v52;
      static Transaction.asyncTask(name:block:)();

      swift_release();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v74);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v62, v40);
      sub_1006CCE04(v61, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v62, v40);
      sub_1006CCE04(v61, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
      sub_10001DAB4((uint64_t)&v72, (uint64_t *)&unk_10163BBE0);
    }
  }
  return swift_release();
}

uint64_t sub_1006C1200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v124 = a4;
  uint64_t v104 = a1;
  uint64_t v150 = sub_10000588C(&qword_10163CBA8);
  uint64_t v9 = __chkstk_darwin(v150);
  uint64_t v113 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v103 - v11;
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_1016511A0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v110 = (uint64_t)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v103 - v16;
  uint64_t v143 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v143 - 8);
  uint64_t v19 = __chkstk_darwin(v143);
  uint64_t v130 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v103 - v21;
  uint64_t v23 = sub_10000588C(&qword_10163BBA0);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v112 = (uint64_t)&v103 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v118 = (char *)&v103 - v26;
  uint64_t v27 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v28 = __chkstk_darwin(v27 - 8);
  unint64_t v111 = (char *)&v103 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v117 = (char *)&v103 - v30;
  uint64_t v142 = type metadata accessor for Date();
  uint64_t v31 = __chkstk_darwin(v142);
  id v106 = (char *)&v103 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v31);
  uint64_t v129 = (char *)&v103 - v35;
  uint64_t v103 = a2;
  if (a3 != a2)
  {
    uint64_t v140 = *(void *)(a5 + 280);
    unint64_t v141 = (void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v128 = (void (**)(char *, uint64_t, uint64_t))(v34 + 16);
    uint64_t v139 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
    uint64_t v127 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
    uint64_t v121 = (void (**)(char *, uint64_t, uint64_t))(v34 + 32);
    uint64_t v109 = (void (**)(char *, uint64_t))(v34 + 8);
    uint64_t v36 = 40 * a3 - 40;
    unint64_t v108 = (unint64_t)"Unable to derive commandKey!: ";
    os_log_t v116 = (void *)0x80000001014034F0;
    uint64_t v37 = v5;
    uint64_t v107 = v12;
    uint64_t v114 = v17;
    uint64_t v115 = v22;
LABEL_8:
    uint64_t v41 = v104;
    uint64_t v105 = v36;
    uint64_t v42 = v36;
    uint64_t v119 = a3;
    while (1)
    {
      uint64_t v123 = v41;
      uint64_t v43 = *v124;
      uint64_t v122 = v42;
      uint64_t v44 = v43 + v42;
      sub_10001D010(v43 + v42 + 40, (uint64_t)&v147);
      sub_10001D010(v44, (uint64_t)&v144);
      uint64_t v45 = v148;
      uint64_t v46 = v149;
      sub_10001CD44(&v147, v148);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v46 + 8) + 8) + 32))(v45);
      v47._uint64_t countAndFlagsBits = 0xD000000000000015;
      v47._object = v116;
      prohibitAsyncContext(functionName:)(v47);
      __chkstk_darwin(v48);
      *(&v103 - 2) = v49;
      *(&v103 - 1) = (uint64_t)v22;
      uint64_t v50 = v37;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v51 = sub_10000588C(&qword_10163CBB0);
      uint64_t v52 = *(void *)(v51 - 8);
      uint64_t v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
      uint64_t v137 = v52 + 48;
      unsigned int v54 = v53(v12, 1, v51);
      uint64_t v138 = v51;
      if (v54 == 1)
      {
        sub_10001DAB4((uint64_t)v12, &qword_10163CBA8);
        uint64_t v55 = sub_10000588C(&qword_1016511B0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v17, 1, 1, v55);
      }
      else
      {
        char v56 = v12[*(int *)(v51 + 48)];
        uint64_t v57 = sub_10000588C(&qword_1016511B0);
        uint64_t v58 = *(int *)(v57 + 48);
        sub_1006CD470((uint64_t)v12, (uint64_t)v17, type metadata accessor for BeaconStatus);
        v17[v58] = v56;
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v17, 0, 1, v57);
      }
      uint64_t v59 = (uint64_t)v118;
      uint64_t v60 = sub_10000588C(&qword_1016511B0);
      uint64_t v133 = *(void *)(v60 - 8);
      uint64_t v135 = *(unsigned int (**)(char *, uint64_t))(v133 + 48);
      uint64_t v136 = v60;
      uint64_t v134 = v133 + 48;
      if (v135(v17, 1) == 1)
      {
        sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_1016511A0);
        uint64_t v61 = type metadata accessor for BeaconStatus(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v59, 1, 1, v61);
      }
      else
      {
        sub_1006CD470((uint64_t)v17, v59, type metadata accessor for BeaconStatus);
        uint64_t v61 = type metadata accessor for BeaconStatus(0);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v59, 0, 1, v61);
      }
      unint64_t v132 = *v141;
      v132(v22, v143);
      type metadata accessor for BeaconStatus(0);
      uint64_t v62 = *(void *)(v61 - 8);
      uint64_t v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
      if (v63(v59, 1, v61) == 1) {
        break;
      }
      uint64_t v131 = v63;
      uint64_t v64 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v53;
      uint64_t v65 = v59 + *(int *)(v61 + 24);
      uint64_t v66 = v117;
      uint64_t v67 = v142;
      unint64_t v126 = *v128;
      v126(v117, v65, v142);
      uint64_t v68 = v59;
      uint64_t v69 = (uint64_t)v66;
      sub_1006CCE04(v68, type metadata accessor for BeaconStatus);
      uint64_t v70 = v66;
      uint64_t v71 = *v139;
      (*v139)(v70, 0, 1, v67);
      uint64_t v125 = *v127;
      if (v125(v69, 1, v67) == 1)
      {
        uint64_t v39 = v69;
        uint64_t v17 = v114;
        goto LABEL_5;
      }
      Class v120 = *v121;
      v120(v129, v69, v67);
      uint64_t v73 = v145;
      uint64_t v72 = v146;
      sub_10001CD44(&v144, v145);
      uint64_t v74 = v130;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v72 + 8) + 8) + 32))(v73);
      v75._object = (void *)(v108 | 0x8000000000000000);
      v75._uint64_t countAndFlagsBits = 0xD000000000000015;
      prohibitAsyncContext(functionName:)(v75);
      __chkstk_darwin(v76);
      *(&v103 - 2) = v77;
      *(&v103 - 1) = (uint64_t)v74;
      uint64_t v78 = (uint64_t)v113;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v79 = v138;
      if (v64(v78, 1, v138) == 1)
      {
        sub_10001DAB4(v78, &qword_10163CBA8);
        uint64_t v80 = 1;
        uint64_t v81 = v110;
        uint64_t v82 = v136;
      }
      else
      {
        char v83 = *(unsigned char *)(v78 + *(int *)(v79 + 48));
        uint64_t v82 = v136;
        uint64_t v84 = *(int *)(v136 + 48);
        uint64_t v85 = v78;
        uint64_t v81 = v110;
        sub_1006CD470(v85, v110, type metadata accessor for BeaconStatus);
        uint64_t v80 = 0;
        *(unsigned char *)(v81 + v84) = v83;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v133 + 56))(v81, v80, 1, v82);
      int v86 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v135)(v81, 1, v82);
      uint64_t v87 = v112;
      if (v86 == 1)
      {
        sub_10001DAB4(v81, (uint64_t *)&unk_1016511A0);
        uint64_t v88 = 1;
      }
      else
      {
        sub_1006CD470(v81, v112, type metadata accessor for BeaconStatus);
        uint64_t v88 = 0;
      }
      uint64_t v89 = v132;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v87, v88, 1, v61);
      v89(v130, v143);
      if (v131(v87, 1, v61) == 1)
      {
        sub_10001DAB4(v87, &qword_10163BBA0);
        uint64_t v90 = v111;
        uint64_t v91 = v142;
        v71(v111, 1, 1, v142);
        uint64_t v17 = v114;
        uint64_t v22 = v115;
        uint64_t v37 = v50;
LABEL_31:
        (*v109)(v129, v91);
        uint64_t v39 = (uint64_t)v90;
        uint64_t v40 = v119;
        uint64_t v12 = v107;
        goto LABEL_6;
      }
      uint64_t v90 = v111;
      uint64_t v91 = v142;
      v126(v111, v87 + *(int *)(v61 + 24), v142);
      sub_1006CCE04(v87, type metadata accessor for BeaconStatus);
      v71(v90, 0, 1, v91);
      unsigned int v92 = v125((uint64_t)v90, 1, v91);
      uint64_t v17 = v114;
      uint64_t v22 = v115;
      uint64_t v37 = v50;
      if (v92 == 1) {
        goto LABEL_31;
      }
      uint64_t v93 = v114;
      uint64_t v94 = v115;
      uint64_t v95 = v106;
      v120(v106, (uint64_t)v90, v91);
      uint64_t v96 = v129;
      char v97 = static Date.> infix(_:_:)();
      uint64_t v98 = *v109;
      (*v109)(v95, v91);
      v98(v96, v91);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v144);
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v147);
      uint64_t v40 = v119;
      if ((v97 & 1) == 0)
      {
        uint64_t v12 = v107;
        uint64_t v37 = v50;
        uint64_t v22 = v94;
        uint64_t v17 = v93;
LABEL_7:
        a3 = v40 + 1;
        uint64_t v36 = v105 + 40;
        if (a3 == v103) {
          return result;
        }
        goto LABEL_8;
      }
      uint64_t v99 = *v124;
      uint64_t v12 = v107;
      if (!*v124)
      {
        __break(1u);
        return result;
      }
      uint64_t v100 = v122;
      uint64_t v101 = v99 + v122;
      sub_10001CEB0((long long *)(v99 + v122 + 40), (uint64_t)&v147);
      long long v102 = *(_OWORD *)(v101 + 16);
      *(_OWORD *)(v101 + 40) = *(_OWORD *)v101;
      *(_OWORD *)(v101 + 56) = v102;
      *(void *)(v101 + 72) = *(void *)(v101 + 32);
      uint64_t result = sub_10001CEB0(&v147, v101);
      uint64_t v42 = v100 - 40;
      uint64_t v41 = v123 + 1;
      uint64_t v37 = v50;
      uint64_t v22 = v94;
      uint64_t v17 = v93;
      if (v40 == v123 + 1) {
        goto LABEL_7;
      }
    }
    sub_10001DAB4(v59, &qword_10163BBA0);
    uint64_t v38 = v117;
    (*v139)(v117, 1, 1, v142);
    uint64_t v39 = (uint64_t)v38;
LABEL_5:
    uint64_t v22 = v115;
    uint64_t v37 = v50;
    uint64_t v40 = v119;
LABEL_6:
    sub_10001DAB4(v39, (uint64_t *)&unk_10163AC90);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v144);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v147);
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1006C2044(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v336 = sub_10000588C(&qword_10163CBA8);
  uint64_t v6 = __chkstk_darwin(v336);
  uint64_t v305 = (char *)&v279 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v309 = (char *)&v279 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v279 - v11;
  __chkstk_darwin(v10);
  uint64_t v294 = (char *)&v279 - v13;
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_1016511A0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v304 = (uint64_t)&v279 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v308 = (uint64_t)&v279 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v286 = (uint64_t)&v279 - v20;
  __chkstk_darwin(v19);
  uint64_t v293 = (uint64_t)&v279 - v21;
  uint64_t v335 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v335 - 8);
  uint64_t v23 = __chkstk_darwin(v335);
  uint64_t v320 = (char *)&v279 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v331 = (char *)&v279 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v288 = (char *)&v279 - v28;
  __chkstk_darwin(v27);
  uint64_t v297 = (char *)&v279 - v29;
  uint64_t v30 = sub_10000588C(&qword_10163BBA0);
  uint64_t v31 = __chkstk_darwin(v30 - 8);
  uint64_t v303 = (uint64_t)&v279 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v279 - v34;
  uint64_t v36 = __chkstk_darwin(v33);
  uint64_t v285 = (char *)&v279 - v37;
  __chkstk_darwin(v36);
  uint64_t v292 = (char *)&v279 - v38;
  uint64_t v39 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v40 = __chkstk_darwin(v39 - 8);
  uint64_t v42 = (char *)&v279 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __chkstk_darwin(v40);
  uint64_t v307 = (char *)&v279 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v284 = (char *)&v279 - v46;
  __chkstk_darwin(v45);
  uint64_t v291 = (char *)&v279 - v47;
  uint64_t v334 = type metadata accessor for Date();
  uint64_t v48 = *(void *)(v334 - 8);
  uint64_t v49 = __chkstk_darwin(v334);
  uint64_t v301 = (char *)&v279 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __chkstk_darwin(v49);
  uint64_t v319 = (char *)&v279 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  uint64_t v282 = (char *)&v279 - v54;
  __chkstk_darwin(v53);
  unint64_t v287 = (char *)&v279 - v55;
  v337 = a1;
  Swift::Int v56 = a1[1];
  uint64_t v299 = a2;
  swift_retain_n();
  Swift::Int v57 = _minimumMergeRunLength(_:)(v56);
  if (v57 >= v56)
  {
    if (v56 < 0) {
      goto LABEL_186;
    }
    if (v56)
    {
      uint64_t v63 = v299;
      swift_retain();
      sub_1006C1200(0, v56, 1, v337, v63);
    }
    swift_release_n();
    return swift_release();
  }
  if (v56 >= 0) {
    uint64_t v58 = v56;
  }
  else {
    uint64_t v58 = v56 + 1;
  }
  if (v56 < -1) {
    goto LABEL_194;
  }
  Swift::Int v281 = v57;
  unint64_t v283 = v12;
  if (v56 < 2)
  {
    uint64_t v61 = _swiftEmptyArrayStorage;
    uint64_t v298 = (char *)&_swiftEmptyArrayStorage[4];
    if (v56 != 1)
    {
      unint64_t v206 = _swiftEmptyArrayStorage[2];
      uint64_t v65 = (char *)_swiftEmptyArrayStorage;
LABEL_151:
      uint64_t v280 = v61;
      uint64_t v344 = v3;
      if (v206 >= 2)
      {
        uint64_t v266 = (uint64_t *)*v337;
        v337 = (uint64_t *)*v337;
        uint64_t v267 = v299;
        do
        {
          unint64_t v268 = v206 - 2;
          if (v206 < 2) {
            goto LABEL_180;
          }
          if (!v266) {
            goto LABEL_193;
          }
          uint64_t v269 = v65;
          uint64_t v270 = *(void *)&v65[16 * v268 + 32];
          uint64_t v271 = *(void *)&v65[16 * v206 + 24];
          Class v272 = (char *)&v266[5 * v270];
          uint64_t v273 = (char *)&v266[5 * *(void *)&v65[16 * v206 + 16]];
          unint64_t v274 = (unint64_t)&v266[5 * v271];
          swift_retain();
          uint64_t v275 = v272;
          uint64_t v276 = v344;
          sub_100692844(v275, v273, v274, v298, v267);
          uint64_t v344 = v276;
          if (v276) {
            goto LABEL_146;
          }
          if (v271 < v270) {
            goto LABEL_182;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v269 = sub_100B73584((uint64_t)v269);
          }
          if (v268 >= *((void *)v269 + 2)) {
            goto LABEL_183;
          }
          uint64_t v277 = &v269[16 * v268 + 32];
          *(void *)uint64_t v277 = v270;
          *((void *)v277 + 1) = v271;
          unint64_t v278 = *((void *)v269 + 2);
          if (v206 > v278) {
            goto LABEL_184;
          }
          memmove(&v269[16 * v206 + 16], &v269[16 * v206 + 32], 16 * (v278 - v206));
          uint64_t v65 = v269;
          *((void *)v269 + 2) = v278 - 1;
          unint64_t v206 = v278 - 1;
          uint64_t v266 = v337;
        }
        while (v278 > 2);
      }
      swift_bridgeObjectRelease();
      v280[2] = 0;
      swift_release_n();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    uint64_t v62 = (char ***)&v312;
  }
  else
  {
    uint64_t v59 = v58 >> 1;
    sub_10000588C((uint64_t *)&unk_10164DBF0);
    uint64_t v60 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v60 + 16) = v59;
    uint64_t v280 = (void *)v60;
    uint64_t v61 = (void *)(v60 + 32);
    uint64_t v62 = &v330;
  }
  *(v62 - 32) = (char **)v61;
  Swift::Int v64 = 0;
  uint64_t v332 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
  uint64_t v333 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8);
  v329 = (unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  uint64_t v330 = (char **)(v48 + 16);
  long long v317 = (unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 32);
  uint64_t v65 = (char *)_swiftEmptyArrayStorage;
  uint64_t v306 = (void (**)(char *, uint64_t))(v48 + 8);
  unint64_t v328 = (unint64_t)"Unable to derive commandKey!: ";
  uint64_t v290 = (void *)0x80000001014034F0;
  uint64_t v310 = v35;
  uint64_t v302 = v42;
  while (1)
  {
    uint64_t v300 = v65;
    uint64_t v66 = v64;
    Swift::Int v67 = v64 + 1;
    Swift::Int v296 = v64;
    if (v64 + 1 >= v56)
    {
      uint64_t v131 = v299;
      goto LABEL_55;
    }
    uint64_t v68 = *v337;
    sub_10001D010(*v337 + 40 * v67, (uint64_t)&v341);
    uint64_t v314 = v68;
    sub_10001D010(v68 + 40 * v66, (uint64_t)&v338);
    LODWORD(v326) = sub_100684A34(&v341, &v338, v299);
    if (v3)
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v338);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v341);
      swift_bridgeObjectRelease();
LABEL_147:
      v280[2] = 0;
      swift_release_n();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v338);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v341);
    Swift::Int v67 = v66 + 2;
    if (v66 + 2 >= v56)
    {
      uint64_t v131 = v299;
      goto LABEL_46;
    }
    uint64_t v327 = *(char **)(v299 + 280);
    uint64_t v69 = v314 + 40 * v66 + 40;
    uint64_t v316 = (char *)v56;
    while (1)
    {
      Swift::Int v311 = v67;
      sub_10001D010(v69 + 40, (uint64_t)&v341);
      sub_10001D010(v69, (uint64_t)&v338);
      uint64_t v71 = v342;
      uint64_t v70 = v343;
      sub_10001CD44(&v341, v342);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v70 + 8) + 8) + 32))(v71);
      v72._uint64_t countAndFlagsBits = 0xD000000000000015;
      v72._object = v290;
      prohibitAsyncContext(functionName:)(v72);
      __chkstk_darwin(v73);
      uint64_t v74 = v294;
      uint64_t v75 = v3;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v76 = (uint64_t)v74;
      uint64_t v77 = sub_10000588C(&qword_10163CBB0);
      uint64_t v78 = *(void *)(v77 - 8);
      uint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
      uint64_t v80 = (char *)(v78 + 48);
      int v81 = v79(v76, 1, v77);
      uint64_t v344 = v75;
      uint64_t v325 = v77;
      v324 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v79;
      if (v81 == 1)
      {
        sub_10001DAB4(v76, &qword_10163CBA8);
        uint64_t v82 = sub_10000588C(&qword_1016511B0);
        uint64_t v83 = v293;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v293, 1, 1, v82);
      }
      else
      {
        uint64_t v84 = v76;
        char v85 = *(unsigned char *)(v76 + *(int *)(v77 + 48));
        uint64_t v86 = sub_10000588C(&qword_1016511B0);
        uint64_t v87 = *(int *)(v86 + 48);
        uint64_t v88 = v84;
        uint64_t v89 = v293;
        sub_1006CD470(v88, v293, type metadata accessor for BeaconStatus);
        *(unsigned char *)(v89 + v87) = v85;
        uint64_t v83 = v89;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v89, 0, 1, v86);
      }
      uint64_t v90 = (uint64_t)v292;
      uint64_t v91 = (uint64_t)v291;
      uint64_t v92 = sub_10000588C(&qword_1016511B0);
      char v321 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 - 8);
      uint64_t v93 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v321 + 6);
      uint64_t v94 = (char *)v321 + 48;
      unsigned int v95 = v93(v83, 1, v92);
      uint64_t v323 = v80;
      uint64_t v322 = v94;
      if (v95 == 1)
      {
        sub_10001DAB4(v83, (uint64_t *)&unk_1016511A0);
        uint64_t v96 = type metadata accessor for BeaconStatus(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v90, 1, 1, v96);
      }
      else
      {
        sub_1006CD470(v83, v90, type metadata accessor for BeaconStatus);
        uint64_t v96 = type metadata accessor for BeaconStatus(0);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v90, 0, 1, v96);
      }
      id v318 = *v333;
      ((void (*)(char *, uint64_t))v318)(v297, v335);
      type metadata accessor for BeaconStatus(0);
      uint64_t v97 = *(void *)(v96 - 8);
      uint64_t v98 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
      if (v98(v90, 1, v96) == 1)
      {
        sub_10001DAB4(v90, &qword_10163BBA0);
        (*v332)(v91, 1, 1, v334);
LABEL_27:
        sub_10001DAB4(v91, (uint64_t *)&unk_10163AC90);
        int v104 = 0;
        uint64_t v3 = v344;
        uint64_t v35 = v310;
        Swift::Int v56 = (Swift::Int)v316;
        goto LABEL_28;
      }
      long long v315 = (unsigned int (*)(char *, uint64_t, uint64_t))v93;
      uint64_t v99 = v90 + *(int *)(v96 + 24);
      uint64_t v100 = v334;
      v313 = *v330;
      ((void (*)(uint64_t, uint64_t, uint64_t))v313)(v91, v99, v334);
      uint64_t v101 = v90;
      uint64_t v102 = v100;
      sub_1006CCE04(v101, type metadata accessor for BeaconStatus);
      uint64_t v103 = *v332;
      (*v332)(v91, 0, 1, v102);
      uint64_t v312 = *v329;
      if (v312((char *)v91, 1, v102) == 1) {
        goto LABEL_27;
      }
      uint64_t v295 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v103;
      uint64_t v289 = *v317;
      v289(v287, v91, v102);
      uint64_t v106 = v339;
      uint64_t v105 = v340;
      sub_10001CD44(&v338, v339);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v105 + 8) + 8) + 32))(v106);
      v107._object = (void *)(v328 | 0x8000000000000000);
      v107._uint64_t countAndFlagsBits = 0xD000000000000015;
      prohibitAsyncContext(functionName:)(v107);
      __chkstk_darwin(v108);
      uint64_t v109 = (uint64_t)v283;
      uint64_t v110 = v344;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v344 = v110;
      uint64_t v111 = v325;
      if (v324(v109, 1, v325) == 1)
      {
        sub_10001DAB4(v109, &qword_10163CBA8);
        uint64_t v112 = 1;
        uint64_t v113 = v286;
      }
      else
      {
        char v114 = *(unsigned char *)(v109 + *(int *)(v111 + 48));
        uint64_t v115 = *(int *)(v92 + 48);
        uint64_t v116 = v109;
        uint64_t v113 = v286;
        sub_1006CD470(v116, v286, type metadata accessor for BeaconStatus);
        uint64_t v112 = 0;
        *(unsigned char *)(v113 + v115) = v114;
      }
      uint64_t v117 = (uint64_t)v285;
      uint64_t v118 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v315;
      (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v321 + 7))(v113, v112, 1, v92);
      if (v118(v113, 1, v92) == 1)
      {
        sub_10001DAB4(v113, (uint64_t *)&unk_1016511A0);
        uint64_t v119 = 1;
      }
      else
      {
        sub_1006CD470(v113, v117, type metadata accessor for BeaconStatus);
        uint64_t v119 = 0;
      }
      Class v120 = v295;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56))(v117, v119, 1, v96);
      ((void (*)(char *, uint64_t))v318)(v288, v335);
      if (v98(v117, 1, v96) == 1)
      {
        sub_10001DAB4(v117, &qword_10163BBA0);
        uint64_t v121 = (uint64_t)v284;
        uint64_t v122 = v334;
        v120(v284, 1, 1, v334);
        uint64_t v3 = v344;
        uint64_t v35 = v310;
        Swift::Int v56 = (Swift::Int)v316;
LABEL_40:
        (*v306)(v287, v122);
        sub_10001DAB4(v121, (uint64_t *)&unk_10163AC90);
        int v104 = 0;
        goto LABEL_28;
      }
      uint64_t v121 = (uint64_t)v284;
      uint64_t v123 = v334;
      ((void (*)(char *, uint64_t, uint64_t))v313)(v284, v117 + *(int *)(v96 + 24), v334);
      uint64_t v124 = v117;
      uint64_t v122 = v123;
      sub_1006CCE04(v124, type metadata accessor for BeaconStatus);
      v120((char *)v121, 0, 1, v123);
      unsigned int v125 = v312((char *)v121, 1, v123);
      uint64_t v3 = v344;
      uint64_t v35 = v310;
      Swift::Int v56 = (Swift::Int)v316;
      if (v125 == 1) {
        goto LABEL_40;
      }
      unint64_t v126 = v282;
      v289(v282, v121, v122);
      uint64_t v127 = v287;
      uint64_t v128 = v122;
      int v104 = static Date.> infix(_:_:)();
      uint64_t v129 = *v306;
      uint64_t v130 = v126;
      Swift::Int v56 = (Swift::Int)v316;
      (*v306)(v130, v128);
      v129(v127, v128);
LABEL_28:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v338);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v341);
      if ((v326 ^ v104)) {
        break;
      }
      Swift::Int v67 = v311 + 1;
      v69 += 40;
      if (v56 == v311 + 1)
      {
        Swift::Int v67 = v56;
        uint64_t v131 = v299;
        goto LABEL_45;
      }
    }
    uint64_t v131 = v299;
    Swift::Int v67 = v311;
LABEL_45:
    uint64_t v66 = v296;
LABEL_46:
    if (v326) {
      break;
    }
LABEL_55:
    if (v67 >= v56) {
      goto LABEL_94;
    }
    if (__OFSUB__(v67, v66)) {
      goto LABEL_185;
    }
    if (v67 - v66 >= v281) {
      goto LABEL_94;
    }
    if (__OFADD__(v66, v281)) {
      goto LABEL_187;
    }
    if (v66 + v281 >= v56) {
      uint64_t v142 = (unsigned int (*)(char *, uint64_t, uint64_t))v56;
    }
    else {
      uint64_t v142 = (unsigned int (*)(char *, uint64_t, uint64_t))(v66 + v281);
    }
    if ((uint64_t)v142 < v66)
    {
LABEL_188:
      __break(1u);
      goto LABEL_189;
    }
    if ((unsigned int (*)(char *, uint64_t, uint64_t))v67 == v142) {
      goto LABEL_94;
    }
    uint64_t v327 = *(char **)(v131 + 280);
    uint64_t v143 = 40 * v67 - 40;
    uint64_t v289 = v142;
    while (2)
    {
      uint64_t v295 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v143;
      long long v147 = (char *)v143;
      Swift::Int v311 = v67;
      while (1)
      {
        uint64_t v314 = v66;
        uint64_t v148 = *v337;
        v313 = v147;
        uint64_t v149 = (uint64_t)&v147[v148];
        sub_10001D010((uint64_t)&v147[v148 + 40], (uint64_t)&v341);
        sub_10001D010(v149, (uint64_t)&v338);
        uint64_t v151 = v342;
        uint64_t v150 = v343;
        sub_10001CD44(&v341, v342);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v150 + 8) + 8) + 32))(v151);
        v152._object = (void *)(v328 | 0x8000000000000000);
        v152._uint64_t countAndFlagsBits = 0xD000000000000015;
        prohibitAsyncContext(functionName:)(v152);
        __chkstk_darwin(v153);
        uint64_t v154 = (uint64_t)v309;
        OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v155 = sub_10000588C(&qword_10163CBB0);
        uint64_t v156 = *(void *)(v155 - 8);
        uint64_t v157 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v156 + 48);
        uint64_t v325 = v156 + 48;
        int v158 = v157(v154, 1, v155);
        uint64_t v344 = v3;
        uint64_t v326 = v155;
        if (v158 == 1)
        {
          sub_10001DAB4(v154, &qword_10163CBA8);
          uint64_t v159 = sub_10000588C(&qword_1016511B0);
          uint64_t v160 = v308;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v159 - 8) + 56))(v308, 1, 1, v159);
        }
        else
        {
          char v161 = *(unsigned char *)(v154 + *(int *)(v155 + 48));
          uint64_t v162 = sub_10000588C(&qword_1016511B0);
          uint64_t v163 = *(int *)(v162 + 48);
          uint64_t v164 = v154;
          uint64_t v160 = v308;
          sub_1006CD470(v164, v308, type metadata accessor for BeaconStatus);
          *(unsigned char *)(v160 + v163) = v161;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v162 - 8) + 56))(v160, 0, 1, v162);
        }
        uint64_t v165 = sub_10000588C(&qword_1016511B0);
        uint64_t v322 = *(char **)(v165 - 8);
        uint64_t v166 = (unsigned int (*)(uint64_t, uint64_t))*((void *)v322 + 6);
        v324 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v165;
        uint64_t v323 = v322 + 48;
        if (v166(v160, 1) == 1)
        {
          sub_10001DAB4(v160, (uint64_t *)&unk_1016511A0);
          uint64_t v167 = type metadata accessor for BeaconStatus(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v167 - 8) + 56))(v35, 1, 1, v167);
        }
        else
        {
          sub_1006CD470(v160, (uint64_t)v35, type metadata accessor for BeaconStatus);
          uint64_t v167 = type metadata accessor for BeaconStatus(0);
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v167 - 8) + 56))(v35, 0, 1, v167);
        }
        char v321 = *v333;
        ((void (*)(char *, uint64_t))v321)(v331, v335);
        type metadata accessor for BeaconStatus(0);
        uint64_t v168 = *(void *)(v167 - 8);
        uint64_t v169 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v168 + 48);
        if (v169(v35, 1, v167) == 1)
        {
          sub_10001DAB4((uint64_t)v35, &qword_10163BBA0);
          uint64_t v144 = v307;
          (*v332)((uint64_t)v307, 1, 1, v334);
          uint64_t v145 = (uint64_t)v144;
          uint64_t v3 = v344;
LABEL_66:
          sub_10001DAB4(v145, (uint64_t *)&unk_10163AC90);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v338);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v341);
          Swift::Int v146 = v311;
          goto LABEL_67;
        }
        uint64_t v170 = (uint64_t (*)(uint64_t, uint64_t, int *))v166;
        id v171 = &v35[*(int *)(v167 + 24)];
        uint64_t v172 = v307;
        uint64_t v173 = v334;
        uint64_t v316 = *v330;
        ((void (*)(char *, char *, uint64_t))v316)(v307, v171, v334);
        sub_1006CCE04((uint64_t)v35, type metadata accessor for BeaconStatus);
        id v318 = *v332;
        v318((uint64_t)v172, 0, 1, v173);
        long long v315 = *v329;
        if (v315(v172, 1, v173) == 1)
        {
          uint64_t v145 = (uint64_t)v172;
          uint64_t v3 = v344;
          goto LABEL_66;
        }
        uint64_t v312 = *v317;
        v312(v319, (uint64_t)v172, v173);
        uint64_t v175 = v339;
        uint64_t v174 = v340;
        sub_10001CD44(&v338, v339);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v174 + 8) + 8) + 32))(v175);
        v176._object = (void *)(v328 | 0x8000000000000000);
        v176._uint64_t countAndFlagsBits = 0xD000000000000015;
        prohibitAsyncContext(functionName:)(v176);
        __chkstk_darwin(v177);
        uint64_t v178 = v305;
        uint64_t v179 = v344;
        OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v180 = (uint64_t)v178;
        uint64_t v344 = v179;
        uint64_t v181 = v178;
        uint64_t v182 = v326;
        if (v157((uint64_t)v181, 1, v326) == 1)
        {
          sub_10001DAB4(v180, &qword_10163CBA8);
          uint64_t v183 = 1;
          uint64_t v184 = v304;
          uint64_t v185 = (int *)v324;
        }
        else
        {
          uint64_t v186 = v180;
          char v187 = *(unsigned char *)(v180 + *(int *)(v182 + 48));
          uint64_t v185 = (int *)v324;
          uint64_t v188 = *((int *)v324 + 12);
          uint64_t v184 = v304;
          sub_1006CD470(v186, v304, type metadata accessor for BeaconStatus);
          uint64_t v183 = 0;
          *(unsigned char *)(v184 + v188) = v187;
        }
        (*((void (**)(uint64_t, uint64_t, uint64_t, int *))v322 + 7))(v184, v183, 1, v185);
        int v189 = v170(v184, 1, v185);
        uint64_t v190 = v303;
        uint64_t v35 = v310;
        if (v189 == 1)
        {
          sub_10001DAB4(v184, (uint64_t *)&unk_1016511A0);
          uint64_t v191 = 1;
        }
        else
        {
          sub_1006CD470(v184, v303, type metadata accessor for BeaconStatus);
          uint64_t v191 = 0;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 56))(v190, v191, 1, v167);
        ((void (*)(char *, uint64_t))v321)(v320, v335);
        if (v169((char *)v190, 1, v167) == 1)
        {
          sub_10001DAB4(v190, &qword_10163BBA0);
          uint64_t v192 = (uint64_t)v302;
          uint64_t v193 = v334;
          v318((uint64_t)v302, 1, 1, v334);
          uint64_t v3 = v344;
LABEL_91:
          (*v306)(v319, v193);
          uint64_t v145 = v192;
          goto LABEL_66;
        }
        uint64_t v192 = (uint64_t)v302;
        uint64_t v193 = v334;
        ((void (*)(char *, uint64_t, uint64_t))v316)(v302, v190 + *(int *)(v167 + 24), v334);
        sub_1006CCE04(v190, type metadata accessor for BeaconStatus);
        v318(v192, 0, 1, v193);
        unsigned int v194 = v315((char *)v192, 1, v193);
        uint64_t v3 = v344;
        if (v194 == 1) {
          goto LABEL_91;
        }
        uint64_t v195 = v301;
        v312(v301, v192, v193);
        uint64_t v196 = v319;
        char v197 = static Date.> infix(_:_:)();
        uint64_t v198 = *v306;
        (*v306)(v195, v193);
        v198(v196, v193);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v338);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v341);
        if ((v197 & 1) == 0) {
          break;
        }
        uint64_t v199 = *v337;
        if (!*v337) {
          goto LABEL_190;
        }
        char v200 = v313;
        uint64_t v201 = (uint64_t)&v313[v199];
        sub_10001CEB0((long long *)&v313[v199 + 40], (uint64_t)&v341);
        long long v202 = *(_OWORD *)(v201 + 16);
        *(_OWORD *)(v201 + 40) = *(_OWORD *)v201;
        *(_OWORD *)(v201 + 56) = v202;
        *(void *)(v201 + 72) = *(void *)(v201 + 32);
        sub_10001CEB0(&v341, v201);
        long long v147 = v200 - 40;
        uint64_t v66 = v314 + 1;
        Swift::Int v146 = v311;
        if (v311 == v314 + 1) {
          goto LABEL_67;
        }
      }
      Swift::Int v146 = v311;
LABEL_67:
      Swift::Int v67 = v146 + 1;
      uint64_t v143 = (uint64_t)v295 + 40;
      uint64_t v66 = v296;
      if ((unsigned int (*)(char *, uint64_t, uint64_t))v67 != v289) {
        continue;
      }
      break;
    }
    Swift::Int v67 = (Swift::Int)v289;
LABEL_94:
    if (v67 < v66) {
      goto LABEL_181;
    }
    Swift::Int v311 = v67;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v344 = v3;
    if (isUniquelyReferenced_nonNull_native) {
      uint64_t v65 = v300;
    }
    else {
      uint64_t v65 = sub_100B729CC(0, *((void *)v300 + 2) + 1, 1, v300);
    }
    unint64_t v205 = *((void *)v65 + 2);
    unint64_t v204 = *((void *)v65 + 3);
    unint64_t v206 = v205 + 1;
    if (v205 >= v204 >> 1) {
      uint64_t v65 = sub_100B729CC((char *)(v204 > 1), v205 + 1, 1, v65);
    }
    *((void *)v65 + 2) = v206;
    id v207 = v65 + 32;
    uint64_t v208 = &v65[16 * v205 + 32];
    Swift::Int v209 = v311;
    *(void *)uint64_t v208 = v296;
    *((void *)v208 + 1) = v209;
    if (v205)
    {
      uint64_t v300 = v65;
      while (1)
      {
        unint64_t v210 = v206 - 1;
        if (v206 >= 4)
        {
          uint64_t v215 = &v207[16 * v206];
          uint64_t v216 = *((void *)v215 - 8);
          uint64_t v217 = *((void *)v215 - 7);
          BOOL v221 = __OFSUB__(v217, v216);
          uint64_t v218 = v217 - v216;
          if (v221) {
            goto LABEL_169;
          }
          uint64_t v220 = *((void *)v215 - 6);
          uint64_t v219 = *((void *)v215 - 5);
          BOOL v221 = __OFSUB__(v219, v220);
          uint64_t v213 = v219 - v220;
          char v214 = v221;
          if (v221) {
            goto LABEL_170;
          }
          unint64_t v222 = v206 - 2;
          uint64_t v223 = &v207[16 * v206 - 32];
          uint64_t v225 = *(void *)v223;
          uint64_t v224 = *((void *)v223 + 1);
          BOOL v221 = __OFSUB__(v224, v225);
          uint64_t v226 = v224 - v225;
          if (v221) {
            goto LABEL_172;
          }
          BOOL v221 = __OFADD__(v213, v226);
          uint64_t v227 = v213 + v226;
          if (v221) {
            goto LABEL_175;
          }
          if (v227 >= v218)
          {
            uint64_t v245 = &v207[16 * v210];
            uint64_t v247 = *(void *)v245;
            uint64_t v246 = *((void *)v245 + 1);
            BOOL v221 = __OFSUB__(v246, v247);
            uint64_t v248 = v246 - v247;
            if (v221) {
              goto LABEL_179;
            }
            BOOL v238 = v213 < v248;
            goto LABEL_132;
          }
        }
        else
        {
          if (v206 != 3)
          {
            uint64_t v239 = *((void *)v65 + 4);
            uint64_t v240 = *((void *)v65 + 5);
            BOOL v221 = __OFSUB__(v240, v239);
            uint64_t v232 = v240 - v239;
            char v233 = v221;
            goto LABEL_126;
          }
          uint64_t v212 = *((void *)v65 + 4);
          uint64_t v211 = *((void *)v65 + 5);
          BOOL v221 = __OFSUB__(v211, v212);
          uint64_t v213 = v211 - v212;
          char v214 = v221;
        }
        if (v214) {
          goto LABEL_171;
        }
        unint64_t v222 = v206 - 2;
        uint64_t v228 = &v207[16 * v206 - 32];
        uint64_t v230 = *(void *)v228;
        uint64_t v229 = *((void *)v228 + 1);
        BOOL v231 = __OFSUB__(v229, v230);
        uint64_t v232 = v229 - v230;
        char v233 = v231;
        if (v231) {
          goto LABEL_174;
        }
        uint64_t v234 = &v207[16 * v210];
        uint64_t v236 = *(void *)v234;
        uint64_t v235 = *((void *)v234 + 1);
        BOOL v221 = __OFSUB__(v235, v236);
        uint64_t v237 = v235 - v236;
        if (v221) {
          goto LABEL_177;
        }
        if (__OFADD__(v232, v237)) {
          goto LABEL_178;
        }
        if (v232 + v237 >= v213)
        {
          BOOL v238 = v213 < v237;
LABEL_132:
          if (v238) {
            unint64_t v210 = v222;
          }
          goto LABEL_134;
        }
LABEL_126:
        if (v233) {
          goto LABEL_173;
        }
        uint64_t v241 = &v207[16 * v210];
        uint64_t v243 = *(void *)v241;
        uint64_t v242 = *((void *)v241 + 1);
        BOOL v221 = __OFSUB__(v242, v243);
        uint64_t v244 = v242 - v243;
        if (v221) {
          goto LABEL_176;
        }
        if (v244 < v232)
        {
          uint64_t v65 = v300;
          goto LABEL_143;
        }
LABEL_134:
        unint64_t v249 = v210 - 1;
        if (v210 - 1 >= v206)
        {
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
          goto LABEL_188;
        }
        uint64_t v250 = *v337;
        if (!*v337) {
          goto LABEL_191;
        }
        uint64_t v251 = &v207[16 * v249];
        uint64_t v252 = *(void *)v251;
        uint64_t v253 = v207;
        unint64_t v254 = v210;
        uint64_t v255 = &v207[16 * v210];
        uint64_t v256 = *((void *)v255 + 1);
        uint64_t v257 = (char *)(v250 + 40 * *(void *)v251);
        uint64_t v327 = (char *)(v250 + 40 * *(void *)v255);
        unint64_t v258 = v250 + 40 * v256;
        uint64_t v259 = v299;
        swift_retain();
        uint64_t v260 = v257;
        uint64_t v261 = v344;
        sub_100692844(v260, v327, v258, v298, v259);
        uint64_t v344 = v261;
        if (v261)
        {
LABEL_146:
          swift_bridgeObjectRelease();
          goto LABEL_147;
        }
        uint64_t v262 = v300;
        if (v256 < v252) {
          goto LABEL_166;
        }
        if (v254 > *((void *)v300 + 2)) {
          goto LABEL_167;
        }
        unint64_t v263 = v254;
        *(void *)uint64_t v251 = v252;
        *(void *)&v253[16 * v249 + 8] = v256;
        unint64_t v264 = *((void *)v262 + 2);
        if (v254 >= v264) {
          goto LABEL_168;
        }
        id v207 = v253;
        unint64_t v206 = v264 - 1;
        memmove(v255, v255 + 16, 16 * (v264 - 1 - v263));
        uint64_t v65 = v300;
        *((void *)v300 + 2) = v264 - 1;
        uint64_t v35 = v310;
        if (v264 <= 2) {
          goto LABEL_143;
        }
      }
    }
    unint64_t v206 = 1;
LABEL_143:
    Swift::Int v56 = v337[1];
    Swift::Int v64 = v311;
    uint64_t v3 = v344;
    if (v311 >= v56)
    {
      uint64_t v61 = v280;
      goto LABEL_151;
    }
  }
  if (v67 >= v66)
  {
    if (v66 < v67)
    {
      uint64_t v316 = (char *)v56;
      uint64_t v132 = v3;
      uint64_t v133 = 40 * v67 - 40;
      uint64_t v134 = 40 * v66;
      Swift::Int v135 = v67;
      Swift::Int v136 = v66;
      do
      {
        if (v136 != --v135)
        {
          if (!v314) {
            goto LABEL_192;
          }
          Swift::Int v137 = v67;
          uint64_t v138 = v314 + v134;
          uint64_t v139 = v314 + v133;
          sub_10001CEB0((long long *)(v314 + v134), (uint64_t)&v341);
          uint64_t v140 = *(void *)(v139 + 32);
          long long v141 = *(_OWORD *)(v139 + 16);
          *(_OWORD *)uint64_t v138 = *(_OWORD *)v139;
          *(_OWORD *)(v138 + 16) = v141;
          *(void *)(v138 + 32) = v140;
          sub_10001CEB0(&v341, v139);
          uint64_t v131 = v299;
          Swift::Int v67 = v137;
          uint64_t v66 = v296;
        }
        ++v136;
        v133 -= 40;
        v134 += 40;
      }
      while (v136 < v135);
      uint64_t v3 = v132;
      Swift::Int v56 = (Swift::Int)v316;
    }
    goto LABEL_55;
  }
LABEL_189:
  __break(1u);
LABEL_190:
  swift_release_n();
  __break(1u);
LABEL_191:
  swift_release_n();
  __break(1u);
LABEL_192:
  swift_release_n();
  __break(1u);
LABEL_193:
  swift_release_n();
  __break(1u);
LABEL_194:
  swift_release_n();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1006C422C(void **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = (void *)sub_100B73700(v4);
  }
  uint64_t v5 = v4[2];
  v7[0] = (uint64_t)(v4 + 4);
  v7[1] = v5;
  swift_retain();
  sub_1006C2044(v7, a2);
  swift_release();
  *a1 = v4;
  return swift_release_n();
}

uint64_t sub_1006C42D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 96))(v3, v4);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1006C4330@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10068413C(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1006C434C@<X0>(uint64_t a1@<X8>)
{
  return sub_100AE9324(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1006C4368(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_1006C4398()
{
  return (*(uint64_t (**)(void, unint64_t))(v0 + 16))(0, 0xF000000000000000);
}

uint64_t sub_1006C43CC(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for Date();
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = v1[4];
  uint64_t v11 = v1[5];
  uint64_t v12 = v1[6];
  uint64_t v13 = *(void *)((char *)v1 + v7);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v14;
  *uint64_t v14 = v3;
  v14[1] = sub_100033F68;
  return sub_10067EBA0(a1, v8, v9, v10, v11, v12, (uint64_t)v1 + v6, v13);
}

uint64_t sub_1006C4564()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v24 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v23 = *(void *)(v4 + 64);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v21 = *(void *)(v6 + 64);
  swift_release();
  uint64_t v27 = v0;
  uint64_t v26 = (v2 + 24) & ~v2;
  uint64_t v7 = v0 + v26;
  sub_10001CFB8(*(void *)v7, *(void *)(v7 + 8));
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v7 + v1[5], v3);
  uint64_t v9 = v7 + v1[6];
  type metadata accessor for StableIdentifier();
  uint64_t v28 = v8;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v3);
      uint64_t v10 = v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v3);
      uint64_t v10 = v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v2 = v10;
      uint64_t v8 = v28;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v7 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v11, 1, v3)) {
    v8(v11, v3);
  }
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v12(v7 + v1[8], v5);
  sub_10001CFB8(*(void *)(v7 + v1[9]), *(void *)(v7 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v7 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = v3;
  uint64_t v16 = (uint64_t *)(v7 + v1[11]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  unint64_t v18 = (((v24 + v26 + 7) & 0xFFFFFFFFFFFFFFF8) + v25 + 8) & ~v25;
  unint64_t v19 = (v18 + v23 + v22) & ~v22;
  sub_10001CFB8(*(void *)(v7 + v1[12]), *(void *)(v7 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v7 + v1[13]), *(void *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28(v27 + v18, v15);
  v12(v27 + v19, v5);
  swift_release();

  return _swift_deallocObject(v27, ((v21 + v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | v25 | v22 | 7);
}

uint64_t sub_1006C49D8()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v0 + 16);
  unint64_t v10 = *(void *)(v0 + v3);
  uint64_t v11 = v0 + v8;
  uint64_t v12 = (uint64_t *)(v0 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];

  return sub_1006809A8(v9, v0 + v2, v10, v0 + v5, v11, v13, v14);
}

uint64_t sub_1006C4B4C(uint64_t a1)
{
  return sub_100485324(a1);
}

uint64_t sub_1006C4B64()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v24 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v22 = *(void *)(v4 + 64);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v21 = *(void *)(v6 + 64);
  swift_unknownObjectRelease();
  uint64_t v27 = v0;
  uint64_t v26 = (v2 + 32) & ~v2;
  uint64_t v7 = v0 + v26;
  sub_10001CFB8(*(void *)v7, *(void *)(v7 + 8));
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v7 + v1[5], v3);
  uint64_t v9 = v7 + v1[6];
  type metadata accessor for StableIdentifier();
  uint64_t v28 = v8;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v3);
      uint64_t v10 = v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v3);
      uint64_t v10 = v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v2 = v10;
      unint64_t v8 = v28;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v7 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v11, 1, v3)) {
    v8(v11, v3);
  }
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v12(v7 + v1[8], v5);
  sub_10001CFB8(*(void *)(v7 + v1[9]), *(void *)(v7 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v7 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = v3;
  uint64_t v16 = (uint64_t *)(v7 + v1[11]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  uint64_t v18 = (v26 + v24 + v25) & ~v25;
  unint64_t v19 = (((v22 + v18 + 7) & 0xFFFFFFFFFFFFFFF8) + v23 + 8) & ~v23;
  sub_10001CFB8(*(void *)(v7 + v1[12]), *(void *)(v7 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v7 + v1[13]), *(void *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28(v27 + v18, v15);
  v12(v27 + v19, v5);
  swift_release();

  return _swift_deallocObject(v27, ((v21 + v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | v25 | v23 | 7);
}

uint64_t sub_1006C4FD8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v11 = (v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = *(void *)(v1 + 24);
  uint64_t v14 = v1 + v5;
  uint64_t v15 = v1 + v8;
  uint64_t v16 = *(void *)(v1 + v9);
  uint64_t v17 = v1 + v11;
  uint64_t v18 = *(void *)(v1 + ((*(void *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v19;
  *unint64_t v19 = v2;
  v19[1] = sub_100033F68;
  return sub_1006811B8(a1, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_1006C51EC()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v28 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v2 = (v28 + 24) & ~v28;
  uint64_t v3 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = (int *)type metadata accessor for ShareRecord();
  uint64_t v29 = *(unsigned __int8 *)(*((void *)v4 - 1) + 80);
  uint64_t v27 = *(void *)(*((void *)v4 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v2;
  sub_10001CFB8(*(void *)(v0 + v2), *(void *)(v0 + v2 + 8));
  uint64_t v6 = v0 + v2 + v1[5];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v0 + v2 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v9(v10, v7);
      uint64_t v25 = v3;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      uint64_t v25 = v3;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v25;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v3 + v29;
  uint64_t v12 = v5 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7)) {
    v9(v12, v7);
  }
  uint64_t v26 = v9;
  uint64_t v13 = v2 + v11;
  uint64_t v14 = v5 + v1[8];
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v24(v14, v15);
  sub_10001CFB8(*(void *)(v5 + v1[9]), *(void *)(v5 + v1[9] + 8));
  uint64_t v17 = (uint64_t *)(v5 + v1[10]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_10001CFB8(*v17, v18);
  }
  uint64_t v19 = v13 & ~v29;
  uint64_t v20 = (uint64_t *)(v5 + v1[11]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_10001CFB8(*v20, v21);
  }
  sub_10001CFB8(*(void *)(v5 + v1[12]), *(void *)(v5 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v5 + v1[13]), *(void *)(v5 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(v0 + v19), *(void *)(v0 + v19 + 8));
  v26(v0 + v19 + v4[5], v7);
  v26(v0 + v19 + v4[6], v7);
  v24(v0 + v19 + v4[7], v15);
  uint64_t v22 = v0 + v19 + v4[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v22, 1, v15)) {
    v24(v22, v15);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v19 + v27, v28 | v29 | 7);
}

uint64_t sub_1006C56E0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for ShareRecord() - 8);
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_100681884(a1, v7, v1 + v4, v8);
}

Swift::Int sub_1006C57B8(uint64_t a1)
{
  return sub_10067AE84(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_1006C57C0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1006C5808()
{
  return sub_10066B784(*(char ***)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(unsigned __int8 *)(v0 + 33), *(void *)(v0 + 40), *(unsigned int *)(v0 + 48), *(void (**)(uint64_t))(v0 + 56));
}

BOOL sub_1006C5824(uint64_t a1)
{
  return sub_100A099C0(a1, *(void *)(v1 + 16));
}

uint64_t sub_1006C5844@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1006C5870@<X0>(void *a1@<X8>)
{
  return sub_101078988(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1006C588C()
{
  return sub_1006CAD68(96);
}

uint64_t sub_1006C5894()
{
  return sub_1006CADB4((uint64_t)sub_1006C5924);
}

uint64_t sub_1006C58AC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006C58BC()
{
  return sub_1006CAD68(96);
}

uint64_t sub_1006C58C4()
{
  return sub_1006CADB4((uint64_t)sub_1006C5908);
}

uint64_t sub_1006C58DC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006C58EC@<X0>(void *a1@<X8>)
{
  return sub_100820838(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1006C5908@<X0>(unint64_t a1@<X8>)
{
  return sub_100BE0608(v1, a1);
}

uint64_t sub_1006C5924@<X0>(unint64_t a1@<X8>)
{
  return sub_100BE0E38(v1, a1);
}

uint64_t sub_1006C5940()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006C5978()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unint64_t v4 = v1;
  v4[1] = sub_100033F68;
  v4[3] = v3;
  v4[2] = v2;
  return _swift_task_switch(sub_100660DC4, 0, 0);
}

uint64_t sub_1006C5A2C()
{
  return sub_1006CAD68(96);
}

uint64_t sub_1006C5A34()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006C5A44()
{
  return sub_1006CAD68(96);
}

uint64_t sub_1006C5A4C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006C5A5C()
{
  return sub_1006CAD68(96);
}

uint64_t sub_1006C5A64()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006C5A74()
{
  return sub_1006CAD68(96);
}

uint64_t sub_1006C5A7C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006C5A8C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006C5AC4()
{
  uint64_t v1 = type metadata accessor for DateInterval();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1006C5BB8()
{
  uint64_t v1 = *(void *)(type metadata accessor for DateInterval() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = v0 + v2;
  uint64_t v6 = v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void (**)(unint64_t))v6;
  uint64_t v8 = *(void *)(v6 + 8);

  return sub_10066F88C(v3, v4, v5, v7, v8);
}

uint64_t sub_1006C5C4C()
{
  return sub_1006CCD48((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1006C5C78()
{
  return sub_100670454(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(unint64_t))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1006C5C84()
{
  return sub_1006CC968(48);
}

uint64_t sub_1006C5C8C()
{
  return sub_10066C670(*(void *)(v0 + 16), *(uint64_t (**)(void *))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1006C5C98()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006C5CD0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  v3[2] = v2;
  return _swift_task_switch(sub_10066CC84, 0, 0);
}

uint64_t sub_1006C5D78()
{
  return sub_1006CD418((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1006C5D90()
{
  return sub_1006CCDD4();
}

uint64_t sub_1006C5D98()
{
  return sub_1006CCD48((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

uint64_t sub_1006C5DC4()
{
  return sub_10066C3C8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1006C5DD0()
{
  return sub_1006CD418((void (*)(void))&_swift_release);
}

uint64_t sub_1006C5DE8()
{
  return (*(uint64_t (**)(BOOL))(v0 + 16))(*(void *)(*(void *)(v0 + 32) + 32) != 0);
}

uint64_t sub_1006C5E24()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 17, v5);
}

void sub_1006C5EFC()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v0 + v3);
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = *(void *)(v0 + v5);
  uint64_t v9 = v0 + v2;
  uint64_t v10 = v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void (**)(void))v10;
  uint64_t v12 = *(void *)(v10 + 8);
  int v13 = *(unsigned __int8 *)(v10 + 16);

  sub_100687A2C(v9, v6, v7, v8, v11, v12, v13);
}

uint64_t sub_1006C5FB4()
{
  return sub_1006CC968(40);
}

uint64_t sub_1006C5FBC()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_1006C5FE4()
{
  return sub_1006CC968(40);
}

uint64_t sub_1006C5FEC()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006C6024()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1006C6074(uint64_t a1)
{
  sub_10068C478(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1006C6080()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v3 + v4 + v7) & ~v7;
  unint64_t v13 = ((((*(void *)(v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v14 = v2 | v7 | 7;
  swift_release();
  swift_bridgeObjectRelease();

  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v0 + v3 + v1[8], v5);
  uint64_t v10 = v0 + v3 + v1[9];
  uint64_t v11 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9(v0 + v8, v5);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v13, v14);
}

uint64_t sub_1006C6278()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v0[2];
  uint64_t v8 = v0[3];
  uint64_t v9 = v0[4];
  uint64_t v10 = *(void *)((char *)v0 + v6);
  uint64_t v11 = *(void *)((char *)v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_10068D214(v7, v8, v9, (uint64_t)v0 + v2, (uint64_t)v0 + v5, v10, v11);
}

uint64_t sub_1006C6388()
{
  return sub_10068EB40(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

uint64_t sub_1006C63BC()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

void sub_1006C6530(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = *(NSObject **)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_10068D5CC(a1, v5, v1 + v4, v6);
}

uint64_t sub_1006C65D0()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);

  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  unint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

void sub_1006C6978(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(NSObject **)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_10068DDA0(a1, v6, v1 + v4, v7, v8);
}

uint64_t sub_1006C6A28()
{
  return sub_10068E6BC(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1006C6A34(unint64_t a1)
{
  if (a1 < 4) {
    return (a1 + 32);
  }
  static os_log_type_t.error.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101342130;
  *(void *)(v3 + 56) = &type metadata for Int;
  *(void *)(v3 + 64) = &protocol witness table for Int;
  *(void *)(v3 + 32) = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return 32;
}

uint64_t sub_1006C6B20(unint64_t a1, uint64_t a2, void (**a3)(uint64_t, uint64_t))
{
  uint64_t v133 = a2;
  uint64_t v5 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v139 = (uint64_t)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v7 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v138 - 8);
  uint64_t v8 = __chkstk_darwin(v138);
  uint64_t v137 = (uint64_t)&v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v136 = (uint64_t)&v131 - v10;
  uint64_t v148 = type metadata accessor for BeaconObservation();
  uint64_t v147 = *(void *)(v148 - 8);
  __chkstk_darwin(v148);
  Swift::Int v146 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v165 = (uint64_t)&v131 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t)&v131 - v16;
  uint64_t v164 = type metadata accessor for UUID();
  uint64_t v18 = *(char ***)(v164 - 8);
  __chkstk_darwin(v164);
  uint64_t v163 = (char *)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
LABEL_54:
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    if (v20) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20)
    {
LABEL_3:
      uint64_t v142 = v17;
      uint64_t v132 = a3;
      uint64_t v155 = 0;
      unint64_t v154 = a1 & 0xC000000000000001;
      uint64_t v156 = *(void *)(v133 + 280);
      uint64_t v166 = v168;
      uint64_t v162 = (void (**)(char *, uint64_t))(v18 + 1);
      a3 = (void (**)(uint64_t, uint64_t))(v13 + 8);
      uint64_t v145 = (void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
      uint64_t v134 = v7 + 6;
      uint64_t v22 = 4;
      *(void *)&long long v21 = 141560067;
      long long v141 = v21;
      uint64_t v18 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
      uint64_t v140 = (char *)&type metadata for Any + 8;
      *(void *)&long long v21 = 141558275;
      long long v135 = v21;
      long long v144 = xmmword_101342130;
      uint64_t v143 = (char *)&type metadata for () + 8;
      uint64_t v158 = v12;
      uint64_t v149 = v20;
      unint64_t v153 = a1;
      uint64_t v157 = (void (**)(uint64_t, uint64_t))(v13 + 8);
      while (1)
      {
        uint64_t v13 = v22 - 4;
        if (v154) {
          uint64_t v23 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v23 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))*(id *)(a1 + 8 * v22);
        }
        uint64_t v7 = v23;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
          goto LABEL_54;
        }
        uint64_t v160 = v22 - 3;
        if (qword_101636EF0 != -1) {
          swift_once();
        }
        uint64_t v24 = type metadata accessor for Logger();
        uint64_t v25 = sub_100010324(v24, (uint64_t)qword_10170E840);
        uint64_t v26 = v7;
        uint64_t v27 = Logger.logObject.getter();
        int v28 = static os_log_type_t.default.getter();
        BOOL v29 = os_log_type_enabled(v27, (os_log_type_t)v28);
        uint64_t v161 = v22;
        if (v29)
        {
          int v151 = v28;
          os_log_t v152 = v27;
          uint64_t v159 = (void (*)(uint64_t, uint64_t))v25;
          uint64_t v30 = v12;
          uint64_t v31 = swift_slowAlloc();
          uint64_t v32 = swift_slowAlloc();
          uint64_t v150 = v32;
          *(_DWORD *)uint64_t v31 = v141;
          uint64_t v167 = 1752392040;
          v168[0] = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v31 + 12) = 2081;
          id v33 = [v26 v18[90]];
          uint64_t v34 = v163;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v35 = v164;
          uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v38 = v37;
          (*v162)(v34, v35);
          uint64_t v167 = sub_1008FA0F0(v36, v38, v168);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v31 + 22) = 2082;
          unint64_t v39 = SPBeaconObservationType.description.getter((uint64_t)[v26 type]);
          uint64_t v167 = sub_1008FA0F0(v39, v40, v168);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v31 + 32) = 2082;
          id v41 = [v26 date];
          uint64_t v42 = v142;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          sub_100691B60((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v45 = v44;
          uint64_t v46 = *v157;
          (*v157)(v42, v30);
          uint64_t v167 = sub_1008FA0F0(v43, v45, v168);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          uint64_t v17 = 2082;
          *(_WORD *)(v31 + 42) = 2082;
          id v47 = [v26 location];

          if (v47) {
            uint64_t v48 = 7562617;
          }
          else {
            uint64_t v48 = 28526;
          }
          if (v47) {
            unint64_t v49 = 0xE300000000000000;
          }
          else {
            unint64_t v49 = 0xE200000000000000;
          }
          uint64_t v167 = sub_1008FA0F0(v48, v49, v168);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v31 + 52) = 2082;
          id v50 = [v26 location];
          if (v50)
          {
            uint64_t v51 = v50;
            id v52 = [v50 timestamp];

            static Date._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v53 = Date.debugDescription.getter();
            unint64_t v55 = v54;
            v46(v42, v158);
          }
          else
          {
            uint64_t v53 = 0;
            unint64_t v55 = 0xE000000000000000;
          }
          uint64_t v167 = sub_1008FA0F0(v53, v55, v168);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v31 + 62) = 2049;
          id v56 = [v26 location];
          double v57 = -1.0;
          double v58 = -1.0;
          uint64_t v20 = v149;
          uint64_t v18 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
          if (v56)
          {
            uint64_t v59 = v56;
            [v56 latitude];
            double v58 = v60;
          }
          uint64_t v167 = *(void *)&v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v31 + 72) = 2049;
          id v61 = [v26 location];
          os_log_type_t v62 = v151;
          if (v61)
          {
            uint64_t v63 = v61;
            [v61 longitude];
            double v57 = v64;
          }
          uint64_t v167 = *(void *)&v57;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v31 + 82) = 2050;
          id v65 = [v26 location];
          if (v65)
          {
            uint64_t v66 = v65;
            [v65 horizontalAccuracy];
            double v68 = v67;
          }
          else
          {
            double v68 = -1.0;
          }
          uint64_t v167 = *(void *)&v68;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          os_log_t v69 = v152;
          _os_log_impl((void *)&_mh_execute_header, v152, v62, "Updating Beacon %{private,mask.hash}s observation type: %{public}s, date: %{public}s. With location: %{public}s, timestamp: %{public}s, lat: %{private}f, lon: %{private}f, acc: %{public}f.", (uint8_t *)v31, 0x5Cu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v12 = v158;
        }
        else
        {
        }
        id v70 = [v26 date];
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        id v71 = [v26 v18[90]];
        uint64_t v72 = (uint64_t)v163;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100ACCD98(v72, (uint64_t)v168);
        uint64_t v159 = (void (*)(uint64_t, uint64_t))*v162;
        v159(v72, v164);
        uint64_t v73 = v168[3];
        sub_10001DAB4((uint64_t)v168, (uint64_t *)&unk_10163BBE0);
        if (!v73) {
          break;
        }
        if (qword_101636CB8 != -1) {
          swift_once();
        }
        uint64_t v74 = qword_10170E330;
        id v75 = [v26 v18[90]];
        uint64_t v76 = (uint64_t)v146;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v77 = v148;
        (*v145)(v76 + *(int *)(v148 + 20), v165, v12);
        *(unsigned char *)(v76 + *(int *)(v77 + 24)) = sub_1006C6A34((unint64_t)[v26 type]);
        sub_10000588C(&qword_10163A778);
        unint64_t v78 = (*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80);
        uint64_t v79 = swift_allocObject();
        *(_OWORD *)(v79 + 16) = v144;
        sub_1006CC8F8(v76, v79 + v78, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v80 = type metadata accessor for Transaction();
        uint64_t v17 = (uint64_t)v18;
        __chkstk_darwin(v80);
        *(&v131 - 4) = v74;
        *(&v131 - 3) = v79;
        uint64_t v129 = 0;
        uint64_t v130 = 0;
        uint64_t v81 = v155;
        static Transaction.named<A>(_:with:)();
        uint64_t v155 = v81;
        swift_bridgeObjectRelease();
        sub_1006CCE04(v76, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        id v82 = [v26 location];
        if (!v82)
        {
          uint64_t v99 = v26;
          uint64_t v100 = Logger.logObject.getter();
          os_log_type_t v110 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v100, v110))
          {
            uint64_t v111 = swift_slowAlloc();
            uint64_t v112 = swift_slowAlloc();
            *(_DWORD *)uint64_t v111 = v135;
            uint64_t v167 = 1752392040;
            v168[0] = v112;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v111 + 12) = 2081;
            os_log_t v152 = (os_log_t)(v111 + 14);
            id v113 = [v99 beaconIdentifier];
            char v114 = v163;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v17 = v164;
            uint64_t v115 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v117 = v116;
            uint64_t v118 = v114;
            uint64_t v20 = v149;
            v159((uint64_t)v118, v17);
            uint64_t v167 = sub_1008FA0F0(v115, v117, v168);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v100, v110, "No location in observation for beacon %{private,mask.hash}s. Update completed.", (uint8_t *)v111, 0x16u);
            swift_arrayDestroy();
LABEL_44:
            swift_slowDealloc();
            swift_slowDealloc();
LABEL_5:

            a3 = v157;
            uint64_t v12 = v158;
LABEL_6:
            (*a3)(v165, v12);
            goto LABEL_7;
          }
LABEL_4:

          goto LABEL_5;
        }
        uint64_t v83 = v82;
        id v84 = [v26 *(SEL *)(v17 + 720)];
        char v85 = v163;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v86 = v139;
        sub_100ACD178(v139);
        v159((uint64_t)v85, v164);
        if ((*v134)(v86, 1, v138) == 1)
        {
          sub_10001DAB4(v86, &qword_10163B9F0);
          uint64_t v87 = v26;
          uint64_t v88 = Logger.logObject.getter();
          os_log_type_t v89 = static os_log_type_t.default.getter();
          uint64_t v17 = v89;
          if (os_log_type_enabled(v88, v89))
          {
            uint64_t v90 = swift_slowAlloc();
            uint64_t v91 = swift_slowAlloc();
            *(_DWORD *)uint64_t v90 = v135;
            uint64_t v167 = 1752392040;
            v168[0] = v91;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v90 + 12) = 2081;
            os_log_t v152 = (os_log_t)(v90 + 14);
            id v92 = [v87 beaconIdentifier];
            uint64_t v93 = v163;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v94 = v164;
            uint64_t v95 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v97 = v96;
            uint64_t v98 = v93;
            uint64_t v20 = v149;
            v159((uint64_t)v98, v94);
            uint64_t v167 = sub_1008FA0F0(v95, v97, v168);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v88, (os_log_type_t)v17, "Beacon %{private,mask.hash}s is not an owned beacon. Cannot update beacon observation.", (uint8_t *)v90, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v12 = v158;
            swift_slowDealloc();
          }
          else
          {
          }
          a3 = v157;
          goto LABEL_6;
        }
        uint64_t v119 = v86;
        uint64_t v120 = v136;
        sub_1006CD470(v119, v136, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_1006CC8F8(v120, v137, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        id v121 = v83;
        uint64_t v122 = (char *)[v26 type];
        if ((unint64_t)(v122 - 1) >= 3)
        {
          id v124 = [self sharedInstance];
          unsigned int v125 = [v124 isInternalBuild];

          if (v125)
          {
            _Block_release(v132);
            LODWORD(v130) = 0;
            uint64_t v129 = 3288;
            uint64_t result = _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          char v123 = 0;
        }
        else
        {
          char v123 = (_BYTE)v122 + 1;
        }
        uint64_t v126 = v165;
        uint64_t v127 = v137;
        sub_1006ACBB8(v121, v165, v137, v123, v133);

        sub_1006CCE04(v136, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        a3 = v157;
        (*v157)(v126, v12);
        sub_1006CCE04(v127, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);

LABEL_7:
        a1 = v153;
        uint64_t v22 = v161 + 1;
        uint64_t v18 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
        if (v160 == v20)
        {
          swift_bridgeObjectRelease();
          a3 = v132;
          return ((uint64_t (*)(const void *, void))a3[2])(a3, 0);
        }
      }
      uint64_t v99 = v26;
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v100, v101))
      {
        uint64_t v102 = swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)uint64_t v102 = v135;
        uint64_t v167 = 1752392040;
        v168[0] = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v102 + 12) = 2081;
        os_log_t v152 = (os_log_t)(v102 + 14);
        id v103 = [v99 beaconIdentifier];
        int v104 = v163;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100691B60((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v105 = v164;
        uint64_t v106 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v108 = v107;
        uint64_t v109 = v104;
        uint64_t v20 = v149;
        v159((uint64_t)v109, v105);
        uint64_t v167 = sub_1008FA0F0(v106, v108, v168);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "No beacon found to updateBeaconObservations %{private,mask.hash}s.", (uint8_t *)v102, 0x16u);
        swift_arrayDestroy();
        goto LABEL_44;
      }
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(const void *, void))a3[2])(a3, 0);
}

void sub_1006C8044(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v31 = a1;
  uint64_t v4 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(char **)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v30 = (uint64_t)v28 - ((unint64_t)(v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v28 - v11;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = a3;
  _Block_copy(a3);
  if (qword_101636BE0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170E0E8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    BOOL v29 = v9;
    uint64_t v17 = v16;
    *(_DWORD *)uint64_t v16 = 134217984;
    uint64_t v33 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "offlineAdvertisingKeys for reason: %ld", v17, 0xCu);
    uint64_t v9 = v29;
    swift_slowDealloc();
  }

  sub_10037A7A0((uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10001DAB4((uint64_t)v6, &qword_10163B9F0);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "offlineAdvertisingKeys requested with no localBeaconRecord", v20, 2u);
      swift_slowDealloc();
    }

    sub_10001D4B0(0, &qword_10164B3A0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class))a3)[2](a3, isa);
    swift_release();
  }
  else
  {
    sub_1006CD470((uint64_t)v6, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    type metadata accessor for BeaconKeyManager(0);
    BOOL v29 = (char *)&type metadata for () + 8;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    v28[1] = 0;
    uint64_t v22 = v33;
    uint64_t v23 = swift_allocObject();
    swift_weakInit();
    uint64_t v24 = v30;
    sub_1006CC8F8((uint64_t)v12, v30, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v25 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = v23;
    v26[3] = sub_1006CA580;
    v26[4] = v32;
    sub_1006CD470(v24, (uint64_t)v26 + v25, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    *(void *)((char *)v26 + ((unint64_t)&v9[v25 + 7] & 0xFFFFFFFFFFFFFFF8)) = v31;
    uint64_t v27 = type metadata accessor for Transaction();
    __chkstk_darwin(v27);
    v28[-6] = v22;
    v28[-5] = v12;
    LOBYTE(v28[-4]) = 2;
    v28[-3] = sub_1006CA944;
    v28[-2] = v26;
    swift_retain();
    swift_retain();
    static Transaction.named<A>(_:with:)();
    swift_release();
    swift_release();
    sub_1006CCE04((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_release();
    swift_release();
  }
}

uint64_t sub_1006C85B8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  sub_1006CC8F8(a1 + *(int *)(v5 + 24), (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v13 = sub_10000588C((uint64_t *)&unk_1016565E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = &v4[*(int *)(v13 + 80)];
    uint64_t v16 = *(void *)v14;
    unint64_t v15 = *((void *)v14 + 1);
    uint64_t v29 = v16;
    unint64_t v30 = v15;
  }
  else
  {
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v7 = *((void *)v4 + 4);
        unint64_t v8 = *((void *)v4 + 5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v29 = v7;
        unint64_t v30 = v8;
        sub_1000336D4();
        uint64_t v9 = Data.init<A>(hexString:)();
        if (v10 >> 60 != 15)
        {
          uint64_t v11 = v9;
          unint64_t v12 = v10;
          uint64_t v29 = v9;
          unint64_t v30 = v10;
          sub_1000362FC();
          if ((DataProtocol.isNull.getter() & 1) == 0)
          {
            uint64_t v26 = Data.trimmed.getter();
            sub_100037A24(v11, v12);
            return v26;
          }
          sub_100037A24(v11, v12);
        }
      }
      else
      {
        sub_1006CCE04((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      }
      return 0;
    }
    uint64_t v17 = sub_10000588C(&qword_1016555E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v18 = &v4[*(int *)(v17 + 80)];
    uint64_t v19 = *(void *)v18;
    unint64_t v20 = *((void *)v18 + 1);
    swift_bridgeObjectRelease();
    uint64_t v29 = v19;
    unint64_t v30 = v20;
  }
  sub_1000336D4();
  uint64_t v21 = Data.init<A>(hexString:)();
  if (v22 >> 60 == 15)
  {
    uint64_t v23 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8))(v4, v23);
    return 0;
  }
  uint64_t v24 = v21;
  unint64_t v25 = v22;
  uint64_t v29 = v21;
  unint64_t v30 = v22;
  sub_1000362FC();
  if (DataProtocol.isNull.getter()) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = Data.trimmed.getter();
  }
  sub_100037A24(v24, v25);
  uint64_t v27 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(v4, v27);
  return v26;
}

uint64_t sub_1006C88D8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1006C8918(uint64_t a1)
{
  sub_10068EA20(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1006C8924()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1006C896C(uint64_t a1)
{
  return sub_1006862B8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
}

uint64_t sub_1006C8990()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v14 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v4 = v0 + v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + v3 + v1[6], v5);
  uint64_t v7 = v0 + v3 + v1[10];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v3 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  unint64_t v12 = (v14 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v12);

  return _swift_deallocObject(v0, v12 + 41, v2 | 7);
}

void sub_1006C8B84(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeaconEstimatedLocation() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v7 = *(unsigned __int8 *)(v6 + 40);

  sub_100686450(a1, v5, v1 + v4, v6, v7);
}

uint64_t sub_1006C8C28()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006C8C60(void (*a1)(uint64_t (*)()))
{
  return sub_100681BF4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1006C8C84()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1006C8DF8(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for Date();
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = v1[4];
  uint64_t v11 = v1[5];
  uint64_t v12 = v1[6];
  uint64_t v13 = *(void *)((char *)v1 + v7);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v14;
  *uint64_t v14 = v3;
  v14[1] = sub_100033F68;
  return sub_100681F90(a1, v8, v9, v10, v11, v12, (uint64_t)v1 + v6, v13);
}

uint64_t sub_1006C8F8C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[2] = v2;
  v4[3] = v3;
  v4[1] = sub_100033F68;
  return _swift_task_switch(sub_100682D54, 0, 0);
}

uint64_t sub_1006C9038()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006C9048(uint64_t a1)
{
  return sub_100681CA8(a1, *(void *)(v1 + 16));
}

uint64_t sub_1006C9050(uint64_t a1)
{
  return sub_100681D94(a1);
}

uint64_t sub_1006C9058()
{
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 40);

  return _swift_deallocObject(v0, 80, 7);
}

id sub_1006C90A0(uint64_t a1)
{
  return sub_10067B34C(a1, *(id *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (void *)(v1 + 40));
}

uint64_t sub_1006C90B4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + v4;
  unint64_t v7 = (void (**)(uint64_t))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];

  return sub_10067B490(a1, v5, v6, v8, v9);
}

uint64_t sub_1006C9158()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006C9190()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1006C91BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100AE2F00(a1, v5, v1 + v4, v6);
}

uint64_t sub_1006C9260()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v20 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v5 = v0 + v4;
  sub_10001CFB8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v2[5];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v0 + v4 + v2[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v9(v10, v7);
      uint64_t v19 = v0;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      uint64_t v19 = v0;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v1 = v19;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v5 + v2[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7)) {
    v9(v11, v7);
  }
  uint64_t v12 = v5 + v2[8];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_10001CFB8(*(void *)(v5 + v2[9]), *(void *)(v5 + v2[9] + 8));
  uint64_t v14 = (uint64_t *)(v5 + v2[10]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_10001CFB8(*v14, v15);
  }
  uint64_t v16 = (uint64_t *)(v5 + v2[11]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  sub_10001CFB8(*(void *)(v5 + v2[12]), *(void *)(v5 + v2[12] + 8));
  sub_10001CFB8(*(void *)(v5 + v2[13]), *(void *)(v5 + v2[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, v4 + v20, v3 | 7);
}

void sub_1006C95E0()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  sub_10067C2C4(v2);
}

uint64_t sub_1006C9640()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_bridgeObjectRelease();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  unint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1006C99DC()
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_10001D2E4;
  return sub_10067C560(v4, v5, v7, v8);
}

uint64_t sub_1006C9AF0()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 40) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 40) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  unint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_1006C9E7C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v4 = (void (*)(void))v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10067B110(a1, v4, v5, v6, v7);
}

uint64_t sub_1006C9EF4()
{
  uint64_t v1 = *(void *)(type metadata accessor for TimeBasedKeysCriteria() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v10 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v0 + v3, v10);
  }
  unint64_t v11 = (((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v11, v5);
  swift_release();

  return _swift_deallocObject(v0, ((v8 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | v7 | 7);
}

uint64_t sub_1006CA0B8()
{
  uint64_t v1 = *(void *)(type metadata accessor for TimeBasedKeysCriteria() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v0 + v3);
  uint64_t v7 = v0 + v5;
  uint64_t v8 = v0 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void (**)(void *))v8;
  uint64_t v10 = *(void *)(v8 + 8);

  return sub_100678C48(v0 + v2, v6, v7, v9, v10);
}

uint64_t sub_1006CA1C4@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_100672174(a1, *(void **)(v2 + 16), *(void ***)(v2 + 24), a2);
}

uint64_t sub_1006CA1E0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1006729B8(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void sub_1006CA1FC(void **a1@<X0>, uint64_t a2@<X8>)
{
  sub_100674400(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_1006CA218()
{
  return sub_1006CAD68(72);
}

uint64_t sub_1006CA220(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + 24;
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100033F68;
  v7[5] = v5;
  v7[6] = v6;
  v7[3] = a1;
  v7[4] = v4;
  return _swift_task_switch(sub_100674108, 0, 0);
}

uint64_t sub_1006CA2E4()
{
  return sub_1006CAD68(72);
}

uint64_t sub_1006CA2EC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + 24;
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100033F68;
  v7[5] = v5;
  v7[6] = v6;
  v7[3] = a1;
  v7[4] = v4;
  return _swift_task_switch(sub_1006782D0, 0, 0);
}

uint64_t sub_1006CA3B0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1006783DC(a1, *(void **)(v2 + 24), *(uint64_t **)(v2 + 32), a2);
}

uint64_t sub_1006CA3D0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1006767EC(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_1006CA3F0()
{
  return sub_1006CAD68(72);
}

uint64_t sub_1006CA3F8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + 24;
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100033F68;
  v7[5] = v5;
  v7[6] = v6;
  v7[3] = a1;
  v7[4] = v4;
  return _swift_task_switch(sub_10067805C, 0, 0);
}

void sub_1006CA4BC(uint64_t a1)
{
  sub_100691D90(a1, *(void *)(v1 + 16), &qword_10164B398);
}

uint64_t sub_1006CA4E8()
{
  return sub_1006CD418((void (*)(void))&_swift_bridgeObjectRelease);
}

void *sub_1006CA500(void *a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  a2(*a1, a1[1]);
  a3(v7, v8);
  a4(v9, v10);
  return a1;
}

void sub_1006CA580(uint64_t a1)
{
  sub_100691D90(a1, *(void *)(v1 + 16), &qword_10164B3A0);
}

uint64_t sub_1006CA5AC()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 40) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 40) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  unint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1006CA944()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0[2];
  uint64_t v4 = (void (*)(void))v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = *(void *)((char *)v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100686050(v3, v4, v5, (void *)((char *)v0 + v2), v6);
}

uint64_t sub_1006CA9D8(uint64_t a1)
{
  return sub_100F2DFC4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1006CA9F8()
{
  return sub_100FD0FF0(*(void *)(v0 + 16));
}

uint64_t sub_1006CAA00@<X0>(unsigned char *a1@<X8>)
{
  return sub_100F2DFB8(v1, a1);
}

uint64_t sub_1006CAA1C(uint64_t a1)
{
  return sub_10066D3A0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1006CAA3C()
{
  return sub_1006CC968(40);
}

uint64_t sub_1006CAA44()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 24);
  Transaction.capture()();
  return v1();
}

unint64_t sub_1006CAA84()
{
  unint64_t result = qword_10164B3A8;
  if (!qword_10164B3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10164B3A8);
  }
  return result;
}

uint64_t sub_1006CAAD8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1006CAB28(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100033F68;
  return sub_10066BA5C(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1006CABFC()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1006CAC4C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100033F68;
  return sub_1009A7A10(v2, v3, v0 + 32);
}

unint64_t sub_1006CACF4()
{
  unint64_t result = qword_10164B3D0;
  if (!qword_10164B3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164B3D0);
  }
  return result;
}

uint64_t sub_1006CAD48()
{
  return sub_1006CAD68(96);
}

uint64_t sub_1006CAD50()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006CAD60()
{
  return sub_1006CAD68(96);
}

uint64_t sub_1006CAD68(uint64_t a1)
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 24);

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1006CADB4(uint64_t a1)
{
  return sub_10067A688(*(void *)(v1 + 16), (void *)(v1 + 24), *(void **)(v1 + 64), *(void *)(v1 + 72), *(void **)(v1 + 80), *(void *)(v1 + 88), a1);
}

uint64_t sub_1006CADE0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006CADF0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100C09460();
}

uint64_t sub_1006CAE80(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v102 = a1;
  uint64_t v7 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v7 - 8);
  id v92 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v9 - 8);
  uint64_t v93 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for MACAddress();
  uint64_t v98 = *(void *)(v100 - 8);
  uint64_t v11 = __chkstk_darwin(v100);
  uint64_t v91 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = v12;
  __chkstk_darwin(v11);
  uint64_t v94 = (char *)&v88 - v13;
  uint64_t v99 = type metadata accessor for TimeBasedKey();
  uint64_t v14 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v95 = (uint64_t)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_10164B410);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t *)((char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_10163EB40);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  unint64_t v22 = (char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v101 = (uint64_t)&v88 - v23;
  uint64_t v24 = type metadata accessor for Date();
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)&v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DateInterval();
  uint64_t v96 = *(void *)(v27 - 8);
  uint64_t v97 = v27;
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v88 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = a3;
  *(void *)(v30 + 24) = a4;
  uint64_t v31 = *(void *)(a2 + 280);
  swift_retain();
  sub_100ACCD98(v102, (uint64_t)&v108);
  if (*((void *)&v109 + 1))
  {
    uint64_t v89 = v16;
    uint64_t v32 = a3;
    uint64_t v88 = a4;
    sub_10001CEB0(&v108, (uint64_t)v105);
    static Date.trustedNow.getter((uint64_t)v26);
    DateInterval.init(start:duration:)();
    uint64_t v34 = v106;
    uint64_t v33 = v107;
    uint64_t v35 = sub_10001CD44(v105, v106);
    uint64_t v36 = sub_100B2F5F4((uint64_t)v35, (uint64_t)v29, 0, 0, 0, v31, v34, v33);
    uint64_t v38 = v36;
    uint64_t v39 = v37;
    uint64_t v102 = v30;
    uint64_t v40 = v100;
    switch(v41)
    {
      case 1:
        uint64_t v42 = v101;
        uint64_t v43 = v32;
        if (*(void *)(v36 + 16))
        {
          sub_1006CC8F8(v36 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), v101, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          id v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
          uint64_t v48 = v42;
          uint64_t v49 = 0;
        }
        else
        {
          id v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
          uint64_t v48 = v101;
          uint64_t v49 = 1;
        }
        uint64_t v55 = v99;
        v47(v48, v49, 1, v99);
        uint64_t v52 = v38;
        uint64_t v53 = v39;
        uint64_t v50 = v55;
        unsigned __int8 v54 = 1;
        goto LABEL_14;
      case 2:
        sub_1002F6A08(v36, v37, 2u);
        goto LABEL_9;
      case 3:
LABEL_9:
        uint64_t v42 = v101;
        uint64_t v50 = v99;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v101, 1, 1, v99);
        uint64_t v43 = v32;
        break;
      default:
        uint64_t v42 = v101;
        uint64_t v43 = v32;
        if (*(void *)(v36 + 16))
        {
          sub_1006CC8F8(v36 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), v101, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          unint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
          uint64_t v45 = v42;
          uint64_t v46 = 0;
        }
        else
        {
          unint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
          uint64_t v45 = v101;
          uint64_t v46 = 1;
        }
        uint64_t v51 = v99;
        v44(v45, v46, 1, v99);
        uint64_t v52 = v38;
        uint64_t v53 = v39;
        uint64_t v50 = v51;
        unsigned __int8 v54 = 0;
LABEL_14:
        sub_1002F6A08(v52, v53, v54);
        break;
    }
    sub_10001D074(v42, (uint64_t)v22, (uint64_t *)&unk_10163EB40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v22, 1, v50) == 1)
    {
      sub_10001DAB4((uint64_t)v22, (uint64_t *)&unk_10163EB40);
      type metadata accessor for SPOwnerSessionError(0);
      uint64_t v103 = 14;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100691B60(&qword_101638460, type metadata accessor for SPOwnerSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      *uint64_t v18 = v108;
      swift_storeEnumTagMultiPayload();
      sub_1007C0094((uint64_t)v18, v43, v88);
      sub_10001DAB4((uint64_t)v18, &qword_10164B410);
      sub_10001DAB4(v42, (uint64_t *)&unk_10163EB40);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v29, v97);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v105);
    }
    else
    {
      uint64_t v56 = v95;
      sub_1006CD470((uint64_t)v22, v95, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      double v57 = (long long *)(v56 + *(int *)(v50 + 24));
      long long v58 = v57[2];
      long long v59 = *v57;
      long long v109 = v57[1];
      long long v110 = v58;
      long long v108 = v59;
      sub_1006CA500(&v108, (void (*)(void, void))sub_1006CD4D8, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
      uint64_t v60 = sub_100A8C640();
      unint64_t v62 = v61;
      sub_1006CA500(&v108, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
      sub_100435A9C(6, v60, v62, &v103);
      uint64_t v63 = v103;
      unint64_t v64 = v104;
      sub_1000361E0(v103, v104);
      id v65 = v93;
      MACAddress.init(addressToSanitize:type:)();
      uint64_t v66 = v98;
      uint64_t v67 = v40;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v65, 1, v40) == 1)
      {
        swift_release();
        __break(1u);
        JUMPOUT(0x1006CB9D8);
      }
      uint64_t v99 = (uint64_t)v29;
      uint64_t v93 = *(char **)(v66 + 32);
      ((void (*)(char *, char *, uint64_t))v93)(v94, v65, v40);
      sub_10001CFB8(v63, v64);
      uint64_t v68 = v106;
      uint64_t v69 = v107;
      sub_10001CD44(v105, v106);
      uint64_t v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 168))(v68, v69);
      int v72 = 2;
      if (v71 >> 60 != 15)
      {
        uint64_t v73 = v70;
        unint64_t v74 = v71;
        BOOL v75 = sub_100DC8868(v70, v71);
        sub_100037A24(v73, v74);
        if (v75) {
          int v72 = 3;
        }
        else {
          int v72 = 2;
        }
      }
      LODWORD(v89) = v72;
      uint64_t v76 = type metadata accessor for TaskPriority();
      uint64_t v77 = (uint64_t)v92;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v92, 1, 1, v76);
      uint64_t v78 = v98;
      uint64_t v79 = v91;
      uint64_t v80 = v94;
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v91, v94, v67);
      unint64_t v81 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
      uint64_t v82 = v81 + v90;
      unint64_t v83 = (v81 + v90) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v84 = swift_allocObject();
      unint64_t v85 = v83 + v84;
      *(void *)(v84 + 16) = 0;
      *(void *)(v84 + 24) = 0;
      ((void (*)(unint64_t, char *, uint64_t))v93)(v84 + v81, v79, v67);
      *(unsigned char *)(v84 + v82) = v89;
      uint64_t v86 = v102;
      *(void *)(v85 + 8) = sub_1006CC694;
      *(void *)(v85 + 16) = v86;
      swift_retain();
      sub_1008F5E44(v77, (uint64_t)&unk_10164B420, v84);
      swift_release();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v67);
      sub_1006CCE04(v95, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      sub_10001DAB4(v101, (uint64_t *)&unk_10163EB40);
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v99, v97);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v105);
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)&v108, (uint64_t *)&unk_10163BBE0);
    type metadata accessor for SPOwnerSessionError(0);
    v105[0] = 2;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100691B60(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v18 = v108;
    swift_storeEnumTagMultiPayload();
    sub_1007C0094((uint64_t)v18, a3, a4);
    sub_10001DAB4((uint64_t)v18, &qword_10164B410);
  }
  return swift_release();
}

uint64_t sub_1006CB9E8(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v102 = a1;
  uint64_t v7 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v7 - 8);
  id v92 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v9 - 8);
  uint64_t v93 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for MACAddress();
  uint64_t v98 = *(void *)(v100 - 8);
  uint64_t v11 = __chkstk_darwin(v100);
  uint64_t v91 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = v12;
  __chkstk_darwin(v11);
  uint64_t v94 = (char *)&v88 - v13;
  uint64_t v99 = type metadata accessor for TimeBasedKey();
  uint64_t v14 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v95 = (uint64_t)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_10164B3F8);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t *)((char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_10163EB40);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  unint64_t v22 = (char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v101 = (uint64_t)&v88 - v23;
  uint64_t v24 = type metadata accessor for Date();
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)&v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DateInterval();
  uint64_t v96 = *(void *)(v27 - 8);
  uint64_t v97 = v27;
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v88 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = a3;
  *(void *)(v30 + 24) = a4;
  uint64_t v31 = *(void *)(a2 + 280);
  swift_retain();
  sub_100ACCD98(v102, (uint64_t)&v108);
  if (*((void *)&v109 + 1))
  {
    uint64_t v89 = v16;
    uint64_t v32 = a3;
    uint64_t v88 = a4;
    sub_10001CEB0(&v108, (uint64_t)v105);
    static Date.trustedNow.getter((uint64_t)v26);
    DateInterval.init(start:duration:)();
    uint64_t v34 = v106;
    uint64_t v33 = v107;
    uint64_t v35 = sub_10001CD44(v105, v106);
    uint64_t v36 = sub_100B2F5F4((uint64_t)v35, (uint64_t)v29, 0, 0, 0, v31, v34, v33);
    uint64_t v38 = v36;
    uint64_t v39 = v37;
    uint64_t v102 = v30;
    uint64_t v40 = v100;
    switch(v41)
    {
      case 1:
        uint64_t v42 = v101;
        uint64_t v43 = v32;
        if (*(void *)(v36 + 16))
        {
          sub_1006CC8F8(v36 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), v101, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          id v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
          uint64_t v48 = v42;
          uint64_t v49 = 0;
        }
        else
        {
          id v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
          uint64_t v48 = v101;
          uint64_t v49 = 1;
        }
        uint64_t v55 = v99;
        v47(v48, v49, 1, v99);
        uint64_t v52 = v38;
        uint64_t v53 = v39;
        uint64_t v50 = v55;
        unsigned __int8 v54 = 1;
        goto LABEL_14;
      case 2:
        sub_1002F6A08(v36, v37, 2u);
        goto LABEL_9;
      case 3:
LABEL_9:
        uint64_t v42 = v101;
        uint64_t v50 = v99;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v101, 1, 1, v99);
        uint64_t v43 = v32;
        break;
      default:
        uint64_t v42 = v101;
        uint64_t v43 = v32;
        if (*(void *)(v36 + 16))
        {
          sub_1006CC8F8(v36 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), v101, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          unint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
          uint64_t v45 = v42;
          uint64_t v46 = 0;
        }
        else
        {
          unint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
          uint64_t v45 = v101;
          uint64_t v46 = 1;
        }
        uint64_t v51 = v99;
        v44(v45, v46, 1, v99);
        uint64_t v52 = v38;
        uint64_t v53 = v39;
        uint64_t v50 = v51;
        unsigned __int8 v54 = 0;
LABEL_14:
        sub_1002F6A08(v52, v53, v54);
        break;
    }
    sub_10001D074(v42, (uint64_t)v22, (uint64_t *)&unk_10163EB40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v22, 1, v50) == 1)
    {
      sub_10001DAB4((uint64_t)v22, (uint64_t *)&unk_10163EB40);
      type metadata accessor for SPOwnerSessionError(0);
      uint64_t v103 = 14;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100691B60(&qword_101638460, type metadata accessor for SPOwnerSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      *uint64_t v18 = v108;
      swift_storeEnumTagMultiPayload();
      sub_1007C0230((uint64_t)v18, v43, v88);
      sub_10001DAB4((uint64_t)v18, &qword_10164B3F8);
      sub_10001DAB4(v42, (uint64_t *)&unk_10163EB40);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v29, v97);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v105);
    }
    else
    {
      uint64_t v56 = v95;
      sub_1006CD470((uint64_t)v22, v95, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      double v57 = (long long *)(v56 + *(int *)(v50 + 24));
      long long v58 = v57[2];
      long long v59 = *v57;
      long long v109 = v57[1];
      long long v110 = v58;
      long long v108 = v59;
      sub_1006CA500(&v108, (void (*)(void, void))sub_1006CD4D8, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
      uint64_t v60 = sub_100A8C640();
      unint64_t v62 = v61;
      sub_1006CA500(&v108, (void (*)(void, void))sub_10015AF5C, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
      sub_100435A9C(6, v60, v62, &v103);
      uint64_t v63 = v103;
      unint64_t v64 = v104;
      sub_1000361E0(v103, v104);
      id v65 = v93;
      MACAddress.init(addressToSanitize:type:)();
      uint64_t v66 = v98;
      uint64_t v67 = v40;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v65, 1, v40) == 1)
      {
        swift_release();
        __break(1u);
        JUMPOUT(0x1006CC540);
      }
      uint64_t v99 = (uint64_t)v29;
      uint64_t v93 = *(char **)(v66 + 32);
      ((void (*)(char *, char *, uint64_t))v93)(v94, v65, v40);
      sub_10001CFB8(v63, v64);
      uint64_t v68 = v106;
      uint64_t v69 = v107;
      sub_10001CD44(v105, v106);
      uint64_t v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 168))(v68, v69);
      int v72 = 2;
      if (v71 >> 60 != 15)
      {
        uint64_t v73 = v70;
        unint64_t v74 = v71;
        BOOL v75 = sub_100DC8868(v70, v71);
        sub_100037A24(v73, v74);
        if (v75) {
          int v72 = 3;
        }
        else {
          int v72 = 2;
        }
      }
      LODWORD(v89) = v72;
      uint64_t v76 = type metadata accessor for TaskPriority();
      uint64_t v77 = (uint64_t)v92;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v92, 1, 1, v76);
      uint64_t v78 = v98;
      uint64_t v79 = v91;
      uint64_t v80 = v94;
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v91, v94, v67);
      unint64_t v81 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
      uint64_t v82 = v81 + v90;
      unint64_t v83 = (v81 + v90) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v84 = swift_allocObject();
      unint64_t v85 = v83 + v84;
      *(void *)(v84 + 16) = 0;
      *(void *)(v84 + 24) = 0;
      ((void (*)(unint64_t, char *, uint64_t))v93)(v84 + v81, v79, v67);
      *(unsigned char *)(v84 + v82) = v89;
      uint64_t v86 = v102;
      *(void *)(v85 + 8) = sub_1006CC550;
      *(void *)(v85 + 16) = v86;
      swift_retain();
      sub_1008F5E44(v77, (uint64_t)&unk_10164B408, v84);
      swift_release();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v67);
      sub_1006CCE04(v95, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      sub_10001DAB4(v101, (uint64_t *)&unk_10163EB40);
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v99, v97);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v105);
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)&v108, (uint64_t *)&unk_10163BBE0);
    type metadata accessor for SPOwnerSessionError(0);
    v105[0] = 2;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100691B60(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v18 = v108;
    swift_storeEnumTagMultiPayload();
    sub_1007C0230((uint64_t)v18, a3, a4);
    sub_10001DAB4((uint64_t)v18, &qword_10164B3F8);
  }
  return swift_release();
}

uint64_t sub_1006CC550(uint64_t a1)
{
  return sub_1007C0230(a1, *(void (**)(void *, uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1006CC55C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for MACAddress() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + v1;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = *(void *)(v7 + 8);
  uint64_t v12 = *(void *)(v7 + 16);
  char v13 = *(unsigned char *)(v1 + v6);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100033F68;
  return sub_100690D90(a1, v8, v9, v10, v13, v11, v12);
}

uint64_t sub_1006CC694(uint64_t a1)
{
  return sub_1007C0094(a1, *(void (**)(void *, uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1006CC6A0()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 24;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1006CC788(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for MACAddress() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + v1;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = *(void *)(v7 + 8);
  uint64_t v12 = *(void *)(v7 + 16);
  char v13 = *(unsigned char *)(v1 + v6);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100033F68;
  return sub_1006909B4(a1, v8, v9, v10, v13, v11, v12);
}

uint64_t sub_1006CC8C0()
{
  return sub_1006CCD48((void (*)(void))&_swift_bridgeObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_1006CC8EC()
{
  return sub_100661D14(*(void *)(v0 + 16), *(char **)(v0 + 24), *(void (**)(void *))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1006CC8F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1006CC960()
{
  return sub_1006CC968(40);
}

uint64_t sub_1006CC968(uint64_t a1)
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1006CC9B4()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100033F68;
  *(void *)(v3 + 152) = v2;
  *(_OWORD *)(v3 + 136) = v4;
  return _swift_task_switch(sub_1006632C8, 0, 0);
}

uint64_t sub_1006CCA68()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1006CCB3C()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = (uint64_t)v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_100033F68;
  return sub_100663ED0(v3, v4, v5, v6);
}

uint64_t sub_1006CCC28(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[3] = v5;
  v7[4] = v6;
  v7[1] = sub_10001D2E4;
  uint64_t v7[2] = a1;
  return _swift_task_switch(sub_1006672D0, v5, 0);
}

uint64_t sub_1006CCD1C()
{
  return sub_1006CCD48((void (*)(void))&_swift_bridgeObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_1006CCD48(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 24));
  swift_release();

  return _swift_deallocObject(v2, 48, 7);
}

uint64_t sub_1006CCDA8()
{
  return sub_10065CDA4(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1006CCDB4()
{
  return sub_1006CD418((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1006CCDCC()
{
  return sub_1006CCDD4();
}

uint64_t sub_1006CCDD4()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_1006CCE04(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1006CCE64@<X0>(void *a1@<X8>)
{
  return sub_100824190(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_1006CCE84(uint64_t a1)
{
  sub_10065A724(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1006CCEA8()
{
  swift_release();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006CCEE0()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_1006CD060()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 17) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1006CD1B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  char v4 = *(unsigned char *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10065A790(a1, v4, v5);
}

uint64_t sub_1006CD224()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1006CD384(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  int v4 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10065A888(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1006CD400()
{
  return sub_1006CD418((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1006CD418(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_1006CD468(void *a1)
{
  return sub_10065B508(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1006CD470(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

BOOL sub_1006CD4DC(uint64_t a1)
{
  return sub_1006C5824(a1);
}

uint64_t sub_1006CD4F8()
{
  return sub_1005E4C34() & 1;
}

uint64_t sub_1006CD51C@<X0>(void *a1@<X8>)
{
  return sub_1006C5844(a1);
}

uint64_t sub_1006CD670@<X0>(uint64_t a1@<X8>)
{
  return sub_1006C434C(a1);
}

uint64_t sub_1006CD688(uint64_t a1)
{
  return sub_10048321C(a1) & 1;
}

uint64_t sub_1006CD6A4@<X0>(void *a1@<X8>)
{
  return sub_1006C5870(a1);
}

uint64_t sub_1006CD6BC@<X0>(void *a1@<X8>)
{
  return sub_1006C58EC(a1);
}

uint64_t sub_1006CD6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006CD6FC);
}

uint64_t sub_1006CD6FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1006CD7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006CD7C0);
}

void *sub_1006CD7C0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AirPodsPairingLockAckEndPoint()
{
  uint64_t result = qword_10164B4F8;
  if (!qword_10164B4F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1006CD8B4()
{
  sub_10000588C(&qword_101639580);
  OS_dispatch_queue.sync<A>(execute:)();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  uint64_t v0 = (void (*)(uint64_t *, void))URLComponents.path.modify();
  v1._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v1._object = (void *)0x80000001014044D0;
  String.append(_:)(v1);
  v0(&v7, 0);
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)qword_10170EE68;
  id v3 = [self sharedInstance];
  unsigned int v4 = [v3 isInternalBuild];

  if (v4)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v2 stringForKey:v5];

    if (v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URLComponents.host.setter();
    }
  }
}

uint64_t sub_1006CDA9C(uint64_t a1, char a2, char a3)
{
  *(unsigned char *)(v4 + 27) = a3;
  *(unsigned char *)(v4 + 26) = a2;
  *(void *)(v4 + 224) = a1;
  *(void *)(v4 + 232) = v3;
  sub_10000588C(&qword_10164DBB0);
  *(void *)(v4 + 240) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for BookmarkMetaData();
  *(void *)(v4 + 248) = v5;
  *(void *)(v4 + 256) = *(void *)(v5 - 8);
  *(void *)(v4 + 264) = swift_task_alloc();
  sub_10000588C(&qword_10164B638);
  *(void *)(v4 + 272) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  *(void *)(v4 + 280) = v6;
  *(void *)(v4 + 288) = *(void *)(v6 - 8);
  *(void *)(v4 + 296) = swift_task_alloc();
  *(void *)(v4 + 304) = swift_task_alloc();
  *(void *)(v4 + 312) = type metadata accessor for BeaconKeyManager.FileKey(0);
  *(void *)(v4 + 320) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnerSharingCircle();
  *(void *)(v4 + 328) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v4 + 336) = v8;
  *(void *)(v4 + 344) = *(void *)(v8 + 64);
  *(void *)(v4 + 352) = swift_task_alloc();
  *(void *)(v4 + 360) = swift_task_alloc();
  *(void *)(v4 + 368) = swift_task_alloc();
  *(void *)(v4 + 376) = swift_task_alloc();
  *(void *)(v4 + 384) = swift_task_alloc();
  *(void *)(v4 + 392) = swift_task_alloc();
  *(void *)(v4 + 400) = swift_task_alloc();
  return _swift_task_switch(sub_1006CDD10, v3, 0);
}

uint64_t sub_1006CDD10()
{
  char v1 = *(unsigned char *)(v0 + 26);
  uint64_t v2 = sub_100CBC3A4(*(void *)(v0 + 224), v1);
  uint64_t v5 = (uint64_t)v2;
  *(void *)(v0 + 408) = v2;
  if (v1)
  {
    int64_t v6 = 0;
    *(void *)(v0 + 440) = _swiftEmptyDictionarySingleton;
    char v7 = v2[32];
    *(unsigned char *)(v0 + 41) = v7;
    uint64_t v8 = 1 << v7;
    uint64_t v9 = -1;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    uint64_t v10 = v2 + 56;
    unint64_t v11 = v9 & *((void *)v2 + 7);
    *(_DWORD *)(v0 + 28) = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    while (1)
    {
      *(void *)(v0 + 448) = 0;
      if (v11)
      {
        unint64_t v13 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v14 = v13 | (v6 << 6);
      }
      else
      {
        int64_t v15 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
LABEL_33:
          __break(1u);
          return _swift_task_switch(v2, v3, v4);
        }
        if (v15 >= v12) {
          goto LABEL_29;
        }
        unint64_t v16 = *(void *)&v10[8 * v15];
        ++v6;
        if (!v16)
        {
          int64_t v6 = v15 + 1;
          if (v15 + 1 >= v12) {
            goto LABEL_29;
          }
          unint64_t v16 = *(void *)&v10[8 * v6];
          if (!v16)
          {
            int64_t v6 = v15 + 2;
            if (v15 + 2 >= v12) {
              goto LABEL_29;
            }
            unint64_t v16 = *(void *)&v10[8 * v6];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v12)
              {
LABEL_29:
                uint64_t v25 = *(void *)(v0 + 232);
                swift_release();
                sub_10001CD44((void *)(v25 + 112), *(void *)(v25 + 136));
                uint64_t v26 = (void *)swift_task_alloc();
                *(void *)(v0 + 472) = v26;
                *uint64_t v26 = v0;
                v26[1] = sub_1006CE3A8;
                uint64_t v27 = *(void *)(v0 + 440);
                char v28 = *(unsigned char *)(v0 + 27);
                char v29 = *(unsigned char *)(v0 + 26);
                uint64_t v30 = *(void *)(v0 + 224);
                return sub_100C29C0C(v30, v29, v27, v28);
              }
              unint64_t v16 = *(void *)&v10[8 * v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v6 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_33;
                  }
                  if (v6 >= v12) {
                    goto LABEL_29;
                  }
                  unint64_t v16 = *(void *)&v10[8 * v6];
                  ++v17;
                  if (v16) {
                    goto LABEL_20;
                  }
                }
              }
              int64_t v6 = v17;
            }
          }
        }
LABEL_20:
        unint64_t v11 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v6 << 6);
      }
      *(void *)(v0 + 456) = v6;
      *(void *)(v0 + 464) = v11;
      int v18 = *(unsigned __int8 *)(*((void *)v2 + 6) + v14);
      *(unsigned char *)(v0 + 42) = v18;
      if ((v18 - 7) >= 0xA && ((1 << v18) & 0x1C) == 0)
      {
        *(unsigned char *)(v0 + 43) = ((1 << v18) & 0x21) == 0;
        uint64_t v3 = *(void *)(*(void *)(v0 + 232) + 152);
        *(void *)(v0 + 496) = v3;
        uint64_t v2 = sub_1006CEF84;
        uint64_t v4 = 0;
        return _swift_task_switch(v2, v3, v4);
      }
    }
  }
  uint64_t v19 = *(void *)(v0 + 328);
  uint64_t v20 = *(void *)(v0 + 224);
  unsigned int v21 = 0x4000201u >> (8 * *(unsigned char *)(v20 + *(int *)(v19 + 28)));
  uint64_t v22 = v20 + *(int *)(v19 + 20);
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 416) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_1006CE024;
  return sub_1006D1A88(v22, v21, v5);
}

uint64_t sub_1006CE024(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[53] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[29];
  if (v1)
  {
    int64_t v6 = sub_1006CFC1C;
  }
  else
  {
    v4[54] = a1;
    int64_t v6 = sub_1006CE160;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1006CE160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(v3 + 424);
  *(void *)(v3 + 440) = *(void *)(v3 + 432);
  int64_t v6 = *(uint64_t (**)())(v3 + 408);
  char v7 = *((unsigned char *)v6 + 32);
  *(unsigned char *)(v3 + 41) = v7;
  uint64_t v8 = 1 << v7;
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  uint64_t v10 = (char *)v6 + 56;
  unint64_t v11 = v9 & *((void *)v6 + 7);
  *(_DWORD *)(v3 + 28) = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
  int64_t v12 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    *(void *)(v3 + 448) = v5;
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v4 << 6);
      goto LABEL_20;
    }
    int64_t v15 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return _swift_task_switch(v6, a2, a3);
    }
    if (v15 >= v12) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)&v10[8 * v15];
    ++v4;
    if (!v16)
    {
      int64_t v4 = v15 + 1;
      if (v15 + 1 >= v12) {
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)&v10[8 * v4];
      if (!v16)
      {
        int64_t v4 = v15 + 2;
        if (v15 + 2 >= v12) {
          goto LABEL_25;
        }
        unint64_t v16 = *(void *)&v10[8 * v4];
        if (!v16) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v11 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v4 << 6);
LABEL_20:
    *(void *)(v3 + 456) = v4;
    *(void *)(v3 + 464) = v11;
    int v18 = *(unsigned __int8 *)(*((void *)v6 + 6) + v14);
    *(unsigned char *)(v3 + 42) = v18;
    if ((v18 - 7) >= 0xA && ((1 << v18) & 0x1C) == 0)
    {
      *(unsigned char *)(v3 + 43) = ((1 << v18) & 0x21) == 0;
      a2 = *(void *)(*(void *)(v3 + 232) + 152);
      *(void *)(v3 + 496) = a2;
      int64_t v6 = sub_1006CEF84;
      a3 = 0;
      return _swift_task_switch(v6, a2, a3);
    }
  }
  int64_t v17 = v15 + 3;
  if (v17 < v12)
  {
    unint64_t v16 = *(void *)&v10[8 * v17];
    if (!v16)
    {
      while (1)
      {
        int64_t v4 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_29;
        }
        if (v4 >= v12) {
          goto LABEL_25;
        }
        unint64_t v16 = *(void *)&v10[8 * v4];
        ++v17;
        if (v16) {
          goto LABEL_19;
        }
      }
    }
    int64_t v4 = v17;
    goto LABEL_19;
  }
LABEL_25:
  uint64_t v19 = *(void *)(v3 + 232);
  swift_release();
  sub_10001CD44((void *)(v19 + 112), *(void *)(v19 + 136));
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v3 + 472) = v20;
  *uint64_t v20 = v3;
  v20[1] = sub_1006CE3A8;
  uint64_t v21 = *(void *)(v3 + 440);
  char v22 = *(unsigned char *)(v3 + 27);
  char v23 = *(unsigned char *)(v3 + 26);
  uint64_t v24 = *(void *)(v3 + 224);
  return sub_100C29C0C(v24, v23, v21, v22);
}

uint64_t sub_1006CE3A8()
{
  uint64_t v2 = (void *)*v1;
  v2[60] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[29];
    return _swift_task_switch(sub_1006CE7CC, v3, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    int64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_101662A90 + dword_101662A90);
    int64_t v4 = (void *)swift_task_alloc();
    v2[61] = v4;
    *int64_t v4 = v2;
    v4[1] = sub_1006CE538;
    return v6(2);
  }
}

uint64_t sub_1006CE538()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1006CE7CC()
{
  uint64_t v35 = v0;
  swift_bridgeObjectRelease();
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_1006D5350(v3, v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_1006D5350(v3, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 392);
  uint64_t v9 = *(void *)(v0 + 400);
  if (v7)
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v32 = (void *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 141559043;
    *(void *)(v0 + 152) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2081;
    type metadata accessor for UUID();
    sub_1006D5418((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 160) = sub_1008FA0F0(v11, v12, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006D53B8(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v10 + 22) = 2160;
    *(void *)(v0 + 168) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 32) = 2081;
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 176) = sub_1008FA0F0(v13, v14, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006D53B8(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v10 + 42) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 184) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v32 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Keys upload failure for circle: %{private,mask.hash}s, beacon: %{private,mask.hash}s, error %{public}@.", (uint8_t *)v10, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1006D53B8(*(void *)(v0 + 400), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_1006D53B8(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
    swift_errorRelease();
  }
  *(void *)(v0 + 120) = *(void *)(v0 + 480);
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if (swift_dynamicCast() && *(unsigned char *)(v0 + 25) == 20)
  {
    uint64_t v33 = (uint64_t (*)(char))((char *)&dword_101662A90 + dword_101662A90);
    unint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 536) = v16;
    *unint64_t v16 = v0;
    v16[1] = sub_1006D04EC;
    char v17 = 1;
LABEL_16:
    return v33(v17);
  }
  uint64_t v18 = *(void *)(v0 + 480);
  swift_errorRelease();
  *(void *)(v0 + 136) = v18;
  swift_errorRetain();
  if (!swift_dynamicCast() || *(unsigned char *)(v0 + 24) != 1 || *(void *)(v0 + 16) < 6uLL)
  {
    swift_errorRelease();
    uint64_t v33 = (uint64_t (*)(char))((char *)&dword_101662A90 + dword_101662A90);
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 544) = v31;
    *uint64_t v31 = v0;
    v31[1] = sub_1006D0718;
    char v17 = 0;
    goto LABEL_16;
  }
  uint64_t v19 = *(void *)(v0 + 352);
  uint64_t v20 = *(void *)(v0 + 336);
  uint64_t v22 = *(void *)(v0 + 232);
  uint64_t v21 = *(void *)(v0 + 240);
  uint64_t v23 = *(void *)(v0 + 224);
  uint64_t v24 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v21, 1, 1, v24);
  sub_1006D5350(v23, v19, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v26 = sub_1006D5418(&qword_10164B650, v25, (void (*)(uint64_t))type metadata accessor for ShareKeysUploadUseCase);
  unint64_t v27 = (*(unsigned __int8 *)(v20 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  char v28 = (void *)swift_allocObject();
  void v28[2] = v22;
  v28[3] = v26;
  v28[4] = v22;
  sub_1006D4E24(v19, (uint64_t)v28 + v27, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_retain_n();
  sub_100885EBC(v21, (uint64_t)&unk_10164B658, (uint64_t)v28);
  swift_errorRelease();
  swift_release();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

uint64_t sub_1006CEF84()
{
  *(void *)(v0 + 504) = *(void *)(*(void *)(v0 + 496) + 136);
  swift_retain();
  return _swift_task_switch(sub_1006CEFF8, 0, 0);
}

uint64_t sub_1006CEFF8()
{
  uint64_t v2 = v0[62];
  uint64_t v1 = v0[63];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[64] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[65] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_1006CF10C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DAA8, v3, v5);
}

uint64_t sub_1006CF10C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 232);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 528) = *(void *)(v1 + 48);
  return _swift_task_switch(sub_1006CF27C, v2, 0);
}

uint64_t sub_1006CF27C()
{
  uint64_t v71 = v0;
  uint64_t v2 = *(void *)(v0 + 528);
  char v3 = *(unsigned char *)(v0 + 43);
  uint64_t v4 = *(void *)(v0 + 448);
  uint64_t v5 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 312);
  uint64_t v7 = *(void *)(v0 + 224) + *(int *)(*(void *)(v0 + 328) + 24);
  unint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)(v8 - 8) + 16))(v5, v7, v8);
  *(unsigned char *)(v5 + *(int *)(v6 + 20)) = v3;
  uint64_t v9 = swift_task_alloc();
  *(void *)(v9 + 16) = v2;
  *(void *)(v9 + 24) = v5;
  sub_10000588C(&qword_10164B640);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  swift_task_dealloc();
  uint64_t v10 = *(void *)(v0 + 56);
  if (v10) {
    goto LABEL_2;
  }
  uint64_t v22 = sub_1012EDD20(v7, *(unsigned __int8 *)(v0 + 43), 0);
  if (!v22)
  {
    sub_1006D53B8(*(void *)(v0 + 320), type metadata accessor for BeaconKeyManager.FileKey);
    swift_release();
    goto LABEL_19;
  }
  uint64_t v10 = v22;
  uint64_t v23 = *(unsigned int *)(v0 + 28);
  uint64_t v25 = *(void *)(v0 + 296);
  uint64_t v24 = *(void *)(v0 + 304);
  uint64_t v27 = *(void *)(v0 + 280);
  uint64_t v26 = *(void *)(v0 + 288);
  static SystemInfo.lockState.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 104))(v25, v23, v27);
  sub_1006D5418((unint64_t *)&qword_1016429C8, 255, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  LOBYTE(v23) = dispatch thunk of static Equatable.== infix(_:_:)();
  char v28 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  unint64_t v8 = v26 + 8;
  v28(v25, v27);
  v28(v24, v27);
  if (v23)
  {
LABEL_2:
    uint64_t v11 = *(void *)(v0 + 320);
  }
  else
  {
    unint64_t v8 = *(void *)(v0 + 528);
    uint64_t v29 = *(void *)(v0 + 320);
    uint64_t v30 = (void *)swift_task_alloc();
    void v30[2] = v8;
    v30[3] = v29;
    v30[4] = v10;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    swift_task_dealloc();
    uint64_t v11 = v29;
  }
  sub_1006D53B8(v11, type metadata accessor for BeaconKeyManager.FileKey);
  unint64_t v1 = *(unsigned int *)(v10 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_firstIndex);
  unsigned int v12 = *(_DWORD *)(v10 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_lastIndex);
  swift_release();
  swift_release();
  if (v12 < v1)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (*(void *)(*(void *)(v0 + 440) + 16) && (unint64_t v13 = sub_100724268(*(unsigned char *)(v0 + 42)), (v14 & 1) != 0))
  {
    sub_1006D5350(*(void *)(*(void *)(v0 + 440) + 56) + *(void *)(*(void *)(v0 + 256) + 72) * v13, *(void *)(v0 + 272), (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  uint64_t v16 = *(void *)(v0 + 272);
  uint64_t v18 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v16, v15, 1, v18);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  unint64_t v8 = v17 + 48;
  int v20 = v19(v16, 1, v18);
  uint64_t v21 = *(void *)(v0 + 272);
  if (!v20)
  {
    uint64_t v31 = *(void *)(v0 + 264);
    sub_1006D5350(*(void *)(v0 + 272), v31, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
    sub_10001DAB4(v21, &qword_10164B638);
    unint64_t v8 = *(void *)(v31 + 8);
    sub_1006D53B8(v31, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
    if (v8 >= v1) {
      goto LABEL_19;
    }
    if (qword_101636888 == -1)
    {
LABEL_15:
      uint64_t v33 = *(void *)(v0 + 376);
      uint64_t v32 = *(void *)(v0 + 384);
      uint64_t v34 = *(void *)(v0 + 224);
      uint64_t v35 = type metadata accessor for Logger();
      sub_100010324(v35, (uint64_t)qword_10170D788);
      sub_1006D5350(v34, v32, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_1006D5350(v34, v33, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        os_log_t log = v36;
        uint64_t v38 = *(void *)(v0 + 384);
        uint64_t v66 = *(void *)(v0 + 376);
        char v67 = *(unsigned char *)(v0 + 42);
        uint64_t v39 = swift_slowAlloc();
        uint64_t v68 = swift_slowAlloc();
        v70[0] = v68;
        *(_DWORD *)uint64_t v39 = 141559555;
        *(void *)(v0 + 64) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v39 + 12) = 2081;
        sub_1006D5418((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 72) = sub_1008FA0F0(v40, v41, v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1006D53B8(v38, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        *(_WORD *)(v39 + 22) = 2160;
        *(void *)(v0 + 80) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v39 + 32) = 2081;
        uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 88) = sub_1008FA0F0(v42, v43, v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1006D53B8(v66, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        *(_WORD *)(v39 + 42) = 2082;
        unint64_t v44 = sub_1012638E4(v67);
        *(void *)(v0 + 96) = sub_1008FA0F0(v44, v45, v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 52) = 2048;
        *(void *)(v0 + 104) = v1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v39 + 62) = 2048;
        *(void *)(v0 + 112) = v8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, log, v37, "Bookmark updated for circle: %{private,mask.hash}s, beacon: %{private,mask.hash}s, keyType: %{public}s, lower bound on disk is %llu, bookmark: %llu.", (uint8_t *)v39, 0x48u);
        unint64_t v8 = v68;
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v46 = *(void *)(v0 + 376);
        unint64_t v8 = (unint64_t)type metadata accessor for OwnerSharingCircle;
        sub_1006D53B8(*(void *)(v0 + 384), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        sub_1006D53B8(v46, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      goto LABEL_19;
    }
LABEL_49:
    swift_once();
    goto LABEL_15;
  }
  sub_10001DAB4(*(void *)(v0 + 272), &qword_10164B638);
LABEL_19:
  int64_t v47 = *(void *)(v0 + 456);
  unint64_t v48 = *(void *)(v0 + 464);
  while (1)
  {
    *(void *)(v0 + 448) = v4;
    if (v48)
    {
      unint64_t v49 = __clz(__rbit64(v48));
      v48 &= v48 - 1;
      unint64_t v50 = v49 | (v47 << 6);
      uint64_t v51 = *(void *)(v0 + 408);
      goto LABEL_33;
    }
    if (__OFADD__(v47++, 1))
    {
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    int64_t v53 = (unint64_t)((1 << *(unsigned char *)(v0 + 41)) + 63) >> 6;
    uint64_t v51 = *(void *)(v0 + 408);
    if (v47 >= v53) {
      goto LABEL_40;
    }
    uint64_t v54 = v51 + 56;
    unint64_t v55 = *(void *)(v51 + 56 + 8 * v47);
    if (!v55) {
      break;
    }
LABEL_32:
    unint64_t v48 = (v55 - 1) & v55;
    unint64_t v50 = __clz(__rbit64(v55)) + (v47 << 6);
LABEL_33:
    *(void *)(v0 + 456) = v47;
    *(void *)(v0 + 464) = v48;
    int v57 = *(unsigned __int8 *)(*(void *)(v51 + 48) + v50);
    *(unsigned char *)(v0 + 42) = v57;
    if ((v57 - 7) >= 0xA && ((1 << v57) & 0x1C) == 0)
    {
      *(unsigned char *)(v0 + 43) = ((1 << v57) & 0x21) == 0;
      uint64_t v65 = *(void *)(*(void *)(v0 + 232) + 152);
      *(void *)(v0 + 496) = v65;
      return _swift_task_switch(sub_1006CEF84, v65, 0);
    }
  }
  int64_t v56 = v47 + 1;
  if (v47 + 1 >= v53) {
    goto LABEL_40;
  }
  unint64_t v55 = *(void *)(v54 + 8 * v56);
  if (v55) {
    goto LABEL_31;
  }
  int64_t v56 = v47 + 2;
  if (v47 + 2 >= v53) {
    goto LABEL_40;
  }
  unint64_t v55 = *(void *)(v54 + 8 * v56);
  if (v55)
  {
LABEL_31:
    int64_t v47 = v56;
    goto LABEL_32;
  }
  int64_t v56 = v47 + 3;
  if (v47 + 3 < v53)
  {
    unint64_t v55 = *(void *)(v54 + 8 * v56);
    if (!v55)
    {
      while (1)
      {
        int64_t v47 = v56 + 1;
        if (__OFADD__(v56, 1)) {
          goto LABEL_47;
        }
        if (v47 >= v53) {
          goto LABEL_40;
        }
        unint64_t v55 = *(void *)(v54 + 8 * v47);
        ++v56;
        if (v55) {
          goto LABEL_32;
        }
      }
    }
    goto LABEL_31;
  }
LABEL_40:
  uint64_t v58 = *(void *)(v0 + 232);
  swift_release();
  sub_10001CD44((void *)(v58 + 112), *(void *)(v58 + 136));
  long long v59 = (void *)swift_task_alloc();
  *(void *)(v0 + 472) = v59;
  void *v59 = v0;
  v59[1] = sub_1006CE3A8;
  uint64_t v60 = *(void *)(v0 + 440);
  char v61 = *(unsigned char *)(v0 + 27);
  char v62 = *(unsigned char *)(v0 + 26);
  uint64_t v63 = *(void *)(v0 + 224);
  return sub_100C29C0C(v63, v62, v60, v61);
}

uint64_t sub_1006CFC1C()
{
  uint64_t v52 = v0;
  if (qword_101636888 != -1) {
LABEL_40:
  }
    swift_once();
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 368);
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_1006D5350(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_1006D5350(v1, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v9 = *(void *)(v0 + 360);
  uint64_t v8 = *(void *)(v0 + 368);
  if (v7)
  {
    uint64_t v50 = *(void *)(v0 + 360);
    uint64_t v10 = swift_slowAlloc();
    unint64_t v49 = (void *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 141559043;
    *(void *)(v0 + 192) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2081;
    type metadata accessor for UUID();
    sub_1006D5418((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 200) = sub_1008FA0F0(v11, v12, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006D53B8(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v10 + 22) = 2112;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 208) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v49 = v13;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v10 + 32) = 2160;
    *(void *)(v0 + 216) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 42) = 2081;
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 128) = sub_1008FA0F0(v14, v15, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006D53B8(v50, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to set bookmark for sharing circle. beacon: %{private,mask.hash}s, Error: %@, circle: %{private,mask.hash}s.", (uint8_t *)v10, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1006D53B8(*(void *)(v0 + 368), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
    swift_errorRelease();
    sub_1006D53B8(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }

  *(void *)(v0 + 144) = *(void *)(v0 + 424);
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  if (swift_dynamicCast() && *(unsigned char *)(v0 + 40) == 1 && *(void *)(v0 + 32) > 5uLL)
  {
    uint64_t v16 = *(void *)(v0 + 352);
    uint64_t v17 = *(void *)(v0 + 336);
    uint64_t v19 = *(void *)(v0 + 232);
    uint64_t v18 = *(void *)(v0 + 240);
    uint64_t v20 = *(void *)(v0 + 224);
    swift_bridgeObjectRelease();
    uint64_t v21 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v18, 1, 1, v21);
    sub_1006D5350(v20, v16, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v23 = sub_1006D5418(&qword_10164B650, v22, (void (*)(uint64_t))type metadata accessor for ShareKeysUploadUseCase);
    unint64_t v24 = (*(unsigned __int8 *)(v17 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v25 = (void *)swift_allocObject();
    v25[2] = v19;
    v25[3] = v23;
    v25[4] = v19;
    sub_1006D4E24(v16, (uint64_t)v25 + v24, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_retain_n();
    sub_100885EBC(v18, (uint64_t)&unk_10164B668, (uint64_t)v25);
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  swift_errorRelease();
  int64_t v28 = 0;
  *(void *)(v0 + 440) = _swiftEmptyDictionarySingleton;
  uint64_t v29 = *(void *)(v0 + 408);
  char v30 = *(unsigned char *)(v29 + 32);
  *(unsigned char *)(v0 + 41) = v30;
  uint64_t v31 = 1 << v30;
  uint64_t v32 = -1;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  uint64_t v33 = v29 + 56;
  unint64_t v34 = v32 & *(void *)(v29 + 56);
  *(_DWORD *)(v0 + 28) = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
  int64_t v35 = (unint64_t)(v31 + 63) >> 6;
  while (1)
  {
    *(void *)(v0 + 448) = 0;
    if (v34)
    {
      unint64_t v36 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      unint64_t v37 = v36 | (v28 << 6);
      goto LABEL_30;
    }
    int64_t v38 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v38 >= v35) {
      goto LABEL_35;
    }
    unint64_t v39 = *(void *)(v33 + 8 * v38);
    ++v28;
    if (!v39)
    {
      int64_t v28 = v38 + 1;
      if (v38 + 1 >= v35) {
        goto LABEL_35;
      }
      unint64_t v39 = *(void *)(v33 + 8 * v28);
      if (!v39)
      {
        int64_t v28 = v38 + 2;
        if (v38 + 2 >= v35) {
          goto LABEL_35;
        }
        unint64_t v39 = *(void *)(v33 + 8 * v28);
        if (!v39) {
          break;
        }
      }
    }
LABEL_29:
    unint64_t v34 = (v39 - 1) & v39;
    unint64_t v37 = __clz(__rbit64(v39)) + (v28 << 6);
LABEL_30:
    *(void *)(v0 + 456) = v28;
    *(void *)(v0 + 464) = v34;
    int v41 = *(unsigned __int8 *)(*(void *)(v29 + 48) + v37);
    *(unsigned char *)(v0 + 42) = v41;
    if ((v41 - 7) >= 0xA && ((1 << v41) & 0x1C) == 0)
    {
      *(unsigned char *)(v0 + 43) = ((1 << v41) & 0x21) == 0;
      uint64_t v42 = *(void *)(*(void *)(v0 + 232) + 152);
      *(void *)(v0 + 496) = v42;
      return _swift_task_switch(sub_1006CEF84, v42, 0);
    }
  }
  int64_t v40 = v38 + 3;
  if (v40 < v35)
  {
    unint64_t v39 = *(void *)(v33 + 8 * v40);
    if (!v39)
    {
      while (1)
      {
        int64_t v28 = v40 + 1;
        if (__OFADD__(v40, 1)) {
          goto LABEL_39;
        }
        if (v28 >= v35) {
          goto LABEL_35;
        }
        unint64_t v39 = *(void *)(v33 + 8 * v28);
        ++v40;
        if (v39) {
          goto LABEL_29;
        }
      }
    }
    int64_t v28 = v40;
    goto LABEL_29;
  }
LABEL_35:
  uint64_t v43 = *(void *)(v0 + 232);
  swift_release();
  sub_10001CD44((void *)(v43 + 112), *(void *)(v43 + 136));
  unint64_t v44 = (void *)swift_task_alloc();
  *(void *)(v0 + 472) = v44;
  *unint64_t v44 = v0;
  v44[1] = sub_1006CE3A8;
  uint64_t v45 = *(void *)(v0 + 440);
  char v46 = *(unsigned char *)(v0 + 27);
  char v47 = *(unsigned char *)(v0 + 26);
  uint64_t v48 = *(void *)(v0 + 224);
  return sub_100C29C0C(v48, v47, v45, v46);
}

uint64_t sub_1006D04EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 232);
  swift_task_dealloc();
  return _swift_task_switch(sub_1006D05FC, v1, 0);
}

uint64_t sub_1006D05FC()
{
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1006D0718()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 232);
  swift_task_dealloc();
  return _swift_task_switch(sub_1006D0828, v1, 0);
}

uint64_t sub_1006D0828()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1006D0948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_1006D0968, a4, 0);
}

uint64_t sub_1006D0968()
{
  *(void *)(v0 + 32) = *sub_10001CD44((void *)(*(void *)(v0 + 16) + 160), *(void *)(*(void *)(v0 + 16) + 184));
  return _swift_task_switch(sub_1006D09E0, 0, 0);
}

uint64_t sub_1006D09E0()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[5] = Strong;
  if (Strong)
  {
    uint64_t v2 = v0[3];
    uint64_t v3 = *(void *)(v0[4] + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = *(int *)(type metadata accessor for OwnerSharingCircle() + 20);
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 8) + **(int **)(v3 + 8));
    uint64_t v6 = v2 + v5;
    BOOL v7 = (void *)swift_task_alloc();
    v0[6] = v7;
    void *v7 = v0;
    v7[1] = sub_1006D0B4C;
    return v10(v6, ObjectType, v3);
  }
  else
  {
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_1006D0B4C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1006D5778, 0, 0);
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1006D0C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_1006D0CA8, a4, 0);
}

uint64_t sub_1006D0CA8()
{
  *(void *)(v0 + 32) = *sub_10001CD44((void *)(*(void *)(v0 + 16) + 160), *(void *)(*(void *)(v0 + 16) + 184));
  return _swift_task_switch(sub_1006D0D20, 0, 0);
}

uint64_t sub_1006D0D20()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[5] = Strong;
  if (Strong)
  {
    uint64_t v2 = v0[3];
    uint64_t v3 = *(void *)(v0[4] + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = *(int *)(type metadata accessor for OwnerSharingCircle() + 20);
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 8) + **(int **)(v3 + 8));
    uint64_t v6 = v2 + v5;
    BOOL v7 = (void *)swift_task_alloc();
    v0[6] = v7;
    void *v7 = v0;
    v7[1] = sub_1006D0E8C;
    return v10(v6, ObjectType, v3);
  }
  else
  {
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_1006D0E8C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1006D0FC8, 0, 0);
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1006D0FC8()
{
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1006D102C(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 100) = a2;
  *(void *)(v3 + 48) = a1;
  *(void *)(v3 + 56) = v2;
  *(void *)(v3 + 64) = type metadata accessor for OwnerSharingCircle();
  *(void *)(v3 + 72) = swift_task_alloc();
  *(void *)(v3 + 80) = swift_task_alloc();
  return _swift_task_switch(sub_1006D10D4, v2, 0);
}

uint64_t sub_1006D10D4()
{
  uint64_t v21 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_1006D5350(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_1006D5350(v1, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 80);
  if (v7)
  {
    int v19 = *(unsigned __int8 *)(v0 + 100);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 141559043;
    *(void *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2081;
    type metadata accessor for UUID();
    sub_1006D5418((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 24) = sub_1008FA0F0(v11, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006D53B8(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v10 + 22) = 2160;
    *(void *)(v0 + 32) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 32) = 2081;
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 40) = sub_1008FA0F0(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006D53B8(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v10 + 42) = 1024;
    *(_DWORD *)(v0 + 96) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Upload keys: share-id: %{private,mask.hash}s,              beacon: %{private,mask.hash}s,              initial: %{BOOL}d.", (uint8_t *)v10, 0x30u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1006D53B8(*(void *)(v0 + 80), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_1006D53B8(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }

  unint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v15;
  *unint64_t v15 = v0;
  v15[1] = sub_1006D5774;
  char v16 = *(unsigned char *)(v0 + 100);
  uint64_t v17 = *(void *)(v0 + 48);
  return sub_1006CDA9C(v17, v16, 0);
}

uint64_t sub_1006D14C0(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 100) = a2;
  *(void *)(v3 + 48) = a1;
  *(void *)(v3 + 56) = v2;
  *(void *)(v3 + 64) = type metadata accessor for OwnerSharingCircle();
  *(void *)(v3 + 72) = swift_task_alloc();
  *(void *)(v3 + 80) = swift_task_alloc();
  return _swift_task_switch(sub_1006D1568, v2, 0);
}

uint64_t sub_1006D1568()
{
  uint64_t v21 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170D788);
  sub_1006D5350(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_1006D5350(v1, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 80);
  if (v7)
  {
    int v19 = *(unsigned __int8 *)(v0 + 100);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 141559043;
    *(void *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2081;
    type metadata accessor for UUID();
    sub_1006D5418((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 24) = sub_1008FA0F0(v11, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006D53B8(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v10 + 22) = 2160;
    *(void *)(v0 + 32) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 32) = 2081;
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 40) = sub_1008FA0F0(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1006D53B8(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v10 + 42) = 1024;
    *(_DWORD *)(v0 + 96) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Force Upload keys: share-id: %{private,mask.hash}s,              beacon: %{private,mask.hash}s,              initial: %{BOOL}d.", (uint8_t *)v10, 0x30u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1006D53B8(*(void *)(v0 + 80), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_1006D53B8(v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }

  unint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v15;
  *unint64_t v15 = v0;
  v15[1] = sub_1006D1954;
  char v16 = *(unsigned char *)(v0 + 100);
  uint64_t v17 = *(void *)(v0 + 48);
  return sub_1006CDA9C(v17, v16, 1);
}

uint64_t sub_1006D1954()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1006D1A88(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 40) = v3;
  *(unsigned char *)(v4 + 168) = a2;
  *(void *)(v4 + 24) = a1;
  uint64_t v5 = type metadata accessor for BookmarkMetaData();
  *(void *)(v4 + 48) = v5;
  *(void *)(v4 + 56) = *(void *)(v5 - 8);
  *(void *)(v4 + 64) = swift_task_alloc();
  *(void *)(v4 + 72) = swift_task_alloc();
  *(void *)(v4 + 80) = swift_task_alloc();
  *(void *)(v4 + 88) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData(0);
  *(void *)(v4 + 96) = v6;
  *(void *)(v4 + 104) = *(void *)(v6 - 8);
  *(void *)(v4 + 112) = swift_task_alloc();
  *(void *)(v4 + 120) = type metadata accessor for KeyDropShareMetaDataResponse(0);
  *(void *)(v4 + 128) = swift_task_alloc();
  return _swift_task_switch(sub_1006D1C04, v3, 0);
}

uint64_t sub_1006D1C04()
{
  sub_10001CD44((void *)(*(void *)(v0 + 40) + 112), *(void *)(*(void *)(v0 + 40) + 136));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1006D1CB4;
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  char v5 = *(unsigned char *)(v0 + 168);
  return sub_100C51DAC(v2, v3, v5, v4);
}

uint64_t sub_1006D1CB4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v4 = sub_1006D26B8;
  }
  else {
    uint64_t v4 = sub_1006D1DE0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1006D1DE0()
{
  uint64_t v1 = *(void *)(v0[16] + *(int *)(v0[15] + 28));
  v0[19] = v1;
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[20] = v2;
  void *v2 = v0;
  v2[1] = sub_1006D1E9C;
  uint64_t v3 = v0[3];
  return sub_1006D2760(v1, v3);
}

uint64_t sub_1006D1E9C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1006D1FC8, v1, 0);
}

uint64_t sub_1006D1FC8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 128) + *(int *)(*(void *)(v0 + 120) + 24));
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v4 = *(int **)(v0 + 96);
    uint64_t v3 = *(void *)(v0 + 104);
    uint64_t v56 = *(void *)(v0 + 88);
    uint64_t v57 = *(void *)(v0 + 72);
    uint64_t v5 = *(void **)(v0 + 56);
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v60 = *(void *)(v3 + 72);
    uint64_t v61 = *(void *)(v0 + 48);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v8 = *(char **)(v0 + 112);
      sub_1006D5350(v6, (uint64_t)v8, type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
      uint64_t v9 = &v8[v4[6]];
      char v10 = *v8;
      unint64_t v11 = *(void *)&v8[v4[7]];
      unsigned int v63 = *v8;
      if ((v9[8] & 1) == 0)
      {
        uint64_t v59 = v2;
        uint64_t v27 = v5;
        int64_t v28 = v4;
        uint64_t v29 = *(void *)v9;
        if (v11 < *(void *)v9) {
          goto LABEL_41;
        }
        uint64_t v30 = v6;
        uint64_t v32 = v62[10];
        uint64_t v31 = (void *)v62[11];
        uint64_t v33 = (uint64_t)v31 + *(int *)(v61 + 20);
        sub_1006D5350(v62[14] + v28[5], v33, type metadata accessor for KeyDropInterface.KeyAlignment);
        uint64_t v34 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 0, 1, v34);
        *uint64_t v31 = v29;
        *(void *)(v56 + 8) = v11;
        unint64_t v0 = v63;
        *((unsigned char *)v31 + *(int *)(v61 + 24)) = v63;
        sub_1006D4E24((uint64_t)v31, v32, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v37 = sub_100724268(v63);
        uint64_t v38 = _swiftEmptyDictionarySingleton[2];
        BOOL v39 = (v36 & 1) == 0;
        uint64_t v40 = v38 + v39;
        if (__OFADD__(v38, v39)) {
          goto LABEL_42;
        }
        char v41 = v36;
        if (_swiftEmptyDictionarySingleton[3] >= v40)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_100E7F0A4();
          }
          uint64_t v4 = v28;
          unint64_t v0 = (unint64_t)v62;
          uint64_t v5 = v27;
          uint64_t v2 = v59;
          uint64_t v44 = v62[10];
          if ((v41 & 1) == 0) {
            goto LABEL_17;
          }
        }
        else
        {
          sub_100E66D88(v40, isUniquelyReferenced_nonNull_native);
          unint64_t v42 = sub_100724268(v63);
          uint64_t v4 = v28;
          unint64_t v0 = (unint64_t)v62;
          uint64_t v5 = v27;
          uint64_t v2 = v59;
          if ((v41 & 1) != (v43 & 1))
          {
LABEL_37:
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          }
          unint64_t v37 = v42;
          uint64_t v44 = v62[10];
          if ((v41 & 1) == 0)
          {
LABEL_17:
            _swiftEmptyDictionarySingleton[(v37 >> 6) + 8] |= 1 << v37;
            *(unsigned char *)(_swiftEmptyDictionarySingleton[6] + v37) = v63;
            sub_1006D4E24(v44, _swiftEmptyDictionarySingleton[7] + v5[9] * v37, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
            uint64_t v45 = _swiftEmptyDictionarySingleton[2];
            BOOL v46 = __OFADD__(v45, 1);
            uint64_t v47 = v45 + 1;
            if (v46) {
              goto LABEL_43;
            }
            _swiftEmptyDictionarySingleton[2] = v47;
            goto LABEL_28;
          }
        }
        sub_1006D4CF4(v44, _swiftEmptyDictionarySingleton[7] + v5[9] * v37);
LABEL_28:
        swift_bridgeObjectRelease();
        uint64_t v7 = v30;
        goto LABEL_5;
      }
      uint64_t v58 = v6;
      unint64_t v12 = (void *)v0;
      unint64_t v0 = (unint64_t)v5;
      uint64_t v14 = v12[8];
      uint64_t v13 = (unint64_t *)v12[9];
      uint64_t v15 = (uint64_t)v13 + *(int *)(v61 + 20);
      sub_1006D5350(v12[14] + v4[5], v15, type metadata accessor for KeyDropInterface.KeyAlignment);
      uint64_t v16 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 0, 1, v16);
      *uint64_t v13 = v11;
      *(void *)(v57 + 8) = v11;
      *((unsigned char *)v13 + *(int *)(v61 + 24)) = v10;
      sub_1006D4E24((uint64_t)v13, v14, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
      int v17 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v19 = sub_100724268(v10);
      uint64_t v20 = _swiftEmptyDictionarySingleton[2];
      BOOL v21 = (v18 & 1) == 0;
      uint64_t v22 = v20 + v21;
      if (__OFADD__(v20, v21))
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      char v23 = v18;
      if (_swiftEmptyDictionarySingleton[3] >= v22)
      {
        if ((v17 & 1) == 0) {
          sub_100E7F0A4();
        }
        unint64_t v0 = (unint64_t)v62;
        uint64_t v26 = v62[8];
        if ((v23 & 1) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        sub_100E66D88(v22, v17);
        unint64_t v24 = sub_100724268(v10);
        unint64_t v0 = (unint64_t)v62;
        if ((v23 & 1) != (v25 & 1)) {
          goto LABEL_37;
        }
        unint64_t v19 = v24;
        uint64_t v26 = v62[8];
        if ((v23 & 1) == 0)
        {
LABEL_22:
          _swiftEmptyDictionarySingleton[(v19 >> 6) + 8] |= 1 << v19;
          *(unsigned char *)(_swiftEmptyDictionarySingleton[6] + v19) = v63;
          sub_1006D4E24(v26, _swiftEmptyDictionarySingleton[7] + v5[9] * v19, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
          uint64_t v48 = _swiftEmptyDictionarySingleton[2];
          BOOL v46 = __OFADD__(v48, 1);
          uint64_t v49 = v48 + 1;
          if (v46) {
            goto LABEL_44;
          }
          _swiftEmptyDictionarySingleton[2] = v49;
          goto LABEL_4;
        }
      }
      sub_1006D4CF4(v26, _swiftEmptyDictionarySingleton[7] + v5[9] * v19);
LABEL_4:
      swift_bridgeObjectRelease();
      uint64_t v7 = v58;
LABEL_5:
      sub_1006D53B8(*(void *)(v0 + 112), type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
      uint64_t v6 = v7 + v60;
      if (!--v2) {
        goto LABEL_30;
      }
    }
  }
  swift_bridgeObjectRetain();
LABEL_30:
  swift_bridgeObjectRelease();
  if (qword_101636888 != -1) {
LABEL_45:
  }
    swift_once();
  uint64_t v50 = type metadata accessor for Logger();
  sub_100010324(v50, (uint64_t)qword_10170D788);
  swift_bridgeObjectRetain();
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 134217984;
    id v62[2] = _swiftEmptyDictionarySingleton[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Generated existing metadata, found %ld key types ranges.", v53, 0xCu);
    unint64_t v0 = (unint64_t)v62;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  sub_1006D53B8(*(void *)(v0 + 128), type metadata accessor for KeyDropShareMetaDataResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v54 = *(uint64_t (**)(void *))(v0 + 8);
  return v54(_swiftEmptyDictionarySingleton);
}

uint64_t sub_1006D26B8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1006D2760(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  sub_10000588C(&qword_101639E88);
  v3[18] = swift_task_alloc();
  sub_10000588C(&qword_10164B630);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v3[21] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[22] = v5;
  v3[23] = *(void *)(v5 + 64);
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  v3[33] = sub_10000588C((uint64_t *)&unk_101638D10);
  v3[34] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OwnerSharingCircle();
  v3[35] = v6;
  v3[36] = *(void *)(v6 - 8);
  v3[37] = swift_task_alloc();
  return _swift_task_switch(sub_1006D2990, v2, 0);
}

uint64_t sub_1006D2990()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 136) + 152);
  *(void *)(v0 + 304) = v1;
  return _swift_task_switch(sub_1006D29B4, v1, 0);
}

uint64_t sub_1006D29B4()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[21];
  uint64_t v5 = v0[16];
  v0[39] = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[40] = v6;
  v0[41] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  v0[42] = v8;
  *(void *)(v8 + 16) = v1;
  uint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  v0[43] = v9;
  v0[44] = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v9(v8 + v7, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_1006D2AC4, 0, 0);
}

uint64_t sub_1006D2AC4()
{
  uint64_t v1 = v0[42];
  uint64_t v2 = v0[39];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[45] = v3;
  v3[2] = v2;
  v3[3] = sub_1003656D8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[46] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1006D2BCC;
  uint64_t v6 = v0[33];
  uint64_t v5 = v0[34];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090D14, v3, v6);
}

uint64_t sub_1006D2BCC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1006D2D1C, v1, 0);
}

uint64_t sub_1006D2D1C()
{
  uint64_t v1 = v0[34];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[36] + 48))(v1, 1, v0[35]) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_101638D10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v4 = v0[17];
    sub_1006D4E24(v1, v0[37], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10001CD44((void *)(v4 + 112), *(void *)(v4 + 136));
    uint64_t v5 = (void *)swift_task_alloc();
    v0[47] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1006D2F18;
    uint64_t v7 = v0[15];
    uint64_t v6 = v0[16];
    return sub_100C52E74(v7, v6);
  }
}

uint64_t sub_1006D2F18(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 384) = a1;
  *(void *)(v4 + 392) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 136);
  if (v1)
  {
    swift_errorRelease();
    uint64_t v6 = sub_1006D3F30;
  }
  else
  {
    uint64_t v6 = sub_1006D3058;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1006D3058()
{
  uint64_t v123 = v0;
  *(void *)(v0 + 104) = _swiftEmptyDictionarySingleton;
  uint64_t v118 = *(void *)(v0 + 384);
  uint64_t v1 = *(void *)(*(void *)(v0 + 296) + *(int *)(*(void *)(v0 + 280) + 32));
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v111 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & v2;
  unint64_t v6 = (unint64_t)(63 - v4) >> 6;
  uint64_t v116 = *(void *)(v0 + 176);
  unint64_t v117 = (void (**)(uint64_t, uint64_t))(v116 + 8);
  unint64_t v109 = v6 - 1;
  unint64_t v7 = 0;
  uint64_t v115 = swift_bridgeObjectRetain();
  int64_t v112 = v6;
  unint64_t v110 = v6 - 5;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v10 = v9 | (v7 << 6);
LABEL_8:
  uint64_t v11 = *(void *)(v0 + 152);
  (*(void (**)(uint64_t, unint64_t, void))(v0 + 320))(v11, *(void *)(v115 + 48) + *(void *)(v116 + 72) * v10, *(void *)(v0 + 168));
  uint64_t v12 = *(void *)(v115 + 56);
  uint64_t v13 = sub_10000588C(&qword_10165F390);
  *(unsigned char *)(v11 + *(int *)(v13 + 48)) = *(unsigned char *)(v12 + v10);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 0, 1, v13);
  while (1)
  {
    uint64_t v19 = *(void *)(v0 + 160);
    sub_1006D4E8C(*(void *)(v0 + 152), v19);
    uint64_t v20 = sub_10000588C(&qword_10165F390);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20) == 1) {
      break;
    }
    char v21 = *(unsigned char *)(*(void *)(v0 + 160) + *(int *)(v20 + 48));
    (*(void (**)(void))(v0 + 344))(*(void *)(v0 + 248));
    if (!*(void *)(v118 + 16) || (unint64_t v22 = sub_1007240CC(*(void *)(v0 + 248)), (v23 & 1) == 0))
    {
      unint64_t v120 = v5;
      unint64_t v121 = v7;
      if (qword_101636888 != -1) {
        swift_once();
      }
      char v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 320);
      uint64_t v37 = *(void *)(v0 + 248);
      uint64_t v39 = *(void *)(v0 + 208);
      uint64_t v38 = *(void *)(v0 + 216);
      uint64_t v40 = *(void *)(v0 + 168);
      uint64_t v41 = *(void *)(v0 + 128);
      uint64_t v42 = type metadata accessor for Logger();
      sub_100010324(v42, (uint64_t)qword_10170D788);
      v36(v38, v41, v40);
      v36(v39, v37, v40);
      char v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.error.getter();
      BOOL v45 = os_log_type_enabled(v43, v44);
      uint64_t v46 = *(void *)(v0 + 248);
      uint64_t v48 = *(void *)(v0 + 208);
      uint64_t v47 = *(void *)(v0 + 216);
      uint64_t v49 = *(void *)(v0 + 168);
      if (v45)
      {
        uint64_t v113 = *(void *)(v0 + 248);
        uint64_t v50 = swift_slowAlloc();
        v122[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = 141558787;
        *(void *)(v50 + 4) = 1752392040;
        *(_WORD *)(v50 + 12) = 2081;
        sub_1006D5418((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v50 + 14) = sub_1008FA0F0(v51, v52, v122);
        swift_bridgeObjectRelease();
        uint64_t v53 = *v117;
        (*v117)(v47, v49);
        *(_WORD *)(v50 + 22) = 2160;
        *(void *)(v50 + 24) = 1752392040;
        *(_WORD *)(v50 + 32) = 2081;
        uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v50 + 34) = sub_1008FA0F0(v54, v55, v122);
        swift_bridgeObjectRelease();
        v53(v48, v49);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Owner circle contains a member which is not in the server share,\nshare-id: %{private,mask.hash}s,\nmember-id: %{private,mask.hash}s.", (uint8_t *)v50, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v53(v113, v49);
      }
      else
      {

        uint64_t v8 = *v117;
        (*v117)(v48, v49);
        v8(v47, v49);
        v8(v46, v49);
      }
LABEL_6:
      unint64_t v5 = v120;
      unint64_t v7 = v121;
      if (v120) {
        goto LABEL_7;
      }
      goto LABEL_9;
    }
    if (((1 << v21) & 0x16) == 0 && *(unsigned char *)(*(void *)(v118 + 56) + v22) == 1)
    {
      uint64_t v24 = *(void *)(v0 + 240);
      (*(void (**)(uint64_t, void, void))(v0 + 320))(v24, *(void *)(v0 + 248), *(void *)(v0 + 168));
      char v25 = *(void **)(v0 + 104);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v122[0] = (uint64_t)v25;
      unint64_t v28 = sub_1007240CC(v24);
      uint64_t v29 = v25[2];
      BOOL v30 = (v27 & 1) == 0;
      uint64_t v31 = v29 + v30;
      if (__OFADD__(v29, v30)) {
        goto LABEL_73;
      }
      char v32 = v27;
      if (v25[3] >= v31)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if ((v27 & 1) == 0) {
            goto LABEL_47;
          }
        }
        else
        {
          sub_100E7F8E0();
          char v25 = (void *)v122[0];
          if ((v32 & 1) == 0) {
            goto LABEL_47;
          }
        }
      }
      else
      {
        uint64_t v33 = *(void *)(v0 + 240);
        sub_100E67CB8(v31, isUniquelyReferenced_nonNull_native);
        char v25 = (void *)v122[0];
        unint64_t v34 = sub_1007240CC(v33);
        if ((v32 & 1) != (v35 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v28 = v34;
        if ((v32 & 1) == 0)
        {
LABEL_47:
          uint64_t v56 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 320);
          uint64_t v57 = *(void *)(v0 + 240);
          uint64_t v58 = *(void *)(v0 + 168);
          v25[(v28 >> 6) + 8] |= 1 << v28;
          v56(v25[6] + *(void *)(v116 + 72) * v28, v57, v58);
          *(unsigned char *)(v25[7] + v28) = 1;
          uint64_t v59 = v25[2];
          BOOL v60 = __OFADD__(v59, 1);
          uint64_t v61 = v59 + 1;
          if (v60) {
            goto LABEL_74;
          }
          v25[2] = v61;
          goto LABEL_49;
        }
      }
      *(unsigned char *)(v25[7] + v28) = 1;
LABEL_49:
      unint64_t v120 = v5;
      unint64_t v121 = v7;
      uint64_t v62 = *(void *)(v0 + 240);
      uint64_t v63 = *(void *)(v0 + 168);
      *(void *)(v0 + 104) = v25;
      swift_bridgeObjectRelease();
      uint64_t v64 = *v117;
      (*v117)(v62, v63);
      if (qword_101636888 != -1) {
        swift_once();
      }
      uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 320);
      uint64_t v66 = *(void *)(v0 + 248);
      uint64_t v68 = *(void *)(v0 + 224);
      uint64_t v67 = *(void *)(v0 + 232);
      uint64_t v69 = *(void *)(v0 + 168);
      uint64_t v70 = *(void *)(v0 + 128);
      uint64_t v71 = type metadata accessor for Logger();
      sub_100010324(v71, (uint64_t)qword_10170D788);
      v65(v67, v70, v69);
      v65(v68, v66, v69);
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.error.getter();
      BOOL v74 = os_log_type_enabled(v72, v73);
      uint64_t v75 = *(void *)(v0 + 248);
      uint64_t v77 = *(void *)(v0 + 224);
      uint64_t v76 = *(void *)(v0 + 232);
      uint64_t v78 = *(void *)(v0 + 168);
      if (v74)
      {
        uint64_t v114 = *(void *)(v0 + 248);
        uint64_t v79 = swift_slowAlloc();
        v122[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v79 = 141558787;
        *(void *)(v79 + 4) = 1752392040;
        *(_WORD *)(v79 + 12) = 2081;
        sub_1006D5418((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v79 + 14) = sub_1008FA0F0(v80, v81, v122);
        swift_bridgeObjectRelease();
        v64(v76, v78);
        *(_WORD *)(v79 + 22) = 2160;
        *(void *)(v79 + 24) = 1752392040;
        *(_WORD *)(v79 + 32) = 2081;
        uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v79 + 34) = sub_1008FA0F0(v82, v83, v122);
        swift_bridgeObjectRelease();
        v64(v77, v78);
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Circle on server contains a member who accepted,\nshare-id: %{private,mask.hash}s, member-id: %{private,mask.hash}s.", (uint8_t *)v79, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v84 = v114;
      }
      else
      {

        v64(v77, v78);
        v64(v76, v78);
        uint64_t v84 = v75;
      }
      v64(v84, v78);
      goto LABEL_6;
    }
    (*v117)(*(void *)(v0 + 248), *(void *)(v0 + 168));
    if (v5) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      swift_once();
LABEL_58:
      uint64_t v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 320);
      uint64_t v90 = *(void *)(v0 + 192);
      uint64_t v91 = *(void *)(v0 + 168);
      uint64_t v92 = *(void *)(v0 + 128);
      uint64_t v93 = type metadata accessor for Logger();
      sub_100010324(v93, (uint64_t)qword_10170D788);
      v89(v90, v92, v91);
      uint64_t v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.error.getter();
      BOOL v96 = os_log_type_enabled(v94, v95);
      uint64_t v97 = *(void *)(v0 + 192);
      uint64_t v98 = *(void *)(v0 + 168);
      uint64_t v99 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 176) + 8);
      if (v96)
      {
        uint64_t v100 = swift_slowAlloc();
        v122[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v100 = 141558531;
        *(void *)(v0 + 72) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v100 + 12) = 2081;
        os_log_type_t v119 = v95;
        sub_1006D5418((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v101 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 64) = sub_1008FA0F0(v101, v102, v122);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*v99)(v97, v98);
        *(_WORD *)(v100 + 22) = 2080;
        swift_beginAccess();
        sub_1006D5418(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        swift_bridgeObjectRetain();
        uint64_t v103 = Dictionary.description.getter();
        unint64_t v105 = v104;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 80) = sub_1008FA0F0(v103, v105, v122);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v94, v119, "Failed to update members from server response,\nshare-id: %{private,mask.hash}s, updatedMembers: %s.", (uint8_t *)v100, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*v99)(*(void *)(v0 + 192), *(void *)(v0 + 168));
      }
      swift_errorRelease();

LABEL_66:
      sub_1006D53B8(*(void *)(v0 + 296), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v107 = *(uint64_t (**)(void))(v0 + 8);
      return v107();
    }
    if (v14 >= v112)
    {
      unint64_t v16 = v7;
    }
    else
    {
      unint64_t v15 = *(void *)(v111 + 8 * v14);
      if (v15) {
        goto LABEL_12;
      }
      unint64_t v16 = v7 + 1;
      if ((uint64_t)(v7 + 2) < v112)
      {
        unint64_t v15 = *(void *)(v111 + 8 * (v7 + 2));
        if (v15)
        {
          int64_t v14 = v7 + 2;
LABEL_12:
          unint64_t v5 = (v15 - 1) & v15;
          unint64_t v10 = __clz(__rbit64(v15)) + (v14 << 6);
          unint64_t v7 = v14;
          goto LABEL_8;
        }
        unint64_t v16 = v7 + 2;
        if ((uint64_t)(v7 + 3) < v112)
        {
          unint64_t v15 = *(void *)(v111 + 8 * (v7 + 3));
          if (v15)
          {
            int64_t v14 = v7 + 3;
            goto LABEL_12;
          }
          int64_t v14 = v7 + 4;
          unint64_t v16 = v7 + 3;
          if ((uint64_t)(v7 + 4) < v112)
          {
            unint64_t v15 = *(void *)(v111 + 8 * v14);
            if (v15) {
              goto LABEL_12;
            }
            while (v110 != v7)
            {
              unint64_t v15 = *(void *)(v115 + 104 + 8 * v7++);
              if (v15)
              {
                int64_t v14 = v7 + 4;
                goto LABEL_12;
              }
            }
            unint64_t v16 = v109;
          }
        }
      }
    }
    uint64_t v17 = *(void *)(v0 + 152);
    uint64_t v18 = sub_10000588C(&qword_10165F390);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
    unint64_t v5 = 0;
    unint64_t v7 = v16;
  }
  swift_release();
  swift_bridgeObjectRelease();
  if (!*(void *)(*(void *)(v0 + 104) + 16)) {
    goto LABEL_66;
  }
  uint64_t v85 = *(void *)(v0 + 392);
  uint64_t v86 = *(void *)(v0 + 296);
  uint64_t v87 = *(void *)(v0 + 144);
  uint64_t v88 = swift_task_alloc();
  *(void *)(v88 + 16) = v86;
  *(void *)(v88 + 24) = v0 + 104;
  sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_1006D4EF4, v87);
  if (v85)
  {
    swift_task_dealloc();
    if (qword_101636888 != -1) {
      goto LABEL_75;
    }
    goto LABEL_58;
  }
  uint64_t v106 = *(void *)(v0 + 304);
  swift_task_dealloc();
  return _swift_task_switch(sub_1006D4060, v106, 0);
}

uint64_t sub_1006D3F30()
{
  sub_1006D53B8(*(void *)(v0 + 296), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1006D4060()
{
  *(void *)(v0 + 400) = *(void *)(*(void *)(v0 + 304) + 128);
  return _swift_task_switch(sub_1006D4088, 0, 0);
}

uint64_t sub_1006D4088()
{
  uint64_t v1 = v0[50];
  uint64_t v2 = v0[18];
  uint64_t v3 = swift_task_alloc();
  v0[51] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[52] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1006D4180;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_100074FFC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1006D4180()
{
  *(void *)(*(void *)v1 + 424) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1006D429C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1006D472C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1006D429C()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_task_dealloc();
  return _swift_task_switch(sub_1006D4308, v1, 0);
}

uint64_t sub_1006D4308()
{
  char v21 = v0;
  sub_10001DAB4(v0[18], &qword_101639E88);
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[40];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[16];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  v1(v2, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[24];
  uint64_t v10 = v0[21];
  uint64_t v11 = (void (**)(uint64_t, uint64_t))(v0[22] + 8);
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[9] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_1006D5418((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_1008FA0F0(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*v11)(v9, v10);
    *(_WORD *)(v12 + 22) = 2080;
    swift_beginAccess();
    sub_1006D5418(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_bridgeObjectRetain();
    uint64_t v15 = Dictionary.description.getter();
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    v0[10] = sub_1008FA0F0(v15, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to update members from server response,\nshare-id: %{private,mask.hash}s, updatedMembers: %s.", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*v11)(v0[24], v0[21]);
  }
  swift_errorRelease();

  sub_1006D53B8(v0[37], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1006D472C()
{
  return _swift_task_switch(sub_1006D4748, *(void *)(v0 + 136), 0);
}

uint64_t sub_1006D4748()
{
  char v25 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[40];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[16];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  v1(v2, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[25];
  uint64_t v11 = v0[21];
  uint64_t v10 = v0[22];
  uint64_t v12 = v0[18];
  if (v8)
  {
    uint64_t v23 = v0[18];
    os_log_type_t type = v7;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558531;
    v0[11] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_1006D5418((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[12] = sub_1008FA0F0(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v13 + 22) = 2080;
    swift_beginAccess();
    sub_1006D5418(&qword_10163BC60, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_bridgeObjectRetain();
    uint64_t v16 = Dictionary.description.getter();
    unint64_t v18 = v17;
    swift_bridgeObjectRelease();
    v0[14] = sub_1008FA0F0(v16, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Circle on server updated members state,\nshare-id: %{private,mask.hash}s, updatedMembers: %s.", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v19 = v23;
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    uint64_t v19 = v12;
  }
  sub_10001DAB4(v19, &qword_101639E88);
  sub_1006D53B8(v0[37], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_1006D4B74()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 112);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 160);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ShareKeysUploadUseCase()
{
  return self;
}

uint64_t sub_1006D4BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnerSharingCircle();
  uint64_t v5 = *(void *)(a2 + *(int *)(v4 + 32));
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_1006D4C68(v6, v5);
  uint64_t v8 = *(int *)(v4 + 32);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + v8) = v7;
  return result;
}

uint64_t sub_1006D4C68(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_1006D4F50(a1, (uint64_t)sub_1002AC328, 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_1006D4CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BookmarkMetaData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006D4D58()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1006D4E24(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1006D4E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164B630);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1006D4EF4()
{
  sub_100CF456C(*(uint64_t **)(v0 + 16), (void (*)(char *))sub_1006D4F48, (uint64_t)&v1);
}

uint64_t sub_1006D4F48(uint64_t a1)
{
  return sub_1006D4BE0(a1, *(void *)(v1 + 16));
}

uint64_t sub_1006D4F50(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101640958);
  __chkstk_darwin(v13 - 8);
  unint64_t v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = ~v16;
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v19 = -v16;
  uint64_t v43 = a1;
  uint64_t v44 = a1 + 64;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  else {
    uint64_t v20 = -1;
  }
  uint64_t v45 = v17;
  uint64_t v46 = 0;
  uint64_t v47 = v20 & v18;
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  v39[2] = a1;
  swift_bridgeObjectRetain();
  v39[1] = a3;
  swift_retain();
  sub_100BD73D8((uint64_t)v15);
  uint64_t v21 = sub_10000588C(&qword_101640960);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100132C20();
    return swift_release();
  }
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  uint64_t v50 = v41 + 32;
  uint64_t v40 = (void (**)(char *, uint64_t))(v41 + 8);
  while (1)
  {
    uint64_t v23 = *(int *)(v21 + 48);
    uint64_t v24 = v10;
    v42(v12, v15, v10);
    char v25 = v15[v23];
    uint64_t v26 = *a5;
    unint64_t v28 = sub_1007240CC((uint64_t)v12);
    uint64_t v29 = *(void *)(v26 + 16);
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30)) {
      break;
    }
    char v32 = v27;
    if (*(void *)(v26 + 24) >= v31)
    {
      if (a4)
      {
        if (v27) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_100E7F8E0();
        if (v32) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      sub_100E67CB8(v31, a4 & 1);
      unint64_t v33 = sub_1007240CC((uint64_t)v12);
      if ((v32 & 1) != (v34 & 1)) {
        goto LABEL_22;
      }
      unint64_t v28 = v33;
      if (v32)
      {
LABEL_7:
        uint64_t v10 = v24;
        (*v40)(v12, v24);
        *(unsigned char *)(*(void *)(*a5 + 56) + v28) = v25;
        goto LABEL_8;
      }
    }
    char v35 = (void *)*a5;
    *(void *)(*a5 + 8 * (v28 >> 6) + 64) |= 1 << v28;
    uint64_t v10 = v24;
    v42((char *)(v35[6] + *(void *)(v41 + 72) * v28), v12, v24);
    *(unsigned char *)(v35[7] + v28) = v25;
    uint64_t v36 = v35[2];
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37) {
      goto LABEL_21;
    }
    v35[2] = v38;
LABEL_8:
    sub_100BD73D8((uint64_t)v15);
    uint64_t v21 = sub_10000588C(&qword_101640960);
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v15, 1, v21) == 1) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1006D5314@<X0>(void *a1@<X8>)
{
  return sub_1012EE660(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1006D5330()
{
  return sub_1012EE700(v0[2], v0[3], v0[4]);
}

uint64_t sub_1006D5350(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1006D53B8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1006D5418(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1006D5464()
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  void v5[2] = v3;
  v5[3] = v4;
  v5[1] = sub_10001D2E4;
  return _swift_task_switch(sub_1006D0CA8, v3, 0);
}

uint64_t sub_1006D5550()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnerSharingCircle() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1006D568C()
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  void v5[2] = v3;
  v5[3] = v4;
  v5[1] = sub_100033F68;
  return _swift_task_switch(sub_1006D0968, v3, 0);
}

void sub_1006D5890(char *a1, int a2, void *aBlock, void (*a4)(uint64_t, void *))
{
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = *(void *)&a1[OBJC_IVAR____TtC12searchpartyd28AccessoryDiscoveryTrampoline_implementation];
  _Block_copy(v6);
  uint64_t v8 = a1;
  a4(v7, v6);
  _Block_release(v6);
  _Block_release(v6);
}

void sub_1006D5C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v4 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = (id)v4;
  (*(void (**)(uint64_t))(a3 + 16))(a3);
}

uint64_t sub_1006D5C70(void *a1, uint64_t a2, uint64_t a3)
{
  static os_log_type_t.debug.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  type metadata accessor for Transaction();
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = (void *)swift_allocObject();
  uint64_t v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v7[5] = v6;
  id v8 = a1;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();

  return swift_release();
}

id sub_1006D5FE4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryDiscoveryTrampoline();
  return [super dealloc];
}

uint64_t type metadata accessor for AccessoryDiscoveryTrampoline()
{
  return self;
}

uint64_t sub_1006D604C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006D6084()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1006D60CC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_100033F68;
  return sub_100DFD4F8(v2, v3, v5, v4);
}

uint64_t sub_1006D6178()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1006D61B0(uint64_t a1, uint64_t a2)
{
  sub_1006D5C04(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1006D61B8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1006D6260()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_10001D2E4;
  return sub_100DFF068(v4, v6, v7);
}

uint64_t *sub_1006D6374(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_1000361E0(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_1000361E0(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = a2[6];
    unint64_t v14 = a2[7];
    sub_1000361E0(v13, v14);
    a1[6] = v13;
    a1[7] = v14;
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    uint64_t v19 = a3[9];
    uint64_t v20 = a3[10];
    uint64_t v21 = (uint64_t *)((char *)a1 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (char *)a1 + v20;
    char v25 = (_OWORD *)((char *)a2 + v20);
    unint64_t v26 = *(uint64_t *)((char *)a2 + v20 + 8);
    swift_bridgeObjectRetain();
    if (v26 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v24 = *v25;
    }
    else
    {
      uint64_t v28 = *(void *)v25;
      sub_1000361E0(v28, v26);
      *(void *)uint64_t v24 = v28;
      *((void *)v24 + 1) = v26;
    }
    *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  }
  return a1;
}

uint64_t sub_1006D64F4(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  sub_10001CFB8(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_10001CFB8(*(void *)(a1 + 32), *(void *)(a1 + 40));
  sub_10001CFB8(*(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 40));
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *v7;
    return sub_10001CFB8(v9, v8);
  }
  return result;
}

uint64_t *sub_1006D65D0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_1000361E0(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = a2[6];
  unint64_t v13 = a2[7];
  sub_1000361E0(v12, v13);
  a1[6] = v12;
  a1[7] = v13;
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  uint64_t v20 = (uint64_t *)((char *)a1 + v18);
  uint64_t v21 = (uint64_t *)((char *)a2 + v18);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = (char *)a1 + v19;
  uint64_t v24 = (_OWORD *)((char *)a2 + v19);
  unint64_t v25 = *(uint64_t *)((char *)a2 + v19 + 8);
  swift_bridgeObjectRetain();
  if (v25 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v23 = *v24;
  }
  else
  {
    uint64_t v26 = *(void *)v24;
    sub_1000361E0(v26, v25);
    *(void *)uint64_t v23 = v26;
    *((void *)v23 + 1) = v25;
  }
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  return a1;
}

uint64_t *sub_1006D6700(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_1000361E0(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10001CFB8(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_1000361E0(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_10001CFB8(v16, v17);
  uint64_t v18 = a2[6];
  unint64_t v19 = a2[7];
  sub_1000361E0(v18, v19);
  uint64_t v20 = a1[6];
  unint64_t v21 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  sub_10001CFB8(v20, v21);
  uint64_t v22 = a3[8];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  uint64_t v26 = a3[9];
  uint64_t v27 = (uint64_t *)((char *)a1 + v26);
  uint64_t v28 = (uint64_t *)((char *)a2 + v26);
  *uint64_t v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[10];
  BOOL v30 = (uint64_t *)((char *)a1 + v29);
  uint64_t v31 = (uint64_t *)((char *)a2 + v29);
  unint64_t v32 = *(uint64_t *)((char *)a2 + v29 + 8);
  if (*(unint64_t *)((char *)a1 + v29 + 8) >> 60 != 15)
  {
    if (v32 >> 60 != 15)
    {
      uint64_t v34 = *v31;
      sub_1000361E0(v34, v32);
      uint64_t v35 = *v30;
      unint64_t v36 = v30[1];
      *BOOL v30 = v34;
      v30[1] = v32;
      sub_10001CFB8(v35, v36);
      goto LABEL_8;
    }
    sub_1001356D0((uint64_t)v30);
    goto LABEL_6;
  }
  if (v32 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)BOOL v30 = *(_OWORD *)v31;
    goto LABEL_8;
  }
  uint64_t v33 = *v31;
  sub_1000361E0(v33, v32);
  *BOOL v30 = v33;
  v30[1] = v32;
LABEL_8:
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  return a1;
}

_OWORD *sub_1006D68AC(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[8];
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  return a1;
}

uint64_t *sub_1006D6960(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a1[6];
  unint64_t v13 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10001CFB8(v12, v13);
  uint64_t v14 = a3[8];
  unint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  uint64_t v18 = a3[9];
  unint64_t v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)((char *)a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *unint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[10];
  uint64_t v24 = (uint64_t *)((char *)a1 + v23);
  uint64_t v25 = (uint64_t *)((char *)a2 + v23);
  unint64_t v26 = *(uint64_t *)((char *)a1 + v23 + 8);
  if (v26 >> 60 != 15)
  {
    unint64_t v27 = v25[1];
    if (v27 >> 60 != 15)
    {
      uint64_t v28 = *v24;
      *uint64_t v24 = *v25;
      v24[1] = v27;
      sub_10001CFB8(v28, v26);
      goto LABEL_6;
    }
    sub_1001356D0((uint64_t)v24);
  }
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
LABEL_6:
  *(uint64_t *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  return a1;
}

uint64_t sub_1006D6AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006D6AB4);
}

uint64_t sub_1006D6AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 32);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 36) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t sub_1006D6B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006D6B9C);
}

uint64_t sub_1006D6B9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 32);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36) + 8) = a2;
  }
  return result;
}

uint64_t type metadata accessor for PencilPairingLockCheckResponse()
{
  uint64_t result = qword_10164B768;
  if (!qword_10164B768) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1006D6CAC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1006D6D68(char a1)
{
  unint64_t result = 0x754E6C6169726573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6169726553746C61;
      break;
    case 2:
      unint64_t result = 0x5364656573;
      break;
    case 3:
      unint64_t result = 0x6953726576726573;
      break;
    case 4:
      unint64_t result = 0x6449616E6D66;
      break;
    case 5:
      unint64_t result = 0x704164656B73616DLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1006D6E70(char a1)
{
  unint64_t result = 0x754E6C6169726573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6169726553746C61;
      break;
    case 2:
      unint64_t result = 0x5364656573;
      break;
    case 3:
      unint64_t result = 0x6953726576726573;
      break;
    case 4:
      unint64_t result = 0x6449616E6D66;
      break;
    case 5:
      unint64_t result = 0x704164656B73616DLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1006D6F78@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10164B7B8);
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v29 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PencilPairingLockCheckResponse();
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v12[*(int *)(v10 + 44)] = 0;
  uint64_t v13 = a1[3];
  BOOL v30 = a1;
  sub_10001CD44(a1, v13);
  sub_1006D7640();
  uint64_t v14 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v30);
  }
  uint64_t v25 = v5;
  uint64_t v15 = v28;
  uint64_t v31 = v9;
  char v33 = 0;
  unint64_t v16 = sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = *((void *)&v32 + 1);
  *(void *)unint64_t v12 = v32;
  *((void *)v12 + 1) = v17;
  char v33 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_OWORD *)v12 + 1) = v32;
  char v33 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_OWORD *)v12 + 2) = v32;
  char v33 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v24 = v16;
  *((_OWORD *)v12 + 3) = v32;
  LOBYTE(v32) = 4;
  sub_100342C5C();
  uint64_t v18 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = v31;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v12[*(int *)(v31 + 32)], v18, v3);
  LOBYTE(v32) = 5;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v21 = (uint64_t *)&v12[*(int *)(v19 + 36)];
  *uint64_t v21 = v20;
  v21[1] = v22;
  char v33 = 6;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v29);
  *(_OWORD *)&v12[*(int *)(v19 + 40)] = v32;
  sub_1006D7694((uint64_t)v12, v26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v30);
  return sub_1006D76F8((uint64_t)v12);
}

uint64_t sub_1006D74FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10071A4F8(*a1, *a2);
}

uint64_t sub_1006D7508()
{
  return sub_1007209E4(0, *v0);
}

uint64_t sub_1006D7514(uint64_t a1)
{
  return sub_10071F31C(a1, *v1);
}

uint64_t sub_1006D751C(uint64_t a1)
{
  return sub_1007209E4(a1, *v1);
}

unint64_t sub_1006D7524@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1006D7960(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1006D7554@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1006D6D68(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1006D7580()
{
  return sub_1006D6E70(*v0);
}

unint64_t sub_1006D7588@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1006D7960(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1006D75B0(uint64_t a1)
{
  unint64_t v2 = sub_1006D7640();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D75EC(uint64_t a1)
{
  unint64_t v2 = sub_1006D7640();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006D7628@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1006D6F78(a1, a2);
}

unint64_t sub_1006D7640()
{
  unint64_t result = qword_10164B7C0;
  if (!qword_10164B7C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164B7C0);
  }
  return result;
}

uint64_t sub_1006D7694(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PencilPairingLockCheckResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006D76F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PencilPairingLockCheckResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for PencilPairingLockCheckResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006D7820);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingLockCheckResponse.CodingKeys()
{
  return &type metadata for PencilPairingLockCheckResponse.CodingKeys;
}

unint64_t sub_1006D785C()
{
  unint64_t result = qword_10164B7C8;
  if (!qword_10164B7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164B7C8);
  }
  return result;
}

unint64_t sub_1006D78B4()
{
  unint64_t result = qword_10164B7D0;
  if (!qword_10164B7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164B7D0);
  }
  return result;
}

unint64_t sub_1006D790C()
{
  unint64_t result = qword_10164B7D8;
  if (!qword_10164B7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10164B7D8);
  }
  return result;
}

unint64_t sub_1006D7960(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A2220, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

uint64_t sub_1006D79AC(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 120) = a3;
  *(void *)(v4 + 16) = a1;
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v4 + 40) = v6;
  *(void *)(v4 + 48) = *(void *)(v6 - 8);
  *(void *)(v4 + 56) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DateInterval();
  *(void *)(v4 + 64) = v7;
  *(void *)(v4 + 72) = *(void *)(v7 - 8);
  *(void *)(v4 + 80) = swift_task_alloc();
  *(void *)(v4 + 88) = sub_10000588C(&qword_10163F7B0);
  uint64_t v8 = swift_task_alloc();
  *(void *)(v4 + 96) = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 104) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1006D7B44;
  return sub_1006DDD60(v8, a1);
}

uint64_t sub_1006D7B44()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    Swift::String v2 = sub_1006D7E44;
  }
  else {
    Swift::String v2 = sub_1006D7C58;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1006D7C58()
{
  int v1 = *(unsigned __int8 *)(v0 + 120);
  Swift::String v2 = *(void **)(v0 + 16);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_10001CD44(v2, v3);
  char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 112))(v3, v4);
  if (v1 == 1)
  {
    char v6 = v5;
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v9 = *(void *)(v0 + 48);
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v24 = *(void *)(v0 + 40);
    uint64_t v11 = v2[3];
    uint64_t v10 = v2[4];
    sub_10001CD44(*(void **)(v0 + 16), v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
    sub_1006DD7C4(v6 & 1, v8, v7);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v24);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 72) + 16))(*(void *)(v0 + 80), *(void *)(v0 + 24), *(void *)(v0 + 64));
  }
  unint64_t v12 = *(uint64_t **)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v15 = *(void *)(v0 + 64);
  unint64_t v17 = v2[3];
  uint64_t v16 = v2[4];
  uint64_t v18 = sub_10001CD44(*(void **)(v0 + 16), v17);
  uint64_t v19 = sub_1006DEBCC((uint64_t)v18, v13, v12, v17, v16);
  uint64_t v21 = v20;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  sub_10001DAB4((uint64_t)v12, &qword_10163F7B0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v22(v19, v21);
}

uint64_t sub_1006D7E44()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1006D7EC0(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 120) = a3;
  *(void *)(v4 + 16) = a1;
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v4 + 40) = v6;
  *(void *)(v4 + 48) = *(void *)(v6 - 8);
  *(void *)(v4 + 56) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DateInterval();
  *(void *)(v4 + 64) = v7;
  *(void *)(v4 + 72) = *(void *)(v7 - 8);
  *(void *)(v4 + 80) = swift_task_alloc();
  *(void *)(v4 + 88) = sub_10000588C(&qword_10163F7B0);
  uint64_t v8 = swift_task_alloc();
  *(void *)(v4 + 96) = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 104) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1006D8058;
  return sub_1006DDD60(v8, a1);
}

uint64_t sub_1006D8058()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    Swift::String v2 = sub_1006E144C;
  }
  else {
    Swift::String v2 = sub_1006D816C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1006D816C()
{
  int v1 = *(unsigned __int8 *)(v0 + 120);
  Swift::String v2 = *(void **)(v0 + 16);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_10001CD44(v2, v3);
  char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 112))(v3, v4);
  if (v1 == 1)
  {
    char v6 = v5;
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v9 = *(void *)(v0 + 48);
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v24 = *(void *)(v0 + 40);
    uint64_t v11 = v2[3];
    uint64_t v10 = v2[4];
    sub_10001CD44(*(void **)(v0 + 16), v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
    sub_1006DD7C4(v6 & 1, v8, v7);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v24);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 72) + 16))(*(void *)(v0 + 80), *(void *)(v0 + 24), *(void *)(v0 + 64));
  }
  unint64_t v12 = *(unint64_t **)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 72);
  unint64_t v13 = *(void *)(v0 + 80);
  uint64_t v15 = *(void *)(v0 + 64);
  unint64_t v17 = (uint64_t *)v2[3];
  uint64_t v16 = v2[4];
  uint64_t v18 = sub_10001CD44(*(void **)(v0 + 16), (uint64_t)v17);
  uint64_t v19 = sub_1006DF4C0((uint64_t)v18, v13, v12, v17, v16);
  uint64_t v21 = v20;
  (*(void (**)(unint64_t, uint64_t))(v14 + 8))(v13, v15);
  sub_10001DAB4((uint64_t)v12, &qword_10163F7B0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v22(v19, v21);
}

uint64_t sub_1006D8358(uint64_t a1, int a2)
{
  uint64_t v55 = type metadata accessor for TimeBasedKey();
  uint64_t v54 = *(void *)(v55 - 8);
  uint64_t v4 = __chkstk_darwin(v55);
  char v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v65 = (uint64_t *)((char *)&v46 - v7);
  uint64_t v53 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  unint64_t v52 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for DateInterval();
  uint64_t v10 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v63 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for SharedBeaconRecord(0) + 20);
  uint64_t v56 = a1;
  uint64_t v13 = a1 + v12;
  int v57 = a2;
  uint64_t v14 = sub_1012EE330(a1 + v12, a2, 0);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(unsigned int *)(v14 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_firstIndex);
    uint64_t v17 = *(unsigned int *)(v14 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_lastIndex);
    if (v17 < v16)
    {
      __break(1u);
    }
    else
    {
      uint64_t v19 = 0;
      sub_100F3F580(v16, v15, 0, v66);
      uint64_t v46 = v13;
      BOOL v20 = v16 == v17;
      uint64_t v50 = (void (**)(char *, uint64_t))(v8 + 8);
      uint64_t v49 = (void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      uint64_t v48 = (void (**)(uint64_t, uint64_t))(v10 + 8);
      uint64_t v47 = v17 - 1;
      uint64_t v61 = _swiftEmptyArrayStorage;
      uint64_t v62 = v6;
      uint64_t v51 = v15;
      do
      {
        BOOL v60 = v20;
        uint64_t v58 = v19;
        uint64_t v22 = v66[0];
        unint64_t v21 = v66[1];
        uint64_t v24 = v66[2];
        unint64_t v23 = v66[3];
        uint64_t v25 = v66[4];
        unint64_t v26 = v66[5];
        uint64_t v27 = v52;
        sub_10120DE1C((uint64_t)v52);
        sub_1006DD094(v57);
        uint64_t v28 = v63;
        sub_1008B2794(v27, v16, v63);
        (*v50)(v27, v53);
        uint64_t v29 = v55;
        BOOL v30 = v65;
        (*v49)((uint64_t)v65 + *(int *)(v55 + 20), v28, v64);
        uint64_t v59 = v16;
        *BOOL v30 = v16;
        uint64_t v31 = (uint64_t *)((char *)v30 + *(int *)(v29 + 24));
        *uint64_t v31 = v22;
        v31[1] = v21;
        uint64_t v31[2] = v24;
        v31[3] = v23;
        v31[4] = v25;
        v31[5] = v26;
        sub_1006E0628((uint64_t)v30, (uint64_t)v62, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        sub_100037A38(v22, v21);
        sub_1000361E0(v24, v23);
        sub_100037A38(v25, v26);
        unint64_t v32 = (unint64_t)v61;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v32 = sub_100A6F46C(0, *(void *)(v32 + 16) + 1, 1, v32);
        }
        unint64_t v34 = *(void *)(v32 + 16);
        unint64_t v33 = *(void *)(v32 + 24);
        uint64_t v35 = v59;
        if (v34 >= v33 >> 1) {
          unint64_t v32 = sub_100A6F46C(v33 > 1, v34 + 1, 1, v32);
        }
        *(void *)(v32 + 16) = v34 + 1;
        sub_1006E0890((uint64_t)v62, v32+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(void *)(v54 + 72) * v34, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        sub_100037A24(v22, v21);
        sub_10001CFB8(v24, v23);
        sub_100037A24(v25, v26);
        sub_1006E0908((uint64_t)v65, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        (*v48)(v63, v64);
        if (v60)
        {
          swift_release();
          return v32;
        }
        uint64_t v36 = v51;
        if (v35 == 0xFFFFFFFFLL)
        {
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v61 = (void *)v32;
        uint64_t v37 = v35 + 1;
        BOOL v20 = v47 == v35;
        uint64_t v19 = v58;
        sub_100F3F580(v35 + 1, v36, 0, v66);
        uint64_t v16 = v35 + 1;
      }
      while (!v19);
      uint64_t v16 = v37;
      swift_bridgeObjectRelease();
      static os_log_type_t.error.getter();
      if (qword_101636DC8 == -1) {
        goto LABEL_14;
      }
    }
    swift_once();
LABEL_14:
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_101347500;
    *(void *)(v38 + 56) = &type metadata for UInt64;
    *(void *)(v38 + 64) = &protocol witness table for UInt64;
    *(void *)(v38 + 32) = v16;
    uint64_t v39 = UUID.uuidString.getter();
    uint64_t v41 = v40;
    *(void *)(v38 + 96) = &type metadata for String;
    unint64_t v42 = sub_10000B4CC();
    *(void *)(v38 + 104) = v42;
    *(void *)(v38 + 72) = v39;
    *(void *)(v38 + 80) = v41;
    swift_getErrorValue();
    uint64_t v43 = Error.localizedDescription.getter();
    *(void *)(v38 + 136) = &type metadata for String;
    *(void *)(v38 + 144) = v42;
    *(void *)(v38 + 112) = v43;
    *(void *)(v38 + 120) = v44;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_errorRelease();
  }
  return 0;
}

uint64_t sub_1006D8A30()
{
  uid_t v0 = getuid();

  return sub_100DC5FC0(v0);
}

uint64_t sub_1006D8A68(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(v7 + 728) = v6;
  *(unsigned char *)(v7 + 1230) = a6;
  *(unsigned char *)(v7 + 1229) = a5;
  *(unsigned char *)(v7 + 1228) = a4;
  *(void *)(v7 + 720) = a3;
  *(void *)(v7 + 712) = a2;
  *(void *)(v7 + 704) = a1;
  *(void *)(v7 + 736) = *v6;
  uint64_t v8 = type metadata accessor for TimeBasedKey();
  *(void *)(v7 + 744) = v8;
  *(void *)(v7 + 752) = *(void *)(v8 - 8);
  *(void *)(v7 + 760) = swift_task_alloc();
  *(void *)(v7 + 768) = swift_task_alloc();
  *(void *)(v7 + 776) = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  *(void *)(v7 + 784) = swift_task_alloc();
  uint64_t v9 = _s18ConnectionKeyGroupVMa();
  *(void *)(v7 + 792) = v9;
  *(void *)(v7 + 800) = *(void *)(v9 - 8);
  *(void *)(v7 + 808) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Date();
  *(void *)(v7 + 816) = v10;
  *(void *)(v7 + 824) = *(void *)(v10 - 8);
  *(void *)(v7 + 832) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DateInterval();
  *(void *)(v7 + 840) = v11;
  *(void *)(v7 + 848) = *(void *)(v11 - 8);
  *(void *)(v7 + 856) = swift_task_alloc();
  *(void *)(v7 + 864) = swift_task_alloc();
  sub_10000588C(&qword_10164DBB0);
  *(void *)(v7 + 872) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for UUID();
  *(void *)(v7 + 880) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v7 + 888) = v13;
  *(void *)(v7 + 896) = *(void *)(v13 + 64);
  *(void *)(v7 + 904) = swift_task_alloc();
  *(void *)(v7 + 912) = swift_task_alloc();
  *(void *)(v7 + 920) = swift_task_alloc();
  *(void *)(v7 + 928) = swift_task_alloc();
  *(void *)(v7 + 936) = swift_task_alloc();
  *(void *)(v7 + 944) = swift_task_alloc();
  *(void *)(v7 + 952) = swift_task_alloc();
  *(void *)(v7 + 960) = swift_task_alloc();
  *(void *)(v7 + 968) = swift_task_alloc();
  *(void *)(v7 + 976) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101653D50);
  *(void *)(v7 + 984) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for SharedBeaconRecord(0);
  *(void *)(v7 + 992) = v14;
  *(void *)(v7 + 1000) = *(void *)(v14 - 8);
  *(void *)(v7 + 1008) = swift_task_alloc();
  *(void *)(v7 + 1016) = swift_task_alloc();
  sub_10000588C(&qword_10163B9F0);
  *(void *)(v7 + 1024) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for OwnedBeaconRecord();
  *(void *)(v7 + 1032) = v15;
  *(void *)(v7 + 1040) = *(void *)(v15 - 8);
  *(void *)(v7 + 1048) = swift_task_alloc();
  return _swift_task_switch(sub_1006D8EF8, 0, 0);
}

uint64_t sub_1006D8EF8()
{
  uint64_t v197 = v0;
  uint64_t v165 = (uint64_t *)(v0 + 688);
  int v2 = *(unsigned __int8 *)(v0 + 1229);
  *(void *)(v0 + 688) = _swiftEmptyArrayStorage;
  if (v2 == 1)
  {
    uint64_t v3 = *(void *)(v0 + 1040);
    sub_10001D010(*(void *)(v0 + 704), v0 + 160);
    sub_10000588C((uint64_t *)&unk_10164DBF0);
    int v4 = swift_dynamicCast();
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v3 + 56);
    if (!v4)
    {
      uint64_t v64 = *(void *)(v0 + 1024);
      v5(v64, 1, 1, *(void *)(v0 + 1032));
      sub_10001DAB4(v64, &qword_10163B9F0);
      static os_log_type_t.error.getter();
      if (qword_101636DC8 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
LABEL_85:
      swift_bridgeObjectRelease();
      uint64_t v175 = 0;
      uint64_t v190 = 0;
      int v140 = 3;
LABEL_100:
      unsigned int v173 = v140;
LABEL_101:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v163 = *(uint64_t (**)(uint64_t, void *, void))(v0 + 8);
      return v163(v175, v190, v173);
    }
    uint64_t v1 = v0 + 672;
    uint64_t v6 = *(void *)(v0 + 1048);
    uint64_t v7 = *(void *)(v0 + 1024);
    v5(v7, 0, 1, *(void *)(v0 + 1032));
    sub_1006E0890(v7, v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    static os_log_type_t.error.getter();
    if (qword_101636DC8 == -1)
    {
LABEL_4:
      uint64_t v8 = *(void *)(v0 + 1048);
      unint64_t v9 = *(void *)(v0 + 720);
      unint64_t v10 = *(void *)(v0 + 712);
      char v11 = *(unsigned char *)(v0 + 1228);
      os_log(_:dso:log:_:_:)();
      *(void *)(v0 + 672) = v10;
      uint64_t v12 = swift_task_alloc();
      *(void *)(v12 + 16) = v8;
      *(void *)(v12 + 24) = v1;
      *(unsigned char *)(v12 + 32) = v11;
      *(void *)(v12 + 40) = v165;
      sub_101312334(v8, v11, v10, v9, (void (*)(unint64_t, uint64_t, unint64_t, _OWORD *))sub_1006E08F8);
      sub_1006E0908(*(void *)(v0 + 1048), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_task_dealloc();
      uint64_t v190 = 0;
      uint64_t v82 = *v165;
LABEL_99:
      uint64_t v175 = v82;
      int v140 = 1;
      goto LABEL_100;
    }
LABEL_108:
    swift_once();
    goto LABEL_4;
  }
  unint64_t v13 = *(void *)(v0 + 712);
  if (*(void *)(v0 + 720) < v13)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  unint64_t v14 = 0;
  uint64_t v166 = (_OWORD *)(v0 + 16);
  Swift::String v176 = (_OWORD *)(v0 + 64);
  uint64_t v183 = (_OWORD *)(v0 + 112);
  uint64_t v174 = v0 + 240;
  uint64_t v164 = (void *)(v0 + 360);
  *(void *)(v0 + 1056) = OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_keyStore;
  char v15 = 1;
  uint64_t v16 = _swiftEmptyArrayStorage;
  while (1)
  {
    *(void *)(v0 + 1088) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 1080) = v16;
    *(void *)(v0 + 1072) = v13;
    *(unsigned char *)(v0 + 1231) = v15 & 1;
    *(void *)(v0 + 1064) = v14;
    uint64_t v18 = *(void *)(v0 + 1000);
    uint64_t v1 = *(void *)(v0 + 720);
    sub_10001D010(*(void *)(v0 + 704), v0 + 200);
    sub_10000588C((uint64_t *)&unk_10164DBF0);
    char v19 = swift_dynamicCast();
    BOOL v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    if ((v19 & 1) == 0)
    {
      uint64_t v27 = *(void *)(v0 + 984);
      v20(v27, 1, 1, *(void *)(v0 + 992));
      sub_10001DAB4(v27, (uint64_t *)&unk_101653D50);
LABEL_22:
      int v28 = *(unsigned __int8 *)(v0 + 1228);
      uint64_t v29 = *(void **)(v0 + 704);
      uint64_t v30 = v29[3];
      uint64_t v31 = v29[4];
      sub_10001CD44(v29, v30);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v31 + 8) + 8) + 32))(v30);
      unint64_t v188 = v14;
      int v189 = v16;
      uint64_t v186 = v1;
      char v184 = v15;
      if (v28)
      {
        if (v28 == 1)
        {
          *(void *)(v0 + 304) = &type metadata for SecondaryIndex;
          unint64_t v32 = sub_1001A15EC();
        }
        else
        {
          *(void *)(v0 + 304) = &type metadata for SecureLocationsIndex;
          unint64_t v32 = sub_1001A1598();
        }
      }
      else
      {
        *(void *)(v0 + 304) = &type metadata for PrimaryIndex;
        unint64_t v32 = sub_1001A1640();
      }
      *(void *)(v0 + 312) = v32;
      *(void *)(v0 + 280) = v13;
      uint64_t v33 = *(void *)(v0 + 928);
      uint64_t v34 = *(void *)(v0 + 888);
      uint64_t v1 = *(void *)(v0 + 880);
      uint64_t v35 = *(void *)(v0 + 784);
      uint64_t v36 = *(void *)(v0 + 776);
      int v37 = *(unsigned __int8 *)(v0 + 1230);
      sub_10001CEB0((long long *)(v0 + 280), v174);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v35, v33, v1);
      sub_10001D010(v174, v35 + *(int *)(v36 + 20));
      sub_1012E50B0(v35, v37, v183);
      unint64_t v178 = *(void *)(v0 + 120);
      uint64_t v179 = *(void *)(v0 + 112);
      uint64_t v181 = *(void *)(v0 + 128);
      uint64_t v38 = *(void *)(v0 + 144);
      unint64_t v180 = *(void *)(v0 + 136);
      unint64_t v182 = *(void *)(v0 + 152);
      sub_1006E0908(v35, type metadata accessor for BeaconKeyManager.IndexInformation);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v174);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v1);
      sub_1006E043C((uint64_t)v183, (uint64_t)v176);
      if (*(void *)(v0 + 88) >> 60 == 15)
      {
        unint64_t v14 = v188;
        if (v184) {
          unint64_t v14 = v13;
        }
        if (v13 == v186)
        {
          swift_bridgeObjectRelease();
          goto LABEL_57;
        }
        char v15 = 0;
      }
      else
      {
        uint64_t v39 = *(void *)(v0 + 848);
        uint64_t v177 = v13;
        uint64_t v40 = *(char **)(v0 + 832);
        uint64_t v41 = *(void *)(v0 + 824);
        uint64_t v169 = *(void *)(v0 + 816);
        uint64_t v170 = *(void *)(v0 + 840);
        unint64_t v42 = *(uint64_t **)(v0 + 768);
        uint64_t v171 = *(void *)(v0 + 760);
        uint64_t v172 = v38;
        uint64_t v167 = *(void *)(v0 + 856);
        uint64_t v168 = *(void *)(v0 + 744);
        uint64_t v43 = *(void **)(v0 + 704);
        long long v44 = *(_OWORD *)(v0 + 80);
        *uint64_t v166 = *v176;
        *(_OWORD *)(v0 + 32) = v44;
        *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 96);
        uint64_t v46 = v43[3];
        uint64_t v45 = v43[4];
        char v47 = *(unsigned char *)(v0 + 1228);
        sub_10001CD44(v43, v46);
        (*(void (**)(uint64_t, uint64_t))(v45 + 184))(v46, v45);
        sub_1006DD094(v47);
        sub_1008B2794(v40, v177, v167);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v169);
        (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))((char *)v42 + *(int *)(v168 + 20), v167, v170);
        *unint64_t v42 = v177;
        uint64_t v48 = (_OWORD *)((char *)v42 + *(int *)(v168 + 24));
        long long v50 = *(_OWORD *)(v0 + 32);
        long long v49 = *(_OWORD *)(v0 + 48);
        _OWORD *v48 = *v166;
        v48[1] = v50;
        v48[2] = v49;
        sub_1006E0628((uint64_t)v42, v171, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        unint64_t v51 = *(void *)(v0 + 688);
        sub_100037A38(v179, v178);
        sub_1000361E0(v181, v180);
        sub_100037A38(v172, v182);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v51 = sub_100A6F46C(0, *(void *)(v51 + 16) + 1, 1, v51);
        }
        unint64_t v53 = *(void *)(v51 + 16);
        unint64_t v52 = *(void *)(v51 + 24);
        uint64_t v16 = v189;
        uint64_t v1 = v186;
        if (v53 >= v52 >> 1) {
          unint64_t v51 = sub_100A6F46C(v52 > 1, v53 + 1, 1, v51);
        }
        uint64_t v54 = *(void *)(v0 + 760);
        uint64_t v55 = *(void *)(v0 + 752);
        *(void *)(v51 + 16) = v53 + 1;
        sub_1006E0890(v54, v51+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v53, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        *(void *)(v0 + 688) = v51;
        if ((v184 & 1) == 0)
        {
          unint64_t v56 = v177 - 1;
          if (!v177) {
            goto LABEL_105;
          }
          if (v56 < v188) {
            goto LABEL_106;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v16 = sub_100A6F35C(0, v189[2] + 1, 1, v189);
          }
          unint64_t v58 = v16[2];
          unint64_t v57 = v16[3];
          if (v58 >= v57 >> 1) {
            uint64_t v16 = sub_100A6F35C((void *)(v57 > 1), v58 + 1, 1, v16);
          }
          v16[2] = v58 + 1;
          uint64_t v59 = &v16[2 * v58];
          v59[4] = v188;
          v59[5] = v56;
        }
        uint64_t v60 = *(void *)(v0 + 856);
        uint64_t v61 = *(void *)(v0 + 848);
        uint64_t v62 = *(void *)(v0 + 840);
        uint64_t v63 = *(void *)(v0 + 768);
        sub_1005E30E0((uint64_t)v183);
        sub_1006E0908(v63, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
        if (v177 == v186)
        {
          swift_bridgeObjectRelease();
LABEL_62:
          if (!*(void *)(*v165 + 16))
          {
            swift_bridgeObjectRelease();
            static os_log_type_t.error.getter();
            if (qword_101636DC8 != -1) {
              swift_once();
            }
            unint64_t v104 = 0xD000000000000010;
            uint64_t v105 = *(void *)(v0 + 904);
            uint64_t v106 = *(void *)(v0 + 888);
            uint64_t v194 = *(void *)(v0 + 880);
            uint64_t v107 = *(void **)(v0 + 728);
            int v191 = *(unsigned __int8 *)(v0 + 1228);
            long long v108 = *(void **)(v0 + 704);
            sub_10000588C((uint64_t *)&unk_10163AD00);
            uint64_t v109 = swift_allocObject();
            *(_OWORD *)(v109 + 16) = xmmword_10134BFA0;
            *(void *)(v0 + 624) = *v107;
            sub_10000588C(&qword_10164B810);
            uint64_t v110 = String.init<A>(describing:)();
            uint64_t v112 = v111;
            *(void *)(v109 + 56) = &type metadata for String;
            unint64_t v113 = sub_10000B4CC();
            *(void *)(v109 + 32) = v110;
            *(void *)(v109 + 40) = v112;
            *(void *)(v109 + 96) = &type metadata for String;
            *(void *)(v109 + 104) = v113;
            *(void *)(v109 + 64) = v113;
            *(void *)(v109 + 72) = 0xD00000000000004DLL;
            *(void *)(v109 + 80) = 0x8000000101404720;
            uint64_t v114 = v108[3];
            uint64_t v115 = v108[4];
            sub_10001CD44(v108, v114);
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v115 + 8) + 8) + 32))(v114);
            uint64_t v116 = UUID.uuidString.getter();
            uint64_t v118 = v117;
            (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v105, v194);
            *(void *)(v109 + 136) = &type metadata for String;
            *(void *)(v109 + 144) = v113;
            *(void *)(v109 + 112) = v116;
            *(void *)(v109 + 120) = v118;
            if (v191)
            {
              if (v191 == 1)
              {
                unint64_t v104 = 0x61646E6F6365732ELL;
                unint64_t v119 = 0xEA00000000007972;
              }
              else
              {
                unint64_t v119 = 0x80000001013F28C0;
              }
            }
            else
            {
              unint64_t v104 = 0x7972616D6972702ELL;
              unint64_t v119 = 0xE800000000000000;
            }
            uint64_t v138 = *(void *)(v0 + 720);
            uint64_t v139 = *(void *)(v0 + 712);
            *(void *)(v109 + 176) = &type metadata for String;
            *(void *)(v109 + 184) = v113;
            *(void *)(v109 + 152) = v104;
            *(void *)(v109 + 160) = v119;
            *(void *)(v109 + 216) = &type metadata for UInt64;
            *(void *)(v109 + 224) = &protocol witness table for UInt64;
            *(void *)(v109 + 192) = v139;
            *(void *)(v109 + 256) = &type metadata for UInt64;
            *(void *)(v109 + 264) = &protocol witness table for UInt64;
            *(void *)(v109 + 232) = v138;
            os_log(_:dso:log:_:_:)();
            swift_bridgeObjectRelease();
            goto LABEL_85;
          }
          if (v16[2])
          {
            uint64_t v190 = v16;
            static os_log_type_t.error.getter();
            if (qword_101636DC8 != -1) {
              swift_once();
            }
            unint64_t v88 = 0xD000000000000010;
            uint64_t v89 = *(void *)(v0 + 912);
            uint64_t v90 = *(void *)(v0 + 888);
            uint64_t v91 = *(void **)(v0 + 728);
            int v185 = *(unsigned __int8 *)(v0 + 1228);
            uint64_t v92 = *(void **)(v0 + 704);
            uint64_t v187 = *(void *)(v0 + 880);
            sub_10000588C((uint64_t *)&unk_10163AD00);
            uint64_t v93 = swift_allocObject();
            *(_OWORD *)(v93 + 16) = xmmword_101347580;
            *(void *)(v0 + 664) = *v91;
            sub_10000588C(&qword_10164B810);
            uint64_t v94 = String.init<A>(describing:)();
            uint64_t v96 = v95;
            *(void *)(v93 + 56) = &type metadata for String;
            unint64_t v97 = sub_10000B4CC();
            *(void *)(v93 + 32) = v94;
            *(void *)(v93 + 40) = v96;
            *(void *)(v93 + 96) = &type metadata for String;
            *(void *)(v93 + 104) = v97;
            *(void *)(v93 + 64) = v97;
            *(void *)(v93 + 72) = 0xD00000000000004DLL;
            *(void *)(v93 + 80) = 0x8000000101404720;
            uint64_t v98 = v92[3];
            uint64_t v99 = v92[4];
            sub_10001CD44(v92, v98);
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v99 + 8) + 8) + 32))(v98);
            uint64_t v100 = UUID.uuidString.getter();
            uint64_t v102 = v101;
            (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v187);
            *(void *)(v93 + 136) = &type metadata for String;
            *(void *)(v93 + 144) = v97;
            *(void *)(v93 + 112) = v100;
            *(void *)(v93 + 120) = v102;
            if (v185)
            {
              if (v185 == 1)
              {
                unint64_t v88 = 0x61646E6F6365732ELL;
                unint64_t v103 = 0xEA00000000007972;
              }
              else
              {
                unint64_t v103 = 0x80000001013F28C0;
              }
            }
            else
            {
              unint64_t v88 = 0x7972616D6972702ELL;
              unint64_t v103 = 0xE800000000000000;
            }
            uint64_t v136 = *(void *)(v0 + 720);
            uint64_t v137 = *(void *)(v0 + 712);
            *(void *)(v93 + 176) = &type metadata for String;
            *(void *)(v93 + 184) = v97;
            *(void *)(v93 + 152) = v88;
            *(void *)(v93 + 160) = v103;
            *(void *)(v93 + 216) = &type metadata for UInt64;
            *(void *)(v93 + 224) = &protocol witness table for UInt64;
            *(void *)(v93 + 192) = v137;
            *(void *)(v93 + 256) = &type metadata for UInt64;
            *(void *)(v93 + 264) = &protocol witness table for UInt64;
            *(void *)(v93 + 232) = v136;
            *(void *)(v93 + 296) = sub_10000588C(&qword_10164B818);
            *(void *)(v93 + 304) = sub_1006E04A4();
            *(void *)(v93 + 272) = v190;
            swift_bridgeObjectRetain();
            os_log(_:dso:log:_:_:)();
            swift_bridgeObjectRelease();
            unsigned int v173 = 0;
            uint64_t v175 = *(void *)(v0 + 688);
            goto LABEL_101;
          }
          swift_bridgeObjectRelease();
          static os_log_type_t.default.getter();
          if (qword_101636DC8 != -1) {
            swift_once();
          }
          unint64_t v120 = 0xD000000000000010;
          uint64_t v121 = *(void *)(v0 + 920);
          uint64_t v122 = *(void *)(v0 + 888);
          uint64_t v195 = *(void *)(v0 + 880);
          uint64_t v123 = *(void **)(v0 + 728);
          int v192 = *(unsigned __int8 *)(v0 + 1228);
          uint64_t v124 = *(void **)(v0 + 704);
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v125 = swift_allocObject();
          *(_OWORD *)(v125 + 16) = xmmword_10134BFA0;
          *(void *)(v0 + 640) = *v123;
          sub_10000588C(&qword_10164B810);
          uint64_t v126 = String.init<A>(describing:)();
          uint64_t v128 = v127;
          *(void *)(v125 + 56) = &type metadata for String;
          unint64_t v129 = sub_10000B4CC();
          *(void *)(v125 + 32) = v126;
          *(void *)(v125 + 40) = v128;
          *(void *)(v125 + 96) = &type metadata for String;
          *(void *)(v125 + 104) = v129;
          *(void *)(v125 + 64) = v129;
          *(void *)(v125 + 72) = 0xD00000000000004DLL;
          *(void *)(v125 + 80) = 0x8000000101404720;
          uint64_t v130 = v124[3];
          uint64_t v131 = v124[4];
          sub_10001CD44(v124, v130);
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v131 + 8) + 8) + 32))(v130);
          uint64_t v132 = UUID.uuidString.getter();
          uint64_t v134 = v133;
          (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v121, v195);
          *(void *)(v125 + 136) = &type metadata for String;
          *(void *)(v125 + 144) = v129;
          *(void *)(v125 + 112) = v132;
          *(void *)(v125 + 120) = v134;
          if (v192)
          {
            if (v192 == 1)
            {
              unint64_t v120 = 0x61646E6F6365732ELL;
              unint64_t v135 = 0xEA00000000007972;
            }
            else
            {
              unint64_t v135 = 0x80000001013F28C0;
            }
          }
          else
          {
            unint64_t v120 = 0x7972616D6972702ELL;
            unint64_t v135 = 0xE800000000000000;
          }
          uint64_t v161 = *(void *)(v0 + 720);
          uint64_t v162 = *(void *)(v0 + 712);
          *(void *)(v125 + 176) = &type metadata for String;
          *(void *)(v125 + 184) = v129;
          *(void *)(v125 + 152) = v120;
          *(void *)(v125 + 160) = v135;
          *(void *)(v125 + 216) = &type metadata for UInt64;
          *(void *)(v125 + 224) = &protocol witness table for UInt64;
          *(void *)(v125 + 192) = v162;
          *(void *)(v125 + 256) = &type metadata for UInt64;
          *(void *)(v125 + 264) = &protocol witness table for UInt64;
          *(void *)(v125 + 232) = v161;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          uint64_t v190 = 0;
          uint64_t v82 = *(void *)(v0 + 688);
          goto LABEL_99;
        }
        unint64_t v14 = 0;
        char v15 = 1;
      }
      goto LABEL_11;
    }
    uint64_t v21 = *(void *)(v0 + 1016);
    uint64_t v22 = *(void *)(v0 + 992);
    uint64_t v23 = *(void *)(v0 + 984);
    v20(v23, 0, 1, v22);
    sub_1006E0890(v23, v21, type metadata accessor for SharedBeaconRecord);
    uint64_t v24 = *(int *)(v22 + 64);
    *(_DWORD *)(v0 + 1224) = v24;
    int v25 = *(unsigned __int8 *)(v21 + v24);
    if (v25 != 4 && v25 != 2)
    {
      sub_1006E0908(*(void *)(v0 + 1016), type metadata accessor for SharedBeaconRecord);
      goto LABEL_22;
    }
    if (*(unsigned char *)(v0 + 1228) != 2) {
      break;
    }
    sub_1006E0908(*(void *)(v0 + 1016), type metadata accessor for SharedBeaconRecord);
    if (*(void *)(v0 + 1072) == *(void *)(v0 + 720))
    {
      int v81 = *(unsigned __int8 *)(v0 + 1231);
      swift_bridgeObjectRelease();
      if (v81 == 1)
      {
        uint64_t v16 = *(void **)(v0 + 1080);
        goto LABEL_62;
      }
      unint64_t v14 = *(void *)(v0 + 1064);
LABEL_57:
      if (v14 > *(void *)(v0 + 720))
      {
        __break(1u);
      }
      else
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v16 = *(void **)(v0 + 1080);
        if (isUniquelyReferenced_nonNull_native)
        {
LABEL_59:
          unint64_t v85 = v16[2];
          unint64_t v84 = v16[3];
          if (v85 >= v84 >> 1) {
            uint64_t v16 = sub_100A6F35C((void *)(v84 > 1), v85 + 1, 1, v16);
          }
          uint64_t v86 = *(void *)(v0 + 720);
          v16[2] = v85 + 1;
          uint64_t v87 = &v16[2 * v85];
          v87[4] = v14;
          v87[5] = v86;
          goto LABEL_62;
        }
      }
      uint64_t v16 = sub_100A6F35C(0, v16[2] + 1, 1, v16);
      goto LABEL_59;
    }
    uint64_t v16 = *(void **)(v0 + 1080);
    char v15 = *(unsigned char *)(v0 + 1231);
    unint64_t v14 = *(void *)(v0 + 1064);
LABEL_11:
    uint64_t v17 = *(void *)(v0 + 1072);
    unint64_t v13 = v17 + 1;
    if (v17 == -1)
    {
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
  }
  if (*(unsigned char *)(v0 + 1228))
  {
    *(void *)(v0 + 464) = &type metadata for SecondaryIndex;
    unint64_t v79 = sub_1001A15EC();
    *(void *)(v0 + 472) = v79;
    *(void *)(v0 + 440) = v13;
    uint64_t v80 = &type metadata for SecondaryIndex;
  }
  else
  {
    uint64_t v65 = *(void *)(v0 + 1016);
    uint64_t v66 = *(void *)(v0 + 1008);
    uint64_t v67 = *(void *)(v0 + 992);
    *(void *)(v0 + 464) = &type metadata for PrimaryIndex;
    *(void *)(v0 + 472) = sub_1001A1640();
    *(void *)(v0 + 440) = v13;
    uint64_t v68 = *(void *)(v65 + *(int *)(v67 + 44));
    sub_1006E0628(v65, v66, type metadata accessor for SharedBeaconRecord);
    uint64_t v69 = *(void *)(v0 + 1008);
    if (v68 == -1)
    {
      sub_1006E0908(v69, type metadata accessor for SharedBeaconRecord);
    }
    else
    {
      uint64_t v70 = *(void *)(v69 + *(int *)(*(void *)(v0 + 992) + 48));
      sub_1006E0908(v69, type metadata accessor for SharedBeaconRecord);
      if (v70 != -1)
      {
        uint64_t v71 = *(void **)(v0 + 704);
        uint64_t v73 = v71[3];
        uint64_t v72 = v71[4];
        sub_10001CD44(v71, v73);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v72 + 8) + 8) + 32))(v73);
        uid_t v74 = getuid();
        sub_100DC5FC0(v74);
        uint64_t v75 = (void *)swift_task_alloc();
        *(void *)(v0 + 1096) = v75;
        *uint64_t v75 = v0;
        v75[1] = sub_1006DA77C;
        uint64_t v76 = *(void *)(v0 + 976);
        uint64_t v77 = *(void *)(v0 + 968);
        return sub_10064A57C(v77, v76, v13);
      }
    }
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v141 = *(void *)(v0 + 704);
    uint64_t v142 = type metadata accessor for Logger();
    sub_100010324(v142, (uint64_t)qword_10170D788);
    sub_10001D010(v141, (uint64_t)v164);
    uint64_t v143 = Logger.logObject.getter();
    os_log_type_t v144 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v143, v144))
    {
      uint64_t v145 = *(void *)(v0 + 960);
      uint64_t v146 = *(void *)(v0 + 888);
      uint64_t v193 = *(void *)(v0 + 880);
      uint64_t v147 = swift_slowAlloc();
      v196[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v147 = 141558275;
      *(void *)(v0 + 648) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v147 + 12) = 2081;
      uint64_t v149 = *(void *)(v0 + 384);
      uint64_t v148 = *(void *)(v0 + 392);
      sub_10001CD44(v164, v149);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v148 + 8) + 8) + 32))(v149);
      sub_10028B80C();
      uint64_t v150 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v152 = v151;
      (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v145, v193);
      *(void *)(v0 + 656) = sub_1008FA0F0(v150, v152, v196);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v164);
      _os_log_impl((void *)&_mh_execute_header, v143, v144, "Skipping connection keys fetching: %{private,mask.hash}s.", (uint8_t *)v147, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v164);
    }

    uint64_t v80 = *(ValueMetadata **)(v0 + 464);
    unint64_t v79 = *(void *)(v0 + 472);
  }
  *(void *)(v0 + 1152) = 0xF000000000000000;
  *(void *)(v0 + 1144) = 0;
  unint64_t v153 = *(void **)(v0 + 704);
  unint64_t v154 = sub_10001CD44((void *)(v0 + 440), (uint64_t)v80);
  uint64_t v155 = v153[3];
  uint64_t v156 = v153[4];
  sub_10001CD44(v153, v155);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v156 + 8) + 8) + 32))(v155);
  uid_t v157 = getuid();
  sub_100DC5FC0(v157);
  uint64_t v158 = (void *)swift_task_alloc();
  *(void *)(v0 + 1160) = v158;
  *uint64_t v158 = v0;
  v158[1] = sub_1006DAC04;
  uint64_t v159 = *(void *)(v0 + 944);
  uint64_t v160 = *(void *)(v0 + 936);
  return sub_1006495B0(v160, v159, (uint64_t)v154, (uint64_t)v80, v79);
}

uint64_t sub_1006DA77C(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[138] = a1;
  v5[139] = a2;
  v5[140] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[122];
  uint64_t v7 = v4[121];
  uint64_t v8 = v4[111];
  uint64_t v9 = v4[110];
  unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  uint64_t v11 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  if (v2)
  {
    v5[151] = v10;
    v5[152] = v11;
    v10(v7, v9);
    v10(v6, v9);
    uint64_t v12 = sub_1006DCA9C;
  }
  else
  {
    v5[141] = v10;
    v5[142] = v11;
    v10(v7, v9);
    v10(v6, v9);
    uint64_t v12 = sub_1006DA964;
  }
  return _swift_task_switch(v12, 0, 0);
}

uint64_t sub_1006DA964()
{
  unint64_t v1 = v0[139];
  if (v1 >> 60 == 15)
  {
    uint64_t v27 = (void (*)(uint64_t, uint64_t))v0[141];
    uint64_t v2 = v0[120];
    uint64_t v3 = v0[119];
    uint64_t v4 = v0[112];
    uint64_t v5 = v0[111];
    uint64_t v6 = v0[110];
    uint64_t v7 = v0[109];
    uint64_t v8 = v0[92];
    uint64_t v9 = (void *)v0[88];
    uint64_t v11 = v9[3];
    uint64_t v10 = v9[4];
    sub_10001CD44(v9, v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
    uint64_t v12 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v6);
    unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = 0;
    *(void *)(v14 + 24) = 0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v14 + v13, v3, v6);
    *(void *)(v14 + ((v4 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = v8;
    sub_1008F5E44(v7, (uint64_t)&unk_10164B830, v14);
    swift_release();
    v27(v2, v6);
    unint64_t v1 = v0[139];
  }
  uint64_t v15 = v0[138];
  v0[144] = v1;
  v0[143] = v15;
  uint64_t v16 = (void *)v0[88];
  uint64_t v17 = v0[58];
  uint64_t v18 = v0[59];
  char v19 = sub_10001CD44(v0 + 55, v17);
  uint64_t v20 = v16[3];
  uint64_t v21 = v16[4];
  sub_10001CD44(v16, v20);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v21 + 8) + 8) + 32))(v20);
  uid_t v22 = getuid();
  sub_100DC5FC0(v22);
  uint64_t v23 = (void *)swift_task_alloc();
  v0[145] = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_1006DAC04;
  uint64_t v24 = v0[118];
  uint64_t v25 = v0[117];
  return sub_1006495B0(v25, v24, (uint64_t)v19, v17, v18);
}

uint64_t sub_1006DAC04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[146] = a1;
  v4[147] = a2;
  v4[148] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = v4[118];
    uint64_t v6 = v4[117];
    uint64_t v7 = v4[111];
    uint64_t v8 = v4[110];
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v9(v6, v8);
    v9(v5, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_1006DCEA8;
  }
  else
  {
    uint64_t v11 = v4[118];
    uint64_t v12 = v4[117];
    uint64_t v13 = v4[111];
    uint64_t v14 = v4[110];
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v4[149] = v15;
    v4[150] = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v15(v12, v14);
    v15(v11, v14);
    uint64_t v10 = sub_1006DADC8;
  }
  return _swift_task_switch(v10, 0, 0);
}

uint64_t sub_1006DADC8()
{
  uint64_t v271 = v0;
  uint64_t v2 = v0;
  uint64_t v239 = (void *)(v0 + 440);
  if (*(void *)(v0 + 1176) >> 60 == 15)
  {
    if (*(unsigned char *)(*(void *)(v0 + 1016) + *(int *)(v0 + 1224)) == 2)
    {
      uint64_t v3 = (void *)(v0 + 320);
      uint64_t v4 = (void *)(v0 + 480);
      if (qword_101636888 != -1) {
        swift_once();
      }
      uint64_t v5 = *(void *)(v0 + 704);
      uint64_t v6 = type metadata accessor for Logger();
      sub_100010324(v6, (uint64_t)qword_10170D788);
      sub_10001D010(v5, v0 + 480);
      sub_10001D010((uint64_t)v239, v0 + 320);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        unint64_t v249 = *(void (**)(uint64_t, uint64_t))(v0 + 1192);
        uint64_t v9 = *(void *)(v0 + 960);
        uint64_t v10 = *(void *)(v0 + 880);
        uint64_t v11 = swift_slowAlloc();
        v270[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 141558531;
        *(void *)(v0 + 592) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v11 + 12) = 2081;
        uint64_t v12 = *(void *)(v269 + 504);
        uint64_t v13 = *(void *)(v269 + 512);
        sub_10001CD44(v4, v12);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v13 + 8) + 8) + 32))(v12);
        sub_10028B80C();
        uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v16 = v15;
        v249(v9, v10);
        *(void *)(v269 + 568) = sub_1008FA0F0(v14, v16, v270);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v4);
        *(_WORD *)(v11 + 22) = 2048;
        sub_10001CD44(v3, *(void *)(v269 + 344));
        uint64_t v2 = v269;
        dispatch thunk of RawRepresentable.rawValue.getter();
        uint64_t v17 = *(void *)(v269 + 576);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v3);
        *(void *)(v269 + 584) = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Didn't find keys for beacon: %{private,mask.hash}s, requesting download - index %llu.", (uint8_t *)v11, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 320);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 480);
      }

      unint64_t v263 = *(void (**)(uint64_t, uint64_t))(v2 + 1192);
      unint64_t v258 = *(void *)(v2 + 1152);
      unint64_t v1 = *(void **)(v2 + 1144);
      uint64_t v54 = *(void *)(v2 + 960);
      uint64_t v55 = *(void *)(v269 + 952);
      uint64_t v56 = *(void *)(v269 + 896);
      uint64_t v57 = *(void *)(v269 + 888);
      uint64_t v58 = *(void *)(v269 + 880);
      uint64_t v59 = *(void *)(v269 + 872);
      uint64_t v60 = *(void *)(v269 + 736);
      uint64_t v61 = *(void **)(v269 + 704);
      uint64_t v63 = v61[3];
      uint64_t v62 = v61[4];
      sub_10001CD44(v61, v63);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v62 + 8) + 8) + 32))(v63);
      uint64_t v64 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v59, 1, 1, v64);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v55, v54, v58);
      unint64_t v65 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
      uint64_t v66 = swift_allocObject();
      *(void *)(v66 + 16) = 0;
      *(void *)(v66 + 24) = 0;
      uint64_t v67 = v55;
      uint64_t v2 = v269;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v57 + 32))(v66 + v65, v67, v58);
      *(void *)(v66 + ((v56 + v65 + 7) & 0xFFFFFFFFFFFFFFF8)) = v60;
      sub_1008F5E44(v59, (uint64_t)&unk_10164B828, v66);
      swift_release();
      sub_100037A24((uint64_t)v1, v258);
      v263(v54, v58);
    }
    else
    {
      sub_100037A24(*(void *)(v0 + 1144), *(void *)(v0 + 1152));
    }
    uint64_t v68 = *(void *)(v2 + 1072);
    uint64_t v69 = *(void *)(v2 + 720);
    uint64_t v70 = *(void *)(*(void *)(v2 + 1088) + 16);
    sub_1006E0908(*(void *)(v2 + 1016), type metadata accessor for SharedBeaconRecord);
    uint64_t v53 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v239);
    if (v70 && v68 == v69)
    {
      uint64_t v251 = *(void *)(v2 + 1088);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v253 = 0;
      int v71 = 2;
LABEL_97:
      unsigned int v240 = v71;
      goto LABEL_98;
    }
    uint64_t v51 = *(void *)(v2 + 1088);
  }
  else
  {
    unint64_t v260 = *(void *)(v0 + 1152);
    uint64_t v18 = *(void *)(v0 + 1072);
    uint64_t v19 = *(void *)(v0 + 864);
    uint64_t v20 = *(char **)(v0 + 832);
    uint64_t v21 = *(void *)(v0 + 824);
    uint64_t v22 = *(void *)(v0 + 816);
    uint64_t v23 = *(void **)(v0 + 704);
    uint64_t v24 = v23[3];
    uint64_t v25 = v23[4];
    char v26 = *(unsigned char *)(v0 + 1228);
    sub_10001CD44(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v25 + 184))(v24, v25);
    sub_1006DD094(v26);
    sub_1008B2794(v20, v18, v19);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v20, v22);
    type metadata accessor for __DataStorage();
    swift_allocObject();
    uint64_t v27 = __DataStorage.init(length:)();
    if (v260 >> 60 == 15)
    {
      uint64_t v28 = v27 | 0x4000000000000000;
      uint64_t v256 = 0x2000000000;
      sub_1000361E0(0x2000000000, v27 | 0x4000000000000000);
      unint64_t v261 = *(void *)(v0 + 1152);
      uint64_t v29 = *(void *)(v0 + 1144);
    }
    else
    {
      uint64_t v28 = *(void *)(v0 + 1152);
      uint64_t v29 = *(void *)(v0 + 1144);
      uint64_t v256 = v29;
      unint64_t v261 = v28;
    }
    unint64_t v30 = *(void *)(v0 + 1176);
    uint64_t v31 = *(void *)(v0 + 1168);
    uint64_t v32 = *(void *)(v269 + 864);
    uint64_t v33 = *(void *)(v269 + 848);
    uint64_t v34 = *(void *)(v269 + 840);
    uint64_t v35 = *(uint64_t **)(v269 + 808);
    uint64_t v36 = *(void *)(v269 + 792);
    sub_10001D010((uint64_t)v239, (uint64_t)(v35 + 4));
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))((char *)v35 + *(int *)(v36 + 28), v32, v34);
    *uint64_t v35 = v31;
    v35[1] = v30;
    v35[2] = v256;
    v35[3] = v28;
    sub_100037A38(v29, v261);
    sub_100037A38(v31, v30);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v38 = *(void *)(v269 + 1088);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v38 = sub_100A6F4A0(0, *(void *)(v38 + 16) + 1, 1, *(void *)(v269 + 1088));
    }
    unint64_t v40 = *(void *)(v38 + 16);
    unint64_t v39 = *(void *)(v38 + 24);
    uint64_t v41 = v38;
    if (v40 >= v39 >> 1) {
      uint64_t v41 = sub_100A6F4A0(v39 > 1, v40 + 1, 1, v38);
    }
    unint64_t v42 = *(void *)(v269 + 1176);
    uint64_t v43 = *(void *)(v269 + 1168);
    unint64_t v1 = *(void **)(v269 + 1152);
    uint64_t v44 = *(void *)(v269 + 1144);
    uint64_t v45 = *(void *)(v269 + 1016);
    uint64_t v46 = *(void *)(v269 + 864);
    uint64_t v47 = *(void *)(v269 + 848);
    uint64_t v48 = *(void *)(v269 + 840);
    uint64_t v49 = *(void *)(v269 + 808);
    uint64_t v50 = *(void *)(v269 + 800);
    uint64_t v257 = *(void *)(v269 + 720);
    uint64_t v262 = *(void *)(v269 + 1072);
    *(void *)(v41 + 16) = v40 + 1;
    uint64_t v51 = v41;
    sub_1006E0890(v49, v41+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(void *)(v50 + 72) * v40, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
    sub_100037A24(v44, (unint64_t)v1);
    swift_release();
    sub_100037A24(v43, v42);
    uint64_t v52 = *(void *)(v51 + 16);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
    sub_1006E0908(v45, type metadata accessor for SharedBeaconRecord);
    uint64_t v53 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v239);
    if (v52 && v262 == v257)
    {
      uint64_t v2 = v269;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v253 = 0;
      unsigned int v240 = 2;
      uint64_t v251 = v51;
      goto LABEL_98;
    }
    uint64_t v2 = v269;
  }
  uint64_t v265 = (unsigned __int8 *)(v2 + 1230);
  if (*(void *)(v2 + 1072) == *(void *)(v2 + 720)) {
    goto LABEL_26;
  }
  BOOL v238 = (_OWORD *)(v2 + 16);
  uint64_t v250 = (_OWORD *)(v2 + 64);
  uint64_t v247 = (_OWORD *)(v2 + 112);
  uint64_t v248 = v2 + 200;
  uint64_t v244 = (long long *)(v2 + 280);
  uint64_t v245 = v2 + 240;
  uint64_t v73 = (void *)(v2 + 360);
  uid_t v74 = &type metadata for SecondaryIndex;
  uint64_t v252 = v51;
  uint64_t v246 = (void *)(v2 + 360);
  while (2)
  {
    unint64_t v1 = *(void **)(v2 + 1080);
    char v75 = v265[1];
    unint64_t v76 = *(void *)(v2 + 1064);
LABEL_30:
    unint64_t v254 = v1;
    while (1)
    {
      uint64_t v77 = *(void *)(v2 + 1072);
      uint64_t v78 = v77 + 1;
      if (v77 == -1)
      {
        __break(1u);
        goto LABEL_109;
      }
      *(void *)(v2 + 1088) = v51;
      *(void *)(v2 + 1080) = v1;
      *(void *)(v2 + 1072) = v78;
      char v264 = v75;
      v265[1] = v75 & 1;
      unint64_t v259 = v76;
      *(void *)(v2 + 1064) = v76;
      uint64_t v79 = *(void *)(v2 + 1000);
      unint64_t v1 = *(void **)(v2 + 720);
      sub_10001D010(*(void *)(v2 + 704), v248);
      sub_10000588C((uint64_t *)&unk_10164DBF0);
      char v80 = swift_dynamicCast();
      int v81 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56);
      if (v80) {
        break;
      }
      uint64_t v88 = *(void *)(v2 + 984);
      v81(v88, 1, 1, *(void *)(v2 + 992));
      sub_10001DAB4(v88, (uint64_t *)&unk_101653D50);
LABEL_39:
      int v89 = *(unsigned __int8 *)(v2 + 1228);
      uint64_t v90 = *(void **)(v2 + 704);
      uint64_t v92 = v90[3];
      uint64_t v91 = v90[4];
      sub_10001CD44(v90, v92);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v91 + 8) + 8) + 32))(v92);
      uint64_t v255 = v1;
      if (v89)
      {
        if (v89 == 1)
        {
          *(void *)(v2 + 304) = &type metadata for SecondaryIndex;
          unint64_t v93 = sub_1001A15EC();
        }
        else
        {
          *(void *)(v2 + 304) = &type metadata for SecureLocationsIndex;
          unint64_t v93 = sub_1001A1598();
        }
      }
      else
      {
        *(void *)(v2 + 304) = &type metadata for PrimaryIndex;
        unint64_t v93 = sub_1001A1640();
      }
      *(void *)(v2 + 312) = v93;
      *(void *)(v2 + 280) = v78;
      uint64_t v94 = *(void *)(v2 + 928);
      uint64_t v95 = *(void *)(v2 + 888);
      uint64_t v96 = *(void *)(v269 + 880);
      uint64_t v97 = *(void *)(v269 + 784);
      uint64_t v98 = *(void *)(v269 + 776);
      int v99 = *v265;
      sub_10001CEB0(v244, v245);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16))(v97, v94, v96);
      sub_10001D010(v245, v97 + *(int *)(v98 + 20));
      sub_1012E50B0(v97, v99, v247);
      uint64_t v100 = *(void *)(v269 + 112);
      unint64_t v101 = *(void *)(v269 + 120);
      uint64_t v242 = *(void *)(v269 + 128);
      unint64_t v241 = *(void *)(v269 + 136);
      uint64_t v102 = *(void *)(v269 + 144);
      unint64_t v243 = *(void *)(v269 + 152);
      sub_1006E0908(v97, type metadata accessor for BeaconKeyManager.IndexInformation);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v245);
      uint64_t v103 = v96;
      uint64_t v2 = v269;
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v103);
      uint64_t v53 = sub_1006E043C((uint64_t)v247, (uint64_t)v250);
      if (*(void *)(v269 + 88) >> 60 != 15)
      {
        uint64_t v104 = *(void *)(v269 + 856);
        uint64_t v105 = *(char **)(v269 + 832);
        uint64_t v233 = *(void *)(v269 + 816);
        uint64_t v234 = *(void *)(v269 + 848);
        uint64_t v106 = *(uint64_t **)(v269 + 768);
        uint64_t v236 = *(void *)(v269 + 760);
        uint64_t v237 = *(void *)(v269 + 840);
        uint64_t v231 = *(void *)(v269 + 824);
        uint64_t v232 = *(void *)(v269 + 744);
        uint64_t v107 = *(void **)(v269 + 704);
        long long v108 = v250[1];
        _OWORD *v238 = *v250;
        v238[1] = v108;
        v238[2] = v250[2];
        uint64_t v109 = v107[3];
        uint64_t v110 = v107[4];
        char v230 = *(unsigned char *)(v269 + 1228);
        sub_10001CD44(v107, v109);
        uint64_t v111 = *(void (**)(uint64_t, uint64_t))(v110 + 184);
        uint64_t v235 = v102;
        uint64_t v112 = v110;
        uint64_t v2 = v269;
        v111(v109, v112);
        sub_1006DD094(v230);
        sub_1008B2794(v105, v78, v104);
        (*(void (**)(char *, uint64_t))(v231 + 8))(v105, v233);
        (*(void (**)(char *, uint64_t, uint64_t))(v234 + 16))((char *)v106 + *(int *)(v232 + 20), v104, v237);
        *uint64_t v106 = v78;
        unint64_t v113 = (_OWORD *)((char *)v106 + *(int *)(v232 + 24));
        long long v115 = v238[1];
        long long v114 = v238[2];
        *unint64_t v113 = *v238;
        v113[1] = v115;
        v113[2] = v114;
        sub_1006E0628((uint64_t)v106, v236, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        unint64_t v116 = *(void *)(v269 + 688);
        sub_100037A38(v100, v101);
        sub_1000361E0(v242, v241);
        sub_100037A38(v235, v243);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v116 = sub_100A6F46C(0, *(void *)(v116 + 16) + 1, 1, v116);
        }
        uid_t v74 = &type metadata for SecondaryIndex;
        unint64_t v118 = *(void *)(v116 + 16);
        unint64_t v117 = *(void *)(v116 + 24);
        uint64_t v51 = v252;
        unint64_t v1 = v254;
        uint64_t v73 = v246;
        if (v118 >= v117 >> 1) {
          unint64_t v116 = sub_100A6F46C(v117 > 1, v118 + 1, 1, v116);
        }
        uint64_t v119 = *(void *)(v269 + 760);
        uint64_t v120 = *(void *)(v269 + 752);
        *(void *)(v116 + 16) = v118 + 1;
        sub_1006E0890(v119, v116+ ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80))+ *(void *)(v120 + 72) * v118, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        *(void *)(v269 + 688) = v116;
        if (v264) {
          goto LABEL_61;
        }
        unint64_t v121 = v78 - 1;
        if (v78)
        {
          if (v121 >= v259)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v1 = sub_100A6F35C(0, v254[2] + 1, 1, v254);
            }
            unint64_t v123 = v1[2];
            unint64_t v122 = v1[3];
            if (v123 >= v122 >> 1) {
              unint64_t v1 = sub_100A6F35C((void *)(v122 > 1), v123 + 1, 1, v1);
            }
            v1[2] = v123 + 1;
            uint64_t v124 = &v1[2 * v123];
            v124[4] = v259;
            v124[5] = v121;
            uint64_t v51 = v252;
LABEL_61:
            uint64_t v125 = *(void *)(v269 + 856);
            uint64_t v126 = *(void *)(v269 + 848);
            uint64_t v127 = *(void *)(v269 + 840);
            uint64_t v128 = *(void *)(v269 + 768);
            sub_1005E30E0((uint64_t)v247);
            sub_1006E0908(v128, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v126 + 8))(v125, v127);
            unint64_t v76 = 0;
            char v75 = 1;
            if ((void *)v78 != v255) {
              goto LABEL_30;
            }
            swift_bridgeObjectRelease();
            goto LABEL_72;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_123;
      }
      char v75 = 0;
      unint64_t v76 = v259;
      if (v264) {
        unint64_t v76 = v78;
      }
      uint64_t v51 = v252;
      unint64_t v1 = v254;
      uint64_t v73 = v246;
      uid_t v74 = &type metadata for SecondaryIndex;
      if ((void *)v78 == v255)
      {
        swift_bridgeObjectRelease();
        goto LABEL_67;
      }
    }
    uint64_t v82 = *(void *)(v2 + 1016);
    uint64_t v83 = *(void *)(v2 + 992);
    uint64_t v84 = *(void *)(v2 + 984);
    v81(v84, 0, 1, v83);
    sub_1006E0890(v84, v82, type metadata accessor for SharedBeaconRecord);
    uint64_t v85 = *(int *)(v83 + 64);
    *(_DWORD *)(v2 + 1224) = v85;
    int v86 = *(unsigned __int8 *)(v82 + v85);
    if (v86 != 4 && v86 != 2)
    {
      sub_1006E0908(*(void *)(v2 + 1016), type metadata accessor for SharedBeaconRecord);
      goto LABEL_39;
    }
    if (*(unsigned char *)(v2 + 1228) != 2)
    {
      if (*(unsigned char *)(v2 + 1228))
      {
        *(void *)(v2 + 464) = &type metadata for SecondaryIndex;
        unint64_t v206 = sub_1001A15EC();
        *(void *)(v2 + 472) = v206;
        *(void *)(v2 + 440) = v78;
LABEL_116:
        *(void *)(v2 + 1152) = 0xF000000000000000;
        *(void *)(v2 + 1144) = 0;
        BOOL v221 = *(void **)(v2 + 704);
        unint64_t v222 = sub_10001CD44(v239, (uint64_t)v74);
        uint64_t v223 = (void *)v2;
        uint64_t v225 = v221[3];
        uint64_t v224 = v221[4];
        sub_10001CD44(v221, v225);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v224 + 8) + 8) + 32))(v225);
        uid_t v226 = getuid();
        sub_100DC5FC0(v226);
        uint64_t v227 = (void *)swift_task_alloc();
        v223[145] = v227;
        void *v227 = v223;
        v227[1] = sub_1006DAC04;
        uint64_t v228 = v223[118];
        uint64_t v229 = v223[117];
        return sub_1006495B0(v229, v228, (uint64_t)v222, (uint64_t)v74, v206);
      }
      uint64_t v194 = *(void *)(v2 + 1016);
      uint64_t v195 = *(void *)(v2 + 1008);
      uint64_t v196 = *(void *)(v2 + 992);
      *(void *)(v2 + 464) = &type metadata for PrimaryIndex;
      *(void *)(v2 + 472) = sub_1001A1640();
      *(void *)(v2 + 440) = v78;
      uint64_t v197 = *(void *)(v194 + *(int *)(v196 + 44));
      sub_1006E0628(v194, v195, type metadata accessor for SharedBeaconRecord);
      uint64_t v53 = *(void *)(v2 + 1008);
      if (v197 != -1)
      {
        uint64_t v198 = *(void *)(v53 + *(int *)(*(void *)(v2 + 992) + 48));
        sub_1006E0908(v53, type metadata accessor for SharedBeaconRecord);
        if (v198 != -1)
        {
          uint64_t v199 = *(void **)(v2 + 704);
          uint64_t v201 = v199[3];
          uint64_t v200 = v199[4];
          sub_10001CD44(v199, v201);
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v200 + 8) + 8) + 32))(v201);
          uid_t v202 = getuid();
          sub_100DC5FC0(v202);
          uint64_t v203 = (void *)swift_task_alloc();
          *(void *)(v2 + 1096) = v203;
          *uint64_t v203 = v2;
          v203[1] = sub_1006DA77C;
          uint64_t v204 = *(void *)(v2 + 976);
          uint64_t v205 = *(void *)(v2 + 968);
          return sub_10064A57C(v205, v204, v78);
        }
        goto LABEL_110;
      }
LABEL_109:
      sub_1006E0908(v53, type metadata accessor for SharedBeaconRecord);
LABEL_110:
      if (qword_101636888 != -1) {
        swift_once();
      }
      uint64_t v207 = *(void *)(v2 + 704);
      uint64_t v208 = type metadata accessor for Logger();
      sub_100010324(v208, (uint64_t)qword_10170D788);
      sub_10001D010(v207, (uint64_t)v73);
      Swift::Int v209 = Logger.logObject.getter();
      os_log_type_t v210 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v209, v210))
      {
        uint64_t v211 = *(void *)(v2 + 960);
        uint64_t v212 = *(void *)(v2 + 888);
        uint64_t v213 = *(void *)(v269 + 880);
        uint64_t v214 = swift_slowAlloc();
        v270[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v214 = 141558275;
        *(void *)(v269 + 648) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v214 + 12) = 2081;
        uint64_t v215 = *(void *)(v269 + 384);
        uint64_t v216 = *(void *)(v269 + 392);
        sub_10001CD44(v73, v215);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v216 + 8) + 8) + 32))(v215);
        sub_10028B80C();
        uint64_t v217 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v219 = v218;
        uint64_t v220 = v213;
        uint64_t v2 = v269;
        (*(void (**)(uint64_t, uint64_t))(v212 + 8))(v211, v220);
        *(void *)(v269 + 656) = sub_1008FA0F0(v217, v219, v270);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v73);
        _os_log_impl((void *)&_mh_execute_header, v209, v210, "Skipping connection keys fetching: %{private,mask.hash}s.", (uint8_t *)v214, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v73);
      }

      uid_t v74 = *(ValueMetadata **)(v2 + 464);
      unint64_t v206 = *(void *)(v2 + 472);
      goto LABEL_116;
    }
    uint64_t v53 = sub_1006E0908(*(void *)(v2 + 1016), type metadata accessor for SharedBeaconRecord);
    if (*(void *)(v2 + 1072) != *(void *)(v2 + 720)) {
      continue;
    }
    break;
  }
LABEL_26:
  int v72 = v265[1];
  swift_bridgeObjectRelease();
  if (v72 == 1)
  {
    unint64_t v1 = *(void **)(v2 + 1080);
    goto LABEL_72;
  }
  unint64_t v76 = *(void *)(v2 + 1064);
LABEL_67:
  if (v76 > *(void *)(v2 + 720))
  {
    __break(1u);
  }
  else
  {
    char v129 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v1 = *(void **)(v2 + 1080);
    if (v129) {
      goto LABEL_69;
    }
  }
  unint64_t v1 = sub_100A6F35C(0, v1[2] + 1, 1, v1);
LABEL_69:
  unint64_t v131 = v1[2];
  unint64_t v130 = v1[3];
  if (v131 >= v130 >> 1) {
    unint64_t v1 = sub_100A6F35C((void *)(v130 > 1), v131 + 1, 1, v1);
  }
  uint64_t v132 = *(void *)(v2 + 720);
  v1[2] = v131 + 1;
  uint64_t v133 = &v1[2 * v131];
  v133[4] = v76;
  v133[5] = v132;
LABEL_72:
  if (!*(void *)(*(void *)(v2 + 688) + 16))
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    if (qword_101636DC8 != -1) {
      swift_once();
    }
    unint64_t v152 = 0xD000000000000010;
    uint64_t v153 = *(void *)(v2 + 904);
    uint64_t v154 = *(void *)(v2 + 888);
    uint64_t v267 = *(void *)(v2 + 880);
    uint64_t v155 = *(void **)(v2 + 728);
    int v156 = *(unsigned __int8 *)(v2 + 1228);
    uid_t v157 = *(void **)(v2 + 704);
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v158 = swift_allocObject();
    *(_OWORD *)(v158 + 16) = xmmword_10134BFA0;
    *(void *)(v2 + 624) = *v155;
    sub_10000588C(&qword_10164B810);
    uint64_t v159 = String.init<A>(describing:)();
    uint64_t v161 = v160;
    *(void *)(v158 + 56) = &type metadata for String;
    unint64_t v162 = sub_10000B4CC();
    *(void *)(v158 + 32) = v159;
    *(void *)(v158 + 40) = v161;
    *(void *)(v158 + 96) = &type metadata for String;
    *(void *)(v158 + 104) = v162;
    *(void *)(v158 + 64) = v162;
    *(void *)(v158 + 72) = 0xD00000000000004DLL;
    *(void *)(v158 + 80) = 0x8000000101404720;
    uint64_t v164 = v157[3];
    uint64_t v163 = v157[4];
    sub_10001CD44(v157, v164);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v163 + 8) + 8) + 32))(v164);
    uint64_t v165 = UUID.uuidString.getter();
    uint64_t v167 = v166;
    (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v153, v267);
    *(void *)(v158 + 136) = &type metadata for String;
    *(void *)(v158 + 144) = v162;
    *(void *)(v158 + 112) = v165;
    *(void *)(v158 + 120) = v167;
    if (v156)
    {
      if (v156 == 1)
      {
        unint64_t v152 = 0x61646E6F6365732ELL;
        unint64_t v168 = 0xEA00000000007972;
      }
      else
      {
        unint64_t v168 = 0x80000001013F28C0;
      }
    }
    else
    {
      unint64_t v152 = 0x7972616D6972702ELL;
      unint64_t v168 = 0xE800000000000000;
    }
    uint64_t v188 = *(void *)(v269 + 720);
    uint64_t v189 = *(void *)(v269 + 712);
    *(void *)(v158 + 176) = &type metadata for String;
    *(void *)(v158 + 184) = v162;
    uint64_t v2 = v269;
    *(void *)(v158 + 152) = v152;
    *(void *)(v158 + 160) = v168;
    *(void *)(v158 + 216) = &type metadata for UInt64;
    *(void *)(v158 + 224) = &protocol witness table for UInt64;
    *(void *)(v158 + 192) = v189;
    *(void *)(v158 + 256) = &type metadata for UInt64;
    *(void *)(v158 + 264) = &protocol witness table for UInt64;
    *(void *)(v158 + 232) = v188;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v251 = 0;
    uint64_t v253 = 0;
    int v71 = 3;
    goto LABEL_97;
  }
  if (!v1[2])
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    if (qword_101636DC8 != -1) {
LABEL_123:
    }
      swift_once();
    unint64_t v169 = 0xD000000000000010;
    uint64_t v170 = *(void *)(v2 + 920);
    uint64_t v171 = *(void *)(v2 + 888);
    uint64_t v268 = *(void *)(v2 + 880);
    uint64_t v172 = *(void **)(v2 + 728);
    int v173 = *(unsigned __int8 *)(v2 + 1228);
    uint64_t v174 = *(void **)(v2 + 704);
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v175 = swift_allocObject();
    *(_OWORD *)(v175 + 16) = xmmword_10134BFA0;
    *(void *)(v2 + 640) = *v172;
    sub_10000588C(&qword_10164B810);
    uint64_t v176 = String.init<A>(describing:)();
    uint64_t v178 = v177;
    *(void *)(v175 + 56) = &type metadata for String;
    unint64_t v179 = sub_10000B4CC();
    *(void *)(v175 + 32) = v176;
    *(void *)(v175 + 40) = v178;
    *(void *)(v175 + 96) = &type metadata for String;
    *(void *)(v175 + 104) = v179;
    *(void *)(v175 + 64) = v179;
    *(void *)(v175 + 72) = 0xD00000000000004DLL;
    *(void *)(v175 + 80) = 0x8000000101404720;
    uint64_t v181 = v174[3];
    uint64_t v180 = v174[4];
    sub_10001CD44(v174, v181);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v180 + 8) + 8) + 32))(v181);
    uint64_t v182 = UUID.uuidString.getter();
    uint64_t v184 = v183;
    (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v170, v268);
    *(void *)(v175 + 136) = &type metadata for String;
    *(void *)(v175 + 144) = v179;
    *(void *)(v175 + 112) = v182;
    *(void *)(v175 + 120) = v184;
    if (v173)
    {
      if (v173 == 1)
      {
        unint64_t v169 = 0x61646E6F6365732ELL;
        unint64_t v185 = 0xEA00000000007972;
      }
      else
      {
        unint64_t v185 = 0x80000001013F28C0;
      }
    }
    else
    {
      unint64_t v169 = 0x7972616D6972702ELL;
      unint64_t v185 = 0xE800000000000000;
    }
    uint64_t v190 = *(void *)(v269 + 720);
    uint64_t v191 = *(void *)(v269 + 712);
    *(void *)(v175 + 176) = &type metadata for String;
    *(void *)(v175 + 184) = v179;
    uint64_t v2 = v269;
    *(void *)(v175 + 152) = v169;
    *(void *)(v175 + 160) = v185;
    *(void *)(v175 + 216) = &type metadata for UInt64;
    *(void *)(v175 + 224) = &protocol witness table for UInt64;
    *(void *)(v175 + 192) = v191;
    *(void *)(v175 + 256) = &type metadata for UInt64;
    *(void *)(v175 + 264) = &protocol witness table for UInt64;
    *(void *)(v175 + 232) = v190;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v251 = *(void *)(v269 + 688);
    uint64_t v253 = 0;
    int v71 = 1;
    goto LABEL_97;
  }
  uint64_t v253 = v1;
  static os_log_type_t.error.getter();
  if (qword_101636DC8 != -1) {
    swift_once();
  }
  unint64_t v134 = 0xD000000000000010;
  uint64_t v135 = *(void *)(v2 + 912);
  uint64_t v136 = *(void *)(v2 + 888);
  uint64_t v266 = *(void *)(v2 + 880);
  uint64_t v137 = *(void **)(v2 + 728);
  int v138 = *(unsigned __int8 *)(v2 + 1228);
  uint64_t v139 = *(void **)(v2 + 704);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v140 = swift_allocObject();
  *(_OWORD *)(v140 + 16) = xmmword_101347580;
  *(void *)(v2 + 664) = *v137;
  sub_10000588C(&qword_10164B810);
  uint64_t v141 = String.init<A>(describing:)();
  uint64_t v143 = v142;
  *(void *)(v140 + 56) = &type metadata for String;
  unint64_t v144 = sub_10000B4CC();
  *(void *)(v140 + 32) = v141;
  *(void *)(v140 + 40) = v143;
  *(void *)(v140 + 96) = &type metadata for String;
  *(void *)(v140 + 104) = v144;
  *(void *)(v140 + 64) = v144;
  *(void *)(v140 + 72) = 0xD00000000000004DLL;
  *(void *)(v140 + 80) = 0x8000000101404720;
  uint64_t v145 = v139[3];
  uint64_t v146 = v139[4];
  sub_10001CD44(v139, v145);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v146 + 8) + 8) + 32))(v145);
  uint64_t v147 = UUID.uuidString.getter();
  uint64_t v149 = v148;
  (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v135, v266);
  *(void *)(v140 + 136) = &type metadata for String;
  *(void *)(v140 + 144) = v144;
  *(void *)(v140 + 112) = v147;
  *(void *)(v140 + 120) = v149;
  if (v138)
  {
    uint64_t v150 = v253;
    if (v138 == 1)
    {
      unint64_t v134 = 0x61646E6F6365732ELL;
      unint64_t v151 = 0xEA00000000007972;
    }
    else
    {
      unint64_t v151 = 0x80000001013F28C0;
    }
  }
  else
  {
    unint64_t v134 = 0x7972616D6972702ELL;
    unint64_t v151 = 0xE800000000000000;
    uint64_t v150 = v253;
  }
  uint64_t v186 = *(void *)(v269 + 720);
  uint64_t v187 = *(void *)(v269 + 712);
  *(void *)(v140 + 176) = &type metadata for String;
  *(void *)(v140 + 184) = v144;
  uint64_t v2 = v269;
  *(void *)(v140 + 152) = v134;
  *(void *)(v140 + 160) = v151;
  *(void *)(v140 + 216) = &type metadata for UInt64;
  *(void *)(v140 + 224) = &protocol witness table for UInt64;
  *(void *)(v140 + 192) = v187;
  *(void *)(v140 + 256) = &type metadata for UInt64;
  *(void *)(v140 + 264) = &protocol witness table for UInt64;
  *(void *)(v140 + 232) = v186;
  *(void *)(v140 + 296) = sub_10000588C(&qword_10164B818);
  *(void *)(v140 + 304) = sub_1006E04A4();
  *(void *)(v140 + 272) = v150;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  unsigned int v240 = 0;
  uint64_t v251 = *(void *)(v269 + 688);
LABEL_98:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v192 = *(uint64_t (**)(uint64_t, void *, void))(v2 + 8);
  return v192(v251, v253, v240);
}

uint64_t sub_1006DCA9C()
{
  uint64_t v29 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[88];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170D788);
  sub_10001D010(v1, (uint64_t)(v0 + 50));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t type = v4;
    char v26 = (void (*)(uint64_t, uint64_t))v0[151];
    uint64_t v5 = v0[120];
    uint64_t v6 = v0[110];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558531;
    v0[75] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    uint64_t v9 = v0[53];
    uint64_t v8 = v0[54];
    sub_10001CD44(v0 + 50, v9);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v8 + 8) + 8) + 32))(v9);
    sub_10028B80C();
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v12 = v11;
    v26(v5, v6);
    v0[76] = sub_1008FA0F0(v10, v12, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 50));
    *(_WORD *)(v7 + 22) = 2080;
    swift_getErrorValue();
    uint64_t v13 = Error.localizedDescription.getter();
    v0[79] = sub_1008FA0F0(v13, v14, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, type, "Error getting connectionKeys for beacon: %{private,mask.hash}s %s.", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 50));
    swift_errorRelease();
    swift_errorRelease();
  }
  v0[144] = 0xF000000000000000;
  v0[143] = 0;
  unint64_t v15 = (void *)v0[88];
  uint64_t v16 = v0[58];
  uint64_t v17 = v0[59];
  uint64_t v18 = sub_10001CD44(v0 + 55, v16);
  uint64_t v19 = v15[3];
  uint64_t v20 = v15[4];
  sub_10001CD44(v15, v19);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v20 + 8) + 8) + 32))(v19);
  uid_t v21 = getuid();
  sub_100DC5FC0(v21);
  uint64_t v22 = (void *)swift_task_alloc();
  v0[145] = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_1006DAC04;
  uint64_t v23 = v0[118];
  uint64_t v24 = v0[117];
  return sub_1006495B0(v24, v23, (uint64_t)v18, v16, v17);
}

uint64_t sub_1006DCEA8()
{
  uint64_t v1 = v0[127];
  sub_100037A24(v0[143], v0[144]);
  sub_1006E0908(v1, type metadata accessor for SharedBeaconRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 55));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1006DD094(char a1)
{
  if (a1)
  {
    if (a1 != 1) {
      return -1;
    }
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v1 = sub_1010AB688(v4);
  }
  else
  {
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v1 = sub_1010AAFA8(v4);
  }
  uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  if (v2 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return -1;
  }
  return v2;
}

uint64_t sub_1006DD214(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 32) = v4;
  *(unsigned char *)(v5 + 49) = a4;
  *(unsigned char *)(v5 + 48) = a3;
  *(void *)(v5 + 16) = a1;
  return _swift_task_switch(sub_1006DD240, 0, 0);
}

void sub_1006DD240()
{
  if (*(unsigned char *)(v0 + 48))
  {
    if (*(unsigned char *)(v0 + 48) == 2)
    {
      sub_1006E0968();
      swift_allocError();
      *uint64_t v1 = 0;
      swift_willThrow();
      uint64_t v2 = *(void (**)(void))(v0 + 8);
      v2();
      return;
    }
  }
  else
  {
    unint64_t v3 = *(void *)(v0 + 24);
    if (!v3)
    {
      unint64_t v5 = 0;
      unint64_t v7 = 0;
      goto LABEL_15;
    }
    if (!is_mul_ok(v3, 0x60uLL))
    {
      __break(1u);
      return;
    }
    uint64_t v4 = 96 * v3;
    unint64_t v5 = v4 - 1;
    unint64_t v6 = v4 - 96;
    if (v6 <= 1) {
      unint64_t v7 = 1;
    }
    else {
      unint64_t v7 = v6;
    }
    if (v5 >= v7) {
      goto LABEL_15;
    }
    __break(1u);
  }
  unint64_t v5 = *(void *)(v0 + 24);
  unint64_t v7 = v5;
LABEL_15:
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1006DD3B8;
  char v9 = *(unsigned char *)(v0 + 49);
  uint64_t v10 = *(void *)(v0 + 16);
  char v11 = *(unsigned char *)(v0 + 48);
  sub_1006D8A68(v10, v7, v5, v11, v9, 0);
}

uint64_t sub_1006DD3B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *v4;
  uint64_t v8 = swift_task_dealloc();
  char v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 8);
  if (!v3)
  {
    uint64_t v8 = a1;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
  }
  return v11(v8, v9, v10);
}

uint64_t sub_1006DD4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, int a7, unint64_t *a8)
{
  int v37 = a8;
  int v36 = a7;
  uint64_t v11 = type metadata accessor for TimeBasedKey();
  uint64_t v12 = v11 - 8;
  uint64_t v38 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v15 = &v35[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  uint64_t v17 = &v35[-v16];
  uint64_t v18 = type metadata accessor for DateInterval();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uid_t v21 = &v35[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = (char *)(a5 + *(int *)(type metadata accessor for OwnedBeaconRecord() + 32));
  uint64_t v23 = *a6;
  sub_1006DD094(v36);
  uint64_t v24 = v23;
  uint64_t v25 = v37;
  sub_1008B2794(v22, v24, (uint64_t)v21);
  uint64_t v26 = *a6;
  (*(void (**)(char *, unsigned char *, uint64_t))(v19 + 16))(&v17[*(int *)(v12 + 28)], v21, v18);
  *(void *)uint64_t v17 = v26;
  uint64_t v27 = &v17[*(int *)(v12 + 32)];
  long long v28 = *((_OWORD *)a4 + 2);
  long long v29 = *(_OWORD *)a4;
  *((_OWORD *)v27 + 1) = *((_OWORD *)a4 + 1);
  *((_OWORD *)v27 + 2) = v28;
  *(_OWORD *)uint64_t v27 = v29;
  sub_1006E0628((uint64_t)v17, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
  unint64_t v30 = *v25;
  sub_1001D7A60(a4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v25 = v30;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v30 = sub_100A6F46C(0, *(void *)(v30 + 16) + 1, 1, v30);
    *uint64_t v25 = v30;
  }
  unint64_t v33 = *(void *)(v30 + 16);
  unint64_t v32 = *(void *)(v30 + 24);
  if (v33 >= v32 >> 1)
  {
    unint64_t v30 = sub_100A6F46C(v32 > 1, v33 + 1, 1, v30);
    *uint64_t v25 = v30;
  }
  *(void *)(v30 + 16) = v33 + 1;
  sub_1006E0890((uint64_t)v15, v30+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(void *)(v38 + 72) * v33, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
  sub_1006E0908((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v19 + 8))(v21, v18);
  if (*a6 == -1) {
    __break(1u);
  }
  else {
    ++*a6;
  }
  return result;
}

uint64_t sub_1006DD7C4@<X0>(char a1@<W1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v51 = a2;
  uint64_t v55 = a3;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v54 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v47 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  unint64_t v15 = (char *)&v47 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v47 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uid_t v21 = (char *)&v47 - v20;
  __chkstk_darwin(v19);
  uint64_t v52 = (char *)&v47 - v22;
  uint64_t v53 = v21;
  if (a1)
  {
    uint64_t v48 = v4;
    uint64_t v50 = v12;
    DateInterval.start.getter();
    Date.timeIntervalSince(_:)();
    if (v23 > 0.0) {
      double v24 = v23 * 0.0002;
    }
    else {
      double v24 = 0.0;
    }
    uint64_t v49 = v7;
    uint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
    v25(v18, v6);
    DateInterval.end.getter();
    Date.timeIntervalSince(_:)();
    if (v26 > 0.0) {
      double v27 = v26 * 0.0002;
    }
    else {
      double v27 = 0.0;
    }
    v25(v15, v6);
    DateInterval.start.getter();
    uint64_t v12 = v50;
    Date.addingTimeInterval(_:)();
    v25(v12, v6);
    DateInterval.end.getter();
    Date.addingTimeInterval(_:)();
    v25(v12, v6);
    static os_log_type_t.default.getter();
    if (qword_101636DC8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_10134CDE0;
    uint64_t v56 = *v48;
    sub_10000588C(&qword_10164B810);
    uint64_t v29 = String.init<A>(describing:)();
    uint64_t v31 = v30;
    *(void *)(v28 + 56) = &type metadata for String;
    unint64_t v32 = sub_10000B4CC();
    *(void *)(v28 + 32) = v29;
    *(void *)(v28 + 40) = v31;
    *(void *)(v28 + 96) = &type metadata for String;
    *(void *)(v28 + 104) = v32;
    *(void *)(v28 + 64) = v32;
    *(void *)(v28 + 72) = 0xD000000000000053;
    *(void *)(v28 + 80) = 0x8000000101404660;
    uint64_t v33 = UUID.uuidString.getter();
    *(void *)(v28 + 136) = &type metadata for String;
    *(void *)(v28 + 144) = v32;
    *(void *)(v28 + 112) = v33;
    *(void *)(v28 + 120) = v34;
    *(void *)(v28 + 176) = &type metadata for Double;
    *(void *)(v28 + 184) = &protocol witness table for Double;
    *(double *)(v28 + 152) = v24;
    *(void *)(v28 + 216) = &type metadata for Double;
    *(void *)(v28 + 224) = &protocol witness table for Double;
    *(double *)(v28 + 192) = v27;
    os_log(_:dso:log:_:_:)();
    uint64_t v7 = v49;
  }
  else
  {
    DateInterval.start.getter();
    DateInterval.end.getter();
    static os_log_type_t.default.getter();
    if (qword_101636DC8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_101347500;
    uint64_t v56 = *v4;
    sub_10000588C(&qword_10164B810);
    uint64_t v36 = String.init<A>(describing:)();
    uint64_t v38 = v37;
    *(void *)(v35 + 56) = &type metadata for String;
    unint64_t v39 = sub_10000B4CC();
    *(void *)(v35 + 32) = v36;
    *(void *)(v35 + 40) = v38;
    *(void *)(v35 + 96) = &type metadata for String;
    *(void *)(v35 + 104) = v39;
    *(void *)(v35 + 64) = v39;
    *(void *)(v35 + 72) = 0xD000000000000053;
    *(void *)(v35 + 80) = 0x8000000101404660;
    uint64_t v40 = UUID.uuidString.getter();
    *(void *)(v35 + 136) = &type metadata for String;
    *(void *)(v35 + 144) = v39;
    *(void *)(v35 + 112) = v40;
    *(void *)(v35 + 120) = v41;
    os_log(_:dso:log:_:_:)();
  }
  swift_bridgeObjectRelease();
  unint64_t v42 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v43 = v52;
  v42(v12, v52, v6);
  uint64_t v44 = v53;
  v42(v54, v53, v6);
  DateInterval.init(start:end:)();
  uint64_t v45 = *(void (**)(char *, uint64_t))(v7 + 8);
  v45(v44, v6);
  return ((uint64_t (*)(char *, uint64_t))v45)(v43, v6);
}

uint64_t sub_1006DDD60(uint64_t a1, uint64_t a2)
{
  v2[15] = a1;
  v2[16] = a2;
  uint64_t v3 = type metadata accessor for Date();
  v2[17] = v3;
  v2[18] = *(void *)(v3 - 8);
  v2[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[20] = v4;
  v2[21] = *(void *)(v4 - 8);
  v2[22] = swift_task_alloc();
  return _swift_task_switch(sub_1006DDE7C, 0, 0);
}

uint64_t sub_1006DDE7C()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v2;
    void *v2 = v0;
    v2[1] = sub_1006DDFB0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006DDFB0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1006DE0B0, 0, 0);
}

uint64_t sub_1006DE0B0()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[24])
  {
    uint64_t v2 = (void *)v0[16];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = v2[3];
    uint64_t v4 = v2[4];
    sub_10001CD44(v2, v3);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 8) + 8) + 32))(v3);
    uint64_t v5 = v2[3];
    uint64_t v6 = v2[4];
    sub_10001CD44(v2, v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 184))(v5, v6);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[25] = v7;
    void *v7 = v0;
    v7[1] = sub_1006DE288;
    uint64_t v8 = v0[22];
    uint64_t v9 = v0[19];
    uint64_t v10 = v0[15];
    return sub_1011044F4(v10, v8, v9);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v12 = 0xD000000000000017;
    v12[1] = 0x80000001013FB7A0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_1006DE288()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  uint64_t v2 = *(void *)(*(void *)v0 + 168);
  uint64_t v3 = *(void *)(*(void *)v0 + 160);
  uint64_t v4 = *(void *)(*(void *)v0 + 152);
  uint64_t v5 = *(void *)(*(void *)v0 + 144);
  uint64_t v6 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1006DE43C, 0, 0);
}

uint64_t sub_1006DE43C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1006DE4B8(uint64_t a1, uint64_t a2)
{
  v2[15] = a1;
  v2[16] = a2;
  uint64_t v3 = type metadata accessor for Date();
  v2[17] = v3;
  v2[18] = *(void *)(v3 - 8);
  v2[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[20] = v4;
  v2[21] = *(void *)(v4 - 8);
  v2[22] = swift_task_alloc();
  return _swift_task_switch(sub_1006DE5D4, 0, 0);
}

uint64_t sub_1006DE5D4()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v2;
    void *v2 = v0;
    v2[1] = sub_1006DE708;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006DE708(uint64_t a1)
{
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1006DE808, 0, 0);
}

uint64_t sub_1006DE808()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[24])
  {
    uint64_t v2 = (void *)v0[16];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = v2[3];
    uint64_t v4 = v2[4];
    sub_10001CD44(v2, v3);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 8) + 8) + 32))(v3);
    uint64_t v5 = v2[3];
    uint64_t v6 = v2[4];
    sub_10001CD44(v2, v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 184))(v5, v6);
    uint64_t v7 = v2[3];
    uint64_t v8 = v2[4];
    sub_10001CD44(v2, v7);
    char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 112))(v7, v8);
    uint64_t v10 = (void *)swift_task_alloc();
    v0[25] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_1006DEA18;
    uint64_t v11 = v0[22];
    uint64_t v12 = v0[19];
    uint64_t v13 = v0[15];
    return sub_101103F50(v13, v11, v12, v9 & 1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *unint64_t v15 = 0xD000000000000017;
    v15[1] = 0x80000001013FB7A0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t sub_1006DEA18()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  uint64_t v2 = *(void *)(*(void *)v0 + 168);
  uint64_t v3 = *(void *)(*(void *)v0 + 160);
  uint64_t v4 = *(void *)(*(void *)v0 + 152);
  uint64_t v5 = *(void *)(*(void *)v0 + 144);
  uint64_t v6 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1006E1448, 0, 0);
}

uint64_t sub_1006DEBCC(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Date();
  unint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (void (**)(char *, uint64_t, char *))((char *)&v56 - v14);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v69 = *(void (***)(char *, uint64_t, char *))(v16 - 8);
  uint64_t v70 = (char *)v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v60 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v68 = (char *)&v56 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  __chkstk_darwin(v21);
  double v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = v24;
  uint64_t v25 = a1;
  uint64_t v27 = v26;
  (*(void (**)(char *, uint64_t, unint64_t))(v24 + 16))(v23, v25, a4);
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a5 + 8) + 8) + 32))(a4);
  uint64_t v28 = *(void (**)(unint64_t, uint64_t))(a5 + 184);
  uint64_t v64 = v23;
  unint64_t v66 = a4;
  v28(a4, a5);
  uint64_t v29 = *a3;
  uint64_t v30 = (uint64_t)a3 + *(int *)(sub_10000588C(&qword_10163F7B0) + 36);
  uint64_t v71 = v27;
  uint64_t v31 = sub_1008B5B84(v27, (uint64_t)v15, v30, 0);
  if ((v31 | v29) < 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v58 = v31;
  uint64_t v59 = v29;
  unint64_t v32 = v31 - v29;
  DateInterval.start.getter();
  uint64_t v33 = v71;
  unint64_t v34 = sub_1008B5B84(v71, (uint64_t)v15, (uint64_t)v13, 0);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v10 + 8);
  v35(v13, v9);
  DateInterval.end.getter();
  uint64_t v62 = v15;
  unint64_t v36 = sub_1008B5B84(v33, (uint64_t)v15, (uint64_t)v13, 0);
  unint64_t v63 = v10 + 8;
  uint64_t v61 = (void (*)(void (**)(char *, uint64_t, char *), uint64_t))v35;
  v35(v13, v9);
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  unint64_t v67 = v32;
  if ((v32 & 0x8000000000000000) == 0 && v32 >= v34)
  {
    unint64_t v15 = v69;
    uint64_t v13 = v70;
    if (qword_101636DC0 != -1) {
      goto LABEL_38;
    }
    while (1)
    {
      uint64_t v38 = type metadata accessor for Logger();
      sub_100010324(v38, (uint64_t)qword_10170E588);
      unint64_t v39 = v60;
      v15[2](v60, v71, v13);
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = swift_slowAlloc();
        uint64_t v57 = v9;
        uint64_t v43 = v42;
        uint64_t v44 = swift_slowAlloc();
        uint64_t v56 = v44;
        *(_DWORD *)uint64_t v43 = 141558787;
        uint64_t v72 = 1752392040;
        uint64_t v73 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v43 + 12) = 2081;
        sub_10028B80C();
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v72 = sub_1008FA0F0(v45, v46, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        ((void (*)(char *, char *))v15[1])(v39, v70);
        *(_WORD *)(v43 + 22) = 2048;
        uint64_t v72 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v43 + 32) = 2048;
        uint64_t v13 = v70;
        unint64_t v32 = v67;
        uint64_t v72 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "        Buckets clamped for beacon %{private,mask.hash}s,starting secondary index %llu <= factor %lld -- clamping to 1.", (uint8_t *)v43, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v9 = v57;
        swift_slowDealloc();
      }
      else
      {
        ((void (*)(char *, char *))v15[1])(v39, v13);

        unint64_t v32 = v67;
      }
      unint64_t v10 = 1;
      if (v58 == v59)
      {
        uint64_t v27 = (uint64_t)v68;
        p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
      }
      else
      {
        uint64_t v27 = (uint64_t)v68;
        p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
        if (v36 < v32)
        {
          if (v36 <= 1) {
            a4 = 1;
          }
          else {
            a4 = v36;
          }
          unint64_t v10 = 1;
          goto LABEL_29;
        }
      }
LABEL_23:
      if ((v36 & 0x8000000000000000) != 0) {
        goto LABEL_40;
      }
      unint64_t v47 = v36 - v32;
      if (__OFSUB__(v36, v32)) {
        goto LABEL_42;
      }
      if ((v47 & 0x8000000000000000) != 0) {
        goto LABEL_43;
      }
      if (v10 <= v47) {
        a4 = v36 - v32;
      }
      else {
        a4 = v10;
      }
LABEL_29:
      if (*((void *)p_ivar_base_size + 440) != -1) {
LABEL_36:
      }
        swift_once();
      uint64_t v48 = type metadata accessor for Logger();
      sub_100010324(v48, (uint64_t)qword_10170E588);
      v15[2]((char *)v27, v71, v13);
      unint64_t v36 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.default.getter();
      unint64_t v34 = v49;
      if (os_log_type_enabled((os_log_t)v36, v49))
      {
        uint64_t v50 = swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        uint64_t v57 = v9;
        uint64_t v69 = (void (**)(char *, uint64_t, char *))v51;
        *(_DWORD *)uint64_t v50 = 141559043;
        uint64_t v72 = 1752392040;
        uint64_t v73 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v50 + 12) = 2081;
        sub_10028B80C();
        uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v72 = sub_1008FA0F0(v52, v53, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v54 = v15[1];
        unint64_t v15 = (void (**)(char *, uint64_t, char *))((unint64_t)(v15 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
        ((void (*)(uint64_t, char *))v54)(v27, v70);
        *(_WORD *)(v50 + 22) = 2048;
        uint64_t v72 = v10;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v50 + 32) = 2048;
        uint64_t v72 = a4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v50 + 42) = 2048;
        uint64_t v72 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v36, (os_log_type_t)v34, "        Buckets for beacon %{private,mask.hash}s,secondary index %llu - %llu (factor %lld).", (uint8_t *)v50, 0x34u);
        swift_arrayDestroy();
        uint64_t v9 = v57;
        swift_slowDealloc();
        uint64_t v13 = v70;
        swift_slowDealloc();
      }
      else
      {
        uint64_t v54 = v15[1];
        unint64_t v15 = (void (**)(char *, uint64_t, char *))((unint64_t)(v15 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
        ((void (*)(uint64_t, char *))v54)(v27, v13);
      }

      v61(v62, v9);
      ((void (*)(uint64_t, char *))v54)(v71, v13);
      if (a4 >= v10)
      {
        (*(void (**)(char *, unint64_t))(v65 + 8))(v64, v66);
        return v10;
      }
      __break(1u);
LABEL_38:
      swift_once();
    }
  }
  unint64_t v15 = v69;
  uint64_t v13 = v70;
  if ((v34 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  unint64_t v10 = v34 - v32;
  if (__OFSUB__(v34, v32)) {
    goto LABEL_41;
  }
  if ((v10 & 0x8000000000000000) == 0)
  {
    uint64_t v27 = (uint64_t)v68;
    if ((uint64_t)v32 >= 1 && v36 < v32)
    {
      if (v10 <= v36) {
        a4 = v36;
      }
      else {
        a4 = v34 - v32;
      }
      goto LABEL_29;
    }
    goto LABEL_23;
  }
LABEL_43:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1006DF4C0(uint64_t a1, unint64_t a2, unint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Date();
  unint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v16 = (unint64_t)&v67 - v15;
  uint64_t v17 = type metadata accessor for UUID();
  unint64_t v78 = *(void *)(v17 - 8);
  unint64_t v79 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v70 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v77 = (char *)&v67 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = v25;
  uint64_t v26 = a1;
  uint64_t v28 = v27;
  (*(void (**)(char *, uint64_t, uint64_t *))(v25 + 16))(v24, v26, a4);
  (*(void (**)(uint64_t *))(*(void *)(*(void *)(a5 + 8) + 8) + 32))(a4);
  uint64_t v29 = *(void (**)(uint64_t *, uint64_t))(a5 + 184);
  uint64_t v72 = v24;
  uid_t v74 = a4;
  v29(a4, a5);
  unint64_t v30 = *a3;
  uint64_t v31 = (uint64_t)a3 + *(int *)(sub_10000588C(&qword_10163F7B0) + 36);
  if (v30) {
    unint64_t v32 = ~(v30 / 0x60);
  }
  else {
    unint64_t v32 = 0;
  }
  char v80 = (char *)v28;
  uint64_t v33 = sub_1008B5B84(v28, v16, v31, 1);
  if (v33 < 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  unint64_t v34 = v33 + v32;
  DateInterval.start.getter();
  uint64_t v35 = (uint64_t)v80;
  unint64_t v36 = sub_1008B5B84((uint64_t)v80, v16, (uint64_t)v14, 1);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v11 + 8);
  v11 += 8;
  uint64_t v28 = (uint64_t)v37;
  v37(v14, v10);
  DateInterval.end.getter();
  uint64_t v38 = v35;
  uint64_t v39 = v34;
  unint64_t v71 = v16;
  a2 = sub_1008B5B84(v38, v16, (uint64_t)v14, 1);
  v37(v14, v10);
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  uint64_t v75 = v34;
  uint64_t v76 = v10;
  if ((v34 & 0x8000000000000000) != 0 || v34 < v36)
  {
    a4 = (uint64_t *)v78;
    if ((v36 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_42:
      __break(1u);
    }
    else
    {
      unint64_t v16 = v36 - v39;
      if (!__OFSUB__(v36, v39))
      {
        if ((v16 & 0x8000000000000000) == 0)
        {
          if (v39 >= 1 && a2 < v39)
          {
            if (v16 <= a2) {
              unint64_t v52 = a2;
            }
            else {
              unint64_t v52 = v36 - v39;
            }
            goto LABEL_30;
          }
          goto LABEL_25;
        }
LABEL_45:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  a4 = (uint64_t *)v78;
  if (qword_101636DC0 != -1) {
    goto LABEL_40;
  }
  while (1)
  {
    uint64_t v41 = type metadata accessor for Logger();
    sub_100010324(v41, (uint64_t)qword_10170E588);
    uint64_t v42 = v70;
    unint64_t v43 = v79;
    ((void (*)(char *, char *, unint64_t))a4[2])(v70, v80, v79);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    int v46 = v45;
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      uint64_t v69 = v48;
      *(_DWORD *)uint64_t v47 = 141558787;
      uint64_t v81 = 1752392040;
      uint64_t v82 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v47 + 12) = 2081;
      LODWORD(v68) = v46;
      sub_10028B80C();
      os_log_t v67 = v44;
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v81 = sub_1008FA0F0(v49, v50, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, unint64_t))(v78 + 8))(v42, v43);
      *(_WORD *)(v47 + 22) = 2048;
      uint64_t v81 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v47 + 32) = 2048;
      uint64_t v81 = v75;
      a4 = (uint64_t *)v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v51 = v67;
      _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v68, "        Buckets clamped for beacon %{private,mask.hash}s,starting secondary index %llu <= factor %lld -- clamping to 1.", (uint8_t *)v47, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v39 = v75;
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(char *, unint64_t))a4[1])(v42, v43);
    }
    unint64_t v16 = 1;
    uint64_t v10 = v76;
    p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
    if (v39 && a2 < v39)
    {
      uint64_t v53 = a2 <= 1 ? 1 : a2;
      uint64_t v69 = v53;
      unint64_t v16 = 1;
    }
    else
    {
LABEL_25:
      if ((a2 & 0x8000000000000000) != 0) {
        goto LABEL_42;
      }
      unint64_t v52 = a2 - v39;
      if (__OFSUB__(a2, v39)) {
        goto LABEL_44;
      }
      if ((v52 & 0x8000000000000000) != 0) {
        goto LABEL_45;
      }
      if (v16 > v52) {
        unint64_t v52 = v16;
      }
LABEL_30:
      uint64_t v69 = v52;
    }
    a2 = v79;
    if (*((void *)p_ivar_base_size + 440) != -1) {
LABEL_38:
    }
      swift_once();
    uint64_t v70 = (char *)v28;
    unint64_t v78 = v11;
    uint64_t v54 = type metadata accessor for Logger();
    sub_100010324(v54, (uint64_t)qword_10170E588);
    uint64_t v55 = v77;
    ((void (*)(char *, char *, unint64_t))a4[2])(v77, v80, a2);
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.default.getter();
    uint64_t v39 = v56;
    if (os_log_type_enabled((os_log_t)v36, v56))
    {
      uint64_t v57 = swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      uint64_t v68 = v58;
      *(_DWORD *)uint64_t v57 = 141559043;
      uint64_t v81 = 1752392040;
      uint64_t v82 = v58;
      uint64_t v59 = v55;
      uint64_t v60 = a4;
      a4 = &v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v57 + 12) = 2081;
      sub_10028B80C();
      uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v81 = sub_1008FA0F0(v61, v62, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v63 = (void (*)(char *, unint64_t))v60[1];
      uint64_t v28 = (unint64_t)(v60 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v63(v59, a2);
      *(_WORD *)(v57 + 22) = 2048;
      uint64_t v81 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v57 + 32) = 2048;
      unint64_t v11 = v69;
      uint64_t v81 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v57 + 42) = 2048;
      a2 = v79;
      uint64_t v81 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v36, (os_log_type_t)v39, "        Buckets for beacon %{private,mask.hash}s,secondary index %llu - %llu (factor %lld).", (uint8_t *)v57, 0x34u);
      uint64_t v39 = v68;
      swift_arrayDestroy();
      uint64_t v10 = v76;
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v64 = v71;
    }
    else
    {
      uint64_t v65 = (void (*)(char *, unint64_t))a4[1];
      ++a4;
      unint64_t v63 = v65;
      uint64_t v28 = (unint64_t)a4 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v65(v55, a2);

      unint64_t v64 = v71;
      unint64_t v11 = v69;
    }
    ((void (*)(unint64_t, uint64_t))v70)(v64, v10);
    v63(v80, a2);
    if (v11 >= v16) {
      break;
    }
    __break(1u);
LABEL_40:
    swift_once();
  }
  (*(void (**)(char *, uint64_t *))(v73 + 8))(v72, v74);
  return v16;
}

uint64_t sub_1006DFDE0(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = v5;
  *(unsigned char *)(v6 + 66) = a5;
  *(unsigned char *)(v6 + 65) = a4;
  *(unsigned char *)(v6 + 64) = a3;
  *(void *)(v6 + 16) = a1;
  return _swift_task_switch(sub_1006DFE10, 0, 0);
}

uint64_t sub_1006DFE10()
{
  if (*(unsigned char *)(v0 + 64))
  {
    char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0)
    {
      uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10164B7F8 + dword_10164B7F8);
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 48) = v2;
      void *v2 = v0;
      uint64_t v3 = sub_1006E0138;
      goto LABEL_6;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10164B808 + dword_10164B808);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  void *v2 = v0;
  uint64_t v3 = sub_1006DFF98;
LABEL_6:
  v2[1] = v3;
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 65);
  uint64_t v6 = *(void *)(v0 + 16);
  return v8(v6, v4, v5);
}

uint64_t sub_1006DFF98(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
  else
  {
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v6 + 56) = v10;
    *uint64_t v10 = v7;
    v10[1] = sub_1006E02D8;
    char v11 = *(unsigned char *)(v6 + 66);
    char v12 = *(unsigned char *)(v6 + 64);
    uint64_t v13 = *(void *)(v6 + 16);
    return sub_1006D8A68(v13, a1, a2, v12, v11, 0);
  }
}

uint64_t sub_1006E0138(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
  else
  {
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v6 + 56) = v10;
    *uint64_t v10 = v7;
    v10[1] = sub_1006E02D8;
    char v11 = *(unsigned char *)(v6 + 66);
    char v12 = *(unsigned char *)(v6 + 64);
    uint64_t v13 = *(void *)(v6 + 16);
    return sub_1006D8A68(v13, a1, a2, v12, v11, 0);
  }
}

uint64_t sub_1006E02D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *v4;
  uint64_t v8 = swift_task_dealloc();
  char v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 8);
  if (!v3)
  {
    uint64_t v8 = a1;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
  }
  return v11(v8, v9, v10);
}

uint64_t _s18ConnectionKeyGroupVMa()
{
  uint64_t result = qword_10164B8A0;
  if (!qword_10164B8A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1006E043C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101649698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1006E04A4()
{
  unint64_t result = qword_10164B820;
  if (!qword_10164B820)
  {
    sub_10000592C(&qword_10164B818);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164B820);
  }
  return result;
}

uint64_t sub_1006E0504(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100033F68;
  return sub_1012DFD44(a1, v5, v6, v7);
}

uint64_t sub_1006E0628(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1006E0694()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1006E076C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10001D2E4;
  return sub_1012DFD44(a1, v5, v6, v7);
}

uint64_t sub_1006E0890(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1006E08F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_1006DD4D0(a1, a2, a3, a4, *(void *)(v4 + 16), *(uint64_t **)(v4 + 24), *(unsigned __int8 *)(v4 + 32), *(unint64_t **)(v4 + 40));
}

uint64_t sub_1006E0908(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1006E0968()
{
  unint64_t result = qword_10164B840;
  if (!qword_10164B840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164B840);
  }
  return result;
}

unint64_t sub_1006E09BC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_1000361E0(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    uint64_t v9 = *(void *)(a2 + 16);
    unint64_t v10 = *(void *)(a2 + 24);
    sub_1000361E0(v9, v10);
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    long long v11 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 56) = v11;
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 32, a2 + 32);
    uint64_t v12 = *(int *)(a3 + 28);
    uint64_t v13 = a1 + v12;
    uint64_t v14 = a2 + v12;
    uint64_t v15 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_1006E0B08(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  sub_10001CFB8(*(void *)(a1 + 16), *(void *)(a1 + 24));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1 + 32);
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for DateInterval();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_1006E0B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  long long v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 32, a2 + 32);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t *sub_1006E0C90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_1000361E0(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10001CFB8(v12, v13);
  sub_10026A7C0(a1 + 4, a2 + 4);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_1006E0D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t sub_1006E0DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v8, v9);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_1006E0E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006E0EB0);
}

uint64_t sub_1006E0EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DateInterval();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1006E0F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006E0F74);
}

uint64_t sub_1006E0F74(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 56) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for DateInterval();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1006E101C()
{
  uint64_t result = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1006E10C4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 - 1 >= 2)
  {
    if (a3) {
      return result;
    }
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t _s9KeyResultOwxx(uint64_t a1)
{
  return sub_1002F6A08(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s9KeyResultOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1006E10C4(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s9KeyResultOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1006E10C4(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1002F6A08(v6, v7, v8);
  return a1;
}

uint64_t _s9KeyResultOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1002F6A08(v4, v5, v6);
  return a1;
}

uint64_t _s9KeyResultOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s9KeyResultOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1006E12AC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_1006E12C4(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *_s9KeyResultOMa()
{
  return &_s9KeyResultON;
}

unsigned char *storeEnumTagSinglePayload for BeaconKeyManagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006E13B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyManagerError()
{
  return &type metadata for BeaconKeyManagerError;
}

unint64_t sub_1006E13F4()
{
  unint64_t result = qword_10164B8E0;
  if (!qword_10164B8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164B8E0);
  }
  return result;
}

uint64_t sub_1006E1450(uint64_t a1, uint64_t a2)
{
  return sub_1006E1488(a1, a2, 40);
}

uint64_t sub_1006E146C(uint64_t a1, uint64_t a2)
{
  return sub_1006E1488(a1, a2, 39);
}

uint64_t sub_1006E1488(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for BeaconObservation();
  uint64_t v8 = v7 - 8;
  uint64_t v9 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = *(void *)(v3 + 16);
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, a1, v13);
  uint64_t v14 = &v11[*(int *)(v8 + 28)];
  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v14, a2, v15);
  v11[*(int *)(v8 + 32)] = a3;
  sub_10000588C(&qword_10163A778);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  sub_1001A2590((uint64_t)v11, v17 + v16);
  type metadata accessor for Transaction();
  uint64_t v20 = v12;
  uint64_t v21 = v17;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  static Transaction.named<A>(_:with:)();
  swift_bridgeObjectRelease();
  return sub_1001A2654((uint64_t)v11);
}

uint64_t sub_1006E1680(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for BeaconObservation();
  uint64_t v98 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v94 = (uint64_t)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v93 = (char *)&v78 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v96 = (uint64_t)&v78 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v78 - v12;
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_101655530);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v85 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v97 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v78 - v17);
  uint64_t v18 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v83 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v92 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v78 - v21);
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v82 = (char *)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v84 = (char *)&v78 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  unint64_t v30 = (char *)&v78 - v29;
  __chkstk_darwin(v28);
  unint64_t v32 = (char *)&v78 - v31;
  uint64_t v33 = *(void *)(v2 + 16);
  uint64_t v87 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue;
  uint64_t v88 = sub_10000588C(&qword_101655540);
  uint64_t v89 = v33;
  OS_dispatch_queue.sync<A>(execute:)();
  unint64_t v34 = v99;
  uint64_t v35 = v99[2];
  uint64_t v95 = v5;
  uint64_t v86 = 0;
  if (v35 && (uint64_t v36 = a1, v37 = sub_1007240CC(a1), (v38 & 1) != 0))
  {
    uint64_t v90 = v30;
    uint64_t v81 = v32;
    uint64_t v39 = *(void *)(v34[7] + 8 * v37);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v40 = sub_1007100C0(v39);
    swift_bridgeObjectRelease();
    size_t v41 = sub_100B752E8((uint64_t)v40);
    uint64_t result = swift_release();
    unint64_t v43 = _swiftEmptyArrayStorage;
    int v99 = _swiftEmptyArrayStorage;
    uint64_t v44 = *(void *)(v41 + 16);
    if (v44)
    {
      uint64_t v78 = v23;
      uint64_t v79 = v22;
      uint64_t v80 = a2;
      unint64_t v45 = 0;
      uint64_t v5 = v95;
      while (v45 < *(void *)(v41 + 16))
      {
        unint64_t v47 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
        uint64_t v48 = *(void *)(v98 + 72);
        sub_1001A2590(v41 + v47 + v48 * v45, (uint64_t)v13);
        if (v13[*(int *)(v5 + 24)] == 39)
        {
          sub_1001A26B0((uint64_t)v13, v96);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1000B77F0(0, v43[2] + 1, 1);
          }
          unint64_t v43 = v99;
          unint64_t v50 = v99[2];
          unint64_t v49 = v99[3];
          if (v50 >= v49 >> 1)
          {
            sub_1000B77F0(v49 > 1, v50 + 1, 1);
            unint64_t v43 = v99;
          }
          v43[2] = v50 + 1;
          uint64_t result = sub_1001A26B0(v96, (uint64_t)v43 + v47 + v50 * v48);
          uint64_t v5 = v95;
        }
        else
        {
          uint64_t result = sub_1001A2654((uint64_t)v13);
        }
        uint64_t v46 = (uint64_t)v97;
        if (v44 == ++v45)
        {
          unint64_t v43 = v99;
          a2 = v80;
          uint64_t v22 = v79;
          uint64_t v23 = v78;
          goto LABEL_17;
        }
      }
      __break(1u);
      goto LABEL_49;
    }
    uint64_t v5 = v95;
    uint64_t v46 = (uint64_t)v97;
LABEL_17:
    swift_release();
    unint64_t v32 = v81;
    unint64_t v30 = v90;
    uint64_t v51 = v36;
    uint64_t v52 = (uint64_t)v92;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v43 = _swiftEmptyArrayStorage;
    uint64_t v51 = a1;
    uint64_t v52 = (uint64_t)v92;
    uint64_t v46 = (uint64_t)v97;
  }
  sub_100E4D5E0((uint64_t)v43, v46);
  swift_bridgeObjectRelease();
  uint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  uint64_t v96 = v98 + 48;
  int v54 = v53(v46, 1, v5);
  uint64_t v97 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v53;
  if (v54 == 1)
  {
    sub_10001DAB4(v46, (uint64_t *)&unk_101655530);
    uint64_t v92 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
    v92(v52, 1, 1, v22);
LABEL_21:
    static Date.distantPast.getter();
    sub_10001DAB4(v52, (uint64_t *)&unk_10163AC90);
    goto LABEL_23;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v52, v46 + *(int *)(v5 + 20), v22);
  sub_1001A2654(v46);
  uint64_t v92 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v92(v52, 0, 1, v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v52, 1, v22) == 1) {
    goto LABEL_21;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v32, v52, v22);
LABEL_23:
  Date.advanced(by:)();
  uint64_t v55 = (void *)sub_1002B2E68();
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    os_log_type_t v56 = *(void (**)(char *, uint64_t))(v23 + 8);
    v56(v30, v22);
    v56(v32, v22);
    char v57 = 0;
    return v57 & 1;
  }
  uint64_t v90 = v30;
  uint64_t v91 = v55;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v59 = v99;
  if (!v99[2] || (unint64_t v60 = sub_1007240CC(v51), (v61 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v65 = _swiftEmptyArrayStorage;
    uid_t v74 = v82;
    uint64_t v67 = (uint64_t)v85;
    goto LABEL_41;
  }
  uint64_t v81 = v32;
  uint64_t v62 = *(void *)(v59[7] + 8 * v60);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v63 = sub_1007100C0(v62);
  swift_bridgeObjectRelease();
  size_t v64 = sub_100B752E8((uint64_t)v63);
  uint64_t result = swift_release();
  uint64_t v65 = _swiftEmptyArrayStorage;
  int v99 = _swiftEmptyArrayStorage;
  uint64_t v66 = *(void *)(v64 + 16);
  uint64_t v67 = (uint64_t)v85;
  if (!v66)
  {
LABEL_40:
    unint64_t v32 = v81;
    swift_release();
    uid_t v74 = v82;
LABEL_41:
    sub_100E4D5E0((uint64_t)v65, v67);
    swift_bridgeObjectRelease();
    if (v97(v67, 1, v5) == 1)
    {
      sub_10001DAB4(v67, (uint64_t *)&unk_101655530);
      uint64_t v75 = (uint64_t)v83;
      v92((uint64_t)v83, 1, 1, v22);
    }
    else
    {
      uint64_t v75 = (uint64_t)v83;
      (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v83, v67 + *(int *)(v5 + 20), v22);
      sub_1001A2654(v67);
      v92(v75, 0, 1, v22);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v75, 1, v22) != 1)
      {
        uint64_t v76 = v84;
        (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v84, v75, v22);
        goto LABEL_46;
      }
    }
    uint64_t v76 = v84;
    static Date.distantPast.getter();
    sub_10001DAB4(v75, (uint64_t *)&unk_10163AC90);
LABEL_46:
    Date.advanced(by:)();
    char v57 = dispatch thunk of static Comparable.< infix(_:_:)() ^ 1;
    uint64_t v77 = *(void (**)(char *, uint64_t))(v23 + 8);
    v77(v74, v22);
    v77(v76, v22);
    v77(v90, v22);
    v77(v32, v22);
    return v57 & 1;
  }
  uint64_t v78 = v23;
  uint64_t v79 = v22;
  uint64_t v80 = a2;
  unint64_t v68 = 0;
  uint64_t v69 = (uint64_t)v93;
  while (v68 < *(void *)(v64 + 16))
  {
    unint64_t v70 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
    uint64_t v71 = *(void *)(v98 + 72);
    sub_1001A2590(v64 + v70 + v71 * v68, v69);
    if (*(unsigned char *)(v69 + *(int *)(v5 + 24)) == 40)
    {
      sub_1001A26B0(v69, v94);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B77F0(0, v65[2] + 1, 1);
      }
      uint64_t v65 = v99;
      unint64_t v73 = v99[2];
      unint64_t v72 = v99[3];
      if (v73 >= v72 >> 1)
      {
        sub_1000B77F0(v72 > 1, v73 + 1, 1);
        uint64_t v65 = v99;
      }
      v65[2] = v73 + 1;
      uint64_t result = sub_1001A26B0(v94, (uint64_t)v65 + v70 + v73 * v71);
      uint64_t v5 = v95;
      uint64_t v69 = (uint64_t)v93;
    }
    else
    {
      uint64_t result = sub_1001A2654(v69);
    }
    if (v66 == ++v68)
    {
      uint64_t v65 = v99;
      uint64_t v22 = v79;
      uint64_t v23 = v78;
      goto LABEL_40;
    }
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_1006E2110()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SPObserverAnalyticsAttempts()
{
  return self;
}

uint64_t sub_1006E216C()
{
  if (*(void *)(v0 + 72))
  {
    uint64_t v1 = *(void *)(v0 + 72);
  }
  else
  {
    uint64_t v2 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    uint64_t v1 = sub_1006E25B0((uint64_t)sub_1006E2DA4, v2);
    swift_release_n();
    *(void *)(v0 + 72) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1006E221C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    Transaction.capture()();
    (*(void (**)(void))(v1 + 56))();
    return swift_release();
  }
  return result;
}

uint64_t sub_1006E2284()
{
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x656863534350583CLL;
}

uint64_t sub_1006E232C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1006E216C();
  Swift::String v3 = *(NSObject **)(v2 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_100550644;
  *(void *)(v4 + 24) = v2;
  uint64_t v18 = sub_100132424;
  uint64_t v19 = v4;
  uint64_t v14 = (uint64_t)_NSConcreteStackBlock;
  unint64_t v15 = 1107296256;
  uint64_t v16 = sub_1000A70B0;
  uint64_t v17 = &unk_1015D0708;
  uint64_t v5 = _Block_copy(&v14);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v5);
  _Block_release(v5);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release_n();
  swift_release();
  if (v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  static os_log_type_t.default.getter();
  if (qword_1016372B8 != -1) {
LABEL_5:
  }
    swift_once();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101342130;
  uint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  swift_retain();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  uint64_t v14 = 0x656863534350583CLL;
  unint64_t v15 = 0xEF203A72656C7564;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void **)(v1 + 24);
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 62;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  swift_release();
  uint64_t v11 = v14;
  unint64_t v12 = v15;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_10000B4CC();
  *(void *)(v6 + 32) = v11;
  *(void *)(v6 + 40) = v12;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1006E25B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_1016372B8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
  *(void *)(v8 + 56) = &type metadata for Double;
  *(void *)(v8 + 64) = &protocol witness table for Double;
  uint64_t v9 = *(void *)(v2 + 48);
  *(void *)(v8 + 32) = *(void *)(v2 + 40);
  *(void *)(v8 + 96) = &type metadata for Double;
  *(void *)(v8 + 104) = &protocol witness table for Double;
  *(void *)(v8 + 72) = v9;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  Swift::String v10 = *(Swift::String *)(v2 + 16);
  unint64_t v17 = 0xD00000000000002BLL;
  unint64_t v18 = 0x8000000101404A00;
  String.append(_:)(v10);
  uint64_t v11 = v17;
  unint64_t v12 = (void *)v18;
  static DispatchQoS.background.getter();
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  type metadata accessor for XPCActivity();
  swift_allocObject();
  swift_retain();
  uint64_t v15 = sub_1009D9B34(v11, v12, (uint64_t)v7, (uint64_t)sub_1006E2CCC, v13, (uint64_t)sub_1006E2D0C, v14);
  swift_release();
  swift_release();
  return v15;
}

uint64_t sub_1006E27E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1006E2D14(a1, (uint64_t)v14);
  uint64_t v5 = v14[0];
  uint64_t v4 = v14[1];
  uint64_t v6 = v14[2];
  uint64_t v7 = v14[3];
  uint64_t v8 = v14[4];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result)
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v5 = 2;
    goto LABEL_15;
  }
  Swift::String v10 = (double *)result;
  uint64_t result = sub_1006E2D14(a1, (uint64_t)v15);
  if (v15[0] != 2)
  {
    uint64_t result = swift_release();
    goto LABEL_15;
  }
  double v11 = v10[4];
  if ((~*(void *)&v11 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  double v12 = v10[6];
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v12 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  double v13 = v10[5];
  uint64_t result = swift_release();
  if ((~*(void *)&v13 & 0x7FF0000000000000) == 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v13 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v13 < 9.22337204e18)
  {
    uint64_t v4 = (uint64_t)v11;
    uint64_t v6 = (uint64_t)v12;
    uint64_t v8 = 707;
    uint64_t v5 = 256;
    uint64_t v7 = (uint64_t)v13;
LABEL_15:
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v6;
    a2[3] = v7;
    a2[4] = v8;
    return result;
  }
LABEL_24:
  __break(1u);
  return result;
}

void sub_1006E29A8(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t, uint64_t))
{
  if (a3 == 3)
  {
    sub_1009D7368();
  }
  else if (a3 == 2)
  {
    a4(a1, a2);
    sub_1009D7390();
  }
}

uint64_t sub_1006E2A28()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for XPCScheduler()
{
  return self;
}

uint64_t sub_1006E2A94()
{
  return sub_1006E2284();
}

uint64_t sub_1006E2AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  *(void *)(v7 + 64) = a4;
  *(void *)(v7 + 72) = 0;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  *(double *)(v7 + 32) = a7;
  *(double *)(v7 + 40) = a5;
  *(double *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = a3;
  swift_retain();
  sub_1006E216C();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  swift_release();
  static os_log_type_t.default.getter();
  if (qword_1016372B8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101342130;
  swift_retain();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v7 + 16);
  Swift::String v10 = *(void **)(v7 + 24);
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  swift_release();
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_10000B4CC();
  *(void *)(v8 + 32) = 0x656863534350583CLL;
  *(void *)(v8 + 40) = 0xEF203A72656C7564;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1006E2C94()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006E2CCC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1006E27E8(a1, a2);
}

uint64_t sub_1006E2CD4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1006E2D0C(uint64_t a1, uint64_t a2, char a3)
{
  sub_1006E29A8(a1, a2, a3, *(void (**)(uint64_t, uint64_t))(v3 + 16));
}

uint64_t sub_1006E2D14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016549D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006E2D7C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006E2D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1006E2D9C()
{
  return swift_release();
}

uint64_t sub_1006E2DA4()
{
  return sub_1006E221C();
}

uint64_t sub_1006E2DAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a4;
  v12[1] = a5;
  uint64_t v7 = sub_10000588C(&qword_10164BBD8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1006E6484();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1006E2F20(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10164BB80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1006E58C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for LegacyBeaconState();
    LOBYTE(v12) = 1;
    type metadata accessor for UUID();
    sub_1006E5918(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 44));
    v11[7] = 7;
    sub_10000588C(&qword_10164BB90);
    sub_1006E5960();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1006E3218(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164BB58);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1006E57CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_10000588C(&qword_10164BB68);
  sub_1006E5820();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1006E3368()
{
  if (*v0) {
    return 0x7461447472617473;
  }
  else {
    return 0x61446E6F63616562;
  }
}

uint64_t sub_1006E33AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1006E5FDC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006E33D4(uint64_t a1)
{
  unint64_t v2 = sub_1006E6484();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006E3410(uint64_t a1)
{
  unint64_t v2 = sub_1006E6484();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006E344C(void *a1)
{
  return sub_1006E2DAC(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1006E346C()
{
  uint64_t result = 0x614E6E6F63616562;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x55556E6F63616562;
      break;
    case 2:
      uint64_t result = 0x754E6C6169726573;
      break;
    case 3:
      uint64_t result = 0x6F69737265567766;
      break;
    case 4:
      uint64_t result = 0x656E694D7369;
      break;
    case 5:
      uint64_t result = 0x6574614472696170;
      break;
    case 6:
      uint64_t result = 0x3050766461;
      break;
    case 7:
      uint64_t result = 0x6E696E6F63616562;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1006E3584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1006E60E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006E35AC(uint64_t a1)
{
  unint64_t v2 = sub_1006E58C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006E35E8(uint64_t a1)
{
  unint64_t v2 = sub_1006E58C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006E3624(void *a1)
{
  return sub_1006E2F20(a1);
}

uint64_t sub_1006E363C()
{
  return 0x736E6F63616562;
}

uint64_t sub_1006E3654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x736E6F63616562 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1006E36EC(uint64_t a1)
{
  unint64_t v2 = sub_1006E57CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006E3728(uint64_t a1)
{
  unint64_t v2 = sub_1006E57CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006E3764(void *a1)
{
  return sub_1006E3218(a1, *v1);
}

void sub_1006E3780(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v5 = _swiftEmptyArrayStorage;
  sub_1006E37E8(a1, (unint64_t *)&v5);
  *a2 = v5;
}

void sub_1006E37E8(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = v2;
  id v6 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 setDateFormat:v7];

  uint64_t v8 = sub_100AD2AD4();
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = v8 + 32;
    while (1)
    {
      sub_10001D010(v10, (uint64_t)v12);
      sub_1006E3908(a1, v12, a2, v6);
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v12);
      v10 += 40;
      if (!--v9) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_5:

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1006E3908(uint64_t a1, void *a2, unint64_t *a3, void *a4)
{
  id v204 = a4;
  uint64_t v215 = a3;
  uint64_t v205 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v205);
  uint64_t v206 = (uint64_t)v197 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v214 = type metadata accessor for LegacyBeaconState();
  uint64_t v216 = *(void *)(v214 - 8);
  uint64_t v7 = __chkstk_darwin(v214);
  uint64_t v199 = (char *)v197 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v200 = (char *)v197 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v197[1] = (uint64_t)v197 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v198 = (char *)v197 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v202 = (uint64_t)v197 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v203 = (char *)v197 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v197[0] = (uint64_t)v197 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v201 = (char *)v197 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v210 = (uint64_t)v197 - v24;
  __chkstk_darwin(v23);
  uint64_t v211 = (uint64_t *)((char *)v197 - v25);
  uint64_t v26 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v26 - 8);
  uint64_t v208 = (char *)v197 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v212 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v207 = *(void *)(v212 - 8);
  __chkstk_darwin(v212);
  uint64_t v213 = (uint64_t)v197 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v29 - 8);
  unint64_t v219 = (char *)v197 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v217 = *(void *)(v31 - 8);
  uint64_t v218 = v31;
  __chkstk_darwin(v31);
  uint64_t v209 = (uint64_t)v197 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for UUID();
  uint64_t v229 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)v197 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v36);
  char v38 = (char *)v197 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for BeaconNamingRecord();
  uint64_t v40 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v222 = (uint64_t)v197 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = *(void *)(a1 + 280);
  unint64_t v43 = a2;
  uint64_t v44 = a2[3];
  uint64_t v45 = v43[4];
  uint64_t v220 = v43;
  sub_10001CD44(v43, v44);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v45 + 8) + 8) + 32))(v44);
  uint64_t v224 = v42;
  uint64_t v225 = v35;
  uint64_t v46 = v223;
  QueueSynchronizer.conditionalSync<A>(_:)();
  unint64_t v47 = *(void (**)(char *, uint64_t))(v229 + 8);
  uint64_t v48 = v35;
  uint64_t v221 = v33;
  v47(v35, v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39) == 1) {
    return sub_10001DAB4((uint64_t)v38, &qword_10163B9E0);
  }
  uint64_t v223 = v46;
  uint64_t v50 = (uint64_t)v38;
  uint64_t v51 = v222;
  sub_1006E4DE4(v50, v222, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  uint64_t v52 = v220;
  sub_10001D010((uint64_t)v220, (uint64_t)v226);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  uint64_t v54 = v218;
  uint64_t v53 = (uint64_t)v219;
  char v55 = swift_dynamicCast();
  os_log_type_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v217 + 56);
  if (v55)
  {
    v56(v53, 0, 1, v54);
    uint64_t v57 = v209;
    sub_1006E4DE4(v53, v209, type metadata accessor for SharedBeaconRecord);
    uint64_t v58 = (void *)(v51 + *(int *)(v39 + 32));
    uint64_t v59 = v58[1];
    uint64_t v60 = v57 + *(int *)(v54 + 20);
    uint64_t v61 = (uint64_t)v211;
    *uint64_t v211 = *v58;
    *(void *)(v61 + 8) = v59;
    uint64_t v62 = (int *)v214;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v229 + 16))(v61 + *(int *)(v214 + 20), v60, v221);
    unint64_t v63 = (void *)(v61 + v62[6]);
    *unint64_t v63 = 0;
    v63[1] = 0;
    size_t v64 = (void *)(v61 + v62[7]);
    *size_t v64 = 0;
    v64[1] = 0;
    *(unsigned char *)(v61 + v62[8]) = 0;
    uint64_t v65 = (void *)(v61 + v62[9]);
    *uint64_t v65 = 0;
    v65[1] = 0;
    uint64_t v66 = (void *)(v61 + v62[10]);
    void *v66 = 0;
    v66[1] = 0;
    *(void *)(v61 + v62[11]) = _swiftEmptyArrayStorage;
    uint64_t v67 = v210;
    sub_1006E4D7C(v61, v210, (uint64_t (*)(void))type metadata accessor for LegacyBeaconState);
    unint64_t v68 = v215;
    unint64_t v69 = *v215;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v68 = v69;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v69 = sub_100A71534(0, *(void *)(v69 + 16) + 1, 1, v69);
      *unint64_t v68 = v69;
    }
    unint64_t v72 = *(void *)(v69 + 16);
    unint64_t v71 = *(void *)(v69 + 24);
    if (v72 >= v71 >> 1)
    {
      unint64_t v69 = sub_100A71534(v71 > 1, v72 + 1, 1, v69);
      *unint64_t v68 = v69;
    }
    *(void *)(v69 + 16) = v72 + 1;
    sub_1006E4DE4(v67, v69+ ((*(unsigned __int8 *)(v216 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v216 + 80))+ *(void *)(v216 + 72) * v72, (uint64_t (*)(void))type metadata accessor for LegacyBeaconState);
    sub_1006E4E4C(v61, (uint64_t (*)(void))type metadata accessor for LegacyBeaconState);
    unint64_t v73 = type metadata accessor for SharedBeaconRecord;
    uint64_t v74 = v57;
  }
  else
  {
    v56(v53, 1, 1, v54);
    sub_10001DAB4(v53, (uint64_t *)&unk_101653D50);
    sub_10001D010((uint64_t)v52, (uint64_t)v226);
    uint64_t v76 = (uint64_t)v208;
    uint64_t v77 = v212;
    char v78 = swift_dynamicCast();
    uint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v207 + 56);
    if ((v78 & 1) == 0)
    {
      v79(v76, 1, 1, v77);
      sub_10001DAB4(v76, &qword_10163B9F0);
      LODWORD(v229) = static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v103 = swift_allocObject();
      *(_OWORD *)(v103 + 16) = xmmword_101342130;
      uint64_t v105 = v52[3];
      uint64_t v104 = v52[4];
      sub_10001CD44(v52, v105);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v104 + 8) + 8) + 32))(v105);
      uint64_t v106 = UUID.uuidString.getter();
      uint64_t v108 = v107;
      v47(v48, v221);
      *(void *)(v103 + 56) = &type metadata for String;
      *(void *)(v103 + 64) = sub_10000B4CC();
      *(void *)(v103 + 32) = v106;
      *(void *)(v103 + 40) = v108;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v75 = v222;
      return sub_1006E4E4C(v75, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    }
    v79(v76, 0, 1, v77);
    uint64_t v80 = v76;
    uint64_t v81 = v213;
    sub_1006E4DE4(v80, v213, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v82 = v206;
    sub_1006E4D7C(v81 + *(int *)(v77 + 24), v206, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v84 = v221;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        uint64_t v109 = *(void *)(v82 + 32);
        unint64_t v219 = *(char **)(v82 + 40);
        uint64_t v220 = (void *)v109;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v110 = (uint64_t *)(v51 + *(int *)(v39 + 32));
        uint64_t v112 = *v110;
        uint64_t v111 = v110[1];
        uint64_t v113 = *(int *)(v77 + 20);
        uint64_t v114 = v77;
        uint64_t v115 = v213;
        unint64_t v116 = (int *)v214;
        unint64_t v117 = v201;
        (*(void (**)(char *, uint64_t, uint64_t))(v229 + 16))(&v201[*(int *)(v214 + 20)], v213 + v113, v84);
        unint64_t v118 = (uint64_t *)(v115 + *(int *)(v114 + 60));
        uint64_t v120 = *v118;
        uint64_t v119 = v118[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        id v122 = [v204 stringFromDate:isa];

        uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v125 = v124;

        *unint64_t v117 = v112;
        v117[1] = v111;
        uint64_t v126 = (void *)((char *)v117 + v116[6]);
        uint64_t v127 = v219;
        void *v126 = v220;
        v126[1] = v127;
        uint64_t v128 = (void *)((char *)v117 + v116[7]);
        *uint64_t v128 = v120;
        v128[1] = v119;
        *((unsigned char *)v117 + v116[8]) = 1;
        char v129 = (void *)((char *)v117 + v116[9]);
        *char v129 = v123;
        v129[1] = v125;
        unint64_t v130 = (void *)((char *)v117 + v116[10]);
        void *v130 = 0;
        v130[1] = 0;
        *(void *)((char *)v117 + v116[11]) = _swiftEmptyArrayStorage;
        uint64_t v131 = v197[0];
        sub_1006E4D7C((uint64_t)v117, v197[0], (uint64_t (*)(void))type metadata accessor for LegacyBeaconState);
        uint64_t v132 = v215;
        unint64_t v133 = *v215;
        char v134 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v132 = v133;
        if ((v134 & 1) == 0)
        {
          unint64_t v133 = sub_100A71534(0, *(void *)(v133 + 16) + 1, 1, v133);
          *uint64_t v132 = v133;
        }
        unint64_t v136 = *(void *)(v133 + 16);
        unint64_t v135 = *(void *)(v133 + 24);
        uint64_t v137 = v222;
        if (v136 >= v135 >> 1)
        {
          unint64_t v133 = sub_100A71534(v135 > 1, v136 + 1, 1, v133);
          *uint64_t v132 = v133;
        }
        *(void *)(v133 + 16) = v136 + 1;
        sub_1006E4DE4(v131, v133+ ((*(unsigned __int8 *)(v216 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v216 + 80))+ *(void *)(v216 + 72) * v136, (uint64_t (*)(void))type metadata accessor for LegacyBeaconState);
        uint64_t v138 = (uint64_t)v201;
        goto LABEL_30;
      case 2:
        uint64_t v139 = sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v140 = (uint64_t *)(v82 + *(int *)(v139 + 80));
        uint64_t v141 = *v140;
        unint64_t v219 = (char *)v140[1];
        uint64_t v220 = (void *)v141;
        swift_bridgeObjectRelease();
        goto LABEL_23;
      case 3:
        uint64_t v142 = sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v143 = (uint64_t *)(v82 + *(int *)(v142 + 80));
        uint64_t v144 = *v143;
        unint64_t v219 = (char *)v143[1];
        uint64_t v220 = (void *)v144;
LABEL_23:
        v47((char *)v82, v84);
        static os_log_type_t.default.getter();
        if (qword_101637260 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v145 = swift_allocObject();
        *(_OWORD *)(v145 + 16) = xmmword_101342130;
        uint64_t v146 = v213;
        uint64_t v147 = v213 + *(int *)(v77 + 20);
        uint64_t v148 = v77;
        uint64_t v149 = UUID.uuidString.getter();
        uint64_t v151 = v150;
        *(void *)(v145 + 56) = &type metadata for String;
        *(void *)(v145 + 64) = sub_10000B4CC();
        *(void *)(v145 + 32) = v149;
        *(void *)(v145 + 40) = v151;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        unint64_t v152 = (uint64_t *)(v222 + *(int *)(v39 + 32));
        uint64_t v154 = *v152;
        uint64_t v153 = v152[1];
        uint64_t v155 = (uint64_t *)(v146 + *(int *)(v148 + 60));
        uint64_t v156 = v155[1];
        uint64_t v218 = *v155;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        Class v157 = Date._bridgeToObjectiveC()().super.isa;
        id v158 = [v204 stringFromDate:v157];

        uint64_t v159 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v161 = v160;

        unint64_t v162 = v203;
        *(void *)uint64_t v203 = v154;
        *((void *)v162 + 1) = v153;
        uint64_t v163 = (uint64_t)v162;
        uint64_t v164 = (int *)v214;
        (*(void (**)(char *, uint64_t, uint64_t))(v229 + 16))(&v162[*(int *)(v214 + 20)], v147, v221);
        uint64_t v165 = (void *)(v163 + v164[6]);
        uint64_t v166 = v219;
        *uint64_t v165 = v220;
        v165[1] = v166;
        uint64_t v167 = (uint64_t *)(v163 + v164[7]);
        *uint64_t v167 = v218;
        v167[1] = v156;
        *(unsigned char *)(v163 + v164[8]) = 1;
        unint64_t v168 = (uint64_t *)(v163 + v164[9]);
        *unint64_t v168 = v159;
        v168[1] = v161;
        unint64_t v169 = (void *)(v163 + v164[10]);
        void *v169 = 0;
        v169[1] = 0;
        *(void *)(v163 + v164[11]) = _swiftEmptyArrayStorage;
        uint64_t v170 = v202;
        sub_1006E4D7C(v163, v202, (uint64_t (*)(void))type metadata accessor for LegacyBeaconState);
        uint64_t v171 = v215;
        unint64_t v172 = *v215;
        char v173 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t *v171 = v172;
        if ((v173 & 1) == 0)
        {
          unint64_t v172 = sub_100A71534(0, *(void *)(v172 + 16) + 1, 1, v172);
          unint64_t *v171 = v172;
        }
        unint64_t v175 = *(void *)(v172 + 16);
        unint64_t v174 = *(void *)(v172 + 24);
        uint64_t v137 = v222;
        if (v175 >= v174 >> 1)
        {
          unint64_t v172 = sub_100A71534(v174 > 1, v175 + 1, 1, v172);
          unint64_t *v171 = v172;
        }
        *(void *)(v172 + 16) = v175 + 1;
        sub_1006E4DE4(v170, v172+ ((*(unsigned __int8 *)(v216 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v216 + 80))+ *(void *)(v216 + 72) * v175, (uint64_t (*)(void))type metadata accessor for LegacyBeaconState);
        uint64_t v138 = v163;
LABEL_30:
        sub_1006E4E4C(v138, (uint64_t (*)(void))type metadata accessor for LegacyBeaconState);
        sub_1006E4E4C(v213, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v75 = v137;
        return sub_1006E4E4C(v75, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      case 4:
        swift_bridgeObjectRelease();
        uint64_t v176 = (uint64_t *)(v51 + *(int *)(v39 + 32));
        uint64_t v178 = *v176;
        uint64_t v177 = v176[1];
        uint64_t v179 = v213 + *(int *)(v77 + 20);
        swift_bridgeObjectRetain();
        Class v180 = Date._bridgeToObjectiveC()().super.isa;
        id v181 = [v204 stringFromDate:v180];

        uint64_t v182 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v184 = v183;

        unint64_t v185 = v200;
        *(void *)uint64_t v200 = v178;
        *((void *)v185 + 1) = v177;
        uint64_t v95 = (uint64_t)v185;
        uint64_t v186 = (int *)v214;
        (*(void (**)(char *, uint64_t, uint64_t))(v229 + 16))(&v185[*(int *)(v214 + 20)], v179, v84);
        uint64_t v187 = (void *)(v95 + v186[6]);
        *uint64_t v187 = 0;
        v187[1] = 0;
        uint64_t v188 = (void *)(v95 + v186[7]);
        *uint64_t v188 = 0;
        v188[1] = 0;
        *(unsigned char *)(v95 + v186[8]) = 1;
        uint64_t v189 = (uint64_t *)(v95 + v186[9]);
        *uint64_t v189 = v182;
        v189[1] = v184;
        uint64_t v190 = (void *)(v95 + v186[10]);
        void *v190 = 0;
        v190[1] = 0;
        *(void *)(v95 + v186[11]) = _swiftEmptyArrayStorage;
        uint64_t v101 = v95;
        uint64_t v102 = &v228;
        goto LABEL_33;
      default:
        swift_bridgeObjectRelease();
        uint64_t v85 = (uint64_t *)(v51 + *(int *)(v39 + 32));
        uint64_t v87 = *v85;
        uint64_t v86 = v85[1];
        uint64_t v88 = v213 + *(int *)(v77 + 20);
        swift_bridgeObjectRetain();
        Class v89 = Date._bridgeToObjectiveC()().super.isa;
        id v90 = [v204 stringFromDate:v89];

        uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v93 = v92;

        uint64_t v94 = v198;
        *(void *)uint64_t v198 = v87;
        *((void *)v94 + 1) = v86;
        uint64_t v95 = (uint64_t)v94;
        uint64_t v96 = (int *)v214;
        (*(void (**)(char *, uint64_t, uint64_t))(v229 + 16))(&v94[*(int *)(v214 + 20)], v88, v84);
        uint64_t v97 = (void *)(v95 + v96[6]);
        *uint64_t v97 = 0;
        v97[1] = 0;
        uint64_t v98 = (void *)(v95 + v96[7]);
        *uint64_t v98 = 0;
        v98[1] = 0;
        *(unsigned char *)(v95 + v96[8]) = 1;
        int v99 = (uint64_t *)(v95 + v96[9]);
        *int v99 = v91;
        v99[1] = v93;
        uint64_t v100 = (void *)(v95 + v96[10]);
        *uint64_t v100 = 0;
        v100[1] = 0;
        *(void *)(v95 + v96[11]) = _swiftEmptyArrayStorage;
        uint64_t v101 = v95;
        uint64_t v102 = &v227;
LABEL_33:
        uint64_t v191 = *((void *)v102 - 32);
        sub_1006E4D7C(v101, v191, (uint64_t (*)(void))type metadata accessor for LegacyBeaconState);
        int v192 = v215;
        unint64_t v193 = *v215;
        char v194 = swift_isUniquelyReferenced_nonNull_native();
        *int v192 = v193;
        if ((v194 & 1) == 0)
        {
          unint64_t v193 = sub_100A71534(0, *(void *)(v193 + 16) + 1, 1, v193);
          *int v192 = v193;
        }
        unint64_t v196 = *(void *)(v193 + 16);
        unint64_t v195 = *(void *)(v193 + 24);
        if (v196 >= v195 >> 1)
        {
          unint64_t v193 = sub_100A71534(v195 > 1, v196 + 1, 1, v193);
          *int v192 = v193;
        }
        *(void *)(v193 + 16) = v196 + 1;
        sub_1006E4DE4(v191, v193+ ((*(unsigned __int8 *)(v216 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v216 + 80))+ *(void *)(v216 + 72) * v196, (uint64_t (*)(void))type metadata accessor for LegacyBeaconState);
        sub_1006E4E4C(v95, (uint64_t (*)(void))type metadata accessor for LegacyBeaconState);
        unint64_t v73 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
        uint64_t v74 = v213;
        break;
    }
  }
  sub_1006E4E4C(v74, v73);
  uint64_t v75 = v51;
  return sub_1006E4E4C(v75, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
}

uint64_t type metadata accessor for LegacyBeaconState()
{
  uint64_t result = qword_10164BB08;
  if (!qword_10164BB08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1006E4D7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1006E4DE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1006E4E4C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_1006E4EAC(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v30 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (void *)((char *)v4 + v13);
    uint64_t v16 = (void *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (void *)((char *)v4 + v14);
    uint64_t v19 = (void *)((char *)a2 + v14);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = a3[9];
    *((unsigned char *)v4 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    uint64_t v22 = (void *)((char *)v4 + v21);
    uint64_t v23 = (void *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = a3[10];
    uint64_t v26 = a3[11];
    uint64_t v27 = (void *)((char *)v4 + v25);
    uint64_t v28 = (void *)((char *)a2 + v25);
    uint64_t v29 = v28[1];
    *uint64_t v27 = *v28;
    v27[1] = v29;
    *(void *)((char *)v4 + v26) = *(void *)((char *)a2 + v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1006E5024(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1006E50F0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v12);
  uint64_t v15 = (void *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (void *)((char *)a1 + v13);
  uint64_t v18 = (void *)((char *)a2 + v13);
  uint64_t v19 = v18[1];
  void *v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = a3[10];
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)((char *)a1 + v24);
  uint64_t v27 = (void *)((char *)a2 + v24);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  *(void *)((char *)a1 + v25) = *(void *)((char *)a2 + v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1006E5218(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v16 = a3[9];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  void *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[10];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1006E5394(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  uint64_t v12 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  return a1;
}

void *sub_1006E545C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  void *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[10];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = (void *)((char *)a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *uint64_t v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1006E557C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006E5590);
}

uint64_t sub_1006E5590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1006E5640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006E5654);
}

uint64_t sub_1006E5654(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1006E56FC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyBeaconStateCapture()
{
  return &type metadata for LegacyBeaconStateCapture;
}

unint64_t sub_1006E57CC()
{
  unint64_t result = qword_10164BB60;
  if (!qword_10164BB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BB60);
  }
  return result;
}

unint64_t sub_1006E5820()
{
  unint64_t result = qword_10164BB70;
  if (!qword_10164BB70)
  {
    sub_10000592C(&qword_10164BB68);
    sub_1006E5918(&qword_10164BB78, (void (*)(uint64_t))type metadata accessor for LegacyBeaconState);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BB70);
  }
  return result;
}

unint64_t sub_1006E58C4()
{
  unint64_t result = qword_10164BB88;
  if (!qword_10164BB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BB88);
  }
  return result;
}

uint64_t sub_1006E5918(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1006E5960()
{
  unint64_t result = qword_10164BB98;
  if (!qword_10164BB98)
  {
    sub_10000592C(&qword_10164BB90);
    sub_1006E59D4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BB98);
  }
  return result;
}

unint64_t sub_1006E59D4()
{
  unint64_t result = qword_10164BBA0;
  if (!qword_10164BBA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BBA0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LegacyBeaconState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006E5AF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyBeaconState.CodingKeys()
{
  return &type metadata for LegacyBeaconState.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for LegacyBeaconStateCapture.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1006E5BC8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyBeaconStateCapture.CodingKeys()
{
  return &type metadata for LegacyBeaconStateCapture.CodingKeys;
}

uint64_t destroy for LegacyBeaconingKey()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for LegacyBeaconingKey(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LegacyBeaconingKey(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for LegacyBeaconingKey(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureSupportMatrixProductType(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureSupportMatrixProductType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyBeaconingKey()
{
  return &type metadata for LegacyBeaconingKey;
}

unint64_t sub_1006E5DD0()
{
  unint64_t result = qword_10164BBA8;
  if (!qword_10164BBA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BBA8);
  }
  return result;
}

unint64_t sub_1006E5E28()
{
  unint64_t result = qword_10164BBB0;
  if (!qword_10164BBB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BBB0);
  }
  return result;
}

unint64_t sub_1006E5E80()
{
  unint64_t result = qword_10164BBB8;
  if (!qword_10164BBB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BBB8);
  }
  return result;
}

unint64_t sub_1006E5ED8()
{
  unint64_t result = qword_10164BBC0;
  if (!qword_10164BBC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BBC0);
  }
  return result;
}

unint64_t sub_1006E5F30()
{
  unint64_t result = qword_10164BBC8;
  if (!qword_10164BBC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BBC8);
  }
  return result;
}

unint64_t sub_1006E5F88()
{
  unint64_t result = qword_10164BBD0;
  if (!qword_10164BBD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BBD0);
  }
  return result;
}

uint64_t sub_1006E5FDC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x61446E6F63616562 && a2 == 0xEA00000000006174;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1006E60E8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x614E6E6F63616562 && a2 == 0xEA0000000000656DLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x55556E6F63616562 && a2 == 0xEA00000000004449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F69737265567766 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656E694D7369 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6574614472696170 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x3050766461 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6E696E6F63616562 && a2 == 0xED00007379654B67)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

unint64_t sub_1006E6484()
{
  unint64_t result = qword_10164BBE0;
  if (!qword_10164BBE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BBE0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LegacyBeaconingKey.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006E65A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyBeaconingKey.CodingKeys()
{
  return &type metadata for LegacyBeaconingKey.CodingKeys;
}

unint64_t sub_1006E65E0()
{
  unint64_t result = qword_10164BBE8;
  if (!qword_10164BBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BBE8);
  }
  return result;
}

unint64_t sub_1006E6638()
{
  unint64_t result = qword_10164BBF0;
  if (!qword_10164BBF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BBF0);
  }
  return result;
}

unint64_t sub_1006E6690()
{
  unint64_t result = qword_10164BBF8;
  if (!qword_10164BBF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BBF8);
  }
  return result;
}

ValueMetadata *type metadata accessor for GetiCloudIdentifierPayload()
{
  return &type metadata for GetiCloudIdentifierPayload;
}

unint64_t sub_1006E66F4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1006E6724();
  unint64_t result = sub_1005FD1A0();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1006E6724()
{
  unint64_t result = qword_10164BC00;
  if (!qword_10164BC00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BC00);
  }
  return result;
}

uint64_t sub_1006E6778(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v3, v4);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v1)
  {
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v3);
}

__n128 sub_1006E6938@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1006E6FA4(a1, v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1006E6984(void *a1)
{
  return sub_1006E6778(a1);
}

uint64_t sub_1006E699C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, unint64_t a11)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v11) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result)) {
        goto LABEL_33;
      }
      uint64_t v11 = (int)v11;
LABEL_6:
      if (v11 != 89) {
        goto LABEL_42;
      }
      break;
    case 2uLL:
      uint64_t v13 = *(void *)(result + 16);
      uint64_t v12 = *(void *)(result + 24);
      BOOL v14 = __OFSUB__(v12, v13);
      uint64_t v11 = v12 - v13;
      if (!v14) {
        goto LABEL_6;
      }
      goto LABEL_34;
    case 3uLL:
      goto LABEL_42;
    default:
      uint64_t v11 = BYTE6(a2);
      goto LABEL_6;
  }
  switch(a4 >> 62)
  {
    case 1uLL:
      LODWORD(v15) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v15 = (int)v15;
LABEL_11:
      if (v15 != 1040)
      {
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        JUMPOUT(0x1006E6B90);
      }
      switch(a6 >> 62)
      {
        case 1uLL:
          LODWORD(v18) = HIDWORD(a5) - a5;
          if (__OFSUB__(HIDWORD(a5), a5)) {
            goto LABEL_35;
          }
          uint64_t v18 = (int)v18;
LABEL_17:
          if (v18 != 32) {
            goto LABEL_43;
          }
          switch(a11 >> 62)
          {
            case 1uLL:
              LODWORD(v21) = HIDWORD(a10) - a10;
              if (__OFSUB__(HIDWORD(a10), a10)) {
                goto LABEL_37;
              }
              uint64_t v21 = (int)v21;
LABEL_23:
              if (v21 != 100) {
                goto LABEL_44;
              }
              switch(a8 >> 62)
              {
                case 1uLL:
                  LODWORD(v24) = HIDWORD(a7) - a7;
                  if (__OFSUB__(HIDWORD(a7), a7)) {
                    goto LABEL_39;
                  }
                  uint64_t v24 = (int)v24;
LABEL_29:
                  if (v24 != 60) {
                    goto LABEL_45;
                  }
                  *a9 = result;
                  a9[1] = a2;
                  a9[2] = a3;
                  a9[3] = a4;
                  a9[4] = a5;
                  a9[5] = a6;
                  a9[6] = a7;
                  a9[7] = a8;
                  a9[8] = a10;
                  a9[9] = a11;
                  return result;
                case 2uLL:
                  uint64_t v26 = *(void *)(a7 + 16);
                  uint64_t v25 = *(void *)(a7 + 24);
                  BOOL v14 = __OFSUB__(v25, v26);
                  uint64_t v24 = v25 - v26;
                  if (!v14) {
                    goto LABEL_29;
                  }
                  goto LABEL_40;
                case 3uLL:
                  goto LABEL_45;
                default:
                  uint64_t v24 = BYTE6(a8);
                  goto LABEL_29;
              }
            case 2uLL:
              uint64_t v23 = *(void *)(a10 + 16);
              uint64_t v22 = *(void *)(a10 + 24);
              BOOL v14 = __OFSUB__(v22, v23);
              uint64_t v21 = v22 - v23;
              if (!v14) {
                goto LABEL_23;
              }
              goto LABEL_38;
            case 3uLL:
              goto LABEL_44;
            default:
              uint64_t v21 = BYTE6(a11);
              goto LABEL_23;
          }
        case 2uLL:
          uint64_t v20 = *(void *)(a5 + 16);
          uint64_t v19 = *(void *)(a5 + 24);
          BOOL v14 = __OFSUB__(v19, v20);
          uint64_t v18 = v19 - v20;
          if (!v14) {
            goto LABEL_17;
          }
          goto LABEL_36;
        case 3uLL:
          goto LABEL_43;
        default:
          uint64_t v18 = BYTE6(a6);
          goto LABEL_17;
      }
    case 2uLL:
      uint64_t v17 = *(void *)(a3 + 16);
      uint64_t v16 = *(void *)(a3 + 24);
      BOOL v14 = __OFSUB__(v16, v17);
      uint64_t v15 = v16 - v17;
      if (!v14) {
        goto LABEL_11;
      }
      goto LABEL_32;
    default:
      goto LABEL_41;
  }
}

uint64_t destroy for AirPodsLEInitiatePairingCommandPayload(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  sub_10001CFB8(a1[4], a1[5]);
  sub_10001CFB8(a1[6], a1[7]);
  uint64_t v2 = a1[8];
  unint64_t v3 = a1[9];

  return sub_10001CFB8(v2, v3);
}

uint64_t *initializeWithCopy for AirPodsLEInitiatePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1000361E0(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_1000361E0(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_1000361E0(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  uint64_t v13 = a2[8];
  unint64_t v12 = a2[9];
  sub_1000361E0(v13, v12);
  a1[8] = v13;
  a1[9] = v12;
  return a1;
}

uint64_t *assignWithCopy for AirPodsLEInitiatePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[4];
  unint64_t v13 = a2[5];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[6];
  unint64_t v17 = a2[7];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[6];
  unint64_t v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v21 = a2[8];
  unint64_t v20 = a2[9];
  sub_1000361E0(v21, v20);
  uint64_t v22 = a1[8];
  unint64_t v23 = a1[9];
  a1[8] = v21;
  a1[9] = v20;
  sub_10001CFB8(v22, v23);
  return a1;
}

uint64_t *assignWithTake for AirPodsLEInitiatePairingCommandPayload(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a1[8];
  unint64_t v13 = a1[9];
  *((_OWORD *)a1 + 4) = a2[4];
  sub_10001CFB8(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for InitialPairingInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for InitialPairingInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FinalizePairingCommandPayload()
{
  return &type metadata for FinalizePairingCommandPayload;
}

unint64_t sub_1006E6ECC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1006E6EFC();
  unint64_t result = sub_1006E6F50();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1006E6EFC()
{
  unint64_t result = qword_10164BC08;
  if (!qword_10164BC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BC08);
  }
  return result;
}

unint64_t sub_1006E6F50()
{
  unint64_t result = qword_10164BC10;
  if (!qword_10164BC10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BC10);
  }
  return result;
}

uint64_t sub_1006E6FA4@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v22, v23);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000BD078((uint64_t)v22, v23);
    uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v25 = v10;
    sub_1000BD078((uint64_t)v22, v23);
    uint64_t v20 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v21 = v11;
    sub_1000BD078((uint64_t)v22, v23);
    uint64_t v18 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v19 = v12;
    sub_1000BD078((uint64_t)v22, v23);
    uint64_t v13 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    sub_1006E699C(v7, v8, v9, v25, v20, v21, v18, v19, v24, v13, v14);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    long long v16 = v24[3];
    a2[2] = v24[2];
    a2[3] = v16;
    a2[4] = v24[4];
    long long v17 = v24[1];
    *a2 = v24[0];
    a2[1] = v17;
  }
  return result;
}

void *sub_1006E71B0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unsigned int v3 = *a2;
    unsigned int v3 = (void *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v6 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v6;
    uint64_t v7 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v7;
    uint64_t v8 = a2[8];
    uint64_t v9 = *(int *)(a3 + 36);
    unint64_t v10 = (char *)a2 + v9;
    __dst = (void *)(a1 + v9);
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v8;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_10000588C(&qword_101649E40);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
  }
  return v3;
}

uint64_t sub_1006E7374(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t sub_1006E745C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (const void *)(a2 + v8);
  __dst = (void *)(a1 + v8);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_10000588C(&qword_101649E40);
    memcpy(__dst, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(__dst, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_1006E75D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_10000588C(&qword_101649E40);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_1006E77D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = sub_10000588C(&qword_101649E40);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_1006E7904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 36);
  uint64_t v11 = (void *)(a1 + v10);
  int v12 = (void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_10000588C(&qword_101649E40);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t sub_1006E7AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006E7AD8);
}

uint64_t sub_1006E7AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_10000588C(&qword_101649E40);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 36);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_1006E7B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006E7BAC);
}

uint64_t sub_1006E7BAC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = sub_10000588C(&qword_101649E40);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for OfflineLostModeInfoLookupResponse()
{
  uint64_t result = qword_10164BC70;
  if (!qword_10164BC70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1006E7CA4()
{
  sub_1006E7D4C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1006E7D4C()
{
  if (!qword_10164BC80)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10164BC80);
    }
  }
}

uint64_t sub_1006E7DA4(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164BCD8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1006E85C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for OfflineLostModeInfoLookupResponse();
    v8[10] = 5;
    type metadata accessor for URL();
    sub_1006E86DC(&qword_10164BCE0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1006E7FE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v4 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000588C(&qword_10164BCC0);
  uint64_t v7 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OfflineLostModeInfoLookupResponse();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v24 = a1;
  sub_10001CD44(a1, v13);
  sub_1006E85C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
  }
  uint64_t v14 = v7;
  char v30 = 0;
  uint64_t v15 = v23;
  *(void *)uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 1) = v16;
  char v29 = 1;
  v12[16] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  char v28 = 2;
  *((void *)v12 + 3) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 4) = v17;
  char v27 = 3;
  *((void *)v12 + 5) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 6) = v18;
  char v26 = 4;
  uint64_t v21 = 0;
  *((void *)v12 + 7) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((void *)v12 + 8) = v19;
  type metadata accessor for URL();
  char v25 = 5;
  sub_1006E86DC(&qword_10164BCD0);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
  sub_1000201F8((uint64_t)v6, (uint64_t)&v12[*(int *)(v10 + 36)]);
  sub_1006E861C((uint64_t)v12, v22);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
  return sub_1006E8680((uint64_t)v12);
}

unint64_t sub_1006E840C()
{
  unint64_t result = 0x6D754E656E6F6870;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6F4D74736F4C6E69;
      break;
    case 2:
      unint64_t result = 0x6C69616D65;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x7373654D74736F6CLL;
      break;
    case 5:
      unint64_t result = 0x48746C7561666564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1006E84F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1006E892C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006E8520(uint64_t a1)
{
  unint64_t v2 = sub_1006E85C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006E855C(uint64_t a1)
{
  unint64_t v2 = sub_1006E85C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006E8598@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1006E7FE8(a1, a2);
}

uint64_t sub_1006E85B0(void *a1)
{
  return sub_1006E7DA4(a1);
}

unint64_t sub_1006E85C8()
{
  unint64_t result = qword_10164BCC8;
  if (!qword_10164BCC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BCC8);
  }
  return result;
}

uint64_t sub_1006E861C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OfflineLostModeInfoLookupResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006E8680(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OfflineLostModeInfoLookupResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1006E86DC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for URL();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OfflineLostModeInfoLookupResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006E87ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OfflineLostModeInfoLookupResponse.CodingKeys()
{
  return &type metadata for OfflineLostModeInfoLookupResponse.CodingKeys;
}

unint64_t sub_1006E8828()
{
  unint64_t result = qword_10164BCE8;
  if (!qword_10164BCE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BCE8);
  }
  return result;
}

unint64_t sub_1006E8880()
{
  unint64_t result = qword_10164BCF0;
  if (!qword_10164BCF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BCF0);
  }
  return result;
}

unint64_t sub_1006E88D8()
{
  unint64_t result = qword_10164BCF8;
  if (!qword_10164BCF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BCF8);
  }
  return result;
}

uint64_t sub_1006E892C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D754E656E6F6870 && a2 == 0xEB00000000726562;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F4D74736F4C6E69 && a2 == 0xEA00000000006564 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C69616D65 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000101404AC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7373654D74736F6CLL && a2 == 0xEF74786554656761 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x48746C7561666564 && a2 == 0xEF6E6F63496F7265)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1006E8C0C()
{
  return 0x65746143656C6F72;
}

uint64_t sub_1006E8C30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65746143656C6F72 && a2 == 0xEE00736569726F67)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1006E8CEC(uint64_t a1)
{
  unint64_t v2 = sub_1006E9860();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006E8D28(uint64_t a1)
{
  unint64_t v2 = sub_1006E9860();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1006E8D64@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1006E96B0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1006E8D90(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164BD30);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1006E9C90();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1006E8F18(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[1] = a3;
  void v13[2] = a4;
  uint64_t v8 = sub_10000588C(&qword_10164BD60);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1006EA0E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v13[3] = a5;
    char v14 = 2;
    sub_10000588C(&qword_10164BD48);
    sub_1006EA188(&qword_10164BD68, &qword_10164BD48, (void (*)(void))sub_1006EA1F4);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1006E9108()
{
  uint64_t v1 = 1701605234;
  if (*v0 != 1) {
    uint64_t v1 = 0x6A6F6D45656C6F72;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6449656C6F72;
  }
}

uint64_t sub_1006E915C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1006E9908(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006E9184(uint64_t a1)
{
  unint64_t v2 = sub_1006E9C90();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006E91C0(uint64_t a1)
{
  unint64_t v2 = sub_1006E9C90();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1006E91FC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1006E9A54(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1006E9244(void *a1)
{
  return sub_1006E8D90(a1);
}

uint64_t sub_1006E925C()
{
  uint64_t v1 = 0x73656C6F72;
  if (*v0 == 1) {
    uint64_t v1 = 0x79726F6765746163;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x79726F6765746163;
  }
}

uint64_t sub_1006E92B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1006E9CE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006E92D8(uint64_t a1)
{
  unint64_t v2 = sub_1006EA0E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006E9314(uint64_t a1)
{
  unint64_t v2 = sub_1006EA0E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006E9350@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006E9E50(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1006E9380(void *a1)
{
  return sub_1006E8F18(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1006E93A0(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v2 = a1[3];
  uint64_t v3 = a2[3];
  BOOL v4 = a1[1] == a2[1] && a1[2] == a2[2];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }

  return sub_100336C90(v2, v3);
}

void *initializeBufferWithCopyOfBuffer for BeaconKeyService.KeyStreamChange(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RolesResponse(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for RolesResponse(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for RolesResponse()
{
  return &type metadata for RolesResponse;
}

ValueMetadata *type metadata accessor for Role()
{
  return &type metadata for Role;
}

uint64_t destroy for RoleCategory()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RoleCategory(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RoleCategory(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for RoleCategory(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RoleCategory(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RoleCategory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RoleCategory()
{
  return &type metadata for RoleCategory;
}

void *sub_1006E96B0(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164BD00);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001CD44(a1, a1[3]);
  sub_1006E9860();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C(&qword_10163ABE8);
    sub_1006EA188(&qword_10164BD10, &qword_10163ABE8, (void (*)(void))sub_1006E98B4);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1006E9860()
{
  unint64_t result = qword_10164BD08;
  if (!qword_10164BD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BD08);
  }
  return result;
}

unint64_t sub_1006E98B4()
{
  unint64_t result = qword_10164BD18;
  if (!qword_10164BD18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BD18);
  }
  return result;
}

uint64_t sub_1006E9908(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6449656C6F72 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701605234 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6A6F6D45656C6F72 && a2 == 0xE900000000000069)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1006E9A54@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10164BD20);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1006E9C90();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v24 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v23 = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v21 = v10;
  char v22 = 2;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  char v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v20 = v13;
  v16(v8, v5);
  swift_bridgeObjectRetain();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v18 = v21;
  *a2 = v9;
  a2[1] = v18;
  uint64_t v19 = v20;
  a2[2] = v12;
  a2[3] = v19;
  a2[4] = v15;
  return result;
}

unint64_t sub_1006E9C90()
{
  unint64_t result = qword_10164BD28;
  if (!qword_10164BD28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BD28);
  }
  return result;
}

uint64_t sub_1006E9CE4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x79726F6765746163 && a2 == 0xEA00000000006449;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xEC000000656D614ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73656C6F72 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1006E9E50(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164BD38);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_10001CD44(a1, v7);
  sub_1006EA0E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    v9[31] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[30] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    sub_10000588C(&qword_10164BD48);
    v9[29] = 2;
    sub_1006EA188(&qword_10164BD50, &qword_10164BD48, (void (*)(void))sub_1006EA134);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1006EA0E0()
{
  unint64_t result = qword_10164BD40;
  if (!qword_10164BD40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BD40);
  }
  return result;
}

unint64_t sub_1006EA134()
{
  unint64_t result = qword_10164BD58;
  if (!qword_10164BD58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BD58);
  }
  return result;
}

uint64_t sub_1006EA188(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1006EA1F4()
{
  unint64_t result = qword_10164BD70;
  if (!qword_10164BD70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BD70);
  }
  return result;
}

ValueMetadata *type metadata accessor for RoleCategory.CodingKeys()
{
  return &type metadata for RoleCategory.CodingKeys;
}

unsigned char *_s12searchpartyd12RoleCategoryV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006EA32CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Role.CodingKeys()
{
  return &type metadata for Role.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for RolesResponse.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1006EA400);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for RolesResponse.CodingKeys()
{
  return &type metadata for RolesResponse.CodingKeys;
}

unint64_t sub_1006EA43C()
{
  unint64_t result = qword_10164BD78;
  if (!qword_10164BD78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BD78);
  }
  return result;
}

unint64_t sub_1006EA494()
{
  unint64_t result = qword_10164BD80;
  if (!qword_10164BD80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BD80);
  }
  return result;
}

unint64_t sub_1006EA4EC()
{
  unint64_t result = qword_10164BD88;
  if (!qword_10164BD88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BD88);
  }
  return result;
}

unint64_t sub_1006EA544()
{
  unint64_t result = qword_10164BD90;
  if (!qword_10164BD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BD90);
  }
  return result;
}

unint64_t sub_1006EA59C()
{
  unint64_t result = qword_10164BD98;
  if (!qword_10164BD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BD98);
  }
  return result;
}

unint64_t sub_1006EA5F4()
{
  unint64_t result = qword_10164BDA0;
  if (!qword_10164BDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BDA0);
  }
  return result;
}

unint64_t sub_1006EA64C()
{
  unint64_t result = qword_10164BDA8;
  if (!qword_10164BDA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BDA8);
  }
  return result;
}

unint64_t sub_1006EA6A4()
{
  unint64_t result = qword_10164BDB0;
  if (!qword_10164BDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BDB0);
  }
  return result;
}

unint64_t sub_1006EA6FC()
{
  unint64_t result = qword_10164BDB8;
  if (!qword_10164BDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BDB8);
  }
  return result;
}

void *sub_1006EA754(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[7];
    uint64_t v13 = a3[8];
    uint64_t v14 = (void *)((char *)a1 + v12);
    uint64_t v15 = (void *)((char *)a2 + v12);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = (void *)((char *)a1 + v13);
    uint64_t v18 = (void *)((char *)a2 + v13);
    uint64_t v19 = v18[1];
    void *v17 = *v18;
    v17[1] = v19;
    void v17[2] = v18[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1006EA8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1006EA974(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v11);
  uint64_t v14 = (void *)(a2 + v11);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = (void *)(a1 + v12);
  uint64_t v17 = (void *)(a2 + v12);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  v16[2] = v17[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1006EAA74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = a2 + v14;
  *uint64_t v15 = *(void *)(a2 + v14);
  v15[1] = *(void *)(a2 + v14 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[2] = *(void *)(v16 + 16);
  return a1;
}

uint64_t sub_1006EABA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  return a1;
}

uint64_t sub_1006EAC8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  void *v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  void v17[2] = v18[2];
  return a1;
}

uint64_t sub_1006EAD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006EADA8);
}

uint64_t sub_1006EADA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_1006EAECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006EAEE0);
}

uint64_t sub_1006EAEE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for Date();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 28) + 8) = a2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for AccessoryFirmwareUpdateStateInfo()
{
  uint64_t result = qword_10164BE18;
  if (!qword_10164BE18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1006EB040()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1006EB124()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1006EB184()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1006EB1D4(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(56);
  v4._object = (void *)0x8000000101404B30;
  v4._uint64_t countAndFlagsBits = 0xD000000000000029;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x6F43726F72726520;
  v6._object = (void *)0xEB00000000206564;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1006EB2C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[1] = a4;
  uint64_t v6 = sub_10000588C(&qword_10164BE90);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1006EC664();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1006EB434()
{
  if (*v0) {
    return 0x646F43726F727265;
  }
  else {
    return 0x6D6F44726F727265;
  }
}

uint64_t sub_1006EB47C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1006EC360(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006EB4A4(uint64_t a1)
{
  unint64_t v2 = sub_1006EC664();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006EB4E0(uint64_t a1)
{
  unint64_t v2 = sub_1006EC664();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006EB51C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006EC478(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1006EB54C(void *a1)
{
  return sub_1006EB2C0(a1, *v1, v1[1], v1[2]);
}

BOOL sub_1006EB56C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return v2 == v3;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v5) {
    return v2 == v3;
  }
  return result;
}

Swift::Int sub_1006EB5C8()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1006EB62C()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  String.hash(into:)();
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1006EB664()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1006EB6C4()
{
  return sub_1006EB1D4(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t sub_1006EB6D0()
{
  _StringGuts.grow(_:)(117);
  v0._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v0._object = (void *)0x8000000101404AE0;
  String.append(_:)(v0);
  type metadata accessor for UUID();
  sub_1006EBEE8((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x657461647075202CLL;
  v2._object = (void *)0xEE00206574617453;
  String.append(_:)(v2);
  type metadata accessor for AccessoryFirmwareUpdateStateInfo();
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 0x6470557473616C20;
  v3._object = (void *)0xEC00000020657461;
  String.append(_:)(v3);
  type metadata accessor for Date();
  sub_1006EBEE8((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x8000000101404B10;
  v5._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v5);
  sub_10000588C(&qword_101644320);
  _print_unlocked<A, B>(_:_:)();
  v6._uint64_t countAndFlagsBits = 0x4565746164707520;
  v6._object = (void *)0xED000020726F7272;
  String.append(_:)(v6);
  sub_10000588C(&qword_10164BE68);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

void sub_1006EB95C()
{
  type metadata accessor for UUID();
  sub_1006EBEE8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  updated = (int *)type metadata accessor for AccessoryFirmwareUpdateStateInfo();
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + updated[5]));
  type metadata accessor for Date();
  sub_1006EBEE8((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  if (*(void *)(v0 + updated[7] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v2 = v0 + updated[8];
  if (*(void *)(v2 + 8))
  {
    Swift::UInt v3 = *(void *)(v2 + 16);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1006EBB1C()
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1006EBEE8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  updated = (int *)type metadata accessor for AccessoryFirmwareUpdateStateInfo();
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + updated[5]));
  type metadata accessor for Date();
  sub_1006EBEE8((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  if (*(void *)(v0 + updated[7] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v2 = v0 + updated[8];
  if (*(void *)(v2 + 8))
  {
    Swift::UInt v3 = *(void *)(v2 + 16);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1006EBCE4(uint64_t a1, int *a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1006EBEE8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + a2[5]));
  type metadata accessor for Date();
  sub_1006EBEE8((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  if (*(void *)(v2 + a2[7] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v4 = v2 + a2[8];
  if (*(void *)(v4 + 8))
  {
    Swift::UInt v5 = *(void *)(v4 + 16);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Hasher._combine(_:)(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_1006EBEA0()
{
  return sub_1006EBEE8(&qword_10164BE60, (void (*)(uint64_t))type metadata accessor for AccessoryFirmwareUpdateStateInfo);
}

uint64_t sub_1006EBEE8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1006EBF30(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t updated = type metadata accessor for AccessoryFirmwareUpdateStateInfo();
  if (*(unsigned __int8 *)(a1 + *(int *)(updated + 20)) != *(unsigned __int8 *)(a2 + *(int *)(updated + 20))) {
    return 0;
  }
  uint64_t v5 = updated;
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(v5 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = *(void *)(a1 + v6 + 8);
  uint64_t v9 = (void *)(a2 + v6);
  uint64_t v10 = v9[1];
  if (!v8)
  {
    if (v10) {
      return 0;
    }
    goto LABEL_13;
  }
  if (!v10) {
    return 0;
  }
  BOOL v11 = *v7 == *v9 && v8 == v10;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v12 & 1) != 0))
  {
LABEL_13:
    uint64_t v14 = *(int *)(v5 + 32);
    int v15 = (void *)(a1 + v14);
    uint64_t v16 = *(void *)(a1 + v14 + 8);
    uint64_t v17 = (void *)(a2 + v14);
    uint64_t v18 = v17[1];
    if (v16)
    {
      if (v18)
      {
        uint64_t v19 = v15[2];
        uint64_t v20 = v17[2];
        BOOL v21 = *v15 == *v17 && v16 == v18;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v19 == v20) {
          return 1;
        }
      }
    }
    else if (!v18)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void *sub_1006EC044(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

void *assignWithTake for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError()
{
  return &type metadata for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError;
}

unsigned char *storeEnumTagSinglePayload for AccessoryFirmwareUpdateState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006EC278);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryFirmwareUpdateState()
{
  return &type metadata for AccessoryFirmwareUpdateState;
}

unint64_t sub_1006EC2B4()
{
  unint64_t result = qword_10164BE70;
  if (!qword_10164BE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BE70);
  }
  return result;
}

unint64_t sub_1006EC30C()
{
  unint64_t result = qword_10164BE78;
  if (!qword_10164BE78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BE78);
  }
  return result;
}

uint64_t sub_1006EC360(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D6F44726F727265 && a2 == 0xEB000000006E6961;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1006EC478(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164BE80);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_10001CD44(a1, a1[3]);
  sub_1006EC664();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1006EC664()
{
  unint64_t result = qword_10164BE88;
  if (!qword_10164BE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BE88);
  }
  return result;
}

unint64_t sub_1006EC6B8()
{
  unint64_t result = qword_10164BE98;
  if (!qword_10164BE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BE98);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006EC7D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError.CodingKeys()
{
  return &type metadata for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError.CodingKeys;
}

unint64_t sub_1006EC814()
{
  unint64_t result = qword_10164BEA0;
  if (!qword_10164BEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BEA0);
  }
  return result;
}

unint64_t sub_1006EC86C()
{
  unint64_t result = qword_10164BEA8;
  if (!qword_10164BEA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BEA8);
  }
  return result;
}

unint64_t sub_1006EC8C4()
{
  unint64_t result = qword_10164BEB0;
  if (!qword_10164BEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BEB0);
  }
  return result;
}

uint64_t sub_1006EC918()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t sub_1006EC93C@<X0>(uint64_t a1@<X8>)
{
  return sub_1006ECCA8(&qword_101636940, (uint64_t)qword_10170DA70, a1);
}

uint64_t sub_1006EC960@<X0>(uint64_t a1@<X8>)
{
  return sub_1006ECCA8(&qword_101636958, (uint64_t)qword_10170DAB8, a1);
}

uint64_t sub_1006EC984@<X0>(uint64_t a1@<X8>)
{
  return sub_1006ECCA8(&qword_101636A48, (uint64_t)qword_10170DD78, a1);
}

uint64_t sub_1006EC9A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1006ECCA8(&qword_101636B50, (uint64_t)qword_10170DF88, a1);
}

uint64_t sub_1006EC9CC@<X0>(uint64_t a1@<X8>)
{
  return sub_1006ECCA8(&qword_101636BB0, (uint64_t)qword_10170E088, a1);
}

uint64_t sub_1006EC9F0@<X0>(uint64_t a1@<X8>)
{
  if (qword_101636BF0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = sub_100010324(v2, (uint64_t)qword_10170E118);
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_1006ECA98@<X0>(uint64_t a1@<X8>)
{
  return sub_1006ECCA8(&qword_101636D10, (uint64_t)qword_10170E3E8, a1);
}

uint64_t sub_1006ECABC@<X0>(uint64_t a1@<X8>)
{
  return sub_1006ECCA8(&qword_101636FA8, (uint64_t)qword_10170EA78, a1);
}

uint64_t sub_1006ECAE0@<X0>(uint64_t a1@<X8>)
{
  return sub_1006ECCA8(&qword_101636FB0, (uint64_t)qword_10170EA90, a1);
}

uint64_t sub_1006ECB04@<X0>(uint64_t a1@<X8>)
{
  return sub_1006ECCA8(&qword_1016370A0, (uint64_t)qword_10170EC98, a1);
}

uint64_t sub_1006ECB28@<X0>(uint64_t a1@<X8>)
{
  return sub_1006ECCA8(&qword_1016370B0, (uint64_t)qword_10170ECC0, a1);
}

uint64_t sub_1006ECB4C@<X0>(uint64_t a1@<X8>)
{
  return sub_1006ECCA8(&qword_1016370F0, (uint64_t)qword_10170ED28, a1);
}

uint64_t sub_1006ECB70@<X0>(uint64_t a1@<X8>)
{
  return sub_1006ECCA8(&qword_101637160, (uint64_t)qword_10170EE20, a1);
}

uint64_t sub_1006ECB94@<X0>(uint64_t a1@<X8>)
{
  return sub_1006ECCA8(&qword_1016371B8, (uint64_t)qword_10170EEB8, a1);
}

uint64_t sub_1006ECBB8@<X0>(uint64_t a1@<X8>)
{
  if (qword_1016373C8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = sub_100010324(v2, (uint64_t)qword_10170F150);
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_1006ECC60@<X0>(uint64_t a1@<X8>)
{
  return sub_1006ECCA8(&qword_1016375F0, (uint64_t)qword_10170F760, a1);
}

uint64_t sub_1006ECC84@<X0>(uint64_t a1@<X8>)
{
  return sub_1006ECCA8(&qword_101637620, (uint64_t)qword_10170F7B0, a1);
}

uint64_t sub_1006ECCA8@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = sub_100010324(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t sub_1006ECD44()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E100);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170E100);
  if (qword_101636E00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170E628);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1006ECE0C()
{
  v1[2] = v0;
  v1[3] = *v0;
  sub_10000588C(&qword_10164DBB0);
  v1[4] = swift_task_alloc();
  return _swift_task_switch(sub_1006ECEC8, v0, 0);
}

uint64_t sub_1006ECEC8()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = type metadata accessor for TaskPriority();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v1, 1, 1, v4);
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = 0;
  v6[3] = 0;
  v6[4] = v3;
  _OWORD v6[5] = v2;
  swift_retain();
  sub_1000212B0(v1, (uint64_t)&unk_10164BFE0, (uint64_t)v6);
  swift_release();
  sub_10001DAB4(v1, &qword_10164DBB0);
  v5(v1, 1, 1, v4);
  uint64_t v8 = sub_1006F0DD0(&qword_10164BFB0, v7, (void (*)(uint64_t))type metadata accessor for ObservationPruneSchedulerService);
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = v3;
  v9[3] = v8;
  _OWORD v9[4] = v3;
  swift_retain_n();
  sub_1008F5E44(v1, (uint64_t)&unk_10164BFF0, (uint64_t)v9);
  swift_release();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1006ED08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a4;
  sub_10000588C(&qword_101641228);
  v4[16] = swift_task_alloc();
  sub_10000588C(&qword_101639058);
  v4[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FinderStateInfo(0);
  v4[18] = v5;
  v4[19] = *(void *)(v5 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  sub_10000588C(&qword_101639060);
  v4[22] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_101639068);
  v4[23] = v6;
  v4[24] = *(void *)(v6 - 8);
  v4[25] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_101639070);
  v4[26] = v7;
  v4[27] = *(void *)(v7 - 8);
  v4[28] = swift_task_alloc();
  return _swift_task_switch(sub_1006ED2AC, 0, 0);
}

uint64_t sub_1006ED2AC()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639078 + dword_101639078);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v2;
    void *v2 = v0;
    v2[1] = sub_1006ED3E8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006ED3E8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1006ED4E8, 0, 0);
}

uint64_t sub_1006ED4E8()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[30])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[31] = v2;
    void *v2 = v0;
    v2[1] = sub_1006ED6D4;
    uint64_t v3 = v0[25];
    return sub_100867118(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636BE8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170E100);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing FinderStateObserver service.", v8, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_1006ED6D4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1006ED7D0, 0, 0);
}

uint64_t sub_1006ED7D0()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[23];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[32] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1006ED8AC;
  uint64_t v5 = v0[26];
  uint64_t v6 = v0[22];
  return AsyncStream.Iterator.next(isolation:)(v6, 0, 0, v5);
}

uint64_t sub_1006ED8AC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1006ED9A8, 0, 0);
}

uint64_t sub_1006ED9A8()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = sub_10000588C(&qword_101639080);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[27] + 8))(v0[28], v0[26]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  uint64_t v5 = v0[21];
  uint64_t v6 = v0[18];
  uint64_t v7 = v0[19];
  uint64_t v8 = v0[17];
  swift_release();
  uint64_t v9 = v1 + *(int *)(v2 + 48);
  uint64_t v10 = sub_10000588C(&qword_101639088);
  sub_10002FD2C(v9 + *(int *)(v10 + 48), v5);
  sub_1006F1008(v9, v8);
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6);
  uint64_t v12 = (unsigned __int8 *)v0[21];
  if (v11 == 1)
  {
    uint64_t v13 = v0[17];
    sub_10002FD90(v0[21]);
    sub_10001DAB4(v13, &qword_101639058);
LABEL_12:
    uint64_t v17 = (void *)swift_task_alloc();
    v0[32] = v17;
    void *v17 = v0;
    v17[1] = sub_1006ED8AC;
    uint64_t v18 = v0[26];
    uint64_t v19 = v0[22];
    return AsyncStream.Iterator.next(isolation:)(v19, 0, 0, v18);
  }
  uint64_t v14 = (unsigned __int8 *)v0[20];
  sub_10002FD2C(v0[17], (uint64_t)v14);
  if (*v14 == *v12)
  {
    uint64_t v16 = v0[21];
    sub_10002FD90(v0[20]);
    sub_10002FD90(v16);
    goto LABEL_12;
  }
  uint64_t v15 = v0[15];
  return _swift_task_switch(sub_1006EDC50, v15, 0);
}

uint64_t sub_1006EDC50()
{
  *(void *)(v0 + 264) = *(void *)(*(void *)(v0 + 120) + 128);
  swift_retain();
  return _swift_task_switch(sub_1006EDCC4, 0, 0);
}

uint64_t sub_1006EDCC4()
{
  if (v0[33])
  {
    uint64_t v10 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                          + async function pointer to dispatch thunk of XPCActivity.updateCriteria());
    uint64_t v1 = (void *)swift_task_alloc();
    v0[34] = (uint64_t)v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1006EDE60;
    uint64_t v2 = v0[16];
    return v10(v2);
  }
  else
  {
    uint64_t v4 = v0[21];
    uint64_t v5 = v0[16];
    sub_10002FD90(v0[20]);
    sub_10002FD90(v4);
    uint64_t v6 = type metadata accessor for XPCActivity.State();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
    sub_10001DAB4(v0[16], &qword_101641228);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[32] = (uint64_t)v7;
    void *v7 = v0;
    v7[1] = sub_1006ED8AC;
    uint64_t v8 = v0[26];
    uint64_t v9 = v0[22];
    return AsyncStream.Iterator.next(isolation:)(v9, 0, 0, v8);
  }
}

uint64_t sub_1006EDE60()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1006EDF78, 0, 0);
}

uint64_t sub_1006EDF78()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[16];
  sub_10002FD90(v0[20]);
  sub_10002FD90(v1);
  uint64_t v3 = type metadata accessor for XPCActivity.State();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 0, 1, v3);
  sub_10001DAB4(v0[16], &qword_101641228);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[32] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1006ED8AC;
  uint64_t v5 = v0[26];
  uint64_t v6 = v0[22];
  return AsyncStream.Iterator.next(isolation:)(v6, 0, 0, v5);
}

uint64_t sub_1006EE084()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_1006EE114();
}

uint64_t sub_1006EE114()
{
  v1[15] = v0;
  v1[16] = *v0;
  type metadata accessor for DispatchQoS();
  v1[17] = swift_task_alloc();
  return _swift_task_switch(sub_1006EE1CC, v0, 0);
}

uint64_t sub_1006EE1CC()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v2;
    void *v2 = v0;
    v2[1] = sub_1006EE308;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006EE308(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1006EE420, v2, 0);
}

uint64_t sub_1006EE420()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  uint64_t v2 = v0[19];
  if (v2)
  {
    uint64_t v3 = v0[16];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    type metadata accessor for XPCActivity();
    static DispatchQoS.background.getter();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v3;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v2;
    *(void *)(v5 + 24) = v3;
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[20] = v6;
    void *v6 = v0;
    v6[1] = sub_1006EE670;
    uint64_t v7 = v0[17];
    return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(0xD00000000000003ALL, 0x8000000101404BA0, v7, &unk_10164BFC0, v4, &unk_10164BFD0, v5);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636BE8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170E100);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Missing ObservationStoreService.", v11, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_1006EE670(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 168) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1006EE788, v2, 0);
}

uint64_t sub_1006EE788()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[15];
  swift_release();
  *(void *)(v2 + 128) = v1;
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1006EE804(uint64_t a1, uint64_t a2)
{
  v2[16] = a1;
  v2[17] = a2;
  uint64_t v3 = type metadata accessor for XPCActivity.Criteria.Options();
  v2[18] = v3;
  v2[19] = *(void *)(v3 - 8);
  v2[20] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for XPCActivity.Priority();
  v2[21] = v4;
  v2[22] = *(void *)(v4 - 8);
  v2[23] = swift_task_alloc();
  sub_10000588C(&qword_101641270);
  v2[24] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for XPCActivity.Criteria();
  v2[25] = v5;
  v2[26] = *(void *)(v5 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = sub_10000588C(&qword_101639058);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  return _swift_task_switch(sub_1006EE9F0, 0, 0);
}

uint64_t sub_1006EE9F0()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639078 + dword_101639078);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v2;
    void *v2 = v0;
    v2[1] = sub_1006EEB2C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006EEB2C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 256) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1006EEC2C, 0, 0);
}

uint64_t sub_1006EEC2C()
{
  uint64_t v1 = *(void *)(v0 + 256);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 256);
    swift_retain();
    return _swift_task_switch(sub_1006EEE5C, v2, 0);
  }
  else
  {
    if (qword_101636BE8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E100);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 67109376;
      *(_DWORD *)(v0 + 288) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 8) = 1024;
      *(_DWORD *)(v0 + 292) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "finderState:%{BOOL}d isLeechScannerEnabled:%{BOOL}d, prune activity unregistered.", (uint8_t *)v6, 0xEu);
      swift_slowDealloc();
    }

    swift_release();
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 208) + 56))(*(void *)(v0 + 128), 1, 1, *(void *)(v0 + 200));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_1006EEE5C()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = sub_1006F0DD0((unint64_t *)&qword_1016394B0, 255, (void (*)(uint64_t))type metadata accessor for FinderStateObserver);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[33] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1006EEF74;
  uint64_t v4 = v0[32];
  uint64_t v5 = v0[30];
  uint64_t v6 = v0[28];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, v4, v2, 0x6E4965746174735FLL, 0xEC00000029286F66, sub_100033DD4, v1, v6);
}

uint64_t sub_1006EEF74()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1006EF08C, 0, 0);
}

uint64_t sub_1006EF08C()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = type metadata accessor for FinderStateInfo(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, &qword_101639058);
    *(unsigned char *)(v0 + 297) = 0;
    uint64_t v3 = *(void *)(v0 + 256);
    swift_retain();
    return _swift_task_switch(sub_1006EF370, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 272) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1006EF1C0;
    return sub_100908218();
  }
}

uint64_t sub_1006EF1C0(char a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v5 = sub_1006EF9AC;
  }
  else
  {
    *(unsigned char *)(v4 + 296) = a1 & 1;
    uint64_t v5 = sub_1006EF2F0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1006EF2F0()
{
  sub_10002FD90(*(void *)(v0 + 240));
  *(unsigned char *)(v0 + 297) = *(unsigned char *)(v0 + 296);
  uint64_t v1 = *(void *)(v0 + 256);
  swift_retain();
  return _swift_task_switch(sub_1006EF370, v1, 0);
}

uint64_t sub_1006EF370()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = sub_1006F0DD0((unint64_t *)&qword_1016394B0, 255, (void (*)(uint64_t))type metadata accessor for FinderStateObserver);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[35] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1006EF484;
  uint64_t v4 = v0[32];
  uint64_t v6 = v0[28];
  uint64_t v5 = v0[29];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, v4, v2, 0x6E4965746174735FLL, 0xEC00000029286F66, sub_100033DD4, v1, v6);
}

uint64_t sub_1006EF484()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1006EF59C, 0, 0);
}

uint64_t sub_1006EF59C()
{
  uint64_t v1 = *(unsigned __int8 **)(v0 + 232);
  uint64_t v2 = type metadata accessor for FinderStateInfo(0);
  int v3 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  int v4 = *(unsigned __int8 *)(v0 + 297);
  if (v3 != 1)
  {
    int v10 = *v1;
    sub_10002FD90((uint64_t)v1);
    if (((v10 | v4) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v11 = *(void *)(v0 + 200);
    uint64_t v12 = *(void *)(v0 + 208);
    uint64_t v13 = *(void *)(v0 + 192);
    sub_10001D074(*(void *)(v0 + 136), v13, &qword_101641270);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11) == 1)
    {
      uint64_t v14 = *(void *)(v0 + 184);
      uint64_t v15 = *(void *)(v0 + 168);
      uint64_t v16 = *(void *)(v0 + 176);
      sub_10001DAB4(*(void *)(v0 + 192), &qword_101641270);
      (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v14, enum case for XPCActivity.Priority.maintenance(_:), v15);
      sub_10000588C(&qword_101641288);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_101342130;
      static XPCActivity.Criteria.Options.requiresClassC.getter();
      *(void *)(v0 + 120) = v17;
      sub_1006F0DD0(&qword_1016394C0, 255, (void (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options);
      sub_10000588C(&qword_101641290);
      sub_1002F6D2C();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)();
      swift_release();
    }
    else
    {
      uint64_t v19 = *(void *)(v0 + 208);
      uint64_t v18 = *(void *)(v0 + 216);
      uint64_t v21 = *(void *)(v0 + 192);
      uint64_t v20 = *(void *)(v0 + 200);
      uint64_t v22 = *(void *)(v0 + 128);
      swift_release();
      char v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32);
      v23(v18, v21, v20);
      v23(v22, v18, v20);
    }
    uint64_t v9 = 0;
    goto LABEL_13;
  }
  sub_10001DAB4((uint64_t)v1, &qword_101639058);
  if (v4) {
    goto LABEL_9;
  }
LABEL_3:
  if (qword_101636BE8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170E100);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 67109376;
    *(_DWORD *)(v0 + 288) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 8) = 1024;
    *(_DWORD *)(v0 + 292) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "finderState:%{BOOL}d isLeechScannerEnabled:%{BOOL}d, prune activity unregistered.", (uint8_t *)v8, 0xEu);
    swift_slowDealloc();
  }

  swift_release();
  uint64_t v9 = 1;
LABEL_13:
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 208) + 56))(*(void *)(v0 + 128), v9, 1, *(void *)(v0 + 200));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_1006EF9AC()
{
  sub_10002FD90(*(void *)(v0 + 240));
  *(unsigned char *)(v0 + 297) = 0;
  uint64_t v1 = *(void *)(v0 + 256);
  swift_retain();
  return _swift_task_switch(sub_1006EF370, v1, 0);
}

uint64_t sub_1006EFA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for XPCActivity.State();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_1006EFAFC, 0, 0);
}

uint64_t sub_1006EFAFC()
{
  uint64_t v31 = v0;
  if (qword_101636BE8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v5 = type metadata accessor for Logger();
  v0[13] = v5;
  v0[14] = sub_100010324(v5, (uint64_t)qword_10170E100);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v1, v4, v2);
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[12];
  uint64_t v11 = v0[9];
  uint64_t v12 = v0[10];
  if (v9)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    sub_1006F0DD0(&qword_1016394A0, 255, (void (*)(uint64_t))&type metadata accessor for XPCActivity.State);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_1008FA0F0(v14, v15, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Publisher prune activity state: %s.", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v0[12], v0[9]);
  }

  uint64_t v18 = v0[10];
  uint64_t v17 = v0[11];
  uint64_t v19 = v0[9];
  v6(v17, v0[7], v19);
  int v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 88))(v17, v19);
  if (v20 != enum case for XPCActivity.State.checkIn(_:) && v20 != enum case for XPCActivity.State.wait(_:))
  {
    if (v20 == enum case for XPCActivity.State.run(_:))
    {
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      uint64_t v21 = v0[8];
      OS_dispatch_queue.sync<A>(execute:)();
      v0[15] = 0;
      v0[16] = sub_1010AC058(v0[2]);
      swift_bridgeObjectRelease();
      uint64_t v22 = sub_1006EFF98;
      uint64_t v23 = v21;
      uint64_t v24 = 0;
      goto LABEL_14;
    }
    if (v20 == enum case for XPCActivity.State.defer(_:))
    {
      type metadata accessor for XPCActivity();
      sub_1006F0DD0(&qword_101639498, 255, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
      uint64_t v25 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v27 = v26;
      uint64_t v22 = sub_1002D637C;
      uint64_t v23 = v25;
      uint64_t v24 = v27;
LABEL_14:
      return _swift_task_switch(v22, v23, v24);
    }
    if (v20 != enum case for XPCActivity.State.continue(_:)
      && v20 != enum case for XPCActivity.State.done(_:)
      && v20 != enum case for XPCActivity.State.invalidated(_:))
    {
      v16(v0[11], v0[9]);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  char v28 = (uint64_t (*)(void))v0[1];
  return v28();
}

uint64_t sub_1006EFF98()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = sub_101107D84(*(void *)(v0 + 128));
  *(void *)(v0 + 136) = v1;
  *(void *)(v0 + 144) = v2;
  *(unsigned char *)(v0 + 184) = v3;
  if (v1)
  {
    uint64_t v4 = sub_1006F04A8;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1006F0030;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1006F0030()
{
  if (qword_101636E00 != -1) {
    swift_once();
  }
  sub_100010324(*(void *)(v0 + 104), (uint64_t)qword_10170E628);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    char v3 = *(unsigned char *)(v0 + 184);
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    if (v3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v4;
    }
    *(void *)(v0 + 32) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Scheduled observation purge removed %ld observations.", v5, 0xCu);
    swift_slowDealloc();
  }

  os_log_type_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v7;
  void *v7 = v0;
  v7[1] = sub_1006F01C0;
  return sub_101103D30();
}

uint64_t sub_1006F01C0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1006F06C0, 0, 0);
  }
  else
  {
    char v3 = (void *)swift_task_alloc();
    *(void *)(v2 + 168) = v3;
    *char v3 = v2;
    v3[1] = sub_1006F032C;
    return sub_101107ECC();
  }
}

uint64_t sub_1006F032C()
{
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1006F08D0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    type metadata accessor for XPCActivity();
    sub_1006F0DD0(&qword_101639498, 255, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v7 = v6;
    uint64_t v2 = sub_1002D65DC;
    uint64_t v3 = v5;
    uint64_t v4 = v7;
  }
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1006F04A8()
{
  swift_bridgeObjectRelease();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to run scheduled obsevation purge: %{public}@.", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  type metadata accessor for XPCActivity();
  sub_1006F0DD0(&qword_101639498, 255, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002D65DC, v7, v6);
}

uint64_t sub_1006F06C0()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to run scheduled obsevation purge: %{public}@.", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  type metadata accessor for XPCActivity();
  sub_1006F0DD0(&qword_101639498, 255, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002D65DC, v7, v6);
}

uint64_t sub_1006F08D0()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to run scheduled obsevation purge: %{public}@.", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  type metadata accessor for XPCActivity();
  sub_1006F0DD0(&qword_101639498, 255, (void (*)(uint64_t))&type metadata accessor for XPCActivity);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1002D65DC, v7, v6);
}

uint64_t sub_1006F0AE0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ObservationPruneSchedulerService()
{
  return self;
}

uint64_t sub_1006F0B44()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_1006ECE0C();
}

uint64_t sub_1006F0BD0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1006F0DD0(&qword_10164BFB0, a2, (void (*)(uint64_t))type metadata accessor for ObservationPruneSchedulerService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1006F0C28()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006F0C38(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001D2E4;
  return sub_1006EE804(a1, a2);
}

uint64_t sub_1006F0CE8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006F0D20(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_100033F68;
  return sub_1006EFA28(a1, a2, v6);
}

uint64_t sub_1006F0DD0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1006F0E18()
{
  return sub_1006F0EE8(48);
}

uint64_t sub_1006F0E20(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100033F68;
  return sub_1006ED08C(a1, v4, v5, v6);
}

uint64_t sub_1006F0EE0()
{
  return sub_1006F0EE8(40);
}

uint64_t sub_1006F0EE8(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1006F0F34()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  void *v2 = v1;
  v2[1] = sub_100033F68;
  return sub_1006EE114();
}

uint64_t sub_1006F1008(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101639058);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006F1070()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1006F10D0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1006F1120()
{
  char v1 = *v0;
  v2._uint64_t countAndFlagsBits = 0x203A4D6F427BLL;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  if ((v1 & 4) != 0) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if ((v1 & 4) != 0) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 125;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

ValueMetadata *type metadata accessor for ExtraKeyBits()
{
  return &type metadata for ExtraKeyBits;
}

unint64_t sub_1006F11CC()
{
  unint64_t result = qword_10164BFF8;
  if (!qword_10164BFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164BFF8);
  }
  return result;
}

unint64_t sub_1006F1220()
{
  unint64_t result = qword_10164C000;
  if (!qword_10164C000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C000);
  }
  return result;
}

uint64_t sub_1006F1274@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v1 = sub_10000588C(&qword_101641B60);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v31 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FMNAccountType();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMNAuthenticationProvider();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for FMNAccountType.secureLocations(_:), v6);
  static FMNAuthenticationProvider.configurationURL(accountType:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    uint64_t v17 = &qword_101649E40;
    uint64_t v18 = (uint64_t)v12;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    URLComponents.init(url:resolvingAgainstBaseURL:)();
    uint64_t v19 = v31;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v3, 1, v4) != 1)
    {
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
      uint64_t v26 = v30;
      v25(v30, v3, v4);
      uint64_t v27 = (void (*)(unsigned char *, void))URLComponents.path.modify();
      v28._uint64_t countAndFlagsBits = 0x6769666E6F63;
      v28._object = (void *)0xE600000000000000;
      String.append(_:)(v28);
      v27(v33, 0);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v25)(v32, v26, v4);
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v17 = &qword_101641B60;
    uint64_t v18 = (uint64_t)v3;
  }
  sub_10001DAB4(v18, v17);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100010324(v20, (uint64_t)qword_10170EC30);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "No url found in account bag.", v23, 2u);
    swift_slowDealloc();
  }

  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.path.setter();
  return URLComponents.host.setter();
}

uint64_t sub_1006F1770()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170E118);
  sub_100010324(v0, (uint64_t)qword_10170E118);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1006F188C()
{
  uint64_t v0 = type metadata accessor for UUID();
  sub_10001E384(v0, qword_10170E130);
  sub_100010324(v0, (uint64_t)qword_10170E130);
  uint64_t v1 = String.utf8Data.getter();
  unint64_t v3 = v2;
  sub_1000362FC();
  DataProtocol.stableUUID.getter();
  return sub_10001CFB8(v1, v3);
}

unint64_t sub_1006F1934(char a1)
{
  unint64_t result = 0x6556747065636361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4565727574616566;
      break;
    case 2:
    case 3:
    case 7:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 4:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000016;
      break;
    case 6:
      unint64_t result = 0xD000000000000019;
      break;
    case 8:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000017;
      break;
    case 10:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 11:
      unint64_t result = 0xD000000000000020;
      break;
    case 12:
      unint64_t result = 0xD000000000000025;
      break;
    case 13:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 14:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 15:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1006F1B24(char a1)
{
  unint64_t result = 0x6556747065636361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4565727574616566;
      break;
    case 2:
    case 3:
    case 7:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 4:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000016;
      break;
    case 6:
      unint64_t result = 0xD000000000000019;
      break;
    case 8:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000017;
      break;
    case 10:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 11:
      unint64_t result = 0xD000000000000020;
      break;
    case 12:
      unint64_t result = 0xD000000000000025;
      break;
    case 13:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 14:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 15:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1006F1D14(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1006F1934(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1006F1934(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1006F1DA0()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1006F1934(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1006F1E04()
{
  sub_1006F1934(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1006F1E58()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1006F1934(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1006F1EB8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1006F36F4(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1006F1EE8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1006F1934(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1006F1F14()
{
  return sub_1006F1B24(*v0);
}

unint64_t sub_1006F1F1C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1006F36F4(a1);
  *a2 = result;
  return result;
}

void sub_1006F1F44(unsigned char *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_1006F1F50(uint64_t a1)
{
  unint64_t v2 = sub_1006F401C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006F1F8C(uint64_t a1)
{
  unint64_t v2 = sub_1006F401C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006F1FC8()
{
  _StringGuts.grow(_:)(436);
  v1._uint64_t countAndFlagsBits = 0xD000000000000024;
  v1._object = (void *)0x8000000101404CA0;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0xD000000000000011;
  v3._object = (void *)0x8000000101404CD0;
  String.append(_:)(v3);
  if (v0[8]) {
    uint64_t v4 = 1702195828;
  }
  else {
    uint64_t v4 = 0x65736C6166;
  }
  if (v0[8]) {
    unint64_t v5 = 0xE400000000000000;
  }
  else {
    unint64_t v5 = 0xE500000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x8000000101404CF0;
  v7._uint64_t countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v7);
  Double.write<A>(to:)();
  v8._object = (void *)0x8000000101404D20;
  v8._uint64_t countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v8);
  Double.write<A>(to:)();
  v9._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v9._object = (void *)0x8000000101404D50;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0xD000000000000018;
  v11._object = (void *)0x8000000101404D70;
  String.append(_:)(v11);
  Double.write<A>(to:)();
  v12._object = (void *)0x8000000101404D90;
  v12._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v12);
  Double.write<A>(to:)();
  v13._uint64_t countAndFlagsBits = 0xD000000000000021;
  v13._object = (void *)0x8000000101404DB0;
  String.append(_:)(v13);
  if (v0[56]) {
    uint64_t v14 = 1702195828;
  }
  else {
    uint64_t v14 = 0x65736C6166;
  }
  if (v0[56]) {
    unint64_t v15 = 0xE400000000000000;
  }
  else {
    unint64_t v15 = 0xE500000000000000;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._object = (void *)0x8000000101404DE0;
  v17._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v17);
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = Set.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 0xD000000000000019;
  v19._object = (void *)0x8000000101404E00;
  String.append(_:)(v19);
  Double.write<A>(to:)();
  v20._object = (void *)0x8000000101404E20;
  v20._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v20);
  if (v0[80]) {
    uint64_t v21 = 1702195828;
  }
  else {
    uint64_t v21 = 0x65736C6166;
  }
  if (v0[80]) {
    unint64_t v22 = 0xE400000000000000;
  }
  else {
    unint64_t v22 = 0xE500000000000000;
  }
  unint64_t v23 = v22;
  String.append(_:)(*(Swift::String *)&v21);
  swift_bridgeObjectRelease();
  v24._object = (void *)0x8000000101404E40;
  v24._uint64_t countAndFlagsBits = 0xD000000000000024;
  String.append(_:)(v24);
  Double.write<A>(to:)();
  v25._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v25._object = (void *)0x8000000101404E70;
  String.append(_:)(v25);
  Double.write<A>(to:)();
  v26._object = (void *)0x8000000101404E90;
  v26._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v26);
  Double.write<A>(to:)();
  return 0;
}

uint64_t sub_1006F23DC@<X0>(uint64_t a1@<X8>)
{
  if (qword_101636BF8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = sub_100010324(v2, (uint64_t)qword_10170E130);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

__n128 sub_1006F2484@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1006F3740(a1, v10);
  if (!v2)
  {
    long long v5 = v10[11];
    *(_OWORD *)(a2 + 160) = v10[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(_OWORD *)(a2 + 192) = v10[12];
    long long v6 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v6;
    long long v7 = v10[9];
    *(_OWORD *)(a2 + 128) = v10[8];
    *(_OWORD *)(a2 + 144) = v7;
    long long v8 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v8;
    long long v9 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v9;
    __n128 result = (__n128)v10[1];
    *(_OWORD *)a2 = v10[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1006F24F0(void *a1)
{
  return sub_1006F2508(a1);
}

uint64_t sub_1006F2508(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10164C188);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1006F401C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12[0]) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12[0]) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12[0]) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&v12[0] = *(void *)(v3 + 64);
    char v14 = 8;
    sub_10000588C(&qword_101647EA0);
    sub_1006F411C((unint64_t *)&qword_10164C190);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12[0]) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12[0]) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12[0]) = 12;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12[0]) = 13;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12[0]) = 14;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v9 = *(_OWORD *)(v3 + 168);
    void v12[2] = *(_OWORD *)(v3 + 152);
    v12[3] = v9;
    v12[4] = *(_OWORD *)(v3 + 184);
    uint64_t v13 = *(void *)(v3 + 200);
    long long v10 = *(_OWORD *)(v3 + 136);
    v12[0] = *(_OWORD *)(v3 + 120);
    v12[1] = v10;
    char v14 = 15;
    sub_1006F4180();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1006F2918()
{
  qword_10170E148 = (uint64_t)&_swiftEmptySetSingleton;
}

unint64_t sub_1006F292C(char a1)
{
  unint64_t result = 0xD000000000000017;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000016;
      break;
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0x4B664F6F4E78616DLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    case 7:
    case 9:
      unint64_t result = 0xD000000000000028;
      break;
    case 8:
      unint64_t result = 0xD000000000000026;
      break;
    case 10:
      unint64_t result = 0xD00000000000002ALL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1006F2A5C(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164C258);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1006F5228();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[6] = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[5] = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1006F2D24()
{
  return sub_1006F292C(*v0);
}

uint64_t sub_1006F2D2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1006F49B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006F2D54(uint64_t a1)
{
  unint64_t v2 = sub_1006F5228();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006F2D90(uint64_t a1)
{
  unint64_t v2 = sub_1006F5228();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1006F2DCC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1006F4DDC(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1006F2E28(void *a1)
{
  return sub_1006F2A5C(a1);
}

uint64_t sub_1006F2E40()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OwnedDeviceConfigsDefaults()
{
  return self;
}

uint64_t sub_1006F2E74()
{
  type metadata accessor for OwnedDevicePublishPolicy();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  qword_10170E150 = result;
  return result;
}

uint64_t type metadata accessor for OwnedDevicePublishPolicy()
{
  return self;
}

uint64_t destroy for SecureLocationsConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SecureLocationsConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  uint64_t v5 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v5;
  uint64_t v6 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v6;
  uint64_t v7 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SecureLocationsConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(unsigned char *)(a1 + 122) = *(unsigned char *)(a2 + 122);
  *(unsigned char *)(a1 + 123) = *(unsigned char *)(a2 + 123);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SecureLocationsConfig(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for SecureLocationsConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(unsigned char *)(a1 + 122) = *(unsigned char *)(a2 + 122);
  *(unsigned char *)(a1 + 123) = *(unsigned char *)(a2 + 123);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  uint64_t v4 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 208)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 208) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 208) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsConfig()
{
  return &type metadata for SecureLocationsConfig;
}

unint64_t sub_1006F3334(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1006F3364();
  unint64_t result = sub_1006F33B8();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1006F3364()
{
  unint64_t result = qword_101660F40;
  if (!qword_101660F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101660F40);
  }
  return result;
}

unint64_t sub_1006F33B8()
{
  unint64_t result = qword_10164C160;
  if (!qword_10164C160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C160);
  }
  return result;
}

id sub_1006F340C()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  long long v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v4 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v24 = v4;
  id result = [self currentDevice];
  if (result)
  {
    uint64_t v6 = result;
    id v7 = [result serverFriendlyDescription];

    if (v7)
    {
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v23 = v4;
      unint64_t v24 = 0x8000000000000000;
      sub_10016C0FC(v8, v10, 0xD000000000000011, 0x80000001013F64E0, isUniquelyReferenced_nonNull_native);
      unint64_t v12 = v23;
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100163690(0xD000000000000011, 0x80000001013F64E0);
      swift_bridgeObjectRelease();
      unint64_t v12 = v24;
    }
    char v13 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v23 = v12;
    sub_10016C0FC(49, 0xE100000000000000, 0x562D747065636341, 0xEE006E6F69737265, v13);
    unint64_t v14 = v23;
    swift_bridgeObjectRelease();
    char v15 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v23 = v14;
    sub_10016C0FC(0xD000000000000010, 0x80000001013F87B0, 0x2D746E65746E6F43, 0xEC00000065707954, v15);
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    Date.init()();
    uint64_t v16 = Date.epoch.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    unint64_t v23 = v16;
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v19 = v18;
    unint64_t v20 = v24;
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v23 = v20;
    unint64_t v24 = 0x8000000000000000;
    sub_10016C0FC(v17, v19, 0xD000000000000015, 0x80000001013F87D0, v21);
    unint64_t v22 = v23;
    swift_bridgeObjectRelease();
    return (id)v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1006F36F4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A22E8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0x10) {
    return 16;
  }
  else {
    return v3;
  }
}

uint64_t sub_1006F3740@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10164C168);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  char v129 = a1;
  sub_10001CD44(a1, v9);
  sub_1006F401C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v129);
  }
  uint64_t v10 = v6;
  LOBYTE(v99) = 0;
  uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v12) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v11;
  }
  LOBYTE(v99) = 1;
  int v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v85 = v13;
  LOBYTE(v99) = 2;
  double v15 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)());
  LODWORD(v84) = v14 == 2;
  if (v16) {
    double v17 = 100.0;
  }
  else {
    double v17 = v15;
  }
  LOBYTE(v99) = 3;
  double v18 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)());
  if (v19) {
    double v20 = 604800.0;
  }
  else {
    double v20 = v18;
  }
  LOBYTE(v99) = 4;
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v22) {
    uint64_t v23 = 5;
  }
  else {
    uint64_t v23 = v21;
  }
  LOBYTE(v99) = 5;
  double v24 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)());
  uint64_t v83 = v23;
  if (v25) {
    double v26 = 3600.0;
  }
  else {
    double v26 = v24;
  }
  LOBYTE(v99) = 6;
  double v27 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)());
  if (v28) {
    double v29 = 120.0;
  }
  else {
    double v29 = v27;
  }
  LOBYTE(v99) = 7;
  int v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v99) = 9;
  double v31 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)());
  LODWORD(v82) = v30;
  DWORD2(v81) = v14;
  if (v32) {
    double v34 = 120.0;
  }
  else {
    double v34 = v31;
  }
  sub_10000588C(&qword_101647EA0);
  LOBYTE(v86) = 8;
  sub_1006F411C(&qword_10164C178);
  uint64_t v35 = v5;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v36 = v99;
  if (!v99)
  {
    if (qword_101636C00 != -1) {
      swift_once();
    }
    uint64_t v36 = qword_10170E148;
    swift_bridgeObjectRetain();
  }
  LOBYTE(v99) = 10;
  swift_bridgeObjectRetain();
  LODWORD(v81) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  DWORD2(v80) = v81 == 2;
  LOBYTE(v99) = 11;
  double v37 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)());
  if (v38) {
    double v39 = 1800.0;
  }
  else {
    double v39 = v37;
  }
  LOBYTE(v99) = 12;
  uint64_t v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v41) {
    uint64_t v42 = 5;
  }
  else {
    uint64_t v42 = v40;
  }
  LOBYTE(v99) = 13;
  double v43 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)());
  if (v44) {
    double v45 = 900.0;
  }
  else {
    double v45 = v43;
  }
  LOBYTE(v99) = 14;
  double v46 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)());
  if (v47) {
    double v48 = 1000.0;
  }
  else {
    double v48 = v46;
  }
  LOBYTE(v86) = 15;
  sub_1006F4070();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v75 = (v84 | BYTE8(v81)) & 1;
  int v76 = v82 & 1;
  unint64_t v74 = v99;
  int v78 = (BYTE8(v80) | v81) & 1;
  uint64_t v77 = v101;
  uint64_t v72 = v102;
  unint64_t v49 = *(void *)&v104;
  uint64_t v84 = v105;
  unint64_t v79 = v106;
  long long v80 = v100;
  long long v81 = v107;
  uint64_t v82 = v103;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v35);
  if (v49)
  {
    unint64_t v50 = v49;
    uint64_t v51 = (v74 >> 8) & 1;
    int v52 = v74 & 1;
    uint64_t v53 = (v74 >> 16) & 1;
    int v54 = v72 & 1;
    uint64_t v55 = (v74 >> 24) & 1;
  }
  else
  {
    uint64_t v84 = 808334129;
    *((void *)&v81 + 1) = 0xE300000000000000;
    uint64_t v82 = 808334897;
    unint64_t v50 = 0xE400000000000000;
    int v52 = 1;
    *(void *)&long long v81 = 3157561;
    uint64_t v77 = 0x417E133800000000;
    *((void *)&v80 + 1) = 0x416E133800000000;
    *(void *)&long long v80 = 5;
    uint64_t v51 = 1;
    uint64_t v53 = 1;
    uint64_t v55 = 1;
    int v54 = 1;
    unint64_t v79 = 0xE400000000000000;
  }
  uint64_t v56 = v85;
  *(void *)&long long v86 = v85;
  char v58 = v75;
  char v57 = v76;
  BYTE8(v86) = v75;
  *(double *)&long long v87 = v17;
  *((double *)&v87 + 1) = v20;
  uint64_t v59 = v83;
  *(void *)&long long v88 = v83;
  *((double *)&v88 + 1) = v26;
  *(double *)&long long v89 = v29;
  BYTE8(v89) = v76;
  *(void *)&long long v90 = v36;
  *((double *)&v90 + 1) = v34;
  LOBYTE(v91) = v78;
  *((double *)&v91 + 1) = v39;
  *(void *)&long long v92 = v42;
  double v73 = v45;
  *((double *)&v92 + 1) = v45;
  *(double *)&long long v93 = v48;
  double v60 = v48;
  LODWORD(v72) = v52;
  BYTE8(v93) = v52;
  uint64_t v70 = v53;
  uint64_t v71 = v51;
  BYTE9(v93) = v51;
  BYTE10(v93) = v53;
  uint64_t v69 = v55;
  BYTE11(v93) = v55;
  long long v94 = v80;
  uint64_t v61 = v77;
  *(void *)&long long v95 = v77;
  HIDWORD(v68) = v54;
  BYTE8(v95) = v54;
  *(void *)&long long v96 = v82;
  *((void *)&v96 + 1) = v50;
  unint64_t v74 = v50;
  *(void *)&long long v97 = v84;
  *((void *)&v97 + 1) = v79;
  long long v98 = v81;
  sub_1006F40C4((uint64_t)&v86);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v129);
  uint64_t v99 = v56;
  LOBYTE(v100) = v58;
  *(_DWORD *)((char *)&v100 + 1) = v128[0];
  DWORD1(v100) = *(_DWORD *)((char *)v128 + 3);
  *((double *)&v100 + 1) = v17;
  uint64_t v101 = *(void *)&v20;
  uint64_t v102 = v59;
  uint64_t v103 = *(void *)&v26;
  double v104 = v29;
  LOBYTE(v105) = v57;
  *(_DWORD *)((char *)&v105 + 1) = *(_DWORD *)v127;
  HIDWORD(v105) = *(_DWORD *)&v127[3];
  unint64_t v106 = v36;
  *(double *)&long long v107 = v34;
  BYTE8(v107) = v78;
  HIDWORD(v107) = *(_DWORD *)&v126[3];
  *(_DWORD *)((char *)&v107 + 9) = *(_DWORD *)v126;
  double v108 = v39;
  uint64_t v109 = v42;
  double v110 = v73;
  double v111 = v60;
  char v112 = v72;
  char v113 = v71;
  char v114 = v70;
  char v115 = v69;
  long long v116 = v80;
  uint64_t v117 = v61;
  char v118 = BYTE4(v68);
  *(_DWORD *)&v119[3] = *(_DWORD *)&v125[3];
  *(_DWORD *)uint64_t v119 = *(_DWORD *)v125;
  uint64_t v120 = v82;
  unint64_t v121 = v74;
  uint64_t v122 = v84;
  unint64_t v123 = v79;
  long long v124 = v81;
  uint64_t result = sub_100551984((uint64_t)&v99);
  long long v62 = v97;
  a2[10] = v96;
  a2[11] = v62;
  a2[12] = v98;
  long long v63 = v93;
  a2[6] = v92;
  a2[7] = v63;
  long long v64 = v95;
  a2[8] = v94;
  a2[9] = v64;
  long long v65 = v89;
  a2[2] = v88;
  a2[3] = v65;
  long long v66 = v91;
  a2[4] = v90;
  a2[5] = v66;
  long long v67 = v87;
  *a2 = v86;
  a2[1] = v67;
  return result;
}

unint64_t sub_1006F401C()
{
  unint64_t result = qword_10164C170;
  if (!qword_10164C170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C170);
  }
  return result;
}

unint64_t sub_1006F4070()
{
  unint64_t result = qword_10164C180;
  if (!qword_10164C180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C180);
  }
  return result;
}

uint64_t sub_1006F40C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1006F411C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101647EA0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1006F4180()
{
  unint64_t result = qword_10164C198;
  if (!qword_10164C198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C198);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsConfigRequest()
{
  return &type metadata for SecureLocationsConfigRequest;
}

uint64_t sub_1006F41E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006F41F8);
}

uint64_t sub_1006F41F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for URLComponents();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1006F42F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006F4304);
}

uint64_t sub_1006F4304(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FMNAccountType();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for URLComponents();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for SecureLocationsConfigEndpoint()
{
  uint64_t result = qword_10164C1F8;
  if (!qword_10164C1F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SecureLocationsConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SecureLocationsConfig.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *uint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006F45B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsConfig.CodingKeys()
{
  return &type metadata for SecureLocationsConfig.CodingKeys;
}

uint64_t destroy for OwnedDeviceConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OwnedDeviceConfig(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OwnedDeviceConfig(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for OwnedDeviceConfig(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OwnedDeviceConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OwnedDeviceConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceConfig()
{
  return &type metadata for OwnedDeviceConfig;
}

unint64_t sub_1006F48B4()
{
  unint64_t result = qword_10164C230;
  if (!qword_10164C230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C230);
  }
  return result;
}

unint64_t sub_1006F490C()
{
  unint64_t result = qword_10164C238;
  if (!qword_10164C238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C238);
  }
  return result;
}

unint64_t sub_1006F4964()
{
  unint64_t result = qword_10164C240;
  if (!qword_10164C240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C240);
  }
  return result;
}

uint64_t sub_1006F49B8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000017 && a2 == 0x8000000101404EB0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000101404ED0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000101404EF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000101404F10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4B664F6F4E78616DLL && a2 == 0xEB00000000737965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000101404F30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000101404F50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000028 && a2 == 0x8000000101404F70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000026 && a2 == 0x8000000101404FA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000028 && a2 == 0x8000000101404FD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD00000000000002ALL && a2 == 0x8000000101405000)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t sub_1006F4DDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10164C248);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1006F5228();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v45 = 0;
  char v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v44 = 1;
  char v10 = KeyedDecodingContainer.decode(_:forKey:)();
  char v43 = 2;
  int v34 = KeyedDecodingContainer.decode(_:forKey:)();
  char v42 = 3;
  int v33 = KeyedDecodingContainer.decode(_:forKey:)();
  char v41 = 4;
  uint64_t v32 = KeyedDecodingContainer.decode(_:forKey:)();
  char v40 = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  char v39 = 6;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  char v38 = 7;
  int v30 = KeyedDecodingContainer.decode(_:forKey:)();
  char v37 = 8;
  uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
  char v36 = 9;
  uint64_t v29 = v15;
  swift_bridgeObjectRetain();
  uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v28 = v16;
  char v35 = 10;
  swift_bridgeObjectRetain();
  uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v18 = v17;
  int v24 = v10 & 1;
  int v25 = v9 & 1;
  v34 &= 1u;
  char v19 = v33 & 1;
  char v20 = v30 & 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v21 = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v22 = v28;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)a2 = v25;
  *(unsigned char *)(a2 + 1) = v24;
  *(unsigned char *)(a2 + 2) = v34;
  *(unsigned char *)(a2 + 3) = v19;
  *(void *)(a2 + 8) = v32;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v14;
  *(unsigned char *)(a2 + 32) = v20;
  *(void *)(a2 + 40) = v31;
  *(void *)(a2 + 48) = v21;
  *(void *)(a2 + 56) = v27;
  *(void *)(a2 + 64) = v22;
  *(void *)(a2 + 72) = v26;
  *(void *)(a2 + 80) = v18;
  return result;
}

unint64_t sub_1006F5228()
{
  unint64_t result = qword_10164C250;
  if (!qword_10164C250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C250);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OwnedDeviceConfig.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1006F5348);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceConfig.CodingKeys()
{
  return &type metadata for OwnedDeviceConfig.CodingKeys;
}

unint64_t sub_1006F5384()
{
  unint64_t result = qword_10164C260;
  if (!qword_10164C260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C260);
  }
  return result;
}

unint64_t sub_1006F53DC()
{
  unint64_t result = qword_10164C268;
  if (!qword_10164C268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C268);
  }
  return result;
}

unint64_t sub_1006F5434()
{
  unint64_t result = qword_10164C270;
  if (!qword_10164C270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C270);
  }
  return result;
}

void *sub_1006F5488(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v18 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v6 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v6;
    uint64_t v7 = a2[7];
    uint64_t v8 = a2[8];
    *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
    uint64_t v9 = a2[9];
    *(void *)(a1 + 64) = v8;
    *(void *)(a1 + 72) = v9;
    uint64_t v10 = a3[6];
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (uint64_t *)((char *)a2 + v10);
    *(void *)(a1 + 56) = v7;
    uint64_t v13 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    uint64_t v14 = *((void *)v13 - 1);
    uint64_t v15 = *(unsigned int (**)(void *, uint64_t, int *))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      uint64_t v16 = sub_10000588C(&qword_101649E50);
      memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
      uint64_t v17 = a2;
    }
    else
    {
      uint64_t v78 = v14;
      uint64_t v19 = v12[1];
      *uint64_t v11 = *v12;
      v11[1] = v19;
      uint64_t v20 = v12[3];
      void v11[2] = v12[2];
      v11[3] = v20;
      uint64_t v21 = v12[5];
      v11[4] = v12[4];
      uint64_t v11[5] = v21;
      *((_WORD *)v11 + 24) = *((_WORD *)v12 + 24);
      *((unsigned char *)v11 + 72) = *((unsigned char *)v12 + 72);
      uint64_t v22 = v12[8];
      v11[7] = v12[7];
      unsigned char v11[8] = v22;
      uint64_t v23 = v13[10];
      __dst = (char *)v11 + v23;
      unint64_t v79 = (char *)v12 + v23;
      uint64_t v24 = type metadata accessor for URL();
      uint64_t v25 = *(void *)(v24 - 8);
      uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v76 = v25;
      if (v26(v79, 1, v24))
      {
        uint64_t v27 = sub_10000588C(&qword_101649E40);
        memcpy(__dst, v79, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(__dst, v79, v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v24);
      }
      uint64_t v17 = a2;
      uint64_t v28 = v24;
      uint64_t v29 = v13[11];
      int v30 = (char *)v11 + v29;
      uint64_t v31 = (char *)v12 + v29;
      if (v26((char *)v12 + v29, 1, v28))
      {
        uint64_t v32 = sub_10000588C(&qword_101649E40);
        memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v30, v31, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v30, 0, 1, v28);
      }
      uint64_t v33 = v13[12];
      int v34 = (char *)v11 + v33;
      char v35 = (char *)v12 + v33;
      *(void *)int v34 = *(void *)v35;
      v34[8] = v35[8];
      uint64_t v36 = v13[13];
      char v37 = (void *)((char *)v11 + v36);
      char v38 = (void *)((char *)v12 + v36);
      uint64_t v39 = v38[1];
      *char v37 = *v38;
      v37[1] = v39;
      *(void *)((char *)v11 + v13[14]) = *(void *)((char *)v12 + v13[14]);
      uint64_t v40 = v13[15];
      char v41 = (void *)((char *)v11 + v40);
      char v42 = (void *)((char *)v12 + v40);
      uint64_t v43 = v42[1];
      *char v41 = *v42;
      v41[1] = v43;
      *(void *)((char *)v11 + v13[16]) = *(void *)((char *)v12 + v13[16]);
      uint64_t v44 = v13[17];
      char v45 = (char *)v11 + v44;
      double v46 = (char *)v12 + v44;
      *(_OWORD *)char v45 = *(_OWORD *)v46;
      v45[16] = v46[16];
      uint64_t v47 = v13[18];
      double v48 = (char *)v11 + v47;
      unint64_t v49 = (char *)v12 + v47;
      *(_OWORD *)double v48 = *(_OWORD *)v49;
      v48[16] = v49[16];
      unint64_t v50 = *(void (**)(void *, void, uint64_t, int *))(v78 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50(v11, 0, 1, v13);
    }
    uint64_t v51 = a3[7];
    int v52 = (char *)v3 + v51;
    uint64_t v53 = (char *)v17 + v51;
    int v54 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
    uint64_t v55 = *((void *)v54 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v55 + 48))(v53, 1, v54))
    {
      uint64_t v56 = sub_10000588C(&qword_101649E48);
      memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      uint64_t v57 = type metadata accessor for URL();
      char v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16);
      v58(v52, v53, v57);
      v58(&v52[v54[5]], &v53[v54[5]], v57);
      v58(&v52[v54[6]], &v53[v54[6]], v57);
      v58(&v52[v54[7]], &v53[v54[7]], v57);
      v58(&v52[v54[8]], &v53[v54[8]], v57);
      v58(&v52[v54[9]], &v53[v54[9]], v57);
      v58(&v52[v54[10]], &v53[v54[10]], v57);
      v58(&v52[v54[11]], &v53[v54[11]], v57);
      v58(&v52[v54[12]], &v53[v54[12]], v57);
      v58(&v52[v54[13]], &v53[v54[13]], v57);
      v58(&v52[v54[14]], &v53[v54[14]], v57);
      v58(&v52[v54[15]], &v53[v54[15]], v57);
      uint64_t v17 = a2;
      (*(void (**)(char *, void, uint64_t, int *))(v55 + 56))(v52, 0, 1, v54);
    }
    uint64_t v59 = a3[8];
    uint64_t v60 = a3[9];
    uint64_t v61 = (void *)((char *)v3 + v59);
    long long v62 = (uint64_t *)((char *)v17 + v59);
    uint64_t v63 = v62[1];
    void *v61 = *v62;
    v61[1] = v63;
    long long v64 = (void *)((char *)v3 + v60);
    long long v65 = (uint64_t *)((char *)v17 + v60);
    uint64_t v66 = *(uint64_t *)((char *)v17 + v60 + 8);
    swift_bridgeObjectRetain();
    if (v66)
    {
      *long long v64 = *v65;
      v64[1] = v66;
      uint64_t v67 = v65[3];
      void v64[2] = v65[2];
      v64[3] = v67;
      uint64_t v68 = v65[4];
      uint64_t v69 = v65[5];
      v64[4] = v68;
      v64[5] = v69;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v70 = *((_OWORD *)v65 + 1);
      *(_OWORD *)long long v64 = *(_OWORD *)v65;
      *((_OWORD *)v64 + 1) = v70;
      *((_OWORD *)v64 + 2) = *((_OWORD *)v65 + 2);
    }
    uint64_t v71 = a3[10];
    uint64_t v72 = (char *)v3 + v71;
    uint64_t v73 = (uint64_t)v17 + v71;
    uint64_t v74 = type metadata accessor for ServerStatusCode();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v74 - 8) + 16))(v72, v73, v74);
    *(void *)((char *)v3 + a3[11]) = *(uint64_t *)((char *)v17 + a3[11]);
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t type metadata accessor for AccessoryInfoResponseContent.Configuration(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10164C440);
}

uint64_t type metadata accessor for AccessoryInfoResponseContent.Assets(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10164C388);
}

uint64_t sub_1006F5C28(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = v4 + *(int *)(v5 + 40);
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    if (!v9(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
    uint64_t v10 = v4 + *(int *)(v5 + 44);
    if (!v9(v10, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = a1 + a2[7];
  uint64_t v12 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v12 - 1) + 48))(v11, 1, v12))
  {
    uint64_t v13 = type metadata accessor for URL();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
    v14(v11, v13);
    v14(v11 + v12[5], v13);
    v14(v11 + v12[6], v13);
    v14(v11 + v12[7], v13);
    v14(v11 + v12[8], v13);
    v14(v11 + v12[9], v13);
    v14(v11 + v12[10], v13);
    v14(v11 + v12[11], v13);
    v14(v11 + v12[12], v13);
    v14(v11 + v12[13], v13);
    v14(v11 + v12[14], v13);
    v14(v11 + v12[15], v13);
  }
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[9] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = a1 + a2[10];
  uint64_t v16 = type metadata accessor for ServerStatusCode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1006F5FF8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  *(void *)(a1 + 56) = v6;
  uint64_t v12 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14(v11, 1, v12))
  {
    uint64_t v15 = sub_10000588C(&qword_101649E50);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    uint64_t v16 = a3;
  }
  else
  {
    uint64_t v77 = v13;
    uint64_t v17 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v17;
    uint64_t v18 = v11[3];
    v10[2] = v11[2];
    v10[3] = v18;
    uint64_t v19 = v11[5];
    void v10[4] = v11[4];
    v10[5] = v19;
    *((_WORD *)v10 + 24) = *((_WORD *)v11 + 24);
    *((unsigned char *)v10 + 72) = *((unsigned char *)v11 + 72);
    uint64_t v20 = v11[8];
    id v10[7] = v11[7];
    v10[8] = v20;
    uint64_t v76 = (int *)v12;
    uint64_t v21 = *(int *)(v12 + 40);
    uint64_t v74 = (char *)v11 + v21;
    __dst = (char *)v10 + v21;
    uint64_t v22 = type metadata accessor for URL();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v24(v74, 1, v22))
    {
      uint64_t v25 = sub_10000588C(&qword_101649E40);
      memcpy(__dst, v74, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(__dst, v74, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
    }
    uint64_t v16 = a3;
    uint64_t v26 = v23;
    uint64_t v27 = v76[11];
    uint64_t v28 = (char *)v10 + v27;
    uint64_t v29 = (char *)v11 + v27;
    if (v24((char *)v11 + v27, 1, v22))
    {
      uint64_t v30 = sub_10000588C(&qword_101649E40);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v28, v29, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v22);
    }
    uint64_t v31 = v76[12];
    uint64_t v32 = (char *)v10 + v31;
    uint64_t v33 = (char *)v11 + v31;
    *(void *)uint64_t v32 = *(void *)v33;
    v32[8] = v33[8];
    uint64_t v34 = v76[13];
    char v35 = (void *)((char *)v10 + v34);
    uint64_t v36 = (void *)((char *)v11 + v34);
    uint64_t v37 = v36[1];
    *char v35 = *v36;
    v35[1] = v37;
    *(void *)((char *)v10 + v76[14]) = *(void *)((char *)v11 + v76[14]);
    uint64_t v38 = v76[15];
    uint64_t v39 = (void *)((char *)v10 + v38);
    uint64_t v40 = (void *)((char *)v11 + v38);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v41;
    *(void *)((char *)v10 + v76[16]) = *(void *)((char *)v11 + v76[16]);
    uint64_t v42 = v76[17];
    uint64_t v43 = (char *)v10 + v42;
    uint64_t v44 = (char *)v11 + v42;
    *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
    v43[16] = v44[16];
    uint64_t v45 = v76[18];
    double v46 = (char *)v10 + v45;
    uint64_t v47 = (char *)v11 + v45;
    *(_OWORD *)double v46 = *(_OWORD *)v47;
    v46[16] = v47[16];
    double v48 = *(void (**)(void *, void, uint64_t, int *))(v77 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(v10, 0, 1, v76);
  }
  uint64_t v49 = v16[7];
  unint64_t v50 = (char *)(a1 + v49);
  uint64_t v51 = (char *)(a2 + v49);
  int v52 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  uint64_t v53 = *((void *)v52 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v53 + 48))(v51, 1, v52))
  {
    uint64_t v54 = sub_10000588C(&qword_101649E48);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
  }
  else
  {
    uint64_t v55 = type metadata accessor for URL();
    uint64_t v56 = *(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 16);
    v56(v50, v51, v55);
    v56(&v50[v52[5]], &v51[v52[5]], v55);
    v56(&v50[v52[6]], &v51[v52[6]], v55);
    v56(&v50[v52[7]], &v51[v52[7]], v55);
    v56(&v50[v52[8]], &v51[v52[8]], v55);
    v56(&v50[v52[9]], &v51[v52[9]], v55);
    v56(&v50[v52[10]], &v51[v52[10]], v55);
    v56(&v50[v52[11]], &v51[v52[11]], v55);
    v56(&v50[v52[12]], &v51[v52[12]], v55);
    v56(&v50[v52[13]], &v51[v52[13]], v55);
    v56(&v50[v52[14]], &v51[v52[14]], v55);
    v56(&v50[v52[15]], &v51[v52[15]], v55);
    (*(void (**)(char *, void, uint64_t, int *))(v53 + 56))(v50, 0, 1, v52);
  }
  uint64_t v57 = v16[8];
  uint64_t v58 = v16[9];
  uint64_t v59 = (void *)(a1 + v57);
  uint64_t v60 = (void *)(a2 + v57);
  uint64_t v61 = v60[1];
  void *v59 = *v60;
  v59[1] = v61;
  long long v62 = (void *)(a1 + v58);
  uint64_t v63 = (void *)(a2 + v58);
  uint64_t v64 = *(void *)(a2 + v58 + 8);
  swift_bridgeObjectRetain();
  if (v64)
  {
    void *v62 = *v63;
    v62[1] = v64;
    uint64_t v65 = v63[3];
    id v62[2] = v63[2];
    v62[3] = v65;
    uint64_t v66 = v63[4];
    uint64_t v67 = v63[5];
    v62[4] = v66;
    v62[5] = v67;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v68 = *((_OWORD *)v63 + 1);
    *(_OWORD *)long long v62 = *(_OWORD *)v63;
    *((_OWORD *)v62 + 1) = v68;
    *((_OWORD *)v62 + 2) = *((_OWORD *)v63 + 2);
  }
  uint64_t v69 = v16[10];
  uint64_t v70 = a1 + v69;
  uint64_t v71 = a2 + v69;
  uint64_t v72 = type metadata accessor for ServerStatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 16))(v70, v71, v72);
  *(void *)(a1 + v16[11]) = *(void *)(a2 + v16[11]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1006F6700(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
  *(unsigned char *)(a1 + 34) = *((unsigned char *)a2 + 34);
  *(unsigned char *)(a1 + 35) = *((unsigned char *)a2 + 35);
  *(unsigned char *)(a1 + 36) = *((unsigned char *)a2 + 36);
  *(unsigned char *)(a1 + 37) = *((unsigned char *)a2 + 37);
  *(unsigned char *)(a1 + 38) = *((unsigned char *)a2 + 38);
  *(unsigned char *)(a1 + 39) = *((unsigned char *)a2 + 39);
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[9];
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (uint64_t)a2 + v8;
  uint64_t v11 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_1006F7560(v9, type metadata accessor for AccessoryInfoResponseContent.Configuration);
      goto LABEL_7;
    }
    char v118 = a3;
    *(void *)uint64_t v9 = *(void *)v10;
    *(void *)(v9 + 8) = *(void *)(v10 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v9 + 16) = *(void *)(v10 + 16);
    *(void *)(v9 + 24) = *(void *)(v10 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v9 + 32) = *(void *)(v10 + 32);
    *(void *)(v9 + 40) = *(void *)(v10 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 48) = *(_WORD *)(v10 + 48);
    *(void *)(v9 + 56) = *(void *)(v10 + 56);
    uint64_t v23 = *(void *)(v10 + 64);
    *(unsigned char *)(v9 + 72) = *(unsigned char *)(v10 + 72);
    *(void *)(v9 + 64) = v23;
    uint64_t v24 = v11[10];
    uint64_t v25 = (void *)(v9 + v24);
    uint64_t v26 = (const void *)(v10 + v24);
    uint64_t v27 = type metadata accessor for URL();
    uint64_t v116 = *(void *)(v27 - 8);
    uint64_t v28 = *(uint64_t (**)(void))(v116 + 48);
    char v112 = v25;
    LODWORD(v25) = ((uint64_t (*)(void *, uint64_t, uint64_t))v28)(v25, 1, v27);
    int v29 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v28)(v26, 1, v27);
    if (v25)
    {
      if (v29)
      {
        size_t v30 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
        uint64_t v31 = v112;
LABEL_18:
        memcpy(v31, v26, v30);
        goto LABEL_21;
      }
      (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v112, v26, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(v112, 0, 1, v27);
    }
    else
    {
      if (v29)
      {
        (*(void (**)(void *, uint64_t))(v116 + 8))(v112, v27);
        size_t v30 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
        uint64_t v31 = v112;
        goto LABEL_18;
      }
      (*(void (**)(void *, const void *, uint64_t))(v116 + 24))(v112, v26, v27);
    }
LABEL_21:
    uint64_t v56 = v11[11];
    uint64_t v57 = (const void *)(v10 + v56);
    char v113 = (void *)(v9 + v56);
    int v58 = v28();
    int v59 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v28)(v57, 1, v27);
    if (v58)
    {
      if (!v59)
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v113, v57, v27);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v27);
        goto LABEL_29;
      }
      size_t v60 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
      uint64_t v61 = v113;
    }
    else
    {
      if (!v59)
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 24))(v113, v57, v27);
        goto LABEL_29;
      }
      (*(void (**)(void *, uint64_t))(v116 + 8))(v113, v27);
      size_t v60 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
      uint64_t v61 = v113;
    }
    memcpy(v61, v57, v60);
LABEL_29:
    a3 = v118;
    uint64_t v62 = v11[12];
    uint64_t v63 = v9 + v62;
    uint64_t v64 = (uint64_t *)(v10 + v62);
    uint64_t v65 = *v64;
    *(unsigned char *)(v63 + 8) = *((unsigned char *)v64 + 8);
    *(void *)uint64_t v63 = v65;
    uint64_t v66 = v11[13];
    uint64_t v67 = (void *)(v9 + v66);
    long long v68 = (void *)(v10 + v66);
    *uint64_t v67 = *v68;
    v67[1] = v68[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v9 + v11[14]) = *(void *)(v10 + v11[14]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v69 = v11[15];
    uint64_t v70 = (void *)(v9 + v69);
    uint64_t v71 = (void *)(v10 + v69);
    void *v70 = *v71;
    v70[1] = v71[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v9 + v11[16]) = *(void *)(v10 + v11[16]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v72 = v11[17];
    uint64_t v73 = v9 + v72;
    uint64_t v74 = (long long *)(v10 + v72);
    long long v75 = *v74;
    *(unsigned char *)(v73 + 16) = *((unsigned char *)v74 + 16);
    *(_OWORD *)uint64_t v73 = v75;
    uint64_t v76 = v11[18];
    uint64_t v77 = v9 + v76;
    uint64_t v78 = (long long *)(v10 + v76);
    long long v79 = *v78;
    *(unsigned char *)(v77 + 16) = *((unsigned char *)v78 + 16);
    *(_OWORD *)uint64_t v77 = v79;
    goto LABEL_30;
  }
  if (v15)
  {
LABEL_7:
    uint64_t v22 = sub_10000588C(&qword_101649E50);
    memcpy((void *)v9, (const void *)v10, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_30;
  }
  uint64_t v115 = v12;
  uint64_t v117 = a3;
  *(void *)uint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(void *)(v9 + 24) = *(void *)(v10 + 24);
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  *(void *)(v9 + 40) = *(void *)(v10 + 40);
  *(_WORD *)(v9 + 48) = *(_WORD *)(v10 + 48);
  *(void *)(v9 + 56) = *(void *)(v10 + 56);
  uint64_t v16 = *(void *)(v10 + 64);
  *(unsigned char *)(v9 + 72) = *(unsigned char *)(v10 + 72);
  *(void *)(v9 + 64) = v16;
  uint64_t v17 = v11[10];
  __dst = (void *)(v9 + v17);
  double v111 = (const void *)(v10 + v17);
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v110 = v19;
  if (v20(v111, 1, v18))
  {
    uint64_t v21 = sub_10000588C(&qword_101649E40);
    memcpy(__dst, v111, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(__dst, v111, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
  }
  uint64_t v32 = v11[11];
  uint64_t v33 = (void *)(v9 + v32);
  uint64_t v34 = (const void *)(v10 + v32);
  unsigned int v35 = v20((const void *)(v10 + v32), 1, v18);
  a3 = v117;
  if (v35)
  {
    uint64_t v36 = sub_10000588C(&qword_101649E40);
    memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v110 + 16))(v33, v34, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v110 + 56))(v33, 0, 1, v18);
  }
  uint64_t v37 = v11[12];
  uint64_t v38 = v9 + v37;
  uint64_t v39 = (uint64_t *)(v10 + v37);
  uint64_t v40 = *v39;
  *(unsigned char *)(v38 + 8) = *((unsigned char *)v39 + 8);
  *(void *)uint64_t v38 = v40;
  uint64_t v41 = v11[13];
  uint64_t v42 = (void *)(v9 + v41);
  uint64_t v43 = (void *)(v10 + v41);
  *uint64_t v42 = *v43;
  v42[1] = v43[1];
  *(void *)(v9 + v11[14]) = *(void *)(v10 + v11[14]);
  uint64_t v44 = v11[15];
  uint64_t v45 = (void *)(v9 + v44);
  double v46 = (void *)(v10 + v44);
  void *v45 = *v46;
  v45[1] = v46[1];
  *(void *)(v9 + v11[16]) = *(void *)(v10 + v11[16]);
  uint64_t v47 = v11[17];
  uint64_t v48 = v9 + v47;
  uint64_t v49 = (long long *)(v10 + v47);
  long long v50 = *v49;
  *(unsigned char *)(v48 + 16) = *((unsigned char *)v49 + 16);
  *(_OWORD *)uint64_t v48 = v50;
  uint64_t v51 = v11[18];
  uint64_t v52 = v9 + v51;
  uint64_t v53 = (long long *)(v10 + v51);
  long long v54 = *v53;
  *(unsigned char *)(v52 + 16) = *((unsigned char *)v53 + 16);
  *(_OWORD *)uint64_t v52 = v54;
  uint64_t v55 = *(void (**)(uint64_t, void, uint64_t, int *))(v115 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v55(v9, 0, 1, v11);
LABEL_30:
  uint64_t v80 = a3[7];
  long long v81 = (char *)(a1 + v80);
  uint64_t v82 = (char *)a2 + v80;
  uint64_t v83 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  uint64_t v84 = *((void *)v83 - 1);
  uint64_t v85 = *(uint64_t (**)(char *, uint64_t, int *))(v84 + 48);
  int v86 = v85(v81, 1, v83);
  int v87 = v85(v82, 1, v83);
  if (v86)
  {
    if (!v87)
    {
      uint64_t v88 = type metadata accessor for URL();
      long long v89 = *(void (**)(char *, char *, uint64_t))(*(void *)(v88 - 8) + 16);
      v89(v81, v82, v88);
      v89(&v81[v83[5]], &v82[v83[5]], v88);
      v89(&v81[v83[6]], &v82[v83[6]], v88);
      v89(&v81[v83[7]], &v82[v83[7]], v88);
      v89(&v81[v83[8]], &v82[v83[8]], v88);
      v89(&v81[v83[9]], &v82[v83[9]], v88);
      v89(&v81[v83[10]], &v82[v83[10]], v88);
      v89(&v81[v83[11]], &v82[v83[11]], v88);
      v89(&v81[v83[12]], &v82[v83[12]], v88);
      v89(&v81[v83[13]], &v82[v83[13]], v88);
      v89(&v81[v83[14]], &v82[v83[14]], v88);
      v89(&v81[v83[15]], &v82[v83[15]], v88);
      (*(void (**)(char *, void, uint64_t, int *))(v84 + 56))(v81, 0, 1, v83);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v87)
  {
    sub_1006F7560((uint64_t)v81, type metadata accessor for AccessoryInfoResponseContent.Assets);
LABEL_35:
    uint64_t v90 = sub_10000588C(&qword_101649E48);
    memcpy(v81, v82, *(void *)(*(void *)(v90 - 8) + 64));
    goto LABEL_36;
  }
  uint64_t v101 = type metadata accessor for URL();
  uint64_t v102 = *(void (**)(char *, char *, uint64_t))(*(void *)(v101 - 8) + 24);
  v102(v81, v82, v101);
  v102(&v81[v83[5]], &v82[v83[5]], v101);
  v102(&v81[v83[6]], &v82[v83[6]], v101);
  v102(&v81[v83[7]], &v82[v83[7]], v101);
  v102(&v81[v83[8]], &v82[v83[8]], v101);
  v102(&v81[v83[9]], &v82[v83[9]], v101);
  v102(&v81[v83[10]], &v82[v83[10]], v101);
  v102(&v81[v83[11]], &v82[v83[11]], v101);
  v102(&v81[v83[12]], &v82[v83[12]], v101);
  v102(&v81[v83[13]], &v82[v83[13]], v101);
  v102(&v81[v83[14]], &v82[v83[14]], v101);
  v102(&v81[v83[15]], &v82[v83[15]], v101);
LABEL_36:
  uint64_t v91 = a3[8];
  long long v92 = (void *)(a1 + v91);
  long long v93 = (uint64_t *)((char *)a2 + v91);
  *long long v92 = *v93;
  v92[1] = v93[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v94 = a3[9];
  long long v95 = (void *)(a1 + v94);
  long long v96 = (uint64_t *)((char *)a2 + v94);
  uint64_t v97 = *(void *)(a1 + v94 + 8);
  uint64_t v98 = *(uint64_t *)((char *)a2 + v94 + 8);
  if (v97)
  {
    if (v98)
    {
      *long long v95 = *v96;
      v95[1] = v96[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v95[2] = v96[2];
      v95[3] = v96[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v95[4] = v96[4];
      v95[5] = v96[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1006F75C0((uint64_t)v95);
      long long v100 = *((_OWORD *)v96 + 1);
      long long v99 = *((_OWORD *)v96 + 2);
      *(_OWORD *)long long v95 = *(_OWORD *)v96;
      *((_OWORD *)v95 + 1) = v100;
      *((_OWORD *)v95 + 2) = v99;
    }
  }
  else if (v98)
  {
    *long long v95 = *v96;
    v95[1] = v96[1];
    v95[2] = v96[2];
    v95[3] = v96[3];
    v95[4] = v96[4];
    v95[5] = v96[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v103 = *(_OWORD *)v96;
    long long v104 = *((_OWORD *)v96 + 2);
    *((_OWORD *)v95 + 1) = *((_OWORD *)v96 + 1);
    *((_OWORD *)v95 + 2) = v104;
    *(_OWORD *)long long v95 = v103;
  }
  uint64_t v105 = a3[10];
  uint64_t v106 = a1 + v105;
  uint64_t v107 = (uint64_t)a2 + v105;
  uint64_t v108 = type metadata accessor for ServerStatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 24))(v106, v107, v108);
  *(void *)(a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1006F7560(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1006F75C0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1006F75F0(uint64_t a1, long long *a2, int *a3)
{
  long long v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  long long v8 = *a2;
  long long v7 = a2[1];
  uint64_t v9 = *((void *)a2 + 9);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = v9;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  uint64_t v10 = a3[6];
  uint64_t v11 = (_OWORD *)(a1 + v10);
  uint64_t v12 = (long long *)((char *)a2 + v10);
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v7;
  uint64_t v13 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  uint64_t v14 = *((void *)v13 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = sub_10000588C(&qword_101649E50);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    long long v16 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v16;
    void v11[2] = v12[2];
    *((_WORD *)v11 + 24) = *((_WORD *)v12 + 24);
    uint64_t v17 = *((void *)v12 + 8);
    *((void *)v11 + 7) = *((void *)v12 + 7);
    *((void *)v11 + 8) = v17;
    *((unsigned char *)v11 + 72) = *((unsigned char *)v12 + 72);
    uint64_t v18 = v13[10];
    uint64_t v55 = v14;
    __dst = (char *)v11 + v18;
    uint64_t v19 = (char *)v12 + v18;
    uint64_t v20 = type metadata accessor for URL();
    uint64_t v21 = *(void *)(v20 - 8);
    long long v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    uint64_t v53 = v21;
    if (v54(v19, 1, v20))
    {
      uint64_t v22 = sub_10000588C(&qword_101649E40);
      memcpy(__dst, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(__dst, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    uint64_t v23 = v13[11];
    uint64_t v24 = (char *)v11 + v23;
    uint64_t v25 = (char *)v12 + v23;
    if (v54((char *)v12 + v23, 1, v20))
    {
      uint64_t v26 = sub_10000588C(&qword_101649E40);
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v24, v25, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v24, 0, 1, v20);
    }
    uint64_t v27 = v13[12];
    uint64_t v28 = (char *)v11 + v27;
    int v29 = (char *)v12 + v27;
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    *(_OWORD *)((char *)v11 + v13[13]) = *(_OWORD *)((char *)v12 + v13[13]);
    *(void *)((char *)v11 + v13[14]) = *(void *)((char *)v12 + v13[14]);
    *(_OWORD *)((char *)v11 + v13[15]) = *(_OWORD *)((char *)v12 + v13[15]);
    *(void *)((char *)v11 + v13[16]) = *(void *)((char *)v12 + v13[16]);
    uint64_t v30 = v13[17];
    uint64_t v31 = (char *)v11 + v30;
    uint64_t v32 = (char *)v12 + v30;
    v31[16] = v32[16];
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    uint64_t v33 = v13[18];
    uint64_t v34 = (char *)v11 + v33;
    unsigned int v35 = (char *)v12 + v33;
    v34[16] = v35[16];
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v55 + 56))(v11, 0, 1, v13);
  }
  uint64_t v36 = a3[7];
  uint64_t v37 = (char *)(a1 + v36);
  uint64_t v38 = (char *)a2 + v36;
  uint64_t v39 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  uint64_t v40 = *((void *)v39 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v40 + 48))(v38, 1, v39))
  {
    uint64_t v41 = sub_10000588C(&qword_101649E48);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    uint64_t v42 = type metadata accessor for URL();
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32);
    v43(v37, v38, v42);
    v43(&v37[v39[5]], &v38[v39[5]], v42);
    v43(&v37[v39[6]], &v38[v39[6]], v42);
    v43(&v37[v39[7]], &v38[v39[7]], v42);
    v43(&v37[v39[8]], &v38[v39[8]], v42);
    v43(&v37[v39[9]], &v38[v39[9]], v42);
    v43(&v37[v39[10]], &v38[v39[10]], v42);
    v43(&v37[v39[11]], &v38[v39[11]], v42);
    v43(&v37[v39[12]], &v38[v39[12]], v42);
    v43(&v37[v39[13]], &v38[v39[13]], v42);
    v43(&v37[v39[14]], &v38[v39[14]], v42);
    v43(&v37[v39[15]], &v38[v39[15]], v42);
    (*(void (**)(char *, void, uint64_t, int *))(v40 + 56))(v37, 0, 1, v39);
  }
  uint64_t v44 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(long long *)((char *)a2 + a3[8]);
  uint64_t v45 = (_OWORD *)(a1 + v44);
  double v46 = (long long *)((char *)a2 + v44);
  long long v47 = v46[1];
  _OWORD *v45 = *v46;
  v45[1] = v47;
  _OWORD v45[2] = v46[2];
  uint64_t v48 = a3[10];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = (uint64_t)a2 + v48;
  uint64_t v51 = type metadata accessor for ServerStatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 32))(v49, v50, v51);
  *(void *)(a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  return a1;
}

uint64_t sub_1006F7C0C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  char v112 = a3;
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      long long v17 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      *(_OWORD *)(v10 + 16) = v17;
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
      *(_WORD *)(v10 + 48) = *(_WORD *)(v11 + 48);
      uint64_t v18 = *(void *)(v11 + 64);
      *(void *)(v10 + 56) = *(void *)(v11 + 56);
      *(void *)(v10 + 64) = v18;
      *(unsigned char *)(v10 + 72) = *(unsigned char *)(v11 + 72);
      uint64_t v19 = v12[10];
      __dst = (void *)(v10 + v19);
      uint64_t v20 = (const void *)(v11 + v19);
      uint64_t v21 = type metadata accessor for URL();
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v107 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48);
      if (v107(v20, 1, v21))
      {
        uint64_t v23 = sub_10000588C(&qword_101649E40);
        memcpy(__dst, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(__dst, v20, v21);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
      }
      uint64_t v37 = v12[11];
      __dstb = (void *)(v10 + v37);
      uint64_t v38 = (const void *)(v11 + v37);
      if (v107((const void *)(v11 + v37), 1, v21))
      {
        uint64_t v39 = sub_10000588C(&qword_101649E40);
        memcpy(__dstb, v38, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(__dstb, v38, v21);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(__dstb, 0, 1, v21);
      }
      uint64_t v40 = v12[12];
      uint64_t v41 = v10 + v40;
      uint64_t v42 = v11 + v40;
      *(void *)uint64_t v41 = *(void *)v42;
      *(unsigned char *)(v41 + 8) = *(unsigned char *)(v42 + 8);
      *(_OWORD *)(v10 + v12[13]) = *(_OWORD *)(v11 + v12[13]);
      *(void *)(v10 + v12[14]) = *(void *)(v11 + v12[14]);
      *(_OWORD *)(v10 + v12[15]) = *(_OWORD *)(v11 + v12[15]);
      *(void *)(v10 + v12[16]) = *(void *)(v11 + v12[16]);
      uint64_t v43 = v12[17];
      uint64_t v44 = v10 + v43;
      uint64_t v45 = v11 + v43;
      *(unsigned char *)(v44 + 16) = *(unsigned char *)(v45 + 16);
      *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
      uint64_t v46 = v12[18];
      uint64_t v47 = v10 + v46;
      uint64_t v48 = v11 + v46;
      *(unsigned char *)(v47 + 16) = *(unsigned char *)(v48 + 16);
      *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_16;
    }
LABEL_7:
    uint64_t v24 = sub_10000588C(&qword_101649E50);
    memcpy((void *)v10, (const void *)v11, *(void *)(*(void *)(v24 - 8) + 64));
LABEL_16:
    uint64_t v49 = a3;
    goto LABEL_17;
  }
  if (v16)
  {
    sub_1006F7560(v10, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    goto LABEL_7;
  }
  uint64_t v25 = *(void *)(v11 + 8);
  *(void *)uint64_t v10 = *(void *)v11;
  *(void *)(v10 + 8) = v25;
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)(v11 + 24);
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  *(void *)(v10 + 24) = v26;
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void *)(v11 + 40);
  *(void *)(v10 + 32) = *(void *)(v11 + 32);
  *(void *)(v10 + 40) = v27;
  swift_bridgeObjectRelease();
  *(_WORD *)(v10 + 48) = *(_WORD *)(v11 + 48);
  uint64_t v28 = *(void *)(v11 + 64);
  *(void *)(v10 + 56) = *(void *)(v11 + 56);
  *(void *)(v10 + 64) = v28;
  *(unsigned char *)(v10 + 72) = *(unsigned char *)(v11 + 72);
  uint64_t v29 = v12[10];
  uint64_t v30 = (void *)(v10 + v29);
  uint64_t v31 = (const void *)(v11 + v29);
  uint64_t v32 = type metadata accessor for URL();
  __dsta = *(void **)(v32 - 8);
  uint64_t v33 = (uint64_t (*)(void))__dsta[6];
  uint64_t v105 = v30;
  LODWORD(v30) = ((uint64_t (*)(void *, uint64_t, uint64_t))v33)(v30, 1, v32);
  uint64_t v108 = v33;
  int v34 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v33)(v31, 1, v32);
  if (v30)
  {
    if (v34)
    {
      size_t v35 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
      uint64_t v36 = v105;
LABEL_32:
      memcpy(v36, v31, v35);
      goto LABEL_35;
    }
    ((void (*)(void *, const void *, uint64_t))__dsta[4])(v105, v31, v32);
    ((void (*)(void *, void, uint64_t, uint64_t))__dsta[7])(v105, 0, 1, v32);
  }
  else
  {
    if (v34)
    {
      ((void (*)(void *, uint64_t))__dsta[1])(v105, v32);
      size_t v35 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
      uint64_t v36 = v105;
      goto LABEL_32;
    }
    ((void (*)(void *, const void *, uint64_t))__dsta[5])(v105, v31, v32);
  }
LABEL_35:
  uint64_t v80 = v12[11];
  long long v81 = (const void *)(v11 + v80);
  uint64_t v106 = (void *)(v10 + v80);
  int v82 = v108();
  int v83 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v108)(v81, 1, v32);
  if (v82)
  {
    if (!v83)
    {
      ((void (*)(void *, const void *, uint64_t))__dsta[4])(v106, v81, v32);
      ((void (*)(void *, void, uint64_t, uint64_t))__dsta[7])(v106, 0, 1, v32);
      goto LABEL_43;
    }
    size_t v84 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
    uint64_t v85 = v106;
  }
  else
  {
    if (!v83)
    {
      ((void (*)(void *, const void *, uint64_t))__dsta[5])(v106, v81, v32);
      goto LABEL_43;
    }
    ((void (*)(void *, uint64_t))__dsta[1])(v106, v32);
    size_t v84 = *(void *)(*(void *)(sub_10000588C(&qword_101649E40) - 8) + 64);
    uint64_t v85 = v106;
  }
  memcpy(v85, v81, v84);
LABEL_43:
  uint64_t v49 = v112;
  uint64_t v86 = v12[12];
  uint64_t v87 = v10 + v86;
  uint64_t v88 = v11 + v86;
  *(void *)uint64_t v87 = *(void *)v88;
  *(unsigned char *)(v87 + 8) = *(unsigned char *)(v88 + 8);
  uint64_t v89 = v12[13];
  uint64_t v90 = (void *)(v10 + v89);
  uint64_t v91 = (uint64_t *)(v11 + v89);
  uint64_t v93 = *v91;
  uint64_t v92 = v91[1];
  *uint64_t v90 = v93;
  v90[1] = v92;
  swift_bridgeObjectRelease();
  *(void *)(v10 + v12[14]) = *(void *)(v11 + v12[14]);
  swift_bridgeObjectRelease();
  uint64_t v94 = v12[15];
  long long v95 = (void *)(v10 + v94);
  long long v96 = (uint64_t *)(v11 + v94);
  uint64_t v98 = *v96;
  uint64_t v97 = v96[1];
  *long long v95 = v98;
  v95[1] = v97;
  swift_bridgeObjectRelease();
  *(void *)(v10 + v12[16]) = *(void *)(v11 + v12[16]);
  swift_bridgeObjectRelease();
  uint64_t v99 = v12[17];
  uint64_t v100 = v10 + v99;
  uint64_t v101 = v11 + v99;
  *(_OWORD *)uint64_t v100 = *(_OWORD *)v101;
  *(unsigned char *)(v100 + 16) = *(unsigned char *)(v101 + 16);
  uint64_t v102 = v12[18];
  uint64_t v103 = v10 + v102;
  uint64_t v104 = v11 + v102;
  *(unsigned char *)(v103 + 16) = *(unsigned char *)(v104 + 16);
  *(_OWORD *)uint64_t v103 = *(_OWORD *)v104;
LABEL_17:
  uint64_t v50 = v49[7];
  uint64_t v51 = (char *)(a1 + v50);
  uint64_t v52 = (char *)(a2 + v50);
  uint64_t v53 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  uint64_t v54 = *((void *)v53 - 1);
  uint64_t v55 = *(uint64_t (**)(char *, uint64_t, int *))(v54 + 48);
  int v56 = v55(v51, 1, v53);
  int v57 = v55(v52, 1, v53);
  if (v56)
  {
    if (!v57)
    {
      uint64_t v58 = type metadata accessor for URL();
      int v59 = *(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 32);
      v59(v51, v52, v58);
      v59(&v51[v53[5]], &v52[v53[5]], v58);
      v59(&v51[v53[6]], &v52[v53[6]], v58);
      v59(&v51[v53[7]], &v52[v53[7]], v58);
      v59(&v51[v53[8]], &v52[v53[8]], v58);
      v59(&v51[v53[9]], &v52[v53[9]], v58);
      v59(&v51[v53[10]], &v52[v53[10]], v58);
      v59(&v51[v53[11]], &v52[v53[11]], v58);
      v59(&v51[v53[12]], &v52[v53[12]], v58);
      v59(&v51[v53[13]], &v52[v53[13]], v58);
      v59(&v51[v53[14]], &v52[v53[14]], v58);
      v59(&v51[v53[15]], &v52[v53[15]], v58);
      uint64_t v49 = v112;
      (*(void (**)(char *, void, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v57)
  {
    sub_1006F7560((uint64_t)v51, type metadata accessor for AccessoryInfoResponseContent.Assets);
LABEL_22:
    uint64_t v60 = sub_10000588C(&qword_101649E48);
    memcpy(v51, v52, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_23;
  }
  uint64_t v78 = type metadata accessor for URL();
  long long v79 = *(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 40);
  v79(v51, v52, v78);
  v79(&v51[v53[5]], &v52[v53[5]], v78);
  v79(&v51[v53[6]], &v52[v53[6]], v78);
  v79(&v51[v53[7]], &v52[v53[7]], v78);
  v79(&v51[v53[8]], &v52[v53[8]], v78);
  v79(&v51[v53[9]], &v52[v53[9]], v78);
  v79(&v51[v53[10]], &v52[v53[10]], v78);
  v79(&v51[v53[11]], &v52[v53[11]], v78);
  v79(&v51[v53[12]], &v52[v53[12]], v78);
  v79(&v51[v53[13]], &v52[v53[13]], v78);
  v79(&v51[v53[14]], &v52[v53[14]], v78);
  v79(&v51[v53[15]], &v52[v53[15]], v78);
LABEL_23:
  uint64_t v61 = v49[8];
  uint64_t v62 = (void *)(a1 + v61);
  uint64_t v63 = (uint64_t *)(a2 + v61);
  uint64_t v65 = *v63;
  uint64_t v64 = v63[1];
  void *v62 = v65;
  v62[1] = v64;
  swift_bridgeObjectRelease();
  uint64_t v66 = v49[9];
  uint64_t v67 = a1 + v66;
  uint64_t v68 = a2 + v66;
  if (!*(void *)(a1 + v66 + 8))
  {
LABEL_27:
    long long v72 = *(_OWORD *)(v68 + 16);
    *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
    *(_OWORD *)(v67 + 16) = v72;
    *(_OWORD *)(v67 + 32) = *(_OWORD *)(v68 + 32);
    goto LABEL_28;
  }
  uint64_t v69 = *(void *)(v68 + 8);
  if (!v69)
  {
    sub_1006F75C0(v67);
    goto LABEL_27;
  }
  *(void *)uint64_t v67 = *(void *)v68;
  *(void *)(v67 + 8) = v69;
  swift_bridgeObjectRelease();
  uint64_t v70 = *(void *)(v68 + 24);
  *(void *)(v67 + 16) = *(void *)(v68 + 16);
  *(void *)(v67 + 24) = v70;
  swift_bridgeObjectRelease();
  uint64_t v71 = *(void *)(v68 + 40);
  *(void *)(v67 + 32) = *(void *)(v68 + 32);
  *(void *)(v67 + 40) = v71;
  swift_bridgeObjectRelease();
LABEL_28:
  uint64_t v73 = v49[10];
  uint64_t v74 = a1 + v73;
  uint64_t v75 = a2 + v73;
  uint64_t v76 = type metadata accessor for ServerStatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 40))(v74, v75, v76);
  *(void *)(a1 + v49[11]) = *(void *)(a2 + v49[11]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1006F886C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006F8880);
}

uint64_t sub_1006F8880(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_10000588C(&qword_101649E50);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_10000588C(&qword_101649E48);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_9;
  }
  uint64_t v14 = type metadata accessor for ServerStatusCode();
  int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[10];

  return v15(v17, a2, v16);
}

uint64_t sub_1006F8A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006F8A14);
}

uint64_t sub_1006F8A14(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_10000588C(&qword_101649E50);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_10000588C(&qword_101649E48);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for ServerStatusCode();
  int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[10];

  return v15(v17, a2, a2, v16);
}

uint64_t type metadata accessor for AccessoryInfoResponseContent(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_10164C2D0);
}

void sub_1006F8BB4()
{
  sub_1006F8D20(319, &qword_10164C2E0, (void (*)(uint64_t))type metadata accessor for AccessoryInfoResponseContent.Configuration);
  if (v0 <= 0x3F)
  {
    sub_1006F8D20(319, (unint64_t *)&unk_10164C2E8, (void (*)(uint64_t))type metadata accessor for AccessoryInfoResponseContent.Assets);
    if (v1 <= 0x3F)
    {
      type metadata accessor for ServerStatusCode();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1006F8D20(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for AccessoryInfoResponseContent.PublicKeys()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AccessoryInfoResponseContent.PublicKeys(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AccessoryInfoResponseContent.PublicKeys(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for AccessoryInfoResponseContent.PublicKeys(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingStats(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagingStats(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponseContent.PublicKeys()
{
  return &type metadata for AccessoryInfoResponseContent.PublicKeys;
}

uint64_t *sub_1006F8F9C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    v8((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]), v7);
    v8((uint64_t *)((char *)a1 + a3[8]), (uint64_t *)((char *)a2 + a3[8]), v7);
    v8((uint64_t *)((char *)a1 + a3[9]), (uint64_t *)((char *)a2 + a3[9]), v7);
    v8((uint64_t *)((char *)a1 + a3[10]), (uint64_t *)((char *)a2 + a3[10]), v7);
    v8((uint64_t *)((char *)a1 + a3[11]), (uint64_t *)((char *)a2 + a3[11]), v7);
    v8((uint64_t *)((char *)a1 + a3[12]), (uint64_t *)((char *)a2 + a3[12]), v7);
    v8((uint64_t *)((char *)a1 + a3[13]), (uint64_t *)((char *)a2 + a3[13]), v7);
    v8((uint64_t *)((char *)a1 + a3[14]), (uint64_t *)((char *)a2 + a3[14]), v7);
    v8((uint64_t *)((char *)a1 + a3[15]), (uint64_t *)((char *)a2 + a3[15]), v7);
  }
  return a1;
}

uint64_t sub_1006F919C(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);
  v7(a1 + a2[5], v4);
  v7(a1 + a2[6], v4);
  v7(a1 + a2[7], v4);
  v7(a1 + a2[8], v4);
  v7(a1 + a2[9], v4);
  v7(a1 + a2[10], v4);
  v7(a1 + a2[11], v4);
  v7(a1 + a2[12], v4);
  v7(a1 + a2[13], v4);
  v7(a1 + a2[14], v4);
  uint64_t v5 = a1 + a2[15];

  return ((uint64_t (*)(uint64_t, uint64_t))v7)(v5, v4);
}

uint64_t sub_1006F9354(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  return a1;
}

uint64_t sub_1006F9504(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  return a1;
}

uint64_t sub_1006F96B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  return a1;
}

uint64_t sub_1006F9864(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  return a1;
}

uint64_t sub_1006F9A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006F9A28);
}

uint64_t sub_1006F9A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1006F9A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006F9AA8);
}

uint64_t sub_1006F9AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1006F9B18()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1006F9BB8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[4];
    uint64_t v10 = a2[5];
    *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
    *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
    uint64_t v11 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v11;
    uint64_t v12 = a3[10];
    __dst = (void *)(a1 + v12);
    uint64_t v13 = (char *)a2 + v12;
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v10;
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v40 = *(void *)(v14 - 8);
    int v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v13, 1, v14))
    {
      uint64_t v16 = sub_10000588C(&qword_101649E40);
      memcpy(__dst, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v40 + 16))(__dst, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v18 = a3[11];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    if (v15((char *)a2 + v18, 1, v14))
    {
      uint64_t v21 = sub_10000588C(&qword_101649E40);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v19, v20, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v19, 0, 1, v14);
    }
    uint64_t v22 = a3[12];
    uint64_t v23 = a3[13];
    uint64_t v24 = (char *)v4 + v22;
    uint64_t v25 = (uint64_t)a2 + v22;
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = *(unsigned char *)(v25 + 8);
    uint64_t v26 = (void *)((char *)v4 + v23);
    uint64_t v27 = (uint64_t *)((char *)a2 + v23);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = a3[15];
    *(void *)((char *)v4 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    uint64_t v30 = (void *)((char *)v4 + v29);
    uint64_t v31 = (uint64_t *)((char *)a2 + v29);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = a3[17];
    *(void *)((char *)v4 + a3[16]) = *(uint64_t *)((char *)a2 + a3[16]);
    int v34 = (char *)v4 + v33;
    uint64_t v35 = (uint64_t)a2 + v33;
    *(_OWORD *)int v34 = *(_OWORD *)v35;
    v34[16] = *(unsigned char *)(v35 + 16);
    uint64_t v36 = a3[18];
    uint64_t v37 = (char *)v4 + v36;
    uint64_t v38 = (uint64_t)a2 + v36;
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
    v37[16] = *(unsigned char *)(v38 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1006F9ED0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 44);
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1006FA024(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  uint64_t v11 = a3[10];
  __dst = (void *)(a1 + v11);
  uint64_t v12 = (const void *)(a2 + v11);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v38 = *(void *)(v13 - 8);
  uint64_t v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14(v12, 1, v13))
  {
    uint64_t v15 = sub_10000588C(&qword_101649E40);
    memcpy(__dst, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v38 + 16))(__dst, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v16 = a3[11];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  if (v14((const void *)(a2 + v16), 1, v13))
  {
    uint64_t v19 = sub_10000588C(&qword_101649E40);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v38 + 16))(v17, v18, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v17, 0, 1, v13);
  }
  uint64_t v20 = a3[12];
  uint64_t v21 = a3[13];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  uint64_t v24 = (void *)(a1 + v21);
  uint64_t v25 = (void *)(a2 + v21);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = a3[17];
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  *(unsigned char *)(v32 + 16) = *(unsigned char *)(v33 + 16);
  uint64_t v34 = a3[18];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  *(unsigned char *)(v35 + 16) = *(unsigned char *)(v36 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1006FA2EC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = a3[10];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000588C(&qword_101649E40);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[11];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  int v19 = v12((void *)(a1 + v16), 1, v10);
  int v20 = v12(v18, 1, v10);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v17, v18, v10);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    uint64_t v21 = sub_10000588C(&qword_101649E40);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v17, v18, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
LABEL_13:
  uint64_t v22 = a3[12];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  *(unsigned char *)(v23 + 8) = *((unsigned char *)v24 + 8);
  *(void *)uint64_t v23 = v25;
  uint64_t v26 = a3[13];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  *uint64_t v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[15];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[17];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = (long long *)(a2 + v32);
  long long v35 = *v34;
  *(unsigned char *)(v33 + 16) = *((unsigned char *)v34 + 16);
  *(_OWORD *)uint64_t v33 = v35;
  uint64_t v36 = a3[18];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = (long long *)(a2 + v36);
  long long v39 = *v38;
  *(unsigned char *)(v37 + 16) = *((unsigned char *)v38 + 16);
  *(_OWORD *)uint64_t v37 = v39;
  return a1;
}

uint64_t sub_1006FA6CC(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v9 = a3[10];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  int v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12))
  {
    uint64_t v15 = sub_10000588C(&qword_101649E40);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v16 = a3[11];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  if (v14((const void *)(a2 + v16), 1, v12))
  {
    uint64_t v19 = sub_10000588C(&qword_101649E40);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v17, v18, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  uint64_t v20 = a3[12];
  uint64_t v21 = a3[13];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  uint64_t v24 = a3[15];
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  uint64_t v25 = a3[17];
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  *(unsigned char *)(v26 + 16) = *(unsigned char *)(v27 + 16);
  uint64_t v28 = a3[18];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  *(unsigned char *)(v29 + 16) = *(unsigned char *)(v30 + 16);
  return a1;
}

uint64_t sub_1006FA92C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v10 = a3[10];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    uint64_t v18 = sub_10000588C(&qword_101649E40);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  uint64_t v19 = a3[11];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  int v22 = v15((void *)(a1 + v19), 1, v13);
  int v23 = v15(v21, 1, v13);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v20, v21, v13);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v20, v13);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v24 = sub_10000588C(&qword_101649E40);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v20, v21, v13);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v20, 0, 1, v13);
LABEL_13:
  uint64_t v25 = a3[12];
  uint64_t v26 = a3[13];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = (void *)(a1 + v26);
  uint64_t v30 = (uint64_t *)(a2 + v26);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *uint64_t v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[15];
  uint64_t v34 = (void *)(a1 + v33);
  long long v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[17];
  uint64_t v39 = a3[18];
  uint64_t v40 = a1 + v38;
  uint64_t v41 = a2 + v38;
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(unsigned char *)(v40 + 16) = *(unsigned char *)(v41 + 16);
  uint64_t v42 = a1 + v39;
  uint64_t v43 = a2 + v39;
  *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
  *(unsigned char *)(v42 + 16) = *(unsigned char *)(v43 + 16);
  return a1;
}

uint64_t sub_1006FAC9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006FACB0);
}

uint64_t sub_1006FACB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000588C(&qword_101649E40);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1006FAD64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006FAD78);
}

uint64_t sub_1006FAD78(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000588C(&qword_101649E40);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1006FAE24()
{
  sub_1006F8D20(319, (unint64_t *)&qword_10164BC80, (void (*)(uint64_t))&type metadata accessor for URL);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1006FAF2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v78 = a1;
  uint64_t v1 = sub_10000588C(&qword_101649E48);
  __chkstk_darwin(v1 - 8);
  uint64_t v77 = (char *)&v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_101649E40);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  long long v79 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  int v82 = (char *)&v77 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  long long v81 = (char *)&v77 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v77 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v85 = (char *)&v77 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v86 = (char *)&v77 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v87 = (char *)&v77 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v88 = (char *)&v77 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v89 = (char *)&v77 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v90 = (char *)&v77 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v92 = (char *)&v77 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v93 = (char *)&v77 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  size_t v84 = (char *)&v77 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  int v83 = (char *)&v77 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v77 - v33;
  __chkstk_darwin(v32);
  uint64_t v94 = (uint64_t)&v77 - v35;
  uint64_t v36 = sub_10000588C(&qword_101649E50);
  __chkstk_darwin(v36 - 8);
  uint64_t v38 = (char *)&v77 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  uint64_t v39 = type metadata accessor for URL();
  uint64_t v40 = *(void **)(v39 - 8);
  uint64_t v41 = (uint64_t (*)(char *, uint64_t, uint64_t))v40[6];
  uint64_t result = v41(v34, 1, v39);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v43 = (void (*)(uint64_t, char *, uint64_t))v40[4];
  uint64_t v44 = v94;
  uint64_t v91 = v40 + 4;
  v43(v94, v34, v39);
  uint64_t v45 = (void (*)(uint64_t, void, uint64_t, uint64_t))v40[7];
  v45(v44, 0, 1, v39);
  uint64_t v46 = v84;
  URL.init(string:)();
  uint64_t result = v41(v46, 1, v39);
  if (result == 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v47 = (uint64_t)v83;
  size_t v84 = (char *)v43;
  v43((uint64_t)v83, v46, v39);
  v45(v47, 0, 1, v39);
  *(_OWORD *)uint64_t v38 = xmmword_101366BC0;
  *((void *)v38 + 2) = 0x6E6F796E6143;
  *((void *)v38 + 3) = 0xE600000000000000;
  strcpy(v38 + 32, "Endurace CF7");
  v38[45] = 0;
  *((_WORD *)v38 + 23) = -5120;
  *((_WORD *)v38 + 24) = 0;
  *(_OWORD *)(v38 + 56) = xmmword_101366BD0;
  v38[72] = 0;
  uint64_t v48 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  sub_10001D608(v94, (uint64_t)&v38[v48[10]], &qword_101649E40);
  sub_10001D608(v47, (uint64_t)&v38[v48[11]], &qword_101649E40);
  uint64_t v49 = &v38[v48[12]];
  *(void *)uint64_t v49 = 0;
  v49[8] = 0;
  uint64_t v50 = &v38[v48[13]];
  *(void *)uint64_t v50 = 0xD000000000000012;
  *((void *)v50 + 1) = 0x8000000101405050;
  *(void *)&v38[v48[14]] = &off_1015A0FC8;
  uint64_t v51 = &v38[v48[15]];
  *(void *)uint64_t v51 = 0xD000000000000010;
  *((void *)v51 + 1) = 0x8000000101405070;
  *(void *)&v38[v48[16]] = &off_1015A0FF8;
  uint64_t v52 = &v38[v48[17]];
  *(void *)uint64_t v52 = 0;
  *((void *)v52 + 1) = 0;
  v52[16] = 1;
  uint64_t v53 = &v38[v48[18]];
  *(void *)uint64_t v53 = 0;
  *((void *)v53 + 1) = 0;
  v53[16] = 1;
  (*(void (**)(char *, void, uint64_t, int *))(*((void *)v48 - 1) + 56))(v38, 0, 1, v48);
  uint64_t v54 = v93;
  URL.init(string:)();
  uint64_t result = v41(v54, 1, v39);
  if (result == 1)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v55 = v92;
  URL.init(string:)();
  uint64_t result = v41(v55, 1, v39);
  int v57 = v81;
  int v56 = v82;
  if (result == 1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v58 = v90;
  URL.init(string:)();
  uint64_t result = v41(v58, 1, v39);
  if (result == 1)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  int v59 = v89;
  URL.init(string:)();
  uint64_t result = v41(v59, 1, v39);
  if (result == 1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v60 = v88;
  URL.init(string:)();
  uint64_t result = v41(v60, 1, v39);
  if (result == 1)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v61 = v87;
  URL.init(string:)();
  uint64_t result = v41(v61, 1, v39);
  if (result == 1)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v62 = v56;
  uint64_t v63 = v86;
  URL.init(string:)();
  uint64_t result = v41(v63, 1, v39);
  if (result == 1)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v64 = v57;
  uint64_t v65 = v85;
  URL.init(string:)();
  uint64_t result = v41(v65, 1, v39);
  uint64_t v66 = v80;
  if (result == 1)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  URL.init(string:)();
  uint64_t result = v41(v66, 1, v39);
  if (result == 1)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  URL.init(string:)();
  uint64_t result = v41(v64, 1, v39);
  if (result == 1)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  URL.init(string:)();
  uint64_t result = v41(v62, 1, v39);
  if (result == 1)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v67 = v79;
  URL.init(string:)();
  uint64_t result = v41(v67, 1, v39);
  if (result != 1)
  {
    uint64_t v68 = (uint64_t)v77;
    uint64_t v69 = (void (*)(uint64_t, char *, uint64_t))v84;
    ((void (*)(char *, char *, uint64_t))v84)(v77, v93, v39);
    uint64_t v70 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
    v69(v68 + v70[5], v92, v39);
    v69(v68 + v70[6], v90, v39);
    v69(v68 + v70[7], v89, v39);
    v69(v68 + v70[8], v88, v39);
    v69(v68 + v70[9], v87, v39);
    v69(v68 + v70[10], v86, v39);
    v69(v68 + v70[11], v85, v39);
    v69(v68 + v70[12], v66, v39);
    v69(v68 + v70[13], v64, v39);
    v69(v68 + v70[14], v62, v39);
    v69(v68 + v70[15], v67, v39);
    (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v70 - 1) + 56))(v68, 0, 1, v70);
    uint64_t v71 = (int *)type metadata accessor for AccessoryInfoResponseContent(0);
    uint64_t v72 = v78;
    uint64_t v73 = v78 + v71[10];
    uint64_t v74 = enum case for ServerStatusCode.success(_:);
    uint64_t v75 = type metadata accessor for ServerStatusCode();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 104))(v73, v74, v75);
    *(void *)uint64_t v72 = 0;
    *(unsigned char *)(v72 + 8) = 1;
    *(void *)(v72 + 16) = 0x64695F796D6D7564;
    *(void *)(v72 + 24) = 0xE800000000000000;
    *(unsigned char *)(v72 + 32) = 1;
    *(_DWORD *)(v72 + 33) = 33686018;
    *(_DWORD *)(v72 + 36) = 33686018;
    *(_OWORD *)(v72 + 40) = 0u;
    *(_OWORD *)(v72 + 56) = 0u;
    *(void *)(v72 + 72) = 0x101010101010101;
    *(_DWORD *)(v72 + 80) = 16843009;
    sub_10001D608((uint64_t)v38, v72 + v71[6], &qword_101649E50);
    uint64_t result = sub_10001D608(v68, v72 + v71[7], &qword_101649E48);
    *(_OWORD *)(v72 + v71[8]) = xmmword_101366BE0;
    uint64_t v76 = (_OWORD *)(v72 + v71[9]);
    v76[1] = 0u;
    v76[2] = 0u;
    *uint64_t v76 = 0u;
    *(void *)(v72 + v71[11]) = 0;
    return result;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1006FBAF8(unint64_t a1, unsigned int a2)
{
  unint64_t v2 = a1 & 0x10000;
  if (a1)
  {
    BOOL v4 = v2 == 0;
    if ((a1 & 0x100) == 0)
    {
      uint64_t v3 = 5;
      if (v4) {
        uint64_t v3 = 1;
      }
      if ((a1 & 0x1000000) != 0) {
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    uint64_t v3 = 7;
    uint64_t v5 = 3;
  }
  else
  {
    if ((a1 & 0x100) == 0)
    {
      uint64_t v3 = v2 >> 14;
      if ((a1 & 0x1000000) == 0) {
        goto LABEL_17;
      }
LABEL_16:
      v3 |= 8uLL;
      goto LABEL_17;
    }
    BOOL v4 = v2 == 0;
    uint64_t v3 = 6;
    uint64_t v5 = 2;
  }
  if (v4) {
    uint64_t v3 = v5;
  }
  if ((a1 & 0x1000000) != 0) {
    goto LABEL_16;
  }
LABEL_17:
  int8x16_t v6 = (int8x16_t)vdupq_n_s64(a1);
  int8x16_t v7 = vandq_s8(vbicq_s8((int8x16_t)vshlq_u64((uint64x2_t)v6, (uint64x2_t)xmmword_101366C10), (int8x16_t)vceqq_s64((int64x2_t)vandq_s8(v6, (int8x16_t)xmmword_101366C00), (int64x2_t)xmmword_101366C30)), (int8x16_t)xmmword_101366C60);
  int8x8_t v8 = (int8x8_t)vdup_n_s32(a2);
  int8x16_t v9 = vandq_s8(vbicq_s8((int8x16_t)vshlq_u64((uint64x2_t)v6, (uint64x2_t)xmmword_101366C20), (int8x16_t)vceqq_s64((int64x2_t)vandq_s8(v6, (int8x16_t)xmmword_101366BF0), (int64x2_t)xmmword_101366C40)), (int8x16_t)xmmword_101366C50);
  int32x2_t v10 = (int32x2_t)vand_s8(vbic_s8((int8x8_t)vshl_u32((uint32x2_t)v8, (uint32x2_t)0x30000000ALL), (int8x8_t)vceq_s32((int32x2_t)vand_s8(v8, (int8x8_t)0xFF00000000FFLL), (int32x2_t)0x20000000002)), (int8x8_t)0x80000000400);
  unsigned __int32 v11 = vorr_s8((int8x8_t)v10, (int8x8_t)vdup_lane_s32(v10, 1)).u32[0];
  if ((a2 & 0xFF0000) == 0x20000) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = (a2 >> 7) & 0x200;
  }
  LODWORD(v13) = (a2 >> 12) & 0x1000;
  if (HIBYTE(a2) == 2) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v13;
  }
  int8x16_t v14 = vorrq_s8(v9, v7);
  return *(void *)&vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)) | v12 | v3 | v13 | v11;
}

uint64_t sub_1006FBC44(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164C6D8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int8x16_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100708F3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int sub_1006FBDAC(double a1, double a2)
{
  Hasher.init(_seed:)();
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t sub_1006FBE1C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164C710);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int8x16_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100708E94();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_10000588C(&qword_10164C698);
  sub_1007093F8(&qword_10164C718, &qword_10164C720);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_1006FBFA4()
{
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v1 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(v0 + 32);
  if (v2 == 2)
  {
    Swift::UInt8 v3 = 0;
  }
  else
  {
    Swift::UInt8 v3 = v2 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v3);
  int v4 = *(unsigned __int8 *)(v0 + 33);
  if (v4 == 2)
  {
    Swift::UInt8 v5 = 0;
  }
  else
  {
    Swift::UInt8 v5 = v4 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v5);
  int v6 = *(unsigned __int8 *)(v0 + 34);
  if (v6 == 2)
  {
    Swift::UInt8 v7 = 0;
  }
  else
  {
    Swift::UInt8 v7 = v6 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v7);
  int v8 = *(unsigned __int8 *)(v0 + 35);
  if (v8 == 2)
  {
    Swift::UInt8 v9 = 0;
  }
  else
  {
    Swift::UInt8 v9 = v8 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  int v10 = *(unsigned __int8 *)(v0 + 36);
  if (v10 == 2)
  {
    Swift::UInt8 v11 = 0;
  }
  else
  {
    Swift::UInt8 v11 = v10 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  int v12 = *(unsigned __int8 *)(v0 + 37);
  if (v12 == 2)
  {
    Swift::UInt8 v13 = 0;
  }
  else
  {
    Swift::UInt8 v13 = v12 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  int v14 = *(unsigned __int8 *)(v0 + 38);
  if (v14 == 2)
  {
    Swift::UInt8 v15 = 0;
  }
  else
  {
    Swift::UInt8 v15 = v14 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v15);
  int v16 = *(unsigned __int8 *)(v0 + 39);
  if (v16 == 2)
  {
    Swift::UInt8 v17 = 0;
  }
  else
  {
    Swift::UInt8 v17 = v16 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v17);
  if (!*(void *)(v0 + 48))
  {
    Hasher._combine(_:)(0);
    if (*(void *)(v0 + 64)) {
      goto LABEL_30;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 64)) {
    goto LABEL_34;
  }
LABEL_30:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  swift_bridgeObjectRelease();
}

unint64_t sub_1006FC1FC(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7250796D646E6966;
      break;
    case 3:
      unint64_t result = 0x6341454C45487369;
      break;
    case 5:
      unint64_t result = 0xD000000000000016;
      break;
    case 6:
      unint64_t result = 0x6E6564646968;
      break;
    case 7:
      unint64_t result = 0x6761547269417369;
      break;
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    case 9:
      unint64_t result = 0x5565636166727573;
      break;
    case 10:
      unint64_t result = 0x496B726F7774656ELL;
      break;
    case 11:
      unint64_t result = 0x70756B6F6F4C6E73;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1006FC37C(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164C700);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100709350();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[7] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[6] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[5] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[4] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1006FC670(uint64_t a1, unint64_t a2, unsigned int a3)
{
  Hasher._combine(_:)(a2 & 1);
  Hasher._combine(_:)(BYTE1(a2) & 1);
  Hasher._combine(_:)(BYTE2(a2) & 1);
  Hasher._combine(_:)(BYTE3(a2) & 1);
  if ((a2 & 0xFF00000000) == 0x200000000)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    uint64_t v5 = HIDWORD(a2) & 1;
  }
  Hasher._combine(_:)(v5);
  if ((a2 & 0xFF0000000000) == 0x20000000000)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    uint64_t v6 = (a2 >> 40) & 1;
  }
  Hasher._combine(_:)(v6);
  if ((a2 & 0xFF000000000000) == 0x2000000000000)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    uint64_t v7 = HIWORD(a2) & 1;
  }
  Hasher._combine(_:)(v7);
  if (HIBYTE(a2) == 2)
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    uint64_t v8 = HIBYTE(a2) & 1;
  }
  Hasher._combine(_:)(v8);
  if (a3 == 2)
  {
    Swift::UInt8 v9 = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Swift::UInt8 v9 = a3 & 1;
  }
  Hasher._combine(_:)(v9);
  if ((a3 & 0xFF00) == 0x200)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    int v10 = (a3 >> 8) & 1;
  }
  Hasher._combine(_:)(v10);
  if ((a3 & 0xFF0000) == 0x20000)
  {
    LOBYTE(v11) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    int v11 = HIWORD(a3) & 1;
  }
  Hasher._combine(_:)(v11);
  if (HIBYTE(a3) == 2)
  {
    LOBYTE(v12) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    int v12 = HIBYTE(a3) & 1;
  }
  Hasher._combine(_:)(v12);
}

uint64_t sub_1006FC7EC(char a1)
{
  uint64_t result = 0x6E756F5379616C70;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6C656363417475;
      break;
    case 2:
      unsigned int v3 = 1281582702;
      goto LABEL_5;
    case 3:
      unsigned int v3 = 1281715298;
LABEL_5:
      uint64_t result = v3 | 0x756B6F6F00000000;
      break;
    case 4:
      uint64_t result = 0x65646F4D74736F6CLL;
      break;
    case 5:
      uint64_t result = 0x6857796669746F6ELL;
      break;
    case 6:
      uint64_t result = 0x7449656D616E6572;
      break;
    case 7:
      uint64_t result = 0x65676E6172;
      break;
    case 8:
      uint64_t result = 0x6E69646E69467462;
      break;
    case 9:
      uint64_t result = 0xD000000000000014;
      break;
    case 10:
      uint64_t result = 1886544245;
      break;
    case 11:
      uint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1006FC970(void *a1, uint64_t a2, int a3)
{
  v10[2] = a3;
  uint64_t v5 = sub_10000588C(&qword_10164C708);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1007093A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    char v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v19 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v18 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v17 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v16 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v15 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v14 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v13 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v12 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1006FCCB0()
{
  if (*v0) {
    return 121;
  }
  else {
    return 120;
  }
}

uint64_t sub_1006FCCC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100705218(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006FCCF0(uint64_t a1)
{
  unint64_t v2 = sub_100708F3C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006FCD2C(uint64_t a1)
{
  unint64_t v2 = sub_100708F3C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1006FCD68(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = sub_1007052D8(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(void *)(a2 + 8) = v5;
  }
}

uint64_t sub_1006FCD94(void *a1)
{
  return sub_1006FBC44(a1);
}

Swift::Int sub_1006FCDB0()
{
  return sub_1006FBDAC(*v0, v0[1]);
}

void sub_1006FCDB8()
{
  Swift::UInt64 v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *v0;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

Swift::Int sub_1006FCE00()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL sub_1006FCE60(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_1006FCE8C()
{
  return 0x73746375646F7270;
}

uint64_t sub_1006FCEA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73746375646F7270 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1006FCF3C(uint64_t a1)
{
  unint64_t v2 = sub_100708E94();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006FCF78(uint64_t a1)
{
  unint64_t v2 = sub_100708E94();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1006FCFB4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100705484(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1006FCFE0(void *a1)
{
  return sub_1006FBE1C(a1, *v1);
}

unint64_t sub_1006FCFFC()
{
  return sub_1006FC1FC(*v0);
}

uint64_t sub_1006FD004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100705634(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006FD02C(uint64_t a1)
{
  unint64_t v2 = sub_100709350();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006FD068(uint64_t a1)
{
  unint64_t v2 = sub_100709350();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1006FD0A4@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100705B40(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1006FD0F8(void *a1)
{
  return sub_1006FC37C(a1);
}

Swift::Int sub_1006FD110()
{
  return Hasher._finalize()();
}

Swift::Int sub_1006FD154()
{
  return Hasher._finalize()();
}

BOOL sub_1006FD190(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  uint64_t v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_100702E3C((uint64_t)v7, (uint64_t)v9);
}

uint64_t sub_1006FD1EC()
{
  return sub_1006FC7EC(*v0);
}

uint64_t sub_1006FD1F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100705F9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006FD21C(uint64_t a1)
{
  unint64_t v2 = sub_1007093A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006FD258(uint64_t a1)
{
  unint64_t v2 = sub_1007093A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1006FD294@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_100706490(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result & 1;
    *(unsigned char *)(a2 + 1) = BYTE1(result) & 1;
    *(unsigned char *)(a2 + 2) = BYTE2(result) & 1;
    *(unsigned char *)(a2 + 3) = BYTE3(result) & 1;
    *(unsigned char *)(a2 + 4) = BYTE4(result);
    *(unsigned char *)(a2 + 5) = BYTE5(result);
    *(unsigned char *)(a2 + 6) = BYTE6(result);
    *(unsigned char *)(a2 + 7) = HIBYTE(result);
    *(_DWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_1006FD318(void *a1)
{
  uint64_t v2 = 256;
  if (!v1[1]) {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v2 | *v1;
  uint64_t v4 = 0x10000;
  if (!v1[2]) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 0x1000000;
  if (!v1[3]) {
    uint64_t v5 = 0;
  }
  return sub_1006FC970(a1, v3 | v4 | v5 | ((unint64_t)v1[4] << 32) | ((unint64_t)v1[5] << 40) | ((unint64_t)v1[6] << 48) | ((unint64_t)v1[7] << 56), *((_DWORD *)v1 + 2));
}

Swift::Int sub_1006FD394()
{
  uint64_t v1 = *v0;
  int v2 = v0[1];
  int v3 = v0[2];
  int v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  unsigned int v8 = *((_DWORD *)v0 + 2);
  uint64_t v9 = v0[7];
  Hasher.init(_seed:)();
  uint64_t v10 = 256;
  if (!v2) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 | v1;
  uint64_t v12 = 0x10000;
  if (!v3) {
    uint64_t v12 = 0;
  }
  uint64_t v13 = 0x1000000;
  if (!v4) {
    uint64_t v13 = 0;
  }
  sub_1006FC670((uint64_t)v15, v11 | v12 | v13 | (v5 << 32) | (v6 << 40) | (v7 << 48) | (v9 << 56), v8);
  return Hasher._finalize()();
}

void sub_1006FD45C(uint64_t a1)
{
  uint64_t v2 = 256;
  if (!v1[1]) {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v2 | *v1;
  uint64_t v4 = 0x10000;
  if (!v1[2]) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 0x1000000;
  if (!v1[3]) {
    uint64_t v5 = 0;
  }
  sub_1006FC670(a1, v3 | v4 | v5 | ((unint64_t)v1[4] << 32) | ((unint64_t)v1[5] << 40) | ((unint64_t)v1[6] << 48) | ((unint64_t)v1[7] << 56), *((_DWORD *)v1 + 2));
}

Swift::Int sub_1006FD4C4()
{
  uint64_t v1 = *v0;
  int v2 = v0[1];
  int v3 = v0[2];
  int v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  unsigned int v8 = *((_DWORD *)v0 + 2);
  uint64_t v9 = v0[7];
  Hasher.init(_seed:)();
  uint64_t v10 = 256;
  if (!v2) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 | v1;
  uint64_t v12 = 0x10000;
  if (!v3) {
    uint64_t v12 = 0;
  }
  uint64_t v13 = 0x1000000;
  if (!v4) {
    uint64_t v13 = 0;
  }
  sub_1006FC670((uint64_t)v15, v11 | v12 | v13 | (v5 << 32) | (v6 << 40) | (v7 << 48) | (v9 << 56), v8);
  return Hasher._finalize()();
}

uint64_t sub_1006FD588(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 2);
  unsigned int v4 = *((_DWORD *)a2 + 2);
  if (a1[1]) {
    uint64_t v5 = 256;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v5 | *a1;
  if (a1[2]) {
    uint64_t v7 = 0x10000;
  }
  else {
    uint64_t v7 = 0;
  }
  if (a1[3]) {
    uint64_t v8 = 0x1000000;
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = v6 | v7 | v8 | ((unint64_t)a1[4] << 32) | ((unint64_t)a1[5] << 40) | ((unint64_t)a1[6] << 48) | ((unint64_t)a1[7] << 56);
  if (a2[1]) {
    uint64_t v10 = 256;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 | *a2;
  if (a2[2]) {
    uint64_t v12 = 0x10000;
  }
  else {
    uint64_t v12 = 0;
  }
  if (a2[3]) {
    uint64_t v13 = 0x1000000;
  }
  else {
    uint64_t v13 = 0;
  }
  unint64_t v14 = v11 | v12 | v13 | ((unint64_t)a2[4] << 32) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[6] << 48) | ((unint64_t)a2[7] << 56);
  return sub_1007030F8(v9, v3, v14, v4);
}

uint64_t sub_1006FD660()
{
  v17[8] = 0;
  _StringGuts.grow(_:)(52);
  v1._uint64_t countAndFlagsBits = 0x3A6449747261703CLL;
  v1._object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  *(void *)char v17 = *v0;
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x7079547472617020;
  v3._object = (void *)0xEB00000000203A65;
  String.append(_:)(v3);
  uint64_t v4 = *((void *)v0 + 1);
  uint64_t v5 = (void *)*((void *)v0 + 2);
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x6D614E7472617020;
  v7._object = (void *)0xEB00000000203A65;
  String.append(_:)(v7);
  uint64_t v8 = *((void *)v0 + 3);
  unint64_t v9 = (void *)*((void *)v0 + 4);
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x616D697250736920;
  v11._object = (void *)0xEC000000203A7972;
  String.append(_:)(v11);
  if (v0[56]) {
    uint64_t v12 = 1702195828;
  }
  else {
    uint64_t v12 = 0x65736C6166;
  }
  if (v0[56]) {
    unint64_t v13 = 0xE400000000000000;
  }
  else {
    unint64_t v13 = 0xE500000000000000;
  }
  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 62;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return *(void *)&v17[1];
}

void sub_1006FD808()
{
  Hasher._combine(_:)(*(unsigned char *)v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 48))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  int v1 = *(unsigned __int8 *)(v0 + 56);
  if (v1 == 2)
  {
    Swift::UInt8 v2 = 0;
  }
  else
  {
    Swift::UInt8 v2 = v1 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v2);
}

uint64_t sub_1006FD8EC(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164C6D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100708EE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1006FDAC4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v39 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_101649E40);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  Swift::String v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v38 - v8;
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 49))
  {
    Swift::UInt8 v10 = 0;
  }
  else
  {
    Swift::UInt8 v10 = *(unsigned char *)(v0 + 48);
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(*(void *)(v0 + 56));
  if (*(unsigned char *)(v0 + 72) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v11 = *(void *)(v0 + 64);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  uint64_t v12 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  sub_10001D074(v0 + v12[10], (uint64_t)v9, &qword_101649E40);
  unint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48);
  if (v13(v9, 1, v1) == 1)
  {
    uint64_t v14 = v2;
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::String v15 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    uint64_t v38 = v7;
    char v16 = v39;
    v15(v39, v9, v1);
    Hasher._combine(_:)(1u);
    sub_100700E1C(&qword_10164C4E0, (void (*)(uint64_t))&type metadata accessor for URL);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v14 = v2;
    char v17 = v16;
    Swift::String v7 = v38;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v17, v1);
  }
  sub_10001D074(v0 + v12[11], (uint64_t)v7, &qword_101649E40);
  if (v13(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v18 = v39;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v39, v7, v1);
    Hasher._combine(_:)(1u);
    sub_100700E1C(&qword_10164C4E0, (void (*)(uint64_t))&type metadata accessor for URL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v1);
  }
  uint64_t v19 = v0 + v12[12];
  if (*(unsigned char *)(v19 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v20 = *(void *)v19;
    Hasher._combine(_:)(1u);
    if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v21 = v20;
    }
    else {
      Swift::UInt64 v21 = 0;
    }
    Hasher._combine(_:)(v21);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(v0 + v12[14]);
  if (v22)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v22 + 16));
    uint64_t v23 = *(void *)(v22 + 16);
    if (v23)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = v22 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v24 += 16;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)(v0 + v12[16]);
  if (v25)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v25 + 16));
    uint64_t v26 = *(void *)(v25 + 16);
    if (v26)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = v25 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v27 += 16;
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v28 = v0 + v12[17];
  if (*(unsigned char *)(v28 + 16))
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v30 = *(void *)v28;
    Swift::UInt64 v29 = *(void *)(v28 + 8);
    Hasher._combine(_:)(1u);
    if ((v30 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v31 = v30;
    }
    else {
      Swift::UInt64 v31 = 0;
    }
    Hasher._combine(_:)(v31);
    if ((v29 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v32 = v29;
    }
    else {
      Swift::UInt64 v32 = 0;
    }
    Hasher._combine(_:)(v32);
  }
  uint64_t v33 = v0 + v12[18];
  if (*(unsigned char *)(v33 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v35 = *(void *)v33;
    Swift::UInt64 v34 = *(void *)(v33 + 8);
    Hasher._combine(_:)(1u);
    if ((v35 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v36 = v35;
    }
    else {
      Swift::UInt64 v36 = 0;
    }
    Hasher._combine(_:)(v36);
    if ((v34 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v37 = v34;
    }
    else {
      Swift::UInt64 v37 = 0;
    }
    Hasher._combine(_:)(v37);
  }
}

unint64_t sub_1006FE0E4(char a1)
{
  unint64_t result = 0xD000000000000013;
  switch(a1)
  {
    case 1:
    case 11:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x6D614E6C65646F6DLL;
      break;
    case 3:
      unint64_t result = 0x5479726574746162;
      break;
    case 4:
      unint64_t result = 0x79726F6765746163;
      break;
    case 5:
      unint64_t result = 0x52746C7561666564;
      break;
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 7:
      unint64_t result = 0xD000000000000018;
      break;
    case 8:
      unint64_t result = 0xD000000000000014;
      break;
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    case 10:
      unint64_t result = 0x726F4D6E7261656CLL;
      break;
    case 12:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 13:
      unint64_t result = 0xD000000000000018;
      break;
    case 14:
      unint64_t result = 0xD000000000000024;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1006FE2A0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10164C5F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100707E64();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v15) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v15) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v15) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v15) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v15) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    unint64_t v9 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    LOBYTE(v15) = 6;
    type metadata accessor for URL();
    sub_100700E1C(&qword_10164BCE0, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v15) = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v15) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v15) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v15 = *(void *)(v3 + v9[14]);
    char v17 = 10;
    sub_10000588C(&qword_101654A30);
    sub_1004CB3CC((unint64_t *)&qword_10163CCD8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v15) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&long long v15 = *(void *)(v3 + v9[16]);
    char v17 = 12;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    Swift::UInt8 v10 = (long long *)(v3 + v9[17]);
    char v11 = *((unsigned char *)v10 + 16);
    long long v15 = *v10;
    char v16 = v11;
    char v17 = 13;
    sub_100707F0C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v12 = (long long *)(v3 + v9[18]);
    char v13 = *((unsigned char *)v12 + 16);
    long long v15 = *v12;
    char v16 = v13;
    char v17 = 14;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1006FE758@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_101649E40);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  Swift::UInt8 v10 = (char *)v39 - v9;
  uint64_t v42 = sub_10000588C(&qword_10164C5E0);
  uint64_t v11 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  char v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  __chkstk_darwin(v45);
  uint64_t v43 = a1;
  uint64_t v44 = (void *)((char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001CD44(a1, a1[3]);
  sub_100707E64();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v43);
  }
  uint64_t v40 = a2;
  uint64_t v41 = v11;
  LOBYTE(v46) = 0;
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v16 = v45;
  char v18 = v44;
  *uint64_t v44 = v15;
  v18[1] = v19;
  LOBYTE(v46) = 1;
  long long v18[2] = KeyedDecodingContainer.decode(_:forKey:)();
  v18[3] = v20;
  LOBYTE(v46) = 2;
  v18[4] = KeyedDecodingContainer.decode(_:forKey:)();
  v18[5] = v21;
  LOBYTE(v46) = 3;
  __int16 v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((unsigned char *)v18 + 48) = v22;
  *((unsigned char *)v18 + 49) = HIBYTE(v22) & 1;
  LOBYTE(v46) = 4;
  v18[7] = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v46) = 5;
  v18[8] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *((unsigned char *)v18 + 72) = v23 & 1;
  uint64_t v24 = type metadata accessor for URL();
  LOBYTE(v46) = 6;
  v39[0] = sub_100700E1C(&qword_10164BCD0, (void (*)(uint64_t))&type metadata accessor for URL);
  v39[1] = v24;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001D608((uint64_t)v10, (uint64_t)v18 + v16[10], &qword_101649E40);
  LOBYTE(v46) = 7;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001D608((uint64_t)v8, (uint64_t)v18 + v16[11], &qword_101649E40);
  LOBYTE(v46) = 8;
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v26 = (char *)v18 + v16[12];
  *(void *)uint64_t v26 = v25;
  v26[8] = v27 & 1;
  LOBYTE(v46) = 9;
  uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
  Swift::UInt64 v29 = (uint64_t *)((char *)v44 + v45[13]);
  *Swift::UInt64 v29 = v28;
  v29[1] = v30;
  sub_10000588C(&qword_101654A30);
  char v48 = 10;
  sub_1004CB3CC((unint64_t *)&qword_1016475B0);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(uint64_t *)((char *)v44 + v45[14]) = v46;
  LOBYTE(v46) = 11;
  uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
  Swift::UInt64 v32 = (uint64_t *)((char *)v44 + v45[15]);
  *Swift::UInt64 v32 = v31;
  v32[1] = v33;
  char v48 = 12;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(uint64_t *)((char *)v44 + v45[16]) = v46;
  char v48 = 13;
  sub_100707EB8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  char v34 = v47;
  Swift::UInt64 v35 = (char *)v44 + v45[17];
  *(_OWORD *)Swift::UInt64 v35 = v46;
  v35[16] = v34;
  char v48 = 14;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v42);
  char v36 = v47;
  uint64_t v37 = (uint64_t)v44;
  uint64_t v38 = (char *)v44 + v45[18];
  *(_OWORD *)uint64_t v38 = v46;
  v38[16] = v36;
  sub_100707DFC(v37, v40, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v43);
  return sub_1006F7560(v37, type metadata accessor for AccessoryInfoResponseContent.Configuration);
}

unint64_t sub_1006FF040(char a1)
{
  unint64_t result = 0x48746C7561666564;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4C746C7561666564;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
    case 8:
    case 10:
      unint64_t result = 0x726F4D6E7261656CLL;
      break;
    case 7:
      unint64_t result = 0xD000000000000019;
      break;
    case 9:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 11:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1006FF1BC(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164C5D8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100707DA8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[31] = 0;
  type metadata accessor for URL();
  sub_100700E1C(&qword_10164BCE0, (void (*)(uint64_t))&type metadata accessor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for AccessoryInfoResponseContent.Assets(0);
    v8[30] = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[29] = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[28] = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[27] = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[26] = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[25] = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[24] = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[15] = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[14] = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[13] = 10;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[12] = 11;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1006FF590@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v89 = type metadata accessor for URL();
  uint64_t v87 = *(void *)(v89 - 8);
  uint64_t v3 = __chkstk_darwin(v89);
  uint64_t v74 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v75 = (char *)&v68 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v76 = (char *)&v68 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v77 = (char *)&v68 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v78 = (char *)&v68 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  long long v79 = (char *)&v68 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  char v17 = (char *)&v68 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v68 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  char v23 = (char *)&v68 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v68 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  Swift::UInt64 v29 = (char *)&v68 - v28;
  __chkstk_darwin(v27);
  int v83 = (char *)&v68 - v30;
  uint64_t v31 = sub_10000588C(&qword_10164C5C8);
  uint64_t v80 = *(void *)(v31 - 8);
  uint64_t v81 = v31;
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v68 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  __chkstk_darwin(v88);
  uint64_t v86 = (char *)&v68 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = a1[3];
  uint64_t v84 = (uint64_t)a1;
  sub_10001CD44(a1, v35);
  sub_100707DA8();
  int v82 = v33;
  uint64_t v36 = v89;
  uint64_t v37 = v85;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v37)
  {
    uint64_t v85 = v37;
    LODWORD(v80) = 0;
    uint64_t v38 = v86;
    uint64_t v39 = v88;
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v84);
    LODWORD(v84) = 0;
    LODWORD(v81) = 0;
    LODWORD(v82) = 0;
    LODWORD(v83) = 0;
    int v45 = 0;
    uint64_t v46 = v89;
    uint64_t v47 = v87;
    int v50 = 0;
  }
  else
  {
    uint64_t v85 = v26;
    uint64_t v71 = v20;
    uint64_t v72 = v23;
    uint64_t v70 = v17;
    char v101 = 0;
    uint64_t v40 = sub_100700E1C(&qword_10164BCD0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v41 = v83;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v48 = v86;
    uint64_t v49 = v87 + 32;
    uint64_t v69 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
    v69(v86, v41, v36);
    char v100 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v52 = v88;
    uint64_t v53 = &v48[v88[5]];
    uint64_t v68 = v49;
    uint64_t v54 = v69;
    v69(v53, v29, v36);
    char v99 = 2;
    uint64_t v55 = v85;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v56 = v48;
    v54(&v48[v52[6]], v55, v89);
    char v98 = 3;
    int v57 = v72;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v58 = v89;
    v54(&v56[v88[7]], v57, v89);
    char v97 = 4;
    int v59 = v71;
    uint64_t v72 = (char *)v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v60 = v58;
    v69(&v56[v88[8]], v59, v58);
    char v96 = 5;
    uint64_t v61 = v70;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v69(&v56[v88[9]], v61, v60);
    char v95 = 6;
    uint64_t v62 = v79;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v69(&v56[v88[10]], v62, v60);
    char v94 = 7;
    uint64_t v63 = v78;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v69(&v56[v88[11]], v63, v60);
    char v93 = 8;
    uint64_t v64 = v77;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    LODWORD(v83) = 1;
    v69(&v56[v88[12]], v64, v60);
    char v92 = 9;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v85 = 0;
    v69(&v86[v88[13]], v76, v89);
    char v91 = 10;
    uint64_t v65 = v85;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v85 = v65;
    if (v65)
    {
      (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v81);
      LODWORD(v81) = 0;
      LODWORD(v82) = 1;
    }
    else
    {
      v69(&v86[v88[14]], v75, v89);
      char v90 = 11;
      uint64_t v66 = v85;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v85 = v66;
      if (!v66)
      {
        (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v81);
        uint64_t v67 = (uint64_t)v86;
        v69(&v86[v88[15]], v74, v89);
        sub_100707DFC(v67, v73, type metadata accessor for AccessoryInfoResponseContent.Assets);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v84);
        return sub_1006F7560(v67, type metadata accessor for AccessoryInfoResponseContent.Assets);
      }
      (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v81);
      LODWORD(v82) = 1;
      LODWORD(v81) = 1;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v84);
    LODWORD(v84) = 1;
    LODWORD(v80) = 1;
    int v45 = 1;
    uint64_t v43 = v86;
    uint64_t v44 = *(void (**)(char *, uint64_t))(v87 + 8);
    uint64_t v46 = v89;
    v44(v86, v89);
    v44(&v43[v88[5]], v46);
    uint64_t v38 = v43;
    uint64_t v47 = v87;
    uint64_t v39 = v88;
    v44(&v38[v88[6]], v46);
    v44(&v38[v39[7]], v46);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v44)(&v38[v39[8]], v46);
    int v50 = (int)v83;
    if (v84)
    {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v44)(&v38[v39[9]], v46);
      if (v80)
      {
        v44(&v38[v39[10]], v46);
        goto LABEL_9;
      }
      goto LABEL_11;
    }
  }
  if (!v80)
  {
LABEL_11:
    if (v45)
    {
      uint64_t v44 = *(void (**)(char *, uint64_t))(v47 + 8);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v44)(&v38[v39[11]], v46);
      int v51 = v81;
      if ((v50 & 1) == 0) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
    goto LABEL_15;
  }
  uint64_t v44 = *(void (**)(char *, uint64_t))(v47 + 8);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v44)(&v38[v39[10]], v46);
  if (v45)
  {
LABEL_9:
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v44)(&v38[v39[11]], v46);
    int v51 = v81;
    if ((v50 & 1) == 0)
    {
LABEL_20:
      if (v82)
      {
        uint64_t v44 = *(void (**)(char *, uint64_t))(v47 + 8);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v44)(&v38[v39[13]], v46);
        if ((v51 & 1) == 0) {
          return result;
        }
        return ((uint64_t (*)(char *, uint64_t))v44)(&v38[v39[14]], v46);
      }
      goto LABEL_23;
    }
LABEL_13:
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v44)(&v38[v39[12]], v46);
    if ((v82 & 1) == 0) {
      goto LABEL_23;
    }
LABEL_17:
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v44)(&v38[v39[13]], v46);
    if ((v51 & 1) == 0) {
      return result;
    }
    return ((uint64_t (*)(char *, uint64_t))v44)(&v38[v39[14]], v46);
  }
LABEL_15:
  if (!v50)
  {
    int v51 = v81;
    goto LABEL_20;
  }
  uint64_t v44 = *(void (**)(char *, uint64_t))(v47 + 8);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v44)(&v38[v39[12]], v46);
  int v51 = v81;
  if (v82) {
    goto LABEL_17;
  }
LABEL_23:
  if (!v51) {
    return result;
  }
  uint64_t v44 = *(void (**)(char *, uint64_t))(v47 + 8);
  return ((uint64_t (*)(void, void))v44)(&v38[v39[14]], v46);
}

uint64_t sub_100700408()
{
  uint64_t result = 0x6E65644974726170;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6570795474726170;
      break;
    case 2:
      uint64_t result = 0x656D614E74726170;
      break;
    case 3:
      uint64_t result = 0x626D795374726170;
      break;
    case 4:
      uint64_t result = 0x72616D6972507369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1007004C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100706834(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1007004F0(uint64_t a1)
{
  unint64_t v2 = sub_100708EE8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10070052C(uint64_t a1)
{
  unint64_t v2 = sub_100708EE8();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100700568@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100706A90(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_1007005B4(void *a1)
{
  return sub_1006FD8EC(a1);
}

Swift::Int sub_1007005CC()
{
  return Hasher._finalize()();
}

Swift::Int sub_100700610()
{
  return Hasher._finalize()();
}

uint64_t sub_100700650(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  long long v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return sub_100703330((unsigned __int8 *)v5, (unsigned __int8 *)v7) & 1;
}

unint64_t sub_1007006AC()
{
  return sub_1006FE0E4(*v0);
}

uint64_t sub_1007006B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100706DE4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1007006DC(unsigned char *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_1007006E8(uint64_t a1)
{
  unint64_t v2 = sub_100707E64();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100700724(uint64_t a1)
{
  unint64_t v2 = sub_100707E64();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100700760@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1006FE758(a1, a2);
}

uint64_t sub_100700778(void *a1)
{
  return sub_1006FE2A0(a1);
}

Swift::Int sub_100700790(uint64_t a1, uint64_t a2)
{
  return sub_1007029E8(a1, a2, (void (*)(unsigned char *))sub_1006FDAC4);
}

Swift::Int sub_1007007AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100702A4C(a1, a2, a3, (void (*)(unsigned char *))sub_1006FDAC4);
}

uint64_t sub_1007007C8()
{
  return sub_100700E1C(&qword_10164C4B0, (void (*)(uint64_t))type metadata accessor for AccessoryInfoResponseContent.Configuration);
}

unint64_t sub_100700810()
{
  return sub_1006FF040(*v0);
}

uint64_t sub_100700818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1007073EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100700840(uint64_t a1)
{
  unint64_t v2 = sub_100707DA8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10070087C(uint64_t a1)
{
  unint64_t v2 = sub_100707DA8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1007008B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1006FF590(a1, a2);
}

uint64_t sub_1007008D0(void *a1)
{
  return sub_1006FF1BC(a1);
}

Swift::Int sub_1007008E8()
{
  return Hasher._finalize()();
}

uint64_t sub_100700A94()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_100700C28()
{
  return Hasher._finalize()();
}

uint64_t sub_100700DD4()
{
  return sub_100700E1C(&qword_10164C4B8, (void (*)(uint64_t))type metadata accessor for AccessoryInfoResponseContent.Assets);
}

uint64_t sub_100700E1C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100700E64()
{
  _StringGuts.grow(_:)(51);
  v1._uint64_t countAndFlagsBits = 0x7972636E4531653CLL;
  v1._object = (void *)0xEE003A6E6F697470;
  String.append(_:)(v1);
  uint64_t v2 = *v0;
  long long v3 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x7972636E45326520;
  v5._object = (void *)0xEE003A6E6F697470;
  String.append(_:)(v5);
  uint64_t v6 = v0[2];
  uint64_t v7 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x8000000101405380;
  v9._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v9);
  uint64_t v11 = v0[4];
  uint64_t v10 = (void *)v0[5];
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = v11;
  v12._object = v10;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t sub_100700FA0(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164C5C0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100707D54();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100701128()
{
  uint64_t v1 = 0x707972636E453265;
  if (*v0 != 1) {
    uint64_t v1 = 0x6966697265563273;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x707972636E453165;
  }
}

uint64_t sub_100701188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100707930(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1007011B0(uint64_t a1)
{
  unint64_t v2 = sub_100707D54();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007011EC(uint64_t a1)
{
  unint64_t v2 = sub_100707D54();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100701228@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100707ABC(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_10070126C(void *a1)
{
  return sub_100700FA0(a1);
}

Swift::Int sub_100701284()
{
  return Hasher._finalize()();
}

uint64_t sub_100701308()
{
  String.hash(into:)();
  String.hash(into:)();

  return String.hash(into:)();
}

Swift::Int sub_100701374()
{
  return Hasher._finalize()();
}

uint64_t sub_1007013F8(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  _OWORD v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  _OWORD v8[2] = v5;
  return sub_10070343C(v7, v8) & 1;
}

unint64_t sub_100701444()
{
  unint64_t result = qword_10164C4C0;
  if (!qword_10164C4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C4C0);
  }
  return result;
}

void sub_100701498(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  uint64_t v30 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101649E48);
  __chkstk_darwin(v7 - 8);
  uint64_t v29 = (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  uint64_t v9 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101649E50);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v15 = *(_OWORD *)(v1 + 48);
  uint64_t v31[2] = *(_OWORD *)(v1 + 32);
  v31[3] = v15;
  uint64_t v32 = *(void *)(v1 + 64);
  long long v16 = *(_OWORD *)(v1 + 16);
  v31[0] = *(_OWORD *)v1;
  v31[1] = v16;
  sub_100705118((uint64_t)v31);
  sub_1006FBFA4();
  sub_100705164((uint64_t)v31);
  uint64_t v17 = *(void *)(v1 + 72);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unsigned int v18 = *(_DWORD *)(v1 + 80);
    Hasher._combine(_:)(1u);
    sub_1006FC670(a1, v17 & 0xFFFFFFFF01010101, v18);
  }
  uint64_t v19 = v28;
  uint64_t v20 = (int *)type metadata accessor for AccessoryInfoResponseContent(0);
  sub_10001D074(v2 + v20[6], (uint64_t)v14, &qword_101649E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v19) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_1007051B0((uint64_t)v14, (uint64_t)v11, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    Hasher._combine(_:)(1u);
    sub_1006FDAC4();
    sub_1006F7560((uint64_t)v11, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  }
  uint64_t v22 = v29;
  uint64_t v21 = v30;
  sub_10001D074(v2 + v20[7], v29, &qword_101649E48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_1007051B0(v22, (uint64_t)v6, type metadata accessor for AccessoryInfoResponseContent.Assets);
    Hasher._combine(_:)(1u);
    type metadata accessor for URL();
    sub_100700E1C(&qword_10164C4E0, (void (*)(uint64_t))&type metadata accessor for URL);
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    dispatch thunk of Hashable.hash(into:)();
    sub_1006F7560((uint64_t)v6, type metadata accessor for AccessoryInfoResponseContent.Assets);
  }
  if (*(void *)(v2 + v20[8] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  char v23 = (uint64_t *)(v2 + v20[9]);
  uint64_t v24 = v23[1];
  if (v24)
  {
    uint64_t v25 = *v23;
    Hasher._combine(_:)(1u);
    sub_1005F4D3C(v25, v24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    String.hash(into:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100704DB8(v25, v24);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  type metadata accessor for ServerStatusCode();
  sub_100700E1C(&qword_10164C590, (void (*)(uint64_t))&type metadata accessor for ServerStatusCode);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v26 = *(void *)(v2 + v20[11]);
  if (v26)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    sub_100CCB08C(a1, v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t sub_100701B48(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10164C548);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100704D64();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v9 = *(unsigned char *)(v3 + 8);
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v11 = *(void *)(v3 + 24);
  *(void *)&long long v19 = *(void *)v3;
  BYTE8(v19) = v9;
  *(void *)&long long v20 = v10;
  *((void *)&v20 + 1) = v11;
  *(void *)&v21[0] = *(void *)(v3 + 32);
  *(_OWORD *)((char *)v21 + 8) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)((char *)&v21[1] + 8) = *(_OWORD *)(v3 + 56);
  char v18 = 0;
  sub_100704F58();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    int v12 = *(_DWORD *)(v3 + 80);
    *(void *)&long long v19 = *(void *)(v3 + 72);
    DWORD2(v19) = v12;
    char v18 = 1;
    sub_100704FAC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v13 = type metadata accessor for AccessoryInfoResponseContent(0);
    LOBYTE(v19) = 2;
    type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    sub_100700E1C(&qword_10164C560, (void (*)(uint64_t))type metadata accessor for AccessoryInfoResponseContent.Configuration);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = 3;
    type metadata accessor for AccessoryInfoResponseContent.Assets(0);
    sub_100700E1C(&qword_10164C568, (void (*)(uint64_t))type metadata accessor for AccessoryInfoResponseContent.Assets);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v14 = (long long *)(v3 + *(int *)(v13 + 36));
    long long v15 = v14[1];
    long long v19 = *v14;
    long long v20 = v15;
    v21[0] = v14[2];
    char v18 = 5;
    sub_100705000();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = 6;
    type metadata accessor for ServerStatusCode();
    sub_100700E1C(&qword_10164C578, (void (*)(uint64_t))&type metadata accessor for ServerStatusCode);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v19 = *(void *)(v3 + *(int *)(v13 + 44));
    char v18 = 7;
    sub_10000588C(&qword_10164C530);
    sub_100705054(&qword_10164C580, (void (*)(void))sub_1007050C4);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100701F7C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v3 = type metadata accessor for ServerStatusCode();
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  __chkstk_darwin(v3);
  uint64_t v40 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101649E48);
  __chkstk_darwin(v5 - 8);
  uint64_t v41 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101649E50);
  __chkstk_darwin(v7 - 8);
  char v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10164C4F8);
  uint64_t v44 = *(void *)(v10 - 8);
  uint64_t v45 = v10;
  __chkstk_darwin(v10);
  int v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AccessoryInfoResponseContent(0);
  __chkstk_darwin(v13);
  long long v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100704D64();
  uint64_t v16 = (uint64_t)v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v17 = (uint64_t)v9;
  uint64_t v18 = v44;
  uint64_t v37 = v15;
  uint64_t v38 = (int *)v13;
  uint64_t v46 = a1;
  char v50 = 0;
  sub_100704E08();
  uint64_t v19 = v45;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v20 = BYTE8(v47);
  long long v21 = v48;
  uint64_t v22 = v37;
  *uint64_t v37 = v47;
  *((unsigned char *)v22 + 8) = v20;
  *((_OWORD *)v22 + 1) = v21;
  v22[4] = *(void *)&v49[0];
  *(_OWORD *)(v22 + 5) = *(_OWORD *)((char *)v49 + 8);
  *(_OWORD *)(v22 + 7) = *(_OWORD *)((char *)&v49[1] + 8);
  char v50 = 1;
  sub_100704E5C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v23 = v18;
  int v24 = DWORD2(v47);
  v22[9] = v47;
  *((_DWORD *)v22 + 20) = v24;
  type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  LOBYTE(v47) = 2;
  sub_100700E1C(&qword_10164C518, (void (*)(uint64_t))type metadata accessor for AccessoryInfoResponseContent.Configuration);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v25 = v38;
  sub_10001D608(v17, (uint64_t)v22 + v38[6], &qword_101649E50);
  type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  LOBYTE(v47) = 3;
  sub_100700E1C(&qword_10164C520, (void (*)(uint64_t))type metadata accessor for AccessoryInfoResponseContent.Assets);
  uint64_t v26 = (uint64_t)v41;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001D608(v26, (uint64_t)v22 + v25[7], &qword_101649E48);
  LOBYTE(v47) = 4;
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v28 = (void *)((char *)v22 + v25[8]);
  *uint64_t v28 = v27;
  v28[1] = v29;
  char v50 = 5;
  sub_100704EB0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v30 = (_OWORD *)((char *)v22 + v25[9]);
  long long v31 = v48;
  *uint64_t v30 = v47;
  v30[1] = v31;
  void v30[2] = v49[0];
  LOBYTE(v47) = 6;
  sub_100700E1C((unint64_t *)&qword_10163D990, (void (*)(uint64_t))&type metadata accessor for ServerStatusCode);
  uint64_t v32 = v40;
  uint64_t v33 = (char *)v22;
  uint64_t v34 = v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v33[v25[10]], v32, v34);
  sub_10000588C(&qword_10164C530);
  char v50 = 7;
  sub_100705054(&qword_10164C538, (void (*)(void))sub_100704F04);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v19);
  uint64_t v35 = (uint64_t)v37;
  *(void *)((char *)v37 + v25[11]) = v47;
  sub_100707DFC(v35, v39, type metadata accessor for AccessoryInfoResponseContent);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v46);
  return sub_1006F7560(v35, type metadata accessor for AccessoryInfoResponseContent);
}

uint64_t sub_1007027DC()
{
  uint64_t result = 0x6572617774666F73;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x696C696261706163;
      break;
    case 2:
      uint64_t result = 0x72756769666E6F63;
      break;
    case 3:
      uint64_t result = 0x737465737361;
      break;
    case 4:
      uint64_t result = 0x6E6F6973726576;
      break;
    case 5:
      uint64_t result = 0x654B63696C627570;
      break;
    case 6:
      uint64_t result = 0x737574617473;
      break;
    case 7:
      uint64_t result = 0x655474756F79616CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100702900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100708F90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100702928(uint64_t a1)
{
  unint64_t v2 = sub_100704D64();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100702964(uint64_t a1)
{
  unint64_t v2 = sub_100704D64();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1007029A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100701F7C(a1, a2);
}

uint64_t sub_1007029B8(void *a1)
{
  return sub_100701B48(a1);
}

Swift::Int sub_1007029D0(uint64_t a1, uint64_t a2)
{
  return sub_1007029E8(a1, a2, (void (*)(unsigned char *))sub_100701498);
}

Swift::Int sub_1007029E8(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int sub_100702A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100702A4C(a1, a2, a3, (void (*)(unsigned char *))sub_100701498);
}

Swift::Int sub_100702A4C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_100702A94()
{
  return sub_100700E1C(&qword_10164C4C8, (void (*)(uint64_t))type metadata accessor for AccessoryInfoResponseContent);
}

uint64_t sub_100702ADC()
{
  uint64_t v1 = sub_10000588C(&qword_101649E50);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v19 = 0;
  *((void *)&v19 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  long long v22 = v19;
  v4._uint64_t countAndFlagsBits = 60;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  char v5 = *(unsigned char *)(v0 + 8);
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = *(void *)(v0 + 24);
  *(void *)&long long v19 = *(void *)v0;
  BYTE8(v19) = v5;
  *(void *)&long long v20 = v6;
  *((void *)&v20 + 1) = v7;
  *(void *)&v21[0] = *(void *)(v0 + 32);
  *(_OWORD *)((char *)v21 + 8) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)((char *)&v21[1] + 8) = *(_OWORD *)(v0 + 56);
  _print_unlocked<A, B>(_:_:)();
  v8._uint64_t countAndFlagsBits = 0x3A73757461747320;
  v8._object = (void *)0xE800000000000000;
  String.append(_:)(v8);
  char v9 = (int *)type metadata accessor for AccessoryInfoResponseContent(0);
  type metadata accessor for ServerStatusCode();
  sub_100700E1C(&qword_10164C4D0, (void (*)(uint64_t))&type metadata accessor for ServerStatusCode);
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x6E6F697372657620;
  v11._object = (void *)0xE90000000000003ALL;
  String.append(_:)(v11);
  long long v19 = *(_OWORD *)(v0 + v9[8]);
  sub_10000588C(&qword_101644320);
  _print_unlocked<A, B>(_:_:)();
  v12._uint64_t countAndFlagsBits = 0x3A6769666E6F6320;
  v12._object = (void *)0xE800000000000000;
  String.append(_:)(v12);
  sub_10001D074(v0 + v9[6], (uint64_t)v3, &qword_101649E50);
  v13._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x4B63696C62757020;
  v14._object = (void *)0xEC0000003A737965;
  String.append(_:)(v14);
  long long v15 = (long long *)(v0 + v9[9]);
  long long v16 = v15[1];
  long long v19 = *v15;
  long long v20 = v16;
  v21[0] = v15[2];
  sub_10000588C(&qword_10164C4D8);
  _print_unlocked<A, B>(_:_:)();
  v17._uint64_t countAndFlagsBits = 62;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  return v22;
}

unint64_t sub_100702D90()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  type metadata accessor for AccessoryInfoResponseContent(0);
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000020;
}

unint64_t sub_100702E34()
{
  return sub_100702D90();
}

BOOL sub_100702E3C(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)a1 != *(void *)a2) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  BOOL v5 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v6 & 1) != 0))
  {
    int v8 = *(unsigned __int8 *)(a1 + 32);
    int v9 = *(unsigned __int8 *)(a2 + 32);
    if (v8 == 2)
    {
      if (v9 != 2) {
        return 0;
      }
    }
    else
    {
      BOOL result = 0;
      BOOL v10 = (v8 & 1) == 0;
      if (v9 == 2 || ((v10 ^ v9) & 1) == 0) {
        return result;
      }
    }
    int v11 = *(unsigned __int8 *)(a1 + 33);
    int v12 = *(unsigned __int8 *)(a2 + 33);
    if (v11 == 2)
    {
      if (v12 != 2) {
        return 0;
      }
    }
    else
    {
      BOOL result = 0;
      BOOL v13 = (v11 & 1) == 0;
      if (v12 == 2 || ((v13 ^ v12) & 1) == 0) {
        return result;
      }
    }
    int v14 = *(unsigned __int8 *)(a1 + 34);
    int v15 = *(unsigned __int8 *)(a2 + 34);
    if (v14 == 2)
    {
      if (v15 != 2) {
        return 0;
      }
    }
    else
    {
      BOOL result = 0;
      BOOL v16 = (v14 & 1) == 0;
      if (v15 == 2 || ((v16 ^ v15) & 1) == 0) {
        return result;
      }
    }
    int v17 = *(unsigned __int8 *)(a1 + 35);
    int v18 = *(unsigned __int8 *)(a2 + 35);
    if (v17 == 2)
    {
      if (v18 != 2) {
        return 0;
      }
    }
    else
    {
      BOOL result = 0;
      BOOL v19 = (v17 & 1) == 0;
      if (v18 == 2 || ((v19 ^ v18) & 1) == 0) {
        return result;
      }
    }
    int v20 = *(unsigned __int8 *)(a1 + 36);
    int v21 = *(unsigned __int8 *)(a2 + 36);
    if (v20 == 2)
    {
      if (v21 != 2) {
        return 0;
      }
    }
    else
    {
      BOOL result = 0;
      BOOL v22 = (v20 & 1) == 0;
      if (v21 == 2 || ((v22 ^ v21) & 1) == 0) {
        return result;
      }
    }
    int v23 = *(unsigned __int8 *)(a1 + 37);
    int v24 = *(unsigned __int8 *)(a2 + 37);
    if (v23 == 2)
    {
      if (v24 != 2) {
        return 0;
      }
    }
    else
    {
      BOOL result = 0;
      BOOL v25 = (v23 & 1) == 0;
      if (v24 == 2 || ((v25 ^ v24) & 1) == 0) {
        return result;
      }
    }
    int v26 = *(unsigned __int8 *)(a1 + 38);
    int v27 = *(unsigned __int8 *)(a2 + 38);
    if (v26 == 2)
    {
      if (v27 != 2) {
        return 0;
      }
    }
    else
    {
      BOOL result = 0;
      BOOL v28 = (v26 & 1) == 0;
      if (v27 == 2 || ((v28 ^ v27) & 1) == 0) {
        return result;
      }
    }
    int v29 = *(unsigned __int8 *)(a1 + 39);
    int v30 = *(unsigned __int8 *)(a2 + 39);
    if (v29 == 2)
    {
      if (v30 != 2) {
        return 0;
      }
    }
    else
    {
      BOOL result = 0;
      BOOL v31 = (v29 & 1) == 0;
      if (v30 == 2 || ((v31 ^ v30) & 1) == 0) {
        return result;
      }
    }
    uint64_t v32 = *(void *)(a1 + 48);
    uint64_t v33 = *(void *)(a2 + 48);
    if (v32)
    {
      if (!v33) {
        return 0;
      }
      if (*(void *)(a1 + 40) != *(void *)(a2 + 40) || v32 != v33)
      {
        char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v34 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v33)
    {
      return 0;
    }
    uint64_t v35 = *(void *)(a1 + 64);
    uint64_t v36 = *(void *)(a2 + 64);
    if (v35) {
      return v36
    }
          && (*(void *)(a1 + 56) == *(void *)(a2 + 56) && v35 == v36
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
    return !v36;
  }
  return result;
}

uint64_t sub_1007030F8(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4)
{
  uint64_t result = 0;
  if (((a1 ^ a3) & 1) == 0
    && ((a1 >> 8) & 1) == ((a3 >> 8) & 1)
    && ((a1 >> 16) & 1) == ((a3 >> 16) & 1)
    && ((a1 >> 24) & 1) == ((a3 >> 24) & 1))
  {
    if ((a1 & 0xFF00000000) == 0x200000000)
    {
      if (BYTE4(a3) != 2) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if (BYTE4(a3) == 2 || ((a1 & (unint64_t)&_mh_execute_header) == 0) == (BYTE4(a3) & 1)) {
        return result;
      }
    }
    if ((a1 & 0xFF0000000000) == 0x20000000000)
    {
      if (BYTE5(a3) != 2) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if (BYTE5(a3) == 2 || ((a1 & 0x10000000000) == 0) == ((a3 >> 40) & 1)) {
        return result;
      }
    }
    if ((a1 & 0xFF000000000000) == 0x2000000000000)
    {
      if (BYTE6(a3) != 2) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if (BYTE6(a3) == 2 || ((a1 & 0x1000000000000) == 0) == (HIWORD(a3) & 1)) {
        return result;
      }
    }
    unint64_t v6 = HIBYTE(a3);
    if (HIBYTE(a1) == 2)
    {
      if (v6 != 2) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      BOOL v7 = (a1 & 0x100000000000000) == 0;
      if (v6 == 2 || ((v7 ^ HIBYTE(a3) & 1) & 1) == 0) {
        return result;
      }
    }
    if (a2 == 2)
    {
      if (a4 != 2) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if (a4 == 2 || ((((a2 & 1) == 0) ^ a4) & 1) == 0) {
        return result;
      }
    }
    if ((a2 & 0xFF00) == 0x200)
    {
      if (BYTE1(a4) != 2) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if (BYTE1(a4) == 2 || ((((a2 & 0x100) == 0) ^ ((unsigned __int16)(a4 & 0x100) >> 8)) & 1) == 0) {
        return result;
      }
    }
    if ((a2 & 0xFF0000) == 0x20000)
    {
      if (BYTE2(a4) != 2) {
        return 0;
      }
LABEL_40:
      unsigned int v8 = HIBYTE(a4);
      if (HIBYTE(a2) == 2)
      {
        if (v8 == 2) {
          return 1;
        }
      }
      else if (v8 != 2 && ((((a2 & 0x1000000) == 0) ^ ((a4 & 0x1000000) >> 24)) & 1) != 0)
      {
        return 1;
      }
      return 0;
    }
    uint64_t result = 0;
    if (BYTE2(a4) != 2 && ((((a2 & 0x10000) == 0) ^ ((a4 & 0x10000) >> 16)) & 1) != 0) {
      goto LABEL_40;
    }
  }
  return result;
}

uint64_t sub_100703330(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  BOOL v4 = *((void *)a1 + 1) == *((void *)a2 + 1) && *((void *)a1 + 2) == *((void *)a2 + 2);
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = *((void *)a1 + 3) == *((void *)a2 + 3) && *((void *)a1 + 4) == *((void *)a2 + 4);
    if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v8 & 1) != 0))
    {
      uint64_t v9 = *((void *)a1 + 6);
      uint64_t v10 = *((void *)a2 + 6);
      if (v9)
      {
        if (v10)
        {
          if (*((void *)a1 + 5) != *((void *)a2 + 5) || v9 != v10)
          {
            char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t result = 0;
            if ((v11 & 1) == 0) {
              return result;
            }
          }
LABEL_19:
          int v12 = a1[56];
          int v13 = a2[56];
          if (v12 == 2)
          {
            if (v13 != 2) {
              return 0;
            }
          }
          else
          {
            BOOL v14 = (v12 & 1) == 0;
            if (v13 == 2 || ((v14 ^ v13) & 1) == 0) {
              return 0;
            }
          }
          return 1;
        }
      }
      else if (!v10)
      {
        goto LABEL_19;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_10070343C(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v8 & 1) != 0))
    {
      if (a1[4] == a2[4] && a1[5] == a2[5])
      {
        return 1;
      }
      else
      {
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
  }
  return result;
}

uint64_t sub_1007034F0()
{
  if ((static URL.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  if ((static URL.== infix(_:_:)() & 1) == 0
    || (static URL.== infix(_:_:)() & 1) == 0
    || (static URL.== infix(_:_:)() & 1) == 0
    || (static URL.== infix(_:_:)() & 1) == 0
    || (static URL.== infix(_:_:)() & 1) == 0
    || (static URL.== infix(_:_:)() & 1) == 0
    || (static URL.== infix(_:_:)() & 1) == 0
    || (static URL.== infix(_:_:)() & 1) == 0
    || (static URL.== infix(_:_:)() & 1) == 0
    || (static URL.== infix(_:_:)() & 1) == 0)
  {
    return 0;
  }

  return static URL.== infix(_:_:)();
}

BOOL sub_100703628(uint64_t a1, uint64_t a2)
{
  uint64_t v102 = type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  uint64_t v101 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v97 = (uint64_t)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000588C(&qword_10164C598);
  __chkstk_darwin(v99);
  unint64_t v6 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101649E48);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v98 = (uint64_t)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v103 = (uint64_t)&v93 - v11;
  __chkstk_darwin(v10);
  uint64_t v100 = (uint64_t)&v93 - v12;
  uint64_t v13 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  uint64_t v104 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  int v15 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_10164C5A0);
  __chkstk_darwin(v16);
  int v18 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_101649E50);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  BOOL v22 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  BOOL v25 = (char *)&v93 - v24;
  __chkstk_darwin(v23);
  int v27 = (char *)&v93 - v26;
  long long v28 = *(_OWORD *)(a1 + 48);
  v107[2] = *(_OWORD *)(a1 + 32);
  v107[3] = v28;
  uint64_t v108 = *(void *)(a1 + 64);
  long long v29 = *(_OWORD *)(a1 + 16);
  v107[0] = *(_OWORD *)a1;
  v107[1] = v29;
  long long v30 = *(_OWORD *)(a2 + 48);
  v109[2] = *(_OWORD *)(a2 + 32);
  v109[3] = v30;
  uint64_t v110 = *(void *)(a2 + 64);
  long long v31 = *(_OWORD *)(a2 + 16);
  v109[0] = *(_OWORD *)a2;
  v109[1] = v31;
  if (!sub_100702E3C((uint64_t)v107, (uint64_t)v109)) {
    return 0;
  }
  uint64_t v32 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72) == 2)
  {
    if (v32 != 2) {
      return 0;
    }
  }
  else if (v32 == 2 {
         || (sub_1007030F8(*(void *)(a1 + 72) & 0xFFFFFFFF01010101, *(_DWORD *)(a1 + 80), *(void *)(a2 + 72) & 0xFFFFFFFF01010101, *(_DWORD *)(a2 + 80)) & 1) == 0)
  }
  {
    return 0;
  }
  char v94 = v6;
  uint64_t v33 = type metadata accessor for AccessoryInfoResponseContent(0);
  uint64_t v96 = a2;
  uint64_t v34 = v33;
  sub_10001D074(a1 + *(int *)(v33 + 24), (uint64_t)v27, &qword_101649E50);
  uint64_t v95 = v34;
  sub_10001D074(v96 + *(int *)(v34 + 24), (uint64_t)v25, &qword_101649E50);
  uint64_t v35 = (uint64_t)&v18[*(int *)(v16 + 48)];
  sub_10001D074((uint64_t)v27, (uint64_t)v18, &qword_101649E50);
  sub_10001D074((uint64_t)v25, v35, &qword_101649E50);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48);
  if (v36((uint64_t)v18, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v25, &qword_101649E50);
    sub_10001DAB4((uint64_t)v27, &qword_101649E50);
    if (v36(v35, 1, v13) == 1)
    {
      sub_10001DAB4((uint64_t)v18, &qword_101649E50);
      goto LABEL_14;
    }
LABEL_12:
    uint64_t v37 = &qword_10164C5A0;
    uint64_t v38 = (uint64_t)v18;
LABEL_20:
    sub_10001DAB4(v38, v37);
    return 0;
  }
  sub_10001D074((uint64_t)v18, (uint64_t)v22, &qword_101649E50);
  if (v36(v35, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v25, &qword_101649E50);
    sub_10001DAB4((uint64_t)v27, &qword_101649E50);
    sub_1006F7560((uint64_t)v22, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    goto LABEL_12;
  }
  sub_1007051B0(v35, (uint64_t)v15, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  BOOL v39 = sub_100704420((uint64_t)v22, (uint64_t)v15);
  sub_1006F7560((uint64_t)v15, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  sub_10001DAB4((uint64_t)v25, &qword_101649E50);
  sub_10001DAB4((uint64_t)v27, &qword_101649E50);
  sub_1006F7560((uint64_t)v22, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  sub_10001DAB4((uint64_t)v18, &qword_101649E50);
  if (!v39) {
    return 0;
  }
LABEL_14:
  uint64_t v40 = v95;
  uint64_t v41 = v100;
  sub_10001D074(a1 + *(int *)(v95 + 28), v100, &qword_101649E48);
  uint64_t v42 = v103;
  sub_10001D074(v96 + *(int *)(v40 + 28), v103, &qword_101649E48);
  uint64_t v43 = (uint64_t)v94;
  uint64_t v44 = (uint64_t)&v94[*(int *)(v99 + 48)];
  sub_10001D074(v41, (uint64_t)v94, &qword_101649E48);
  sub_10001D074(v42, v44, &qword_101649E48);
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
  uint64_t v46 = v102;
  if (v45(v43, 1, v102) == 1)
  {
    sub_10001DAB4(v42, &qword_101649E48);
    sub_10001DAB4(v41, &qword_101649E48);
    if (v45(v44, 1, v46) == 1)
    {
      sub_10001DAB4(v43, &qword_101649E48);
      goto LABEL_24;
    }
    goto LABEL_19;
  }
  uint64_t v47 = v98;
  sub_10001D074(v43, v98, &qword_101649E48);
  if (v45(v44, 1, v46) == 1)
  {
    sub_10001DAB4(v103, &qword_101649E48);
    sub_10001DAB4(v41, &qword_101649E48);
    sub_1006F7560(v47, type metadata accessor for AccessoryInfoResponseContent.Assets);
LABEL_19:
    uint64_t v37 = &qword_10164C598;
    uint64_t v38 = v43;
    goto LABEL_20;
  }
  uint64_t v49 = v97;
  sub_1007051B0(v44, v97, type metadata accessor for AccessoryInfoResponseContent.Assets);
  char v50 = sub_1007034F0();
  sub_1006F7560(v49, type metadata accessor for AccessoryInfoResponseContent.Assets);
  sub_10001DAB4(v103, &qword_101649E48);
  sub_10001DAB4(v41, &qword_101649E48);
  sub_1006F7560(v47, type metadata accessor for AccessoryInfoResponseContent.Assets);
  sub_10001DAB4(v43, &qword_101649E48);
  if ((v50 & 1) == 0) {
    return 0;
  }
LABEL_24:
  uint64_t v51 = *(int *)(v40 + 32);
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = *(void *)(a1 + v51 + 8);
  uint64_t v54 = v96;
  uint64_t v55 = (void *)(v96 + v51);
  uint64_t v56 = v55[1];
  if (!v53)
  {
    if (v56) {
      return 0;
    }
    goto LABEL_31;
  }
  if (!v56) {
    return 0;
  }
  if (*v52 == *v55 && v53 == v56 || (v57 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v57 & 1) != 0))
  {
LABEL_31:
    uint64_t v58 = *(int *)(v95 + 36);
    uint64_t v59 = *(void *)(a1 + v58);
    uint64_t v60 = *(void *)(a1 + v58 + 8);
    uint64_t v61 = *(void *)(a1 + v58 + 16);
    uint64_t v62 = *(void *)(a1 + v58 + 24);
    uint64_t v63 = *(void *)(a1 + v58 + 32);
    uint64_t v64 = *(void *)(a1 + v58 + 40);
    uint64_t v65 = (uint64_t *)(v54 + v58);
    uint64_t v67 = *v65;
    uint64_t v66 = v65[1];
    uint64_t v68 = v65[2];
    uint64_t v104 = v65[3];
    uint64_t v69 = v65[4];
    uint64_t v103 = v65[5];
    if (v60)
    {
      if (v66)
      {
        uint64_t v100 = v69;
        uint64_t v102 = v68;
        if (v59 == v67 && v60 == v66) {
          goto LABEL_56;
        }
        uint64_t v101 = v62;
        uint64_t v99 = v64;
        uint64_t v70 = v66;
        uint64_t v71 = v61;
        uint64_t v72 = v63;
        uint64_t v73 = v60;
        uint64_t v74 = v59;
        char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v59 = v74;
        uint64_t v60 = v73;
        uint64_t v63 = v72;
        uint64_t v68 = v102;
        uint64_t v61 = v71;
        uint64_t v66 = v70;
        uint64_t v64 = v99;
        uint64_t v62 = v101;
        if (v75)
        {
LABEL_56:
          if (v61 == v68 && v62 == v104) {
            goto LABEL_39;
          }
          uint64_t v101 = v62;
          uint64_t v99 = v64;
          uint64_t v76 = v66;
          uint64_t v77 = v61;
          uint64_t v78 = v63;
          uint64_t v79 = v60;
          uint64_t v80 = v59;
          char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v59 = v80;
          uint64_t v60 = v79;
          uint64_t v63 = v78;
          uint64_t v61 = v77;
          uint64_t v66 = v76;
          uint64_t v64 = v99;
          if (v81)
          {
LABEL_39:
            uint64_t v98 = v66;
            if (v63 == v100 && v64 == v103)
            {
              uint64_t v82 = v59;
              sub_1005F4D3C(v59, v60);
              sub_1005F4D3C(v82, v60);
              sub_1005F4D3C(v67, v98);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_100704DB8(v82, v60);
            }
            else
            {
              uint64_t v99 = v63;
              uint64_t v87 = v59;
              LODWORD(v101) = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v97 = v61;
              sub_1005F4D3C(v87, v60);
              sub_1005F4D3C(v87, v60);
              sub_1005F4D3C(v67, v98);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_100704DB8(v87, v60);
              BOOL result = 0;
              if ((v101 & 1) == 0) {
                return result;
              }
            }
LABEL_47:
            uint64_t v88 = v54;
            uint64_t v89 = v95;
            type metadata accessor for ServerStatusCode();
            sub_100700E1C(&qword_10164C5A8, (void (*)(uint64_t))&type metadata accessor for ServerStatusCode);
            dispatch thunk of RawRepresentable.rawValue.getter();
            dispatch thunk of RawRepresentable.rawValue.getter();
            if (v106 == v105)
            {
              uint64_t v90 = *(int *)(v89 + 44);
              uint64_t v91 = *(void *)(a1 + v90);
              uint64_t v92 = *(void *)(v88 + v90);
              if (v91) {
                return v92 && (sub_100336660(v91, v92) & 1) != 0;
              }
              if (!v92) {
                return 1;
              }
            }
            return 0;
          }
        }
        uint64_t v86 = v59;
        sub_1005F4D3C(v59, v60);
        sub_1005F4D3C(v86, v60);
        sub_1005F4D3C(v67, v66);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v84 = v86;
        uint64_t v85 = v60;
LABEL_45:
        sub_100704DB8(v84, v85);
        return 0;
      }
    }
    else if (!v66)
    {
      goto LABEL_47;
    }
    uint64_t v83 = v59;
    sub_1005F4D3C(v59, v60);
    uint64_t v101 = v67;
    uint64_t v102 = v68;
    sub_1005F4D3C(v67, v66);
    sub_100704DB8(v83, v60);
    uint64_t v84 = v101;
    uint64_t v85 = v66;
    goto LABEL_45;
  }
  return result;
}

BOOL sub_100704420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v87 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v86 = &v77[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_10000588C(&qword_10164C4E8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v85 = &v77[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v10 = &v77[-v9];
  uint64_t v11 = sub_10000588C(&qword_101649E40);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  int v15 = &v77[-v14];
  uint64_t v16 = __chkstk_darwin(v13);
  int v18 = &v77[-v17];
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = &v77[-v20];
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = &v77[-v23];
  __chkstk_darwin(v22);
  int v27 = &v77[-v26];
  uint64_t v28 = *(void *)(a1 + 8);
  uint64_t v29 = *(void *)(a2 + 8);
  if (v28)
  {
    if (!v29) {
      return 0;
    }
    uint64_t v84 = v25;
    if (*(void *)a1 != *(void *)a2 || v28 != v29)
    {
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL result = 0;
      if ((v30 & 1) == 0) {
        return result;
      }
    }
  }
  else
  {
    uint64_t v84 = v25;
    if (v29) {
      return 0;
    }
  }
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)
    || (v32 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v32 & 1) != 0))
  {
    if (*(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40)
      || (v33 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v33 & 1) != 0))
    {
      char v34 = *(unsigned char *)(a2 + 49);
      if (*(unsigned char *)(a1 + 49))
      {
        if (!*(unsigned char *)(a2 + 49)) {
          return 0;
        }
      }
      else
      {
        if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)) {
          char v34 = 1;
        }
        if (v34) {
          return 0;
        }
      }
      if (*(void *)(a1 + 56) != *(void *)(a2 + 56)) {
        return 0;
      }
      char v35 = *(unsigned char *)(a2 + 72);
      if (*(unsigned char *)(a1 + 72))
      {
        if (!*(unsigned char *)(a2 + 72)) {
          return 0;
        }
      }
      else
      {
        if (*(void *)(a1 + 64) != *(void *)(a2 + 64)) {
          char v35 = 1;
        }
        if (v35) {
          return 0;
        }
      }
      uint64_t v82 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
      sub_10001D074(a1 + *(int *)(v82 + 40), (uint64_t)v27, &qword_101649E40);
      sub_10001D074(a2 + *(int *)(v82 + 40), (uint64_t)v24, &qword_101649E40);
      uint64_t v83 = (uint64_t)&v10[*(int *)(v6 + 48)];
      sub_10001D074((uint64_t)v27, (uint64_t)v10, &qword_101649E40);
      sub_10001D074((uint64_t)v24, v83, &qword_101649E40);
      uint64_t v80 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48);
      uint64_t v81 = v87 + 48;
      if (v80((uint64_t)v10, 1, v4) == 1)
      {
        sub_10001DAB4((uint64_t)v24, &qword_101649E40);
        sub_10001DAB4((uint64_t)v27, &qword_101649E40);
        if (v80(v83, 1, v4) == 1)
        {
          sub_10001DAB4((uint64_t)v10, &qword_101649E40);
LABEL_34:
          uint64_t v38 = v82;
          sub_10001D074(a1 + *(int *)(v82 + 44), (uint64_t)v18, &qword_101649E40);
          sub_10001D074(a2 + *(int *)(v38 + 44), (uint64_t)v15, &qword_101649E40);
          uint64_t v39 = *(int *)(v6 + 48);
          uint64_t v40 = v85;
          uint64_t v41 = (uint64_t)&v85[v39];
          sub_10001D074((uint64_t)v18, (uint64_t)v85, &qword_101649E40);
          sub_10001D074((uint64_t)v15, v41, &qword_101649E40);
          uint64_t v42 = v80;
          if (v80((uint64_t)v40, 1, v4) == 1)
          {
            sub_10001DAB4((uint64_t)v15, &qword_101649E40);
            sub_10001DAB4((uint64_t)v18, &qword_101649E40);
            if (v42(v41, 1, v4) == 1)
            {
              sub_10001DAB4((uint64_t)v40, &qword_101649E40);
              uint64_t v43 = (int *)v82;
LABEL_44:
              uint64_t v48 = v43[12];
              uint64_t v49 = (double *)(a1 + v48);
              char v50 = *(unsigned char *)(a1 + v48 + 8);
              uint64_t v51 = (double *)(a2 + v48);
              int v52 = *(unsigned __int8 *)(a2 + v48 + 8);
              if (v50)
              {
                if (!v52) {
                  return 0;
                }
              }
              else
              {
                if (*v49 != *v51) {
                  LOBYTE(v52) = 1;
                }
                if (v52) {
                  return 0;
                }
              }
              uint64_t v53 = v43[13];
              uint64_t v54 = *(void *)(a1 + v53);
              uint64_t v55 = *(void *)(a1 + v53 + 8);
              uint64_t v56 = (void *)(a2 + v53);
              if (v54 != *v56 || v55 != v56[1])
              {
                char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
                BOOL result = 0;
                if ((v57 & 1) == 0) {
                  return result;
                }
              }
              uint64_t v58 = v43[14];
              uint64_t v59 = *(void **)(a1 + v58);
              uint64_t v60 = *(void **)(a2 + v58);
              if (v59)
              {
                if (!v60 || (sub_100335B90(v59, v60) & 1) == 0) {
                  return 0;
                }
              }
              else if (v60)
              {
                return 0;
              }
              uint64_t v61 = v43[15];
              uint64_t v62 = *(void *)(a1 + v61);
              uint64_t v63 = *(void *)(a1 + v61 + 8);
              uint64_t v64 = (void *)(a2 + v61);
              if (v62 != *v64 || v63 != v64[1])
              {
                char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
                BOOL result = 0;
                if ((v65 & 1) == 0) {
                  return result;
                }
              }
              uint64_t v66 = v43[16];
              uint64_t v67 = *(void **)(a1 + v66);
              uint64_t v68 = *(void **)(a2 + v66);
              if (v67)
              {
                if (!v68 || (sub_100335B90(v67, v68) & 1) == 0) {
                  return 0;
                }
              }
              else if (v68)
              {
                return 0;
              }
              uint64_t v69 = v43[17];
              uint64_t v70 = (double *)(a1 + v69);
              char v71 = *(unsigned char *)(a1 + v69 + 16);
              uint64_t v72 = a2 + v69;
              if (v71)
              {
                if (!*(unsigned char *)(v72 + 16)) {
                  return 0;
                }
              }
              else
              {
                if (*(unsigned char *)(v72 + 16)) {
                  return 0;
                }
                BOOL result = 0;
                if (*v70 != *(double *)v72) {
                  return result;
                }
                uint64_t v43 = (int *)v82;
                if (v70[1] != *(double *)(v72 + 8)) {
                  return result;
                }
              }
              uint64_t v73 = v43[18];
              uint64_t v74 = (double *)(a1 + v73);
              char v75 = *(unsigned char *)(a1 + v73 + 16);
              uint64_t v76 = a2 + v73;
              if ((v75 & 1) == 0) {
                return (*(unsigned char *)(v76 + 16) & 1) == 0 && *v74 == *(double *)v76 && v74[1] == *(double *)(v76 + 8);
              }
              return (*(unsigned char *)(v76 + 16) & 1) != 0;
            }
          }
          else
          {
            uint64_t v44 = v84;
            sub_10001D074((uint64_t)v40, v84, &qword_101649E40);
            if (v42(v41, 1, v4) != 1)
            {
              uint64_t v45 = v86;
              uint64_t v46 = v87;
              (*(void (**)(unsigned char *, uint64_t, uint64_t))(v87 + 32))(v86, v41, v4);
              sub_100700E1C(&qword_10164C4F0, (void (*)(uint64_t))&type metadata accessor for URL);
              LODWORD(v83) = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v47 = *(void (**)(unsigned char *, uint64_t))(v46 + 8);
              v47(v45, v4);
              sub_10001DAB4((uint64_t)v15, &qword_101649E40);
              sub_10001DAB4((uint64_t)v18, &qword_101649E40);
              v47((unsigned char *)v44, v4);
              uint64_t v43 = (int *)v82;
              sub_10001DAB4((uint64_t)v40, &qword_101649E40);
              if ((v83 & 1) == 0) {
                return 0;
              }
              goto LABEL_44;
            }
            sub_10001DAB4((uint64_t)v15, &qword_101649E40);
            sub_10001DAB4((uint64_t)v18, &qword_101649E40);
            (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v44, v4);
          }
          uint64_t v36 = (uint64_t)v40;
LABEL_40:
          sub_10001DAB4(v36, &qword_10164C4E8);
          return 0;
        }
      }
      else
      {
        sub_10001D074((uint64_t)v10, (uint64_t)v21, &qword_101649E40);
        if (v80(v83, 1, v4) != 1)
        {
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v87 + 32))(v86, v83, v4);
          sub_100700E1C(&qword_10164C4F0, (void (*)(uint64_t))&type metadata accessor for URL);
          int v78 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v37 = *(void (**)(unsigned char *, uint64_t))(v87 + 8);
          uint64_t v79 = v87 + 8;
          uint64_t v83 = (uint64_t)v37;
          v37(v86, v4);
          sub_10001DAB4((uint64_t)v24, &qword_101649E40);
          sub_10001DAB4((uint64_t)v27, &qword_101649E40);
          ((void (*)(unsigned char *, uint64_t))v83)(v21, v4);
          sub_10001DAB4((uint64_t)v10, &qword_101649E40);
          if ((v78 & 1) == 0) {
            return 0;
          }
          goto LABEL_34;
        }
        sub_10001DAB4((uint64_t)v24, &qword_101649E40);
        sub_10001DAB4((uint64_t)v27, &qword_101649E40);
        (*(void (**)(unsigned char *, uint64_t))(v87 + 8))(v21, v4);
      }
      uint64_t v36 = (uint64_t)v10;
      goto LABEL_40;
    }
  }
  return result;
}

unint64_t sub_100704D64()
{
  unint64_t result = qword_10164C500;
  if (!qword_10164C500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C500);
  }
  return result;
}

uint64_t sub_100704DB8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100704E08()
{
  unint64_t result = qword_10164C508;
  if (!qword_10164C508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C508);
  }
  return result;
}

unint64_t sub_100704E5C()
{
  unint64_t result = qword_10164C510;
  if (!qword_10164C510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C510);
  }
  return result;
}

unint64_t sub_100704EB0()
{
  unint64_t result = qword_10164C528;
  if (!qword_10164C528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C528);
  }
  return result;
}

unint64_t sub_100704F04()
{
  unint64_t result = qword_10164C540;
  if (!qword_10164C540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C540);
  }
  return result;
}

unint64_t sub_100704F58()
{
  unint64_t result = qword_10164C550;
  if (!qword_10164C550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C550);
  }
  return result;
}

unint64_t sub_100704FAC()
{
  unint64_t result = qword_10164C558;
  if (!qword_10164C558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C558);
  }
  return result;
}

unint64_t sub_100705000()
{
  unint64_t result = qword_10164C570;
  if (!qword_10164C570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C570);
  }
  return result;
}

uint64_t sub_100705054(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_10164C530);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1007050C4()
{
  unint64_t result = qword_10164C588;
  if (!qword_10164C588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C588);
  }
  return result;
}

uint64_t sub_100705118(uint64_t a1)
{
  return a1;
}

uint64_t sub_100705164(uint64_t a1)
{
  return a1;
}

uint64_t sub_1007051B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100705218(uint64_t a1, uint64_t a2)
{
  if (a1 == 120 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 121 && a2 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

double sub_1007052D8(void *a1)
{
  uint64_t v4 = sub_10000588C(&qword_10164C6C0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100708F3C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v10[15] = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    double v2 = v8;
    v10[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v2;
}

void *sub_100705484(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164C688);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001CD44(a1, a1[3]);
  sub_100708E94();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C(&qword_10164C698);
    sub_1007093F8(&qword_10164C6A0, &qword_10164C6A8);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_100705634(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x8000000101405550
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7250796D646E6966 && a2 == 0xEF6449746375646FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000101405570 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6341454C45487369 && a2 == 0xEF79726F73736563 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000101405590 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001014055B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E6564646968 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6761547269417369 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001014055D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x5565636166727573 && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x496B726F7774656ELL && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x70756B6F6F4C6E73 && a2 == 0xEB000000006C7255)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

uint64_t sub_100705B40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10164C6E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  double v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100709350();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v44 = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v32 = v10;
  char v43 = 1;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v13 = v12;
  uint64_t v31 = v11;
  char v42 = 2;
  swift_bridgeObjectRetain();
  int v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v41 = 3;
  int v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v40 = 4;
  int v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v39 = 5;
  int v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v38 = 6;
  int v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v37 = 7;
  int v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v36 = 8;
  int v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v35 = 9;
  int v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v34 = 10;
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v22 = v14;
  char v33 = 11;
  swift_bridgeObjectRetain();
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v17 = v22;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v32 & 1;
  *(void *)(a2 + 16) = v31;
  *(void *)(a2 + 24) = v13;
  *(unsigned char *)(a2 + 32) = v30;
  *(unsigned char *)(a2 + 33) = v29;
  *(unsigned char *)(a2 + 34) = v28;
  *(unsigned char *)(a2 + 35) = v27;
  *(unsigned char *)(a2 + 36) = v26;
  *(unsigned char *)(a2 + 37) = v25;
  *(unsigned char *)(a2 + 38) = v24;
  *(unsigned char *)(a2 + 39) = v23;
  *(void *)(a2 + 40) = v21;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = v20;
  *(void *)(a2 + 64) = v16;
  return result;
}

uint64_t sub_100705F9C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6E756F5379616C70 && a2 == 0xE900000000000064
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C656363417475 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x756B6F6F4C63666ELL && a2 == 0xE900000000000070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x756B6F6F4C656C62 && a2 == 0xE900000000000070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65646F4D74736F6CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6857796669746F6ELL && a2 == 0xEF646E756F466E65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7449656D616E6572 && a2 == 0xEA00000000006D65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E69646E69467462 && a2 == 0xE900000000000067 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001014055F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 1886544245 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000101405610)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 11;
    }
    else {
      return 12;
    }
  }
}